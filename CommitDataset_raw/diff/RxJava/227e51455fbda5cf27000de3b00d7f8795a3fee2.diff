[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +    println(s"$x*$x is being calculated on thread ${Thread.currentThread().getId}"), +    println(s"map() is being called on thread ${Thread.currentThread().getId}"), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +    println(s"$x*$x is being calculated on thread ${Thread.currentThread().getId}"), +    println(s"map() is being called on thread ${Thread.currentThread().getId}"), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/TestSchedulerExample.scala, +    val inOrdr = inOrder(observer), +    sub.unsubscribe(), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +    println(s"$x*$x is being calculated on thread ${Thread.currentThread().getId}"), +    println(s"map() is being called on thread ${Thread.currentThread().getId}"), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/TestSchedulerExample.scala, +    val inOrdr = inOrder(observer), +    sub.unsubscribe(), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +    new Scheduler() {, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +    println(s"$x*$x is being calculated on thread ${Thread.currentThread().getId}"), +    println(s"map() is being called on thread ${Thread.currentThread().getId}"), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/TestSchedulerExample.scala, +    val inOrdr = inOrder(observer), +    sub.unsubscribe(), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +    new Scheduler() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subscriptions/BooleanSubscription.scala, +        if(!super.isUnsubscribed) {, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +    println(s"$x*$x is being calculated on thread ${Thread.currentThread().getId}"), +    println(s"map() is being called on thread ${Thread.currentThread().getId}"), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/TestSchedulerExample.scala, +    val inOrdr = inOrder(observer), +    sub.unsubscribe(), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +    new Scheduler() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subscriptions/BooleanSubscription.scala, +        if(!super.isUnsubscribed) {, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +  @Test def printJavaInstanceMethods(): Unit = {, +  @Test def printScalaInstanceMethods(): Unit = {, +  @Test def printJavaStaticMethods(): Unit = {, +  @Test def printScalaCompanionMethods(): Unit = {, +  @Test def printDefaultMethodCorrespondence(): Unit = {, +  @Test def printCorrectedMethodCorrespondence(): Unit = {, +  @Test def checkScalaMethodPresenceVerbose(): Unit = {, +  @Test def checkJavaMethodPresence(): Unit = {, +  @Test def checkScalaMethodPresence(): Unit = {, +    println(s"\nThis table was generated on ${Calendar.getInstance().getTime}."), +    println(s"**Do not edit**. Instead, edit `${getClass.getCanonicalName}`."), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +    println(s"$x*$x is being calculated on thread ${Thread.currentThread().getId}"), +    println(s"map() is being called on thread ${Thread.currentThread().getId}"), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/TestSchedulerExample.scala, +    val inOrdr = inOrder(observer), +    sub.unsubscribe(), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +    new Scheduler() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subscriptions/BooleanSubscription.scala, +        if(!super.isUnsubscribed) {, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +  @Test def printJavaInstanceMethods(): Unit = {, +  @Test def printScalaInstanceMethods(): Unit = {, +  @Test def printJavaStaticMethods(): Unit = {, +  @Test def printScalaCompanionMethods(): Unit = {, +  @Test def printDefaultMethodCorrespondence(): Unit = {, +  @Test def printCorrectedMethodCorrespondence(): Unit = {, +  @Test def checkScalaMethodPresenceVerbose(): Unit = {, +  @Test def checkJavaMethodPresence(): Unit = {, +  @Test def checkScalaMethodPresence(): Unit = {, +    println(s"\nThis table was generated on ${Calendar.getInstance().getTime}."), +    println(s"**Do not edit**. Instead, edit `${getClass.getCanonicalName}`."), +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +    assertEquals(1, rx.Observable.from(1, 2).firstOrDefault(10).toBlockingObservable.single), +    assertEquals(10, rx.Observable.empty().firstOrDefault(10).toBlockingObservable.single), +      rx.Observable.error(new Exception(msg)).firstOrDefault(10).toBlockingObservable.single, +      case e: Exception => receivedMsg = e.getCause.getMessage]