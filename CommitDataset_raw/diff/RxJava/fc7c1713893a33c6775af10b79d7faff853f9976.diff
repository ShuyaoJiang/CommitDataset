[+++ b/src/main/java/rx/Observable.java, +     * Returns an Observable that emits the items emitted by the source Observable or the items of an alternate Observable if the source Observable, +     * is empty., +     * <p>, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code switchIfEmpty} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param alternate, +     *              the alternate Observable to subscribe to if the source does not emit any items, +     * @return  an Observable that emits the items emitted by the source Observable or the items of an alternate Observable if the source Observable, +     *          is empty., +     */, +    public final Observable<T> switchIfEmpty(Observable<T> alternate) {, +        return lift(new OperatorSwitchIfEmpty<T>(alternate));, +    }, +, +    /**, +++ b/src/main/java/rx/Observable.java, +     * Returns an Observable that emits the items emitted by the source Observable or the items of an alternate Observable if the source Observable, +     * is empty., +     * <p>, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code switchIfEmpty} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param alternate, +     *              the alternate Observable to subscribe to if the source does not emit any items, +     * @return  an Observable that emits the items emitted by the source Observable or the items of an alternate Observable if the source Observable, +     *          is empty., +     */, +    public final Observable<T> switchIfEmpty(Observable<T> alternate) {, +        return lift(new OperatorSwitchIfEmpty<T>(alternate));, +    }, +, +    /**, +++ b/src/main/java/rx/internal/operators/OperatorSwitchIfEmpty.java, +/**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.internal.operators;, +, +import rx.Observable;, +import rx.Producer;, +import rx.Subscriber;, +, +import java.util.concurrent.atomic.AtomicLong;, +, +/**, + * If the Observable completes without emitting any items, subscribe to an alternate Observable. Allows for similar, + * functionality to {@link rx.internal.operators.OperatorDefaultIfEmpty} except instead of one item being emitted when, + * empty, the results of the given Observable will be emitted., + */, +public class OperatorSwitchIfEmpty<T> implements Observable.Operator<T, T> {, +    private final Observable<T> alternate;, +, +    public OperatorSwitchIfEmpty(Observable<T> alternate) {, +        this.alternate = alternate;, +    }, +, +    @Override, +    public Subscriber<? super T> call(Subscriber<? super T> child) {, +        return new SwitchIfEmptySubscriber(child);, +    }, +, +    private class SwitchIfEmptySubscriber extends Subscriber<T> {, +, +        boolean empty = true;, +        final AtomicLong consumerCapacity = new AtomicLong(0l);, +, +        private final Subscriber<? super T> child;, +, +        public SwitchIfEmptySubscriber(Subscriber<? super T> child) {, +            super(child);, +, +            this.child = child;, +        }, +, +        @Override, +        public void setProducer(final Producer producer) {, +            super.setProducer(new Producer() {, +                @Override, +                public void request(long n) {, +                    if (empty) {, +                        consumerCapacity.set(n);, +                    }]