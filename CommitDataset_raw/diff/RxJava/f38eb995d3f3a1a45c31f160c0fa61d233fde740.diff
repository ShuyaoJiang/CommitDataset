[+++ b/src/main/java/io/reactivex/Flowable.java, +     * Ensures that the event flow between the upstream and downstream follow, +     * the Reactive-Streams 1.0 specification by honoring the 3 additional rules, +     * (which are omitted in standard operators due to performance reasons)., +     * <ul>, +     * <li>§1.3: onNext should not be called concurrently until onSubscribe returns</li>, +     * <li>§2.3: onError or onComplete must not call cancel</li>, +     * <li>§3.9: negative requests should emit an onError(IllegalArgumentException)</li>, +     * </ul>, +     * In addition, if rule §2.12 (onSubscribe must be called at most once) is violated,, +     * the sequence is cancelled an onError(IllegalStateException) is emitted., +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator doesn't interfere with backpressure which is determined by the source {@code Publisher}'s backpressure, +     *  behavior.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code strict} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @return the new Flowable instance, +     * @since 2.0.5 - experimental, +     */, +    @BackpressureSupport(BackpressureKind.PASS_THROUGH), +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    @CheckReturnValue, +    public final Flowable<T> strict() {, +        return RxJavaPlugins.onAssembly(new FlowableStrict<T>(this));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Flowable.java, +     * Ensures that the event flow between the upstream and downstream follow, +     * the Reactive-Streams 1.0 specification by honoring the 3 additional rules, +     * (which are omitted in standard operators due to performance reasons)., +     * <ul>, +     * <li>§1.3: onNext should not be called concurrently until onSubscribe returns</li>, +     * <li>§2.3: onError or onComplete must not call cancel</li>, +     * <li>§3.9: negative requests should emit an onError(IllegalArgumentException)</li>, +     * </ul>, +     * In addition, if rule §2.12 (onSubscribe must be called at most once) is violated,, +     * the sequence is cancelled an onError(IllegalStateException) is emitted., +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator doesn't interfere with backpressure which is determined by the source {@code Publisher}'s backpressure, +     *  behavior.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code strict} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @return the new Flowable instance, +     * @since 2.0.5 - experimental, +     */, +    @BackpressureSupport(BackpressureKind.PASS_THROUGH), +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    @CheckReturnValue, +    public final Flowable<T> strict() {, +        return RxJavaPlugins.onAssembly(new FlowableStrict<T>(this));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableStrict.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators.flowable;, +, +import java.util.concurrent.atomic.*;, +, +import org.reactivestreams.*;, +, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +import io.reactivex.internal.util.*;, +, +/**, + * Ensures that the event flow between the upstream and downstream follow, + * the Reactive-Streams 1.0 specification by honoring the 3 additional rules, + * (which are omitted in standard operators due to performance reasons)., + * <ul>, + * <li>§1.3: onNext should not be called concurrently until onSubscribe returns</li>, + * <li>§2.3: onError or onComplete must not call cancel</li>, + * <li>§3.9: negative requests should emit an onError(IllegalArgumentException)</li>, + * </ul>, + * In addition, if rule §2.12 (onSubscribe must be called at most once) is violated,, + * the sequence is cancelled an onError(IllegalStateException) is emitted., + * @param <T> the value type, + */, +public final class FlowableStrict<T> extends AbstractFlowableWithUpstream<T, T> {, +, +    public FlowableStrict(Publisher<T> source) {, +        super(source);]