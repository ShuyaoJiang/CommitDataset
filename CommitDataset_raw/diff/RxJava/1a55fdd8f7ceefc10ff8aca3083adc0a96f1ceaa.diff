[+++ b/src/main/java/io/reactivex/Observable.java, +        Objects.requireNonNull(o);, +    public final <T2> Observable<T2> dematerialize() {, +        Observable<Try<Optional<T2>>> m = (Observable<Try<Optional<T2>>>)this;, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v4, "The fourth value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v4, "The fourth value is null");, +        Objects.requireNonNull(v5, "The fifth value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v4, "The fourth value is null");, +        Objects.requireNonNull(v5, "The fifth value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v4, "The fourth value is null");, +        Objects.requireNonNull(v5, "The fifth value is null");, +        Objects.requireNonNull(v6, "The sixth value is null");, +        Objects.requireNonNull(v7, "The seventh value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v4, "The fourth value is null");, +        Objects.requireNonNull(v5, "The fifth value is null");, +        Objects.requireNonNull(v6, "The sixth value is null");, +        Objects.requireNonNull(v7, "The seventh value is null");, +        Objects.requireNonNull(v8, "The eigth value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v4, "The fourth value is null");, +        Objects.requireNonNull(v5, "The fifth value is null");, +        Objects.requireNonNull(v6, "The sixth value is null");, +        Objects.requireNonNull(v7, "The seventh value is null");, +        Objects.requireNonNull(v8, "The eigth value is null");, +        Objects.requireNonNull(v9, "The ninth is null");, +    public final Observable<T> takeFirst(Predicate<? super T> predicate) {, +        return filter(predicate).take(1);, +    }, +, +++ b/src/main/java/io/reactivex/Observable.java, +        Objects.requireNonNull(o);, +    public final <T2> Observable<T2> dematerialize() {, +        Observable<Try<Optional<T2>>> m = (Observable<Try<Optional<T2>>>)this;, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v4, "The fourth value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v4, "The fourth value is null");, +        Objects.requireNonNull(v5, "The fifth value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v4, "The fourth value is null");, +        Objects.requireNonNull(v5, "The fifth value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v4, "The fourth value is null");, +        Objects.requireNonNull(v5, "The fifth value is null");, +        Objects.requireNonNull(v6, "The sixth value is null");, +        Objects.requireNonNull(v7, "The seventh value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v4, "The fourth value is null");, +        Objects.requireNonNull(v5, "The fifth value is null");, +        Objects.requireNonNull(v6, "The sixth value is null");, +        Objects.requireNonNull(v7, "The seventh value is null");, +        Objects.requireNonNull(v8, "The eigth value is null");, +        Objects.requireNonNull(v1, "The first value is null");, +        Objects.requireNonNull(v2, "The second value is null");, +        Objects.requireNonNull(v3, "The third value is null");, +        Objects.requireNonNull(v4, "The fourth value is null");, +        Objects.requireNonNull(v5, "The fifth value is null");, +        Objects.requireNonNull(v6, "The sixth value is null");, +        Objects.requireNonNull(v7, "The seventh value is null");, +        Objects.requireNonNull(v8, "The eigth value is null");, +        Objects.requireNonNull(v9, "The ninth is null");, +    public final Observable<T> takeFirst(Predicate<? super T> predicate) {, +        return filter(predicate).take(1);]