[+++ b/src/test/java/io/reactivex/internal/operators/OperatorDelayTest.java, +package io.reactivex.internal.operators;, +, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.*;, +import java.util.concurrent.TimeUnit;, +import java.util.function.*;, +, +import org.junit.*;, +import org.mockito.InOrder;, +import org.reactivestreams.Subscriber;, +, +import io.reactivex.*;, +import io.reactivex.Observable;, +import io.reactivex.exceptions.TestException;, +import io.reactivex.schedulers.*;, +import io.reactivex.subjects.PublishSubject;, +import io.reactivex.subscribers.TestSubscriber;, +, +public class OperatorDelayTest {, +    private Subscriber<Long> observer;, +    private Subscriber<Long> observer2;, +, +    private TestScheduler scheduler;, +, +    @Before, +    public void before() {, +        observer = TestHelper.mockSubscriber();, +        observer2 = TestHelper.mockSubscriber();, +        , +        scheduler = new TestScheduler();, +    }, +, +    @Test, +    public void testDelay() {, +        Observable<Long> source = Observable.interval(1L, TimeUnit.SECONDS, scheduler).take(3);, +        Observable<Long> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);, +        delayed.subscribe(observer);, +, +        InOrder inOrder = inOrder(observer);, +        scheduler.advanceTimeTo(1499L, TimeUnit.MILLISECONDS);, +        verify(observer, never()).onNext(anyLong());, +        verify(observer, never()).onComplete();, +        verify(observer, never()).onError(any(Throwable.class));, +, +        scheduler.advanceTimeTo(1500L, TimeUnit.MILLISECONDS);, +        inOrder.verify(observer, times(1)).onNext(0L);, +        inOrder.verify(observer, never()).onNext(anyLong());, +        verify(observer, never()).onComplete();, +        verify(observer, never()).onError(any(Throwable.class));, +, +        scheduler.advanceTimeTo(2400L, TimeUnit.MILLISECONDS);, +        inOrder.verify(observer, never()).onNext(anyLong());, +        verify(observer, never()).onComplete();, +        verify(observer, never()).onError(any(Throwable.class));, +, +        scheduler.advanceTimeTo(2500L, TimeUnit.MILLISECONDS);, +        inOrder.verify(observer, times(1)).onNext(1L);, +        inOrder.verify(observer, never()).onNext(anyLong());, +        verify(observer, never()).onComplete();, +        verify(observer, never()).onError(any(Throwable.class));, +, +        scheduler.advanceTimeTo(3400L, TimeUnit.MILLISECONDS);, +        inOrder.verify(observer, never()).onNext(anyLong());, +        verify(observer, never()).onComplete();, +        verify(observer, never()).onError(any(Throwable.class));, +, +        scheduler.advanceTimeTo(3500L, TimeUnit.MILLISECONDS);, +        inOrder.verify(observer, times(1)).onNext(2L);, +        verify(observer, times(1)).onComplete();, +        verify(observer, never()).onError(any(Throwable.class));, +    }, +, +    @Test, +    public void testLongDelay() {, +        Observable<Long> source = Observable.interval(1L, TimeUnit.SECONDS, scheduler).take(3);, +        Observable<Long> delayed = source.delay(5L, TimeUnit.SECONDS, scheduler);, +        delayed.subscribe(observer);, +, +        InOrder inOrder = inOrder(observer);, +, +        scheduler.advanceTimeTo(5999L, TimeUnit.MILLISECONDS);, +        verify(observer, never()).onNext(anyLong());, +        verify(observer, never()).onComplete();, +        verify(observer, never()).onError(any(Throwable.class));, +, +        scheduler.advanceTimeTo(6000L, TimeUnit.MILLISECONDS);, +        inOrder.verify(observer, times(1)).onNext(0L);, +        scheduler.advanceTimeTo(6999L, TimeUnit.MILLISECONDS);, +        inOrder.verify(observer, never()).onNext(anyLong());, +        scheduler.advanceTimeTo(7000L, TimeUnit.MILLISECONDS);, +        inOrder.verify(observer, times(1)).onNext(1L);, +        scheduler.advanceTimeTo(7999L, TimeUnit.MILLISECONDS);, +        inOrder.verify(observer, never()).onNext(anyLong());, +        scheduler.advanceTimeTo(8000L, TimeUnit.MILLISECONDS);, +        inOrder.verify(observer, times(1)).onNext(2L);, +        inOrder.verify(observer, times(1)).onComplete();]