[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationJoin;, +    /**, +     * Correlates the elements of two sequences based on overlapping durations., +     * @param right The right observable sequence to join elements for., +     * @param leftDurationSelector A function to select the duration of each , +     *                             element of this observable sequence, used to, +     *                             determine overlap., +     * @param rightDurationSelector A function to select the duration of each, +     *                              element of the right observable sequence, , +     *                              used to determine overlap., +     * @param resultSelector A function invoked to compute a result element , +     *                       for any two overlapping elements of the left and, +     *                       right observable sequences., +     * @return An observable sequence that contains result elements computed, +     *         from source elements that have an overlapping duration., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229750.aspx'>MSDN: Observable.Join</a>, +     */, +    public <TRight, TLeftDuration, TRightDuration, R> Observable<R> join(Observable<TRight> right, Func1<T, Observable<TLeftDuration>> leftDurationSelector,, +            Func1<TRight, Observable<TRightDuration>> rightDurationSelector,, +            Func2<T, TRight, R> resultSelector) {, +        return create(new OperationJoin<T, TRight, TLeftDuration, TRightDuration, R>(this, right, leftDurationSelector, rightDurationSelector, resultSelector));, +    }    , +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationJoin;, +    /**, +     * Correlates the elements of two sequences based on overlapping durations., +     * @param right The right observable sequence to join elements for., +     * @param leftDurationSelector A function to select the duration of each , +     *                             element of this observable sequence, used to, +     *                             determine overlap., +     * @param rightDurationSelector A function to select the duration of each, +     *                              element of the right observable sequence, , +     *                              used to determine overlap., +     * @param resultSelector A function invoked to compute a result element , +     *                       for any two overlapping elements of the left and, +     *                       right observable sequences., +     * @return An observable sequence that contains result elements computed, +     *         from source elements that have an overlapping duration., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229750.aspx'>MSDN: Observable.Join</a>, +     */, +    public <TRight, TLeftDuration, TRightDuration, R> Observable<R> join(Observable<TRight> right, Func1<T, Observable<TLeftDuration>> leftDurationSelector,, +            Func1<TRight, Observable<TRightDuration>> rightDurationSelector,, +            Func2<T, TRight, R> resultSelector) {, +        return create(new OperationJoin<T, TRight, TLeftDuration, TRightDuration, R>(this, right, leftDurationSelector, rightDurationSelector, resultSelector));, +    }    , +++ b/rxjava-core/src/main/java/rx/operators/OperationJoin.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.HashMap;, +import java.util.Map;, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscription;, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.SerialSubscription;, +import rx.util.functions.Func1;, +import rx.util.functions.Func2;, +, +/**, + * Correlates the elements of two sequences based on overlapping durations., + */, +public class OperationJoin<TLeft, TRight, TLeftDuration, TRightDuration, R> implements OnSubscribeFunc<R> {, +    final Observable<TLeft> left;, +    final Observable<TRight> right;, +    final Func1<TLeft, Observable<TLeftDuration>> leftDurationSelector;, +    final Func1<TRight, Observable<TRightDuration>> rightDurationSelector;, +    final Func2<TLeft, TRight, R> resultSelector;, +    public OperationJoin(, +            Observable<TLeft> left, , +            Observable<TRight> right,, +            Func1<TLeft, Observable<TLeftDuration>> leftDurationSelector,, +            Func1<TRight, Observable<TRightDuration>> rightDurationSelector,, +            Func2<TLeft, TRight, R> resultSelector) {, +        this.left = left;, +        this.right = right;, +        this.leftDurationSelector = leftDurationSelector;, +        this.rightDurationSelector = rightDurationSelector;, +        this.resultSelector = resultSelector;, +    }, +, +    @Override, +    public Subscription onSubscribe(Observer<? super R> t1) {, +        SerialSubscription cancel = new SerialSubscription();]