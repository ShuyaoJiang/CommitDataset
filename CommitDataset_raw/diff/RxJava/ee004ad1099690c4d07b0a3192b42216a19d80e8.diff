[+++ b/src/main/java/io/reactivex/Single.java, +import java.util.NoSuchElementException;, +        ObjectHelper.requireNonNull(zipper, "zipper is null");, +        return RxJavaPlugins.onAssembly(new SingleZipIterable<T, R>(sources, zipper));, +        ObjectHelper.requireNonNull(zipper, "zipper is null");, +        if (sources.length == 0) {, +            return error(new NoSuchElementException());, +        return RxJavaPlugins.onAssembly(new SingleZipArray<T, R>(sources, zipper));, +++ b/src/main/java/io/reactivex/Single.java, +import java.util.NoSuchElementException;, +        ObjectHelper.requireNonNull(zipper, "zipper is null");, +        return RxJavaPlugins.onAssembly(new SingleZipIterable<T, R>(sources, zipper));, +        ObjectHelper.requireNonNull(zipper, "zipper is null");, +        if (sources.length == 0) {, +            return error(new NoSuchElementException());, +        return RxJavaPlugins.onAssembly(new SingleZipArray<T, R>(sources, zipper));, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeZipArray.java, +            MaybeSource<? extends T> source = sources[i];, +, +            if (source == null) {, +                parent.innerError(new NullPointerException("One of the sources is null"), i);, +                return;, +            }, +            source.subscribe(parent.observers[i]);, +++ b/src/main/java/io/reactivex/Single.java, +import java.util.NoSuchElementException;, +        ObjectHelper.requireNonNull(zipper, "zipper is null");, +        return RxJavaPlugins.onAssembly(new SingleZipIterable<T, R>(sources, zipper));, +        ObjectHelper.requireNonNull(zipper, "zipper is null");, +        if (sources.length == 0) {, +            return error(new NoSuchElementException());, +        return RxJavaPlugins.onAssembly(new SingleZipArray<T, R>(sources, zipper));, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeZipArray.java, +            MaybeSource<? extends T> source = sources[i];, +, +            if (source == null) {, +                parent.innerError(new NullPointerException("One of the sources is null"), i);, +                return;, +            }, +            source.subscribe(parent.observers[i]);, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeZipIterable.java, +                if (source == null) {, +                    EmptyDisposable.error(new NullPointerException("One of the sources is null"), observer);, +                    return;, +                }, +++ b/src/main/java/io/reactivex/Single.java, +import java.util.NoSuchElementException;, +        ObjectHelper.requireNonNull(zipper, "zipper is null");, +        return RxJavaPlugins.onAssembly(new SingleZipIterable<T, R>(sources, zipper));, +        ObjectHelper.requireNonNull(zipper, "zipper is null");, +        if (sources.length == 0) {, +            return error(new NoSuchElementException());, +        return RxJavaPlugins.onAssembly(new SingleZipArray<T, R>(sources, zipper));, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeZipArray.java, +            MaybeSource<? extends T> source = sources[i];, +, +            if (source == null) {, +                parent.innerError(new NullPointerException("One of the sources is null"), i);, +                return;, +            }, +            source.subscribe(parent.observers[i]);, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeZipIterable.java, +                if (source == null) {, +                    EmptyDisposable.error(new NullPointerException("One of the sources is null"), observer);, +                    return;, +                }, +++ b/src/main/java/io/reactivex/internal/operators/single/SingleMap.java, +        source.subscribe(new MapSingleObserver<T, R>(t, mapper));, +    }, +, +    static final class MapSingleObserver<T, R> implements SingleObserver<T> {, +, +        final SingleObserver<? super R> t;, +, +        final Function<? super T, ? extends R> mapper;, +, +        MapSingleObserver(SingleObserver<? super R> t, Function<? super T, ? extends R> mapper) {, +            this.t = t;, +            this.mapper = mapper;, +        }, +, +++ b/src/main/java/io/reactivex/Single.java, +import java.util.NoSuchElementException;, +        ObjectHelper.requireNonNull(zipper, "zipper is null");, +        return RxJavaPlugins.onAssembly(new SingleZipIterable<T, R>(sources, zipper));, +        ObjectHelper.requireNonNull(zipper, "zipper is null");, +        if (sources.length == 0) {, +            return error(new NoSuchElementException());, +        return RxJavaPlugins.onAssembly(new SingleZipArray<T, R>(sources, zipper));, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeZipArray.java, +            MaybeSource<? extends T> source = sources[i];, +, +            if (source == null) {, +                parent.innerError(new NullPointerException("One of the sources is null"), i);, +                return;, +            }, +            source.subscribe(parent.observers[i]);, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeZipIterable.java, +                if (source == null) {, +                    EmptyDisposable.error(new NullPointerException("One of the sources is null"), observer);]