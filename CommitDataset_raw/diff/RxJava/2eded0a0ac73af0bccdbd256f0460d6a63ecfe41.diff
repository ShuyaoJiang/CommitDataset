[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationUsing;, +     * For an empty source, it causes an ArithmeticException., +     * Constructs an observable sequence that depends on a resource object., +     *, +     * @param resourceFactory, +     *            The factory function to obtain a resource object., +     * @param observableFactory, +     *            The factory function to obtain an observable sequence that depends on the obtained resource., +     * @return, +     *            The observable sequence whose lifetime controls the lifetime of the dependent resource object., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229585(v=vs.103).aspx">MSDN: Observable.Using</a>, +     */, +    public static <T, RESOURCE extends Subscription> Observable<T> using(Func0<RESOURCE> resourceFactory, Func1<RESOURCE, Observable<T>> observableFactory) {, +        return create(OperationUsing.using(resourceFactory, observableFactory));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationUsing;, +     * For an empty source, it causes an ArithmeticException., +     * Constructs an observable sequence that depends on a resource object., +     *, +     * @param resourceFactory, +     *            The factory function to obtain a resource object., +     * @param observableFactory, +     *            The factory function to obtain an observable sequence that depends on the obtained resource., +     * @return, +     *            The observable sequence whose lifetime controls the lifetime of the dependent resource object., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229585(v=vs.103).aspx">MSDN: Observable.Using</a>, +     */, +    public static <T, RESOURCE extends Subscription> Observable<T> using(Func0<RESOURCE> resourceFactory, Func1<RESOURCE, Observable<T>> observableFactory) {, +        return create(OperationUsing.using(resourceFactory, observableFactory));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationAverage.java, +                return result.current / result.count; // may throw DivisionByZero, this should be correct..., +                return result.current / result.count; // may throw DivisionByZero, this should be correct..., +                    throw new ArithmeticException("divide by zero");, +                    throw new ArithmeticException("divide by zero");, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationUsing;, +     * For an empty source, it causes an ArithmeticException., +     * Constructs an observable sequence that depends on a resource object., +     *, +     * @param resourceFactory, +     *            The factory function to obtain a resource object., +     * @param observableFactory, +     *            The factory function to obtain an observable sequence that depends on the obtained resource., +     * @return, +     *            The observable sequence whose lifetime controls the lifetime of the dependent resource object., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229585(v=vs.103).aspx">MSDN: Observable.Using</a>, +     */, +    public static <T, RESOURCE extends Subscription> Observable<T> using(Func0<RESOURCE> resourceFactory, Func1<RESOURCE, Observable<T>> observableFactory) {, +        return create(OperationUsing.using(resourceFactory, observableFactory));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationAverage.java, +                return result.current / result.count; // may throw DivisionByZero, this should be correct..., +                return result.current / result.count; // may throw DivisionByZero, this should be correct..., +                    throw new ArithmeticException("divide by zero");, +                    throw new ArithmeticException("divide by zero");, +++ b/rxjava-core/src/main/java/rx/operators/OperationUsing.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscription;, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Func0;, +import rx.util.functions.Func1;, +, +/**, + * Constructs an observable sequence that depends on a resource object., + */, +public class OperationUsing {, +, +    public static <T, RESOURCE extends Subscription> OnSubscribeFunc<T> using(, +            final Func0<RESOURCE> resourceFactory,, +            final Func1<RESOURCE, Observable<T>> observableFactory) {, +        return new OnSubscribeFunc<T>() {]