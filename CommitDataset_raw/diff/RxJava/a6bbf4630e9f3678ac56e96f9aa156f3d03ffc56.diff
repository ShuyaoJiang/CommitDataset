[+++ b/src/main/java/io/reactivex/Flowable.java, +        Flowable<Notification<T2>> m = (Flowable<Notification<T2>>)this;, +    public final Flowable<T> doOnEach(final Consumer<? super Notification<T>> onNotification) {, +    public final Flowable<Notification<T>> materialize() {, +++ b/src/main/java/io/reactivex/Flowable.java, +        Flowable<Notification<T2>> m = (Flowable<Notification<T2>>)this;, +    public final Flowable<T> doOnEach(final Consumer<? super Notification<T>> onNotification) {, +    public final Flowable<Notification<T>> materialize() {, +++ b/src/main/java/io/reactivex/Notification.java, +import io.reactivex.internal.util.NotificationLite;, + * Represents the reactive signal types: onNext, onError and onComplete and, + * holds their parameter values (a value, a Throwable, nothing)., + * @param <T> the value type, +public final class Notification<T> {, +    final Object value;, +    , +    /** Not meant to be implemented externally. */, +    private Notification(Object value) {, +        this.value = value;, +    /**, +     * Returns true if this notification is an onComplete signal., +     * @return true if this notification is an onComplete signal, +     */, +    public boolean isOnComplete() {, +        return value == null;, +    /**, +     * Returns true if this notification is an onError signal and, +     * {@link #getError()} returns the contained Throwable., +     * @return true if this notification is an onError signal, +     * @see #getError(), +     */, +    public boolean isOnError() {, +        return NotificationLite.isError(value);, +    /**, +     * Returns true if this notification is an onNext signal and, +     * {@link #getValue()} returns the contained value., +     * @return true if this notification is an onNext signal, +     * @see #getValue(), +     */, +    public boolean isOnNext() {, +        Object o = value;, +        return o != null && !NotificationLite.isError(o);, +    /**, +     * Returns the contained value if this notification is an onNext, +     * signal, null otherwise., +     * @return the value contained or null, +     * @see #isOnNext(), +     */, +    @SuppressWarnings("unchecked"), +    public T getValue() {, +        Object o = value;, +        if (o != null && !NotificationLite.isError(o)) {, +            return (T)value;, +    , +    /**, +     * Returns the container Throwable error if this notification is an onError, +     * signal, null otherwise., +     * @return the Throwable error contained or null, +     * @see #isOnError(), +     */, +    public Throwable getError() {, +        Object o = value;, +        if (NotificationLite.isError(o)) {, +            return NotificationLite.getError(o);, +        }, +        return null;, +    }, +    , +    @Override, +    public boolean equals(Object obj) {, +        if (obj instanceof Notification) {, +            Notification<?> n = (Notification<?>) obj;, +            return Objects.equals(value, n.value);, +        }, +        return false;, +    }, +    , +    @Override, +    public int hashCode() {, +        Object o = value;, +        return o != null ? o.hashCode() : 0;, +    }, +    , +    @Override, +    public String toString() {, +        Object o = value;, +        if (o == null) {, +            return "OnCompleteNotification";, +        }, +        if (NotificationLite.isError(o)) {, +            return "OnErrorNotification[" + NotificationLite.getError(o) + "]";, +        }, +        return "OnNextNotification[" + value + "]";, +    }, +    , +    /**, +     * Constructs an onNext notification containing the given value., +     * @param <T> the value type, +     * @param value the value to carry around in the notification, not null, +     * @return the new Notification instance]