[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param interval interval size in time units, +    public static Observable<Void> timer(long interval, TimeUnit unit) {, +        return create(OperationTimer.timer(interval, unit));, +     * @param interval interval size in time units, +    public static Observable<Void> timer(long interval, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationTimer.timer(interval, unit, scheduler));, +     * Returns a {@link ConnectableObservable} that shares a single subscription, +     * to the underlying Observable that will replay all of its items and, +     * notifications to any future {@link Observer} on the given scheduler, +     *, +     * @param scheduler, +     * @return , +     * , +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh211699.aspx'>MSDN: Observable.Replay</a>, +     */, +    public ConnectableObservable<T> replay(Scheduler scheduler) {, +        return OperationMulticast.multicast(this, ReplaySubject.<T> create());, +    }, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param interval interval size in time units, +    public static Observable<Void> timer(long interval, TimeUnit unit) {, +        return create(OperationTimer.timer(interval, unit));, +     * @param interval interval size in time units, +    public static Observable<Void> timer(long interval, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationTimer.timer(interval, unit, scheduler));, +     * Returns a {@link ConnectableObservable} that shares a single subscription, +     * to the underlying Observable that will replay all of its items and, +     * notifications to any future {@link Observer} on the given scheduler, +     *, +     * @param scheduler, +     * @return , +     * , +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh211699.aspx'>MSDN: Observable.Replay</a>, +     */, +    public ConnectableObservable<T> replay(Scheduler scheduler) {, +        return OperationMulticast.multicast(this, ReplaySubject.<T> create());, +    }, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationDelay.java, +                ConnectableObservable<T> co = Observable.timer(delay, unit, scheduler).map(new Func1<Void, T>() {, +                    public T call(Void ignored) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param interval interval size in time units, +    public static Observable<Void> timer(long interval, TimeUnit unit) {, +        return create(OperationTimer.timer(interval, unit));, +     * @param interval interval size in time units, +    public static Observable<Void> timer(long interval, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationTimer.timer(interval, unit, scheduler));, +     * Returns a {@link ConnectableObservable} that shares a single subscription, +     * to the underlying Observable that will replay all of its items and, +     * notifications to any future {@link Observer} on the given scheduler, +     *, +     * @param scheduler, +     * @return , +     * , +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh211699.aspx'>MSDN: Observable.Replay</a>, +     */, +    public ConnectableObservable<T> replay(Scheduler scheduler) {, +        return OperationMulticast.multicast(this, ReplaySubject.<T> create());, +    }, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationDelay.java, +                ConnectableObservable<T> co = Observable.timer(delay, unit, scheduler).map(new Func1<Void, T>() {, +                    public T call(Void ignored) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationReplay.java, + /**, +  * Copyright 2013 Netflix, Inc., +  *, +  * Licensed under the Apache License, Version 2.0 (the "License");, +  * you may not use this file except in compliance with the License., +  * You may obtain a copy of the License at, +  *, +  * http://www.apache.org/licenses/LICENSE-2.0, +  *, +  * Unless required by applicable law or agreed to in writing, software, +  * distributed under the License is distributed on an "AS IS" BASIS,, +  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +  * See the License for the specific language governing permissions and, +  * limitations under the License., +  */, +package rx.operators;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Scheduler;, +import rx.Subscription;, +import rx.subjects.Subject;, +import rx.subscriptions.Subscriptions;]