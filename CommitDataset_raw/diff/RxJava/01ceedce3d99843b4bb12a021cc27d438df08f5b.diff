[+++ b/src/main/java/rx/internal/operators/OperatorWindowWithObservable.java, +                        once = true;, +++ b/src/main/java/rx/internal/operators/OperatorWindowWithObservable.java, +                        once = true;, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +            _c = BackpressureUtils.getAndAddRequest(REQUESTED_UPDATER, this, n);, +++ b/src/main/java/rx/internal/operators/OperatorWindowWithObservable.java, +                        once = true;, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +            _c = BackpressureUtils.getAndAddRequest(REQUESTED_UPDATER, this, n);, +++ b/src/test/java/rx/exceptions/ExceptionsTest.java, +    @Test(expected = StackOverflowError.class), +    public void testStackOverflowIsThrown() {, +        new Observer<Integer>() {, +            @Override, +            public void onCompleted() {, +, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                e.printStackTrace();, +            }, +, +            @Override, +            public void onNext(Integer args) {, +                System.out.println(args);, +            }, +        };, +            public void onNext(Integer args) {, +                System.out.println(args);, +            }, +        });, +        b.subscribe();, +        a.subscribe(new Observer<Integer>() {, +, +            @Override, +            public void onCompleted() {, +, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                e.printStackTrace();, +            }, +, +            @Override, +            public void onNext(Integer args) {, +                b.onNext(args + 1);, +            public void onNext(Integer args) {, +                a.onNext(args + 1);, +++ b/src/main/java/rx/internal/operators/OperatorWindowWithObservable.java, +                        once = true;, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +            _c = BackpressureUtils.getAndAddRequest(REQUESTED_UPDATER, this, n);, +++ b/src/test/java/rx/exceptions/ExceptionsTest.java, +    @Test(expected = StackOverflowError.class), +    public void testStackOverflowIsThrown() {, +        new Observer<Integer>() {, +            @Override, +            public void onCompleted() {, +, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                e.printStackTrace();, +            }, +, +            @Override, +            public void onNext(Integer args) {, +                System.out.println(args);, +            }, +        };, +            public void onNext(Integer args) {, +                System.out.println(args);, +            }, +        });, +        b.subscribe();, +        a.subscribe(new Observer<Integer>() {, +, +            @Override, +            public void onCompleted() {, +, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                e.printStackTrace();, +            }, +, +            @Override, +            public void onNext(Integer args) {, +                b.onNext(args + 1);, +            public void onNext(Integer args) {, +                a.onNext(args + 1);, +++ b/src/test/java/rx/internal/operators/OperatorTakeLastTest.java, +import java.util.ArrayList;, +import java.util.List;, +    ]