[+++ b/src/main/java/rx/internal/operators/OperatorToObservableList.java, +import java.util.*;, +import rx.Observable.Operator;, +import rx.*;, +import rx.internal.producers.SingleDelayedProducer;, +                    producer.setValue(result);, +++ b/src/main/java/rx/internal/operators/OperatorToObservableList.java, +import java.util.*;, +import rx.Observable.Operator;, +import rx.*;, +import rx.internal.producers.SingleDelayedProducer;, +                    producer.setValue(result);, +++ b/src/main/java/rx/internal/operators/OperatorToObservableSortedList.java, +import rx.internal.producers.SingleDelayedProducer;, +                    producer.setValue(a);, +++ b/src/main/java/rx/internal/operators/OperatorToObservableList.java, +import java.util.*;, +import rx.Observable.Operator;, +import rx.*;, +import rx.internal.producers.SingleDelayedProducer;, +                    producer.setValue(result);, +++ b/src/main/java/rx/internal/operators/OperatorToObservableSortedList.java, +import rx.internal.producers.SingleDelayedProducer;, +                    producer.setValue(a);, +++ /dev/null, +++ b/src/main/java/rx/internal/operators/OperatorToObservableList.java, +import java.util.*;, +import rx.Observable.Operator;, +import rx.*;, +import rx.internal.producers.SingleDelayedProducer;, +                    producer.setValue(result);, +++ b/src/main/java/rx/internal/operators/OperatorToObservableSortedList.java, +import rx.internal.producers.SingleDelayedProducer;, +                    producer.setValue(a);, +++ /dev/null, +++ b/src/main/java/rx/internal/producers/ProducerArbiter.java, +/**, + * Copyright 2015 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations under, + * the License., + */, +package rx.internal.producers;, +, +import rx.*;, +, +/**, + * Producer that allows changing an underlying producer atomically and correctly resume with the accumulated, + * requests., + */, +public final class ProducerArbiter implements Producer {, +    long requested;, +    Producer currentProducer;, + , +    boolean emitting;, +    long missedRequested;, +    long missedProduced;, +    Producer missedProducer;, +     , +    static final Producer NULL_PRODUCER = new Producer() {, +        @Override, +        public void request(long n) {, +            , +        }, +    };, +     , +    @Override, +    public void request(long n) {, +        if (n < 0) {, +            throw new IllegalArgumentException("n >= 0 required");, +        }, +        if (n == 0) {, +            return;, +        }, +        synchronized (this) {, +            if (emitting) {, +                missedRequested += n;, +                return;, +            }, +            emitting = true;, +        }, +        boolean skipFinal = false;, +        try {, +            long r = requested;, +            long u = r + n;, +            if (u < 0) {, +                u = Long.MAX_VALUE;, +            }, +            requested = u;, +             , +            Producer p = currentProducer;]