[+++ b/src/main/java/rx/internal/operators/OnSubscribeCombineLatest.java, +            requested.getAndAdd(n);, +++ b/src/main/java/rx/internal/operators/OnSubscribeCombineLatest.java, +            requested.getAndAdd(n);, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureDrop.java, +                BackpressureUtils.getAndAddRequest(requested, n);, +++ b/src/main/java/rx/internal/operators/OnSubscribeCombineLatest.java, +            requested.getAndAdd(n);, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureDrop.java, +                BackpressureUtils.getAndAddRequest(requested, n);, +++ b/src/test/java/rx/internal/operators/OnSubscribeCombineLatestTest.java, +++ b/src/main/java/rx/internal/operators/OnSubscribeCombineLatest.java, +            requested.getAndAdd(n);, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureDrop.java, +                BackpressureUtils.getAndAddRequest(requested, n);, +++ b/src/test/java/rx/internal/operators/OnSubscribeCombineLatestTest.java, +++ b/src/test/java/rx/internal/operators/OperatorOnBackpressureDropTest.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.atomic.AtomicInteger;, +, +    @Test, +    public void testRequestOverflow() throws InterruptedException {, +        final AtomicInteger count = new AtomicInteger();, +        int n = 10;, +        range(n).onBackpressureDrop().subscribe(new Subscriber<Long>() {, +, +            @Override, +            public void onStart() {, +                request(10);, +            }, +            , +            @Override, +            public void onCompleted() {, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                throw new RuntimeException(e);, +            }, +, +            @Override, +            public void onNext(Long t) {, +                count.incrementAndGet();, +                //cause overflow of requested if not handled properly in onBackpressureDrop operator, +                request(Long.MAX_VALUE-1);, +            }});, +        assertEquals(n, count.get());, +    }, +, +    , +    private static final Observable<Long> range(final long n) {, +        return Observable.create(new OnSubscribe<Long>() {, +, +            @Override, +            public void call(Subscriber<? super Long> s) {, +                for (long i=0;i < n;i++) {, +                    if (s.isUnsubscribed()) {, +                        break;, +                    }, +                    s.onNext(i);, +                }, +                s.onCompleted();, +            }, +    , +        });, +    }, +    ]