[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMapMaybe.java, +                } else {, +                    if (maxConcurrency != Integer.MAX_VALUE) {, +                        s.request(1);, +                    }, +, +                if (maxConcurrency != Integer.MAX_VALUE) {, +                    s.request(1);, +                }, +                if (maxConcurrency != Integer.MAX_VALUE) {, +                    s.request(1);, +                }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMapMaybe.java, +                } else {, +                    if (maxConcurrency != Integer.MAX_VALUE) {, +                        s.request(1);, +                    }, +, +                if (maxConcurrency != Integer.MAX_VALUE) {, +                    s.request(1);, +                }, +                if (maxConcurrency != Integer.MAX_VALUE) {, +                    s.request(1);, +                }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMapSingle.java, +                } else {, +                    if (maxConcurrency != Integer.MAX_VALUE) {, +                        s.request(1);, +                    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMapMaybe.java, +                } else {, +                    if (maxConcurrency != Integer.MAX_VALUE) {, +                        s.request(1);, +                    }, +, +                if (maxConcurrency != Integer.MAX_VALUE) {, +                    s.request(1);, +                }, +                if (maxConcurrency != Integer.MAX_VALUE) {, +                    s.request(1);, +                }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMapSingle.java, +                } else {, +                    if (maxConcurrency != Integer.MAX_VALUE) {, +                        s.request(1);, +                    }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableFlatMapMaybeTest.java, +    public void asyncFlattenNoneMaxConcurrency() {, +        Flowable.range(1, 1000), +        .flatMapMaybe(new Function<Integer, MaybeSource<Integer>>() {, +            @Override, +            public MaybeSource<Integer> apply(Integer v) throws Exception {, +                return Maybe.<Integer>empty().subscribeOn(Schedulers.computation());, +            }, +        }, false, 128), +        .take(500), +        .test(), +        .awaitDone(5, TimeUnit.SECONDS), +        .assertResult();, +    }, +, +    @Test, +    public void asyncFlattenErrorMaxConcurrency() {, +        Flowable.range(1, 1000), +        .flatMapMaybe(new Function<Integer, MaybeSource<Integer>>() {, +            @Override, +            public MaybeSource<Integer> apply(Integer v) throws Exception {, +                return Maybe.<Integer>error(new TestException()).subscribeOn(Schedulers.computation());, +            }, +        }, true, 128), +        .take(500), +        .test(), +        .awaitDone(5, TimeUnit.SECONDS), +        .assertFailure(CompositeException.class);, +    }, +, +    @Test, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMapMaybe.java, +                } else {, +                    if (maxConcurrency != Integer.MAX_VALUE) {, +                        s.request(1);, +                    }, +, +                if (maxConcurrency != Integer.MAX_VALUE) {, +                    s.request(1);, +                }, +                if (maxConcurrency != Integer.MAX_VALUE) {, +                    s.request(1);, +                }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMapSingle.java, +                } else {, +                    if (maxConcurrency != Integer.MAX_VALUE) {, +                        s.request(1);, +                    }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableFlatMapMaybeTest.java, +    public void asyncFlattenNoneMaxConcurrency() {, +        Flowable.range(1, 1000), +        .flatMapMaybe(new Function<Integer, MaybeSource<Integer>>() {, +            @Override, +            public MaybeSource<Integer> apply(Integer v) throws Exception {]