[+++ b/rxjava-core/src/test/java/rx/performance/PerformanceTest.java, +package rx.performance;, +, +import java.util.concurrent.atomic.AtomicInteger;, +, +import rx.observables.Observable;, +import rx.observables.Observer;, +import rx.util.functions.Func1;, +, +public class PerformanceTest {, +, +    /*, +     * >>> Statically typed <<<, +     * , +     * Without chaining:, +     * , +     * Sum: 710082754 Time: 130.683ms, +     * runNonCompositionalTestWithDirectLoop, +     * Sum: 710082754 Time: 21.011ms, +     * runNonCompositionalTestWithArrayOfFunctions, +     * Sum: 710082754 Time: 20.84ms, +     * , +     * , +     * With chaining (composition collapsing):, +     * , +     * Sum: 710082754 Time: 28.787ms, +     * runNonCompositionalTestWithDirectLoop, +     * Sum: 710082754 Time: 19.525ms, +     * runNonCompositionalTestWithArrayOfFunctions, +     * Sum: 710082754 Time: 19.175ms, +     * , +     * , +     * >>> Dynamically typed <<<, +     * , +     * When going via generic Functions.execute even with chained sequence:, +     * , +     * runCompositionTest, +     * Sum: 710082754 Time: 577.3ms <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< very bad when dynamic, +     * runNonCompositionalTestWithDirectLoop, +     * Sum: 710082754 Time: 31.591ms, +     * runNonCompositionalTestWithArrayOfFunctions, +     * Sum: 710082754 Time: 38.093ms, +     * runCompositionTest, +     * , +     * , +     * With Function memoization so we only pay dynamic price during sequence setup, not in onNext:, +     * , +     * , +     * Using ArrayList, +     * , +     * runCompositionTest, +     * Sum: 710082754 Time: 27.078ms, +     * runNonCompositionalTestWithDirectLoop, +     * Sum: 710082754 Time: 18.911ms, +     * runNonCompositionalTestWithArrayOfFunctions, +     * Sum: 710082754 Time: 18.852ms, +     * , +     * , +     * Using LinkedBlockingQueue, +     * , +     * runCompositionTest, +     * Sum: 710082754 Time: 46.532ms, +     * runNonCompositionalTestWithDirectLoop, +     * Sum: 710082754 Time: 18.946ms, +     * runNonCompositionalTestWithArrayOfFunctions, +     * Sum: 710082754 Time: 18.746ms, +     */, +, +    public static void main(String[] args) {, +        PerformanceTest test = new PerformanceTest();, +        Integer[] values = new Integer[100001];, +        for (int i = 0; i < values.length; i++) {, +            values[i] = i;, +        }, +, +        for (int i = 0; i < 100; i++) {, +            System.out.println("-------------------------------");, +//            test.runCompositionTestWithMultipleOperations(values);, +            test.runCompositionTest(values);, +            test.runNonCompositionalTestWithDirectLoop(values);, +            test.runNonCompositionalTestWithArrayOfFunctions(values);, +        }, +    }, +, +    public void runCompositionTestWithMultipleOperations(Integer[] values) {, +        System.out.println("runCompositionTestWithMultipleOperations");, +, +        // old code before memoizing, +        // Count: 200002 Time: 403.095ms, +, +        // new code with memoizing but no chaining, +        // Count: 200002 Time: 103.128ms, +, +        final AtomicInteger onNextSum = new AtomicInteger(0);, +        final long start = System.nanoTime();, +, +        MathFunction m = new MathFunction();, +, +        Observable<Integer> a = Observable.from(values), +                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)]