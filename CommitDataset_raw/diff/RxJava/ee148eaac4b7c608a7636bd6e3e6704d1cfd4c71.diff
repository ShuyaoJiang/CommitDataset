[+++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +import rx.observables.BlockingObservable;, +import rx.observables.StringObservable;, +++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +import rx.observables.BlockingObservable;, +import rx.observables.StringObservable;, +++ b/rxjava-core/src/main/java/rx/Observable.java, +         * See https://github.com/Netflix/RxJava/issues/216 for discussion on, +         * "Guideline 6.4: Protect calls to user code from within an operator", +     * Returns an Observable that emits no items to the {@link Observer} and, +     * Returns an Observable that emits no items to the {@link Observer} and, +     * Converts an {@link Iterable} sequence into an Observable with the, +     * specified scheduler., +     * Converts an Array into an Observable that emits the items in the Array., +     * Converts a series of items into an Observable that emits those items., +     * Converts a series of items into an Observable that emits those items., +     * Converts a series of items into an Observable that emits those items., +     * Converts a series of items into an Observable that emits those items., +     * Converts a series of items into an Observable that emits those items., +     * Converts a series of items into an Observable that emits those items., +     * Converts a series of items into an Observable that emits those items., +     * Converts a series of items into an Observable that emits those items., +     * Converts a series of items into an Observable that emits those items., +     * Generates an Observable that emits a sequence of Integers within a, +     * @param start the value of the first Integer in the sequence, +     * @param count the number of sequential Integers to generate, +     * @return an Observable that emits a range of sequential Integers, +     * Generates an Observable that emits a sequence of Integers within a, +     *, +     * @param start the value of the first Integer in the sequence, +     * @param count the number of sequential Integers to generate, +     * @return an Observable that emits a range of sequential Integers, +     * subscriber, the actual Observable is determined by the factory function., +     * @param value the item to emit, +     * Returns an Observable that emits a single item and then completes, on a, +     * @param value the item to emit, +     * @param scheduler the scheduler to emit the single item on, +     * @return an Observable that emits a single item and then completes, on a, +     * @return an Observable that never emits any items or sends any, +     *         notifications to an {@link Observer}, +     * Given an Observable that emits Observables, returns an Observable that, +     * emits the items emitted by the most recently emitted of those, +     * @return an Observable that emits only the items emitted by the Observable, +     *         most recently emitted by the source Observable, +     * Given an Observable that emits Observables, returns an Observable that, +     * emits the items emitted by the most recently emitted of those, +     * @return an Observable that emits only the items emitted by the Observable, +     *         most recently emitted by the source Observable, +     * accomplished by acquiring a mutual-exclusion lock for the object provided, +     * as the lock parameter., +     * Returns an Observable that emits an item each time interval, containing, +     * a sequential number., +     * Returns an Observable that emits an item each time interval, containing, +     * a sequential number., +     * Returns an Observable that emits one item after a given delay, and then, +     * completes., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/timer.png">, +     * @param interval interval size in time units, +     * @param unit time units to use for the interval size, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#timer">RxJava wiki: timer()</a>, +     * Returns an Observable that emits one item after a given delay, and then, +     * completes., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/timer.s.png">, +     * @param interval interval size in time units, +     * @param unit time units to use for the interval size, +     * @param scheduler the scheduler to use for scheduling the item, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#timer">RxJava wiki: timer()</a>, +     * Returns an Observable that emits the items emitted by the source, +     * Observable shifted forward in time by a specified delay. Error, +     * notifications from the source Observable are not delayed., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/delay.png">, +     *, +     * @param delay the delay to shift the source by, +     * @param unit the {@link TimeUnit} in which <code>period</code> is defined, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#delay">RxJava Wiki: delay()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229810.aspx">MSDN: Observable.Delay</a>, +     * Returns an Observable that emits the items emitted by the source, +     * Observable shifted forward in time by a specified delay. Error, +     * notifications from the source Observable are not delayed., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/delay.s.png">, +     *, +     * @param delay the delay to shift the source by, +     * @param unit the {@link TimeUnit} in which <code>period</code> is defined, +     * @param scheduler the {@link Scheduler} to use for delaying, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#delay">RxJava Wiki: delay()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229280.aspx">MSDN: Observable.Delay</a>, +     * Note: If events keep firing faster than the timeout then no items will be, +     * emitted by the resulting Observable., +     * @param timeout the time each item has to be "the most recent" of those, +     *                emitted by the source {@link Observable} to ensure that, +     *                it's not dropped, +     * @return an {@link Observable} that filters out items that are too quickly, +     *         followed by newer items]