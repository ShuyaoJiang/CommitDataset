[+++ b/rxjava-core/src/main/java/rx/observers/SafeSubscriber.java, + * It will not synchronize onNext execution. Use the {@link SerializedSubscriber} to do that., +++ b/rxjava-core/src/main/java/rx/observers/SafeSubscriber.java, + * It will not synchronize onNext execution. Use the {@link SerializedSubscriber} to do that., +++ b/rxjava-core/src/main/java/rx/observers/SerializedObserver.java, +import java.util.ArrayList;, +, +    private final Observer<? super T> actual;, +    private boolean emitting = false;, +    private boolean terminated = false;, +    private ArrayList<Object> queue = new ArrayList<Object>();, +, +    private static Sentinel NULL_SENTINEL = new Sentinel();, +    private static Sentinel COMPLETE_SENTINEL = new Sentinel();, +, +    private static class Sentinel {, +, +    }, +, +    private static class ErrorSentinel extends Sentinel {, +        final Throwable e;, +, +        ErrorSentinel(Throwable e) {, +            this.e = e;, +        }, +    }, +, +    public SerializedObserver(Observer<? super T> s) {, +        this.actual = s;, +        boolean canEmit = false;, +        ArrayList<Object> list = null;, +        synchronized (this) {, +            if (terminated) {, +                return;, +            }, +            terminated = true;, +            if (!emitting) {, +                // emit immediately, +                emitting = true;, +                canEmit = true;, +                if (queue.size() > 0) {, +                    list = queue; // copy reference, +                    queue = new ArrayList<Object>(); // new version;, +                }, +            } else {, +                // someone else is already emitting so just queue it, +                queue.add(COMPLETE_SENTINEL);, +            }, +        }, +        if (canEmit) {, +            // we won the right to emit, +            try {, +                drainQueue(list);, +            } finally {, +                synchronized (this) {, +                    emitting = false;, +                }, +            }, +        }, +    public void onError(final Throwable e) {, +        boolean canEmit = false;, +        ArrayList<Object> list = null;, +        synchronized (this) {, +            if (terminated) {, +                return;, +            }, +            terminated = true;, +            if (!emitting) {, +                // emit immediately, +                emitting = true;, +                canEmit = true;, +                if (queue.size() > 0) {, +                    list = queue; // copy reference, +                    queue = new ArrayList<Object>(); // new version;, +                }, +            } else {, +                // someone else is already emitting so just queue it ... after eliminating the queue to shortcut, +                queue.clear();, +                queue.add(new ErrorSentinel(e));, +            }, +        }, +        if (canEmit) {, +            // we won the right to emit, +            try {, +                drainQueue(list);, +            } finally {, +                synchronized (this) {, +                    emitting = false;, +                }, +            }, +        }, +        boolean canEmit = false;, +        ArrayList<Object> list = null;, +        synchronized (this) {, +            if (terminated) {, +                return;, +            }, +            if (!emitting) {, +                // emit immediately, +                emitting = true;]