[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.functions.Func5;, +import rx.util.functions.Func6;, +import rx.util.functions.Func7;, +import rx.util.functions.Func8;, +import rx.util.functions.Func9;, +     * @param o1, +     * @param o2, +     * @param zipFunction, +     *            a function that, when applied to an item emitted by each of the source, +     *            Observables, results in an item that will be emitted by the resulting Observable, +    public static <T1, T2, R> Observable<R> zip(Observable<? extends T1> o1, Observable<? extends T2> o2, Func2<? super T1, ? super T2, ? extends R> zipFunction) {, +        return create(OperationZip.zip(o1, o2, zipFunction));, +     * @param o1, +     * @param o2, +     *            a second source Observable, +     * @param o3, +     * @param zipFunction, +    public static <T1, T2, T3, R> Observable<R> zip(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Func3<? super T1, ? super T2, ? super T3, ? extends R> zipFunction) {, +        return create(OperationZip.zip(o1, o2, o3, zipFunction));, +     * @param o1, +     * @param o2, +     *            a second source Observable, +     * @param o3, +     * @param o4, +     * @param zipFunction, +    public static <T1, T2, T3, T4, R> Observable<R> zip(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Func4<? super T1, ? super T2, ? super T3, ? super T4, ? extends R> zipFunction) {, +        return create(OperationZip.zip(o1, o2, o3, o4, zipFunction));, +    }, +    , +    /**, +     * Returns an Observable that emits the results of a function of your choosing applied to, +     * combinations of four items emitted, in sequence, by four other Observables., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/zip.png">, +     * <p> {@code zip} applies this function in strict sequence, so the first item emitted by the, +     * new Observable will be the result of the function applied to the first item emitted by {@code w0}, the first item emitted by {@code w1}, the first item emitted by {@code w2}, and the first item, +     * emitted by {@code w3}; the second item emitted by, +     * the new Observable will be the result of the function applied to the second item emitted by, +     * each of those Observables; and so forth., +     * <p>, +     * The resulting {@code Observable<R>} returned from {@code zip} will invoke {@link Observer#onNext onNext} as many times as the number of {@code onNext} invocations, +     * of the source Observable that emits the fewest items., +     * , +     * @param o1, +     *            one source Observable, +     * @param o2, +     *            a second source Observable, +     * @param o3, +     *            a third source Observable, +     * @param o4, +     *            a fourth source Observable, +     * @param o5, +     *            a fifth source Observable, +     * @param zipFunction, +     *            a function that, when applied to an item emitted by each of the source, +     *            Observables, results in an item that will be emitted by the resulting Observable, +     * @return an Observable that emits the zipped results, +     */, +    public static <T1, T2, T3, T4, T5, R> Observable<R> zip(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Func5<? super T1, ? super T2, ? super T3, ? super T4, ? super T5, ? extends R> zipFunction) {, +        return create(OperationZip.zip(o1, o2, o3, o4, o5, zipFunction));, +    }, +    , +    /**, +     * Returns an Observable that emits the results of a function of your choosing applied to, +     * combinations of four items emitted, in sequence, by four other Observables., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/zip.png">, +     * <p> {@code zip} applies this function in strict sequence, so the first item emitted by the, +     * new Observable will be the result of the function applied to the first item emitted by {@code w0}, the first item emitted by {@code w1}, the first item emitted by {@code w2}, and the first item, +     * emitted by {@code w3}; the second item emitted by, +     * the new Observable will be the result of the function applied to the second item emitted by, +     * each of those Observables; and so forth., +     * <p>, +     * The resulting {@code Observable<R>} returned from {@code zip} will invoke {@link Observer#onNext onNext} as many times as the number of {@code onNext} invocations, +     * of the source Observable that emits the fewest items., +     * , +     * @param o1, +     *            one source Observable, +     * @param o2, +     *            a second source Observable, +     * @param o3, +     *            a third source Observable, +     * @param o4, +     *            a fourth source Observable, +     * @param o5, +     *            a fifth source Observable, +     * @param o6, +     *            a sixth source Observable, +     * @param zipFunction, +     *            a function that, when applied to an item emitted by each of the source, +     *            Observables, results in an item that will be emitted by the resulting Observable, +     * @return an Observable that emits the zipped results, +     */, +    public static <T1, T2, T3, T4, T5, T6, R> Observable<R> zip(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6,, +            Func6<? super T1, ? super T2, ? super T3, ? super T4, ? super T5, ? super T6, ? extends R> zipFunction) {, +        return create(OperationZip.zip(o1, o2, o3, o4, o5, o6, zipFunction));, +    }, +    , +    /**]