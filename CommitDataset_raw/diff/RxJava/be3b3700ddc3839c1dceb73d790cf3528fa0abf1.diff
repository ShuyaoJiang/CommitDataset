[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationSkipLast;, +     * Bypasses a specified number of elements at the end of an observable, +     * sequence., +     * <p>, +     * This operator accumulates a queue with a length enough to store the first, +     * count elements. As more elements are received, elements are taken from, +     * the front of the queue and produced on the result sequence. This causes, +     * elements to be delayed., +     *, +     * @param count, +     *            number of elements to bypass at the end of the source, +     *            sequence., +     * @return An observable sequence containing the source sequence elements, +     *         except for the bypassed ones at the end., +     *, +     * @throws IndexOutOfBoundsException, +     *             count is less than zero., +     *, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh211750(v=vs.103).aspx">MSDN: Observable.SkipLast</a>, +     */, +    public Observable<T> skipLast(int count) {, +        return create(OperationSkipLast.skipLast(this, count));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationSkipLast;, +     * Bypasses a specified number of elements at the end of an observable, +     * sequence., +     * <p>, +     * This operator accumulates a queue with a length enough to store the first, +     * count elements. As more elements are received, elements are taken from, +     * the front of the queue and produced on the result sequence. This causes, +     * elements to be delayed., +     *, +     * @param count, +     *            number of elements to bypass at the end of the source, +     *            sequence., +     * @return An observable sequence containing the source sequence elements, +     *         except for the bypassed ones at the end., +     *, +     * @throws IndexOutOfBoundsException, +     *             count is less than zero., +     *, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh211750(v=vs.103).aspx">MSDN: Observable.SkipLast</a>, +     */, +    public Observable<T> skipLast(int count) {, +        return create(OperationSkipLast.skipLast(this, count));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationSkipLast.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +import java.util.Deque;, +import java.util.LinkedList;, +import java.util.concurrent.locks.ReentrantLock;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscription;, +, +/**, + * Bypasses a specified number of elements at the end of an observable sequence., + */, +public class OperationSkipLast {, +, +    /**, +     * Bypasses a specified number of elements at the end of an observable, +     * sequence., +     * <p>, +     * This operator accumulates a queue with a length enough to store the first, +     * count elements. As more elements are received, elements are taken from]