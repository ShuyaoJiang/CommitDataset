[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +import scala.language.postfixOps, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +import scala.language.postfixOps, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    assertTrue(b.toBlocking.single), +    assertTrue(b1.toBlocking.single), +    println((before ++ source).toBlocking.toList), +    o.flatten.takeUntil(stopper).toBlocking.foreach(println(_)), +    ).toObservable.flatten.take(12).toBlocking.foreach(println(_)), +    o.buffer(boundary).toBlocking.foreach((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +    assertEquals(10, List(1, 2, 3, 4).toObservable.reduce(_ + _).toBlocking.single), +    for (n <- numbers.toBlocking) println(n+10), +    assertEquals(squares.toBlocking.toList, List(4, 100, 400, 900)), +    assertEquals(List(1, 2, 3, 4), t.toBlocking.toList), +    assertEquals(List(1, 2, 3, 4), t.toBlocking.toList), +    assertEquals(List(0, 1, 2, 3), t.toBlocking.toList), +    }).flatten.toBlocking.foreach(println(_)), +    }).flatten.toBlocking.foreach(println(_)), +    assertEquals(None,    List(1, 2).toObservable.toBlocking.singleOption), +    assertEquals(Some(1), List(1).toObservable.toBlocking.singleOption), +    assertEquals(None,    List().toObservable.toBlocking.singleOption), +    println(doubleAverage(Observable.empty).toBlocking.single), +    println(doubleAverage(List(0.0).toObservable).toBlocking.single), +    println(doubleAverage(List(4.44).toObservable).toBlocking.single), +    println(doubleAverage(List(1, 2, 3.5).toObservable).toBlocking.single), +    assertEquals(10, List(1, 2, 3, 4).toObservable.sum.toBlocking.single), +    assertEquals(6, List(4, 2).toObservable.sum.toBlocking.single), +    assertEquals(0, List[Int]().toObservable.sum.toBlocking.single), +    assertEquals(24, List(1, 2, 3, 4).toObservable.product.toBlocking.single), +    assertEquals(8, List(4, 2).toObservable.product.toBlocking.single), +    assertEquals(1, List[Int]().toObservable.product.toBlocking.single), +      .toBlocking.foreach(println(_)), +      .toBlocking.foreach(println(_)), +      .toBlocking.foreach(println(_)), +      .toBlocking.foreach(println(_)), +    o1.zip(o2).toBlocking.foreach(println(_)), +    o1.zip(iter).toBlocking.foreach(println(_)), +    assertEquals(3, List(1, 2, 3, 4).toObservable.filter(condition).first.toBlocking.single), +    assertEquals(3, List(1, 2, 3, 4).toObservable.filter(condition).firstOrElse(10).toBlocking.single), +    assertEquals(10, List(-1, 0, 1).toObservable.filter(condition).firstOrElse(10).toBlocking.single), +    assertEquals(1, List(1, 2, 3, 4).toObservable.head.toBlocking.single), +    assertEquals(1, List(1, 2, 3, 4).toObservable.first.toBlocking.single), +    assertEquals(4, List(1, 2, 3, 4).toObservable.last.toBlocking.single), +    assertEquals(1, List(1).toObservable.single.toBlocking.single), +    assertEquals(1, List(1, 2, 3, 4).toObservable.toBlocking.head), +    assertEquals(1, List(1, 2, 3, 4).toObservable.toBlocking.first), +    assertEquals(4, List(1, 2, 3, 4).toObservable.toBlocking.last), +    assertEquals(1, List(1).toObservable.toBlocking.single), +    assertEquals(List(3, 4), o.drop(2).toBlocking.toList), +      o.drop(1250 millis, IOScheduler()).toBlocking.toList // output List(3, 4), +    assertEquals(List(1, 2), o.dropRight(2).toBlocking.toList), +      o.dropRight(750 millis, IOScheduler()).toBlocking.toList // output List(1, 2), +      o.dropUntil(other).toBlocking.toList // output List("Bob", "Carlos"), +    Observable.from(1 to 10).parallel(work(_)).toBlocking.foreach(println(_)), +    work(Observable.from(1 to 10)).toBlocking.foreach(println(_)), +    assertEquals(Seq(7, 8, 9, 10), List(10, 7, 8, 9).toObservable.toSeq.map(_.sorted).toBlocking.single), +    assertEquals(Seq(10, 9, 8, 7), List(10, 7, 8, 9).toObservable.toSeq.map(_.sortWith(f)).toBlocking.single), +    val timestamped = Observable.interval(100 millis).take(6).timestamp.toBlocking, +    println(s"RxScala appears ${count.toBlocking.single} times in http://rxscala.github.io/"), +    obs.toBlocking.toIterable.last, +    val result = Observable.interval(100 millis).timeout(50 millis, other).toBlocking.toList, +    val result = Observable.interval(100 millis).timeout(firstTimeoutSelector, timeoutSelector, other).toBlocking.toList, +    val result = o1.amb(o2).toBlocking.toList, +    val result = o.toBlocking.toList, +    val result = o.toBlocking.toList, +    o.toBlocking.foreach(println(_)), +    o.toBlocking.foreach(println(_)), +    val result = o.toBlocking.toList, +    val result = o.toBlocking.toList, +    println(o.elementAt(2).toBlocking.single), +    println(o.toBlocking.single), +    println(m.toBlocking.single), +    println(m.toBlocking.single), +    println(m.toBlocking.single), +    assertTrue(o1.toBlocking.single), +    assertFalse(o2.toBlocking.single), +    assertEquals(List("alice", "bob", "carol", "alice", "bob", "carol"), o.toBlocking.toList), +    assertEquals(List("alice", "bob", "carol", "alice", "bob", "carol"), o.toBlocking.toList), +    assertEquals(List("alice", "bob", "carol"), o.retry.toBlocking.toList), +    assertEquals(List("alice", "bob", "carol"), o.retry(3).toBlocking.toList), +    }.toBlocking.toList, +      o.toBlocking.toList, +    assertEquals(List(1, 2, 3, 4), o2.toBlocking.toList), +    assertEquals(List(1, 2, 3, 4), o.toBlocking.toList), +    assertTrue(o1.sequenceEqual(o2).toBlocking.single), +    assertFalse(o1.sequenceEqual(o3).toBlocking.single), +    assertTrue(o1.sequenceEqual(o4).toBlocking.single), +    println(o.toBlocking.toList), +    assertEquals(List(4, 5, 6), o.toBlocking.toList), +    println(o.toBlocking.toList), +    println(o.toBlocking.toList), +    println(o.toBlocking.toList), +    assertEquals(100, o.size.toBlocking.single), +    assertEquals(1000, o.flatten.size.toBlocking.single), +    assertEquals(10, o2.size.toBlocking.single), +    assertEquals(1000, o2.flatten.size.toBlocking.single), +    o.toBlocking.foreach(println(_)), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +import scala.language.postfixOps]