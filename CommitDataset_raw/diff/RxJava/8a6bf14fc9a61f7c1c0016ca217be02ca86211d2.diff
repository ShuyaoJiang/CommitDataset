[+++ b/src/jmh/java/io/reactivex/xmapz/ObservableSwitchMapCompletablePerf.java, +    Observable<Integer> observableConvert;, +    Completable observableDedicated;, +        observableConvert = source.switchMap(new Function<Integer, Observable<? extends Integer>>() {, +        observableDedicated = source.switchMapCompletable(new Function<Integer, Completable>() {, +    public Object observableConvert(Blackhole bh) {, +        return observableConvert.subscribeWith(new PerfConsumer(bh));, +    public Object observableDedicated(Blackhole bh) {, +        return observableDedicated.subscribeWith(new PerfConsumer(bh));, +++ b/src/jmh/java/io/reactivex/xmapz/ObservableSwitchMapCompletablePerf.java, +    Observable<Integer> observableConvert;, +    Completable observableDedicated;, +        observableConvert = source.switchMap(new Function<Integer, Observable<? extends Integer>>() {, +        observableDedicated = source.switchMapCompletable(new Function<Integer, Completable>() {, +    public Object observableConvert(Blackhole bh) {, +        return observableConvert.subscribeWith(new PerfConsumer(bh));, +    public Object observableDedicated(Blackhole bh) {, +        return observableDedicated.subscribeWith(new PerfConsumer(bh));, +++ b/src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java, +        Observer<? super T> a = actual;, +            a.onNext(null);, +        }, +++ b/src/jmh/java/io/reactivex/xmapz/ObservableSwitchMapCompletablePerf.java, +    Observable<Integer> observableConvert;, +    Completable observableDedicated;, +        observableConvert = source.switchMap(new Function<Integer, Observable<? extends Integer>>() {, +        observableDedicated = source.switchMapCompletable(new Function<Integer, Completable>() {, +    public Object observableConvert(Blackhole bh) {, +        return observableConvert.subscribeWith(new PerfConsumer(bh));, +    public Object observableDedicated(Blackhole bh) {, +        return observableDedicated.subscribeWith(new PerfConsumer(bh));, +++ b/src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java, +        Observer<? super T> a = actual;, +            a.onNext(null);, +        }, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableToObservable.java, +import io.reactivex.internal.disposables.DisposableHelper;, +import io.reactivex.internal.observers.BasicQueueDisposable;, +    static final class ObserverCompletableObserver extends BasicQueueDisposable<Void>, +    implements CompletableObserver {, +, +        final Observer<?> observer;, +, +        Disposable upstream;, +            if (DisposableHelper.validate(upstream, d)) {, +                this.upstream = d;, +                observer.onSubscribe(this);, +            }, +        }, +, +        @Override, +        public int requestFusion(int mode) {, +            return mode & ASYNC;, +        }, +, +        @Override, +        public Void poll() throws Exception {, +            return null; // always empty, +        }, +, +        @Override, +        public boolean isEmpty() {, +            return true;, +        }, +, +        @Override, +        public void clear() {, +            // always empty, +        }, +, +        @Override, +        public void dispose() {, +            upstream.dispose();, +        }, +, +        @Override, +        public boolean isDisposed() {, +            return upstream.isDisposed();, +++ b/src/jmh/java/io/reactivex/xmapz/ObservableSwitchMapCompletablePerf.java, +    Observable<Integer> observableConvert;, +    Completable observableDedicated;, +        observableConvert = source.switchMap(new Function<Integer, Observable<? extends Integer>>() {, +        observableDedicated = source.switchMapCompletable(new Function<Integer, Completable>() {, +    public Object observableConvert(Blackhole bh) {, +        return observableConvert.subscribeWith(new PerfConsumer(bh));, +    public Object observableDedicated(Blackhole bh) {, +        return observableDedicated.subscribeWith(new PerfConsumer(bh));, +++ b/src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java, +        Observer<? super T> a = actual;, +            a.onNext(null);, +        }, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableToObservable.java, +import io.reactivex.internal.disposables.DisposableHelper;, +import io.reactivex.internal.observers.BasicQueueDisposable;, +    static final class ObserverCompletableObserver extends BasicQueueDisposable<Void>, +    implements CompletableObserver {, +, +        final Observer<?> observer;, +, +        Disposable upstream;]