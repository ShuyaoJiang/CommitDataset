[+++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java, +            if (null != lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad, +            producerLookAhead = producerIndex + lookAheadStep;, +        long offset = calcElementOffset(producerIndex);, +    , +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java, +            if (null != lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad, +            producerLookAhead = producerIndex + lookAheadStep;, +        long offset = calcElementOffset(producerIndex);, +    , +++ b/src/main/java/rx/observers/TestSubscriber.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import rx.Notification;, +import rx.Observer;, +import rx.Subscriber;, +            latch.await(timeout, unit);, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java, +            if (null != lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad, +            producerLookAhead = producerIndex + lookAheadStep;, +        long offset = calcElementOffset(producerIndex);, +    , +++ b/src/main/java/rx/observers/TestSubscriber.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import rx.Notification;, +import rx.Observer;, +import rx.Subscriber;, +            latch.await(timeout, unit);, +++ b/src/main/java/rx/schedulers/TrampolineScheduler.java, +                    // check for null as it could have been unsubscribed and removed, +                    if (polled != null) {, +                        PriorityQueue<TimedAction> _q = queue;, +                        if (_q != null) {, +                            _q.remove(timedAction);, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java, +            if (null != lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad, +            producerLookAhead = producerIndex + lookAheadStep;, +        long offset = calcElementOffset(producerIndex);, +    , +++ b/src/main/java/rx/observers/TestSubscriber.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import rx.Notification;, +import rx.Observer;, +import rx.Subscriber;, +            latch.await(timeout, unit);, +++ b/src/main/java/rx/schedulers/TrampolineScheduler.java, +                    // check for null as it could have been unsubscribed and removed, +                    if (polled != null) {, +                        PriorityQueue<TimedAction> _q = queue;, +                        if (_q != null) {, +                            _q.remove(timedAction);, +++ b/src/main/java/rx/subscriptions/CompositeSubscription.java, +        if (s.isUnsubscribed()) {, +            return;, +        }, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java, +            if (null != lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad, +            producerLookAhead = producerIndex + lookAheadStep;, +        long offset = calcElementOffset(producerIndex);, +    , +++ b/src/main/java/rx/observers/TestSubscriber.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import rx.Notification;, +import rx.Observer;, +import rx.Subscriber;, +            latch.await(timeout, unit);, +++ b/src/main/java/rx/schedulers/TrampolineScheduler.java, +                    // check for null as it could have been unsubscribed and removed, +                    if (polled != null) {, +                        PriorityQueue<TimedAction> _q = queue;, +                        if (_q != null) {, +                            _q.remove(timedAction);, +++ b/src/main/java/rx/subscriptions/CompositeSubscription.java, +        if (s.isUnsubscribed()) {, +            return;, +        }, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java, +            if (null != lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad, +            producerLookAhead = producerIndex + lookAheadStep;, +        long offset = calcElementOffset(producerIndex);, +    , +++ b/src/main/java/rx/observers/TestSubscriber.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import rx.Notification;, +import rx.Observer;, +import rx.Subscriber;, +            latch.await(timeout, unit);, +++ b/src/main/java/rx/schedulers/TrampolineScheduler.java, +                    // check for null as it could have been unsubscribed and removed]