[+++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> from(Future<? extends T> future) {, +    public static <T> Observable<T> from(Future<? extends T> future, Scheduler scheduler) {, +    public static <T> Observable<T> from(Future<? extends T> future, long timeout, TimeUnit unit) {, +        return create(OperationDematerialize.dematerialize((Observable<? extends Notification<? extends T2>>) this));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> from(Future<? extends T> future) {, +    public static <T> Observable<T> from(Future<? extends T> future, Scheduler scheduler) {, +    public static <T> Observable<T> from(Future<? extends T> future, long timeout, TimeUnit unit) {, +        return create(OperationDematerialize.dematerialize((Observable<? extends Notification<? extends T2>>) this));, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +    public static <T> Func1<Observer<? super T>, Subscription> dematerialize(final Observable<? extends Notification<? extends T>> sequence) {, +        private final Observable<? extends Notification<? extends T>> sequence;, +        public DematerializeObservable(Observable<? extends Notification<? extends T>> sequence) {, +            return sequence.subscribe(new Observer<Notification<? extends T>>() {, +                public void onNext(Notification<? extends T> value) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> from(Future<? extends T> future) {, +    public static <T> Observable<T> from(Future<? extends T> future, Scheduler scheduler) {, +    public static <T> Observable<T> from(Future<? extends T> future, long timeout, TimeUnit unit) {, +        return create(OperationDematerialize.dematerialize((Observable<? extends Notification<? extends T2>>) this));, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +    public static <T> Func1<Observer<? super T>, Subscription> dematerialize(final Observable<? extends Notification<? extends T>> sequence) {, +        private final Observable<? extends Notification<? extends T>> sequence;, +        public DematerializeObservable(Observable<? extends Notification<? extends T>> sequence) {, +            return sequence.subscribe(new Observer<Notification<? extends T>>() {, +                public void onNext(Notification<? extends T> value) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationMaterialize.java, +    public static <T> Func1<Observer<? super Notification<T>>, Subscription> materialize(final Observable<? extends T> sequence) {, +        private final Observable<? extends T> sequence;, +        public MaterializeObservable(Observable<? extends T> sequence) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> from(Future<? extends T> future) {, +    public static <T> Observable<T> from(Future<? extends T> future, Scheduler scheduler) {, +    public static <T> Observable<T> from(Future<? extends T> future, long timeout, TimeUnit unit) {, +        return create(OperationDematerialize.dematerialize((Observable<? extends Notification<? extends T2>>) this));, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +    public static <T> Func1<Observer<? super T>, Subscription> dematerialize(final Observable<? extends Notification<? extends T>> sequence) {, +        private final Observable<? extends Notification<? extends T>> sequence;, +        public DematerializeObservable(Observable<? extends Notification<? extends T>> sequence) {, +            return sequence.subscribe(new Observer<Notification<? extends T>>() {, +                public void onNext(Notification<? extends T> value) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationMaterialize.java, +    public static <T> Func1<Observer<? super Notification<T>>, Subscription> materialize(final Observable<? extends T> sequence) {, +        private final Observable<? extends T> sequence;, +        public MaterializeObservable(Observable<? extends T> sequence) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationTimestamp.java, +    public static <T> Func1<Observer<? super Timestamped<T>>, Subscription> timestamp(Observable<? extends T> sequence) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> from(Future<? extends T> future) {, +    public static <T> Observable<T> from(Future<? extends T> future, Scheduler scheduler) {, +    public static <T> Observable<T> from(Future<? extends T> future, long timeout, TimeUnit unit) {, +        return create(OperationDematerialize.dematerialize((Observable<? extends Notification<? extends T2>>) this));, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +    public static <T> Func1<Observer<? super T>, Subscription> dematerialize(final Observable<? extends Notification<? extends T>> sequence) {, +        private final Observable<? extends Notification<? extends T>> sequence;, +        public DematerializeObservable(Observable<? extends Notification<? extends T>> sequence) {, +            return sequence.subscribe(new Observer<Notification<? extends T>>() {, +                public void onNext(Notification<? extends T> value) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationMaterialize.java, +    public static <T> Func1<Observer<? super Notification<T>>, Subscription> materialize(final Observable<? extends T> sequence) {, +        private final Observable<? extends T> sequence;, +        public MaterializeObservable(Observable<? extends T> sequence) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationTimestamp.java, +    public static <T> Func1<Observer<? super Timestamped<T>>, Subscription> timestamp(Observable<? extends T> sequence) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationToObservableFuture.java, +        private final Future<? extends T> that;, +        public ToObservableFuture(Future<? extends T> that) {, +        public ToObservableFuture(Future<? extends T> that, long time, TimeUnit unit) {, +    public static <T> Func1<Observer<? super T>, Subscription> toObservableFuture(final Future<? extends T> that) {, +    public static <T> Func1<Observer<? super T>, Subscription> toObservableFuture(final Future<? extends T> that, long time, TimeUnit unit) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> from(Future<? extends T> future) {, +    public static <T> Observable<T> from(Future<? extends T> future, Scheduler scheduler) {, +    public static <T> Observable<T> from(Future<? extends T> future, long timeout, TimeUnit unit) {, +        return create(OperationDematerialize.dematerialize((Observable<? extends Notification<? extends T2>>) this));, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +    public static <T> Func1<Observer<? super T>, Subscription> dematerialize(final Observable<? extends Notification<? extends T>> sequence) {, +        private final Observable<? extends Notification<? extends T>> sequence;, +        public DematerializeObservable(Observable<? extends Notification<? extends T>> sequence) {, +            return sequence.subscribe(new Observer<Notification<? extends T>>() {, +                public void onNext(Notification<? extends T> value) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationMaterialize.java, +    public static <T> Func1<Observer<? super Notification<T>>, Subscription> materialize(final Observable<? extends T> sequence) {, +        private final Observable<? extends T> sequence;, +        public MaterializeObservable(Observable<? extends T> sequence) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationTimestamp.java, +    public static <T> Func1<Observer<? super Timestamped<T>>, Subscription> timestamp(Observable<? extends T> sequence) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationToObservableFuture.java, +        private final Future<? extends T> that;, +        public ToObservableFuture(Future<? extends T> that) {, +        public ToObservableFuture(Future<? extends T> that, long time, TimeUnit unit) {, +    public static <T> Func1<Observer<? super T>, Subscription> toObservableFuture(final Future<? extends T> that) {, +    public static <T> Func1<Observer<? super T>, Subscription> toObservableFuture(final Future<? extends T> that, long time, TimeUnit unit) {, +++ b/rxjava-core/src/main/java/rx/operators/ScheduledObserver.java, +    private final ConcurrentLinkedQueue<Notification<? extends T>> queue = new ConcurrentLinkedQueue<Notification<? extends T>>();, +    private void enqueue(Notification<? extends T> notification) {, +                Notification<? extends T> not = queue.poll();, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> from(Future<? extends T> future) {]