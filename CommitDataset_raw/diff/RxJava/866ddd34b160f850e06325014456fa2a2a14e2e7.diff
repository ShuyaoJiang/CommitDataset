[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/switchLatest.png">, +     * @param caseSelector the function that produces a case key when an, +     *                     Observer subscribes, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mergeMap.png">, +     * Observable, and then concatting those resulting Observables and emitting, +     * the results of this concat., +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/concatMap.png">, +     * item emitted by the source Observable resulting in an Observable of, +     * Observables. Then a {@link #switchLatest(Observable)} /, +     * {@link #switchOnNext(Observable)} is applied., +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/switchMap.png">, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mapWithIndex.png">, +     * @deprecated just use zip with {@link Observable#range(int)}, +     * This technique, which is called "reduce" here, is sometimes called, +     * "aggregate," "fold," "accumulate," "compress," or "inject" in other, +     * @deprecated use #reduce(Func2), +     * This technique, which is called "reduce" here, is sometimec called, +     * "aggregate," "fold," "accumulate," "compress," or "inject" in other, +     * @deprecated use #reduce(Object, Func2), +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/doOnNext.png">, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/switchLatest.png">, +     * @param caseSelector the function that produces a case key when an, +     *                     Observer subscribes, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mergeMap.png">, +     * Observable, and then concatting those resulting Observables and emitting, +     * the results of this concat., +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/concatMap.png">, +     * item emitted by the source Observable resulting in an Observable of, +     * Observables. Then a {@link #switchLatest(Observable)} /, +     * {@link #switchOnNext(Observable)} is applied., +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/switchMap.png">, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mapWithIndex.png">, +     * @deprecated just use zip with {@link Observable#range(int)}, +     * This technique, which is called "reduce" here, is sometimes called, +     * "aggregate," "fold," "accumulate," "compress," or "inject" in other, +     * @deprecated use #reduce(Func2), +     * This technique, which is called "reduce" here, is sometimec called, +     * "aggregate," "fold," "accumulate," "compress," or "inject" in other, +     * @deprecated use #reduce(Object, Func2), +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/doOnNext.png">, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, + * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/S.ReplaySubject.png">]