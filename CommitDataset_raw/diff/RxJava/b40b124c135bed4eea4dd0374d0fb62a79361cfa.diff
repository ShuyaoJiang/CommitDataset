[+++ b/src/main/java/io/reactivex/Observable.java, +                Disposable d = Disposables.empty();, +++ b/src/main/java/io/reactivex/Observable.java, +                Disposable d = Disposables.empty();, +++ b/src/main/java/io/reactivex/Scheduler.java, +        @Override, +        public boolean isDisposed() {, +            return disposed;, +        }, +++ b/src/main/java/io/reactivex/Observable.java, +                Disposable d = Disposables.empty();, +++ b/src/main/java/io/reactivex/Scheduler.java, +        @Override, +        public boolean isDisposed() {, +            return disposed;, +        }, +++ b/src/main/java/io/reactivex/disposables/BooleanDisposable.java, +final class BooleanDisposable implements Disposable {, +    BooleanDisposable() {, +    BooleanDisposable(Runnable run) {, +    @Override, +++ b/src/main/java/io/reactivex/Observable.java, +                Disposable d = Disposables.empty();, +++ b/src/main/java/io/reactivex/Scheduler.java, +        @Override, +        public boolean isDisposed() {, +            return disposed;, +        }, +++ b/src/main/java/io/reactivex/disposables/BooleanDisposable.java, +final class BooleanDisposable implements Disposable {, +    BooleanDisposable() {, +    BooleanDisposable(Runnable run) {, +    @Override, +++ b/src/main/java/io/reactivex/disposables/CompositeDisposable.java, +    @Override, +++ b/src/main/java/io/reactivex/Observable.java, +                Disposable d = Disposables.empty();, +++ b/src/main/java/io/reactivex/Scheduler.java, +        @Override, +        public boolean isDisposed() {, +            return disposed;, +        }, +++ b/src/main/java/io/reactivex/disposables/BooleanDisposable.java, +final class BooleanDisposable implements Disposable {, +    BooleanDisposable() {, +    BooleanDisposable(Runnable run) {, +    @Override, +++ b/src/main/java/io/reactivex/disposables/CompositeDisposable.java, +    @Override, +++ b/src/main/java/io/reactivex/disposables/Disposable.java, +    /**, +     * Returns true if this resource has been disposed., +     */, +    boolean isDisposed();, +++ b/src/main/java/io/reactivex/Observable.java, +                Disposable d = Disposables.empty();, +++ b/src/main/java/io/reactivex/Scheduler.java, +        @Override, +        public boolean isDisposed() {, +            return disposed;, +        }, +++ b/src/main/java/io/reactivex/disposables/BooleanDisposable.java, +final class BooleanDisposable implements Disposable {, +    BooleanDisposable() {, +    BooleanDisposable(Runnable run) {, +    @Override, +++ b/src/main/java/io/reactivex/disposables/CompositeDisposable.java, +    @Override, +++ b/src/main/java/io/reactivex/disposables/Disposable.java, +    /**, +     * Returns true if this resource has been disposed., +     */, +    boolean isDisposed();, +++ b/src/main/java/io/reactivex/disposables/Disposables.java, +        // TODO optimize this case., +        return from(new Runnable() {, +            public void run() {, +        });, +        return new BooleanDisposable();, +, +        @Override public boolean isDisposed() {, +            return get() == DisposedFuture.INSTANCE;, +        }, +++ b/src/main/java/io/reactivex/Observable.java, +                Disposable d = Disposables.empty();, +++ b/src/main/java/io/reactivex/Scheduler.java, +        @Override, +        public boolean isDisposed() {, +            return disposed;, +        }, +++ b/src/main/java/io/reactivex/disposables/BooleanDisposable.java, +final class BooleanDisposable implements Disposable {, +    BooleanDisposable() {, +    BooleanDisposable(Runnable run) {, +    @Override, +++ b/src/main/java/io/reactivex/disposables/CompositeDisposable.java, +    @Override, +++ b/src/main/java/io/reactivex/disposables/Disposable.java, +    /**, +     * Returns true if this resource has been disposed.]