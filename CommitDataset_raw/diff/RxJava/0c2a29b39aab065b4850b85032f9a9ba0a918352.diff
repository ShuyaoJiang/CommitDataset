[+++ b/CHANGES.md, +### Version 0.8.1 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.8.1%22)) ###, +, +* [Pull 250](https://github.com/Netflix/RxJava/pull/250) AsyncSubject, +* [Pull 252](https://github.com/Netflix/RxJava/pull/252) ToFuture, +* [Pull 246](https://github.com/Netflix/RxJava/pull/246) Scheduler.schedulePeriodically, +* [Pull 247](https://github.com/Netflix/RxJava/pull/247) flatMap aliased to mapMany, +, +++ b/CHANGES.md, +### Version 0.8.1 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.8.1%22)) ###, +, +* [Pull 250](https://github.com/Netflix/RxJava/pull/250) AsyncSubject, +* [Pull 252](https://github.com/Netflix/RxJava/pull/252) ToFuture, +* [Pull 246](https://github.com/Netflix/RxJava/pull/246) Scheduler.schedulePeriodically, +* [Pull 247](https://github.com/Netflix/RxJava/pull/247) flatMap aliased to mapMany, +, +++ b/gradle.properties, +version=0.8.2-SNAPSHOT, +++ b/CHANGES.md, +### Version 0.8.1 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.8.1%22)) ###, +, +* [Pull 250](https://github.com/Netflix/RxJava/pull/250) AsyncSubject, +* [Pull 252](https://github.com/Netflix/RxJava/pull/252) ToFuture, +* [Pull 246](https://github.com/Netflix/RxJava/pull/246) Scheduler.schedulePeriodically, +* [Pull 247](https://github.com/Netflix/RxJava/pull/247) flatMap aliased to mapMany, +, +++ b/gradle.properties, +version=0.8.2-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationGroupBy;, +import rx.operators.OperationToFuture;, +     * @param subject, +     *            the subject to push source elements into., +     * @param <R>, +     *            result type, +     * Note: mapMany and flatMap are equivalent., +     * <p>, +     * @see {@link #flatMap(Observable, Func1)}, +     * Creates a new Observable sequence by applying a function that you supply to each object in the, +     * original Observable sequence, where that function is itself an Observable that emits objects,, +     * and then merges the results of that function applied to every item emitted by the original, +     * Observable, emitting these merged results as its own sequence., +     * <p>, +     * Note: mapMany and flatMap are equivalent., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mapMany.png">, +     * , +     * @param sequence, +     *            the source Observable, +     * @param func, +     *            a function to apply to each item emitted by the source Observable, generating a, +     *            Observable, +     * @param <T>, +     *            the type emitted by the source Observable, +     * @param <R>, +     *            the type emitted by the Observables emitted by <code>func</code>, +     * @return an Observable that emits a sequence that is the result of applying the transformation, +     *         function to each item emitted by the source Observable and merging the results of, +     *         the Observables obtained from this transformation, +     * @see {@link #mapMany(Observable, Func1)}, +     */, +    public static <T, R> Observable<R> flatMap(Observable<T> sequence, Func1<T, Observable<R>> func) {, +        return mapMany(sequence, func);, +    }, +, +    /**, +     * Creates a new Observable sequence by applying a function that you supply to each object in the, +     * original Observable sequence, where that function is itself an Observable that emits objects,, +     * and then merges the results of that function applied to every item emitted by the original, +     * Observable, emitting these merged results as its own sequence., +     * <p>, +     * Note: mapMany and flatMap are equivalent., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mapMany.png">, +     * , +     * @param sequence, +     *            the source Observable, +     * @param func, +     *            a function to apply to each item emitted by the source Observable, generating a, +     *            Observable, +     * @param <T>, +     *            the type emitted by the source Observable, +     * @param <R>, +     *            the type emitted by the Observables emitted by <code>func</code>, +     * @return an Observable that emits a sequence that is the result of applying the transformation, +     *         function to each item emitted by the source Observable and merging the results of, +     *         the Observables obtained from this transformation, +     * @see {@link #mapMany(Observable, Func1)}, +     */, +    public static <T, R> Observable<R> flatMap(Observable<T> sequence, final Object func) {, +        return mapMany(sequence, func);, +    }, +, +    /**, +     * Return a Future representing a single value of the Observable., +     * <p>, +     * This will throw an exception if the Observable emits more than 1 value. If more than 1 are expected then use <code>toList().toFuture()</code>., +     * , +     * @param that, +     *            the source Observable]