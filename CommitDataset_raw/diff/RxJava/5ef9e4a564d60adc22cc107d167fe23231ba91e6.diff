[+++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    public void testLastOrDefault() {, +        def val = Observable.toObservable("one", "two").lastOrDefault("default", { x -> x.length() == 3}), +        assertEquals("two", val), +    @Test, +    public void testLastOrDefault2() {, +        def val = Observable.toObservable("one", "two").lastOrDefault("default", { x -> x.length() > 3}), +        assertEquals("default", val), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    public void testLastOrDefault() {, +        def val = Observable.toObservable("one", "two").lastOrDefault("default", { x -> x.length() == 3}), +        assertEquals("two", val), +    @Test, +    public void testLastOrDefault2() {, +        def val = Observable.toObservable("one", "two").lastOrDefault("default", { x -> x.length() > 3}), +        assertEquals("default", val), +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns the last element of an observable sequence, or a default value if no value is found., +     * @param source the source observable., +     * @param defaultValue a default value that would be returned if observable is empty., +     * @param <T> the type of source., +     * @return the last element of an observable sequence that matches the predicate, or a default value if no value is found., +     */, +    public static <T> T lastOrDefault(Observable<T> source, T defaultValue) {, +        boolean found = false;, +        T result = null;, +, +        for (T value : source.toIterable()) {, +            found = true;, +            result = value;, +        }, +, +        if (!found) {, +            return defaultValue;, +        }, +, +        return result;, +    }, +, +    /**, +     * Returns the last element of an observable sequence that matches the predicate, or a default value if no value is found., +     * @param source the source observable., +     * @param defaultValue a default value that would be returned if observable is empty., +     * @param predicate a predicate function to evaluate for elements in the sequence., +     * @param <T> the type of source., +     * @return the last element of an observable sequence that matches the predicate, or a default value if no value is found., +     */, +    public static <T> T lastOrDefault(Observable<T> source, T defaultValue, Func1<T, Boolean> predicate) {, +        return lastOrDefault(source.filter(predicate), defaultValue);, +    }, +, +    /**, +     * Returns the last element of an observable sequence that matches the predicate, or a default value if no value is found., +     * @param source the source observable., +     * @param defaultValue a default value that would be returned if observable is empty., +     * @param predicate a predicate function to evaluate for elements in the sequence., +     * @param <T> the type of source., +     * @return the last element of an observable sequence that matches the predicate, or a default value if no value is found., +     */, +    public static <T> T lastOrDefault(Observable<T> source, T defaultValue, Object predicate){, +        @SuppressWarnings("rawtypes"), +        final FuncN _f = Functions.from(predicate);, +, +        return lastOrDefault(source, defaultValue, new Func1<T, Boolean>() {, +            @Override, +            public Boolean call(T args) {, +                return (Boolean) _f.call(args);, +            }, +        });, +    }, +, +    /**, +     * Returns the last element, or a default value if no value is found., +     *, +     * @param defaultValue a default value that would be returned if observable is empty., +     * @return the last element of an observable sequence that matches the predicate, or a default value if no value is found., +     */, +    public T lastOrDefault(T defaultValue) {, +        return lastOrDefault(this, defaultValue);, +    }, +, +    /**, +     * Returns the last element that matches the predicate, or a default value if no value is found., +     *, +     * @param defaultValue a default value that would be returned if observable is empty., +     * @param predicate    a predicate function to evaluate for elements in the sequence., +     * @return the last element of an observable sequence that matches the predicate, or a default value if no value is found., +     */, +    public T lastOrDefault(T defaultValue, Func1<T, Boolean> predicate) {, +        return lastOrDefault(this, defaultValue, predicate);, +    }, +, +    /**, +     * Returns the last element that matches the predicate, or a default value if no value is found., +     *, +     * @param defaultValue a default value that would be returned if observable is empty., +     * @param predicate    a predicate function to evaluate for elements in the sequence., +     * @return the last element of an observable sequence that matches the predicate, or a default value if no value is found., +     */, +    public T lastOrDefault(T defaultValue, Object predicate) {]