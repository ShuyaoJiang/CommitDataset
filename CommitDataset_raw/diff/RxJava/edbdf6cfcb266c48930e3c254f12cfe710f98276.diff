[+++ b/src/main/java/rx/Observable.java, +    public final Observable<T> repeatWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        return OnSubscribeRedo.repeat(this, notificationHandler, scheduler);, +    public final Observable<T> repeatWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler) {, +        return OnSubscribeRedo.repeat(this, notificationHandler);, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler) {, +        return OnSubscribeRedo.<T> retry(this, notificationHandler);, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        return OnSubscribeRedo.<T> retry(this, notificationHandler, scheduler);, +++ b/src/main/java/rx/Observable.java, +    public final Observable<T> repeatWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        return OnSubscribeRedo.repeat(this, notificationHandler, scheduler);, +    public final Observable<T> repeatWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler) {, +        return OnSubscribeRedo.repeat(this, notificationHandler);, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler) {, +        return OnSubscribeRedo.<T> retry(this, notificationHandler);, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        return OnSubscribeRedo.<T> retry(this, notificationHandler, scheduler);, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +            @Override, +            public void onStart() {, +                request(Long.MAX_VALUE);, +            }, +++ b/src/main/java/rx/Observable.java, +    public final Observable<T> repeatWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        return OnSubscribeRedo.repeat(this, notificationHandler, scheduler);, +    public final Observable<T> repeatWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler) {, +        return OnSubscribeRedo.repeat(this, notificationHandler);, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler) {, +        return OnSubscribeRedo.<T> retry(this, notificationHandler);, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        return OnSubscribeRedo.<T> retry(this, notificationHandler, scheduler);, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +            @Override, +            public void onStart() {, +                request(Long.MAX_VALUE);, +            }, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureDrop.java, +            @Override, +            public void onStart() {, +                request(Long.MAX_VALUE);, +            }, +++ b/src/main/java/rx/Observable.java, +    public final Observable<T> repeatWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        return OnSubscribeRedo.repeat(this, notificationHandler, scheduler);, +    public final Observable<T> repeatWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler) {, +        return OnSubscribeRedo.repeat(this, notificationHandler);, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler) {, +        return OnSubscribeRedo.<T> retry(this, notificationHandler);, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        return OnSubscribeRedo.<T> retry(this, notificationHandler, scheduler);, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +            @Override, +            public void onStart() {, +                request(Long.MAX_VALUE);, +            }, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureDrop.java, +            @Override, +            public void onStart() {, +                request(Long.MAX_VALUE);, +            }, +++ b/src/test/java/rx/internal/operators/OperatorOnBackpressureDropTest.java, +import rx.internal.util.RxRingBuffer;, +import java.util.concurrent.CountDownLatch;, +, +    public void testWithObserveOn() throws InterruptedException {, +        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();, +        Observable.range(0, RxRingBuffer.SIZE * 10).onBackpressureDrop().onBackpressureDrop().observeOn(Schedulers.io()).subscribe(ts);, +        ts.awaitTerminalEvent();, +    }, +, +    @Test(timeout = 500), +++ b/src/main/java/rx/Observable.java, +    public final Observable<T> repeatWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        return OnSubscribeRedo.repeat(this, notificationHandler, scheduler);, +    public final Observable<T> repeatWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler) {, +        return OnSubscribeRedo.repeat(this, notificationHandler);, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler) {, +        return OnSubscribeRedo.<T> retry(this, notificationHandler);, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        return OnSubscribeRedo.<T> retry(this, notificationHandler, scheduler);, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +            @Override, +            public void onStart() {, +                request(Long.MAX_VALUE);, +            }, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureDrop.java, +            @Override, +            public void onStart() {, +                request(Long.MAX_VALUE);, +            }, +++ b/src/test/java/rx/internal/operators/OperatorOnBackpressureDropTest.java, +import rx.internal.util.RxRingBuffer;, +import java.util.concurrent.CountDownLatch;, +, +    public void testWithObserveOn() throws InterruptedException {, +        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();, +        Observable.range(0, RxRingBuffer.SIZE * 10).onBackpressureDrop().onBackpressureDrop().observeOn(Schedulers.io()).subscribe(ts);, +        ts.awaitTerminalEvent();, +    }]