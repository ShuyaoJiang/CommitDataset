[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import static rx.util.functions.Functions.not;, +import java.util.Collections;, +     * combinations of two items emitted, in sequence, by two other Observables., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/zip.png">, +     * <p> {@code zip} applies this function in strict sequence, so the first item emitted by the, +     * new Observable will be the result of the function applied to the first item emitted by {@code w0} and the first item emitted by {@code w1}; the second item emitted by, +     * the new Observable will be the result of the function applied to the second item emitted by {@code w0} and the second item emitted by {@code w1}; and so forth., +     * <p>, +     * The resulting {@code Observable<R>} returned from {@code zip} will invoke {@link Observer#onNext onNext} as many times as the number of {@code onNext} invocations, +     * of the source Observable that emits the fewest items., +     * , +     * @param o1, +     *            one source Observable, +     * @param o2, +     *            another source Observable, +     * @param zipFunction, +     *            a function that, when applied to an item emitted by each of the source, +     *            Observables, results in an item that will be emitted by the resulting Observable, +     * @return an Observable that emits the zipped results, +     */, +    public static <T1, T2, R> Observable<R> zip(Observable<? extends T1> o1, Observable<? extends T2> o2, Func2<? super T1, ? super T2, ? extends R> zipFunction) {, +        return create(OperationZip.zip(o1, o2, zipFunction));, +    }, +, +    /**, +     * Returns an Observable that emits the results of a function of your choosing applied to, +     * combinations of five items emitted, in sequence, by five other Observables., +     * combinations of six items emitted, in sequence, by six other Observables., +     * combinations of seven items emitted, in sequence, by seven other Observables., +     * combinations of eight items emitted, in sequence, by eight other Observables., +     * combinations of nine items emitted, in sequence, by nine other Observables., +     * combinations of N items emitted, in sequence, by N other Observables as provided by an Iterable., +     * , +    public static <R> Observable<R> zip(Iterable<? extends Observable<?>> ws, FuncN<? extends R> zipFunction) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static rx.util.functions.Functions.not;, +import java.util.Collections;, +     * combinations of two items emitted, in sequence, by two other Observables., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/zip.png">, +     * <p> {@code zip} applies this function in strict sequence, so the first item emitted by the, +     * new Observable will be the result of the function applied to the first item emitted by {@code w0} and the first item emitted by {@code w1}; the second item emitted by, +     * the new Observable will be the result of the function applied to the second item emitted by {@code w0} and the second item emitted by {@code w1}; and so forth., +     * <p>, +     * The resulting {@code Observable<R>} returned from {@code zip} will invoke {@link Observer#onNext onNext} as many times as the number of {@code onNext} invocations, +     * of the source Observable that emits the fewest items., +     * , +     * @param o1, +     *            one source Observable, +     * @param o2, +     *            another source Observable, +     * @param zipFunction, +     *            a function that, when applied to an item emitted by each of the source, +     *            Observables, results in an item that will be emitted by the resulting Observable, +     * @return an Observable that emits the zipped results, +     */, +    public static <T1, T2, R> Observable<R> zip(Observable<? extends T1> o1, Observable<? extends T2> o2, Func2<? super T1, ? super T2, ? extends R> zipFunction) {, +        return create(OperationZip.zip(o1, o2, zipFunction));, +    }, +, +    /**, +     * Returns an Observable that emits the results of a function of your choosing applied to, +     * combinations of five items emitted, in sequence, by five other Observables., +     * combinations of six items emitted, in sequence, by six other Observables., +     * combinations of seven items emitted, in sequence, by seven other Observables., +     * combinations of eight items emitted, in sequence, by eight other Observables., +     * combinations of nine items emitted, in sequence, by nine other Observables., +     * combinations of N items emitted, in sequence, by N other Observables as provided by an Iterable., +     * , +    public static <R> Observable<R> zip(Iterable<? extends Observable<?>> ws, FuncN<? extends R> zipFunction) {, +++ b/rxjava-core/src/main/java/rx/concurrency/TestScheduler.java, +import rx.subscriptions.Subscriptions;, +        queue.add(new TimedAction<T>(this, time + unit.toNanos(delayTime), action, state));, +        return Subscriptions.empty();, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static rx.util.functions.Functions.not;, +import java.util.Collections;, +     * combinations of two items emitted, in sequence, by two other Observables., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/zip.png">, +     * <p> {@code zip} applies this function in strict sequence, so the first item emitted by the, +     * new Observable will be the result of the function applied to the first item emitted by {@code w0} and the first item emitted by {@code w1}; the second item emitted by, +     * the new Observable will be the result of the function applied to the second item emitted by {@code w0} and the second item emitted by {@code w1}; and so forth., +     * <p>, +     * The resulting {@code Observable<R>} returned from {@code zip} will invoke {@link Observer#onNext onNext} as many times as the number of {@code onNext} invocations, +     * of the source Observable that emits the fewest items., +     * , +     * @param o1, +     *            one source Observable, +     * @param o2, +     *            another source Observable, +     * @param zipFunction, +     *            a function that, when applied to an item emitted by each of the source, +     *            Observables, results in an item that will be emitted by the resulting Observable, +     * @return an Observable that emits the zipped results, +     */, +    public static <T1, T2, R> Observable<R> zip(Observable<? extends T1> o1, Observable<? extends T2> o2, Func2<? super T1, ? super T2, ? extends R> zipFunction) {, +        return create(OperationZip.zip(o1, o2, zipFunction));]