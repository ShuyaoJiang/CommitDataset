[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableIntervalRange.java, +            if (resource.get() != DisposableHelper.DISPOSED) {, +                            DisposableHelper.dispose(resource);, +                        DisposableHelper.dispose(resource);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableIntervalRange.java, +            if (resource.get() != DisposableHelper.DISPOSED) {, +                            DisposableHelper.dispose(resource);, +                        DisposableHelper.dispose(resource);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimer.java, +            if (get() != DisposableHelper.DISPOSED) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableIntervalRange.java, +            if (resource.get() != DisposableHelper.DISPOSED) {, +                            DisposableHelper.dispose(resource);, +                        DisposableHelper.dispose(resource);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimer.java, +            if (get() != DisposableHelper.DISPOSED) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/observable/NbpOperatorTimeout.java, +    static final class TimeoutSubscriber<T, U, V>, +    extends AtomicReference<Disposable>, +    implements Observer<T>, Disposable, OnTimeout {, +                    if (compareAndSet(null, tis)) {, +            Disposable d = get();, +            if (compareAndSet(d, tis)) {, +            if (DisposableHelper.dispose(this)) {, +            return s.isDisposed();, +    static final class TimeoutOtherSubscriber<T, U, V>, +    extends AtomicReference<Disposable>, +    implements Observer<T>, Disposable, OnTimeout {, +                    if (compareAndSet(null, tis)) {, +            Disposable d = get();, +            if (compareAndSet(d, tis)) {, +            if (DisposableHelper.dispose(this)) {, +            return s.isDisposed();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableIntervalRange.java, +            if (resource.get() != DisposableHelper.DISPOSED) {, +                            DisposableHelper.dispose(resource);, +                        DisposableHelper.dispose(resource);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimer.java, +            if (get() != DisposableHelper.DISPOSED) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/observable/NbpOperatorTimeout.java, +    static final class TimeoutSubscriber<T, U, V>, +    extends AtomicReference<Disposable>, +    implements Observer<T>, Disposable, OnTimeout {, +                    if (compareAndSet(null, tis)) {, +            Disposable d = get();, +            if (compareAndSet(d, tis)) {, +            if (DisposableHelper.dispose(this)) {, +            return s.isDisposed();, +    static final class TimeoutOtherSubscriber<T, U, V>, +    extends AtomicReference<Disposable>, +    implements Observer<T>, Disposable, OnTimeout {, +                    if (compareAndSet(null, tis)) {, +            Disposable d = get();, +            if (compareAndSet(d, tis)) {, +            if (DisposableHelper.dispose(this)) {, +            return s.isDisposed();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableIntervalRange.java, +    extends AtomicReference<Disposable>, +            DisposableHelper.dispose(this);, +            return get() == DisposableHelper.DISPOSED;, +            if (!isDisposed()) {, +                    DisposableHelper.dispose(this);, +            DisposableHelper.setOnce(this, d);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableIntervalRange.java, +            if (resource.get() != DisposableHelper.DISPOSED) {, +                            DisposableHelper.dispose(resource);, +                        DisposableHelper.dispose(resource);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimer.java, +            if (get() != DisposableHelper.DISPOSED) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/observable/NbpOperatorTimeout.java, +    static final class TimeoutSubscriber<T, U, V>, +    extends AtomicReference<Disposable>, +    implements Observer<T>, Disposable, OnTimeout {, +                    if (compareAndSet(null, tis)) {, +            Disposable d = get();, +            if (compareAndSet(d, tis)) {, +            if (DisposableHelper.dispose(this)) {, +            return s.isDisposed();, +    static final class TimeoutOtherSubscriber<T, U, V>, +    extends AtomicReference<Disposable>, +    implements Observer<T>, Disposable, OnTimeout {, +                    if (compareAndSet(null, tis)) {, +            Disposable d = get();, +            if (compareAndSet(d, tis)) {, +            if (DisposableHelper.dispose(this)) {, +            return s.isDisposed();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableIntervalRange.java, +    extends AtomicReference<Disposable>, +            DisposableHelper.dispose(this);, +            return get() == DisposableHelper.DISPOSED;, +            if (!isDisposed()) {, +                    DisposableHelper.dispose(this);, +            DisposableHelper.setOnce(this, d);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTimer.java, +            return get() == DisposableHelper.DISPOSED;, +            if (!isDisposed()) {]