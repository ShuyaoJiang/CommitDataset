[+++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +  val fromFuture = "[TODO: Decide how Scala Futures should relate to Observables. Should there be a " +, +     "common base interface for Future and Observable? And should Futures also have an unsubscribe method?]", +  , +      "aggregate(R, Func2[R, _ >: T, R])" -> "foldLeft(R)((R, T) => R)",, +      "reduce(R, Func2[R, _ >: T, R])" -> "foldLeft(R)((R, T) => R)",, +      "takeWhileWithIndex(Func2[_ >: T, _ >: Integer, Boolean])" -> "[use `.zipWithIndex.takeWhile{case (elem, index) => condition}.map(_._1)`]",, +      "from(Future[_ <: T])" -> fromFuture,, +      "from(Future[_ <: T], Long, TimeUnit)" -> fromFuture,, +      "from(Future[_ <: T], Scheduler)" -> fromFuture,, +      "just(T)" -> "apply(T*)",, +        if (s.length > 64) {]