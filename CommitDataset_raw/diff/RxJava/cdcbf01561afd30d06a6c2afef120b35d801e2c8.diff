[+++ b/src/main/java/io/reactivex/Flowable.java, +    public final <U, V> Flowable<V> flatMapIterable(final Function<? super T, ? extends Iterable<? extends U>> mapper, final BiFunction<? super T, ? super U, ? extends V> resultSelector, int prefetch) {, +        Objects.requireNonNull(mapper, "mapper is null");, +        Objects.requireNonNull(resultSelector, "resultSelector is null");, +        return flatMap(new Function<T, Publisher<U>>() {, +            @Override, +            public Publisher<U> apply(T t) {, +                return new FlowableFromIterable<U>(mapper.apply(t));, +            }, +        }, resultSelector, false, bufferSize(), prefetch);, +    }, +, +    @BackpressureSupport(BackpressureKind.FULL), +    @SchedulerSupport(SchedulerSupport.NONE), +    @BackpressureSupport(BackpressureKind.ERROR), +    @SchedulerSupport(SchedulerSupport.NONE), +    public final <TRight, TLeftEnd, TRightEnd, R> Flowable<R> groupJoin(, +            Publisher<? extends TRight> other,, +            Function<? super T, ? extends Publisher<TLeftEnd>> leftEnd,, +            Function<? super TRight, ? extends Publisher<TRightEnd>> rightEnd,, +            BiFunction<? super T, ? super Flowable<TRight>, ? extends R> resultSelector, +                    ) {, +        return new FlowableGroupJoin<T, TRight, TLeftEnd, TRightEnd, R>(, +                this, other, leftEnd, rightEnd, resultSelector);, +    }, +    , +    @BackpressureSupport(BackpressureKind.ERROR), +    @SchedulerSupport(SchedulerSupport.NONE), +    public final <TRight, TLeftEnd, TRightEnd, R> Flowable<R> join(, +            Publisher<? extends TRight> other,, +            Function<? super T, ? extends Publisher<TLeftEnd>> leftEnd,, +            Function<? super TRight, ? extends Publisher<TRightEnd>> rightEnd,, +            BiFunction<? super T, ? super TRight, ? extends R> resultSelector, +                    ) {, +        return new FlowableJoin<T, TRight, TLeftEnd, TRightEnd, R>(, +                this, other, leftEnd, rightEnd, resultSelector);, +    }, +    , +, +    @BackpressureSupport(BackpressureKind.PASS_THROUGH), +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Flowable<T> onTerminateDetach() {, +        return new FlowableDetach<T>(this);, +    }, +    , +++ b/src/main/java/io/reactivex/Flowable.java, +    public final <U, V> Flowable<V> flatMapIterable(final Function<? super T, ? extends Iterable<? extends U>> mapper, final BiFunction<? super T, ? super U, ? extends V> resultSelector, int prefetch) {, +        Objects.requireNonNull(mapper, "mapper is null");, +        Objects.requireNonNull(resultSelector, "resultSelector is null");, +        return flatMap(new Function<T, Publisher<U>>() {, +            @Override, +            public Publisher<U> apply(T t) {, +                return new FlowableFromIterable<U>(mapper.apply(t));, +            }, +        }, resultSelector, false, bufferSize(), prefetch);, +    }, +, +    @BackpressureSupport(BackpressureKind.FULL), +    @SchedulerSupport(SchedulerSupport.NONE), +    @BackpressureSupport(BackpressureKind.ERROR), +    @SchedulerSupport(SchedulerSupport.NONE), +    public final <TRight, TLeftEnd, TRightEnd, R> Flowable<R> groupJoin(, +            Publisher<? extends TRight> other,, +            Function<? super T, ? extends Publisher<TLeftEnd>> leftEnd,, +            Function<? super TRight, ? extends Publisher<TRightEnd>> rightEnd,, +            BiFunction<? super T, ? super Flowable<TRight>, ? extends R> resultSelector, +                    ) {, +        return new FlowableGroupJoin<T, TRight, TLeftEnd, TRightEnd, R>(, +                this, other, leftEnd, rightEnd, resultSelector);, +    }, +    , +    @BackpressureSupport(BackpressureKind.ERROR), +    @SchedulerSupport(SchedulerSupport.NONE), +    public final <TRight, TLeftEnd, TRightEnd, R> Flowable<R> join(, +            Publisher<? extends TRight> other,, +            Function<? super T, ? extends Publisher<TLeftEnd>> leftEnd,, +            Function<? super TRight, ? extends Publisher<TRightEnd>> rightEnd,, +            BiFunction<? super T, ? super TRight, ? extends R> resultSelector, +                    ) {, +        return new FlowableJoin<T, TRight, TLeftEnd, TRightEnd, R>(, +                this, other, leftEnd, rightEnd, resultSelector);, +    }, +    , +, +    @BackpressureSupport(BackpressureKind.PASS_THROUGH), +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Flowable<T> onTerminateDetach() {, +        return new FlowableDetach<T>(this);, +    }, +    , +++ b/src/main/java/io/reactivex/Observable.java, +    @BackpressureSupport(BackpressureKind.ERROR), +    @SchedulerSupport(SchedulerSupport.NONE), +    public final <TRight, TLeftEnd, TRightEnd, R> Observable<R> groupJoin(, +            ObservableConsumable<? extends TRight> other,, +            Function<? super T, ? extends ObservableConsumable<TLeftEnd>> leftEnd,, +            Function<? super TRight, ? extends ObservableConsumable<TRightEnd>> rightEnd,, +            BiFunction<? super T, ? super Observable<TRight>, ? extends R> resultSelector, +                    ) {, +        return new ObservableGroupJoin<T, TRight, TLeftEnd, TRightEnd, R>(]