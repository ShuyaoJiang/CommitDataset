[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java, +            s.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java, +            s.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTimeoutTimed.java, +            s.dispose();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java, +            s.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTimeoutTimed.java, +            s.dispose();, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableTimeoutTest.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import io.reactivex.schedulers.TestScheduler;, +import io.reactivex.subjects.PublishSubject;, +import io.reactivex.subscribers.TestSubscriber;, +    @Test, +    public void shouldUnsubscribeFromUnderlyingSubscriptionOnDispose() {, +        final PublishSubject<String> subject = PublishSubject.create();, +        final TestScheduler scheduler = new TestScheduler();, +, +        final TestSubscriber<Void> observer = subject.toCompletable(), +                .timeout(100, TimeUnit.MILLISECONDS, scheduler), +                .test();, +, +        assertTrue(subject.hasObservers());, +, +        observer.dispose();, +, +        assertFalse(subject.hasObservers());, +    }, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java, +            s.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTimeoutTimed.java, +            s.dispose();, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableTimeoutTest.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import io.reactivex.schedulers.TestScheduler;, +import io.reactivex.subjects.PublishSubject;, +import io.reactivex.subscribers.TestSubscriber;, +    @Test, +    public void shouldUnsubscribeFromUnderlyingSubscriptionOnDispose() {, +        final PublishSubject<String> subject = PublishSubject.create();, +        final TestScheduler scheduler = new TestScheduler();, +, +        final TestSubscriber<Void> observer = subject.toCompletable(), +                .timeout(100, TimeUnit.MILLISECONDS, scheduler), +                .test();, +, +        assertTrue(subject.hasObservers());, +, +        observer.dispose();, +, +        assertFalse(subject.hasObservers());, +    }, +, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTests.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +    @Test, +    public void shouldUnsubscribeFromUnderlyingSubscriptionOnDispose() {, +        final PublishProcessor<String> subject = PublishProcessor.create();, +        final TestScheduler scheduler = new TestScheduler();, +, +        final TestSubscriber<String> observer = subject, +                .timeout(100, TimeUnit.MILLISECONDS, scheduler), +                .test();, +, +        assertTrue(subject.hasSubscribers());, +, +        observer.dispose();, +, +        assertFalse(subject.hasSubscribers());, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java, +            s.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTimeoutTimed.java, +            s.dispose();, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableTimeoutTest.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import io.reactivex.schedulers.TestScheduler;, +import io.reactivex.subjects.PublishSubject;, +import io.reactivex.subscribers.TestSubscriber;, +    @Test, +    public void shouldUnsubscribeFromUnderlyingSubscriptionOnDispose() {, +        final PublishSubject<String> subject = PublishSubject.create();, +        final TestScheduler scheduler = new TestScheduler();, +, +        final TestSubscriber<Void> observer = subject.toCompletable(), +                .timeout(100, TimeUnit.MILLISECONDS, scheduler), +                .test();, +, +        assertTrue(subject.hasObservers());, +, +        observer.dispose();, +, +        assertFalse(subject.hasObservers());]