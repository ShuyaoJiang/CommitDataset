[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def multicast[R >: T](subject: rx.lang.scala.Subject[R]): (() => Subscription, Observable[R]) = {, +    val s: rx.subjects.Subject[_ >: T, _<: R] = subject.asJavaSubject, +    val javaCO: rx.observables.ConnectableObservable[R] = asJavaObservable.multicast(s), +    (() => javaCO.connect(), Observable(javaCO)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def multicast[R >: T](subject: rx.lang.scala.Subject[R]): (() => Subscription, Observable[R]) = {, +    val s: rx.subjects.Subject[_ >: T, _<: R] = subject.asJavaSubject, +    val javaCO: rx.observables.ConnectableObservable[R] = asJavaObservable.multicast(s), +    (() => javaCO.connect(), Observable(javaCO)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subject.scala, +trait Subject[T] extends Observable[T] with Observer[T] {, +  private [scala] val asJavaSubject: rx.subjects.Subject[_ >: T, _<: T], +  val asJavaObservable: rx.Observable[_ <: T] = asJavaSubject, +object Subject {, +  def apply[T](): Subject[T] = new rx.lang.scala.subjects.PublishSubject[T](rx.subjects.PublishSubject.create()), +}, +, +, +, +, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def multicast[R >: T](subject: rx.lang.scala.Subject[R]): (() => Subscription, Observable[R]) = {, +    val s: rx.subjects.Subject[_ >: T, _<: R] = subject.asJavaSubject, +    val javaCO: rx.observables.ConnectableObservable[R] = asJavaObservable.multicast(s), +    (() => javaCO.connect(), Observable(javaCO)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subject.scala, +trait Subject[T] extends Observable[T] with Observer[T] {, +  private [scala] val asJavaSubject: rx.subjects.Subject[_ >: T, _<: T], +  val asJavaObservable: rx.Observable[_ <: T] = asJavaSubject, +object Subject {, +  def apply[T](): Subject[T] = new rx.lang.scala.subjects.PublishSubject[T](rx.subjects.PublishSubject.create()), +}, +, +, +, +, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subjects/AsyncSubject.scala, +class AsyncSubject[T] private[scala] (val asJavaSubject: rx.subjects.AsyncSubject[T]) extends Subject[T] {}, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def multicast[R >: T](subject: rx.lang.scala.Subject[R]): (() => Subscription, Observable[R]) = {, +    val s: rx.subjects.Subject[_ >: T, _<: R] = subject.asJavaSubject, +    val javaCO: rx.observables.ConnectableObservable[R] = asJavaObservable.multicast(s), +    (() => javaCO.connect(), Observable(javaCO)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subject.scala, +trait Subject[T] extends Observable[T] with Observer[T] {, +  private [scala] val asJavaSubject: rx.subjects.Subject[_ >: T, _<: T], +  val asJavaObservable: rx.Observable[_ <: T] = asJavaSubject, +object Subject {, +  def apply[T](): Subject[T] = new rx.lang.scala.subjects.PublishSubject[T](rx.subjects.PublishSubject.create()), +}, +, +, +, +, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subjects/AsyncSubject.scala, +class AsyncSubject[T] private[scala] (val asJavaSubject: rx.subjects.AsyncSubject[T]) extends Subject[T] {}, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subjects/BehaviorSubject.scala, +class BehaviorSubject[T] private[scala] (val asJavaSubject: rx.subjects.BehaviorSubject[T]) extends Subject[T]  {}, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def multicast[R >: T](subject: rx.lang.scala.Subject[R]): (() => Subscription, Observable[R]) = {, +    val s: rx.subjects.Subject[_ >: T, _<: R] = subject.asJavaSubject, +    val javaCO: rx.observables.ConnectableObservable[R] = asJavaObservable.multicast(s), +    (() => javaCO.connect(), Observable(javaCO)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subject.scala, +trait Subject[T] extends Observable[T] with Observer[T] {, +  private [scala] val asJavaSubject: rx.subjects.Subject[_ >: T, _<: T], +  val asJavaObservable: rx.Observable[_ <: T] = asJavaSubject, +object Subject {, +  def apply[T](): Subject[T] = new rx.lang.scala.subjects.PublishSubject[T](rx.subjects.PublishSubject.create()), +}, +, +, +, +, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subjects/AsyncSubject.scala, +class AsyncSubject[T] private[scala] (val asJavaSubject: rx.subjects.AsyncSubject[T]) extends Subject[T] {}, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subjects/BehaviorSubject.scala, +class BehaviorSubject[T] private[scala] (val asJavaSubject: rx.subjects.BehaviorSubject[T]) extends Subject[T]  {}, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subjects/PublishSubject.scala, +private [scala] class PublishSubject[T] private[scala] (val asJavaSubject: rx.subjects.PublishSubject[T]), +  extends Subject[T]  {}, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def multicast[R >: T](subject: rx.lang.scala.Subject[R]): (() => Subscription, Observable[R]) = {, +    val s: rx.subjects.Subject[_ >: T, _<: R] = subject.asJavaSubject, +    val javaCO: rx.observables.ConnectableObservable[R] = asJavaObservable.multicast(s), +    (() => javaCO.connect(), Observable(javaCO)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subject.scala, +trait Subject[T] extends Observable[T] with Observer[T] {, +  private [scala] val asJavaSubject: rx.subjects.Subject[_ >: T, _<: T], +  val asJavaObservable: rx.Observable[_ <: T] = asJavaSubject, +object Subject {, +  def apply[T](): Subject[T] = new rx.lang.scala.subjects.PublishSubject[T](rx.subjects.PublishSubject.create()), +}, +, +]