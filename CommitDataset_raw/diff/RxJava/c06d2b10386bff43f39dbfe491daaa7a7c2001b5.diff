[+++ b/src/main/java/io/reactivex/Observable.java, +        if (count < 0) {, +            throw new IllegalArgumentException("count >= required but it was " + count);, +        } else, +++ b/src/main/java/io/reactivex/Observable.java, +        if (count < 0) {, +            throw new IllegalArgumentException("count >= required but it was " + count);, +        } else, +++ b/src/main/java/io/reactivex/internal/operators/OperatorFlatMap.java, +++ b/src/main/java/io/reactivex/Observable.java, +        if (count < 0) {, +            throw new IllegalArgumentException("count >= required but it was " + count);, +        } else, +++ b/src/main/java/io/reactivex/internal/operators/OperatorFlatMap.java, +++ b/src/main/java/io/reactivex/internal/operators/OperatorPublish.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +        volatile Subscription s;, +        static final AtomicReferenceFieldUpdater<PublishSubscriber, Subscription> S =, +                AtomicReferenceFieldUpdater.newUpdater(PublishSubscriber.class, Subscription.class, "s");, +        , +        static final Subscription CANCELLED = new Subscription() {, +            @Override, +            public void request(long n) {, +                , +            }, +            , +            @Override, +            public void cancel() {, +                , +            }, +        };, +            if (producers.get() != TERMINATED) {, +                InnerProducer[] ps = producers.getAndSet(TERMINATED);, +                if (ps != TERMINATED) {, +                    , +                    Subscription a = s;, +                    if (a != CANCELLED) {, +                        a = S.getAndSet(this, CANCELLED);, +                        if (a != CANCELLED && a != null) {, +                            a.cancel();, +                        }, +                    }, +                }, +            }, +            if (!S.compareAndSet(this, null, s)) {, +                if (this.s != CANCELLED) {, +                    SubscriptionHelper.reportSubscriptionSet();, +                }, +++ b/src/main/java/io/reactivex/Observable.java, +        if (count < 0) {, +            throw new IllegalArgumentException("count >= required but it was " + count);, +        } else, +++ b/src/main/java/io/reactivex/internal/operators/OperatorFlatMap.java, +++ b/src/main/java/io/reactivex/internal/operators/OperatorPublish.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +        volatile Subscription s;, +        static final AtomicReferenceFieldUpdater<PublishSubscriber, Subscription> S =, +                AtomicReferenceFieldUpdater.newUpdater(PublishSubscriber.class, Subscription.class, "s");, +        , +        static final Subscription CANCELLED = new Subscription() {, +            @Override, +            public void request(long n) {, +                , +            }, +            , +            @Override, +            public void cancel() {, +                , +            }, +        };, +            if (producers.get() != TERMINATED) {, +                InnerProducer[] ps = producers.getAndSet(TERMINATED);, +                if (ps != TERMINATED) {, +                    , +                    Subscription a = s;, +                    if (a != CANCELLED) {, +                        a = S.getAndSet(this, CANCELLED);, +                        if (a != CANCELLED && a != null) {, +                            a.cancel();, +                        }, +                    }, +                }, +            }, +            if (!S.compareAndSet(this, null, s)) {, +                if (this.s != CANCELLED) {, +                    SubscriptionHelper.reportSubscriptionSet();, +                }, +++ b/src/main/java/io/reactivex/internal/subscribers/CancelledSubscriber.java, +    @SuppressWarnings("unchecked"), +    public static <T> Subscriber<T> instance() {, +        return (Subscriber<T>)INSTANCE;, +    }, +    , +++ b/src/main/java/io/reactivex/Observable.java, +        if (count < 0) {, +            throw new IllegalArgumentException("count >= required but it was " + count);, +        } else, +++ b/src/main/java/io/reactivex/internal/operators/OperatorFlatMap.java, +++ b/src/main/java/io/reactivex/internal/operators/OperatorPublish.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;]