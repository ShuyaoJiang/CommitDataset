[+++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable;, +     * Returns a {@link Maybe} which will subscribe to this Completable and once that is completed then, +     * will subscribe to the {@code next} MaybeSource. An error event from this Completable will be, +     * propagated to the downstream subscriber and will result in skipping the subscription of the, +     * Maybe., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code andThen} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <T> the value type of the next MaybeSource, +     * @param next the Maybe to subscribe after this Completable is completed, not null, +     * @return Maybe that composes this Completable and next, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final <T> Maybe<T> andThen(MaybeSource<T> next) {, +        ObjectHelper.requireNonNull(next, "next is null");, +        return RxJavaPlugins.onAssembly(new MaybeDelayWithCompletable<T>(next, this));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable;, +     * Returns a {@link Maybe} which will subscribe to this Completable and once that is completed then, +     * will subscribe to the {@code next} MaybeSource. An error event from this Completable will be, +     * propagated to the downstream subscriber and will result in skipping the subscription of the, +     * Maybe., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code andThen} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <T> the value type of the next MaybeSource, +     * @param next the Maybe to subscribe after this Completable is completed, not null, +     * @return Maybe that composes this Completable and next, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final <T> Maybe<T> andThen(MaybeSource<T> next) {, +        ObjectHelper.requireNonNull(next, "next is null");, +        return RxJavaPlugins.onAssembly(new MaybeDelayWithCompletable<T>(next, this));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeDelayWithCompletable.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators.maybe;, +, +import io.reactivex.CompletableObserver;, +import io.reactivex.CompletableSource;, +import io.reactivex.Maybe;, +import io.reactivex.MaybeObserver;, +import io.reactivex.MaybeSource;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.disposables.DisposableHelper;, +import java.util.concurrent.atomic.AtomicReference;, +, +public final class MaybeDelayWithCompletable<T> extends Maybe<T> {, +, +    final MaybeSource<T> source;, +, +    final CompletableSource other;, +, +    public MaybeDelayWithCompletable(MaybeSource<T> source, CompletableSource other) {, +        this.source = source;, +        this.other = other;, +    }, +, +    @Override, +    protected void subscribeActual(MaybeObserver<? super T> subscriber) {, +        other.subscribe(new OtherObserver<T>(subscriber, source));, +    }, +, +    static final class OtherObserver<T>, +    extends AtomicReference<Disposable>, +    implements CompletableObserver, Disposable {, +        private static final long serialVersionUID = 703409937383992161L;, +, +        final MaybeObserver<? super T> actual;, +, +        final MaybeSource<T> source;, +, +        OtherObserver(MaybeObserver<? super T> actual, MaybeSource<T> source) {, +            this.actual = actual;, +            this.source = source;, +        }, +, +        @Override]