[+++ b/src/main/java/io/reactivex/CompletableTransformer.java, +    /**, +     * Applies a function to the upstream Completable and returns a CompletableSource., +     * @param upstream the upstream Completable instance, +     * @return the transformed CompletableSource instance, +     * @throws Exception in case the transformation throws, checked exceptions will be wrapped, +     * into a RuntimeException, +     */, +    CompletableSource apply(Completable upstream) throws Exception;, +++ b/src/main/java/io/reactivex/CompletableTransformer.java, +    /**, +     * Applies a function to the upstream Completable and returns a CompletableSource., +     * @param upstream the upstream Completable instance, +     * @return the transformed CompletableSource instance, +     * @throws Exception in case the transformation throws, checked exceptions will be wrapped, +     * into a RuntimeException, +     */, +    CompletableSource apply(Completable upstream) throws Exception;, +++ b/src/main/java/io/reactivex/FlowableTransformer.java, +    /**, +     * Applies a function to the upstream Flowable and returns a Publisher with, +     * optionally different element type., +     * @param upstream the upstream Flowable instance, +     * @return the transformed Publisher instance, +     * @throws Exception in case the transformation throws, checked exceptions will be wrapped, +     * into a RuntimeException, +     */, +    Publisher<Downstream> apply(Flowable<Upstream> upstream) throws Exception;, +++ b/src/main/java/io/reactivex/CompletableTransformer.java, +    /**, +     * Applies a function to the upstream Completable and returns a CompletableSource., +     * @param upstream the upstream Completable instance, +     * @return the transformed CompletableSource instance, +     * @throws Exception in case the transformation throws, checked exceptions will be wrapped, +     * into a RuntimeException, +     */, +    CompletableSource apply(Completable upstream) throws Exception;, +++ b/src/main/java/io/reactivex/FlowableTransformer.java, +    /**, +     * Applies a function to the upstream Flowable and returns a Publisher with, +     * optionally different element type., +     * @param upstream the upstream Flowable instance, +     * @return the transformed Publisher instance, +     * @throws Exception in case the transformation throws, checked exceptions will be wrapped, +     * into a RuntimeException, +     */, +    Publisher<Downstream> apply(Flowable<Upstream> upstream) throws Exception;, +++ b/src/main/java/io/reactivex/MaybeTransformer.java, +    /**, +     * Applies a function to the upstream Maybe and returns a MaybeSource with, +     * optionally different element type., +     * @param upstream the upstream Maybe instance, +     * @return the transformed MaybeSource instance, +     * @throws Exception in case the transformation throws, checked exceptions will be wrapped, +     * into a RuntimeException, +     */, +    MaybeSource<Downstream> apply(Maybe<Upstream> upstream) throws Exception;, +++ b/src/main/java/io/reactivex/CompletableTransformer.java, +    /**, +     * Applies a function to the upstream Completable and returns a CompletableSource., +     * @param upstream the upstream Completable instance, +     * @return the transformed CompletableSource instance, +     * @throws Exception in case the transformation throws, checked exceptions will be wrapped, +     * into a RuntimeException, +     */, +    CompletableSource apply(Completable upstream) throws Exception;, +++ b/src/main/java/io/reactivex/FlowableTransformer.java, +    /**, +     * Applies a function to the upstream Flowable and returns a Publisher with, +     * optionally different element type., +     * @param upstream the upstream Flowable instance, +     * @return the transformed Publisher instance, +     * @throws Exception in case the transformation throws, checked exceptions will be wrapped, +     * into a RuntimeException, +     */, +    Publisher<Downstream> apply(Flowable<Upstream> upstream) throws Exception;, +++ b/src/main/java/io/reactivex/MaybeTransformer.java, +    /**, +     * Applies a function to the upstream Maybe and returns a MaybeSource with, +     * optionally different element type., +     * @param upstream the upstream Maybe instance, +     * @return the transformed MaybeSource instance, +     * @throws Exception in case the transformation throws, checked exceptions will be wrapped, +     * into a RuntimeException, +     */, +    MaybeSource<Downstream> apply(Maybe<Upstream> upstream) throws Exception;, +++ b/src/main/java/io/reactivex/ObservableTransformer.java, +    /**, +     * Applies a function to the upstream Observable and returns an ObservableSource with, +     * optionally different element type., +     * @param upstream the upstream Observable instance, +     * @return the transformed ObservableSource instance, +     * @throws Exception in case the transformation throws, checked exceptions will be wrapped, +     * into a RuntimeException, +     */, +++ b/src/main/java/io/reactivex/CompletableTransformer.java, +    /**, +     * Applies a function to the upstream Completable and returns a CompletableSource., +     * @param upstream the upstream Completable instance, +     * @return the transformed CompletableSource instance]