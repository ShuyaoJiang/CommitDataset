[+++ b/CHANGES.md, +, +# 0.17.0 Release Notes, +, +, +Version 0.17.0 contains some significant signature changes that allow us to significantly improve handling of synchronous Observables and simplify Schedulers. Many of the changes have backwards compatible deprecated methods to ease the migration while some are breaking. , +, +The new signatures related to `Observable` in this release are:, +, +```java, +// A new create method takes `OnSubscribe` instead of `OnSubscribeFunc`, +public final static <T> Observable<T> create(OnSubscribe<T> f), +, +// The new OnSubscribe type accepts a Subscriber instead of Observer and does not return a Subscription, +public static interface OnSubscribe<T> extends Action1<Subscriber<? super T>>, +, +// Subscriber is an Observer + Subscription, +public abstract class Subscriber<T> implements Observer<T>, Subscription, +, +// The main `subscribe` behavior receives a Subscriber instead of Observer, +public final Subscription subscribe(Subscriber<? super T> subscriber), +, +// Subscribing with an Observer however is still appropriate, +// and the Observer is automatically converted into a Subscriber, +public final Subscription subscribe(Observer<? super T> observer), +, +// A new 'lift' function allows composing Operator implementations together, +public <R> Observable<R> lift(final Operator<? extends R, ? super T> lift), +	, +// The `Operator` used with `lift`, +public interface Operator<R, T> extends Func1<Subscriber<? super R>, Subscriber<? super T>>, +, +```, +, +Also changed is the `Scheduler` interface which is much simpler:, +, +```java, +public abstract class Scheduler {, +	public Subscription schedule(Action1<Scheduler.Inner> action);, +    public Subscription schedule(Action1<Scheduler.Inner> action, long delayTime, TimeUnit unit);, +	public Subscription schedulePeriodically(Action1<Scheduler.Inner> action, long initialDelay, long period, TimeUnit unit);, +	public final Subscription scheduleRecursive(final Action1<Recurse> action), +	public long now();, +	public int degreeOfParallelism();, +	, +	public static class Inner implements Subscription {, +		public abstract void schedule(Action1<Scheduler.Inner> action, long delayTime, TimeUnit unit);, +		public abstract void schedule(Action1<Scheduler.Inner> action);, +		public long now();, +	}, +	, +	public static final class Recurse {, +		public final void schedule();, +		public final void schedule(long delay, TimeUnit unit);, +	}, +}, +```, +, +, +This release applies many lessons learned over the past year and seeks to streamline the API before we hit 1.0., +, +As shown in the code above the changes fall into 2 major sections:, +, +#### 1) Lift/Operator/OnSubscribe/Subscriber, +, +Changes that allow unsubscribing from synchronous Observables without needing to add concurrency., +, +#### 2) Schedulers, +, +Simplification of the `Scheduler` interface and make clearer the concept of "outer" and "inner" Schedulers for recursion., +, +, +## Lift/Operator/OnSubscribe/Subscriber, +, +New types `Subscriber` and `OnSubscribe` along with the new `lift` function have been added. The reasons and benefits are as follows:, +, +### 1) Synchronous Unsubscribe, +, +RxJava versions up until 0.16.x are unable to unsubscribe from a synchronous Observable such as this:, +, +```java, +Observable<Integer> oi = Observable.create(new OnSubscribe<Integer>() {, +, +    @Override, +    public void call(Observer<? super Integer> Observer) {, +        for (int i = 1; i < 1000000; i++) {, +            subscriber.onNext(i);, +        }, +        subscriber.onCompleted();, +    }, +});, +```, +, +Subscribing to this `Observable` will always emit all 1,000,000 values even if unsubscribed such as via `oi.take(10)`., +, +Version 0.17.0 fixes this issue by injecting the `Subscription` into the `OnSubscribe` function to allow code like this:, +, +```java, +Observable<Integer> oi = Observable.create(new OnSubscribe<Integer>() {, +]