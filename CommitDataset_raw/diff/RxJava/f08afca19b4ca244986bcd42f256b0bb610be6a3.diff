[+++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        new TestFactory().getObservable().last().subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received("hello_1");, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        new TestFactory().getObservable().last().subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received("hello_1");, +++ b/language-adaptors/rxjava-jruby/src/main/java/rx/lang/jruby/JRubyAdaptor.java, +            String script = "mockApiCall.getObservable().last().subscribe(lambda{|result| a.received(result)})";, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        new TestFactory().getObservable().last().subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received("hello_1");, +++ b/language-adaptors/rxjava-jruby/src/main/java/rx/lang/jruby/JRubyAdaptor.java, +            String script = "mockApiCall.getObservable().last().subscribe(lambda{|result| a.received(result)})";, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ScalaAdaptor.scala, +    @Test def testLast() {, +        numbers.last().subscribe((callback: Int) => {, +            println("testLast: onNext -> got " + callback), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        new TestFactory().getObservable().last().subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received("hello_1");, +++ b/language-adaptors/rxjava-jruby/src/main/java/rx/lang/jruby/JRubyAdaptor.java, +            String script = "mockApiCall.getObservable().last().subscribe(lambda{|result| a.received(result)})";, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ScalaAdaptor.scala, +    @Test def testLast() {, +        numbers.last().subscribe((callback: Int) => {, +            println("testLast: onNext -> got " + callback), +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationLast;, +     * Takes the last item emitted by a source Observable and returns an Observable that emits only, +     * that item as its sole emission., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/last.png">, +     * @param that, +     *            the source Observable, +     * @return an Observable that emits a single item, which is identical to the last item emitted, +     *         by the source Observable, +    public static <T> Observable<T> last(final Observable<T> that) {, +        return _create(OperationLast.last(that));, +        return last(_create(OperationScan.scan(sequence, accumulator)));, +        return last(_create(OperationScan.scan(sequence, initialValue, accumulator)));, +     * Converts an Observable that emits a sequence of objects into one that only emits the last, +     * object in this sequence before completing., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/last.png">, +     * @return an Observable that emits only the last item emitted by the original Observable, +    public Observable<T> last() {, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        new TestFactory().getObservable().last().subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received("hello_1");, +++ b/language-adaptors/rxjava-jruby/src/main/java/rx/lang/jruby/JRubyAdaptor.java, +            String script = "mockApiCall.getObservable().last().subscribe(lambda{|result| a.received(result)})";, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ScalaAdaptor.scala, +    @Test def testLast() {, +        numbers.last().subscribe((callback: Int) => {, +            println("testLast: onNext -> got " + callback), +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationLast;, +     * Takes the last item emitted by a source Observable and returns an Observable that emits only, +     * that item as its sole emission., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/last.png">, +     * @param that, +     *            the source Observable, +     * @return an Observable that emits a single item, which is identical to the last item emitted, +     *         by the source Observable, +    public static <T> Observable<T> last(final Observable<T> that) {, +        return _create(OperationLast.last(that));, +        return last(_create(OperationScan.scan(sequence, accumulator)));, +        return last(_create(OperationScan.scan(sequence, initialValue, accumulator)));, +     * Converts an Observable that emits a sequence of objects into one that only emits the last, +     * object in this sequence before completing., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/last.png">, +     * @return an Observable that emits only the last item emitted by the original Observable, +    public Observable<T> last() {, +++ b/rxjava-core/src/main/java/rx/operators/OperationLast.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicReference;, +, +import org.junit.Test;]