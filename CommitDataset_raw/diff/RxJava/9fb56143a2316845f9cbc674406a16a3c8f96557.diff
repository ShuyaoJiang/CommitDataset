[+++ b/src/main/java/rx/Observable.java, +        return reduce(0, CountHolder.INSTANCE);, +    , +    private static final class CountHolder {, +        static final Func2<Integer, Object, Integer> INSTANCE = new Func2<Integer, Object, Integer>() {, +            @Override, +            public final Integer call(Integer count, Object o) {, +                return count + 1;, +            }, +        };, +        return reduce(0L, CountLongHolder.INSTANCE);, +, +    private static final class CountLongHolder {, +        static final Func2<Long, Object, Long> INSTANCE = new Func2<Long, Object, Long>() {, +            @Override, +            public final Long call(Long count, Object o) {, +                return count + 1;, +            }, +        };, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>(sortFunction));, +++ b/src/main/java/rx/Observable.java, +        return reduce(0, CountHolder.INSTANCE);, +    , +    private static final class CountHolder {, +        static final Func2<Integer, Object, Integer> INSTANCE = new Func2<Integer, Object, Integer>() {, +            @Override, +            public final Integer call(Integer count, Object o) {, +                return count + 1;, +            }, +        };, +        return reduce(0L, CountLongHolder.INSTANCE);, +, +    private static final class CountLongHolder {, +        static final Func2<Long, Object, Long> INSTANCE = new Func2<Long, Object, Long>() {, +            @Override, +            public final Long call(Long count, Object o) {, +                return count + 1;, +            }, +        };, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>(sortFunction));, +++ b/src/main/java/rx/internal/operators/OperatorConcat.java, +            request(1);, +++ b/src/main/java/rx/Observable.java, +        return reduce(0, CountHolder.INSTANCE);, +    , +    private static final class CountHolder {, +        static final Func2<Integer, Object, Integer> INSTANCE = new Func2<Integer, Object, Integer>() {, +            @Override, +            public final Integer call(Integer count, Object o) {, +                return count + 1;, +            }, +        };, +        return reduce(0L, CountLongHolder.INSTANCE);, +, +    private static final class CountLongHolder {, +        static final Func2<Long, Object, Long> INSTANCE = new Func2<Long, Object, Long>() {, +            @Override, +            public final Long call(Long count, Object o) {, +                return count + 1;, +            }, +        };, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>(sortFunction));, +++ b/src/main/java/rx/internal/operators/OperatorConcat.java, +            request(1);, +++ b/src/main/java/rx/internal/operators/OperatorToObservableList.java, +        return new Subscriber<T>(o) {, +            private boolean completed = false;, +            final List<T> list = new LinkedList<T>();, +                    completed = true;, +                    o.onNext(new ArrayList<T>(list));, +                    o.onCompleted();, +                } catch (Throwable e) {, +                    onError(e);, +++ b/src/main/java/rx/Observable.java, +        return reduce(0, CountHolder.INSTANCE);, +    , +    private static final class CountHolder {, +        static final Func2<Integer, Object, Integer> INSTANCE = new Func2<Integer, Object, Integer>() {, +            @Override, +            public final Integer call(Integer count, Object o) {, +                return count + 1;, +            }, +        };, +        return reduce(0L, CountLongHolder.INSTANCE);, +, +    private static final class CountLongHolder {, +        static final Func2<Long, Object, Long> INSTANCE = new Func2<Long, Object, Long>() {, +            @Override]