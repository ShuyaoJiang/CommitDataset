[+++ b/rxjava-core/src/main/java/rx/Observable.java, +    final Action1<Observer<? super T>> f;, +    protected Observable(Action1<Observer<? super T>> f) {, +    public final static <T> Observable<T> create(OnSubscribe<T> f) {, +    public static interface OnSubscribe<T> extends Action1<Observer<? super T>> {, +    public <R> Observable<R> lift(final Func1<Observer<? super R>, Observer<? super T>> bind) {, +        return new Observable<R>(new Action1<Observer<? super R>>() {, +            public void call(Observer<? super R> o) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    final Action1<Observer<? super T>> f;, +    protected Observable(Action1<Observer<? super T>> f) {, +    public final static <T> Observable<T> create(OnSubscribe<T> f) {, +    public static interface OnSubscribe<T> extends Action1<Observer<? super T>> {, +    public <R> Observable<R> lift(final Func1<Observer<? super R>, Observer<? super T>> bind) {, +        return new Observable<R>(new Action1<Observer<? super R>>() {, +            public void call(Observer<? super R> o) {, +++ b/rxjava-core/src/main/java/rx/Observer.java, +import rx.subscriptions.CompositeSubscription;, +import rx.util.OnErrorNotImplementedException;, +import rx.util.functions.Action0;, +import rx.util.functions.Action1;, +, +public abstract class Observer<T> implements Subscription {, +, +    private final CompositeSubscription cs;, +, +    protected Observer(CompositeSubscription cs) {, +        this.cs = cs;, +    }, +, +    protected Observer() {, +        this(new CompositeSubscription());, +    }, +, +    protected Observer(Observer<?> op) {, +        this(op.cs);, +    }, +    public abstract void onCompleted();, +    public abstract void onError(Throwable e);, +    public abstract void onNext(T args);, +, +    /**, +     * Create an empty Observer that ignores all events., +     */, +    public static final <T> Observer<T> create() {, +        return new Observer<T>() {, +, +            @Override, +            public final void onCompleted() {, +                // do nothing, +            }, +, +            @Override, +            public final void onError(Throwable e) {, +                throw new OnErrorNotImplementedException(e);, +            }, +, +            @Override, +            public final void onNext(T args) {, +                // do nothing, +            }, +, +        };, +    }, +, +    /**, +     * Create an Observer that receives `onNext` and ignores `onError` and `onCompleted`., +     */, +    public static final <T> Observer<T> create(final Action1<? super T> onNext) {, +        if (onNext == null) {, +            throw new IllegalArgumentException("onNext can not be null");, +        }, +, +        return new Observer<T>() {, +, +            @Override, +            public final void onCompleted() {, +                // do nothing, +            }, +, +            @Override, +            public final void onError(Throwable e) {, +                throw new OnErrorNotImplementedException(e);, +            }, +, +            @Override, +            public final void onNext(T args) {, +                onNext.call(args);, +            }, +, +        };, +    }, +, +    /**, +     * Create an Observer that receives `onNext` and `onError` and ignores `onCompleted`., +     * , +     */, +    public static final <T> Observer<T> create(final Action1<? super T> onNext, final Action1<Throwable> onError) {, +        if (onNext == null) {, +            throw new IllegalArgumentException("onNext can not be null");]