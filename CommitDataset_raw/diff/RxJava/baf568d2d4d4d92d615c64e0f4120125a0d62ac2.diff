[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def dropUntilExample() {, +    val o = List("Alice", "Bob", "Carlos").toObservable.zip(, +      Observable.interval(700 millis, IOScheduler())).map(_._1) // emit every 700 millis, +    val other = List(1).toObservable.delay(1 seconds), +    println(, +      o.dropUntil(other).toBlockingObservable.toList // output List("Bob", "Carlos"), +    ), +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def dropUntilExample() {, +    val o = List("Alice", "Bob", "Carlos").toObservable.zip(, +      Observable.interval(700 millis, IOScheduler())).map(_._1) // emit every 700 millis, +    val other = List(1).toObservable.delay(1 seconds), +    println(, +      o.dropUntil(other).toBlockingObservable.toList // output List("Bob", "Carlos"), +    ), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/skipUntil.png">, +   *, +   * @param other the second Observable that has to emit an item before the source Observable's elements begin, +   *              to be mirrored by the resulting Observable, +   * @return an Observable that skips items from the source Observable until the second Observable emits an, +   *         item, then emits the remaining items, +   * @see <a href="https://github.com/Netflix/RxJava/wiki/Filtering-Observables#wiki-skipuntil">RxJava Wiki: skipUntil()</a>, +   * @see <a href="http://msdn.microsoft.com/en-us/library/hh229358.aspx">MSDN: Observable.SkipUntil</a>, +   */, +  def dropUntil[E](other: Observable[E]): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.skipUntil(other)), +  }, +, +  /**, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def dropUntilExample() {, +    val o = List("Alice", "Bob", "Carlos").toObservable.zip(, +      Observable.interval(700 millis, IOScheduler())).map(_._1) // emit every 700 millis, +    val other = List(1).toObservable.delay(1 seconds), +    println(, +      o.dropUntil(other).toBlockingObservable.toList // output List("Bob", "Carlos"), +    ), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/skipUntil.png">, +   *, +   * @param other the second Observable that has to emit an item before the source Observable's elements begin, +   *              to be mirrored by the resulting Observable, +   * @return an Observable that skips items from the source Observable until the second Observable emits an, +   *         item, then emits the remaining items, +   * @see <a href="https://github.com/Netflix/RxJava/wiki/Filtering-Observables#wiki-skipuntil">RxJava Wiki: skipUntil()</a>, +   * @see <a href="http://msdn.microsoft.com/en-us/library/hh229358.aspx">MSDN: Observable.SkipUntil</a>, +   */, +  def dropUntil[E](other: Observable[E]): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.skipUntil(other)), +  }, +, +  /**, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "skipUntil(Observable[U])" -> "dropUntil(Observable[E])",]