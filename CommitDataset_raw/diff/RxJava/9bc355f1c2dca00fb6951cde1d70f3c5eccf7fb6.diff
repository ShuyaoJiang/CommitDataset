[+++ b/src/main/java/io/reactivex/internal/operators/OperatorTake.java, +            if (!done && remaining-- > 0) {, +                boolean stop = remaining == 0;, +                if (stop) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorTake.java, +            if (!done && remaining-- > 0) {, +                boolean stop = remaining == 0;, +                if (stop) {, +++ b/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java, +            } else if (null != lvElement(buffer, calcWrappedOffset(index + 1, mask))) { // buffer is not full, +++ b/src/main/java/io/reactivex/internal/operators/OperatorTake.java, +            if (!done && remaining-- > 0) {, +                boolean stop = remaining == 0;, +                if (stop) {, +++ b/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java, +            } else if (null != lvElement(buffer, calcWrappedOffset(index + 1, mask))) { // buffer is not full, +++ b/src/test/java/io/reactivex/internal/operators/OperatorTakeTest.java, +import io.reactivex.subjects.PublishSubject;, +    , +    @Test, +    public void testReentrantTake() {, +        PublishSubject<Integer> source = PublishSubject.create();, +        , +        TestSubscriber<Integer> ts = new TestSubscriber<>();, +        , +        source.take(1).doOnNext(v -> source.onNext(2)).subscribe(ts);, +        , +        source.onNext(1);, +        , +        ts.assertValue(1);, +        ts.assertNoErrors();, +        ts.assertComplete();, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorTake.java, +            if (!done && remaining-- > 0) {, +                boolean stop = remaining == 0;, +                if (stop) {, +++ b/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java, +            } else if (null != lvElement(buffer, calcWrappedOffset(index + 1, mask))) { // buffer is not full, +++ b/src/test/java/io/reactivex/internal/operators/OperatorTakeTest.java, +import io.reactivex.subjects.PublishSubject;, +    , +    @Test, +    public void testReentrantTake() {, +        PublishSubject<Integer> source = PublishSubject.create();, +        , +        TestSubscriber<Integer> ts = new TestSubscriber<>();, +        , +        source.take(1).doOnNext(v -> source.onNext(2)).subscribe(ts);, +        , +        source.onNext(1);, +        , +        ts.assertValue(1);, +        ts.assertNoErrors();, +        ts.assertComplete();, +    }, +++ b/src/test/java/io/reactivex/internal/operators/nbp/NbpOperatorTakeTest.java, +import io.reactivex.subjects.nbp.NbpPublishSubject;, +    , +    @Test, +    public void testReentrantTake() {, +        NbpPublishSubject<Integer> source = NbpPublishSubject.create();, +        , +        NbpTestSubscriber<Integer> ts = new NbpTestSubscriber<>();, +        , +        source.take(1).doOnNext(v -> source.onNext(2)).subscribe(ts);, +        , +        source.onNext(1);, +        , +        ts.assertValue(1);, +        ts.assertNoErrors();, +        ts.assertComplete();, +    }]