[+++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +                    if (idx == subscriptions.length) {, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +                    if (idx == subscriptions.length) {, +++ b/rxjava-core/src/test/java/rx/operators/OperatorRetryTest.java, +import static org.mockito.Mockito.doThrow;, +import org.mockito.Mockito;, +    /**, +     * Checks in a simple and synchronous way that retry resubscribes, +     * after error. This test fails against 0.16.1-0.17.4, hangs on 0.17.5 and, +     * passes in 0.17.6 thanks to fix for issue #1027., +     */, +    @SuppressWarnings("unchecked"), +    @Test, +    public void testRetrySubscribesAgainAfterError() {, +, +        // record emitted values with this action, +        Action1<Integer> record = mock(Action1.class);, +        InOrder inOrder = inOrder(record);, +, +        // always throw an exception with this action, +        Action1<Integer> throwException = mock(Action1.class);, +        doThrow(new RuntimeException()).when(throwException).call(Mockito.anyInt());, +        , +        // create a retrying observable based on a PublishSubject, +        PublishSubject<Integer> subject = PublishSubject.create();, +        subject, +        // record item, +        .doOnNext(record), +        // throw a RuntimeException, +                .doOnNext(throwException), +                // retry on error, +                .retry(), +                // subscribe and ignore, +                .subscribe();, +, +        inOrder.verifyNoMoreInteractions();, +, +        subject.onNext(1);, +        inOrder.verify(record).call(1);, +, +        subject.onNext(2);, +        inOrder.verify(record).call(2);, +, +        subject.onNext(3);, +        inOrder.verify(record).call(3);, +, +        inOrder.verifyNoMoreInteractions();, +    }, +, +, +    , +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +                    if (idx == subscriptions.length) {, +++ b/rxjava-core/src/test/java/rx/operators/OperatorRetryTest.java, +import static org.mockito.Mockito.doThrow;, +import org.mockito.Mockito;, +    /**, +     * Checks in a simple and synchronous way that retry resubscribes, +     * after error. This test fails against 0.16.1-0.17.4, hangs on 0.17.5 and, +     * passes in 0.17.6 thanks to fix for issue #1027., +     */, +    @SuppressWarnings("unchecked"), +    @Test, +    public void testRetrySubscribesAgainAfterError() {, +, +        // record emitted values with this action, +        Action1<Integer> record = mock(Action1.class);, +        InOrder inOrder = inOrder(record);, +, +        // always throw an exception with this action, +        Action1<Integer> throwException = mock(Action1.class);, +        doThrow(new RuntimeException()).when(throwException).call(Mockito.anyInt());, +        , +        // create a retrying observable based on a PublishSubject, +        PublishSubject<Integer> subject = PublishSubject.create();, +        subject, +        // record item, +        .doOnNext(record), +        // throw a RuntimeException, +                .doOnNext(throwException), +                // retry on error, +                .retry(), +                // subscribe and ignore, +                .subscribe();, +, +        inOrder.verifyNoMoreInteractions();, +, +        subject.onNext(1);, +        inOrder.verify(record).call(1);, +, +        subject.onNext(2);, +        inOrder.verify(record).call(2);, +, +        subject.onNext(3);, +        inOrder.verify(record).call(3);, +, +        inOrder.verifyNoMoreInteractions();, +    }, +]