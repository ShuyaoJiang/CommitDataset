[+++ b/rxjava-core/src/main/java/rx/Observable.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + * This class provides methods for subscribing to the Observable as well as delegate methods to the various, + * Observers., + * The documentation for this class makes use of marble diagrams. The following legend explains these diagrams:, + * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +     * <em>Note:</em> Use {@link #create(OnSubscribe)} to create an Observable, instead of this constructor,, +     * unless you specifically have a need for inheritance., +     * Returns an Observable that will execute the specified function when a {@link Subscriber} subscribes to, +     * it., +     * Write the function you pass to {@code create} so that it behaves as an Observable: It should invoke the, +     * Subscriber's {@link Subscriber#onNext onNext}, {@link Subscriber#onError onError}, and, +     * {@link Subscriber#onCompleted onCompleted} methods appropriately., +     * A well-formed Observable must invoke either the Subscriber's {@code onCompleted} method exactly once or, +     * its {@code onError} method exactly once., +     * See <a href="http://go.microsoft.com/fwlink/?LinkID=205219">Rx Design Guidelines (PDF)</a> for detailed, +     * information., +     * @return an Observable that, when a {@link Subscriber} subscribes to it, will execute the specified, +     *         function, +     * @deprecated use {@link #create(OnSubscribe)}, +     * Lift a function to the current Observable and return a new Observable that when subscribed to will pass, +     * the values of the current Observable through the function., +     * In other words, this allows chaining Observers together on an Observable for acting on the values within, +     * the Observable., +     * @return an Observable that emits values that are the result of applying the bind function to the values, +     *         of the current Observable, +    /* *********************************************************************************************************, +     * *********************************************************************************************************, +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * @return an Observable that emits a single item: the average of all the Doubles emitted by the source, +     *         Observable, +     * @return an Observable that emits a single item: the average of all the Floats emitted by the source, +     *         Observable, +     * Returns an Observable that emits the average of the Integers emitted by the source Observable., +     * @return an Observable that emits a single item: the average of all the Integers emitted by the source, +     *         Observable, +     * @return an Observable that emits a single item: the average of all the Longs emitted by the source, +     *         Observable, +     * Combines two source Observables by emitting an item that aggregates the latest values of each of the, +     * source Observables each time an item is received from either of the source Observables, where this, +     * aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     *         Observables by means of the given aggregation function, +     * Combines three source Observables by emitting an item that aggregates the latest values of each of the, +     * source Observables each time an item is received from any of the source Observables, where this, +     * aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     *         Observables by means of the given aggregation function, +     * Combines four source Observables by emitting an item that aggregates the latest values of each of the, +     * source Observables each time an item is received from any of the source Observables, where this, +     * aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     *         Observables by means of the given aggregation function, +     * Combines five source Observables by emitting an item that aggregates the latest values of each of the, +     * source Observables each time an item is received from any of the source Observables, where this, +     * aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     *         Observables by means of the given aggregation function, +     * Combines six source Observables by emitting an item that aggregates the latest values of each of the, +     * source Observables each time an item is received from any of the source Observables, where this, +     * aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     *         Observables by means of the given aggregation function, +     * Combines seven source Observables by emitting an item that aggregates the latest values of each of the, +     * source Observables each time an item is received from any of the source Observables, where this, +     * aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     *         Observables by means of the given aggregation function, +     * Combines eight source Observables by emitting an item that aggregates the latest values of each of the, +     * source Observables each time an item is received from any of the source Observables, where this, +     * aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by the source]