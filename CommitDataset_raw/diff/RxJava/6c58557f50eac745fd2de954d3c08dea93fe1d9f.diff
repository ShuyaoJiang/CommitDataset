[+++ b/src/main/java/io/reactivex/Single.java, +import org.reactivestreams.Publisher;, +, +     * Returns a Single which makes sure when a SingleObserver disposes the Disposable,, +     * that call is propagated up on the specified scheduler, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code unsubscribeOn} calls dispose() of the upstream on the {@link Scheduler} you specify.</dd>, +     * </dl>, +     * @param scheduler the target scheduler where to execute the cancellation, +     * @return the new Single instance, +     * @throws NullPointerException if scheduler is null, +     * @since 2.0.9 - experimental, +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.CUSTOM), +    @Experimental, +    public final Single<T> unsubscribeOn(final Scheduler scheduler) {, +        ObjectHelper.requireNonNull(scheduler, "scheduler is null");, +        return RxJavaPlugins.onAssembly(new SingleUnsubscribeOn<T>(this, scheduler));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Single.java, +import org.reactivestreams.Publisher;, +, +     * Returns a Single which makes sure when a SingleObserver disposes the Disposable,, +     * that call is propagated up on the specified scheduler, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code unsubscribeOn} calls dispose() of the upstream on the {@link Scheduler} you specify.</dd>, +     * </dl>, +     * @param scheduler the target scheduler where to execute the cancellation, +     * @return the new Single instance, +     * @throws NullPointerException if scheduler is null, +     * @since 2.0.9 - experimental, +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.CUSTOM), +    @Experimental, +    public final Single<T> unsubscribeOn(final Scheduler scheduler) {, +        ObjectHelper.requireNonNull(scheduler, "scheduler is null");, +        return RxJavaPlugins.onAssembly(new SingleUnsubscribeOn<T>(this, scheduler));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/internal/operators/single/SingleUnsubscribeOn.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators.single;, +, +import java.util.concurrent.atomic.AtomicReference;, +, +import io.reactivex.*;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.disposables.DisposableHelper;, +, +/**, + * Makes sure a dispose() call from downstream happens on the specified scheduler., + * , + * @param <T> the value type, + */, +public final class SingleUnsubscribeOn<T> extends Single<T> {, +, +    final SingleSource<T> source;, +, +    final Scheduler scheduler;, +, +    public SingleUnsubscribeOn(SingleSource<T> source, Scheduler scheduler) {, +        this.source = source;, +        this.scheduler = scheduler;, +    }, +, +    @Override, +    protected void subscribeActual(SingleObserver<? super T> observer) {, +        source.subscribe(new UnsubscribeOnSingleObserver<T>(observer, scheduler));, +    }, +, +    static final class UnsubscribeOnSingleObserver<T> extends AtomicReference<Disposable>, +    implements SingleObserver<T>, Disposable, Runnable {, +, +        private static final long serialVersionUID = 3256698449646456986L;, +, +        final SingleObserver<? super T> actual;, +, +        final Scheduler scheduler;, +, +        Disposable ds;, +]