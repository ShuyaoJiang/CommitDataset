[+++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBlock.java, +import rx.internal.util.BackpressureDrainManager;, +    static final class BlockingSubscriber<T> extends Subscriber<T> implements BackpressureDrainManager.BackpressureQueueCallback {, +        final BackpressureDrainManager manager;, +            this.manager = new BackpressureDrainManager(this);, +            child.setProducer(manager);, +                manager.drain();, +            manager.terminateAndDrain(e);, +            manager.terminateAndDrain();, +        @Override, +        public boolean accept(Object value) {, +            return nl.accept(child, value);, +        @Override, +        public void complete(Throwable exception) {, +            if (exception != null) {, +                child.onError(exception);, +        @Override, +        public Object peek() {, +            return queue.peek();, +        @Override, +        public Object poll() {, +            return queue.poll();, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBlock.java, +import rx.internal.util.BackpressureDrainManager;, +    static final class BlockingSubscriber<T> extends Subscriber<T> implements BackpressureDrainManager.BackpressureQueueCallback {, +        final BackpressureDrainManager manager;, +            this.manager = new BackpressureDrainManager(this);, +            child.setProducer(manager);, +                manager.drain();, +            manager.terminateAndDrain(e);, +            manager.terminateAndDrain();, +        @Override, +        public boolean accept(Object value) {, +            return nl.accept(child, value);, +        @Override, +        public void complete(Throwable exception) {, +            if (exception != null) {, +                child.onError(exception);, +        @Override, +        public Object peek() {, +            return queue.peek();, +        @Override, +        public Object poll() {, +            return queue.poll();, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +import rx.internal.util.BackpressureDrainManager;, +        BufferSubscriber<T> parent = new BufferSubscriber<T>(child, capacity, onOverflow);, +        // if child unsubscribes it should unsubscribe the parent, but not the other way around, +        child.add(parent);, +        child.setProducer(parent.manager());, +        return parent;, +    }, +    private static final class BufferSubscriber<T> extends Subscriber<T> implements BackpressureDrainManager.BackpressureQueueCallback {, +        // TODO get a different queue implementation, +        private final ConcurrentLinkedQueue<Object> queue = new ConcurrentLinkedQueue<Object>();, +        private final Long baseCapacity;, +        private final AtomicLong capacity;, +        private final Subscriber<? super T> child;, +        private final AtomicBoolean saturated = new AtomicBoolean(false);, +        private final BackpressureDrainManager manager;, +        private final NotificationLite<T> on = NotificationLite.instance();, +        private final Action0 onOverflow;, +        , +        public BufferSubscriber(final Subscriber<? super T> child, Long capacity, Action0 onOverflow) {, +            this.child = child;, +            this.baseCapacity = capacity;, +            this.capacity = capacity != null ? new AtomicLong(capacity) : null;, +            this.onOverflow = onOverflow;, +            this.manager = new BackpressureDrainManager(this);, +        }, +                manager.terminateAndDrain();, +                manager.terminateAndDrain(e);, +            manager.drain();, +        }, +, +        @Override, +        public boolean accept(Object value) {, +            return on.accept(child, value);, +        }, +        @Override, +        public void complete(Throwable exception) {, +            if (exception != null) {, +                child.onError(exception);, +            } else {, +                child.onCompleted();, +            }, +        }, +        @Override, +        public Object peek() {, +            return queue.peek();, +        }, +        @Override, +        public Object poll() {, +            return queue.poll();, +                                        + baseCapacity));, +        protected Producer manager() {, +            return manager;, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBlock.java, +import rx.internal.util.BackpressureDrainManager;, +    static final class BlockingSubscriber<T> extends Subscriber<T> implements BackpressureDrainManager.BackpressureQueueCallback {]