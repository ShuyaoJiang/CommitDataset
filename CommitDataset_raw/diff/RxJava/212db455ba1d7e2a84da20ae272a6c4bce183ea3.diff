[+++ b/src/main/java/io/reactivex/Flowable.java, +        return buffer(timespan, unit, Schedulers.computation(), Integer.MAX_VALUE);, +        return buffer(timespan, unit, Schedulers.computation(), count);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +    public final Flowable<List<T>> buffer(long timespan, TimeUnit unit, Scheduler scheduler, int count) {, +        return buffer(timespan, unit, scheduler, count, ArrayListSupplier.<T>asCallable(), false);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +            Scheduler scheduler, int count,, +        return buffer(timespan, unit, scheduler, Integer.MAX_VALUE, ArrayListSupplier.<T>asCallable(), false);, +++ b/src/main/java/io/reactivex/Flowable.java, +        return buffer(timespan, unit, Schedulers.computation(), Integer.MAX_VALUE);, +        return buffer(timespan, unit, Schedulers.computation(), count);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +    public final Flowable<List<T>> buffer(long timespan, TimeUnit unit, Scheduler scheduler, int count) {, +        return buffer(timespan, unit, scheduler, count, ArrayListSupplier.<T>asCallable(), false);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +            Scheduler scheduler, int count,, +        return buffer(timespan, unit, scheduler, Integer.MAX_VALUE, ArrayListSupplier.<T>asCallable(), false);, +++ b/src/main/java/io/reactivex/Observable.java, +        return buffer(timespan, unit, Schedulers.computation(), Integer.MAX_VALUE);, +        return buffer(timespan, unit, Schedulers.computation(), count);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +    public final Observable<List<T>> buffer(long timespan, TimeUnit unit, Scheduler scheduler, int count) {, +        return buffer(timespan, unit, scheduler, count, ArrayListSupplier.<T>asCallable(), false);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +            Scheduler scheduler, int count,, +        return buffer(timespan, unit, scheduler, Integer.MAX_VALUE, ArrayListSupplier.<T>asCallable(), false);, +++ b/src/main/java/io/reactivex/Flowable.java, +        return buffer(timespan, unit, Schedulers.computation(), Integer.MAX_VALUE);, +        return buffer(timespan, unit, Schedulers.computation(), count);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +    public final Flowable<List<T>> buffer(long timespan, TimeUnit unit, Scheduler scheduler, int count) {, +        return buffer(timespan, unit, scheduler, count, ArrayListSupplier.<T>asCallable(), false);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +            Scheduler scheduler, int count,, +        return buffer(timespan, unit, scheduler, Integer.MAX_VALUE, ArrayListSupplier.<T>asCallable(), false);, +++ b/src/main/java/io/reactivex/Observable.java, +        return buffer(timespan, unit, Schedulers.computation(), Integer.MAX_VALUE);, +        return buffer(timespan, unit, Schedulers.computation(), count);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +    public final Observable<List<T>> buffer(long timespan, TimeUnit unit, Scheduler scheduler, int count) {, +        return buffer(timespan, unit, scheduler, count, ArrayListSupplier.<T>asCallable(), false);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +            Scheduler scheduler, int count,, +        return buffer(timespan, unit, scheduler, Integer.MAX_VALUE, ArrayListSupplier.<T>asCallable(), false);, +++ b/src/main/java/io/reactivex/internal/observers/BasicFuseableObserver.java, +++ b/src/main/java/io/reactivex/Flowable.java, +        return buffer(timespan, unit, Schedulers.computation(), Integer.MAX_VALUE);, +        return buffer(timespan, unit, Schedulers.computation(), count);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +    public final Flowable<List<T>> buffer(long timespan, TimeUnit unit, Scheduler scheduler, int count) {, +        return buffer(timespan, unit, scheduler, count, ArrayListSupplier.<T>asCallable(), false);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +            Scheduler scheduler, int count,, +        return buffer(timespan, unit, scheduler, Integer.MAX_VALUE, ArrayListSupplier.<T>asCallable(), false);, +++ b/src/main/java/io/reactivex/Observable.java, +        return buffer(timespan, unit, Schedulers.computation(), Integer.MAX_VALUE);, +        return buffer(timespan, unit, Schedulers.computation(), count);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +    public final Observable<List<T>> buffer(long timespan, TimeUnit unit, Scheduler scheduler, int count) {, +        return buffer(timespan, unit, scheduler, count, ArrayListSupplier.<T>asCallable(), false);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +            Scheduler scheduler, int count,, +        return buffer(timespan, unit, scheduler, Integer.MAX_VALUE, ArrayListSupplier.<T>asCallable(), false);, +++ b/src/main/java/io/reactivex/internal/observers/BasicFuseableObserver.java, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java, +++ b/src/main/java/io/reactivex/Flowable.java, +        return buffer(timespan, unit, Schedulers.computation(), Integer.MAX_VALUE);, +        return buffer(timespan, unit, Schedulers.computation(), count);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +    public final Flowable<List<T>> buffer(long timespan, TimeUnit unit, Scheduler scheduler, int count) {, +        return buffer(timespan, unit, scheduler, count, ArrayListSupplier.<T>asCallable(), false);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +            Scheduler scheduler, int count,, +        return buffer(timespan, unit, scheduler, Integer.MAX_VALUE, ArrayListSupplier.<T>asCallable(), false);, +++ b/src/main/java/io/reactivex/Observable.java, +        return buffer(timespan, unit, Schedulers.computation(), Integer.MAX_VALUE);, +        return buffer(timespan, unit, Schedulers.computation(), count);, +     * @param count, +     *            the maximum size of each buffer before it is emitted, +    public final Observable<List<T>> buffer(long timespan, TimeUnit unit, Scheduler scheduler, int count) {, +        return buffer(timespan, unit, scheduler, count, ArrayListSupplier.<T>asCallable(), false);, +     * @param count, +     *            the maximum size of each buffer before it is emitted]