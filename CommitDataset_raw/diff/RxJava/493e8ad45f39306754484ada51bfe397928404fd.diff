[+++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    , +    @Test, +    public void testZip() {, +        Observable o1 = Observable.from(1, 2, 3);, +        Observable o2 = Observable.from(4, 5, 6);, +        Observable o3 = Observable.from(7, 8, 9);, +        , +        List values = Observable.zip(o1, o2, o3, {a, b, c -> [a, b, c] }).toList().toBlockingObservable().single();, +        assertEquals([1, 4, 7], values.get(0));, +        assertEquals([2, 5, 8], values.get(1));, +        assertEquals([3, 6, 9], values.get(2));, +    }, +    , +    @Test, +    public void testZipWithIterable() {, +        Observable o1 = Observable.from(1, 2, 3);, +        Observable o2 = Observable.from(4, 5, 6);, +        Observable o3 = Observable.from(7, 8, 9);, +        , +        List values = Observable.zip([o1, o2, o3], {a, b, c -> [a, b, c] }).toList().toBlockingObservable().single();, +        assertEquals([1, 4, 7], values.get(0));, +        assertEquals([2, 5, 8], values.get(1));, +        assertEquals([3, 6, 9], values.get(2));, +    }, +    , +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    , +    @Test, +    public void testZip() {, +        Observable o1 = Observable.from(1, 2, 3);, +        Observable o2 = Observable.from(4, 5, 6);, +        Observable o3 = Observable.from(7, 8, 9);, +        , +        List values = Observable.zip(o1, o2, o3, {a, b, c -> [a, b, c] }).toList().toBlockingObservable().single();, +        assertEquals([1, 4, 7], values.get(0));, +        assertEquals([2, 5, 8], values.get(1));, +        assertEquals([3, 6, 9], values.get(2));, +    }, +    , +    @Test, +    public void testZipWithIterable() {, +        Observable o1 = Observable.from(1, 2, 3);, +        Observable o2 = Observable.from(4, 5, 6);, +        Observable o3 = Observable.from(7, 8, 9);, +        , +        List values = Observable.zip([o1, o2, o3], {a, b, c -> [a, b, c] }).toList().toBlockingObservable().single();, +        assertEquals([1, 4, 7], values.get(0));, +        assertEquals([2, 5, 8], values.get(1));, +        assertEquals([3, 6, 9], values.get(2));, +    }, +    , +++ b/rxjava-core/src/test/java/rx/ReduceTests.java, +        Observable<Movie> horrorMovies = Observable.<Movie> from(new HorrorMovie());, +, +        Func2<Movie, Movie, Movie> chooseSecondMovie =, +                new Func2<Movie, Movie, Movie>() {, +                    public Movie call(Movie t1, Movie t2) {, +                        return t2;, +                    }, +                };, +, +        Observable<Movie> reduceResult = Observable.create(OperationScan.scan(horrorMovies, chooseSecondMovie)).takeLast(1);, +, +        Observable<Movie> reduceResult2 = horrorMovies.reduce(chooseSecondMovie);, +    }, +, +    @Test, +    public void reduceWithCovariantObjects() {, +        Observable<Movie> reduceResult = Observable.create(OperationScan.scan(obs, chooseSecondMovie)).takeLast(1);, +, +        //        Observable<Movie> reduceResult2 = obs.reduce(chooseSecondMovie);]