[+++ b/operators.html, +   dl > dt::before { content: "â€¦"; }, +   dl#outer > dt::before { content: ""; }, + <dt>I want to create an Observable by combining other Observables</dt>, +  <dd class="sub"><dl>, +   <dt>emitting all of the items from all of the Observables in whatever order they are received</dt>, +    <dd class="sub"><dl>, +     <dt>where the source Observables are passed to the operator as parameters</dt>, +      <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#merge"><code>merge(&hellip;)</code></a></dd>, +     <dt>where the source Observables are found in an Array</dt>, +      <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#merge"><code>merge(sequences)</code></a></dd>, +     <dt>where the source Observables are found in an Iterable</dt>, +      <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#merge"><code>merge(sequences)</code></a></dd>, +      <dd class="sub"><dl>, +       <dt>but I only want to process a certain number of them at once</dt>, +        <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#merge"><code>merge(sequences,maxConcurrent)</code></a></dd>, +      </dl></dd>, +     <dt>where the source Observables are emitted from an Observable</dt>, +      <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#merge"><code>merge(source)</code></a></dd>, +      <dd class="sub"><dl>, +       <dt>but I only want to process a certain number of them at once</dt>, +        <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#merge"><code>merge(source,maxConcurrent)</code></a></dd>, +      </dl></dd>, +     <dt>but not forwarding any error notifications until all source Observables have terminated</dt>, +      <dd class="sub"><dl>, +       <dt>where the source Observables are emitted from an Observable</dt>, +        <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#mergedelayerror"><code>mergeDelayError(source)</code></a></dd>, +       <dt>where the source Observables are passed to the operator as parameters</dt>, +        <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#mergedelayerror"><code>mergeDelayError(&hellip;)</code></a></dd>, +      </dl></dd>, +    </dl></dd>, +   <dt>reducing an Observable that emits many Observables to one that emits as many Observables as I have processes to process them on</dt>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#parallelmerge"><code>parallelMerge(&hellip;)</code></a></dd>, +   <dt>by combining the items from two or more Observables sequentially to come up with new items to emit</dt>, +    <dd class="sub"><dl>, +     <dt>whenever each Observable has emitted a new item</dt>, +      <dd class="sub"><dl>, +       <dt>where the source Observables are found in an Iterable</dt>, +        <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#zip"><code>zip(iterableOfObservables,zipFunction)</code></a></dd>, +       <dt>where the source Observables are emitted by an Observable</dt>, +        <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#zip"><code>zip(observableOfObservables,zipFunction)</code></a></dd>, +       <dt>where the source Observables are passed to the operator as parameters</dt>, +        <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#zip"><code>zip(&hellip;,zipFunction)</code></a></dd>, +      </dl></dd>, +     <dt>whenever any Observable has emitted a new item</dt>, +      <dd class="sub"><dl>, +       <dt>where the source Observables are found in a List</dt>, +        <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#combinelatest"><code>combineLatest(sources,combineFunction)></code></a></dd>, +       <dt>where the source Observables are passed to the operator as parameters</dt>, +        <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#combinelatest"><code>combineLatest(&hellip;,combineFunction)></code></a></dd>, +      </dl></dd>, +     <dt>whenever an item is emitted by one Observable in a window defined by an item emitted by another</dt>, +      <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#join-and-groupjoin"><code>join(&#8239;)</code></a></dd>, +      <dd class="sub"><dl>, +       <dt>based on an Observable that emits all items that have fallen in such a window</dt>, +        <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#join-and-groupjoin"><code>groupJoin(&#8239;)</code></a></dd>, +      </dl></dd>, +     <dt>by means of <code>Pattern</code> and <code>Plan</code> intermediaries</dt>, +      <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#and-then-and-when"><code>and/then/when</code></a></dd>, +    </dl></dd>, +   <dt>by always emitting the items from only the most-recently emitted of those Observables</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#switchonnext"><code>switchOnNext(&#8239;)</code></a></dd>, +  </dl></dd>, +, + <dt>I want emit the items from an Observable after transforming them</dt>, +   <dt>by combining them sequentially with the items in an Iterable by means of a function</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#zip"><code>zip(iterable,zipFunction)</code></a></dd>, +   <dt>by attaching a timestamp to them</dt>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#timestamp"><code>timestamp(&#8239;)</code></a></dd>, +   <dt>by emitting an indicator of the amount of time lapsed before the emission of the item</dt>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#itmeinterval"><code>timeInterval(&#8239;)</code></a></dd>, +  </dl></dd>, +, + <dt>I want to shift the items emitted by an Observable forward in time before reemitting them</dt>, +  <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#delay"><code>delay(delay,unit)</code></a></dd>, +  <dd class="sub"><dl>, +   <dt>with the amount of the shift calculated on a per-item basis</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#delay"><code>delay(itemDelay)</code></a></dd> , +   <dt>and the initial subscription to the Observable shifted as well</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#delay"><code>delay(subscriptionDelay,itemDelay)</code></a></dd>, +   <dt>by wrapping them in <code>Notification</code> objects</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#materialize"><code>materialize(&#8239;)</code></a></dd>, +    <dd class="sub"><dl>, +     <dt>which I can then unwrap again with</dt>, +      <dd><a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#dematerialize"><code>dematerialize(&#8239;)</code></a></dd>, +    </dl></dd>, +  </dl></dd>, +, + <dt>I want to ignore all items emitted by an Observable and only pass along its completed/error notification</dt>, +  <dd><a href="https://github.com/Netflix/RxJava/wiki/Filtering-Observables#ignoreelements"><code>ignoreElements(&#8239;)</code></a></dd>, +, + <dt>I want to mirror an Observable but prefix items to its sequence</dt>, +  <dd class="sub"><dl>, +   <dt>obtained from an Array or Iterable</dt>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#startwith"><code>startWith(values)</code></a></dd>, +   <dt>obtained from an Observable</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#startwith"><code>startWith(values)</code></a></dd>, +   <dt>passed as parameters to the operator</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#startwith"><code>startWith(&hellip;)</code></a></dd>, +        <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Filtering-Observables#sample-or-throttlelast"><code>sample(time,unit)</code></a></dd>]