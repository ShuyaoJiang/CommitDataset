[+++ b/.gitignore, +.gradletasknamecache, +++ b/.gitignore, +.gradletasknamecache, +++ b/CHANGES.md, +++ b/.gitignore, +.gradletasknamecache, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.17.0-RC7-SNAPSHOT, +++ b/.gitignore, +.gradletasknamecache, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.17.0-RC7-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  val fourYears = 4000.millis, +  val neverUsedDummyMedal = Medal(3333, "?", "?", "?", "?", "?"), +  def fourYearsEmpty: Observable[Medal] = {, +    // Observable.interval(fourYears).take(1).map(i => neverUsedDummyMedal).filter(m => false), +    Observable.empty, +  }, +++ b/.gitignore, +.gradletasknamecache, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.17.0-RC7-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  val fourYears = 4000.millis, +  val neverUsedDummyMedal = Medal(3333, "?", "?", "?", "?", "?"), +  def fourYearsEmpty: Observable[Medal] = {, +    // Observable.interval(fourYears).take(1).map(i => neverUsedDummyMedal).filter(m => false), +    Observable.empty, +  }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val b1 = (first zip second) map (p => p._1 == p._2) forall (b => b), +    val equality = (a: Any, b: Any) => a == b, +    val b2 = (first zip second) map (p => equality(p._1, p._2)) forall (b => b), +, +    assertTrue(b1.toBlockingObservable.single), +    assertTrue(b2.toBlockingObservable.single), +    val b1 = booleans.forall(_ == true) // without `== true`, b1 is assigned the forall function, +  @Ignore // TODO something's bad here, +      numbers.take(1) // <- TODO very unexpected, +      //numbers, +    waitFor(firstMedalOfEachCountry), +    val first_counter = Observable.interval(250 millis), +    val second_counter = Observable.interval(550 millis), +    val combined_counter = first_counter.combineLatest(second_counter,, +    combined_counter subscribe {x => println(s"Emitted group: $x")}, +  @Test def olympicsExample() {, +    val medals = Olympics.mountainBikeMedals.publish, +    medals.subscribe(println(_)), +    //waitFor(medals), +    val unshared = List(1 to 4).toObservable, +    val unshared = List(1 to 4).toObservable, +    val timestamped = Observable.interval(100 millis).take(3).timestamp.toBlockingObservable, +  @Test def elementAtReplacement() {, +    assertEquals("b", List("a", "b", "c").toObservable.drop(1).first.toBlockingObservable.single), +  }, +, +  @Test def elementAtOrDefaultReplacement() {, +    assertEquals("b", List("a", "b", "c").toObservable.drop(1).firstOrElse("!").toBlockingObservable.single), +    assertEquals("!!", List("a", "b", "c").toObservable.drop(10).firstOrElse("!!").toBlockingObservable.single), +  }, +, +  @Test def createExample() {, +      // this is bad because you cannot unsubscribe!, +      observer.onNext("a"), +      observer.onNext("b"), +    o.subscribe(println(_)), +  // blocks until obs has completed, +++ b/.gitignore, +.gradletasknamecache, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.17.0-RC7-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  val fourYears = 4000.millis, +  val neverUsedDummyMedal = Medal(3333, "?", "?", "?", "?", "?"), +  def fourYearsEmpty: Observable[Medal] = {, +    // Observable.interval(fourYears).take(1).map(i => neverUsedDummyMedal).filter(m => false), +    Observable.empty, +  }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val b1 = (first zip second) map (p => p._1 == p._2) forall (b => b), +    val equality = (a: Any, b: Any) => a == b, +    val b2 = (first zip second) map (p => equality(p._1, p._2)) forall (b => b), +, +    assertTrue(b1.toBlockingObservable.single), +    assertTrue(b2.toBlockingObservable.single), +    val b1 = booleans.forall(_ == true) // without `== true`, b1 is assigned the forall function, +  @Ignore // TODO something's bad here, +      numbers.take(1) // <- TODO very unexpected, +      //numbers, +    waitFor(firstMedalOfEachCountry), +    val first_counter = Observable.interval(250 millis), +    val second_counter = Observable.interval(550 millis), +    val combined_counter = first_counter.combineLatest(second_counter,, +    combined_counter subscribe {x => println(s"Emitted group: $x")}]