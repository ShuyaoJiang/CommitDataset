[+++ b/src/main/java/rx/schedulers/TestScheduler.java, +            // if scheduled time is 0 (immediate) use current virtual time, +            time = current.time == 0 ? time : current.time;, +        private final BooleanSubscription s = new BooleanSubscription();, +++ b/src/main/java/rx/schedulers/TestScheduler.java, +            // if scheduled time is 0 (immediate) use current virtual time, +            time = current.time == 0 ? time : current.time;, +        private final BooleanSubscription s = new BooleanSubscription();, +++ b/src/test/java/rx/schedulers/TestSchedulerTest.java, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +    @Test, +    public final void testNestedSchedule() {, +        final TestScheduler scheduler = new TestScheduler();, +        final Scheduler.Worker inner = scheduler.createWorker();, +        final Action0 calledOp = mock(Action0.class);, +, +        Observable<Object> poller;, +        poller = Observable.create(new OnSubscribe<Object>() {, +            @Override, +            public void call(final Subscriber<? super Object> aSubscriber) {, +                inner.schedule(new Action0() {, +                    @Override, +                    public void call() {, +                        if (!aSubscriber.isUnsubscribed()) {, +                            calledOp.call();, +                            inner.schedule(this, 5, TimeUnit.SECONDS);, +                        }, +                    }, +                });, +            }, +        });, +, +        InOrder inOrder = Mockito.inOrder(calledOp);, +, +        Subscription sub;, +        sub = poller.subscribe();, +, +        scheduler.advanceTimeTo(6, TimeUnit.SECONDS);, +        inOrder.verify(calledOp, times(2)).call();, +, +        sub.unsubscribe();, +        scheduler.advanceTimeTo(11, TimeUnit.SECONDS);, +        inOrder.verify(calledOp, never()).call();, +, +        sub = poller.subscribe();, +        scheduler.advanceTimeTo(12, TimeUnit.SECONDS);, +        inOrder.verify(calledOp, times(1)).call();, +    }]