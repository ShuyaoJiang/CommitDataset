[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAmb.java, +import io.reactivex.exceptions.Exceptions;, +            try {, +                    if (p == null) {, +                        EmptySubscription.error(new NullPointerException("One of the sources is null"), s);, +                        return;, +                    }, +            } catch (Throwable e) {, +                Exceptions.throwIfFatal(e);, +                EmptySubscription.error(e, s);, +                return;, +            }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAmb.java, +import io.reactivex.exceptions.Exceptions;, +            try {, +                    if (p == null) {, +                        EmptySubscription.error(new NullPointerException("One of the sources is null"), s);, +                        return;, +                    }, +            } catch (Throwable e) {, +                Exceptions.throwIfFatal(e);, +                EmptySubscription.error(e, s);, +                return;, +            }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableAmb.java, +import io.reactivex.exceptions.Exceptions;, +            try {, +                    if (p == null) {, +                        EmptyDisposable.error(new NullPointerException("One of the sources is null"), s);, +                        return;, +                    }, +            } catch (Throwable e) {, +                Exceptions.throwIfFatal(e);, +                EmptyDisposable.error(e, s);, +                return;, +            }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAmb.java, +import io.reactivex.exceptions.Exceptions;, +            try {, +                    if (p == null) {, +                        EmptySubscription.error(new NullPointerException("One of the sources is null"), s);, +                        return;, +                    }, +            } catch (Throwable e) {, +                Exceptions.throwIfFatal(e);, +                EmptySubscription.error(e, s);, +                return;, +            }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableAmb.java, +import io.reactivex.exceptions.Exceptions;, +            try {, +                    if (p == null) {, +                        EmptyDisposable.error(new NullPointerException("One of the sources is null"), s);, +                        return;, +                    }, +            } catch (Throwable e) {, +                Exceptions.throwIfFatal(e);, +                EmptyDisposable.error(e, s);, +                return;, +            }, +++ b/src/test/java/io/reactivex/flowable/FlowableNullTests.java, +    @Test, +        }).test().assertError(NullPointerException.class);, +    @Test, +        Flowable.amb(Arrays.asList(Flowable.never(), null)), +                .test(), +                .assertError(NullPointerException.class);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAmb.java, +import io.reactivex.exceptions.Exceptions;, +            try {, +                    if (p == null) {, +                        EmptySubscription.error(new NullPointerException("One of the sources is null"), s);, +                        return;, +                    }, +            } catch (Throwable e) {, +                Exceptions.throwIfFatal(e);, +                EmptySubscription.error(e, s);, +                return;, +            }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableAmb.java, +import io.reactivex.exceptions.Exceptions;, +            try {, +                    if (p == null) {, +                        EmptyDisposable.error(new NullPointerException("One of the sources is null"), s);, +                        return;, +                    }, +            } catch (Throwable e) {, +                Exceptions.throwIfFatal(e);, +                EmptyDisposable.error(e, s);, +                return;, +            }, +++ b/src/test/java/io/reactivex/flowable/FlowableNullTests.java, +    @Test, +        }).test().assertError(NullPointerException.class);, +    @Test, +        Flowable.amb(Arrays.asList(Flowable.never(), null)), +                .test(), +                .assertError(NullPointerException.class);, +++ b/src/test/java/io/reactivex/observable/ObservableNullTests.java, +    @Test]