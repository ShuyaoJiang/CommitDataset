[+++ b/src/main/java/io/reactivex/Completable.java, +     * If the Completable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +     * <p>, +++ b/src/main/java/io/reactivex/Completable.java, +     * If the Completable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +     * <p>, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * If the Flowable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +     * <p>, +        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);, +     * <p>, +     * If the Flowable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return forEachWhile(onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);, +     * If the Flowable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return subscribe(Functions.emptyConsumer(), Functions.ON_ERROR_MISSING,, +     * If the Flowable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return subscribe(onNext, Functions.ON_ERROR_MISSING,, +++ b/src/main/java/io/reactivex/Completable.java, +     * If the Completable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +     * <p>, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * If the Flowable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +     * <p>, +        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);, +     * <p>, +     * If the Flowable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return forEachWhile(onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);, +     * If the Flowable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return subscribe(Functions.emptyConsumer(), Functions.ON_ERROR_MISSING,, +     * If the Flowable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return subscribe(onNext, Functions.ON_ERROR_MISSING,, +++ b/src/main/java/io/reactivex/Maybe.java, +     * If the Maybe emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return subscribe(Functions.emptyConsumer(), Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);, +     * If the Maybe emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return subscribe(onSuccess, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);, +++ b/src/main/java/io/reactivex/Completable.java, +     * If the Completable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +     * <p>, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * If the Flowable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +     * <p>, +        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);, +     * <p>, +     * If the Flowable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return forEachWhile(onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);, +     * If the Flowable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return subscribe(Functions.emptyConsumer(), Functions.ON_ERROR_MISSING,, +     * If the Flowable emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return subscribe(onNext, Functions.ON_ERROR_MISSING,, +++ b/src/main/java/io/reactivex/Maybe.java, +     * If the Maybe emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return subscribe(Functions.emptyConsumer(), Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);, +     * If the Maybe emits an error, it is wrapped into an, +     * {@link io.reactivex.exceptions.OnErrorNotImplementedException OnErrorNotImplementedException}, +     * and routed to the RxJavaPlugins.onError handler., +        return subscribe(onSuccess, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);, +++ b/src/main/java/io/reactivex/Observable.java, +     * <p>]