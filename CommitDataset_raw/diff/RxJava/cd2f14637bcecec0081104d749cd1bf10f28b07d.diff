[+++ b/rxjava-core/src/main/java/rx/util/CompositeException.java, +import java.util.HashSet;, +import java.util.Set;, +    /* package-private */ static void attachCallingThreadStack(Throwable e, Throwable cause) {, +        Set<Throwable> seenCauses = new HashSet<Throwable>();, +, +            if (seenCauses.contains(e.getCause())) {, +                break;, +            } else {, +                seenCauses.add(e.getCause());, +            }, +    /* package-private */ final static class CompositeExceptionCausalChain extends RuntimeException {, +        /* package-private */ static String MESSAGE = "Chain of Causes for CompositeException In Order Received =>";, +            return MESSAGE;, +++ b/rxjava-core/src/main/java/rx/util/CompositeException.java, +import java.util.HashSet;, +import java.util.Set;, +    /* package-private */ static void attachCallingThreadStack(Throwable e, Throwable cause) {, +        Set<Throwable> seenCauses = new HashSet<Throwable>();, +, +            if (seenCauses.contains(e.getCause())) {, +                break;, +            } else {, +                seenCauses.add(e.getCause());, +            }, +    /* package-private */ final static class CompositeExceptionCausalChain extends RuntimeException {, +        /* package-private */ static String MESSAGE = "Chain of Causes for CompositeException In Order Received =>";, +            return MESSAGE;, +++ b/rxjava-core/src/test/java/rx/util/CompositeExceptionTest.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.util;, +, +import static org.junit.Assert.*;, +, +import org.junit.Test;, +, +import java.util.ArrayList;, +import java.util.List;, +, +public class CompositeExceptionTest {, +, +    private final Throwable ex1 = new Throwable("Ex1");, +    private final Throwable ex2 = new Throwable("Ex2", ex1);, +    private final Throwable ex3 = new Throwable("Ex3", ex2);, +, +    private final CompositeException compositeEx;, +, +    public CompositeExceptionTest() {, +        List<Throwable> throwables = new ArrayList<Throwable>();, +        throwables.add(ex1);, +        throwables.add(ex2);, +        throwables.add(ex3);, +        compositeEx = new CompositeException(throwables);, +    }, +, +    @Test, +    public void testAttachCallingThreadStackParentThenChild() {, +        CompositeException.attachCallingThreadStack(ex1, ex2);, +        assertEquals("Ex2", ex1.getCause().getMessage());, +    }, +, +    @Test, +    public void testAttachCallingThreadStackChildThenParent() {, +        CompositeException.attachCallingThreadStack(ex2, ex1);, +        assertEquals("Ex1", ex2.getCause().getMessage());, +    }, +, +    @Test, +    public void testAttachCallingThreadStackAddComposite() {, +        CompositeException.attachCallingThreadStack(ex1, compositeEx);, +        assertEquals("Ex2", ex1.getCause().getMessage());, +    }, +, +    @Test, +    public void testAttachCallingThreadStackAddToComposite() {, +        CompositeException.attachCallingThreadStack(compositeEx, ex1);, +        assertEquals(CompositeException.CompositeExceptionCausalChain.MESSAGE, compositeEx.getCause().getMessage());, +    }, +, +    @Test, +    public void testAttachCallingThreadStackAddCompositeToItself() {, +        CompositeException.attachCallingThreadStack(compositeEx, compositeEx);, +        assertEquals(CompositeException.CompositeExceptionCausalChain.MESSAGE, compositeEx.getCause().getMessage());, +    }, +}]