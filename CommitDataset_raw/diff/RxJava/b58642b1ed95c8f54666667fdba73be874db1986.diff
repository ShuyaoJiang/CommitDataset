[+++ b/src/main/java/io/reactivex/Completable.java, +        ObjectHelper.requireNonNull(unit, "unit is null");, +++ b/src/main/java/io/reactivex/Completable.java, +        ObjectHelper.requireNonNull(unit, "unit is null");, +++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source4, "source4 is null");, +        ObjectHelper.requireNonNull(sources, "sources is null");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.requireNonNull(sources, "sources is null");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.requireNonNull(sources, "sources is null");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(initialCapacity, "initialCapacity");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.requireNonNull(other, "other is null");, +        ObjectHelper.requireNonNull(leftEnd, "leftEnd is null");, +        ObjectHelper.requireNonNull(rightEnd, "rightEnd is null");, +        ObjectHelper.requireNonNull(resultSelector, "resultSelector is null");, +        ObjectHelper.requireNonNull(other, "other is null");, +        ObjectHelper.requireNonNull(leftEnd, "leftEnd is null");, +        ObjectHelper.requireNonNull(rightEnd, "rightEnd is null");, +        ObjectHelper.requireNonNull(resultSelector, "resultSelector is null");, +        ObjectHelper.verifyPositive(capacity, "capacity");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.requireNonNull(unit, "unit is null");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.requireNonNull(scheduler, "scheduler is null");, +        ObjectHelper.requireNonNull(selector, "selector is null");, +        ObjectHelper.requireNonNull(scheduler, "scheduler is null");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.requireNonNull(sortFunction, "sortFunction");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +    public final Flowable<T> timeout(long timeout, TimeUnit timeUnit, Publisher<? extends T> other) {, +    public final Flowable<T> timeout(long timeout, TimeUnit timeUnit, Scheduler scheduler, Publisher<? extends T> other) {, +    private Flowable<T> timeout0(long timeout, TimeUnit timeUnit, Publisher<? extends T> other,, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source4, "source4 is null");, +++ b/src/main/java/io/reactivex/Completable.java, +        ObjectHelper.requireNonNull(unit, "unit is null");, +++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source4, "source4 is null");, +        ObjectHelper.requireNonNull(sources, "sources is null");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.requireNonNull(sources, "sources is null");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.requireNonNull(sources, "sources is null");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(initialCapacity, "initialCapacity");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");]