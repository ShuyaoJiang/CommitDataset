[+++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/operators/SafeObserver.java, +            RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +                /*, +                try {, +                    subscription.unsubscribe();, +                } catch (Throwable unsubscribeException) {, +                    RxJavaPlugins.getInstance().getErrorHandler().handleError(unsubscribeException);, +                    throw new RuntimeException("Observer.onError not implemented and error while unsubscribing.", new CompositeException(Arrays.asList(e, unsubscribeException)));, +                }, +                /*, +                 * throw since the Rx contract is broken if onError failed, +                 * , +                 * https://github.com/Netflix/RxJava/issues/198, +                 */, +                try {, +                    subscription.unsubscribe();, +                } catch (Throwable unsubscribeException) {, +                    RxJavaPlugins.getInstance().getErrorHandler().handleError(unsubscribeException);, +                    throw new RuntimeException("Error occurred when trying to propagate error to Observer.onError and during unsubscription.", new CompositeException(Arrays.asList(e, e2, unsubscribeException)));, +                }, +, +        }, +        // if we did not throw about we will unsubscribe here, if onError failed then unsubscribe happens in the catch, +        try {, +        } catch (RuntimeException unsubscribeException) {, +            RxJavaPlugins.getInstance().getErrorHandler().handleError(unsubscribeException);, +            throw unsubscribeException;, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/operators/SafeObserver.java, +            RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +                /*, +                try {, +                    subscription.unsubscribe();, +                } catch (Throwable unsubscribeException) {, +                    RxJavaPlugins.getInstance().getErrorHandler().handleError(unsubscribeException);, +                    throw new RuntimeException("Observer.onError not implemented and error while unsubscribing.", new CompositeException(Arrays.asList(e, unsubscribeException)));, +                }, +                /*, +                 * throw since the Rx contract is broken if onError failed, +                 * , +                 * https://github.com/Netflix/RxJava/issues/198, +                 */, +                try {, +                    subscription.unsubscribe();, +                } catch (Throwable unsubscribeException) {, +                    RxJavaPlugins.getInstance().getErrorHandler().handleError(unsubscribeException);, +                    throw new RuntimeException("Error occurred when trying to propagate error to Observer.onError and during unsubscription.", new CompositeException(Arrays.asList(e, e2, unsubscribeException)));, +                }, +, +        }, +        // if we did not throw about we will unsubscribe here, if onError failed then unsubscribe happens in the catch, +        try {, +        } catch (RuntimeException unsubscribeException) {, +            RxJavaPlugins.getInstance().getErrorHandler().handleError(unsubscribeException);, +            throw unsubscribeException;, +++ b/rxjava-core/src/main/java/rx/plugins/RxJavaErrorHandler.java, +     * <p>, +     * This should NEVER throw an Exception. Make sure to try/catch(Throwable) all code inside this method implementation., +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/operators/SafeObserver.java, +            RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +                /*, +                try {, +                    subscription.unsubscribe();, +                } catch (Throwable unsubscribeException) {, +                    RxJavaPlugins.getInstance().getErrorHandler().handleError(unsubscribeException);, +                    throw new RuntimeException("Observer.onError not implemented and error while unsubscribing.", new CompositeException(Arrays.asList(e, unsubscribeException)));, +                }, +                /*, +                 * throw since the Rx contract is broken if onError failed, +                 * , +                 * https://github.com/Netflix/RxJava/issues/198, +                 */, +                try {, +                    subscription.unsubscribe();, +                } catch (Throwable unsubscribeException) {, +                    RxJavaPlugins.getInstance().getErrorHandler().handleError(unsubscribeException);, +                    throw new RuntimeException("Error occurred when trying to propagate error to Observer.onError and during unsubscription.", new CompositeException(Arrays.asList(e, e2, unsubscribeException)));, +                }, +, +        }, +        // if we did not throw about we will unsubscribe here, if onError failed then unsubscribe happens in the catch, +        try {, +        } catch (RuntimeException unsubscribeException) {, +            RxJavaPlugins.getInstance().getErrorHandler().handleError(unsubscribeException);, +            throw unsubscribeException;, +++ b/rxjava-core/src/main/java/rx/plugins/RxJavaErrorHandler.java, +     * <p>, +     * This should NEVER throw an Exception. Make sure to try/catch(Throwable) all code inside this method implementation., +++ b/rxjava-core/src/main/java/rx/plugins/RxJavaPlugins.java, +    public static RxJavaPlugins getInstance() {, +        return INSTANCE;, +    }, +, +    /* package accessible for ujnit tests */ void reset() {, +        INSTANCE.errorHandler.set(null);, +        INSTANCE.observableExecutionHook.set(null);, +            throw new IllegalStateException("Another strategy was already registered: " + errorHandler.get());]