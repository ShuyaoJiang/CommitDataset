[+++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +import io.reactivex.internal.functions.Functions;, +        return (U)assertError(Functions.equalsWith(error));, +        return (U)assertError((Predicate)Functions.isInstanceOf(errorClass));, +++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +import io.reactivex.internal.functions.Functions;, +        return (U)assertError(Functions.equalsWith(error));, +        return (U)assertError((Predicate)Functions.isInstanceOf(errorClass));, +++ b/src/test/java/io/reactivex/observers/TestObserverTest.java, +        ts.assertValueSequence(Collections.singletonList(1));, +            ts.assertValueSequence(Collections.singletonList(2));, +            // expected, +            // expected, +            // expected, +            // expected, +        assertEquals(Collections.emptyList(), ts.values());, +        assertEquals(Collections.singletonList(1), ts.values());, +        assertEquals(Arrays.asList(Collections.singletonList(1), Collections.emptyList(), Collections.emptyList()), ts.getEvents());, +        assertEquals(Arrays.asList(Collections.singletonList(1), Collections.emptyList(), Collections.singletonList(Notification.createOnComplete())), ts.getEvents());, +            ts.assertValueSequence(Collections.<Integer>emptyList());, +            ts.assertValueSequence(Collections.singletonList(1));, +++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +import io.reactivex.internal.functions.Functions;, +        return (U)assertError(Functions.equalsWith(error));, +        return (U)assertError((Predicate)Functions.isInstanceOf(errorClass));, +++ b/src/test/java/io/reactivex/observers/TestObserverTest.java, +        ts.assertValueSequence(Collections.singletonList(1));, +            ts.assertValueSequence(Collections.singletonList(2));, +            // expected, +            // expected, +            // expected, +            // expected, +        assertEquals(Collections.emptyList(), ts.values());, +        assertEquals(Collections.singletonList(1), ts.values());, +        assertEquals(Arrays.asList(Collections.singletonList(1), Collections.emptyList(), Collections.emptyList()), ts.getEvents());, +        assertEquals(Arrays.asList(Collections.singletonList(1), Collections.emptyList(), Collections.singletonList(Notification.createOnComplete())), ts.getEvents());, +            ts.assertValueSequence(Collections.<Integer>emptyList());, +            ts.assertValueSequence(Collections.singletonList(1));, +++ b/src/test/java/io/reactivex/subscribers/TestSubscriberTest.java, +        ts.assertValueSequence(Collections.singletonList(1));, +            ts.assertValueSequence(Collections.singletonList(2));, +            // expected, +            // expected, +            // expected, +            // expected, +        assertEquals(Collections.emptyList(), ts.values());, +        assertEquals(Collections.singletonList(1), ts.values());, +        assertEquals(Arrays.asList(Collections.singletonList(1), Collections.emptyList(), Collections.emptyList()), ts.getEvents());, +        assertEquals(Arrays.asList(Collections.singletonList(1), Collections.emptyList(), Collections.singletonList(Notification.createOnComplete())), ts.getEvents());, +            ts.assertValueSequence(Collections.<Integer>emptyList());, +            ts.assertValueSequence(Collections.singletonList(1));]