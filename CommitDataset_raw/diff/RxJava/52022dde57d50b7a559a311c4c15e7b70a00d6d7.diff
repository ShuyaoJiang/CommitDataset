[+++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create(OnSubscribeFunc<String> {, +    it!!.onNext("Hello"), +    it.onCompleted(), +})!!.subscribe { result ->, +}.asObservableFunc().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create(OnSubscribeFunc<String> {, +    it!!.onNext("Hello"), +    it.onCompleted(), +})!!.subscribe { result ->, +}.asObservableFunc().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +import rx.Observable.OnSubscribe, +import rx.Subscription, +import rx.Observable.OnSubscribeFunc, +, +public fun<T> Function1<Observer<in T>, Unit>.asObservable(): Observable<T> {, +    return Observable.create(OnSubscribe<T>{ t1 ->, +        this(t1!!), +    })!!, +}, +, +public fun<T> Function1<Observer<in T>, Subscription>.asObservableFunc(): Observable<T> {, +    return Observable.create(OnSubscribeFunc<T>{ op ->, +        this(op!!), +    })!!, +    return Observable.from(listOf(this.component1(), this.component2()))!!, +    return Observable.from(listOf(this.component1(), this.component2(), this.component3()))!!, +++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create(OnSubscribeFunc<String> {, +    it!!.onNext("Hello"), +    it.onCompleted(), +})!!.subscribe { result ->, +}.asObservableFunc().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +import rx.Observable.OnSubscribe, +import rx.Subscription, +import rx.Observable.OnSubscribeFunc, +, +public fun<T> Function1<Observer<in T>, Unit>.asObservable(): Observable<T> {, +    return Observable.create(OnSubscribe<T>{ t1 ->, +        this(t1!!), +    })!!, +}, +, +public fun<T> Function1<Observer<in T>, Subscription>.asObservableFunc(): Observable<T> {, +    return Observable.create(OnSubscribeFunc<T>{ op ->, +        this(op!!), +    })!!, +    return Observable.from(listOf(this.component1(), this.component2()))!!, +    return Observable.from(listOf(this.component1(), this.component2(), this.component3()))!!, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +public class BasicKotlinTests:KotlinTests() {, +, +        Observable.create(OnSubscribeFunc<String> {, +        })!!.subscribe { result ->, +        Observable.from(listOf(1, 2, 3))!!.filter { it!! >= 2 }!!.subscribe(received()), +        assertEquals("three", Observable.from(listOf("one", "two", "three"))!!.toBlockingObservable()!!.last()), +        assertEquals("two", Observable.from(listOf("one", "two", "three"))!!.toBlockingObservable()!!.last { x -> x!!.length == 3 }), +        Observable.from(listOf(1, 2, 3))!!.map { v -> "hello_$v" }!!.subscribe((received())), +        Observable.from(listOf(1, 2, 3))!!.materialize()!!.subscribe((received())), +                Observable.from(listOf(1, 2, 3)),, +                Observable.from(listOf(4, 5)), +                Observable.from(listOf(1, 2, 3)),, +                Observable.from(listOf(4, 5)), +        assertEquals(2, Observable.from(listOf(list, 6))!!.count()!!.toBlockingObservable()!!.single()), +        Observable.from(listOf(1, 2, 3))!!.skip(1)!!.take(1)!!.subscribe(received()), +        Observable.from(listOf(1, 2, 3))!!.skip(2)!!.subscribe(received()), +        Observable.from(listOf(1, 2, 3))!!.take(2)!!.subscribe(received()), +        Observable.from(listOf(1, 2, 3))!!.takeWhile { x -> x!! < 3 }!!.subscribe(received()), +        Observable.from(listOf(1, 2, 3))!!.takeWhileWithIndex { x, i -> i!! < 2 }!!.subscribe(received()), +        assertEquals("two", Observable.from(listOf("one", "two"))!!.toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length == 3 }), +        assertEquals("default", Observable.from(listOf("one", "two"))!!.toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length > 3 }), +        Observable.from(listOf("one", "two"))!!.toBlockingObservable()!!.single { x -> x!!.length == 3 }, +        Observable.defer { Observable.from(listOf(1, 2)) }!!.subscribe(received()), +        Observable.from(listOf(1, 2, 3))!!.all { x -> x!! > 0 }!!.subscribe(received()), +        val o1 = Observable.from(listOf(1, 2, 3))!!, +        val o2 = Observable.from(listOf(4, 5, 6))!!, +        val o3 = Observable.from(listOf(7, 8, 9))!!, +        val o1 = Observable.from(listOf(1, 2, 3))!!, +        val o2 = Observable.from(listOf(4, 5, 6))!!, +        val o3 = Observable.from(listOf(7, 8, 9))!!, +        Observable.from(listOf("one", "two", "three", "four", "five", "six"))!!, +                .flatMap { groupObervable ->, +        }!!.toBlockingObservable()!!.forEach { s ->, +                return Observable.from(listOf(1, 3, 2, 5, 4))!!, +        override fun onSubscribe(op: Observer<in Int>?): Subscription? {, +                op!!.onNext(1), +                op.onNext(2), +                op.onNext(3), +                op.onCompleted(), +        override fun onSubscribe(op: Observer<in String>?): Subscription? {, +            op!!.onNext("hello_$count"), +            op.onCompleted(), +++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create(OnSubscribeFunc<String> {, +    it!!.onNext("Hello"), +    it.onCompleted(), +})!!.subscribe { result ->]