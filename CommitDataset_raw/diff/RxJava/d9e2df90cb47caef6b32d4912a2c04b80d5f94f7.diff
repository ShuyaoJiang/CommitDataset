[+++ b/src/main/java/io/reactivex/internal/observers/DisposableLambdaObserver.java, +            this.s = DisposableHelper.DISPOSED;, +        if (s != DisposableHelper.DISPOSED) {, +        } else {, +            RxJavaPlugins.onError(t);, +        }, +        if (s != DisposableHelper.DISPOSED) {, +    }, +++ b/src/main/java/io/reactivex/internal/observers/DisposableLambdaObserver.java, +            this.s = DisposableHelper.DISPOSED;, +        if (s != DisposableHelper.DISPOSED) {, +        } else {, +            RxJavaPlugins.onError(t);, +        }, +        if (s != DisposableHelper.DISPOSED) {, +    }, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletablePeek.java, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.disposables.*;, +        source.subscribe(new CompletableObserverImplementation(s));, +    final class CompletableObserverImplementation implements CompletableObserver, Disposable {, +        final CompletableObserver actual;, +, +        Disposable d;, +, +        private CompletableObserverImplementation(CompletableObserver actual) {, +            this.actual = actual;, +        }, +, +, +        @Override, +        public void onSubscribe(final Disposable d) {, +            try {, +                onSubscribe.accept(d);, +            } catch (Throwable ex) {, +                Exceptions.throwIfFatal(ex);, +                d.dispose();, +                this.d = DisposableHelper.DISPOSED;, +                EmptyDisposable.error(ex, actual);, +                return;, +            }, +            if (DisposableHelper.validate(this.d, d)) {, +                this.d = d;, +                actual.onSubscribe(this);, +            }, +            if (d == DisposableHelper.DISPOSED) {, +                RxJavaPlugins.onError(e);, +                return;, +            }, +            actual.onError(e);, +        public void onComplete() {, +            if (d == DisposableHelper.DISPOSED) {, +            try {, +                onComplete.run();, +                onTerminate.run();, +            } catch (Throwable e) {, +                Exceptions.throwIfFatal(e);, +                actual.onError(e);, +                return;, +            }, +, +            actual.onComplete();, +, +            doAfter();, +        }, +, +        void doAfter() {, +            try {, +                onAfterTerminate.run();, +            } catch (Throwable ex) {, +                Exceptions.throwIfFatal(ex);, +                RxJavaPlugins.onError(ex);, +            }, +        }, +, +        public void dispose() {, +, +        @Override, +        public boolean isDisposed() {, +            return d.isDisposed();, +++ b/src/main/java/io/reactivex/internal/observers/DisposableLambdaObserver.java, +            this.s = DisposableHelper.DISPOSED;, +        if (s != DisposableHelper.DISPOSED) {, +        } else {, +            RxJavaPlugins.onError(t);, +        }, +        if (s != DisposableHelper.DISPOSED) {, +    }, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletablePeek.java, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.disposables.*;, +        source.subscribe(new CompletableObserverImplementation(s));, +    final class CompletableObserverImplementation implements CompletableObserver, Disposable {, +        final CompletableObserver actual;, +, +        Disposable d;, +, +        private CompletableObserverImplementation(CompletableObserver actual) {, +            this.actual = actual;, +        }]