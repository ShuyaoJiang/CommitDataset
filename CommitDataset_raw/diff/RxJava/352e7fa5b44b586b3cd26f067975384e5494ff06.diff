[+++ b/rxjava-core/src/main/java/rx/operators/OperatorMerge.java, +                private boolean innerCompleted = false;, +, +                    if (!innerCompleted) {, +                        // we check if already completed otherwise a misbehaving Observable that emits onComplete more than once, +                        // will cause the runningCount to decrement multiple times., +                        innerCompleted = true;, +                }, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMerge.java, +                private boolean innerCompleted = false;, +, +                    if (!innerCompleted) {, +                        // we check if already completed otherwise a misbehaving Observable that emits onComplete more than once, +                        // will cause the runningCount to decrement multiple times., +                        innerCompleted = true;, +                }, +++ b/rxjava-core/src/test/java/rx/operators/OperatorMergeTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import rx.Scheduler.Inner;, +    @Test, +    public void testConcurrency() {, +, +        Observable<Integer> o = Observable.create(new OnSubscribe<Integer>() {, +, +            @Override, +            public void call(final Subscriber<? super Integer> s) {, +                Schedulers.newThread().schedule(new Action1<Inner>() {, +, +                    @Override, +                    public void call(Inner inner) {, +                        for (int i = 0; i < 10000; i++) {, +                            s.onNext(1);, +                        }, +                        s.onCompleted();, +                    }, +, +                });, +            }, +        });, +, +        for (int i = 0; i < 10; i++) {, +            Observable<Integer> merge = Observable.merge(o, o, o);, +            TestSubscriber<Integer> ts = new TestSubscriber<Integer>();, +            merge.subscribe(ts);, +, +            ts.awaitTerminalEvent();, +            assertEquals(1, ts.getOnCompletedEvents().size());, +            assertEquals(30000, ts.getOnNextEvents().size());, +            List<Integer> onNextEvents = ts.getOnNextEvents();, +            //            System.out.println("onNext: " + onNextEvents.size() + " onCompleted: " + ts.getOnCompletedEvents().size());, +        }, +    }, +, +    @Test, +    public void testConcurrencyWithSleeping() {, +, +        Observable<Integer> o = Observable.create(new OnSubscribe<Integer>() {, +, +            @Override, +            public void call(final Subscriber<? super Integer> s) {, +                Schedulers.newThread().schedule(new Action1<Inner>() {, +, +                    @Override, +                    public void call(Inner inner) {, +                        for (int i = 0; i < 100; i++) {, +                            s.onNext(1);, +                            try {, +                                Thread.sleep(1);, +                            } catch (InterruptedException e) {, +                                e.printStackTrace();, +                            }, +                        }, +                        s.onCompleted();, +                    }, +, +                });, +            }, +        });, +, +        for (int i = 0; i < 10; i++) {, +            Observable<Integer> merge = Observable.merge(o, o, o);, +            TestSubscriber<Integer> ts = new TestSubscriber<Integer>();, +            merge.subscribe(ts);, +, +            ts.awaitTerminalEvent();, +            assertEquals(1, ts.getOnCompletedEvents().size());, +            assertEquals(300, ts.getOnNextEvents().size());, +            List<Integer> onNextEvents = ts.getOnNextEvents();, +            //            System.out.println("onNext: " + onNextEvents.size() + " onCompleted: " + ts.getOnCompletedEvents().size());, +        }, +    }, +, +    @Test]