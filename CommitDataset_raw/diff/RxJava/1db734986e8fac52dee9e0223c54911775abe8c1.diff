[+++ b/gradle.properties, +version=0.14.9-SNAPSHOT, +++ b/gradle.properties, +version=0.14.9-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDoOnEach;, +        return create(OperationScan.scan(this, accumulator)).takeLast(1);, +, +    /**, +     * Invokes an action for each element in the observable sequence., +     *, +     * @param func, +     *            The action to invoke for each element in the source sequence., +     *, +     * @return, +     *            The source sequence with the side-effecting behavior applied., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229115(v=vs.103).aspx">MSDN: Observable.Amb</a>, +     */, +    public Observable<T> doOnEach(Observer<? super T> observer) {, +        return create(OperationDoOnEach.doOnEach(this, observer));, +    }, +, +, +++ b/gradle.properties, +version=0.14.9-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDoOnEach;, +        return create(OperationScan.scan(this, accumulator)).takeLast(1);, +, +    /**, +     * Invokes an action for each element in the observable sequence., +     *, +     * @param func, +     *            The action to invoke for each element in the source sequence., +     *, +     * @return, +     *            The source sequence with the side-effecting behavior applied., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229115(v=vs.103).aspx">MSDN: Observable.Amb</a>, +     */, +    public Observable<T> doOnEach(Observer<? super T> observer) {, +        return create(OperationDoOnEach.doOnEach(this, observer));, +    }, +, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationDoOnEach.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Observable.OnSubscribeFunc;, +import rx.Subscription;, +, +/**, + * Converts the elements of an observable sequence to the specified type., + */, +public class OperationDoOnEach {, +    public static <T> OnSubscribeFunc<T> doOnEach(Observable<? extends T> source, Observer<? super T> observer) {, +        return new DoOnEachObservable<T>(source, observer);, +    }, +, +    private static class DoOnEachObservable<T> implements OnSubscribeFunc<T> {, +, +        private final Observable<? extends T> source;, +        private final Observer<? super T> doOnEachObserver;, +, +        public DoOnEachObservable(Observable<? extends T> source, Observer<? super T> doOnEachObserver) {, +            this.source = source;, +            this.doOnEachObserver = doOnEachObserver;, +        }, +, +        @Override, +        public Subscription onSubscribe(final Observer<? super T> observer) {, +            return source.subscribe(new Observer<T>() {, +                @Override, +                public void onCompleted() {, +                    doOnEachObserver.onCompleted();, +                    observer.onCompleted();, +                }, +, +                @Override, +                public void onError(Throwable e) {, +                    doOnEachObserver.onError(e);, +                    observer.onError(e);, +                }, +]