[+++ b/rxjava-core/src/main/java/rx/operators/OperationDistinctUntilChanged.java, +import java.util.Comparator;, +, +    public static <T> OnSubscribeFunc<T> distinctUntilChanged(Observable<? extends T> source, Comparator<T> equalityComparator) {, +        return new DistinctUntilChanged<T, T>(source, Functions.<T>identity(), equalityComparator);, +    }, +    , +        return new DistinctUntilChanged<T, U>(source, keySelector, new DefaultEqualityComparator<U>());, +        return new DistinctUntilChanged<T, T>(source, Functions.<T>identity(), new DefaultEqualityComparator<T>());, +    }, +, +    // does not define a useful ordering; it's only used for equality tests here, +    private static class DefaultEqualityComparator<T> implements Comparator<T> {, +        @Override, +        public int compare(T t1, T t2) {, +            if (t1 == null) {, +                return t2 == null ? 0 : 1;, +            } else {, +                return t1.equals(t2) ? 0 : 1;, +            }, +        }, +        private final Comparator<U> equalityComparator;, +        private DistinctUntilChanged(Observable<? extends T> source, Func1<? super T, ? extends U> keySelector, Comparator<U> equalityComparator) {, +            this.equalityComparator = equalityComparator;, +                        } else if (equalityComparator.compare(lastKey, nextKey) != 0) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinctUntilChanged.java, +import java.util.Comparator;, +, +    public static <T> OnSubscribeFunc<T> distinctUntilChanged(Observable<? extends T> source, Comparator<T> equalityComparator) {, +        return new DistinctUntilChanged<T, T>(source, Functions.<T>identity(), equalityComparator);, +    }, +    , +        return new DistinctUntilChanged<T, U>(source, keySelector, new DefaultEqualityComparator<U>());, +        return new DistinctUntilChanged<T, T>(source, Functions.<T>identity(), new DefaultEqualityComparator<T>());, +    }, +, +    // does not define a useful ordering; it's only used for equality tests here, +    private static class DefaultEqualityComparator<T> implements Comparator<T> {, +        @Override, +        public int compare(T t1, T t2) {, +            if (t1 == null) {, +                return t2 == null ? 0 : 1;, +            } else {, +                return t1.equals(t2) ? 0 : 1;, +            }, +        }, +        private final Comparator<U> equalityComparator;, +        private DistinctUntilChanged(Observable<? extends T> source, Func1<? super T, ? extends U> keySelector, Comparator<U> equalityComparator) {, +            this.equalityComparator = equalityComparator;, +                        } else if (equalityComparator.compare(lastKey, nextKey) != 0) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationInterval.java, +        return new Interval(interval, unit, Schedulers.executor(Executors.newSingleThreadScheduledExecutor()));, +    public static OnSubscribeFunc<Long> interval(long interval, TimeUnit unit, Scheduler scheduler) {, +        return new Interval(interval, unit, scheduler);]