[+++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.ImplicitFunctionConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.ImplicitFunctionConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala.Notification, +import rx.lang.scala.Observable, +import rx.lang.scala.concurrency._, +    val o = Observable(1 to 18), +    // this will be nicer once we have zipWithIndex, +    (for ((o, i) <- Observable(1 to 18).window(5) zip Observable(0 until 4); n <- o), +    yield s"Observable#$i emits $n"), +      .subscribe(output(_)), +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +    o.observeOn(NewThreadScheduler()).subscribe(, +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +    o.observeOn(NewThreadScheduler()).subscribe(, +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +    println(s"$x*$x is being calculated on thread ${Thread.currentThread().getId}"), +    println(s"map() is being called on thread ${Thread.currentThread().getId}"), +    Observable(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable(1 to 10)).toBlockingObservable.foreach(println(_)), +    val o2 = Observable(new IOException("Oops")), +    //waitFor(o1), +    //waitFor(o2), +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.ImplicitFunctionConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala.Notification, +import rx.lang.scala.Observable, +import rx.lang.scala.concurrency._, +    val o = Observable(1 to 18), +    // this will be nicer once we have zipWithIndex, +    (for ((o, i) <- Observable(1 to 18).window(5) zip Observable(0 until 4); n <- o), +    yield s"Observable#$i emits $n"), +      .subscribe(output(_)), +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +    o.observeOn(NewThreadScheduler()).subscribe(, +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +    o.observeOn(NewThreadScheduler()).subscribe(, +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +    println(s"$x*$x is being calculated on thread ${Thread.currentThread().getId}"), +    println(s"map() is being called on thread ${Thread.currentThread().getId}"), +    Observable(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable(1 to 10)).toBlockingObservable.foreach(println(_)), +    val o2 = Observable(new IOException("Oops")), +    //waitFor(o1), +    //waitFor(o2), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/TestSchedulerExample.scala, +    val inOrdr = inOrder(observer), +    sub.unsubscribe(), +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.ImplicitFunctionConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala.Notification, +import rx.lang.scala.Observable, +import rx.lang.scala.concurrency._, +    val o = Observable(1 to 18), +    // this will be nicer once we have zipWithIndex, +    (for ((o, i) <- Observable(1 to 18).window(5) zip Observable(0 until 4); n <- o), +    yield s"Observable#$i emits $n"), +      .subscribe(output(_)), +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +    o.observeOn(NewThreadScheduler()).subscribe(, +      i => println(s"${i}a (on thread #${Thread.currentThread().getId})"), +    o.observeOn(NewThreadScheduler()).subscribe(, +      i => println(s"${i}b (on thread #${Thread.currentThread().getId})"), +    println(s"$x*$x is being calculated on thread ${Thread.currentThread().getId}"), +    println(s"map() is being called on thread ${Thread.currentThread().getId}"), +    Observable(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable(1 to 10)).toBlockingObservable.foreach(println(_)), +    val o2 = Observable(new IOException("Oops")), +    //waitFor(o1), +    //waitFor(o2), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/TestSchedulerExample.scala, +    val inOrdr = inOrder(observer), +    sub.unsubscribe(), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +, +import scala.language.implicitConversions, +, +import rx.util.functions._, +  import language.implicitConversions, +, +//  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription): Func2[rx.Scheduler, T, rx.Subscription] with Object {def call(s: rx.Scheduler, t: T): rx.Subscription} =, +//    new Func2[rx.Scheduler, T, rx.Subscription] {, +//      def call(s: rx.Scheduler, t: T): rx.Subscription = {, +//        action(rx.lang.scala.Scheduler(s), t).asJavaSubscription, +//      }, +//    }, +        action(Scheduler(s), t).asJavaSubscription, +  implicit def toJavaNotification[T](s: Notification[T]): rx.Notification[_ <: T] = s.asJava, +  implicit def toScalaNotification[T](s: rx.Notification[_ <: T]): Notification[T] = Notification(s), +, +  implicit def toJavaSubscription(s: Subscription): rx.Subscription = s.asJavaSubscription, +  implicit def toScalaSubscription(s: rx.Subscription): Subscription = Subscription(s), +]