[+++ b/src/main/java/io/reactivex/Completable.java, +     * Implement this method to handle the incoming {@link CompletableObserver}s and, +     * <p>There is no need to call any of the plugin hooks on the current {@code Completable} instance or, +     * the {@code CompletableObserver}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(CompletableObserver)} before this method gets called., +++ b/src/main/java/io/reactivex/Completable.java, +     * Implement this method to handle the incoming {@link CompletableObserver}s and, +     * <p>There is no need to call any of the plugin hooks on the current {@code Completable} instance or, +     * the {@code CompletableObserver}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(CompletableObserver)} before this method gets called., +++ b/src/main/java/io/reactivex/Flowable.java, +     * performs the necessary business logic and handles the incoming {@link Subscriber}s., +     * <p>There is no need to call any of the plugin hooks on the current {@code Flowable} instance or, +     * the {@code Subscriber}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(Subscriber)} before this method gets called., +++ b/src/main/java/io/reactivex/Completable.java, +     * Implement this method to handle the incoming {@link CompletableObserver}s and, +     * <p>There is no need to call any of the plugin hooks on the current {@code Completable} instance or, +     * the {@code CompletableObserver}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(CompletableObserver)} before this method gets called., +++ b/src/main/java/io/reactivex/Flowable.java, +     * performs the necessary business logic and handles the incoming {@link Subscriber}s., +     * <p>There is no need to call any of the plugin hooks on the current {@code Flowable} instance or, +     * the {@code Subscriber}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(Subscriber)} before this method gets called., +++ b/src/main/java/io/reactivex/Maybe.java, +     * Implement this method in subclasses to handle the incoming {@link MaybeObserver}s., +     * <p>There is no need to call any of the plugin hooks on the current {@code Maybe} instance or, +     * the {@code MaybeObserver}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(MaybeObserver)} before this method gets called., +++ b/src/main/java/io/reactivex/Completable.java, +     * Implement this method to handle the incoming {@link CompletableObserver}s and, +     * <p>There is no need to call any of the plugin hooks on the current {@code Completable} instance or, +     * the {@code CompletableObserver}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(CompletableObserver)} before this method gets called., +++ b/src/main/java/io/reactivex/Flowable.java, +     * performs the necessary business logic and handles the incoming {@link Subscriber}s., +     * <p>There is no need to call any of the plugin hooks on the current {@code Flowable} instance or, +     * the {@code Subscriber}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(Subscriber)} before this method gets called., +++ b/src/main/java/io/reactivex/Maybe.java, +     * Implement this method in subclasses to handle the incoming {@link MaybeObserver}s., +     * <p>There is no need to call any of the plugin hooks on the current {@code Maybe} instance or, +     * the {@code MaybeObserver}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(MaybeObserver)} before this method gets called., +++ b/src/main/java/io/reactivex/Observable.java, +     * performs the necessary business logic and handles the incoming {@link Observer}s., +     * <p>There is no need to call any of the plugin hooks on the current {@code Observable} instance or, +     * the {@code Observer}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(Observer)} before this method gets called., +++ b/src/main/java/io/reactivex/Completable.java, +     * Implement this method to handle the incoming {@link CompletableObserver}s and, +     * <p>There is no need to call any of the plugin hooks on the current {@code Completable} instance or, +     * the {@code CompletableObserver}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(CompletableObserver)} before this method gets called., +++ b/src/main/java/io/reactivex/Flowable.java, +     * performs the necessary business logic and handles the incoming {@link Subscriber}s., +     * <p>There is no need to call any of the plugin hooks on the current {@code Flowable} instance or, +     * the {@code Subscriber}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(Subscriber)} before this method gets called., +++ b/src/main/java/io/reactivex/Maybe.java, +     * Implement this method in subclasses to handle the incoming {@link MaybeObserver}s., +     * <p>There is no need to call any of the plugin hooks on the current {@code Maybe} instance or, +     * the {@code MaybeObserver}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(MaybeObserver)} before this method gets called., +++ b/src/main/java/io/reactivex/Observable.java, +     * performs the necessary business logic and handles the incoming {@link Observer}s., +     * <p>There is no need to call any of the plugin hooks on the current {@code Observable} instance or, +     * the {@code Observer}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(Observer)} before this method gets called., +++ b/src/main/java/io/reactivex/Single.java, +     * Implement this method in subclasses to handle the incoming {@link SingleObserver}s., +     * <p>There is no need to call any of the plugin hooks on the current {@code Single} instance or, +     * the {@code SingleObserver}; all hooks and basic safeguards have been, +     * applied by {@link #subscribe(SingleObserver)} before this method gets called.]