[+++ b/src/main/java/rx/schedulers/ExecutorScheduler.java, +++ b/src/main/java/rx/schedulers/ExecutorScheduler.java, +++ b/src/test/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunctionTest.java, +    , +    @Test, +    public void testBackpressure() {, +        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();, +        Observable.range(0, 100000), +                .onErrorResumeNext(new Func1<Throwable, Observable<Integer>>() {, +, +                    @Override, +                    public Observable<Integer> call(Throwable t1) {, +                        return Observable.just(1);, +                    }, +, +                }), +                .observeOn(Schedulers.computation()), +                .map(new Func1<Integer, Integer>() {, +                    int c = 0;, +, +                    @Override, +                    public Integer call(Integer t1) {, +                        if (c++ <= 1) {, +                            // slow, +                            try {, +                                Thread.sleep(500);, +                            } catch (InterruptedException e) {, +                                e.printStackTrace();, +                            }, +                        }, +                        return t1;, +                    }, +, +                }), +                .subscribe(ts);, +        ts.awaitTerminalEvent();, +        ts.assertNoErrors();, +    }, +++ b/src/main/java/rx/schedulers/ExecutorScheduler.java, +++ b/src/test/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunctionTest.java, +    , +    @Test, +    public void testBackpressure() {, +        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();, +        Observable.range(0, 100000), +                .onErrorResumeNext(new Func1<Throwable, Observable<Integer>>() {, +, +                    @Override, +                    public Observable<Integer> call(Throwable t1) {, +                        return Observable.just(1);, +                    }, +, +                }), +                .observeOn(Schedulers.computation()), +                .map(new Func1<Integer, Integer>() {, +                    int c = 0;, +, +                    @Override, +                    public Integer call(Integer t1) {, +                        if (c++ <= 1) {, +                            // slow, +                            try {, +                                Thread.sleep(500);, +                            } catch (InterruptedException e) {, +                                e.printStackTrace();, +                            }, +                        }, +                        return t1;, +                    }, +, +                }), +                .subscribe(ts);, +        ts.awaitTerminalEvent();, +        ts.assertNoErrors();, +    }, +++ b/src/test/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservableTest.java, +import java.util.concurrent.TimeUnit;, +, +import rx.observers.TestSubscriber;, +import rx.schedulers.Schedulers;, +    , +    @Test, +    public void testBackpressure() {, +        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();, +        Observable.range(0, 100000), +                .onErrorResumeNext(Observable.just(1)), +                .observeOn(Schedulers.computation()), +                .map(new Func1<Integer, Integer>() {, +                    int c = 0;, +, +                    @Override, +                    public Integer call(Integer t1) {, +                        if (c++ <= 1) {, +                            // slow, +                            try {, +                                Thread.sleep(500);, +                            } catch (InterruptedException e) {, +                                e.printStackTrace();, +                            }, +                        }]