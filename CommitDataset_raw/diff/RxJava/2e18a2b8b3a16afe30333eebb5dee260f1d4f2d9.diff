[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/RxImplicitsTests.scala, +class UnitTestSuite extends JUnitSuite {, +++ /dev/null, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/RxImplicitsTests.scala, +class UnitTestSuite extends JUnitSuite {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public Observable<Observable<T>> window(Func0<? extends Observable<? extends Closing>> closingSelector) {, +        return create(OperationWindow.window(this, closingSelector));, +    public Observable<Observable<T>> window(Observable<? extends Opening> windowOpenings, Func1<Opening, ? extends Observable<? extends Closing>> closingSelector) {, +        return create(OperationWindow.window(this, windowOpenings, closingSelector));, +    public Observable<Observable<T>> window(int count) {, +        return create(OperationWindow.window(this, count));, +    public Observable<Observable<T>> window(int count, int skip) {, +        return create(OperationWindow.window(this, count, skip));, +    public Observable<Observable<T>> window(long timespan, TimeUnit unit) {, +        return create(OperationWindow.window(this, timespan, unit));, +    public Observable<Observable<T>> window(long timespan, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationWindow.window(this, timespan, unit, scheduler));, +    public Observable<Observable<T>> window(long timespan, TimeUnit unit, int count) {, +        return create(OperationWindow.window(this, timespan, unit, count));, +    public Observable<Observable<T>> window(long timespan, TimeUnit unit, int count, Scheduler scheduler) {, +        return create(OperationWindow.window(this, timespan, unit, count, scheduler));, +    public Observable<Observable<T>> window(long timespan, long timeshift, TimeUnit unit) {, +        return create(OperationWindow.window(this, timespan, timeshift, unit));, +    public Observable<Observable<T>> window(long timespan, long timeshift, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationWindow.window(this, timespan, timeshift, unit, scheduler));, +++ /dev/null, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/RxImplicitsTests.scala, +class UnitTestSuite extends JUnitSuite {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public Observable<Observable<T>> window(Func0<? extends Observable<? extends Closing>> closingSelector) {, +        return create(OperationWindow.window(this, closingSelector));, +    public Observable<Observable<T>> window(Observable<? extends Opening> windowOpenings, Func1<Opening, ? extends Observable<? extends Closing>> closingSelector) {, +        return create(OperationWindow.window(this, windowOpenings, closingSelector));, +    public Observable<Observable<T>> window(int count) {, +        return create(OperationWindow.window(this, count));, +    public Observable<Observable<T>> window(int count, int skip) {, +        return create(OperationWindow.window(this, count, skip));, +    public Observable<Observable<T>> window(long timespan, TimeUnit unit) {, +        return create(OperationWindow.window(this, timespan, unit));, +    public Observable<Observable<T>> window(long timespan, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationWindow.window(this, timespan, unit, scheduler));, +    public Observable<Observable<T>> window(long timespan, TimeUnit unit, int count) {, +        return create(OperationWindow.window(this, timespan, unit, count));, +    public Observable<Observable<T>> window(long timespan, TimeUnit unit, int count, Scheduler scheduler) {, +        return create(OperationWindow.window(this, timespan, unit, count, scheduler));, +    public Observable<Observable<T>> window(long timespan, long timeshift, TimeUnit unit) {, +        return create(OperationWindow.window(this, timespan, timeshift, unit));, +    public Observable<Observable<T>> window(long timespan, long timeshift, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationWindow.window(this, timespan, timeshift, unit, scheduler));, +++ b/rxjava-core/src/test/java/rx/ObservableWindowTests.java, +package rx;, +, +import static org.junit.Assert.*;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import org.junit.Test;, +, +import rx.util.functions.Action1;, +import rx.util.functions.Func1;, +, +public class ObservableWindowTests {, +, +    @Test, +    public void testWindow() {, +        final ArrayList<List<Integer>> lists = new ArrayList<List<Integer>>();, +        Observable.from(1, 2, 3, 4, 5, 6), +                .window(3).map(new Func1<Observable<Integer>, List<Integer>>() {, +, +                    @Override, +                    public List<Integer> call(Observable<Integer> o) {, +                        return o.toList().toBlockingObservable().single();, +                    }, +, +                }).toBlockingObservable().forEach(new Action1<List<Integer>>() {, +, +                    @Override, +                    public void call(List<Integer> t) {, +                        lists.add(t);, +                    }, +                });, +, +        assertArrayEquals(lists.get(0).toArray(new Integer[3]), new Integer[] { 1, 2, 3 });, +        assertArrayEquals(lists.get(1).toArray(new Integer[3]), new Integer[] { 4, 5, 6 });, +        assertEquals(2, lists.size());, +, +    }, +}]