[+++ b/gradle.properties, +version=0.16.1-SNAPSHOT, +++ b/gradle.properties, +version=0.16.1-SNAPSHOT, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/operators/OperationObserveFromAndroidComponentTest.java, +package rx.android.operators;, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.lang.reflect.Constructor;, +import java.lang.reflect.Field;, +import java.lang.reflect.InvocationTargetException;, +import java.util.concurrent.Callable;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +import org.junit.Ignore;, +import rx.Observable.OnSubscribeFunc;, +import rx.operators.OperationObserveFromAndroidComponent;, +import rx.schedulers.Schedulers;, +import rx.subscriptions.BooleanSubscription;, +import rx.util.functions.Action1;, +        final Observable<Integer> testObservable = Observable.from(1);, +                        testObservable, mockFragment).subscribe(mockObserver);, +    // TODO needs to be fixed, see comments inline below, +    @Ignore, +        final Observable<Integer> testObservable = Observable.from(1), +                .observeOn(Schedulers.newThread()), +                .doOnNext(new Action1<Integer>() {, +, +                    @Override, +                    public void call(Integer t1) {, +                        System.out.println("threadA: " + Thread.currentThread());, +                    }, +                }), +                .observeOn(AndroidSchedulers.mainThread()), +                .doOnNext(new Action1<Integer>() {, +, +                    @Override, +                    public void call(Integer t1) {, +                        System.out.println("threadB: " + Thread.currentThread());, +                    }, +                });, +, +        final AtomicReference<String> currentThreadName = new AtomicReference<String>();, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(testObservable, mockFragment).subscribe(new Action1<Integer>() {, +, +            @Override, +            public void call(Integer i) {, +                System.out.println("threadV: " + Thread.currentThread());, +                currentThreadName.set(Thread.currentThread().getName());, +            }, +        });, +, +        assertEquals("androidMainThreadName???", currentThreadName.get());, +, +        //TODO Can't use Mockito to validate Observable.observeOn as it is now marked as final., +        //     I can't figure out what to validate about the AndroidSchedulers.mainThread(), +        //     as the code above doesn't print `threadB` so I can't see what Thread it should be., +        //     I was going to run it on NewThread then observeOn to AndroidThread and validate it jumped, +        //     to the correct thread, but it doesn't do anything. Need to work with Android devs., +        final BooleanSubscription s = new BooleanSubscription();, +        Observable<Integer> testObservable = Observable.create(new OnSubscribeFunc<Integer>() {, +, +            @Override, +            public Subscription onSubscribe(Observer<? super Integer> o) {, +                o.onNext(1);, +                o.onCompleted();, +                return s;, +            }, +, +        });, +                testObservable, mockActivity).subscribe(mockObserver);, +        assertTrue(s.isUnsubscribed());, +, +++ b/gradle.properties, +version=0.16.1-SNAPSHOT, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/operators/OperationObserveFromAndroidComponentTest.java, +package rx.android.operators;, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.lang.reflect.Constructor;, +import java.lang.reflect.Field;, +import java.lang.reflect.InvocationTargetException;, +import java.util.concurrent.Callable;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +import org.junit.Ignore;, +import rx.Observable.OnSubscribeFunc;, +import rx.operators.OperationObserveFromAndroidComponent;, +import rx.schedulers.Schedulers;, +import rx.subscriptions.BooleanSubscription;, +import rx.util.functions.Action1;, +        final Observable<Integer> testObservable = Observable.from(1);]