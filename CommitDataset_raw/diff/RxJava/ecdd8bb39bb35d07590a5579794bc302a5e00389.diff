[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/io/reactivex/disposables/Disposables.java, +import io.reactivex.internal.disposables.EmptyDisposable;, +import io.reactivex.internal.functions.Functions;, +import java.util.concurrent.Future;, +import org.reactivestreams.Subscription;, +        return new RunnableDisposable(run);, +    public static Disposable from(Subscription subscription) {, +        return new SubscriptionDisposable(subscription);, +        return from(Functions.emptyRunnable());, +    private static final Consumer<Disposable> DISPOSER = new Consumer<Disposable>() {, +++ /dev/null, +++ b/src/main/java/io/reactivex/disposables/Disposables.java, +import io.reactivex.internal.disposables.EmptyDisposable;, +import io.reactivex.internal.functions.Functions;, +import java.util.concurrent.Future;, +import org.reactivestreams.Subscription;, +        return new RunnableDisposable(run);, +    public static Disposable from(Subscription subscription) {, +        return new SubscriptionDisposable(subscription);, +        return from(Functions.emptyRunnable());, +    private static final Consumer<Disposable> DISPOSER = new Consumer<Disposable>() {, +++ b/src/main/java/io/reactivex/disposables/FutureDisposable.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +package io.reactivex.disposables;, +, +import java.util.concurrent.Future;, +, +final class FutureDisposable extends ReferenceDisposable<Future<?>> {, +    private final boolean allowInterrupt;, +, +    FutureDisposable(Future<?> run, boolean allowInterrupt) {, +        super(run);, +        this.allowInterrupt = allowInterrupt;, +    }, +, +    @Override, +    protected void onDisposed(Future<?> value) {, +        value.cancel(allowInterrupt);, +    }, +}, +++ /dev/null, +++ b/src/main/java/io/reactivex/disposables/Disposables.java, +import io.reactivex.internal.disposables.EmptyDisposable;, +import io.reactivex.internal.functions.Functions;, +import java.util.concurrent.Future;, +import org.reactivestreams.Subscription;, +        return new RunnableDisposable(run);, +    public static Disposable from(Subscription subscription) {, +        return new SubscriptionDisposable(subscription);, +        return from(Functions.emptyRunnable());, +    private static final Consumer<Disposable> DISPOSER = new Consumer<Disposable>() {, +++ b/src/main/java/io/reactivex/disposables/FutureDisposable.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +package io.reactivex.disposables;, +, +import java.util.concurrent.Future;, +, +final class FutureDisposable extends ReferenceDisposable<Future<?>> {, +    private final boolean allowInterrupt;, +, +    FutureDisposable(Future<?> run, boolean allowInterrupt) {, +        super(run);, +        this.allowInterrupt = allowInterrupt;, +    }, +, +    @Override, +    protected void onDisposed(Future<?> value) {, +        value.cancel(allowInterrupt);, +    }, +}, +++ b/src/main/java/io/reactivex/disposables/RefCountDisposable.java, +            release();, +    static final class InnerDisposable extends ReferenceDisposable<RefCountDisposable> {, +        InnerDisposable(RefCountDisposable parent) {, +            super(parent);, +        protected void onDisposed(RefCountDisposable parent) {]