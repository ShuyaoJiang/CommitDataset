[+++ b/src/test/java/io/reactivex/internal/operators/OperatorZipTest.java, +package io.reactivex.internal.operators;, +, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.*;, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.function.*;, +, +import org.junit.*;, +import org.mockito.InOrder;, +import org.reactivestreams.*;, +, +import io.reactivex.*;, +import io.reactivex.Observable;, +import io.reactivex.Observer;, +import io.reactivex.functions.Function3;, +import io.reactivex.internal.subscriptions.*;, +import io.reactivex.schedulers.Schedulers;, +import io.reactivex.subjects.PublishSubject;, +import io.reactivex.subscribers.TestSubscriber;, +, +public class OperatorZipTest {, +    BiFunction<String, String, String> concat2Strings;, +    PublishSubject<String> s1;, +    PublishSubject<String> s2;, +    Observable<String> zipped;, +, +    Subscriber<String> observer;, +    InOrder inOrder;, +, +    @Before, +    public void setUp() {, +        concat2Strings = new BiFunction<String, String, String>() {, +            @Override, +            public String apply(String t1, String t2) {, +                return t1 + "-" + t2;, +            }, +        };, +, +        s1 = PublishSubject.create();, +        s2 = PublishSubject.create();, +        zipped = Observable.zip(s1, s2, concat2Strings);, +, +        observer = TestHelper.mockSubscriber();, +        inOrder = inOrder(observer);, +, +        zipped.subscribe(observer);, +    }, +, +    @SuppressWarnings("unchecked"), +    @Test, +    public void testCollectionSizeDifferentThanFunction() {, +        Function<Object[], String> zipr = getConcatStringIntegerIntArrayZipr();, +        //Function3<String, Integer, int[], String>, +, +        /* define a Subscriber to receive aggregated events */, +        Subscriber<String> observer = TestHelper.mockSubscriber();, +, +        @SuppressWarnings("rawtypes"), +        Collection ws = java.util.Collections.singleton(Observable.just("one", "two"));, +        Observable<String> w = Observable.zip(ws, zipr);, +        w.subscribe(observer);, +, +        verify(observer, times(1)).onError(any(Throwable.class));, +        verify(observer, never()).onComplete();, +        verify(observer, never()).onNext(any(String.class));, +    }, +, +    @Test, +    public void testStartpingDifferentLengthObservableSequences1() {, +        Subscriber<String> w = TestHelper.mockSubscriber();, +, +        TestObservable w1 = new TestObservable();, +        TestObservable w2 = new TestObservable();, +        TestObservable w3 = new TestObservable();, +, +        Observable<String> zipW = Observable.zip(, +                Observable.create(w1), Observable.create(w2), , +                Observable.create(w3), getConcat3StringsZipr());, +        zipW.subscribe(w);, +, +        /* simulate sending data */, +        // once for w1, +        w1.observer.onNext("1a");, +        w1.observer.onComplete();, +        // twice for w2, +        w2.observer.onNext("2a");, +        w2.observer.onNext("2b");, +        w2.observer.onComplete();, +        // 4 times for w3, +        w3.observer.onNext("3a");, +        w3.observer.onNext("3b");, +        w3.observer.onNext("3c");, +        w3.observer.onNext("3d");, +        w3.observer.onComplete();, +]