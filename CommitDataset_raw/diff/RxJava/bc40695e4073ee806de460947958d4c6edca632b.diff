[+++ b/docs/Problem-Solving-Examples-in-RxJava.md, +This page will present some elementary RxJava puzzles and walk through some solutions as a way of introducing you to some of the RxJava operators., +### Java, +```java, +Observable<Integer> threesAndFives = Observable.range(1, 999).filter(e -> e % 3 == 0 || e % 5 == 0);, +```, +### Groovy, +### Java, +```java, +Observable<Integer> threes = Observable.range(1, 999).map(e -> e * 3).takeWhile(e -> e < 1000);, +Observable<Integer> fives = Observable.range(1, 999).map(e -> e * 5).takeWhile(e -> e < 1000);, +Observable<Integer> threesAndFives = Observable.merge(threes, fives).distinct();, +```, +### Groovy, +### Java, +```java, +Single<Integer> summer = threesAndFives.reduce(0, (a, b) -> a + b);, +```, +### Groovy, +, +### Java, +```java, +summer.subscribe(System.out::print);, +```, +### Groovy, +### Java, +```java, +Observable<Integer> fibonacci = Observable.create(emitter -> {, +    int f1 = 0, f2 = 1, f = 1;, +    while (!emitter.isDisposed()) {, +        emitter.onNext(f);, +        f = f1 + f2;, +        f1 = f2;, +        f2 = f;, +    }, +});, +```, +### Groovy, +def fibonacci = Observable.create({ emitter ->, +  def f1=0, f2=1, f=1;, +  while(!emitter.isDisposed()) {, +    emitter.onNext(f);, +### Java, +```java, +Observable<Integer> fibonacci =, +        Observable.fromArray(0), +                  .repeat(), +                  .scan(new int[]{0, 1}, (a, b) -> new int[]{a[1], a[0] + a[1]}), +                  .map(a -> a[1]);, +```, +### Groovy, +````groovy, +### Java, +```java, +fibonacci.take(15).subscribe(System.out::println);, +```, +### Groovy]