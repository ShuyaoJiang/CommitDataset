[+++ b/src/main/java/rx/internal/operators/OperatorScan.java, +                    final AtomicBoolean excessive = new AtomicBoolean();, +, +                                if (n == Long.MAX_VALUE) {, +                                    producer.request(Long.MAX_VALUE);, +                                } else if (n == 1) {, +                                    excessive.set(true);, +                                    producer.request(1); // request at least 1, +                                } else {, +                            }, +                            if (excessive.compareAndSet(true, false) && n != Long.MAX_VALUE) {, +                                producer.request(n - 1);, +                            } else {, +                    }, +++ b/src/main/java/rx/internal/operators/OperatorScan.java, +                    final AtomicBoolean excessive = new AtomicBoolean();, +, +                                if (n == Long.MAX_VALUE) {, +                                    producer.request(Long.MAX_VALUE);, +                                } else if (n == 1) {, +                                    excessive.set(true);, +                                    producer.request(1); // request at least 1, +                                } else {, +                            }, +                            if (excessive.compareAndSet(true, false) && n != Long.MAX_VALUE) {, +                                producer.request(n - 1);, +                            } else {, +                    }, +++ b/src/test/java/rx/internal/operators/OperatorScanTest.java, +, +    @Test, +    public void testScanWithRequestOne() {, +        Observable<Integer> o = Observable.just(1, 2).scan(0, new Func2<Integer, Integer, Integer>() {, +, +            @Override, +            public Integer call(Integer t1, Integer t2) {, +                return t1 + t2;, +            }, +, +        }).take(1);, +        TestSubscriber<Integer> subscriber = new TestSubscriber<Integer>();, +        o.subscribe(subscriber);, +        subscriber.assertReceivedOnNext(Arrays.asList(0));, +        subscriber.assertTerminalEvent();, +        subscriber.assertNoErrors();, +    }]