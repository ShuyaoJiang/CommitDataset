[+++ b/src/main/java/rx/exceptions/Exceptions.java, +import java.util.Collection;, +import java.util.HashSet;, +import java.util.Set;, +, +import rx.annotations.Experimental;, +     * Convenience method to throw a {@code RuntimeException} and {@code Error} directly, +     * or wrap any other exception type into a {@code RuntimeException}., +     * @param t the exception to throw directly or wrapped, +        return propagate(t, null);, +    }, +    /**, +     * Convenience method to throw a {@code RuntimeException} and {@code Error} directly, +     * or wrap any other exception type into a {@code RuntimeException} with an optional custom message., +     * @param t the exception to throw directly or wrapped, +     * @param message the optional custom message to set up the RuntimeException thrown, +     * in case {@code t} is a checked exception., +     * @return because {@code propagate} itself throws an exception or error, this is a sort of phantom return, +     *         value; {@code propagate} does not actually return anything, +     */, +    @Experimental, +    public static RuntimeException propagate(Throwable t, String message) {, +            throw new RuntimeException(message, t);, +    @Experimental, +                throw propagate(t, "Exception" + whileText);]