[+++ b/src/main/java/io/reactivex/Flowable.java, +     * within periodic time intervals and optionally emit the very last upstream item when the upstream completes., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>This operator does not support backpressure as it uses time to control data flow.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code sample} operates by default on the {@code computation} {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param period, +     *            the sampling rate, +     * @param unit, +     *            the {@link TimeUnit} in which {@code period} is defined, +     * @param emitLast, +     *            if true and the upstream completes while there is still an unsampled item available,, +     *            that item is emitted to downstream before completion, +     *            if false, an unsampled last item is ignored., +     * @return a Flowable that emits the results of sampling the items emitted by the source Publisher at, +     *         the specified time interval, +     * @see <a href="http://reactivex.io/documentation/operators/sample.html">ReactiveX operators documentation: Sample</a>, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Backpressure">RxJava wiki: Backpressure</a>, +     * @see #throttleLast(long, TimeUnit), +     * @since 2.0.5 - experimental, +     */, +    @CheckReturnValue, +    @BackpressureSupport(BackpressureKind.ERROR), +    @SchedulerSupport(SchedulerSupport.COMPUTATION), +    @Experimental, +    public final Flowable<T> sample(long period, TimeUnit unit, boolean emitLast) {, +        return sample(period, unit, Schedulers.computation(), emitLast);, +    }, +, +    /**, +     * Returns a Flowable that emits the most recently emitted item (if any) emitted by the source Publisher, +        return RxJavaPlugins.onAssembly(new FlowableSampleTimed<T>(this, period, unit, scheduler, false));, +    }, +, +    /**, +     * Returns a Flowable that emits the most recently emitted item (if any) emitted by the source Publisher, +     * within periodic time intervals, where the intervals are defined on a particular Scheduler, +     * and optionally emit the very last upstream item when the upstream completes., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.s.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>This operator does not support backpressure as it uses time to control data flow.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>You specify which {@link Scheduler} this operator will use</dd>, +     * </dl>, +     *, +     * @param period, +     *            the sampling rate, +     * @param unit, +     *            the {@link TimeUnit} in which {@code period} is defined, +     * @param scheduler, +     *            the {@link Scheduler} to use when sampling, +     * @param emitLast, +     *            if true and the upstream completes while there is still an unsampled item available,, +     *            that item is emitted to downstream before completion, +     *            if false, an unsampled last item is ignored., +     * @return a Flowable that emits the results of sampling the items emitted by the source Publisher at, +     *         the specified time interval, +     * @see <a href="http://reactivex.io/documentation/operators/sample.html">ReactiveX operators documentation: Sample</a>, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Backpressure">RxJava wiki: Backpressure</a>, +     * @see #throttleLast(long, TimeUnit, Scheduler), +     * @since 2.0.5 - experimental, +     */, +    @CheckReturnValue, +    @BackpressureSupport(BackpressureKind.ERROR), +    @SchedulerSupport(SchedulerSupport.CUSTOM), +    @Experimental, +    public final Flowable<T> sample(long period, TimeUnit unit, Scheduler scheduler, boolean emitLast) {, +        ObjectHelper.requireNonNull(unit, "unit is null");, +        ObjectHelper.requireNonNull(scheduler, "scheduler is null");, +        return RxJavaPlugins.onAssembly(new FlowableSampleTimed<T>(this, period, unit, scheduler, emitLast));, +        return RxJavaPlugins.onAssembly(new FlowableSamplePublisher<T>(this, sampler, false));, +    }, +, +    /**, +     * Returns a Flowable that, when the specified {@code sampler} Publisher emits an item or completes,, +     * emits the most recently emitted item (if any) emitted by the source Publisher since the previous, +     * emission from the {@code sampler} Publisher, +     * and optionally emit the very last upstream item when the upstream or other Publisher complete., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.o.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>This operator does not support backpressure as it uses the emissions of the {@code sampler}, +     *      Publisher to control data flow.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>This version of {@code sample} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <U> the element type of the sampler Publisher, +     * @param sampler, +     *            the Publisher to use for sampling the source Publisher, +     * @param emitLast, +     *            if true and the upstream completes while there is still an unsampled item available,]