[+++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/ListeningFragmentActivity.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +            strings = SampleObservables.numberStrings(1, 50, 250).observeOn(mainThread()).publish();, +            subscription = strings.subscribe(new Subscriber<String>() {, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/ListeningFragmentActivity.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +            strings = SampleObservables.numberStrings(1, 50, 250).observeOn(mainThread()).publish();, +            subscription = strings.subscribe(new Subscriber<String>() {, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/RetainedFragmentActivity.java, +import rx.android.schedulers.AndroidSchedulers;, +            strings = SampleObservables.fakeApiCall(2000).map(PARSE_JSON), +                    .observeOn(AndroidSchedulers.mainThread()), +                    .cache();, +            subscription = strings.subscribe(new Action1<String>() {, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/ListeningFragmentActivity.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +            strings = SampleObservables.numberStrings(1, 50, 250).observeOn(mainThread()).publish();, +            subscription = strings.subscribe(new Subscriber<String>() {, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/RetainedFragmentActivity.java, +import rx.android.schedulers.AndroidSchedulers;, +            strings = SampleObservables.fakeApiCall(2000).map(PARSE_JSON), +                    .observeOn(AndroidSchedulers.mainThread()), +                    .cache();, +            subscription = strings.subscribe(new Action1<String>() {, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/ListeningFragmentActivity.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +            strings = SampleObservables.numberStrings(1, 50, 250).observeOn(mainThread()).publish();, +            subscription = strings.subscribe(new Subscriber<String>() {, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/RetainedFragmentActivity.java, +import rx.android.schedulers.AndroidSchedulers;, +            strings = SampleObservables.fakeApiCall(2000).map(PARSE_JSON), +                    .observeOn(AndroidSchedulers.mainThread()), +                    .cache();, +            subscription = strings.subscribe(new Action1<String>() {, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +            return fragment.isAdded();, +                    return fragment.isAdded();, +     * Binds the given source sequence to the life-cycle of an activity., +     * that no notifications will be forwarded to the activity in case it gets destroyed by the Android runtime, +     * or garbage collected by the VM., +     * Binds the given source sequence to the life-cycle of a fragment (native or support-v4)., +     * activity or garbage collected by the VM., +    public static <T> Observable<T> bindFragment(Object fragment, Observable<T> cachedSequence) {, +        final Observable<T> source = cachedSequence.observeOn(mainThread());, +            return source.lift(new OperatorWeakBinding<T, android.support.v4.app.Fragment>(f, FRAGMENTV4_VALIDATOR));, +            return source.lift(new OperatorWeakBinding<T, Fragment>(f, FRAGMENT_VALIDATOR));, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/ListeningFragmentActivity.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +            strings = SampleObservables.numberStrings(1, 50, 250).observeOn(mainThread()).publish();, +            subscription = strings.subscribe(new Subscriber<String>() {, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/RetainedFragmentActivity.java, +import rx.android.schedulers.AndroidSchedulers;, +            strings = SampleObservables.fakeApiCall(2000).map(PARSE_JSON), +                    .observeOn(AndroidSchedulers.mainThread()), +                    .cache();, +            subscription = strings.subscribe(new Action1<String>() {, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +            return fragment.isAdded();, +                    return fragment.isAdded();, +     * Binds the given source sequence to the life-cycle of an activity., +     * that no notifications will be forwarded to the activity in case it gets destroyed by the Android runtime, +     * or garbage collected by the VM., +     * Binds the given source sequence to the life-cycle of a fragment (native or support-v4)., +     * activity or garbage collected by the VM., +    public static <T> Observable<T> bindFragment(Object fragment, Observable<T> cachedSequence) {, +        final Observable<T> source = cachedSequence.observeOn(mainThread());, +            return source.lift(new OperatorWeakBinding<T, android.support.v4.app.Fragment>(f, FRAGMENTV4_VALIDATOR));, +            return source.lift(new OperatorWeakBinding<T, Fragment>(f, FRAGMENT_VALIDATOR));, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperatorWeakBinding.java, +import java.lang.ref.WeakReference;, +, + * Ties a source sequence to the life-cycle of the given target object, and/or the subscriber, + * using weak references. When either object is gone, this operator automatically unsubscribes, + * from the source sequence., +    final WeakReference<R> boundRef;, +        boundRef = new WeakReference<R>(bound);, +        boundRef = new WeakReference<R>(bound);, +        return new WeakSubscriber(child);, +    }, +, +    final class WeakSubscriber extends Subscriber<T> {, +, +        final WeakReference<Subscriber<? super T>> subscriberRef;, +]