[+++ b/src/perf/java/io/reactivex/XMapYPerf.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex;, +, +import java.util.*;, +import java.util.concurrent.TimeUnit;, +, +import org.openjdk.jmh.annotations.*;, +import org.openjdk.jmh.infra.Blackhole;, +import org.reactivestreams.Publisher;, +, +import io.reactivex.functions.Function;, +, +@BenchmarkMode(Mode.Throughput), +@Warmup(iterations = 5), +@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS), +@OutputTimeUnit(TimeUnit.SECONDS), +@Fork(value = 1), +@State(Scope.Thread), +public class XMapYPerf {, +    @Param({ "1", "10", "100", "1000", "10000", "100000", "1000000" }), +    public int times;, +, +    Flowable<Integer> flowFlatMapIterable1;, +, +    Flowable<Integer> flowFlatMapIterable0;, +, +    Flowable<Integer> flowFlatMapFlowable0;, +, +    Flowable<Integer> flowFlatMapFlowable1;, +, +    Flowable<Integer> flowFlatMapSingle1;, +, +    Flowable<Integer> flowFlatMapMaybe1;, +, +    Flowable<Integer> flowFlatMapMaybe0;, +, +    Completable flowFlatMapCompletable0;, +, +    // oooooooooooooooooooooooooooooooooooooooooo, +, +    Flowable<Integer> flowFlatMapSingleAsFlow1;, +, +    Flowable<Integer> flowFlatMapMaybeAsFlow1;, +, +    Flowable<Integer> flowFlatMapMaybeAsFlow0;, +, +    Flowable<Integer> flowFlatMapCompletableAsFlow0;, +, +    Flowable<Integer> flowFlatMapIterableAsFlow1;, +, +    Flowable<Integer> flowFlatMapIterableAsFlow0;, +, +    // -----------------------------------------------------------------, +, +    Observable<Integer> obsFlatMapIterable0;, +, +    Observable<Integer> obsFlatMapIterable1;, +, +    Observable<Integer> obsFlatMapObservable0;, +, +    Observable<Integer> obsFlatMapObservable1;, +, +    Observable<Integer> obsFlatMapSingle1;, +, +    Observable<Integer> obsFlatMapMaybe1;, +, +    Observable<Integer> obsFlatMapMaybe0;, +, +    Completable obsFlatMapCompletable0;, +, +    // oooooooooooooooooooooooooooooooooooooooooo, +, +    Observable<Integer> obsFlatMapSingleAsObs1;, +, +    Observable<Integer> obsFlatMapMaybeAsObs1;, +, +    Observable<Integer> obsFlatMapMaybeAsObs0;, +, +    Observable<Integer> obsFlatMapCompletableAsObs0;, +, +    Observable<Integer> obsFlatMapIterableAsObs1;, +, +    Observable<Integer> obsFlatMapIterableAsObs0;, +, +, +    @Setup, +    public void setup() {]