[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Used by dynamic languages., +     * @see #reduce(Observable, Func2), +     * @see #reduce(Observable, Func2), +    public static <T> Observable<T> aggregate(Observable<T> sequence, Func2<T, T, T> accumulator) {, +        return reduce(sequence, accumulator);, +    }, +    , +    /**, +     * Used by dynamic languages., +     * , +     * @see #reduce(Observable, Func2), +     */, +    public static <T> Observable<T> aggregate(Observable<T> sequence, Object accumulator) {, +        return reduce(sequence, accumulator);, +     * @param <R>, +     *            the type returned for each item of the target observable, +     * , +    public static <T, R> Observable<R> reduce(Observable<T> sequence, R initialValue, Func2<R, T, R> accumulator) {, +        return takeLast(create(OperationScan.scan(sequence, initialValue, accumulator)), 1);, +    /**, +     * Used by dynamic languages., +     * , +     * @see #reduce(Observable, Object, Func2), +     */, +    public static <T, R> Observable<R> reduce(final Observable<T> sequence, final R initialValue, final Object accumulator) {, +        @SuppressWarnings("rawtypes"), +        final FuncN _f = Functions.from(accumulator);, +        return reduce(sequence, initialValue, new Func2<R, T, R>() {, +            @SuppressWarnings("unchecked"), +            @Override, +            public R call(R r, T t) {, +                return (R) _f.call(r, t);, +            }, +     * @see #reduce(Observable, Object, Func2), +     */, +    public static <T, R> Observable<R> aggregate(Observable<T> sequence, R initialValue, Func2<R, T, R> accumulator) {, +        return reduce(sequence, initialValue, accumulator);, +    }, +    , +    /**, +     * Used by dynamic languages., +     * , +     * @see #reduce(Observable, Object, Func2), +     */, +    public static <T, R> Observable<R> aggregate(Observable<T> sequence, R initialValue, Object accumulator) {, +        return reduce(sequence, initialValue, accumulator);, +    }, +    , +    /**, +     * Used by dynamic languages., +     * @see #scan(Observable, Func2), +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> scan(Observable<T> sequence, R initialValue, Func2<R, T, R> accumulator) {, +     * Used by dynamic languages., +     * @see #scan(Observable, Object, Func2), +    public static <T, R> Observable<R> scan(final Observable<T> sequence, final R initialValue, final Object accumulator) {, +        return scan(sequence, initialValue, new Func2<R, T, R>() {, +            public R call(R r, T t) {, +                return (R) _f.call(r, t);, +     * Used by dynamic languages., +     * @see #reduce(Func2), +     * @see #reduce(Func2), +    public Observable<T> aggregate(Func2<T, T, T> accumulator) {, +        return aggregate(this, accumulator);, +    }, +    , +    /**, +     * Used by dynamic languages., +     * , +     * @see #reduce(Func2), +     */, +    public Observable<T> aggregate(Object accumulator) {, +        return aggregate(this, accumulator);, +     * , +    public <R> Observable<R> reduce(R initialValue, Func2<R, T, R> accumulator) {, +     * Used by dynamic languages., +     * , +     * @see #reduce(Object, Func2), +     */, +    public <R> Observable<R> reduce(R initialValue, Object accumulator) {, +        return reduce(this, initialValue, accumulator);, +    }, +, +    /**, +     * @see #reduce(Object, Func2), +     */, +    public <R> Observable<R> aggregate(R initialValue, Func2<R, T, R> accumulator) {, +        return aggregate(this, initialValue, accumulator);, +    }, +, +    /**, +     * Used by dynamic languages., +     * , +     * @see #reduce(Object, Func2), +     */, +    public <R> Observable<R> aggregate(R initialValue, Object accumulator) {, +        return aggregate(this, initialValue, accumulator);, +    }]