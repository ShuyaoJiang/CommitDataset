[+++ b/rxjava-examples/src/main/clojure/rx/examples/clojure/rx_examples.clj, +  [& args], +  (-> (Observable/toObservable args), +(comment, +  (hello "Ben" "George")), +(comment, +  (.subscribe (customObservableBlocking) println)), +                (doseq [x (range 50)], +                  (-> observer (.onNext (str "anotherValue_" x)))), +                (-> observer .onCompleted))], +        ; return a subscription that cancels the future, +        (Observable/createSubscription #(future-cancel f)))))), +(comment, +  (.subscribe (customObservableNonBlocking) println)), +                (-> observer .onCompleted))], +        (Observable/createSubscription #(future-cancel f)))))), +(comment, +  (-> (fetchWikipediaArticleAsynchronously ["Tiger" "Elephant"]), +    (.subscribe #(println "--- Article ---\n" (subs (:body %) 0 125) "...")))), +(comment, +  (simpleComposition)), +, +                  (-> observer (.onNext {:user-id userId, +                                         :name "Sam Harris", +                  (catch Exception e (-> observer (.onError e))))) ], +        (Observable/createSubscription #(future-cancel f)))))), +, +                  (catch Exception e (-> observer (.onError e)))))], +        (Observable/createSubscription #(future-cancel f)))))), +                    (-> observer (.onNext {:video-id videoId, +                                           :title "House of Cards: Episode 1", +                                           :director "David Fincher", +                                           :duration 3365}))), +                    (-> observer (.onNext {:video-id videoId, +                                           :title "CÃ¡mara de Tarjetas: Episodio 1", +                                           :director "David Fincher", +                                           :duration 3365}))), +                  (catch Exception e (-> observer (.onError e))))) ], +        (Observable/createSubscription #(future-cancel f)))))), +                                    (.map (fn [user] {:user-name (:name user), +                                                      :language (:preferred-language user)}))), +               :bookmark       (:viewed-position (:bookmark-map data)) }))))), +(comment, +  (-> (getVideoForUser 12345 78965), +      (fn [] (println "--- Completed ---"))))), +                ; after sending response to onNext we complete the sequence, +                (-> observer .onCompleted))], +        (Observable/createSubscription #(future-cancel f)))))), +(comment, +  (-> (fetchWikipediaArticleAsynchronouslyWithErrorHandling ["Tiger" "NonExistentTitle" "Elephant"]), +    (.subscribe #(println "--- Article ---\n" (subs (:body %) 0 125) "..."), +                #(println "--- Error ---\n" (.getMessage %)))))]