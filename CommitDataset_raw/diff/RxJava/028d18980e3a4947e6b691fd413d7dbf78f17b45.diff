[+++ b/rxjava-core/src/main/java/rx/observers/SafeObserver.java, +        // if we did not throw above we will unsubscribe here, if onError failed then unsubscribe happens in the catch, +++ b/rxjava-core/src/main/java/rx/observers/SafeObserver.java, +        // if we did not throw above we will unsubscribe here, if onError failed then unsubscribe happens in the catch, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +import java.util.List;, +        final List<Throwable> es = new ArrayList<Throwable>();, +            if (es.size() == 1) {, +                Throwable t = es.get(0);, +                if (t instanceof RuntimeException) {, +                    throw (RuntimeException) t;, +                } else {, +            } else {, +                throw new CompositeException(, +                        "Failed to unsubscribe to 2 or more subscriptions.", es);, +            }, +        }, +++ b/rxjava-core/src/main/java/rx/observers/SafeObserver.java, +        // if we did not throw above we will unsubscribe here, if onError failed then unsubscribe happens in the catch, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +import java.util.List;, +        final List<Throwable> es = new ArrayList<Throwable>();, +            if (es.size() == 1) {, +                Throwable t = es.get(0);, +                if (t instanceof RuntimeException) {, +                    throw (RuntimeException) t;, +                } else {, +            } else {, +                throw new CompositeException(, +                        "Failed to unsubscribe to 2 or more subscriptions.", es);, +            }, +        }, +++ b/rxjava-core/src/test/java/rx/subscriptions/CompositeSubscriptionTest.java, +        } catch (RuntimeException e) {, +            // we expect this, +            assertEquals(e.getMessage(), "failed on first one");, +        }, +, +        // we should still have unsubscribed to the second one, +        assertEquals(1, counter.get());, +    }, +, +    @Test, +    public void testCompositeException() {, +        final AtomicInteger counter = new AtomicInteger();, +        CompositeSubscription s = new CompositeSubscription();, +        s.add(new Subscription() {, +, +            @Override, +            public void unsubscribe() {, +                throw new RuntimeException("failed on first one");, +            }, +        });, +, +        s.add(new Subscription() {, +, +            @Override, +            public void unsubscribe() {, +                throw new RuntimeException("failed on second one too");, +            }, +        });, +, +        s.add(new Subscription() {, +, +            @Override, +            public void unsubscribe() {, +                counter.incrementAndGet();, +            }, +        });, +, +        try {, +            s.unsubscribe();, +            fail("Expecting an exception");, +            assertEquals(e.getExceptions().size(), 2);]