[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +  private [scala] val asJavaSubscriber: rx.Subscriber[_ >: T] = new rx.Subscriber[T] {, +    def onNext(value: T): Unit = self.onNext(value), +    def onError(error: Throwable): Unit = self.onError(error), +    def onCompleted(): Unit = self.onCompleted(), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +  private [scala] val asJavaSubscriber: rx.Subscriber[_ >: T] = new rx.Subscriber[T] {, +    def onNext(value: T): Unit = self.onNext(value), +    def onError(error: Throwable): Unit = self.onError(error), +    def onCompleted(): Unit = self.onCompleted(), +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @deprecated Use multicast(Func0<Subject>) instead. This one caused nuanced bugs as it retains state., +    @Deprecated, +        return lift(new OperatorWindowWithTime<T>(timespan, timeshift, unit, Integer.MAX_VALUE, Schedulers.computation()));, +        return lift(new OperatorWindowWithTime<T>(timespan, timeshift, unit, Integer.MAX_VALUE, scheduler));, +        return lift(new OperatorWindowWithTime<T>(timespan, timespan, unit, count, scheduler));, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +  private [scala] val asJavaSubscriber: rx.Subscriber[_ >: T] = new rx.Subscriber[T] {, +    def onNext(value: T): Unit = self.onNext(value), +    def onError(error: Throwable): Unit = self.onError(error), +    def onCompleted(): Unit = self.onCompleted(), +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @deprecated Use multicast(Func0<Subject>) instead. This one caused nuanced bugs as it retains state., +    @Deprecated, +        return lift(new OperatorWindowWithTime<T>(timespan, timeshift, unit, Integer.MAX_VALUE, Schedulers.computation()));, +        return lift(new OperatorWindowWithTime<T>(timespan, timeshift, unit, Integer.MAX_VALUE, scheduler));, +        return lift(new OperatorWindowWithTime<T>(timespan, timespan, unit, count, scheduler));, +++ b/rxjava-core/src/test/java/rx/internal/operators/OnSubscribeMulticastTest.java, +import rx.functions.Func0;, +        ConnectableObservable<String> multicasted = source.multicast(new PublishSubjectFactory());, +        ConnectableObservable<String> multicasted = source.multicast(new PublishSubjectFactory());, +        ConnectableObservable<String> multicasted = source.multicast(new PublishSubjectFactory());, +        // subscribe again, +        multicasted.subscribe(observer);, +        // reconnect, +    , +    private static final class PublishSubjectFactory implements Func0<Subject<String, String>> {, +, +        @Override, +        public Subject<String, String> call() {, +            return PublishSubject.<String> create();, +        }, +        , +    }]