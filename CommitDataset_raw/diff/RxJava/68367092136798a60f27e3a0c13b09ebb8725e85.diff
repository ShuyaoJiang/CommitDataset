[+++ b/CHANGES.md, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Producer.java, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Producer.java, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Producer.java, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorZip.java, +import java.util.concurrent.atomic.AtomicLong;, +import rx.Producer;, +import rx.exceptions.MissingBackpressureException;, +import rx.internal.util.RxRingBuffer;, + * , + * @param <R>, + *            the result type, +    public Subscriber<? super Observable[]> call(final Subscriber<? super R> child) {, +        final Zip<R> zipper = new Zip<R>(child, zipFunction);, +        final ZipProducer<R> producer = new ZipProducer<R>(zipper);, +        child.setProducer(producer);, +        final ZipSubscriber subscriber = new ZipSubscriber(child, zipper, producer);, +        return subscriber;, +    }, +, +    private final class ZipSubscriber extends Subscriber<Observable[]> {, +, +        final Subscriber<? super R> child;, +        final Zip<R> zipper;, +        final ZipProducer<R> producer;, +, +        public ZipSubscriber(Subscriber<? super R> child, Zip<R> zipper, ZipProducer<R> producer) {, +            super(child);, +            this.child = child;, +            this.zipper = zipper;, +            this.producer = producer;, +        }, +                child.onCompleted();, +            child.onError(e);, +                child.onCompleted();, +                zipper.start(observables, producer);, +    private static final class ZipProducer<R> extends AtomicLong implements Producer {, +, +        private Zip<R> zipper;, +, +        public ZipProducer(Zip<R> zipper) {, +            this.zipper = zipper;, +        }, +, +        @Override, +        public void request(long n) {, +            addAndGet(n);, +            // try and claim emission if no other threads are doing so, +            zipper.tick();, +        }, +, +    }, +, +        private final Observer<? super R> child;, +        private final FuncN<? extends R> zipFunction;, +        private final CompositeSubscription childSubscription = new CompositeSubscription();, +, +        static final AtomicLongFieldUpdater<Zip> COUNTER_UPDATER = AtomicLongFieldUpdater.newUpdater(Zip.class, "counter");, +, +        static final int THRESHOLD = (int) (RxRingBuffer.SIZE * 0.7);, +        int emitted = 0; // not volatile/synchronized as accessed inside COUNTER_UPDATER block, +, +        /* initialized when started in `start` */, +        private Object[] observers;, +        private AtomicLong requested;, +        public Zip(final Subscriber<? super R> child, FuncN<? extends R> zipFunction) {, +            this.child = child;, +            child.add(childSubscription);, +        }, +, +        @SuppressWarnings("unchecked"), +        public void start(@SuppressWarnings("rawtypes") Observable[] os, AtomicLong requested) {, +            this.requested = requested;, +                InnerSubscriber io = new InnerSubscriber();, +                os[i].unsafeSubscribe((InnerSubscriber) observers[i]);, +            if (observers == null) {, +                // nothing yet to do (initial request from Producer), +                return;, +            }]