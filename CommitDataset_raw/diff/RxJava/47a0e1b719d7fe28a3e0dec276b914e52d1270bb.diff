[+++ b/rxjava-core/src/main/java/rx/Notification.java, +    public void accept(Subscriber<? super T> observer) {, +++ b/rxjava-core/src/main/java/rx/Notification.java, +    public void accept(Subscriber<? super T> observer) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     *            {@link OnSubscribeFunc} to be executed when {@link #subscribe(Subscriber)} is called, +     * Returns an Observable that will execute the specified function when an {@link Subscriber} subscribes to it., +     * invoke the Observer's {@link Subscriber#onNext onNext}, {@link Subscriber#onError onError}, and {@link Subscriber#onCompleted onCompleted} methods appropriately., +     * @return an Observable that, when an {@link Subscriber} subscribes to it, will execute the, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#create">RxJava Wiki: create()</a>, +    public static interface OnSubscribe<T> extends Action1<Subscriber<? super T>> {, +            public void call(Subscriber<? super T> observer) {, +        public Subscription onSubscribe(Subscriber<? super T> op);, +    public <R> Observable<R> lift(final Func1<Subscriber<? super R>, Subscriber<? super T>> bind) {, +            public void call(Subscriber<? super R> o) {, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Conditional-and-Boolean-Operators#amb">RxJava Wiki: amb()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Conditional-and-Boolean-Operators#amb">RxJava Wiki: amb()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Conditional-and-Boolean-Operators#amb">RxJava Wiki: amb()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Conditional-and-Boolean-Operators#amb">RxJava Wiki: amb()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Conditional-and-Boolean-Operators#amb">RxJava Wiki: amb()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Conditional-and-Boolean-Operators#amb">RxJava Wiki: amb()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Conditional-and-Boolean-Operators#amb">RxJava Wiki: amb()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Conditional-and-Boolean-Operators#amb">RxJava Wiki: amb()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Conditional-and-Boolean-Operators#amb">RxJava Wiki: amb()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#averageinteger-averagelong-averagefloat-and-averagedouble">RxJava Wiki: averageDouble()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#averageinteger-averagelong-averagefloat-and-averagedouble">RxJava Wiki: averageFloat()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#averageinteger-averagelong-averagefloat-and-averagedouble">RxJava Wiki: averageInteger()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#averageinteger-averagelong-averagefloat-and-averagedouble">RxJava Wiki: averageLong()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#combinelatest">RxJava Wiki: combineLatest()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#combinelatest">RxJava Wiki: combineLatest()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#combinelatest">RxJava Wiki: combineLatest()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#combinelatest">RxJava Wiki: combineLatest()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#combinelatest">RxJava Wiki: combineLatest()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#combinelatest">RxJava Wiki: combineLatest()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#combinelatest">RxJava Wiki: combineLatest()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#combinelatest">RxJava Wiki: combineLatest()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#concat">RxJava Wiki: concat()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#concat">RxJava Wiki: concat()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#concat">RxJava Wiki: concat()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#concat">RxJava Wiki: concat()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#concat">RxJava Wiki: concat()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#concat">RxJava Wiki: concat()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#concat">RxJava Wiki: concat()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#concat">RxJava Wiki: concat()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#concat">RxJava Wiki: concat()</a>, +     * time as an Observer subscribes to the Observable. This allows an {@link Subscriber} to easily, +     *            the Observable factory function to invoke for each {@link Subscriber} that, +     * @return an Observable whose {@link Subscriber}s' subscriptions trigger an invocation of the, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#defer">RxJava Wiki: defer()</a>, +     * Returns an Observable that emits no items to the {@link Subscriber} and immediately invokes its {@link Subscriber#onCompleted onCompleted} method., +     * @return an Observable that emits no items to the {@link Subscriber} but immediately invokes the {@link Subscriber}'s {@link Subscriber#onCompleted() onCompleted} method, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#empty-error-and-never">RxJava Wiki: empty()</a>, +     * Returns an Observable that emits no items to the {@link Subscriber} and immediately invokes its {@link Subscriber#onCompleted onCompleted} method on the specified scheduler., +     *            the scheduler to use to call the {@link Subscriber#onCompleted onCompleted} method, +     * @return an Observable that emits no items to the {@link Subscriber} but immediately invokes the {@link Subscriber}'s {@link Subscriber#onCompleted() onCompleted} method with the, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#empty-error-and-never">RxJava Wiki: empty()</a>, +     * Returns an Observable that invokes an {@link Subscriber}'s {@link Subscriber#onError onError} method when the Observer subscribes to it., +     *            the particular Throwable to pass to {@link Subscriber#onError onError}, +     * @return an Observable that invokes the {@link Subscriber}'s {@link Subscriber#onError onError} method when the Observer subscribes to it, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#empty-error-and-never">RxJava Wiki: error()</a>, +     * Returns an Observable that invokes an {@link Subscriber}'s {@link Subscriber#onError onError} method on the specified scheduler., +     *            the particular Throwable to pass to {@link Subscriber#onError onError}, +     *            the scheduler on which to call {@link Subscriber#onError onError}, +     * @return an Observable that invokes the {@link Subscriber}'s {@link Subscriber#onError onError} method, on the specified scheduler, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#empty-error-and-never">RxJava Wiki: error()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * Note: the entire iterable sequence is immediately emitted each time an {@link Subscriber} subscribes. Since this occurs before the {@link Subscription} is returned, it is not possible, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * Note: the item is immediately emitted each time an {@link Subscriber} subscribes. Since this, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * Note: the items will be immediately emitted each time an {@link Subscriber} subscribes. Since, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * Note: the items will be immediately emitted each time an {@link Subscriber} subscribes. Since, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * Note: the items will be immediately emitted each time an {@link Subscriber} subscribes. Since, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * Note: the items will be immediately emitted each time an {@link Subscriber} subscribes. Since, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * Note: the items will be immediately emitted each time an {@link Subscriber} subscribes. Since, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * Note: the items will be immediately emitted each time an {@link Subscriber} subscribes. Since, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * Note: the items will be immediately emitted each time an {@link Subscriber} subscribes. Since, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * Note: the items will be immediately emitted each time an {@link Subscriber} subscribes. Since, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * <em>Note:</em> the entire array is immediately emitted each time an {@link Subscriber} subscribes. Since this occurs before the {@link Subscription} is returned, it is not possible, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * <em>Note:</em> the entire array is immediately emitted each time an {@link Subscriber} subscribes. Since this occurs before the {@link Subscription} is returned, it is not, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from">RxJava Wiki: from()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#interval">RxJava Wiki: interval()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#interval">RxJava Wiki: interval()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#just">RxJava Wiki: just()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#just">RxJava Wiki: just()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Mathematical-and-Aggregate-Operators#max">RxJava Wiki: max()</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#merge">RxJava Wiki: merge()</a>]