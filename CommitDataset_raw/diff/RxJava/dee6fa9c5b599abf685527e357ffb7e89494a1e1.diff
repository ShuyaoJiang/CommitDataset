[+++ b/language-adaptors/rxjava-jruby/README.md, +This adaptor allows 'org.jruby.RubyProc' lambda functions to be used and RxJava will know how to invoke them., +++ b/language-adaptors/rxjava-jruby/README.md, +This adaptor allows 'org.jruby.RubyProc' lambda functions to be used and RxJava will know how to invoke them., +++ b/language-adaptors/rxjava-scala/README.md, +++ b/language-adaptors/rxjava-jruby/README.md, +This adaptor allows 'org.jruby.RubyProc' lambda functions to be used and RxJava will know how to invoke them., +++ b/language-adaptors/rxjava-scala/README.md, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.Range;, +     * Generates an observable sequence of integral numbers within a specified range., +     *, +     * @param start The value of the first integer in the sequence, +     * @param count The number of sequential integers to generate., +     *, +     * @return An observable sequence that contains a range of sequential integral numbers., +     *, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229460(v=vs.103).aspx">Observable.Range Method (Int32, Int32)</a>, +     */, +    public static Observable<Integer> range(int start, int count) {, +        return from(Range.createWithCount(start, count));, +    }, +, +    /**, +++ b/language-adaptors/rxjava-jruby/README.md, +This adaptor allows 'org.jruby.RubyProc' lambda functions to be used and RxJava will know how to invoke them., +++ b/language-adaptors/rxjava-scala/README.md, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.Range;, +     * Generates an observable sequence of integral numbers within a specified range., +     *, +     * @param start The value of the first integer in the sequence, +     * @param count The number of sequential integers to generate., +     *, +     * @return An observable sequence that contains a range of sequential integral numbers., +     *, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229460(v=vs.103).aspx">Observable.Range Method (Int32, Int32)</a>, +     */, +    public static Observable<Integer> range(int start, int count) {, +        return from(Range.createWithCount(start, count));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/util/Range.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.util;, +, +import org.junit.Test;, +, +import java.util.*;, +, +import static org.junit.Assert.assertEquals;, +, +public final class Range implements Iterable<Integer> {, +    private final int start;, +    private final int end;, +    private final int step;, +, +    public static Range createWithCount(int start, int count) {, +        return create(start, start * (count + 1));, +    }, +, +    public static Range create(int start, int end) {, +        return new Range(start, end, 1);, +    }, +, +    public static Range createWithStep(int start, int end, int step) {, +        return new Range(start, end, step);, +    }, +, +    private Range(int start, int end, int step) {, +        this.start = start;, +        this.end = end;, +        this.step = step;, +    }, +, +    @Override, +    public Iterator<Integer> iterator() {, +        return new Iterator<Integer>() {, +            private int current = start;, +, +            @Override, +            public boolean hasNext() {, +                return current < end;, +            }, +]