[+++ b/src/main/java/rx/internal/operators/OperatorWindowWithTime.java, + * If timespan == timeshift, windows are non-overlapping but always continuous, i.e., when the size bound is reached, a new, + * window is opened., +            if (s.consumer == null) {, +                replaceSubject();, +                s = state;, +            }, +            if (s.count == size - 1) {, +++ b/src/main/java/rx/internal/operators/OperatorWindowWithTime.java, + * If timespan == timeshift, windows are non-overlapping but always continuous, i.e., when the size bound is reached, a new, + * window is opened., +            if (s.consumer == null) {, +                replaceSubject();, +                s = state;, +            }, +            if (s.count == size - 1) {, +++ b/src/test/java/rx/internal/operators/OperatorWindowWithTimeTest.java, +import static org.junit.Assert.*;, +import java.util.*;, +import org.junit.*;, +import rx.*;, +import rx.functions.*;, +    private <T> Action1<Observable<T>> observeWindow(final List<T> list, final List<List<T>> lists) {, +        return new Action1<Observable<T>>() {, +            public void call(Observable<T> stringObservable) {, +                stringObservable.subscribe(new Observer<T>() {, +                        lists.add(new ArrayList<T>(list));, +                    public void onNext(T args) {, +    @Test, +    public void testExactWindowSize() {, +        Observable<Observable<Integer>> source = Observable.range(1, 10).window(1, TimeUnit.MINUTES, 3, scheduler);, +        , +        final List<Integer> list = new ArrayList<Integer>();, +        final List<List<Integer>> lists = new ArrayList<List<Integer>>();, +        , +        source.subscribe(observeWindow(list, lists));, +        , +        assertEquals(4, lists.size());, +        assertEquals(3, lists.get(0).size());, +        assertEquals(Arrays.asList(1, 2, 3), lists.get(0));, +        assertEquals(3, lists.get(1).size());, +        assertEquals(Arrays.asList(4, 5, 6), lists.get(1));, +        assertEquals(3, lists.get(2).size());, +        assertEquals(Arrays.asList(7, 8, 9), lists.get(2));, +        assertEquals(1, lists.get(3).size());, +        assertEquals(Arrays.asList(10), lists.get(3));, +    }, +    ]