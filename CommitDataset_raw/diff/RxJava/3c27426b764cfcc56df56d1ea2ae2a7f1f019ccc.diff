[+++ b/docs/Combining-Observables.md, +# Outline, +, +- [`combineLatest`](#combineLatest), +- [`join` and `groupJoin`](#joins), +- [`merge`](#merge), +- [`mergeDelayError`](#mergeDelayError), +- [`rxjava-joins`](#rxjava-joins), +- [`startWith`](#startWith), +- [`switchOnNext`](#switchOnNext), +- [`zip`](#zip), +, +## startWith, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +**ReactiveX doumentation:** [http://reactivex.io/documentation/operators/startwith.html](http://reactivex.io/documentation/operators/startwith.html), +, +Emit a specified sequence of items before beginning to emit the items from the Observable., +, +#### startWith Example, +, +```java, +Observable<String> names = Observable.just("Spock", "McCoy");, +names.startWith("Kirk").subscribe(item -> System.out.println(item));, +, +// prints Kirk, Spock, McCoy, +```, +, +## merge, +, +Combines multiple Observables into one. , +, +, +### merge, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Completable`, +, +**ReactiveX doumentation:** [http://reactivex.io/documentation/operators/merge.html](http://reactivex.io/documentation/operators/merge.html), +, +Combines multiple Observables into one. Any `onError` notifications passed from any of the source observables will immediately be passed through to through to the observers and will terminate the merged `Observable`., +, +#### merge Example, +, +```java, +Observable.just(1, 2, 3), +    .mergeWith(Observable.just(4, 5, 6)), +    .subscribe(item -> System.out.println(item));, +, +// prints 1, 2, 3, 4, 5, 6, +```, +, +### mergeDelayError, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Completable`, +, +**ReactiveX doumentation:** [http://reactivex.io/documentation/operators/merge.html](http://reactivex.io/documentation/operators/merge.html), +, +Combines multiple Observables into one. Any `onError` notifications passed from any of the source observables will be withheld until all merged Observables complete, and only then will be passed along to the observers., +, +#### mergeDelayError Example, +, +```java, +Observable<String> observable1 = Observable.error(new IllegalArgumentException(""));, +Observable<String> observable2 = Observable.just("Four", "Five", "Six");, +Observable.mergeDelayError(observable1, observable2), +        .subscribe(item -> System.out.println(item));, +, +// emits 4, 5, 6 and then the IllegalArgumentException (in this specific, +// example, this throws an `OnErrorNotImplementedException`)., +```, +, +## zip, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +**ReactiveX doumentation:** [http://reactivex.io/documentation/operators/zip.html](http://reactivex.io/documentation/operators/zip.html), +, +Combines sets of items emitted by two or more Observables together via a specified function and emit items based on the results of this function., +, +#### zip Example, +, +```java, +Observable<String> firstNames = Observable.just("James", "Jean-Luc", "Benjamin");, +Observable<String> lastNames = Observable.just("Kirk", "Picard", "Sisko");, +firstNames.zipWith(lastNames, (first, last) -> first + " " + last), +    .subscribe(item -> System.out.println(item));, +, +// prints James Kirk, Jean-Luc Picard, Benjamin Sisko, +```, +, +## combineLatest, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +**ReactiveX doumentation:** [http://reactivex.io/documentation/operators/combinelatest.html](http://reactivex.io/documentation/operators/combinelatest.html), +, +When an item is emitted by either of two Observables, combine the latest item emitted by each Observable via a specified function and emit items based on the results of this function., +, +#### combineLatest Example]