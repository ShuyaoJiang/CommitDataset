[+++ b/CHANGES.md, +++ b/CHANGES.md, +++ b/build.gradle, +++ b/CHANGES.md, +++ b/build.gradle, +++ b/gradle.properties, +version=0.18.4-SNAPSHOT, +++ b/CHANGES.md, +++ b/build.gradle, +++ b/gradle.properties, +version=0.18.4-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/CHANGES.md, +++ b/build.gradle, +++ b/gradle.properties, +version=0.18.4-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/CHANGES.md, +++ b/build.gradle, +++ b/gradle.properties, +version=0.18.4-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/CHANGES.md, +++ b/build.gradle, +++ b/gradle.properties, +version=0.18.4-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/CHANGES.md, +++ b/build.gradle, +++ b/gradle.properties, +version=0.18.4-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/SubscriberTests.scala, +++ b/CHANGES.md, +++ b/build.gradle, +++ b/gradle.properties, +version=0.18.4-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/SubscriberTests.scala, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +import rx.subscriptions.ChainedSubscription;, +    private final ChainedSubscription cs;, +, +    protected Subscriber(ChainedSubscription cs) {, +        if (cs == null) {, +            throw new IllegalArgumentException("The CompositeSubscription can not be null");, +        }, +        this.cs = cs;, +    }, +        this(new ChainedSubscription());, +        this(new ChainedSubscription());, +        this(op.cs);, +++ b/CHANGES.md, +++ b/build.gradle, +++ b/gradle.properties, +version=0.18.4-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/SubscriberTests.scala, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +import rx.subscriptions.ChainedSubscription;, +    private final ChainedSubscription cs;, +, +    protected Subscriber(ChainedSubscription cs) {, +        if (cs == null) {, +            throw new IllegalArgumentException("The CompositeSubscription can not be null");, +        }, +        this.cs = cs;, +    }, +        this(new ChainedSubscription());, +        this(new ChainedSubscription());, +        this(op.cs);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorGroupBy.java, +import rx.subscriptions.ChainedSubscription;, +    public Subscriber<? super T> call(final Subscriber<? super GroupedObservable<K, T>> childObserver) {, +        return new GroupBySubscriber<K, T>(keySelector, childObserver);, +        final Subscriber<? super GroupedObservable<K, T>> childObserver;, +        public GroupBySubscriber(Func1<? super T, ? extends K> keySelector, Subscriber<? super GroupedObservable<K, T>> childObserver) {, +            super(new ChainedSubscription());, +            this.childObserver = childObserver;, +                        childObserver.onCompleted();, +                childObserver.onError(e);, +                BufferUntilSubscriber<T> gps = groups.get(key);, +                if (gps == null) {, +                    if (childObserver.isUnsubscribed()) {, +                    gps = BufferUntilSubscriber.create();]