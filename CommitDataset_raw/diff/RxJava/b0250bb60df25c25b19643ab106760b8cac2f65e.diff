[+++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to , +     * hold onto the latest value and emit that on request., +     * <p>, +     * Its behavior is logically equivalent to toBlocking().latest() with the exception that, +     * the downstream is not blocking while requesting more values., +     * <p>, +     * Note that if the upstream Observable does support backpressure, this operator ignores that capability, +     * and doesn't propagate any backpressure requests from downstream., +     * <p>, +     * Note that due to the nature of how backpressure requests are propagated through subscribeOn/observeOn,, +     * requesting more than 1 from downstream doesn't guarantee a continuous delivery of onNext events., +     * @return, +     * @Experimental The behavior of this can change at any time. , +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     */, +    @Experimental, +    public final Observable<T> onBackpressureLatest() {, +        return lift(OperatorOnBackpressureLatest.<T>instance());, +    }, +    , +    /**, +++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to , +     * hold onto the latest value and emit that on request., +     * <p>, +     * Its behavior is logically equivalent to toBlocking().latest() with the exception that, +     * the downstream is not blocking while requesting more values., +     * <p>, +     * Note that if the upstream Observable does support backpressure, this operator ignores that capability, +     * and doesn't propagate any backpressure requests from downstream., +     * <p>, +     * Note that due to the nature of how backpressure requests are propagated through subscribeOn/observeOn,, +     * requesting more than 1 from downstream doesn't guarantee a continuous delivery of onNext events., +     * @return, +     * @Experimental The behavior of this can change at any time. , +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     */, +    @Experimental, +    public final Observable<T> onBackpressureLatest() {, +        return lift(OperatorOnBackpressureLatest.<T>instance());, +    }, +    , +    /**, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureLatest.java, +/**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations under, + * the License., + */, +package rx.internal.operators;, +, +import java.util.concurrent.atomic.*;, +, +import rx.Observable.Operator;, +import rx.*;, +, +/**, + * An operator which drops all but the last received value in case the downstream, + * doesn't request more., + */, +public final class OperatorOnBackpressureLatest<T> implements Operator<T, T> {, +    /** Holds a singleton instance initialized on class-loading. */, +    static final class Holder {, +        static final OperatorOnBackpressureLatest<Object> INSTANCE = new OperatorOnBackpressureLatest<Object>();, +    }, +    , +    /**, +     * Returns a singleton instance of the OnBackpressureLatest operator since it is stateless., +     * @return the single instanceof OperatorOnBackpressureLatest, +     */, +    @SuppressWarnings("unchecked"), +    public static <T> OperatorOnBackpressureLatest<T> instance() {, +        return (OperatorOnBackpressureLatest<T>)Holder.INSTANCE;, +    }, +    , +    @Override, +    public Subscriber<? super T> call(Subscriber<? super T> child) {, +        final LatestEmitter<T> producer = new LatestEmitter<T>(child);, +        LatestSubscriber<T> parent = new LatestSubscriber<T>(producer);, +        producer.parent = parent;, +        child.add(parent);, +        child.add(producer);, +        child.setProducer(producer);, +        return parent;, +    }, +    /**, +     * A terminatable producer which emits the latest items on request., +     * @param <T>, +     */]