[+++ b/src/main/java/io/reactivex/Observable.java, +    , +    // TODO would result in ambiguity with onErrorReturn(Function), +    public Observable<T> onErrorReturnValue(T value) {, +        Objects.requireNonNull(value);, +        return onErrorReturn(e -> value);, +    }, +    , +    public Observable<T> onErrorReturn(Function<? super Throwable, ? extends T> valueSupplier) {, +        Objects.requireNonNull(valueSupplier);, +        return lift(new OperatorOnErrorReturn<>(valueSupplier));, +    }, +    , +    public Observable<T> onErrorResumeNext(Publisher<? extends T> next) {, +        Objects.requireNonNull(next);, +        return onErrorResumeNext(e -> next);, +    }, +    , +    public Observable<T> onErrorResumeNext(Function<? super Throwable, ? extends Publisher<? extends T>> resumeFunction) {, +        Objects.requireNonNull(resumeFunction);, +        return lift(new OperatorOnErrorNext<>(resumeFunction, false));, +    }, +    , +    public Observable<T> onExceptionResumeNext(Publisher<? extends T> next) {, +        Objects.requireNonNull(next);, +        return lift(new OperatorOnErrorNext<>(e -> next, true));, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +    , +    // TODO would result in ambiguity with onErrorReturn(Function), +    public Observable<T> onErrorReturnValue(T value) {, +        Objects.requireNonNull(value);, +        return onErrorReturn(e -> value);, +    }, +    , +    public Observable<T> onErrorReturn(Function<? super Throwable, ? extends T> valueSupplier) {, +        Objects.requireNonNull(valueSupplier);, +        return lift(new OperatorOnErrorReturn<>(valueSupplier));, +    }, +    , +    public Observable<T> onErrorResumeNext(Publisher<? extends T> next) {, +        Objects.requireNonNull(next);, +        return onErrorResumeNext(e -> next);, +    }, +    , +    public Observable<T> onErrorResumeNext(Function<? super Throwable, ? extends Publisher<? extends T>> resumeFunction) {, +        Objects.requireNonNull(resumeFunction);, +        return lift(new OperatorOnErrorNext<>(resumeFunction, false));, +    }, +    , +    public Observable<T> onExceptionResumeNext(Publisher<? extends T> next) {, +        Objects.requireNonNull(next);, +        return lift(new OperatorOnErrorNext<>(e -> next, true));, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorOnErrorNext.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import java.util.function.*;, +, +import org.reactivestreams.*;, +, +import io.reactivex.Observable.Operator;, +import io.reactivex.internal.subscriptions.SubscriptionArbiter;, +, +public final class OperatorOnErrorNext<T> implements Operator<T, T> {, +    final Function<? super Throwable, ? extends Publisher<? extends T>> nextSupplier;, +    final boolean allowFatal;, +    , +    public OperatorOnErrorNext(Function<? super Throwable, ? extends Publisher<? extends T>> nextSupplier, boolean allowFatal) {, +        this.nextSupplier = nextSupplier;, +        this.allowFatal = allowFatal;, +    }, +    , +    @Override, +    public Subscriber<? super T> apply(Subscriber<? super T> t) {, +        return new OnErrorNextSubscriber<>(t, nextSupplier, allowFatal);, +    }, +    , +    static final class OnErrorNextSubscriber<T> implements Subscriber<T> {, +        final Subscriber<? super T> actual;, +        final Function<? super Throwable, ? extends Publisher<? extends T>> nextSupplier;, +        final boolean allowFatal;, +        final SubscriptionArbiter arbiter;, +        , +        boolean once;, +        , +        public OnErrorNextSubscriber(Subscriber<? super T> actual, Function<? super Throwable, ? extends Publisher<? extends T>> nextSupplier, boolean allowFatal) {]