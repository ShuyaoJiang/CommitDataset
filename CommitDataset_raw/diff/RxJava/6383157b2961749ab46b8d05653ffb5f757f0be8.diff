[+++ b/rxjava-core/src/main/java/rx/joins/JoinObserver1.java, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import rx.operators.SafeObservableSubscription;, +    private final SafeObservableSubscription subscription;, +    private final AtomicBoolean subscribed = new AtomicBoolean(false);, +        subscription = new SafeObservableSubscription();, +        if (subscribed.compareAndSet(false, true)) {, +            subscription.wrap(source.materialize().subscribe(this));, +        } else {, +            throw new IllegalStateException("Can only be subscribed to once.");, +        }, +++ b/rxjava-core/src/main/java/rx/joins/JoinObserver1.java, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import rx.operators.SafeObservableSubscription;, +    private final SafeObservableSubscription subscription;, +    private final AtomicBoolean subscribed = new AtomicBoolean(false);, +        subscription = new SafeObservableSubscription();, +        if (subscribed.compareAndSet(false, true)) {, +            subscription.wrap(source.materialize().subscribe(this));, +        } else {, +            throw new IllegalStateException("Can only be subscribed to once.");, +        }, +++ /dev/null]