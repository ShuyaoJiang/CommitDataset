[+++ b/src/main/java/io/reactivex/Completable.java, +    public static <T> Completable fromSingle(final SingleSource<T> single) {, +++ b/src/main/java/io/reactivex/Completable.java, +    public static <T> Completable fromSingle(final SingleSource<T> single) {, +++ b/src/main/java/io/reactivex/Observable.java, +        return Single.create(new SingleSource<T>() {, +            public void subscribe(final SingleObserver<? super T> s) {, +++ b/src/main/java/io/reactivex/Completable.java, +    public static <T> Completable fromSingle(final SingleSource<T> single) {, +++ b/src/main/java/io/reactivex/Observable.java, +        return Single.create(new SingleSource<T>() {, +            public void subscribe(final SingleObserver<? super T> s) {, +++ b/src/main/java/io/reactivex/Single.java, +public abstract class Single<T> implements SingleSource<T> {, +    static <T> Single<T> wrap(SingleSource<T> source) {, +    public static <T> Single<T> amb(final Iterable<? extends SingleSource<? extends T>> sources) {, +    public static <T> Single<T> amb(final SingleSource<? extends T>... sources) {, +            return wrap((SingleSource<T>)sources[0]);, +    public static <T> Flowable<T> concat(Iterable<? extends SingleSource<? extends T>> sources) {, +    public static <T> Flowable<T> concat(Flowable<? extends SingleSource<? extends T>> sources) { // FIXME Publisher, +        return sources.concatMap(new Function<SingleSource<? extends T>, Publisher<? extends T>>() {, +            public Publisher<? extends T> apply(SingleSource<? extends T> v){, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, SingleSource<? extends T> s4, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, SingleSource<? extends T> s4,, +            SingleSource<? extends T> s5, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, SingleSource<? extends T> s4,, +            SingleSource<? extends T> s5, SingleSource<? extends T> s6, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, SingleSource<? extends T> s4,, +            SingleSource<? extends T> s5, SingleSource<? extends T> s6,, +            SingleSource<? extends T> s7, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, SingleSource<? extends T> s4,, +            SingleSource<? extends T> s5, SingleSource<? extends T> s6,, +            SingleSource<? extends T> s7, SingleSource<? extends T> s8, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, SingleSource<? extends T> s4,, +            SingleSource<? extends T> s5, SingleSource<? extends T> s6,, +            SingleSource<? extends T> s7, SingleSource<? extends T> s8,, +            SingleSource<? extends T> s9, +    public static <T> Single<T> create(SingleSource<T> onSubscribe) {, +    public static <T> Single<T> defer(final Callable<? extends SingleSource<? extends T>> singleSupplier) {, +    public static <T> Flowable<T> merge(Iterable<? extends SingleSource<? extends T>> sources) {, +    public static <T> Flowable<T> merge(Flowable<? extends SingleSource<? extends T>> sources) { // FIXME Publisher, +        return sources.flatMap(new Function<SingleSource<? extends T>, Publisher<? extends T>>() {, +            public Publisher<? extends T> apply(SingleSource<? extends T> v){, +    public static <T> Single<T> merge(SingleSource<? extends SingleSource<? extends T>> source) {, +        return new SingleFlatMap<SingleSource<? extends T>, T>(source, (Function)Functions.identity());, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, SingleSource<? extends T> s4, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, SingleSource<? extends T> s4,, +            SingleSource<? extends T> s5, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, SingleSource<? extends T> s4,, +            SingleSource<? extends T> s5, SingleSource<? extends T> s6, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, SingleSource<? extends T> s4,, +            SingleSource<? extends T> s5, SingleSource<? extends T> s6,, +            SingleSource<? extends T> s7, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, SingleSource<? extends T> s4,, +            SingleSource<? extends T> s5, SingleSource<? extends T> s6,, +            SingleSource<? extends T> s7, SingleSource<? extends T> s8, +            SingleSource<? extends T> s1, SingleSource<? extends T> s2,, +            SingleSource<? extends T> s3, SingleSource<? extends T> s4,, +            SingleSource<? extends T> s5, SingleSource<? extends T> s6,, +            SingleSource<? extends T> s7, SingleSource<? extends T> s8,, +            SingleSource<? extends T> s9, +    public static <T> Single<Boolean> equals(final SingleSource<? extends T> first, final SingleSource<? extends T> second) { // NOPMD, +                                         Function<? super U, ? extends SingleSource<? extends T>> singleFunction, Consumer<? super U> disposer) {, +            final Function<? super U, ? extends SingleSource<? extends T>> singleFunction,, +    public static <T, R> Single<R> zip(final Iterable<? extends SingleSource<? extends T>> sources, Function<? super Object[], ? extends R> zipper) {, +                final Iterator<? extends SingleSource<? extends T>> sit = sources.iterator();, +            SingleSource<? extends T1> s1, SingleSource<? extends T2> s2,, +            SingleSource<? extends T1> s1, SingleSource<? extends T2> s2,, +            SingleSource<? extends T3> s3,, +            SingleSource<? extends T1> s1, SingleSource<? extends T2> s2,, +            SingleSource<? extends T3> s3, SingleSource<? extends T4> s4,, +            SingleSource<? extends T1> s1, SingleSource<? extends T2> s2,, +            SingleSource<? extends T3> s3, SingleSource<? extends T4> s4,, +            SingleSource<? extends T5> s5,, +            SingleSource<? extends T1> s1, SingleSource<? extends T2> s2,, +            SingleSource<? extends T3> s3, SingleSource<? extends T4> s4,, +            SingleSource<? extends T5> s5, SingleSource<? extends T6> s6,, +            SingleSource<? extends T1> s1, SingleSource<? extends T2> s2,, +            SingleSource<? extends T3> s3, SingleSource<? extends T4> s4,, +            SingleSource<? extends T5> s5, SingleSource<? extends T6> s6,, +            SingleSource<? extends T7> s7,, +            SingleSource<? extends T1> s1, SingleSource<? extends T2> s2,, +            SingleSource<? extends T3> s3, SingleSource<? extends T4> s4,]