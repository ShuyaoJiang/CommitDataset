[+++ b/CHANGES.md, +### Version 0.20.0 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.20.0%22)) ###, +, +RxJava 0.20.0 is a major release that adds "reactive pull" support for backpressure along with several other enhancements leading into the 1.0 release., +, +#### Reactive Pull for Backpressure, +, +Solutions for backpressure was the major focus of this release. A "reactive pull" implementation was implemented. Documentation on this and other options for backpressure are found in the wiki: https://github.com/ReactiveX/RxJava/wiki/Backpressure, +, +The reactive pull solution evolved out of [several prototypes and interaction with many people over the months](https://github.com/ReactiveX/RxJava/issues/1000). , +, +##### Signature Changes, +, +A new type `Producer` has been added:, +, +```java, +public interface Producer {, +    public void request(long n);, +}, +```, +, +The `Subscriber` type now has these methods added:, +, +```java, +public abstract class Subscriber<T> implements Observer<T>, Subscription {, +    public void onStart();, +    protected final void request(long n);, +    public final void setProducer(Producer producer);, +}, +```, +, +, +##### Examples, +, +, +This trivial example shows requesting values one at a time:, +, +```java, +Observable.from(1, 2, 3, 4).subscribe(new Subscriber<Integer>() {, +, +    @Override, +    public void onStart() {, +        // on start this tells it to request 1, +        // otherwise it defaults to request(Long.MAX_VALUE), +        request(1);, +    }, +, +    @Override, +    public void onCompleted() {, +    }, +, +    @Override, +    public void onError(Throwable e) {, +    }, +, +    @Override, +    public void onNext(Integer t) {, +        System.out.println(t);, +        // as each onNext is consumed, request another , +        // otherwise the Producer will not send more, +        request(1);, +    }, +, +});, +```, +, +The [OnSubscribeFromIterable](https://github.com/ReactiveX/RxJava/blob/1.x/rxjava/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java) operator shows how an `Iterable` is consumed with backpressure., +, +Some hi-lights (modified for simplicity rather than performance and completeness):, +, +```java, +public final class OnSubscribeFromIterable<T> implements OnSubscribe<T> {, +, +    @Override, +    public void call(final Subscriber<? super T> o) {, +        final Iterator<? extends T> it = is.iterator();, +		// instead of emitting directly to the Subscriber, it emits a Producer, +        o.setProducer(new IterableProducer<T>(o, it));, +    }, +	, +	private static final class IterableProducer<T> implements Producer {, +	, +        public void request(long n) {, +            int _c = requested.getAndAdd(n);, +            if (_c == 0) {, +                while (it.hasNext()) {, +                    if (o.isUnsubscribed()) {, +                        return;, +                    }, +                    T t = it.next();, +                    o.onNext(t);, +                    if (requested.decrementAndGet() == 0) {, +                        // we're done emitting the number requested so return, +                        return;, +                    }, +                }, +, +                o.onCompleted();, +            }, +]