[+++ b/CHANGES.md, +### Version 0.14.8 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.8%22)) ###, +, +* [Pull 460](https://github.com/Netflix/RxJava/pull/460) Operator: Amb, +* [Pull 466](https://github.com/Netflix/RxJava/pull/466) Refactor Unit Tests, +, +++ b/CHANGES.md, +### Version 0.14.8 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.8%22)) ###, +, +* [Pull 460](https://github.com/Netflix/RxJava/pull/460) Operator: Amb, +* [Pull 466](https://github.com/Netflix/RxJava/pull/466) Refactor Unit Tests, +, +++ b/gradle.properties, +version=0.14.9-SNAPSHOT, +++ b/CHANGES.md, +### Version 0.14.8 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.8%22)) ###, +, +* [Pull 460](https://github.com/Netflix/RxJava/pull/460) Operator: Amb, +* [Pull 466](https://github.com/Netflix/RxJava/pull/466) Refactor Unit Tests, +, +++ b/gradle.properties, +version=0.14.9-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns either the observable sequence or an TimeoutException if timeout elapses., +     *            The timeout duration, +     *            The time unit of the timeout, +     *            The scheduler to run the timeout timers on., +     * Returns either the observable sequence or an TimeoutException if timeout elapses., +     *            The timeout duration, +     *            The time unit of the timeout, +     * @return The source sequence with a TimeoutException in case of a timeout., +    public Observable<T> timeout(long timeout, TimeUnit timeUnit) {, +        return create(OperationTimeout.timeout(this, timeout, timeUnit, Schedulers.threadPoolForComputation()));, +++ b/CHANGES.md, +### Version 0.14.8 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.8%22)) ###, +, +* [Pull 460](https://github.com/Netflix/RxJava/pull/460) Operator: Amb, +* [Pull 466](https://github.com/Netflix/RxJava/pull/466) Refactor Unit Tests, +, +++ b/gradle.properties, +version=0.14.9-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns either the observable sequence or an TimeoutException if timeout elapses., +     *            The timeout duration, +     *            The time unit of the timeout, +     *            The scheduler to run the timeout timers on., +     * Returns either the observable sequence or an TimeoutException if timeout elapses., +     *            The timeout duration, +     *            The time unit of the timeout, +     * @return The source sequence with a TimeoutException in case of a timeout., +    public Observable<T> timeout(long timeout, TimeUnit timeUnit) {, +        return create(OperationTimeout.timeout(this, timeout, timeUnit, Schedulers.threadPoolForComputation()));, +++ b/rxjava-core/src/main/java/rx/operators/OperationTimeout.java, +    public static <T> Observable.OnSubscribeFunc<T> timeout(Observable<? extends T> source, long timeout, TimeUnit timeUnit, Scheduler scheduler) {, +        return new Timeout<T>(source, timeout, timeUnit, scheduler);, +        private Timeout(Observable<? extends T> source, long timeout, TimeUnit timeUnit, Scheduler scheduler) {, +++ b/CHANGES.md, +### Version 0.14.8 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.8%22)) ###, +, +* [Pull 460](https://github.com/Netflix/RxJava/pull/460) Operator: Amb, +* [Pull 466](https://github.com/Netflix/RxJava/pull/466) Refactor Unit Tests, +, +++ b/gradle.properties, +version=0.14.9-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns either the observable sequence or an TimeoutException if timeout elapses., +     *            The timeout duration, +     *            The time unit of the timeout, +     *            The scheduler to run the timeout timers on., +     * Returns either the observable sequence or an TimeoutException if timeout elapses., +     *            The timeout duration, +     *            The time unit of the timeout, +     * @return The source sequence with a TimeoutException in case of a timeout., +    public Observable<T> timeout(long timeout, TimeUnit timeUnit) {, +        return create(OperationTimeout.timeout(this, timeout, timeUnit, Schedulers.threadPoolForComputation()));, +++ b/rxjava-core/src/main/java/rx/operators/OperationTimeout.java, +    public static <T> Observable.OnSubscribeFunc<T> timeout(Observable<? extends T> source, long timeout, TimeUnit timeUnit, Scheduler scheduler) {, +        return new Timeout<T>(source, timeout, timeUnit, scheduler);, +        private Timeout(Observable<? extends T> source, long timeout, TimeUnit timeUnit, Scheduler scheduler) {, +++ b/rxjava-core/src/test/java/rx/TimeoutTests.java, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;]