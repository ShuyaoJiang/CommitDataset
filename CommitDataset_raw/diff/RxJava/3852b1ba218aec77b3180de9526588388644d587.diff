[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +    static final class ReplaySubscriber<T>, +    extends AtomicReference<Subscription>, +    implements Subscriber<T>, Disposable {, +        private static final long serialVersionUID = 7224554242710036740L;, +            SubscriptionHelper.cancel(this);, +            if (SubscriptionHelper.setOnce(this, p)) {, +                Subscription p = get();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +    static final class ReplaySubscriber<T>, +    extends AtomicReference<Subscription>, +    implements Subscriber<T>, Disposable {, +        private static final long serialVersionUID = 7224554242710036740L;, +            SubscriptionHelper.cancel(this);, +            if (SubscriptionHelper.setOnce(this, p)) {, +                Subscription p = get();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java, +    static final class ReplayObserver<T>, +    extends AtomicReference<Disposable>, +    implements Observer<T>, Disposable {, +        private static final long serialVersionUID = -533785617179540163L;, +            DisposableHelper.dispose(this);, +            if (DisposableHelper.setOnce(this, p)) {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +    static final class ReplaySubscriber<T>, +    extends AtomicReference<Subscription>, +    implements Subscriber<T>, Disposable {, +        private static final long serialVersionUID = 7224554242710036740L;, +            SubscriptionHelper.cancel(this);, +            if (SubscriptionHelper.setOnce(this, p)) {, +                Subscription p = get();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java, +    static final class ReplayObserver<T>, +    extends AtomicReference<Disposable>, +    implements Observer<T>, Disposable {, +        private static final long serialVersionUID = -533785617179540163L;, +            DisposableHelper.dispose(this);, +            if (DisposableHelper.setOnce(this, p)) {, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowablePublishTest.java, +, +    @Test, +    public void delayedUpstreamOnSubscribe() {, +        final Subscriber<?>[] sub = { null };, +, +        new Flowable<Integer>() {, +            @Override, +            protected void subscribeActual(Subscriber<? super Integer> s) {, +                sub[0] = s;, +            }, +        }, +        .publish(), +        .connect(), +        .dispose();, +, +        BooleanSubscription bs = new BooleanSubscription();, +, +        sub[0].onSubscribe(bs);, +, +        assertTrue(bs.isCancelled());, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +    static final class ReplaySubscriber<T>, +    extends AtomicReference<Subscription>, +    implements Subscriber<T>, Disposable {, +        private static final long serialVersionUID = 7224554242710036740L;, +            SubscriptionHelper.cancel(this);, +            if (SubscriptionHelper.setOnce(this, p)) {, +                Subscription p = get();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java, +    static final class ReplayObserver<T>, +    extends AtomicReference<Disposable>, +    implements Observer<T>, Disposable {, +        private static final long serialVersionUID = -533785617179540163L;, +            DisposableHelper.dispose(this);, +            if (DisposableHelper.setOnce(this, p)) {, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowablePublishTest.java, +, +    @Test, +    public void delayedUpstreamOnSubscribe() {, +        final Subscriber<?>[] sub = { null };, +, +        new Flowable<Integer>() {, +            @Override, +            protected void subscribeActual(Subscriber<? super Integer> s) {, +                sub[0] = s;, +            }, +        }, +        .publish(), +        .connect(), +        .dispose();, +, +        BooleanSubscription bs = new BooleanSubscription();, +, +        sub[0].onSubscribe(bs);, +, +        assertTrue(bs.isCancelled());, +    }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableReplayTest.java, +    @Test, +    public void delayedUpstreamOnSubscribe() {]