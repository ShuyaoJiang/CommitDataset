[+++ b/rxjava-core/src/main/java/rx/Observable.java, +        return lift(new OperationSkipLast<T>(count));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return lift(new OperationSkipLast<T>(count));, +++ b/rxjava-core/src/main/java/rx/operators/OperationSkipLast.java, +import rx.Observable.Operator;, +public class OperationSkipLast<T> implements Operator<T, T> {, +    public OperationSkipLast(int count) {, +            throw new IndexOutOfBoundsException("count could not be negative");, +        this.count = count;, +    }, +    @Override, +    public Subscriber<? super T> call(final Subscriber<? super T> subscriber) {, +        return new Subscriber<T>(subscriber) {, +                subscriber.onCompleted();, +                subscriber.onError(e);, +                    subscriber.onNext(value);, +                    subscriber.onNext(deque.removeFirst());, +        };, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return lift(new OperationSkipLast<T>(count));, +++ b/rxjava-core/src/main/java/rx/operators/OperationSkipLast.java, +import rx.Observable.Operator;, +public class OperationSkipLast<T> implements Operator<T, T> {, +    public OperationSkipLast(int count) {, +            throw new IndexOutOfBoundsException("count could not be negative");, +        this.count = count;, +    }, +    @Override, +    public Subscriber<? super T> call(final Subscriber<? super T> subscriber) {, +        return new Subscriber<T>(subscriber) {, +                subscriber.onCompleted();, +                subscriber.onError(e);, +                    subscriber.onNext(value);, +                    subscriber.onNext(deque.removeFirst());, +        };, +++ b/rxjava-core/src/test/java/rx/operators/OperationSkipLastTest.java, +import java.util.Arrays;, +        Observable<String> observable = Observable.<String>empty().skipLast(2);, +        Observable<String> observable = Observable.from(Arrays.asList("one", "two", "three")).skipLast(2);, +        Observable<String> observable = Observable.from(Arrays.asList("one", "two")).skipLast(2);, +        Observable<String> observable = w.skipLast(0);, +        Observable<String> observable = Observable.from(Arrays.asList("one", null, "two")).skipLast(1);, +    @Test(expected = IndexOutOfBoundsException.class), +        Observable.from("one").skipLast(-1);]