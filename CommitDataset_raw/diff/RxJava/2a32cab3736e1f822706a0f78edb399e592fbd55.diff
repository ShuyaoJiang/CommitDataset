[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.OnErrorNotImplementedException;, +     * Observable with Function to execute when subscribed to., +     * NOTE: Use {@link #create(Func1)} to create an Observable instead of this method unless you specifically have a need for inheritance., +    protected Observable() {, +        this(null);, +        //TODO should this be made private to prevent it? It really serves no good purpose and only confuses things. Unit tests are incorrectly using it today, +    }, +, +     * @throws IllegalArgumentException, +     *             if null argument provided, +        if (observer == null) {, +            throw new IllegalArgumentException("observer can not be null");, +        }, +        } catch (OnErrorNotImplementedException e) {, +            // special handling when onError is not implemented ... we just rethrow, +            throw e;, +            } catch (OnErrorNotImplementedException e2) {, +                // special handling when onError is not implemented ... we just rethrow, +                throw e2;, +     * @throws IllegalArgumentException, +     *             if null argument provided, +        if (callbacks == null) {, +            throw new RuntimeException("callbacks map can not be null");, +        }, +            throw new RuntimeException("'onNext' key must contain an implementation");, +        // lookup and memoize onNext, +                } else {, +                    throw new OnErrorNotImplementedException(e);, +            throw new IllegalArgumentException("onNext can not be null");, +, +        // lookup and memoize onNext, +                throw new OnErrorNotImplementedException(e);, +        if (onNext == null) {, +            throw new IllegalArgumentException("onNext can not be null");, +        }, +                throw new OnErrorNotImplementedException(e);, +            throw new IllegalArgumentException("onNext can not be null");, +        if (onError == null) {, +            throw new IllegalArgumentException("onError can not be null");, +        }, +, +        // lookup and memoize onNext, +        if (onNext == null) {, +            throw new IllegalArgumentException("onNext can not be null");, +        }, +        if (onError == null) {, +            throw new IllegalArgumentException("onError can not be null");, +        }, +            throw new IllegalArgumentException("onNext can not be null");, +        if (onError == null) {, +            throw new IllegalArgumentException("onError can not be null");, +        }, +        if (onComplete == null) {, +            throw new IllegalArgumentException("onComplete can not be null");, +        }, +, +        // lookup and memoize onNext        , +        if (onNext == null) {, +            throw new IllegalArgumentException("onNext can not be null");, +        }, +        if (onError == null) {, +            throw new IllegalArgumentException("onError can not be null");, +        }, +        if (onComplete == null) {, +            throw new IllegalArgumentException("onComplete can not be null");, +        }, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/where.png">, +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/from.png">, +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/from.png">, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/flatMap.png">, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/flatMap.png">, +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/replay.png">, +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/reduce.png">, +     * Synonymous for reduce(), +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/aggregate.png">, +     *, +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/aggregate.png">, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/reduceSeed.png">, +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/reduceSeed.png">, +     * Synonymous for reduce(), +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/aggregateSeed.png">, +     *, +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/aggregateSeed.png">, +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/scan.png">, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/scanSeed.png">, +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/scanSeed.png">, +     * Determines whether all elements of an observable sequence satisfy a condition., +     * Determines whether all elements of an observable sequence satisfy a condition., +     * <p>, +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/takeWhileWithIndex.png">]