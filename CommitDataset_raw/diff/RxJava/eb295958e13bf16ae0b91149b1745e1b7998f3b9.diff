[+++ b/rxjava-core/src/main/java/rx/Observable.java, +      * Create an Observable that skips values before the given time ellapses., +      * @param time the length of the time window, +      * @param unit the time unit, +      * @return an Observable that skips values before the given time ellapses, +      */, +     public Observable<T> skip(long time, TimeUnit unit) {, +         return skip(time, unit, Schedulers.threadPoolForComputation());, +     }, + , +     /**, +      * Create an Observable that skips values before the given time, +      * elapses while waiting on the given scheduler., +      * @param time the length of the time window, +      * @param unit the time unit, +      * @param scheduler the scheduler where the timed wait happens, +      * @return an Observable that skips values before the given time, +      * elapses while waiting on the given scheduler, +      */, +     public Observable<T> skip(long time, TimeUnit unit, Scheduler scheduler) {, +         return create(new OperationSkip.SkipTimed<T>(this, time, unit, scheduler));, +     }, + , +    /**, +      * Create an Observable that takes the emitted values of the source, +      * Observable before the time runs out., +      * @param time the length of the time window, +      * @param unit the time unit, +      * @return an Observable that takes the emitted values of the source, +      *         Observable before the time runs out., +      */, +     public Observable<T> take(long time, TimeUnit unit) {, +         return take(time, unit, Schedulers.threadPoolForComputation());, +     }, +     , +     /**, +      * Create an Observable that takes the emitted values of the source, +      * Observable before the time runs out, waiting on the given scheduler., +      * @param time the length of the time window, +      * @param unit the time unit, +      * @param scheduler the scheduler used for time source, +      * @return an Observable that takes the emitted values of the source, +      *         Observable before the time runs out, waiting on the given scheduler., +      */, +     public Observable<T> take(long time, TimeUnit unit, Scheduler scheduler) {, +         return create(new OperationTake.TakeTimed<T>(this, time, unit, scheduler));, +     }, + , +    /**, +     * Create an observable which skips values emitted in a time window, +     * before the source completes., +     * @param time the length of the time window, +     * @param unit the time unit, +     * @return an observable which skips values emitted in a time window, +     * before the source completes, +     */, +    public Observable<T> skipLast(long time, TimeUnit unit) {, +        return skipLast(time, unit, Schedulers.threadPoolForComputation());, +    }, +    , +    /**, +     * Create an observable which skips values emitted in a time window, +     * before the source completes by using the given scheduler as time source., +     * @param time the length of the time window, +     * @param unit the time unit, +     * @param scheduler the scheduler used for time source, +     * @return an observable which skips values emitted in a time window, +     * before the source completes by using the given scheduler as time source, +     */, +    public Observable<T> skipLast(long time, TimeUnit unit, Scheduler scheduler) {, +        return create(new OperationSkipLast.SkipLastTimed<T>(this, time, unit, scheduler));, +    }, + , +    /**, +     * Invokes an action for each item emitted by an Observable., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/doOnEach.png">, +     *, +     * @param onNext the action to invoke for each item emitted by the source, +     *               Observable, +     * @return the source Observable with the side-effecting behavior applied, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#dooneach">RxJava Wiki: doOnEach()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229804.aspx">MSDN: Observable.Do</a>, +     */, +    public Observable<T> doOnEach(final Action1<? super T> onNext) {, +        Observer<T> observer = new Observer<T>() {, +            @Override, +            public void onCompleted() {}, +, +            @Override, +            public void onError(Throwable e) {}, +, +            @Override, +            public void onNext(T args) {, +                onNext.call(args);, +            }, +, +        };, +, +]