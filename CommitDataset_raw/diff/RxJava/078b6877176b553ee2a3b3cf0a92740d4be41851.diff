[+++ b/rxjava-contrib/rxjava-apache-http/src/main/java/rx/apache/http/ObservableHttp.java, +     * <pre> {@code      CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault(); } </pre> </p>, +++ b/rxjava-contrib/rxjava-apache-http/src/main/java/rx/apache/http/ObservableHttp.java, +     * <pre> {@code      CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault(); } </pre> </p>, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229003.aspx'>MSDN: Observable.Timestamp</a>, +     * Return an Observable that skips elements from the source Observable until the secondary, +     * observable emits an element., +     * @return an Observable that skips elements from the source Observable until the secondary, +     *         observable emits an element., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229358.aspx'>MSDN: Observable.SkipUntil</a>, +     * Groups the elements of an observable sequence according to a specified key selector function until the duration observable expires for the key., +     * @param keySelector A function to extract the key for each element., +     * @param durationSelector A function to signal the expiration of a group., +     * @return A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh211932.aspx'>MSDN: Observable.GroupByUntil</a>, +     * Groups the elements of an observable sequence according to a specified key and value selector function  until the duration observable expires for the key., +     * @param keySelector A function to extract the key for each element., +     * @param valueSelector A function to map each source element to an element in an onbservable group., +     * @param durationSelector A function to signal the expiration of a group., +     * @return A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229433.aspx'>MSDN: Observable.GroupByUntil</a>, +++ b/rxjava-contrib/rxjava-apache-http/src/main/java/rx/apache/http/ObservableHttp.java, +     * <pre> {@code      CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault(); } </pre> </p>, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229003.aspx'>MSDN: Observable.Timestamp</a>, +     * Return an Observable that skips elements from the source Observable until the secondary, +     * observable emits an element., +     * @return an Observable that skips elements from the source Observable until the secondary, +     *         observable emits an element., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229358.aspx'>MSDN: Observable.SkipUntil</a>, +     * Groups the elements of an observable sequence according to a specified key selector function until the duration observable expires for the key., +     * @param keySelector A function to extract the key for each element., +     * @param durationSelector A function to signal the expiration of a group., +     * @return A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh211932.aspx'>MSDN: Observable.GroupByUntil</a>, +     * Groups the elements of an observable sequence according to a specified key and value selector function  until the duration observable expires for the key., +     * @param keySelector A function to extract the key for each element., +     * @param valueSelector A function to map each source element to an element in an onbservable group., +     * @param durationSelector A function to signal the expiration of a group., +     * @return A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229433.aspx'>MSDN: Observable.GroupByUntil</a>, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +import static java.util.Arrays.asList;, +import static java.util.Collections.unmodifiableSet;, +, +import java.util.HashSet;, +import java.util.Set;, +import java.util.concurrent.atomic.AtomicReference;, + * Subscription that represents a group of Subscriptions that are unsubscribed, + * together., + * @see <a, + *      href="http://msdn.microsoft.com/en-us/library/system.reactive.disposables.compositedisposable(v=vs.103).aspx">Rx.Net, + *      equivalent CompositeDisposable</a>, +    private static final Set<Subscription> MUTATE_STATE = unmodifiableSet(new HashSet<Subscription>());, +    private static final Set<Subscription> UNSUBSCRIBED_STATE = unmodifiableSet(new HashSet<Subscription>());, +    private final AtomicReference<Set<Subscription>> reference = new AtomicReference<Set<Subscription>>();, +    public CompositeSubscription(final Subscription... subscriptions) {, +        reference.set(new HashSet<Subscription>(asList(subscriptions)));, +        return reference.get() == UNSUBSCRIBED_STATE;, +    public void add(final Subscription s) {, +        do {, +            final Set<Subscription> existing = reference.get();, +            if (existing == UNSUBSCRIBED_STATE) {, +                break;, +, +            if (reference.compareAndSet(existing, MUTATE_STATE)) {, +                existing.add(s);, +                reference.set(existing);, +                break;, +            }, +        } while (true);, +    }, +, +    public void remove(final Subscription s) {, +        do {, +            final Set<Subscription> subscriptions = reference.get();, +            if (subscriptions == UNSUBSCRIBED_STATE) {, +                s.unsubscribe();, +                break;, +            }, +, +            if (reference.compareAndSet(subscriptions, MUTATE_STATE)) {, +                // also unsubscribe from it:, +                // http://msdn.microsoft.com/en-us/library/system.reactive.disposables.compositedisposable.remove(v=vs.103).aspx, +                subscriptions.remove(s);, +                reference.set(subscriptions);, +                s.unsubscribe();, +                break;, +            }, +        } while (true);, +    }, +, +    public void clear() {, +        do {, +            final Set<Subscription> subscriptions = reference.get();, +            if (subscriptions == UNSUBSCRIBED_STATE) {, +                break;, +            }, +]