[+++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMapEager.java, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMapEager.java, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEagerTest.java, +, +    @Test, +    public void oneDelayed() {, +        Flowable.just(1, 2, 3, 4, 5), +        .concatMapEager(new Function<Integer, Flowable<Integer>>() {, +            @Override, +            public Flowable<Integer> apply(Integer i) throws Exception {, +                return i == 3 ? Flowable.just(i) : Flowable, +                        .just(i), +                        .delay(1, TimeUnit.MILLISECONDS, Schedulers.io());, +            }, +        }), +        .observeOn(Schedulers.io()), +        .test(), +        .awaitDone(5, TimeUnit.SECONDS), +        .assertResult(1, 2, 3, 4, 5), +        ;, +    }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMapEager.java, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEagerTest.java, +, +    @Test, +    public void oneDelayed() {, +        Flowable.just(1, 2, 3, 4, 5), +        .concatMapEager(new Function<Integer, Flowable<Integer>>() {, +            @Override, +            public Flowable<Integer> apply(Integer i) throws Exception {, +                return i == 3 ? Flowable.just(i) : Flowable, +                        .just(i), +                        .delay(1, TimeUnit.MILLISECONDS, Schedulers.io());, +            }, +        }), +        .observeOn(Schedulers.io()), +        .test(), +        .awaitDone(5, TimeUnit.SECONDS), +        .assertResult(1, 2, 3, 4, 5), +        ;, +    }, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableConcatMapEagerTest.java, +, +    @Test, +    public void oneDelayed() {, +        Observable.just(1, 2, 3, 4, 5), +        .concatMapEager(new Function<Integer, ObservableSource<Integer>>() {, +            @Override, +            public ObservableSource<Integer> apply(Integer i) throws Exception {, +                return i == 3 ? Observable.just(i) : Observable, +                        .just(i), +                        .delay(1, TimeUnit.MILLISECONDS, Schedulers.io());, +            }, +        }), +        .observeOn(Schedulers.io()), +        .test(), +        .awaitDone(5, TimeUnit.SECONDS), +        .assertResult(1, 2, 3, 4, 5), +        ;, +    }]