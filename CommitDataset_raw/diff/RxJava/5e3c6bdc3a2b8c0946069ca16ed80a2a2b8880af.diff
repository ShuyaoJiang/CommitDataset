[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublishMulticast.java, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublishMulticast.java, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java, +            s.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublishMulticast.java, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java, +            s.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTimeoutTimed.java, +            s.dispose();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublishMulticast.java, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java, +            s.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTimeoutTimed.java, +            s.dispose();, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowablePublishFunctionTest.java, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublishMulticast.java, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java, +            s.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTimeoutTimed.java, +            s.dispose();, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowablePublishFunctionTest.java, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTests.java, +, +    @Test, +    public void timedTake() {, +        PublishProcessor<Integer> ps = PublishProcessor.create();, +, +        TestSubscriber<Integer> to = ps.timeout(1, TimeUnit.DAYS), +        .take(1), +        .test();, +, +        assertTrue(ps.hasSubscribers());, +, +        ps.onNext(1);, +, +        assertFalse(ps.hasSubscribers());, +, +        to.assertResult(1);, +    }, +, +    @Test, +    public void timedFallbackTake() {, +        PublishProcessor<Integer> ps = PublishProcessor.create();, +, +        TestSubscriber<Integer> to = ps.timeout(1, TimeUnit.DAYS, Flowable.just(2)), +        .take(1), +        .test();, +, +        assertTrue(ps.hasSubscribers());, +, +        ps.onNext(1);, +, +        assertFalse(ps.hasSubscribers());, +, +        to.assertResult(1);, +    }, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublishMulticast.java, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java, +            s.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTimeoutTimed.java, +            s.dispose();, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowablePublishFunctionTest.java, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTests.java, +, +    @Test, +    public void timedTake() {, +        PublishProcessor<Integer> ps = PublishProcessor.create();, +, +        TestSubscriber<Integer> to = ps.timeout(1, TimeUnit.DAYS), +        .take(1), +        .test();, +, +        assertTrue(ps.hasSubscribers());, +, +        ps.onNext(1);, +, +        assertFalse(ps.hasSubscribers());, +, +        to.assertResult(1);, +    }, +, +    @Test, +    public void timedFallbackTake() {, +        PublishProcessor<Integer> ps = PublishProcessor.create();, +, +        TestSubscriber<Integer> to = ps.timeout(1, TimeUnit.DAYS, Flowable.just(2)), +        .take(1), +        .test();, +, +        assertTrue(ps.hasSubscribers());, +, +        ps.onNext(1);, +, +        assertFalse(ps.hasSubscribers());, +, +        to.assertResult(1);, +    }, +, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableTimeoutWithSelectorTest.java]