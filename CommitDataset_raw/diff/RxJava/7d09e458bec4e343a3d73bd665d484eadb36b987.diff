[+++ b/src/main/java/io/reactivex/Observable.java, +    }, +    , +    public final Single<T> toSingle() {, +        return Single.fromPublisher(this);, +    }, +    , +    public final NbpObservable<T> toNbpObservable() {, +        return NbpObservable.fromPublisher(this);, +++ b/src/main/java/io/reactivex/Observable.java, +    }, +    , +    public final Single<T> toSingle() {, +        return Single.fromPublisher(this);, +    }, +    , +    public final NbpObservable<T> toNbpObservable() {, +        return NbpObservable.fromPublisher(this);, +++ b/src/main/java/io/reactivex/internal/disposables/SetCompositeResource.java, +    public int size() {, +        synchronized (this) {, +            OpenHashSet<T> a = set;, +            if (a == null) {, +                return 0;, +            }, +            int[] c = new int[1];, +            a.forEach(v -> c[0]++);, +            return c[0];, +        }, +    }, +    , +++ b/src/main/java/io/reactivex/Observable.java, +    }, +    , +    public final Single<T> toSingle() {, +        return Single.fromPublisher(this);, +    }, +    , +    public final NbpObservable<T> toNbpObservable() {, +        return NbpObservable.fromPublisher(this);, +++ b/src/main/java/io/reactivex/internal/disposables/SetCompositeResource.java, +    public int size() {, +        synchronized (this) {, +            OpenHashSet<T> a = set;, +            if (a == null) {, +                return 0;, +            }, +            int[] c = new int[1];, +            a.forEach(v -> c[0]++);, +            return c[0];, +        }, +    }, +    , +++ b/src/main/java/io/reactivex/internal/operators/OperatorMap.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +        , +        , +        boolean done;, +        , +            if (SubscriptionHelper.validateSubscription(this.subscription, s)) {, +            if (done) {, +                return;, +            }, +                done = true;, +            if (done) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            done = true;, +            if (done) {, +                return;, +            }, +            done = true;, +++ b/src/main/java/io/reactivex/Observable.java, +    }, +    , +    public final Single<T> toSingle() {, +        return Single.fromPublisher(this);, +    }, +    , +    public final NbpObservable<T> toNbpObservable() {, +        return NbpObservable.fromPublisher(this);, +++ b/src/main/java/io/reactivex/internal/disposables/SetCompositeResource.java, +    public int size() {, +        synchronized (this) {, +            OpenHashSet<T> a = set;, +            if (a == null) {, +                return 0;, +            }, +            int[] c = new int[1];, +            a.forEach(v -> c[0]++);, +            return c[0];, +        }, +    }, +    , +++ b/src/main/java/io/reactivex/internal/operators/OperatorMap.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +        , +        , +        boolean done;]