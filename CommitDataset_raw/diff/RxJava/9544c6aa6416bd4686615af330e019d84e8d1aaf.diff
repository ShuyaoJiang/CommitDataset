[+++ b/src/main/java/rx/internal/operators/NotificationLite.java, +     * Indicates whether or not the lite notification represents a wrapped {@code null} {@code onNext} event., +     * @param n the lite notification, +     * @return {@code true} if {@code n} represents a wrapped {@code null} {@code onNext} event, {@code false} otherwise, +     */, +    public boolean isNull(Object n) {, +        return n == ON_NEXT_NULL_SENTINEL;, +    }, +, +    /**, +     * Indicates whether or not the lite notification represents an {@code onNext} event., +     * @param n the lite notification, +     * @return {@code true} if {@code n} represents an {@code onNext} event, {@code false} otherwise, +     */, +    public boolean isNext(Object n) {, +        return n != null && !isError(n) && !isCompleted(n);, +    }, +    /**, +++ b/src/main/java/rx/internal/operators/NotificationLite.java, +     * Indicates whether or not the lite notification represents a wrapped {@code null} {@code onNext} event., +     * @param n the lite notification, +     * @return {@code true} if {@code n} represents a wrapped {@code null} {@code onNext} event, {@code false} otherwise, +     */, +    public boolean isNull(Object n) {, +        return n == ON_NEXT_NULL_SENTINEL;, +    }, +, +    /**, +     * Indicates whether or not the lite notification represents an {@code onNext} event., +     * @param n the lite notification, +     * @return {@code true} if {@code n} represents an {@code onNext} event, {@code false} otherwise, +     */, +    public boolean isNext(Object n) {, +        return n != null && !isError(n) && !isCompleted(n);, +    }, +    /**, +++ b/src/main/java/rx/schedulers/TrampolineScheduler.java, +                    TimedAction polled = queue.poll();, +                    // check for null as it could have been unsubscribed and removed, +                    if (polled != null) {, +                    }, +                        PriorityQueue<TimedAction> _q = queue;, +                        if (_q != null) {, +                            _q.remove(timedAction);, +++ b/src/main/java/rx/internal/operators/NotificationLite.java, +     * Indicates whether or not the lite notification represents a wrapped {@code null} {@code onNext} event., +     * @param n the lite notification, +     * @return {@code true} if {@code n} represents a wrapped {@code null} {@code onNext} event, {@code false} otherwise, +     */, +    public boolean isNull(Object n) {, +        return n == ON_NEXT_NULL_SENTINEL;, +    }, +, +    /**, +     * Indicates whether or not the lite notification represents an {@code onNext} event., +     * @param n the lite notification, +     * @return {@code true} if {@code n} represents an {@code onNext} event, {@code false} otherwise, +     */, +    public boolean isNext(Object n) {, +        return n != null && !isError(n) && !isCompleted(n);, +    }, +    /**, +++ b/src/main/java/rx/schedulers/TrampolineScheduler.java, +                    TimedAction polled = queue.poll();, +                    // check for null as it could have been unsubscribed and removed, +                    if (polled != null) {, +                    }, +                        PriorityQueue<TimedAction> _q = queue;, +                        if (_q != null) {, +                            _q.remove(timedAction);, +++ b/src/main/java/rx/subjects/AsyncSubject.java, +import rx.annotations.Experimental;, +    /**, +     * Check if the Subject has a value., +     * <p>Use the {@link #getValue()} method to retrieve such a value., +     * <p>Note that unless {@link #hasCompleted()} or {@link #hasThrowable()} returns true, the value, +     * retrieved by {@code getValue()} may get outdated., +     * @return true if and only if the subject has some value but not an error, +     */, +    @Experimental, +    public boolean hasValue() {, +        Object v = lastValue;, +        Object o = state.get();, +        return !nl.isError(o) && nl.isNext(v);, +    }, +    /**, +     * Check if the Subject has terminated with an exception., +     * @return true if the subject has received a throwable through {@code onError}., +     */, +    @Experimental, +    public boolean hasThrowable() {, +        Object o = state.get();, +        return nl.isError(o);, +    }, +    /**, +     * Check if the Subject has terminated normally., +     * @return true if the subject completed normally via {@code onCompleted()}, +     */, +    @Experimental, +    public boolean hasCompleted() {]