[+++ b/rxjava-core/src/main/java/rx/observers/TestSubscriber.java, + * Subscriber usable for unit testing to perform assertions, inspect received events, or wrap a mocked, +     * Get the {@link Notification}s representing each time this Subscriber was notified of sequence completion, +     * @return a list of Notifications representing calls to this Subscriber's {@link #onCompleted} method, +     * Get the {@link Throwable}s this Subscriber was notified of via {@link #onError} as a {@link List}., +     * @return a list of the Throwables that were passed to this Subscriber's {@link #onError} method, +     * Get the sequence of items observed by this Subscriber, as an ordered {@link List}., +     * @return a list of items observed by this Subscriber, in the order in which they were observed, +     * Assert that a particular sequence of items was received by this Subscriber in order., +    /**, +     * Assert that this {@code Subscriber} has received no {@code onError} notifications., +     * , +     * @throws AssertionError, +     *          if this {@code Subscriber} has received one or more {@code onError} notifications, +     */, +     * Blocks until this Subscriber receives a notification that the Observable is complete (either an, +     * {@code onCompleted} or {@code onError} notification)., +     *, +     * @throws RuntimeException, +     *          if the Subscriber is interrupted before the Observable is able to complete, +     * Blocks until this Subscriber receives a notification that the Observable is complete (either an, +     * {@code onCompleted} or {@code onError} notification), or until a timeout expires., +     *, +     *          the duration of the timeout, +     *          the units in which {@code timeout} is expressed, +     * @throws RuntimeException, +     *          if the Subscriber is interrupted before the Observable is able to complete, +     * Blocks until this Subscriber receives a notification that the Observable is complete (either an, +     * {@code onCompleted} or {@code onError} notification), or until a timeout expires; if the Subscriber, +     * is interrupted before either of these events take place, this method unsubscribes the Subscriber from the, +     * Observable)., +     *, +     *          the duration of the timeout, +     *          the units in which {@code timeout} is expressed, +     * Returns the last thread that was in use when an item or notification was received by this Subscriber., +     *, +     * @return the {@code Thread} on which this Subscriber last received an item or notification from the, +     *         Observable it is subscribed to]