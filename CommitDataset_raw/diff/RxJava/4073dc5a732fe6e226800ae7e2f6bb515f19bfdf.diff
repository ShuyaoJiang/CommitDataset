[+++ b/src/main/java/io/reactivex/Observable.java, +        validateBufferSize(bufferSize);, +++ b/src/main/java/io/reactivex/Observable.java, +        validateBufferSize(bufferSize);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureBuffer.java, +import io.reactivex.exceptions.MissingBackpressureException;, +                MissingBackpressureException ex = new MissingBackpressureException("Buffer is full");, +                return;, +++ b/src/main/java/io/reactivex/Observable.java, +        validateBufferSize(bufferSize);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureBuffer.java, +import io.reactivex.exceptions.MissingBackpressureException;, +                MissingBackpressureException ex = new MissingBackpressureException("Buffer is full");, +                return;, +++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureDrop.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +            if (SubscriptionHelper.validateRequest(n)) {, +++ b/src/main/java/io/reactivex/Observable.java, +        validateBufferSize(bufferSize);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureBuffer.java, +import io.reactivex.exceptions.MissingBackpressureException;, +                MissingBackpressureException ex = new MissingBackpressureException("Buffer is full");, +                return;, +++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureDrop.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +            if (SubscriptionHelper.validateRequest(n)) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureLatest.java, +                while (r != 0L) {, +                    if (empty) {, +                        break;, +                    }, +                    , +++ b/src/main/java/io/reactivex/Observable.java, +        validateBufferSize(bufferSize);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureBuffer.java, +import io.reactivex.exceptions.MissingBackpressureException;, +                MissingBackpressureException ex = new MissingBackpressureException("Buffer is full");, +                return;, +++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureDrop.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +            if (SubscriptionHelper.validateRequest(n)) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureLatest.java, +                while (r != 0L) {, +                    if (empty) {, +                        break;, +                    }, +                    , +++ b/src/test/java/io/reactivex/internal/operators/OperatorOnBackpressureBufferTest.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import static org.junit.Assert.*;, +, +import java.util.concurrent.*;, +, +import org.junit.Test;, +import org.reactivestreams.*;, +, +import io.reactivex.*;, +import io.reactivex.exceptions.MissingBackpressureException;, +import io.reactivex.internal.subscriptions.BooleanSubscription;, +import io.reactivex.schedulers.Schedulers;, +import io.reactivex.subscribers.TestSubscriber;, +, +public class OperatorOnBackpressureBufferTest {, +, +    @Test, +    public void testNoBackpressureSupport() {, +        TestSubscriber<Long> ts = new TestSubscriber<>((Long)null);, +        // this will be ignored, +        ts.request(100);, +        // we take 500 so it unsubscribes, +        infinite.take(500).subscribe(ts);, +        // it completely ignores the `request(100)` and we get 500, +        assertEquals(500, ts.values().size());, +        ts.assertNoErrors();, +    }, +, +    @Test(timeout = 2000), +    public void testFixBackpressureWithBuffer() throws InterruptedException {, +        final CountDownLatch l1 = new CountDownLatch(100);, +        final CountDownLatch l2 = new CountDownLatch(150);, +        TestSubscriber<Long> ts = new TestSubscriber<>(new Observer<Long>() {, +, +            @Override]