[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Returns an Observable that emits the items emitted by the source Observable or a specified default item, +   * if the source Observable is empty., +   *, +   * <img width="640" height="305" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/defaultIfEmpty.png">, +   *, +   * @param default the item to emit if the source Observable emits no items. This is a by-name parameter, so it is, +   *                only evaluated if the source Observable doesn't emit anything., +   * @return an Observable that emits either the specified default item if the source Observable emits no, +   *         items, or the items emitted by the source Observable, +   */, +  def orElse[U >: T](default: => U): Observable[U] = {, +    val jObservableOption = map(Some(_)).asJavaObservable.asInstanceOf[rx.Observable[Option[T]]], +    val o = toScalaObservable[Option[T]](jObservableOption.defaultIfEmpty(None)), +    o map {, +      case Some(element) => element, +      case None => default, +    }, +  }, +, +  /**, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Returns an Observable that emits the items emitted by the source Observable or a specified default item, +   * if the source Observable is empty., +   *, +   * <img width="640" height="305" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/defaultIfEmpty.png">, +   *, +   * @param default the item to emit if the source Observable emits no items. This is a by-name parameter, so it is, +   *                only evaluated if the source Observable doesn't emit anything., +   * @return an Observable that emits either the specified default item if the source Observable emits no, +   *         items, or the items emitted by the source Observable, +   */, +  def orElse[U >: T](default: => U): Observable[U] = {, +    val jObservableOption = map(Some(_)).asJavaObservable.asInstanceOf[rx.Observable[Option[T]]], +    val o = toScalaObservable[Option[T]](jObservableOption.defaultIfEmpty(None)), +    o map {, +      case Some(element) => element, +      case None => default, +    }, +  }, +, +  /**, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "defaultIfEmpty(T)" -> "orElse(=> U)",, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Returns an Observable that emits the items emitted by the source Observable or a specified default item, +   * if the source Observable is empty., +   *, +   * <img width="640" height="305" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/defaultIfEmpty.png">, +   *, +   * @param default the item to emit if the source Observable emits no items. This is a by-name parameter, so it is, +   *                only evaluated if the source Observable doesn't emit anything., +   * @return an Observable that emits either the specified default item if the source Observable emits no, +   *         items, or the items emitted by the source Observable, +   */, +  def orElse[U >: T](default: => U): Observable[U] = {, +    val jObservableOption = map(Some(_)).asJavaObservable.asInstanceOf[rx.Observable[Option[T]]], +    val o = toScalaObservable[Option[T]](jObservableOption.defaultIfEmpty(None)), +    o map {, +      case Some(element) => element, +      case None => default, +    }, +  }, +, +  /**, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "defaultIfEmpty(T)" -> "orElse(=> U)",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +, +  @Test, +  def testOrElse() {, +    val o = Observable.items(1, 2, 3).orElse(4), +    assertEquals(List(1, 2, 3), o.toBlocking.toList), +  }, +, +  @Test, +  def testOrElseWithEmpty() {, +    val o = Observable.empty.orElse(-1), +    assertEquals(List(-1), o.toBlocking.toList), +  }]