[+++ b/src/main/java/rx/internal/operators/OperatorObserveOn.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +import rx.Producer;, +import rx.Scheduler;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.internal.util.RxRingBuffer;, +import rx.internal.util.SynchronizedQueue;, +import rx.internal.util.unsafe.SpscArrayQueue;, +import rx.internal.util.unsafe.UnsafeAccess;, +import rx.schedulers.ImmediateScheduler;, +import rx.schedulers.TrampolineScheduler;, +                    BackpressureUtils.getAndAddRequest(REQUESTED, ObserveOnSubscriber.this, n);, +++ b/src/main/java/rx/internal/operators/OperatorObserveOn.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +import rx.Producer;, +import rx.Scheduler;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.internal.util.RxRingBuffer;, +import rx.internal.util.SynchronizedQueue;, +import rx.internal.util.unsafe.SpscArrayQueue;, +import rx.internal.util.unsafe.UnsafeAccess;, +import rx.schedulers.ImmediateScheduler;, +import rx.schedulers.TrampolineScheduler;, +                    BackpressureUtils.getAndAddRequest(REQUESTED, ObserveOnSubscriber.this, n);, +++ b/src/test/java/rx/internal/operators/OperatorObserveOnTest.java, +    @Test, +    public void testRequestOverflow() throws InterruptedException {, +, +        final CountDownLatch latch = new CountDownLatch(1);, +        final AtomicInteger count = new AtomicInteger();, +        Observable.range(1, 100).observeOn(Schedulers.computation()), +                .subscribe(new Subscriber<Integer>() {, +, +                    boolean first = true;, +                    , +                    @Override, +                    public void onStart() {, +                        request(2);, +                    }, +, +                    @Override, +                    public void onCompleted() {, +                        latch.countDown();, +                    }, +, +                    @Override, +                    public void onError(Throwable e) {, +, +                    }, +, +                    @Override, +                    public void onNext(Integer t) {, +                        count.incrementAndGet();, +                        if (first) {, +                            request(Long.MAX_VALUE - 1);, +                            request(Long.MAX_VALUE - 1);, +                            request(10);, +                            first = false;, +                        }, +                    }, +                });, +        assertTrue(latch.await(10, TimeUnit.SECONDS));, +        assertEquals(100, count.get());, +, +    }, +    ]