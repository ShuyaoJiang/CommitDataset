[+++ b/rxjava-core/src/main/java/rx/operators/OperationSample.java, +import java.util.concurrent.Executors;, +        return new Sample<T>(source, interval, unit, Schedulers.executor(Executors.newSingleThreadScheduledExecutor()));, +    /**, +     * Samples the observable sequence at each interval., +     */, +    public static <T> Func1<Observer<T>, Subscription> sample(final Observable<T> source, long interval, TimeUnit unit, Scheduler scheduler) {, +        return new Sample<T>(source, interval, unit, scheduler);, +    }, +        private final Scheduler scheduler;, +        private Sample(Observable<T> source, long interval, TimeUnit unit, Scheduler scheduler) {, +            this.scheduler = scheduler;, +            Observable<Long> clock = Observable.create(OperationInterval.interval(interval, unit, scheduler));, +            final Subscription clockSubscription = clock.subscribe(new Observer<Long>() {, +                public void onNext(@SuppressWarnings("unused") Long tick) {, +            final Subscription sourceSubscription = source.subscribe(new Observer<T>() {, +                    clockSubscription.unsubscribe();, +                    sourceSubscription.unsubscribe();]