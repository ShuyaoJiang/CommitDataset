[+++ b/README.md, +# RxJava: Functional Reactive Programming on the JVM, +++ b/README.md, +# RxJava: Functional Reactive Programming on the JVM, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.6.1673', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.6.1673', +++ b/README.md, +# RxJava: Functional Reactive Programming on the JVM, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.6.1673', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.6.1673', +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +public fun<T> Function1<Observer<in T>, Unit>.asObservable(): Observable<T> {, +    return Observable.create(OnSubscribe<T>{ t1 ->, +        this(t1!!), +++ b/README.md, +# RxJava: Functional Reactive Programming on the JVM, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.6.1673', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.6.1673', +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +public fun<T> Function1<Observer<in T>, Unit>.asObservable(): Observable<T> {, +    return Observable.create(OnSubscribe<T>{ t1 ->, +        this(t1!!), +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +import org.mockito.Mock, +import org.junit.Before, +import org.mockito.MockitoAnnotations, +, +        Observable.create(OnSubscribeFunc<String> {, +            it!!.onNext("Hello"), +            it.onCompleted(), +            Subscriptions.empty(), +    class AsyncObservable : OnSubscribeFunc<Int>{, +        override fun onSubscribe(op: Observer<in Int>?): Subscription? {, +            return Subscriptions.empty(), +    class TestOnSubscribe(val count: Int) : OnSubscribeFunc<String>{, +        override fun onSubscribe(op: Observer<in String>?): Subscription? {, +            return Subscriptions.empty()!!, +++ b/README.md, +# RxJava: Functional Reactive Programming on the JVM, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.6.1673', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.6.1673', +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +public fun<T> Function1<Observer<in T>, Unit>.asObservable(): Observable<T> {, +    return Observable.create(OnSubscribe<T>{ t1 ->, +        this(t1!!), +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +import org.mockito.Mock, +import org.junit.Before, +import org.mockito.MockitoAnnotations, +, +        Observable.create(OnSubscribeFunc<String> {, +            it!!.onNext("Hello"), +            it.onCompleted(), +            Subscriptions.empty(), +    class AsyncObservable : OnSubscribeFunc<Int>{, +        override fun onSubscribe(op: Observer<in Int>?): Subscription? {, +            return Subscriptions.empty(), +    class TestOnSubscribe(val count: Int) : OnSubscribeFunc<String>{, +        override fun onSubscribe(op: Observer<in String>?): Subscription? {, +            return Subscriptions.empty()!!, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +import org.mockito.Mock, +import org.junit.Before, +import org.mockito.MockitoAnnotations, +import rx.subscriptions.Subscriptions, +import rx.Observer, +import rx.Subscription, +        {(observer: Observer<in String>) ->, +            observer.onNext("Hello"), +            observer.onCompleted(), +            Subscriptions.empty()!!, +        }.asObservableFunc().subscribe { result ->, +        asyncObservable.asObservableFunc().toBlockingObservable()!!.forEach(received()), +        asyncObservable.asObservableFunc().toBlockingObservable()!!.forEach { throw RuntimeException("err") }, +    val funOnSubscribe: (Int, Observer<in String>) -> Subscription = { counter, observer ->, +        observer.onNext("hello_$counter"), +        observer.onCompleted(), +        Subscriptions.empty()!!, +    val asyncObservable: (Observer<in Int>) -> Subscription = { observer ->, +            observer.onNext(1), +            observer.onNext(2), +            observer.onNext(3), +            observer.onCompleted(), +        Subscriptions.empty()!!, +        val onSubscribe: (Observer<in String>) -> Subscription, +                return onSubscribe.asObservableFunc(), +++ b/README.md, +# RxJava: Functional Reactive Programming on the JVM, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.6.1673', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.6.1673', +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +public fun<T> Function1<Observer<in T>, Unit>.asObservable(): Observable<T> {, +    return Observable.create(OnSubscribe<T>{ t1 ->, +        this(t1!!), +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt]