[+++ b/rxjava-core/src/main/java/rx/observables/Observable.java, +    public static <T> Observable<T> create(Func1<Observer<T>, Subscription> func) {, +        return create(new Func1<Observer<T>, Subscription>() {, +    public static <T> Observable<T> filter(Observable<T> that, Func1<T, Boolean> predicate) {, +        return filter(that, new Func1<T, Boolean>() {, +    public static <T, R> Observable<R> map(Observable<T> sequence, Func1<T, R> func) {, +        return map(sequence, new Func1<T, R>() {, +    public static <T, R> Observable<R> mapMany(Observable<T> sequence, Func1<T, Observable<R>> func) {, +        return mapMany(sequence, new Func1<T, R>() {, +    public static <T> Observable<T> onErrorResumeNext(final Observable<T> that, final Func1<Exception, Observable<T>> resumeFunction) {, +        return onErrorResumeNext(that, new Func1<Exception, Observable<T>>() {, +    public static <T> Observable<T> onErrorReturn(final Observable<T> that, Func1<Exception, T> resumeFunction) {, +    public static <T> Observable<List<T>> toSortedList(Observable<T> sequence, Func2<T, T, Integer> sortFunction) {, +        return OperationToObservableSortedList.toSortedList(sequence, new Func2<T, T, Integer>() {, +    public static <R, T0, T1> Observable<R> zip(Observable<T0> w0, Observable<T1> w1, Func2<T0, T1, R> reduceFunction) {, +        return zip(w0, w1, new Func2<T0, T1, R>() {, +    public static <R, T0, T1, T2> Observable<R> zip(Observable<T0> w0, Observable<T1> w1, Observable<T2> w2, Func3<T0, T1, T2, R> function) {, +        return zip(w0, w1, w2, new Func3<T0, T1, T2, R>() {, +    public static <R, T0, T1, T2, T3> Observable<R> zip(Observable<T0> w0, Observable<T1> w1, Observable<T2> w2, Observable<T3> w3, Func4<T0, T1, T2, T3, R> reduceFunction) {, +        return zip(w0, w1, w2, w3, new Func4<T0, T1, T2, T3, R>() {, +        return filter(this, new Func1<T, Boolean>() {, +        return map(this, new Func1<T, R>() {, +    public <R> Observable<R> mapMany(Func1<T, Observable<R>> func) {, +        return mapMany(this, new Func1<T, Observable<R>>() {, +    public Observable<T> onErrorResumeNext(final Func1<Exception, Observable<T>> resumeFunction) {, +        return onErrorResumeNext(this, new Func1<Exception, Observable<T>>() {, +    public Observable<T> onErrorReturn(Func1<Exception, T> resumeFunction) {, +        return onErrorReturn(this, new Func1<Exception, T>() {, +    public Observable<List<T>> toSortedList(Func2<T, T, Integer> sortFunction) {, +++ b/rxjava-core/src/main/java/rx/observables/Observable.java, +    public static <T> Observable<T> create(Func1<Observer<T>, Subscription> func) {, +        return create(new Func1<Observer<T>, Subscription>() {, +    public static <T> Observable<T> filter(Observable<T> that, Func1<T, Boolean> predicate) {, +        return filter(that, new Func1<T, Boolean>() {, +    public static <T, R> Observable<R> map(Observable<T> sequence, Func1<T, R> func) {, +        return map(sequence, new Func1<T, R>() {, +    public static <T, R> Observable<R> mapMany(Observable<T> sequence, Func1<T, Observable<R>> func) {, +        return mapMany(sequence, new Func1<T, R>() {, +    public static <T> Observable<T> onErrorResumeNext(final Observable<T> that, final Func1<Exception, Observable<T>> resumeFunction) {, +        return onErrorResumeNext(that, new Func1<Exception, Observable<T>>() {, +    public static <T> Observable<T> onErrorReturn(final Observable<T> that, Func1<Exception, T> resumeFunction) {, +    public static <T> Observable<List<T>> toSortedList(Observable<T> sequence, Func2<T, T, Integer> sortFunction) {, +        return OperationToObservableSortedList.toSortedList(sequence, new Func2<T, T, Integer>() {, +    public static <R, T0, T1> Observable<R> zip(Observable<T0> w0, Observable<T1> w1, Func2<T0, T1, R> reduceFunction) {, +        return zip(w0, w1, new Func2<T0, T1, R>() {, +    public static <R, T0, T1, T2> Observable<R> zip(Observable<T0> w0, Observable<T1> w1, Observable<T2> w2, Func3<T0, T1, T2, R> function) {, +        return zip(w0, w1, w2, new Func3<T0, T1, T2, R>() {, +    public static <R, T0, T1, T2, T3> Observable<R> zip(Observable<T0> w0, Observable<T1> w1, Observable<T2> w2, Observable<T3> w3, Func4<T0, T1, T2, T3, R> reduceFunction) {, +        return zip(w0, w1, w2, w3, new Func4<T0, T1, T2, T3, R>() {, +        return filter(this, new Func1<T, Boolean>() {, +        return map(this, new Func1<T, R>() {, +    public <R> Observable<R> mapMany(Func1<T, Observable<R>> func) {, +        return mapMany(this, new Func1<T, Observable<R>>() {, +    public Observable<T> onErrorResumeNext(final Func1<Exception, Observable<T>> resumeFunction) {, +        return onErrorResumeNext(this, new Func1<Exception, Observable<T>>() {, +    public Observable<T> onErrorReturn(Func1<Exception, T> resumeFunction) {, +        return onErrorReturn(this, new Func1<Exception, T>() {, +    public Observable<List<T>> toSortedList(Func2<T, T, Integer> sortFunction) {, +++ b/rxjava-core/src/main/java/rx/observables/operations/OperationCombineLatest.java, +    public static <T0, T1, R> Observable<R> combineLatest(Observable<T0> w0, Observable<T1> w1, Func2<T0, T1, R> combineLatestFunction) {, +    public static <T0, T1, T2, R> Observable<R> combineLatest(Observable<T0> w0, Observable<T1> w1, Observable<T2> w2, Func3<T0, T1, T2, R> combineLatestFunction) {, +    public static <T0, T1, T2, T3, R> Observable<R> combineLatest(Observable<T0> w0, Observable<T1> w1, Observable<T2> w2, Observable<T3> w3, Func4<T0, T1, T2, T3, R> combineLatestFunction) {, +            Func2<String, Integer, String> combineLatestFunction = getConcatStringIntegerCombineLatestFunction();, +            Func3<String, Integer, int[], String> combineLatestFunction = getConcatStringIntegerIntArrayCombineLatestFunction();, +            Func3<String, Integer, int[], String> combineLatestFunction = getConcatStringIntegerIntArrayCombineLatestFunction();, +        private Func2<String, Integer, String> getConcatStringIntegerCombineLatestFunction() {, +            Func2<String, Integer, String> combineLatestFunction = new Func2<String, Integer, String>() {, +        private Func3<String, Integer, int[], String> getConcatStringIntegerIntArrayCombineLatestFunction() {, +            Func3<String, Integer, int[], String> combineLatestFunction = new Func3<String, Integer, int[], String>() {, +++ b/rxjava-core/src/main/java/rx/observables/Observable.java, +    public static <T> Observable<T> create(Func1<Observer<T>, Subscription> func) {, +        return create(new Func1<Observer<T>, Subscription>() {, +    public static <T> Observable<T> filter(Observable<T> that, Func1<T, Boolean> predicate) {, +        return filter(that, new Func1<T, Boolean>() {, +    public static <T, R> Observable<R> map(Observable<T> sequence, Func1<T, R> func) {, +        return map(sequence, new Func1<T, R>() {, +    public static <T, R> Observable<R> mapMany(Observable<T> sequence, Func1<T, Observable<R>> func) {, +        return mapMany(sequence, new Func1<T, R>() {, +    public static <T> Observable<T> onErrorResumeNext(final Observable<T> that, final Func1<Exception, Observable<T>> resumeFunction) {, +        return onErrorResumeNext(that, new Func1<Exception, Observable<T>>() {, +    public static <T> Observable<T> onErrorReturn(final Observable<T> that, Func1<Exception, T> resumeFunction) {, +    public static <T> Observable<List<T>> toSortedList(Observable<T> sequence, Func2<T, T, Integer> sortFunction) {, +        return OperationToObservableSortedList.toSortedList(sequence, new Func2<T, T, Integer>() {, +    public static <R, T0, T1> Observable<R> zip(Observable<T0> w0, Observable<T1> w1, Func2<T0, T1, R> reduceFunction) {, +        return zip(w0, w1, new Func2<T0, T1, R>() {, +    public static <R, T0, T1, T2> Observable<R> zip(Observable<T0> w0, Observable<T1> w1, Observable<T2> w2, Func3<T0, T1, T2, R> function) {, +        return zip(w0, w1, w2, new Func3<T0, T1, T2, R>() {, +    public static <R, T0, T1, T2, T3> Observable<R> zip(Observable<T0> w0, Observable<T1> w1, Observable<T2> w2, Observable<T3> w3, Func4<T0, T1, T2, T3, R> reduceFunction) {, +        return zip(w0, w1, w2, w3, new Func4<T0, T1, T2, T3, R>() {, +        return filter(this, new Func1<T, Boolean>() {, +        return map(this, new Func1<T, R>() {, +    public <R> Observable<R> mapMany(Func1<T, Observable<R>> func) {, +        return mapMany(this, new Func1<T, Observable<R>>() {, +    public Observable<T> onErrorResumeNext(final Func1<Exception, Observable<T>> resumeFunction) {, +        return onErrorResumeNext(this, new Func1<Exception, Observable<T>>() {, +    public Observable<T> onErrorReturn(Func1<Exception, T> resumeFunction) {, +        return onErrorReturn(this, new Func1<Exception, T>() {, +    public Observable<List<T>> toSortedList(Func2<T, T, Integer> sortFunction) {, +++ b/rxjava-core/src/main/java/rx/observables/operations/OperationCombineLatest.java, +    public static <T0, T1, R> Observable<R> combineLatest(Observable<T0> w0, Observable<T1> w1, Func2<T0, T1, R> combineLatestFunction) {]