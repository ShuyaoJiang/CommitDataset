[+++ b/gradle.properties, +version=0.16.2-SNAPSHOT, +++ b/gradle.properties, +version=0.16.2-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Perform work on the source {@code Observable<T>} in parallel by sharding it on a {@link Schedulers#computation()} {@link Scheduler}, and return the resulting {@code Observable<R>}., +++ b/gradle.properties, +version=0.16.2-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Perform work on the source {@code Observable<T>} in parallel by sharding it on a {@link Schedulers#computation()} {@link Scheduler}, and return the resulting {@code Observable<R>}., +++ b/rxjava-core/src/main/java/rx/Scheduler.java, + * Copyright 2013 Netflix, Inc., +     * Schedules an Action on a new Scheduler instance (typically another thread) for execution., +, +    public abstract Subscription schedule(Action1<Scheduler.Inner> action);, +     * Schedules an Action on a new Scheduler instance (typically another thread) for execution at some point in the future., +     * @return, +    public abstract Subscription schedule(final Action1<Scheduler.Inner> action, final long delayTime, final TimeUnit unit);, +    public Subscription schedulePeriodically(final Action1<Scheduler.Inner> action, long initialDelay, long period, TimeUnit unit) {, +        final Action1<Scheduler.Inner> recursiveAction = new Action1<Scheduler.Inner>() {, +            public void call(Inner inner) {, +                if (!inner.isUnsubscribed()) {, +                    action.call(inner);, +                    inner.schedule(this, periodInNanos - timeTakenByActionInNanos, TimeUnit.NANOSECONDS);, +        return schedule(recursiveAction, initialDelay, unit);, +    public abstract static class Inner implements Subscription {, +         * @param delayTime, +         *            Time the action is to be delayed before executing., +         * @param unit, +         *            Time unit of the delay time., +        public abstract void schedule(Action1<Scheduler.Inner> action, long delayTime, TimeUnit unit);, +         * Schedules a cancelable action to be executed in delayTime., +        public abstract void schedule(Action1<Scheduler.Inner> action);, +    }, +, +    /**, +     * @return the scheduler's notion of current absolute time in milliseconds., +     */, +    public long now() {, +        return System.currentTimeMillis();, +    }, +, +++ b/gradle.properties, +version=0.16.2-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Perform work on the source {@code Observable<T>} in parallel by sharding it on a {@link Schedulers#computation()} {@link Scheduler}, and return the resulting {@code Observable<R>}., +++ b/rxjava-core/src/main/java/rx/Scheduler.java, + * Copyright 2013 Netflix, Inc., +     * Schedules an Action on a new Scheduler instance (typically another thread) for execution., +, +    public abstract Subscription schedule(Action1<Scheduler.Inner> action);, +     * Schedules an Action on a new Scheduler instance (typically another thread) for execution at some point in the future., +     * @return, +    public abstract Subscription schedule(final Action1<Scheduler.Inner> action, final long delayTime, final TimeUnit unit);, +    public Subscription schedulePeriodically(final Action1<Scheduler.Inner> action, long initialDelay, long period, TimeUnit unit) {, +        final Action1<Scheduler.Inner> recursiveAction = new Action1<Scheduler.Inner>() {, +            public void call(Inner inner) {, +                if (!inner.isUnsubscribed()) {, +                    action.call(inner);, +                    inner.schedule(this, periodInNanos - timeTakenByActionInNanos, TimeUnit.NANOSECONDS);, +        return schedule(recursiveAction, initialDelay, unit);, +    public abstract static class Inner implements Subscription {, +         * @param delayTime, +         *            Time the action is to be delayed before executing., +         * @param unit, +         *            Time unit of the delay time., +        public abstract void schedule(Action1<Scheduler.Inner> action, long delayTime, TimeUnit unit);, +         * Schedules a cancelable action to be executed in delayTime., +        public abstract void schedule(Action1<Scheduler.Inner> action);, +    }, +, +    /**, +     * @return the scheduler's notion of current absolute time in milliseconds., +     */, +    public long now() {, +        return System.currentTimeMillis();, +    }, +, +++ /dev/null, +++ b/gradle.properties, +version=0.16.2-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Perform work on the source {@code Observable<T>} in parallel by sharding it on a {@link Schedulers#computation()} {@link Scheduler}, and return the resulting {@code Observable<R>}., +++ b/rxjava-core/src/main/java/rx/Scheduler.java, + * Copyright 2013 Netflix, Inc., +     * Schedules an Action on a new Scheduler instance (typically another thread) for execution., +, +    public abstract Subscription schedule(Action1<Scheduler.Inner> action);, +     * Schedules an Action on a new Scheduler instance (typically another thread) for execution at some point in the future., +     * @return, +    public abstract Subscription schedule(final Action1<Scheduler.Inner> action, final long delayTime, final TimeUnit unit);, +    public Subscription schedulePeriodically(final Action1<Scheduler.Inner> action, long initialDelay, long period, TimeUnit unit) {, +        final Action1<Scheduler.Inner> recursiveAction = new Action1<Scheduler.Inner>() {, +            public void call(Inner inner) {, +                if (!inner.isUnsubscribed()) {, +                    action.call(inner);, +                    inner.schedule(this, periodInNanos - timeTakenByActionInNanos, TimeUnit.NANOSECONDS);, +        return schedule(recursiveAction, initialDelay, unit);, +    public abstract static class Inner implements Subscription {, +         * @param delayTime]