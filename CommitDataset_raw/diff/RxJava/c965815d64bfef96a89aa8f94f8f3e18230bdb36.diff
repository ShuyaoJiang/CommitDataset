[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def bufferExample() {, +    val o = Observable.from(1 to 18).zip(Observable.interval(100 millis)).map(_._1), +    val boundary = Observable.interval(500 millis), +    o.buffer(boundary).toBlockingObservable.foreach((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  }, +, +  @Test def delayExample3(): Unit = {, +    val o = List(100, 500, 200).toObservable.delay(, +      (i: Int) => Observable.items(i).delay(i millis), +    ), +    o.toBlockingObservable.foreach(println(_)), +  }, +, +  @Test def delayExample4(): Unit = {, +    val o = List(100, 500, 200).toObservable.delay(, +      () => Observable.interval(500 millis).take(1),, +      (i: Int) => Observable.items(i).delay(i millis), +    ), +    o.toBlockingObservable.foreach(println(_)), +  }, +, +  @Test def sequenceEqualExampe(): Unit = {, +    val o1 = List(1, 2, 3).toObservable, +    val o2 = List(1, 2, 3).toObservable, +    val o3 = List(1, 2).toObservable, +    val o4 = List(1.0, 2.0, 3.0).toObservable, +    assertTrue(o1.sequenceEqual(o2).toBlockingObservable.single), +    assertFalse(o1.sequenceEqual(o3).toBlockingObservable.single), +    assertTrue(o1.sequenceEqual(o4).toBlockingObservable.single), +  }, +, +  @Test def takeExample(): Unit = {, +    val o = (1 to 20).toObservable, +      .zip(Observable.interval(300 millis)), +      .map(_._1), +      .take(2 seconds), +    println(o.toBlockingObservable.toList), +  }, +, +  @Test def takeRightExample(): Unit = {, +    val o = (1 to 6).toObservable.takeRight(3), +    assertEquals(List(4, 5, 6), o.toBlockingObservable.toList), +  }, +, +  @Test def takeRightExample2(): Unit = {, +    val o = (1 to 10).toObservable, +      .zip(Observable.interval(100 millis)), +      .map(_._1), +      .takeRight(300 millis), +    println(o.toBlockingObservable.toList), +  }, +, +  @Test def takeRightExample3(): Unit = {, +    val o = (1 to 10).toObservable, +      .zip(Observable.interval(100 millis)), +      .map(_._1), +      .takeRight(2, 300 millis), +    println(o.toBlockingObservable.toList), +  }, +, +  @Test def timeIntervalExample(): Unit = {, +    val o = (1 to 10).toObservable, +      .zip(Observable.interval(100 millis)), +      .map(_._1), +      .timeInterval, +    println(o.toBlockingObservable.toList), +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def bufferExample() {, +    val o = Observable.from(1 to 18).zip(Observable.interval(100 millis)).map(_._1), +    val boundary = Observable.interval(500 millis), +    o.buffer(boundary).toBlockingObservable.foreach((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  }, +, +  @Test def delayExample3(): Unit = {, +    val o = List(100, 500, 200).toObservable.delay(, +      (i: Int) => Observable.items(i).delay(i millis), +    ), +    o.toBlockingObservable.foreach(println(_)), +  }, +, +  @Test def delayExample4(): Unit = {, +    val o = List(100, 500, 200).toObservable.delay(, +      () => Observable.interval(500 millis).take(1),, +      (i: Int) => Observable.items(i).delay(i millis), +    ), +    o.toBlockingObservable.foreach(println(_)), +  }, +, +  @Test def sequenceEqualExampe(): Unit = {, +    val o1 = List(1, 2, 3).toObservable, +    val o2 = List(1, 2, 3).toObservable, +    val o3 = List(1, 2).toObservable, +    val o4 = List(1.0, 2.0, 3.0).toObservable, +    assertTrue(o1.sequenceEqual(o2).toBlockingObservable.single), +    assertFalse(o1.sequenceEqual(o3).toBlockingObservable.single), +    assertTrue(o1.sequenceEqual(o4).toBlockingObservable.single), +  }]