[+++ b/rxjava-contrib/rxjava-computation-expressions/src/main/java/rx/Statement.java, +import rx.operators.OperatorIfThen;, +import rx.operators.OperatorSwitchCase;, +import rx.operators.OperatorWhileDoWhile;, +public final class Statement {, +	private Statement() { throw new IllegalStateException("No instances!"); }, +        return Observable.create(new OperatorSwitchCase<K, R>(caseSelector, mapOfCases, defaultCase));, +    public static <T> Observable<T> doWhile(Observable<? extends T> source, Func0<Boolean> postCondition) {, +        return Observable.create(new OperatorWhileDoWhile<T>(source, TRUE, postCondition));, +    public static <T> Observable<T> whileDo(Observable<? extends T> source, Func0<Boolean> preCondition) {, +        return Observable.create(new OperatorWhileDoWhile<T>(source, preCondition, preCondition));, +        return Observable.create(new OperatorIfThen<R>(condition, then, orElse));, +    }, +    /** Returns always true. */, +    private static final class Func0True implements Func0<Boolean> {, +        @Override, +        public Boolean call() {, +            return true;, +        }, +    /** Returns always true function. */, +    private static final Func0True TRUE = new Func0True();, +++ b/rxjava-contrib/rxjava-computation-expressions/src/main/java/rx/Statement.java, +import rx.operators.OperatorIfThen;, +import rx.operators.OperatorSwitchCase;, +import rx.operators.OperatorWhileDoWhile;, +public final class Statement {, +	private Statement() { throw new IllegalStateException("No instances!"); }, +        return Observable.create(new OperatorSwitchCase<K, R>(caseSelector, mapOfCases, defaultCase));, +    public static <T> Observable<T> doWhile(Observable<? extends T> source, Func0<Boolean> postCondition) {, +        return Observable.create(new OperatorWhileDoWhile<T>(source, TRUE, postCondition));, +    public static <T> Observable<T> whileDo(Observable<? extends T> source, Func0<Boolean> preCondition) {, +        return Observable.create(new OperatorWhileDoWhile<T>(source, preCondition, preCondition));, +        return Observable.create(new OperatorIfThen<R>(condition, then, orElse));, +    }, +    /** Returns always true. */, +    private static final class Func0True implements Func0<Boolean> {, +        @Override, +        public Boolean call() {, +            return true;, +        }, +    /** Returns always true function. */, +    private static final Func0True TRUE = new Func0True();, +++ /dev/null, +++ b/rxjava-contrib/rxjava-computation-expressions/src/main/java/rx/Statement.java, +import rx.operators.OperatorIfThen;, +import rx.operators.OperatorSwitchCase;, +import rx.operators.OperatorWhileDoWhile;, +public final class Statement {, +	private Statement() { throw new IllegalStateException("No instances!"); }, +        return Observable.create(new OperatorSwitchCase<K, R>(caseSelector, mapOfCases, defaultCase));, +    public static <T> Observable<T> doWhile(Observable<? extends T> source, Func0<Boolean> postCondition) {, +        return Observable.create(new OperatorWhileDoWhile<T>(source, TRUE, postCondition));, +    public static <T> Observable<T> whileDo(Observable<? extends T> source, Func0<Boolean> preCondition) {, +        return Observable.create(new OperatorWhileDoWhile<T>(source, preCondition, preCondition));, +        return Observable.create(new OperatorIfThen<R>(condition, then, orElse));, +    }, +    /** Returns always true. */, +    private static final class Func0True implements Func0<Boolean> {, +        @Override, +        public Boolean call() {, +            return true;, +        }, +    /** Returns always true function. */, +    private static final Func0True TRUE = new Func0True();, +++ /dev/null, +++ b/rxjava-contrib/rxjava-computation-expressions/src/main/java/rx/operators/OperatorIfThen.java, +package rx.operators;, +, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +import rx.functions.Func0;, +, +/**, + * Given a condition, subscribe to one of the observables when an Observer, + * subscribes., + * , + * @param <R>, + *            the result value type, + */, +public final class OperatorIfThen<R> implements OnSubscribe<R> {, +    final Func0<Boolean> condition;, +    final Observable<? extends R> then;, +    final Observable<? extends R> orElse;, +, +    public OperatorIfThen(Func0<Boolean> condition, Observable<? extends R> then, Observable<? extends R> orElse) {, +        this.condition = condition;, +        this.then = then;, +        this.orElse = orElse;, +    }, +, +    @Override, +    public void call(Subscriber<? super R> t1) {, +        Observable<? extends R> target;, +        try {, +            if (condition.call()) {, +                target = then;, +            } else {, +                target = orElse;, +            }]