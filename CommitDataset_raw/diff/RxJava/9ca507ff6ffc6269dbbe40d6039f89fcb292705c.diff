[+++ b/src/main/java/io/reactivex/Completable.java, +     * Wraps the given CompletableSource into a Completable, +        return new CompletableFromSource(source);, +     * Constructs a Completable instance by wrapping the given source callback., +     * @param source the callback which will receive the CompletableObserver instances, +     * @throws NullPointerException if source is null, +    public static Completable create(CompletableSource source) {, +        Objects.requireNonNull(source, "source is null");, +        if (source instanceof Completable) {, +            // TODO plugin wrapping source, +            return RxJavaPlugins.onAssembly(new CompletableFromSource(source));, +++ b/src/main/java/io/reactivex/Completable.java, +     * Wraps the given CompletableSource into a Completable, +        return new CompletableFromSource(source);, +     * Constructs a Completable instance by wrapping the given source callback., +     * @param source the callback which will receive the CompletableObserver instances, +     * @throws NullPointerException if source is null, +    public static Completable create(CompletableSource source) {, +        Objects.requireNonNull(source, "source is null");, +        if (source instanceof Completable) {, +            // TODO plugin wrapping source, +            return RxJavaPlugins.onAssembly(new CompletableFromSource(source));, +++ b/src/main/java/io/reactivex/Flowable.java, +        return new FlowableFromPublisher<T>(publisher);, +++ b/src/main/java/io/reactivex/Completable.java, +     * Wraps the given CompletableSource into a Completable, +        return new CompletableFromSource(source);, +     * Constructs a Completable instance by wrapping the given source callback., +     * @param source the callback which will receive the CompletableObserver instances, +     * @throws NullPointerException if source is null, +    public static Completable create(CompletableSource source) {, +        Objects.requireNonNull(source, "source is null");, +        if (source instanceof Completable) {, +            // TODO plugin wrapping source, +            return RxJavaPlugins.onAssembly(new CompletableFromSource(source));, +++ b/src/main/java/io/reactivex/Flowable.java, +        return new FlowableFromPublisher<T>(publisher);, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T> Observable<T> create(ObservableSource<T> source) {, +        Objects.requireNonNull(source, "source is null");, +        return new ObservableFromSource<T>(source);, +    public static <T> Observable<T> wrap(ObservableSource<T> source) {, +        Objects.requireNonNull(source, "source is null");, +        if (source instanceof Observable) {, +            return (Observable<T>)source;, +        return new ObservableFromSource<T>(source);, +++ b/src/main/java/io/reactivex/Completable.java, +     * Wraps the given CompletableSource into a Completable, +        return new CompletableFromSource(source);, +     * Constructs a Completable instance by wrapping the given source callback., +     * @param source the callback which will receive the CompletableObserver instances, +     * @throws NullPointerException if source is null, +    public static Completable create(CompletableSource source) {, +        Objects.requireNonNull(source, "source is null");, +        if (source instanceof Completable) {, +            // TODO plugin wrapping source, +            return RxJavaPlugins.onAssembly(new CompletableFromSource(source));, +++ b/src/main/java/io/reactivex/Flowable.java, +        return new FlowableFromPublisher<T>(publisher);, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T> Observable<T> create(ObservableSource<T> source) {, +        Objects.requireNonNull(source, "source is null");, +        return new ObservableFromSource<T>(source);, +    public static <T> Observable<T> wrap(ObservableSource<T> source) {, +        Objects.requireNonNull(source, "source is null");, +        if (source instanceof Observable) {, +            return (Observable<T>)source;, +        return new ObservableFromSource<T>(source);, +++ b/src/main/java/io/reactivex/Single.java, +        return new SingleFromSource<T>(source);, +    public static <T> Single<T> create(SingleSource<T> source) {, +        Objects.requireNonNull(source, "source is null");, +        return new SingleFromSource<T>(source);, +++ b/src/main/java/io/reactivex/Completable.java, +     * Wraps the given CompletableSource into a Completable, +        return new CompletableFromSource(source);, +     * Constructs a Completable instance by wrapping the given source callback., +     * @param source the callback which will receive the CompletableObserver instances, +     * @throws NullPointerException if source is null, +    public static Completable create(CompletableSource source) {, +        Objects.requireNonNull(source, "source is null");, +        if (source instanceof Completable) {, +            // TODO plugin wrapping source, +            return RxJavaPlugins.onAssembly(new CompletableFromSource(source));, +++ b/src/main/java/io/reactivex/Flowable.java, +        return new FlowableFromPublisher<T>(publisher);, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T> Observable<T> create(ObservableSource<T> source) {, +        Objects.requireNonNull(source, "source is null");, +        return new ObservableFromSource<T>(source);, +    public static <T> Observable<T> wrap(ObservableSource<T> source) {, +        Objects.requireNonNull(source, "source is null");, +        if (source instanceof Observable) {, +            return (Observable<T>)source;, +        return new ObservableFromSource<T>(source);, +++ b/src/main/java/io/reactivex/Single.java, +        return new SingleFromSource<T>(source);, +    public static <T> Single<T> create(SingleSource<T> source) {, +        Objects.requireNonNull(source, "source is null");, +        return new SingleFromSource<T>(source);]