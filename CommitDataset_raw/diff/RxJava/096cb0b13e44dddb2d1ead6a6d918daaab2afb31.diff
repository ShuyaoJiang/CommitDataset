[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +//import rx.lang.scala._, +//import rx.lang.scala.Scheduler, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription): Func2[rx.Scheduler, T, rx.Subscription] with Object {def call(s: rx.Scheduler, t: T): rx.Subscription} =, +        action(rx.lang.scala.Scheduler(s), t).asJavaSubscription, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +//import rx.lang.scala._, +//import rx.lang.scala.Scheduler, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription): Func2[rx.Scheduler, T, rx.Subscription] with Object {def call(s: rx.Scheduler, t: T): rx.Subscription} =, +        action(rx.lang.scala.Scheduler(s), t).asJavaSubscription, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  val asJavaScheduler: rx.Scheduler, +object Scheduler {, +  private [scala] def apply(scheduler: rx.Scheduler): Scheduler = {, +    return new Scheduler() {, +       val asJavaScheduler = scheduler, +    }, +  }, +}, +, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +//import rx.lang.scala._, +//import rx.lang.scala.Scheduler, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription): Func2[rx.Scheduler, T, rx.Subscription] with Object {def call(s: rx.Scheduler, t: T): rx.Subscription} =, +        action(rx.lang.scala.Scheduler(s), t).asJavaSubscription, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  val asJavaScheduler: rx.Scheduler, +object Scheduler {, +  private [scala] def apply(scheduler: rx.Scheduler): Scheduler = {, +    return new Scheduler() {, +       val asJavaScheduler = scheduler, +    }, +  }, +}, +, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscription.scala, +, +      case x: rx.Subscription => Subscription { x.unsubscribe() }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +//import rx.lang.scala._, +//import rx.lang.scala.Scheduler, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription): Func2[rx.Scheduler, T, rx.Subscription] with Object {def call(s: rx.Scheduler, t: T): rx.Subscription} =, +        action(rx.lang.scala.Scheduler(s), t).asJavaSubscription, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  val asJavaScheduler: rx.Scheduler, +object Scheduler {, +  private [scala] def apply(scheduler: rx.Scheduler): Scheduler = {, +    return new Scheduler() {, +       val asJavaScheduler = scheduler, +    }, +  }, +}, +, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscription.scala, +, +      case x: rx.Subscription => Subscription { x.unsubscribe() }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/concurrency/CurrentThreadScheduler.scala, +    new CurrentThreadScheduler(rx.concurrency.Schedulers.currentThread()), +class CurrentThreadScheduler private[scala] (val asJavaScheduler: rx.Scheduler), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +//import rx.lang.scala._, +//import rx.lang.scala.Scheduler, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription): Func2[rx.Scheduler, T, rx.Subscription] with Object {def call(s: rx.Scheduler, t: T): rx.Subscription} =, +        action(rx.lang.scala.Scheduler(s), t).asJavaSubscription, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  val asJavaScheduler: rx.Scheduler, +object Scheduler {, +  private [scala] def apply(scheduler: rx.Scheduler): Scheduler = {, +    return new Scheduler() {, +       val asJavaScheduler = scheduler, +    }, +  }, +}, +, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscription.scala, +, +      case x: rx.Subscription => Subscription { x.unsubscribe() }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/concurrency/CurrentThreadScheduler.scala, +    new CurrentThreadScheduler(rx.concurrency.Schedulers.currentThread()), +class CurrentThreadScheduler private[scala] (val asJavaScheduler: rx.Scheduler), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/concurrency/ExecutorScheduler.scala, +class ExecutorScheduler private[scala] (val asJavaScheduler: rx.Scheduler), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +//import rx.lang.scala._, +//import rx.lang.scala.Scheduler, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription): Func2[rx.Scheduler, T, rx.Subscription] with Object {def call(s: rx.Scheduler, t: T): rx.Subscription} =, +        action(rx.lang.scala.Scheduler(s), t).asJavaSubscription, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  val asJavaScheduler: rx.Scheduler, +object Scheduler {, +  private [scala] def apply(scheduler: rx.Scheduler): Scheduler = {, +    return new Scheduler() {, +       val asJavaScheduler = scheduler, +    }, +  }, +}]