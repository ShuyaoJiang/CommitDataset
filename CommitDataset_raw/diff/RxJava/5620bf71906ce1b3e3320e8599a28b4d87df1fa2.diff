[+++ b/src/test/java/rx/BackpressureTests.java, +import static org.junit.Assert.*;, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.*;, +import org.junit.*;, +import rx.functions.*;, +import rx.test.TestObstructionDetection;, +    @After, +    public void doAfterTest() {, +        TestObstructionDetection.checkObstruction();, +    }, +    , +    @Ignore // the test is non-deterministic and can't be made deterministic, +++ b/src/test/java/rx/BackpressureTests.java, +import static org.junit.Assert.*;, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.*;, +import org.junit.*;, +import rx.functions.*;, +import rx.test.TestObstructionDetection;, +    @After, +    public void doAfterTest() {, +        TestObstructionDetection.checkObstruction();, +    }, +    , +    @Ignore // the test is non-deterministic and can't be made deterministic, +++ b/src/test/java/rx/internal/operators/OperatorRetryTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicLong;, +import org.mockito.InOrder;, +import org.mockito.Mockito;, +import rx.Observable.OnSubscribe;, +import rx.Producer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Action0;, +import rx.functions.Action1;, +import rx.functions.Func1;, +import rx.functions.Func2;, +        final AtomicInteger data = new AtomicInteger();, +                            data.incrementAndGet();, +                            data.incrementAndGet();, +                            data.incrementAndGet();, +        assertEquals(0, data.get());, +, +++ b/src/test/java/rx/BackpressureTests.java, +import static org.junit.Assert.*;, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.*;, +import org.junit.*;, +import rx.functions.*;, +import rx.test.TestObstructionDetection;, +    @After, +    public void doAfterTest() {, +        TestObstructionDetection.checkObstruction();, +    }, +    , +    @Ignore // the test is non-deterministic and can't be made deterministic, +++ b/src/test/java/rx/internal/operators/OperatorRetryTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicLong;, +import org.mockito.InOrder;, +import org.mockito.Mockito;, +import rx.Observable.OnSubscribe;, +import rx.Producer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Action0;, +import rx.functions.Action1;, +import rx.functions.Func1;, +import rx.functions.Func2;, +        final AtomicInteger data = new AtomicInteger();, +                            data.incrementAndGet();, +                            data.incrementAndGet();, +                            data.incrementAndGet();, +        assertEquals(0, data.get());, +, +++ b/src/test/java/rx/test/TestObstructionDetection.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0]