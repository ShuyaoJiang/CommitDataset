[+++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +, +import rx.operators.OperatorWeakBinding;, +, +    @Deprecated, +    @Deprecated, +, +    public static <T> Observable<T> bindActivity(Activity activity, Observable<T> cachedSequence) {, +        return cachedSequence.observeOn(mainThread()).lift(new OperatorWeakBinding<T, Activity>(activity));, +    }, +, +    public static <T> Observable<T> bindFragment(Object fragment, Observable<T> cachedSequence) {, +        Observable<T> source = cachedSequence.observeOn(mainThread());, +        if (USES_SUPPORT_FRAGMENTS && fragment instanceof android.support.v4.app.Fragment) {, +            android.support.v4.app.Fragment f = (android.support.v4.app.Fragment) fragment;, +            return source.lift(new OperatorWeakBinding<T, android.support.v4.app.Fragment>(f));, +        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && fragment instanceof Fragment) {, +            Fragment f = (Fragment) fragment;, +            return source.lift(new OperatorWeakBinding<T, Fragment>(f));, +        } else {, +            throw new IllegalArgumentException("Target fragment is neither a native nor support library Fragment");, +        }, +    }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +, +import rx.operators.OperatorWeakBinding;, +, +    @Deprecated, +    @Deprecated, +, +    public static <T> Observable<T> bindActivity(Activity activity, Observable<T> cachedSequence) {, +        return cachedSequence.observeOn(mainThread()).lift(new OperatorWeakBinding<T, Activity>(activity));, +    }, +, +    public static <T> Observable<T> bindFragment(Object fragment, Observable<T> cachedSequence) {, +        Observable<T> source = cachedSequence.observeOn(mainThread());, +        if (USES_SUPPORT_FRAGMENTS && fragment instanceof android.support.v4.app.Fragment) {, +            android.support.v4.app.Fragment f = (android.support.v4.app.Fragment) fragment;, +            return source.lift(new OperatorWeakBinding<T, android.support.v4.app.Fragment>(f));, +        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && fragment instanceof Fragment) {, +            Fragment f = (Fragment) fragment;, +            return source.lift(new OperatorWeakBinding<T, Fragment>(f));, +        } else {, +            throw new IllegalArgumentException("Target fragment is neither a native nor support library Fragment");, +        }, +    }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperatorObserveFromAndroidComponent.java, +@Deprecated, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +, +import rx.operators.OperatorWeakBinding;, +, +    @Deprecated, +    @Deprecated, +, +    public static <T> Observable<T> bindActivity(Activity activity, Observable<T> cachedSequence) {, +        return cachedSequence.observeOn(mainThread()).lift(new OperatorWeakBinding<T, Activity>(activity));, +    }, +, +    public static <T> Observable<T> bindFragment(Object fragment, Observable<T> cachedSequence) {, +        Observable<T> source = cachedSequence.observeOn(mainThread());, +        if (USES_SUPPORT_FRAGMENTS && fragment instanceof android.support.v4.app.Fragment) {, +            android.support.v4.app.Fragment f = (android.support.v4.app.Fragment) fragment;, +            return source.lift(new OperatorWeakBinding<T, android.support.v4.app.Fragment>(f));, +        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && fragment instanceof Fragment) {, +            Fragment f = (Fragment) fragment;, +            return source.lift(new OperatorWeakBinding<T, Fragment>(f));, +        } else {, +            throw new IllegalArgumentException("Target fragment is neither a native nor support library Fragment");, +        }, +    }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperatorObserveFromAndroidComponent.java, +@Deprecated, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperatorWeakBinding.java, +package rx.operators;, +, +import rx.Observable;, +import rx.Subscriber;, +, +import android.util.Log;, +, +import java.lang.ref.WeakReference;, +, +public final class OperatorWeakBinding<T, R> implements Observable.Operator<T, T> {, +, +    private static final String LOG_TAG = "WeakBinding";, +, +    private final WeakReference<R> boundRef;, +, +    public OperatorWeakBinding(R bound) {, +        boundRef = new WeakReference<R>(bound);, +    }, +, +    @Override, +    public Subscriber<? super T> call(final Subscriber<? super T> child) {, +        return new WeakSubscriber<T, R>(child, boundRef);, +    }]