[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationThrottleFirst;, +    /**, +     * Throttles to first value in each window., +     * , +     * @param windowDuration, +     *            Duration of windows within with the first value will be chosen., +     * @param unit, +     *            The unit of time for the specified timeout., +     * @return Observable which performs the throttle operation., +     */, +    public Observable<T> throttleFirst(long windowDuration, TimeUnit unit) {, +        return create(OperationThrottleFirst.throttleFirst(this, windowDuration, unit));, +    }, +, +    /**, +     * Throttles to first value in each window., +     * , +     * @param windowDuration, +     *            Duration of windows within with the first value will be chosen., +     * @param unit, +     *            The unit of time for the specified timeout., +     * @param scheduler, +     *            The {@link Scheduler} to use internally to manage the timers which handle timeout for each event., +     * @return Observable which performs the throttle operation., +     */, +    public Observable<T> throttleFirst(long windowDuration, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationThrottleFirst.throttleFirst(this, windowDuration, unit, scheduler));, +    }, +    , +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationThrottleFirst;, +    /**, +     * Throttles to first value in each window., +     * , +     * @param windowDuration, +     *            Duration of windows within with the first value will be chosen., +     * @param unit, +     *            The unit of time for the specified timeout., +     * @return Observable which performs the throttle operation., +     */, +    public Observable<T> throttleFirst(long windowDuration, TimeUnit unit) {, +        return create(OperationThrottleFirst.throttleFirst(this, windowDuration, unit));, +    }, +, +    /**, +     * Throttles to first value in each window., +     * , +     * @param windowDuration, +     *            Duration of windows within with the first value will be chosen., +     * @param unit, +     *            The unit of time for the specified timeout., +     * @param scheduler, +     *            The {@link Scheduler} to use internally to manage the timers which handle timeout for each event., +     * @return Observable which performs the throttle operation., +     */, +    public Observable<T> throttleFirst(long windowDuration, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationThrottleFirst.throttleFirst(this, windowDuration, unit, scheduler));, +    }, +    , +++ b/rxjava-core/src/main/java/rx/operators/OperationThrottleFirst.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.concurrent.TimeUnit;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Scheduler;, +import rx.Subscription;, +import rx.concurrency.Schedulers;, +import rx.concurrency.TestScheduler;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Action0;, +import rx.util.functions.Func1;, +, +/**, + * Throttle by windowing a stream and returning the first value in each window.]