[+++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test, +    public void testSingle1() {, +        def s = Observable.toObservable("one").single({ x -> x.length() == 3}), +        assertEquals("one", s), +    }, +, +    @Test(expected = IllegalStateException.class), +    public void testSingle2() {, +        Observable.toObservable("one", "two").single({ x -> x.length() == 3}), +    }, +, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test, +    public void testSingle1() {, +        def s = Observable.toObservable("one").single({ x -> x.length() == 3}), +        assertEquals("one", s), +    }, +, +    @Test(expected = IllegalStateException.class), +    public void testSingle2() {, +        Observable.toObservable("one", "two").single({ x -> x.length() == 3}), +    }, +, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns the only element of an observable sequence and throws an exception if there is not exactly one element in the observable sequence., +     *, +     * @return The single element in the observable sequence., +     */, +    public T single() {, +        return single(this);, +    }, +, +    /**, +     * Returns the only element of an observable sequence that matches the predicate and throws an exception if there is not exactly one element in the observable sequence., +     *, +     * @param predicate A predicate function to evaluate for elements in the sequence., +     * @return The single element in the observable sequence., +     */, +    public T single(Func1<T, Boolean> predicate) {, +        return single(this, predicate);, +    }, +, +    /**, +     * Returns the only element of an observable sequence that matches the predicate and throws an exception if there is not exactly one element in the observable sequence., +     *, +     * @param predicate A predicate function to evaluate for elements in the sequence., +     * @return The single element in the observable sequence., +     */, +    public T single(Object predicate) {, +        return single(this, predicate);, +    }, +, +    /**, +     * Returns the only element of an observable sequence, or a default value if the observable sequence is empty., +     *, +     * @param defaultValue default value for a sequence., +     * @return The single element in the observable sequence, or a default value if no value is found., +     */, +    public T singleOrDefault(T defaultValue) {, +        return singleOrDefault(this, defaultValue);, +    }, +, +    /**, +     * Returns the only element of an observable sequence that matches the predicate, or a default value if no value is found., +     * @param defaultValue default value for a sequence., +     * @param predicate A predicate function to evaluate for elements in the sequence., +     * @return The single element in the observable sequence, or a default value if no value is found., +     */, +    public T singleOrDefault(T defaultValue, Func1<T, Boolean> predicate) {, +        return singleOrDefault(this, defaultValue, predicate);, +    }, +, +    /**, +     * Returns the only element of an observable sequence that matches the predicate, or a default value if no value is found., +     *, +     * @param defaultValue default value for a sequence., +     * @param predicate    A predicate function to evaluate for elements in the sequence., +     * @return The single element in the observable sequence, or a default value if no value is found., +     */, +    public T singleOrDefault(T defaultValue, Object predicate) {, +        return singleOrDefault(this, defaultValue, predicate);, +    }, +, +    /**, +     * Returns the only element of an observable sequence and throws an exception if there is not exactly one element in the observable sequence., +     *, +     * @param that, +     *            the source Observable, +     * @return The single element in the observable sequence., +     */, +    public static <T> T single(Observable<T> that) {, +        return single(that, Functions.<T>alwaysTrue());, +    }, +, +    /**, +     * Returns the only element of an observable sequence that matches the predicate and throws an exception if there is not exactly one element in the observable sequence., +     *, +     * @param that, +     *            the source Observable]