[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh244306%28v=vs.103%29.aspx">MSDN: Observable.Select</a>, +     * Returns an Observable that applies the given function to each item emitted by an, +     * Observable and emits the result., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/map.png">, +     * , +     * @param func, +     *            a function to apply to each item emitted by the Observable. The function takes the, +     *            index of the emitted item as additional parameter., +     * @return an Observable that emits the items from the source Observable, transformed by the, +     *         given function, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh244311%28v=vs.103%29.aspx">MSDN: Observable.Select</a>, +     */, +    public <R> Observable<R> mapWithIndex(Func2<? super T, Integer, ? extends R> func) {, +        return create(OperationMap.mapWithIndex(this, func));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh244306%28v=vs.103%29.aspx">MSDN: Observable.Select</a>, +     * Returns an Observable that applies the given function to each item emitted by an, +     * Observable and emits the result., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/map.png">, +     * , +     * @param func, +     *            a function to apply to each item emitted by the Observable. The function takes the, +     *            index of the emitted item as additional parameter., +     * @return an Observable that emits the items from the source Observable, transformed by the, +     *         given function, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh244311%28v=vs.103%29.aspx">MSDN: Observable.Select</a>, +     */, +    public <R> Observable<R> mapWithIndex(Func2<? super T, Integer, ? extends R> func) {, +        return create(OperationMap.mapWithIndex(this, func));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinct.java, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh244306%28v=vs.103%29.aspx">MSDN: Observable.Select</a>, +     * Returns an Observable that applies the given function to each item emitted by an, +     * Observable and emits the result., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/map.png">, +     * , +     * @param func, +     *            a function to apply to each item emitted by the Observable. The function takes the, +     *            index of the emitted item as additional parameter., +     * @return an Observable that emits the items from the source Observable, transformed by the, +     *         given function, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh244311%28v=vs.103%29.aspx">MSDN: Observable.Select</a>, +     */, +    public <R> Observable<R> mapWithIndex(Func2<? super T, Integer, ? extends R> func) {, +        return create(OperationMap.mapWithIndex(this, func));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinct.java, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinctUntilChanged.java, +        return new DistinctUntilChanged<T, U>(source, keySelector);, +        return new DistinctUntilChanged<T, T>(source, Functions.<T>identity());, +        private DistinctUntilChanged(Observable<? extends T> source, Func1<? super T, ? extends U> keySelector) {, +                        } else {, +                            if (lastKey == null) {, +                                if (nextKey != null) {, +                            } else {, +                                if (!lastKey.equals(nextKey)) {, +                                    observer.onNext(next);, +                                }, +                            }, +                        }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh244306%28v=vs.103%29.aspx">MSDN: Observable.Select</a>, +     * Returns an Observable that applies the given function to each item emitted by an, +     * Observable and emits the result., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/map.png">, +     * , +     * @param func, +     *            a function to apply to each item emitted by the Observable. The function takes the, +     *            index of the emitted item as additional parameter., +     * @return an Observable that emits the items from the source Observable, transformed by the, +     *         given function, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh244311%28v=vs.103%29.aspx">MSDN: Observable.Select</a>, +     */, +    public <R> Observable<R> mapWithIndex(Func2<? super T, Integer, ? extends R> func) {, +        return create(OperationMap.mapWithIndex(this, func));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinct.java, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinctUntilChanged.java, +        return new DistinctUntilChanged<T, U>(source, keySelector);, +        return new DistinctUntilChanged<T, T>(source, Functions.<T>identity());, +        private DistinctUntilChanged(Observable<? extends T> source, Func1<? super T, ? extends U> keySelector) {, +                        } else {, +                            if (lastKey == null) {, +                                if (nextKey != null) {, +                            } else {]