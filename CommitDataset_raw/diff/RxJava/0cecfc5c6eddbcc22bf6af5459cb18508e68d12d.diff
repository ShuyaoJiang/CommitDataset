[+++ b/src/main/java/rx/Observable.java, +     * Returns an Observable that emits the items emitted by the source Observable or the items of an alternate, +     * Observable if the source Observable is empty., +     * <p/>, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code switchIfEmpty} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param alternate, +     *              the alternate Observable to subscribe to if the source does not emit any items, +     * @return  an Observable that emits the items emitted by the source Observable or the items of an, +     *          alternate Observable if the source Observable is empty., +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     */, +    @Experimental, +    public final Observable<T> switchIfEmpty(Observable<? extends T> alternate) {, +        return lift(new OperatorSwitchIfEmpty<T>(alternate));, +    }, +, +    /**, +++ b/src/main/java/rx/Observable.java, +     * Returns an Observable that emits the items emitted by the source Observable or the items of an alternate, +     * Observable if the source Observable is empty., +     * <p/>, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code switchIfEmpty} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param alternate, +     *              the alternate Observable to subscribe to if the source does not emit any items, +     * @return  an Observable that emits the items emitted by the source Observable or the items of an, +     *          alternate Observable if the source Observable is empty., +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     */, +    @Experimental, +    public final Observable<T> switchIfEmpty(Observable<? extends T> alternate) {, +        return lift(new OperatorSwitchIfEmpty<T>(alternate));, +    }, +, +    /**, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBlock.java, +import rx.internal.util.BackpressureDrainManager;, +    static final class BlockingSubscriber<T> extends Subscriber<T> implements BackpressureDrainManager.BackpressureQueueCallback {, +        final BackpressureDrainManager manager;, +            this.manager = new BackpressureDrainManager(this);, +            child.setProducer(manager);, +                manager.drain();, +            manager.terminateAndDrain(e);, +            manager.terminateAndDrain();, +        @Override, +        public boolean accept(Object value) {, +            return nl.accept(child, value);, +        @Override, +        public void complete(Throwable exception) {, +        @Override, +        public Object peek() {, +            return queue.peek();, +        @Override, +        public Object poll() {, +            return queue.poll();, +++ b/src/main/java/rx/Observable.java, +     * Returns an Observable that emits the items emitted by the source Observable or the items of an alternate, +     * Observable if the source Observable is empty., +     * <p/>, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code switchIfEmpty} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param alternate, +     *              the alternate Observable to subscribe to if the source does not emit any items, +     * @return  an Observable that emits the items emitted by the source Observable or the items of an, +     *          alternate Observable if the source Observable is empty., +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     */, +    @Experimental, +    public final Observable<T> switchIfEmpty(Observable<? extends T> alternate) {, +        return lift(new OperatorSwitchIfEmpty<T>(alternate));, +    }, +, +    /**, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBlock.java, +import rx.internal.util.BackpressureDrainManager;, +    static final class BlockingSubscriber<T> extends Subscriber<T> implements BackpressureDrainManager.BackpressureQueueCallback {, +        final BackpressureDrainManager manager;, +            this.manager = new BackpressureDrainManager(this);, +            child.setProducer(manager);, +                manager.drain();, +            manager.terminateAndDrain(e);, +            manager.terminateAndDrain();, +        @Override, +        public boolean accept(Object value) {, +            return nl.accept(child, value);, +        @Override, +        public void complete(Throwable exception) {, +        @Override, +        public Object peek() {, +            return queue.peek();]