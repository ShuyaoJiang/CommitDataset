[+++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +, +import rx.subscriptions.Subscriptions;, +@SuppressWarnings({ "unchecked", "rawtypes" }), +        State<T> state = new State<T>();, +            state.set(Notification.createOnNext(defaultValue));, +        return new BehaviorSubject<T>(new BehaviorOnSubscribe<T>(state), state); , +        final AtomicReference<Notification<T>> latest = new AtomicReference<Notification<T>>();, +        final AtomicReference<BehaviorState> observers = new AtomicReference<BehaviorState>(BehaviorState.EMPTY);, +        void set(Notification<T> value) {, +            this.latest.set(value);, +        Notification<T> get() {, +            return latest.get();, +        BehaviorObserver<T>[] observers() {, +            return observers.get().observers;, +        boolean add(BehaviorObserver<T> o) {, +            do {, +                BehaviorState oldState = observers.get();, +                if (oldState.terminated) {, +                    o.emitFirst(get());, +                    return false;, +                BehaviorState newState = oldState.add(o);, +                if (observers.compareAndSet(oldState, newState)) {, +                    o.emitFirst(get());, +                    return true;, +                }, +            } while (true);, +        }, +        void remove(BehaviorObserver<T> o) {, +            do {, +                BehaviorState oldState = observers.get();, +                if (oldState.terminated) {, +                BehaviorState newState = oldState.remove(o);, +                if (newState == oldState || observers.compareAndSet(oldState, newState)) {, +            } while (true);, +        }, +        BehaviorObserver<T>[] next(Notification<T> n) {, +            set(n);, +            return observers.get().observers;, +        }, +        BehaviorObserver<T>[] terminate(Notification<T> n) {, +            set(n);, +            do {, +                BehaviorState oldState = observers.get();, +                if (oldState.terminated) {, +                    return BehaviorState.NO_OBSERVERS;, +                }, +                if (observers.compareAndSet(oldState, BehaviorState.TERMINATED)) {, +                    return oldState.observers;, +                }, +            } while (true);, +    static final class BehaviorState {, +        final boolean terminated;, +        final BehaviorObserver[] observers;, +        static final BehaviorObserver[] NO_OBSERVERS = new BehaviorObserver[0];, +        static final BehaviorState TERMINATED = new BehaviorState(true, NO_OBSERVERS);, +        static final BehaviorState EMPTY = new BehaviorState(false, NO_OBSERVERS);, +, +        public BehaviorState(boolean terminated, BehaviorObserver[] observers) {, +            this.terminated = terminated;, +            this.observers = observers;, +        public BehaviorState add(BehaviorObserver o) {, +            int n = observers.length;, +            BehaviorObserver[] a = new BehaviorObserver[n + 1];, +            System.arraycopy(observers, 0, a, 0, n);, +            a[n] = o;, +            return new BehaviorState(terminated, a);, +        }, +        public BehaviorState remove(BehaviorObserver o) {, +            BehaviorObserver[] a = observers;, +            int n = a.length;, +            if (n == 1 && a[0] == o) {, +                return EMPTY;, +            } else, +            if (n == 0) {, +                return this;, +            }, +            BehaviorObserver[] b = new BehaviorObserver[n - 1];, +            int j = 0;, +            for (int i = 0; i < n; i++) {, +                BehaviorObserver ai = a[i];, +                if (ai != o) {, +                    if (j == n - 1) {, +                        return this;, +                    }, +                    b[j++] = ai;, +            if (j == 0) {, +                return EMPTY;, +            }, +            if (j < n - 1) {, +                BehaviorObserver[] c = new BehaviorObserver[j];, +                System.arraycopy(b, 0, c, 0, j);, +                b = c;, +            }, +            return new BehaviorState(terminated, b);, +    , +    static final class BehaviorOnSubscribe<T> implements OnSubscribe<T> {, +        private final State<T> state;, +, +        public BehaviorOnSubscribe(State<T> state) {]