[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * item. If the source Observable emits more than one item or no items, throw an `NoSuchElementException`., +   * @throws NoSuchElementException, +   *             if the source emits more than one item or no items, +    new BlockingObservable[T](asJavaObservable.toBlocking), +    new BlockingObservable[T](asJavaObservable.toBlocking), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * item. If the source Observable emits more than one item or no items, throw an `NoSuchElementException`., +   * @throws NoSuchElementException, +   *             if the source emits more than one item or no items, +    new BlockingObservable[T](asJavaObservable.toBlocking), +    new BlockingObservable[T](asJavaObservable.toBlocking), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/observables/BlockingObservable.scala, + * You can obtain a BlockingObservable from an Observable using [[rx.lang.scala.Observable.toBlockingObservable]], +// constructor is private because users should use Observable.toBlockingObservable, +class BlockingObservable[+T] private[scala] (val asJava: rx.observables.BlockingObservable[_ <: T]) , +, +  // last                 -> use toIterable.last, +  // lastOrDefault        -> use toIterable.lastOption, +  // first                -> use toIterable.head, +  // firstOrDefault       -> use toIterable.headOption, +  // single(predicate)    -> use filter and single, +  // singleOrDefault      -> use singleOption, +   * If this {@link Observable} completes after emitting a single item, return that item,, +   * otherwise throw an exception., +   * <p>, +   * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/B.single.png">, +   * @return the single item emitted by the {@link Observable}, +   * If this {@link Observable} completes after emitting a single item, return an Option containing, +   * this item, otherwise return {@code None}., +    var size: Int = 0, +    var last: Option[T] = None, +    for (t <- toIterable) {, +      size += 1, +      last = Some(t), +    }, +    if (size == 1) last else None, +  // TODO toFuture(), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * item. If the source Observable emits more than one item or no items, throw an `NoSuchElementException`., +   * @throws NoSuchElementException, +   *             if the source emits more than one item or no items, +    new BlockingObservable[T](asJavaObservable.toBlocking), +    new BlockingObservable[T](asJavaObservable.toBlocking), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/observables/BlockingObservable.scala, + * You can obtain a BlockingObservable from an Observable using [[rx.lang.scala.Observable.toBlockingObservable]], +// constructor is private because users should use Observable.toBlockingObservable, +class BlockingObservable[+T] private[scala] (val asJava: rx.observables.BlockingObservable[_ <: T]) , +, +  // last                 -> use toIterable.last, +  // lastOrDefault        -> use toIterable.lastOption, +  // first                -> use toIterable.head, +  // firstOrDefault       -> use toIterable.headOption, +  // single(predicate)    -> use filter and single, +  // singleOrDefault      -> use singleOption, +   * If this {@link Observable} completes after emitting a single item, return that item,, +   * otherwise throw an exception., +   * <p>, +   * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/B.single.png">, +   * @return the single item emitted by the {@link Observable}, +   * If this {@link Observable} completes after emitting a single item, return an Option containing, +   * this item, otherwise return {@code None}., +    var size: Int = 0, +    var last: Option[T] = None, +    for (t <- toIterable) {, +      size += 1, +      last = Some(t), +    }, +    if (size == 1) last else None, +  // TODO toFuture(), +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * item. If the source Observable emits more than one item or no items, throw an `NoSuchElementException`., +   * @throws NoSuchElementException, +   *             if the source emits more than one item or no items, +    new BlockingObservable[T](asJavaObservable.toBlocking), +    new BlockingObservable[T](asJavaObservable.toBlocking), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/observables/BlockingObservable.scala, + * You can obtain a BlockingObservable from an Observable using [[rx.lang.scala.Observable.toBlockingObservable]], +// constructor is private because users should use Observable.toBlockingObservable, +class BlockingObservable[+T] private[scala] (val asJava: rx.observables.BlockingObservable[_ <: T]) , +, +  // last                 -> use toIterable.last, +  // lastOrDefault        -> use toIterable.lastOption, +  // first                -> use toIterable.head, +  // firstOrDefault       -> use toIterable.headOption, +  // single(predicate)    -> use filter and single, +  // singleOrDefault      -> use singleOption, +   * If this {@link Observable} completes after emitting a single item, return that item,, +   * otherwise throw an exception., +   * <p>, +   * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/B.single.png">, +   * @return the single item emitted by the {@link Observable}, +   * If this {@link Observable} completes after emitting a single item, return an Option containing, +   * this item, otherwise return {@code None}.]