[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @deprecated Replaced by {@link #from(Future)}, +     * <p>, +     * This is blocking so the Subscription returned when calling {@link #subscribe(Observer)} does nothing., +     * , +     * @param future, +     *            the source {@link Future}, +     * @param <T>, +     *            the type of of object that the future's returns and the type emitted by the resulting, +     *            Observable, +     * @return an Observable that emits the item from the source Future, +     */, +    public static <T> Observable<T> from(Future<T> future) {, +        return create(OperationToObservableFuture.toObservableFuture(future));, +    }, +, +    /**, +     * Converts an Future to an Observable sequence., +     * , +     * Any object that supports the {@link Future} interface can be converted into an Observable that emits, +     * the return value of the get() method in the object, by passing the object into the <code>toObservable</code> method., +     * @deprecated Replaced by {@link #from(Future, long, TimeUnit)}, +     * Converts an Future to an Observable sequence., +     * , +     * Any object that supports the {@link Future} interface can be converted into an Observable that emits, +     * the return value of the get() method in the object, by passing the object into the <code>toObservable</code> method., +     * The subscribe method on this synchronously so the Subscription returned doesn't nothing., +     * <p>, +     * This is blocking so the Subscription returned when calling {@link #subscribe(Observer)} does nothing., +     * , +     * @param future, +     *            the source {@link Future}, +     * @param timeout, +     *            the maximum time to wait, +     * @param unit, +     *            the time unit of the time argument, +     * @param <T>, +     *            the type of of object that the future's returns and the type emitted by the resulting, +     *            Observable, +     * @return an Observable that emits the item from the source Future, +     */, +    public static <T> Observable<T> from(Future<T> future, long timeout, TimeUnit unit) {, +        return create(OperationToObservableFuture.toObservableFuture(future, timeout, unit));, +    }, +, +    /**, +     * @deprecated Use {@link #from(Object...)}]