[+++ b/CHANGES.md, +### Version 1.0.0 â€“ November 18th 2014 ([Maven Central](http://search.maven.org/#artifactdetails%7Cio.reactivex%7Crxjava%7C1.0.0%7C)) ###, +, +After 2+ years of internal and open source development, 3600+ commits, 100+ releases, and with the help of 97 contributors RxJava has hit version 1.0.0., +, +Thank you @headinthebox @zsxwing @samuelgruetter @akarnokd @quidryan @DavidMGross @abersnaze @jmhofer @mairbek @mttkay @daveray @mattrjacobs @michaeldejong @MarioAriasC @johngmyers @pron @jbripley @davidmoten @gliptak @johnhmarks @jloisel @billyy @prabirshrestha @ragalie @abliss @dpsm @daschl @thegeez and the [many other contributors](https://github.com/ReactiveX/RxJava/graphs/contributors) and those who have reported bugs, tweeted, blogged or presented about RxJava., +, +The quality of this release could not have been achieved without all of your help. Thank you for your involvement and for building a community around this project. , +, +, +### JVM Language Adaptors & Subprojects, +, +As of 1.0 the JVM language adapters and other subprojects no longer live under RxJava but have been separated out into their own projects with their own release cycles:, +, +- [RxAndroid](https://github.com/ReactiveX/RxAndroid), +- [RxScala](https://github.com/ReactiveX/RxScala), +- [RxGroovy](https://github.com/ReactiveX/RxGroovy), +- [RxClojure](https://github.com/ReactiveX/RxClojure), +- [RxKotlin](https://github.com/ReactiveX/RxKotlin), +- [RxJRuby](https://github.com/ReactiveX/RxJRuby), +- [RxJavaReactiveStreams](https://github.com/ReactiveX/RxJavaReactiveStreams), +- [RxJavaString](https://github.com/ReactiveX/RxJavaString), +- [RxJavaGuava](https://github.com/ReactiveX/RxJavaGuava), +- [RxRoboVM](https://github.com/ReactiveX/RxRoboVM), +- [RxSwing](https://github.com/ReactiveX/RxSwing), +- [RxQuasar](https://github.com/ReactiveX/RxQuasar), +- [RxJavaJoins](https://github.com/ReactiveX/RxJavaJoins), +- [RxJavaComputationExpressions](https://github.com/ReactiveX/RxJavaComputationExpressions), +- [RxJavaAsyncUtil](https://github.com/ReactiveX/RxJavaAsyncUtil), +- [RxJavaDebug](https://github.com/ReactiveX/RxJavaDebug), +- [RxJavaMath](https://github.com/ReactiveX/RxJavaMath), +- [RxJavaFX](https://github.com/ReactiveX/RxJavaFX), +- [RxApacheHttp](https://github.com/ReactiveX/RxApacheHttp), +, +, +### Versioning, +, +Version 1.x is now a stable API and will be supported for several years. , +, +Minor 1.x increments (such as 1.1, 1.2, etc) will occur when non-trivial new functionality is added or significant enhancements or bug fixes occur that may have behavioral changes that may affect some edge cases (such as dependence on behavior resulting from a bug). An example of an enhancement that would classify as this is adding reactive pull backpressure support to an operator that previously did not support it. This should be backwards compatible but does behave differently., +, +Patch 1.x.y increments (such as 1.0.0 -> 1.0.1, 1.3.1 -> 1.3.2, etc) will occur for bug fixes and trivial functionality (like adding a method overload)., +, +### Roadmap and Known Issues, +, +- [1.0.x milestone](https://github.com/ReactiveX/RxJava/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.x) with known issues, +- [1.1 milestone](https://github.com/ReactiveX/RxJava/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.1) with additional support for reactive pull backpressure, +- [1.x](https://github.com/ReactiveX/RxJava/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.x) is a catch all for other items that may be pursued in 1.2, 1.3 and later versions., +, +, +, +### Change Log, +, +- all deprecated methods and types from v0.20 and earlier are deleted, +- now published to groupId `io.reactivex` instead of `com.netflix.rxjava`, +- artifactId is now `rxjava` instead of `rxjava-core`, +, +```, +io.reactivex:rxjava:1.0.0, +```, +, +Following are specific changes from 0.20 to 1.0 to be aware of:, +, +#### groupBy/groupByUntil, +, +The `groupByUntil` operator was removed by collapsing its behavior into `groupBy`. Previously on `groupBy` when a child `GroupedObservable` was unsubscribed it would internally retain the state and ignore all future `onNext` for that key., +, +This matched behavior in Rx.Net but was found to be non-obvious and almost everyone using `groupBy` on long-lived streams actually wanted the behavior of `groupByUntil` where an unsubscribed `GroupedObservable` would clean up the resources and then if `onNext` for that key arrived again a new `GroupedObservable` would be emitted., +, +Adding backpressure (reactive pull) to `groupByUntil` was found to not work easily with its signatures so before 1.0 Final it was decided to collapse `groupBy` and `groupByUntil`. Further details on this can be found in [Pull Request 1727](https://github.com/ReactiveX/RxJava/pull/1727)., +, +Here is an example of how `groupBy` now behaves when a child `GroupedObservable` is unsubscribed (using `take` here):, +, +```java, +// odd/even into lists of 10, +Observable.range(1, 100), +        .groupBy(n -> n % 2 == 0), +        .flatMap(g -> {, +            return g.take(10).toList();, +        }).forEach(System.out::println);, +```, +, +```, +[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], +[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], +[21, 23, 25, 27, 29, 31, 33, 35, 37, 39], +[22, 24, 26, 28, 30, 32, 34, 36, 38, 40], +[41, 43, 45, 47, 49, 51, 53, 55, 57, 59], +[42, 44, 46, 48, 50, 52, 54, 56, 58, 60], +[61, 63, 65, 67, 69, 71, 73, 75, 77, 79], +[62, 64, 66, 68, 70, 72, 74, 76, 78, 80], +[81, 83, 85, 87, 89, 91, 93, 95, 97, 99], +[82, 84, 86, 88, 90, 92, 94, 96, 98, 100], +```, +, +Previously this would have only emitted 2 groups and ignored all subsequent values:, +, +```, +[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], +[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]]