[+++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatTest.java, +    @Test(timeout = 30000), +        executor.awaitTermination(20000, TimeUnit.MILLISECONDS);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatTest.java, +    @Test(timeout = 30000), +        executor.awaitTermination(20000, TimeUnit.MILLISECONDS);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableReplayTest.java, +        Flowable<Long> output = cached.observeOn(Schedulers.computation(), false, 1024);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatTest.java, +    @Test(timeout = 30000), +        executor.awaitTermination(20000, TimeUnit.MILLISECONDS);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableReplayTest.java, +        Flowable<Long> output = cached.observeOn(Schedulers.computation(), false, 1024);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableWindowWithSizeTest.java, +        // assertTrue(count.get() < 100000); // disabled: a small hiccup in the consumption may allow the source to run to completion, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatTest.java, +    @Test(timeout = 30000), +        executor.awaitTermination(20000, TimeUnit.MILLISECONDS);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableReplayTest.java, +        Flowable<Long> output = cached.observeOn(Schedulers.computation(), false, 1024);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableWindowWithSizeTest.java, +        // assertTrue(count.get() < 100000); // disabled: a small hiccup in the consumption may allow the source to run to completion, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableConcatTest.java, +    @Test(timeout = 30000), +        executor.awaitTermination(20000, TimeUnit.MILLISECONDS);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatTest.java, +    @Test(timeout = 30000), +        executor.awaitTermination(20000, TimeUnit.MILLISECONDS);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableReplayTest.java, +        Flowable<Long> output = cached.observeOn(Schedulers.computation(), false, 1024);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableWindowWithSizeTest.java, +        // assertTrue(count.get() < 100000); // disabled: a small hiccup in the consumption may allow the source to run to completion, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableConcatTest.java, +    @Test(timeout = 30000), +        executor.awaitTermination(20000, TimeUnit.MILLISECONDS);, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableWindowWithSizeTest.java, +        // assertTrue(count.get() < 100000); // disabled: a small hiccup in the consumption may allow the source to run to completion]