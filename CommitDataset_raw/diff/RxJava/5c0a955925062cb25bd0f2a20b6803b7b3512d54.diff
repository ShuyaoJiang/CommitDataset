[+++ b/src/main/java/rx/internal/operators/OperatorDoOnSubscribe.java, +     * @param subscribe the action that gets invoked when the modified {@link rx.Observable} is subscribed, +++ b/src/main/java/rx/internal/operators/OperatorDoOnSubscribe.java, +     * @param subscribe the action that gets invoked when the modified {@link rx.Observable} is subscribed, +++ b/src/main/java/rx/subjects/SerializedSubject.java, +/**, + * Wraps a {@link Subject} so that it is safe to call its various {@code on} methods from different threads., + * <p>, + * When you use an ordinary {@link Subject} as a {@link Subscriber}, you must take care not to call its, + * {@link Subscriber#onNext} method (or its other {@code on} methods) from multiple threads, as this could lead, + * to non-serialized calls, which violates the Observable contract and creates an ambiguity in the resulting, + * Subject., + * <p>, + * To protect a {@code Subject} from this danger, you can convert it into a {@code SerializedSubject} with code, + * like the following:, + * <p><pre>{@code, + * mySafeSubject = new SerializedSubject( myUnsafeSubject );, + * }</pre>, + */]