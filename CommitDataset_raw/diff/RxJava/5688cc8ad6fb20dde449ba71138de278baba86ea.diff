[+++ b/src/main/java/io/reactivex/Completable.java, +    , +    /**, +     * Returns a Completable instance that runs the given Action for each subscriber and, +     * emits either an unchecked exception or simply completes., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code fromAction} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param run the runnable to run for each subscriber, +     * @return the new Completable instance, +     * @throws NullPointerException if run is null, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public static Completable fromAction(final Action run) {, +        Objects.requireNonNull(run, "run is null");, +        return new CompletableFromAction(run);, +    }, +, +     * Returns a Completable instance that subscribes to the given publisher, ignores all values and, +     * emits only the terminal event., +     *  <dd>{@code fromPublisher} does not operate by default on a particular {@link Scheduler}.</dd>, +     * @param <T> the type of the publisher, +     * @param publisher the Publisher instance to subscribe to, not null, +     * @throws NullPointerException if publisher is null, +    public static <T> Completable fromPublisher(final Publisher<T> publisher) {, +        Objects.requireNonNull(publisher, "publisher is null");, +        return new CompletableFromPublisher<T>(publisher);, +    public final Completable doOnComplete(Action onComplete) {, +                onComplete, Functions.EMPTY_ACTION,, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +    public final Completable doOnDispose(Action onDispose) {, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION,, +                Functions.EMPTY_ACTION, onDispose);, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION,, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +            final Action onComplete, , +            final Action onTerminate,, +            final Action onAfterTerminate,, +            final Action onDisposed) {, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION,, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +    public final Completable doOnTerminate(final Action onTerminate) {, +                Functions.EMPTY_ACTION, onTerminate,, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +    public final Completable doAfterTerminate(final Action onAfterTerminate) {, +                onAfterTerminate, Functions.EMPTY_ACTION,, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +    public final Disposable subscribe(final Action onComplete, final Consumer<? super Throwable> onError) {, +     * Subscribes to this Completable and calls the given Action when this Completable, +    public final Disposable subscribe(final Action onComplete) {, +++ b/src/main/java/io/reactivex/Completable.java, +    , +    /**, +     * Returns a Completable instance that runs the given Action for each subscriber and, +     * emits either an unchecked exception or simply completes., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code fromAction} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param run the runnable to run for each subscriber, +     * @return the new Completable instance, +     * @throws NullPointerException if run is null, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public static Completable fromAction(final Action run) {, +        Objects.requireNonNull(run, "run is null");, +        return new CompletableFromAction(run);, +    }, +, +     * Returns a Completable instance that subscribes to the given publisher, ignores all values and, +     * emits only the terminal event., +     *  <dd>{@code fromPublisher} does not operate by default on a particular {@link Scheduler}.</dd>, +     * @param <T> the type of the publisher, +     * @param publisher the Publisher instance to subscribe to, not null, +     * @throws NullPointerException if publisher is null, +    public static <T> Completable fromPublisher(final Publisher<T> publisher) {, +        Objects.requireNonNull(publisher, "publisher is null");, +        return new CompletableFromPublisher<T>(publisher);, +    public final Completable doOnComplete(Action onComplete) {, +                onComplete, Functions.EMPTY_ACTION,, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +    public final Completable doOnDispose(Action onDispose) {, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION,, +                Functions.EMPTY_ACTION, onDispose);, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION,, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +            final Action onComplete, , +            final Action onTerminate,, +            final Action onAfterTerminate,, +            final Action onDisposed) {, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION,, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +    public final Completable doOnTerminate(final Action onTerminate) {, +                Functions.EMPTY_ACTION, onTerminate,, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +    public final Completable doAfterTerminate(final Action onAfterTerminate) {, +                onAfterTerminate, Functions.EMPTY_ACTION,, +                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +    public final Disposable subscribe(final Action onComplete, final Consumer<? super Throwable> onError) {]