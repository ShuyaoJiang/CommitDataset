[+++ b/src/main/java/rx/Producer.java, +     * <p>, +     * Requests are additive but if a sequence of requests totals more than {@code Long.MAX_VALUE} then , +     * {@code Long.MAX_VALUE} requests will be actioned and the extras <i>may</i> be ignored. Arriving at , +     * {@code Long.MAX_VALUE} by addition of requests cannot be assumed to disable backpressure. For example, , +     * the code below may result in {@code Long.MAX_VALUE} requests being actioned only., +     * , +     * <pre>, +     * request(100);, +     * request(Long.MAX_VALUE-1);, +     * </pre> , +++ b/src/main/java/rx/Producer.java, +     * <p>, +     * Requests are additive but if a sequence of requests totals more than {@code Long.MAX_VALUE} then , +     * {@code Long.MAX_VALUE} requests will be actioned and the extras <i>may</i> be ignored. Arriving at , +     * {@code Long.MAX_VALUE} by addition of requests cannot be assumed to disable backpressure. For example, , +     * the code below may result in {@code Long.MAX_VALUE} requests being actioned only., +     * , +     * <pre>, +     * request(100);, +     * request(Long.MAX_VALUE-1);, +     * </pre> , +++ b/src/main/java/rx/Subscriber.java, +     * <p>, +     * Requests are additive but if a sequence of requests totals more than {@code Long.MAX_VALUE} then , +     * {@code Long.MAX_VALUE} requests will be actioned and the extras <i>may</i> be ignored. Arriving at , +     * {@code Long.MAX_VALUE} by addition of requests cannot be assumed to disable backpressure. For example, , +     * the code below may result in {@code Long.MAX_VALUE} requests being actioned only., +     * , +     * <pre>, +     * request(100);, +     * request(Long.MAX_VALUE-1);, +     * </pre>, +++ b/src/main/java/rx/Producer.java, +     * <p>, +     * Requests are additive but if a sequence of requests totals more than {@code Long.MAX_VALUE} then , +     * {@code Long.MAX_VALUE} requests will be actioned and the extras <i>may</i> be ignored. Arriving at , +     * {@code Long.MAX_VALUE} by addition of requests cannot be assumed to disable backpressure. For example, , +     * the code below may result in {@code Long.MAX_VALUE} requests being actioned only., +     * , +     * <pre>, +     * request(100);, +     * request(Long.MAX_VALUE-1);, +     * </pre> , +++ b/src/main/java/rx/Subscriber.java, +     * <p>, +     * Requests are additive but if a sequence of requests totals more than {@code Long.MAX_VALUE} then , +     * {@code Long.MAX_VALUE} requests will be actioned and the extras <i>may</i> be ignored. Arriving at , +     * {@code Long.MAX_VALUE} by addition of requests cannot be assumed to disable backpressure. For example, , +     * the code below may result in {@code Long.MAX_VALUE} requests being actioned only., +     * , +     * <pre>, +     * request(100);, +     * request(Long.MAX_VALUE-1);, +     * </pre>, +++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +/**, + * Copyright 2015 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations under, + * the License., + */, +package rx.internal.operators;, +, +import java.util.concurrent.atomic.AtomicLong;, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +, +/**, + * Utility functions for use with backpressure., + *, + */, +final class BackpressureUtils {, +, +    /**, +     * Adds {@code n} to {@code requested} field and returns the value prior to, +     * addition once the addition is successful (uses CAS semantics). If, +     * overflows then sets {@code requested} field to {@code Long.MAX_VALUE}., +     * , +     * @param requested, +     *            atomic field updater for a request count, +     * @param object, +     *            contains the field updated by the updater, +     * @param n, +     *            the number of requests to add to the requested count, +     * @return requested value just prior to successful addition, +     */, +    static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +        // add n to field but check for overflow, +        while (true) {, +            long current = requested.get(object);, +            long next = current + n;]