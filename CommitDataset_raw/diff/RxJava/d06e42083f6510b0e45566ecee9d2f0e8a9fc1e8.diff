[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +   * This defaults to {@code Runtime.getRuntime().availableProcessors()} but can be overridden for use cases such as scheduling work on a computer cluster., +   * Schedules a cancelable action to be executed in delayTime., +  def schedule(action: Unit => Unit, delayTime: Duration): Subscription =, +        override def call(): Unit = action(), +      delayTime.length,, +      delayTime.unit), +   * Schedules a cancelable action to be executed immediately., +  def schedule(action: Unit => Unit): Subscription = this.asJavaWorker.schedule(, +      override def call(): Unit = action(), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +   * This defaults to {@code Runtime.getRuntime().availableProcessors()} but can be overridden for use cases such as scheduling work on a computer cluster., +   * Schedules a cancelable action to be executed in delayTime., +  def schedule(action: Unit => Unit, delayTime: Duration): Subscription =, +        override def call(): Unit = action(), +      delayTime.length,, +      delayTime.unit), +   * Schedules a cancelable action to be executed immediately., +  def schedule(action: Unit => Unit): Subscription = this.asJavaWorker.schedule(, +      override def call(): Unit = action(), +++ b/rxjava-core/src/test/java/rx/operators/OperatorPivotTest.java, +import java.util.Random;, +                            final ThreadLocal<Random> tlr = new ThreadLocal<Random>() {, +                                @Override, +                                protected Random initialValue() {, +                                    return new Random();, +                                }, +                            };, +                                    // give the other threads a shot., +                                    Thread.sleep(tlr.get().nextInt(10) + 1);, +                                } catch (InterruptedException ex) {, +                                    throw new RuntimeException("Interrupted [" + innerGroup.getKey() + "]: " + i);]