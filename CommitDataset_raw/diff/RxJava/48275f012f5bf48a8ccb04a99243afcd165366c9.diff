[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +, +  @Test def unsubscribeOnExample() {, +    val o = Observable[String] {, +      subscriber =>, +        subscriber.add(Subscription {, +          println("unsubscribe on " + Thread.currentThread().getName()), +        }), +        subscriber.onNext("RxScala"), +        subscriber.onCompleted(), +    }, +    o.unsubscribeOn(NewThreadScheduler()).subscribe(println(_)), +  }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +, +  @Test def unsubscribeOnExample() {, +    val o = Observable[String] {, +      subscriber =>, +        subscriber.add(Subscription {, +          println("unsubscribe on " + Thread.currentThread().getName()), +        }), +        subscriber.onNext("RxScala"), +        subscriber.onCompleted(), +    }, +    o.unsubscribeOn(NewThreadScheduler()).subscribe(println(_)), +  }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Asynchronously unsubscribes on the specified [[Scheduler]]., +   *, +   * @param scheduler the [[Scheduler]] to perform subscription and unsubscription actions on, +   * @return the source Observable modified so that its unsubscriptions happen on the specified [[Scheduler]], +   * @since 0.17, +   */, +  def unsubscribeOn(scheduler: Scheduler): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.unsubscribeOn(scheduler)), +  }, +, +  /**]