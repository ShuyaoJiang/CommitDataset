[+++ b/src/main/java/io/reactivex/observers/TestObserver.java, +    /**, +     * Asserts that this TestObserver received exactly one onNext value for which, +     * the provided predicate returns true., +     * @param valuePredicate, +     *            the predicate that receives the onNext value, +     *            and should return true for the expected value., +     * @return this, +     */, +    public final TestObserver<T> assertValue(Predicate<T> valuePredicate) {, +        int s = values.size();, +        if (s == 0) {, +            throw fail("No values");, +        }, +, +        boolean found = false;, +, +        try {, +            if (valuePredicate.test(values.get(0))) {, +                found = true;, +            }, +        } catch (Exception ex) {, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +, +        if (found) {, +            if (s != 1) {, +                throw fail("Value present but other values as well");, +            }, +        } else {, +            throw fail("Value not present");, +        }, +        return this;, +    }, +, +++ b/src/main/java/io/reactivex/observers/TestObserver.java, +    /**, +     * Asserts that this TestObserver received exactly one onNext value for which, +     * the provided predicate returns true., +     * @param valuePredicate, +     *            the predicate that receives the onNext value, +     *            and should return true for the expected value., +     * @return this, +     */, +    public final TestObserver<T> assertValue(Predicate<T> valuePredicate) {, +        int s = values.size();, +        if (s == 0) {, +            throw fail("No values");, +        }, +, +        boolean found = false;, +, +        try {, +            if (valuePredicate.test(values.get(0))) {, +                found = true;, +            }, +        } catch (Exception ex) {, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +, +        if (found) {, +            if (s != 1) {, +                throw fail("Value present but other values as well");, +            }, +        } else {, +            throw fail("Value not present");, +        }, +        return this;, +    }, +, +++ b/src/main/java/io/reactivex/subscribers/TestSubscriber.java, +    /**, +     * Asserts that this TestSubscriber received exactly one onNext value for which, +     * the provided predicate returns true., +     * @param valuePredicate, +     *            the predicate that receives the onNext value, +     *            and should return true for the expected value., +     * @return this, +     */, +    public final TestSubscriber<T> assertValue(Predicate<T> valuePredicate) {, +        int s = values.size();, +        if (s == 0) {, +            throw fail("No values");, +        }, +, +        boolean found = false;, +, +        try {, +            if (valuePredicate.test(values.get(0))) {, +                found = true;, +            }, +        } catch (Exception ex) {, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +, +        if (found) {, +            if (s != 1) {, +                throw fail("Value present but other values as well");, +            }, +        } else {]