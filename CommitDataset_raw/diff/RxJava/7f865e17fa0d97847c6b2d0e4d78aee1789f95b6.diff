[+++ b/src/main/java/io/reactivex/Observable.java, +        return create(new PublisherZipIterable<>(this, other, zipper));, +++ b/src/main/java/io/reactivex/Observable.java, +        return create(new PublisherZipIterable<>(this, other, zipper));, +++ b/src/main/java/io/reactivex/internal/operators/OperatorObserveOn.java, +++ b/src/main/java/io/reactivex/Observable.java, +        return create(new PublisherZipIterable<>(this, other, zipper));, +++ b/src/main/java/io/reactivex/internal/operators/OperatorObserveOn.java, +++ b/src/main/java/io/reactivex/internal/operators/OperatorUnsubscribeOn.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +                scheduler.scheduleDirect(() -> {, +                    s.cancel();, +                });, +++ b/src/main/java/io/reactivex/Observable.java, +        return create(new PublisherZipIterable<>(this, other, zipper));, +++ b/src/main/java/io/reactivex/internal/operators/OperatorObserveOn.java, +++ b/src/main/java/io/reactivex/internal/operators/OperatorUnsubscribeOn.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +                scheduler.scheduleDirect(() -> {, +                    s.cancel();, +                });, +++ b/src/main/java/io/reactivex/internal/operators/OperatorWithLatestFrom.java, +++ b/src/main/java/io/reactivex/Observable.java, +        return create(new PublisherZipIterable<>(this, other, zipper));, +++ b/src/main/java/io/reactivex/internal/operators/OperatorObserveOn.java, +++ b/src/main/java/io/reactivex/internal/operators/OperatorUnsubscribeOn.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +                scheduler.scheduleDirect(() -> {, +                    s.cancel();, +                });, +++ b/src/main/java/io/reactivex/internal/operators/OperatorWithLatestFrom.java, +++ b/src/main/java/io/reactivex/internal/operators/PublisherIterableSource.java, +import io.reactivex.internal.subscriptions.*;, +        boolean hasNext;, +        try {, +            hasNext = it.hasNext();, +        } catch (Throwable e) {, +            EmptySubscription.error(e, s);, +            return;, +        }, +        if (!hasNext) {, +            if (SubscriptionHelper.validateRequest(n)) {, +, +                long e = 0L;, +                while (r != 0L) {, +                    T v;, +                    try {, +                        v = it.next();, +                    } catch (Throwable ex) {, +                        subscriber.onError(ex);, +                    , +                    if (v == null) {, +                        subscriber.onError(new NullPointerException("Iterator returned a null element"));, +                        return;, +                    }, +                    , +                    , +                    , +                    boolean hasNext;, +                    try {, +                        hasNext = it.hasNext();, +                    } catch (Throwable ex) {, +                        subscriber.onError(ex);, +                        return;, +                    }, +                    if (!hasNext) {, +                    , +++ b/src/main/java/io/reactivex/Observable.java, +        return create(new PublisherZipIterable<>(this, other, zipper));, +++ b/src/main/java/io/reactivex/internal/operators/OperatorObserveOn.java, +++ b/src/main/java/io/reactivex/internal/operators/OperatorUnsubscribeOn.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +                scheduler.scheduleDirect(() -> {, +                    s.cancel();, +                });, +++ b/src/main/java/io/reactivex/internal/operators/OperatorWithLatestFrom.java, +++ b/src/main/java/io/reactivex/internal/operators/PublisherIterableSource.java, +import io.reactivex.internal.subscriptions.*;, +        boolean hasNext;, +        try {, +            hasNext = it.hasNext();, +        } catch (Throwable e) {, +            EmptySubscription.error(e, s);, +            return;, +        }, +        if (!hasNext) {, +            if (SubscriptionHelper.validateRequest(n)) {, +, +                long e = 0L;, +                while (r != 0L) {, +                    T v;, +                    try {, +                        v = it.next();, +                    } catch (Throwable ex) {, +                        subscriber.onError(ex);, +                    ]