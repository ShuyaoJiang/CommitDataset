[+++ b/rxjava-core/src/main/java/rx/operators/OperatorGroupBy.java, +                // if we receive onCompleted from our parent we onComplete children, +, +                if (completionCounter.get() == 0) {, +                    // special case if no children are running (such as an empty sequence), +            }, +                                _gps.subscribe(new Operator<T>(o) {, +, +                                    @Override, +                                    public void onCompleted() {, +                                        o.onCompleted();, +                                        completeInner();, +                                    }, +, +                                    @Override, +                                    public void onError(Throwable e) {, +                                        o.onError(e);, +                                    }, +, +                                    @Override, +                                    public void onNext(T t) {, +                                        o.onNext(t);, +                                    }, +, +                                });, +++ b/rxjava-core/src/main/java/rx/operators/OperatorGroupBy.java, +                // if we receive onCompleted from our parent we onComplete children, +, +                if (completionCounter.get() == 0) {, +                    // special case if no children are running (such as an empty sequence), +            }, +                                _gps.subscribe(new Operator<T>(o) {, +, +                                    @Override, +                                    public void onCompleted() {, +                                        o.onCompleted();, +                                        completeInner();, +                                    }, +, +                                    @Override, +                                    public void onError(Throwable e) {, +                                        o.onError(e);, +                                    }, +, +                                    @Override, +                                    public void onNext(T t) {, +                                        o.onNext(t);, +                                    }, +, +                                });, +++ b/rxjava-core/src/test/java/rx/operators/OperatorGroupByTest.java, +    @Test, +    public void testStaggeredCompletion() throws InterruptedException {, +        final AtomicInteger eventCounter = new AtomicInteger();, +        final CountDownLatch latch = new CountDownLatch(1);, +        Observable.range(0, 100), +                .groupBy(new Func1<Integer, Integer>() {, +, +                    @Override, +                    public Integer call(Integer i) {, +                        return i % 2;, +                    }, +                }), +                .flatMap(new Func1<GroupedObservable<Integer, Integer>, Observable<Integer>>() {, +, +                    @Override, +                    public Observable<Integer> call(GroupedObservable<Integer, Integer> group) {, +                        if (group.getKey() == 0) {, +                            return group.observeOn(Schedulers.newThread()).delay(200, TimeUnit.MILLISECONDS);, +                        } else {, +                            return group.observeOn(Schedulers.newThread());, +                        }, +                    }, +                }), +                .subscribe(new Observer<Integer>() {, +, +                    @Override, +                    public void onCompleted() {, +                        latch.countDown();, +                    }, +, +                    @Override, +                    public void onError(Throwable e) {, +                        e.printStackTrace();, +                        latch.countDown();, +                    }, +, +                    @Override, +                    public void onNext(Integer s) {, +                        eventCounter.incrementAndGet();, +                        System.out.println("=> " + s);, +                    }, +                });, +, +        if (!latch.await(2000, TimeUnit.MILLISECONDS)) {, +            fail("timed out");, +        }, +, +        assertEquals(100, eventCounter.get());, +    }]