[+++ b/src/main/java/io/reactivex/Observable.java, +    public final <U> Observable<T> debounce(Function<? super T, ? extends Publisher<U>> debounceSelector) {, +        return lift(new OperatorDebounce<>(debounceSelector));, +    }, +, +    public final Observable<T> debounce(long timeout, TimeUnit unit) {, +        return debounce(timeout, unit, Schedulers.computation());, +    }, +, +    public final Observable<T> debounce(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return lift(new OperatorDebounceTimed<>(timeout, unit, scheduler));, +    }, +    , +    public final Observable<T> throttleWithTimeout(long timeout, TimeUnit unit) {, +        return debounce(timeout, unit);, +    }, +    , +    public final Observable<T> throttleWithTimeout(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return debounce(timeout, unit, scheduler);, +    }, +, +++ b/src/main/java/io/reactivex/Observable.java, +    public final <U> Observable<T> debounce(Function<? super T, ? extends Publisher<U>> debounceSelector) {, +        return lift(new OperatorDebounce<>(debounceSelector));, +    }, +, +    public final Observable<T> debounce(long timeout, TimeUnit unit) {, +        return debounce(timeout, unit, Schedulers.computation());, +    }, +, +    public final Observable<T> debounce(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return lift(new OperatorDebounceTimed<>(timeout, unit, scheduler));, +    }, +    , +    public final Observable<T> throttleWithTimeout(long timeout, TimeUnit unit) {, +        return debounce(timeout, unit);, +    }, +    , +    public final Observable<T> throttleWithTimeout(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return debounce(timeout, unit, scheduler);, +    }, +, +++ b/src/main/java/io/reactivex/internal/operators/OperatorDebounce.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import java.util.concurrent.atomic.*;, +import java.util.function.Function;, +, +import org.reactivestreams.*;, +, +import io.reactivex.Observable.Operator;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.subscribers.DisposableSubscriber;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +import io.reactivex.internal.util.BackpressureHelper;, +import io.reactivex.subscribers.SerializedSubscriber;, +, +public final class OperatorDebounce<T, U> implements Operator<T, T> {, +    final Function<? super T, ? extends Publisher<U>> debounceSelector;, +, +    public OperatorDebounce(Function<? super T, ? extends Publisher<U>> debounceSelector) {, +        this.debounceSelector = debounceSelector;, +    }, +    , +    @Override, +    public Subscriber<? super T> apply(Subscriber<? super T> t) {, +        return new DebounceSubscriber<>(new SerializedSubscriber<>(t), debounceSelector);, +    }, +    , +    static final class DebounceSubscriber<T, U> extends AtomicLong implements Subscriber<T>, Subscription {, +        /** */, +        private static final long serialVersionUID = 6725975399620862591L;, +        final Subscriber<? super T> actual;, +        final Function<? super T, ? extends Publisher<U>> debounceSelector;, +        , +        volatile boolean gate;, +, +        Subscription s;, +        , +        volatile Disposable debouncer;, +        @SuppressWarnings("rawtypes"), +        static final AtomicReferenceFieldUpdater<DebounceSubscriber, Disposable> DEBOUNCER =, +                AtomicReferenceFieldUpdater.newUpdater(DebounceSubscriber.class, Disposable.class, "debouncer");, +        , +        static final Disposable CANCELLED = () -> { };, +        , +        public DebounceSubscriber(Subscriber<? super T> actual,]