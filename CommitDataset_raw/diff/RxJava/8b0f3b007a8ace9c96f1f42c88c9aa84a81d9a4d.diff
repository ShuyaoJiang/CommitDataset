[+++ b/gradle.properties, +version=0.15.2-SNAPSHOT, +++ b/gradle.properties, +version=0.15.2-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return merge(from(t1, t2));, +        return merge(from(t1, t2, t3));, +        return merge(from(t1, t2, t3, t4));, +        return merge(from(t1, t2, t3, t4, t5));, +        return merge(from(t1, t2, t3, t4, t5, t6));, +        return merge(from(t1, t2, t3, t4, t5, t6, t7));, +        return merge(from(t1, t2, t3, t4, t5, t6, t7, t8));, +        return merge(from(t1, t2, t3, t4, t5, t6, t7, t8, t9));, +    }, +, +    /**, +     * Flattens a sequence of Observables emitted by an Observable into one Observable, without any transformation., +     * The number of concurrent subscriptions to the Observables is limited by maxConcurrent., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/merge.png">, +     * <p>, +     * You can combine the items emitted by multiple Observables so that they, +     * act like a single Observable, by using the {@code merge} method., +     * , +     * @param source an Observable that emits Observables, +     * @param maxConcurrent the maximum number of Observables being subscribed to concurrently, +     * @return an Observable that emits items that are the result of flattening, +     *         the items emitted by the Observables emitted by the, +     *         {@code source} Observable, +     * @throw IllegalArgumentException if maxConcurrent <= 0, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#merge">RxJava Wiki: merge()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh211914(v=vs.103).aspx">MSDN: Observable.Merge</a>, +     */, +    public static <T> Observable<T> merge(Observable<? extends Observable<? extends T>> source, int maxConcurrent) {, +        return create(OperationMerge.merge(source, maxConcurrent));, +    }, +, +    /**, +     * Flattens an Observable Iterable into one Observable, without any transformation., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/merge.png">, +     * <p>, +     * You can combine the items emitted by multiple Observables so that they, +     * act like a single Observable, by using the {@code merge} method., +     * , +     * @param sequences the Observable Iterable, +     * @return an Observable that emits items that are the result of flattening, +     *         the items emitted by the Observables in the Iterable, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#merge">RxJava Wiki: merge()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229590(v=vs.103).aspx">MSDN: Observable.Merge</a>, +     */, +    public static <T> Observable<T> merge(Iterable<? extends Observable<? extends T>> sequences) {, +        return merge(from(sequences));, +    }, +, +    /**, +     * Flattens an Observable Iterable into one Observable, without any transformation., +     * The number of concurrent subscriptions to the Observables is limited by maxConcurrent., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/merge.png">, +     * <p>, +     * You can combine the items emitted by multiple Observables so that they, +     * act like a single Observable, by using the {@code merge} method., +     * , +     * @param sequences the Observable Iterable, +     * @param maxConcurrent the maximum number of Observables being subscribed to concurrently, +     * @return an Observable that emits items that are the result of flattening, +     *         the items emitted by the Observables in the Iterable, +     * @throw IllegalArgumentException if maxConcurrent <= 0, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#merge">RxJava Wiki: merge()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229923(v=vs.103).aspx">MSDN: Observable.Merge</a>, +     */, +    public static <T> Observable<T> merge(Iterable<? extends Observable<? extends T>> sequences, int maxConcurrent) {, +        return merge(from(sequences), maxConcurrent);, +    }, +, +    /**, +     * Flattens an Observable Iterable into one Observable, without any transformation., +     * The number of concurrent subscriptions to the Observables is limited by maxConcurrent., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/merge.png">, +     * <p>, +     * You can combine the items emitted by multiple Observables so that they, +     * act like a single Observable, by using the {@code merge} method., +     * , +     * @param sequences the Observable Iterable, +     * @param maxConcurrent the maximum number of Observables being subscribed to concurrently, +     * @param scheduler the scheduler to traversal the Observable array on, +     * @return an Observable that emits items that are the result of flattening, +     *         the items emitted by the Observables in the Iterable, +     * @throw IllegalArgumentException if maxConcurrent <= 0, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#merge">RxJava Wiki: merge()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh244329(v=vs.103).aspx">MSDN: Observable.Merge</a>, +     */, +    public static <T> Observable<T> merge(Iterable<? extends Observable<? extends T>> sequences, int maxConcurrent, Scheduler scheduler) {, +        return merge(from(sequences, scheduler), maxConcurrent);, +    }, +, +    /**, +     * Flattens an Observable Iterable into one Observable, without any transformation.]