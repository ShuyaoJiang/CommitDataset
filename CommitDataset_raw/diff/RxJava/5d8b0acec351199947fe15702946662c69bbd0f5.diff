[+++ b/src/main/java/io/reactivex/internal/observers/LambdaObserver.java, +        } else {, +            RxJavaPlugins.onError(t);, +++ b/src/main/java/io/reactivex/internal/observers/LambdaObserver.java, +        } else {, +            RxJavaPlugins.onError(t);, +++ b/src/test/java/io/reactivex/internal/observers/LambdaObserverTest.java, +import java.io.IOException;, +, +    @Test, +    public void disposedObserverShouldReportErrorOnGlobalErrorHandler() {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +        try {, +            final List<Throwable> observerErrors = Collections.synchronizedList(new ArrayList<Throwable>());, +, +            LambdaObserver<Integer> o = new LambdaObserver<Integer>(Functions.<Integer>emptyConsumer(),, +                    new Consumer<Throwable>() {, +                        @Override, +                        public void accept(Throwable t) {, +                            observerErrors.add(t);, +                        }, +                    },, +                    Functions.EMPTY_ACTION,, +                    Functions.<Disposable>emptyConsumer());, +, +            o.dispose();, +            o.onError(new IOException());, +            o.onError(new IOException());, +, +            assertTrue(observerErrors.isEmpty());, +            TestHelper.assertUndeliverable(errors, 0, IOException.class);, +            TestHelper.assertUndeliverable(errors, 1, IOException.class);, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }]