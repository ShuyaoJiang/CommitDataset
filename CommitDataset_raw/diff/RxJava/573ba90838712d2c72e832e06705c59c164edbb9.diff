[+++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +import rx.subscriptions.Subscriptions;, +        assertEquals("three", Observable.toObservable("one", "two", "three").last()), +    }, +, +    @Test, +    public void testLastWithPredicate() {, +        assertEquals("two", Observable.toObservable("one", "two", "three").last({ x -> x.length() == 3})), +    public void testTakeLast() {   , +        new TestFactory().getObservable().takeLast(1).subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received("hello_1");, +    }, +, +    @Test, +            return Subscriptions.empty();, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +import rx.subscriptions.Subscriptions;, +        assertEquals("three", Observable.toObservable("one", "two", "three").last()), +    }, +, +    @Test, +    public void testLastWithPredicate() {, +        assertEquals("two", Observable.toObservable("one", "two", "three").last({ x -> x.length() == 3})), +    public void testTakeLast() {   , +        new TestFactory().getObservable().takeLast(1).subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received("hello_1");, +    }, +, +    @Test, +            return Subscriptions.empty();, +++ b/language-adaptors/rxjava-jruby/src/main/java/rx/lang/jruby/JRubyAdaptor.java, +            String script = "mockApiCall.getObservable().takeLast(1).subscribe(lambda{|result| a.received(result)})";, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +import rx.subscriptions.Subscriptions;, +        assertEquals("three", Observable.toObservable("one", "two", "three").last()), +    }, +, +    @Test, +    public void testLastWithPredicate() {, +        assertEquals("two", Observable.toObservable("one", "two", "three").last({ x -> x.length() == 3})), +    public void testTakeLast() {   , +        new TestFactory().getObservable().takeLast(1).subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received("hello_1");, +    }, +, +    @Test, +            return Subscriptions.empty();, +++ b/language-adaptors/rxjava-jruby/src/main/java/rx/lang/jruby/JRubyAdaptor.java, +            String script = "mockApiCall.getObservable().takeLast(1).subscribe(lambda{|result| a.received(result)})";, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ScalaAdaptor.scala, +    @Test def testTakeLast() {, +        numbers.takeLast(1).subscribe((callback: Int) => {, +            println("testTakeLast: onNext -> got " + callback), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +import rx.subscriptions.Subscriptions;, +        assertEquals("three", Observable.toObservable("one", "two", "three").last()), +    }, +, +    @Test, +    public void testLastWithPredicate() {, +        assertEquals("two", Observable.toObservable("one", "two", "three").last({ x -> x.length() == 3})), +    public void testTakeLast() {   , +        new TestFactory().getObservable().takeLast(1).subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received("hello_1");, +    }, +, +    @Test, +            return Subscriptions.empty();, +++ b/language-adaptors/rxjava-jruby/src/main/java/rx/lang/jruby/JRubyAdaptor.java, +            String script = "mockApiCall.getObservable().takeLast(1).subscribe(lambda{|result| a.received(result)})";, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ScalaAdaptor.scala, +    @Test def testTakeLast() {, +        numbers.takeLast(1).subscribe((callback: Int) => {, +            println("testTakeLast: onNext -> got " + callback), +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns the last element of an observable sequence with a specified source., +     * @return the last element in the observable sequence., +    public static <T> T last(final Observable<T> that) {, +        T result = null;, +        for (T value : that.toIterable()) {, +            result = value;, +        }, +        return result;, +    }, +, +    /**, +     * Returns the last element of an observable sequence that matches the predicate., +     * , +     * @param that, +     *            the source Observable, +     * @param predicate, +     *            a predicate function to evaluate for elements in the sequence., +     * @return the last element in the observable sequence., +     */, +    public static <T> T last(final Observable<T> that, final Func1<T, Boolean> predicate) {, +        return last(that.filter(predicate));, +    }, +, +    /**, +     * Returns the last element of an observable sequence that matches the predicate.]