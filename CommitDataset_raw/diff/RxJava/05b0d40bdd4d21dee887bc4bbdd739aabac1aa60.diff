[+++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingle.java, +import io.reactivex.exceptions.Exceptions;, +import io.reactivex.internal.queue.SpscLinkedArrayQueue;, +            this.queue = new SpscLinkedArrayQueue<T>(prefetch);, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingle.java, +import io.reactivex.exceptions.Exceptions;, +import io.reactivex.internal.queue.SpscLinkedArrayQueue;, +            this.queue = new SpscLinkedArrayQueue<T>(prefetch);, +++ b/src/test/java/io/reactivex/internal/operators/mixed/ObservableConcatMapMaybeTest.java, +, +    @Test, +    public void checkUnboundedInnerQueue() {, +        MaybeSubject<Integer> ms = MaybeSubject.create();, +        , +        @SuppressWarnings("unchecked"), +        TestObserver<Integer> to = Observable, +                .fromArray(ms, Maybe.just(2), Maybe.just(3), Maybe.just(4)), +                .concatMapMaybe(Functions.<Maybe<Integer>>identity(), 2), +                .test();, +, +        to.assertEmpty();, +, +        ms.onSuccess(1);, +, +        to.assertResult(1, 2, 3, 4);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingle.java, +import io.reactivex.exceptions.Exceptions;, +import io.reactivex.internal.queue.SpscLinkedArrayQueue;, +            this.queue = new SpscLinkedArrayQueue<T>(prefetch);, +++ b/src/test/java/io/reactivex/internal/operators/mixed/ObservableConcatMapMaybeTest.java, +, +    @Test, +    public void checkUnboundedInnerQueue() {, +        MaybeSubject<Integer> ms = MaybeSubject.create();, +        , +        @SuppressWarnings("unchecked"), +        TestObserver<Integer> to = Observable, +                .fromArray(ms, Maybe.just(2), Maybe.just(3), Maybe.just(4)), +                .concatMapMaybe(Functions.<Maybe<Integer>>identity(), 2), +                .test();, +, +        to.assertEmpty();, +, +        ms.onSuccess(1);, +, +        to.assertResult(1, 2, 3, 4);, +    }, +++ b/src/test/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingleTest.java, +, +    @Test, +    public void checkUnboundedInnerQueue() {, +        SingleSubject<Integer> ss = SingleSubject.create();, +        , +        @SuppressWarnings("unchecked"), +        TestObserver<Integer> to = Observable, +                .fromArray(ss, Single.just(2), Single.just(3), Single.just(4)), +                .concatMapSingle(Functions.<Single<Integer>>identity(), 2), +                .test();, +, +        to.assertEmpty();, +, +        ss.onSuccess(1);, +, +        to.assertResult(1, 2, 3, 4);, +    }]