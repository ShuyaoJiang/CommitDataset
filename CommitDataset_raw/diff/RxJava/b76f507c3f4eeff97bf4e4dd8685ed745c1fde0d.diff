[+++ b/operators.html, + This tree can help you find the Observable operator you&#8217;re looking for., + I have omitted parameter names from some methods where they are not necessary to distinguish variants of the method. This page was inspired by the RxJS tables (<a href="https://github.com/trxcllnt/RxJS/blob/master/doc/static-operators.md">static</a> and <a href="https://github.com/trxcllnt/RxJS/blob/master/doc/instance-operators.md">instance</a>) created by Paul Taylor., +++ b/operators.html, + This tree can help you find the Observable operator you&#8217;re looking for., + I have omitted parameter names from some methods where they are not necessary to distinguish variants of the method. This page was inspired by the RxJS tables (<a href="https://github.com/trxcllnt/RxJS/blob/master/doc/static-operators.md">static</a> and <a href="https://github.com/trxcllnt/RxJS/blob/master/doc/instance-operators.md">instance</a>) created by Paul Taylor., +++ b/operators.md, +<style>, +   dl { margin-top: 0;, +        margin-bottom: 0;, +        margin-left: 1.5em; }, +   dl#outer>dt { font-weight: bold;, +                 font-size: 120%;, +                 margin-right: -1em; }, +   dt { font-weight: normal;, +        margin-right: -1.5em; }, +   dl > dt::before { content: "…"; }, +   dl#outer > dt::before { content: ""; }, +   dd::before { content: ": "; }, +   dd.sub::before { content: ""; }, +   dt { float: left; clear: left; }, +   dd { float: left;, +        margin-start: 0;, +        -webkit-margin-start: 0;, +        margin-left: 1.5em; }, +   dd.sub { float: none;, +            margin-left: 0; }, +   dd.a::after { content: " ⓐⓈ"; }, +   dd.b::after { content: " ⓑ"; }, +   dd.c::after { content: " ⓒ"; }, +   dd.m::after { content: " ⓜ"; }, +   dd.s::after { content: " Ⓢ"; }, +   hr { clear: both; }, +   dl dt, dl dd { background: #fff; }, +   dl dl dt, dl dl dd { background: #eef; }, +   dl dl dl dt, dl dl dl dd { background: #ffe; }, +   dl dl dl dl dt, dl dl dl dl dd { background: #efe; }, +   dl dl dl dl dl dt, dl dl dl dl dl dd { background: #fef; }, +   dl dl dl dl dl dl dt, dl dl dl dl dl dl dd { background: #fee; }, +</style>, +<p>, + This tree can help you find the Observable operator you&#8217;re looking for., +</p>, +<div>, +<dl id="outer">, + <dt>I want to create a new Observable</dt>, +  <dd class="sub"><dl>, +   <dt>that emits a particular item</dt>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#just"><code>just(&#8239;)</code></a></dd>, +    <dd class="sub"><dl>, +     <dt>that was returned from a function called at subscribe-time</dt>, +      <dd class="a"><a href="https://github.com/Netflix/RxJava/wiki/Async-Operators#start"><code>start(&#8239;)</code></a></dd>, +      <dd class="sub"><dl>, +       <dt>anew for each subscriber</dt>, +        <dd class="a"><a href="https://github.com/Netflix/RxJava/wiki/Async-Operators#toasync-or-asyncaction-or-asyncfunc"><code>toAsync(&#8239;)</code></a></dd>, +      </dl></dd>, +     <dt>that was returned from an <code>Action</code> called at subscribe-time</dt>, +      <dd class="a"><a href="https://github.com/Netflix/RxJava/wiki/Async-Operators#fromaction"><code>fromAction(&#8239;)</code></a></dd>, +     <dt>that was returned from a <code>Callable</code> called at subscribe-time</dt>, +      <dd class="a"><a href="https://github.com/Netflix/RxJava/wiki/Async-Operators#fromcallable"><code>fromCallable(&#8239;)</code></a></dd>, +     <dt>that was returned from a <code>Runnable</code> called at subscribe-time</dt>, +      <dd class="a"><a href="https://github.com/Netflix/RxJava/wiki/Async-Operators#fromrunnable"><code>fromRunnable(&#8239;)</code></a></dd>, +     <dt>after a specified delay</dt>, +      <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#timer"><code>timer(&#8239;)</code></a></dd>, +     </dl></dd>, +   <dt>that emits a particular set of 1&ndash;10 items</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from"><code>from(&#8239;)</code></a></dd>, +   <dt>that obtains its sequence from an Array or Iterable</dt>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from"><code>from(&#8239;)</code></a></dd>, +   <dt>by retrieving it from a Future</dt>, +    <dd class="a"><a href="https://github.com/Netflix/RxJava/wiki/Async-Operators#deferfuture"><code>deferFuture(&#8239;)</code></a></dd>, +   <dt>that obtains its sequence from a Future</dt>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from"><code>from(&#8239;)</code></a></dd>, +    <dd class="sub"><dl>, +     <dt>with a timeout</dt>, +     <dd><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from"><code>from(&#8239;)</code></a></dd>, +    </dl></dd>, +   <dt>that obtains its sequence from an <code>Action</code> called periodically</dt>, +    <dd class="a"><a href="https://github.com/Netflix/RxJava/wiki/Async-Operators#runasync"><code>runAsync(&#8239;)</code></a></dd>, +   <dt>that emits a sequence of items repeatedly</dt>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#repeat"><code>repeat(&#8239;)</code></a></dd>, +    <dd class="sub"><dl>, +     <dt>as long as a predicate remains true</dt>, +      <dd class="c"><a href="https://github.com/Netflix/RxJava/wiki/Conditional-and-Boolean-Operators#whileDo"><code>whileDo(&#8239;)</code></a></dd>, +      <dd class="sub"><dl>, +       <dt>but at least once, no matter what</dt>, +       <dd class="c"><a href="https://github.com/Netflix/RxJava/wiki/Conditional-and-Boolean-Operators#doWhile"><code>doWhile(&#8239;)</code></a></dd>, +      </dl></dd>, +    </dl></dd>, +   <dt>from scratch, with custom logic</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#create"><code>create(&#8239;)</code></a></dd>, +   <dt>for each observer that subscribes</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#defer"><code>defer(&#8239;)</code></a></dd>, +   <dt>that emits a sequence of integers</dt>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#range"><code>range(&#8239;)</code></a></dd>, +    <dd class="sub"><dl>, +     <dt>at particular intervals of time</dt>, +      <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#interval"><code>interval(&#8239;)</code></a></dd>, +      <dd class="sub"><dl>, +       <dt>after a specified delay</dt>]