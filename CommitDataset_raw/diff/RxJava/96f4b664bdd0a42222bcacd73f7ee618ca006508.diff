[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorReplay;, +import rx.operators.OperatorMulticast;, +import rx.operators.OperatorMulticastSelector;, +        return create(new OperatorMulticastSelector<T, TIntermediate, TResult>(this, subjectFactory, selector));, +        return new OperatorMulticast<T, R>(this, subject);, +        return new OperatorMulticast<T, T>(this, PublishSubject.<T> create());, +        return new OperatorMulticast<T, T>(this, BehaviorSubject.<T> create(initialValue));, +        return new OperatorMulticast<T, T>(this, AsyncSubject.<T> create());, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T> create());, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.replayBuffered(bufferSize);, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.replayWindowed(time, unit, bufferSize, scheduler);, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.<T> createScheduledSubject(OperatorReplay.<T> replayBuffered(bufferSize), scheduler);, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.replayWindowed(time, unit, -1, scheduler);, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.createScheduledSubject(ReplaySubject.<T> create(), scheduler);, +        }, selector));, +        return new OperatorMulticast<T, T>(this, OperatorReplay.<T> replayBuffered(bufferSize));, +        return new OperatorMulticast<T, T>(this, OperatorReplay.<T> replayWindowed(time, unit, bufferSize, scheduler));, +        return new OperatorMulticast<T, T>(this,, +                OperatorReplay.createScheduledSubject(, +                        OperatorReplay.<T> replayBuffered(bufferSize), scheduler));, +        return new OperatorMulticast<T, T>(this, OperatorReplay.<T> replayWindowed(time, unit, -1, scheduler));, +        return new OperatorMulticast<T, T>(this, OperatorReplay.createScheduledSubject(ReplaySubject.<T> create(), scheduler));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorReplay;, +import rx.operators.OperatorMulticast;, +import rx.operators.OperatorMulticastSelector;, +        return create(new OperatorMulticastSelector<T, TIntermediate, TResult>(this, subjectFactory, selector));, +        return new OperatorMulticast<T, R>(this, subject);, +        return new OperatorMulticast<T, T>(this, PublishSubject.<T> create());, +        return new OperatorMulticast<T, T>(this, BehaviorSubject.<T> create(initialValue));, +        return new OperatorMulticast<T, T>(this, AsyncSubject.<T> create());, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T> create());, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.replayBuffered(bufferSize);, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.replayWindowed(time, unit, bufferSize, scheduler);, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.<T> createScheduledSubject(OperatorReplay.<T> replayBuffered(bufferSize), scheduler);, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.replayWindowed(time, unit, -1, scheduler);, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.createScheduledSubject(ReplaySubject.<T> create(), scheduler);, +        }, selector));, +        return new OperatorMulticast<T, T>(this, OperatorReplay.<T> replayBuffered(bufferSize));, +        return new OperatorMulticast<T, T>(this, OperatorReplay.<T> replayWindowed(time, unit, bufferSize, scheduler));, +        return new OperatorMulticast<T, T>(this,, +                OperatorReplay.createScheduledSubject(, +                        OperatorReplay.<T> replayBuffered(bufferSize), scheduler));, +        return new OperatorMulticast<T, T>(this, OperatorReplay.<T> replayWindowed(time, unit, -1, scheduler));, +        return new OperatorMulticast<T, T>(this, OperatorReplay.createScheduledSubject(ReplaySubject.<T> create(), scheduler));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorReplay;, +import rx.operators.OperatorMulticast;, +import rx.operators.OperatorMulticastSelector;, +        return create(new OperatorMulticastSelector<T, TIntermediate, TResult>(this, subjectFactory, selector));, +        return new OperatorMulticast<T, R>(this, subject);, +        return new OperatorMulticast<T, T>(this, PublishSubject.<T> create());, +        return new OperatorMulticast<T, T>(this, BehaviorSubject.<T> create(initialValue));, +        return new OperatorMulticast<T, T>(this, AsyncSubject.<T> create());, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T> create());, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.replayBuffered(bufferSize);, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.replayWindowed(time, unit, bufferSize, scheduler);, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.<T> createScheduledSubject(OperatorReplay.<T> replayBuffered(bufferSize), scheduler);, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.replayWindowed(time, unit, -1, scheduler);, +        }, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +                return OperatorReplay.createScheduledSubject(ReplaySubject.<T> create(), scheduler);, +        }, selector));, +        return new OperatorMulticast<T, T>(this, OperatorReplay.<T> replayBuffered(bufferSize));, +        return new OperatorMulticast<T, T>(this, OperatorReplay.<T> replayWindowed(time, unit, bufferSize, scheduler));, +        return new OperatorMulticast<T, T>(this,, +                OperatorReplay.createScheduledSubject(]