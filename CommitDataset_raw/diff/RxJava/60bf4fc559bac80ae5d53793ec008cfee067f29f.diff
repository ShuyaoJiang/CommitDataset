[+++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.subscribers.TestSubscriber;, +     * Provides an API (via a cold Completable) that bridges the reactive world with the callback-style world., +     * <p>, +     * Example:, +     * <pre><code>, +     * Completable.create(emitter -&gt; {, +     *     Callback listener = new Callback() {, +     *         &#64;Override, +     *         public void onEvent(Event e) {, +     *             emitter.onComplete();, +     *         }, +     *         , +     *         &#64;Override, +     *         public void onFailure(Exception e) {, +     *             emitter.onError(e);, +     *         }, +     *     };, +     *     , +     *     AutoCloseable c = api.someMethod(listener);, +     *     , +     *     emitter.setCancellable(c::close);, +     *     , +     * });, +     * </code></pre>, +     * <p>, +     * @param source the emitter that is called when a Subscriber subscribes to the returned {@code Flowable}, +     * @return the new Completable instance, +     * @see FlowableOnSubscribe, +     * @see FlowableEmitter.BackpressureMode, +     * @see Cancellable, +    public static Completable create(CompletableOnSubscribe source) {, +        return RxJavaPlugins.onAssembly(new CompletableCreate(source));, +    // -------------------------------------------------------------------------, +    // Fluent test support, super handy and reduces test preparation boilerplate, +    // -------------------------------------------------------------------------, +    , +    /**, +     * Creates a TestSubscriber and subscribes, +     * it to this Completable., +     * @return the new TestSubscriber instance, +     * @since 2.0, +     */, +    public final TestSubscriber<Void> test() {, +        TestSubscriber<Void> ts = new TestSubscriber<Void>();, +        subscribe(ts);, +        return ts;, +    }, +, +    /**, +     * Creates a TestSubscriber optionally in cancelled state, then subscribes it to this Completable., +     * @param cancelled if true, the TestSubscriber will be cancelled before subscribing to this, +     * Completable., +     * @return the new TestSubscriber instance, +     * @since 2.0, +     */, +    public final TestSubscriber<Void> test(boolean cancelled) {, +        TestSubscriber<Void> ts = new TestSubscriber<Void>();, +        ts.dispose();, +        subscribe(ts);, +        return ts;, +    }, +++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.subscribers.TestSubscriber;, +     * Provides an API (via a cold Completable) that bridges the reactive world with the callback-style world., +     * <p>, +     * Example:, +     * <pre><code>, +     * Completable.create(emitter -&gt; {, +     *     Callback listener = new Callback() {, +     *         &#64;Override, +     *         public void onEvent(Event e) {, +     *             emitter.onComplete();, +     *         }, +     *         , +     *         &#64;Override, +     *         public void onFailure(Exception e) {, +     *             emitter.onError(e);, +     *         }, +     *     };, +     *     , +     *     AutoCloseable c = api.someMethod(listener);, +     *     , +     *     emitter.setCancellable(c::close);, +     *     , +     * });, +     * </code></pre>, +     * <p>, +     * @param source the emitter that is called when a Subscriber subscribes to the returned {@code Flowable}, +     * @return the new Completable instance, +     * @see FlowableOnSubscribe, +     * @see FlowableEmitter.BackpressureMode, +     * @see Cancellable, +    public static Completable create(CompletableOnSubscribe source) {, +        return RxJavaPlugins.onAssembly(new CompletableCreate(source));, +    // -------------------------------------------------------------------------, +    // Fluent test support, super handy and reduces test preparation boilerplate, +    // -------------------------------------------------------------------------, +    , +    /**]