[+++ b/src/main/java/io/reactivex/Observable.java, +    public static <T, D> Observable<T> using(Supplier<? extends D> resourceSupplier, Function<? super D, ? extends Publisher<? extends T>> sourceSupplier, Consumer<? super D> disposer) {, +        return using(resourceSupplier, sourceSupplier, disposer, true);, +    }, +, +    public static <T, D> Observable<T> using(Supplier<? extends D> resourceSupplier, Function<? super D, ? extends Publisher<? extends T>> sourceSupplier, Consumer<? super D> disposer, boolean eager) {, +        Objects.requireNonNull(resourceSupplier);, +        Objects.requireNonNull(sourceSupplier);, +        Objects.requireNonNull(disposer);, +        return create(new PublisherUsing<>(resourceSupplier, sourceSupplier, disposer, eager));, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T, D> Observable<T> using(Supplier<? extends D> resourceSupplier, Function<? super D, ? extends Publisher<? extends T>> sourceSupplier, Consumer<? super D> disposer) {, +        return using(resourceSupplier, sourceSupplier, disposer, true);, +    }, +, +    public static <T, D> Observable<T> using(Supplier<? extends D> resourceSupplier, Function<? super D, ? extends Publisher<? extends T>> sourceSupplier, Consumer<? super D> disposer, boolean eager) {, +        Objects.requireNonNull(resourceSupplier);, +        Objects.requireNonNull(sourceSupplier);, +        Objects.requireNonNull(disposer);, +        return create(new PublisherUsing<>(resourceSupplier, sourceSupplier, disposer, eager));, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorCollect.java, +            EmptySubscription.error(e, t);, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T, D> Observable<T> using(Supplier<? extends D> resourceSupplier, Function<? super D, ? extends Publisher<? extends T>> sourceSupplier, Consumer<? super D> disposer) {, +        return using(resourceSupplier, sourceSupplier, disposer, true);, +    }, +, +    public static <T, D> Observable<T> using(Supplier<? extends D> resourceSupplier, Function<? super D, ? extends Publisher<? extends T>> sourceSupplier, Consumer<? super D> disposer, boolean eager) {, +        Objects.requireNonNull(resourceSupplier);, +        Objects.requireNonNull(sourceSupplier);, +        Objects.requireNonNull(disposer);, +        return create(new PublisherUsing<>(resourceSupplier, sourceSupplier, disposer, eager));, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorCollect.java, +            EmptySubscription.error(e, t);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorDistinct.java, +            EmptySubscription.error(e, t);, +            EmptySubscription.error(new NullPointerException("predicateSupplier returned null"), t);, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T, D> Observable<T> using(Supplier<? extends D> resourceSupplier, Function<? super D, ? extends Publisher<? extends T>> sourceSupplier, Consumer<? super D> disposer) {, +        return using(resourceSupplier, sourceSupplier, disposer, true);, +    }, +, +    public static <T, D> Observable<T> using(Supplier<? extends D> resourceSupplier, Function<? super D, ? extends Publisher<? extends T>> sourceSupplier, Consumer<? super D> disposer, boolean eager) {, +        Objects.requireNonNull(resourceSupplier);, +        Objects.requireNonNull(sourceSupplier);, +        Objects.requireNonNull(disposer);, +        return create(new PublisherUsing<>(resourceSupplier, sourceSupplier, disposer, eager));, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorCollect.java, +            EmptySubscription.error(e, t);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorDistinct.java, +            EmptySubscription.error(e, t);, +            EmptySubscription.error(new NullPointerException("predicateSupplier returned null"), t);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorGroupBy.java, +                EmptySubscription.error(new IllegalStateException("Only one Subscriber allowed!"), s);, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T, D> Observable<T> using(Supplier<? extends D> resourceSupplier, Function<? super D, ? extends Publisher<? extends T>> sourceSupplier, Consumer<? super D> disposer) {, +        return using(resourceSupplier, sourceSupplier, disposer, true);, +    }, +, +    public static <T, D> Observable<T> using(Supplier<? extends D> resourceSupplier, Function<? super D, ? extends Publisher<? extends T>> sourceSupplier, Consumer<? super D> disposer, boolean eager) {, +        Objects.requireNonNull(resourceSupplier);, +        Objects.requireNonNull(sourceSupplier);, +        Objects.requireNonNull(disposer);, +        return create(new PublisherUsing<>(resourceSupplier, sourceSupplier, disposer, eager));, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorCollect.java, +            EmptySubscription.error(e, t);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorDistinct.java, +            EmptySubscription.error(e, t);, +            EmptySubscription.error(new NullPointerException("predicateSupplier returned null"), t);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorGroupBy.java, +                EmptySubscription.error(new IllegalStateException("Only one Subscriber allowed!"), s);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorReplay.java, +                EmptySubscription.error(e, child);, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T, D> Observable<T> using(Supplier<? extends D> resourceSupplier, Function<? super D, ? extends Publisher<? extends T>> sourceSupplier, Consumer<? super D> disposer) {, +        return using(resourceSupplier, sourceSupplier, disposer, true);, +    }, +, +    public static <T, D> Observable<T> using(Supplier<? extends D> resourceSupplier, Function<? super D, ? extends Publisher<? extends T>> sourceSupplier, Consumer<? super D> disposer, boolean eager) {, +        Objects.requireNonNull(resourceSupplier);, +        Objects.requireNonNull(sourceSupplier);, +        Objects.requireNonNull(disposer);, +        return create(new PublisherUsing<>(resourceSupplier, sourceSupplier, disposer, eager));, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorCollect.java, +            EmptySubscription.error(e, t);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorDistinct.java, +            EmptySubscription.error(e, t);, +            EmptySubscription.error(new NullPointerException("predicateSupplier returned null"), t);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorGroupBy.java, +                EmptySubscription.error(new IllegalStateException("Only one Subscriber allowed!"), s);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorReplay.java, +                EmptySubscription.error(e, child);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorSkipUntil.java, +                    EmptySubscription.error(t, serial);]