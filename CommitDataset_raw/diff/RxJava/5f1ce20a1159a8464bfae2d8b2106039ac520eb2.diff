[+++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +     * Assert that the TestObserver/TestSubscriber received only the specified values in any order without terminating., +     * @param expected the collection of values expected in any order, +     * @return this;, +     * @since 2.1.14 - experimental, +     */, +    @SuppressWarnings("unchecked"), +    @Experimental, +    public final U assertValueSetOnly(Collection<? extends T> expected) {, +        return assertSubscribed(), +                .assertValueSet(expected), +                .assertNoErrors(), +                .assertNotComplete();, +    }, +, +    /**, +     * Assert that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating., +     * @param sequence the sequence of expected values in order, +     * @return this;, +     * @since 2.1.14 - experimental, +     */, +    @SuppressWarnings("unchecked"), +    @Experimental, +    public final U assertValueSequenceOnly(Iterable<? extends T> sequence) {, +        return assertSubscribed(), +                .assertValueSequence(sequence), +                .assertNoErrors(), +                .assertNotComplete();, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +     * Assert that the TestObserver/TestSubscriber received only the specified values in any order without terminating., +     * @param expected the collection of values expected in any order, +     * @return this;, +     * @since 2.1.14 - experimental, +     */, +    @SuppressWarnings("unchecked"), +    @Experimental, +    public final U assertValueSetOnly(Collection<? extends T> expected) {, +        return assertSubscribed(), +                .assertValueSet(expected), +                .assertNoErrors(), +                .assertNotComplete();, +    }, +, +    /**, +     * Assert that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating., +     * @param sequence the sequence of expected values in order, +     * @return this;, +     * @since 2.1.14 - experimental, +     */, +    @SuppressWarnings("unchecked"), +    @Experimental, +    public final U assertValueSequenceOnly(Iterable<? extends T> sequence) {, +        return assertSubscribed(), +                .assertValueSequence(sequence), +                .assertNoErrors(), +                .assertNotComplete();, +    }, +, +    /**, +++ b/src/test/java/io/reactivex/observers/TestObserverTest.java, +            throw new RuntimeException("Should have thrown!");, +            throw new RuntimeException();, +            throw new RuntimeException();, +            throw new RuntimeException();, +        } catch (AssertionError ex) {, +            // expected, +        }, +    }, +, +    @Test, +    public void assertValueSetOnly() {, +        TestObserver<Integer> to = TestObserver.create();, +        to.onSubscribe(Disposables.empty());, +        to.assertValueSetOnly(Collections.<Integer>emptySet());, +, +        to.onNext(5);, +        to.assertValueSetOnly(Collections.singleton(5));, +, +        to.onNext(-1);, +        to.assertValueSetOnly(new HashSet<Integer>(Arrays.asList(5, -1)));, +    }, +, +    @Test, +    public void assertValueSetOnlyThrowsOnUnexpectedValue() {, +        TestObserver<Integer> to = TestObserver.create();, +        to.onSubscribe(Disposables.empty());, +        to.assertValueSetOnly(Collections.<Integer>emptySet());, +, +        to.onNext(5);, +        to.assertValueSetOnly(Collections.singleton(5));, +, +        to.onNext(-1);, +, +        try {, +            to.assertValueSetOnly(Collections.singleton(5));, +            throw new RuntimeException();, +        } catch (AssertionError ex) {]