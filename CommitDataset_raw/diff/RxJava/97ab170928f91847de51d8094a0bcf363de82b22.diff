[+++ b/rxjava-core/src/test/java/rx/operators/OperationDistinctTest.java, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import static org.mockito.MockitoAnnotations.*;, +import static rx.operators.OperationDistinct.*;, +, +import java.util.Comparator;, +, +, +    Observable<String> src = Observable.empty();, +    Observable.create(distinct(src)).subscribe(w);, +    Observable<String> src = Observable.empty();, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION)).subscribe(w);, +    Observable<String> src = Observable.from("a", "b", "c", "c", "c", "b", "b", "a", "e");, +    Observable.create(distinct(src)).subscribe(w);, +    Observable<String> src = Observable.from("a", "B", "c", "C", "c", "B", "b", "a", "E");, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION)).subscribe(w);, +    Observable<String> src = Observable.from("1", "12", "123", "aaa", "321", "12", "21", "1", "12345");, +    Observable.create(distinct(src, COMPARE_LENGTH)).subscribe(w);, +    Observable<String> src = Observable.from("a", "x", "ab", "abc", "cba", "de", "x", "a", "abcd");, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION, COMPARE_LENGTH)).subscribe(w);, +    Observable<String> src = Observable.from("a", "x", "ab", "abc", "cba", "de", "x", "a", "abcd");, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION, COMPARE_LENGTH)).subscribe(w);, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION, COMPARE_LENGTH)).subscribe(w2);, +    Observable<String> src = Observable.from(null, "a", "a", null, null, "b", null);, +    Observable.create(distinct(src)).subscribe(w);, +    Observable<String> src = Observable.from("a", "b", null, "c");, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION)).subscribe(w);, +++ b/rxjava-core/src/test/java/rx/operators/OperationDistinctTest.java, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import static org.mockito.MockitoAnnotations.*;, +import static rx.operators.OperationDistinct.*;, +, +import java.util.Comparator;, +, +, +    Observable<String> src = Observable.empty();, +    Observable.create(distinct(src)).subscribe(w);, +    Observable<String> src = Observable.empty();, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION)).subscribe(w);, +    Observable<String> src = Observable.from("a", "b", "c", "c", "c", "b", "b", "a", "e");, +    Observable.create(distinct(src)).subscribe(w);, +    Observable<String> src = Observable.from("a", "B", "c", "C", "c", "B", "b", "a", "E");, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION)).subscribe(w);, +    Observable<String> src = Observable.from("1", "12", "123", "aaa", "321", "12", "21", "1", "12345");, +    Observable.create(distinct(src, COMPARE_LENGTH)).subscribe(w);, +    Observable<String> src = Observable.from("a", "x", "ab", "abc", "cba", "de", "x", "a", "abcd");, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION, COMPARE_LENGTH)).subscribe(w);, +    Observable<String> src = Observable.from("a", "x", "ab", "abc", "cba", "de", "x", "a", "abcd");, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION, COMPARE_LENGTH)).subscribe(w);, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION, COMPARE_LENGTH)).subscribe(w2);, +    Observable<String> src = Observable.from(null, "a", "a", null, null, "b", null);, +    Observable.create(distinct(src)).subscribe(w);, +    Observable<String> src = Observable.from("a", "b", null, "c");, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION)).subscribe(w);, +++ b/rxjava-core/src/test/java/rx/operators/OperationDistinctUntilChangedTest.java, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import static org.mockito.MockitoAnnotations.*;, +import static rx.operators.OperationDistinctUntilChanged.*;, +, +import java.util.Comparator;, +, +, +    Observable<String> src = Observable.empty();, +    Observable.create(distinctUntilChanged(src)).subscribe(w);, +    Observable<String> src = Observable.empty();, +    Observable.create(distinctUntilChanged(src, TO_UPPER_WITH_EXCEPTION)).subscribe(w);, +    Observable<String> src = Observable.from("a", "b", "c", "c", "c", "b", "b", "a", "e");, +    Observable.create(distinctUntilChanged(src)).subscribe(w);, +    Observable<String> src = Observable.from("a", "b", "c", "C", "c", "B", "b", "a", "e");, +    Observable.create(distinctUntilChanged(src, TO_UPPER_WITH_EXCEPTION)).subscribe(w);, +    Observable<String> src = Observable.from(null, "a", "a", null, null, "b", null, null);, +    Observable.create(distinctUntilChanged(src)).subscribe(w);, +    Observable<String> src = Observable.from("a", "b", null, "c");, +    Observable.create(distinctUntilChanged(src, TO_UPPER_WITH_EXCEPTION)).subscribe(w);, +    Observable<String> src = Observable.from("a", "b", "c", "aa", "bb", "c", "ddd");, +    Observable.create(distinctUntilChanged(src, COMPARE_LENGTH)).subscribe(w);, +    Observable<String> src = Observable.from("a", "b", "x", "aa", "bb", "c", "ddd");, +    Observable.create(distinctUntilChanged(src, TO_UPPER_WITH_EXCEPTION, COMPARE_LENGTH)).subscribe(w);, +    Observable<String> src = Observable.from("a", "b", "x", "aa", "bb", "c", "ddd");, +    Observable.create(distinctUntilChanged(src, TO_UPPER_WITH_EXCEPTION, COMPARE_LENGTH)).subscribe(w);, +    Observable.create(distinctUntilChanged(src, TO_UPPER_WITH_EXCEPTION, COMPARE_LENGTH)).subscribe(w2);, +++ b/rxjava-core/src/test/java/rx/operators/OperationDistinctTest.java, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import static org.mockito.MockitoAnnotations.*;, +import static rx.operators.OperationDistinct.*;, +, +import java.util.Comparator;, +, +, +    Observable<String> src = Observable.empty();, +    Observable.create(distinct(src)).subscribe(w);, +    Observable<String> src = Observable.empty();, +    Observable.create(distinct(src, TO_UPPER_WITH_EXCEPTION)).subscribe(w);, +    Observable<String> src = Observable.from("a", "b", "c", "c", "c", "b", "b", "a", "e");, +    Observable.create(distinct(src)).subscribe(w);, +    Observable<String> src = Observable.from("a", "B", "c", "C", "c", "B", "b", "a", "E");]