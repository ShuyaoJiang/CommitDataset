[+++ b/rxjava-core/src/main/java/rx/Notification.java, +     * Creates and returns a {@code Notification} of variety {@code Kind.OnCompleted}., +     *, +     * @warn param "type" undescribed, +     * @param type, +     * @return an {@code OnCompleted} variety of {@code Notification}, +     * Forwards this notification on to a specified {@link Observer}., +++ b/rxjava-core/src/main/java/rx/Notification.java, +     * Creates and returns a {@code Notification} of variety {@code Kind.OnCompleted}., +     *, +     * @warn param "type" undescribed, +     * @param type, +     * @return an {@code OnCompleted} variety of {@code Notification}, +     * Forwards this notification on to a specified {@link Observer}., +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Collects items emitted by the source Observable into a single mutable data structure and returns an, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/collect.png">, +     * <p>, +     *           the mutable data structure that will collect the items, +     *           a function that accepts the {@code state} and an emitted item, and modifies {@code state}, +     *           accordingly, +     * {@code onNext} from two different threads concurrently. You can force such an Observable to be, +++ b/rxjava-core/src/main/java/rx/Notification.java, +     * Creates and returns a {@code Notification} of variety {@code Kind.OnCompleted}., +     *, +     * @warn param "type" undescribed, +     * @param type, +     * @return an {@code OnCompleted} variety of {@code Notification}, +     * Forwards this notification on to a specified {@link Observer}., +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Collects items emitted by the source Observable into a single mutable data structure and returns an, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/collect.png">, +     * <p>, +     *           the mutable data structure that will collect the items, +     *           a function that accepts the {@code state} and an emitted item, and modifies {@code state}, +     *           accordingly, +     * {@code onNext} from two different threads concurrently. You can force such an Observable to be, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +     * Indicates whether this Subscriber has unsubscribed from its Observable., +     * , +     * @return {@code true} if this Subscriber has unsubscribed from its Observable, {@code false} otherwise, +++ b/rxjava-core/src/main/java/rx/Notification.java, +     * Creates and returns a {@code Notification} of variety {@code Kind.OnCompleted}., +     *, +     * @warn param "type" undescribed, +     * @param type, +     * @return an {@code OnCompleted} variety of {@code Notification}, +     * Forwards this notification on to a specified {@link Observer}., +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Collects items emitted by the source Observable into a single mutable data structure and returns an, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/collect.png">, +     * <p>, +     *           the mutable data structure that will collect the items, +     *           a function that accepts the {@code state} and an emitted item, and modifies {@code state}, +     *           accordingly, +     * {@code onNext} from two different threads concurrently. You can force such an Observable to be, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +     * Indicates whether this Subscriber has unsubscribed from its Observable., +     * , +     * @return {@code true} if this Subscriber has unsubscribed from its Observable, {@code false} otherwise, +++ b/rxjava-core/src/main/java/rx/exceptions/CompositeException.java, +     * Retrieves the list of exceptions that make up the {@code CompositeException}, +     *, +     * @return the exceptions that make up the {@code CompositeException}, as a {@link List} of, +     *         {@link Throwable}s, +++ b/rxjava-core/src/main/java/rx/Notification.java, +     * Creates and returns a {@code Notification} of variety {@code Kind.OnCompleted}., +     *, +     * @warn param "type" undescribed, +     * @param type, +     * @return an {@code OnCompleted} variety of {@code Notification}, +     * Forwards this notification on to a specified {@link Observer}., +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Collects items emitted by the source Observable into a single mutable data structure and returns an, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/collect.png">, +     * <p>, +     *           the mutable data structure that will collect the items, +     *           a function that accepts the {@code state} and an emitted item, and modifies {@code state}, +     *           accordingly, +     * {@code onNext} from two different threads concurrently. You can force such an Observable to be, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +     * Indicates whether this Subscriber has unsubscribed from its Observable., +     * , +     * @return {@code true} if this Subscriber has unsubscribed from its Observable, {@code false} otherwise, +++ b/rxjava-core/src/main/java/rx/exceptions/CompositeException.java, +     * Retrieves the list of exceptions that make up the {@code CompositeException}, +     *, +     * @return the exceptions that make up the {@code CompositeException}, as a {@link List} of, +     *         {@link Throwable}s, +++ b/rxjava-core/src/main/java/rx/exceptions/OnErrorFailedException.java, +     * Customizes the {@code Throwable} with a custom message and wraps it before it is to be re-thrown as an, +     * {@code OnErrorFailedException}., +     *, +     * @param message, +     *          the message to assign to the {@code Throwable} to re-throw, +     * @param e, +     *          the {@code Throwable} to re-throw, +     * Wraps the {@code Throwable} before it is to be re-thrown as an {@code OnErrorFailedException}., +     *, +     * @param e]