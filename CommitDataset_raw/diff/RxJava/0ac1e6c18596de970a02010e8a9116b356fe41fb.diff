[+++ b/rxjava-core/src/main/java/rx/Observable.java, +                if (s != null && s != observer) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +                if (s != null && s != observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAny.java, +            return source.subscribe(new Observer<T>(observer) {, +                                unsubscribe();, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/Observable.java, +                if (s != null && s != observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAny.java, +            return source.subscribe(new Observer<T>(observer) {, +                                unsubscribe();, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefaultIfEmpty.java, +            return source.subscribe(new Observer<T>(observer) {, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/Observable.java, +                if (s != null && s != observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAny.java, +            return source.subscribe(new Observer<T>(observer) {, +                                unsubscribe();, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefaultIfEmpty.java, +            return source.subscribe(new Observer<T>(observer) {, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +            return sequence.subscribe(new Observer<Notification<? extends T>>(observer) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +                if (s != null && s != observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAny.java, +            return source.subscribe(new Observer<T>(observer) {, +                                unsubscribe();, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefaultIfEmpty.java, +            return source.subscribe(new Observer<T>(observer) {, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +            return sequence.subscribe(new Observer<Notification<? extends T>>(observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinct.java, +            return source.subscribe(new Observer<T>(observer) {, +            return source.subscribe(new Observer<T>(observer) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +                if (s != null && s != observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAny.java, +            return source.subscribe(new Observer<T>(observer) {, +                                unsubscribe();, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefaultIfEmpty.java, +            return source.subscribe(new Observer<T>(observer) {, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +            return sequence.subscribe(new Observer<Notification<? extends T>>(observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinct.java, +            return source.subscribe(new Observer<T>(observer) {, +            return source.subscribe(new Observer<T>(observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinctUntilChanged.java, +            return source.subscribe(new Observer<T>(observer) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +                if (s != null && s != observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAny.java, +            return source.subscribe(new Observer<T>(observer) {, +                                unsubscribe();, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefaultIfEmpty.java, +            return source.subscribe(new Observer<T>(observer) {, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +            return sequence.subscribe(new Observer<Notification<? extends T>>(observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinct.java, +            return source.subscribe(new Observer<T>(observer) {, +            return source.subscribe(new Observer<T>(observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinctUntilChanged.java, +            return source.subscribe(new Observer<T>(observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDoOnEach.java, +            return sequence.subscribe(new Observer<T>(observer) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +                if (s != null && s != observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAny.java, +            return source.subscribe(new Observer<T>(observer) {, +                                unsubscribe();, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefaultIfEmpty.java, +            return source.subscribe(new Observer<T>(observer) {, +                        unsubscribe();, +            });, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +            return sequence.subscribe(new Observer<Notification<? extends T>>(observer) {]