[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param items, +     * This behaves like {@link #merge(Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * @see #throttleWithTimeout(long, TimeUnit), +     * @see #throttleWithTimeout(long, TimeUnit, Scheduler), +        return create(OperationDebounce.debounce(this, timeout, unit, scheduler));, +     * @see #debounce(long, TimeUnit), +     * @see #debounce(long, TimeUnit, Scheduler), +     * @param windowDuration, +     * @see #sample(long, TimeUnit), +     * @see #sample(long, TimeUnit, Scheduler), +     *            "count" are equals that this is the same operation as {@link #window(int)}., +     * @see #first(), +     * @see #first(Func1), +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param items, +     * This behaves like {@link #merge(Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * @see #throttleWithTimeout(long, TimeUnit), +     * @see #throttleWithTimeout(long, TimeUnit, Scheduler), +        return create(OperationDebounce.debounce(this, timeout, unit, scheduler));, +     * @see #debounce(long, TimeUnit), +     * @see #debounce(long, TimeUnit, Scheduler), +     * @param windowDuration, +     * @see #sample(long, TimeUnit), +     * @see #sample(long, TimeUnit, Scheduler), +     *            "count" are equals that this is the same operation as {@link #window(int)}., +     * @see #first(), +     * @see #first(Func1), +++ b/rxjava-core/src/main/java/rx/operators/ChunkedOperation.java, +     * @param <C> , +     *            The type of object being tracked by the {@link Chunk}, +         *         The mutable underlying {@code C} which contains all the, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param items, +     * This behaves like {@link #merge(Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * @see #throttleWithTimeout(long, TimeUnit), +     * @see #throttleWithTimeout(long, TimeUnit, Scheduler), +        return create(OperationDebounce.debounce(this, timeout, unit, scheduler));, +     * @see #debounce(long, TimeUnit), +     * @see #debounce(long, TimeUnit, Scheduler), +     * @param windowDuration, +     * @see #sample(long, TimeUnit), +     * @see #sample(long, TimeUnit, Scheduler), +     *            "count" are equals that this is the same operation as {@link #window(int)}., +     * @see #first(), +     * @see #first(Func1), +++ b/rxjava-core/src/main/java/rx/operators/ChunkedOperation.java, +     * @param <C> , +     *            The type of object being tracked by the {@link Chunk}, +         *         The mutable underlying {@code C} which contains all the, +++ b/rxjava-core/src/main/java/rx/operators/OperationGroupBy.java, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param items, +     * This behaves like {@link #merge(Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable, Observable, Observable)} except that if any of the merged Observables, +     * @see #throttleWithTimeout(long, TimeUnit), +     * @see #throttleWithTimeout(long, TimeUnit, Scheduler), +        return create(OperationDebounce.debounce(this, timeout, unit, scheduler));, +     * @see #debounce(long, TimeUnit), +     * @see #debounce(long, TimeUnit, Scheduler), +     * @param windowDuration, +     * @see #sample(long, TimeUnit), +     * @see #sample(long, TimeUnit, Scheduler), +     *            "count" are equals that this is the same operation as {@link #window(int)}., +     * @see #first(), +     * @see #first(Func1), +++ b/rxjava-core/src/main/java/rx/operators/ChunkedOperation.java, +     * @param <C> , +     *            The type of object being tracked by the {@link Chunk}, +         *         The mutable underlying {@code C} which contains all the, +++ b/rxjava-core/src/main/java/rx/operators/OperationGroupBy.java, +++ b/rxjava-core/src/main/java/rx/operators/OperationMap.java, +++ b/rxjava-core/src/main/java/rx/Observable.java]