[+++ b/docs/Mathematical-and-Aggregate-Operators.md, +This page shows operators that perform mathematical or other operations over an entire sequence of items emitted by an `Observable` or `Flowable`. Because these operations must wait for the source `Observable`/`Flowable` to complete emitting items before they can construct their own emissions (and must usually buffer these items), these operators are dangerous to use on `Observable`s and `Flowable`s that may have very long or infinite sequences., +# Outline, +- [Mathematical Operators](#mathematical-operators), +  - [`averageDouble`](#averagedouble), +  - [`averageFloat`](#averagefloat), +  - [`max`](#max), +  - [`min`](#min), +  - [`sumDouble`](#sumdouble), +  - [`sumFloat`](#sumfloat), +  - [`sumInt`](#sumint), +  - [`sumLong`](#sumlong), +- [Standard Aggregate Operators](#standard-aggregate-operators), +  - [`count`](#count), +  - [`reduce`](#reduce), +  - [`reduceWith`](#reducewith), +  - [`collect`](#collect), +  - [`collectInto`](#collectinto), +  - [`toList`](#tolist), +  - [`toSortedList`](#tosortedlist), +  - [`toMap`](#tomap), +  - [`toMultimap`](#tomultimap), +, +## Mathematical Operators, +, +> The operators in this section are part of the [`RxJava2Extensions`](https://github.com/akarnokd/RxJava2Extensions) project. You have to add the `rxjava2-extensions` module as a dependency to your project. It can be found at [http://search.maven.org](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.github.akarnokd%22)., +, +> Note that unlike the standard RxJava aggregator operators, these mathematical operators return `Observable` and `Flowable` instead of the `Single` or `Maybe`., +, +*The examples below assume that the `MathObservable` and `MathFlowable` classes are imported from the `rxjava2-extensions` module:*, +, +```java, +import hu.akarnokd.rxjava2.math.MathObservable;, +import hu.akarnokd.rxjava2.math.MathFlowable;, +```, +, +### averageDouble, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +**ReactiveX doumentation:** [http://reactivex.io/documentation/operators/average.html](http://reactivex.io/documentation/operators/average.html), +, +Calculates the average of `Number`s emitted by an `Observable` and emits this average as a `Double`., +, +#### averageDouble example, +, +```java, +Observable<Integer> numbers = Observable.just(1, 2, 3);, +MathObservable.averageDouble(numbers).subscribe((Double avg) -> System.out.println(avg));, +, +// prints 2.0, +```, +, +### averageFloat, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +**ReactiveX doumentation:** [http://reactivex.io/documentation/operators/average.html](http://reactivex.io/documentation/operators/average.html), +, +Calculates the average of `Number`s emitted by an `Observable` and emits this average as a `Float`., +, +#### averageFloat example, +, +```java, +Observable<Integer> numbers = Observable.just(1, 2, 3);, +MathObservable.averageFloat(numbers).subscribe((Float avg) -> System.out.println(avg));, +, +// prints 2.0, +```, +, +### max, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +**ReactiveX doumentation:** [http://reactivex.io/documentation/operators/max.html](http://reactivex.io/documentation/operators/max.html), +, +Emits the maximum value emitted by a source `Observable`. A `Comparator` can be specified that will be used to compare the elements emitted by the `Observable`., +, +#### max example, +, +```java, +Observable<Integer> numbers = Observable.just(4, 9, 5);, +MathObservable.max(numbers).subscribe(System.out::println);, +, +// prints 9, +```, +, +The following example specifies a `Comparator` to find the longest `String` in the source `Observable`:, +, +```java, +final Observable<String> names = Observable.just("Kirk", "Spock", "Chekov", "Sulu");, +MathObservable.max(names, Comparator.comparingInt(String::length)), +        .subscribe(System.out::println);, +, +// prints Chekov, +```, +, +### min, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`]