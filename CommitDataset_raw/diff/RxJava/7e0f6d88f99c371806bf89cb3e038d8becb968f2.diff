[+++ b/src/main/java/io/reactivex/Completable.java, +     * Subscribes a given CompletableObserver (subclass) to this Completable and returns the given, +     * CompletableObserver as is., +     * <p>Usage example:, +     * <pre><code>, +     * Completable<Integer> source = Completable.complete().delay(1, TimeUnit.SECONDS);, +     * CompositeDisposable composite = new CompositeDisposable();, +     * , +     * class ResourceCompletableObserver implements CompletableObserver, Disposable {, +     *     // ..., +     * }, +     * , +     * composite.add(source.subscribeWith(new ResourceCompletableObserver()));, +     * </code></pre>, +     * @param <E> the type of the CompletableObserver to use and return, +     * @param observer the CompletableObserver (subclass) to use and return, not null, +     * @return the input {@code observer}, +     * @throws NullPointerException if {@code observer} is null, +     * @since 2.0, +     */, +    public final <E extends CompletableObserver> E subscribeWith(E observer) {, +        subscribe(observer);, +        return observer;, +    }, +    , +    /**, +++ b/src/main/java/io/reactivex/Completable.java, +     * Subscribes a given CompletableObserver (subclass) to this Completable and returns the given, +     * CompletableObserver as is., +     * <p>Usage example:, +     * <pre><code>, +     * Completable<Integer> source = Completable.complete().delay(1, TimeUnit.SECONDS);, +     * CompositeDisposable composite = new CompositeDisposable();, +     * , +     * class ResourceCompletableObserver implements CompletableObserver, Disposable {, +     *     // ..., +     * }, +     * , +     * composite.add(source.subscribeWith(new ResourceCompletableObserver()));, +     * </code></pre>, +     * @param <E> the type of the CompletableObserver to use and return, +     * @param observer the CompletableObserver (subclass) to use and return, not null, +     * @return the input {@code observer}, +     * @throws NullPointerException if {@code observer} is null, +     * @since 2.0, +     */, +    public final <E extends CompletableObserver> E subscribeWith(E observer) {, +        subscribe(observer);, +        return observer;, +    }, +    , +    /**, +++ b/src/main/java/io/reactivex/Flowable.java, +    /**, +     * Subscribes a given Subscriber (subclass) to this Flowable and returns the given, +     * Subscriber as is., +     * <p>Usage example:, +     * <pre><code>, +     * Flowable<Integer> source = Flowable.range(1, 10);, +     * CompositeDisposable composite = new CompositeDisposable();, +     * , +     * ResourceSubscriber&lt;Integer> rs = new ResourceSubscriber&lt;>() {, +     *     // ..., +     * };, +     * , +     * composite.add(source.subscribeWith(rs));, +     * </code></pre>, +     * @param <E> the type of the Subscriber to use and return, +     * @param subscriber the Subscriber (subclass) to use and return, not null, +     * @return the input {@code subscriber}, +     * @throws NullPointerException if {@code subscriber} is null, +     * @since 2.0, +     */, +    public final <E extends Subscriber<? super T>> E subscribeWith(E subscriber) {, +        subscribe(subscriber);, +        return subscriber;, +    }, +, +++ b/src/main/java/io/reactivex/Completable.java, +     * Subscribes a given CompletableObserver (subclass) to this Completable and returns the given, +     * CompletableObserver as is., +     * <p>Usage example:, +     * <pre><code>, +     * Completable<Integer> source = Completable.complete().delay(1, TimeUnit.SECONDS);, +     * CompositeDisposable composite = new CompositeDisposable();, +     * , +     * class ResourceCompletableObserver implements CompletableObserver, Disposable {, +     *     // ..., +     * }, +     * , +     * composite.add(source.subscribeWith(new ResourceCompletableObserver()));, +     * </code></pre>, +     * @param <E> the type of the CompletableObserver to use and return, +     * @param observer the CompletableObserver (subclass) to use and return, not null, +     * @return the input {@code observer}, +     * @throws NullPointerException if {@code observer} is null, +     * @since 2.0, +     */, +    public final <E extends CompletableObserver> E subscribeWith(E observer) {, +        subscribe(observer);]