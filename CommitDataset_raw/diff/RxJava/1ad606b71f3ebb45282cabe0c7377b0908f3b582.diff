[+++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.Observable;, +     * Concatenates an array of Publishers eagerly into a single stream of values., +     * <p>, +     * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEager.png" alt="">, +     * @param sources an array of Publishers that need to be eagerly concatenated, +     * Concatenates an array of Publishers eagerly into a single stream of values., +     * <p>, +     * <img width="640" height="406" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEager.nn.png" alt="">, +     * @param sources an array of Publishers that need to be eagerly concatenated, +     * Concatenates an array of {@link Publisher}s eagerly into a single stream of values, +     * and delaying any errors until all sources terminate., +     * <p>, +     * <img width="640" height="358" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEagerDelayError.png" alt="">, +     * <p>, +     * Eager concatenation means that once a subscriber subscribes, this operator subscribes to all of the, +     * source {@code Publisher}s. The operator buffers the values emitted by these {@code Publisher}s, +     * and then drains them in order, each one after the previous one completes., +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator honors backpressure from downstream. The {@code Publisher}, +     *  sources are expected to honor backpressure as well., +     *  If any of the source {@code Publisher}s violate this, the operator will signal a, +     *  {@code MissingBackpressureException}.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>This method does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param <T> the value type, +     * @param sources an array of {@code Publisher}s that need to be eagerly concatenated, +     * @return the new Flowable instance with the specified concatenation behavior, +     * @since 2.2.1 - experimental, +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    @BackpressureSupport(BackpressureKind.FULL), +    public static <T> Flowable<T> concatArrayEagerDelayError(Publisher<? extends T>... sources) {, +        return concatArrayEagerDelayError(bufferSize(), bufferSize(), sources);, +    }, +, +    /**, +     * Concatenates an array of {@link Publisher}s eagerly into a single stream of values, +     * and delaying any errors until all sources terminate., +     * <p>, +     * <img width="640" height="359" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEagerDelayError.nn.png" alt="">, +     * <p>, +     * Eager concatenation means that once a subscriber subscribes, this operator subscribes to all of the, +     * source {@code Publisher}s. The operator buffers the values emitted by these {@code Publisher}s, +     * and then drains them in order, each one after the previous one completes., +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator honors backpressure from downstream. The {@code Publisher}, +     *  sources are expected to honor backpressure as well., +     *  If any of the source {@code Publisher}s violate this, the operator will signal a, +     *  {@code MissingBackpressureException}.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>This method does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param <T> the value type, +     * @param sources an array of {@code Publisher}s that need to be eagerly concatenated, +     * @param maxConcurrency the maximum number of concurrent subscriptions at a time, Integer.MAX_VALUE, +     *                       is interpreted as indication to subscribe to all sources at once, +     * @param prefetch the number of elements to prefetch from each {@code Publisher} source, +     * @return the new Flowable instance with the specified concatenation behavior, +     * @since 2.2.1 - experimental, +     */, +    @SuppressWarnings({ "rawtypes", "unchecked" }), +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    @BackpressureSupport(BackpressureKind.FULL), +    public static <T> Flowable<T> concatArrayEagerDelayError(int maxConcurrency, int prefetch, Publisher<? extends T>... sources) {, +        return fromArray(sources).concatMapEagerDelayError((Function)Functions.identity(), maxConcurrency, prefetch, true);, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.Observable;, +     * Concatenates an array of Publishers eagerly into a single stream of values., +     * <p>, +     * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEager.png" alt="">, +     * @param sources an array of Publishers that need to be eagerly concatenated, +     * Concatenates an array of Publishers eagerly into a single stream of values., +     * <p>, +     * <img width="640" height="406" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEager.nn.png" alt="">, +     * @param sources an array of Publishers that need to be eagerly concatenated, +     * Concatenates an array of {@link Publisher}s eagerly into a single stream of values, +     * and delaying any errors until all sources terminate., +     * <p>, +     * <img width="640" height="358" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEagerDelayError.png" alt="">, +     * <p>, +     * Eager concatenation means that once a subscriber subscribes, this operator subscribes to all of the, +     * source {@code Publisher}s. The operator buffers the values emitted by these {@code Publisher}s, +     * and then drains them in order, each one after the previous one completes., +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator honors backpressure from downstream. The {@code Publisher}, +     *  sources are expected to honor backpressure as well., +     *  If any of the source {@code Publisher}s violate this, the operator will signal a, +     *  {@code MissingBackpressureException}.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>This method does not operate by default on a particular {@link Scheduler}.</dd>]