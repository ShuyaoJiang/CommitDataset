[+++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableTimer.java, +import java.util.concurrent.atomic.AtomicReference;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.disposables.DisposableHelper;, +/**, + * Signals an {@code onCompleted} event after the specified delay, + */, +        TimerDisposable parent = new TimerDisposable(s);, +        s.onSubscribe(parent);, +        parent.setFuture(scheduler.scheduleDirect(parent, delay, unit));, +    static final class TimerDisposable extends AtomicReference<Disposable> implements Disposable, Runnable {, +        /** */, +        private static final long serialVersionUID = 3167244060586201109L;, +        final CompletableObserver actual;, +, +        TimerDisposable(final CompletableObserver actual) {, +            this.actual = actual;, +        }, +, +        @Override, +        public void run() {, +            actual.onComplete();, +        }, +, +        @Override, +        public void dispose() {, +            DisposableHelper.dispose(this);, +        }, +, +        @Override, +        public boolean isDisposed() {, +            return DisposableHelper.isDisposed(get());, +        }, +, +        void setFuture(Disposable d) {, +            DisposableHelper.replace(this, d);, +        }, +    }, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableTimer.java, +import java.util.concurrent.atomic.AtomicReference;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.disposables.DisposableHelper;, +/**, + * Signals an {@code onCompleted} event after the specified delay, + */, +        TimerDisposable parent = new TimerDisposable(s);, +        s.onSubscribe(parent);, +        parent.setFuture(scheduler.scheduleDirect(parent, delay, unit));, +    static final class TimerDisposable extends AtomicReference<Disposable> implements Disposable, Runnable {, +        /** */, +        private static final long serialVersionUID = 3167244060586201109L;, +        final CompletableObserver actual;, +, +        TimerDisposable(final CompletableObserver actual) {, +            this.actual = actual;, +        }, +, +        @Override, +        public void run() {, +            actual.onComplete();, +        }, +, +        @Override, +        public void dispose() {, +            DisposableHelper.dispose(this);, +        }, +, +        @Override, +        public boolean isDisposed() {, +            return DisposableHelper.isDisposed(get());, +        }, +, +        void setFuture(Disposable d) {, +            DisposableHelper.replace(this, d);, +        }, +    }, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeTimer.java, + * Signals a {@code 0L} after the specified delay, +    protected void subscribeActual(final MaybeObserver<? super Long> observer) {, +        parent.setFuture(scheduler.scheduleDirect(parent, delay, unit));, +        TimerDisposable(final MaybeObserver<? super Long> actual) {, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableTimer.java, +import java.util.concurrent.atomic.AtomicReference;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.disposables.DisposableHelper;, +/**, + * Signals an {@code onCompleted} event after the specified delay, + */, +        TimerDisposable parent = new TimerDisposable(s);, +        s.onSubscribe(parent);, +        parent.setFuture(scheduler.scheduleDirect(parent, delay, unit));, +    static final class TimerDisposable extends AtomicReference<Disposable> implements Disposable, Runnable {, +        /** */, +        private static final long serialVersionUID = 3167244060586201109L;, +        final CompletableObserver actual;, +, +        TimerDisposable(final CompletableObserver actual) {, +            this.actual = actual;, +        }, +]