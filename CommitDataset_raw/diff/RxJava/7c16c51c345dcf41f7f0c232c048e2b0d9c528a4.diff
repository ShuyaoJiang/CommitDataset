[+++ b/rxjava-core/src/test/java/rx/observers/SerializedObserverTest.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.observers;, +, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +, +public abstract class SerializedObserverTest {, +, +    @Mock, +    Subscriber<String> observer;, +, +    @Before, +    public void before() {, +        MockitoAnnotations.initMocks(this);, +    }, +, +    protected abstract Observer<String> serializedObserver(Observer<String> o);, +, +    @Test, +    public void testSingleThreadedBasic() {, +        Subscription s = mock(Subscription.class);, +        TestSingleThreadedObservable onSubscribe = new TestSingleThreadedObservable(s, "one", "two", "three");, +        Observable<String> w = Observable.create(onSubscribe);, +, +        Observer<String> aw = serializedObserver(observer);, +, +        w.subscribe(aw);, +        onSubscribe.waitToFinish();, +, +        verify(observer, times(1)).onNext("one");, +        verify(observer, times(1)).onNext("two");, +        verify(observer, times(1)).onNext("three");, +        verify(observer, never()).onError(any(Throwable.class));, +        verify(observer, times(1)).onCompleted();, +        // non-deterministic because unsubscribe happens after 'waitToFinish' releases, +        // so commenting out for now as this is not a critical thing to test here, +        //            verify(s, times(1)).unsubscribe();, +    }, +, +    @Test, +    public void testMultiThreadedBasic() {, +        Subscription s = mock(Subscription.class);, +        TestMultiThreadedObservable onSubscribe = new TestMultiThreadedObservable(s, "one", "two", "three");, +        Observable<String> w = Observable.create(onSubscribe);, +, +        BusyObserver busyObserver = new BusyObserver();, +        Observer<String> aw = serializedObserver(busyObserver);, +, +        w.subscribe(aw);, +        onSubscribe.waitToFinish();, +, +        assertEquals(3, busyObserver.onNextCount.get());, +        assertFalse(busyObserver.onError);, +        assertTrue(busyObserver.onCompleted);, +        // non-deterministic because unsubscribe happens after 'waitToFinish' releases, +        // so commenting out for now as this is not a critical thing to test here, +        //            verify(s, times(1)).unsubscribe();, +, +        // we can have concurrency ..., +        assertTrue(onSubscribe.maxConcurrentThreads.get() > 1);, +        // ... but the onNext execution should be single threaded, +        assertEquals(1, busyObserver.maxConcurrentThreads.get());, +    }, +, +    @Test(timeout = 1000), +    public void testMultiThreadedWithNPE() throws InterruptedException {]