[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableOnErrorNext.java, +import io.reactivex.internal.functions.ObjectHelper;, +        s.onSubscribe(parent);, +    static final class OnErrorNextSubscriber<T>, +    extends SubscriptionArbiter, +    implements FlowableSubscriber<T> {, +        private static final long serialVersionUID = 4063763155303814625L;, +, +, +, +        long produced;, +, +            setSubscription(s);, +                produced++;, +            actual.onNext(t);, +                p = ObjectHelper.requireNonNull(nextSupplier.apply(t), "The nextSupplier returned a null Publisher");, +            long mainProduced = produced;, +            if (mainProduced != 0L) {, +                produced(mainProduced);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableOnErrorNext.java, +import io.reactivex.internal.functions.ObjectHelper;, +        s.onSubscribe(parent);, +    static final class OnErrorNextSubscriber<T>, +    extends SubscriptionArbiter, +    implements FlowableSubscriber<T> {, +        private static final long serialVersionUID = 4063763155303814625L;, +, +, +, +        long produced;, +, +            setSubscription(s);, +                produced++;, +            actual.onNext(t);, +                p = ObjectHelper.requireNonNull(nextSupplier.apply(t), "The nextSupplier returned a null Publisher");, +            long mainProduced = produced;, +            if (mainProduced != 0L) {, +                produced(mainProduced);, +++ b/src/test/java/io/reactivex/flowable/FlowableNullTests.java, +    @Test, +        try {, +            fail("Should have thrown");, +        } catch (CompositeException ex) {, +            List<Throwable> errors = ex.getExceptions();, +            TestHelper.assertError(errors, 0, TestException.class);, +            TestHelper.assertError(errors, 1, NullPointerException.class);, +            assertEquals(2, errors.size());, +        }]