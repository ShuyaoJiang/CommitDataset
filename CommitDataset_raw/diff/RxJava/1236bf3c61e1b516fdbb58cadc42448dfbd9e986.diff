[+++ b/src/main/java/io/reactivex/Completable.java, +     * Publisher., +     *  and expects the other {@code Publisher} to honor it as well.</dd>, +     * @param next the Publisher to subscribe after this Completable is completed, not null, +     * <strong>Advanced use without safeguards:</strong> lifts a CompletableOperator, +     * that error through a Flowable and the Publisher should return a value indicating a retry in response, +     * @param handler the handler that receives a Flowable delivering Throwables and should return a Publisher that, +     * Returns a Flowable which first delivers the events, +     * of the other Publisher then runs this Completable., +     *  and expects the other {@code Publisher} to honor it as well.</dd>, +     * @param other the other Publisher to run first, +     * @return the new Flowable instance, +     *  <dd>You specify the {@link Scheduler} this operator runs on.</dd>, +     * Returns a Flowable which when subscribed to subscribes to this Completable and, +     *  <dd>The returned {@code Flowable} honors the backpressure of the downstream consumer.</dd>, +     * @return the new Flowable instance, +     * Converts this Completable into a {@link Maybe}., +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toObservable.png" alt="">, +     * @return a {@link Maybe} that emits a single item T or an error., +++ b/src/main/java/io/reactivex/Completable.java, +     * Publisher., +     *  and expects the other {@code Publisher} to honor it as well.</dd>, +     * @param next the Publisher to subscribe after this Completable is completed, not null, +     * <strong>Advanced use without safeguards:</strong> lifts a CompletableOperator, +     * that error through a Flowable and the Publisher should return a value indicating a retry in response, +     * @param handler the handler that receives a Flowable delivering Throwables and should return a Publisher that, +     * Returns a Flowable which first delivers the events, +     * of the other Publisher then runs this Completable., +     *  and expects the other {@code Publisher} to honor it as well.</dd>, +     * @param other the other Publisher to run first, +     * @return the new Flowable instance, +     *  <dd>You specify the {@link Scheduler} this operator runs on.</dd>, +     * Returns a Flowable which when subscribed to subscribes to this Completable and, +     *  <dd>The returned {@code Flowable} honors the backpressure of the downstream consumer.</dd>, +     * @return the new Flowable instance, +     * Converts this Completable into a {@link Maybe}., +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toObservable.png" alt="">, +     * @return a {@link Maybe} that emits a single item T or an error., +++ b/src/main/java/io/reactivex/Flowable.java, +     * Invokes a method on each item emitted by this {@code Flowable} and blocks until the Flowable, +     * <em>Note:</em> This will block even if the underlying Flowable is asynchronous., +     * underlying Flowable terminates with an error, rather than calling {@code onError}, this method will, +     *  Iterable's iterator will throw a {@code MissingBackpressureException}.</dd>, +     * If the {@code Flowable} may emit more than one item, use {@code Flowable.toList().toBlocking().toFuture()}., +     * Modifies the source Publisher so that it notifies a Subscriber for each item and terminal event it emits., +     *            the action that gets called when a Subscriber requests items from this, +     *  <dt><b>Backpressure:</b><dt>, +     *  <dt><b>Backpressure:</b><dt>, +     *            a {@link Disposable} that allows cancelling an asynchronous sequence, +     *  <dt><b>Backpressure:</b><dt>, +     *            a {@link Disposable} that allows cancelling an asynchronous sequence, +     *  <dt><b>Backpressure:</b><dt>, +     *            a {@link Disposable} that allows cancelling an asynchronous sequence, +     * Groups the items emitted by a {@code Publisher} according to a specified criterion, and emits these, +     * @return a {@code Publisher} that emits {@link GroupedFlowable}s, each of which corresponds to a, +     * Groups the items emitted by a {@code Publisher} according to a specified criterion, and emits these, +     * @return a {@code Publisher} that emits {@link GroupedFlowable}s, each of which corresponds to a, +     * Groups the items emitted by a {@code Publisher} according to a specified criterion, and emits these, +     * @return a {@code Publisher} that emits {@link GroupedFlowable}s, each of which corresponds to a, +     * Groups the items emitted by a {@code Publisher} according to a specified criterion, and emits these, +     * @return a {@code Publisher} that emits {@link GroupedFlowable}s, each of which corresponds to a, +     * Groups the items emitted by a {@code Publisher} according to a specified criterion, and emits these, +     * @return a {@code Publisher} that emits {@link GroupedFlowable}s, each of which corresponds to a, +     * @return a {@link Publisher} that is guaranteed to be well-behaved and to make only serialized calls to, +     * @return a {@code Publisher} that upon connection causes the source {@code Publisher} to emit items, +     *  <dt><b>Backpressure:</b><dt>, +     *  <dt><b>Backpressure:</b><dt>, +     *  <dt><b>Backpressure:</b><dt>, +     *  <dt><b>Backpressure:</b><dt>, +     *  <dt><b>Backpressure:</b><dt>, +     *            a {@link Callable} that returns a {@code Publisher} that governs the boundary between windows., +     *            a {@link Callable} that returns a {@code Publisher} that governs the boundary between windows., +++ b/src/main/java/io/reactivex/Completable.java, +     * Publisher., +     *  and expects the other {@code Publisher} to honor it as well.</dd>, +     * @param next the Publisher to subscribe after this Completable is completed, not null, +     * <strong>Advanced use without safeguards:</strong> lifts a CompletableOperator, +     * that error through a Flowable and the Publisher should return a value indicating a retry in response, +     * @param handler the handler that receives a Flowable delivering Throwables and should return a Publisher that, +     * Returns a Flowable which first delivers the events, +     * of the other Publisher then runs this Completable., +     *  and expects the other {@code Publisher} to honor it as well.</dd>, +     * @param other the other Publisher to run first, +     * @return the new Flowable instance, +     *  <dd>You specify the {@link Scheduler} this operator runs on.</dd>, +     * Returns a Flowable which when subscribed to subscribes to this Completable and, +     *  <dd>The returned {@code Flowable} honors the backpressure of the downstream consumer.</dd>, +     * @return the new Flowable instance, +     * Converts this Completable into a {@link Maybe}., +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toObservable.png" alt="">, +     * @return a {@link Maybe} that emits a single item T or an error., +++ b/src/main/java/io/reactivex/Flowable.java, +     * Invokes a method on each item emitted by this {@code Flowable} and blocks until the Flowable, +     * <em>Note:</em> This will block even if the underlying Flowable is asynchronous., +     * underlying Flowable terminates with an error, rather than calling {@code onError}, this method will, +     *  Iterable's iterator will throw a {@code MissingBackpressureException}.</dd>, +     * If the {@code Flowable} may emit more than one item, use {@code Flowable.toList().toBlocking().toFuture()}., +     * Modifies the source Publisher so that it notifies a Subscriber for each item and terminal event it emits., +     *            the action that gets called when a Subscriber requests items from this, +     *  <dt><b>Backpressure:</b><dt>]