[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSwitchMap.java, +                s.cancel();, +                    a.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSwitchMap.java, +                s.cancel();, +                    a.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableSwitchMap.java, +                s.dispose();, +                    a.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSwitchMap.java, +                s.cancel();, +                    a.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableSwitchMap.java, +                s.dispose();, +                    a.cancel();, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableSwitchTest.java, +    @Test, +    public void switchMapInnerCancelled() {, +        PublishProcessor<Integer> pp = PublishProcessor.create();, +, +        TestSubscriber<Integer> ts = Flowable.just(1), +                .switchMap(Functions.justFunction(pp)), +                .test();, +, +        assertTrue(pp.hasSubscribers());, +, +        ts.cancel();, +, +        assertFalse(pp.hasSubscribers());, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSwitchMap.java, +                s.cancel();, +                    a.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableSwitchMap.java, +                s.dispose();, +                    a.cancel();, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableSwitchTest.java, +    @Test, +    public void switchMapInnerCancelled() {, +        PublishProcessor<Integer> pp = PublishProcessor.create();, +, +        TestSubscriber<Integer> ts = Flowable.just(1), +                .switchMap(Functions.justFunction(pp)), +                .test();, +, +        assertTrue(pp.hasSubscribers());, +, +        ts.cancel();, +, +        assertFalse(pp.hasSubscribers());, +    }, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableSwitchTest.java, +, +    @Test, +    public void switchMapInnerCancelled() {, +        PublishSubject<Integer> pp = PublishSubject.create();, +, +        TestObserver<Integer> ts = Observable.just(1), +                .switchMap(Functions.justFunction(pp)), +                .test();, +, +        assertTrue(pp.hasObservers());, +, +        ts.cancel();, +, +        assertFalse(pp.hasObservers());, +    }, +]