[+++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.internal.observers.*;, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        observer.blockingGet();, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        return observer.blockingAwait(timeout, unit);, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        return observer.blockingGetError();, +        ObjectHelper.requireNonNull(unit, "unit is null");, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        return observer.blockingGetError(timeout, unit);, +++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.internal.observers.*;, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        observer.blockingGet();, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        return observer.blockingAwait(timeout, unit);, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        return observer.blockingGetError();, +        ObjectHelper.requireNonNull(unit, "unit is null");, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        return observer.blockingGetError(timeout, unit);, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.observers.BlockingObserver;, +        BlockingObserver<T> observer = new BlockingObserver<T>();, +        subscribe(observer);, +        return observer.blockingGet();, +        BlockingObserver<T> observer = new BlockingObserver<T>();, +        subscribe(observer);, +        return observer.blockingGet(defaultValue);, +++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.internal.observers.*;, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        observer.blockingGet();, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        return observer.blockingAwait(timeout, unit);, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        return observer.blockingGetError();, +        ObjectHelper.requireNonNull(unit, "unit is null");, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        return observer.blockingGetError(timeout, unit);, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.observers.BlockingObserver;, +        BlockingObserver<T> observer = new BlockingObserver<T>();, +        subscribe(observer);, +        return observer.blockingGet();, +        BlockingObserver<T> observer = new BlockingObserver<T>();, +        subscribe(observer);, +        return observer.blockingGet(defaultValue);, +++ b/src/main/java/io/reactivex/Single.java, +import io.reactivex.internal.observers.*;, +        BlockingObserver<T> observer = new BlockingObserver<T>();, +        subscribe(observer);, +        return observer.blockingGet();, +++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.internal.observers.*;, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        observer.blockingGet();, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        return observer.blockingAwait(timeout, unit);, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        return observer.blockingGetError();, +        ObjectHelper.requireNonNull(unit, "unit is null");, +        BlockingObserver<Void> observer = new BlockingObserver<Void>();, +        subscribe(observer);, +        return observer.blockingGetError(timeout, unit);, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.observers.BlockingObserver;, +        BlockingObserver<T> observer = new BlockingObserver<T>();, +        subscribe(observer);, +        return observer.blockingGet();, +        BlockingObserver<T> observer = new BlockingObserver<T>();, +        subscribe(observer);, +        return observer.blockingGet(defaultValue);, +++ b/src/main/java/io/reactivex/Single.java, +import io.reactivex.internal.observers.*;, +        BlockingObserver<T> observer = new BlockingObserver<T>();, +        subscribe(observer);, +        return observer.blockingGet();, +++ b/src/main/java/io/reactivex/internal/observers/BiConsumerSingleObserver.java, +/**, + * Copyright 2016 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at]