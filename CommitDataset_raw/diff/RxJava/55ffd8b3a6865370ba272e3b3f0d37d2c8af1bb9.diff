[+++ b/src/main/java/rx/plugins/RxJavaErrorHandler.java, + * This plugin is also responsible for augmenting rendering of {@link OnErrorThrowable.OnNextValue}., +     * Receives items causing {@link OnErrorThrowable.OnNextValue} and gives a chance to choose the String, +     * representation of the item in the OnNextValue stacktrace rendering. Returns null if this type of item, +     * is not managed and should use default rendering., +     * Note that primitive types are always rendered as their toString() value., +     * @param item the last emitted item, that caused the exception wrapped in {@link OnErrorThrowable.OnNextValue}., +     * @return a short {@link String} representation of the item if one is known for its type, or null for default., +     * For performance and overhead reasons, this should should limit to a safe production of a short {@code String}, +     * (as large renderings will bloat up the stacktrace). Prefer to try/catch({@code Throwable}) all code, +     * inside this method implementation., +     * @param item the last emitted item, that caused the exception wrapped in {@link OnErrorThrowable.OnNextValue}., +     * @return a short {@link String} representation of the item if one is known for its type, or null for default., +++ b/src/main/java/rx/plugins/RxJavaErrorHandler.java, + * This plugin is also responsible for augmenting rendering of {@link OnErrorThrowable.OnNextValue}., +     * Receives items causing {@link OnErrorThrowable.OnNextValue} and gives a chance to choose the String, +     * representation of the item in the OnNextValue stacktrace rendering. Returns null if this type of item, +     * is not managed and should use default rendering., +     * Note that primitive types are always rendered as their toString() value., +     * @param item the last emitted item, that caused the exception wrapped in {@link OnErrorThrowable.OnNextValue}., +     * @return a short {@link String} representation of the item if one is known for its type, or null for default., +     * For performance and overhead reasons, this should should limit to a safe production of a short {@code String}, +     * (as large renderings will bloat up the stacktrace). Prefer to try/catch({@code Throwable}) all code, +     * inside this method implementation., +     * @param item the last emitted item, that caused the exception wrapped in {@link OnErrorThrowable.OnNextValue}., +     * @return a short {@link String} representation of the item if one is known for its type, or null for default., +++ b/src/test/java/rx/BackpressureTests.java, +            final int NUM = RxRingBuffer.SIZE * 3 / 2; // > 1 so that take doesn't prevent buffer overflow]