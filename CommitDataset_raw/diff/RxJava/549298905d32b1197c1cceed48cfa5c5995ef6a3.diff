[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/io/reactivex/internal/schedulers/IoScheduler.java, +/**, + * Copyright 2016 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package io.reactivex.internal.schedulers;, +, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.*;, +, +import io.reactivex.Scheduler;, +import io.reactivex.disposables.*;, +import io.reactivex.internal.disposables.*;, +import io.reactivex.plugins.RxJavaPlugins;, +, +/**, + * Scheduler that creates and caches a set of thread pools and reuses them if possible., + */, +public final class IoScheduler extends Scheduler implements SchedulerLifecycle {, +    private static final String WORKER_THREAD_NAME_PREFIX = "RxCachedThreadScheduler-";, +    private static final RxThreadFactory WORKER_THREAD_FACTORY =, +            new RxThreadFactory(WORKER_THREAD_NAME_PREFIX);, +, +    private static final String EVICTOR_THREAD_NAME_PREFIX = "RxCachedWorkerPoolEvictor-";, +    private static final RxThreadFactory EVICTOR_THREAD_FACTORY =, +            new RxThreadFactory(EVICTOR_THREAD_NAME_PREFIX);, +, +    private static final long KEEP_ALIVE_TIME = 60;, +    private static final TimeUnit KEEP_ALIVE_UNIT = TimeUnit.SECONDS;, +    , +    static final ThreadWorker SHUTDOWN_THREADWORKER;, +    static {, +        SHUTDOWN_THREADWORKER = new ThreadWorker(new RxThreadFactory("RxCachedThreadSchedulerShutdown-"));, +        SHUTDOWN_THREADWORKER.dispose();, +    }, +    , +    private static final class CachedWorkerPool {, +        private final long keepAliveTime;, +        private final ConcurrentLinkedQueue<ThreadWorker> expiringWorkerQueue;, +        private final SetCompositeResource<Disposable> allWorkers;, +        private final ScheduledExecutorService evictorService;, +        private final Future<?> evictorTask;, +, +        CachedWorkerPool(long keepAliveTime, TimeUnit unit) {, +            this.keepAliveTime = unit != null ? unit.toNanos(keepAliveTime) : 0L;, +            this.expiringWorkerQueue = new ConcurrentLinkedQueue<ThreadWorker>();, +            this.allWorkers = new SetCompositeResource<Disposable>(Disposables.consumeAndDispose());, +, +            ScheduledExecutorService evictor = null;, +            Future<?> task = null;, +            if (unit != null) {, +                evictor = Executors.newScheduledThreadPool(1, EVICTOR_THREAD_FACTORY);, +                try {, +                    task = evictor.scheduleWithFixedDelay(, +                            new Runnable() {, +                                @Override, +                                public void run() {, +                                    evictExpiredWorkers();, +                                }, +                            }, this.keepAliveTime, this.keepAliveTime, TimeUnit.NANOSECONDS, +                    );, +                } catch (RejectedExecutionException ex) {, +                    RxJavaPlugins.onError(ex);, +                }, +            }, +            evictorService = evictor;, +            evictorTask = task;, +        }, +, +        ThreadWorker get() {, +            if (allWorkers.isDisposed()) {, +                return SHUTDOWN_THREADWORKER;, +            }, +            while (!expiringWorkerQueue.isEmpty()) {, +                ThreadWorker threadWorker = expiringWorkerQueue.poll();, +                if (threadWorker != null) {, +                    return threadWorker;, +                }, +            }, +, +            // No cached worker found, so create a new one., +            ThreadWorker w = new ThreadWorker(WORKER_THREAD_FACTORY);, +            allWorkers.add(w);, +            return w;, +        }, +]