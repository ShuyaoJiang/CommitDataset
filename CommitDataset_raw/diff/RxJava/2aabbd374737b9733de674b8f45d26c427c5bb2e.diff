[+++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/RxImplicitsTests.scala, +        assertEquals(0, Observable.empty[Int]().toBlockingObservable.singleOrDefault(0)), +        assertEquals(5, Observable.empty[Int]().toBlockingObservable.lastOrDefault(5)), +        assertEquals(5, Observable.empty[Int]().toBlockingObservable.lastOrDefault(5, isOdd)), +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/RxImplicitsTests.scala, +        assertEquals(0, Observable.empty[Int]().toBlockingObservable.singleOrDefault(0)), +        assertEquals(5, Observable.empty[Int]().toBlockingObservable.lastOrDefault(5)), +        assertEquals(5, Observable.empty[Int]().toBlockingObservable.lastOrDefault(5, isOdd)), +++ b/rxjava-core/src/main/java/rx/Observable.java, +import java.util.Collections;, +     * <p>Implementation note: the entire iterable sequence will be immediately emitted each time an {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned,, +     * it in not possible to unsubscribe from the sequence before it completes., +     * , +     * @param array, +     *            the source sequence, +     * @param <T>, +     *            the type of items in the {@link Iterable} sequence and the type of items to be, +     *            emitted by the resulting Observable, +     * @return an Observable that emits each item in the source {@link Iterable} sequence, +     */, +    public static <T> Observable<T> from(T[] items) {, +        return create(OperationToObservableIterable.toObservableIterable(Arrays.asList(items)));, +    }, +, +    /**, +     * Converts a series of items into an Observable., +     * <p>, +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/from.png">, +     * , +     * @param t1, +     *            item, +    @SuppressWarnings("unchecked"), +    // suppress unchecked because we are using varargs inside the method, +    public static <T> Observable<T> from(T t1) {, +        return from(Arrays.asList(t1));, +    }, +, +    /**, +     * Converts a series of items into an Observable., +     * <p>, +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/from.png">, +     * , +     * <p>Implementation note: the entire array will be immediately emitted each time an {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned,, +     * it in not possible to unsubscribe from the sequence before it completes., +     * , +     * @param t1, +     *            item, +     * @param t2, +     *            item, +     * @param <T>, +     *            the type of items in the Array, and the type of items to be emitted by the, +     *            resulting Observable, +     * @return an Observable that emits each item in the source Array, +     */, +    @SuppressWarnings("unchecked"), +    // suppress unchecked because we are using varargs inside the method, +    public static <T> Observable<T> from(T t1, T t2) {, +        return from(Arrays.asList(t1, t2));, +    }, +, +    /**, +     * Converts a series of items into an Observable., +     * <p>, +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/from.png">, +     * , +     * <p>Implementation note: the entire array will be immediately emitted each time an {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned,, +     * it in not possible to unsubscribe from the sequence before it completes., +     * , +     * @param t1, +     *            item, +     * @param t2, +     *            item, +     * @param t3, +     *            item, +     * @param <T>, +     *            the type of items in the Array, and the type of items to be emitted by the, +     *            resulting Observable, +     * @return an Observable that emits each item in the source Array, +     */, +    @SuppressWarnings("unchecked"), +    // suppress unchecked because we are using varargs inside the method, +    public static <T> Observable<T> from(T t1, T t2, T t3) {, +        return from(Arrays.asList(t1, t2, t3));, +    }, +, +    /**, +     * Converts a series of items into an Observable., +     * <p>, +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/from.png">, +     * , +     * <p>Implementation note: the entire array will be immediately emitted each time an {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned,, +     * it in not possible to unsubscribe from the sequence before it completes., +     * , +     * @param t1, +     *            item, +     * @param t2, +     *            item, +     * @param t3, +     *            item, +     * @param t4]