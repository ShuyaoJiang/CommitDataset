[+++ b/src/main/java/rx/Observable.java, +        return NeverObservable.instance();, +        return lift(OperatorDistinct.<T> instance());, +        return lift(OperatorDistinctUntilChanged.<T> instance());, +    @SuppressWarnings("unchecked"), +        return lift((OperatorAny<T>) HolderAnyForEmpty.INSTANCE);, +    }, +    , +    private static class HolderAnyForEmpty {, +        static final OperatorAny<?> INSTANCE = new OperatorAny<Object>(UtilityFunctions.alwaysTrue(), true);, +        return lift(OperatorOnBackpressureBuffer.<T> instance());, +        return lift(OperatorSingle.<T> instance());, +        , +        private static class Holder {, +            static final NeverObservable<?> INSTANCE = new NeverObservable<Object>();, +        }, +        , +        /**, +         * Returns a singleton instance of NeverObservble (cast to the generic type)., +         * , +         * @return, +         */, +        @SuppressWarnings("unchecked"), +        static <T> NeverObservable<T> instance() {, +            return (NeverObservable<T>) Holder.INSTANCE;, +        }, +        , +        NeverObservable() {, +++ b/src/main/java/rx/Observable.java, +        return NeverObservable.instance();, +        return lift(OperatorDistinct.<T> instance());, +        return lift(OperatorDistinctUntilChanged.<T> instance());, +    @SuppressWarnings("unchecked"), +        return lift((OperatorAny<T>) HolderAnyForEmpty.INSTANCE);, +    }, +    , +    private static class HolderAnyForEmpty {, +        static final OperatorAny<?> INSTANCE = new OperatorAny<Object>(UtilityFunctions.alwaysTrue(), true);, +        return lift(OperatorOnBackpressureBuffer.<T> instance());, +        return lift(OperatorSingle.<T> instance());, +        , +        private static class Holder {, +            static final NeverObservable<?> INSTANCE = new NeverObservable<Object>();, +        }, +        , +        /**, +         * Returns a singleton instance of NeverObservble (cast to the generic type)., +         * , +         * @return, +         */, +        @SuppressWarnings("unchecked"), +        static <T> NeverObservable<T> instance() {, +            return (NeverObservable<T>) Holder.INSTANCE;, +        }, +        , +        NeverObservable() {, +++ b/src/main/java/rx/internal/operators/OperatorDistinct.java, +, +import rx.internal.util.UtilityFunctions;, +    private static class Holder {, +        static final OperatorDistinct<?,?> INSTANCE = new OperatorDistinct<Object,Object>(UtilityFunctions.<Object>identity());, +    }, +    , +    /**, +     * Returns a singleton instance of OperatorDistinct that was built using , +     * the identity function for comparison (<code>new OperatorDistinct(UtilityFunctions.identity())</code>)., +     * , +     * @return Operator that emits distinct values only (regardless of order) using the identity function for comparison , +     */, +    @SuppressWarnings("unchecked"), +    public static <T> OperatorDistinct<T,T> instance() {, +        return (OperatorDistinct<T, T>) Holder.INSTANCE;, +    }, +, +++ b/src/main/java/rx/Observable.java, +        return NeverObservable.instance();, +        return lift(OperatorDistinct.<T> instance());, +        return lift(OperatorDistinctUntilChanged.<T> instance());, +    @SuppressWarnings("unchecked"), +        return lift((OperatorAny<T>) HolderAnyForEmpty.INSTANCE);, +    }, +    , +    private static class HolderAnyForEmpty {, +        static final OperatorAny<?> INSTANCE = new OperatorAny<Object>(UtilityFunctions.alwaysTrue(), true);, +        return lift(OperatorOnBackpressureBuffer.<T> instance());, +        return lift(OperatorSingle.<T> instance());, +        , +        private static class Holder {, +            static final NeverObservable<?> INSTANCE = new NeverObservable<Object>();, +        }, +        , +        /**, +         * Returns a singleton instance of NeverObservble (cast to the generic type)., +         * , +         * @return, +         */, +        @SuppressWarnings("unchecked"), +        static <T> NeverObservable<T> instance() {, +            return (NeverObservable<T>) Holder.INSTANCE;, +        }]