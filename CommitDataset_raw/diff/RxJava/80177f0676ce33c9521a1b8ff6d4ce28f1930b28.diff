[+++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +import java.util.Collections;, +    /** Sentinel to indicate a thread is modifying the subscription set. */, +    private static final Set<Subscription> MUTATE_SENTINEL = unmodifiableSet(Collections.<Subscription>emptySet());, +    /** Sentinel to indicate the entire CompositeSubscription has been unsubscribed.*/, +    private static final Set<Subscription> UNSUBSCRIBED_SENTINEL = unmodifiableSet(Collections.<Subscription>emptySet());, +    /** The reference to the set of subscriptions. */, +        return reference.get() == UNSUBSCRIBED_SENTINEL;, +            if (existing == UNSUBSCRIBED_SENTINEL) {, +            if (existing == MUTATE_SENTINEL) {, +                continue;, +            }, +            , +            if (reference.compareAndSet(existing, MUTATE_SENTINEL)) {, +            if (subscriptions == UNSUBSCRIBED_SENTINEL) {, +            if (subscriptions == MUTATE_SENTINEL) {, +                continue;, +            }, +            , +            if (reference.compareAndSet(subscriptions, MUTATE_SENTINEL)) {, +            if (subscriptions == UNSUBSCRIBED_SENTINEL) {, +            if (subscriptions == MUTATE_SENTINEL) {, +                continue;, +            }, +            , +            if (reference.compareAndSet(subscriptions, MUTATE_SENTINEL)) {, +                unsubscribeAll(copy);, +    /**, +     * Unsubscribe from the collection of subscriptions., +     * <p>, +     * Exceptions thrown by any of the {@code unsubscribe()} methods are, +     * collected into a {@link CompositeException} and thrown once, +     * all unsubscriptions have been attempted., +     * @param subs the collection of subscriptions, +     */, +    private void unsubscribeAll(Collection<Subscription> subs) {, +        for (final Subscription s : subs) {, +        if (!es.isEmpty()) {, +    }, +    @Override, +    public void unsubscribe() {, +        do {, +            final Set<Subscription> subscriptions = reference.get();, +            if (subscriptions == UNSUBSCRIBED_SENTINEL) {, +                break;, +            }, +            , +            if (subscriptions == MUTATE_SENTINEL) {, +                continue;, +            }, +            , +            if (reference.compareAndSet(subscriptions, UNSUBSCRIBED_SENTINEL)) {, +                unsubscribeAll(subscriptions);, +                break;, +            }, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +import java.util.Collections;, +    /** Sentinel to indicate a thread is modifying the subscription set. */, +    private static final Set<Subscription> MUTATE_SENTINEL = unmodifiableSet(Collections.<Subscription>emptySet());, +    /** Sentinel to indicate the entire CompositeSubscription has been unsubscribed.*/, +    private static final Set<Subscription> UNSUBSCRIBED_SENTINEL = unmodifiableSet(Collections.<Subscription>emptySet());, +    /** The reference to the set of subscriptions. */, +        return reference.get() == UNSUBSCRIBED_SENTINEL;, +            if (existing == UNSUBSCRIBED_SENTINEL) {, +            if (existing == MUTATE_SENTINEL) {, +                continue;, +            }, +            , +            if (reference.compareAndSet(existing, MUTATE_SENTINEL)) {, +            if (subscriptions == UNSUBSCRIBED_SENTINEL) {, +            if (subscriptions == MUTATE_SENTINEL) {, +                continue;, +            }, +            , +            if (reference.compareAndSet(subscriptions, MUTATE_SENTINEL)) {, +            if (subscriptions == UNSUBSCRIBED_SENTINEL) {, +            if (subscriptions == MUTATE_SENTINEL) {, +                continue;, +            }, +            , +            if (reference.compareAndSet(subscriptions, MUTATE_SENTINEL)) {, +                unsubscribeAll(copy);, +    /**, +     * Unsubscribe from the collection of subscriptions., +     * <p>, +     * Exceptions thrown by any of the {@code unsubscribe()} methods are, +     * collected into a {@link CompositeException} and thrown once, +     * all unsubscriptions have been attempted., +     * @param subs the collection of subscriptions, +     */, +    private void unsubscribeAll(Collection<Subscription> subs) {, +        for (final Subscription s : subs) {, +        if (!es.isEmpty()) {, +    }, +    @Override, +    public void unsubscribe() {, +        do {, +            final Set<Subscription> subscriptions = reference.get();, +            if (subscriptions == UNSUBSCRIBED_SENTINEL) {, +                break;]