[+++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.13', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.13', +    exclude "**/internal/**", +++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.13', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.13', +    exclude "**/internal/**", +++ b/src/main/java/io/reactivex/BackpressureStrategy.java, +/**, + * Represents the options for applying backpressure to a source sequence., + */, +    /**, +     * Buffer all values (unbounded) until there is a downstream demand for it., +     */, +    /**, +     * Drop the value if there is no current demand for it from the downstream., +     */, +    /**, +     * Have a latest value always available and overwrite it with more recent ones, +     * if there is no demand for it from the downstream., +     */, +++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.13', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.13', +    exclude "**/internal/**", +++ b/src/main/java/io/reactivex/BackpressureStrategy.java, +/**, + * Represents the options for applying backpressure to a source sequence., + */, +    /**, +     * Buffer all values (unbounded) until there is a downstream demand for it., +     */, +    /**, +     * Drop the value if there is no current demand for it from the downstream., +     */, +    /**, +     * Have a latest value always available and overwrite it with more recent ones, +     * if there is no demand for it from the downstream., +     */, +++ b/src/main/java/io/reactivex/Completable.java, +        subscribe(new SubscriberCompletableObserver<Void>(ts));, +        subscribe(new SubscriberCompletableObserver<Void>(ts));, +++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.13', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.13', +    exclude "**/internal/**", +++ b/src/main/java/io/reactivex/BackpressureStrategy.java, +/**, + * Represents the options for applying backpressure to a source sequence., + */, +    /**, +     * Buffer all values (unbounded) until there is a downstream demand for it., +     */, +    /**, +     * Drop the value if there is no current demand for it from the downstream., +     */, +    /**, +     * Have a latest value always available and overwrite it with more recent ones, +     * if there is no demand for it from the downstream., +     */, +++ b/src/main/java/io/reactivex/Completable.java, +        subscribe(new SubscriberCompletableObserver<Void>(ts));, +        subscribe(new SubscriberCompletableObserver<Void>(ts));, +++ b/src/main/java/io/reactivex/FlowableTransformer.java, + * Interface to compose Flowables., + * @param <Upstream> the upstream value type, + * @param <Downstream> the downstream value type, +public interface FlowableTransformer<Upstream, Downstream> extends Function<Flowable<Upstream>, Publisher<? extends Downstream>> {, +++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.13', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.13', +    exclude "**/internal/**", +++ b/src/main/java/io/reactivex/BackpressureStrategy.java, +/**, + * Represents the options for applying backpressure to a source sequence., + */, +    /**, +     * Buffer all values (unbounded) until there is a downstream demand for it., +     */, +    /**, +     * Drop the value if there is no current demand for it from the downstream., +     */, +    /**, +     * Have a latest value always available and overwrite it with more recent ones, +     * if there is no demand for it from the downstream., +     */, +++ b/src/main/java/io/reactivex/Completable.java, +        subscribe(new SubscriberCompletableObserver<Void>(ts));, +        subscribe(new SubscriberCompletableObserver<Void>(ts));, +++ b/src/main/java/io/reactivex/FlowableTransformer.java, + * Interface to compose Flowables., + * @param <Upstream> the upstream value type, + * @param <Downstream> the downstream value type, +public interface FlowableTransformer<Upstream, Downstream> extends Function<Flowable<Upstream>, Publisher<? extends Downstream>> {, +++ b/src/main/java/io/reactivex/ObservableOperator.java, +/**, + * Interface to map/wrap a downstream subscriber to an upstream Observer., + *, + * @param <Downstream> the value type of the downstream]