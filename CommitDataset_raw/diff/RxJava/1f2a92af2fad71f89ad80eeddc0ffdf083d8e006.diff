[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorCast;, +import rx.operators.OperatorGroupBy;, +import rx.operators.OperatorMap;, +import rx.operators.OperatorMerge;, +import rx.operators.OperatorParallel;, +import rx.operators.OperatorTimestamp;, +     * <em>Note:</em> Use {@link #create(OnSubscribeFunc)} to create an Observable, instead of this, +     * constructor, unless you specifically have a need for inheritance., +     * Returns an Observable that will execute the specified function when an {@link Observer}, +     * subscribes to it., +     * Write the function you pass to {@code create} so that it behaves as an Observable: It should, +     * invoke the Observer's {@link Observer#onNext onNext}, {@link Observer#onError onError}, and, +     * {@link Observer#onCompleted onCompleted} methods appropriately., +     * A well-formed Observable must invoke either the Observer's {@code onCompleted} method, +     * exactly once or its {@code onError} method exactly once., +     * See <a href="http://go.microsoft.com/fwlink/?LinkID=205219">Rx Design Guidelines (PDF)</a>, +     * for detailed information., +     *            a function that accepts an {@code Observer<T>}, invokes its {@code onNext},, +     *            {@code onError}, and {@code onCompleted} methods as appropriate, and returns a, +     *            {@link Subscription} that allows the Observer to cancel the subscription, +     * @return an Observable that, when an {@link Observer} subscribes to it, will execute the, +     *         specified function, +    /**, +     * Returns an Observable that will execute the specified function when an {@link Observer}, +     * subscribes to it., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/create.png">, +     * <p>, +     * Write the function you pass to {@code create} so that it behaves as an Observable: It should, +     * invoke the Observer's {@link Observer#onNext onNext}, {@link Observer#onError onError}, and, +     * {@link Observer#onCompleted onCompleted} methods appropriately., +     * <p>, +     * A well-formed Observable must invoke either the Observer's {@code onCompleted} method, +     * exactly once or its {@code onError} method exactly once., +     * <p>, +     * See <a href="http://go.microsoft.com/fwlink/?LinkID=205219">Rx Design Guidelines (PDF)</a>, +     * for detailed information., +     * , +     * @param <T>, +     *            the type of the items that this Observable emits, +     * @param func, +     *            a function that accepts an {@code Observer<T>}, invokes its {@code onNext},, +     *            {@code onError}, and {@code onCompleted} methods as appropriate, and returns a, +     *            {@link Subscription} that allows the Observer to cancel the subscription, +     * @return an Observable that, when an {@link Observer} subscribes to it, will execute the, +     *         specified function, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#create">RxJava Wiki: create()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/system.reactive.linq.observable.create.aspx">MSDN: Observable.Create</a>, +     * @deprecated, +     */, +     * Mirror the one Observable in an Iterable of several Observables that first emits an item., +     * the merged Observables notify of an error via {@link Observer#onError onError},, +     * {@code mergeDelayError} will refrain from propagating that error notification until all of, +     * if any of the merged Observables notify of an error via {@link Observer#onError onError},, +     * {@code mergeDelayError} will refrain from propagating that error notification until all of, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable)}, +     * except that if any of the merged Observables notify of an error via, +     * {@link Observer#onError onError}, {@code mergeDelayError} will refrain from propagating that, +     * This behaves like {@link #merge(Observable, Observable, Observable, Observable, Observable, Observable, Observable)}, +     * except that if any of the merged Observables notify of an error via]