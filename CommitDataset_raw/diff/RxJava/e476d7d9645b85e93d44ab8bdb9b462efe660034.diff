[+++ b/language-adaptors/rxjava-groovy/build.gradle, +apply plugin: 'java', +dependencies {, +    compile project(':rxjava-core'), +    compile 'org.codehaus.groovy:groovy:1.8.8', +    provided 'junit:junit:4.10', +    provided 'org.mockito:mockito-core:1.9.5', +}, +++ b/language-adaptors/rxjava-groovy/build.gradle, +apply plugin: 'java', +dependencies {, +    compile project(':rxjava-core'), +    compile 'org.codehaus.groovy:groovy:1.8.8', +    provided 'junit:junit:4.10', +    provided 'org.mockito:mockito-core:1.9.5', +}, +++ b/language-adaptors/rxjava-groovy/src/main/java/org/rx/lang/groovy/GroovyAdaptor.java, +package org.rx.lang.groovy;, +, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import groovy.lang.Binding;, +import groovy.lang.Closure;, +import groovy.lang.GroovyClassLoader;, +, +import java.util.Arrays;, +, +import org.codehaus.groovy.runtime.InvokerHelper;, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.rx.functions.FunctionLanguageAdaptor;, +import org.rx.reactive.Notification;, +import org.rx.reactive.Observable;, +import org.rx.reactive.Observer;, +import org.rx.reactive.Subscription;, +, +public class GroovyAdaptor implements FunctionLanguageAdaptor {, +, +    @Override, +    public Object call(Object function, Object[] args) {, +        return ((Closure<?>) function).call(args);, +    }, +, +    public Class<?> getFunctionClass() {, +        return Closure.class;, +    }, +, +    public static class UnitTest {, +, +        @Mock, +        ScriptAssertion assertion;, +, +        @Mock, +        Observer<Integer> w;, +, +        @Before, +        public void before() {, +            MockitoAnnotations.initMocks(this);, +        }, +, +        @Test, +        public void testCreateViaGroovy() {, +            runGroovyScript("o.create({it.onNext('hello');it.onCompleted();}).subscribe({ result -> a.received(result)});");, +            verify(assertion, times(1)).received("hello");, +        }, +, +        @Test, +        public void testFilterViaGroovy() {, +            runGroovyScript("o.filter(o.toObservable(1, 2, 3), {it >= 2}).subscribe({ result -> a.received(result)});");, +            verify(assertion, times(0)).received(1);, +            verify(assertion, times(1)).received(2);, +            verify(assertion, times(1)).received(3);, +        }, +, +        @Test, +        public void testLast() {, +            String script = "mockApiCall.getObservable().last().subscribe({ result -> a.received(result)});";, +            runGroovyScript(script);, +            verify(assertion, times(1)).received("hello_1");, +        }, +, +        @Test, +        public void testMap() {, +            String script = "mockApiCall.getObservable().map({v -> 'say' + v}).subscribe({ result -> a.received(result)});";, +            runGroovyScript(script);, +            verify(assertion, times(1)).received("sayhello_1");, +        }, +, +        @Test, +        public void testMapViaGroovy() {, +            runGroovyScript("o.map(o.toObservable(1, 2, 3), {'hello_' + it}).subscribe({ result -> a.received(result)});");, +            verify(assertion, times(1)).received("hello_" + 1);, +            verify(assertion, times(1)).received("hello_" + 2);, +            verify(assertion, times(1)).received("hello_" + 3);, +        }, +, +        @Test, +        public void testMaterializeViaGroovy() {]