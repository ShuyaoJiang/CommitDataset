[+++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +        boolean once = true;, +            if (once) {, +                once = false;, +        }, +            if (once) {, +                once = false;, +        }, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +        boolean once = true;, +            if (once) {, +                once = false;, +        }, +            if (once) {, +                once = false;, +        }, +++ b/rxjava-core/src/test/java/rx/subjects/ReplaySubjectTest.java, +    }, +    @Test, +    public void testTerminateOnce() {, +        ReplaySubject<Integer> source = ReplaySubject.create();, +        source.onNext(1);, +        source.onNext(2);, +        source.onCompleted();, +        , +        @SuppressWarnings("unchecked"), +        final Observer<Integer> o = mock(Observer.class);, +        , +        source.unsafeSubscribe(new Subscriber<Integer>() {, +, +            @Override, +            public void onNext(Integer t) {, +                o.onNext(t);, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                o.onError(e);, +            }, +, +            @Override, +            public void onCompleted() {, +                o.onCompleted();, +            }, +        });, +        , +        verify(o).onNext(1);, +        verify(o).onNext(2);, +        verify(o).onCompleted();, +        verify(o, never()).onError(any(Throwable.class));, +    }, +}]