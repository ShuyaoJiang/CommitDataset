[+++ b/rxjava-core/src/main/java/rx/Observable.java, +    protected Observable() {, +        this(null);, +    }, +, +     * Construct an Observable with Function to execute when subscribed to., +     * NOTE: Generally you're better off using {@link #create(Func1)} to create an Observable instead of using inheritance., +     * an {@link Observer} must call an Observable's <code>subscribe</code> method in order to register itself, +     * to receive push-based notifications from the Observable. A typical implementation of the, +     * <code>subscribe</code> method does the following:, +     * It returns a reference to the {@link Subscription} interface. This enables, +     * Observers to unsubscribe (that is, to stop receiving notifications) before the Observable has, +     * finished sending them and has called the Observer's {@link Observer#onCompleted()} method., +     * At any given time, a particular instance of an <code>Observable<T></code> implementation is, +     * responsible for accepting all subscriptions and notifying all subscribers. Unless the, +     * documentation for a particular <code>Observable<T></code> implementation indicates otherwise,, +     * Observers should make no assumptions about the <code>Observable<T></code> implementation, such, +     * as the order of notifications that multiple Observers will receive., +     * , +     * @return a {@link Subscription} reference that allows observers, +     *         to stop receiving notifications before the provider has finished sending them, +     * an {@link Observer} must call an Observable's <code>subscribe</code> method in order to register itself, +     * to receive push-based notifications from the Observable. A typical implementation of the, +     * <code>subscribe</code> method does the following:, +     * It returns a reference to the {@link Subscription} interface. This enables, +     * Observers to unsubscribe (that is, to stop receiving notifications) before the Observable has, +     * finished sending them and has called the Observer's {@link Observer#onCompleted()} method., +     * At any given time, a particular instance of an <code>Observable<T></code> implementation is, +     * responsible for accepting all subscriptions and notifying all subscribers. Unless the, +     * documentation for a particular <code>Observable<T></code> implementation indicates otherwise,, +     * Observers should make no assumptions about the <code>Observable<T></code> implementation, such, +     * as the order of notifications that multiple Observers will receive., +     *            The {@link Scheduler} that the sequence is subscribed to on., +     * @return a {@link Subscription} reference that allows observers, +     *         to stop receiving notifications before the provider has finished sending them, +        // lookup and memoize onNext, +            throw new RuntimeException("onNext must be implemented");, +        if (o == null) {, +            throw new RuntimeException("onNext must be implemented");, +        }, +                // no callback defined, +                // no callback defined, +                if (onNext == null) {, +                    throw new RuntimeException("onNext must be implemented");, +                }, +        if (onNext == null) {, +            throw new RuntimeException("onNext must be implemented");, +        }, +                if (onError != null) {, +            }, +                if (onError != null) {, +            }, +                if (onNext == null) {, +                    throw new RuntimeException("onNext must be implemented");, +                }, +        if (onNext == null) {, +            throw new RuntimeException("onNext must be implemented");, +        }, +                if (onComplete != null) {, +            }, +                if (onError != null) {, +            }, +                if (onError != null) {, +            }, +                if (onNext == null) {, +                    throw new RuntimeException("onNext must be implemented");, +                }, +     * Returns a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     *            the subject to push source elements into., +     * @return a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     * an Observable that calls {@link Observer#onError(Exception)} when the Observer subscribes., +     *            the type of object returned by the Observable, +     * Creates an Observable that will execute the given function when a {@link Observer} subscribes to it., +     * Write the function you pass to <code>create</code> so that it behaves as an Observable - calling the passed-in, +     * <code>onNext</code>, <code>onError</code>, and <code>onCompleted</code> methods appropriately., +     * A well-formed Observable must call either the {@link Observer}'s <code>onCompleted</code> method exactly once or its <code>onError</code> method exactly once., +     * See <a href="http://go.microsoft.com/fwlink/?LinkID=205219">Rx Design Guidelines (PDF)</a> for detailed information., +     *            the type emitted by the Observable sequence, +     *            a function that accepts an <code>Observer<T></code> and calls its <code>onNext</code>, <code>onError</code>, and <code>onCompleted</code> methods, +     *            as appropriate, and returns a {@link Subscription} to allow canceling the subscription (if applicable), +     * @return an Observable that, when an {@link Observer} subscribes to it, will execute the given function, +     * Creates an Observable that will execute the given function when a {@link Observer} subscribes to it., +     * This method accept {@link Object} to allow different languages to pass in closures using {@link FunctionLanguageAdaptor}., +     * Write the function you pass to <code>create</code> so that it behaves as an Observable - calling the passed-in, +     * <code>onNext</code>, <code>onError</code>, and <code>onCompleted</code> methods appropriately., +     * A well-formed Observable must call either the {@link Observer}'s <code>onCompleted</code> method exactly once or its <code>onError</code> method exactly once., +     * See <a href="http://go.microsoft.com/fwlink/?LinkID=205219">Rx Design Guidelines (PDF)</a> for detailed information., +     *            the type emitted by the Observable sequence, +     *            a function that accepts an <code>Observer<T></code> and calls its <code>onNext</code>, <code>onError</code>, and <code>onCompleted</code> methods, +     *            as appropriate, and returns a {@link Subscription} to allow canceling the subscription (if applicable), +     * @return an Observable that, when an {@link Observer} subscribes to it, will execute the given function, +     * Returns an Observable that returns no data to the {@link Observer} and immediately invokes its <code>onCompleted</code> method., +     *            the type of item emitted by the Observable, +     * @return an Observable that returns no data to the {@link Observer} and immediately invokes the {@link Observer}'s <code>onCompleted</code> method, +     * Returns an Observable that calls <code>onError</code> when an {@link Observer} subscribes to it., +     *            the type of object returned by the Observable, +     * @return an Observable object that calls <code>onError</code> when an {@link Observer} subscribes, +     * Filters an Observable by discarding any of its emissions that do not meet some test., +     *            a function that evaluates the items emitted by the source Observable, returning <code>true</code> if they pass the filter, +     * @return an Observable that emits only those items in the original Observable that the filter evaluates as true]