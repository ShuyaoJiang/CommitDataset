[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorGroupBy;, +import rx.operators.OperatorTakeUntil;, +import rx.operators.OperatorToIterator;, +        return OperatorTakeUntil.takeUntil(source, other);, +        return create(OperatorGroupBy.groupBy(source, keySelector, elementSelector));, +        return create(OperatorGroupBy.groupBy(source, keySelector));, +        return OperatorToIterator.toIterator(that);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorGroupBy;, +import rx.operators.OperatorTakeUntil;, +import rx.operators.OperatorToIterator;, +        return OperatorTakeUntil.takeUntil(source, other);, +        return create(OperatorGroupBy.groupBy(source, keySelector, elementSelector));, +        return create(OperatorGroupBy.groupBy(source, keySelector));, +        return OperatorToIterator.toIterator(that);, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +     * Schedules an action to be executed in dueTime., +    Subscription schedule(Action0 action, long dueTime, TimeUnit unit);, +     * Schedules a cancelable action to be executed in dueTime., +    Subscription schedule(Func0<Subscription> action, long dueTime, TimeUnit unit);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorGroupBy;, +import rx.operators.OperatorTakeUntil;, +import rx.operators.OperatorToIterator;, +        return OperatorTakeUntil.takeUntil(source, other);, +        return create(OperatorGroupBy.groupBy(source, keySelector, elementSelector));, +        return create(OperatorGroupBy.groupBy(source, keySelector));, +        return OperatorToIterator.toIterator(that);, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +     * Schedules an action to be executed in dueTime., +    Subscription schedule(Action0 action, long dueTime, TimeUnit unit);, +     * Schedules a cancelable action to be executed in dueTime., +    Subscription schedule(Func0<Subscription> action, long dueTime, TimeUnit unit);, +++ b/rxjava-core/src/main/java/rx/concurrency/AbstractScheduler.java, +/* package */abstract class AbstractScheduler implements Scheduler {, +    public Subscription schedule(Action0 action) {, +        return schedule(asFunc0(action));, +    public Subscription schedule(Action0 action, long dueTime, TimeUnit unit) {, +        return schedule(asFunc0(action), dueTime, unit);, +    private static Func0<Subscription> asFunc0(final Action0 action) {, +        return new Func0<Subscription>() {, +            @Override, +            public Subscription call() {, +                action.call();, +                return Subscriptions.empty();, +            }, +        };, +    }, +, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorGroupBy;, +import rx.operators.OperatorTakeUntil;, +import rx.operators.OperatorToIterator;, +        return OperatorTakeUntil.takeUntil(source, other);, +        return create(OperatorGroupBy.groupBy(source, keySelector, elementSelector));, +        return create(OperatorGroupBy.groupBy(source, keySelector));, +        return OperatorToIterator.toIterator(that);, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +     * Schedules an action to be executed in dueTime., +    Subscription schedule(Action0 action, long dueTime, TimeUnit unit);, +     * Schedules a cancelable action to be executed in dueTime., +    Subscription schedule(Func0<Subscription> action, long dueTime, TimeUnit unit);, +++ b/rxjava-core/src/main/java/rx/concurrency/AbstractScheduler.java, +/* package */abstract class AbstractScheduler implements Scheduler {, +    public Subscription schedule(Action0 action) {, +        return schedule(asFunc0(action));, +    public Subscription schedule(Action0 action, long dueTime, TimeUnit unit) {, +        return schedule(asFunc0(action), dueTime, unit);, +    private static Func0<Subscription> asFunc0(final Action0 action) {, +        return new Func0<Subscription>() {, +            @Override, +            public Subscription call() {, +                action.call();, +                return Subscriptions.empty();, +            }, +        };, +    }, +, +++ b/rxjava-core/src/main/java/rx/concurrency/CurrentThreadScheduler.java, +import rx.util.functions.Func0;, +    private static final ThreadLocal<Queue<DiscardableAction>> QUEUE = new ThreadLocal<Queue<DiscardableAction>>();, +    public Subscription schedule(Func0<Subscription> action) {, +        DiscardableAction discardableAction = new DiscardableAction(action);, +    public Subscription schedule(Func0<Subscription> action, long dueTime, TimeUnit unit) {, +        return schedule(new SleepingAction(action, this, dueTime, unit));, +    private void enqueue(DiscardableAction action) {, +        Queue<DiscardableAction> queue = QUEUE.get();, +            queue = new LinkedList<DiscardableAction>();, +                queue.poll().call();, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorGroupBy;, +import rx.operators.OperatorTakeUntil;, +import rx.operators.OperatorToIterator;, +        return OperatorTakeUntil.takeUntil(source, other);, +        return create(OperatorGroupBy.groupBy(source, keySelector, elementSelector));, +        return create(OperatorGroupBy.groupBy(source, keySelector));, +        return OperatorToIterator.toIterator(that);, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +     * Schedules an action to be executed in dueTime.]