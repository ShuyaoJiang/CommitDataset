[+++ b/src/main/java/io/reactivex/subjects/UnicastSubject.java, +import io.reactivex.annotations.Experimental;, +    /** deliver onNext events before error event */, +    final boolean delayError;, +, +        return new UnicastSubject<T>(bufferSize(), true);, +        return new UnicastSubject<T>(capacityHint, true);, +     * @param onTerminate the callback to run when the Subject is terminated or cancelled, null not allowed, +    public static <T> UnicastSubject<T> create(int capacityHint, Runnable onTerminate) {, +        return new UnicastSubject<T>(capacityHint, onTerminate, true);, +     * Creates an UnicastSubject with the given internal buffer capacity hint, delay error flag and, +     * a callback for the case when the single Subscriber cancels its subscription., +     *, +     * <p>The callback, if not null, is called exactly once and, +     * non-overlapped with any active replay., +     *, +     * @param <T> the value type, +     * @param capacityHint the hint to size the internal unbounded buffer, +     * @param onTerminate the callback to run when the Subject is terminated or cancelled, null not allowed, +     * @param delayError deliver pending onNext events before onError, +     * @return an UnicastSubject instance, +     * @since 2.0.8 - experimental, +    @CheckReturnValue, +    @Experimental, +    public static <T> UnicastSubject<T> create(int capacityHint, Runnable onTerminate, boolean delayError) {, +        return new UnicastSubject<T>(capacityHint, onTerminate, delayError);, +    }, +, +    /**, +     * Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag., +     *, +     * <p>The callback, if not null, is called exactly once and, +     * non-overlapped with any active replay., +     *, +     * @param <T> the value type, +     * @param delayError deliver pending onNext events before onError, +     * @return an UnicastSubject instance, +     * @since 2.0.8 - experimental, +     */, +    @CheckReturnValue, +    @Experimental, +    public static <T> UnicastSubject<T> create(boolean delayError) {, +        return new UnicastSubject<T>(bufferSize(), delayError);, +    }, +, +, +    /**, +     * Creates an UnicastSubject with the given capacity hint and delay error flag., +     * @param capacityHint the capacity hint for the internal, unbounded queue, +     * @param delayError deliver pending onNext events before onError, +     * @since 2.0.8 - experimental, +     */, +    UnicastSubject(int capacityHint, boolean delayError) {, +        this.delayError = delayError;, +     * Creates an UnicastSubject with the given capacity hint and callback, +     * for when the Subject is terminated normally or its single Subscriber cancels., +     * @param onTerminate the callback to run when the Subject is terminated or cancelled, null not allowed, +     *, +     * */, +        this(capacityHint, onTerminate, true);, +    }, +, +    /**, +     * Creates an UnicastSubject with the given capacity hint, delay error flag and callback, +     * for when the Subject is terminated normally or its single Subscriber cancels., +     * @param capacityHint the capacity hint for the internal, unbounded queue, +     * @param onTerminate the callback to run when the Subject is terminated or cancelled, null not allowed, +     * @param delayError deliver pending onNext events before onError, +     * @since 2.0.8 - experimental, +     */, +    UnicastSubject(int capacityHint, Runnable onTerminate, boolean delayError) {, +        this.delayError = delayError;, +        boolean failFast = !this.delayError;, +        boolean canBeError = true;, +                boolean d = this.done;, +                if (d) {, +                    if (failFast && canBeError) {, +                        if (failedFast(q, a)) {, +                        } else {, +                            canBeError = false;, +                        }, +                    }, +, +                    if (empty) {, +                        errorOrComplete(a);, +                        return;, +                    }, +        final boolean failFast = !delayError;, +            if (failFast && d) {, +                if (failedFast(q, a)) {, +                    return;, +                }, +            }, +, +                errorOrComplete(a);, +    void errorOrComplete(Observer<? super T> a) {, +        actual.lazySet(null);, +        Throwable ex = error;, +        if (ex != null) {, +            a.onError(ex);]