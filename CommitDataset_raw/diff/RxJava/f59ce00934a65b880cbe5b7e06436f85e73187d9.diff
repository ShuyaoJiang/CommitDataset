[+++ b/src/main/java/io/reactivex/Completable.java, +     * Returns an Observable which first delivers the events, +     * of the other Observable then runs this CompletableConsumable., +     * @param other the other Observable to run first, +     * @return the new Observable instance, +     * Returns an Observable which when subscribed to subscribes to this Completable and, +     * @return the new Observable created, +++ b/src/main/java/io/reactivex/Completable.java, +     * Returns an Observable which first delivers the events, +     * of the other Observable then runs this CompletableConsumable., +     * @param other the other Observable to run first, +     * @return the new Observable instance, +     * Returns an Observable which when subscribed to subscribes to this Completable and, +     * @return the new Observable created, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.Observable;, +    public static <T, R> Flowable<R> combineLatest(Publisher<? extends T>[] sources, Function<? super T[], ? extends R> combiner) {, +    public static <T, R> Flowable<R> combineLatest(Function<? super T[], ? extends R> combiner, Publisher<? extends T>... sources) {, +    public static <T, R> Flowable<R> combineLatest(Publisher<? extends T>[] sources, Function<? super T[], ? extends R> combiner, int bufferSize) {, +        ObjectHelper.requireNonNull(combiner, "combiner is null");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +            Function<? super T[], ? extends R> combiner) {, +            Function<? super T[], ? extends R> combiner, int bufferSize) {, +            Function<? super T[], ? extends R> combiner) {, +    public static <T, R> Flowable<R> combineLatestDelayError(Function<? super T[], ? extends R> combiner, , +     * the source ObservableSources each time an item is received from any of the source Publisher, where this, +     * aggregation is defined by a specified function and delays any error from the sources until, +     * all source Publishers terminate., +     * , +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code combineLatest} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <T>, +     *            the common base type of source values, +     * @param <R>, +     *            the result type, +     * @param sources, +     *            the collection of source Publishers, +     * @param combiner, +     *            the aggregation function used to combine the items emitted by the source Publishers, +     * @param bufferSize , +     *            the internal buffer size and prefetch amount applied to every source Publisher, +     * @return a Flowable that emits items that are the result of combining the items emitted by the source, +     *         Publishers by means of the given aggregation function, +     * @see <a href="http://reactivex.io/documentation/operators/combinelatest.html">ReactiveX operators documentation: CombineLatest</a>, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public static <T, R> Flowable<R> combineLatestDelayError(Function<? super T[], ? extends R> combiner, , +            int bufferSize, Publisher<? extends T>... sources) {, +        return combineLatestDelayError(sources, combiner, bufferSize);, +    }, +, +    /**, +     * Combines a collection of source Publishers by emitting an item that aggregates the latest values of each of, +            Function<? super T[], ? extends R> combiner, int bufferSize) {, +            Function<? super T[], ? extends R> combiner) {, +            Function<? super T[], ? extends R> combiner, int bufferSize) {, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source4, "source4 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source4, "source4 is null");, +        ObjectHelper.requireNonNull(source5, "source5 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source4, "source4 is null");, +        ObjectHelper.requireNonNull(source5, "source5 is null");, +        ObjectHelper.requireNonNull(source6, "source6 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source4, "source4 is null");, +        ObjectHelper.requireNonNull(source5, "source5 is null");, +        ObjectHelper.requireNonNull(source6, "source6 is null");, +        ObjectHelper.requireNonNull(source7, "source7 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source4, "source4 is null");, +        ObjectHelper.requireNonNull(source5, "source5 is null");, +        ObjectHelper.requireNonNull(source6, "source6 is null");, +        ObjectHelper.requireNonNull(source7, "source7 is null");, +        ObjectHelper.requireNonNull(source8, "source8 is null");, +        ObjectHelper.requireNonNull(source1, "source1 is null");, +        ObjectHelper.requireNonNull(source2, "source2 is null");, +        ObjectHelper.requireNonNull(source3, "source3 is null");, +        ObjectHelper.requireNonNull(source4, "source4 is null");, +        ObjectHelper.requireNonNull(source5, "source5 is null");, +        ObjectHelper.requireNonNull(source6, "source6 is null");]