[+++ b/rxjava-core/src/test/java/rx/concurrency/TestSchedulers.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +import rx.Observer;, +import rx.Subscription;, +import rx.subscriptions.Subscriptions;, +    public void testSubscribeWithScheduler1() throws InterruptedException {, +        final String currentThreadName = Thread.currentThread().getName();, +, +        // latches for deterministically controlling the test below across threads, +        final CountDownLatch latch = new CountDownLatch(5);, +        final CountDownLatch first = new CountDownLatch(1);, +, +                try {, +                    // we block the first one so we can assert this executes asynchronously with a count, +                    first.await(1000, TimeUnit.SECONDS);, +                } catch (InterruptedException e) {, +                    throw new RuntimeException("The latch should have released if we are async.", e);, +                }, +                assertFalse(Thread.currentThread().getName().equals(currentThreadName));, +                assertTrue(Thread.currentThread().getName().startsWith("RxComputationThreadPool"));, +                latch.countDown();, +        // assert we are async, +        // release the latch so it can go forward, +        first.countDown();, +, +        // wait for all 5 responses, +        latch.await();, +        assertEquals(5, count.get());, +]