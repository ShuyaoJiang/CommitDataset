[+++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTakeUntil.java, +import java.util.concurrent.atomic.*;, +import io.reactivex.internal.disposables.DisposableHelper;, +import io.reactivex.internal.util.*;, +, +, +        TakeUntilMainObserver<T, U> parent = new TakeUntilMainObserver<T, U>(child);, +        child.onSubscribe(parent);, +        other.subscribe(parent.otherObserver);, +        source.subscribe(parent);, +    static final class TakeUntilMainObserver<T, U> extends AtomicInteger, +    implements Observer<T>, Disposable {, +        private static final long serialVersionUID = 1418547743690811973L;, +        final Observer<? super T> downstream;, +        final AtomicReference<Disposable> upstream;, +, +        final OtherObserver otherObserver;, +, +        final AtomicThrowable error;, +, +        TakeUntilMainObserver(Observer<? super T> downstream) {, +            this.downstream = downstream;, +            this.upstream = new AtomicReference<Disposable>();, +            this.otherObserver = new OtherObserver();, +            this.error = new AtomicThrowable();, +        public void dispose() {, +            DisposableHelper.dispose(upstream);, +            DisposableHelper.dispose(otherObserver);, +, +        @Override, +        public boolean isDisposed() {, +            return DisposableHelper.isDisposed(upstream.get());, +        }, +, +        @Override, +        public void onSubscribe(Disposable d) {, +            DisposableHelper.setOnce(upstream, d);, +            HalfSerializer.onNext(downstream, t, this, error);, +        public void onError(Throwable e) {, +            DisposableHelper.dispose(otherObserver);, +            HalfSerializer.onError(downstream, e, this, error);, +            DisposableHelper.dispose(otherObserver);, +            HalfSerializer.onComplete(downstream, this, error);, +        void otherError(Throwable e) {, +            DisposableHelper.dispose(upstream);, +            HalfSerializer.onError(downstream, e, this, error);, +        void otherComplete() {, +            DisposableHelper.dispose(upstream);, +            HalfSerializer.onComplete(downstream, this, error);, +        }, +, +        final class OtherObserver extends AtomicReference<Disposable>, +        implements Observer<U> {, +, +            private static final long serialVersionUID = -8693423678067375039L;, +, +            public void onSubscribe(Disposable d) {, +                DisposableHelper.setOnce(this, d);, +                DisposableHelper.dispose(this);, +                otherComplete();, +            public void onError(Throwable e) {, +                otherError(e);, +                otherComplete();, +            }, +, +, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTakeUntil.java, +import java.util.concurrent.atomic.*;, +import io.reactivex.internal.disposables.DisposableHelper;, +import io.reactivex.internal.util.*;, +, +, +        TakeUntilMainObserver<T, U> parent = new TakeUntilMainObserver<T, U>(child);, +        child.onSubscribe(parent);, +        other.subscribe(parent.otherObserver);, +        source.subscribe(parent);, +    static final class TakeUntilMainObserver<T, U> extends AtomicInteger, +    implements Observer<T>, Disposable {, +        private static final long serialVersionUID = 1418547743690811973L;, +        final Observer<? super T> downstream;, +        final AtomicReference<Disposable> upstream;, +, +        final OtherObserver otherObserver;, +, +        final AtomicThrowable error;, +, +        TakeUntilMainObserver(Observer<? super T> downstream) {, +            this.downstream = downstream;, +            this.upstream = new AtomicReference<Disposable>();, +            this.otherObserver = new OtherObserver();, +            this.error = new AtomicThrowable();, +        public void dispose() {, +            DisposableHelper.dispose(upstream);, +            DisposableHelper.dispose(otherObserver);, +, +        @Override, +        public boolean isDisposed() {, +            return DisposableHelper.isDisposed(upstream.get());, +        }, +]