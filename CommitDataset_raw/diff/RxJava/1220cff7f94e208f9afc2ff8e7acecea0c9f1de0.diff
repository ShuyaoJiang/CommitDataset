[+++ b/CHANGES.md, +### Version 0.6.2 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.6.2%22)) ###, +, +* [Issue 101](https://github.com/Netflix/RxJava/issues/101) Operator: Where (alias to filter), +* [Pull 197](https://github.com/Netflix/RxJava/pull/197) TakeWhile observables do not properly complete, +* [Issue 21](https://github.com/Netflix/RxJava/issues/21) Operator: All, +* [Pull 206](https://github.com/Netflix/RxJava/pull/206) Observable.toList breaks with multiple subscribers, +* [Issue 29](https://github.com/Netflix/RxJava/issues/29) Operator: CombineLatest, +* [Issue 211](https://github.com/Netflix/RxJava/issues/211) Remove use of JSR 305 and dependency on com.google.code.findbugs, +* [Pull 212](https://github.com/Netflix/RxJava/pull/212) Operation take leaks errors, +* [Pull 220](https://github.com/Netflix/RxJava/pull/220) TakeWhile protect calls to predicate, +* [Pull 221](https://github.com/Netflix/RxJava/pull/221) Error Handling Improvements - User Provided Observers/Functions, +* [Pull 201](https://github.com/Netflix/RxJava/pull/201) Synchronize Observer on OperationMerge, +* [Issue 43](https://github.com/Netflix/RxJava/issues/43) Operator: Finally, +, +++ b/CHANGES.md, +### Version 0.6.2 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.6.2%22)) ###, +, +* [Issue 101](https://github.com/Netflix/RxJava/issues/101) Operator: Where (alias to filter), +* [Pull 197](https://github.com/Netflix/RxJava/pull/197) TakeWhile observables do not properly complete, +* [Issue 21](https://github.com/Netflix/RxJava/issues/21) Operator: All, +* [Pull 206](https://github.com/Netflix/RxJava/pull/206) Observable.toList breaks with multiple subscribers, +* [Issue 29](https://github.com/Netflix/RxJava/issues/29) Operator: CombineLatest, +* [Issue 211](https://github.com/Netflix/RxJava/issues/211) Remove use of JSR 305 and dependency on com.google.code.findbugs, +* [Pull 212](https://github.com/Netflix/RxJava/pull/212) Operation take leaks errors, +* [Pull 220](https://github.com/Netflix/RxJava/pull/220) TakeWhile protect calls to predicate, +* [Pull 221](https://github.com/Netflix/RxJava/pull/221) Error Handling Improvements - User Provided Observers/Functions, +* [Pull 201](https://github.com/Netflix/RxJava/pull/201) Synchronize Observer on OperationMerge, +* [Issue 43](https://github.com/Netflix/RxJava/issues/43) Operator: Finally, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationConcat.java, +import java.lang.reflect.Array;, +import rx.util.functions.Action1;, +     * Combine the observable sequences from the list of Observables into one observable sequence without any transformation., +     * @param sequences, +     *            An observable sequence of elements to project., +                return new Concat<T>(sequences).call(observer);, +    public static <T> Func1<Observer<T>, Subscription> concat(final List<Observable<T>> sequences) {, +        @SuppressWarnings("unchecked"), +        Observable<T>[] o = sequences.toArray((Observable<T>[]) Array.newInstance(Observable.class, sequences.size()));, +        return concat(o);, +    }, +    public static <T> Func1<Observer<T>, Subscription> concat(final Observable<Observable<T>> sequences) {, +        final List<Observable<T>> list = new ArrayList<Observable<T>>();, +        sequences.toList().subscribe(new Action1<List<Observable<T>>>() {, +            public void call(List<Observable<T>> t1) {, +                list.addAll(t1);, +            }, +, +        });, +, +        return concat(list);, +    }, +, +    private static class Concat<T> implements Func1<Observer<T>, Subscription> {, +        private final Observable<T>[] sequences;, +        private int num = 0;, +        private int count = 0;, +        private Subscription s;, +, +        Concat(final Observable<T>... sequences) {, +            this.sequences = sequences;, +            this.num = sequences.length - 1;, +        }, +, +        private final AtomicObservableSubscription Subscription = new AtomicObservableSubscription();, +, +        private final Subscription actualSubscription = new Subscription() {, +, +            public void unsubscribe() {, +                if (null != s), +                    s.unsubscribe();, +        };, +, +        public Subscription call(Observer<T> observer) {, +            s = sequences[count].subscribe(new ConcatObserver(observer));, +, +            return Subscription.wrap(actualSubscription);, +, +        private class ConcatObserver implements Observer<T> {, +            private final Observer<T> observer;, +, +            ConcatObserver(Observer<T> observer) {, +                this.observer = observer;, +, +                if (num == count), +                else {, +                    count++;, +                    s = sequences[count].subscribe(this);, +, +            @Override, +            public void onError(Exception e) {, +                observer.onError(e);, +, +            }, +, +            @Override, +            public void onNext(T args) {, +                observer.onNext(args);, +]