[+++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscription { }, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscription { }, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        Subscription { }, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscription { }, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        Subscription { }, +++ b/rxjava-contrib/rxjava-apache-http/src/main/java/rx/apache/http/ObservableHttp.java, +                        new FutureCallback<HttpResponse>() {, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscription { }, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        Subscription { }, +++ b/rxjava-contrib/rxjava-apache-http/src/main/java/rx/apache/http/ObservableHttp.java, +                        new FutureCallback<HttpResponse>() {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OnSubscribeFromIterable;, +import rx.operators.OperatorFilter;, +import rx.operators.OperationMergeMaxConcurrent;, +        return Observable.create(OperationMergeMaxConcurrent.merge(source, maxConcurrent));, +    public final Observable<Observable<T>> nest() {, +        if (count < 0) {, +            throw new IllegalArgumentException("Count can not be negative");, +        return lift(new OperatorFilter<T>(predicate));, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscription { }, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        Subscription { }, +++ b/rxjava-contrib/rxjava-apache-http/src/main/java/rx/apache/http/ObservableHttp.java, +                        new FutureCallback<HttpResponse>() {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OnSubscribeFromIterable;, +import rx.operators.OperatorFilter;, +import rx.operators.OperationMergeMaxConcurrent;, +        return Observable.create(OperationMergeMaxConcurrent.merge(source, maxConcurrent));, +    public final Observable<Observable<T>> nest() {, +        if (count < 0) {, +            throw new IllegalArgumentException("Count can not be negative");, +        return lift(new OperatorFilter<T>(predicate));, +++ /dev/null, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscription { }, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        Subscription { }, +++ b/rxjava-contrib/rxjava-apache-http/src/main/java/rx/apache/http/ObservableHttp.java, +                        new FutureCallback<HttpResponse>() {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OnSubscribeFromIterable;, +import rx.operators.OperatorFilter;, +import rx.operators.OperationMergeMaxConcurrent;, +        return Observable.create(OperationMergeMaxConcurrent.merge(source, maxConcurrent));, +    public final Observable<Observable<T>> nest() {, +        if (count < 0) {, +            throw new IllegalArgumentException("Count can not be negative");, +        return lift(new OperatorFilter<T>(predicate));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperationMergeMaxConcurrent.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.LinkedList;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscription;, +import rx.observers.SynchronizedObserver;, +import rx.subscriptions.CompositeSubscription;, +, +/**, + * Flattens a list of Observables into one Observable sequence, without any transformation., + * <p>, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/merge.png">, + * <p>, + * You can combine the items emitted by multiple Observables so that they act like a single, + * Observable, by using the merge operation., + */, +public final class OperationMergeMaxConcurrent {, +, +    public static <T> OnSubscribeFunc<T> merge(final Observable<? extends Observable<? extends T>> o, final int maxConcurrent) {, +        if (maxConcurrent <= 0) {, +            throw new IllegalArgumentException("maxConcurrent must be positive");, +        }]