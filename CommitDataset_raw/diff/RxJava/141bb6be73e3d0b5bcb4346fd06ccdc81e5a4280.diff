[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import java.util.Comparator;, +     * Returns an Observable that forwards all items emitted from the source Observable that are sequentially distinct according to, +     * a comparator., +     * , +     * @param equalityComparator, +     *            a comparator for deciding whether two emitted items are equal or not, +     * @return an Observable of sequentially distinct items, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229776%28v=vs.103%29.aspx">MSDN: Observable.distinctUntilChanged</a>, +     */, +    public <U> Observable<T> distinctUntilChanged(Comparator<T> equalityComparator) {, +        return create(OperationDistinctUntilChanged.distinctUntilChanged(this, equalityComparator));, +    }, +, +    /**, +     * Returns an Observable that forwards all items emitted from the source Observable that are sequentially distinct according to, +     * a key selector function and a comparator., +     * , +     * @param keySelector, +     *            a function that projects an emitted item to a key value which is used for deciding whether an item is sequentially, +     *            distinct from another one or not, +     * @param equalityComparator, +     *            a comparator for deciding whether two emitted item keys are equal or not, +     * @return an Observable of sequentially distinct items, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229533%28v=vs.103%29.aspx">MSDN: Observable.distinctUntilChanged</a>, +     */, +    public <U> Observable<T> distinctUntilChanged(Func1<? super T, ? extends U> keySelector, Comparator<U> equalityComparator) {, +        return create(OperationDistinctUntilChanged.distinctUntilChanged(this, keySelector, equalityComparator));, +    }, +, +    /**, +     * a comparator., +     * , +     * @param equalityComparator, +     *            a comparator for deciding whether two emitted items are equal or not, +     * @return an Observable of distinct items, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh211630(v=vs.103).aspx">MSDN: Observable.distinct</a>, +     */, +    public <U> Observable<T> distinct(Comparator<T> equalityComparator) {, +        return create(OperationDistinct.distinct(this, equalityComparator));, +    }, +    , +    /**, +     * Returns an Observable that forwards all items emitted from the source Observable that are distinct according to, +     * Returns an Observable that forwards all items emitted from the source Observable that are distinct according to, +     * a key selector function and a comparator., +     * , +     * @param keySelector, +     *            a function that projects an emitted item to a key value which is used for deciding whether an item is, +     *            distinct from another one or not, +     * @param equalityComparator, +     *            a comparator for deciding whether two emitted item keys are equal or not, +     * @return an Observable of distinct items, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229050(v=vs.103).aspx">MSDN: Observable.distinct</a>, +     */, +    public <U> Observable<T> distinct(Func1<? super T, ? extends U> keySelector, Comparator<U> equalityComparator) {, +        return create(OperationDistinct.distinct(this, keySelector, equalityComparator));, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import java.util.Comparator;, +     * Returns an Observable that forwards all items emitted from the source Observable that are sequentially distinct according to, +     * a comparator., +     * , +     * @param equalityComparator, +     *            a comparator for deciding whether two emitted items are equal or not, +     * @return an Observable of sequentially distinct items, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229776%28v=vs.103%29.aspx">MSDN: Observable.distinctUntilChanged</a>, +     */, +    public <U> Observable<T> distinctUntilChanged(Comparator<T> equalityComparator) {, +        return create(OperationDistinctUntilChanged.distinctUntilChanged(this, equalityComparator));, +    }, +, +    /**, +     * Returns an Observable that forwards all items emitted from the source Observable that are sequentially distinct according to, +     * a key selector function and a comparator., +     * , +     * @param keySelector, +     *            a function that projects an emitted item to a key value which is used for deciding whether an item is sequentially, +     *            distinct from another one or not, +     * @param equalityComparator, +     *            a comparator for deciding whether two emitted item keys are equal or not, +     * @return an Observable of sequentially distinct items, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229533%28v=vs.103%29.aspx">MSDN: Observable.distinctUntilChanged</a>, +     */, +    public <U> Observable<T> distinctUntilChanged(Func1<? super T, ? extends U> keySelector, Comparator<U> equalityComparator) {, +        return create(OperationDistinctUntilChanged.distinctUntilChanged(this, keySelector, equalityComparator));, +    }, +, +    /**, +     * a comparator., +     * , +     * @param equalityComparator, +     *            a comparator for deciding whether two emitted items are equal or not, +     * @return an Observable of distinct items, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh211630(v=vs.103).aspx">MSDN: Observable.distinct</a>, +     */, +    public <U> Observable<T> distinct(Comparator<T> equalityComparator) {, +        return create(OperationDistinct.distinct(this, equalityComparator));]