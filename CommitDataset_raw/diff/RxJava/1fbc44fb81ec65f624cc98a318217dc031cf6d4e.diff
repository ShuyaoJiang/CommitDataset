[+++ b/src/main/java/io/reactivex/Flowable.java, +     * Returns a Flowable that signals the given (constant reference) item and then completes., +     * Note that the item is taken and re-emitted as is and not computed by any means by {@code just}. Use {@link #fromCallable(Callable)}, +     * to generate a single item on demand (when {@code Subscriber}s subscribe to it)., +     * See the multi-parameter overloads of {@code just} to emit more than one (constant reference) items one after the other., +     * Use {@link #fromArray(Object...)} to emit an arbitrary number of items that are known upfront., +     * <p>, +     * To emit the items of an {@link Iterable} sequence (such as a {@link java.util.List}), use {@link #fromIterable(Iterable)}., +     * @see #just(Object, Object), +     * @see #fromCallable(Callable), +     * @see #fromArray(Object...), +     * @see #fromIterable(Iterable), +++ b/src/main/java/io/reactivex/Flowable.java, +     * Returns a Flowable that signals the given (constant reference) item and then completes., +     * Note that the item is taken and re-emitted as is and not computed by any means by {@code just}. Use {@link #fromCallable(Callable)}, +     * to generate a single item on demand (when {@code Subscriber}s subscribe to it)., +     * See the multi-parameter overloads of {@code just} to emit more than one (constant reference) items one after the other., +     * Use {@link #fromArray(Object...)} to emit an arbitrary number of items that are known upfront., +     * <p>, +     * To emit the items of an {@link Iterable} sequence (such as a {@link java.util.List}), use {@link #fromIterable(Iterable)}., +     * @see #just(Object, Object), +     * @see #fromCallable(Callable), +     * @see #fromArray(Object...), +     * @see #fromIterable(Iterable), +++ b/src/main/java/io/reactivex/Observable.java, +     * Returns an Observable that signals the given (constant reference) item and then completes., +     * Note that the item is taken and re-emitted as is and not computed by any means by {@code just}. Use {@link #fromCallable(Callable)}, +     * to generate a single item on demand (when {@code Observer}s subscribe to it)., +     * See the multi-parameter overloads of {@code just} to emit more than one (constant reference) items one after the other., +     * Use {@link #fromArray(Object...)} to emit an arbitrary number of items that are known upfront., +     * <p>, +     * To emit the items of an {@link Iterable} sequence (such as a {@link java.util.List}), use {@link #fromIterable(Iterable)}., +     * @see #just(Object, Object), +     * @see #fromCallable(Callable), +     * @see #fromArray(Object...), +     * @see #fromIterable(Iterable)]