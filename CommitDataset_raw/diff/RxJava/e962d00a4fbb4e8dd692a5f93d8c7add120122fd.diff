[+++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> from(Iterable<? extends T> iterable) {, +    public static <T> Observable<T> defer(Func0<? extends Observable<? extends T>> observableFactory) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> from(Iterable<? extends T> iterable) {, +    public static <T> Observable<T> defer(Func0<? extends Observable<? extends T>> observableFactory) {, +++ b/rxjava-core/src/test/java/rx/CovarianceTest.java, +import java.util.ArrayList;, +, +    public void testCovarianceOfFrom() {, +        Observable.<Movie>from(new HorrorMovie());, +        Observable.<Movie>from(new ArrayList<HorrorMovie>());, +        // Observable.<HorrorMovie>from(new Movie()); // may not compile, +    }, +    , +    /**, +     * This won't compile if super/extends isn't done correctly on generics, +     */, +    @Test, +    public void testCovarianceOfMerge() {, +        Observable<HorrorMovie> horrors = Observable.from(new HorrorMovie());, +        Observable<Observable<HorrorMovie>> metaHorrors = Observable.just(horrors);, +        Observable.<Media>merge(metaHorrors);, +    }, +    , +    /**, +     * This won't compile if super/extends isn't done correctly on generics, +     */, +    @Test, +        Observable.<Movie, CoolRating, Result> zip(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        Observable.<Movie, CoolRating, Result> zip(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        Observable.<Media, Rating, ExtendedResult> zip(horrors, ratings, combine).toBlockingObservable().forEach(extendedAction);, +        Observable.<Media, Rating, Result> zip(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        Observable.<Media, Rating, ExtendedResult> zip(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        , +        Observable.<Movie, CoolRating, Result> zip(horrors, ratings, combine);, +    }, +, +    /**, +     * This won't compile if super/extends isn't done correctly on generics, +     */, +    @Test, +    public void testCovarianceOfCombineLatest() {, +        Observable<HorrorMovie> horrors = Observable.from(new HorrorMovie());, +        Observable<CoolRating> ratings = Observable.from(new CoolRating());, +, +        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        Observable.<Media, Rating, ExtendedResult> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(extendedAction);, +        Observable.<Media, Rating, Result> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        Observable.<Media, Rating, ExtendedResult> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        , +        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine);, +    }, +, +    Action1<Result> action = new Action1<Result>() {, +    };, +    Action1<ExtendedResult> extendedAction = new Action1<ExtendedResult>() {, +    };]