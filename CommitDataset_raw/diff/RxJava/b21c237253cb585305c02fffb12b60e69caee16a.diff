[+++ b/src/main/java/rx/Observable.java, +        return CachedObservable.from(this);, +        return CachedObservable.from(this, capacityHint);, +++ b/src/main/java/rx/Observable.java, +        return CachedObservable.from(this);, +        return CachedObservable.from(this, capacityHint);, +++ b/src/main/java/rx/internal/operators/CachedObservable.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.internal.operators;, +, +import java.util.concurrent.atomic.*;, +, +import rx.*;, +import rx.exceptions.*;, +import rx.internal.util.LinkedArrayList;, +import rx.subscriptions.SerialSubscription;, +, +/**, + * An observable which auto-connects to another observable, caches the elements, + * from that observable but allows terminating the connection and completing the cache., + *, + * @param <T> the source element type, + */, +public final class CachedObservable<T> extends Observable<T> {, +    /** The cache and replay state. */, +    private CacheState<T> state;, +, +    /**, +     * Creates a cached Observable with a default capacity hint of 16., +     * @param source the source Observable to cache, +     * @return the CachedObservable instance, +     */, +    public static <T> CachedObservable<T> from(Observable<? extends T> source) {, +        return from(source, 16);, +    }, +    , +    /**, +     * Creates a cached Observable with the given capacity hint., +     * @param source the source Observable to cache, +     * @param capacityHint the hint for the internal buffer size, +     * @return the CachedObservable instance, +     */, +    public static <T> CachedObservable<T> from(Observable<? extends T> source, int capacityHint) {, +        if (capacityHint < 1) {, +            throw new IllegalArgumentException("capacityHint > 0 required");, +        }, +        CacheState<T> state = new CacheState<T>(source, capacityHint);, +        CachedSubscribe<T> onSubscribe = new CachedSubscribe<T>(state);, +        return new CachedObservable<T>(onSubscribe, state);, +    }, +    , +    /**, +     * Private constructor because state needs to be shared between the Observable body and, +     * the onSubscribe function., +     * @param onSubscribe, +     * @param state, +     */, +    private CachedObservable(OnSubscribe<T> onSubscribe, CacheState<T> state) {, +        super(onSubscribe);, +        this.state = state;, +    }, +, +    /**, +     * Check if this cached observable is connected to its source., +     * @return true if already connected, +     */, +    /* public */boolean isConnected() {, +        return state.isConnected;, +    }, +    , +    /**, +     * Returns true if there are observers subscribed to this observable., +     * @return, +     */, +    /* public */ boolean hasObservers() {, +        return state.producers.length != 0;, +    }, +    , +    /**, +     * Returns the number of events currently cached., +     * @return, +     */, +    /* public */ int cachedEventCount() {, +        return state.size();, +    }, +    ]