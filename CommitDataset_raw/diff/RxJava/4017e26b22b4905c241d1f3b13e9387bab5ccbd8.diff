[+++ b/src/main/java/io/reactivex/Completable.java, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +++ b/src/main/java/io/reactivex/Completable.java, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.subscribers.*;, +++ b/src/main/java/io/reactivex/Completable.java, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.subscribers.*;, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.observers.BlockingMultiObserver;, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +     * Converts this Maybe into a Completable instance composing cancellation, +++ b/src/main/java/io/reactivex/Completable.java, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.subscribers.*;, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.observers.BlockingMultiObserver;, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +     * Converts this Maybe into a Completable instance composing cancellation, +++ b/src/main/java/io/reactivex/Observable.java, +import org.reactivestreams.Publisher;, +import io.reactivex.internal.observers.*;, +        ObjectHelper.requireNonNull(observer, "observer is null");, +++ b/src/main/java/io/reactivex/Completable.java, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.subscribers.*;, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.observers.BlockingMultiObserver;, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +     * Converts this Maybe into a Completable instance composing cancellation, +++ b/src/main/java/io/reactivex/Observable.java, +import org.reactivestreams.Publisher;, +import io.reactivex.internal.observers.*;, +        ObjectHelper.requireNonNull(observer, "observer is null");, +++ b/src/main/java/io/reactivex/Single.java, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +++ b/src/main/java/io/reactivex/Completable.java, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.subscribers.*;, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.observers.BlockingMultiObserver;, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +     * Converts this Maybe into a Completable instance composing cancellation, +++ b/src/main/java/io/reactivex/Observable.java, +import org.reactivestreams.Publisher;, +import io.reactivex.internal.observers.*;, +        ObjectHelper.requireNonNull(observer, "observer is null");, +++ b/src/main/java/io/reactivex/Single.java, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +++ b/src/main/java/io/reactivex/internal/disposables/ObserverFullArbiter.java, +    public boolean setDisposable(Disposable s) {, +++ b/src/main/java/io/reactivex/Completable.java, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +        BlockingMultiObserver<Void> observer = new BlockingMultiObserver<Void>();, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.subscribers.*;, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.observers.BlockingMultiObserver;, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +     * Converts this Maybe into a Completable instance composing cancellation, +++ b/src/main/java/io/reactivex/Observable.java, +import org.reactivestreams.Publisher;, +import io.reactivex.internal.observers.*;, +        ObjectHelper.requireNonNull(observer, "observer is null");, +++ b/src/main/java/io/reactivex/Single.java, +        BlockingMultiObserver<T> observer = new BlockingMultiObserver<T>();, +++ b/src/main/java/io/reactivex/internal/disposables/ObserverFullArbiter.java, +    public boolean setDisposable(Disposable s) {, +++ b/src/main/java/io/reactivex/internal/fuseable/ConditionalSubscriber.java, + * A Subscriber with an additional onNextIf(T) method that]