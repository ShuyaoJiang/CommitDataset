[+++ b/src/main/java/io/reactivex/Scheduler.java, +            final SerialDisposable first = new SerialDisposable();, +            final SerialDisposable sd = new SerialDisposable(first);, +            first.replace(schedule(new Runnable() {, +                    sd.replace(schedule(this, delay, unit));, +            return sd;, +++ b/src/main/java/io/reactivex/Scheduler.java, +            final SerialDisposable first = new SerialDisposable();, +            final SerialDisposable sd = new SerialDisposable(first);, +            first.replace(schedule(new Runnable() {, +                    sd.replace(schedule(this, delay, unit));, +            return sd;, +++ /dev/null, +++ b/src/main/java/io/reactivex/Scheduler.java, +            final SerialDisposable first = new SerialDisposable();, +            final SerialDisposable sd = new SerialDisposable(first);, +            first.replace(schedule(new Runnable() {, +                    sd.replace(schedule(this, delay, unit));, +            return sd;, +++ /dev/null, +++ b/src/main/java/io/reactivex/disposables/SerialDisposable.java, +    public void replace(Disposable d) {, +        DisposableHelper.replace(resource, d);, +    }, +    , +++ b/src/main/java/io/reactivex/Scheduler.java, +            final SerialDisposable first = new SerialDisposable();, +            final SerialDisposable sd = new SerialDisposable(first);, +            first.replace(schedule(new Runnable() {, +                    sd.replace(schedule(this, delay, unit));, +            return sd;, +++ /dev/null, +++ b/src/main/java/io/reactivex/disposables/SerialDisposable.java, +    public void replace(Disposable d) {, +        DisposableHelper.replace(resource, d);, +    }, +    , +++ b/src/main/java/io/reactivex/flowables/BlockingFlowable.java, +        final SerialDisposable sd = new SerialDisposable();, +                sd.replace(Disposables.from(s));, +            sd.dispose();, +        final SerialDisposable sd = new SerialDisposable();, +                sd.replace(Disposables.from(s));, +            sd.dispose();, +        final SerialDisposable sd = new SerialDisposable();, +                sd.replace(Disposables.from(d));, +                    sd.dispose();, +                return sd.isDisposed();, +                return cdl.getCount() == 0 && !sd.isDisposed();, +++ b/src/main/java/io/reactivex/Scheduler.java, +            final SerialDisposable first = new SerialDisposable();, +            final SerialDisposable sd = new SerialDisposable(first);, +            first.replace(schedule(new Runnable() {, +                    sd.replace(schedule(this, delay, unit));, +            return sd;, +++ /dev/null, +++ b/src/main/java/io/reactivex/disposables/SerialDisposable.java, +    public void replace(Disposable d) {, +        DisposableHelper.replace(resource, d);, +    }, +    , +++ b/src/main/java/io/reactivex/flowables/BlockingFlowable.java, +        final SerialDisposable sd = new SerialDisposable();, +                sd.replace(Disposables.from(s));, +            sd.dispose();, +        final SerialDisposable sd = new SerialDisposable();, +                sd.replace(Disposables.from(s));, +            sd.dispose();, +        final SerialDisposable sd = new SerialDisposable();, +                sd.replace(Disposables.from(d));, +                    sd.dispose();, +                return sd.isDisposed();, +                return cdl.getCount() == 0 && !sd.isDisposed();, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableTimer.java, +import io.reactivex.disposables.SerialDisposable;, +        SerialDisposable sd = new SerialDisposable();, +        s.onSubscribe(sd);, +        if (!sd.isDisposed()) {, +            sd.replace(scheduler.scheduleDirect(new Runnable() {, +++ b/src/main/java/io/reactivex/Scheduler.java, +            final SerialDisposable first = new SerialDisposable();, +            final SerialDisposable sd = new SerialDisposable(first);, +            first.replace(schedule(new Runnable() {, +                    sd.replace(schedule(this, delay, unit));, +            return sd;, +++ /dev/null, +++ b/src/main/java/io/reactivex/disposables/SerialDisposable.java, +    public void replace(Disposable d) {, +        DisposableHelper.replace(resource, d);, +    }, +    , +++ b/src/main/java/io/reactivex/flowables/BlockingFlowable.java, +        final SerialDisposable sd = new SerialDisposable();, +                sd.replace(Disposables.from(s));, +            sd.dispose();, +        final SerialDisposable sd = new SerialDisposable();, +                sd.replace(Disposables.from(s));, +            sd.dispose();, +        final SerialDisposable sd = new SerialDisposable();, +                sd.replace(Disposables.from(d));]