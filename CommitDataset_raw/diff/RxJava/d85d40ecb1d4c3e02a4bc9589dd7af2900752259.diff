[+++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.observers;, +, +import java.util.*;, +import java.util.concurrent.*;, +, +import io.reactivex.Notification;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.exceptions.CompositeException;, +import io.reactivex.functions.Predicate;, +import io.reactivex.internal.functions.ObjectHelper;, +import io.reactivex.internal.util.ExceptionHelper;, +, +/**, + * Base class with shared infrastructure to support TestSubscriber and TestObserver., + * @param <T> the value type consumed, + * @param <U> the subclass of this BaseTestConsumer, + */, +public abstract class BaseTestConsumer<T, U extends BaseTestConsumer<T, U>> implements Disposable {, +    /** The latch that indicates an onError or onComplete has been called. */, +    protected final CountDownLatch done;, +    /** The list of values received. */, +    protected final List<T> values;, +    /** The list of errors received. */, +    protected final List<Throwable> errors;, +    /** The number of completions. */, +    protected long completions;, +    /** The last thread seen by the observer. */, +    protected Thread lastThread;, +, +    protected boolean checkSubscriptionOnce;, +, +    protected int initialFusionMode;, +, +    protected int establishedFusionMode;, +, +    public BaseTestConsumer() {, +        this.values = new ArrayList<T>();, +        this.errors = new ArrayList<Throwable>();, +        this.done = new CountDownLatch(1);, +    }, +, +    /**, +     * Returns the last thread which called the onXXX methods of this TestObserver/TestSubscriber., +     * @return the last thread which called the onXXX methods, +     */, +    public final Thread lastThread() {, +        return lastThread;, +    }, +, +    /**, +     * Returns a shared list of received onNext values., +     * @return a list of received onNext values, +     */, +    public final List<T> values() {, +        return values;, +    }, +, +    /**, +     * Returns a shared list of received onError exceptions., +     * @return a list of received events onError exceptions, +     */, +    public final List<Throwable> errors() {, +        return errors;, +    }, +, +    /**, +     * Returns the number of times onComplete was called., +     * @return the number of times onComplete was called, +     */, +    public final long completions() {, +        return completions;, +    }, +, +    /**, +     * Returns true if TestObserver/TestSubscriber received any onError or onComplete events., +     * @return true if TestObserver/TestSubscriber received any onError or onComplete events, +     */, +    public final boolean isTerminated() {, +        return done.getCount() == 0;, +    }, +, +    /**, +     * Returns the number of onNext values received., +     * @return the number of onNext values received, +     */, +    public final int valueCount() {]