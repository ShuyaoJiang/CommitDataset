[+++ b/CHANGES.md, +See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ b/CHANGES.md, +See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ /dev/null, +++ b/CHANGES.md, +See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ /dev/null, +++ /dev/null, +++ b/CHANGES.md, +See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CHANGES.md, +See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CHANGES.md, +See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CHANGES.md, +See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationSample;, +import rx.operators.OperationTimestamp;, +import rx.util.Timestamped;, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +     * Adds a timestamp to each item emitted by this observable., +     * @return An observable sequence of timestamped items., +     */, +    public Observable<Timestamped<T>> timestamp() {, +        return create(OperationTimestamp.timestamp(this));, +    }, +    , +    /**, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +     * Samples the observable sequence at each interval., +     * , +     * @param period, +     *            The period of time that defines the sampling rate., +     * @param unit, +     *            The time unit for the sampling rate time period., +     * @return An observable sequence whose elements are the results of sampling the current observable sequence., +     */, +    public Observable<T> sample(long period, TimeUnit unit) {, +        return create(OperationSample.sample(this, period, unit));, +    }, +  , +    /**, +     * Samples the observable sequence at each interval., +     * , +     * @param period, +     *            The period of time that defines the sampling rate., +     * @param unit, +     *            The time unit for the sampling rate time period., +     * @param scheduler, +     *            The scheduler to use for sampling., +     * @return An observable sequence whose elements are the results of sampling the current observable sequence., +     */, +    public Observable<T> sample(long period, TimeUnit unit, Scheduler scheduler) {]