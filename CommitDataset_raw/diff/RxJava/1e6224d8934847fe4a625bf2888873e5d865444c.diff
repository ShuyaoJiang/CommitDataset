[+++ b/gradle.properties, +version=0.17.0-RC1-SNAPSHOT, +++ b/gradle.properties, +version=0.17.0-RC1-SNAPSHOT, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-all.zip, +++ b/gradle.properties, +version=0.17.0-RC1-SNAPSHOT, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-all.zip, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def timeoutExample(): Unit = {, +    val other = List(100L, 200L, 300L).toObservable, +    val result = Observable.interval(100 millis).timeout(50 millis, other).toBlockingObservable.toList, +    println(result), +  }, +, +  @Test def timeoutExample2(): Unit = {, +    val firstTimeoutSelector = () => {, +      Observable.timer(10 seconds, 10 seconds, ComputationScheduler()).take(1), +    }, +    val timeoutSelector = (t: Long) => {, +      Observable.timer(, +        (500 - t * 100) max 1 millis,, +        (500 - t * 100) max 1 millis,, +        ComputationScheduler()).take(1), +    }, +    val other = List(100L, 200L, 300L).toObservable, +    val result = Observable.interval(100 millis).timeout(firstTimeoutSelector, timeoutSelector, other).toBlockingObservable.toList, +    println(result), +  }, +, +++ b/gradle.properties, +version=0.17.0-RC1-SNAPSHOT, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-all.zip, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def timeoutExample(): Unit = {, +    val other = List(100L, 200L, 300L).toObservable, +    val result = Observable.interval(100 millis).timeout(50 millis, other).toBlockingObservable.toList, +    println(result), +  }, +, +  @Test def timeoutExample2(): Unit = {, +    val firstTimeoutSelector = () => {, +      Observable.timer(10 seconds, 10 seconds, ComputationScheduler()).take(1), +    }, +    val timeoutSelector = (t: Long) => {, +      Observable.timer(, +        (500 - t * 100) max 1 millis,, +        (500 - t * 100) max 1 millis,, +        ComputationScheduler()).take(1), +    }, +    val other = List(100L, 200L, 300L).toObservable, +    val result = Observable.interval(100 millis).timeout(firstTimeoutSelector, timeoutSelector, other).toBlockingObservable.toList, +    println(result), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  /**, +   * Returns an Observable that mirrors the source Observable, but emits a TimeoutException if an item emitted by, +   * the source Observable doesn't arrive within a window of time after the emission of the, +   * previous item, where that period of time is measured by an Observable that is a function, +   * of the previous item., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/timeout3.png">, +   * </p>, +   * Note: The arrival of the first source item is never timed out., +   *, +   * @param timeoutSelector, +   *            a function that returns an observable for each item emitted by the source, +   *            Observable and that determines the timeout window for the subsequent item, +   * @return an Observable that mirrors the source Observable, but emits a TimeoutException if a item emitted by, +   *         the source Observable takes longer to arrive than the time window defined by the, +   *         selector for the previously emitted item, +   */, +  def timeout[V](timeoutSelector: T => Observable[V]): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.timeout({ t: T => timeoutSelector(t).asJavaObservable.asInstanceOf[rx.Observable[V]] })), +  }, +, +  /**, +   * Returns an Observable that mirrors the source Observable, but that switches to a fallback, +   * Observable if an item emitted by the source Observable doesn't arrive within a window of time, +   * after the emission of the previous item, where that period of time is measured by an, +   * Observable that is a function of the previous item., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/timeout4.png">, +   * </p>, +   * Note: The arrival of the first source item is never timed out., +   * , +   * @param timeoutSelector, +   *            a function that returns an observable for each item emitted by the source, +   *            Observable and that determines the timeout window for the subsequent item, +   * @param other, +   *            the fallback Observable to switch to if the source Observable times out, +   * @return an Observable that mirrors the source Observable, but switches to mirroring a, +   *         fallback Observable if a item emitted by the source Observable takes longer to arrive, +   *         than the time window defined by the selector for the previously emitted item, +   */, +  def timeout[V, O >: T](timeoutSelector: T => Observable[V], other: Observable[O]): Observable[O] = {]