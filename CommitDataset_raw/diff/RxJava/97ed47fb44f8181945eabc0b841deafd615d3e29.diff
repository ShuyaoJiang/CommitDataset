[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val sharedNumbers = numbers.replay(o => o.map(_ * 2)), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val sharedNumbers = numbers.replay(o => o.map(_ * 2)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val sharedNumbers = numbers.replay(o => o.map(_ * 2)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def replay[R](selector: Observable[T] => Observable[R]): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], bufferSize: Int): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], bufferSize: Int, time: Duration): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], bufferSize: Int, time: Duration, scheduler: Scheduler): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], bufferSize: Int, scheduler: Scheduler): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], time: Duration, scheduler: Scheduler): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], scheduler: Scheduler): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], time: Duration): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def publish[T](initialValue: T): ConnectableObservable[T] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    new ConnectableObservable[T](thisJava.publish(initialValue)), +  def publish[R](selector: Observable[T] => Observable[R]): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def publish[R](selector: Observable[T] => Observable[R], initialValue: T @uncheckedVariance): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def dropUntil(other: Observable[Any]): Observable[T] = {, +  def takeUntil(that: Observable[Any]): Observable[T] = {, +  def timeout(timeoutSelector: T => Observable[Any]): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.timeout({ t: T => timeoutSelector(t).asJavaObservable.asInstanceOf[rx.Observable[Any]] })), +  def timeout[U >: T](timeoutSelector: T => Observable[Any], other: Observable[U]): Observable[U] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    toScalaObservable[U](thisJava.timeout(, +      { t: U => timeoutSelector(t.asInstanceOf[T]).asJavaObservable.asInstanceOf[rx.Observable[Any]] },, +  def timeout(firstTimeoutSelector: () => Observable[Any], timeoutSelector: T => Observable[Any]): Observable[T] = {, +      { firstTimeoutSelector().asJavaObservable.asInstanceOf[rx.Observable[Any]] },, +      { t: T => timeoutSelector(t).asJavaObservable.asInstanceOf[rx.Observable[Any]] })), +  def timeout[U >: T](firstTimeoutSelector: () => Observable[Any], timeoutSelector: T => Observable[Any], other: Observable[U]): Observable[U] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    toScalaObservable[U](thisJava.timeout(, +      { firstTimeoutSelector().asJavaObservable.asInstanceOf[rx.Observable[Any]] },, +      { t: U => timeoutSelector(t.asInstanceOf[T]).asJavaObservable.asInstanceOf[rx.Observable[Any]] },, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val sharedNumbers = numbers.replay(o => o.map(_ * 2)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def replay[R](selector: Observable[T] => Observable[R]): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], bufferSize: Int): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], bufferSize: Int, time: Duration): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], bufferSize: Int, time: Duration, scheduler: Scheduler): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], bufferSize: Int, scheduler: Scheduler): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], time: Duration, scheduler: Scheduler): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[R](selector: Observable[T] => Observable[R], scheduler: Scheduler): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]], +    val fJava: Func1[rx.Observable[T], rx.Observable[R]] =, +      (jo: rx.Observable[T]) => selector(toScalaObservable[T](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]]]