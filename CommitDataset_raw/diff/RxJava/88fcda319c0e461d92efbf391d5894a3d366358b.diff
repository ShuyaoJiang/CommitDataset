[+++ b/rxjava-core/src/main/java/rx/Subscriber.java, +            // we execute the request with whatever has been requested (or Long.MAX_VALUE), +                p.request(Long.MAX_VALUE);, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +            // we execute the request with whatever has been requested (or Long.MAX_VALUE), +                p.request(Long.MAX_VALUE);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +            if (n == Long.MAX_VALUE) {, +            } else if(n > 0) {, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +            // we execute the request with whatever has been requested (or Long.MAX_VALUE), +                p.request(Long.MAX_VALUE);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +            if (n == Long.MAX_VALUE) {, +            } else if(n > 0) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeRange.java, +            if (n == Long.MAX_VALUE) {, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +            // we execute the request with whatever has been requested (or Long.MAX_VALUE), +                p.request(Long.MAX_VALUE);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +            if (n == Long.MAX_VALUE) {, +            } else if(n > 0) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeRange.java, +            if (n == Long.MAX_VALUE) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +            if (n == Long.MAX_VALUE) {, +                requested = Long.MAX_VALUE;, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +            // we execute the request with whatever has been requested (or Long.MAX_VALUE), +                p.request(Long.MAX_VALUE);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +            if (n == Long.MAX_VALUE) {, +            } else if(n > 0) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeRange.java, +            if (n == Long.MAX_VALUE) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +            if (n == Long.MAX_VALUE) {, +                requested = Long.MAX_VALUE;, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorSkip.java, +                        if (n == Long.MAX_VALUE) {, +                        } else if (n > 0) {, +                            // add the skip num to the requested amount, since we'll skip everything and then emit to the buffer downstream, +                            producer.request(n + (toSkip - skipped));, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +            // we execute the request with whatever has been requested (or Long.MAX_VALUE), +                p.request(Long.MAX_VALUE);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +            if (n == Long.MAX_VALUE) {, +            } else if(n > 0) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeRange.java, +            if (n == Long.MAX_VALUE) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +            if (n == Long.MAX_VALUE) {, +                requested = Long.MAX_VALUE;, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorSkip.java, +                        if (n == Long.MAX_VALUE) {, +                        } else if (n > 0) {, +                            // add the skip num to the requested amount, since we'll skip everything and then emit to the buffer downstream, +                            producer.request(n + (toSkip - skipped));, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorTakeLast.java, +                request(Long.MAX_VALUE);, +            if (n == Long.MAX_VALUE) {, +                requested = Long.MAX_VALUE;, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +            // we execute the request with whatever has been requested (or Long.MAX_VALUE), +                p.request(Long.MAX_VALUE);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +            if (n == Long.MAX_VALUE) {, +            } else if(n > 0) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeRange.java, +            if (n == Long.MAX_VALUE) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +            if (n == Long.MAX_VALUE) {, +                requested = Long.MAX_VALUE;, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorSkip.java, +                        if (n == Long.MAX_VALUE) {, +                        } else if (n > 0) {, +                            // add the skip num to the requested amount, since we'll skip everything and then emit to the buffer downstream, +                            producer.request(n + (toSkip - skipped));, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorTakeLast.java, +                request(Long.MAX_VALUE);, +            if (n == Long.MAX_VALUE) {, +                requested = Long.MAX_VALUE;, +++ b/rxjava-core/src/test/java/rx/SubscriberTest.java, +        assertEquals(Long.MAX_VALUE, r.get());, +        // this will be Long.MAX_VALUE because it is decoupled and nothing requsted on the Operator subscriber, +        assertEquals(Long.MAX_VALUE, r.get());, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +            // we execute the request with whatever has been requested (or Long.MAX_VALUE), +                p.request(Long.MAX_VALUE);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +            if (n == Long.MAX_VALUE) {, +            } else if(n > 0) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeRange.java, +            if (n == Long.MAX_VALUE) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +            if (n == Long.MAX_VALUE) {, +                requested = Long.MAX_VALUE;, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorSkip.java]