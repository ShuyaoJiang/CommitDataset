[+++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.16', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.16', +++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.16', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.16', +++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.requireNonNull(seed, "seed is null");, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +        return RxJavaPlugins.onAssembly(new FlowableReduceSeedSingle<T, R>(this, seed, reducer));, +        ObjectHelper.requireNonNull(seedSupplier, "seedSupplier is null");, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +        return RxJavaPlugins.onAssembly(new FlowableReduceWithSingle<T, R>(this, seedSupplier, reducer));, +++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.16', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.16', +++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.requireNonNull(seed, "seed is null");, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +        return RxJavaPlugins.onAssembly(new FlowableReduceSeedSingle<T, R>(this, seed, reducer));, +        ObjectHelper.requireNonNull(seedSupplier, "seedSupplier is null");, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +        return RxJavaPlugins.onAssembly(new FlowableReduceWithSingle<T, R>(this, seedSupplier, reducer));, +++ b/src/main/java/io/reactivex/Observable.java, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +        return RxJavaPlugins.onAssembly(new ObservableReduceMaybe<T>(this, reducer));, +        ObjectHelper.requireNonNull(seed, "seed is null");, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +        return RxJavaPlugins.onAssembly(new ObservableReduceSeedSingle<T, R>(this, seed, reducer));, +        ObjectHelper.requireNonNull(seedSupplier, "seedSupplier is null");, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +        return RxJavaPlugins.onAssembly(new ObservableReduceWithSingle<T, R>(this, seedSupplier, reducer));, +++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.16', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.16', +++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.requireNonNull(seed, "seed is null");, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +        return RxJavaPlugins.onAssembly(new FlowableReduceSeedSingle<T, R>(this, seed, reducer));, +        ObjectHelper.requireNonNull(seedSupplier, "seedSupplier is null");, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +        return RxJavaPlugins.onAssembly(new FlowableReduceWithSingle<T, R>(this, seedSupplier, reducer));, +++ b/src/main/java/io/reactivex/Observable.java, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +        return RxJavaPlugins.onAssembly(new ObservableReduceMaybe<T>(this, reducer));, +        ObjectHelper.requireNonNull(seed, "seed is null");, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +        return RxJavaPlugins.onAssembly(new ObservableReduceSeedSingle<T, R>(this, seed, reducer));, +        ObjectHelper.requireNonNull(seedSupplier, "seedSupplier is null");, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +        return RxJavaPlugins.onAssembly(new ObservableReduceWithSingle<T, R>(this, seedSupplier, reducer));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReduceSeedSingle.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators.flowable;, +, +import org.reactivestreams.*;, +, +import io.reactivex.*;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.exceptions.Exceptions;, +import io.reactivex.functions.BiFunction;, +import io.reactivex.internal.functions.ObjectHelper;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +import io.reactivex.plugins.RxJavaPlugins;, +, +/**, + * Reduce a sequence of values, starting from a seed value and by using, + * an accumulator function and return the last accumulated value., + *, + * @param <T> the source value type, + * @param <R> the accumulated result type, + */, +public final class FlowableReduceSeedSingle<T, R> extends Single<R> {, +, +    final Publisher<T> source;, +, +    final R seed;, +, +    final BiFunction<R, ? super T, R> reducer;, +, +    public FlowableReduceSeedSingle(Publisher<T> source, R seed, BiFunction<R, ? super T, R> reducer) {, +        this.source = source;, +        this.seed = seed;, +        this.reducer = reducer;, +    }, +, +    @Override, +    protected void subscribeActual(SingleObserver<? super R> observer) {]