[+++ b/CHANGES.md, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/language-adaptors/rxjava-scala/README.md, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/language-adaptors/rxjava-scala/README.md, +++ /dev/null, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/language-adaptors/rxjava-scala/README.md, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/TODO.md, +*    Bring `BooleanSubscription`, `CompositeSubscription`, `MultipleAssignmentSubscription` to Scala, `compositeSubscription.subscription = ...`instead of setter method, add on `CompositeSubscription` should be `+=`, +*    Java Scheduler methods take `state` arguments (they were needed to schedule work on a different machine, but are now considered a bad idea). Remove these `state` arguments from all Scala schedulers., +*    add wrappers or aliases for `AsyncSubject<T>`, `BehaviorSubject<T>`, `PublishSubject<T>`, and `ReplaySubject<T>`, +*    go through Erik's code that he showed at the meeting and check if everything can now be done nicely, +*    get Erik's slides from the course and check if they are compatible with the library, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/language-adaptors/rxjava-scala/README.md, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/TODO.md, +*    Bring `BooleanSubscription`, `CompositeSubscription`, `MultipleAssignmentSubscription` to Scala, `compositeSubscription.subscription = ...`instead of setter method, add on `CompositeSubscription` should be `+=`, +*    Java Scheduler methods take `state` arguments (they were needed to schedule work on a different machine, but are now considered a bad idea). Remove these `state` arguments from all Scala schedulers., +*    add wrappers or aliases for `AsyncSubject<T>`, `BehaviorSubject<T>`, `PublishSubject<T>`, and `ReplaySubject<T>`, +*    go through Erik's code that he showed at the meeting and check if everything can now be done nicely, +*    get Erik's slides from the course and check if they are compatible with the library, +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import org.junit.Test;, +, +, +	Action1<Movie> moviePrinter = new Action1<Movie>() {, +	};, +	, +	@Test, +	public void test() {, +		MovieLib lib = new MovieLib(Observable.from(new Movie(3000), new Movie(1000), new Movie(2000)));, +		, +		lib.longMovies().subscribe(moviePrinter);		, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/language-adaptors/rxjava-scala/README.md, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/TODO.md, +*    Bring `BooleanSubscription`, `CompositeSubscription`, `MultipleAssignmentSubscription` to Scala, `compositeSubscription.subscription = ...`instead of setter method, add on `CompositeSubscription` should be `+=`, +*    Java Scheduler methods take `state` arguments (they were needed to schedule work on a different machine, but are now considered a bad idea). Remove these `state` arguments from all Scala schedulers., +*    add wrappers or aliases for `AsyncSubject<T>`, `BehaviorSubject<T>`, `PublishSubject<T>`, and `ReplaySubject<T>`, +*    go through Erik's code that he showed at the meeting and check if everything can now be done nicely, +*    get Erik's slides from the course and check if they are compatible with the library, +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import org.junit.Test;, +, +, +	Action1<Movie> moviePrinter = new Action1<Movie>() {, +	};, +	, +	@Test, +	public void test() {, +		MovieLib lib = new MovieLib(Observable.from(new Movie(3000), new Movie(1000), new Movie(2000)));, +		, +		lib.longMovies().subscribe(moviePrinter);		, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/MovieLib.scala, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/language-adaptors/rxjava-scala/README.md, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/TODO.md, +*    Bring `BooleanSubscription`, `CompositeSubscription`, `MultipleAssignmentSubscription` to Scala, `compositeSubscription.subscription = ...`instead of setter method, add on `CompositeSubscription` should be `+=`, +*    Java Scheduler methods take `state` arguments (they were needed to schedule work on a different machine, but are now considered a bad idea). Remove these `state` arguments from all Scala schedulers., +*    add wrappers or aliases for `AsyncSubject<T>`, `BehaviorSubject<T>`, `PublishSubject<T>`, and `ReplaySubject<T>`, +*    go through Erik's code that he showed at the meeting and check if everything can now be done nicely, +*    get Erik's slides from the course and check if they are compatible with the library, +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import org.junit.Test;, +, +, +	Action1<Movie> moviePrinter = new Action1<Movie>() {, +	};, +	, +	@Test]