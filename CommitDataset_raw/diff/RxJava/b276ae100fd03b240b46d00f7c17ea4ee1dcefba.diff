[+++ b/rxjava-core/src/main/java/rx/observables/Observable.java, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import rx.observables.operations.OperationToObservableFuture;, +     * Converts an Future to a Observable sequence., +     * , +     * Any object that supports the {@link Future} interface can be converted into a Observable that emits, +     * the return value of the get() method in the object, by passing the object into the <code>toObservable</code> method., +     * , +     * @param future, +     *            the source {@link Future}, +     * @param <T>, +     *            the type of of object that the future's returns and the type emitted by the resulting, +     *            Observable, +     * @return a Observable that emits the item from the source Future, +     */, +    public static <T> Observable<T> toObservable(Future<T> future) {, +        return create(OperationToObservableFuture.toObservableFuture(future));, +    }, +    , +    /**, +     * Converts an Future to a Observable sequence., +     * , +     * Any object that supports the {@link Future} interface can be converted into a Observable that emits, +     * the return value of the get() method in the object, by passing the object into the <code>toObservable</code> method., +     * , +     * @param future, +     *            the source {@link Future}, +     * @param time the maximum time to wait, +     * @param unit the time unit of the time argument, +     * @param <T>, +     *            the type of of object that the future's returns and the type emitted by the resulting, +     *            Observable, +     * @return a Observable that emits the item from the source Future, +     */, +    public static <T> Observable<T> toObservable(Future<T> future, long time, TimeUnit unit) {, +        return create(OperationToObservableFuture.toObservableFuture(future, time, unit));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/observables/Observable.java, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import rx.observables.operations.OperationToObservableFuture;, +     * Converts an Future to a Observable sequence., +     * , +     * Any object that supports the {@link Future} interface can be converted into a Observable that emits, +     * the return value of the get() method in the object, by passing the object into the <code>toObservable</code> method., +     * , +     * @param future, +     *            the source {@link Future}, +     * @param <T>, +     *            the type of of object that the future's returns and the type emitted by the resulting, +     *            Observable, +     * @return a Observable that emits the item from the source Future, +     */, +    public static <T> Observable<T> toObservable(Future<T> future) {, +        return create(OperationToObservableFuture.toObservableFuture(future));, +    }, +    , +    /**, +     * Converts an Future to a Observable sequence., +     * , +     * Any object that supports the {@link Future} interface can be converted into a Observable that emits, +     * the return value of the get() method in the object, by passing the object into the <code>toObservable</code> method., +     * , +     * @param future, +     *            the source {@link Future}, +     * @param time the maximum time to wait, +     * @param unit the time unit of the time argument, +     * @param <T>, +     *            the type of of object that the future's returns and the type emitted by the resulting, +     *            Observable, +     * @return a Observable that emits the item from the source Future, +     */, +    public static <T> Observable<T> toObservable(Future<T> future, long time, TimeUnit unit) {, +        return create(OperationToObservableFuture.toObservableFuture(future, time, unit));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/observables/operations/OperationToObservableFuture.java, +package rx.observables.operations;, +, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +, +import org.junit.Test;, +, +import rx.observables.Observable;, +import rx.observables.Observer;, +import rx.observables.Subscription;, +import rx.util.functions.Func1;, +, +public class OperationToObservableFuture {]