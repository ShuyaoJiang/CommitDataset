[+++ b/src/main/java/rx/internal/operators/OperatorBufferWithSize.java, +++ b/src/main/java/rx/internal/operators/OperatorBufferWithSize.java, +++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +        private final ConcurrentHashMap<Object, GroupState<K, T>> groups = new ConcurrentHashMap<Object, GroupState<K, T>>();, +        private Object groupedKey(K key) {, +            return key == null ? NULL_KEY : key;, +        }, +, +        private K getKey(Object groupedKey) {, +            return groupedKey == NULL_KEY ? null : (K) groupedKey;, +        }, +, +                final Object key = groupedKey(keySelector.call(t));, +        private GroupState<K, T> createNewGroup(final Object key) {, +            GroupedObservable<K, R> go = GroupedObservable.create(getKey(key), new OnSubscribe<R>() {, +        private void cleanupGroup(Object key) {, +    private static final Object NULL_KEY = new Object();, +++ b/src/main/java/rx/internal/operators/OperatorBufferWithSize.java, +++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +        private final ConcurrentHashMap<Object, GroupState<K, T>> groups = new ConcurrentHashMap<Object, GroupState<K, T>>();, +        private Object groupedKey(K key) {, +            return key == null ? NULL_KEY : key;, +        }, +, +        private K getKey(Object groupedKey) {, +            return groupedKey == NULL_KEY ? null : (K) groupedKey;, +        }, +, +                final Object key = groupedKey(keySelector.call(t));, +        private GroupState<K, T> createNewGroup(final Object key) {, +            GroupedObservable<K, R> go = GroupedObservable.create(getKey(key), new OnSubscribe<R>() {, +        private void cleanupGroup(Object key) {, +    private static final Object NULL_KEY = new Object();, +++ b/src/test/java/rx/internal/operators/OperatorGroupByTest.java, +import java.util.List;, +    @Test, +    public void testGroupByWithNullKey() {, +        final String[] key = new String[]{"uninitialized"};, +        final List<String> values = new ArrayList<String>();, +        Observable.just("a", "b", "c").groupBy(new Func1<String, String>() {, +, +            @Override, +            public String call(String value) {, +                return null;, +            }, +        }).subscribe(new Action1<GroupedObservable<String, String>>() {, +, +            @Override, +            public void call(GroupedObservable<String, String> groupedObservable) {, +                key[0] = groupedObservable.getKey();, +                groupedObservable.subscribe(new Action1<String>() {, +, +                    @Override, +                    public void call(String s) {, +                        values.add(s);, +                    }, +                });, +            }, +        });, +        assertEquals(null, key[0]);, +        assertEquals(Arrays.asList("a", "b", "c"), values);, +    }]