[+++ b/src/main/java/io/reactivex/Completable.java, +        try {, +            return wrap(transformer.apply(this));, +        } catch (Throwable ex) {, +            Exceptions.throwIfFatal(ex);, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +++ b/src/main/java/io/reactivex/Completable.java, +        try {, +            return wrap(transformer.apply(this));, +        } catch (Throwable ex) {, +            Exceptions.throwIfFatal(ex);, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +++ b/src/main/java/io/reactivex/CompletableTransformer.java, +public interface CompletableTransformer {, +    CompletableSource apply(Completable completable) throws Exception;, +++ b/src/main/java/io/reactivex/Completable.java, +        try {, +            return wrap(transformer.apply(this));, +        } catch (Throwable ex) {, +            Exceptions.throwIfFatal(ex);, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +++ b/src/main/java/io/reactivex/CompletableTransformer.java, +public interface CompletableTransformer {, +    CompletableSource apply(Completable completable) throws Exception;, +++ b/src/main/java/io/reactivex/Flowable.java, +        try {, +            return fromPublisher(composer.apply(this));, +        } catch (Throwable ex) {, +            Exceptions.throwIfFatal(ex);, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +++ b/src/main/java/io/reactivex/Completable.java, +        try {, +            return wrap(transformer.apply(this));, +        } catch (Throwable ex) {, +            Exceptions.throwIfFatal(ex);, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +++ b/src/main/java/io/reactivex/CompletableTransformer.java, +public interface CompletableTransformer {, +    CompletableSource apply(Completable completable) throws Exception;, +++ b/src/main/java/io/reactivex/Flowable.java, +        try {, +            return fromPublisher(composer.apply(this));, +        } catch (Throwable ex) {, +            Exceptions.throwIfFatal(ex);, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +++ b/src/main/java/io/reactivex/FlowableTransformer.java, +public interface FlowableTransformer<Upstream, Downstream> {, +    Publisher<? extends Downstream> apply(Flowable<Upstream> flowable) throws Exception;, +++ b/src/main/java/io/reactivex/Completable.java, +        try {, +            return wrap(transformer.apply(this));, +        } catch (Throwable ex) {, +            Exceptions.throwIfFatal(ex);, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +++ b/src/main/java/io/reactivex/CompletableTransformer.java, +public interface CompletableTransformer {, +    CompletableSource apply(Completable completable) throws Exception;, +++ b/src/main/java/io/reactivex/Flowable.java, +        try {, +            return fromPublisher(composer.apply(this));, +        } catch (Throwable ex) {, +            Exceptions.throwIfFatal(ex);, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +++ b/src/main/java/io/reactivex/FlowableTransformer.java, +public interface FlowableTransformer<Upstream, Downstream> {, +    Publisher<? extends Downstream> apply(Flowable<Upstream> flowable) throws Exception;, +++ b/src/main/java/io/reactivex/Maybe.java, +        try {, +            return wrap(transformer.apply(this));, +        } catch (Throwable ex) {, +            Exceptions.throwIfFatal(ex);, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +++ b/src/main/java/io/reactivex/Completable.java, +        try {, +            return wrap(transformer.apply(this));, +        } catch (Throwable ex) {, +            Exceptions.throwIfFatal(ex);, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +++ b/src/main/java/io/reactivex/CompletableTransformer.java, +public interface CompletableTransformer {, +    CompletableSource apply(Completable completable) throws Exception;, +++ b/src/main/java/io/reactivex/Flowable.java, +        try {, +            return fromPublisher(composer.apply(this));, +        } catch (Throwable ex) {, +            Exceptions.throwIfFatal(ex);, +            throw ExceptionHelper.wrapOrThrow(ex);, +        }, +++ b/src/main/java/io/reactivex/FlowableTransformer.java, +public interface FlowableTransformer<Upstream, Downstream> {]