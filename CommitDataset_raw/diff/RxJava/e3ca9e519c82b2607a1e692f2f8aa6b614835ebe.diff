[+++ b/src/main/java/io/reactivex/internal/subscribers/EmptySubscriber.java, +    /** Empty instance that reports error to the plugins. */, +    INSTANCE(true),, +    /** Empty instance that doesn't report to the plugins to avoid flooding the test output. */, +    INSTANCE_NOERROR(false);, +    , +    final boolean reportError;, +    , +    EmptySubscriber(boolean reportError) {, +        this.reportError = reportError;, +    }, +        if (reportError) {, +    }, +++ b/src/main/java/io/reactivex/internal/subscribers/EmptySubscriber.java, +    /** Empty instance that reports error to the plugins. */, +    INSTANCE(true),, +    /** Empty instance that doesn't report to the plugins to avoid flooding the test output. */, +    INSTANCE_NOERROR(false);, +    , +    final boolean reportError;, +    , +    EmptySubscriber(boolean reportError) {, +        this.reportError = reportError;, +    }, +        if (reportError) {, +    }, +++ b/src/main/java/io/reactivex/subscribers/TestSubscriber.java, +        this(EmptySubscriber.INSTANCE_NOERROR, Long.MAX_VALUE);, +        this(EmptySubscriber.INSTANCE_NOERROR, initialRequest);, +++ b/src/main/java/io/reactivex/internal/subscribers/EmptySubscriber.java, +    /** Empty instance that reports error to the plugins. */, +    INSTANCE(true),, +    /** Empty instance that doesn't report to the plugins to avoid flooding the test output. */, +    INSTANCE_NOERROR(false);, +    , +    final boolean reportError;, +    , +    EmptySubscriber(boolean reportError) {, +        this.reportError = reportError;, +    }, +        if (reportError) {, +    }, +++ b/src/main/java/io/reactivex/subscribers/TestSubscriber.java, +        this(EmptySubscriber.INSTANCE_NOERROR, Long.MAX_VALUE);, +        this(EmptySubscriber.INSTANCE_NOERROR, initialRequest);, +++ b/src/test/java/io/reactivex/BackpressureTests.java, +                final Subscriber<? super Integer> a = s;, +                final AtomicInteger c = counter;, +                , +                    a.onNext(i++);, +                    c.incrementAndGet();, +    @Test, +    public void testFirehoseFailsAsExpectedLoop() {, +        for (int i = 0; i < 1000; i++) {, +            testFirehoseFailsAsExpected();, +        }, +    }, +]