[+++ b/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +        if (!it.hasNext() && !o.isUnsubscribed()), +            o.onCompleted();, +        else , +            if (requested == Long.MAX_VALUE) {, +            if (n == Long.MAX_VALUE && REQUESTED_UPDATER.compareAndSet(this, 0, Long.MAX_VALUE)) {, +++ b/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +        if (!it.hasNext() && !o.isUnsubscribed()), +            o.onCompleted();, +        else , +            if (requested == Long.MAX_VALUE) {, +            if (n == Long.MAX_VALUE && REQUESTED_UPDATER.compareAndSet(this, 0, Long.MAX_VALUE)) {, +++ b/src/test/java/rx/internal/operators/OnSubscribeFromIterableTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +                        return i < 3;, +                        return String.valueOf(++i);, +    @Test, +    public void testFromEmptyIterableWhenZeroRequestedShouldStillEmitOnCompletedEagerly() {, +        final AtomicBoolean completed = new AtomicBoolean(false);, +        Observable.from(Collections.emptyList()).subscribe(new Subscriber<Object>() {, +, +            @Override, +            public void onStart() {, +                request(0);, +            }, +            , +            @Override, +            public void onCompleted() {, +                completed.set(true);, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                , +            }, +, +            @Override, +            public void onNext(Object t) {, +                , +            }});, +        assertTrue(completed.get());, +    }, +++ b/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +        if (!it.hasNext() && !o.isUnsubscribed()), +            o.onCompleted();, +        else , +            if (requested == Long.MAX_VALUE) {, +            if (n == Long.MAX_VALUE && REQUESTED_UPDATER.compareAndSet(this, 0, Long.MAX_VALUE)) {, +++ b/src/test/java/rx/internal/operators/OnSubscribeFromIterableTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +                        return i < 3;, +                        return String.valueOf(++i);, +    @Test, +    public void testFromEmptyIterableWhenZeroRequestedShouldStillEmitOnCompletedEagerly() {, +        final AtomicBoolean completed = new AtomicBoolean(false);, +        Observable.from(Collections.emptyList()).subscribe(new Subscriber<Object>() {, +, +            @Override, +            public void onStart() {, +                request(0);, +            }, +            , +            @Override, +            public void onCompleted() {, +                completed.set(true);, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                , +            }, +, +            @Override, +            public void onNext(Object t) {, +                , +            }});, +        assertTrue(completed.get());, +    }, +++ b/src/test/java/rx/internal/operators/OnSubscribeRangeTest.java, +    public void testRangeWithOverflow() {]