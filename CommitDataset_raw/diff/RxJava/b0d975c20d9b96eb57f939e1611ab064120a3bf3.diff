[+++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/operators/DebugSubscriber.java, +    Operator<? extends T, ?> from = null;, +    Operator<?, ? super T> to = null;, +            Operator<? extends T, ?> _out,, +            Operator<?, ? super T> _in) {, +    public Operator<? extends T, ?> getFrom() {, +    public void setFrom(Operator<? extends T, ?> bind) {, +        this.from = bind;, +    public Operator<?, ? super T> getTo() {, +    public void setTo(Operator<?, ? super T> op) {, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/operators/DebugSubscriber.java, +    Operator<? extends T, ?> from = null;, +    Operator<?, ? super T> to = null;, +            Operator<? extends T, ?> _out,, +            Operator<?, ? super T> _in) {, +    public Operator<? extends T, ?> getFrom() {, +    public void setFrom(Operator<? extends T, ?> bind) {, +        this.from = bind;, +    public Operator<?, ? super T> getTo() {, +    public void setTo(Operator<?, ? super T> op) {, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/plugins/DebugHook.java, +    public <T, R> Operator<? extends R, ? super T> onLift(final Operator<? extends R, ? super T> bind) {, +    private <R> Subscriber<? super R> wrapOutbound(Operator<? extends R, ?> bind, Subscriber<? super R> o) {, +    private <T> Subscriber<? super T> wrapInbound(Operator<?, ? super T> bind, Subscriber<? super T> o) {, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/operators/DebugSubscriber.java, +    Operator<? extends T, ?> from = null;, +    Operator<?, ? super T> to = null;, +            Operator<? extends T, ?> _out,, +            Operator<?, ? super T> _in) {, +    public Operator<? extends T, ?> getFrom() {, +    public void setFrom(Operator<? extends T, ?> bind) {, +        this.from = bind;, +    public Operator<?, ? super T> getTo() {, +    public void setTo(Operator<?, ? super T> op) {, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/plugins/DebugHook.java, +    public <T, R> Operator<? extends R, ? super T> onLift(final Operator<? extends R, ? super T> bind) {, +    private <R> Subscriber<? super R> wrapOutbound(Operator<? extends R, ?> bind, Subscriber<? super R> o) {, +    private <T> Subscriber<? super T> wrapInbound(Operator<?, ? super T> bind, Subscriber<? super T> o) {, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/plugins/DebugNotification.java, +    private final Operator<? extends T, ?> from;, +    private final Operator<?, ? super T> to;, +        Operator<?, ? super T> to = null;, +        Operator<? extends T, ?> from = null;, +    public static <T> DebugNotification<T> createOnNext(Observer<? super T> o, Operator<? extends T, ?> from, T t, Operator<?, ? super T> to) {, +    public static <T> DebugNotification<T> createOnError(Observer<? super T> o, Operator<? extends T, ?> from, Throwable e, Operator<?, ? super T> to) {, +    public static <T> DebugNotification<T> createOnCompleted(Observer<? super T> o, Operator<? extends T, ?> from, Operator<?, ? super T> to) {, +    public static <T> DebugNotification<T> createUnsubscribe(Observer<? super T> o, Operator<? extends T, ?> from, Operator<?, ? super T> to) {, +    private DebugNotification(Observer o, Operator<? extends T, ?> from, Kind kind, Notification<T> notification, Operator<?, ? super T> to, OnSubscribe<T> source) {, +    public Operator<? extends T, ?> getFrom() {, +    public Operator<?, ? super T> getTo() {, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/operators/DebugSubscriber.java, +    Operator<? extends T, ?> from = null;, +    Operator<?, ? super T> to = null;, +            Operator<? extends T, ?> _out,, +            Operator<?, ? super T> _in) {, +    public Operator<? extends T, ?> getFrom() {, +    public void setFrom(Operator<? extends T, ?> bind) {, +        this.from = bind;, +    public Operator<?, ? super T> getTo() {, +    public void setTo(Operator<?, ? super T> op) {, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/plugins/DebugHook.java, +    public <T, R> Operator<? extends R, ? super T> onLift(final Operator<? extends R, ? super T> bind) {, +    private <R> Subscriber<? super R> wrapOutbound(Operator<? extends R, ?> bind, Subscriber<? super R> o) {, +    private <T> Subscriber<? super T> wrapInbound(Operator<?, ? super T> bind, Subscriber<? super T> o) {, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/plugins/DebugNotification.java, +    private final Operator<? extends T, ?> from;, +    private final Operator<?, ? super T> to;, +        Operator<?, ? super T> to = null;, +        Operator<? extends T, ?> from = null;, +    public static <T> DebugNotification<T> createOnNext(Observer<? super T> o, Operator<? extends T, ?> from, T t, Operator<?, ? super T> to) {, +    public static <T> DebugNotification<T> createOnError(Observer<? super T> o, Operator<? extends T, ?> from, Throwable e, Operator<?, ? super T> to) {, +    public static <T> DebugNotification<T> createOnCompleted(Observer<? super T> o, Operator<? extends T, ?> from, Operator<?, ? super T> to) {, +    public static <T> DebugNotification<T> createUnsubscribe(Observer<? super T> o, Operator<? extends T, ?> from, Operator<?, ? super T> to) {, +    private DebugNotification(Observer o, Operator<? extends T, ?> from, Kind kind, Notification<T> notification, Operator<?, ? super T> to, OnSubscribe<T> source) {, +    public Operator<? extends T, ?> getFrom() {, +    public Operator<?, ? super T> getTo() {, +++ /dev/null, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/operators/DebugSubscriber.java, +    Operator<? extends T, ?> from = null;, +    Operator<?, ? super T> to = null;, +            Operator<? extends T, ?> _out,, +            Operator<?, ? super T> _in) {, +    public Operator<? extends T, ?> getFrom() {, +    public void setFrom(Operator<? extends T, ?> bind) {, +        this.from = bind;, +    public Operator<?, ? super T> getTo() {, +    public void setTo(Operator<?, ? super T> op) {, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/plugins/DebugHook.java, +    public <T, R> Operator<? extends R, ? super T> onLift(final Operator<? extends R, ? super T> bind) {, +    private <R> Subscriber<? super R> wrapOutbound(Operator<? extends R, ?> bind, Subscriber<? super R> o) {, +    private <T> Subscriber<? super T> wrapInbound(Operator<?, ? super T> bind, Subscriber<? super T> o) {, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/plugins/DebugNotification.java, +    private final Operator<? extends T, ?> from;, +    private final Operator<?, ? super T> to;, +        Operator<?, ? super T> to = null;, +        Operator<? extends T, ?> from = null;, +    public static <T> DebugNotification<T> createOnNext(Observer<? super T> o, Operator<? extends T, ?> from, T t, Operator<?, ? super T> to) {, +    public static <T> DebugNotification<T> createOnError(Observer<? super T> o, Operator<? extends T, ?> from, Throwable e, Operator<?, ? super T> to) {, +    public static <T> DebugNotification<T> createOnCompleted(Observer<? super T> o, Operator<? extends T, ?> from, Operator<?, ? super T> to) {, +    public static <T> DebugNotification<T> createUnsubscribe(Observer<? super T> o, Operator<? extends T, ?> from, Operator<?, ? super T> to) {]