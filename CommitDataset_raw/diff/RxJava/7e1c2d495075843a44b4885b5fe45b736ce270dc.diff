[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +, +  @Test def startWithExample1(): Unit = {, +    val o = List(2, 3).toObservable + 1, +    assertEquals(List(1, 2, 3), o.toBlockingObservable.toList), +  }, +, +  @Test def startWithExample2(): Unit = {, +    val prepended = List(2, 4).toObservable, +    val o = List(5, 6, 7, 8).toObservable.filter(_ % 2 == 0).startWith(prepended), +    assertEquals(List(2, 4, 6, 8), o.toBlockingObservable.toList), +  }, +, +  @Test def startWithExample3(): Unit = {, +    val o = List(5, 6, 7, 8).toObservable.filter(_ % 2 == 0).startWith(List(2, 4)), +    assertEquals(List(2, 4, 6, 8), o.toBlockingObservable.toList), +  }, +, +  @Test def startWithExample4(): Unit = {, +    val o = List(5, 6, 7, 8).toObservable.filter(_ % 2 == 0).startWith(Array(2, 4)), +    assertEquals(List(2, 4, 6, 8), o.toBlockingObservable.toList), +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +, +  @Test def startWithExample1(): Unit = {, +    val o = List(2, 3).toObservable + 1, +    assertEquals(List(1, 2, 3), o.toBlockingObservable.toList), +  }, +, +  @Test def startWithExample2(): Unit = {, +    val prepended = List(2, 4).toObservable, +    val o = List(5, 6, 7, 8).toObservable.filter(_ % 2 == 0).startWith(prepended), +    assertEquals(List(2, 4, 6, 8), o.toBlockingObservable.toList), +  }, +, +  @Test def startWithExample3(): Unit = {, +    val o = List(5, 6, 7, 8).toObservable.filter(_ % 2 == 0).startWith(List(2, 4)), +    assertEquals(List(2, 4, 6, 8), o.toBlockingObservable.toList), +  }, +, +  @Test def startWithExample4(): Unit = {, +    val o = List(5, 6, 7, 8).toObservable.filter(_ % 2 == 0).startWith(Array(2, 4)), +    assertEquals(List(2, 4, 6, 8), o.toBlockingObservable.toList), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  import scala.collection.JavaConverters._, +   * Returns an Observable that emits a specified item before it begins to emit items emitted by the source Observable., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/startWith.png">, +   *, +   * @param elem the item to emit, +   * @return an Observable that emits the specified item before it begins to emit items emitted by the source Observable, +   */, +  def +[U >: T](elem: U): Observable[U] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    toScalaObservable(thisJava.startWith(elem)), +  }, +, +  /**, +   * Returns an Observable that emits the items in a specified `Observable` before it begins to emit, +   * items emitted by the source Observable., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/startWith.o.png">, +   *, +   * @param that an Observable that contains the items you want the modified Observable to emit first, +   * @return an Observable that emits the items in the specified `Observable` and then emits the items, +   *         emitted by the source Observable, +   */, +  def startWith[U >: T](that: Observable[U]): Observable[U] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    val thatJava = that.asJavaObservable.asInstanceOf[rx.Observable[U]], +    toScalaObservable(thisJava.startWith(thatJava)), +  }, +, +  /**, +   * Returns an Observable that emits the items in a specified `Iterable` before it begins to emit items, +   * emitted by the source Observable., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/startWith.png">, +   *, +   * @param iterable an Iterable that contains the items you want the modified Observable to emit first, +   * @return an Observable that emits the items in the specified `Iterable` and then emits the items, +   *         emitted by the source Observable, +   */, +  def startWith[U >: T](iterable: Iterable[U]): Observable[U] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    toScalaObservable(thisJava.startWith(iterable.asJava)), +  }, +, +  /**, +   * Returns an Observable that emits the items in a specified `Iterable`, on a specified `Scheduler`, before it begins to emit items emitted by the source Observable., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/startWith.s.png">, +   *, +   * @param iterable an Iterable that contains the items you want the modified Observable to emit first, +   * @param scheduler the Scheduler to emit the prepended values on, +   * @return an Observable that emits the items in the specified `Iterable`, on a specified `Scheduler`, and then emits the items, +   *         emitted by the source Observable]