[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Notification.scala, +     *         The `java.lang.Throwable` value contained in this notification., +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Notification.scala, +     *         The `java.lang.Throwable` value contained in this notification., +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, + *, + * @define subscribeSubscriberMain, + * Call this method to subscribe an [[Subscriber]] for receiving items and notifications from the [[Observable]]., + *, + * A typical implementation of `subscribe` does the following:, + *, + * It stores a reference to the Observer in a collection object, such as a `List[T]` object., + *, + * It returns a reference to the [[rx.lang.scala.Subscription]] interface. This enables [[Subscriber]]s to, + * unsubscribe, that is, to stop receiving items and notifications before the Observable stops, + * sending them, which also invokes the Subscriber's [[rx.lang.scala.Observer.onCompleted onCompleted]] method., + *, + * An [[Observable]] instance is responsible for accepting all subscriptions, + * and notifying all [[Subscriber]]s. Unless the documentation for a particular, + * [[Observable]] implementation indicates otherwise, [[Subscriber]]s should make no, + * assumptions about the order in which multiple [[Subscriber]]s will receive their notifications., + *, + * @define subscribeSubscriberParamObserver, + *         the [[Subscriber]], + * @define subscribeSubscriberParamScheduler, + *         the [[rx.lang.scala.Scheduler]] on which [[Subscriber]]s subscribe to the Observable, + *, +   * $subscribeSubscriberMain, +   *, +   * @param subscriber $subscribeSubscriberParamObserver, +   * @param scheduler $subscribeSubscriberParamScheduler, +   * @return $subscribeAllReturn, +   */, +  def subscribe(subscriber: Subscriber[T], scheduler: Scheduler): Subscription = {, +    // Add the casting to avoid compile error "ambiguous reference to overloaded definition", +    val thisJava = asJavaObservable.asInstanceOf[rx.Observable[T]], +    thisJava.subscribe(subscriber.asJavaSubscriber, scheduler), +  }, +, +  /**, +   * $subscribeSubscriberMain, +   *, +   * @param subscriber $subscribeSubscriberParamObserver, +   * @return $subscribeAllReturn, +   */, +  def subscribe(subscriber: Subscriber[T]): Subscription = {, +    // Add the casting to avoid compile error "ambiguous reference to overloaded definition", +    val thisJava = asJavaObservable.asInstanceOf[rx.Observable[T]], +    thisJava.subscribe(subscriber.asJavaSubscriber), +  }, +, +  /**, +   * $subscribeSubscriberMain, +   *, +   * @param subscriber $subscribeSubscriberParamObserver, +   * @return $subscribeAllReturn, +   */, +  def apply(subscriber: Subscriber[T]): Subscription = subscribe(subscriber), +, +  /**, +   * [[Observable.serialize serialize]] enforces this, and the Observable it returns invokes `onNext` and `onCompleted` or `onError` synchronously., +   * [[rx.lang.scala.schedulers.ComputationScheduler]] and return an `Observable[R]` with the output., +   *             Observable, or index is less than 0, +  @deprecated("Use `elementAt`", "0.18.0"), +   *             Observable, or index is less than 0, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Notification.scala, +     *         The `java.lang.Throwable` value contained in this notification., +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, + *, + * @define subscribeSubscriberMain, + * Call this method to subscribe an [[Subscriber]] for receiving items and notifications from the [[Observable]]., + *, + * A typical implementation of `subscribe` does the following:, + *, + * It stores a reference to the Observer in a collection object, such as a `List[T]` object., + *, + * It returns a reference to the [[rx.lang.scala.Subscription]] interface. This enables [[Subscriber]]s to, + * unsubscribe, that is, to stop receiving items and notifications before the Observable stops, + * sending them, which also invokes the Subscriber's [[rx.lang.scala.Observer.onCompleted onCompleted]] method., + *, + * An [[Observable]] instance is responsible for accepting all subscriptions, + * and notifying all [[Subscriber]]s. Unless the documentation for a particular, + * [[Observable]] implementation indicates otherwise, [[Subscriber]]s should make no, + * assumptions about the order in which multiple [[Subscriber]]s will receive their notifications., + *, + * @define subscribeSubscriberParamObserver, + *         the [[Subscriber]], + * @define subscribeSubscriberParamScheduler, + *         the [[rx.lang.scala.Scheduler]] on which [[Subscriber]]s subscribe to the Observable, + *, +   * $subscribeSubscriberMain, +   *, +   * @param subscriber $subscribeSubscriberParamObserver, +   * @param scheduler $subscribeSubscriberParamScheduler, +   * @return $subscribeAllReturn, +   */, +  def subscribe(subscriber: Subscriber[T], scheduler: Scheduler): Subscription = {, +    // Add the casting to avoid compile error "ambiguous reference to overloaded definition", +    val thisJava = asJavaObservable.asInstanceOf[rx.Observable[T]], +    thisJava.subscribe(subscriber.asJavaSubscriber, scheduler)]