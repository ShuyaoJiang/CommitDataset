[+++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +    public static <T> BlockingObservable<T> from(final Observable<? extends T> o) {, +    public static <T> Iterator<T> toIterator(Observable<? extends T> source) {, +    public static <T> T last(final Observable<? extends T> source) {, +    public static <T> T last(final Observable<? extends T> source, final Func1<? super T, Boolean> predicate) {, +    public static <T> T lastOrDefault(Observable<? extends T> source, T defaultValue) {, +    public static <T> T lastOrDefault(Observable<? extends T> source, T defaultValue, Func1<? super T, Boolean> predicate) {, +    public static <T> Iterable<T> mostRecent(Observable<? extends T> source, T initialValue) {, +    public static <T> Iterable<T> next(Observable<? extends T> items) {, +    private static <T> T _singleOrDefault(BlockingObservable<? extends T> source, boolean hasDefault, T defaultValue) {, +        Iterator<? extends T> it = source.toIterable().iterator();, +    public static <T> T single(Observable<? extends T> source) {, +    public static <T> T single(Observable<? extends T> source, Func1<? super T, Boolean> predicate) {, +    public static <T> T singleOrDefault(Observable<? extends T> source, T defaultValue) {, +    public static <T> T singleOrDefault(Observable<? extends T> source, T defaultValue, Func1<? super T, Boolean> predicate) {, +    public static <T> Future<T> toFuture(final Observable<? extends T> source) {, +    public static <T> Iterable<T> toIterable(final Observable<? extends T> source) {, +    private Subscription protectivelyWrapAndSubscribe(Observer<? super T> o) {, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +    public static <T> BlockingObservable<T> from(final Observable<? extends T> o) {, +    public static <T> Iterator<T> toIterator(Observable<? extends T> source) {, +    public static <T> T last(final Observable<? extends T> source) {, +    public static <T> T last(final Observable<? extends T> source, final Func1<? super T, Boolean> predicate) {, +    public static <T> T lastOrDefault(Observable<? extends T> source, T defaultValue) {, +    public static <T> T lastOrDefault(Observable<? extends T> source, T defaultValue, Func1<? super T, Boolean> predicate) {, +    public static <T> Iterable<T> mostRecent(Observable<? extends T> source, T initialValue) {, +    public static <T> Iterable<T> next(Observable<? extends T> items) {, +    private static <T> T _singleOrDefault(BlockingObservable<? extends T> source, boolean hasDefault, T defaultValue) {, +        Iterator<? extends T> it = source.toIterable().iterator();, +    public static <T> T single(Observable<? extends T> source) {, +    public static <T> T single(Observable<? extends T> source, Func1<? super T, Boolean> predicate) {, +    public static <T> T singleOrDefault(Observable<? extends T> source, T defaultValue) {, +    public static <T> T singleOrDefault(Observable<? extends T> source, T defaultValue, Func1<? super T, Boolean> predicate) {, +    public static <T> Future<T> toFuture(final Observable<? extends T> source) {, +    public static <T> Iterable<T> toIterable(final Observable<? extends T> source) {, +    private Subscription protectivelyWrapAndSubscribe(Observer<? super T> o) {, +++ b/rxjava-core/src/main/java/rx/plugins/RxJavaObservableExecutionHook.java, +    public <T> Subscription onSubscribeReturn(Observable<? extends T> observableInstance, Subscription subscription) {, +    public <T> Throwable onSubscribeError(Observable<? extends T> observableInstance, Throwable e) {]