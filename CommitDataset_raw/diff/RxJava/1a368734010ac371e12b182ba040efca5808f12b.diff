[+++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +    class AsyncObservable : OnSubscribe<Int> {, +        override fun call(op: Subscriber<in Int>?) {, +, +    class TestOnSubscribe(val count: Int) : OnSubscribe<String> {, +        override fun call(op: Subscriber<in String>?)  {, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +    class AsyncObservable : OnSubscribe<Int> {, +        override fun call(op: Subscriber<in Int>?) {, +, +    class TestOnSubscribe(val count: Int) : OnSubscribe<String> {, +        override fun call(op: Subscriber<in String>?)  {, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        asyncObservable.asObservable().toBlockingObservable()!!.forEach(received()), +        asyncObservable.asObservable().toBlockingObservable()!!.forEach { throw RuntimeException("err") }, +    val funOnSubscribe: (Int, Subscriber<in String>) -> Unit = { counter, subscriber ->, +        subscriber.onNext("hello_$counter"), +        subscriber.onCompleted(), +    val asyncObservable: (Subscriber<in Int>) -> Unit = { subscriber ->, +            subscriber.onNext(1), +            subscriber.onNext(2), +            subscriber.onNext(3), +            subscriber.onCompleted(), +        val onSubscribe: (Subscriber<in String>) -> Unit, +                return onSubscribe.asObservable()]