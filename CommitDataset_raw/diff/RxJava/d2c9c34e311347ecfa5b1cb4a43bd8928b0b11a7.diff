[+++ b/src/main/java/io/reactivex/internal/fuseable/SimplePlainQueue.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.fuseable;, +, +/**, + * Override of the SimpleQueue interface with no throws Exception on poll., + *, + * @param <T> the value type to enqueue and dequeue, not null, + */, +public interface SimplePlainQueue<T> extends SimpleQueue<T> {, +, +    @Override, +    T poll();, +}, +++ b/src/main/java/io/reactivex/internal/fuseable/SimplePlainQueue.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.fuseable;, +, +/**, + * Override of the SimpleQueue interface with no throws Exception on poll., + *, + * @param <T> the value type to enqueue and dequeue, not null, + */, +public interface SimplePlainQueue<T> extends SimpleQueue<T> {, +, +    @Override, +    T poll();, +}, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMap.java, +import io.reactivex.internal.functions.ObjectHelper;, +import io.reactivex.internal.util.*;, +import io.reactivex.plugins.RxJavaPlugins;, +        volatile SimplePlainQueue<U> queue;, +        final AtomicThrowable errs = new AtomicThrowable();, +                p = ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Publisher");, +                    errs.addThrowable(ex);, +            SimplePlainQueue<U> q = queue;, +            if (errs.addThrowable(t)) {, +            } else {, +                RxJavaPlugins.onError(t);, +            }, +                if (getAndIncrement() == 0) {, +                    SimpleQueue<U> q = queue;, +                    if (q != null) {, +                        q.clear();, +                    }, +                SimplePlainQueue<U> svq = queue;, +, +                    Throwable ex = errs.terminate();, +                    if (ex == null) {, +                        child.onError(ex);, +                    sourceLoop:, +                            long produced = 0;, +                            while (r != 0L) {, +                                    is.dispose();, +                                    errs.addThrowable(ex);, +                                    if (checkTerminate()) {, +                                    removeInner(is);, +                                    innerCompleted = true;, +                                    i++;, +                                    continue sourceLoop;, +                                }, +                                if (checkTerminate()) {, +                                    return;, +                                }, +, +                SimpleQueue<U> q = queue;, +                if (q != null) {, +                    q.clear();, +                }, +            if (!delayErrors && errs.get() != null) {, +                actual.onError(errs.terminate());, +                    Throwable ex = errs.terminate();, +                    if (ex != null && ex != ExceptionHelper.TERMINATED) {, +                        RxJavaPlugins.onError(ex);, +            if (parent.errs.addThrowable(t)) {]