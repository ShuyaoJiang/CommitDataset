[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +//  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription): Func2[rx.Scheduler, T, rx.Subscription] with Object {def call(s: rx.Scheduler, t: T): rx.Subscription} =, +//    new Func2[rx.Scheduler, T, rx.Subscription] {, +//      def call(s: rx.Scheduler, t: T): rx.Subscription = {, +//        action(rx.lang.scala.Scheduler(s), t).asJavaSubscription, +//      }, +//    }, +, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription) =, +        action(Scheduler(s), t).asJavaSubscription, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +//  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription): Func2[rx.Scheduler, T, rx.Subscription] with Object {def call(s: rx.Scheduler, t: T): rx.Subscription} =, +//    new Func2[rx.Scheduler, T, rx.Subscription] {, +//      def call(s: rx.Scheduler, t: T): rx.Subscription = {, +//        action(rx.lang.scala.Scheduler(s), t).asJavaSubscription, +//      }, +//    }, +, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription) =, +        action(Scheduler(s), t).asJavaSubscription, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  import rx.lang.scala.ImplicitFunctionConversions._, +, +    val xxx = schedulerActionToFunc2(action), +    Subscription(asJavaScheduler.schedule(state, xxx, delayTime.length, delayTime.unit)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +//  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription): Func2[rx.Scheduler, T, rx.Subscription] with Object {def call(s: rx.Scheduler, t: T): rx.Subscription} =, +//    new Func2[rx.Scheduler, T, rx.Subscription] {, +//      def call(s: rx.Scheduler, t: T): rx.Subscription = {, +//        action(rx.lang.scala.Scheduler(s), t).asJavaSubscription, +//      }, +//    }, +, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription) =, +        action(Scheduler(s), t).asJavaSubscription, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  import rx.lang.scala.ImplicitFunctionConversions._, +, +    val xxx = schedulerActionToFunc2(action), +    Subscription(asJavaScheduler.schedule(state, xxx, delayTime.length, delayTime.unit)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscription.scala, +      case x: rx.Subscription => apply { x.unsubscribe() }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +//  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription): Func2[rx.Scheduler, T, rx.Subscription] with Object {def call(s: rx.Scheduler, t: T): rx.Subscription} =, +//    new Func2[rx.Scheduler, T, rx.Subscription] {, +//      def call(s: rx.Scheduler, t: T): rx.Subscription = {, +//        action(rx.lang.scala.Scheduler(s), t).asJavaSubscription, +//      }, +//    }, +, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription) =, +        action(Scheduler(s), t).asJavaSubscription, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  import rx.lang.scala.ImplicitFunctionConversions._, +, +    val xxx = schedulerActionToFunc2(action), +    Subscription(asJavaScheduler.schedule(state, xxx, delayTime.length, delayTime.unit)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscription.scala, +      case x: rx.Subscription => apply { x.unsubscribe() }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subjects/BehaviorSubject.scala, +    new BehaviorSubject[T](rx.subjects.BehaviorSubject.create(value)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +//  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription): Func2[rx.Scheduler, T, rx.Subscription] with Object {def call(s: rx.Scheduler, t: T): rx.Subscription} =, +//    new Func2[rx.Scheduler, T, rx.Subscription] {, +//      def call(s: rx.Scheduler, t: T): rx.Subscription = {, +//        action(rx.lang.scala.Scheduler(s), t).asJavaSubscription, +//      }, +//    }, +, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription) =, +        action(Scheduler(s), t).asJavaSubscription, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  import rx.lang.scala.ImplicitFunctionConversions._, +, +    val xxx = schedulerActionToFunc2(action), +    Subscription(asJavaScheduler.schedule(state, xxx, delayTime.length, delayTime.unit)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscription.scala, +      case x: rx.Subscription => apply { x.unsubscribe() }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subjects/BehaviorSubject.scala, +    new BehaviorSubject[T](rx.subjects.BehaviorSubject.create(value)), +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/subscriptions/SubscriptionTests.scala]