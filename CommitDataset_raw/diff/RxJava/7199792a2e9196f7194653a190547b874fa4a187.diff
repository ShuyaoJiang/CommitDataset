[+++ b/src/main/java/rx/Subscriber.java, +            } else if (requested == Long.MIN_VALUE) {, +            } else { , +                final long total = requested + n;, +                // check if overflow occurred, +                if (total < 0) {, +                    requested = Long.MAX_VALUE;, +                } else {, +                    requested = total;, +                }, +++ b/src/main/java/rx/Subscriber.java, +            } else if (requested == Long.MIN_VALUE) {, +            } else { , +                final long total = requested + n;, +                // check if overflow occurred, +                if (total < 0) {, +                    requested = Long.MAX_VALUE;, +                } else {, +                    requested = total;, +                }, +++ b/src/test/java/rx/SubscriberTest.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +    , +    @Test, +    public void testOnStartRequestsAreAdditive() {, +        final List<Integer> list = new ArrayList<Integer>();, +        Observable.just(1,2,3,4,5).subscribe(new Subscriber<Integer>() {, +            @Override, +            public void onStart() {, +                request(3);, +                request(2);, +            }, +            , +            @Override, +            public void onCompleted() {, +                , +            }, +, +            @Override, +            public void onError(Throwable e) {, +                , +            }, +, +            @Override, +            public void onNext(Integer t) {, +                list.add(t);, +            }});, +        assertEquals(Arrays.asList(1,2,3,4,5), list);, +    }, +    , +    @Test, +    public void testOnStartRequestsAreAdditiveAndOverflowBecomesMaxValue() {, +        final List<Integer> list = new ArrayList<Integer>();, +        Observable.just(1,2,3,4,5).subscribe(new Subscriber<Integer>() {, +            @Override, +            public void onStart() {, +                request(2);, +                request(Long.MAX_VALUE-1);, +            }, +            , +            @Override, +            public void onCompleted() {, +                , +            }, +, +            @Override, +            public void onError(Throwable e) {, +                , +            }, +, +            @Override, +            public void onNext(Integer t) {, +                list.add(t);, +            }});, +        assertEquals(Arrays.asList(1,2,3,4,5), list);, +    }]