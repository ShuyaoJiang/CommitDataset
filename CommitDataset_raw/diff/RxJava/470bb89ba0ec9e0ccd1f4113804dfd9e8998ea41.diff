[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Invokes an action if onError is emitted from the observable sequence., +     * @param onError, +     *            The action to invoke if onError is invoked., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229804(v=vs.103).aspx">MSDN: Observable.Do</a>, +    public Observable<T> doOnError(final Action1<Throwable> onError) {, +        Observer<T> observer = new Observer<T>() {, +            @Override, +            public void onCompleted() {}, +, +            @Override, +            public void onError(Throwable e) {, +                onError.call(e);, +            }, +, +            @Override, +            public void onNext(T args) { }, +, +        };, +, +, +        return create(OperationDoOnEach.doOnEach(this, observer));, +    }, +    , +    /**, +     * Invokes an action when onCompleted is emitted from the observable sequence., +     *, +     * @param onCompleted, +     *            The action to invoke when onCompleted is emitted., +     *, +     * @return, +     *            The source sequence with the side-effecting behavior applied., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229804(v=vs.103).aspx">MSDN: Observable.Do</a>, +     */, +    public Observable<T> doOnCompleted(final Action0 onCompleted) {, +            public void onNext(T args) { }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Invokes an action if onError is emitted from the observable sequence., +     * @param onError, +     *            The action to invoke if onError is invoked., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229804(v=vs.103).aspx">MSDN: Observable.Do</a>, +    public Observable<T> doOnError(final Action1<Throwable> onError) {, +        Observer<T> observer = new Observer<T>() {, +            @Override, +            public void onCompleted() {}, +, +            @Override, +            public void onError(Throwable e) {, +                onError.call(e);, +            }, +, +            @Override, +            public void onNext(T args) { }, +, +        };, +, +, +        return create(OperationDoOnEach.doOnEach(this, observer));, +    }, +    , +    /**, +     * Invokes an action when onCompleted is emitted from the observable sequence., +     *, +     * @param onCompleted, +     *            The action to invoke when onCompleted is emitted., +     *, +     * @return, +     *            The source sequence with the side-effecting behavior applied., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229804(v=vs.103).aspx">MSDN: Observable.Do</a>, +     */, +    public Observable<T> doOnCompleted(final Action0 onCompleted) {, +            public void onNext(T args) { }, +++ b/rxjava-core/src/test/java/rx/ObservableDoOnTest.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx;, +, +import static org.junit.Assert.*;, +, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicReference;, +, +import org.junit.Test;, +, +import rx.util.functions.Action0;, +import rx.util.functions.Action1;, +]