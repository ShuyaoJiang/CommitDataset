[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/rx/subjects/ReplaySubject.java, +        ssm.onAdded = new Action1<SubjectObserver<T>>() {, +            @Override, +            public void call(SubjectObserver<T> o) {, +                synchronized (o) {, +                    if (!o.first || o.emitting) {, +                        return;, +                    }, +                    o.first = false;, +                    o.emitting = true;, +                }, +                boolean skipFinal = false;, +                try {, +                    for (;;) {, +                        int idx = o.index();, +                        int sidx = state.index;, +                        if (idx != sidx) {, +                            Integer j = state.replayObserverFromIndex(idx, o);, +                            o.index(j);, +                        }, +                        synchronized (o) {, +                            if (sidx == state.index) {, +                                o.emitting = false;, +                                skipFinal = true;, +                                break;, +                            }, +                        }, +                    }, +                } finally {, +                    if (!skipFinal) {, +                        synchronized (o) {, +                            o.emitting = false;, +                        }, +                    }, +                }, +            }, +        };, +        ssm.onAdded = new Action1<SubjectObserver<T>>() {, +            @Override, +            public void call(SubjectObserver<T> o) {, +                synchronized (o) {, +                    if (!o.first || o.emitting) {, +                        return;, +                    }, +                    o.first = false;, +                    o.emitting = true;, +                }, +                boolean skipFinal = false;, +                try {, +                    for (;;) {, +                        NodeList.Node<Object> idx = o.index();, +                        NodeList.Node<Object> sidx = state.tail();, +                        if (idx != sidx) {, +                            NodeList.Node<Object> j = state.replayObserverFromIndex(idx, o);, +                            o.index(j);, +                        }, +                        synchronized (o) {, +                            if (sidx == state.tail()) {, +                                o.emitting = false;, +                                skipFinal = true;, +                                break;, +                            }, +                        }, +                    }, +                } finally {, +                    if (!skipFinal) {, +                        synchronized (o) {, +                            o.emitting = false;, +                        }, +                    }, +                }, +            }, +        };, +            if (state.replayObserver(o)) {, +            }, +        public boolean replayObserver(SubjectObserver<? super T> observer) {, +            , +            synchronized (observer) {, +                observer.first = false;, +                if (observer.emitting) {, +                    return false;, +                }, +            }, +            , +                return true;, +        public boolean replayObserver(SubjectObserver<? super T> observer) {, +            synchronized (observer) {, +                observer.first = false;, +                if (observer.emitting) {, +                    return false;, +                }, +            }, +            , +            return true;, +         * @return true if the subject has caught up, +        boolean replayObserver(SubjectObserver<? super T> observer);, +++ /dev/null, +++ b/src/main/java/rx/subjects/ReplaySubject.java]