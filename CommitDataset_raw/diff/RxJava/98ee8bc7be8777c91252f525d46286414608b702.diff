[+++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableConcatArray.java, +            sd.replace(d);, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableConcatArray.java, +            sd.replace(d);, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableConcatIterable.java, +            sd.replace(d);, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableConcatArray.java, +            sd.replace(d);, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableConcatIterable.java, +            sd.replace(d);, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableAndThenTest.java, +import io.reactivex.functions.Action;, +import io.reactivex.schedulers.Schedulers;, +, +import java.util.concurrent.CountDownLatch;, +, +import static org.junit.Assert.*;, +, +    @Test, +    public void andThenNoInterrupt() throws InterruptedException {, +        for (int k = 0; k < 100; k++) {, +            final int count = 10;, +            final CountDownLatch latch = new CountDownLatch(count);, +            final boolean[] interrupted = { false };, +, +            for (int i = 0; i < count; i++) {, +                Completable.complete(), +                .subscribeOn(Schedulers.io()), +                .observeOn(Schedulers.io()), +                .andThen(Completable.fromAction(new Action() {, +                    @Override, +                    public void run() throws Exception {, +                        try {, +                            Thread.sleep(30);, +                        } catch (InterruptedException e) {, +                            System.out.println("Interrupted! " + Thread.currentThread());, +                            interrupted[0] = true;, +                        }, +                    }, +                })), +                .subscribe(new Action() {, +                    @Override, +                    public void run() throws Exception {, +                        latch.countDown();, +                    }, +                });, +            }, +, +            latch.await();, +            assertFalse("The second Completable was interrupted!", interrupted[0]);, +        }, +    }, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableConcatArray.java, +            sd.replace(d);, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableConcatIterable.java, +            sd.replace(d);, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableAndThenTest.java, +import io.reactivex.functions.Action;, +import io.reactivex.schedulers.Schedulers;, +, +import java.util.concurrent.CountDownLatch;, +, +import static org.junit.Assert.*;, +, +    @Test, +    public void andThenNoInterrupt() throws InterruptedException {, +        for (int k = 0; k < 100; k++) {, +            final int count = 10;, +            final CountDownLatch latch = new CountDownLatch(count);, +            final boolean[] interrupted = { false };, +, +            for (int i = 0; i < count; i++) {, +                Completable.complete(), +                .subscribeOn(Schedulers.io()), +                .observeOn(Schedulers.io()), +                .andThen(Completable.fromAction(new Action() {, +                    @Override, +                    public void run() throws Exception {, +                        try {, +                            Thread.sleep(30);, +                        } catch (InterruptedException e) {, +                            System.out.println("Interrupted! " + Thread.currentThread());, +                            interrupted[0] = true;, +                        }, +                    }, +                })), +                .subscribe(new Action() {, +                    @Override, +                    public void run() throws Exception {, +                        latch.countDown();, +                    }, +                });, +            }, +, +            latch.await();, +            assertFalse("The second Completable was interrupted!", interrupted[0]);, +        }, +    }, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableConcatTest.java, +import java.util.concurrent.CountDownLatch;]