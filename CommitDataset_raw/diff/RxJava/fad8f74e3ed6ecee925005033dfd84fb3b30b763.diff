[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/rxjava-core/build.gradle, +        instruction 'Eclipse-ExtensibleAPI', 'true', +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/rxjava-core/build.gradle, +        instruction 'Eclipse-ExtensibleAPI', 'true', +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationAmb;, +        return create(OperationAmb.amb(sources));, +        return create(OperationAmb.amb(o1, o2));, +        return create(OperationAmb.amb(o1, o2, o3));, +        return create(OperationAmb.amb(o1, o2, o3, o4));, +        return create(OperationAmb.amb(o1, o2, o3, o4, o5));, +        return create(OperationAmb.amb(o1, o2, o3, o4, o5, o6));, +        return create(OperationAmb.amb(o1, o2, o3, o4, o5, o6, o7));, +        return create(OperationAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8));, +        return create(OperationAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8, o9));, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/rxjava-core/build.gradle, +        instruction 'Eclipse-ExtensibleAPI', 'true', +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationAmb;, +        return create(OperationAmb.amb(sources));, +        return create(OperationAmb.amb(o1, o2));, +        return create(OperationAmb.amb(o1, o2, o3));, +        return create(OperationAmb.amb(o1, o2, o3, o4));, +        return create(OperationAmb.amb(o1, o2, o3, o4, o5));, +        return create(OperationAmb.amb(o1, o2, o3, o4, o5, o6));, +        return create(OperationAmb.amb(o1, o2, o3, o4, o5, o6, o7));, +        return create(OperationAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8));, +        return create(OperationAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8, o9));, +++ b/rxjava-core/src/main/java/rx/operators/OperationAmb.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscription;, +import rx.subscriptions.CompositeSubscription;, +, +/**, + * Propagates the observable sequence that reacts first., + */, +public class OperationAmb {, +, +    public static <T> OnSubscribeFunc<T> amb(Observable<? extends T> o1, Observable<? extends T> o2) {, +        List<Observable<? extends T>> sources = new ArrayList<Observable<? extends T>>();, +        sources.add(o1);, +        sources.add(o2);, +        return amb(sources);, +    }, +, +    public static <T> OnSubscribeFunc<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3) {, +        List<Observable<? extends T>> sources = new ArrayList<Observable<? extends T>>();, +        sources.add(o1);, +        sources.add(o2);, +        sources.add(o3);, +        return amb(sources);, +    }, +, +    public static <T> OnSubscribeFunc<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4) {, +        List<Observable<? extends T>> sources = new ArrayList<Observable<? extends T>>();, +        sources.add(o1);, +        sources.add(o2);, +        sources.add(o3);, +        sources.add(o4);, +        return amb(sources);, +    }, +, +    public static <T> OnSubscribeFunc<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5) {, +        List<Observable<? extends T>> sources = new ArrayList<Observable<? extends T>>();, +        sources.add(o1);, +        sources.add(o2);, +        sources.add(o3);, +        sources.add(o4);]