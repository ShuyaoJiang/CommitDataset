[+++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +(defn ^:private sorted-list-by, +   (sort clojure.core/compare xs)), +        (sorted-list-by identity comp), +   (sort-by keyfn clojure.core/compare xs)), +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +(defn ^:private sorted-list-by, +   (sort clojure.core/compare xs)), +        (sorted-list-by identity comp), +   (sort-by keyfn clojure.core/compare xs)), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/core_test.clj, +  (are [in cmp] (= (if cmp, +                     (sort cmp in), +                     (sort in)), +                   (->> in, +                        (rx/seq->o), +                        (#(if cmp (rx/sort cmp %) (rx/sort %))), +                        (b/into []))), +       []      nil, +       []      (comp - compare), +       [3 1 2] nil, +       [1 2 3] nil, +       [1 2 3] (comp - compare), +       [2 1 3] (comp - compare))), +  (are [rin cmp] (let [in (map #(hash-map :foo %) rin)], +                   (= (if cmp, +                        (sort-by :foo cmp in), +                        (sort-by :foo in)), +                      (->> in, +                           (rx/seq->o), +                           (#(if cmp (rx/sort-by :foo cmp %) (rx/sort-by :foo %))), +                           (b/into [])))), +       []      nil, +       []      (comp - compare), +       [3 1 2] nil, +       [1 2 3] nil, +       [1 2 3] (comp - compare), +       [2 1 3] (comp - compare))), +]