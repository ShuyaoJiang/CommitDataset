[+++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.11.3', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.11.3', +++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.11.3', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.11.3', +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-bin.zip, +++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.11.3', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.11.3', +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-bin.zip, +++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.Observable.*;, +    public static Completable concat(Flowable<? extends Completable> sources) {, +    public static Completable concat(Flowable<? extends Completable> sources, int prefetch) {, +    public static <T> Completable fromFlowable(final Flowable<T> flowable) {, +    public static <T> Completable fromNbpObservable(final Observable<T> observable) {, +                observable.subscribe(new Observer<T>() {, +    public static Completable merge(Flowable<? extends Completable> sources) {, +    public static Completable merge(Flowable<? extends Completable> sources, int maxConcurrency) {, +    protected static Completable merge0(Flowable<? extends Completable> sources, int maxConcurrency, boolean delayErrors) {, +    public static Completable mergeDelayError(Flowable<? extends Completable> sources) {, +    public static Completable mergeDelayError(Flowable<? extends Completable> sources, int maxConcurrency) {, +    public final <T> Observable<T> endWith(Observable<T> next) {, +    public final <T> Flowable<T> endWith(Flowable<T> next) {, +    public final Completable repeatWhen(Function<? super Flowable<Object>, ? extends Publisher<Object>> handler) {, +    public final Completable retryWhen(Function<? super Flowable<? extends Throwable>, ? extends Publisher<Object>> handler) {, +    public final <T> Observable<T> startWith(Observable<T> other) {, +    public final <T> Flowable<T> startWith(Flowable<T> other) {, +    public final void subscribe(final Observer<?> s) {, +    public final <T> Flowable<T> toFlowable() {, +        return Flowable.create(new Publisher<T>() {, +    public final <T> Observable<T> toNbpObservable() {, +        return Observable.create(new NbpOnSubscribe<T>() {, +            public void accept(Observer<? super T> s) {, +++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.11.3', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.11.3', +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-bin.zip, +++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.Observable.*;, +    public static Completable concat(Flowable<? extends Completable> sources) {, +    public static Completable concat(Flowable<? extends Completable> sources, int prefetch) {, +    public static <T> Completable fromFlowable(final Flowable<T> flowable) {, +    public static <T> Completable fromNbpObservable(final Observable<T> observable) {, +                observable.subscribe(new Observer<T>() {, +    public static Completable merge(Flowable<? extends Completable> sources) {, +    public static Completable merge(Flowable<? extends Completable> sources, int maxConcurrency) {, +    protected static Completable merge0(Flowable<? extends Completable> sources, int maxConcurrency, boolean delayErrors) {, +    public static Completable mergeDelayError(Flowable<? extends Completable> sources) {, +    public static Completable mergeDelayError(Flowable<? extends Completable> sources, int maxConcurrency) {, +    public final <T> Observable<T> endWith(Observable<T> next) {, +    public final <T> Flowable<T> endWith(Flowable<T> next) {, +    public final Completable repeatWhen(Function<? super Flowable<Object>, ? extends Publisher<Object>> handler) {, +    public final Completable retryWhen(Function<? super Flowable<? extends Throwable>, ? extends Publisher<Object>> handler) {, +    public final <T> Observable<T> startWith(Observable<T> other) {, +    public final <T> Flowable<T> startWith(Flowable<T> other) {, +    public final void subscribe(final Observer<?> s) {, +    public final <T> Flowable<T> toFlowable() {, +        return Flowable.create(new Publisher<T>() {, +    public final <T> Observable<T> toNbpObservable() {, +        return Observable.create(new NbpOnSubscribe<T>() {, +            public void accept(Observer<? super T> s) {, +++ b/src/main/java/io/reactivex/Flowable.java, +/**, + * Copyright 2016 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +package io.reactivex;, +, +, +import java.util.*;, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.AtomicReference;, +, +import org.reactivestreams.*;, +, +import io.reactivex.annotations.*;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.flowables.*;, +import io.reactivex.functions.*;, +import io.reactivex.internal.functions.Functions;, +import io.reactivex.internal.functions.Objects;, +import io.reactivex.internal.operators.flowable.*;, +import io.reactivex.internal.subscribers.flowable.*;, +import io.reactivex.internal.subscriptions.EmptySubscription;, +import io.reactivex.plugins.RxJavaPlugins;, +import io.reactivex.schedulers.*;, +import io.reactivex.subscribers.*;]