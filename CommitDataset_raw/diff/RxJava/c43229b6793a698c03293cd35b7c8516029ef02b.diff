[+++ b/src/main/java/io/reactivex/Maybe.java, +     * Returns a Single that emits the items emitted by the source Maybe or the item of an alternate, +     * SingleSource if the current Maybe is empty., +     * <p>, +     * <img width="640" height="445" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchifempty.m.png" alt="">, +     * <p/>, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code switchIfEmpty} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param other, +     *              the alternate SingleSource to subscribe to if the main does not emit any items, +     * @return  a Single that emits the items emitted by the source Maybe or the item of an, +     *          alternate SingleSource if the source Maybe is empty., +     * @since 2.1.4 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Single<T> switchIfEmpty(SingleSource<? extends T> other) {, +        ObjectHelper.requireNonNull(other, "other is null");, +        return RxJavaPlugins.onAssembly(new MaybeSwitchIfEmptySingle<T>(this, other));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Returns a Single that emits the items emitted by the source Maybe or the item of an alternate, +     * SingleSource if the current Maybe is empty., +     * <p>, +     * <img width="640" height="445" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchifempty.m.png" alt="">, +     * <p/>, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code switchIfEmpty} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param other, +     *              the alternate SingleSource to subscribe to if the main does not emit any items, +     * @return  a Single that emits the items emitted by the source Maybe or the item of an, +     *          alternate SingleSource if the source Maybe is empty., +     * @since 2.1.4 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Single<T> switchIfEmpty(SingleSource<? extends T> other) {, +        ObjectHelper.requireNonNull(other, "other is null");, +        return RxJavaPlugins.onAssembly(new MaybeSwitchIfEmptySingle<T>(this, other));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeSwitchIfEmptySingle.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators.maybe;, +, +import io.reactivex.*;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.disposables.DisposableHelper;, +import io.reactivex.internal.fuseable.HasUpstreamMaybeSource;, +, +import java.util.concurrent.atomic.AtomicReference;, +, +/**, + * Subscribes to the other source if the main source is empty., + *, + * @param <T> the value type, + */, +public final class MaybeSwitchIfEmptySingle<T> extends Single<T> implements HasUpstreamMaybeSource<T> {, +, +    final MaybeSource<T> source;, +    final SingleSource<? extends T> other;, +, +    public MaybeSwitchIfEmptySingle(MaybeSource<T> source, SingleSource<? extends T> other) {, +        this.source = source;, +        this.other = other;, +    }, +, +    @Override, +    public MaybeSource<T> source() {, +        return source;, +    }, +, +    @Override, +    protected void subscribeActual(SingleObserver<? super T> observer) {, +        source.subscribe(new SwitchIfEmptyMaybeObserver<T>(observer, other));, +    }, +]