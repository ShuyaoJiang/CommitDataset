[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer.java, +import io.reactivex.internal.subscriptions.*;, +    static final class BackpressureBufferSubscriber<T> extends BasicIntQueueSubscription<T> implements Subscriber<T> {, +, +        boolean outputFused;, +, +            if (outputFused) {, +                actual.onNext(null);, +            } else {, +        }, +            if (outputFused) {, +                actual.onError(t);, +            } else {, +        }, +            if (outputFused) {, +                actual.onComplete();, +            } else {, +        }, +            if (!outputFused) {, +        }, +                s.cancel();, +, +        @Override, +        public int requestFusion(int mode) {, +            if ((mode & ASYNC) != 0) {, +                outputFused = true;, +                return ASYNC;, +            }, +            return NONE;, +        }, +, +        @Override, +        public T poll() throws Exception {, +            return queue.poll();, +        }, +, +        @Override, +        public void clear() {, +            queue.clear();, +        }, +, +        @Override, +        public boolean isEmpty() {, +            return queue.isEmpty();, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer.java, +import io.reactivex.internal.subscriptions.*;, +    static final class BackpressureBufferSubscriber<T> extends BasicIntQueueSubscription<T> implements Subscriber<T> {, +, +        boolean outputFused;, +, +            if (outputFused) {, +                actual.onNext(null);, +            } else {, +        }, +            if (outputFused) {, +                actual.onError(t);, +            } else {, +        }, +            if (outputFused) {, +                actual.onComplete();, +            } else {, +        }, +            if (!outputFused) {, +        }, +                s.cancel();, +, +        @Override, +        public int requestFusion(int mode) {, +            if ((mode & ASYNC) != 0) {, +                outputFused = true;, +                return ASYNC;, +            }, +            return NONE;, +        }, +, +        @Override, +        public T poll() throws Exception {, +            return queue.poll();, +        }, +, +        @Override, +        public void clear() {, +            queue.clear();, +        }, +, +        @Override, +        public boolean isEmpty() {, +            return queue.isEmpty();, +        }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferTest.java, +import io.reactivex.internal.fuseable.QueueSubscription;, +, +    @Test, +    public void fusedNormal() {, +        TestSubscriber<Integer> ts = SubscriberFusion.newTest(QueueSubscription.ANY);, +, +        Flowable.range(1, 10).onBackpressureBuffer().subscribe(ts);, +, +        ts.assertOf(SubscriberFusion.<Integer>assertFuseable())]