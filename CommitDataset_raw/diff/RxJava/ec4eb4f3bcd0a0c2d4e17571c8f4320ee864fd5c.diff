[+++ b/src/main/java/io/reactivex/Completable.java, +            Exceptions.throwIfFatal(ex);, +            Exceptions.throwIfFatal(ex);, +            Exceptions.throwIfFatal(ex);, +            Exceptions.throwIfFatal(ex);, +++ b/src/main/java/io/reactivex/Completable.java, +            Exceptions.throwIfFatal(ex);, +            Exceptions.throwIfFatal(ex);, +            Exceptions.throwIfFatal(ex);, +            Exceptions.throwIfFatal(ex);, +++ b/src/main/java/io/reactivex/CompletableObserver.java, +     * Called once by the Completable to set a Disposable on this instance which, +     * then can be used to cancel the subscription at any time., +     * @param d the Disposable instance to call dispose on for cancellation, not null, +     */, +    void onSubscribe(Disposable d);, +, +    /**, +++ b/src/main/java/io/reactivex/Completable.java, +            Exceptions.throwIfFatal(ex);, +            Exceptions.throwIfFatal(ex);, +            Exceptions.throwIfFatal(ex);, +            Exceptions.throwIfFatal(ex);, +++ b/src/main/java/io/reactivex/CompletableObserver.java, +     * Called once by the Completable to set a Disposable on this instance which, +     * then can be used to cancel the subscription at any time., +     * @param d the Disposable instance to call dispose on for cancellation, not null, +     */, +    void onSubscribe(Disposable d);, +, +    /**, +++ b/src/main/java/io/reactivex/Flowable.java, +     * @since 2.0, +     * @since 2.0, +     * @since 2.0, +     * @since 2.0, +     * @since 2.0, +     * @since 2.0, +     * @since 2.0, +            Exceptions.throwIfFatal(ex);, +     * @since 2.0, +     * @param p1 the first other Publisher, +     * @param p2 the second other Publisher, +     * @since 2.0, +    public final <T1, T2, R> Flowable<R> withLatestFrom(Publisher<T1> p1, Publisher<T2> p2, , +        Function<Object[], R> f = Functions.toFunction(combiner);, +        return withLatestFrom(new Publisher[] { p1, p2 }, f);, +     * @param p1 the first other Publisher, +     * @param p2 the second other Publisher, +     * @param p3 the third other Publisher, +     * @since 2.0, +            Publisher<T1> p1, Publisher<T2> p2, , +            Publisher<T3> p3, , +        Function<Object[], R> f = Functions.toFunction(combiner);, +        return withLatestFrom(new Publisher[] { p1, p2, p3 }, f);, +     * @param p1 the first other Publisher, +     * @param p2 the second other Publisher, +     * @param p3 the third other Publisher, +     * @param p4 the fourth other Publisher, +     * @since 2.0, +            Publisher<T1> p1, Publisher<T2> p2, , +            Publisher<T3> p3, Publisher<T4> p4, , +        Function<Object[], R> f = Functions.toFunction(combiner);, +        return withLatestFrom(new Publisher[] { p1, p2, p3, p4 }, f);, +     * @param p1 the first other Publisher, +     * @param p2 the second other Publisher, +     * @param p3 the third other Publisher, +     * @param p4 the fourth other Publisher, +     * @param p5 the fifth other Publisher, +     * @since 2.0, +            Publisher<T1> p1, Publisher<T2> p2, , +            Publisher<T1> p3, Publisher<T2> p4, , +            Publisher<T1> p5, , +        Function<Object[], R> f = Functions.toFunction(combiner);, +        return withLatestFrom(new Publisher[] { p1, p2, p3, p4, p5 }, f);, +     * @param p1 the first other Publisher, +     * @param p2 the second other Publisher, +     * @param p3 the third other Publisher, +     * @param p4 the fourth other Publisher, +     * @param p5 the fifth other Publisher, +     * @param p6 the sixth other Publisher, +     * @since 2.0, +            Publisher<T1> p1, Publisher<T2> p2, , +            Publisher<T1> p3, Publisher<T2> p4, , +            Publisher<T1> p5, Publisher<T2> p6, , +        Function<Object[], R> f = Functions.toFunction(combiner);, +        return withLatestFrom(new Publisher[] { p1, p2, p3, p4, p5, p6 }, f);, +     * @param p1 the first other Publisher, +     * @param p2 the second other Publisher, +     * @param p3 the third other Publisher, +     * @param p4 the fourth other Publisher, +     * @param p5 the fifth other Publisher, +     * @param p6 the sixth other Publisher, +     * @param p7 the seventh other Publisher, +     * @since 2.0, +            Publisher<T1> p1, Publisher<T2> p2, , +            Publisher<T1> p3, Publisher<T2> p4, , +            Publisher<T1> p5, Publisher<T2> p6, , +            Publisher<T1> p7,, +        Function<Object[], R> f = Functions.toFunction(combiner);]