[+++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test(expected = IllegalArgumentException.class), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test(expected = IllegalArgumentException.class), +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +    [Test(expected = javaClass<IllegalArgumentException>())], +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test(expected = IllegalArgumentException.class), +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +    [Test(expected = javaClass<IllegalArgumentException>())], +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationSingle;, +     * If the Observable completes after emitting a single item, return an, +     * Observable containing that item. If it emits more than one item or no, +     * item, throw an IllegalArgumentException., +     * @return an Observable containing the single item emitted by the source, +     *         Observable that matches the predicate., +     * @throws IllegalArgumentException, +     *             if the source emits more than one item or no item, +    public Observable<T> single() {, +        return create(OperationSingle.<T> single(this));, +    }, +, +    /**, +     * If the Observable completes after emitting a single item that matches a, +     * predicate, return an Observable containing that item. If it emits more, +     * than one such item or no item, throw an IllegalArgumentException., +     * , +     * @param predicate, +     *            a predicate function to evaluate items emitted by the source, +     *            Observable, +     * @return an Observable containing the single item emitted by the source, +     *         Observable that matches the predicate., +     * @throws IllegalArgumentException, +     *             if the source emits more than one item or no item matching, +     *             the predicate, +     */, +    public Observable<T> single(Func1<? super T, Boolean> predicate) {, +        return filter(predicate).single();, +    }, +, +    /**, +     * If the Observable completes after emitting a single item, return an, +     * Observable containing that item. If it's empty, return an Observable, +     * containing the defaultValue. If it emits more than one item, throw an, +     * IllegalArgumentException., +     * , +     * @param defaultValue, +     *            a default value to return if the Observable emits no item, +     * @return an Observable containing the single item emitted by the source, +     *         Observable, or an Observable containing the defaultValue if no, +     *         item., +     * @throws IllegalArgumentException, +     *             if the source emits more than one item, +     */, +    public Observable<T> singleOrDefault(T defaultValue) {, +        return create(OperationSingle.<T> singleOrDefault(this, defaultValue));, +    }, +, +    /**, +     * If the Observable completes after emitting a single item that matches a, +     * predicate, return an Observable containing that item. If it emits no such, +     * item, return an Observable containing the defaultValue. If it emits more, +     * than one such item, throw an IllegalArgumentException., +     * , +     * @param defaultValue, +     *            a default value to return if the {@link Observable} emits no, +     *            matching items, +     * @param predicate, +     *            a predicate function to evaluate items emitted by the, +     *            Observable, +     * @return an Observable containing the single item emitted by the source, +     *         Observable that matches the predicate, or an Observable, +     *         containing the defaultValue if no item matches the predicate, +     * @throws IllegalArgumentException, +     *             if the source emits more than one item matching the predicate, +     */, +    public Observable<T> singleOrDefault(T defaultValue, Func1<? super T, Boolean> predicate) {, +        return filter(predicate).singleOrDefault(defaultValue);, +     * source Observable, or an <code>IllegalArgumentException</code> if the source, +     * {@link Observable} is empty., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/first.png">, +     * , +     * @return an Observable that emits only the very first item from the, +     *         source, or an <code>IllegalArgumentException</code> if the source {@link Observable} is empty., +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Filtering-Observables#first">RxJava Wiki: first()</a>, +     */, +    public Observable<T> first() {, +        return take(1).single();, +    }, +, +    /**, +     * Returns an Observable that emits only the very first item emitted by the, +     * source Observable that satisfies a given condition, or an <code>IllegalArgumentException</code>, +     * if no such items are emitted., +     *         given condition from the source, or an <code>IllegalArgumentException</code> if no such items are emitted., +        return takeFirst(predicate).single();, +        return take(1).singleOrDefault(defaultValue);, +    public Observable<T> firstOrDefault(T defaultValue, Func1<? super T, Boolean> predicate) {]