[+++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, +include all Rx types. In particular this release focuses on fleshing out the bindings for the `Subject` and `Scheduler` types., + companion object that takes an `rx.Observer` private to the Scala bindings package, thus properly hiding irrelevant, + implementation details from the user-facing API. The `Observer[T]` trait now looks like a clean, native Scala type:, +To create an instance of a specific `Observer`, say  `Observer[SensorEvent]` in user code, you can create a new instance, +of the `Observer` trait by implementing any of the methods that you care about:, +In fact the only occurrence left of `apply` is for the varargs case. All other factory methods now have their own name., +For each kind of subject, there is a class with a private constructor and a companion object that you should use, +to create a new kind of subject. The subjects that are available are:, +Compared with release 0.15.1, the breaking changes in `Subject` for this release are, +making `asJavaSubject` private, and collapsing its type parameters, neither of these should cause trouble,, +and renaming `PublishSubject` to `Subject`., +as part of this reshuffling, the scheduler package has been renamed from `rx.lang.scala.concurrency`, +to `rx.lang.scala.schedulers`. There is a high probability that this package renaming will also happen in RxJava., +However, several of the scheduler implementations have additional methods, such as the `TestScheduler`,, +++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, +include all Rx types. In particular this release focuses on fleshing out the bindings for the `Subject` and `Scheduler` types., + companion object that takes an `rx.Observer` private to the Scala bindings package, thus properly hiding irrelevant, + implementation details from the user-facing API. The `Observer[T]` trait now looks like a clean, native Scala type:, +To create an instance of a specific `Observer`, say  `Observer[SensorEvent]` in user code, you can create a new instance, +of the `Observer` trait by implementing any of the methods that you care about:, +In fact the only occurrence left of `apply` is for the varargs case. All other factory methods now have their own name., +For each kind of subject, there is a class with a private constructor and a companion object that you should use, +to create a new kind of subject. The subjects that are available are:, +Compared with release 0.15.1, the breaking changes in `Subject` for this release are, +making `asJavaSubject` private, and collapsing its type parameters, neither of these should cause trouble,, +and renaming `PublishSubject` to `Subject`., +as part of this reshuffling, the scheduler package has been renamed from `rx.lang.scala.concurrency`, +to `rx.lang.scala.schedulers`. There is a high probability that this package renaming will also happen in RxJava., +However, several of the scheduler implementations have additional methods, such as the `TestScheduler`,, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ConstructorTest.scala, +package rx.lang.scala, +import scala.language.postfixOps, +import org.junit.Assert._, +import org.junit.Test, +import org.scalatest.junit.JUnitSuite, +, +class ConstructorTest extends JUnitSuite {, +, +  @Test def toObservable() {, +    val xs = List(1,2,3).toObservable().toBlockingObservable.toList, +    assertEquals(List(1,2,3), xs), +, +    val ys = Observable(List(1,2,3)).toBlockingObservable.toList, +    assertEquals(List(1,2,3), xs), +, +    val zs = Observable(1,2,3).toBlockingObservable.toList, +    assertEquals(List(1,2,3), xs), +, +  }, +}, +++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, +include all Rx types. In particular this release focuses on fleshing out the bindings for the `Subject` and `Scheduler` types., + companion object that takes an `rx.Observer` private to the Scala bindings package, thus properly hiding irrelevant, + implementation details from the user-facing API. The `Observer[T]` trait now looks like a clean, native Scala type:, +To create an instance of a specific `Observer`, say  `Observer[SensorEvent]` in user code, you can create a new instance, +of the `Observer` trait by implementing any of the methods that you care about:, +In fact the only occurrence left of `apply` is for the varargs case. All other factory methods now have their own name., +For each kind of subject, there is a class with a private constructor and a companion object that you should use, +to create a new kind of subject. The subjects that are available are:, +Compared with release 0.15.1, the breaking changes in `Subject` for this release are, +making `asJavaSubject` private, and collapsing its type parameters, neither of these should cause trouble,, +and renaming `PublishSubject` to `Subject`., +as part of this reshuffling, the scheduler package has been renamed from `rx.lang.scala.concurrency`, +to `rx.lang.scala.schedulers`. There is a high probability that this package renaming will also happen in RxJava., +However, several of the scheduler implementations have additional methods, such as the `TestScheduler`,, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ConstructorTest.scala, +package rx.lang.scala, +import scala.language.postfixOps, +import org.junit.Assert._, +import org.junit.Test, +import org.scalatest.junit.JUnitSuite, +, +class ConstructorTest extends JUnitSuite {, +, +  @Test def toObservable() {, +    val xs = List(1,2,3).toObservable().toBlockingObservable.toList, +    assertEquals(List(1,2,3), xs), +, +    val ys = Observable(List(1,2,3)).toBlockingObservable.toList, +    assertEquals(List(1,2,3), xs), +, +    val zs = Observable(1,2,3).toBlockingObservable.toList, +    assertEquals(List(1,2,3), xs), +, +  }, +}, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/SubjectTests.scala]