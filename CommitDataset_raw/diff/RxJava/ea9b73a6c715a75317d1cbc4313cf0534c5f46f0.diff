[+++ b/rxjava-core/src/main/java/rx/operators/OperatorParallel.java, +    private final int degreeOfParallelism;, +        this.degreeOfParallelism = scheduler.degreeOfParallelism();, +        Func1<Subscriber<? super GroupedObservable<Long, T>>, Subscriber<? super T>> groupBy =, +                new OperatorGroupBy<Long, T>(new Func1<T, Long>() {, +                    long i = 0;, +                    public Long call(T t) {, +                        return i++ % degreeOfParallelism;, +        Func1<Subscriber<? super Observable<R>>, Subscriber<? super GroupedObservable<Long, T>>> map =, +                new OperatorMap<GroupedObservable<Long, T>, Observable<R>>(, +                        new Func1<GroupedObservable<Long, T>, Observable<R>>() {, +                            public Observable<R> call(GroupedObservable<Long, T> g) {, +++ b/rxjava-core/src/main/java/rx/operators/OperatorParallel.java, +    private final int degreeOfParallelism;, +        this.degreeOfParallelism = scheduler.degreeOfParallelism();, +        Func1<Subscriber<? super GroupedObservable<Long, T>>, Subscriber<? super T>> groupBy =, +                new OperatorGroupBy<Long, T>(new Func1<T, Long>() {, +                    long i = 0;, +                    public Long call(T t) {, +                        return i++ % degreeOfParallelism;, +        Func1<Subscriber<? super Observable<R>>, Subscriber<? super GroupedObservable<Long, T>>> map =, +                new OperatorMap<GroupedObservable<Long, T>, Observable<R>>(, +                        new Func1<GroupedObservable<Long, T>, Observable<R>>() {, +                            public Observable<R> call(GroupedObservable<Long, T> g) {, +++ b/rxjava-core/src/perf/java/rx/operators/OperatorParallelPerformance.java, +package rx.operators;, +, +import rx.Observable;, +import rx.functions.Action0;, +import rx.functions.Func1;, +import rx.perf.AbstractPerformanceTester;, +import rx.perf.IntegerSumObserver;, +, +public class OperatorParallelPerformance extends AbstractPerformanceTester {, +, +    private final static int REPS = 10000000;, +, +    OperatorParallelPerformance() {, +        super(REPS);, +    }, +, +    public static void main(String args[]) {, +, +        final OperatorParallelPerformance spt = new OperatorParallelPerformance();, +        try {, +            spt.runTest(new Action0() {, +, +                @Override, +                public void call() {, +                    spt.parallelSum();, +                }, +            });, +        } catch (Exception e) {, +            e.printStackTrace();, +        }, +, +    }, +, +    /**, +     * , +     * Run: 10 - 11,220,888 ops/sec, +     * Run: 11 - 12,372,424 ops/sec, +     * Run: 12 - 11,028,921 ops/sec, +     * Run: 13 - 11,813,711 ops/sec, +     * Run: 14 - 12,098,364 ops/sec, +     * , +     */, +    public long parallelSum() {, +, +        Observable<Integer> s = Observable.range(1, REPS).parallel(new Func1<Observable<Integer>, Observable<Integer>>() {, +, +            @Override, +            public Observable<Integer> call(Observable<Integer> l) {, +                return l.map(new Func1<Integer, Integer>() {, +, +                    @Override, +                    public Integer call(Integer i) {, +                        return i + 1;, +                    }, +, +                });, +            }, +, +        });, +        IntegerSumObserver o = new IntegerSumObserver();, +, +        s.subscribe(o);, +        return o.sum;, +    }, +, +}]