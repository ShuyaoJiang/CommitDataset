[+++ b/src/main/java/io/reactivex/Observable.java, +    public interface Operator<Downstream, Upstream> extends Function<Observer<? super Downstream>, Observer<? super Upstream>> {, +    public interface Transformer<Upstream, Downstream> extends Function<Observable<Upstream>, ObservableConsumable<Downstream>> {, +        return lift(new Operator<T, T>() {, +    public final <R> Observable<R> lift(Operator<? extends R, ? super T> onLift) {, +        return lift(new Operator<T, T>() {, +++ b/src/main/java/io/reactivex/Observable.java, +    public interface Operator<Downstream, Upstream> extends Function<Observer<? super Downstream>, Observer<? super Upstream>> {, +    public interface Transformer<Upstream, Downstream> extends Function<Observable<Upstream>, ObservableConsumable<Downstream>> {, +        return lift(new Operator<T, T>() {, +    public final <R> Observable<R> lift(Operator<? extends R, ? super T> onLift) {, +        return lift(new Operator<T, T>() {, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableLift.java, +    final Operator<? extends R, ? super T> operator;, +    public ObservableLift(ObservableConsumable<? extends T> source, Operator<? extends R, ? super T> operator) {, +    public Operator<? extends R, ? super T> operator() {, +++ b/src/main/java/io/reactivex/Observable.java, +    public interface Operator<Downstream, Upstream> extends Function<Observer<? super Downstream>, Observer<? super Upstream>> {, +    public interface Transformer<Upstream, Downstream> extends Function<Observable<Upstream>, ObservableConsumable<Downstream>> {, +        return lift(new Operator<T, T>() {, +    public final <R> Observable<R> lift(Operator<? extends R, ? super T> onLift) {, +        return lift(new Operator<T, T>() {, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableLift.java, +    final Operator<? extends R, ? super T> operator;, +    public ObservableLift(ObservableConsumable<? extends T> source, Operator<? extends R, ? super T> operator) {, +    public Operator<? extends R, ? super T> operator() {, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableOnErrorResumeNextViaFunctionTest.java, +import io.reactivex.Observable.Operator;, +        Observable.just(1).lift(new Operator<String, Integer>() {, +        Observable.just(1).lift(new Operator<String, Integer>() {, +++ b/src/main/java/io/reactivex/Observable.java, +    public interface Operator<Downstream, Upstream> extends Function<Observer<? super Downstream>, Observer<? super Upstream>> {, +    public interface Transformer<Upstream, Downstream> extends Function<Observable<Upstream>, ObservableConsumable<Downstream>> {, +        return lift(new Operator<T, T>() {, +    public final <R> Observable<R> lift(Operator<? extends R, ? super T> onLift) {, +        return lift(new Operator<T, T>() {, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableLift.java, +    final Operator<? extends R, ? super T> operator;, +    public ObservableLift(ObservableConsumable<? extends T> source, Operator<? extends R, ? super T> operator) {, +    public Operator<? extends R, ? super T> operator() {, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableOnErrorResumeNextViaFunctionTest.java, +import io.reactivex.Observable.Operator;, +        Observable.just(1).lift(new Operator<String, Integer>() {, +        Observable.just(1).lift(new Operator<String, Integer>() {, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableSwitchIfEmptyTest.java, +                .lift(new Observable.Operator<Long, Long>() {, +++ b/src/main/java/io/reactivex/Observable.java, +    public interface Operator<Downstream, Upstream> extends Function<Observer<? super Downstream>, Observer<? super Upstream>> {, +    public interface Transformer<Upstream, Downstream> extends Function<Observable<Upstream>, ObservableConsumable<Downstream>> {, +        return lift(new Operator<T, T>() {, +    public final <R> Observable<R> lift(Operator<? extends R, ? super T> onLift) {, +        return lift(new Operator<T, T>() {, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableLift.java, +    final Operator<? extends R, ? super T> operator;, +    public ObservableLift(ObservableConsumable<? extends T> source, Operator<? extends R, ? super T> operator) {, +    public Operator<? extends R, ? super T> operator() {, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableOnErrorResumeNextViaFunctionTest.java, +import io.reactivex.Observable.Operator;, +        Observable.just(1).lift(new Operator<String, Integer>() {, +        Observable.just(1).lift(new Operator<String, Integer>() {, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableSwitchIfEmptyTest.java, +                .lift(new Observable.Operator<Long, Long>() {, +++ b/src/test/java/io/reactivex/observable/ObservableCovarianceTest.java, +import io.reactivex.Observable.Transformer;, +    static Transformer<List<Movie>, Movie> deltaTransformer = new Transformer<List<Movie>, Movie>() {, +++ b/src/main/java/io/reactivex/Observable.java, +    public interface Operator<Downstream, Upstream> extends Function<Observer<? super Downstream>, Observer<? super Upstream>> {, +    public interface Transformer<Upstream, Downstream> extends Function<Observable<Upstream>, ObservableConsumable<Downstream>> {, +        return lift(new Operator<T, T>() {, +    public final <R> Observable<R> lift(Operator<? extends R, ? super T> onLift) {, +        return lift(new Operator<T, T>() {, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableLift.java, +    final Operator<? extends R, ? super T> operator;, +    public ObservableLift(ObservableConsumable<? extends T> source, Operator<? extends R, ? super T> operator) {, +    public Operator<? extends R, ? super T> operator() {, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableOnErrorResumeNextViaFunctionTest.java, +import io.reactivex.Observable.Operator;, +        Observable.just(1).lift(new Operator<String, Integer>() {, +        Observable.just(1).lift(new Operator<String, Integer>() {, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableSwitchIfEmptyTest.java, +                .lift(new Observable.Operator<Long, Long>() {, +++ b/src/test/java/io/reactivex/observable/ObservableCovarianceTest.java, +import io.reactivex.Observable.Transformer;, +    static Transformer<List<Movie>, Movie> deltaTransformer = new Transformer<List<Movie>, Movie>() {, +++ b/src/test/java/io/reactivex/observable/ObservableNullTests.java, +import io.reactivex.Observable.Operator;, +        just1.lift(new Operator<Object, Integer>() {, +++ b/src/main/java/io/reactivex/Observable.java, +    public interface Operator<Downstream, Upstream> extends Function<Observer<? super Downstream>, Observer<? super Upstream>> {, +    public interface Transformer<Upstream, Downstream> extends Function<Observable<Upstream>, ObservableConsumable<Downstream>> {, +        return lift(new Operator<T, T>() {, +    public final <R> Observable<R> lift(Operator<? extends R, ? super T> onLift) {, +        return lift(new Operator<T, T>() {, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableLift.java, +    final Operator<? extends R, ? super T> operator;, +    public ObservableLift(ObservableConsumable<? extends T> source, Operator<? extends R, ? super T> operator) {, +    public Operator<? extends R, ? super T> operator() {, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableOnErrorResumeNextViaFunctionTest.java, +import io.reactivex.Observable.Operator;, +        Observable.just(1).lift(new Operator<String, Integer>() {]