[+++ b/build.gradle, +	    perfCompile.extendsFrom compile, +	    perfRuntime.extendsFrom runtime, +		//include /src/examples folder, +		//include /src/perf folder, +		// perf //-> Not working so commented out, +		//include 'examples' in build task, +		//include 'perf' in build task, +        // dependsOn(perfClasses)  //-> Not working so commented out, +++ b/build.gradle, +	    perfCompile.extendsFrom compile, +	    perfRuntime.extendsFrom runtime, +		//include /src/examples folder, +		//include /src/perf folder, +		// perf //-> Not working so commented out, +		//include 'examples' in build task, +		//include 'perf' in build task, +        // dependsOn(perfClasses)  //-> Not working so commented out, +++ b/rxjava-core/src/perf/java/rx/performance/PerformanceTest.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.performance;, +, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicLong;, +, +import rx.Observable;, +import rx.Observer;, +import rx.util.functions.Func1;, +, +public class PerformanceTest {, +, +    /*, +     * Example run:, +     * , +     * compositionTestTotalTime: 2432, +     * nonCompositionalTestWithDirectLoopTotalTime: 2043, +     * nonCompositionalTestWithArrayOfFunctionsTotalTime: 1925, +     * , +     * compositionTestTotalTime: 2362, +     * nonCompositionalTestWithDirectLoopTotalTime: 1910, +     * nonCompositionalTestWithArrayOfFunctionsTotalTime: 1823, +     * , +     * compositionTestTotalTime: 2456, +     * nonCompositionalTestWithDirectLoopTotalTime: 2004, +     * nonCompositionalTestWithArrayOfFunctionsTotalTime: 2014, +     */, +, +    /*, +     * >>> Statically typed <<<, +     * , +     * Without chaining:, +     * , +     * Sum: 710082754 Time: 130.683ms, +     * runNonCompositionalTestWithDirectLoop, +     * Sum: 710082754 Time: 21.011ms, +     * runNonCompositionalTestWithArrayOfFunctions, +     * Sum: 710082754 Time: 20.84ms, +     * , +     * , +     * With chaining (composition collapsing):, +     * , +     * Sum: 710082754 Time: 28.787ms, +     * runNonCompositionalTestWithDirectLoop, +     * Sum: 710082754 Time: 19.525ms, +     * runNonCompositionalTestWithArrayOfFunctions, +     * Sum: 710082754 Time: 19.175ms, +     * , +     * , +     * >>> Dynamically typed <<<, +     * , +     * When going via generic Functions.execute even with chained sequence:, +     * , +     * runCompositionTest, +     * Sum: 710082754 Time: 577.3ms <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< very bad when dynamic, +     * runNonCompositionalTestWithDirectLoop, +     * Sum: 710082754 Time: 31.591ms, +     * runNonCompositionalTestWithArrayOfFunctions, +     * Sum: 710082754 Time: 38.093ms, +     * runCompositionTest, +     * , +     * , +     * With Function memoization so we only pay dynamic price during sequence setup, not in onNext:, +     * , +     * , +     * Using ArrayList, +     * ]