[+++ b/src/main/java/io/reactivex/Observable.java, +import java.util.*;, +    , +    public final Observable<List<T>> toList() {, +        return lift(OperatorToList.defaultInstance());, +    }, +    , +    public final Observable<List<T>> toList(int capacityHint) {, +        if (capacityHint <= 0) {, +            throw new IllegalArgumentException("capacityHint > 0 required but it was " + capacityHint);, +        }, +        return lift(new OperatorToList<>(() -> new ArrayList<>(capacityHint)));, +    }, +    , +    public final <U extends Collection<? super T>> Observable<U> toList(Supplier<U> collectionSupplier) {, +        Objects.requireNonNull(collectionSupplier);, +        return lift(new OperatorToList<>(collectionSupplier));, +    }, +    , +    @SuppressWarnings({ "unchecked", "rawtypes"}), +    public final Observable<List<T>> toSortedList() {, +        return toSortedList((Comparator)Comparator.naturalOrder());, +    }, +, +    @SuppressWarnings({ "unchecked", "rawtypes"}), +    public final Observable<List<T>> toSortedList(int capacityHint) {, +        return toSortedList((Comparator)Comparator.naturalOrder(), capacityHint);, +    }, +, +    public final Observable<List<T>> toSortedList(Comparator<? super T> comparator) {, +        Objects.requireNonNull(comparator);, +        return toList().map(v -> {, +            Collections.sort(v, comparator);, +            return v;, +        });, +    }, +    , +    public final Observable<List<T>> toSortedList(Comparator<? super T> comparator, int capacityHint) {, +        Objects.requireNonNull(comparator);, +        return toList(capacityHint).map(v -> {, +            Collections.sort(v, comparator);, +            return v;, +        });, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +import java.util.*;, +    , +    public final Observable<List<T>> toList() {, +        return lift(OperatorToList.defaultInstance());, +    }, +    , +    public final Observable<List<T>> toList(int capacityHint) {, +        if (capacityHint <= 0) {, +            throw new IllegalArgumentException("capacityHint > 0 required but it was " + capacityHint);, +        }, +        return lift(new OperatorToList<>(() -> new ArrayList<>(capacityHint)));, +    }, +    , +    public final <U extends Collection<? super T>> Observable<U> toList(Supplier<U> collectionSupplier) {, +        Objects.requireNonNull(collectionSupplier);, +        return lift(new OperatorToList<>(collectionSupplier));, +    }, +    , +    @SuppressWarnings({ "unchecked", "rawtypes"}), +    public final Observable<List<T>> toSortedList() {, +        return toSortedList((Comparator)Comparator.naturalOrder());, +    }, +, +    @SuppressWarnings({ "unchecked", "rawtypes"}), +    public final Observable<List<T>> toSortedList(int capacityHint) {, +        return toSortedList((Comparator)Comparator.naturalOrder(), capacityHint);, +    }, +, +    public final Observable<List<T>> toSortedList(Comparator<? super T> comparator) {, +        Objects.requireNonNull(comparator);, +        return toList().map(v -> {, +            Collections.sort(v, comparator);, +            return v;, +        });, +    }, +    , +    public final Observable<List<T>> toSortedList(Comparator<? super T> comparator, int capacityHint) {, +        Objects.requireNonNull(comparator);, +        return toList(capacityHint).map(v -> {, +            Collections.sort(v, comparator);, +            return v;, +        });, +    }, +++ b/src/main/java/io/reactivex/internal/operators/CancelledSubscriber.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License.]