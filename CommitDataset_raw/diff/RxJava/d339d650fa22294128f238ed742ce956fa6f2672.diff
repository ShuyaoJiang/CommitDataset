[+++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java, +import java.util.function.*;, +, + * Utility class to inject handlers to certain standard RxJava operations., +public final class RxJavaPlugins {, +    static final Consumer<Throwable> DEFAULT_ERROR_HANDLER = error -> {, +    };, +    , +    static volatile Consumer<Throwable> errorHandler = DEFAULT_ERROR_HANDLER;, +    , +    static volatile Function<Subscriber<Object>, Subscriber<Object>> onSubscribeHandler = e -> e;, +    , +    static volatile Function<Publisher<Object>, Publisher<Object>> onCreateHandler = e -> e;, +, +    static volatile Function<Runnable, Runnable> onScheduleHandler = r -> r;, +, +    static volatile Function<Scheduler, Scheduler> onInitComputationHandler = s -> s;, +    , +    static volatile Function<Scheduler, Scheduler> onInitSingleHandler = s -> s;, +    , +    static volatile Function<Scheduler, Scheduler> onInitIOHandler = s -> s;, +    , +    static volatile Function<Scheduler, Scheduler> onComputationHandler = s -> s;, +    , +    static volatile Function<Scheduler, Scheduler> onSingleHandler = s -> s;, +    , +    static volatile Function<Scheduler, Scheduler> onIOHandler = s -> s;, +    , +    public static Function<Scheduler, Scheduler> getComputationSchedulerHandler() {, +        return onComputationHandler;, +    @SuppressWarnings({ "rawtypes", "unchecked" }), +    public static <T> Function<Publisher<T>, Publisher<T>> getCreateHandler() {, +        return (Function)onCreateHandler;, +    public static Consumer<Throwable> getErrorHandler() {, +        return errorHandler;, +    }, +    , +    public static Function<Scheduler, Scheduler> getInitComputationSchedulerHandler() {, +        return onInitComputationHandler;, +    }, +, +    public static Function<Scheduler, Scheduler> getInitIOSchedulerHandler() {, +        return onInitIOHandler;, +    }, +    , +    public static Function<Scheduler, Scheduler> getInitSingleSchedulerHandler() {, +        return onInitSingleHandler;, +    }, +, +    public static Function<Scheduler, Scheduler> getIOSchedulerHandler() {, +        return onIOHandler;, +    }, +    , +    public static Function<Runnable, Runnable> getScheduleHandler() {, +        return onScheduleHandler;, +    }, +    public static Function<Scheduler, Scheduler> getSingleSchedulerHandler() {, +        return onSingleHandler;, +    }, +    @SuppressWarnings({ "rawtypes", "unchecked" }), +    public static <T> Function<Subscriber<T>, Subscriber<T>> getSubscribeHandler() {, +        return (Function)onSubscribeHandler;, +    }, +    , +    public static Scheduler initComputationScheduler(Scheduler defaultScheduler) {, +        return onInitComputationHandler.apply(defaultScheduler);, +    }, +, +    public static Scheduler initIOScheduler(Scheduler defaultScheduler) {, +        return onInitIOHandler.apply(defaultScheduler);, +    }, +, +    public static Scheduler initSingleScheduler(Scheduler defaultScheduler) {, +        return onInitSingleHandler.apply(defaultScheduler);, +    }, +, +    public static Scheduler onComputationScheduler(Scheduler defaultScheduler) {, +        return onComputationHandler.apply(defaultScheduler);, +    }, +    @SuppressWarnings({ "unchecked", "rawtypes"}), +        return (Publisher)((Function)onCreateHandler).apply(publisher);, +    }, +    /**, +     * Called when an undeliverable error occurs., +     * @param error the error to report, +     */, +    public static void onError(Throwable error) {, +        try {, +            errorHandler.accept(error);, +        } catch (Throwable e) {, +            error.addSuppressed(e);, +            DEFAULT_ERROR_HANDLER.accept(e);, +        }, +    }, +    , +    public static Scheduler onIOScheduler(Scheduler defaultScheduler) {, +        return onIOHandler.apply(defaultScheduler);, +        return onScheduleHandler.apply(run);, +        return onSingleHandler.apply(defaultScheduler);, +    /**]