[+++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, +in `Observable[T]`private to the Scala bindings package., +, +Observer, +--------, +While *technically* it is a breaking change to make the companion object `Observer` and the `asJavaObserver` property, +private, you should probably not have touched `asjavaObserver` in the first place.In the future we may make the, +`Observer` companion object public and add overloads that take functions corresponding to the `Observer` methods., +, +Observable, +----------, +, +Just like for `Observer`, the `Observable` trait now also hides its `asJavaObservable` property and makes the constructor, +function in the companion object that takes an `rx.Observable` private (but leaves the companion object itself public)., +Again, while *technically* this is a breaking change, this should not have any influence on user code., +   private [scala] def asJavaObservable: rx.Observable[_ <: T], +object Observable {, +   private [scala] def apply[T](observable: rx.Observable[_ <: T]): Observable[T] = {...}, +Subject, +-------, +++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, +in `Observable[T]`private to the Scala bindings package., +, +Observer, +--------, +While *technically* it is a breaking change to make the companion object `Observer` and the `asJavaObserver` property, +private, you should probably not have touched `asjavaObserver` in the first place.In the future we may make the, +`Observer` companion object public and add overloads that take functions corresponding to the `Observer` methods., +, +Observable, +----------, +, +Just like for `Observer`, the `Observable` trait now also hides its `asJavaObservable` property and makes the constructor, +function in the companion object that takes an `rx.Observable` private (but leaves the companion object itself public)., +Again, while *technically* this is a breaking change, this should not have any influence on user code., +   private [scala] def asJavaObservable: rx.Observable[_ <: T], +object Observable {, +   private [scala] def apply[T](observable: rx.Observable[_ <: T]): Observable[T] = {...}, +Subject, +-------, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  private [scala] def asJavaObservable: rx.Observable[_ <: T]]