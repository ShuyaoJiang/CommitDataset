[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationConcat;, +import rx.operators.OperationFilter;, +import rx.operators.OperationLast;, +import rx.operators.OperationMap;, +import rx.operators.OperationMaterialize;, +import rx.operators.OperationMerge;, +import rx.operators.OperationMergeDelayError;, +import rx.operators.OperationNext;, +import rx.operators.OperationOnErrorResumeNextViaFunction;, +import rx.operators.OperationOnErrorResumeNextViaObservable;, +import rx.operators.OperationOnErrorReturn;, +import rx.operators.OperationScan;, +import rx.operators.OperationSkip;, +import rx.operators.OperationSynchronize;, +import rx.operators.OperationTake;, +import rx.operators.OperationTakeLast;, +import rx.operators.OperationToObservableFuture;, +import rx.operators.OperationToObservableIterable;, +import rx.operators.OperationToObservableList;, +import rx.operators.OperationToObservableSortedList;, +import rx.operators.OperationZip;, +, +        return new Iterable<T>() {, +            @Override, +            public Iterator<T> iterator() {, +                return getIterator(that);, +            }, +        };, +    }, +, +    /**, +     * Returns an iterator that iterates all values of the observable., +     *, +     * @param that an observable sequence to get an iterator for., +     * @param <T> the type of source., +     * @return the iterator that could be used to iterate over the elements of the observable., +     */, +    public static <T> Iterator<T> getIterator(Observable<T> that) {, +        return new Iterator<T>() {, +     * Returns an iterator that iterates all values of the observable., +     *, +     * @return the iterator that could be used to iterate over the elements of the observable., +     */, +    public Iterator<T> getIterator() {, +        return getIterator(this);, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationConcat;, +import rx.operators.OperationFilter;, +import rx.operators.OperationLast;, +import rx.operators.OperationMap;, +import rx.operators.OperationMaterialize;, +import rx.operators.OperationMerge;, +import rx.operators.OperationMergeDelayError;, +import rx.operators.OperationNext;, +import rx.operators.OperationOnErrorResumeNextViaFunction;, +import rx.operators.OperationOnErrorResumeNextViaObservable;, +import rx.operators.OperationOnErrorReturn;, +import rx.operators.OperationScan;, +import rx.operators.OperationSkip;, +import rx.operators.OperationSynchronize;, +import rx.operators.OperationTake;, +import rx.operators.OperationTakeLast;, +import rx.operators.OperationToObservableFuture;, +import rx.operators.OperationToObservableIterable;, +import rx.operators.OperationToObservableList;, +import rx.operators.OperationToObservableSortedList;, +import rx.operators.OperationZip;, +, +        return new Iterable<T>() {, +            @Override, +            public Iterator<T> iterator() {, +                return getIterator(that);, +            }, +        };, +    }, +, +    /**, +     * Returns an iterator that iterates all values of the observable., +     *, +     * @param that an observable sequence to get an iterator for., +     * @param <T> the type of source., +     * @return the iterator that could be used to iterate over the elements of the observable., +     */, +    public static <T> Iterator<T> getIterator(Observable<T> that) {, +        return new Iterator<T>() {, +     * Returns an iterator that iterates all values of the observable., +     *, +     * @return the iterator that could be used to iterate over the elements of the observable., +     */, +    public Iterator<T> getIterator() {, +        return getIterator(this);, +    }, +, +    /**, +++ /dev/null]