[+++ b/src/main/java/io/reactivex/Maybe.java, +     * Mirrors the MaybeSource (current or provided) that first signals an event., +     * <p>, +     * <img width="640" height="385" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/amb.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code amb} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param other, +     *            a MaybeSource competing to react first, +     * @return a Maybe that emits the same sequence as whichever of the source MaybeSources first, +     *         signalled, +     * @see <a href="http://reactivex.io/documentation/operators/amb.html">ReactiveX operators documentation: Amb</a>, +     */, +    @SuppressWarnings("unchecked"), +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Maybe<T> ambWith(MaybeSource<? extends T> other) {, +        ObjectHelper.requireNonNull(other, "other is null");, +        return ambArray(this, other);, +    }, +, +    /**, +    public final T blockingGet() {, +    public final T blockingGet(T defaultValue) {, +     * Returns a Maybe that subscribes to this Maybe lazily, caches its event, +     * and replays it, to all the downstream subscribers., +     * <p>, +     * <img width="640" height="410" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/cache.png" alt="">, +     * <p>, +     * The operator subscribes only when the first downstream subscriber subscribes and maintains, +     * a single subscription towards this Maybe., +     * <p>, +     * <em>Note:</em> You sacrifice the ability to unsubscribe from the origin when you use the {@code cache}., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code cache} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @return a Flowable that, when first subscribed to, caches all of its items and notifications for the, +     *         benefit of subsequent subscribers, +     * @see <a href="http://reactivex.io/documentation/operators/replay.html">ReactiveX operators documentation: Replay</a>, +     */, +    @BackpressureSupport(BackpressureKind.FULL), +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Maybe<T> cache() {, +        return new MaybeCache<T>(this);, +    }, +, +    /**, +, +    /**, +     * Returns a Flowable that emits the items emitted from the current MaybeSource, then the next, one after, +     * the other, without interleaving them., +     * <p>, +     * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concat.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator honors backpressure from downstream.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concat} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param other, +     *            a MaybeSource to be concatenated after the current, +     * @return a Flowable that emits items emitted by the two source MaybeSources, one after the other,, +     *         without interleaving them, +     * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>, +     */, +    @BackpressureSupport(BackpressureKind.FULL), +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Flowable<T> concatWith(MaybeSource<? extends T> other) {, +        ObjectHelper.requireNonNull(other, "other is null");, +        return concat(this, other);, +    }, +, +    /**, +     * Returns a Single that emits a Boolean that indicates whether the source Publisher emitted a, +     * specified item., +     * <p>, +     * <img width="640" height="320" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/contains.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code contains} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param item, +     *            the item to search for in the emissions from the source Maybe, not null, +     * @return a Single that emits {@code true} if the specified item is emitted by the source Maybe,, +     *         or {@code false} if the source Maybe completes without emitting that item, +     * @see <a href="http://reactivex.io/documentation/operators/contains.html">ReactiveX operators documentation: Contains</a>, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Single<Boolean> contains(final Object item) {, +        ObjectHelper.requireNonNull(item, "item is null");, +        return RxJavaPlugins.onAssembly(new MaybeContains<T>(this, item));, +    }, +, +    /**, +     * Returns a Maybe that counts the total number of items emitted (0 or 1) by the source Maybe and emits]