[+++ b/src/main/java/io/reactivex/Flowable.java, +    public final <R> Flowable<R> compose(FlowableTransformer<T, R> composer) {, +        return lift(new FlowableOperator<T, T>() {, +    public final <R> Flowable<R> lift(FlowableOperator<? extends R, ? super T> lifter) {, +        return lift(new FlowableOperator<T, T>() {, +++ b/src/main/java/io/reactivex/Flowable.java, +    public final <R> Flowable<R> compose(FlowableTransformer<T, R> composer) {, +        return lift(new FlowableOperator<T, T>() {, +    public final <R> Flowable<R> lift(FlowableOperator<? extends R, ? super T> lifter) {, +        return lift(new FlowableOperator<T, T>() {, +++ b/src/main/java/io/reactivex/FlowableOperator.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex;, +, +import org.reactivestreams.Subscriber;, +, +import io.reactivex.functions.Function;, +, +/**, + * Interface to map/wrap a downstream subscriber to an upstream subscriber., + *, + * @param <Downstream> the value type of the downstream, + * @param <Upstream> the value type of the upstream, + */, +public interface FlowableOperator<Downstream, Upstream> extends Function<Subscriber<? super Downstream>, Subscriber<? super Upstream>> {, +, +}, +++ b/src/main/java/io/reactivex/Flowable.java, +    public final <R> Flowable<R> compose(FlowableTransformer<T, R> composer) {, +        return lift(new FlowableOperator<T, T>() {, +    public final <R> Flowable<R> lift(FlowableOperator<? extends R, ? super T> lifter) {, +        return lift(new FlowableOperator<T, T>() {, +++ b/src/main/java/io/reactivex/FlowableOperator.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex;, +, +import org.reactivestreams.Subscriber;, +, +import io.reactivex.functions.Function;, +, +/**, + * Interface to map/wrap a downstream subscriber to an upstream subscriber., + *, + * @param <Downstream> the value type of the downstream, + * @param <Upstream> the value type of the upstream, + */, +public interface FlowableOperator<Downstream, Upstream> extends Function<Subscriber<? super Downstream>, Subscriber<? super Upstream>> {, +, +}, +++ b/src/main/java/io/reactivex/FlowableTransformer.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex;, +, +import org.reactivestreams.Publisher;, +, +import io.reactivex.functions.Function;, +, +/**, + * Interface to compose observables., + *, + * @param <T> the upstream value type, + * @param <R> the downstream value type, + */, +public interface FlowableTransformer<T, R> extends Function<Flowable<T>, Publisher<? extends R>> {]