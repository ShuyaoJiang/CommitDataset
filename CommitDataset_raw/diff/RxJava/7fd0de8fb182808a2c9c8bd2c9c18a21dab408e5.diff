[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val sharedNumbers = numbers.replay, +    sharedNumbers.connect, +  @Test def exampleWithReplay2() {, +    val numbers = Observable.interval(100 millis).take(10), +    val sharedNumbers = numbers.replay(3), +    sharedNumbers.subscribe(n => println(s"subscriber 1 gets $n")), +    sharedNumbers.connect, +    // subscriber 2 subscribes later but only gets the 3 buffered numbers and the following numbers, +    Thread.sleep(700), +    sharedNumbers.subscribe(n => println(s"subscriber 2 gets $n")), +    waitFor(sharedNumbers), +  }, +, +  @Test def exampleWithReplay3() {, +    val numbers = Observable.interval(100 millis).take(10), +    val sharedNumbers = numbers.replay(300 millis), +    sharedNumbers.subscribe(n => println(s"subscriber 1 gets $n")), +    sharedNumbers.connect, +    // subscriber 2 subscribes later but only gets the buffered numbers and the following numbers, +    Thread.sleep(700), +    sharedNumbers.subscribe(n => println(s"subscriber 2 gets $n")), +    waitFor(sharedNumbers), +  }, +, +  @Test def exampleWithReplay4() {, +    val numbers = Observable.interval(100 millis).take(10), +    val sharedNumbers = numbers.replay(2, 300 millis), +    sharedNumbers.subscribe(n => println(s"subscriber 1 gets $n")), +    sharedNumbers.connect, +    // subscriber 2 subscribes later but only gets the buffered numbers and the following numbers, +    Thread.sleep(700), +    sharedNumbers.subscribe(n => println(s"subscriber 2 gets $n")), +    waitFor(sharedNumbers), +  }, +, +  @Test def exampleWithReplay5() {, +    val numbers = Observable.interval(100 millis).take(10), +    val sharedNumbers = numbers.replay[Long, Long]((o: Observable[Long]) => o.map(_ * 2)), +    sharedNumbers.subscribe(n => println(s"subscriber gets $n")), +    waitFor(sharedNumbers), +  }, +, +  @Test def multicastExample1(): Unit = {, +    val unshared = Observable.from(1 to 4), +    val shared = unshared.multicast(Subject()), +    shared.subscribe(n => println(s"subscriber 1 gets $n")), +    shared.subscribe(n => println(s"subscriber 2 gets $n")), +    shared.connect, +  }, +, +  @Test def multicastExample2(): Unit = {, +    val unshared = Observable.from(1 to 4), +    val shared = unshared.multicast[Int, String](() => Subject(), o => o.map("No. " + _)), +    shared.subscribe(n => println(s"subscriber 1 gets $n")), +    shared.subscribe(n => println(s"subscriber 2 gets $n")), +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val sharedNumbers = numbers.replay, +    sharedNumbers.connect, +  @Test def exampleWithReplay2() {, +    val numbers = Observable.interval(100 millis).take(10), +    val sharedNumbers = numbers.replay(3), +    sharedNumbers.subscribe(n => println(s"subscriber 1 gets $n")), +    sharedNumbers.connect, +    // subscriber 2 subscribes later but only gets the 3 buffered numbers and the following numbers, +    Thread.sleep(700), +    sharedNumbers.subscribe(n => println(s"subscriber 2 gets $n")), +    waitFor(sharedNumbers), +  }, +, +  @Test def exampleWithReplay3() {, +    val numbers = Observable.interval(100 millis).take(10), +    val sharedNumbers = numbers.replay(300 millis), +    sharedNumbers.subscribe(n => println(s"subscriber 1 gets $n")), +    sharedNumbers.connect, +    // subscriber 2 subscribes later but only gets the buffered numbers and the following numbers, +    Thread.sleep(700), +    sharedNumbers.subscribe(n => println(s"subscriber 2 gets $n")), +    waitFor(sharedNumbers), +  }, +, +  @Test def exampleWithReplay4() {, +    val numbers = Observable.interval(100 millis).take(10), +    val sharedNumbers = numbers.replay(2, 300 millis), +    sharedNumbers.subscribe(n => println(s"subscriber 1 gets $n")), +    sharedNumbers.connect, +    // subscriber 2 subscribes later but only gets the buffered numbers and the following numbers, +    Thread.sleep(700), +    sharedNumbers.subscribe(n => println(s"subscriber 2 gets $n")), +    waitFor(sharedNumbers), +  }, +, +  @Test def exampleWithReplay5() {, +    val numbers = Observable.interval(100 millis).take(10), +    val sharedNumbers = numbers.replay[Long, Long]((o: Observable[Long]) => o.map(_ * 2)), +    sharedNumbers.subscribe(n => println(s"subscriber gets $n")), +    waitFor(sharedNumbers), +  }]