[+++ b/src/main/java/io/reactivex/processors/UnicastProcessor.java, +     * @param onCancelled the non null callback, +     * @param onTerminate the callback to run when the Processor is terminated or cancelled, null not allowed, +        if (t == null) {, +            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));, +            return;, +        }, +, +        if (t == null) {, +            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +        }, +, +++ b/src/main/java/io/reactivex/processors/UnicastProcessor.java, +     * @param onCancelled the non null callback, +     * @param onTerminate the callback to run when the Processor is terminated or cancelled, null not allowed, +        if (t == null) {, +            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));, +            return;, +        }, +, +        if (t == null) {, +            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +        }, +, +++ b/src/main/java/io/reactivex/subjects/UnicastSubject.java, +     * @param onCancelled the non null callback, +     * @param onTerminate the callback to run when the Processor is terminated or cancelled, null not allowed, +++ b/src/main/java/io/reactivex/processors/UnicastProcessor.java, +     * @param onCancelled the non null callback, +     * @param onTerminate the callback to run when the Processor is terminated or cancelled, null not allowed, +        if (t == null) {, +            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));, +            return;, +        }, +, +        if (t == null) {, +            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +        }, +, +++ b/src/main/java/io/reactivex/subjects/UnicastSubject.java, +     * @param onCancelled the non null callback, +     * @param onTerminate the callback to run when the Processor is terminated or cancelled, null not allowed, +++ b/src/test/java/io/reactivex/processors/UnicastProcessorTest.java, +import static org.junit.Assert.assertEquals;, +, +import java.util.concurrent.atomic.AtomicBoolean;, +import io.reactivex.observers.*;, +import io.reactivex.*;, +import io.reactivex.disposables.*;, +    }, +, +    @Test, +    public void onTerminateCalledWhenOnError() {, +        final AtomicBoolean didRunOnTerminate = new AtomicBoolean();, +, +        UnicastProcessor<Integer> us = UnicastProcessor.create(Observable.bufferSize(), new Runnable() {, +            @Override public void run() {, +                didRunOnTerminate.set(true);, +            }, +        });, +, +        assertEquals(false, didRunOnTerminate.get());, +        us.onError(new RuntimeException("some error"));, +        assertEquals(true, didRunOnTerminate.get());, +    }, +, +    @Test, +    public void onTerminateCalledWhenOnComplete() {, +        final AtomicBoolean didRunOnTerminate = new AtomicBoolean();, +, +        UnicastProcessor<Integer> us = UnicastProcessor.create(Observable.bufferSize(), new Runnable() {, +            @Override public void run() {, +                didRunOnTerminate.set(true);, +            }, +        });, +, +        assertEquals(false, didRunOnTerminate.get());, +        us.onComplete();, +        assertEquals(true, didRunOnTerminate.get());, +    }, +, +    @Test, +    public void onTerminateCalledWhenCanceled() {, +        final AtomicBoolean didRunOnTerminate = new AtomicBoolean();, +, +        UnicastProcessor<Integer> us = UnicastProcessor.create(Observable.bufferSize(), new Runnable() {, +            @Override public void run() {, +                didRunOnTerminate.set(true);, +            }, +        });, +, +        final Disposable subscribe = us.subscribe();, +, +        assertEquals(false, didRunOnTerminate.get());, +        subscribe.dispose();, +        assertEquals(true, didRunOnTerminate.get());, +    }, +, +    @Test(expected = NullPointerException.class), +    public void nullOnTerminate() {]