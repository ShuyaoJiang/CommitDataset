[+++ b/src/main/java/io/reactivex/internal/operators/CachedObservable.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {, +            if (!cancelled) {, +++ b/src/main/java/io/reactivex/internal/operators/CachedObservable.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {, +            if (!cancelled) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorSkipUntil.java, +import io.reactivex.internal.subscriptions.*;, +                if (SubscriptionHelper.validateSubscription(this.s, s)) {, +                } else {, +                    serial.onError(t);, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +++ b/src/main/java/io/reactivex/internal/operators/CachedObservable.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {, +            if (!cancelled) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorSkipUntil.java, +import io.reactivex.internal.subscriptions.*;, +                if (SubscriptionHelper.validateSubscription(this.s, s)) {, +                } else {, +                    serial.onError(t);, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorTakeUntil.java, +import io.reactivex.internal.subscriptions.*;, +                } else {, +                    serial.onComplete();, +                } else {, +                    serial.onError(t);, +                } else {, +                    serial.onComplete();, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +++ b/src/main/java/io/reactivex/internal/operators/CachedObservable.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {, +            if (!cancelled) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorSkipUntil.java, +import io.reactivex.internal.subscriptions.*;, +                if (SubscriptionHelper.validateSubscription(this.s, s)) {, +                } else {, +                    serial.onError(t);, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorTakeUntil.java, +import io.reactivex.internal.subscriptions.*;, +                } else {, +                    serial.onComplete();, +                } else {, +                    serial.onError(t);, +                } else {, +                    serial.onComplete();, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +++ b/src/test/java/io/reactivex/internal/operators/BufferUntilSubscriberTest.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.*;, +, +import org.junit.*;, +, +import io.reactivex.Observable;, +import io.reactivex.schedulers.Schedulers;, +import io.reactivex.subjects.PublishSubject;, +, +public class BufferUntilSubscriberTest {, +, +    @Test, +    public void testIssue1677() throws InterruptedException {, +        final AtomicLong counter = new AtomicLong();, +        final Integer[] numbers = new Integer[5000];, +        for (int i = 0; i < numbers.length; i++), +            numbers[i] = i + 1;, +        final int NITERS = 250;, +        final CountDownLatch latch = new CountDownLatch(NITERS);, +        for (int iters = 0; iters < NITERS; iters++) {, +            final CountDownLatch innerLatch = new CountDownLatch(1);, +            final PublishSubject<Void> s = PublishSubject.create();, +            final AtomicBoolean completed = new AtomicBoolean();, +            Observable.fromArray(numbers), +                    .takeUntil(s), +                    .window(50), +                    .flatMap(integerObservable -> {, +                            return integerObservable, +                                    .subscribeOn(Schedulers.computation()), +                                    .map(integer -> {, +                                            if (integer >= 5 && completed.compareAndSet(false, true)) {, +                                                s.onComplete();]