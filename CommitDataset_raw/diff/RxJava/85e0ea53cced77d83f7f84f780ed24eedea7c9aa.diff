[+++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +    final AtomicReference<Throwable> terminalEvent;, +        this.terminalEvent = new AtomicReference<Throwable>();, +            Throwable ex = terminalEvent.get();, +            if (ex == ExceptionHelper.TERMINATED) {, +                s.onError(ex);, +        if (terminalEvent.get() != null) {, +        if (terminalEvent.get() != null) {, +        if (!terminalEvent.compareAndSet(null, t)) {, +        if (!terminalEvent.compareAndSet(null, ExceptionHelper.TERMINATED)) {, +++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +    final AtomicReference<Throwable> terminalEvent;, +        this.terminalEvent = new AtomicReference<Throwable>();, +            Throwable ex = terminalEvent.get();, +            if (ex == ExceptionHelper.TERMINATED) {, +                s.onError(ex);, +        if (terminalEvent.get() != null) {, +        if (terminalEvent.get() != null) {, +        if (!terminalEvent.compareAndSet(null, t)) {, +        if (!terminalEvent.compareAndSet(null, ExceptionHelper.TERMINATED)) {, +++ b/src/main/java/io/reactivex/subjects/BehaviorSubject.java, +    final AtomicReference<Throwable> terminalEvent;, +        this.terminalEvent = new AtomicReference<Throwable>();, +            Throwable ex = terminalEvent.get();, +            if (ex == ExceptionHelper.TERMINATED) {, +                observer.onError(ex);, +        if (terminalEvent.get() != null) {, +        if (terminalEvent.get() != null) {, +        if (!terminalEvent.compareAndSet(null, t)) {, +        if (!terminalEvent.compareAndSet(null, ExceptionHelper.TERMINATED)) {, +++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +    final AtomicReference<Throwable> terminalEvent;, +        this.terminalEvent = new AtomicReference<Throwable>();, +            Throwable ex = terminalEvent.get();, +            if (ex == ExceptionHelper.TERMINATED) {, +                s.onError(ex);, +        if (terminalEvent.get() != null) {, +        if (terminalEvent.get() != null) {, +        if (!terminalEvent.compareAndSet(null, t)) {, +        if (!terminalEvent.compareAndSet(null, ExceptionHelper.TERMINATED)) {, +++ b/src/main/java/io/reactivex/subjects/BehaviorSubject.java, +    final AtomicReference<Throwable> terminalEvent;, +        this.terminalEvent = new AtomicReference<Throwable>();, +            Throwable ex = terminalEvent.get();, +            if (ex == ExceptionHelper.TERMINATED) {, +                observer.onError(ex);, +        if (terminalEvent.get() != null) {, +        if (terminalEvent.get() != null) {, +        if (!terminalEvent.compareAndSet(null, t)) {, +        if (!terminalEvent.compareAndSet(null, ExceptionHelper.TERMINATED)) {, +++ b/src/test/java/io/reactivex/processors/BehaviorProcessorTest.java, +, +    @Test, +    public void completeSubscribeRace() throws Exception {, +        for (int i = 0; i < 1000; i++) {, +            final BehaviorProcessor<Object> p = BehaviorProcessor.create();, +, +            final TestSubscriber<Object> ts = new TestSubscriber<Object>();, +, +            Runnable r1 = new Runnable() {, +                @Override, +                public void run() {, +                    p.subscribe(ts);, +                }, +            };, +, +            Runnable r2 = new Runnable() {, +                @Override, +                public void run() {, +                    p.onComplete();, +                }, +            };, +, +            TestHelper.race(r1, r2);, +, +            ts.assertResult();, +        }, +    }, +, +    @Test, +    public void errorSubscribeRace() throws Exception {, +        for (int i = 0; i < 1000; i++) {, +            final BehaviorProcessor<Object> p = BehaviorProcessor.create();, +, +            final TestSubscriber<Object> ts = new TestSubscriber<Object>();, +, +            final TestException ex = new TestException();, +, +            Runnable r1 = new Runnable() {, +                @Override, +                public void run() {, +                    p.subscribe(ts);, +                }, +            };, +, +            Runnable r2 = new Runnable() {, +                @Override, +                public void run() {, +                    p.onError(ex);, +                }]