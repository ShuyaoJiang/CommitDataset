[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorAll;, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorAll;, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorAll;, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorAll.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observable.Operator;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Func1;, +public final class OperatorAll<T> implements Operator<Boolean, T> {, +        Subscriber s = new Subscriber<T>() {, +            boolean done;, +            public void onNext(T t) {, +                boolean result = predicate.call(t);, +                if (!result && !done) {, +                    done = true;, +                    child.onNext(false);, +                    unsubscribe();, +                }, +            public void onCompleted() {, +                if (!done) {, +                    done = true;, +                    child.onNext(true);, +        child.add(s);, +        return s;, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorAll;, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorAll.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observable.Operator;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Func1;, +public final class OperatorAll<T> implements Operator<Boolean, T> {, +        Subscriber s = new Subscriber<T>() {, +            boolean done;, +            public void onNext(T t) {, +                boolean result = predicate.call(t);, +                if (!result && !done) {, +                    done = true;, +                    child.onNext(false);, +                    unsubscribe();, +                }, +            public void onCompleted() {, +                if (!done) {, +                    done = true;, +                    child.onNext(true);, +        child.add(s);, +        return s;, +++ b/rxjava-core/src/test/java/rx/operators/OperatorAllTest.java, +        Observable<String> obs = Observable.from("one", "two", "six");, +        obs.all(new Func1<String, Boolean>() {, +            @Override, +            public Boolean call(String s) {, +                return s.length() == 3;, +            }, +        }).subscribe(observer);, +        Observable<String> obs = Observable.from("one", "two", "three", "six");, +        obs.all(new Func1<String, Boolean>() {, +            @Override]