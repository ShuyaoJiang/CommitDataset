[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationGroupBy;, +import rx.operators.OperationToFuture;, +     * @param subject, +     *            the subject to push source elements into., +     * @param <R>, +     *            result type, +     * Return a Future representing a single value of the Observable., +     * <p>, +     * This will throw an exception if the Observable emits more than 1 value. If more than 1 are expected then use <code>toList().toFuture()</code>., +     * , +     * @param that, +     *            the source Observable, +     * @returna Future that expects a single item emitted by the source Observable, +     */, +    public static <T> Future<T> toFuture(final Observable<T> that) {, +        return OperationToFuture.toFuture(that);, +    }, +, +    /**, +     * @param source, +     *            the source sequence whose elements will be pushed into the specified subject., +     * @param subject, +     *            the subject to push source elements into., +     * @param <T>, +     *            source type, +     * @param <R>, +     *            result type, +     * Return a Future representing a single value of the Observable., +     * <p>, +     * This will throw an exception if the Observable emits more than 1 value. If more than 1 are expected then use <code>toList().toFuture()</code>., +     * , +     * @returna Future that expects a single item emitted by the source Observable, +     */, +    public Future<T> toFuture() {, +        return toFuture(this);, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationGroupBy;, +import rx.operators.OperationToFuture;, +     * @param subject, +     *            the subject to push source elements into., +     * @param <R>, +     *            result type, +     * Return a Future representing a single value of the Observable., +     * <p>, +     * This will throw an exception if the Observable emits more than 1 value. If more than 1 are expected then use <code>toList().toFuture()</code>., +     * , +     * @param that, +     *            the source Observable, +     * @returna Future that expects a single item emitted by the source Observable, +     */, +    public static <T> Future<T> toFuture(final Observable<T> that) {, +        return OperationToFuture.toFuture(that);, +    }, +, +    /**, +     * @param source, +     *            the source sequence whose elements will be pushed into the specified subject., +     * @param subject, +     *            the subject to push source elements into., +     * @param <T>, +     *            source type, +     * @param <R>, +     *            result type, +     * Return a Future representing a single value of the Observable., +     * <p>, +     * This will throw an exception if the Observable emits more than 1 value. If more than 1 are expected then use <code>toList().toFuture()</code>., +     * , +     * @returna Future that expects a single item emitted by the source Observable, +     */, +    public Future<T> toFuture() {, +        return toFuture(this);, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationToFuture.java, +package rx.operators;, +, +import static org.junit.Assert.*;, +, +import java.util.List;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +import java.util.concurrent.atomic.AtomicReference;, +, +import org.junit.Test;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Func1;, +, +/**]