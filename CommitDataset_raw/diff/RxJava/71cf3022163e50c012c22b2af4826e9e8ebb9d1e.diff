[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def toMultimapExample1(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol", "allen", "clarke").toObservable, +    val keySelector = (s: String) => s.head, +    val m = o.toMultimap(keySelector), +    println(m.toBlocking.single.mapValues(_.toList)), +  }, +, +  @Test def toMultimapExample2(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol", "allen", "clarke").toObservable, +    val keySelector = (s: String) => s.head, +    val valueSelector = (s: String) => s.tail, +    val m = o.toMultimap(keySelector, valueSelector), +    println(m.toBlocking.single.mapValues(_.toList)), +  }, +, +  @Test def toMultimapExample3(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol", "allen", "clarke").toObservable, +    val keySelector = (s: String) => s.head, +    val valueSelector = (s: String) => s.tail, +    val mapFactory = () => Map('d' -> List("oug")), +    val m = o.toMultimap(keySelector, valueSelector, mapFactory), +    println(m.toBlocking.single.mapValues(_.toList)), +  }, +, +  @Test def toMultimapExample4(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol", "allen", "clarke").toObservable, +    val keySelector = (s: String) => s.head, +    val valueSelector = (s: String) => s.tail, +    val mapFactory = () => Map('d' -> List("oug")), +    val valueFactor = (k: Char) => List[String](), +    val m = o.toMultimap(keySelector, valueSelector, mapFactory, valueFactor), +    println(m.toBlocking.single), +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def toMultimapExample1(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol", "allen", "clarke").toObservable, +    val keySelector = (s: String) => s.head, +    val m = o.toMultimap(keySelector), +    println(m.toBlocking.single.mapValues(_.toList)), +  }, +, +  @Test def toMultimapExample2(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol", "allen", "clarke").toObservable, +    val keySelector = (s: String) => s.head, +    val valueSelector = (s: String) => s.tail, +    val m = o.toMultimap(keySelector, valueSelector), +    println(m.toBlocking.single.mapValues(_.toList)), +  }, +, +  @Test def toMultimapExample3(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol", "allen", "clarke").toObservable, +    val keySelector = (s: String) => s.head, +    val valueSelector = (s: String) => s.tail, +    val mapFactory = () => Map('d' -> List("oug")), +    val m = o.toMultimap(keySelector, valueSelector, mapFactory), +    println(m.toBlocking.single.mapValues(_.toList)), +  }, +, +  @Test def toMultimapExample4(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol", "allen", "clarke").toObservable, +    val keySelector = (s: String) => s.head, +    val valueSelector = (s: String) => s.tail, +    val mapFactory = () => Map('d' -> List("oug")), +    val valueFactor = (k: Char) => List[String](), +    val m = o.toMultimap(keySelector, valueSelector, mapFactory, valueFactor), +    println(m.toBlocking.single), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +, +  /**, +   * Returns an Observable that emits a single `Map` that contains an `Seq` of items emitted by the, +   * source Observable keyed by a specified keySelector` function., +   *, +   * <img width="640" height="305" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/toMultiMap.png">, +   *, +   * @param keySelector the function that extracts the key from the source items to be used as key in the HashMap, +   * @return an Observable that emits a single item: a `Map` that contains an `Seq` of items mapped from, +   *         the source Observable, +   */, +  def toMultimap[K](keySelector: T => K): Observable[Map[K, Seq[T]]] = {, +    val thisJava = asJavaObservable.asInstanceOf[rx.Observable[T]], +    val o: rx.Observable[java.util.Map[K, java.util.Collection[T]]] = thisJava.toMultimap[K](keySelector), +    toScalaObservable[java.util.Map[K, java.util.Collection[T]]](o).map(m => m.toMap.mapValues(_.toSeq)), +  }, +, +  /**, +   * Returns an Observable that emits a single `Map` that contains an `Seq` of values extracted by a, +   * specified `valueSelector` function from items emitted by the source Observable, keyed by a, +   * specified `keySelector` function., +   *, +   * <img width="640" height="305" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/toMultiMap.png">, +   *, +   * @param keySelector the function that extracts a key from the source items to be used as key in the HashMap, +   * @param valueSelector the function that extracts a value from the source items to be used as value in the HashMap, +   * @return an Observable that emits a single item: a `Map` that contains an `Seq` of items mapped from, +   *         the source Observable, +   */]