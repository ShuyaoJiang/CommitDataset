[+++ b/src/main/java/io/reactivex/CompletableSubscriber.java, +/**, + * Copyright 2016 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +++ b/src/main/java/io/reactivex/CompletableSubscriber.java, +/**, + * Copyright 2016 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +++ b/src/main/java/io/reactivex/Single.java, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.subscribers.single.*;, +        return new SingleAmbIterable<T>(sources);, +        return new SingleAmbArray<T>(sources);, +    public static <T> Flowable<T> concat(Flowable<? extends SingleConsumable<? extends T>> sources) { // FIXME Publisher, +        return new SingleDefer<T>(singleSupplier);, +        return new SingleError<T>(errorSupplier);, +        return new SingleFromCallable<T>(callable);, +        return new SingleFromPublisher<T>(publisher);, +        return new SingleJust<T>(value);, +    public static <T> Flowable<T> merge(Flowable<? extends SingleConsumable<? extends T>> sources) { // FIXME Publisher, +        return new SingleFlatMap<SingleConsumable<? extends T>, T>(source, (Function)Functions.identity());, +    static final Single<Object> NEVER = new SingleNever<Object>();, +        return new SingleTimer(delay, unit, scheduler);, +        return new SingleEquals<T>(first, second);, +        return new SingleUsing<T, U>(resourceSupplier, singleFunction, disposer, eager);, +        return new SingleHide<T>(this);, +        return new SingleCache<T>(this);, +        return map(new Function<T, U>() {, +            public U apply(T v) {, +                return clazz.cast(v);, +        return new SingleDelay<T>(this, time, unit, scheduler);, +        return new SingleDoOnSubscribe<T>(this, onSubscribe);, +        return new SingleDoOnSuccess<T>(this, onSuccess);, +        return new SingleDoOnError<T>(this, onError);, +        return new SingleDoOnCancel<T>(this, onCancel);, +        return new SingleFlatMap<T, R>(this, mapper);, +        return SingleAwait.get(this);, +        return new SingleLift<T, R>(this, onLift);, +        return new SingleMap<T, R>(this, mapper);, +        return new SingleContains<T>(this, value, comparer);, +        return new SingleObserveOn<T>(this, scheduler);, +        return new SingleOnErrorReturn<T>(this, valueSupplier, null);, +        return new SingleOnErrorReturn<T>(this, null, value);, +        return new SingleResumeNext<T>(this, nextFunction);, +        BiConsumerSingleSubscriber<T> s = new BiConsumerSingleSubscriber<T>(onCallback);, +        subscribe(s);, +        return s;, +        ConsumerSingleSubscriber<T> s = new ConsumerSingleSubscriber<T>(onSuccess, onError);, +        subscribe(s);, +        return s;, +        return new SingleSubscribeOn<T>(this, scheduler);, +        return new SingleTimeout<T>(this, timeout, unit, scheduler, other);, +++ b/src/main/java/io/reactivex/CompletableSubscriber.java, +/**, + * Copyright 2016 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +++ b/src/main/java/io/reactivex/Single.java, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.subscribers.single.*;, +        return new SingleAmbIterable<T>(sources);, +        return new SingleAmbArray<T>(sources);, +    public static <T> Flowable<T> concat(Flowable<? extends SingleConsumable<? extends T>> sources) { // FIXME Publisher, +        return new SingleDefer<T>(singleSupplier);, +        return new SingleError<T>(errorSupplier);, +        return new SingleFromCallable<T>(callable);, +        return new SingleFromPublisher<T>(publisher);, +        return new SingleJust<T>(value);, +    public static <T> Flowable<T> merge(Flowable<? extends SingleConsumable<? extends T>> sources) { // FIXME Publisher, +        return new SingleFlatMap<SingleConsumable<? extends T>, T>(source, (Function)Functions.identity());, +    static final Single<Object> NEVER = new SingleNever<Object>();]