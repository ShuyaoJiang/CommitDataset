[+++ b/src/main/java/io/reactivex/internal/schedulers/TrampolineScheduler.java, +        RxJavaPlugins.onSchedule(run).run();, +            RxJavaPlugins.onSchedule(run).run();, +++ b/src/main/java/io/reactivex/internal/schedulers/TrampolineScheduler.java, +        RxJavaPlugins.onSchedule(run).run();, +            RxJavaPlugins.onSchedule(run).run();, +++ b/src/test/java/io/reactivex/schedulers/AbstractSchedulerTests.java, +import io.reactivex.internal.functions.Functions;, +import io.reactivex.plugins.RxJavaPlugins;, +     *, +, +, +, +    private void assertRunnableDecorated(Runnable scheduleCall) throws InterruptedException {, +        try {, +            final CountDownLatch decoratedCalled = new CountDownLatch(1);, +, +            RxJavaPlugins.setScheduleHandler(new Function<Runnable, Runnable>() {, +                @Override, +                public Runnable apply(final Runnable actual) throws Exception {, +                    return new Runnable() {, +                        @Override, +                        public void run() {, +                            decoratedCalled.countDown();, +                            actual.run();, +                        }, +                    };, +                }, +            });, +, +            scheduleCall.run();, +, +            assertTrue(decoratedCalled.await(5, TimeUnit.SECONDS));, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }, +, +    @Test(timeout = 6000), +    public void scheduleDirectDecoratesRunnable() throws InterruptedException {, +        assertRunnableDecorated(new Runnable() {, +            @Override, +            public void run() {, +                getScheduler().scheduleDirect(Functions.EMPTY_RUNNABLE);, +            }, +        });, +    }, +, +    @Test(timeout = 6000), +    public void scheduleDirectWithDelayDecoratesRunnable() throws InterruptedException {, +        assertRunnableDecorated(new Runnable() {, +            @Override, +            public void run() {, +                getScheduler().scheduleDirect(Functions.EMPTY_RUNNABLE, 1, TimeUnit.MILLISECONDS);, +            }, +        });, +    }, +, +    @Test(timeout = 6000), +    public void schedulePeriodicallyDirectDecoratesRunnable() throws InterruptedException {, +        final Scheduler scheduler = getScheduler();, +        if (scheduler instanceof TrampolineScheduler) {, +            // Can't properly stop a trampolined periodic task., +            return;, +        }, +, +        final AtomicReference<Disposable> disposable = new AtomicReference<Disposable>();, +, +        try {, +            assertRunnableDecorated(new Runnable() {, +                @Override, +                public void run() {, +                    disposable.set(scheduler.schedulePeriodicallyDirect(Functions.EMPTY_RUNNABLE, 1, 10000, TimeUnit.MILLISECONDS));, +                }, +            });, +        } finally {, +            disposable.get().dispose();, +        }, +    }]