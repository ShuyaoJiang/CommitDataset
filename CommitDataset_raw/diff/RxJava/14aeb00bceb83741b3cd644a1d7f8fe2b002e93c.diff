[+++ b/src/main/java/rx/internal/operators/OperatorTake.java, +                        unsubscribe();, +                        if (!completed) {, +                    }, +++ b/src/main/java/rx/internal/operators/OperatorTake.java, +                        unsubscribe();, +                        if (!completed) {, +                    }, +++ b/src/test/java/rx/internal/operators/OperatorTakeTest.java, +import static org.junit.Assert.*;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.atomic.AtomicReference;, +    , +    @Test, +    public void testInterrupt() throws InterruptedException {, +        final AtomicReference<Object> exception = new AtomicReference<Object>();, +        final CountDownLatch latch = new CountDownLatch(1);, +        Observable.just(1).subscribeOn(Schedulers.computation()).take(1).subscribe(new Action1<Integer>() {, +, +            @Override, +            public void call(Integer t1) {, +                try {, +                    Thread.sleep(100);, +                } catch (Exception e) {, +                    exception.set(e);, +                    e.printStackTrace();, +                } finally {, +                    latch.countDown();, +                }, +            }, +, +        });, +, +        latch.await();, +        assertNull(exception.get());, +    }]