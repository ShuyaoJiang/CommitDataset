[+++ b/CHANGES.md, +See See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ b/CHANGES.md, +See See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> reduce(Observable<T> sequence, R initialValue, Func2<R, T, R> accumulator) {, +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> reduce(final Observable<T> sequence, final R initialValue, final Object accumulator) {, +        return reduce(sequence, initialValue, new Func2<R, T, R>() {, +            public R call(R r, T t) {, +                return (R) _f.call(r, t);, +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> scan(Observable<T> sequence, R initialValue, Func2<R, T, R> accumulator) {, +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> scan(final Observable<T> sequence, final R initialValue, final Object accumulator) {, +        return scan(sequence, initialValue, new Func2<R, T, R>() {, +            public R call(R r, T t) {, +                return (R) _f.call(r, t);, +     * @see #reduce(Func2), +     */, +    public Observable<T> aggregate(Func2<T, T, T> accumulator) {, +        return reduce(accumulator);, +    }, +    , +    /**, +     * @see #reduce(Object), +     */, +    public Observable<T> aggregate(Object accumulator) {, +        return reduce(accumulator);, +    }, +    , +    /**, +    public <R> Observable<R> reduce(R initialValue, Func2<R, T, R> accumulator) {, +     * @see #reduce(R, Func2), +     */, +    public <R> Observable<R> aggregate(R initialValue, Func2<R, T, R> accumulator) {, +        return reduce(initialValue, accumulator);, +    }, +, +    /**, +    public <R> Observable<R> reduce(R initialValue, Object accumulator) {, +     * @see #reduce(R, Object), +     */, +    public <R> Observable<R> aggregate(R initialValue, Object accumulator) {, +        return reduce(initialValue, accumulator);, +    }, +    , +    /**, +    public <R> Observable<R> scan(R initialValue, Func2<R, T, R> accumulator) {, +    public <R> Observable<R> scan(final R initialValue, final Object accumulator) {, +++ b/CHANGES.md, +See See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> reduce(Observable<T> sequence, R initialValue, Func2<R, T, R> accumulator) {, +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> reduce(final Observable<T> sequence, final R initialValue, final Object accumulator) {, +        return reduce(sequence, initialValue, new Func2<R, T, R>() {, +            public R call(R r, T t) {, +                return (R) _f.call(r, t);, +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> scan(Observable<T> sequence, R initialValue, Func2<R, T, R> accumulator) {, +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> scan(final Observable<T> sequence, final R initialValue, final Object accumulator) {, +        return scan(sequence, initialValue, new Func2<R, T, R>() {, +            public R call(R r, T t) {, +                return (R) _f.call(r, t);, +     * @see #reduce(Func2), +     */, +    public Observable<T> aggregate(Func2<T, T, T> accumulator) {, +        return reduce(accumulator);, +    }, +    , +    /**, +     * @see #reduce(Object), +     */, +    public Observable<T> aggregate(Object accumulator) {, +        return reduce(accumulator);, +    }, +    , +    /**, +    public <R> Observable<R> reduce(R initialValue, Func2<R, T, R> accumulator) {, +     * @see #reduce(R, Func2), +     */, +    public <R> Observable<R> aggregate(R initialValue, Func2<R, T, R> accumulator) {]