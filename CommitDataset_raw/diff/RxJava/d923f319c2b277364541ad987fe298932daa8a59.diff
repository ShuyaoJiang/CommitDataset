[+++ b/src/main/java/io/reactivex/subjects/UnicastSubject.java, +    void doTerminate() {, +        Runnable r = onTerminate.get();, +        if (r != null && onTerminate.compareAndSet(r, null)) {, +            r.run();, +        }, +    }, +, +            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));, +            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +, +        doTerminate();, +, +, +        doTerminate();, +, +, +                doTerminate();, +, +++ b/src/main/java/io/reactivex/subjects/UnicastSubject.java, +    void doTerminate() {, +        Runnable r = onTerminate.get();, +        if (r != null && onTerminate.compareAndSet(r, null)) {, +            r.run();, +        }, +    }, +, +            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));, +            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +, +        doTerminate();, +, +, +        doTerminate();, +, +, +                doTerminate();, +, +++ b/src/test/java/io/reactivex/subjects/UnicastSubjectTest.java, +import io.reactivex.Observable;, +import io.reactivex.disposables.Disposable;, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.junit.Assert.assertEquals;, +    }, +, +    @Test, +    public void onTerminateCalledWhenOnError() {, +        final AtomicBoolean didRunOnTerminate = new AtomicBoolean();, +, +        UnicastSubject<Integer> us = UnicastSubject.create(Observable.bufferSize(), new Runnable() {, +            @Override public void run() {, +                didRunOnTerminate.set(true);, +            }, +        });, +, +        assertEquals(false, didRunOnTerminate.get());, +        us.onError(new RuntimeException("some error"));, +        assertEquals(true, didRunOnTerminate.get());, +    }, +, +    @Test, +    public void onTerminateCalledWhenOnComplete() {, +        final AtomicBoolean didRunOnTerminate = new AtomicBoolean();, +, +        UnicastSubject<Integer> us = UnicastSubject.create(Observable.bufferSize(), new Runnable() {, +            @Override public void run() {, +                didRunOnTerminate.set(true);, +            }, +        });, +, +        assertEquals(false, didRunOnTerminate.get());, +        us.onComplete();, +        assertEquals(true, didRunOnTerminate.get());, +    }, +, +    @Test, +    public void onTerminateCalledWhenCanceled() {, +        final AtomicBoolean didRunOnTerminate = new AtomicBoolean();, +, +        UnicastSubject<Integer> us = UnicastSubject.create(Observable.bufferSize(), new Runnable() {, +            @Override public void run() {, +                didRunOnTerminate.set(true);, +            }, +        });, +, +        final Disposable subscribe = us.subscribe();, +, +        assertEquals(false, didRunOnTerminate.get());, +        subscribe.dispose();, +        assertEquals(true, didRunOnTerminate.get());, +    }, +}]