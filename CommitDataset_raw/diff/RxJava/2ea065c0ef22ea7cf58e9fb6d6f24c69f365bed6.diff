[+++ b/CHANGES.md, +See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ b/CHANGES.md, +See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import rx.operators.OperationSample;, +import rx.operators.OperationThrottle;, +import rx.operators.OperationTimestamp;, +import rx.util.Timestamped;, +    public static <T> Observable<T> reduce(Observable<T> sequence, T initialValue, Func2<T, T, T> accumulator) {, +    public static <T> Observable<T> reduce(final Observable<T> sequence, final T initialValue, final Object accumulator) {, +        return reduce(sequence, initialValue, new Func2<T, T, T>() {, +, +            public T call(T t1, T t2) {, +                return (T) _f.call(t1, t2);, +, +    public static <T> Observable<T> scan(Observable<T> sequence, T initialValue, Func2<T, T, T> accumulator) {, +    public static <T> Observable<T> scan(final Observable<T> sequence, final T initialValue, final Object accumulator) {, +        return scan(sequence, initialValue, new Func2<T, T, T>() {, +            public T call(T t1, T t2) {, +                return (T) _f.call(t1, t2);, +, +     * Throttles the {@link Observable} by dropping values which are followed by newer values before the timer has expired., +     * , +     * @param timeout    The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +     * @param unit       The {@link TimeUnit} for the timeout., +     * @return An {@link Observable} which filters out values which are too quickly followed up with never values., +     */, +    public Observable<T> throttle(long timeout, TimeUnit unit) {, +        return create(OperationThrottle.throttle(this, timeout, unit));, +    }, +, +    /**, +     * Throttles the {@link Observable} by dropping values which are followed by newer values before the timer has expired., +     * , +     * @param timeout    The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +     * @param unit       The {@link TimeUnit} for the timeout., +     * @param scheduler  The {@link Scheduler} to use when timing incoming values., +     * @return An {@link Observable} which filters out values which are too quickly followed up with never values., +     */, +    public Observable<T> throttle(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationThrottle.throttle(this, timeout, unit, scheduler));, +    }, +, +    /**, +     * Adds a timestamp to each item emitted by this observable., +     * @return An observable sequence of timestamped items., +     */, +    public Observable<Timestamped<T>> timestamp() {, +        return create(OperationTimestamp.timestamp(this));, +    }, +    , +    /**, +    public Observable<T> reduce(T initialValue, Func2<T, T, T> accumulator) {, +    public Observable<T> reduce(T initialValue, Object accumulator) {, +     * Samples the observable sequence at each interval., +     * , +     * @param period, +     *            The period of time that defines the sampling rate., +     * @param unit, +     *            The time unit for the sampling rate time period., +     * @return An observable sequence whose elements are the results of sampling the current observable sequence., +     */, +    public Observable<T> sample(long period, TimeUnit unit) {, +        return create(OperationSample.sample(this, period, unit));, +    }, +  , +    /**, +     * Samples the observable sequence at each interval., +     * , +     * @param period, +     *            The period of time that defines the sampling rate., +     * @param unit, +     *            The time unit for the sampling rate time period., +     * @param scheduler, +     *            The scheduler to use for sampling., +     * @return An observable sequence whose elements are the results of sampling the current observable sequence., +     */, +    public Observable<T> sample(long period, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationSample.sample(this, period, unit, scheduler));, +    }, +    , +    /**, +    public Observable<T> scan(T initialValue, Func2<T, T, T> accumulator) {, +    public Observable<T> scan(final T initialValue, final Object accumulator) {, +++ b/CHANGES.md, +See https://github.com/Netflix/RxJava/issues/19 for background, discussion and status of Schedulers., +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;]