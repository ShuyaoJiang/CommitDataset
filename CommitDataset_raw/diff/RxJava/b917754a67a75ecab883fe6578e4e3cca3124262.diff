[+++ b/src/main/java/io/reactivex/internal/operators/single/SingleTakeUntil.java, +                parent.otherError(new CancellationException());, +            if (get() != SubscriptionHelper.CANCELLED) {, +                lazySet(SubscriptionHelper.CANCELLED);, +        }, +++ b/src/main/java/io/reactivex/internal/operators/single/SingleTakeUntil.java, +                parent.otherError(new CancellationException());, +            if (get() != SubscriptionHelper.CANCELLED) {, +                lazySet(SubscriptionHelper.CANCELLED);, +        }, +++ b/src/test/java/io/reactivex/internal/operators/maybe/MaybeTakeUntilPublisherTest.java, +, +    @Test, +    public void otherSignalsAndCompletes() {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +        try {, +            Maybe.just(1).takeUntil(Flowable.just(1).take(1)), +            .test(), +            .assertResult();, +, +            assertTrue(errors.toString(), errors.isEmpty());, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }, +++ b/src/main/java/io/reactivex/internal/operators/single/SingleTakeUntil.java, +                parent.otherError(new CancellationException());, +            if (get() != SubscriptionHelper.CANCELLED) {, +                lazySet(SubscriptionHelper.CANCELLED);, +        }, +++ b/src/test/java/io/reactivex/internal/operators/maybe/MaybeTakeUntilPublisherTest.java, +, +    @Test, +    public void otherSignalsAndCompletes() {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +        try {, +            Maybe.just(1).takeUntil(Flowable.just(1).take(1)), +            .test(), +            .assertResult();, +, +            assertTrue(errors.toString(), errors.isEmpty());, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }, +++ b/src/test/java/io/reactivex/internal/operators/single/SingleTakeUntilTest.java, +import static org.junit.Assert.*;, +, +    @Test, +    public void otherSignalsAndCompletes() {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +        try {, +            Single.just(1).takeUntil(Flowable.just(1).take(1)), +            .test(), +            .assertFailure(CancellationException.class);, +, +            assertTrue(errors.toString(), errors.isEmpty());, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }]