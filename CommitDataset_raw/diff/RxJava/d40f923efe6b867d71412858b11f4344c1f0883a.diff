[+++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableAmb.java, +            c.subscribe(new Amb(once, set, observer));, +, +        final AtomicBoolean once;, +, +        final CompositeDisposable set;, +, +        final CompletableObserver downstream;, +, +        Disposable upstream;, +                set.delete(upstream);, +                set.delete(upstream);, +            upstream = d;, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableAmb.java, +            c.subscribe(new Amb(once, set, observer));, +, +        final AtomicBoolean once;, +, +        final CompositeDisposable set;, +, +        final CompletableObserver downstream;, +, +        Disposable upstream;, +                set.delete(upstream);, +                set.delete(upstream);, +            upstream = d;, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeAmb.java, +        CompositeDisposable set = new CompositeDisposable();, +        observer.onSubscribe(set);, +, +        AtomicBoolean winner = new AtomicBoolean();, +            if (set.isDisposed()) {, +                set.dispose();, +                NullPointerException ex = new NullPointerException("One of the MaybeSources is null");, +                if (winner.compareAndSet(false, true)) {, +                    observer.onError(ex);, +                } else {, +                    RxJavaPlugins.onError(ex);, +                }, +            s.subscribe(new AmbMaybeObserver<T>(observer, set, winner));, +    implements MaybeObserver<T> {, +        final AtomicBoolean winner;, +, +        Disposable upstream;, +, +        AmbMaybeObserver(MaybeObserver<? super T> downstream, CompositeDisposable set, AtomicBoolean winner) {, +            this.set = set;, +            this.winner = winner;, +            upstream = d;, +            if (winner.compareAndSet(false, true)) {, +                set.delete(upstream);, +            if (winner.compareAndSet(false, true)) {, +                set.delete(upstream);, +            if (winner.compareAndSet(false, true)) {, +                set.delete(upstream);, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableAmb.java, +            c.subscribe(new Amb(once, set, observer));, +, +        final AtomicBoolean once;, +, +        final CompositeDisposable set;, +, +        final CompletableObserver downstream;, +, +        Disposable upstream;, +                set.delete(upstream);, +                set.delete(upstream);, +            upstream = d;, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeAmb.java, +        CompositeDisposable set = new CompositeDisposable();, +        observer.onSubscribe(set);, +, +        AtomicBoolean winner = new AtomicBoolean();, +            if (set.isDisposed()) {, +                set.dispose();, +                NullPointerException ex = new NullPointerException("One of the MaybeSources is null");, +                if (winner.compareAndSet(false, true)) {, +                    observer.onError(ex);, +                } else {, +                    RxJavaPlugins.onError(ex);, +                }, +            s.subscribe(new AmbMaybeObserver<T>(observer, set, winner));, +    implements MaybeObserver<T> {, +        final AtomicBoolean winner;, +, +        Disposable upstream;, +, +        AmbMaybeObserver(MaybeObserver<? super T> downstream, CompositeDisposable set, AtomicBoolean winner) {, +            this.set = set;, +            this.winner = winner;, +            upstream = d;, +            if (winner.compareAndSet(false, true)) {, +                set.delete(upstream);, +            if (winner.compareAndSet(false, true)) {, +                set.delete(upstream);, +            if (winner.compareAndSet(false, true)) {, +                set.delete(upstream);, +++ b/src/main/java/io/reactivex/internal/operators/single/SingleAmb.java, +        final AtomicBoolean winner = new AtomicBoolean();, +            if (set.isDisposed()) {]