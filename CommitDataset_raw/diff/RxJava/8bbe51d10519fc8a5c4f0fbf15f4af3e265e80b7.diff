[+++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybe.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybe.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingle.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybe.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingle.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapMaybe.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybe.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingle.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapMaybe.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingle.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybe.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingle.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapMaybe.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingle.java, +                        break;, +++ b/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybeTest.java, +, +    @Test, +    public void innerSuccessDisposeRace() {, +        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {, +, +            final MaybeSubject<Integer> ms = MaybeSubject.create();, +, +            final TestSubscriber<Integer> ts = Flowable.just(1), +                    .hide(), +                    .concatMapMaybe(Functions.justFunction(ms)), +                    .test();, +, +            Runnable r1 = new Runnable() {, +                @Override, +                public void run() {, +                    ms.onSuccess(1);, +                }, +            };, +            Runnable r2 = new Runnable() {, +                @Override, +                public void run() {, +                    ts.dispose();, +                }, +            };, +, +            TestHelper.race(r1, r2);, +, +            ts.assertNoErrors();, +        }, +    }, +, +++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybe.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingle.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapMaybe.java, +                        break;, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingle.java, +                        break;, +++ b/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybeTest.java, +, +    @Test, +    public void innerSuccessDisposeRace() {, +        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {, +, +            final MaybeSubject<Integer> ms = MaybeSubject.create();, +, +            final TestSubscriber<Integer> ts = Flowable.just(1), +                    .hide(), +                    .concatMapMaybe(Functions.justFunction(ms)), +                    .test();, +, +            Runnable r1 = new Runnable() {, +                @Override, +                public void run() {, +                    ms.onSuccess(1);, +                }, +            };, +            Runnable r2 = new Runnable() {, +                @Override, +                public void run() {, +                    ts.dispose();, +                }, +            };, +, +            TestHelper.race(r1, r2);, +, +            ts.assertNoErrors();, +        }, +    }, +]