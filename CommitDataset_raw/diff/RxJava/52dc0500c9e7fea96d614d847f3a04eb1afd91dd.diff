[+++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.internal.operators.maybe.MaybeFromCompletable;, +     * Converts this Single into a {@link Maybe}., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.toObservable.png" alt="">, +     * <dl>, +     * <dt><b>Scheduler:</b></dt>, +     * <dd>{@code toCompletable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param <T> the value type, +     * @return an {@link Maybe} that emits a single item T or an error., +     */, +    public final <T> Maybe<T> toMaybe() {, +        return RxJavaPlugins.onAssembly(new MaybeFromCompletable<T>(this));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.internal.operators.maybe.MaybeFromCompletable;, +     * Converts this Single into a {@link Maybe}., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.toObservable.png" alt="">, +     * <dl>, +     * <dt><b>Scheduler:</b></dt>, +     * <dd>{@code toCompletable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param <T> the value type, +     * @return an {@link Maybe} that emits a single item T or an error., +     */, +    public final <T> Maybe<T> toMaybe() {, +        return RxJavaPlugins.onAssembly(new MaybeFromCompletable<T>(this));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Flowable.java, +     *                 emitter.onComplete();, +     * Returns a Flowable that calls a Publisher factory to create a Publisher for each new Subscriber, +     * The defer Subscriber allows you to defer or delay emitting items from a Publisher until such time as an, +     * Subscriber subscribes to the Publisher. This allows an {@link Subscriber} to easily obtain updates or a, +     *            the Publisher factory function to invoke for each {@link Subscriber} that subscribes to the, +     * @return a Flowable whose {@link Subscriber}s' subscriptions trigger an invocation of the given, +     * Returns a Flowable that emits no items to the {@link Subscriber} and immediately invokes its, +     * @return a Flowable that emits no items to the {@link Subscriber} but immediately invokes the, +     *         {@link Subscriber}'s {@link Subscriber#onComplete() onComplete} method, +     * Returns a Flowable that invokes an {@link Subscriber}'s {@link Subscriber#onError onError} method when the, +     * Subscriber subscribes to it., +     * @return a Flowable that invokes the {@link Subscriber}'s {@link Subscriber#onError onError} method when, +     *         the Subscriber subscribes to it, +     * Returns a Flowable that invokes an {@link Subscriber}'s {@link Subscriber#onError onError} method when the, +     * Subscriber subscribes to it., +     *            the particular Throwable to pass to {@link Subscriber#onError onError}, +     * @return a Flowable that invokes the {@link Subscriber}'s {@link Subscriber#onError onError} method when, +     *         the Subscriber subscribes to it, +     * Returns a Flowable that, when an Subscriber subscribes to it, invokes a function you specify and then, +     * This allows you to defer the execution of the function you specify until an Subscriber subscribes to the, +     *         function only when an Subscriber subscribes to the Publisher that {@code fromCallable} returns, +     * @return a Flowable whose {@link Subscriber}s' subscriptions trigger an invocation of the given function, +     * Flattens an Iterable of Publishers into one Publisher, in a way that allows an Subscriber to receive all, +     * error via {@link Subscriber#onError onError}, {@code mergeDelayError} will refrain from propagating that, +     * invoke the {@code onError} method of its Subscribers once., +     * Flattens an Iterable of Publishers into one Publisher, in a way that allows an Subscriber to receive all, +     * error via {@link Subscriber#onError onError}, {@code mergeDelayError} will refrain from propagating that, +     * invoke the {@code onError} method of its Subscribers once., +     * Flattens an array of Publishers into one Publisher, in a way that allows an Subscriber to receive all, +     * error via {@link Subscriber#onError onError}, {@code mergeDelayError} will refrain from propagating that, +     * invoke the {@code onError} method of its Subscribers once., +     * Flattens an Iterable of Publishers into one Publisher, in a way that allows an Subscriber to receive all, +     * error via {@link Subscriber#onError onError}, {@code mergeDelayError} will refrain from propagating that, +     * invoke the {@code onError} method of its Subscribers once., +     * Flattens a Publisher that emits Publishers into one Publisher, in a way that allows an Subscriber to, +     * error via {@link Subscriber#onError onError}, {@code mergeDelayError} will refrain from propagating that, +     * invoke the {@code onError} method of its Subscribers once., +     * Flattens a Publisher that emits Publishers into one Publisher, in a way that allows an Subscriber to, +     * error via {@link Subscriber#onError onError}, {@code mergeDelayError} will refrain from propagating that, +     * invoke the {@code onError} method of its Subscribers once., +     * Flattens an Iterable of Publishers into one Publisher, in a way that allows an Subscriber to receive all, +     * error via {@link Subscriber#onError onError}, {@code mergeDelayError} will refrain from propagating that, +     * invoke the {@code onError} method of its Subscribers once., +     * Flattens two Publishers into one Publisher, in a way that allows an Subscriber to receive all, +     * notify of an error via {@link Subscriber#onError onError}, {@code mergeDelayError} will refrain from, +     * invoke the {@code onError} method of its Subscribers once., +     * Flattens three Publishers into one Publisher, in a way that allows an Subscriber to receive all, +     * Publishers notify of an error via {@link Subscriber#onError onError}, {@code mergeDelayError} will refrain, +     * invoke the {@code onError} method of its Subscribers once., +     * Flattens four Publishers into one Publisher, in a way that allows an Subscriber to receive all, +     * the merged Publishers notify of an error via {@link Subscriber#onError onError}, {@code mergeDelayError}, +     * invoke the {@code onError} method of its Subscribers once., +     * Returns a Flowable that never sends any items or notifications to an {@link Subscriber}., +     * @return a Flowable that never emits any items or sends any notifications to an {@link Subscriber}, +     * {@code doOnComplete()}). This can also happen if the sources are exactly the same length; if, +     * <pre><code>zip(Arrays.asList(range(1, 5).doOnComplete(action1), range(6, 5).doOnComplete(action2)), (a) -&gt; a)</code></pre>, +     * {@code doOnComplete()}). This can also happen if the sources are exactly the same length; if, +     * <pre><code>zip(just(range(1, 5).doOnComplete(action1), range(6, 5).doOnComplete(action2)), (a) -&gt; a)</code></pre>, +     * The resulting {@code Publisher<R>} returned from {@code zip} will invoke {@link Subscriber#onNext onNext}, +     * {@code doOnComplete()}). This can also happen if the sources are exactly the same length; if, +     * <pre><code>zip(range(1, 5).doOnComplete(action1), range(6, 5).doOnComplete(action2), (a, b) -&gt; a + b)</code></pre>, +     * The resulting {@code Publisher<R>} returned from {@code zip} will invoke {@link Subscriber#onNext onNext}, +     * {@code doOnComplete()}). This can also happen if the sources are exactly the same length; if]