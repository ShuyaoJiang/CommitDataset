[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDistinct;, +import rx.operators.OperatorDistinctUntilChanged;, +        return create(OperationDistinct.distinct(this));, +        return create(OperationDistinct.distinct(this, keySelector));, +        return lift(new OperatorDistinctUntilChanged<T, T>(Functions.<T>identity()));, +        return lift(new OperatorDistinctUntilChanged<T, U>(keySelector));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDistinct;, +import rx.operators.OperatorDistinctUntilChanged;, +        return create(OperationDistinct.distinct(this));, +        return create(OperationDistinct.distinct(this, keySelector));, +        return lift(new OperatorDistinctUntilChanged<T, T>(Functions.<T>identity()));, +        return lift(new OperatorDistinctUntilChanged<T, U>(keySelector));, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinct.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.ArrayList;, +import java.util.Comparator;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Action0;, +import rx.functions.Func1;, +import rx.functions.Functions;, +import rx.subscriptions.Subscriptions;, +, +/**, + * Returns an Observable that emits all distinct items emitted by the source., + * , + * Be careful with this operation when using infinite or very large observables, + * as it has to store all distinct values it has received., + */, +public final class OperationDistinct {, +, +    /**, +     * Returns an Observable that emits all distinct items emitted by the source, +     * , +     * @param source, +     *            The source Observable to emit the distinct items for., +     * @return A subscription function for creating the target Observable., +     */, +    public static <T, U> OnSubscribeFunc<T> distinct(Observable<? extends T> source, Func1<? super T, ? extends U> keySelector) {, +        return new Distinct<T, U>(source, keySelector);, +    }, +, +    /**, +     * Returns an Observable that emits all distinct items emitted by the source, +     * , +     * @param source, +     *            The source Observable to emit the distinct items for., +     * @param equalityComparator, +     *            The comparator to use for deciding whether to consider two items as equal or not., +     * @return A subscription function for creating the target Observable., +     */, +    public static <T> OnSubscribeFunc<T> distinct(Observable<? extends T> source, Comparator<T> equalityComparator) {, +        return new DistinctWithComparator<T, T>(source, Functions.<T> identity(), equalityComparator);, +    }, +, +    /**, +     * Returns an Observable that emits all distinct items emitted by the source, +     * , +     * @param source, +     *            The source Observable to emit the distinct items for., +     * @param equalityComparator, +     *            The comparator to use for deciding whether to consider the two item keys as equal or not., +     * @return A subscription function for creating the target Observable., +     */, +    public static <T, U> OnSubscribeFunc<T> distinct(Observable<? extends T> source, Func1<? super T, ? extends U> keySelector, Comparator<U> equalityComparator) {, +        return new DistinctWithComparator<T, U>(source, keySelector, equalityComparator);, +    }, +, +    /**, +     * Returns an Observable that emits all distinct items emitted by the source, +     * , +     * @param source, +     *            The source Observable to emit the distinct items for., +     * @return A subscription function for creating the target Observable., +     */]