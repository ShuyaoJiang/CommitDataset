[+++ b/language-adaptors/rxjava-scala/README.md, +Observable.items(1, 2, 3, 4).reduce(_ + _), +val first = Observable.items(10, 11, 12), +val second = Observable.items(10, 11, 12), +++ b/language-adaptors/rxjava-scala/README.md, +Observable.items(1, 2, 3, 4).reduce(_ + _), +val first = Observable.items(10, 11, 12), +val second = Observable.items(10, 11, 12), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def createExampleGood2() {, +    import scala.io.{Codec, Source}, +, +    val rxscala = Observable[String](subscriber => {, +      try {, +        val input = new java.net.URL("http://rxscala.github.io/").openStream(), +        subscriber.add(Subscription {, +          input.close(), +        }), +        Source.fromInputStream(input)(Codec.UTF8).getLines(), +          .takeWhile(_ => !subscriber.isUnsubscribed), +          .foreach(subscriber.onNext(_)), +        if (!subscriber.isUnsubscribed) {, +          subscriber.onCompleted(), +        }, +      }, +      catch {, +        case e: Throwable => if (!subscriber.isUnsubscribed) subscriber.onError(e), +      }, +    }).subscribeOn(IOScheduler()), +, +    val count = rxscala.flatMap(_.split("\\W+").toSeq.toObservable), +      .map(_.toLowerCase), +      .filter(_ == "rxscala"), +      .size, +    println(s"RxScala appears ${count.toBlockingObservable.single} times in http://rxscala.github.io/"), +  }, +, +++ b/language-adaptors/rxjava-scala/README.md, +Observable.items(1, 2, 3, 4).reduce(_ + _), +val first = Observable.items(10, 11, 12), +val second = Observable.items(10, 11, 12), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def createExampleGood2() {, +    import scala.io.{Codec, Source}, +, +    val rxscala = Observable[String](subscriber => {, +      try {, +        val input = new java.net.URL("http://rxscala.github.io/").openStream(), +        subscriber.add(Subscription {, +          input.close(), +        }), +        Source.fromInputStream(input)(Codec.UTF8).getLines(), +          .takeWhile(_ => !subscriber.isUnsubscribed), +          .foreach(subscriber.onNext(_)), +        if (!subscriber.isUnsubscribed) {, +          subscriber.onCompleted(), +        }, +      }, +      catch {, +        case e: Throwable => if (!subscriber.isUnsubscribed) subscriber.onError(e), +      }, +    }).subscribeOn(IOScheduler()), +, +    val count = rxscala.flatMap(_.split("\\W+").toSeq.toObservable), +      .map(_.toLowerCase), +      .filter(_ == "rxscala"), +      .size, +    println(s"RxScala appears ${count.toBlockingObservable.single} times in http://rxscala.github.io/"), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +    zip((0 until Int.MaxValue).toObservable), +   * You can `add` custom [[Subscription]]s to [[Subscriber]]. These [[Subscription]]s will be called, +   * <ul>, +   *   <li>when someone calls `unsubscribe`.</li>, +   *   <li>after `onCompleted` or `onError`.</li>, +   * </ul>, +   *, +   * See `<a href="https://github.com/Netflix/RxJava/blob/master/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala">RxScalaDemo</a>.createExampleGood`, +   * and `<a href="https://github.com/Netflix/RxJava/blob/master/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala">RxScalaDemo</a>.createExampleGood2`., +   *, +   * @param T, +++ b/language-adaptors/rxjava-scala/README.md, +Observable.items(1, 2, 3, 4).reduce(_ + _), +val first = Observable.items(10, 11, 12), +val second = Observable.items(10, 11, 12), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def createExampleGood2() {, +    import scala.io.{Codec, Source}, +, +    val rxscala = Observable[String](subscriber => {, +      try {, +        val input = new java.net.URL("http://rxscala.github.io/").openStream(), +        subscriber.add(Subscription {, +          input.close(), +        }), +        Source.fromInputStream(input)(Codec.UTF8).getLines(), +          .takeWhile(_ => !subscriber.isUnsubscribed), +          .foreach(subscriber.onNext(_)), +        if (!subscriber.isUnsubscribed) {]