[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.plugins.RxJavaErrorHandler;, +     * Create an Observable that ignores elements from this observable, +     * sequence which are followed by another value within a computed, +     * debounce duration., +     * @param <U> the debounce value type (ignored), +     * @param debounceSelector function to retrieve a sequence indicating the throttle duration for each given element., +     * @return an Observable that ignores elements from this observable, +     * sequence which are followed by another value within a computed, +     * debounce duration, +     */, +    public <U> Observable<T> debounce(Func1<? super T, ? extends Observable<U>> debounceSelector) {, +        return create(OperationDebounce.debounceSelector(this, debounceSelector));, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.plugins.RxJavaErrorHandler;, +     * Create an Observable that ignores elements from this observable, +     * sequence which are followed by another value within a computed, +     * debounce duration., +     * @param <U> the debounce value type (ignored), +     * @param debounceSelector function to retrieve a sequence indicating the throttle duration for each given element., +     * @return an Observable that ignores elements from this observable, +     * sequence which are followed by another value within a computed, +     * debounce duration, +     */, +    public <U> Observable<T> debounce(Func1<? super T, ? extends Observable<U>> debounceSelector) {, +        return create(OperationDebounce.debounceSelector(this, debounceSelector));, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationDebounce.java, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.SerialSubscription;, +    , +    /**, +     * Delay the emission via another observable if no new source appears in the meantime., +     */, +    public static <T, U> OnSubscribeFunc<T> debounceSelector(, +            Observable<? extends T> source,, +            Func1<? super T, ? extends Observable<U>> debounceSelector) {, +        return new DebounceSelector<T, U>(source, debounceSelector);, +    }, +    , +    /**, +     * Delay the emission via another observable if no new source appears in the meantime., +     */, +    private static final class DebounceSelector<T, U> implements OnSubscribeFunc<T> {, +        final Observable<? extends T> source;, +        final Func1<? super T, ? extends Observable<U>> debounceSelector;, +, +        public DebounceSelector(Observable<? extends T> source, Func1<? super T, ? extends Observable<U>> debounceSelector) {, +            this.source = source;, +            this.debounceSelector = debounceSelector;, +        }, +, +        @Override, +        public Subscription onSubscribe(Observer<? super T> t1) {, +            CompositeSubscription csub = new CompositeSubscription();, +            , +            csub.add(source.subscribe(new SourceObserver<T, U>(t1, debounceSelector, csub)));, +            , +            return csub;, +        }, +        , +        /** Observe the source. */, +        private static final class SourceObserver<T, U> implements Observer<T> {, +            final Observer<? super T> observer;, +            final Func1<? super T, ? extends Observable<U>> debounceSelector;, +            final CompositeSubscription cancel;, +            final SerialSubscription ssub = new SerialSubscription();, +            long index;, +            T value;, +            boolean hasValue;, +            final Object guard;, +            , +            public SourceObserver(, +                    Observer<? super T> observer, , +                    Func1<? super T, ? extends Observable<U>> debounceSelector, , +                    CompositeSubscription cancel) {, +                this.observer = observer;, +                this.debounceSelector = debounceSelector;, +                this.cancel = cancel;, +                this.cancel.add(ssub);, +                this.guard = new Object();, +            }, +, +            @Override, +            public void onNext(T args) {, +                Observable<U> o;, +                try {, +                    o = debounceSelector.call(args);, +                } catch (Throwable t) {, +                    synchronized (guard) {, +                        observer.onError(t);, +                    }, +                    cancel.unsubscribe();, +                    return;, +                }]