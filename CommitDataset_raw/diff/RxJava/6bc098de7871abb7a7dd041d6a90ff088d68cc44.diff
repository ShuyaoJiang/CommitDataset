[+++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +                            interleave interpose into iterate, +(defn iterate, +  "Returns an Observable of x, (f x), (f (f x)) etc. f must be free of side-effects, +, +  See:, +    clojure.core/iterate, +  ", +  [f x], +  (observable* (fn [s], +                 (loop [x x], +                   (when-not (unsubscribed? s), +                     (on-next s x), +                     (recur (f x))))))), +, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +                            interleave interpose into iterate, +(defn iterate, +  "Returns an Observable of x, (f x), (f (f x)) etc. f must be free of side-effects, +, +  See:, +    clojure.core/iterate, +  ", +  [f x], +  (observable* (fn [s], +                 (loop [x x], +                   (when-not (unsubscribed? s), +                     (on-next s x), +                     (recur (f x))))))), +, +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/core_test.clj, +(deftest test-iterate, +  (are [f x n] (= (->> (iterate f x) (take n)), +                  (->> (rx/iterate f x) (rx/take n) (b/into []))), +       inc 0 10, +       dec 20 100, +       #(conj % (count %)) [] 5, +       #(cons (count %) % ) nil 5)), +]