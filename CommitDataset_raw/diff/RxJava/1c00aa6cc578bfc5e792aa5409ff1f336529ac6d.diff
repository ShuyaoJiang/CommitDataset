[+++ b/rxjava-core/src/main/java/rx/Observable.java, +        return create(OperatorAmb.amb(sources));, +        return create(OperatorAmb.amb(o1, o2));, +        return create(OperatorAmb.amb(o1, o2, o3));, +        return create(OperatorAmb.amb(o1, o2, o3, o4));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6, o7));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8, o9));, +        return create(new OperatorCombineLatest<T, R>(sources, combineFunction));, +        return create(new OperatorDefer<T>(observableFactory));, +        return create(OperatorToObservableFuture.toObservableFuture(future));, +        return create(OperatorToObservableFuture.toObservableFuture(future, timeout, unit));, +        return create(OperatorToObservableFuture.toObservableFuture(future)).subscribeOn(scheduler);, +        return create(new OperatorTimerPeriodically(interval, interval, unit, Schedulers.computation()));, +        return create(new OperatorTimerPeriodically(interval, interval, unit, scheduler));, +        return create(new OperatorTimerPeriodically(initialDelay, period, unit, scheduler));, +        return create(new OperatorTimerOnce(delay, unit, scheduler));, +        return create(new OperatorUsing<T, Resource>(resourceFactory, observableFactory));, +        return create(new OperatorCache<T>(this));, +        return create(new OperatorDelayWithSelector<T, U, V>(this, subscriptionDelay, itemDelay));, +        return create(new OperatorDelayWithSelector<T, U, U>(this, itemDelay));, +        return create(new OperatorDelay<T>(this, delay, unit, Schedulers.computation()));, +        return create(new OperatorDelay<T>(this, delay, unit, scheduler));, +        return create(new OperatorDelaySubscription<T>(this, delay, unit, scheduler));, +        return create(new OperatorGroupJoin<T, T2, D1, D2, R>(this, right, leftDuration, rightDuration, resultSelector));, +        return create(new OperatorJoin<T, TRight, TLeftDuration, TRightDuration, R>(this, right, leftDurationSelector, rightDurationSelector, resultSelector));, +        return create(new OperatorMulticastSelector<T, TIntermediate, TResult>(this, subjectFactory, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return create(OperatorAmb.amb(sources));, +        return create(OperatorAmb.amb(o1, o2));, +        return create(OperatorAmb.amb(o1, o2, o3));, +        return create(OperatorAmb.amb(o1, o2, o3, o4));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6, o7));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8, o9));, +        return create(new OperatorCombineLatest<T, R>(sources, combineFunction));, +        return create(new OperatorDefer<T>(observableFactory));, +        return create(OperatorToObservableFuture.toObservableFuture(future));, +        return create(OperatorToObservableFuture.toObservableFuture(future, timeout, unit));, +        return create(OperatorToObservableFuture.toObservableFuture(future)).subscribeOn(scheduler);, +        return create(new OperatorTimerPeriodically(interval, interval, unit, Schedulers.computation()));, +        return create(new OperatorTimerPeriodically(interval, interval, unit, scheduler));, +        return create(new OperatorTimerPeriodically(initialDelay, period, unit, scheduler));, +        return create(new OperatorTimerOnce(delay, unit, scheduler));, +        return create(new OperatorUsing<T, Resource>(resourceFactory, observableFactory));, +        return create(new OperatorCache<T>(this));, +        return create(new OperatorDelayWithSelector<T, U, V>(this, subscriptionDelay, itemDelay));, +        return create(new OperatorDelayWithSelector<T, U, U>(this, itemDelay));, +        return create(new OperatorDelay<T>(this, delay, unit, Schedulers.computation()));, +        return create(new OperatorDelay<T>(this, delay, unit, scheduler));, +        return create(new OperatorDelaySubscription<T>(this, delay, unit, scheduler));, +        return create(new OperatorGroupJoin<T, T2, D1, D2, R>(this, right, leftDuration, rightDuration, resultSelector));, +        return create(new OperatorJoin<T, TRight, TLeftDuration, TRightDuration, R>(this, right, leftDurationSelector, rightDurationSelector, resultSelector));, +        return create(new OperatorMulticastSelector<T, TIntermediate, TResult>(this, subjectFactory, selector));, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +        return create(new OperatorMulticastSelector<T, T, R>(this, new Func0<Subject<T, T>>() {, +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +import rx.operators.OperatorRefCount;, +        return create(new OperatorRefCount<T>(this));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return create(OperatorAmb.amb(sources));, +        return create(OperatorAmb.amb(o1, o2));, +        return create(OperatorAmb.amb(o1, o2, o3));, +        return create(OperatorAmb.amb(o1, o2, o3, o4));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6, o7));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8));, +        return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8, o9));, +        return create(new OperatorCombineLatest<T, R>(sources, combineFunction));, +        return create(new OperatorDefer<T>(observableFactory));, +        return create(OperatorToObservableFuture.toObservableFuture(future));, +        return create(OperatorToObservableFuture.toObservableFuture(future, timeout, unit));, +        return create(OperatorToObservableFuture.toObservableFuture(future)).subscribeOn(scheduler);, +        return create(new OperatorTimerPeriodically(interval, interval, unit, Schedulers.computation()));, +        return create(new OperatorTimerPeriodically(interval, interval, unit, scheduler));, +        return create(new OperatorTimerPeriodically(initialDelay, period, unit, scheduler));, +        return create(new OperatorTimerOnce(delay, unit, scheduler));, +        return create(new OperatorUsing<T, Resource>(resourceFactory, observableFactory));, +        return create(new OperatorCache<T>(this));, +        return create(new OperatorDelayWithSelector<T, U, V>(this, subscriptionDelay, itemDelay));, +        return create(new OperatorDelayWithSelector<T, U, U>(this, itemDelay));, +        return create(new OperatorDelay<T>(this, delay, unit, Schedulers.computation()));, +        return create(new OperatorDelay<T>(this, delay, unit, scheduler));, +        return create(new OperatorDelaySubscription<T>(this, delay, unit, scheduler));, +        return create(new OperatorGroupJoin<T, T2, D1, D2, R>(this, right, leftDuration, rightDuration, resultSelector));]