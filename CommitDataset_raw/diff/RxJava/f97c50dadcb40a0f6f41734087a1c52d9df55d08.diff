[+++ b/src/main/java/io/reactivex/disposables/RunnableDisposable.java, +    , +    @Override, +    public String toString() {, +        return "RunnableDisposable(disposed=" + isDisposed() + ", " + get() + ")";, +    }, +++ b/src/main/java/io/reactivex/disposables/RunnableDisposable.java, +    , +    @Override, +    public String toString() {, +        return "RunnableDisposable(disposed=" + isDisposed() + ", " + get() + ")";, +    }, +++ b/src/main/java/io/reactivex/disposables/SerialDisposable.java, +import io.reactivex.internal.disposables.*;, +++ b/src/main/java/io/reactivex/disposables/RunnableDisposable.java, +    , +    @Override, +    public String toString() {, +        return "RunnableDisposable(disposed=" + isDisposed() + ", " + get() + ")";, +    }, +++ b/src/main/java/io/reactivex/disposables/SerialDisposable.java, +import io.reactivex.internal.disposables.*;, +++ b/src/main/java/io/reactivex/internal/disposables/DisposableHelper.java, +public enum DisposableHelper implements Disposable {, +     * The singleton instance representing a terminal, disposed state;, +     * Don't leak it!, +    DISPOSED, +    ;, +        Disposable d = DISPOSED;, +        if (current != d) {, +            current = field.getAndSet(d);, +            if (current != d) {, +++ b/src/main/java/io/reactivex/disposables/RunnableDisposable.java, +    , +    @Override, +    public String toString() {, +        return "RunnableDisposable(disposed=" + isDisposed() + ", " + get() + ")";, +    }, +++ b/src/main/java/io/reactivex/disposables/SerialDisposable.java, +import io.reactivex.internal.disposables.*;, +++ b/src/main/java/io/reactivex/internal/disposables/DisposableHelper.java, +public enum DisposableHelper implements Disposable {, +     * The singleton instance representing a terminal, disposed state;, +     * Don't leak it!, +    DISPOSED, +    ;, +        Disposable d = DISPOSED;, +        if (current != d) {, +            current = field.getAndSet(d);, +            if (current != d) {, +++ b/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java, +        this.resources = new LinkedList<Disposable>();, +++ b/src/main/java/io/reactivex/disposables/RunnableDisposable.java, +    , +    @Override, +    public String toString() {, +        return "RunnableDisposable(disposed=" + isDisposed() + ", " + get() + ")";, +    }, +++ b/src/main/java/io/reactivex/disposables/SerialDisposable.java, +import io.reactivex.internal.disposables.*;, +++ b/src/main/java/io/reactivex/internal/disposables/DisposableHelper.java, +public enum DisposableHelper implements Disposable {, +     * The singleton instance representing a terminal, disposed state;, +     * Don't leak it!, +    DISPOSED, +    ;, +        Disposable d = DISPOSED;, +        if (current != d) {, +            current = field.getAndSet(d);, +            if (current != d) {, +++ b/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java, +        this.resources = new LinkedList<Disposable>();, +++ b/src/main/java/io/reactivex/internal/functions/Functions.java, +, +        @Override, +        public String toString() {, +            return "IdentityFunction";, +        }, +        , +        @Override, +        public String toString() {, +            return "EmptyRunnable";, +        }, +, +        @Override, +        public String toString() {, +            return "EmptyAction";, +        }, +, +        @Override, +        public String toString() {, +            return "EmptyConsumer";, +        }, +++ b/src/main/java/io/reactivex/disposables/RunnableDisposable.java, +    , +    @Override, +    public String toString() {, +        return "RunnableDisposable(disposed=" + isDisposed() + ", " + get() + ")";, +    }, +++ b/src/main/java/io/reactivex/disposables/SerialDisposable.java]