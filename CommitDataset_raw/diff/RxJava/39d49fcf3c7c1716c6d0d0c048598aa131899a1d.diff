[+++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +import rx.observables.BlockingObservable;, +import rx.observables.StringObservable;, +++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +import rx.observables.BlockingObservable;, +import rx.observables.StringObservable;, +++ b/rxjava-core/src/main/java/rx/Observable.java, +         * See https://github.com/Netflix/RxJava/issues/216 for discussion on "Guideline 6.4: Protect calls to user code from within an operator", +     * Returns an Observable that emits no data to the {@link Observer} and, +     * Returns an Observable that emits no data to the {@link Observer} and, +     * Converts an {@link Iterable} sequence into an Observable with the specified scheduler., +     * Converts an Array into an Observable., +     * Converts a series of items into an Observable., +     * Converts a series of items into an Observable., +     * Converts a series of items into an Observable., +     * Converts a series of items into an Observable., +     * Converts a series of items into an Observable., +     * Converts a series of items into an Observable., +     * Converts a series of items into an Observable., +     * Converts a series of items into an Observable., +     * Converts a series of items into an Observable., +     * Generates an Observable that emits a sequence of integers within a, +     * @param start the value of the first integer in the sequence, +     * @param count the number of sequential integers to generate, +     * @return an Observable that emits a range of sequential integers, +     * Generates an Observable that emits a sequence of integers within a, +     * @param start the value of the first integer in the sequence, +     * @param count the number of sequential integers to generate, +     * @return an Observable that emits a range of sequential integers, +     * subscriber, the actuall Observable is determined by the factory function., +     * @param value the item to pass to the {@link Observer}'s, +     *              {@link Observer#onNext onNext} method, +     * Returns an Observable that emits a single item and then completes on a, +     * @param value the item to pass to the {@link Observer}'s, +     *              {@link Observer#onNext onNext} method, +     * @param scheduler the scheduler to send the single element on, +     * @return an Observable that emits a single item and then completes on a, +     * @return an Observable that never sends any items or notifications to an, +     *         {@link Observer}, +     * Given an Observable that emits Observables, creates a single Observable, +     * that emits the items emitted by the most recently published of those, +     * @return an Observable that emits only the items emitted by the most, +     *         recently published Observable, +     * Given an Observable that emits Observables, creates a single Observable, +     * that emits the items emitted by the most recently published of those, +     * @return an Observable that emits only the items emitted by the most, +     *         recently published Observable, +     * accomplished by acquiring a mutual-exclusion lock for the object, +     * provided as the lock parameter., +     * Emits an item each time interval (containing a sequential number)., +     * Emits an item each time interval (containing a sequential number)., +     * Emits one item after a given delay, and then completes., +     * @param interval, +     *            interval size in time units, +     * @param unit, +     *            time units to use for the interval size, +    public static Observable<Void> timer(long interval, TimeUnit unit) {, +        return create(OperationTimer.timer(interval, unit));, +     * Emits one item after a given delay, and then completes., +     * @param interval, +     *            interval size in time units, +     * @param unit, +     *            time units to use for the interval size, +     * @param scheduler, +     *            the scheduler to use for scheduling the item, +    public static Observable<Void> timer(long interval, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationTimer.timer(interval, unit, scheduler));, +     * Returns an Observable that emits the results of shifting the items emitted by the source, +     * Observable by a specified delay. Errors emitted by the source Observable are not delayed., +     * @param delay, +     *            the delay to shift the source by, +     * @param unit, +     *            the {@link TimeUnit} in which <code>period</code> is defined, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229810%28v=vs.103%29.aspx">MSDN: Observable.Delay</a>, +     * Returns an Observable that emits the results of shifting the items emitted by the source, +     * Observable by a specified delay. Errors emitted by the source Observable are not delayed., +     * @param delay, +     *            the delay to shift the source by, +     * @param unit, +     *            the {@link TimeUnit} in which <code>period</code> is defined, +     * @param scheduler, +     *            the {@link Scheduler} to use for delaying, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229280(v=vs.103).aspx">MSDN: Observable.Delay</a>, +     * Note: If events keep firing faster than the timeout then no data will be, +     * emitted., +     * @param timeout the time each value has to be "the most recent" of the, +     *                {@link Observable} to ensure that it's not dropped, +     * @return an {@link Observable} that filters out items that are too, +     *         quickly followed by newer items, +     * Note: If events keep firing faster than the timeout then no data will be, +     * emitted., +     * @param timeout the time each value has to be "the most recent" of the, +     *                {@link Observable} to ensure that it's not dropped, +     * @return an {@link Observable} that filters out items that are too, +     *         quickly followed by newer items, +     * Note: If events keep firing faster than the timeout then no data will be, +     * emitted.]