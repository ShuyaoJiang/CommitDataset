[+++ b/language-adaptors/rxjava-scala/TODO.md, +*    Implicit schedulers?, +(Implicit) schedulers for interval: Options:, +, +```scala, +def interval(duration: Duration)(implicit scheduler: Scheduler): Observable[Long], +def interval(duration: Duration)(scheduler: Scheduler): Observable[Long], +def interval(scheduler: Scheduler)(duration: Duration): Observable[Long], +def interval(duration: Duration, scheduler: Scheduler): Observable[Long] && def interval(duration: Duration): Observable[Long] , +````, +++ b/language-adaptors/rxjava-scala/TODO.md, +*    Implicit schedulers?, +(Implicit) schedulers for interval: Options:, +, +```scala, +def interval(duration: Duration)(implicit scheduler: Scheduler): Observable[Long], +def interval(duration: Duration)(scheduler: Scheduler): Observable[Long], +def interval(scheduler: Scheduler)(duration: Duration): Observable[Long], +def interval(duration: Duration, scheduler: Scheduler): Observable[Long] && def interval(duration: Duration): Observable[Long] , +````, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  // source Observables are all known:, +  @Test def zip3Example() {, +    val o = Observable.zip(Observable(1, 2), Observable(10, 20), Observable(100, 200)), +    (for ((n1, n2, n3) <- o) yield s"$n1, $n2 and $n3"), +++ b/language-adaptors/rxjava-scala/TODO.md, +*    Implicit schedulers?, +(Implicit) schedulers for interval: Options:, +, +```scala, +def interval(duration: Duration)(implicit scheduler: Scheduler): Observable[Long], +def interval(duration: Duration)(scheduler: Scheduler): Observable[Long], +def interval(scheduler: Scheduler)(duration: Duration): Observable[Long], +def interval(duration: Duration, scheduler: Scheduler): Observable[Long] && def interval(duration: Duration): Observable[Long] , +````, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  // source Observables are all known:, +  @Test def zip3Example() {, +    val o = Observable.zip(Observable(1, 2), Observable(10, 20), Observable(100, 200)), +    (for ((n1, n2, n3) <- o) yield s"$n1, $n2 and $n3"), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, + * , + * @define subscribeObserver , + * Call this method to subscribe an [[Observer]] for receiving , + * items and notifications from the Observable., + * , + * A typical implementation of `subscribe` does the following:, + *, + * It stores a reference to the Observer in a collection object, such as a `List[T]` object., + *, + * It returns a reference to the [[Subscription]] interface. This enables Observers to, + * unsubscribe, that is, to stop receiving items and notifications before the Observable stops, + * sending them, which also invokes the Observer's [[Observer.onCompleted onCompleted]] method., + *, + * An `Observable[T]` instance is responsible for accepting all subscriptions, + * and notifying all Observers. Unless the documentation for a particular, + * `Observable[T]` implementation indicates otherwise, Observers should make no, + * assumptions about the order in which multiple Observers will receive their notifications., + *, + * @param observer, + *            the observer, + * @param scheduler, + *            the [[Scheduler]] on which Observers subscribe to the Observable, + * @return a [[Subscription]] reference with which the [[Observer]] can stop receiving items, + *         before the Observable has finished sending them, + * @throws IllegalArgumentException, + *             if the [[Observer]] provided as the argument to `subscribe()` is `null`, +   * $subscribeObserver, +  /**, +   * $subscribeObserver, +   */, +  def subscribe(observer: Observer[T]): Subscription = {, +    asJava.subscribe(observer), +  }, +  , +   * Returns a pair of a start function and an [[Observable]] that upon calling the start function causes the source Observable to, +   *            the `rx.lang.scala.subjects.Subject` to push source items into, +   *         is called, the Observable starts to push results into the specified Subject, +   * Wraps each item emitted by a source Observable in a [[rx.lang.scala.util.Timestamped]] object., +   * emitted and replaced with a new buffer when the Observable produced by the specified function produces a [[rx.lang.scala.util.Closing]] object. The function will then, +   *            The function which is used to produce an [[Observable]] for every buffer created., +   *         when the current [[Observable]] created with the function argument produces a [[rx.lang.scala.util.Closing]] object., +   * Observable produces a [[rx.lang.scala.util.Opening]] object. Additionally the function argument, +   *            The function which is used to produce an [[Observable]] for every buffer created., +   *            "count" are equals that this is the same operation as `buffer(int)`., +   * Observable produced by the specified function produces a [[rx.lang.scala.util.Closing]] object. The function will then be used to create a new Observable to listen for the end of the next, +   *            The function which is used to produce an [[Observable]] for every window created., +   *         when the current [[Observable]] created with the function argument produces a [[rx.lang.scala.util.Closing]] object., +   * Additionally the `closingSelector` argument is used to create an Observable which produces [[rx.lang.scala.util.Closing]] objects. When this Observable produces such an object, the associated window is, +   *            The function which is used to produce an [[Observable]] for every window created., +   * `skip` values, each containing `count` elements. When the source Observable completes or encounters an error,, +   *            How many produced values need to be skipped before starting a new window. Note that when `skip` and, +   *            `count` are equal that this is the same operation as `window(int)`., +   *         `count` produced values., +   * Instruct an Observable to pass control to another Observable rather than invoking [[Observer.onError onError]] if it encounters an error of type `java.lang.Exception`., +   * This differs from `Observable.onErrorResumeNext` in that this one does not handle `java.lang.Throwable` or `java.lang.Error` but lets those continue through., +   * Returns a pair of a start function and an [[Observable]] that shares a single subscription to the underlying, +   * the source Observable rather than returning a start function and an Observable., +   * Returns a a pair of a start function and an [[Observable]], which waits until the start function is called before it begins emitting, +   * calling the Observable's `toList` method prior to calling its `Observable.subscribe` method.]