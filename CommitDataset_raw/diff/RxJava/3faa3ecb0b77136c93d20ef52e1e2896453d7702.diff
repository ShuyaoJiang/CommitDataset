[+++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java, +    static volatile Function<Scheduler, Scheduler> onInitNewThreadHandler;, +    , +    static volatile Function<Scheduler, Scheduler> onNewThreadHandler;, +, +    public static Function<Scheduler, Scheduler> getInitNewThreadSchedulerHandler() {, +        return onInitNewThreadHandler;, +    }, +, +    public static Function<Scheduler, Scheduler> getNewThreadSchedulerHandler() {, +        return onNewThreadHandler;, +    }, +, +    public static Scheduler initNewThreadScheduler(Scheduler defaultScheduler) {, +        Function<Scheduler, Scheduler> f = onInitNewThreadHandler;, +        if (f == null) {, +            return defaultScheduler;, +        }, +        return f.apply(defaultScheduler);, +    }, +, +    public static Scheduler onNewThreadScheduler(Scheduler defaultScheduler) {, +        Function<Scheduler, Scheduler> f = onNewThreadHandler;, +        if (f == null) {, +            return defaultScheduler;, +        }, +        return f.apply(defaultScheduler);, +    }, +, +        , +        setInitIOSchedulerHandler(null);, +, +        setInitSingleSchedulerHandler(null);, +, +        setNewThreadSchedulerHandler(null);, +        setInitNewThreadSchedulerHandler(null);, +    public static void setInitNewThreadSchedulerHandler(Function<Scheduler, Scheduler> handler) {, +        if (lockdown) {, +            throw new IllegalStateException("Plugins can't be changed anymore");, +        }, +        onInitNewThreadHandler = handler;, +    }, +, +    , +    public static void setNewThreadSchedulerHandler(Function<Scheduler, Scheduler> handler) {, +        if (lockdown) {, +            throw new IllegalStateException("Plugins can't be changed anymore");, +        }, +        onNewThreadHandler = handler;, +    }, +, +++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java, +    static volatile Function<Scheduler, Scheduler> onInitNewThreadHandler;, +    , +    static volatile Function<Scheduler, Scheduler> onNewThreadHandler;, +, +    public static Function<Scheduler, Scheduler> getInitNewThreadSchedulerHandler() {, +        return onInitNewThreadHandler;, +    }, +, +    public static Function<Scheduler, Scheduler> getNewThreadSchedulerHandler() {, +        return onNewThreadHandler;, +    }, +, +    public static Scheduler initNewThreadScheduler(Scheduler defaultScheduler) {, +        Function<Scheduler, Scheduler> f = onInitNewThreadHandler;, +        if (f == null) {, +            return defaultScheduler;, +        }, +        return f.apply(defaultScheduler);, +    }, +, +    public static Scheduler onNewThreadScheduler(Scheduler defaultScheduler) {, +        Function<Scheduler, Scheduler> f = onNewThreadHandler;, +        if (f == null) {, +            return defaultScheduler;, +        }, +        return f.apply(defaultScheduler);, +    }, +, +        , +        setInitIOSchedulerHandler(null);, +, +        setInitSingleSchedulerHandler(null);, +, +        setNewThreadSchedulerHandler(null);, +        setInitNewThreadSchedulerHandler(null);, +    public static void setInitNewThreadSchedulerHandler(Function<Scheduler, Scheduler> handler) {, +        if (lockdown) {, +            throw new IllegalStateException("Plugins can't be changed anymore");, +        }, +        onInitNewThreadHandler = handler;, +    }, +, +    , +    public static void setNewThreadSchedulerHandler(Function<Scheduler, Scheduler> handler) {, +        if (lockdown) {, +            throw new IllegalStateException("Plugins can't be changed anymore");, +        }, +        onNewThreadHandler = handler;]