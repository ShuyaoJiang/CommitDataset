[+++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/ViewObservable.java, +import rx.operators.OperatorTextViewInput;, +import android.widget.TextView;, +    public static <T extends TextView> Observable<T> text(final T input) {, +        return text(input, false);, +    }, +, +    public static <T extends TextView> Observable<T> text(final T input, final boolean emitInitialValue) {, +        return Observable.create(new OperatorTextViewInput<T>(input, emitInitialValue));, +    }, +, +    /**, +     * @deprecated Use #text(android.widget.TextView, boolean)} (and map the values) instead., +     */, +    @Deprecated, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/ViewObservable.java, +import rx.operators.OperatorTextViewInput;, +import android.widget.TextView;, +    public static <T extends TextView> Observable<T> text(final T input) {, +        return text(input, false);, +    }, +, +    public static <T extends TextView> Observable<T> text(final T input, final boolean emitInitialValue) {, +        return Observable.create(new OperatorTextViewInput<T>(input, emitInitialValue));, +    }, +, +    /**, +     * @deprecated Use #text(android.widget.TextView, boolean)} (and map the values) instead., +     */, +    @Deprecated, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperatorEditTextInput.java, +/**, + * @deprecated Use {@link rx.operators.OperatorTextViewInput} instead., + */, +@Deprecated, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/ViewObservable.java, +import rx.operators.OperatorTextViewInput;, +import android.widget.TextView;, +    public static <T extends TextView> Observable<T> text(final T input) {, +        return text(input, false);, +    }, +, +    public static <T extends TextView> Observable<T> text(final T input, final boolean emitInitialValue) {, +        return Observable.create(new OperatorTextViewInput<T>(input, emitInitialValue));, +    }, +, +    /**, +     * @deprecated Use #text(android.widget.TextView, boolean)} (and map the values) instead., +     */, +    @Deprecated, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperatorEditTextInput.java, +/**, + * @deprecated Use {@link rx.operators.OperatorTextViewInput} instead., + */, +@Deprecated, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperatorTextViewInput.java, +/**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import rx.Observable;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.android.observables.Assertions;, +import rx.android.subscriptions.AndroidSubscriptions;, +import rx.functions.Action0;, +import android.text.Editable;, +import android.text.TextWatcher;, +import android.widget.TextView;, +, +public class OperatorTextViewInput<T extends TextView> implements Observable.OnSubscribe<T> {, +    private final T input;, +    private final boolean emitInitialValue;, +, +    public OperatorTextViewInput(final T input, final boolean emitInitialValue) {, +        this.input = input;, +        this.emitInitialValue = emitInitialValue;, +    }, +, +    @Override, +    public void call(final Subscriber<? super T> observer) {, +        Assertions.assertUiThread();, +        final TextWatcher watcher = new SimpleTextWatcher() {, +            @Override, +            public void afterTextChanged(final Editable editable) {, +                observer.onNext(input);, +            }]