[+++ b/src/test/java/io/reactivex/exceptions/ExceptionsTest.java, +    @Test, +    public void errorNotImplementedNull1() {, +        OnErrorNotImplementedException ex = new OnErrorNotImplementedException(null);, +, +        assertTrue("" + ex.getCause(), ex.getCause() instanceof NullPointerException);, +    }, +, +    @Test, +    public void errorNotImplementedNull2() {, +        OnErrorNotImplementedException ex = new OnErrorNotImplementedException("Message", null);, +, +        assertTrue("" + ex.getCause(), ex.getCause() instanceof NullPointerException);, +    }, +, +    @Test, +    public void errorNotImplementedWithCause() {, +        OnErrorNotImplementedException ex = new OnErrorNotImplementedException("Message", new TestException("Forced failure"));, +, +        assertTrue("" + ex.getCause(), ex.getCause() instanceof TestException);, +, +        assertEquals("" + ex.getCause(), "Forced failure", ex.getCause().getMessage());, +    }, +++ b/src/test/java/io/reactivex/exceptions/ExceptionsTest.java, +    @Test, +    public void errorNotImplementedNull1() {, +        OnErrorNotImplementedException ex = new OnErrorNotImplementedException(null);, +, +        assertTrue("" + ex.getCause(), ex.getCause() instanceof NullPointerException);, +    }, +, +    @Test, +    public void errorNotImplementedNull2() {, +        OnErrorNotImplementedException ex = new OnErrorNotImplementedException("Message", null);, +, +        assertTrue("" + ex.getCause(), ex.getCause() instanceof NullPointerException);, +    }, +, +    @Test, +    public void errorNotImplementedWithCause() {, +        OnErrorNotImplementedException ex = new OnErrorNotImplementedException("Message", new TestException("Forced failure"));, +, +        assertTrue("" + ex.getCause(), ex.getCause() instanceof TestException);, +, +        assertEquals("" + ex.getCause(), "Forced failure", ex.getCause().getMessage());, +    }, +++ b/src/test/java/io/reactivex/internal/functions/FunctionsTest.java, +import java.util.List;, +import io.reactivex.exceptions.TestException;, +import io.reactivex.plugins.RxJavaPlugins;, +    @Test, +    public void errorConsumerEmpty() throws Exception {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +        try {, +            Functions.ERROR_CONSUMER.accept(new TestException());, +, +            TestHelper.assertUndeliverable(errors, 0, TestException.class);, +            assertEquals(errors.toString(), 1, errors.size());, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }, +++ b/src/test/java/io/reactivex/exceptions/ExceptionsTest.java, +    @Test, +    public void errorNotImplementedNull1() {, +        OnErrorNotImplementedException ex = new OnErrorNotImplementedException(null);, +, +        assertTrue("" + ex.getCause(), ex.getCause() instanceof NullPointerException);, +    }, +, +    @Test, +    public void errorNotImplementedNull2() {, +        OnErrorNotImplementedException ex = new OnErrorNotImplementedException("Message", null);, +, +        assertTrue("" + ex.getCause(), ex.getCause() instanceof NullPointerException);, +    }, +, +    @Test, +    public void errorNotImplementedWithCause() {, +        OnErrorNotImplementedException ex = new OnErrorNotImplementedException("Message", new TestException("Forced failure"));, +, +        assertTrue("" + ex.getCause(), ex.getCause() instanceof TestException);, +, +        assertEquals("" + ex.getCause(), "Forced failure", ex.getCause().getMessage());, +    }, +++ b/src/test/java/io/reactivex/internal/functions/FunctionsTest.java, +import java.util.List;, +import io.reactivex.exceptions.TestException;, +import io.reactivex.plugins.RxJavaPlugins;, +    @Test, +    public void errorConsumerEmpty() throws Exception {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +        try {, +            Functions.ERROR_CONSUMER.accept(new TestException());, +, +            TestHelper.assertUndeliverable(errors, 0, TestException.class);, +            assertEquals(errors.toString(), 1, errors.size());, +        } finally {, +            RxJavaPlugins.reset();, +        }]