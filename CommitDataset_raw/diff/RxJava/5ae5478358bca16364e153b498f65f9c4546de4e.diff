[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/io/reactivex/Completable.java, +        return new CompletableFromUnsafeSource(source);, +     * Constructs a Completable instance by wrapping the given source callback., +     * @param source the callback which will receive the CompletableObserver instances, +     * when the Completable is subscribed to., +     * @return the created Completable instance, +     * @throws NullPointerException if source is null, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public static Completable unsafeCreate(CompletableSource source) {, +        Objects.requireNonNull(source, "source is null");, +        if (source instanceof Completable) {, +            throw new IllegalArgumentException("Use of unsafeCreate(Completable)!");, +        }, +        try {, +            // TODO plugin wrapping source, +            , +            return RxJavaPlugins.onAssembly(new CompletableFromUnsafeSource(source));, +        } catch (NullPointerException ex) { // NOPMD, +            throw ex;, +        } catch (Throwable ex) {, +            RxJavaPlugins.onError(ex);, +            throw toNpe(ex);, +        } , +    }, +    , +    /**, +++ /dev/null, +++ b/src/main/java/io/reactivex/Completable.java, +        return new CompletableFromUnsafeSource(source);, +     * Constructs a Completable instance by wrapping the given source callback., +     * @param source the callback which will receive the CompletableObserver instances, +     * when the Completable is subscribed to., +     * @return the created Completable instance, +     * @throws NullPointerException if source is null, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public static Completable unsafeCreate(CompletableSource source) {, +        Objects.requireNonNull(source, "source is null");, +        if (source instanceof Completable) {, +            throw new IllegalArgumentException("Use of unsafeCreate(Completable)!");, +        }, +        try {, +            // TODO plugin wrapping source, +            , +            return RxJavaPlugins.onAssembly(new CompletableFromUnsafeSource(source));, +        } catch (NullPointerException ex) { // NOPMD, +            throw ex;, +        } catch (Throwable ex) {, +            RxJavaPlugins.onError(ex);, +            throw toNpe(ex);, +        } , +    }, +    , +    /**, +++ b/src/main/java/io/reactivex/Flowable.java, +    @BackpressureSupport(BackpressureKind.SPECIAL), +    @SchedulerSupport(SchedulerSupport.NONE), +    public static <T> Flowable<T> create(FlowableSource<T> source, FlowableEmitter.BackpressureMode mode) {, +        return new FlowableFromSource<T>(source, mode);, +    }, +    public static <T> Flowable<T> unsafeCreate(Publisher<T> onSubscribe) {, +            throw new IllegalArgumentException("unsafeCreate(Flowable) should be upgraded");, +        return new FlowableFromPublisher<T>(onSubscribe);, +        return unsafeCreate(new Publisher<T>() {, +++ /dev/null, +++ b/src/main/java/io/reactivex/Completable.java, +        return new CompletableFromUnsafeSource(source);, +     * Constructs a Completable instance by wrapping the given source callback., +     * @param source the callback which will receive the CompletableObserver instances, +     * when the Completable is subscribed to., +     * @return the created Completable instance, +     * @throws NullPointerException if source is null, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public static Completable unsafeCreate(CompletableSource source) {, +        Objects.requireNonNull(source, "source is null");, +        if (source instanceof Completable) {, +            throw new IllegalArgumentException("Use of unsafeCreate(Completable)!");, +        }, +        try {, +            // TODO plugin wrapping source, +            , +            return RxJavaPlugins.onAssembly(new CompletableFromUnsafeSource(source));, +        } catch (NullPointerException ex) { // NOPMD, +            throw ex;, +        } catch (Throwable ex) {, +            RxJavaPlugins.onError(ex);, +            throw toNpe(ex);, +        } , +    }, +    , +    /**, +++ b/src/main/java/io/reactivex/Flowable.java, +    @BackpressureSupport(BackpressureKind.SPECIAL), +    @SchedulerSupport(SchedulerSupport.NONE), +    public static <T> Flowable<T> create(FlowableSource<T> source, FlowableEmitter.BackpressureMode mode) {, +        return new FlowableFromSource<T>(source, mode);]