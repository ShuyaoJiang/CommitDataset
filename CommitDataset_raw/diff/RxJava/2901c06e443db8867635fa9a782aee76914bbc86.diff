[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scalaimpl/Observable.scala, +   * Flattens two Observables into one Observable, without any transformation., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/merge.png">, +   * <p>, +   * You can combine items emitted by two Observables so that they act like a single, +   * Observable by using the {@code merge} method., +   * , +   * @param that, +   *            an Observable to be merged, +   * @return an Observable that emits items from {@code this} and {@code that} until , +   *            {@code this} or {@code that} emits {@code onError} or {@code onComplete}., +   */, +  def merge[U >: T](that: Observable[U]): Observable[U] = {, +    val thisJava: rx.Observable[_ <: U] = this.asJava, +    val thatJava: rx.Observable[_ <: U] = that.asJava, +    new Observable[U](rx.Observable.merge(thisJava, thatJava)), +  }, +  , +  /**, +  // TODO do we need this or is the binary instance method merge sufficient?, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scalaimpl/Observable.scala, +   * Flattens two Observables into one Observable, without any transformation., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/merge.png">, +   * <p>, +   * You can combine items emitted by two Observables so that they act like a single, +   * Observable by using the {@code merge} method., +   * , +   * @param that, +   *            an Observable to be merged, +   * @return an Observable that emits items from {@code this} and {@code that} until , +   *            {@code this} or {@code that} emits {@code onError} or {@code onComplete}., +   */, +  def merge[U >: T](that: Observable[U]): Observable[U] = {, +    val thisJava: rx.Observable[_ <: U] = this.asJava, +    val thatJava: rx.Observable[_ <: U] = that.asJava, +    new Observable[U](rx.Observable.merge(thisJava, thatJava)), +  }, +  , +  /**, +  // TODO do we need this or is the binary instance method merge sufficient?, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scalatests/RxScalaDemo.scala, +    (slowNumbers merge fastNumbers).subscribe(output(_)), +    sleep(2500)]