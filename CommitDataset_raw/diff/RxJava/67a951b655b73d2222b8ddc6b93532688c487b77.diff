[+++ b/src/main/java/io/reactivex/Completable.java, +     * Calls the shared {@code Action} if a CompletableObserver subscribed to the current, +     * Completable disposes the common Disposable it received via onSubscribe., +     * @param onDispose the action to call when the child subscriber disposes the subscription, +++ b/src/main/java/io/reactivex/Completable.java, +     * Calls the shared {@code Action} if a CompletableObserver subscribed to the current, +     * Completable disposes the common Disposable it received via onSubscribe., +     * @param onDispose the action to call when the child subscriber disposes the subscription, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Calls the shared {@code Action} if a MaybeObserver subscribed to the current Maybe, +     * @param onDispose the action called when the subscription is cancelled (disposed), +     * @throws NullPointerException if onDispose is null, +++ b/src/main/java/io/reactivex/Completable.java, +     * Calls the shared {@code Action} if a CompletableObserver subscribed to the current, +     * Completable disposes the common Disposable it received via onSubscribe., +     * @param onDispose the action to call when the child subscriber disposes the subscription, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Calls the shared {@code Action} if a MaybeObserver subscribed to the current Maybe, +     * @param onDispose the action called when the subscription is cancelled (disposed), +     * @throws NullPointerException if onDispose is null, +++ b/src/main/java/io/reactivex/Observable.java, +     * @throws NullPointerException if onDispose is null, +++ b/src/main/java/io/reactivex/Completable.java, +     * Calls the shared {@code Action} if a CompletableObserver subscribed to the current, +     * Completable disposes the common Disposable it received via onSubscribe., +     * @param onDispose the action to call when the child subscriber disposes the subscription, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Calls the shared {@code Action} if a MaybeObserver subscribed to the current Maybe, +     * @param onDispose the action called when the subscription is cancelled (disposed), +     * @throws NullPointerException if onDispose is null, +++ b/src/main/java/io/reactivex/Observable.java, +     * @throws NullPointerException if onDispose is null, +++ b/src/main/java/io/reactivex/Single.java, +     * Calls the shared {@code Action} if a SingleObserver subscribed to the current Single, +     * @param onDispose the action called when the subscription is disposed, +     * @throws NullPointerException if onDispose is null]