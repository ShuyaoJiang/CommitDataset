[+++ b/rxjava-core/src/main/java/rx/exceptions/CompositeException.java, +import java.util.HashSet;, + * <p>, + * Use <code>getMessage()</code> to retrieve a concatenation of the composite exceptions., +    private final Throwable cause;, +        CompositeExceptionCausalChain _cause = new CompositeExceptionCausalChain();, +        int count = errors.size();, +        errors = removeDuplicatedCauses(errors);, +        for (Throwable e : errors) {, +            attachCallingThreadStack(_cause, e);, +            _exceptions.add(e);, +        this.message = count + " exceptions occurred. See them in causal chain below.";, +        this.cause = _cause;, +        return cause;, +    private Collection<Throwable> removeDuplicatedCauses(Collection<Throwable> errors) {, +        Set<Throwable> duplicated = new HashSet<Throwable>();, +        for (Throwable cause : errors) {, +            for (Throwable error : errors) {, +                if(cause == error || duplicated.contains(error)) {, +                    continue;, +                while (error.getCause() != null) {, +                    error = error.getCause();, +                    if (error == cause) {, +                        duplicated.add(cause);, +                        break;, +                    }, +                }, +            }, +        }, +        if (!duplicated.isEmpty()) {, +            errors = new ArrayList<Throwable>(errors);, +            errors.removeAll(duplicated);, +        }, +        return errors;, +    }, +, +    @SuppressWarnings("unused"), +    // useful when debugging but don't want to make part of publicly supported API, +    private static String getStackTraceAsString(StackTraceElement[] stack) {, +        StringBuilder s = new StringBuilder();, +        boolean firstLine = true;, +        for (StackTraceElement e : stack) {, +            if (e.toString().startsWith("java.lang.Thread.getStackTrace")) {, +                // we'll ignore this one, +                continue;, +            }, +            if (!firstLine) {, +                s.append("\n\t");, +            }, +            s.append(e.toString());, +            firstLine = false;, +        }, +        return s.toString();, +    }, +, +    /* package-private */ static void attachCallingThreadStack(Throwable e, Throwable cause) {, +        Set<Throwable> seenCauses = new HashSet<Throwable>();, +, +        while (e.getCause() != null) {, +            e = e.getCause();, +            if (seenCauses.contains(e.getCause())) {, +                break;, +            } else {, +                seenCauses.add(e.getCause());, +            }, +        }, +        // we now have 'e' as the last in the chain, +        try {, +            e.initCause(cause);, +        } catch (Throwable t) {, +            // ignore, +            // the javadocs say that some Throwables (depending on how they're made) will never, +            // let me call initCause without blowing up even if it returns null, +        }, +    }, +, +    /* package-private */ final static class CompositeExceptionCausalChain extends RuntimeException {, +        private static final long serialVersionUID = 3875212506787802066L;, +        /* package-private */ static String MESSAGE = "Chain of Causes for CompositeException In Order Received =>";, +        public String getMessage() {, +            return MESSAGE;, +++ b/rxjava-core/src/main/java/rx/exceptions/CompositeException.java, +import java.util.HashSet;, + * <p>, + * Use <code>getMessage()</code> to retrieve a concatenation of the composite exceptions., +    private final Throwable cause;, +        CompositeExceptionCausalChain _cause = new CompositeExceptionCausalChain();, +        int count = errors.size();, +        errors = removeDuplicatedCauses(errors);, +        for (Throwable e : errors) {, +            attachCallingThreadStack(_cause, e);, +            _exceptions.add(e);, +        this.message = count + " exceptions occurred. See them in causal chain below.";, +        this.cause = _cause;, +        return cause;, +    private Collection<Throwable> removeDuplicatedCauses(Collection<Throwable> errors) {, +        Set<Throwable> duplicated = new HashSet<Throwable>();, +        for (Throwable cause : errors) {, +            for (Throwable error : errors) {, +                if(cause == error || duplicated.contains(error)) {]