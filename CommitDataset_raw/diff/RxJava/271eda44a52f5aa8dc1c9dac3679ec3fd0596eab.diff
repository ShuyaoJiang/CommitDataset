[+++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +        String newLine = System.getProperty("line.separator");, +        , +        List<Line> lines = StringObservable.byLine(Observable.from(Arrays.asList("qwer", newLine + "asdf" + newLine, "zx", "cv"))).toList().toBlockingObservable().single();, +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +        String newLine = System.getProperty("line.separator");, +        , +        List<Line> lines = StringObservable.byLine(Observable.from(Arrays.asList("qwer", newLine + "asdf" + newLine, "zx", "cv"))).toList().toBlockingObservable().single();, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +                });, +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +        String newLine = System.getProperty("line.separator");, +        , +        List<Line> lines = StringObservable.byLine(Observable.from(Arrays.asList("qwer", newLine + "asdf" + newLine, "zx", "cv"))).toList().toBlockingObservable().single();, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +                });, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                });, +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +        String newLine = System.getProperty("line.separator");, +        , +        List<Line> lines = StringObservable.byLine(Observable.from(Arrays.asList("qwer", newLine + "asdf" + newLine, "zx", "cv"))).toList().toBlockingObservable().single();, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +                });, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                });, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +                });, +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +        String newLine = System.getProperty("line.separator");, +        , +        List<Line> lines = StringObservable.byLine(Observable.from(Arrays.asList("qwer", newLine + "asdf" + newLine, "zx", "cv"))).toList().toBlockingObservable().single();, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +                });, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                });, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +                });, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +                        replayObserverFromIndex(state.history, state.replayState.get(o), o);, +, +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +        String newLine = System.getProperty("line.separator");, +        , +        List<Line> lines = StringObservable.byLine(Observable.from(Arrays.asList("qwer", newLine + "asdf" + newLine, "zx", "cv"))).toList().toBlockingObservable().single();, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +                });, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                });, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +                });, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +                        replayObserverFromIndex(state.history, state.replayState.get(o), o);, +, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +    public OnSubscribe<T> getOnSubscribeFunc(final Action1<SubjectObserver<? super T>> onSubscribe, final Action1<SubjectObserver<? super T>> onTerminated) {, +                SubjectObserver<T> observer = new SubjectObserver<T>(actualOperator);, +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +        String newLine = System.getProperty("line.separator");, +        , +        List<Line> lines = StringObservable.byLine(Observable.from(Arrays.asList("qwer", newLine + "asdf" + newLine, "zx", "cv"))).toList().toBlockingObservable().single();, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +                });, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                });, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +                });, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +                        replayObserverFromIndex(state.history, state.replayState.get(o), o);, +, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +    public OnSubscribe<T> getOnSubscribeFunc(final Action1<SubjectObserver<? super T>> onSubscribe, final Action1<SubjectObserver<? super T>> onTerminated) {, +                SubjectObserver<T> observer = new SubjectObserver<T>(actualOperator);, +++ b/rxjava-core/src/test/java/rx/subjects/ReplaySubjectTest.java]