[+++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +import java.util.Collection;, +import java.util.Map;, +, +import rx.observables.GroupedObservable;, +    @Test, +    public void testGroupBy() {, +        int count=0;, +        , +        Observable.from("one", "two", "three", "four", "five", "six"), +        .groupBy({String s -> s.length()}), +        .mapMany({, +            groupObservable ->, +            , +            return groupObservable.map({, +                s ->, +                return "Value: " + s + " Group: " + groupObservable.getKey(); , +            });, +          }).toBlockingObservable().forEach({, +            s ->, +            println(s);, +            count++;, +          }), +          , +          assertEquals(6, count);, +    }, +    , +, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +import java.util.Collection;, +import java.util.Map;, +, +import rx.observables.GroupedObservable;, +    @Test, +    public void testGroupBy() {, +        int count=0;, +        , +        Observable.from("one", "two", "three", "four", "five", "six"), +        .groupBy({String s -> s.length()}), +        .mapMany({, +            groupObservable ->, +            , +            return groupObservable.map({, +                s ->, +                return "Value: " + s + " Group: " + groupObservable.getKey(); , +            });, +          }).toBlockingObservable().forEach({, +            s ->, +            println(s);, +            count++;, +          }), +          , +          assertEquals(6, count);, +    }, +    , +, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    @SuppressWarnings("rawtypes"), +    public static <K, T, R> Observable<GroupedObservable<K, R>> groupBy(Observable<T> source, final Object keySelector, final Object elementSelector) {, +        final FuncN _k = Functions.from(keySelector);, +        final FuncN _e = Functions.from(elementSelector);, +, +        return groupBy(source, new Func1<T, K>() {, +, +            @SuppressWarnings("unchecked"), +            @Override, +            public K call(T t1) {, +                return (K) _k.call(t1);, +            }, +        }, new Func1<T, R>() {, +, +            @SuppressWarnings("unchecked"), +            @Override, +            public R call(T t1) {, +                return (R) _e.call(t1);, +            }, +        });, +    }, +, +    @SuppressWarnings("rawtypes"), +    public static <K, T> Observable<GroupedObservable<K, T>> groupBy(Observable<T> source, final Object keySelector) {, +        final FuncN _k = Functions.from(keySelector);, +, +        return groupBy(source, new Func1<T, K>() {, +, +            @SuppressWarnings("unchecked"), +            @Override, +            public K call(T t1) {, +                return (K) _k.call(t1);, +            }, +        });, +    }, +, +    public <K, R> Observable<GroupedObservable<K, R>> groupBy(final Object keySelector, final Object elementSelector) {, +        return groupBy(this, keySelector, elementSelector);, +    }, +, +    public <K> Observable<GroupedObservable<K, T>> groupBy(final Object keySelector) {, +        return groupBy(this, keySelector);, +    }]