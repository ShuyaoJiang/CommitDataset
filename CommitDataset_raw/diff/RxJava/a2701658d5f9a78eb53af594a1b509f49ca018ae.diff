[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * This is largely a helper function used by RxJava for other forms of multicasting, such as, +     * {@link #publish} and {@link #publishLast}., +     * <p>, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * This is largely a helper function used by RxJava for other forms of multicasting, such as, +     * {@link #publish} and {@link #publishLast}., +     * <p>, +++ b/rxjava-core/src/main/java/rx/internal/util/MpscPaddedQueue.java, +import java.io.Serializable;, +import java.util.concurrent.atomic.AtomicReference;, + * but using {@code AtomicReferenceFieldUpdater} instead of {@code Unsafe}., +public final class MpscPaddedQueue<E> extends AtomicReference<MpscPaddedQueue.Node<E>> {, +    /** */, +    private static final long serialVersionUID = 1L;, +    /** The padded tail reference. */, +    final PaddedNode<E> tail;, +, +        Node<E> first = new Node<E>(null);, +        tail = new PaddedNode<E>();, +        tail.node = first;, +        set(first);, +        getAndSet(n).set(n);, +        tail.lazySet(n);, +            @SuppressWarnings(value = "unchecked"), +            Node<E> t = tail.node;, +            Node<E> n = t.get();, +            if (n != null || get() == t) {, +, +    /** The front-padded node class housing the actual value. */, +    static abstract class PaddedNodeBase<E> extends FrontPadding {, +        private static final long serialVersionUID = 2L;, +        volatile Node<E> node;, +        @SuppressWarnings(value = "rawtypes"), +        static final AtomicReferenceFieldUpdater<PaddedNodeBase, Node> NODE_UPDATER = AtomicReferenceFieldUpdater.newUpdater(PaddedNodeBase.class, Node.class, "node");, +        public void lazySet(Node<E> newValue) {, +            NODE_UPDATER.lazySet(this, newValue);, +        }, +    }, +    /** Post-padding of the padded node base class.  */, +    static final class PaddedNode<E> extends PaddedNodeBase<E> {, +        private static final long serialVersionUID = 3L;, +        /** Padding. */, +        public transient long p16, p17, p18, p19, p20, p21, p22;      // 56 bytes (the remaining 8 is in the base), +        /** Padding. */, +        public transient long p24, p25, p26, p27, p28, p29, p30, p31; // 64 bytes, +    }, +    static final class Node<E> implements Serializable {, +        private static final long serialVersionUID = 4L;, +        volatile Node<E> tail;, +        public Node(E value) {, +        public void set(Node<E> newTail) {, +            TAIL_UPDATER.lazySet(this, newTail);, +        @SuppressWarnings(value = "unchecked"), +        public Node<E> get() {, +            return TAIL_UPDATER.get(this);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * This is largely a helper function used by RxJava for other forms of multicasting, such as, +     * {@link #publish} and {@link #publishLast}., +     * <p>, +++ b/rxjava-core/src/main/java/rx/internal/util/MpscPaddedQueue.java, +import java.io.Serializable;, +import java.util.concurrent.atomic.AtomicReference;, + * but using {@code AtomicReferenceFieldUpdater} instead of {@code Unsafe}., +public final class MpscPaddedQueue<E> extends AtomicReference<MpscPaddedQueue.Node<E>> {, +    /** */, +    private static final long serialVersionUID = 1L;, +    /** The padded tail reference. */, +    final PaddedNode<E> tail;, +, +        Node<E> first = new Node<E>(null);, +        tail = new PaddedNode<E>();, +        tail.node = first;, +        set(first);, +        getAndSet(n).set(n);, +        tail.lazySet(n);, +            @SuppressWarnings(value = "unchecked"), +            Node<E> t = tail.node;, +            Node<E> n = t.get();, +            if (n != null || get() == t) {, +, +    /** The front-padded node class housing the actual value. */, +    static abstract class PaddedNodeBase<E> extends FrontPadding {, +        private static final long serialVersionUID = 2L;, +        volatile Node<E> node;, +        @SuppressWarnings(value = "rawtypes"), +        static final AtomicReferenceFieldUpdater<PaddedNodeBase, Node> NODE_UPDATER = AtomicReferenceFieldUpdater.newUpdater(PaddedNodeBase.class, Node.class, "node");, +        public void lazySet(Node<E> newValue) {, +            NODE_UPDATER.lazySet(this, newValue);, +        }, +    }, +    /** Post-padding of the padded node base class.  */, +    static final class PaddedNode<E> extends PaddedNodeBase<E> {, +        private static final long serialVersionUID = 3L;, +        /** Padding. */, +        public transient long p16, p17, p18, p19, p20, p21, p22;      // 56 bytes (the remaining 8 is in the base), +        /** Padding. */, +        public transient long p24, p25, p26, p27, p28, p29, p30, p31; // 64 bytes, +    }, +    static final class Node<E> implements Serializable {]