[+++ b/src/main/java/rx/internal/operators/OperatorSwitchIfEmpty.java, +, +                @Override, +                public void setProducer(final Producer producer) {, +                    child.setProducer(new Producer() {, +                        @Override, +                        public void request(long n) {, +                            producer.request(n);, +                        }, +                    });, +                }, +, +++ b/src/main/java/rx/internal/operators/OperatorSwitchIfEmpty.java, +, +                @Override, +                public void setProducer(final Producer producer) {, +                    child.setProducer(new Producer() {, +                        @Override, +                        public void request(long n) {, +                            producer.request(n);, +                        }, +                    });, +                }, +, +++ b/src/test/java/rx/internal/operators/OperatorSwitchIfEmptyTest.java, +import java.util.ArrayList;, +import java.util.List;, +        final AtomicBoolean emitted = new AtomicBoolean(false);, +                        if (n > 0 && !emitted.get()) {, +                            emitted.set(true);, +, +    @Test, +    public void testSwitchRequestAlternativeObservableWithBackpressure() {, +        final List<Integer> items = new ArrayList<Integer>();, +, +        Observable.<Integer>empty().switchIfEmpty(Observable.just(1, 2, 3)).subscribe(new Subscriber<Integer>() {, +, +            @Override, +            public void onStart() {, +                request(1);, +            }, +, +            @Override, +            public void onCompleted() {, +, +            }, +, +            @Override, +            public void onError(Throwable e) {, +, +            }, +, +            @Override, +            public void onNext(Integer integer) {, +                items.add(integer);, +            }, +        });, +        assertEquals(Arrays.asList(1), items);, +    }]