[+++ b/src/main/java/io/reactivex/Flowable.java, +     *  <dd>The operator honors backpressure from downstream. The upstream Flowable is consumed, +     *  in a bounded manner (up to {@link #bufferSize()} outstanding request amount for items). , +     *  The inner {@code Publisher}s are expected to honor backpressure; if violated, , +     *  the operator <em>may</em> signal {@code MissingBackpressureException}.</dd>, +     *  <dd>The operator honors backpressure from downstream. The upstream Flowable is consumed, +     *  in a bounded manner (up to {@link #bufferSize()} outstanding request amount for items). , +     *  The inner {@code Publisher}s are expected to honor backpressure; if violated, , +     *  the operator <em>may</em> signal {@code MissingBackpressureException}.</dd>, +     *  <dd>The operator honors backpressure from downstream. The upstream Flowable is consumed, +     *  in a bounded manner (up to {@code maxConcurrency} outstanding request amount for items). , +     *  The inner {@code Publisher}s are expected to honor backpressure; if violated, , +     *  the operator <em>may</em> signal {@code MissingBackpressureException}.</dd>, +     *  <dd>The operator honors backpressure from downstream. The upstream Flowable is consumed, +     *  in a bounded manner (up to {@code maxConcurrency} outstanding request amount for items). , +     *  The inner {@code Publisher}s are expected to honor backpressure; if violated, , +     *  the operator <em>may</em> signal {@code MissingBackpressureException}.</dd>, +     *  <dd>The operator honors backpressure from downstream. The upstream Flowable is consumed, +     *  in a bounded manner (up to {@code maxConcurrency} outstanding request amount for items). , +     *  The inner {@code Publisher}s are expected to honor backpressure; if violated, , +     *  the operator <em>may</em> signal {@code MissingBackpressureException}.</dd>, +     *  <dd>The operator honors backpressure from downstream. The upstream Flowable is consumed, +     *  in a bounded manner (up to {@link #bufferSize()} outstanding request amount for items). , +     *  The inner {@code Publisher}s are expected to honor backpressure; if violated, , +     *  the operator <em>may</em> signal {@code MissingBackpressureException}.</dd>, +     *  <dd>The operator honors backpressure from downstream. The upstream Flowable is consumed, +     *  in a bounded manner (up to {@code maxConcurrency} outstanding request amount for items). , +     *  The inner {@code Publisher}s are expected to honor backpressure; if violated, , +     *  the operator <em>may</em> signal {@code MissingBackpressureException}.</dd>, +     *  <dd>The operator honors backpressure from downstream. The upstream Flowable is consumed, +     *  in a bounded manner (up to {@code maxConcurrency} outstanding request amount for items). , +     *  The inner {@code Publisher}s are expected to honor backpressure; if violated, , +     *  the operator <em>may</em> signal {@code MissingBackpressureException}.</dd>, +     *            the type of items emitted by the inner Publishers, +     *            the type of items emitted by the combiner function, +     * @param combiner, +            BiFunction<? super T, ? super U, ? extends R> combiner) {, +        return flatMap(mapper, combiner, false, bufferSize(), bufferSize());, +     *  <dd>The operator honors backpressure from downstream. The upstream Flowable is consumed, +     *  in a bounded manner (up to {@link #bufferSize()} outstanding request amount for items). , +     *  The inner {@code Publisher}s are expected to honor backpressure; if violated, , +     *  the operator <em>may</em> signal {@code MissingBackpressureException}.</dd>, +     *            the type of items emitted by the inner Publishers, +     *            the type of items emitted by the combiner functions, +     *  <dd>The operator honors backpressure from downstream. The upstream Flowable is consumed, +     *  in a bounded manner (up to {@code maxConcurrency} outstanding request amount for items). , +     *  The inner {@code Publisher}s are expected to honor backpressure; if violated, , +     *  the operator <em>may</em> signal {@code MissingBackpressureException}.</dd>, +     *            the type of items emitted by the inner Publishers, +     *            the type of items emitted by the combiner function, +     *  <dd>The operator honors backpressure from downstream. The upstream Flowable is consumed, +     *  in a bounded manner (up to {@code maxConcurrency} outstanding request amount for items). , +     *  The inner {@code Publisher}s are expected to honor backpressure; if violated, , +     *  the operator <em>may</em> signal {@code MissingBackpressureException}.</dd>, +     *            the type of items emitted by the inner Publishers, +     *            the type of items emitted by the combiner function, +     *  <dd>The operator honors backpressure from downstream. The upstream Flowable is consumed, +     *  in a bounded manner (up to {@link #bufferSize()} outstanding request amount for items). , +     *  The inner {@code Publisher}s are expected to honor backpressure; if violated, , +     *  the operator <em>may</em> signal {@code MissingBackpressureException}.</dd>, +     *            the type of items emitted by the inner Publishers, +     *            the type of items emitted by the combiner function]