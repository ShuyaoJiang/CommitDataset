[+++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) transformer.call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<? extends T>, Observable<? extends R>> {, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) transformer.call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<? extends T>, Observable<? extends R>> {, +++ b/src/test/java/rx/CovarianceTest.java, +            public Observable<? extends Movie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends HorrorMovie> t1) {, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) transformer.call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<? extends T>, Observable<? extends R>> {, +++ b/src/test/java/rx/CovarianceTest.java, +            public Observable<? extends Movie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends HorrorMovie> t1) {, +++ b/src/test/java/rx/ObservableTests.java, +            public Observable<String> call(Observable<? extends Integer> t1) {, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) transformer.call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<? extends T>, Observable<? extends R>> {, +++ b/src/test/java/rx/CovarianceTest.java, +            public Observable<? extends Movie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends HorrorMovie> t1) {, +++ b/src/test/java/rx/ObservableTests.java, +            public Observable<String> call(Observable<? extends Integer> t1) {, +++ /dev/null, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) transformer.call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<? extends T>, Observable<? extends R>> {, +++ b/src/test/java/rx/CovarianceTest.java, +            public Observable<? extends Movie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends HorrorMovie> t1) {, +++ b/src/test/java/rx/ObservableTests.java, +            public Observable<String> call(Observable<? extends Integer> t1) {, +++ /dev/null, +++ b/src/test/java/rx/internal/operators/OnSubscribeRefCountTest.java, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.verify;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import org.junit.Before;, +import org.mockito.InOrder;, +import org.mockito.MockitoAnnotations;, +import rx.Observer;, +import rx.functions.Func2;, +import rx.observers.Subscribers;, +import rx.schedulers.TestScheduler;, +import rx.subjects.ReplaySubject;, +import rx.subscriptions.Subscriptions;, +    @Before, +    public void setUp() {, +        MockitoAnnotations.initMocks(this);, +    }, +, +    public void onlyFirstShouldSubscribeAndLastUnsubscribe() {, +        final AtomicInteger subscriptionCount = new AtomicInteger();, +        final AtomicInteger unsubscriptionCount = new AtomicInteger();, +        Observable<Integer> observable = Observable.create(new OnSubscribe<Integer>() {, +            @Override, +            public void call(Subscriber<? super Integer> observer) {, +                subscriptionCount.incrementAndGet();, +                observer.add(Subscriptions.create(new Action0() {, +                    @Override, +                    public void call() {, +                        unsubscriptionCount.incrementAndGet();, +                    }, +                }));, +            }, +        });, +        Observable<Integer> refCounted = observable.publish().refCount();, +        @SuppressWarnings("unchecked"), +        Observer<Integer> observer = mock(Observer.class);, +        Subscription first = refCounted.subscribe(observer);, +        assertEquals(1, subscriptionCount.get());, +        Subscription second = refCounted.subscribe(observer);, +        assertEquals(1, subscriptionCount.get());, +        first.unsubscribe();, +        assertEquals(0, unsubscriptionCount.get());, +        second.unsubscribe();, +        assertEquals(1, unsubscriptionCount.get());, +    }, +, +    @Test, +    public void testRefCount() {, +        TestScheduler s = new TestScheduler();, +        Observable<Long> interval = Observable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();, +, +        // subscribe list1]