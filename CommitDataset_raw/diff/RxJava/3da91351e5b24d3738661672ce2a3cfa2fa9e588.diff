[+++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/Async.java, + * Copyright 2014 Netflix, Inc., +import rx.util.async.operators.OperatorDeferFuture;, +import rx.util.async.operators.OperatorForEachFuture;, +import rx.util.async.operators.OperatorFromFunctionals;, +import rx.util.async.operators.OperatorStartFuture;, +        return OperatorStartFuture.startFuture(functionAsync);, +        return OperatorStartFuture.startFuture(functionAsync, scheduler);, +        return OperatorDeferFuture.deferFuture(observableFactoryAsync);, +        return OperatorDeferFuture.deferFuture(observableFactoryAsync, scheduler);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.functions.Action1, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext, onError);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.functions.Action1, rx.functions.Action0, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext, onError);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        return Observable.create(OperatorFromFunctionals.fromAction(action, result)).subscribeOn(scheduler);, +        return Observable.create(OperatorFromFunctionals.fromCallable(callable)).subscribeOn(scheduler);, +        return Observable.create(OperatorFromFunctionals.fromRunnable(run, result)).subscribeOn(scheduler);, +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/Async.java, + * Copyright 2014 Netflix, Inc., +import rx.util.async.operators.OperatorDeferFuture;, +import rx.util.async.operators.OperatorForEachFuture;, +import rx.util.async.operators.OperatorFromFunctionals;, +import rx.util.async.operators.OperatorStartFuture;, +        return OperatorStartFuture.startFuture(functionAsync);, +        return OperatorStartFuture.startFuture(functionAsync, scheduler);, +        return OperatorDeferFuture.deferFuture(observableFactoryAsync);, +        return OperatorDeferFuture.deferFuture(observableFactoryAsync, scheduler);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.functions.Action1, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext, onError);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.functions.Action1, rx.functions.Action0, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext, onError);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        return Observable.create(OperatorFromFunctionals.fromAction(action, result)).subscribeOn(scheduler);, +        return Observable.create(OperatorFromFunctionals.fromCallable(callable)).subscribeOn(scheduler);, +        return Observable.create(OperatorFromFunctionals.fromRunnable(run, result)).subscribeOn(scheduler);, +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/operators/Functionals.java, + * Copyright 2014 Netflix, Inc., +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/Async.java, + * Copyright 2014 Netflix, Inc., +import rx.util.async.operators.OperatorDeferFuture;, +import rx.util.async.operators.OperatorForEachFuture;, +import rx.util.async.operators.OperatorFromFunctionals;, +import rx.util.async.operators.OperatorStartFuture;, +        return OperatorStartFuture.startFuture(functionAsync);, +        return OperatorStartFuture.startFuture(functionAsync, scheduler);, +        return OperatorDeferFuture.deferFuture(observableFactoryAsync);, +        return OperatorDeferFuture.deferFuture(observableFactoryAsync, scheduler);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.functions.Action1, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext, onError);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.functions.Action1, rx.functions.Action0, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext, onError);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        return Observable.create(OperatorFromFunctionals.fromAction(action, result)).subscribeOn(scheduler);, +        return Observable.create(OperatorFromFunctionals.fromCallable(callable)).subscribeOn(scheduler);, +        return Observable.create(OperatorFromFunctionals.fromRunnable(run, result)).subscribeOn(scheduler);, +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/operators/Functionals.java, + * Copyright 2014 Netflix, Inc., +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/operators/LatchedObserver.java, + * Copyright 2014 Netflix, Inc., +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/Async.java, + * Copyright 2014 Netflix, Inc., +import rx.util.async.operators.OperatorDeferFuture;, +import rx.util.async.operators.OperatorForEachFuture;, +import rx.util.async.operators.OperatorFromFunctionals;, +import rx.util.async.operators.OperatorStartFuture;, +        return OperatorStartFuture.startFuture(functionAsync);, +        return OperatorStartFuture.startFuture(functionAsync, scheduler);, +        return OperatorDeferFuture.deferFuture(observableFactoryAsync);, +        return OperatorDeferFuture.deferFuture(observableFactoryAsync, scheduler);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.functions.Action1, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext, onError);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.functions.Action1, rx.functions.Action0, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext, onError);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        return Observable.create(OperatorFromFunctionals.fromAction(action, result)).subscribeOn(scheduler);, +        return Observable.create(OperatorFromFunctionals.fromCallable(callable)).subscribeOn(scheduler);, +        return Observable.create(OperatorFromFunctionals.fromRunnable(run, result)).subscribeOn(scheduler);, +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/operators/Functionals.java, + * Copyright 2014 Netflix, Inc., +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/operators/LatchedObserver.java, + * Copyright 2014 Netflix, Inc., +++ /dev/null, +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/Async.java]