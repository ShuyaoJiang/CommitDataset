[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits the items in a specified {@link Observable} before it begins to emit items, +     * emitted by the source Observable. , +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/startWith.png">, +     * , +     * @param values, +     *            an Observable that contains the items you want the modified Observable to emit first, +     * @return an Observable that emits the items in the specified {@link Observable} and then emits the items, +     *         emitted by the source Observable, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#wiki-startwith">RxJava Wiki: startWith()</a>, +     */, +    public final Observable<T> startWith(Observable<T> values) {, +        return concat(values, this);, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits the items in a specified {@link Observable} before it begins to emit items, +     * emitted by the source Observable. , +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/startWith.png">, +     * , +     * @param values, +     *            an Observable that contains the items you want the modified Observable to emit first, +     * @return an Observable that emits the items in the specified {@link Observable} and then emits the items, +     *         emitted by the source Observable, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#wiki-startwith">RxJava Wiki: startWith()</a>, +     */, +    public final Observable<T> startWith(Observable<T> values) {, +        return concat(values, this);, +    }, +, +    /**, +++ b/rxjava-core/src/test/java/rx/StartWithTests.java, +	@Test, +    public void startWithObservable() {, +        List<String> li = new ArrayList<String>();, +        li.add("alpha");, +        li.add("beta");, +        List<String> values = Observable.from("one", "two").startWith(Observable.from(li)).toList().toBlockingObservable().single();, +, +        assertEquals("alpha", values.get(0));, +        assertEquals("beta", values.get(1));, +        assertEquals("one", values.get(2));, +        assertEquals("two", values.get(3));, +    }, +]