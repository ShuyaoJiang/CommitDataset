[+++ b/src/main/java/io/reactivex/Completable.java, +     * Terminates the downstream if this or the other {@code Completable}, +     * terminates (wins the termination race) while disposing the connection to the losing source., +     * <p>, +     * <img width="640" height="468" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.takeuntil.c.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code takeUntil} does not operate by default on a particular {@link Scheduler}.</dd>, +     *  <dt><b>Error handling:</b></dt>, +     *  <dd>If both this and the other sources signal an error, only one of the errors, +     *  is signaled to the downstream and the other error is signaled to the global, +     *  error handler via {@link RxJavaPlugins#onError(Throwable)}.</dd>, +     * </dl>, +     * @param other the other completable source to observe for the terminal signals, +     * @return the new Completable instance, +     * @since 2.1.17 - experimental, +     */, +    @CheckReturnValue, +    @Experimental, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable takeUntil(CompletableSource other) {, +        ObjectHelper.requireNonNull(other, "other is null");, +, +        return RxJavaPlugins.onAssembly(new CompletableTakeUntilCompletable(this, other));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Completable.java, +     * Terminates the downstream if this or the other {@code Completable}, +     * terminates (wins the termination race) while disposing the connection to the losing source., +     * <p>, +     * <img width="640" height="468" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.takeuntil.c.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code takeUntil} does not operate by default on a particular {@link Scheduler}.</dd>, +     *  <dt><b>Error handling:</b></dt>, +     *  <dd>If both this and the other sources signal an error, only one of the errors, +     *  is signaled to the downstream and the other error is signaled to the global, +     *  error handler via {@link RxJavaPlugins#onError(Throwable)}.</dd>, +     * </dl>, +     * @param other the other completable source to observe for the terminal signals, +     * @return the new Completable instance, +     * @since 2.1.17 - experimental, +     */, +    @CheckReturnValue, +    @Experimental, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable takeUntil(CompletableSource other) {, +        ObjectHelper.requireNonNull(other, "other is null");, +, +        return RxJavaPlugins.onAssembly(new CompletableTakeUntilCompletable(this, other));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableTakeUntilCompletable.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators.completable;, +, +import java.util.concurrent.atomic.*;, +, +import io.reactivex.*;, +import io.reactivex.annotations.Experimental;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.disposables.DisposableHelper;, +import io.reactivex.plugins.RxJavaPlugins;, +, +/**, + * Terminates the sequence if either the main or the other Completable terminate., + * @since 2.1.17 - experimental, + */, +@Experimental, +public final class CompletableTakeUntilCompletable extends Completable {, +, +    final Completable source;, +, +    final CompletableSource other;, +, +    public CompletableTakeUntilCompletable(Completable source,, +            CompletableSource other) {, +        this.source = source;, +        this.other = other;, +    }, +, +    @Override, +    protected void subscribeActual(CompletableObserver s) {, +        TakeUntilMainObserver parent = new TakeUntilMainObserver(s);, +        s.onSubscribe(parent);, +]