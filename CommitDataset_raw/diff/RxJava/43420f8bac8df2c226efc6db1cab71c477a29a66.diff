[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Wraps each item emitted by a source Observable in a {@link Timestamped}, +     * object with timestamps provided by the given Scheduler., +     * , +     * @param scheduler the {@link Scheduler} to use as a time source., +     * @return an Observable that emits timestamped items from the source, +     *         Observable with timestamps provided by the given Scheduler, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229003.aspx'>MSDN: Observable.Timestamp</a>, +     */, +    public Observable<Timestamped<T>> timestamp(Scheduler scheduler) {, +        return create(OperationTimestamp.timestamp(this, scheduler));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Wraps each item emitted by a source Observable in a {@link Timestamped}, +     * object with timestamps provided by the given Scheduler., +     * , +     * @param scheduler the {@link Scheduler} to use as a time source., +     * @return an Observable that emits timestamped items from the source, +     *         Observable with timestamps provided by the given Scheduler, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229003.aspx'>MSDN: Observable.Timestamp</a>, +     */, +    public Observable<Timestamped<T>> timestamp(Scheduler scheduler) {, +        return create(OperationTimestamp.timestamp(this, scheduler));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationTimestamp.java, +import rx.Scheduler;, +    /**, +     * Timestamp the source elements based on the timing provided by the scheduler., +     */, +    public static <T> OnSubscribeFunc<Timestamped<T>> timestamp(Observable<? extends T> source, final Scheduler scheduler) {, +        return OperationMap.map(source, new Func1<T, Timestamped<T>>() {, +            @Override, +            public Timestamped<T> call(T value) {, +                return new Timestamped<T>(scheduler.now(), value);, +            }, +        });, +    }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Wraps each item emitted by a source Observable in a {@link Timestamped}, +     * object with timestamps provided by the given Scheduler., +     * , +     * @param scheduler the {@link Scheduler} to use as a time source., +     * @return an Observable that emits timestamped items from the source, +     *         Observable with timestamps provided by the given Scheduler, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229003.aspx'>MSDN: Observable.Timestamp</a>, +     */, +    public Observable<Timestamped<T>> timestamp(Scheduler scheduler) {, +        return create(OperationTimestamp.timestamp(this, scheduler));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationTimestamp.java, +import rx.Scheduler;, +    /**, +     * Timestamp the source elements based on the timing provided by the scheduler., +     */, +    public static <T> OnSubscribeFunc<Timestamped<T>> timestamp(Observable<? extends T> source, final Scheduler scheduler) {, +        return OperationMap.map(source, new Func1<T, Timestamped<T>>() {, +            @Override, +            public Timestamped<T> call(T value) {, +                return new Timestamped<T>(scheduler.now(), value);, +            }, +        });, +    }, +++ b/rxjava-core/src/test/java/rx/operators/OperationTimestampTest.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.concurrent.TimeUnit;, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;, +import org.mockito.Mock;, +import static org.mockito.Mockito.*;, +import org.mockito.MockitoAnnotations;, +import rx.Observable;, +import rx.Observer;, +import rx.concurrency.TestScheduler;, +import rx.subjects.PublishSubject;, +import rx.util.Timestamped;, +, +public class OperationTimestampTest {]