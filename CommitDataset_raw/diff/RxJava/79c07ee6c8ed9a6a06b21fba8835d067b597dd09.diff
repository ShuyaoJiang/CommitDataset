[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationGroupByUntil;, +import rx.operators.OperatorGroupJoin;, +        return create(new OperationGroupByUntil<T, TKey, TValue, TDuration>(this, keySelector, valueSelector, durationSelector));, +        return create(new OperatorGroupJoin<T, T2, D1, D2, R>(this, right, leftDuration, rightDuration, resultSelector));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationGroupByUntil;, +import rx.operators.OperatorGroupJoin;, +        return create(new OperationGroupByUntil<T, TKey, TValue, TDuration>(this, keySelector, valueSelector, durationSelector));, +        return create(new OperatorGroupJoin<T, T2, D1, D2, R>(this, right, leftDuration, rightDuration, resultSelector));, +++ b/rxjava-core/src/main/java/rx/operators/OperationGroupByUntil.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Func1;, +import rx.observables.GroupedObservable;, +import rx.subjects.PublishSubject;, +import rx.subjects.Subject;, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.SerialSubscription;, +, +/**, + * Groups the elements of an observable sequence according to a specified key selector, value selector and duration selector function., + * , + * @see <a href='http://msdn.microsoft.com/en-us/library/hh211932.aspx'>MSDN: Observable.GroupByUntil</a>, + * @see <a href='http://msdn.microsoft.com/en-us/library/hh229433.aspx'>MSDN: Observable.GroupByUntil</a>, + */, +public class OperationGroupByUntil<TSource, TKey, TResult, TDuration> implements OnSubscribeFunc<GroupedObservable<TKey, TResult>> {, +    final Observable<TSource> source;, +    final Func1<? super TSource, ? extends TKey> keySelector;, +    final Func1<? super TSource, ? extends TResult> valueSelector;, +    final Func1<? super GroupedObservable<TKey, TResult>, ? extends Observable<? extends TDuration>> durationSelector;, +, +    public OperationGroupByUntil(Observable<TSource> source,, +            Func1<? super TSource, ? extends TKey> keySelector,, +            Func1<? super TSource, ? extends TResult> valueSelector,, +            Func1<? super GroupedObservable<TKey, TResult>, ? extends Observable<? extends TDuration>> durationSelector) {, +        this.source = source;, +        this.keySelector = keySelector;, +        this.valueSelector = valueSelector;, +        this.durationSelector = durationSelector;, +    }, +, +    @Override, +    public Subscription onSubscribe(Observer<? super GroupedObservable<TKey, TResult>> t1) {, +        SerialSubscription cancel = new SerialSubscription();, +        ResultSink sink = new ResultSink(t1, cancel);, +        cancel.set(sink.run());, +        return cancel;, +    }, +, +    /** The source value sink and group manager. */, +    class ResultSink extends Subscriber<TSource> {, +        /** Guarded by gate. */, +        protected final Observer<? super GroupedObservable<TKey, TResult>> observer;, +        protected final Subscription cancel;, +        protected final CompositeSubscription group = new CompositeSubscription();, +        protected final Object gate = new Object();, +        /** Guarded by gate. */, +        protected final Map<TKey, GroupSubject<TKey, TResult>> map = new HashMap<TKey, GroupSubject<TKey, TResult>>();, +, +        public ResultSink(Observer<? super GroupedObservable<TKey, TResult>> observer, Subscription cancel) {, +            this.observer = observer;, +            this.cancel = cancel;, +        }, +, +        /** Prepare the subscription tree. */, +        public Subscription run() {, +            SerialSubscription toSource = new SerialSubscription();, +            group.add(toSource);, +, +            toSource.set(source.unsafeSubscribe(this));, +, +            return group;, +        }]