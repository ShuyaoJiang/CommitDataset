[+++ b/rxjava-core/src/main/java/rx/Scheduler.java, +import rx.util.functions.Func1;, +import rx.util.functions.Func2;, +     * @param state State to pass into the action., +     * @param action Action to schedule., +     * @return a subscription to be able to unsubscribe from action., +     */, +    <T> Subscription schedule(T state, Func2<Scheduler, T, Subscription> action);, +, +    /**, +     * Schedules a cancelable action to be executed., +     * , +     * @param action Action to schedule., +     * @return a subscription to be able to unsubscribe from action., +     */, +    Subscription schedule(Func1<Scheduler, Subscription> action);, +    , +    /**, +     * Schedules a cancelable action to be executed., +     * , +     * Schedules a cancelable action to be executed in dueTime., +     * , +     * @param state State to pass into the action., +     * @param action Action to schedule., +     * @param dueTime Time the action is due for executing., +     * @param unit Time unit of the due time., +     * @return a subscription to be able to unsubscribe from action., +     */, +    <T> Subscription schedule(T state, Func2<Scheduler, T, Subscription> action, long dueTime, TimeUnit unit);, +, +    /**, +     * Schedules a cancelable action to be executed in dueTime., +     * , +     * @param action Action to schedule., +     * @param dueTime Time the action is due for executing., +     * @param unit Time unit of the due time., +     * @return a subscription to be able to unsubscribe from action., +     */, +    Subscription schedule(Func1<Scheduler, Subscription> action, long dueTime, TimeUnit unit);, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +import rx.util.functions.Func1;, +import rx.util.functions.Func2;, +     * @param state State to pass into the action., +     * @param action Action to schedule., +     * @return a subscription to be able to unsubscribe from action., +     */, +    <T> Subscription schedule(T state, Func2<Scheduler, T, Subscription> action);, +, +    /**, +     * Schedules a cancelable action to be executed., +     * , +     * @param action Action to schedule., +     * @return a subscription to be able to unsubscribe from action., +     */, +    Subscription schedule(Func1<Scheduler, Subscription> action);, +    , +    /**, +     * Schedules a cancelable action to be executed., +     * , +     * Schedules a cancelable action to be executed in dueTime., +     * , +     * @param state State to pass into the action., +     * @param action Action to schedule., +     * @param dueTime Time the action is due for executing., +     * @param unit Time unit of the due time., +     * @return a subscription to be able to unsubscribe from action., +     */, +    <T> Subscription schedule(T state, Func2<Scheduler, T, Subscription> action, long dueTime, TimeUnit unit);, +, +    /**, +     * Schedules a cancelable action to be executed in dueTime., +     * , +     * @param action Action to schedule., +     * @param dueTime Time the action is due for executing., +     * @param unit Time unit of the due time., +     * @return a subscription to be able to unsubscribe from action., +     */, +    Subscription schedule(Func1<Scheduler, Subscription> action, long dueTime, TimeUnit unit);, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/concurrency/AbstractScheduler.java, +import rx.util.functions.Func1;, +import rx.util.functions.Func2;, +    public Subscription schedule(final Func1<Scheduler, Subscription> action) {, +        return schedule(new Func0<Subscription>() {, +            @Override, +            public Subscription call() {, +                return action.call(AbstractScheduler.this);, +            }, +        });, +    }, +, +    @Override, +    public <T> Subscription schedule(final T state, final Func2<Scheduler, T, Subscription> action) {, +      return schedule(new Func0<Subscription>() {, +          @Override, +          public Subscription call() {, +              return action.call(AbstractScheduler.this, state);]