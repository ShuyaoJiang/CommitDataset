[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses time. If the downstream needs a slower rate it should slow , +     * the timer or use something like `onBackpressureDrop`., +     * , +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses time. If the downstream needs a slower rate it should slow , +     * the timer or use something like `onBackpressureDrop`., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses time. If the downstream needs a slower rate it should slow , +     * the timer or use something like `onBackpressureDrop`., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses time. If the downstream needs a slower rate it should slow , +     * the timer or use something like `onBackpressureDrop`., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it is instead controlled by the given Observables and buffers data., +     * It requests `Long.MAX_VALUE` upstream and does not obey downstream requests., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses time. It requests `Long.MAX_VALUE` upstream and does not obey downstream requests., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses time. It requests `Long.MAX_VALUE` upstream and does not obey downstream requests., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses time. It requests `Long.MAX_VALUE` upstream and does not obey downstream requests., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses time. It requests `Long.MAX_VALUE` upstream and does not obey downstream requests., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses time. It requests `Long.MAX_VALUE` upstream and does not obey downstream requests., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses time. It requests `Long.MAX_VALUE` upstream and does not obey downstream requests., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it is instead controlled by the given Observables and buffers data., +     * It requests `Long.MAX_VALUE` upstream and does not obey downstream requests., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it is instead controlled by the `Observable boundary` and buffers data., +     * It requests `Long.MAX_VALUE` upstream and does not obey downstream requests., +     * , +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it is instead controlled by the `Observable boundary` and buffers data., +     * It requests `Long.MAX_VALUE` upstream and does not obey downstream requests., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support upstream backpressure as it is purposefully requesting and caching everything emitted., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support upstream backpressure as it is purposefully requesting and caching everything emitted., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure because by intent it will receive all values and reduce them to a single `onNext`., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure because by intent it will receive all values and reduce them to a single `onNext`., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses the `debounceSelector` to mark boundaries., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses time to control data flow., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as it uses time to control data flow., +     * <p>, +     * <b>Backpressure Support</b>, +     * <p>, +     * This operator does not support backpressure as splitting a stream effectively turns it into a "hot observable" and, +     * blocking any one group would block the entire parent stream. If backpressure is needed on individual groups then , +     * operators such as `onBackpressureDrop` or `onBackpressureBuffer` should be used.]