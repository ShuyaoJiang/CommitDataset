[+++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +import rx.plugins.RxJavaErrorHandler;, +import rx.plugins.RxJavaPlugins;, +, +, +         * or calls to toString() which may throw exceptions., +         *, +         * If a specific behavior has been defined in the {@link RxJavaErrorHandler} plugin, some types, +         * may also have a specific rendering. Non-primitive types not managed by the plugin are rendered, +         * as the classname of the object., +         * <p>, +         * See PR #1401 and Issue #2468 for details., +         * @return a string version of the object if primitive or managed through error plugin,, +         *        otherwise the classname of the object, +, +            String pluggedRendering = RxJavaPlugins.getInstance().getErrorHandler().handleOnNextValueRendering(value);, +            if (pluggedRendering != null) {, +                return pluggedRendering;, +            }, +, +++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +import rx.plugins.RxJavaErrorHandler;, +import rx.plugins.RxJavaPlugins;, +, +, +         * or calls to toString() which may throw exceptions., +         *, +         * If a specific behavior has been defined in the {@link RxJavaErrorHandler} plugin, some types, +         * may also have a specific rendering. Non-primitive types not managed by the plugin are rendered, +         * as the classname of the object., +         * <p>, +         * See PR #1401 and Issue #2468 for details., +         * @return a string version of the object if primitive or managed through error plugin,, +         *        otherwise the classname of the object, +, +            String pluggedRendering = RxJavaPlugins.getInstance().getErrorHandler().handleOnNextValueRendering(value);, +            if (pluggedRendering != null) {, +                return pluggedRendering;, +            }, +, +++ b/src/main/java/rx/internal/operators/OperatorTakeUntil.java, +        final Subscriber<T> parent = new SerializedSubscriber<T>(child);, +        other.unsafeSubscribe(new Subscriber<E>(child) {, +                parent.onCompleted();, +                parent.onError(e);, +                parent.onCompleted();, +        });, +        return parent;, +++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +import rx.plugins.RxJavaErrorHandler;, +import rx.plugins.RxJavaPlugins;, +, +, +         * or calls to toString() which may throw exceptions., +         *, +         * If a specific behavior has been defined in the {@link RxJavaErrorHandler} plugin, some types, +         * may also have a specific rendering. Non-primitive types not managed by the plugin are rendered, +         * as the classname of the object., +         * <p>, +         * See PR #1401 and Issue #2468 for details., +         * @return a string version of the object if primitive or managed through error plugin,, +         *        otherwise the classname of the object, +, +            String pluggedRendering = RxJavaPlugins.getInstance().getErrorHandler().handleOnNextValueRendering(value);, +            if (pluggedRendering != null) {, +                return pluggedRendering;, +            }, +, +++ b/src/main/java/rx/internal/operators/OperatorTakeUntil.java, +        final Subscriber<T> parent = new SerializedSubscriber<T>(child);, +        other.unsafeSubscribe(new Subscriber<E>(child) {, +                parent.onCompleted();, +                parent.onError(e);, +                parent.onCompleted();, +        });, +        return parent;, +++ b/src/main/java/rx/plugins/RxJavaErrorHandler.java, +import rx.annotations.Experimental;, +import rx.exceptions.Exceptions;, +import rx.exceptions.OnErrorThrowable;, + * This plugin is also responsible for augmenting rendering of {@link OnErrorThrowable.OnNextValue}., + * <p>, +    protected static final String ERROR_IN_RENDERING_SUFFIX = ".errorRendering";, +, +    /**, +     * Receives items causing {@link OnErrorThrowable.OnNextValue} and gives a chance to choose the String, +     * representation of the item in the OnNextValue stacktrace rendering. Returns null if this type of item, +     * is not managed and should use default rendering., +     * <p>, +     * Note that primitive types are always rendered as their toString() value., +     * <p>, +     * If a {@code Throwable} is caught when rendering, this will fallback to the item's classname suffixed by, +     * {@value #ERROR_IN_RENDERING_SUFFIX}., +     *, +     * @param item the last emitted item, that caused the exception wrapped in {@link OnErrorThrowable.OnNextValue}., +     * @return a short {@link String} representation of the item if one is known for its type, or null for default., +     */, +    @Experimental, +    public final String handleOnNextValueRendering(Object item) {, +]