[+++ b/src/main/java/io/reactivex/Flowable.java, +     * @return a Single that emits the last item from the source Publisher or notifies Subscribers of an, +    public final Single<T> last() {, +        return RxJavaPlugins.onAssembly(new FlowableLastSingle<T>(this, null));, +     * @return a Single that emits only the last item emitted by the source Publisher, or a default item, +    public final Single<T> last(T defaultItem) {, +        ObjectHelper.requireNonNull(defaultItem, "defaultItem");, +        return RxJavaPlugins.onAssembly(new FlowableLastSingle<T>(this, defaultItem));, +        return scan(seed, reducer).takeLast(1).single(); // TODO, +        return scanWith(seedSupplier, reducer).takeLast(1).single();, +++ b/src/main/java/io/reactivex/Flowable.java, +     * @return a Single that emits the last item from the source Publisher or notifies Subscribers of an, +    public final Single<T> last() {, +        return RxJavaPlugins.onAssembly(new FlowableLastSingle<T>(this, null));, +     * @return a Single that emits only the last item emitted by the source Publisher, or a default item, +    public final Single<T> last(T defaultItem) {, +        ObjectHelper.requireNonNull(defaultItem, "defaultItem");, +        return RxJavaPlugins.onAssembly(new FlowableLastSingle<T>(this, defaultItem));, +        return scan(seed, reducer).takeLast(1).single(); // TODO, +        return scanWith(seedSupplier, reducer).takeLast(1).single();, +++ b/src/main/java/io/reactivex/Observable.java, +    public final Single<T> last() {, +        return RxJavaPlugins.onAssembly(new ObservableLastSingle<T>(this, null));, +    public final Single<T> last(T defaultItem) {, +        ObjectHelper.requireNonNull(defaultItem, "defaultItem is null");, +        return RxJavaPlugins.onAssembly(new ObservableLastSingle<T>(this, defaultItem));, +        return scan(reducer).takeLast(1).single();, +        return scan(seed, reducer).takeLast(1).single();, +        return scanWith(seedSupplier, reducer).takeLast(1).single();, +++ b/src/main/java/io/reactivex/Flowable.java, +     * @return a Single that emits the last item from the source Publisher or notifies Subscribers of an, +    public final Single<T> last() {, +        return RxJavaPlugins.onAssembly(new FlowableLastSingle<T>(this, null));, +     * @return a Single that emits only the last item emitted by the source Publisher, or a default item, +    public final Single<T> last(T defaultItem) {, +        ObjectHelper.requireNonNull(defaultItem, "defaultItem");, +        return RxJavaPlugins.onAssembly(new FlowableLastSingle<T>(this, defaultItem));, +        return scan(seed, reducer).takeLast(1).single(); // TODO, +        return scanWith(seedSupplier, reducer).takeLast(1).single();, +++ b/src/main/java/io/reactivex/Observable.java, +    public final Single<T> last() {, +        return RxJavaPlugins.onAssembly(new ObservableLastSingle<T>(this, null));, +    public final Single<T> last(T defaultItem) {, +        ObjectHelper.requireNonNull(defaultItem, "defaultItem is null");, +        return RxJavaPlugins.onAssembly(new ObservableLastSingle<T>(this, defaultItem));, +        return scan(reducer).takeLast(1).single();, +        return scan(seed, reducer).takeLast(1).single();, +        return scanWith(seedSupplier, reducer).takeLast(1).single();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableLastSingle.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators.flowable;, +, +import java.util.NoSuchElementException;, +, +import org.reactivestreams.*;, +, +import io.reactivex.*;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +, +/**, + * Consumes the source Publisher and emits its last item, the defaultItem, + * if empty or a NoSuchElementException if even the defaultItem is null., + * , + * @param <T> the value type, + */, +public final class FlowableLastSingle<T> extends Single<T> {, +, +    final Publisher<T> source;, +    , +    final T defaultItem;, +    , +    public FlowableLastSingle(Publisher<T> source, T defaultItem) {, +        this.source = source;, +        this.defaultItem = defaultItem;, +    }, +, +    // TODO fuse back to Flowable, +    , +    @Override, +    protected void subscribeActual(SingleObserver<? super T> observer) {, +        source.subscribe(new LastSubscriber<T>(observer, defaultItem));, +    }, +    , +    static final class LastSubscriber<T> implements Subscriber<T>, Disposable {, +        , +        final SingleObserver<? super T> actual;, +        ]