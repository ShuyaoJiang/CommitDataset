[+++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +            if (mergeProducer.requested() != Long.MAX_VALUE) {, +            if (mergeProducer.requested() == Long.MAX_VALUE) {, +                    long r = mergeProducer.requested();, +                        mergeProducer.getAndAdd(-1);, +                long r = mergeProducer.requested();, +                    mergeProducer.getAndAdd(-emittedWhileDraining);, +                    long r = mergeProducer.requested();, +        private volatile long rq = 0;, +        static final AtomicLongFieldUpdater<MergeProducer> RQ = AtomicLongFieldUpdater.newUpdater(MergeProducer.class, "rq");, +, +        public long requested() {, +            return rq;, +        }, +        public long getAndAdd(long n) {, +            return RQ.getAndAdd(this, n);, +        }, +            if (rq == Long.MAX_VALUE) {, +                rq = Long.MAX_VALUE;, +                BackpressureUtils.getAndAddRequest(RQ, this, n);, +                        if (producer.requested() > 0 && q.count() == 0) {, +                                producer.getAndAdd(-1);, +            long toEmit = producer.requested();, +            producer.getAndAdd(-emitted);, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +            if (mergeProducer.requested() != Long.MAX_VALUE) {, +            if (mergeProducer.requested() == Long.MAX_VALUE) {, +                    long r = mergeProducer.requested();, +                        mergeProducer.getAndAdd(-1);, +                long r = mergeProducer.requested();, +                    mergeProducer.getAndAdd(-emittedWhileDraining);, +                    long r = mergeProducer.requested();, +        private volatile long rq = 0;, +        static final AtomicLongFieldUpdater<MergeProducer> RQ = AtomicLongFieldUpdater.newUpdater(MergeProducer.class, "rq");, +, +        public long requested() {, +            return rq;, +        }, +        public long getAndAdd(long n) {, +            return RQ.getAndAdd(this, n);, +        }, +            if (rq == Long.MAX_VALUE) {, +                rq = Long.MAX_VALUE;, +                BackpressureUtils.getAndAddRequest(RQ, this, n);, +                        if (producer.requested() > 0 && q.count() == 0) {, +                                producer.getAndAdd(-1);, +            long toEmit = producer.requested();, +            producer.getAndAdd(-emitted);, +++ b/src/main/java/rx/internal/operators/OperatorSwitch.java, +        SwitchSubscriber<T> sws = new SwitchSubscriber<T>(child);, +        child.add(sws);, +        return sws;, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +            if (mergeProducer.requested() != Long.MAX_VALUE) {, +            if (mergeProducer.requested() == Long.MAX_VALUE) {, +                    long r = mergeProducer.requested();, +                        mergeProducer.getAndAdd(-1);, +                long r = mergeProducer.requested();, +                    mergeProducer.getAndAdd(-emittedWhileDraining);, +                    long r = mergeProducer.requested();, +        private volatile long rq = 0;, +        static final AtomicLongFieldUpdater<MergeProducer> RQ = AtomicLongFieldUpdater.newUpdater(MergeProducer.class, "rq");, +, +        public long requested() {, +            return rq;, +        }, +        public long getAndAdd(long n) {, +            return RQ.getAndAdd(this, n);, +        }, +            if (rq == Long.MAX_VALUE) {, +                rq = Long.MAX_VALUE;, +                BackpressureUtils.getAndAddRequest(RQ, this, n);, +                        if (producer.requested() > 0 && q.count() == 0) {, +                                producer.getAndAdd(-1);, +            long toEmit = producer.requested();, +            producer.getAndAdd(-emitted);, +++ b/src/main/java/rx/internal/operators/OperatorSwitch.java, +        SwitchSubscriber<T> sws = new SwitchSubscriber<T>(child);, +        child.add(sws);, +        return sws;, +++ b/src/test/java/rx/internal/operators/OperatorSwitchTest.java, +import static org.mockito.Mockito.*;, +import org.junit.Assert;, +import rx.Observable;, +import rx.Observer;, +import rx.Producer;, +import rx.Scheduler;, +import rx.Subscriber;, +import rx.functions.Func1;, +    /** The upstream producer hijacked the switch producer stopping the requests aimed at the inner observables. */, +    @Test, +    public void testIssue2654() {, +        Observable<String> oneItem = Observable.just("Hello").mergeWith(Observable.<String>never());, +        , +        Observable<String> src = oneItem.switchMap(new Func1<String, Observable<String>>() {, +            @Override, +            public Observable<String> call(final String s) {, +                return Observable.just(s), +                        .mergeWith(Observable.interval(10, TimeUnit.MILLISECONDS), +                        .map(new Func1<Long, String>() {]