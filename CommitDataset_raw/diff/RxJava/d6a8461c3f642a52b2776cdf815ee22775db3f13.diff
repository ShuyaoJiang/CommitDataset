[+++ b/src/main/java/io/reactivex/Flowable.java, +     *            the type of item emitted by the resulting Iterable, +     *            the type of item emitted by the resulting Iterable, +     *            the type of item emitted by the resulting Iterable, +++ b/src/main/java/io/reactivex/Flowable.java, +     *            the type of item emitted by the resulting Iterable, +     *            the type of item emitted by the resulting Iterable, +     *            the type of item emitted by the resulting Iterable, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Returns a Flowable that merges each item emitted by the source Maybe with the values in an, +     * Iterable corresponding to that item that is generated by a selector., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/mergeMapIterable.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator honors backpressure from downstream.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code flattenAsFlowable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <U>, +     *            the type of item emitted by the resulting Iterable, +     * @param mapper, +     *            a function that returns an Iterable sequence of values for when given an item emitted by the, +     *            source Maybe, +     * @return the new Flowable instance, +     * @see <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>, +     */, +    @BackpressureSupport(BackpressureKind.FULL), +    @SchedulerSupport(SchedulerSupport.NONE), +    public final <U> Flowable<U> flattenAsFlowable(final Function<? super T, ? extends Iterable<? extends U>> mapper) {, +        return new MaybeFlatMapIterableFlowable<T, U>(this, mapper);, +    }, +, +    /**, +     * Returns an Observable that maps a success value into an Iterable and emits its items., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/mergeMapIterable.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code flattenAsObservable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <U>, +     *            the type of item emitted by the resulting Iterable, +     * @param mapper, +     *            a function that returns an Iterable sequence of values for when given an item emitted by the, +     *            source Maybe, +     * @return the new Observable instance, +     * @see <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final <U> Observable<U> flattenAsObservable(final Function<? super T, ? extends Iterable<? extends U>> mapper) {, +        return new MaybeFlatMapIterableObservable<T, U>(this, mapper);, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Flowable.java, +     *            the type of item emitted by the resulting Iterable, +     *            the type of item emitted by the resulting Iterable, +     *            the type of item emitted by the resulting Iterable, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Returns a Flowable that merges each item emitted by the source Maybe with the values in an, +     * Iterable corresponding to that item that is generated by a selector., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/mergeMapIterable.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator honors backpressure from downstream.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code flattenAsFlowable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <U>, +     *            the type of item emitted by the resulting Iterable, +     * @param mapper, +     *            a function that returns an Iterable sequence of values for when given an item emitted by the, +     *            source Maybe, +     * @return the new Flowable instance, +     * @see <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>, +     */, +    @BackpressureSupport(BackpressureKind.FULL), +    @SchedulerSupport(SchedulerSupport.NONE), +    public final <U> Flowable<U> flattenAsFlowable(final Function<? super T, ? extends Iterable<? extends U>> mapper) {, +        return new MaybeFlatMapIterableFlowable<T, U>(this, mapper);, +    }, +, +    /**, +     * Returns an Observable that maps a success value into an Iterable and emits its items., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/mergeMapIterable.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code flattenAsObservable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <U>, +     *            the type of item emitted by the resulting Iterable, +     * @param mapper, +     *            a function that returns an Iterable sequence of values for when given an item emitted by the]