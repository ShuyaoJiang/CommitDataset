[+++ b/src/jmh/java/io/reactivex/InputWithIncrementingInteger.java, +    public Flowable<Integer> flowable;, +        flowable = Flowable.range(0, size);, +++ b/src/jmh/java/io/reactivex/InputWithIncrementingInteger.java, +    public Flowable<Integer> flowable;, +        flowable = Flowable.range(0, size);, +++ b/src/jmh/java/io/reactivex/OperatorFlatMapPerf.java, +        input.flowable.flatMap(new Function<Integer, Publisher<Integer>>() {, +        input.flowable.flatMap(new Function<Integer, Publisher<Integer>>() {, +                    return input.flowable;, +++ b/src/jmh/java/io/reactivex/InputWithIncrementingInteger.java, +    public Flowable<Integer> flowable;, +        flowable = Flowable.range(0, size);, +++ b/src/jmh/java/io/reactivex/OperatorFlatMapPerf.java, +        input.flowable.flatMap(new Function<Integer, Publisher<Integer>>() {, +        input.flowable.flatMap(new Function<Integer, Publisher<Integer>>() {, +                    return input.flowable;, +++ b/src/jmh/java/io/reactivex/OperatorMergePerf.java, +        Flowable<Flowable<Integer>> os = input.flowable.map(new Function<Integer, Flowable<Integer>>() {, +        Flowable<Flowable<Integer>> os = input.flowable.map(new Function<Integer, Flowable<Integer>>() {, +++ b/src/jmh/java/io/reactivex/InputWithIncrementingInteger.java, +    public Flowable<Integer> flowable;, +        flowable = Flowable.range(0, size);, +++ b/src/jmh/java/io/reactivex/OperatorFlatMapPerf.java, +        input.flowable.flatMap(new Function<Integer, Publisher<Integer>>() {, +        input.flowable.flatMap(new Function<Integer, Publisher<Integer>>() {, +                    return input.flowable;, +++ b/src/jmh/java/io/reactivex/OperatorMergePerf.java, +        Flowable<Flowable<Integer>> os = input.flowable.map(new Function<Integer, Flowable<Integer>>() {, +        Flowable<Flowable<Integer>> os = input.flowable.map(new Function<Integer, Flowable<Integer>>() {, +++ b/src/main/java/io/reactivex/Completable.java, +        EmptyCompletableObserver observer = new EmptyCompletableObserver();, +        subscribe(observer);, +        return observer;, +    public final void subscribe(CompletableObserver observer) {, +        ObjectHelper.requireNonNull(observer, "s is null");, +            observer = RxJavaPlugins.onSubscribe(this, observer);, +            subscribeActual(observer);, +     * @param observer the CompletableObserver instance, never null, +    protected abstract void subscribeActual(CompletableObserver observer);, +        CallbackCompletableObserver observer = new CallbackCompletableObserver(onError, onComplete);, +        subscribe(observer);, +        return observer;, +        CallbackCompletableObserver observer = new CallbackCompletableObserver(onComplete);, +        subscribe(observer);, +        return observer;, +++ b/src/jmh/java/io/reactivex/InputWithIncrementingInteger.java, +    public Flowable<Integer> flowable;, +        flowable = Flowable.range(0, size);, +++ b/src/jmh/java/io/reactivex/OperatorFlatMapPerf.java, +        input.flowable.flatMap(new Function<Integer, Publisher<Integer>>() {, +        input.flowable.flatMap(new Function<Integer, Publisher<Integer>>() {, +                    return input.flowable;, +++ b/src/jmh/java/io/reactivex/OperatorMergePerf.java, +        Flowable<Flowable<Integer>> os = input.flowable.map(new Function<Integer, Flowable<Integer>>() {, +        Flowable<Flowable<Integer>> os = input.flowable.map(new Function<Integer, Flowable<Integer>>() {, +++ b/src/main/java/io/reactivex/Completable.java, +        EmptyCompletableObserver observer = new EmptyCompletableObserver();, +        subscribe(observer);, +        return observer;, +    public final void subscribe(CompletableObserver observer) {, +        ObjectHelper.requireNonNull(observer, "s is null");, +            observer = RxJavaPlugins.onSubscribe(this, observer);, +            subscribeActual(observer);, +     * @param observer the CompletableObserver instance, never null, +    protected abstract void subscribeActual(CompletableObserver observer);, +        CallbackCompletableObserver observer = new CallbackCompletableObserver(onError, onComplete);, +        subscribe(observer);, +        return observer;, +        CallbackCompletableObserver observer = new CallbackCompletableObserver(onComplete);, +        subscribe(observer);, +        return observer;, +++ b/src/main/java/io/reactivex/FlowableOperator.java, +     * @param subscriber the child Subscriber instance, +    Subscriber<? super Upstream> apply(@NonNull Subscriber<? super Downstream> subscriber) throws Exception;, +++ b/src/jmh/java/io/reactivex/InputWithIncrementingInteger.java, +    public Flowable<Integer> flowable;, +        flowable = Flowable.range(0, size);, +++ b/src/jmh/java/io/reactivex/OperatorFlatMapPerf.java, +        input.flowable.flatMap(new Function<Integer, Publisher<Integer>>() {, +        input.flowable.flatMap(new Function<Integer, Publisher<Integer>>() {, +                    return input.flowable;, +++ b/src/jmh/java/io/reactivex/OperatorMergePerf.java, +        Flowable<Flowable<Integer>> os = input.flowable.map(new Function<Integer, Flowable<Integer>>() {, +        Flowable<Flowable<Integer>> os = input.flowable.map(new Function<Integer, Flowable<Integer>>() {, +++ b/src/main/java/io/reactivex/Completable.java, +        EmptyCompletableObserver observer = new EmptyCompletableObserver();, +        subscribe(observer);, +        return observer;, +    public final void subscribe(CompletableObserver observer) {, +        ObjectHelper.requireNonNull(observer, "s is null");, +            observer = RxJavaPlugins.onSubscribe(this, observer);, +            subscribeActual(observer);, +     * @param observer the CompletableObserver instance, never null, +    protected abstract void subscribeActual(CompletableObserver observer);, +        CallbackCompletableObserver observer = new CallbackCompletableObserver(onError, onComplete);, +        subscribe(observer);, +        return observer;, +        CallbackCompletableObserver observer = new CallbackCompletableObserver(onComplete);, +        subscribe(observer);]