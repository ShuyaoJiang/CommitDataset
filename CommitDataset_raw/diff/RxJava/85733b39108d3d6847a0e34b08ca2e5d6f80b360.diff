[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * them and invokes the Observer's {@link Observer#onCompleted()} method., +     * notifying all Observers. Unless the documentation for a particular, +     * them and invokes the Observer's {@link Observer#onCompleted()} method., +     * notifying all Observers. Unless the documentation for a particular, +     *            the {@link Scheduler} on which Observers subscribe to the Observable, +     *             if an argument to <code>subscribe()</code> is <code>null</code>, +     * Returns a connectable Observable that upon connection causes the source Observable to, +     *            the subject for the connectable Observable to push source items into, +     * @return a connectable Observable that upon connection causes the source Observable to push, +     * an Observable that invokes {@link Observer#onError(Exception)} when the Observer subscribes., +     *            the type of item emitted by the Observable, +     * should invoke the Observer's <code>onNext</code>, <code>onError</code>, and, +     * A well-formed Observable must invoke either the {@link Observer}'s <code>onCompleted</code>, +     *            the type of the items that this Observable emits, +     *            a function that accepts an <code>Observer<T></code>, invokes its, +     * This method accepts {@link Object} to allow different languages to pass in methods using, +     * should invoke the Observer's <code>onNext</code>, <code>onError</code>, and, +     * A well-formed Observable must invoke either the {@link Observer}'s <code>onCompleted</code>, +     *            the type of the items that this Observable emits, +     *            a function that accepts an <code>Observer<T></code>, invokes its, +     *            the type of the items (ostensibly) emitted by the Observable, +     * Returns an Observable that invokes <code>onError</code> when an {@link Observer} subscribes, +     * to it., +     *            the type of the items (ostensibly) emitted by the Observable, +     * @return an Observable that invokes <code>onError</code> when an {@link Observer} subscribes, +     * Filters an Observable by discarding any items it emits that do not meet some test., +     * Filters an Observable by discarding any items it emits that do not meet some test., +     * Filters an Observable by discarding any items it emits that do not meet some test., +     * Converts an {@link Iterable} sequence to an Observable., +     * Converts an Array to an Observable., +     * Generates an Observable that emits a sequence of integral numbers within a specified range., +     *            the type of the items emitted by the Observable, +     *            the type of the items emitted by the Observable, +     * @return the source Observable modified so that its Observers are notified on the specified, +     * Returns an Observable that invokes the Observable factory whenever a new Observer, +     * The defer operator allows you to defer or delay emitting items from an Observable, +     * until such time as an Observer subscribes to the Observable. This allows an Observer to, +     * easily obtain an updates or refreshed version of the sequence., +     *            the Observable factory function to invoke for each Observer that subscribes to, +     *            the resulting Observable, +     *            the type of the items emitted by the Observable, +     * @return an Observable whose Observers trigger an invocation of the given Observable factory, +     * Returns an Observable that invokes the Observable factory whenever a new Observer, +     * The defer operator allows you to defer or delay emitting items from an Observable, +     * until such time as an Observer subscribes to the Observable. This allows an Observer to, +     * easily obtain an updates or refreshed version of the sequence., +     *            the Observable factory function to invoke for each Observer that subscribes to, +     *            the resulting Observable, +     *            the type of the items emitted by the Observable, +     * @return an Observable whose Observers trigger an invocation of the given Observable factory, +     * Returns an Observable that emits a single item and then completes., +     *            the item to pass to the Observer's <code>onNext</code> method, +     *            the type of that item, +     * @return an Observable that emits a single item and then completes, +     * emits the results of these transformations as its own Observable., +     *            a function to apply to each item emitted by the source Observable, +     * emits the results of these transformations as its own Observable., +     *            a function to apply to each item emitted by the source Observable, +     * Creates a new Observable by applying a function that you supply to each item emitted by, +     * the source Observable, where that function itself returns an Observable that emits items,, +     * and then merges the results of that function applied to every item emitted by the original, +     * Observable, emitting these merged results to its Observers., +     * @return an Observable that emits the result of applying the transformation function to each, +     *         item emitted by the source Observable and merging the results of the Observables, +     *         obtained from this transformation, +     * Creates a new Observable by applying a function that you supply to each item emitted by, +     * the source Observable, where that function itself returns an Observable that emits items,, +     * and then merges the results of that function applied to every item emitted by the original, +     * Observable, emitting these merged results to its Observers., +     * @return an Observable that emits the result of applying the transformation function to each, +     *         item emitted by the source Observable and merging the results of the Observables, +     *         obtained from this transformation, +     * Turns all of the notifications from an Observable into <code>onNext</code> emissions, and, +     * marks them with their original notification types within <code>Notification</code> objects., +     * @return an Observable that emits items that are the result of materializing the, +     *         notifications of the source Observable., +     * <code>Notification</code> objects emitted by a source Observable into the items or, +     *            items emitted by an Observable, +     * @return an Observable that emits the items and notifications embedded in the, +     * Flattens a list of Observables into one Observable sequence, without any transformation., +     * You can combine the items emitted by multiple Observables so that they act like a single, +     * @return an Observable that emits items that are the result of flattening the, +     *         <code>source</code> list of Observables, +     * Flattens the Observables emitted by an Observable into one Observable sequence, without any, +     * transformation., +     * You can combine the items emitted by multiple Observables so that they act like a single, +     * @return an Observable that emits items that are the result of flattening the items emitted, +     *         by the Observables emitted by the <code>source</code> Observable, +     * Flattens a series of Observables into one Observable sequence, without any transformation., +     * You can combine items emitted by multiple Observables so that they act like a single, +     * @return an Observable that emits items that are the result of flattening the items emitted, +     *         by the <code>source</code> Observables, +     * Returns an Observable that emits the items from the <code>source</code> Observable until, +     * the <code>other</code> Observable emits an item., +     *            the Observable whose first emitted item will cause <code>takeUntil</code> to stop, +     *            emitting items from the <code>source</code> Observable, +     * @return an Observable that emits the items of <code>source</code> until such time as, +     *            a series of Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by]