[+++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        assertEquals("three", Observable.toObservable("one", "two", "three").last()), +    }, +, +    @Test, +    public void testLastWithPredicate() {, +        assertEquals("two", Observable.toObservable("one", "two", "three").last({ x -> x.length() == 3})), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        assertEquals("three", Observable.toObservable("one", "two", "three").last()), +    }, +, +    @Test, +    public void testLastWithPredicate() {, +        assertEquals("two", Observable.toObservable("one", "two", "three").last({ x -> x.length() == 3})), +++ b/language-adaptors/rxjava-jruby/src/main/java/rx/lang/jruby/JRubyAdaptor.java, +            String script = "mockApiCall.getObservable().takeLast(1).subscribe(lambda{|result| a.received(result)})";, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        assertEquals("three", Observable.toObservable("one", "two", "three").last()), +    }, +, +    @Test, +    public void testLastWithPredicate() {, +        assertEquals("two", Observable.toObservable("one", "two", "three").last({ x -> x.length() == 3})), +++ b/language-adaptors/rxjava-jruby/src/main/java/rx/lang/jruby/JRubyAdaptor.java, +            String script = "mockApiCall.getObservable().takeLast(1).subscribe(lambda{|result| a.received(result)})";, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ScalaAdaptor.scala, +    @Test def testTakeLast() {, +        numbers.takeLast(1).subscribe((callback: Int) => {, +            println("testTakeLast: onNext -> got " + callback), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        assertEquals("three", Observable.toObservable("one", "two", "three").last()), +    }, +, +    @Test, +    public void testLastWithPredicate() {, +        assertEquals("two", Observable.toObservable("one", "two", "three").last({ x -> x.length() == 3})), +++ b/language-adaptors/rxjava-jruby/src/main/java/rx/lang/jruby/JRubyAdaptor.java, +            String script = "mockApiCall.getObservable().takeLast(1).subscribe(lambda{|result| a.received(result)})";, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ScalaAdaptor.scala, +    @Test def testTakeLast() {, +        numbers.takeLast(1).subscribe((callback: Int) => {, +            println("testTakeLast: onNext -> got " + callback), +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static org.junit.Assert.assertNull;, +import rx.operators.OperationConcat;, +import rx.operators.OperationFilter;, +import rx.operators.OperationMap;, +import rx.operators.OperationMaterialize;, +import rx.operators.OperationMerge;, +import rx.operators.OperationMergeDelayError;, +import rx.operators.OperationNext;, +import rx.operators.OperationOnErrorResumeNextViaFunction;, +import rx.operators.OperationOnErrorResumeNextViaObservable;, +import rx.operators.OperationOnErrorReturn;, +import rx.operators.OperationScan;, +import rx.operators.OperationSkip;, +import rx.operators.OperationSynchronize;, +import rx.operators.OperationTake;, +import rx.operators.OperationTakeLast;, +import rx.operators.OperationToObservableFuture;, +import rx.operators.OperationToObservableIterable;, +import rx.operators.OperationToObservableList;, +import rx.operators.OperationToObservableSortedList;, +import rx.operators.OperationZip;, +     * Returns the last element of an observable sequence with a specified source., +     * @param that the source Observable, +     * @return the last element in the observable sequence., +    public static <T> T last(final Observable<T> that) {, +        T result = null;, +        for (T value : that.toIterable()) {, +            result = value;, +        }, +        return result;, +    }, +, +    /**, +     * Returns the last element of an observable sequence that matches the predicate., +     *, +     * @param that the source Observable, +     * @param predicate a predicate function to evaluate for elements in the sequence., +     * @return the last element in the observable sequence., +     */, +    public static <T> T last(final Observable<T> that, final Func1<T, Boolean> predicate) {, +        return last(that.filter(predicate));, +        return takeLast(_create(OperationScan.scan(sequence, accumulator)), 1);, +        return takeLast(_create(OperationScan.scan(sequence, initialValue, accumulator)), 1);, +     * Returns the last element of an observable sequence with a specified source., +     * @return the last element in the observable sequence., +    public T last() {, +     * Returns the last element of an observable sequence that matches the predicate., +     *, +     * @param predicate a predicate function to evaluate for elements in the sequence., +     * @return the last element in the observable sequence., +     */, +    public T last(final Func1<T, Boolean> predicate) {, +        return last(this, predicate);, +    }, +, +    /**, +     * Returns the last element of an observable sequence that matches the predicate.]