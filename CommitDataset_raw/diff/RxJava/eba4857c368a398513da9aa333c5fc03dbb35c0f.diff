[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/RxImplicits.scala, +        val merged = Observable.merge[Int](observable), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/RxImplicits.scala, +        val merged = Observable.merge[Int](observable), +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> merge(List<? extends Observable<? extends T>> source) {, +    public static <T> Observable<T> merge(Observable<? extends Observable<? extends T>> source) {, +    public static <T> Observable<T> merge(Observable<? extends T>... source) {, +    public static <T> Observable<T> concat(Observable<? extends T>... source) {, +    public static <T> Observable<T> mergeDelayError(List<? extends Observable<? extends T>> source) {, +    public static <T> Observable<T> mergeDelayError(Observable<? extends Observable<? extends T>> source) {, +    public static <T> Observable<T> mergeDelayError(Observable<? extends T>... source) {, +    public static <T> Observable<T> switchDo(Observable<? extends Observable<? extends T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo((Observable<? extends Observable<? extends T>>) this));, +    public static <T> Observable<T> synchronize(Observable<? extends T> observable) {, +    public static <T> Observable<Boolean> sequenceEqual(Observable<? extends T> first, Observable<? extends T> second) {, +    public static <T> Observable<Boolean> sequenceEqual(Observable<? extends T> first, Observable<? extends T> second, Func2<? super T, ? super T, Boolean> equality) {, +    public static <T1, T2, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Func2<? super T1, ? super T2, ? extends R> combineFunction) {, +    public static <T1, T2, T3, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Func3<? super T1, ? super T2, ? super T3, ? extends R> combineFunction) {, +    public static <T1, T2, T3, T4, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, , +            Func4<? super T1, ? super T2, ? super T3, ? super T4, ? extends R> combineFunction) {, +     * @see #combineLatest(Observable, Observable, Func2), +     */, +    public static <T1, T2, T3, T4, T5, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, , +            Func5<? super T1, ? super T2, ? super T3, ? super T4, ? super T5, ? extends R> combineFunction) {, +        return create(OperationCombineLatest.combineLatest(o1, o2, o3, o4, o5, combineFunction));, +    }, +, +    /**, +     * @see #combineLatest(Observable, Observable, Func2), +     */, +    public static <T1, T2, T3, T4, T5, T6, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6, , +            Func6<? super T1, ? super T2, ? super T3, ? super T4, ? super T5, ? super T6, ? extends R> combineFunction) {, +        return create(OperationCombineLatest.combineLatest(o1, o2, o3, o4, o5, o6, combineFunction));, +    }, +, +    /**, +     * @see #combineLatest(Observable, Observable, Func2), +     */, +    public static <T1, T2, T3, T4, T5, T6, T7, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6, Observable<? extends T7> o7, , +            Func7<? super T1, ? super T2, ? super T3, ? super T4, ? super T5, ? super T6, ? super T7, ? extends R> combineFunction) {, +        return create(OperationCombineLatest.combineLatest(o1, o2, o3, o4, o5, o6, o7, combineFunction));, +    }, +, +    /**, +     * @see #combineLatest(Observable, Observable, Func2), +     */, +    public static <T1, T2, T3, T4, T5, T6, T7, T8, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6, Observable<? extends T7> o7, Observable<? extends T8> o8, , +            Func8<? super T1, ? super T2, ? super T3, ? super T4, ? super T5, ? super T6, ? super T7, ? super T8, ? extends R> combineFunction) {, +        return create(OperationCombineLatest.combineLatest(o1, o2, o3, o4, o5, o6, o7, o8, combineFunction));, +    }, +, +    /**, +     * @see #combineLatest(Observable, Observable, Func2), +     */, +    public static <T1, T2, T3, T4, T5, T6, T7, T8, T9, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6, Observable<? extends T7> o7, Observable<? extends T8> o8, Observable<? extends T9> o9, , +            Func9<? super T1, ? super T2, ? super T3, ? super T4, ? super T5, ? super T6, ? super T7, ? super T8, ? super T9, ? extends R> combineFunction) {, +        return create(OperationCombineLatest.combineLatest(o1, o2, o3, o4, o5, o6, o7, o8, o9, combineFunction));, +    }, +, +    /**, +    public Observable<List<T>> buffer(Func0<? extends Observable<? extends BufferClosing>> bufferClosingSelector) {, +    public Observable<List<T>> buffer(Observable<? extends BufferOpening> bufferOpenings, Func1<? super BufferOpening, ? extends Observable<? extends BufferClosing>> bufferClosingSelector) {, +    public static <R> Observable<R> zip(Observable<? extends Observable<?>> ws, final FuncN<? extends R> zipFunction) {, +        return ws.toList().mapMany(new Func1<List<? extends Observable<?>>, Observable<? extends R>>() {, +            public Observable<R> call(List<? extends Observable<?>> wsList) {, +    public static <R> Observable<R> zip(Collection<? extends Observable<?>> ws, FuncN<? extends R> zipFunction) {, +    public <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<? extends R>> func) {, +    public <R> Observable<R> mapMany(Func1<? super T, ? extends Observable<? extends R>> func) {, +        return create(OperationDematerialize.dematerialize((Observable<? extends Notification<T2>>) this));, +    public Observable<T> onErrorResumeNext(final Func1<? super Throwable, ? extends Observable<? extends T>> resumeFunction) {, +    public Observable<T> onErrorResumeNext(final Observable<? extends T> resumeSequence) {, +    public Observable<T> onExceptionResumeNext(final Observable<? extends T> resumeSequence) {, +    public <E> Observable<T> takeUntil(Observable<? extends E> other) {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/RxImplicits.scala, +        val merged = Observable.merge[Int](observable), +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> merge(List<? extends Observable<? extends T>> source) {, +    public static <T> Observable<T> merge(Observable<? extends Observable<? extends T>> source) {, +    public static <T> Observable<T> merge(Observable<? extends T>... source) {, +    public static <T> Observable<T> concat(Observable<? extends T>... source) {, +    public static <T> Observable<T> mergeDelayError(List<? extends Observable<? extends T>> source) {, +    public static <T> Observable<T> mergeDelayError(Observable<? extends Observable<? extends T>> source) {, +    public static <T> Observable<T> mergeDelayError(Observable<? extends T>... source) {, +    public static <T> Observable<T> switchDo(Observable<? extends Observable<? extends T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo((Observable<? extends Observable<? extends T>>) this));, +    public static <T> Observable<T> synchronize(Observable<? extends T> observable) {, +    public static <T> Observable<Boolean> sequenceEqual(Observable<? extends T> first, Observable<? extends T> second) {, +    public static <T> Observable<Boolean> sequenceEqual(Observable<? extends T> first, Observable<? extends T> second, Func2<? super T, ? super T, Boolean> equality) {, +    public static <T1, T2, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Func2<? super T1, ? super T2, ? extends R> combineFunction) {, +    public static <T1, T2, T3, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Func3<? super T1, ? super T2, ? super T3, ? extends R> combineFunction) {, +    public static <T1, T2, T3, T4, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, , +            Func4<? super T1, ? super T2, ? super T3, ? super T4, ? extends R> combineFunction) {, +     * @see #combineLatest(Observable, Observable, Func2), +     */, +    public static <T1, T2, T3, T4, T5, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, , +            Func5<? super T1, ? super T2, ? super T3, ? super T4, ? super T5, ? extends R> combineFunction) {, +        return create(OperationCombineLatest.combineLatest(o1, o2, o3, o4, o5, combineFunction));, +    }, +]