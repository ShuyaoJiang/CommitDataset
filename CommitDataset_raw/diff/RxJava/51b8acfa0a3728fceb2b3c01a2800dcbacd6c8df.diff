[+++ b/rxjava-core/src/main/java/rx/Observable.java, + * The Observable interface that implements the Reactive Pattern., + * This interface provides overloaded methods for subscribing as well as, + * delegate methods to the various operators., + * The documentation for this interface makes use of marble diagrams. The, + * following legend explains these diagrams:, + *            the type of the item emitted by the Observable, +     * Function interface for work to be performed when an {@link Observable} is subscribed to via, +     * {@link Observable#subscribe(Observer)}, +     * NOTE: Use {@link #create(OnSubscribeFunc)} to create an Observable, +     * instead of this constructor unless you specifically have a need for, +     * inheritance., +     * Given multiple Observables, return the one that first emits an item., +     *            Observable sources competing to react first, +     * @return an Observable that reflects whichever of the given Observables, +     *         reacted first, +     * Given multiple Observables, return the one that first emits an item., +     * @return an Observable that reflects whichever of the given Observables, +     *         reacted first, +     * Given multiple Observables, return the one that first emits an item., +     * @return an Observable that reflects whichever of the given Observables, +     *         reacted first, +     * Given multiple Observables, return the one that first emits an item., +     * @return an Observable that reflects whichever of the given Observables, +     *         reacted first, +     * Given multiple Observables, return the one that first emits an item., +     * @return an Observable that reflects whichever of the given Observables, +     *         reacted first, +     * Given multiple Observables, return the one that first emits an item., +     * @return an Observable that reflects whichever of the given Observables, +     *         reacted first, +     * Given multiple Observables, return the one that first emits an item., +     * @return an Observable that reflects whichever of the given Observables, +     *         reacted first, +     * Given multiple Observables, return the one that first emits an item., +     * @return an Observable that reflects whichever of the given Observables, +     *         reacted first, +     * Given multiple Observables, return the one that first emits an item., +     * @return an Observable that reflects whichever of the given Observables, +     *         reacted first, +     * Returns an Observable that emits the average of the Doubles emitted, +     * by the source Observable., +     * @return an Observable that emits the average of all the Doubles emitted, +     *         by the source Observable as its single item, +     * Returns an Observable that computes the average of the Floats emitted by, +     * the source Observable., +     * @return an Observable that emits the average of all the Floats emitted by, +     *         the source Observable as its single item, +     * Returns an Observable that computes the average of the Integers emitted, +     * by the source Observable., +     *            source observable to compute the average of, +     * @return an Observable that emits the average of all the Integers emitted, +     *         by the source Observable as its single item, +     * Returns an Observable that computes the average of the Longs emitted by, +     * the source Observable., +     * @return an Observable that emits the average of all the Longs emitted by, +     *         the source Observable as its single item, +     * Combines the given Observables, emitting an item that aggregates the, +     * latest values of each of the source Observables each time an item is, +     * received from any of the source Observables, where this aggregation is, +     * defined by a given function., +     *            the aggregation function used to combine the, +     *            items emitted by the source Observables, +     * @return an Observable whose emissions are the result of combining the, +     *         emissions of the source Observables with the given aggregation, +     *         function, +     * Combines the given Observables, emitting an item that aggregates the, +     * latest values of each of the source Observables each time an item is, +     * received from any of the source Observables, where this aggregation is, +     * defined by a given function., +     *            the aggregation function used to combine the, +     *            items emitted by the source Observables, +     * @return an Observable whose emissions are the result of combining the, +     *         emissions of the source Observables with the given aggregation, +     *         function, +     * Combines the given Observables, emitting an item that aggregates the, +     * latest values of each of the source Observables each time an item is, +     * received from any of the source Observables, where this aggregation is, +     * defined by a given function., +     *            the aggregation function used to combine the, +     *            items emitted by the source Observables, +     * @return an Observable whose emissions are the result of combining the, +     *         emissions of the source Observables with the given aggregation, +     *         function, +     * Combines the given Observables, emitting an item that aggregates the, +     * latest values of each of the source Observables each time an item is, +     * received from any of the source Observables, where this aggregation is, +     * defined by a given function., +     *            the aggregation function used to combine the, +     *            items emitted by the source Observables, +     * @return an Observable whose emissions are the result of combining the, +     *         emissions of the source Observables with the given aggregation, +     *         function, +     * Combines the given Observables, emitting an item that aggregates the, +     * latest values of each of the source Observables each time an item is, +     * received from any of the source Observables, where this aggregation is, +     * defined by a given function., +     *            the aggregation function used to combine the, +     *            items emitted by the source Observables, +     * @return an Observable whose emissions are the result of combining the]