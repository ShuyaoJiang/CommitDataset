[+++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test, +    public void testToMap1() {, +        Map actual = new HashMap();, +        , +        Observable.from("a", "bb", "ccc", "dddd"), +        .toMap({String s -> s.length()}), +        .toBlockingObservable(), +        .forEach({s -> actual.putAll(s); });, +        , +        Map expected = new HashMap();, +        expected.put(1, "a");, +        expected.put(2, "bb");, +        expected.put(3, "ccc");, +        expected.put(4, "dddd");, +        , +        assertEquals(expected, actual);, +    }, +, +    @Test, +    public void testToMap2() {, +        Map actual = new HashMap();, +        , +        Observable.from("a", "bb", "ccc", "dddd"), +        .toMap({String s -> s.length()}, {String s -> s + s}), +        .toBlockingObservable(), +        .forEach({s -> actual.putAll(s); });, +        , +        Map expected = new HashMap();, +        expected.put(1, "aa");, +        expected.put(2, "bbbb");, +        expected.put(3, "cccccc");, +        expected.put(4, "dddddddd");, +        , +        assertEquals(expected, actual);, +    }, +, +    @Test, +    public void testToMap3() {, +        Map actual = new HashMap();, +        , +        LinkedHashMap last3 = new LinkedHashMap() {, +            public boolean removeEldestEntry(Map.Entry e) {, +                return size() > 3;, +            }, +        };, +        , +        Observable.from("a", "bb", "ccc", "dddd"), +        .toMap({String s -> s.length()}, {String s -> s + s}, { last3 }), +        .toBlockingObservable(), +        .forEach({s -> actual.putAll(s); });, +        , +        Map expected = new HashMap();, +        expected.put(2, "bbbb");, +        expected.put(3, "cccccc");, +        expected.put(4, "dddddddd");, +        , +        assertEquals(expected, actual);, +    }, +    @Test, +    public void testToMultimap1() {, +        Map actual = new HashMap();, +        , +        Observable.from("a", "b", "cc", "dd"), +        .toMultimap({String s -> s.length()}), +        .toBlockingObservable(), +        .forEach({s -> actual.putAll(s); });, +        , +        Map expected = new HashMap();, +        , +        expected.put(1, Arrays.asList("a", "b"));, +        expected.put(2, Arrays.asList("cc", "dd"));, +        , +        assertEquals(expected, actual);, +    }, +, +    @Test, +    public void testToMultimap2() {, +        Map actual = new HashMap();, +        , +        Observable.from("a", "b", "cc", "dd"), +        .toMultimap({String s -> s.length()}, {String s -> s + s}), +        .toBlockingObservable(), +        .forEach({s -> actual.putAll(s); });, +        , +        Map expected = new HashMap();, +        , +        expected.put(1, Arrays.asList("aa", "bb"));, +        expected.put(2, Arrays.asList("cccc", "dddd"));, +        , +        assertEquals(expected, actual);, +    }, +, +    @Test, +    public void testToMultimap3() {, +        Map actual = new HashMap();, +        , +        LinkedHashMap last1 = new LinkedHashMap() {, +            public boolean removeEldestEntry(Map.Entry e) {, +                return size() > 1;]