[+++ b/rxjava-core/src/main/java/rx/subjects/RepeatSubject.java, +import rx.Observable;, +import rx.util.functions.Action1;, +import rx.util.functions.Func0;, +        public void testUnsubscribe(), +        {, +            UnsubscribeTester.test(new Func0<RepeatSubject<Object>>(), +                                   {, +                                       @Override, +                                       public RepeatSubject<Object> call(), +                                       {, +                                           return RepeatSubject.create();, +                                   }, new Action1<RepeatSubject<Object>>(), +                                   {, +                                       @Override, +                                       public void call(RepeatSubject<Object> repeatSubject), +                                       {, +                                           repeatSubject.onCompleted();, +                                   }, new Action1<RepeatSubject<Object>>(), +                                   {, +                                       @Override, +                                       public void call(RepeatSubject<Object> repeatSubject), +                                       {, +                                           repeatSubject.onError(new Exception());, +                                   }, new Action1<RepeatSubject<Object>>(), +                                   {, +                                       @Override, +                                       public void call(RepeatSubject<Object> repeatSubject), +                                       {, +                                           repeatSubject.onNext("one");, +                                       }, +                                   }, +            );, +        }, +++ b/rxjava-core/src/main/java/rx/subjects/RepeatSubject.java, +import rx.Observable;, +import rx.util.functions.Action1;, +import rx.util.functions.Func0;, +        public void testUnsubscribe(), +        {, +            UnsubscribeTester.test(new Func0<RepeatSubject<Object>>(), +                                   {, +                                       @Override, +                                       public RepeatSubject<Object> call(), +                                       {, +                                           return RepeatSubject.create();, +                                   }, new Action1<RepeatSubject<Object>>(), +                                   {, +                                       @Override, +                                       public void call(RepeatSubject<Object> repeatSubject), +                                       {, +                                           repeatSubject.onCompleted();, +                                   }, new Action1<RepeatSubject<Object>>(), +                                   {, +                                       @Override, +                                       public void call(RepeatSubject<Object> repeatSubject), +                                       {, +                                           repeatSubject.onError(new Exception());, +                                   }, new Action1<RepeatSubject<Object>>(), +                                   {, +                                       @Override, +                                       public void call(RepeatSubject<Object> repeatSubject), +                                       {, +                                           repeatSubject.onNext("one");, +                                       }, +                                   }, +            );, +        }, +++ b/rxjava-core/src/main/java/rx/testing/UnsubscribeTester.java, +import rx.util.functions.Action1;, +import rx.util.functions.Func0;, +    /**, +     * Tests the unsubscription semantics of an observable., +     *, +     * @param provider Function that when called provides an instance of the observable being tested, +     * @param generateOnCompleted Causes an observer generated by @param provider to generate an onCompleted event. Null to not test onCompleted., +     * @param generateOnError  Causes an observer generated by @param provider to generate an onError event. Null to not test onError., +     * @param generateOnNext  Causes an observer generated by @param provider to generate an onNext event. Null to not test onNext., +     * @param <T> The type of object passed by the Observable, +     */, +    public static <T, O extends Observable<T>> void test(Func0<O> provider, Action1<? super O> generateOnCompleted, Action1<? super O> generateOnError, Action1<? super O> generateOnNext), +        if (generateOnCompleted != null) {, +            O observable = provider.call();, +            UnsubscribeTester tester1 = createOnCompleted(observable);, +            UnsubscribeTester tester2 = createOnCompleted(observable);, +            generateOnCompleted.call(observable);, +            tester1.assertPassed();, +            tester2.assertPassed();, +        }, +        if (generateOnError != null) {, +            O observable = provider.call();, +            UnsubscribeTester tester1 = createOnError(observable);, +            UnsubscribeTester tester2 = createOnError(observable);, +            generateOnError.call(observable);, +            tester1.assertPassed();, +            tester2.assertPassed();, +        }, +        if (generateOnNext != null) {, +            O observable = provider.call();, +            UnsubscribeTester tester1 = createOnNext(observable);]