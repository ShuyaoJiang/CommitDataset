[+++ b/gradle.properties, +version=0.6.0-SNAPSHOT, +++ b/gradle.properties, +version=0.6.0-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +                    return new NoOpObservableSubscription();, +    /**, +     * A {@link Subscription} that does nothing when its unsubscribe method is called., +     */, +    private static class NoOpObservableSubscription implements Subscription {, +        public void unsubscribe() {, +        }, +    }, +                    return new NoOpObservableSubscription();, +     * A {@link Subscription} that does nothing., +     * , +     * //TODO should this be moved to a Subscriptions utility class?, +     * , +     * @return, +     */, +    public static Subscription noOpSubscription() {, +        return new NoOpObservableSubscription();, +    }, +, +    /**, +     * A {@link Subscription} implemented via a Func, +     * , +     * //TODO should this be moved to a Subscriptions utility class?, +     * , +     * @return, +     */, +    public static Subscription createSubscription(final Action0 unsubscribe) {, +        return new Subscription() {, +, +            @Override, +            public void unsubscribe() {, +                unsubscribe.call();, +            }, +, +        };, +    }, +, +    /**, +     * A {@link Subscription} implemented via an anonymous function (such as closures from other languages)., +     * , +     * //TODO should this be moved to a Subscriptions utility class?, +     * , +     * @return, +     */, +    public static Subscription createSubscription(final Object unsubscribe) {, +        final FuncN<?> f = Functions.from(unsubscribe);, +        return new Subscription() {, +, +            @Override, +            public void unsubscribe() {, +                f.call();, +            }, +, +        };, +    }, +, +    /**, +                    return Observable.noOpSubscription();, +                    return Observable.noOpSubscription();, +++ b/gradle.properties, +version=0.6.0-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +                    return new NoOpObservableSubscription();, +    /**, +     * A {@link Subscription} that does nothing when its unsubscribe method is called., +     */, +    private static class NoOpObservableSubscription implements Subscription {, +        public void unsubscribe() {, +        }, +    }, +                    return new NoOpObservableSubscription();, +     * A {@link Subscription} that does nothing., +     * , +     * //TODO should this be moved to a Subscriptions utility class?, +     * , +     * @return, +     */, +    public static Subscription noOpSubscription() {, +        return new NoOpObservableSubscription();, +    }, +, +    /**, +     * A {@link Subscription} implemented via a Func, +     * , +     * //TODO should this be moved to a Subscriptions utility class?, +     * , +     * @return, +     */, +    public static Subscription createSubscription(final Action0 unsubscribe) {, +        return new Subscription() {, +, +            @Override, +            public void unsubscribe() {, +                unsubscribe.call();, +            }]