[+++ b/language-adaptors/rxjava-clojure/README.md, +## Using Observable/create, +As of 0.17, `rx.Observable/create` takes an implementation of `rx.Observable$OnSubscribe` which is basically an alias for `rx.util.functions.Action1` that takes an `rx.Subscriber` as its argument. Thus, you can just use `rx/action` when creating new observables:, +, +```clojure, +; A simple observable that emits 0..9 taking unsubscribe into account, +(Observable/create (rx/action [^rx.Subscriber s], +                     (loop [i 0], +                       (when (and (< i 10) (.isUnsubscribed s)), +                         (.onNext s i), +                         (recur (inc i)))), +                     (.onCompleted s))), +```, +, +++ b/language-adaptors/rxjava-clojure/README.md, +## Using Observable/create, +As of 0.17, `rx.Observable/create` takes an implementation of `rx.Observable$OnSubscribe` which is basically an alias for `rx.util.functions.Action1` that takes an `rx.Subscriber` as its argument. Thus, you can just use `rx/action` when creating new observables:, +, +```clojure, +; A simple observable that emits 0..9 taking unsubscribe into account, +(Observable/create (rx/action [^rx.Subscriber s], +                     (loop [i 0], +                       (when (and (< i 10) (.isUnsubscribed s)), +                         (.onNext s i), +                         (recur (inc i)))), +                     (.onCompleted s))), +```, +, +++ b/language-adaptors/rxjava-clojure/build.gradle, +, +, +////////////////////////////////////////////////////////////////////////////////, +// Define a task that runs an nrepl server. The port is given with the nreplPort, +// property:, +//    gradlew nrepl -PnreplPort=9999, +// or put the property in ~/.gradle/gradle.properties, +, +def nreplPortValue = (project.hasProperty('nreplPort') && !project.nreplPort.isEmpty()) ? project.nreplPort : '9999', +configurations { nrepl }, +dependencies { nrepl 'org.clojure:tools.nrepl:0.2.2' }, +task nrepl(type: JavaExec) {, +    classpath configurations.nrepl,, +              project.sourceSets.main.clojure.srcDirs,, +              project.sourceSets.test.clojure.srcDirs,, +              sourceSets.main.runtimeClasspath,, +              sourceSets.test.runtimeClasspath, +, +    main = "clojure.main", +    args '--eval', "(ns gradle-nrepl (:require [clojure.tools.nrepl.server :refer (start-server stop-server)]))",, +         '--eval', "(println \"Starting nrepl server on port $nreplPortValue\")",, +         '--eval', "(def server (start-server :port $nreplPortValue))", +}, +++ b/language-adaptors/rxjava-clojure/README.md, +## Using Observable/create, +As of 0.17, `rx.Observable/create` takes an implementation of `rx.Observable$OnSubscribe` which is basically an alias for `rx.util.functions.Action1` that takes an `rx.Subscriber` as its argument. Thus, you can just use `rx/action` when creating new observables:, +, +```clojure, +; A simple observable that emits 0..9 taking unsubscribe into account, +(Observable/create (rx/action [^rx.Subscriber s], +                     (loop [i 0], +                       (when (and (< i 10) (.isUnsubscribed s)), +                         (.onNext s i), +                         (recur (inc i)))), +                     (.onCompleted s))), +```, +, +++ b/language-adaptors/rxjava-clojure/build.gradle, +, +, +////////////////////////////////////////////////////////////////////////////////, +// Define a task that runs an nrepl server. The port is given with the nreplPort, +// property:, +//    gradlew nrepl -PnreplPort=9999, +// or put the property in ~/.gradle/gradle.properties, +, +def nreplPortValue = (project.hasProperty('nreplPort') && !project.nreplPort.isEmpty()) ? project.nreplPort : '9999', +configurations { nrepl }, +dependencies { nrepl 'org.clojure:tools.nrepl:0.2.2' }, +task nrepl(type: JavaExec) {, +    classpath configurations.nrepl,, +              project.sourceSets.main.clojure.srcDirs,, +              project.sourceSets.test.clojure.srcDirs,, +              sourceSets.main.runtimeClasspath,, +              sourceSets.test.runtimeClasspath, +, +    main = "clojure.main", +    args '--eval', "(ns gradle-nrepl (:require [clojure.tools.nrepl.server :refer (start-server stop-server)]))",, +         '--eval', "(println \"Starting nrepl server on port $nreplPortValue\")",, +         '--eval', "(def server (start-server :port $nreplPortValue))", +}, +++ b/language-adaptors/rxjava-clojure/src/examples/clojure/rx/lang/clojure/examples/http_examples.clj, +    (rx/action [observer], +        (.add observer (Subscriptions/create (rx/action [] (future-cancel f)))))))), +    (rx/action [observer], +        (.add observer (Subscriptions/create (rx/action [] (future-cancel f)))))))), +++ b/language-adaptors/rxjava-clojure/README.md, +## Using Observable/create, +As of 0.17, `rx.Observable/create` takes an implementation of `rx.Observable$OnSubscribe` which is basically an alias for `rx.util.functions.Action1` that takes an `rx.Subscriber` as its argument. Thus, you can just use `rx/action` when creating new observables:, +, +```clojure]