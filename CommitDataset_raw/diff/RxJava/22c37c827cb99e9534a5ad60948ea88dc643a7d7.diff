[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * An {@link Observer} must call an Observable's {@code subscribe} method in order to, +     * receive items and notifications from the Observable., +     *, +     * <p>A typical implementation of {@code subscribe} does the following:, +     * {@code List<T>} object., +     * @param observer the observer, +     * @return a {@link Subscription} reference with which the {@link Observer} can stop receiving items, +     *             if the {@link Observer} provided as the argument to {@code subscribe()} is, +     *             {@code null}, +     * An {@link Observer} must call an Observable's {@code subscribe} method in order to, +     * receive items and notifications from the Observable., +     *, +     * <p>A typical implementation of {@code subscribe} does the following:, +     * {@code List<T>} object., +     * An {@code Observable<T>} instance is responsible for accepting all subscriptions, +     * {@code Observable<T>} implementation indicates otherwise, Observers should make no, +     * @param observer the observer, +     *             if an argument to {@code subscribe()} is {@code null}, +     *            a function that accepts an {@code Observer<T>}, invokes its, +     *            {@code onNext}, {@code onError}, and {@code onCompleted} methods, +     *            a function that accepts an {@code Observer<T>}, invokes its, +     *            {@code onNext}, {@code onError}, and {@code onCompleted} methods, +     * Filters an Observable by discarding any items it emits that do not satisfy some predicate., +     *            {@code true} if they pass the filter, +     * @return an Observable that emits only those items emitted by the source Observable for which the, +     *         predicate evaluates to {@code true}, +     * Filters an Observable by discarding any items it emits that do not satisfy some predicate, +     *            returns {@code true} if it passes the filter, +     * @return an Observable that emits only those items emitted by the source Observable for which the, +     *         predicate function evaluates to {@code true}, +     * Filters an Observable by discarding any items it emits that do not satisfy some predicate, +     *            returns {@code true} if it passes the filter, +     * @return an Observable that emits only those items emitted by the source Observable for which, +     *         the predicate evaluates to {@code true}, +     * <p>Implementation note: the entire iterable sequence will be immediately emitted each time an, +     * {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned,, +     * it in not possible to unsubscribe from the sequence before it completes., +     *, +     * <p>Implementation note: the entire array will be immediately emitted each time an, +     * {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned,, +     * it in not possible to unsubscribe from the sequence before it completes., +     *, +     * <p>Implementation note: the entire range will be immediately emitted each time an, +     * {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned,, +     * it in not possible to unsubscribe from the sequence before it completes., +     *, +     * new Observer that subscribes. That is, for each subscriber, the actuall Observable is determined, +     * by the factory function., +     *, +     * Returns an Observable that applies a function of your choosing to each item emitted by an, +     * Observable and emits the result., +     * Returns an Observable that applies the given function to each item emitted by an, +     * Observable and emits the result., +     * Note: {@code mapMany} and {@code flatMap} are equivalent., +     *            {@code func}, +     * Note: {@code mapMany} and {@code flatMap} are equivalent., +     *            {@code func}, +     *         {@code source} list of Observables, +     * Observable, by using the {@code merge} method., +     *         by the Observables emitted by the {@code source} Observable, +     * Observable, by using the {@code merge} method., +     *         by the {@code source} Observables, +     * Returns an Observable that emits the items from the {@code source} Observable until, +     * the {@code other} Observable emits an item., +     *            the Observable whose first emitted item will cause {@code takeUntil} to stop, +     *            emitting items from the {@code source} Observable, +     *            the type of items emitted by {@code source}, +     *            the type of items emitted by {@code other}, +     * @return an Observable that emits the items emitted by {@code source} until such time as, +     *         {@code other} emits its first item, +     *         the {@code source} Observables, one after the other, +     * Note: {@code mapMany} and {@code flatMap} are equivalent., +     *            {@code func}, +     * Note: {@code mapMany} and {@code flatMap} are equivalent., +     *            {@code func}, +     * notify of an error via {@link Observer#onError onError}, {@code mergeDelayError} will, +     * Even if multiple merged Observables send {@code onError} notifications,, +     * {@code mergeDelayError} will only invoke the {@code onError} method of its, +     *         the {@code source} list of Observables, +     * notify of an error via {@link Observer#onError onError}, {@code mergeDelayError} will, +     * Even if multiple merged Observables send {@code onError} notifications,, +     * {@code mergeDelayError} will only invoke the {@code onError} method of its, +     *         the Observables emitted by the {@code source} Observable, +     * notify of an error via {@link Observer#onError onError}, {@code mergeDelayError} will, +     * Even if multiple merged Observables send {@code onError} notifications,, +     * {@code mergeDelayError} will only invoke the {@code onError} method of its, +     *         the {@code source} Observables, +     * {@code onError} method, and then quits without invoking any more of its Observer's, +     * methods. The {@code onErrorResumeNext} method changes this behavior. If you pass a, +     * function that returns an Observable ({@code resumeFunction}) to, +     * {@code onErrorResumeNext}, if the source Observable encounters an error, instead of, +     * invoking its Observer's {@code onError} function, it will instead relinquish control to, +     * {@code onError}, the Observer may never know that an error happened., +     * @return an Observable, identical to the source Observable with its behavior modified as described, +     * methods. The {@code onErrorResumeNext} method changes this behavior. If you pass a, +     * function that returns an Observable ({@code resumeFunction}) to, +     * {@code onErrorResumeNext}, if the source Observable encounters an error, instead of, +     * invoking its Observer's {@code onError} function, it will instead relinquish control to, +     * {@code onError}, the Observer may never know that an error happened.]