[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorFromIterable;, +import rx.operators.OperatorTake;, +import rx.operators.OperatorToObservableList;, +import rx.operators.OperatorToObservableSortedList;, +    final Action2<Observer<? super T>, OperatorSubscription> f;, +, +    /**, +     * Observable with Function to execute when subscribed to., +     * <p>, +     * NOTE: Use {@link #create(OnSubscribeFunc)} to create an Observable, +     * instead of this constructor unless you specifically have a need for, +     * inheritance., +     * , +     * @param onSubscribe, +     *            {@link OnSubscribeFunc} to be executed when {@link #subscribe(Observer)} is called, +     */, +    protected Observable(Action2<Observer<? super T>, OperatorSubscription> f) {, +        this.f = f;, +    }, +, +<<<<<<< HEAD, +=======, +>>>>>>> Bind implementation of fromIterable, toList, toSortedList, +        return create(new OperatorFromIterable<T>(iterable));, +        return create(new OperatorFromIterable<T>(iterable)).subscribeOn(scheduler);, +    @SafeVarargs, +    public final static <T> Observable<T> from(T... t1) {, +        return from(Arrays.asList(t1));, +        return bind(new OperatorToObservableList<T>());, +        return bind(new OperatorToObservableSortedList<T>());, +        return bind(new OperatorToObservableSortedList<T>(sortFunction));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorFromIterable;, +import rx.operators.OperatorTake;, +import rx.operators.OperatorToObservableList;, +import rx.operators.OperatorToObservableSortedList;, +    final Action2<Observer<? super T>, OperatorSubscription> f;, +, +    /**, +     * Observable with Function to execute when subscribed to., +     * <p>, +     * NOTE: Use {@link #create(OnSubscribeFunc)} to create an Observable, +     * instead of this constructor unless you specifically have a need for, +     * inheritance., +     * , +     * @param onSubscribe, +     *            {@link OnSubscribeFunc} to be executed when {@link #subscribe(Observer)} is called, +     */, +    protected Observable(Action2<Observer<? super T>, OperatorSubscription> f) {, +        this.f = f;, +    }, +, +<<<<<<< HEAD, +=======, +>>>>>>> Bind implementation of fromIterable, toList, toSortedList, +        return create(new OperatorFromIterable<T>(iterable));, +        return create(new OperatorFromIterable<T>(iterable)).subscribeOn(scheduler);, +    @SafeVarargs, +    public final static <T> Observable<T> from(T... t1) {, +        return from(Arrays.asList(t1));, +        return bind(new OperatorToObservableList<T>());, +        return bind(new OperatorToObservableSortedList<T>());, +        return bind(new OperatorToObservableSortedList<T>(sortFunction));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorFromIterable;, +import rx.operators.OperatorTake;, +import rx.operators.OperatorToObservableList;, +import rx.operators.OperatorToObservableSortedList;, +    final Action2<Observer<? super T>, OperatorSubscription> f;, +, +    /**, +     * Observable with Function to execute when subscribed to., +     * <p>, +     * NOTE: Use {@link #create(OnSubscribeFunc)} to create an Observable, +     * instead of this constructor unless you specifically have a need for, +     * inheritance., +     * , +     * @param onSubscribe, +     *            {@link OnSubscribeFunc} to be executed when {@link #subscribe(Observer)} is called, +     */, +    protected Observable(Action2<Observer<? super T>, OperatorSubscription> f) {, +        this.f = f;, +    }, +, +<<<<<<< HEAD, +=======, +>>>>>>> Bind implementation of fromIterable, toList, toSortedList, +        return create(new OperatorFromIterable<T>(iterable));, +        return create(new OperatorFromIterable<T>(iterable)).subscribeOn(scheduler);, +    @SafeVarargs, +    public final static <T> Observable<T> from(T... t1) {, +        return from(Arrays.asList(t1));, +        return bind(new OperatorToObservableList<T>());, +        return bind(new OperatorToObservableSortedList<T>());, +        return bind(new OperatorToObservableSortedList<T>(sortFunction));, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java]