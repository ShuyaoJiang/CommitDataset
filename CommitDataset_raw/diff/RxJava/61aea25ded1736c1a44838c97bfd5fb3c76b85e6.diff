[+++ b/gradlew, +++ b/gradlew, +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observer { …}, +++ b/gradlew, +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observer { …}, +++ /dev/null, +++ b/gradlew, +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observer { …}, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.JavaConversions.toScalaObservable;, +++ b/gradlew, +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observer { …}, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.JavaConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  def mountainBikeMedals: Observable[Medal] = Observable(, +    Observable(, +    Observable(, +    Observable(, +    Observable(, +    Observable(, +    Observable(), +++ b/gradlew, +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observer { …}, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.JavaConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  def mountainBikeMedals: Observable[Medal] = Observable(, +    Observable(, +    Observable(, +    Observable(, +    Observable(, +    Observable(, +    Observable(), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import scala.language.implicitConversions, +import rx.lang.scala._, +    val first = Observable(10, 11, 12), +    val second = Observable(10, 11, 12), +    val first = Observable(10, 11, 12), +    val second = Observable(10, 11, 12), +    val before = Observable(-2, -1, 0), +    val source = Observable(1, 2, 3), +    Observable(, +    val o = Observable.from(1 to 18), +    (for ((o, i) <- Observable.from(1 to 18).window(5).zipWithIndex; n <- o), +      yield s"Observable#$i emits $n", +    ).subscribe(output(_)), +    assertEquals(10, Observable(1, 2, 3, 4).reduce(_ + _).toBlockingObservable.single), +    val observables = Observable(Observable(1, 2, 3), Observable(10, 20, 30)), +    val m = Observable(1, 2, 3, 4), +    val m = Observable(1, 2, 3, 4), +  @Ignore // TODO something's bad here, +    assertEquals(None,    Observable(1, 2).toBlockingObservable.singleOption), +    assertEquals(Some(1), Observable(1)   .toBlockingObservable.singleOption), +    assertEquals(None,    Observable()    .toBlockingObservable.singleOption), +    println(doubleAverage(Observable()).toBlockingObservable.single), +    println(doubleAverage(Observable(0)).toBlockingObservable.single), +    println(doubleAverage(Observable(4.44)).toBlockingObservable.single), +    println(doubleAverage(Observable(1, 2, 3.5)).toBlockingObservable.single), +    assertEquals(10, Observable(1, 2, 3, 4).sum.toBlockingObservable.single), +    assertEquals(6, Observable(4, 2).sum.toBlockingObservable.single), +    assertEquals(0, Observable[Int]().sum.toBlockingObservable.single), +    assertEquals(24, Observable(1, 2, 3, 4).product.toBlockingObservable.single), +    assertEquals(8, Observable(4, 2).product.toBlockingObservable.single), +    assertEquals(1, Observable[Int]().product.toBlockingObservable.single), +    Observable("a", "b", "c").zipWithIndex.map(pair => pair._1 + " has index " + pair._2), +    (for ((letter, index) <- Observable("a", "b", "c").zipWithIndex) yield letter + " has index " + index), +    val o = Observable.zip(Observable(1, 2), Observable(10, 20), Observable(100, 200)), +    val observables = Observable(Observable(1, 2), Observable(10, 20), Observable(100, 200)), +    assertEquals(3, Observable(1, 2, 3, 4).filter(condition).first.toBlockingObservable.single), +    assertEquals(3, Observable(1, 2, 3, 4).filter(condition).firstOrElse(10).toBlockingObservable.single), +    assertEquals(10, Observable(-1, 0, 1).filter(condition).firstOrElse(10).toBlockingObservable.single), +    Observable.from(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable.from(1 to 10)).toBlockingObservable.foreach(println(_)), +    assertEquals(Seq(7, 8, 9, 10), Observable(10, 7, 8, 9).toSeq.map(_.sorted).toBlockingObservable.single), +    assertEquals(Seq(10, 9, 8, 7), Observable(10, 7, 8, 9).toSeq.map(_.sortWith(f)).toBlockingObservable.single), +    val o2 = Observable.error(new IOException("Oops")), +    Thread.sleep(500), +    Observable(1, 2, 3).materialize.subscribe(n => n match {, +    assertEquals("b", Observable("a", "b", "c").drop(1).first.toBlockingObservable.single), +    assertEquals("b", Observable("a", "b", "c").drop(1).firstOrElse("!").toBlockingObservable.single), +    assertEquals("!!", Observable("a", "b", "c").drop(10).firstOrElse("!!").toBlockingObservable.single), +    Observable("a", "b").zipWithIndex.takeWhile{case (elem, index) => condition}.map(_._1), +  }, +  , +  @Test def createExample() {, +    val o = Observable.create[String](observer => {, +      // this is bad because you cannot unsubscribe!, +      observer.onNext("a"), +      observer.onNext("b"), +      observer.onCompleted()]