[+++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +import rx.functions.Action1;, +     * @see StringObservable#using(UnsafeFunc0, Func1), +     *            An {@link Observable} that automatically closes the resource when done., +        return Observable.using(new Func0<S>() {, +            public S call() {, +                    return resourceFactory.call();, +        }, observableFactory, new Action1<S>() {, +            public void call(S resource) {, +                try {, +                    resource.close();, +                } catch (IOException e) {, +                    throw new RuntimeException(e);, +                }, +     * @return An {@link Observable} of only {@link String}s., +++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +import rx.functions.Action1;, +     * @see StringObservable#using(UnsafeFunc0, Func1), +     *            An {@link Observable} that automatically closes the resource when done., +        return Observable.using(new Func0<S>() {, +            public S call() {, +                    return resourceFactory.call();, +        }, observableFactory, new Action1<S>() {, +            public void call(S resource) {, +                try {, +                    resource.close();, +                } catch (IOException e) {, +                    throw new RuntimeException(e);, +                }, +     * @return An {@link Observable} of only {@link String}s., +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +        Observable<byte[]> src = Observable.just(new byte[] { (byte) 0xc2 }, new byte[] { (byte) 0xa1 });, +        String out = StringObservable.decode(src, "UTF-8").toBlocking().single();, +        Observable<byte[]> src = Observable.just(new byte[] { (byte) 0xc2 });, +        String out = decode(src, "UTF-8").toBlocking().single();, +        Observable<byte[]> src = Observable.just(new byte[] { (byte) 0xc2, 65 });, +        String out = decode(src, "UTF-8").toBlocking().single();, +        Observable<byte[]> src = Observable.just(new byte[] { (byte) 0xc2 });, +        decode(src, charsetDecoder).toBlocking().single();, +        Observable<byte[]> src = Observable.just(new byte[] { (byte) 0xc2, 65 });, +        decode(src, charsetDecoder).toBlocking().single();, +        Observable<byte[]> src = Observable.just(new byte[] { 65 });, +            decode(Observable.concat(src, err), charsetDecoder).toList().toBlocking().single();, +        Observable<byte[]> src = Observable.just(new byte[] { (byte) 0xc2 });, +            decode(Observable.concat(src, err), charsetDecoder).toList().toBlocking().single();, +                .toBlocking().single());, +        testSplit(str, regex, 0, Observable.just(str), parts);, +            testSplit(a + "|" + b, regex, limit, Observable.just(a, b), parts);, +        Observable<String> source = Observable.just("", "b", "c");, +        Observable<String> source = Observable.just("a", null, "c");, +        Observable<String> source = Observable.just("a");, +        final byte[] outBytes = from(new ByteArrayInputStream(inBytes)).toBlocking().single();, +        StringObservable.from(is).first().toBlocking().single();, +        final String outStr = from(new StringReader(inStr)).toBlocking().single();, +                .toList().toBlocking().single();]