[+++ b/src/main/java/rx/Subscriber.java, +     * @throws IllegalArgumentException, +     *             if {@code n} is negative, +        if (n < 0) {, +            throw new IllegalArgumentException("number requested cannot be negative: " + n);, +        } , +++ b/src/main/java/rx/Subscriber.java, +     * @throws IllegalArgumentException, +     *             if {@code n} is negative, +        if (n < 0) {, +            throw new IllegalArgumentException("number requested cannot be negative: " + n);, +        } , +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                REQUESTED.getAndAdd(this, n);, +++ b/src/main/java/rx/Subscriber.java, +     * @throws IllegalArgumentException, +     *             if {@code n} is negative, +        if (n < 0) {, +            throw new IllegalArgumentException("number requested cannot be negative: " + n);, +        } , +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                REQUESTED.getAndAdd(this, n);, +++ b/src/test/java/rx/SubscriberTest.java, +import static org.junit.Assert.assertTrue;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +    , +    @Test, +    public void testNegativeRequestThrowsIllegalArgumentException() throws InterruptedException {, +        final CountDownLatch latch = new CountDownLatch(1);, +        final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();, +        Observable.just(1,2,3,4).subscribe(new Subscriber<Integer>() {, +, +            @Override, +            public void onStart() {, +                request(1);, +            }, +            , +            @Override, +            public void onCompleted() {, +                , +            }, +, +            @Override, +            public void onError(Throwable e) {, +               exception.set(e);, +               latch.countDown();, +            }, +, +            @Override, +            public void onNext(Integer t) {, +                request(-1);, +                request(1);, +            }});, +        assertTrue(latch.await(10, TimeUnit.SECONDS));, +        assertTrue(exception.get() instanceof IllegalArgumentException);, +    }, +++ b/src/main/java/rx/Subscriber.java, +     * @throws IllegalArgumentException, +     *             if {@code n} is negative, +        if (n < 0) {, +            throw new IllegalArgumentException("number requested cannot be negative: " + n);, +        } , +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                REQUESTED.getAndAdd(this, n);, +++ b/src/test/java/rx/SubscriberTest.java, +import static org.junit.Assert.assertTrue;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +    , +    @Test, +    public void testNegativeRequestThrowsIllegalArgumentException() throws InterruptedException {, +        final CountDownLatch latch = new CountDownLatch(1);, +        final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();, +        Observable.just(1,2,3,4).subscribe(new Subscriber<Integer>() {, +, +            @Override, +            public void onStart() {, +                request(1);, +            }, +            , +            @Override, +            public void onCompleted() {, +                , +            }, +, +            @Override, +            public void onError(Throwable e) {, +               exception.set(e);, +               latch.countDown();, +            }, +, +            @Override, +            public void onNext(Integer t) {, +                request(-1);, +                request(1);, +            }});, +        assertTrue(latch.await(10, TimeUnit.SECONDS));]