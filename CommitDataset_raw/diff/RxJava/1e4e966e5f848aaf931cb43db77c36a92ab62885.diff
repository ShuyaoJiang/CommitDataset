[+++ b/docs/Filtering-Observables.md, +This page shows operators you can use to filter and select items emitted by reactive sources, such as `Observable`s., +# Outline, +, +- [`debounce`](#debounce), +- [`distinct`](#distinct), +- [`distinctUntilChanged`](#distinctuntilchanged), +- [`elementAt`](#elementat), +- [`elementAtOrError`](#elementatorerror), +- [`filter`](#filter), +- [`first`](#first), +- [`firstElement`](#firstelement), +- [`firstOrError`](#firstorerror), +- [`ignoreElement`](#ignoreelement), +- [`ignoreElements`](#ignoreelements), +- [`last`](#last), +- [`lastElement`](#lastelement), +- [`lastOrError`](#lastorerror), +- [`ofType`](#oftype), +- [`sample`](#sample), +- [`skip`](#skip), +- [`skipLast`](#skiplast), +- [`take`](#take), +- [`takeLast`](#takelast), +- [`throttleFirst`](#throttlefirst), +- [`throttleLast`](#throttlelast), +- [`throttleLatest`](#throttlelatest), +- [`throttleWithTimeout`](#throttlewithtimeout), +- [`timeout`](#timeout), +, +## debounce, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +**ReactiveX documentation:** [http://reactivex.io/documentation/operators/debounce.html](http://reactivex.io/documentation/operators/debounce.html), +, +Drops items emitted by a reactive source that are followed by newer items before the given timeout value expires. The timer resets on each emission., +, +This operator keeps track of the most recent emitted item, and emits this item only when enough time has passed without the source emitting any other items., +, +### debounce example, +, +```java, +// Diagram:, +// -A--------------B----C-D-------------------E-|---->, +//  a---------1s, +//                 b---------1s, +//                      c---------1s, +//                        d---------1s, +//                                            e-|---->, +// -----------A---------------------D-----------E-|-->, +, +Observable<String> source = Observable.create(emitter -> {, +    emitter.onNext("A");, +, +    Thread.sleep(1_500);, +    emitter.onNext("B");, +, +    Thread.sleep(500);, +    emitter.onNext("C");, +, +    Thread.sleep(250);, +    emitter.onNext("D");, +, +    Thread.sleep(2_000);, +    emitter.onNext("E");, +    emitter.onComplete();, +});, +, +source.subscribeOn(Schedulers.io()), +        .debounce(1, TimeUnit.SECONDS), +        .blockingSubscribe(, +                item -> System.out.println("onNext: " + item),, +                Throwable::printStackTrace,, +                () -> System.out.println("onComplete"));, +, +// prints:, +// onNext: A, +// onNext: D, +// onNext: E, +// onComplete, +```, +, +## distinct, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +**ReactiveX documentation:** [http://reactivex.io/documentation/operators/distinct.html](http://reactivex.io/documentation/operators/distinct.html), +, +Filters a reactive source by only emitting items that are distinct by comparison from previous items. A `io.reactivex.functions.Function` can be specified that projects each item emitted by the source into a new value that will be used for comparison with previous projected values., +, +### distinct example, +, +```java, +Observable.just(2, 3, 4, 4, 2, 1), +        .distinct(), +        .subscribe(System.out::println);, +, +// prints:, +// 2]