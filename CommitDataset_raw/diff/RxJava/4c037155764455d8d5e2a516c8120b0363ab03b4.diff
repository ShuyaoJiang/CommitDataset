[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationToFuture;, +     * Return a Future representing a single value of the Observable., +     * <p>, +     * This will throw an exception if the Observable emits more than 1 value. If more than 1 are expected then use <code>toList().toFuture()</code>., +     * , +     * @param that, +     *            the source Observable, +     * @returna Future that expects a single item emitted by the source Observable, +     */, +    public static <T> Future<T> toFuture(final Observable<T> that) {, +        return OperationToFuture.toFuture(that);, +    }, +, +    /**, +     * Return a Future representing a single value of the Observable., +     * <p>, +     * This will throw an exception if the Observable emits more than 1 value. If more than 1 are expected then use <code>toList().toFuture()</code>., +     * , +     * @returna Future that expects a single item emitted by the source Observable, +     */, +    public Future<T> toFuture() {, +        return toFuture(this);, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationToFuture;, +     * Return a Future representing a single value of the Observable., +     * <p>, +     * This will throw an exception if the Observable emits more than 1 value. If more than 1 are expected then use <code>toList().toFuture()</code>., +     * , +     * @param that, +     *            the source Observable, +     * @returna Future that expects a single item emitted by the source Observable, +     */, +    public static <T> Future<T> toFuture(final Observable<T> that) {, +        return OperationToFuture.toFuture(that);, +    }, +, +    /**, +     * Return a Future representing a single value of the Observable., +     * <p>, +     * This will throw an exception if the Observable emits more than 1 value. If more than 1 are expected then use <code>toList().toFuture()</code>., +     * , +     * @returna Future that expects a single item emitted by the source Observable, +     */, +    public Future<T> toFuture() {, +        return toFuture(this);, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationToFuture.java, +package rx.operators;, +, +import static org.junit.Assert.*;, +, +import java.util.List;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +import java.util.concurrent.atomic.AtomicReference;, +, +import org.junit.Test;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Func1;, +, +/**, + * Convert an Observable into a Future., + */, +public class OperationToFuture {, +, +    /**, +     * Returns a Future that expects a single item from the observable., +     * , +     * @param that, +     *            an observable sequence to get a Future for., +     * @param <T>, +     *            the type of source., +     * @return the Future to retrieve a single elements from an Observable, +     */, +    public static <T> Future<T> toFuture(Observable<T> that) {, +, +        final CountDownLatch finished = new CountDownLatch(1);, +        final AtomicReference<T> value = new AtomicReference<T>();, +        final AtomicReference<Exception> error = new AtomicReference<Exception>();, +, +        final Subscription s = that.subscribe(new Observer<T>() {, +, +            @Override, +            public void onCompleted() {, +                finished.countDown();, +            }, +]