[+++ b/src/main/java/io/reactivex/Observable.java, +        Objects.requireNonNull(bufferOpenings);, +        Objects.requireNonNull(bufferClosingSelector);, +        Objects.requireNonNull(bufferSupplier);, +        return lift(new OperatorBufferBoundary<>(bufferOpenings, bufferClosingSelector, bufferSupplier));, +    , +    public final <B, U extends Collection<? super T>> Observable<U> buffer(Observable<B> boundary, Supplier<U> bufferSupplier) {, +        Objects.requireNonNull(boundary);, +        Objects.requireNonNull(bufferSupplier);, +        return lift(new OperatorBufferExactBoundary<>(boundary, bufferSupplier));, +++ b/src/main/java/io/reactivex/Observable.java, +        Objects.requireNonNull(bufferOpenings);, +        Objects.requireNonNull(bufferClosingSelector);, +        Objects.requireNonNull(bufferSupplier);, +        return lift(new OperatorBufferBoundary<>(bufferOpenings, bufferClosingSelector, bufferSupplier));, +    , +    public final <B, U extends Collection<? super T>> Observable<U> buffer(Observable<B> boundary, Supplier<U> bufferSupplier) {, +        Objects.requireNonNull(boundary);, +        Objects.requireNonNull(bufferSupplier);, +        return lift(new OperatorBufferExactBoundary<>(boundary, bufferSupplier));, +++ b/src/main/java/io/reactivex/Try.java, +     * @param value the value to wrap , +     * @return the created Try instance, +     * @param e the exception to wrap, +     * @return the new Try instance holding the exception, +     * @return the value contained, +     * @return the Throwable contained or null, +     * @return true if this Try holds an error, +     * @return true if this Try holds a value, +++ b/src/main/java/io/reactivex/Observable.java, +        Objects.requireNonNull(bufferOpenings);, +        Objects.requireNonNull(bufferClosingSelector);, +        Objects.requireNonNull(bufferSupplier);, +        return lift(new OperatorBufferBoundary<>(bufferOpenings, bufferClosingSelector, bufferSupplier));, +    , +    public final <B, U extends Collection<? super T>> Observable<U> buffer(Observable<B> boundary, Supplier<U> bufferSupplier) {, +        Objects.requireNonNull(boundary);, +        Objects.requireNonNull(bufferSupplier);, +        return lift(new OperatorBufferExactBoundary<>(boundary, bufferSupplier));, +++ b/src/main/java/io/reactivex/Try.java, +     * @param value the value to wrap , +     * @return the created Try instance, +     * @param e the exception to wrap, +     * @return the new Try instance holding the exception, +     * @return the value contained, +     * @return the Throwable contained or null, +     * @return true if this Try holds an error, +     * @return true if this Try holds a value, +++ b/src/main/java/io/reactivex/internal/disposables/SetCompositeResource.java, +     * @return true if the resource was removed, false otherwise, +++ b/src/main/java/io/reactivex/Observable.java, +        Objects.requireNonNull(bufferOpenings);, +        Objects.requireNonNull(bufferClosingSelector);, +        Objects.requireNonNull(bufferSupplier);, +        return lift(new OperatorBufferBoundary<>(bufferOpenings, bufferClosingSelector, bufferSupplier));, +    , +    public final <B, U extends Collection<? super T>> Observable<U> buffer(Observable<B> boundary, Supplier<U> bufferSupplier) {, +        Objects.requireNonNull(boundary);, +        Objects.requireNonNull(bufferSupplier);, +        return lift(new OperatorBufferExactBoundary<>(boundary, bufferSupplier));, +++ b/src/main/java/io/reactivex/Try.java, +     * @param value the value to wrap , +     * @return the created Try instance, +     * @param e the exception to wrap, +     * @return the new Try instance holding the exception, +     * @return the value contained, +     * @return the Throwable contained or null, +     * @return true if this Try holds an error, +     * @return true if this Try holds a value, +++ b/src/main/java/io/reactivex/internal/disposables/SetCompositeResource.java, +     * @return true if the resource was removed, false otherwise, +++ b/src/main/java/io/reactivex/internal/operators/OperatorBufferBoundary.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import java.util.*;, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +import java.util.function.*;, +, +import org.reactivestreams.*;, +, +import io.reactivex.Observable.Operator;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.disposables.SetCompositeResource;, +import io.reactivex.internal.queue.MpscLinkedQueue;, +import io.reactivex.internal.subscribers.*;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +import io.reactivex.plugins.RxJavaPlugins;]