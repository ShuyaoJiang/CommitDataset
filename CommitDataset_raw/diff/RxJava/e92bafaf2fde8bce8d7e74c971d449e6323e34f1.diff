[+++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/AbstractButtonSource.java, +     * @see rx.observables.SwingObservable#fromButtonAction, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/AbstractButtonSource.java, +     * @see rx.observables.SwingObservable#fromButtonAction, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/ComponentEventSource.java, +     * @see rx.observables.SwingObservable#fromComponentEvents, +     * @see SwingObservable#fromResizing, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/AbstractButtonSource.java, +     * @see rx.observables.SwingObservable#fromButtonAction, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/ComponentEventSource.java, +     * @see rx.observables.SwingObservable#fromComponentEvents, +     * @see SwingObservable#fromResizing, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/KeyEventSource.java, +     * @see rx.observables.SwingObservable#fromKeyEvents(Component), +     * @see rx.observables.SwingObservable#fromPressedKeys(Component), +        class CollectKeys implements Func2<Set<Integer>, KeyEvent, Set<Integer>>{, +        }, +        , +        Observable<KeyEvent> filteredKeyEvents = fromKeyEventsOf(component).filter(new Func1<KeyEvent, Boolean>() {, +            @Override, +            public Boolean call(KeyEvent event) {, +                return event.getID() == KeyEvent.KEY_PRESSED || event.getID() == KeyEvent.KEY_RELEASED;, +            }, +        , +        return Observable.<KeyEvent, Set<Integer>>scan(filteredKeyEvents, Collections.<Integer>emptySet(), new CollectKeys());, +            fireKeyEvent(keyEvent(KeyEvent.VK_UNDEFINED, KeyEvent.KEY_TYPED));, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/AbstractButtonSource.java, +     * @see rx.observables.SwingObservable#fromButtonAction, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/ComponentEventSource.java, +     * @see rx.observables.SwingObservable#fromComponentEvents, +     * @see SwingObservable#fromResizing, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/KeyEventSource.java, +     * @see rx.observables.SwingObservable#fromKeyEvents(Component), +     * @see rx.observables.SwingObservable#fromPressedKeys(Component), +        class CollectKeys implements Func2<Set<Integer>, KeyEvent, Set<Integer>>{, +        }, +        , +        Observable<KeyEvent> filteredKeyEvents = fromKeyEventsOf(component).filter(new Func1<KeyEvent, Boolean>() {, +            @Override, +            public Boolean call(KeyEvent event) {, +                return event.getID() == KeyEvent.KEY_PRESSED || event.getID() == KeyEvent.KEY_RELEASED;, +            }, +        , +        return Observable.<KeyEvent, Set<Integer>>scan(filteredKeyEvents, Collections.<Integer>emptySet(), new CollectKeys());, +            fireKeyEvent(keyEvent(KeyEvent.VK_UNDEFINED, KeyEvent.KEY_TYPED));, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/MouseEventSource.java, +     * @see rx.observables.SwingObservable#fromMouseEvents, +     * @see rx.observables.SwingObservable#fromMouseMotionEvents, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/AbstractButtonSource.java, +     * @see rx.observables.SwingObservable#fromButtonAction, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/ComponentEventSource.java, +     * @see rx.observables.SwingObservable#fromComponentEvents, +     * @see SwingObservable#fromResizing, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/KeyEventSource.java, +     * @see rx.observables.SwingObservable#fromKeyEvents(Component), +     * @see rx.observables.SwingObservable#fromPressedKeys(Component), +        class CollectKeys implements Func2<Set<Integer>, KeyEvent, Set<Integer>>{, +        }, +        , +        Observable<KeyEvent> filteredKeyEvents = fromKeyEventsOf(component).filter(new Func1<KeyEvent, Boolean>() {, +            @Override, +            public Boolean call(KeyEvent event) {, +                return event.getID() == KeyEvent.KEY_PRESSED || event.getID() == KeyEvent.KEY_RELEASED;, +            }, +        , +        return Observable.<KeyEvent, Set<Integer>>scan(filteredKeyEvents, Collections.<Integer>emptySet(), new CollectKeys());, +            fireKeyEvent(keyEvent(KeyEvent.VK_UNDEFINED, KeyEvent.KEY_TYPED));, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/MouseEventSource.java, +     * @see rx.observables.SwingObservable#fromMouseEvents, +     * @see rx.observables.SwingObservable#fromMouseMotionEvents, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/AbstractButtonSource.java, +     * @see rx.observables.SwingObservable#fromButtonAction, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/ComponentEventSource.java, +     * @see rx.observables.SwingObservable#fromComponentEvents, +     * @see SwingObservable#fromResizing, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/KeyEventSource.java, +     * @see rx.observables.SwingObservable#fromKeyEvents(Component), +     * @see rx.observables.SwingObservable#fromPressedKeys(Component), +        class CollectKeys implements Func2<Set<Integer>, KeyEvent, Set<Integer>>{, +        }, +        , +        Observable<KeyEvent> filteredKeyEvents = fromKeyEventsOf(component).filter(new Func1<KeyEvent, Boolean>() {, +            @Override, +            public Boolean call(KeyEvent event) {, +                return event.getID() == KeyEvent.KEY_PRESSED || event.getID() == KeyEvent.KEY_RELEASED;, +            }, +        , +        return Observable.<KeyEvent, Set<Integer>>scan(filteredKeyEvents, Collections.<Integer>emptySet(), new CollectKeys());, +            fireKeyEvent(keyEvent(KeyEvent.VK_UNDEFINED, KeyEvent.KEY_TYPED));, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/MouseEventSource.java, +     * @see rx.observables.SwingObservable#fromMouseEvents, +     * @see rx.observables.SwingObservable#fromMouseMotionEvents, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/operators/OperationCombineLatest.java, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Set;, +     * @param w0 The first source observable., +     * @param w1 The second source observable.]