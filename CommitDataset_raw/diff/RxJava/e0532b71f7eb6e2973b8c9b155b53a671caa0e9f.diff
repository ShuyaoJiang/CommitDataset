[+++ b/src/main/java/io/reactivex/Completable.java, +     *  <dt><b>Error handling:</b></dt>, +     *  <dd> If the {@link Action} throws an exception, the respective {@link Throwable} is, +     *  delivered to the downstream via {@link CompletableObserver#onError(Throwable)},, +     *  except when the downstream has disposed this {@code Completable} source., +     *  In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *  </dd>, +     *  <dt><b>Error handling:</b></dt>, +     *  <dd> If the {@link Callable} throws an exception, the respective {@link Throwable} is, +     *  delivered to the downstream via {@link CompletableObserver#onError(Throwable)},, +     *  except when the downstream has disposed this {@code Completable} source., +     *  In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *  </dd>, +++ b/src/main/java/io/reactivex/Completable.java, +     *  <dt><b>Error handling:</b></dt>, +     *  <dd> If the {@link Action} throws an exception, the respective {@link Throwable} is, +     *  delivered to the downstream via {@link CompletableObserver#onError(Throwable)},, +     *  except when the downstream has disposed this {@code Completable} source., +     *  In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *  </dd>, +     *  <dt><b>Error handling:</b></dt>, +     *  <dd> If the {@link Callable} throws an exception, the respective {@link Throwable} is, +     *  delivered to the downstream via {@link CompletableObserver#onError(Throwable)},, +     *  except when the downstream has disposed this {@code Completable} source., +     *  In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *  </dd>, +++ b/src/main/java/io/reactivex/Flowable.java, +     *   <dt><b>Error handling:</b></dt>, +     *   <dd> If the {@link Callable} throws an exception, the respective {@link Throwable} is, +     *   delivered to the downstream via {@link Subscriber#onError(Throwable)},, +     *   except when the downstream has canceled this {@code Flowable} source., +     *   In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *   {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *   </dd>, +++ b/src/main/java/io/reactivex/Completable.java, +     *  <dt><b>Error handling:</b></dt>, +     *  <dd> If the {@link Action} throws an exception, the respective {@link Throwable} is, +     *  delivered to the downstream via {@link CompletableObserver#onError(Throwable)},, +     *  except when the downstream has disposed this {@code Completable} source., +     *  In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *  </dd>, +     *  <dt><b>Error handling:</b></dt>, +     *  <dd> If the {@link Callable} throws an exception, the respective {@link Throwable} is, +     *  delivered to the downstream via {@link CompletableObserver#onError(Throwable)},, +     *  except when the downstream has disposed this {@code Completable} source., +     *  In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *  </dd>, +++ b/src/main/java/io/reactivex/Flowable.java, +     *   <dt><b>Error handling:</b></dt>, +     *   <dd> If the {@link Callable} throws an exception, the respective {@link Throwable} is, +     *   delivered to the downstream via {@link Subscriber#onError(Throwable)},, +     *   except when the downstream has canceled this {@code Flowable} source., +     *   In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *   {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *   </dd>, +++ b/src/main/java/io/reactivex/Maybe.java, +     *  <dt><b>Error handling:</b></dt>, +     *  <dd> If the {@link Action} throws an exception, the respective {@link Throwable} is, +     *  delivered to the downstream via {@link MaybeObserver#onError(Throwable)},, +     *  except when the downstream has disposed this {@code Maybe} source., +     *  In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *  </dd>, +++ b/src/main/java/io/reactivex/Completable.java, +     *  <dt><b>Error handling:</b></dt>, +     *  <dd> If the {@link Action} throws an exception, the respective {@link Throwable} is, +     *  delivered to the downstream via {@link CompletableObserver#onError(Throwable)},, +     *  except when the downstream has disposed this {@code Completable} source., +     *  In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *  </dd>, +     *  <dt><b>Error handling:</b></dt>, +     *  <dd> If the {@link Callable} throws an exception, the respective {@link Throwable} is, +     *  delivered to the downstream via {@link CompletableObserver#onError(Throwable)},, +     *  except when the downstream has disposed this {@code Completable} source., +     *  In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *  </dd>, +++ b/src/main/java/io/reactivex/Flowable.java, +     *   <dt><b>Error handling:</b></dt>, +     *   <dd> If the {@link Callable} throws an exception, the respective {@link Throwable} is, +     *   delivered to the downstream via {@link Subscriber#onError(Throwable)},, +     *   except when the downstream has canceled this {@code Flowable} source., +     *   In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *   {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *   </dd>, +++ b/src/main/java/io/reactivex/Maybe.java, +     *  <dt><b>Error handling:</b></dt>, +     *  <dd> If the {@link Action} throws an exception, the respective {@link Throwable} is, +     *  delivered to the downstream via {@link MaybeObserver#onError(Throwable)},, +     *  except when the downstream has disposed this {@code Maybe} source., +     *  In this latter case, the {@code Throwable} is delivered to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., +     *  </dd>]