[+++ b/rxjava-core/src/main/java/rx/operators/OperationTake.java, +import rx.util.functions.Func2;, +        return takeWhile(items, OperationTake.<T>numPredicate(num));, +     * @param predicate a function to test each source element for a condition, +        return takeWhile(items, OperationTake.<T>skipIndex(predicate));, +    }, +, +    /**, +     * Returns values from an observable sequence as long as a specified condition is true, and then skips the remaining values., +     *, +     * @param items, +     * @param predicate true to the function to test each element for a condition; the second parameter of the function represents the index of the source element; otherwise, false., +     * @return, +     */, +    public static <T> Func1<Observer<T>, Subscription> takeWhile(final Observable<T> items, final Func2<T, Integer, Boolean> predicate) {, +    private static <T> Func2<T, Integer, Boolean> numPredicate(final int num) {, +        return new Func2<T, Integer, Boolean>() {, +            public Boolean call(T input, Integer index) {, +                return index < num;, +    private static <T> Func2<T, Integer, Boolean> skipIndex(final Func1<T, Boolean> underlying) {, +        return new Func2<T, Integer, Boolean>() {, +            @Override, +            public Boolean call(T input, Integer index) {, +                return underlying.call(input);, +            }, +        };, +    }, +, +        private final AtomicInteger counter = new AtomicInteger();, +        private final Func2<T, Integer, Boolean> predicate;, +        private TakeWhile(Observable<T> items, Func2<T, Integer, Boolean> predicate) {, +                if (predicate.call(args, counter.getAndIncrement())) {]