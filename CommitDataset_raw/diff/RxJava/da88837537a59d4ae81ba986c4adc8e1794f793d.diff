[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCollect.java, +import io.reactivex.plugins.RxJavaPlugins;, +        boolean done;, +        , +            if (done) {, +                return;, +            }, +                onError(e);, +            if (done) {, +                RxJavaPlugins.onError(t);, +                return;, +            } , +            done = true;, +            if (done) {, +                return;, +            }, +            done = true;, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCollect.java, +import io.reactivex.plugins.RxJavaPlugins;, +        boolean done;, +        , +            if (done) {, +                return;, +            }, +                onError(e);, +            if (done) {, +                RxJavaPlugins.onError(t);, +                return;, +            } , +            done = true;, +            if (done) {, +                return;, +            }, +            done = true;, +++ b/src/test/java/io/reactivex/flowable/Burst.java, +/**, + * Copyright 2016 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +package io.reactivex.flowable;, +, +import java.util.Arrays;, +import java.util.List;, +import java.util.Queue;, +import java.util.concurrent.ConcurrentLinkedQueue;, +import java.util.concurrent.atomic.AtomicLong;, +, +import org.reactivestreams.Subscriber;, +import org.reactivestreams.Subscription;, +, +import io.reactivex.Flowable;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +import io.reactivex.internal.util.BackpressureHelper;, +, +/**, + * Creates {@link Flowable} of a number of items followed by either an error or, + * completion. Cancellation has no effect on preventing emissions until the, + * currently outstanding requests have been met., + */, +public final class Burst<T> extends Flowable<T> {, +, +    private final List<T> items;, +    private final Throwable error;, +, +    private Burst(Throwable error, List<T> items) {, +        if (items.isEmpty()) {, +            throw new IllegalArgumentException("items cannot be empty");, +        }, +        for (T item : items) {, +            if (item == null) {, +                throw new IllegalArgumentException("items cannot include null");, +            }, +        }, +        this.error = error;, +        this.items = items;, +    }, +, +    @Override, +    protected void subscribeActual(final Subscriber<? super T> subscriber) {, +        subscriber.onSubscribe(new Subscription() {, +, +            final Queue<T> q = new ConcurrentLinkedQueue<T>(items);, +            final AtomicLong requested = new AtomicLong();, +            volatile boolean cancelled = false;, +, +            @Override, +            public void request(long n) {, +                if (cancelled) {, +                    // required by reactive-streams-jvm 3.6, +                    return;, +                }, +                if (SubscriptionHelper.validate(n)) {]