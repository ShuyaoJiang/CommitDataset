[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229003.aspx'>MSDN: Observable.Timestamp</a>, +     * Return an Observable that skips elements from the source Observable until the secondary, +     * observable emits an element., +     * @return an Observable that skips elements from the source Observable until the secondary, +     *         observable emits an element., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229358.aspx'>MSDN: Observable.SkipUntil</a>, +     * Groups the elements of an observable sequence according to a specified key selector function until the duration observable expires for the key., +     * @param keySelector A function to extract the key for each element., +     * @param durationSelector A function to signal the expiration of a group., +     * @return A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh211932.aspx'>MSDN: Observable.GroupByUntil</a>, +     * Groups the elements of an observable sequence according to a specified key and value selector function  until the duration observable expires for the key., +     * @param keySelector A function to extract the key for each element., +     * @param valueSelector A function to map each source element to an element in an onbservable group., +     * @param durationSelector A function to signal the expiration of a group., +     * @return A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229433.aspx'>MSDN: Observable.GroupByUntil</a>, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229003.aspx'>MSDN: Observable.Timestamp</a>, +     * Return an Observable that skips elements from the source Observable until the secondary, +     * observable emits an element., +     * @return an Observable that skips elements from the source Observable until the secondary, +     *         observable emits an element., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229358.aspx'>MSDN: Observable.SkipUntil</a>, +     * Groups the elements of an observable sequence according to a specified key selector function until the duration observable expires for the key., +     * @param keySelector A function to extract the key for each element., +     * @param durationSelector A function to signal the expiration of a group., +     * @return A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh211932.aspx'>MSDN: Observable.GroupByUntil</a>, +     * Groups the elements of an observable sequence according to a specified key and value selector function  until the duration observable expires for the key., +     * @param keySelector A function to extract the key for each element., +     * @param valueSelector A function to map each source element to an element in an onbservable group., +     * @param durationSelector A function to signal the expiration of a group., +     * @return A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229433.aspx'>MSDN: Observable.GroupByUntil</a>, +++ b/rxjava-core/src/main/java/rx/subscriptions/SerialSubscription.java, +import static rx.subscriptions.Subscriptions.empty;, +, +import java.util.concurrent.atomic.AtomicReference;, +, +    private final AtomicReference<Subscription> reference = new AtomicReference<Subscription>(empty());, +, +    private static final Subscription UNSUBSCRIBED = new Subscription() {, +        @Override, +        public void unsubscribe() {, +        }, +    };, +        setSubscription(UNSUBSCRIBED);, +    public void setSubscription(final Subscription subscription) {, +        do {, +            final Subscription current = reference.get();, +            if (current == UNSUBSCRIBED) {, +                subscription.unsubscribe();, +                break;, +            if (reference.compareAndSet(current, subscription)) {, +                current.unsubscribe();, +                break;, +        } while (true);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229003.aspx'>MSDN: Observable.Timestamp</a>, +     * Return an Observable that skips elements from the source Observable until the secondary, +     * observable emits an element., +     * @return an Observable that skips elements from the source Observable until the secondary, +     *         observable emits an element., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229358.aspx'>MSDN: Observable.SkipUntil</a>, +     * Groups the elements of an observable sequence according to a specified key selector function until the duration observable expires for the key., +     * @param keySelector A function to extract the key for each element., +     * @param durationSelector A function to signal the expiration of a group., +     * @return A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh211932.aspx'>MSDN: Observable.GroupByUntil</a>, +     * Groups the elements of an observable sequence according to a specified key and value selector function  until the duration observable expires for the key., +     * @param keySelector A function to extract the key for each element., +     * @param valueSelector A function to map each source element to an element in an onbservable group., +     * @param durationSelector A function to signal the expiration of a group., +     * @return A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value., +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229433.aspx'>MSDN: Observable.GroupByUntil</a>, +++ b/rxjava-core/src/main/java/rx/subscriptions/SerialSubscription.java, +import static rx.subscriptions.Subscriptions.empty;, +, +import java.util.concurrent.atomic.AtomicReference;, +, +    private final AtomicReference<Subscription> reference = new AtomicReference<Subscription>(empty());, +, +    private static final Subscription UNSUBSCRIBED = new Subscription() {, +        @Override, +        public void unsubscribe() {, +        }, +    };, +        setSubscription(UNSUBSCRIBED);, +    public void setSubscription(final Subscription subscription) {, +        do {, +            final Subscription current = reference.get();, +            if (current == UNSUBSCRIBED) {, +                subscription.unsubscribe();, +                break;, +            if (reference.compareAndSet(current, subscription)) {, +                current.unsubscribe();, +                break;, +        } while (true);]