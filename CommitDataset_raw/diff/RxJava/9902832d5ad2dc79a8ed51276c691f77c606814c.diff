[+++ b/language-adaptors/rxjava-scala/README.md, +There's an old Scala adaptor ( `rx.lang.scala.RxImplicits` with test `rx.lang.scala.RxImplicitsTest` ), which is deprecated. All other classes in `rx.lang.scala` belong to the new adaptor., +# Binaries, +++ b/language-adaptors/rxjava-scala/README.md, +There's an old Scala adaptor ( `rx.lang.scala.RxImplicits` with test `rx.lang.scala.RxImplicitsTest` ), which is deprecated. All other classes in `rx.lang.scala` belong to the new adaptor., +# Binaries, +++ b/language-adaptors/rxjava-scala/build.gradle, +        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,!org.scalatest.*,*', +++ b/language-adaptors/rxjava-scala/README.md, +There's an old Scala adaptor ( `rx.lang.scala.RxImplicits` with test `rx.lang.scala.RxImplicitsTest` ), which is deprecated. All other classes in `rx.lang.scala` belong to the new adaptor., +# Binaries, +++ b/language-adaptors/rxjava-scala/build.gradle, +        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,!org.scalatest.*,*', +++ /dev/null, +++ b/language-adaptors/rxjava-scala/README.md, +There's an old Scala adaptor ( `rx.lang.scala.RxImplicits` with test `rx.lang.scala.RxImplicitsTest` ), which is deprecated. All other classes in `rx.lang.scala` belong to the new adaptor., +# Binaries, +++ b/language-adaptors/rxjava-scala/build.gradle, +        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,!org.scalatest.*,*', +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.lang.scala.observables.ConnectableObservable, +  import rx.lang.scala.internal.ImplicitFunctionConversions._, +   * @return a {@link ConnectableObservable} that upon connection causes the source Observable to, +   *         push results into the specified {@link Subject}, +  // public <R> ConnectableObservable<R> multicast(Subject<T, R> subject) TODO, +  , +   * @return a {@link ConnectableObservable} that upon connection causes the source Observable to, +   *         emit items to its {@link Observer}s, +  def replay(): ConnectableObservable[T] = {, +    new ConnectableObservable[T](asJava.replay()), +   * @return a {@link ConnectableObservable} that upon connection causes the source Observable to, +   *         emit items to its {@link Observer}s, +  def publish: ConnectableObservable[T] = {, +    new ConnectableObservable[T](asJava.publish()), +   * Groups the items emitted by an Observable according to a specified criterion, and emits these, +   * grouped items as {@link GroupedObservable}s, one GroupedObservable per group., +   * <p>, +   * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/groupBy.png">, +   * @param keySelector, +   * @param elementSelector, +   *            a function to map a source item to an item in a {@link GroupedObservable}, +   *            the key type, +   * @param <R>, +   *            the type of items emitted by the resulting {@link GroupedObservable}s, +   * @return an Observable that emits {@link GroupedObservable}s, each of which corresponds to a, +   *         unique key value and emits items representing items from the source Observable that, +   *         share that key value, +  /* TODO make a Scala GroupedObservable and groupBy, +  def groupBy[K,R](keySelector: T => K, elementSelector: T => R ): Observable[GroupedObservable[K,R]] = {, +    ???, +  */, +, +  /**, +   * Groups the items emitted by an Observable according to a specified criterion, and emits these, +   * grouped items as {@link GroupedObservable}s, one GroupedObservable per group., +   * <p>, +   * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/groupBy.png">, +   * , +   * @param keySelector, +   *            a function that extracts the key for each item, +   * @param <K>, +   *            the key type, +   * @return an Observable that emits {@link GroupedObservable}s, each of which corresponds to a, +   *         unique key value and emits items representing items from the source Observable that, +   *         share that key value, +   */, +  /* TODO , +  def groupBy[K](keySelector: T => K ): Observable[GroupedObservable[K,T]] = {, +    ???, +  }, +  */, +  // public <K> Observable<GroupedObservable<K, T>> groupBy(final Func1<? super T, ? extends K> keySelector) , +  import rx.lang.scala.internal.ImplicitFunctionConversions._, +  import rx.lang.scala.internal.ImplicitFunctionConversions._, +    assertEquals(4, Observable(1, 2, 3, 4).toBlockingObservable.last), +++ b/language-adaptors/rxjava-scala/README.md, +There's an old Scala adaptor ( `rx.lang.scala.RxImplicits` with test `rx.lang.scala.RxImplicitsTest` ), which is deprecated. All other classes in `rx.lang.scala` belong to the new adaptor., +# Binaries, +++ b/language-adaptors/rxjava-scala/build.gradle, +        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,!org.scalatest.*,*', +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.lang.scala.observables.ConnectableObservable, +  import rx.lang.scala.internal.ImplicitFunctionConversions._, +   * @return a {@link ConnectableObservable} that upon connection causes the source Observable to, +   *         push results into the specified {@link Subject}, +  // public <R> ConnectableObservable<R> multicast(Subject<T, R> subject) TODO, +  , +   * @return a {@link ConnectableObservable} that upon connection causes the source Observable to, +   *         emit items to its {@link Observer}s, +  def replay(): ConnectableObservable[T] = {, +    new ConnectableObservable[T](asJava.replay()), +   * @return a {@link ConnectableObservable} that upon connection causes the source Observable to, +   *         emit items to its {@link Observer}s, +  def publish: ConnectableObservable[T] = {, +    new ConnectableObservable[T](asJava.publish()), +   * Groups the items emitted by an Observable according to a specified criterion, and emits these, +   * grouped items as {@link GroupedObservable}s, one GroupedObservable per group., +   * <p>]