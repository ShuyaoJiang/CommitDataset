[+++ b/rxjava-core/src/main/java/rx/Observable.java, + * The Observable class that implements the Reactive Pattern., + * This class provides methods for subscribing to the Observable as well as delegate methods to the, + * various operators., + * The documentation for this class makes use of marble diagrams. The following legend explains, + * these diagrams:, + *            the type of the items emitted by the Observable, +     * Function interface for work to be performed when an Observable is subscribed to via, +     * {@link #subscribe(Observer)}, +     * <em>Note:</em> Use {@link #create(OnSubscribeFunc)} to create an Observable, instead of this, +     * constructor, unless you specifically have a need for inheritance., +     * Mirror the one Observable in an Iterable of several Observables that first emits an item., +     *            an Iterable of Observable sources competing to react first, +     * @return an Observable that emits the same sequence of items as whichever of the source, +     *         Observables first emitted an item, +     * Given two Observables, mirror the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source, +     *         Observables first emitted an item, +     * Given three Observables, mirror the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source, +     *         Observables first emitted an item, +     * Given four Observables, mirror the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source, +     *         Observables first emitted an item, +     * Given five Observables, mirror the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source, +     *         Observables first emitted an item, +     * Given six Observables, mirror the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source, +     *         Observables first emitted an item, +     * Given seven Observables, mirror the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source, +     *         Observables first emitted an item, +     * Given eight Observables, mirror the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source, +     *         Observables first emitted an item, +     * Given nine Observables, mirror the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source, +     *         Observables first emitted an item, +     * Returns an Observable that emits the average of the Doubles emitted by the source Observable., +     * @return an Observable that emits a single item: the average of all the Doubles emitted, +     *         by the source Observable, +     * Returns an Observable that emits the average of the Floats emitted by the source Observable., +     * @return an Observable that emits a single item: the average of all the Floats emitted by, +     *         the source Observable, +     * Returns an Observable that emits the average of the Integers emitted by the source, +     * Observable., +     *            source Observable to compute the average of, +     * @return an Observable that emits a single item: the average of all the Integers emitted, +     *         by the source Observable, +     * Returns an Observable that emits the average of the Longs emitted by the source Observable., +     * @return an Observable that emits a single item: the average of all the Longs emitted by, +     *         the source Observable, +     * Combines two source Observables by emitting an item that aggregates the latest values of each, +     * of the source Observables each time an item is received from either of the source, +     * Observables, where this aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source, +     *            Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by, +     *         the source Observables by means of the given aggregation function, +     * Combines three source Observables by emitting an item that aggregates the latest values of, +     * each of the source Observables each time an item is received from any of the source, +     * Observables, where this aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source, +     *            Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by, +     *         the source Observables by means of the given aggregation function, +     * Combines four source Observables by emitting an item that aggregates the latest values of, +     * each of the source Observables each time an item is received from any of the source, +     * Observables, where this aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source, +     *            Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by, +     *         the source Observables by means of the given aggregation function, +     * Combines five source Observables by emitting an item that aggregates the latest values of, +     * each of the source Observables each time an item is received from any of the source, +     * Observables, where this aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source, +     *            Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by, +     *         the source Observables by means of the given aggregation function, +     * Combines six source Observables by emitting an item that aggregates the latest values of each, +     * of the source Observables each time an item is received from any of the source Observables,, +     * where this aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source, +     *            Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by, +     *         the source Observables by means of the given aggregation function, +     * Combines seven source Observables by emitting an item that aggregates the latest values of, +     * each of the source Observables each time an item is received from any of the source, +     * Observables, where this aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source, +     *            Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by, +     *         the source Observables by means of the given aggregation function, +     * Combines eight source Observables by emitting an item that aggregates the latest values of, +     * each of the source Observables each time an item is received from any of the source, +     * Observables, where this aggregation is defined by a specified function., +     *            the aggregation function used to combine the items emitted by the source, +     *            Observables]