[+++ b/src/main/java/io/reactivex/Observable.java, + * The Observable class is the non-backpressured, optionally multi-valued base reactive class that, + * offers factory methods, intermediate operators and the ability to consume synchronous, + * and/or asynchronous reactive dataflows., + * Many operators in the class accept {@code ObservableSource}(s), the base reactive interface, + * for such non-backpressured flows, which {@code Observable} itself implements as well., + * The design of this class was derived from the, + * <a href="https://github.com/reactive-streams/reactive-streams-jvm">Reactive-Streams design and specification</a>, + * by removing any backpressure-related infrastructure and implementation detail, replacing the, + * {@code org.reactivestreams.Subscription} with {@link Disposable} as the primary means to cancel, + * a flow., + * <p>, + * The {@code Observable} follows the protocol, + * <pre><code>, + *      onSubscribe onNext* (onError | onComplete)?, + * </code></pre>, + * where, + * the stream can be disposed through the {@code Disposable} instance provided to consumers through, + * {@code Observer.onSubscribe}., + * <p>, + * Unlike the {@code Observable} of version 1.x, {@link #subscribe(Observer)} does not allow external cancellation, + * of a subscription and the {@code Observer} instance is expected to expose such capability., + * <p>Example:, + * <pre><code>, + * Disposable d = Observable.just("Hello world!"), + *     .delay(1, TimeUnit.SECONDS), + *     .subscribeWith(new DisposableObserver&lt;String>() {, + *         &#64;Override public void onStart() {, + *             System.out.println("Start!");, + *         }, + *         &#64;Override public void onNext(Integer t) {, + *             System.out.println(t);, + *         }, + *         &#64;Override public void onError(Throwable t) {, + *             t.printStackTrace();, + *         }, + *         &#64;Override public void onComplete() {, + *             System.out.println("Done!");, + *         }, + *     });, + * , + * Thread.sleep(500);, + * // the sequence now can be cancelled via dispose(), + * d.dispose();, + * </code></pre>, + * @see Flowable, + * @see io.reactivex.observers.DisposableObserver]