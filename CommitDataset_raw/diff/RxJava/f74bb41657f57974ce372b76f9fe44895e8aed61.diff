[+++ b/rxjava-core/src/main/java/rx/observers/SynchronizedObserver.java, +    private final Object lock;, +    private boolean isTerminated = false;, +            if (!isTerminated) {, +    }, +            if (!isTerminated) {, +                isTerminated = true;, +    }, +            if (!isTerminated) {, +                isTerminated = true;, +}, +++ b/rxjava-core/src/main/java/rx/observers/SynchronizedObserver.java, +    private final Object lock;, +    private boolean isTerminated = false;, +            if (!isTerminated) {, +    }, +            if (!isTerminated) {, +                isTerminated = true;, +    }, +            if (!isTerminated) {, +                isTerminated = true;, +}, +++ b/rxjava-core/src/main/java/rx/operators/OperatorParallel.java, +        Func1<Subscriber<? super GroupedObservable<Integer, T>>, Subscriber<? super T>> groupBy =, +                new OperatorGroupBy<Integer, T>(new Func1<T, Integer>() {, +                    int i = 0;, +                    public Integer call(T t) {, +                        return i++ % scheduler.degreeOfParallelism();, +        Func1<Subscriber<? super Observable<R>>, Subscriber<? super GroupedObservable<Integer, T>>> map =, +                new OperatorMap<GroupedObservable<Integer, T>, Observable<R>>(, +                        new Func1<GroupedObservable<Integer, T>, Observable<R>>() {, +                            public Observable<R> call(GroupedObservable<Integer, T> g) {, +++ b/rxjava-core/src/main/java/rx/observers/SynchronizedObserver.java, +    private final Object lock;, +    private boolean isTerminated = false;, +            if (!isTerminated) {, +    }, +            if (!isTerminated) {, +                isTerminated = true;, +    }, +            if (!isTerminated) {, +                isTerminated = true;, +}, +++ b/rxjava-core/src/main/java/rx/operators/OperatorParallel.java, +        Func1<Subscriber<? super GroupedObservable<Integer, T>>, Subscriber<? super T>> groupBy =, +                new OperatorGroupBy<Integer, T>(new Func1<T, Integer>() {, +                    int i = 0;, +                    public Integer call(T t) {, +                        return i++ % scheduler.degreeOfParallelism();, +        Func1<Subscriber<? super Observable<R>>, Subscriber<? super GroupedObservable<Integer, T>>> map =, +                new OperatorMap<GroupedObservable<Integer, T>, Observable<R>>(, +                        new Func1<GroupedObservable<Integer, T>, Observable<R>>() {, +                            public Observable<R> call(GroupedObservable<Integer, T> g) {, +++ /dev/null]