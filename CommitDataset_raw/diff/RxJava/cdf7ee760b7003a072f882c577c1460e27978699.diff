[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, + *         the [[rx.lang.scala.Scheduler]] on which Observers subscribe to the Observable, +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a buffer., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a buffer., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a buffer., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a window., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a window., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a window., +   * Asynchronously subscribes and unsubscribes Observers on the specified [[rx.lang.scala.Scheduler]]., +   *            the [[rx.lang.scala.Scheduler]] to perform subscription and unsubscription actions on, +   *         on the specified [[rx.lang.scala.Scheduler]], +   * Asynchronously notify [[rx.lang.scala.Observer]]s on the specified [[rx.lang.scala.Scheduler]]., +   *            the [[rx.lang.scala.Scheduler]] to notify [[rx.lang.scala.Observer]]s on, +   *         specified [[rx.lang.scala.Scheduler]], +   *            the [[rx.lang.scala.Scheduler]] to use when sampling, +   *            The [[rx.lang.scala.Scheduler]] to use internally to manage the timers which handle timeout for each event., +   *            The [[rx.lang.scala.Scheduler]] to use internally to manage the timers which handle timeout for each event., +   *            The [[rx.lang.scala.Scheduler]] to use internally to manage the timers which handle timeout for each event., +   * [[rx.lang.scala.Scheduler]] and return an `Observable[R]` with the output., +   * @return an Observable with the output of the function executed on a [[rx.lang.scala.Scheduler]], +   * Perform work in parallel by sharding an `Observable[T]` on a [[rx.lang.scala.Scheduler]] and return an `Observable[R]` with the output., +   *            a [[rx.lang.scala.Scheduler]] to perform the work on., +   * @return an Observable with the output of the function executed on a [[rx.lang.scala.Scheduler]], +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, + *         the [[rx.lang.scala.Scheduler]] on which Observers subscribe to the Observable, +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a buffer., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a buffer., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a buffer., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a window., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a window., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a window., +   * Asynchronously subscribes and unsubscribes Observers on the specified [[rx.lang.scala.Scheduler]]., +   *            the [[rx.lang.scala.Scheduler]] to perform subscription and unsubscription actions on, +   *         on the specified [[rx.lang.scala.Scheduler]], +   * Asynchronously notify [[rx.lang.scala.Observer]]s on the specified [[rx.lang.scala.Scheduler]]., +   *            the [[rx.lang.scala.Scheduler]] to notify [[rx.lang.scala.Observer]]s on, +   *         specified [[rx.lang.scala.Scheduler]], +   *            the [[rx.lang.scala.Scheduler]] to use when sampling, +   *            The [[rx.lang.scala.Scheduler]] to use internally to manage the timers which handle timeout for each event., +   *            The [[rx.lang.scala.Scheduler]] to use internally to manage the timers which handle timeout for each event., +   *            The [[rx.lang.scala.Scheduler]] to use internally to manage the timers which handle timeout for each event., +   * [[rx.lang.scala.Scheduler]] and return an `Observable[R]` with the output., +   * @return an Observable with the output of the function executed on a [[rx.lang.scala.Scheduler]], +   * Perform work in parallel by sharding an `Observable[T]` on a [[rx.lang.scala.Scheduler]] and return an `Observable[R]` with the output., +   *            a [[rx.lang.scala.Scheduler]] to perform the work on., +   * @return an Observable with the output of the function executed on a [[rx.lang.scala.Scheduler]], +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +import ImplicitFunctionConversions.scalaFunction0ProducingUnitToAction0, +import ImplicitFunctionConversions.schedulerActionToFunc2, + * Represents an object thatimport rx.lang.scala.ImplicitFunctionConversions, + schedules units of work., +  def schedule(action: rx.lang.scala.Scheduler => Subscription): Subscription = {, +/**, + * Provides constructors for Schedulers., + */, +object Scheduler {, +  private class WrapJavaScheduler(val asJavaScheduler: rx.Scheduler) extends Scheduler, +  , +  /**, +   * Constructs a Scala Scheduler from a Java Scheduler., +   */, +  def apply(s: rx.Scheduler): Scheduler = new WrapJavaScheduler(s), +}, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, + *         the [[rx.lang.scala.Scheduler]] on which Observers subscribe to the Observable, +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a buffer., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a buffer., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a buffer., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a window., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a window., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a window., +   * Asynchronously subscribes and unsubscribes Observers on the specified [[rx.lang.scala.Scheduler]]., +   *            the [[rx.lang.scala.Scheduler]] to perform subscription and unsubscription actions on, +   *         on the specified [[rx.lang.scala.Scheduler]], +   * Asynchronously notify [[rx.lang.scala.Observer]]s on the specified [[rx.lang.scala.Scheduler]]., +   *            the [[rx.lang.scala.Scheduler]] to notify [[rx.lang.scala.Observer]]s on, +   *         specified [[rx.lang.scala.Scheduler]], +   *            the [[rx.lang.scala.Scheduler]] to use when sampling, +   *            The [[rx.lang.scala.Scheduler]] to use internally to manage the timers which handle timeout for each event., +   *            The [[rx.lang.scala.Scheduler]] to use internally to manage the timers which handle timeout for each event., +   *            The [[rx.lang.scala.Scheduler]] to use internally to manage the timers which handle timeout for each event., +   * [[rx.lang.scala.Scheduler]] and return an `Observable[R]` with the output., +   * @return an Observable with the output of the function executed on a [[rx.lang.scala.Scheduler]], +   * Perform work in parallel by sharding an `Observable[T]` on a [[rx.lang.scala.Scheduler]] and return an `Observable[R]` with the output., +   *            a [[rx.lang.scala.Scheduler]] to perform the work on., +   * @return an Observable with the output of the function executed on a [[rx.lang.scala.Scheduler]], +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +import ImplicitFunctionConversions.scalaFunction0ProducingUnitToAction0, +import ImplicitFunctionConversions.schedulerActionToFunc2, + * Represents an object thatimport rx.lang.scala.ImplicitFunctionConversions, + schedules units of work., +  def schedule(action: rx.lang.scala.Scheduler => Subscription): Subscription = {, +/**, + * Provides constructors for Schedulers., + */, +object Scheduler {]