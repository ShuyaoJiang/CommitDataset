[+++ b/src/main/java/io/reactivex/Maybe.java, +     *  Flowable.create((FlowableEmitter<? super String> s) -> {, +     *  }, BackpressureStrategy.BUFFER).retryWhen(attempts -> {, +++ b/src/main/java/io/reactivex/Maybe.java, +     *  Flowable.create((FlowableEmitter<? super String> s) -> {, +     *  }, BackpressureStrategy.BUFFER).retryWhen(attempts -> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlattenIterable.java, +import io.reactivex.internal.functions.ObjectHelper;, +                            v = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +                R r = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +++ b/src/main/java/io/reactivex/Maybe.java, +     *  Flowable.create((FlowableEmitter<? super String> s) -> {, +     *  }, BackpressureStrategy.BUFFER).retryWhen(attempts -> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlattenIterable.java, +import io.reactivex.internal.functions.ObjectHelper;, +                            v = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +                R r = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBlockingSubscribe.java, +     * @param o the source ObservableSource, +     * @param o the source ObservableSource, +     * @param o the source ObservableSource, +++ b/src/main/java/io/reactivex/Maybe.java, +     *  Flowable.create((FlowableEmitter<? super String> s) -> {, +     *  }, BackpressureStrategy.BUFFER).retryWhen(attempts -> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlattenIterable.java, +import io.reactivex.internal.functions.ObjectHelper;, +                            v = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +                R r = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBlockingSubscribe.java, +     * @param o the source ObservableSource, +     * @param o the source ObservableSource, +     * @param o the source ObservableSource, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier.java, +                    boundary = ObjectHelper.requireNonNull(boundarySupplier.call(), "The boundary ObservableSource supplied is null");, +                boundary = ObjectHelper.requireNonNull(boundarySupplier.call(), "The boundary ObservableSource supplied is null");, +++ b/src/main/java/io/reactivex/Maybe.java, +     *  Flowable.create((FlowableEmitter<? super String> s) -> {, +     *  }, BackpressureStrategy.BUFFER).retryWhen(attempts -> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlattenIterable.java, +import io.reactivex.internal.functions.ObjectHelper;, +                            v = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +                R r = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBlockingSubscribe.java, +     * @param o the source ObservableSource, +     * @param o the source ObservableSource, +     * @param o the source ObservableSource, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier.java, +                    boundary = ObjectHelper.requireNonNull(boundarySupplier.call(), "The boundary ObservableSource supplied is null");, +                boundary = ObjectHelper.requireNonNull(boundarySupplier.call(), "The boundary ObservableSource supplied is null");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDebounce.java, +                p = ObjectHelper.requireNonNull(debounceSelector.apply(t), "The ObservableSource supplied is null");, +++ b/src/main/java/io/reactivex/Maybe.java, +     *  Flowable.create((FlowableEmitter<? super String> s) -> {, +     *  }, BackpressureStrategy.BUFFER).retryWhen(attempts -> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlattenIterable.java, +import io.reactivex.internal.functions.ObjectHelper;, +                            v = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +                R r = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBlockingSubscribe.java, +     * @param o the source ObservableSource, +     * @param o the source ObservableSource, +     * @param o the source ObservableSource, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier.java, +                    boundary = ObjectHelper.requireNonNull(boundarySupplier.call(), "The boundary ObservableSource supplied is null");, +                boundary = ObjectHelper.requireNonNull(boundarySupplier.call(), "The boundary ObservableSource supplied is null");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDebounce.java, +                p = ObjectHelper.requireNonNull(debounceSelector.apply(t), "The ObservableSource supplied is null");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDefer.java, +            pub = ObjectHelper.requireNonNull(supplier.call(), "null ObservableSource supplied");, +++ b/src/main/java/io/reactivex/Maybe.java, +     *  Flowable.create((FlowableEmitter<? super String> s) -> {, +     *  }, BackpressureStrategy.BUFFER).retryWhen(attempts -> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlattenIterable.java, +import io.reactivex.internal.functions.ObjectHelper;, +                            v = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +                R r = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBlockingSubscribe.java, +     * @param o the source ObservableSource, +     * @param o the source ObservableSource, +     * @param o the source ObservableSource, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier.java, +                    boundary = ObjectHelper.requireNonNull(boundarySupplier.call(), "The boundary ObservableSource supplied is null");, +                boundary = ObjectHelper.requireNonNull(boundarySupplier.call(), "The boundary ObservableSource supplied is null");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDebounce.java, +                p = ObjectHelper.requireNonNull(debounceSelector.apply(t), "The ObservableSource supplied is null");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDefer.java, +            pub = ObjectHelper.requireNonNull(supplier.call(), "null ObservableSource supplied");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableMapNotification.java, +                p = ObjectHelper.requireNonNull(onNextMapper.apply(t), "The onNext ObservableSource returned is null");, +                p = ObjectHelper.requireNonNull(onErrorMapper.apply(t), "The onError ObservableSource returned is null");, +                p = ObjectHelper.requireNonNull(onCompleteSupplier.call(), "The onComplete ObservableSource returned is null");, +++ b/src/main/java/io/reactivex/Maybe.java, +     *  Flowable.create((FlowableEmitter<? super String> s) -> {, +     *  }, BackpressureStrategy.BUFFER).retryWhen(attempts -> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlattenIterable.java, +import io.reactivex.internal.functions.ObjectHelper;, +                            v = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +                R r = ObjectHelper.requireNonNull(it.next(), "The iterator returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBlockingSubscribe.java, +     * @param o the source ObservableSource]