[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorUnsubscribeOn;, +     * Asynchronously subscribes Observers to this Observable on the specified, +     *            the {@link Scheduler} to perform subscription actions on, +     * @return the source Observable modified so that its subscriptions happen on the, +     * Asynchronously unsubscribes on the specified {@link Scheduler}., +     * , +     * @param scheduler, +     *            the {@link Scheduler} to perform subscription and unsubscription actions on, +     * @return the source Observable modified so that its unsubscriptions happen on the specified {@link Scheduler}, +     */, +    public final Observable<T> unsubscribeOn(Scheduler scheduler) {, +        return lift(new OperatorUnsubscribeOn<T>(scheduler));, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorUnsubscribeOn;, +     * Asynchronously subscribes Observers to this Observable on the specified, +     *            the {@link Scheduler} to perform subscription actions on, +     * @return the source Observable modified so that its subscriptions happen on the, +     * Asynchronously unsubscribes on the specified {@link Scheduler}., +     * , +     * @param scheduler, +     *            the {@link Scheduler} to perform subscription and unsubscription actions on, +     * @return the source Observable modified so that its unsubscriptions happen on the specified {@link Scheduler}, +     */, +    public final Observable<T> unsubscribeOn(Scheduler scheduler) {, +        return lift(new OperatorUnsubscribeOn<T>(scheduler));, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperatorSubscribeOn.java, + * Subscribes Observers on the specified Scheduler., +                // ignore because this is a nested Observable and we expect only 1 Observable<T> emitted to onNext, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorUnsubscribeOn;, +     * Asynchronously subscribes Observers to this Observable on the specified, +     *            the {@link Scheduler} to perform subscription actions on, +     * @return the source Observable modified so that its subscriptions happen on the, +     * Asynchronously unsubscribes on the specified {@link Scheduler}., +     * , +     * @param scheduler, +     *            the {@link Scheduler} to perform subscription and unsubscription actions on, +     * @return the source Observable modified so that its unsubscriptions happen on the specified {@link Scheduler}, +     */, +    public final Observable<T> unsubscribeOn(Scheduler scheduler) {, +        return lift(new OperatorUnsubscribeOn<T>(scheduler));, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperatorSubscribeOn.java, + * Subscribes Observers on the specified Scheduler., +                // ignore because this is a nested Observable and we expect only 1 Observable<T> emitted to onNext, +++ b/rxjava-core/src/main/java/rx/operators/OperatorSubscribeOnBounded.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import rx.Observable;, +import rx.Observable.Operator;, +import rx.Scheduler;, +import rx.Scheduler.Inner;, +import rx.Subscriber;, +import rx.util.functions.Action1;, +, +/**, + * Subscribes and unsubscribes Observers on the specified Scheduler., + * <p>, + * Will occur asynchronously except when subscribing to `GroupedObservable`, `PublishSubject` and possibly other "hot" Observables, + * in which case it will subscribe synchronously and buffer/block onNext calls until the subscribe has occurred., + * <p>, + * See https://github.com/Netflix/RxJava/issues/844 for more information on the "time gap" issue that the synchronous, + * subscribe is solving., + * , + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/subscribeOn.png">, + */, +public class OperatorSubscribeOnBounded<T> implements Operator<T, Observable<T>> {, +, +    private final Scheduler scheduler;, +    /**, +     * Indicate that events fired between the original subscription time and, +     * the actual subscription time should not get lost., +     */, +    private final boolean dontLoseEvents;, +    /** The buffer size to avoid flooding. Negative value indicates an unbounded buffer. */, +    private final int bufferSize;]