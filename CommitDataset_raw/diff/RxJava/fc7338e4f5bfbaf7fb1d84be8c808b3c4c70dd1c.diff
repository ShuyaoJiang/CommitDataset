[+++ b/src/main/java/io/reactivex/Observable.java, +    public final Observable<T> retry(BiPredicate<? super Integer, ? super Throwable> predicate) {, +        Objects.requireNonNull(predicate);, +        , +        return create(new PublisherRetryBiPredicate<>(this, predicate));, +    }, +    , +    public final Observable<T> retryWhen(, +            Function<? super Observable<? extends Throwable>, ? extends Publisher<?>> handler) {, +            handler.apply(no.takeWhile(Try::hasError).map(t -> {, +                return t.error();, +            })), +            , +            NullPointerException npe = new NullPointerException("Actually not, but can't throw other exceptions due to RS");, +            npe.initCause(e);, +            throw npe;, +++ b/src/main/java/io/reactivex/Observable.java, +    public final Observable<T> retry(BiPredicate<? super Integer, ? super Throwable> predicate) {, +        Objects.requireNonNull(predicate);, +        , +        return create(new PublisherRetryBiPredicate<>(this, predicate));, +    }, +    , +    public final Observable<T> retryWhen(, +            Function<? super Observable<? extends Throwable>, ? extends Publisher<?>> handler) {, +            handler.apply(no.takeWhile(Try::hasError).map(t -> {, +                return t.error();, +            })), +            , +            NullPointerException npe = new NullPointerException("Actually not, but can't throw other exceptions due to RS");, +            npe.initCause(e);, +            throw npe;, +++ b/src/main/java/io/reactivex/Try.java, +++ b/src/main/java/io/reactivex/Observable.java, +    public final Observable<T> retry(BiPredicate<? super Integer, ? super Throwable> predicate) {, +        Objects.requireNonNull(predicate);, +        , +        return create(new PublisherRetryBiPredicate<>(this, predicate));, +    }, +    , +    public final Observable<T> retryWhen(, +            Function<? super Observable<? extends Throwable>, ? extends Publisher<?>> handler) {, +            handler.apply(no.takeWhile(Try::hasError).map(t -> {, +                return t.error();, +            })), +            , +            NullPointerException npe = new NullPointerException("Actually not, but can't throw other exceptions due to RS");, +            npe.initCause(e);, +            throw npe;, +++ b/src/main/java/io/reactivex/Try.java, +++ b/src/main/java/io/reactivex/internal/operators/OperatorMap.java, +            if (u == null) {, +                done = true;, +                subscription.cancel();, +                actual.onError(new NullPointerException("Value returned by the function is null"));, +                return;, +            }, +++ b/src/main/java/io/reactivex/Observable.java, +    public final Observable<T> retry(BiPredicate<? super Integer, ? super Throwable> predicate) {, +        Objects.requireNonNull(predicate);, +        , +        return create(new PublisherRetryBiPredicate<>(this, predicate));, +    }, +    , +    public final Observable<T> retryWhen(, +            Function<? super Observable<? extends Throwable>, ? extends Publisher<?>> handler) {, +            handler.apply(no.takeWhile(Try::hasError).map(t -> {, +                return t.error();, +            })), +            , +            NullPointerException npe = new NullPointerException("Actually not, but can't throw other exceptions due to RS");, +            npe.initCause(e);, +            throw npe;, +++ b/src/main/java/io/reactivex/Try.java, +++ b/src/main/java/io/reactivex/internal/operators/OperatorMap.java, +            if (u == null) {, +                done = true;, +                subscription.cancel();, +                actual.onError(new NullPointerException("Value returned by the function is null"));, +                return;, +            }, +++ b/src/main/java/io/reactivex/internal/operators/PublisherLift.java, +            , +            NullPointerException npe = new NullPointerException("Actually not, but can't throw other exceptions due to RS");, +            npe.initCause(e);, +            throw npe;, +++ b/src/main/java/io/reactivex/Observable.java, +    public final Observable<T> retry(BiPredicate<? super Integer, ? super Throwable> predicate) {, +        Objects.requireNonNull(predicate);, +        , +        return create(new PublisherRetryBiPredicate<>(this, predicate));, +    }, +    , +    public final Observable<T> retryWhen(, +            Function<? super Observable<? extends Throwable>, ? extends Publisher<?>> handler) {, +            handler.apply(no.takeWhile(Try::hasError).map(t -> {, +                return t.error();, +            })), +            , +            NullPointerException npe = new NullPointerException("Actually not, but can't throw other exceptions due to RS");]