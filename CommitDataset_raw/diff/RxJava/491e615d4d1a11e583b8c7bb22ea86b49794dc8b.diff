[+++ b/src/main/java/rx/Observable.java, +        return new NeverObservable<T>();, +     * @since (if this graduates from Experimental/Beta to supported, replace, +     *        this parenthetical with the release number), +        return lift(new OperatorDistinct<T, T>(UtilityFunctions.<T>identity()));, +        return lift(new OperatorDistinctUntilChanged<T, T>(UtilityFunctions.<T>identity()));, +        return filter(UtilityFunctions.alwaysFalse());, +        return lift(new OperatorAny<T>(UtilityFunctions.alwaysTrue(), true));, +        return lift(new OperatorOnBackpressureBuffer<T>());, +        return lift(new OperatorSingle<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>(sortFunction));, +     *  <dd>This operator does not support backpressure as it uses {@code count} to control data flow.</dd>, +     *  <dd>This operator does not support backpressure as it uses {@code count} to control data flow.</dd>, +        public NeverObservable() {, +++ b/src/main/java/rx/Observable.java, +        return new NeverObservable<T>();, +     * @since (if this graduates from Experimental/Beta to supported, replace, +     *        this parenthetical with the release number), +        return lift(new OperatorDistinct<T, T>(UtilityFunctions.<T>identity()));, +        return lift(new OperatorDistinctUntilChanged<T, T>(UtilityFunctions.<T>identity()));, +        return filter(UtilityFunctions.alwaysFalse());, +        return lift(new OperatorAny<T>(UtilityFunctions.alwaysTrue(), true));, +        return lift(new OperatorOnBackpressureBuffer<T>());, +        return lift(new OperatorSingle<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>(sortFunction));, +     *  <dd>This operator does not support backpressure as it uses {@code count} to control data flow.</dd>, +     *  <dd>This operator does not support backpressure as it uses {@code count} to control data flow.</dd>, +        public NeverObservable() {, +++ b/src/main/java/rx/internal/operators/OperatorDistinct.java, +++ b/src/main/java/rx/Observable.java, +        return new NeverObservable<T>();, +     * @since (if this graduates from Experimental/Beta to supported, replace, +     *        this parenthetical with the release number), +        return lift(new OperatorDistinct<T, T>(UtilityFunctions.<T>identity()));, +        return lift(new OperatorDistinctUntilChanged<T, T>(UtilityFunctions.<T>identity()));, +        return filter(UtilityFunctions.alwaysFalse());, +        return lift(new OperatorAny<T>(UtilityFunctions.alwaysTrue(), true));, +        return lift(new OperatorOnBackpressureBuffer<T>());, +        return lift(new OperatorSingle<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>(sortFunction));, +     *  <dd>This operator does not support backpressure as it uses {@code count} to control data flow.</dd>, +     *  <dd>This operator does not support backpressure as it uses {@code count} to control data flow.</dd>, +        public NeverObservable() {, +++ b/src/main/java/rx/internal/operators/OperatorDistinct.java, +++ b/src/main/java/rx/internal/operators/OperatorDistinctUntilChanged.java, +++ b/src/main/java/rx/Observable.java, +        return new NeverObservable<T>();, +     * @since (if this graduates from Experimental/Beta to supported, replace, +     *        this parenthetical with the release number), +        return lift(new OperatorDistinct<T, T>(UtilityFunctions.<T>identity()));, +        return lift(new OperatorDistinctUntilChanged<T, T>(UtilityFunctions.<T>identity()));, +        return filter(UtilityFunctions.alwaysFalse());, +        return lift(new OperatorAny<T>(UtilityFunctions.alwaysTrue(), true));, +        return lift(new OperatorOnBackpressureBuffer<T>());, +        return lift(new OperatorSingle<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>(sortFunction));, +     *  <dd>This operator does not support backpressure as it uses {@code count} to control data flow.</dd>, +     *  <dd>This operator does not support backpressure as it uses {@code count} to control data flow.</dd>, +        public NeverObservable() {, +++ b/src/main/java/rx/internal/operators/OperatorDistinct.java, +++ b/src/main/java/rx/internal/operators/OperatorDistinctUntilChanged.java, +++ /dev/null, +++ b/src/main/java/rx/Observable.java, +        return new NeverObservable<T>();, +     * @since (if this graduates from Experimental/Beta to supported, replace, +     *        this parenthetical with the release number), +        return lift(new OperatorDistinct<T, T>(UtilityFunctions.<T>identity()));, +        return lift(new OperatorDistinctUntilChanged<T, T>(UtilityFunctions.<T>identity()));, +        return filter(UtilityFunctions.alwaysFalse());, +        return lift(new OperatorAny<T>(UtilityFunctions.alwaysTrue(), true));, +        return lift(new OperatorOnBackpressureBuffer<T>());, +        return lift(new OperatorSingle<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>());, +     *  <dd>This operator does not support backpressure as by intent it is requesting and buffering everything.</dd>, +        return lift(new OperatorToObservableSortedList<T>(sortFunction));, +     *  <dd>This operator does not support backpressure as it uses {@code count} to control data flow.</dd>, +     *  <dd>This operator does not support backpressure as it uses {@code count} to control data flow.</dd>, +        public NeverObservable() {, +++ b/src/main/java/rx/internal/operators/OperatorDistinct.java, +++ b/src/main/java/rx/internal/operators/OperatorDistinctUntilChanged.java, +++ /dev/null, +++ b/src/main/java/rx/internal/operators/OperatorObserveOn.java]