[+++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +        private BooleanSubscription innerSubscription = new BooleanSubscription();, +            innerSubscription.unsubscribe();, +            return innerSubscription.isUnsubscribed();, +            return Subscriptions.create(new Action0() {, +            });, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +        private BooleanSubscription innerSubscription = new BooleanSubscription();, +            innerSubscription.unsubscribe();, +            return innerSubscription.isUnsubscribed();, +            return Subscriptions.create(new Action0() {, +            });, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +        private BooleanSubscription innerSubscription = new BooleanSubscription();, +            innerSubscription.unsubscribe();, +            return innerSubscription.isUnsubscribed();, +            return Subscriptions.create(new Action0() {, +            });, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java, +++ b/rxjava-core/src/test/java/rx/ConcatTests.java, +        assertEquals("five", values.get(4));, +        assertEquals("six", values.get(5));, +        assertEquals("five", values.get(4));, +        assertEquals("six", values.get(5));        , +    	HorrorMovie horrorMovie1 = new HorrorMovie();, +    	Movie movie = new Movie();, +    	Media media = new Media();, +    	HorrorMovie horrorMovie2 = new HorrorMovie();, +    	, +        Observable<Media> o1 = Observable.<Media> from(horrorMovie1, movie);, +        Observable<Media> o2 = Observable.from(media, horrorMovie2);, +        assertEquals(horrorMovie1, values.get(0));, +        assertEquals(movie, values.get(1));, +        assertEquals(media, values.get(2));, +        assertEquals(horrorMovie2, values.get(3));, +    	HorrorMovie horrorMovie1 = new HorrorMovie();, +    	Movie movie = new Movie();, +    	Media media1 = new Media();, +    	Media media2 = new Media();, +    	HorrorMovie horrorMovie2 = new HorrorMovie();, +    	, +        Observable<Media> o1 = Observable.from(horrorMovie1, movie, media1);, +        Observable<Media> o2 = Observable.from(media2, horrorMovie2);, +        assertEquals(horrorMovie1, values.get(0));, +        assertEquals(movie, values.get(1));, +        assertEquals(media1, values.get(2));, +        assertEquals(media2, values.get(3));, +        assertEquals(horrorMovie2, values.get(4));, +    	HorrorMovie horrorMovie1 = new HorrorMovie();, +    	Movie movie = new Movie();, +    	Media media = new Media();, +    	HorrorMovie horrorMovie2 = new HorrorMovie();, +    	, +        Observable<Movie> o1 = Observable.from(horrorMovie1, movie);, +        Observable<Media> o2 = Observable.from(media, horrorMovie2);, +        assertEquals(horrorMovie1, values.get(0));, +        assertEquals(movie, values.get(1));, +        assertEquals(media, values.get(2));, +        assertEquals(horrorMovie2, values.get(3));, +        assertEquals(4, values.size());, +    	final HorrorMovie horrorMovie1 = new HorrorMovie();, +    	final Movie movie = new Movie();, +    	Media media = new Media();, +    	HorrorMovie horrorMovie2 = new HorrorMovie();, +                o.onNext(horrorMovie1);, +                o.onNext(movie);, +        Observable<Media> o2 = Observable.from(media, horrorMovie2);, +        assertEquals(horrorMovie1, values.get(0));, +        assertEquals(movie, values.get(1));, +        assertEquals(media, values.get(2));, +        assertEquals(horrorMovie2, values.get(3));, +        assertEquals(4, values.size());]