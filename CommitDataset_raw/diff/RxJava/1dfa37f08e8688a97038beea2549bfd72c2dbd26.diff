[+++ b/rxjava/src/main/java/rx/Observable.java, +++ b/rxjava/src/main/java/rx/Observable.java, +++ b/rxjava/src/main/java/rx/Subscriber.java, +++ b/rxjava/src/main/java/rx/Observable.java, +++ b/rxjava/src/main/java/rx/Subscriber.java, +++ b/rxjava/src/main/java/rx/observables/GroupedObservable.java, +++ b/rxjava/src/main/java/rx/Observable.java, +++ b/rxjava/src/main/java/rx/Subscriber.java, +++ b/rxjava/src/main/java/rx/observables/GroupedObservable.java, +++ /dev/null, +++ b/rxjava/src/main/java/rx/Observable.java, +++ b/rxjava/src/main/java/rx/Subscriber.java, +++ b/rxjava/src/main/java/rx/observables/GroupedObservable.java, +++ /dev/null, +++ /dev/null, +++ b/rxjava/src/main/java/rx/Observable.java, +++ b/rxjava/src/main/java/rx/Subscriber.java, +++ b/rxjava/src/main/java/rx/observables/GroupedObservable.java, +++ /dev/null, +++ /dev/null, +++ b/rxjava/src/main/java/rx/plugins/RxJavaPlugins.java, +++ b/rxjava/src/main/java/rx/Observable.java, +++ b/rxjava/src/main/java/rx/Subscriber.java, +++ b/rxjava/src/main/java/rx/observables/GroupedObservable.java, +++ /dev/null, +++ /dev/null, +++ b/rxjava/src/main/java/rx/plugins/RxJavaPlugins.java, +++ b/rxjava/src/main/java/rx/schedulers/Schedulers.java, +        Scheduler c = RxJavaPlugins.getInstance().getSchedulersHook().getComputationScheduler();, +        Scheduler io = RxJavaPlugins.getInstance().getSchedulersHook().getIOScheduler();, +        Scheduler nt = RxJavaPlugins.getInstance().getSchedulersHook().getNewThreadScheduler();, +++ b/rxjava/src/main/java/rx/Observable.java, +++ b/rxjava/src/main/java/rx/Subscriber.java, +++ b/rxjava/src/main/java/rx/observables/GroupedObservable.java, +++ /dev/null, +++ /dev/null, +++ b/rxjava/src/main/java/rx/plugins/RxJavaPlugins.java, +++ b/rxjava/src/main/java/rx/schedulers/Schedulers.java, +        Scheduler c = RxJavaPlugins.getInstance().getSchedulersHook().getComputationScheduler();, +        Scheduler io = RxJavaPlugins.getInstance().getSchedulersHook().getIOScheduler();, +        Scheduler nt = RxJavaPlugins.getInstance().getSchedulersHook().getNewThreadScheduler();, +++ b/rxjava/src/test/java/rx/CovarianceTest.java, +        Observable<HorrorMovie> movie = Observable.<HorrorMovie> just(new HorrorMovie());, +                return Observable.just(new Movie());, +        Observable<Movie> movie = Observable.<Movie> just(new HorrorMovie());, +                return Observable.just(new HorrorMovie());, +++ b/rxjava/src/main/java/rx/Observable.java, +++ b/rxjava/src/main/java/rx/Subscriber.java, +++ b/rxjava/src/main/java/rx/observables/GroupedObservable.java, +++ /dev/null, +++ /dev/null, +++ b/rxjava/src/main/java/rx/plugins/RxJavaPlugins.java, +++ b/rxjava/src/main/java/rx/schedulers/Schedulers.java, +        Scheduler c = RxJavaPlugins.getInstance().getSchedulersHook().getComputationScheduler();, +        Scheduler io = RxJavaPlugins.getInstance().getSchedulersHook().getIOScheduler();, +        Scheduler nt = RxJavaPlugins.getInstance().getSchedulersHook().getNewThreadScheduler();, +++ b/rxjava/src/test/java/rx/CovarianceTest.java, +        Observable<HorrorMovie> movie = Observable.<HorrorMovie> just(new HorrorMovie());, +                return Observable.just(new Movie());, +        Observable<Movie> movie = Observable.<Movie> just(new HorrorMovie());, +                return Observable.just(new HorrorMovie());, +++ b/rxjava/src/test/java/rx/ObservableTests.java, +                Observable<Integer> observable = Observable.from(Arrays.asList(1, 2)).subscribeOn(scheduler);, +        Observable<Integer> observable = Observable.just(3, 4).startWith(Arrays.asList(1, 2)).subscribeOn(scheduler);, +++ b/rxjava/src/main/java/rx/Observable.java, +++ b/rxjava/src/main/java/rx/Subscriber.java, +++ b/rxjava/src/main/java/rx/observables/GroupedObservable.java, +++ /dev/null, +++ /dev/null, +++ b/rxjava/src/main/java/rx/plugins/RxJavaPlugins.java, +++ b/rxjava/src/main/java/rx/schedulers/Schedulers.java, +        Scheduler c = RxJavaPlugins.getInstance().getSchedulersHook().getComputationScheduler();, +        Scheduler io = RxJavaPlugins.getInstance().getSchedulersHook().getIOScheduler();, +        Scheduler nt = RxJavaPlugins.getInstance().getSchedulersHook().getNewThreadScheduler();, +++ b/rxjava/src/test/java/rx/CovarianceTest.java, +        Observable<HorrorMovie> movie = Observable.<HorrorMovie> just(new HorrorMovie());, +                return Observable.just(new Movie());, +        Observable<Movie> movie = Observable.<Movie> just(new HorrorMovie());, +                return Observable.just(new HorrorMovie());, +++ b/rxjava/src/test/java/rx/ObservableTests.java, +                Observable<Integer> observable = Observable.from(Arrays.asList(1, 2)).subscribeOn(scheduler);, +        Observable<Integer> observable = Observable.just(3, 4).startWith(Arrays.asList(1, 2)).subscribeOn(scheduler);, +++ b/rxjava/src/test/java/rx/internal/operators/BlockingOperatorLatestTest.java, +        BlockingObservable<Long> source = Observable.<Long> error(new RuntimeException("Forced failure!")).subscribeOn(scheduler).toBlocking();, +        BlockingObservable<Long> source = Observable.<Long> error(new RuntimeException("Forced failure!")).subscribeOn(scheduler).toBlocking();, +++ b/rxjava/src/main/java/rx/Observable.java, +++ b/rxjava/src/main/java/rx/Subscriber.java, +++ b/rxjava/src/main/java/rx/observables/GroupedObservable.java, +++ /dev/null, +++ /dev/null, +++ b/rxjava/src/main/java/rx/plugins/RxJavaPlugins.java, +++ b/rxjava/src/main/java/rx/schedulers/Schedulers.java, +        Scheduler c = RxJavaPlugins.getInstance().getSchedulersHook().getComputationScheduler();, +        Scheduler io = RxJavaPlugins.getInstance().getSchedulersHook().getIOScheduler();, +        Scheduler nt = RxJavaPlugins.getInstance().getSchedulersHook().getNewThreadScheduler();, +++ b/rxjava/src/test/java/rx/CovarianceTest.java, +        Observable<HorrorMovie> movie = Observable.<HorrorMovie> just(new HorrorMovie());, +                return Observable.just(new Movie());, +        Observable<Movie> movie = Observable.<Movie> just(new HorrorMovie());, +                return Observable.just(new HorrorMovie());]