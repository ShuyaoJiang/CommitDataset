[+++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.operators.mixed.*;, +     * Maps the upstream intems into {@link CompletableSource}s and subscribes to them one after the, +     * other completes., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMap.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator expects the upstream to support backpressure. If this {@code Flowable} violates the rule, the operator will, +     *  signal a {@code MissingBackpressureException}.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concatMapCompletable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param mapper the function called with the upstream item and should return, +     *               a {@code CompletableSource} to become the next source to, +     *               be subscribed to, +     * @return a new Completable instance, +     * @since 2.1.11 - experimental, +     * @see #concatMapCompletableDelayError(Function), +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    @BackpressureSupport(BackpressureKind.FULL), +    @Experimental, +    public final Completable concatMapCompletable(Function<? super T, ? extends CompletableSource> mapper) {, +        return concatMapCompletable(mapper, 2);, +    }, +, +    /**, +     * Maps the upstream intems into {@link CompletableSource}s and subscribes to them one after the, +     * other completes., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMap.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator expects the upstream to support backpressure. If this {@code Flowable} violates the rule, the operator will, +     *  signal a {@code MissingBackpressureException}.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concatMapCompletable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param mapper the function called with the upstream item and should return, +     *               a {@code CompletableSource} to become the next source to, +     *               be subscribed to, +     * @param prefetch The number of upstream items to prefetch so that fresh items are, +     *                 ready to be mapped when a previous {@code CompletableSource} terminates., +     *                 The operator replenishes after half of the prefetch amount has been consumed, +     *                 and turned into {@code CompletableSource}s., +     * @return a new Completable instance, +     * @since 2.1.11 - experimental, +     * @see #concatMapCompletableDelayError(Function, boolean, int), +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    @BackpressureSupport(BackpressureKind.FULL), +    @Experimental, +    public final Completable concatMapCompletable(Function<? super T, ? extends CompletableSource> mapper, int prefetch) {, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        return RxJavaPlugins.onAssembly(new FlowableConcatMapCompletable<T>(this, mapper, ErrorMode.IMMEDIATE, prefetch));, +    }, +, +    /**, +     * Maps the upstream intems into {@link CompletableSource}s and subscribes to them one after the, +     * other terminates, delaying all errors till both this {@code Flowable} and all, +     * inner {@code CompletableSource}s terminate., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMap.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator expects the upstream to support backpressure. If this {@code Flowable} violates the rule, the operator will, +     *  signal a {@code MissingBackpressureException}.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concatMapCompletableDelayError} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param mapper the function called with the upstream item and should return, +     *               a {@code CompletableSource} to become the next source to, +     *               be subscribed to, +     * @return a new Completable instance, +     * @since 2.1.11 - experimental, +     * @see #concatMapCompletable(Function, int), +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    @BackpressureSupport(BackpressureKind.FULL), +    @Experimental, +    public final Completable concatMapCompletableDelayError(Function<? super T, ? extends CompletableSource> mapper) {, +        return concatMapCompletableDelayError(mapper, true, 2);, +    }, +, +    /**, +     * Maps the upstream intems into {@link CompletableSource}s and subscribes to them one after the, +     * other terminates, optionally delaying all errors till both this {@code Flowable} and all, +     * inner {@code CompletableSource}s terminate., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMap.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator expects the upstream to support backpressure. If this {@code Flowable} violates the rule, the operator will, +     *  signal a {@code MissingBackpressureException}.</dd>, +     *  <dt><b>Scheduler:</b></dt>]