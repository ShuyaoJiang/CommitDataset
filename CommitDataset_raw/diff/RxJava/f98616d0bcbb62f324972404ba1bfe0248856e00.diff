[+++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/ViewObservable.java, +import android.os.Looper;, +    public static void assertUiThread() {, +        if (Looper.getMainLooper() != Looper.myLooper()) {, +            throw new IllegalStateException("Observers must subscribe from the main UI thread, but was " + Thread.currentThread());, +        }, +    }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/ViewObservable.java, +import android.os.Looper;, +    public static void assertUiThread() {, +        if (Looper.getMainLooper() != Looper.myLooper()) {, +            throw new IllegalStateException("Observers must subscribe from the main UI thread, but was " + Thread.currentThread());, +        }, +    }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperationObserveFromAndroidComponent.java, +import rx.Scheduler.Inner;, +import rx.util.functions.Action1;, +                    AndroidSchedulers.mainThread().schedule(new Action1<Inner>() {, +, +                        @Override, +                        public void call(Inner t1) {, +, +                    });, +                }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/ViewObservable.java, +import android.os.Looper;, +    public static void assertUiThread() {, +        if (Looper.getMainLooper() != Looper.myLooper()) {, +            throw new IllegalStateException("Observers must subscribe from the main UI thread, but was " + Thread.currentThread());, +        }, +    }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperationObserveFromAndroidComponent.java, +import rx.Scheduler.Inner;, +import rx.util.functions.Action1;, +                    AndroidSchedulers.mainThread().schedule(new Action1<Inner>() {, +, +                        @Override, +                        public void call(Inner t1) {, +, +                    });, +                }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperatorCompoundButtonInput.java, +import rx.Scheduler.Inner;, +import rx.android.observables.ViewObservable;, +import rx.android.schedulers.AndroidSchedulers;, +import rx.util.functions.Action1;, +        ViewObservable.assertUiThread();, +                AndroidSchedulers.mainThread().schedule(new Action1<Inner>() {, +, +                    @Override, +                    public void call(Inner t1) {, +, +                });, +            }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/ViewObservable.java, +import android.os.Looper;, +    public static void assertUiThread() {, +        if (Looper.getMainLooper() != Looper.myLooper()) {, +            throw new IllegalStateException("Observers must subscribe from the main UI thread, but was " + Thread.currentThread());, +        }, +    }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperationObserveFromAndroidComponent.java, +import rx.Scheduler.Inner;, +import rx.util.functions.Action1;, +                    AndroidSchedulers.mainThread().schedule(new Action1<Inner>() {, +, +                        @Override, +                        public void call(Inner t1) {, +, +                    });, +                }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperatorCompoundButtonInput.java, +import rx.Scheduler.Inner;, +import rx.android.observables.ViewObservable;, +import rx.android.schedulers.AndroidSchedulers;, +import rx.util.functions.Action1;, +        ViewObservable.assertUiThread();, +                AndroidSchedulers.mainThread().schedule(new Action1<Inner>() {, +, +                    @Override, +                    public void call(Inner t1) {, +, +                });, +            }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperatorEditTextInput.java, +import rx.Scheduler.Inner;, +import rx.android.observables.ViewObservable;, +import rx.android.schedulers.AndroidSchedulers;, +import rx.util.functions.Action1;, +        ViewObservable.assertUiThread();, +                AndroidSchedulers.mainThread().schedule(new Action1<Inner>() {, +, +                    @Override, +                    public void call(Inner t1) {, +, +                });, +            }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/ViewObservable.java, +import android.os.Looper;, +    public static void assertUiThread() {]