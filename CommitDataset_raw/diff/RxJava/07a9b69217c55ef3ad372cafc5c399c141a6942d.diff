[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDefaultIfEmpty;, +    /**, +     * Returns the elements of the specified sequence or the specified default, +     * value in a singleton sequence if the sequence is empty., +     *, +     * @param defaultValue, +     *            The value to return if the sequence is empty., +     * @return An observable sequence that contains the specified default value, +     *         if the source is empty; otherwise, the elements of the source, +     *         itself., +     *, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229624(v=vs.103).aspx">MSDN: Observable.DefaultIfEmpty</a>, +     */, +    public Observable<T> defaultIfEmpty(T defaultValue) {, +        return create(OperationDefaultIfEmpty.defaultIfEmpty(this, defaultValue));, +    }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDefaultIfEmpty;, +    /**, +     * Returns the elements of the specified sequence or the specified default, +     * value in a singleton sequence if the sequence is empty., +     *, +     * @param defaultValue, +     *            The value to return if the sequence is empty., +     * @return An observable sequence that contains the specified default value, +     *         if the source is empty; otherwise, the elements of the source, +     *         itself., +     *, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229624(v=vs.103).aspx">MSDN: Observable.DefaultIfEmpty</a>, +     */, +    public Observable<T> defaultIfEmpty(T defaultValue) {, +        return create(OperationDefaultIfEmpty.defaultIfEmpty(this, defaultValue));, +    }, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDefaultIfEmpty;, +    /**, +     * Returns the elements of the specified sequence or the specified default, +     * value in a singleton sequence if the sequence is empty., +     *, +     * @param defaultValue, +     *            The value to return if the sequence is empty., +     * @return An observable sequence that contains the specified default value, +     *         if the source is empty; otherwise, the elements of the source, +     *         itself., +     *, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229624(v=vs.103).aspx">MSDN: Observable.DefaultIfEmpty</a>, +     */, +    public Observable<T> defaultIfEmpty(T defaultValue) {, +        return create(OperationDefaultIfEmpty.defaultIfEmpty(this, defaultValue));, +    }, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefaultIfEmpty.java, +package rx.operators;, +, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +import org.junit.Test;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscription;, +, +/**, + * Returns the elements of the specified sequence or the specified default value, + * in a singleton sequence if the sequence is empty., + */, +public class OperationDefaultIfEmpty {, +, +    /**, +     * Returns the elements of the specified sequence or the specified default, +     * value in a singleton sequence if the sequence is empty., +     *, +     * @param source, +     *            The sequence to return the specified value for if it is empty., +     * @param defaultValue, +     *            The value to return if the sequence is empty., +     * @return An observable sequence that contains the specified default value, +     *         if the source is empty; otherwise, the elements of the source, +     *         itself., +     */, +    public static <T> OnSubscribeFunc<T> defaultIfEmpty(, +            Observable<? extends T> source, T defaultValue) {, +        return new DefaultIfEmpty<T>(source, defaultValue);, +    }, +, +    private static class DefaultIfEmpty<T> implements OnSubscribeFunc<T> {, +, +        private final Observable<? extends T> source;, +        private final T defaultValue;, +, +        private DefaultIfEmpty(Observable<? extends T> source, T defaultValue) {, +            this.source = source;, +            this.defaultValue = defaultValue;, +        }]