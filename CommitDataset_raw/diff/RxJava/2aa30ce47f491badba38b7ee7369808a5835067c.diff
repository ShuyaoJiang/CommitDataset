[+++ b/src/main/java/io/reactivex/Observable.java, +    , +    public final <B> Observable<Observable<T>> window(Publisher<B> boundary) {, +        return window(boundary, bufferSize());, +    }, +, +    public final <B> Observable<Observable<T>> window(Publisher<B> boundary, int bufferSize) {, +        return lift(new OperatorWindowBoundary<>(boundary, bufferSize));, +    }, +, +    public final <B> Observable<Observable<T>> window(Supplier<? extends Publisher<B>> boundary) {, +        return window(boundary, bufferSize());, +    }, +, +    public final <B> Observable<Observable<T>> window(Supplier<? extends Publisher<B>> boundary, int bufferSize) {, +        return lift(new OperatorWindowBoundarySupplier<>(boundary, bufferSize));, +    }, +    , +    public final <U, V> Observable<Observable<T>> window(, +            Publisher<U> windowOpen, , +            Function<? super U, ? extends Publisher<V>> windowClose) {, +        return window(windowOpen, windowClose, bufferSize());, +    }, +, +    public final <U, V> Observable<Observable<T>> window(, +            Publisher<U> windowOpen, , +            Function<? super U, ? extends Publisher<V>> windowClose, int bufferSize) {, +        return lift(new OperatorWindowBoundarySelector<>(windowOpen, windowClose, bufferSize));, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +    , +    public final <B> Observable<Observable<T>> window(Publisher<B> boundary) {, +        return window(boundary, bufferSize());, +    }, +, +    public final <B> Observable<Observable<T>> window(Publisher<B> boundary, int bufferSize) {, +        return lift(new OperatorWindowBoundary<>(boundary, bufferSize));, +    }, +, +    public final <B> Observable<Observable<T>> window(Supplier<? extends Publisher<B>> boundary) {, +        return window(boundary, bufferSize());, +    }, +, +    public final <B> Observable<Observable<T>> window(Supplier<? extends Publisher<B>> boundary, int bufferSize) {, +        return lift(new OperatorWindowBoundarySupplier<>(boundary, bufferSize));, +    }, +    , +    public final <U, V> Observable<Observable<T>> window(, +            Publisher<U> windowOpen, , +            Function<? super U, ? extends Publisher<V>> windowClose) {, +        return window(windowOpen, windowClose, bufferSize());, +    }, +, +    public final <U, V> Observable<Observable<T>> window(, +            Publisher<U> windowOpen, , +            Function<? super U, ? extends Publisher<V>> windowClose, int bufferSize) {, +        return lift(new OperatorWindowBoundarySelector<>(windowOpen, windowClose, bufferSize));, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorWindowBoundary.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import java.util.Queue;, +import java.util.concurrent.atomic.*;, +, +import org.reactivestreams.*;, +, +import io.reactivex.Observable;, +import io.reactivex.Observable.Operator;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.queue.MpscLinkedQueue;, +import io.reactivex.internal.subscribers.*;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +import io.reactivex.internal.util.NotificationLite;, +import io.reactivex.plugins.RxJavaPlugins;, +import io.reactivex.subjects.UnicastSubject;, +import io.reactivex.subscribers.SerializedSubscriber;, +, +public final class OperatorWindowBoundary<T, B> implements Operator<Observable<T>, T> {, +    final Publisher<B> other;, +    final int bufferSize;, +    , +    public OperatorWindowBoundary(Publisher<B> other, int bufferSize) {, +        this.other = other;, +        this.bufferSize = bufferSize;, +    }, +    , +    @Override]