[+++ b/src/main/java/io/reactivex/Flowable.java, +        return new FlowableDoOnLifecycle<T>(this, onSubscribe, onRequest, onCancel);, +        return new FlowableSerialized<T>(this);, +++ b/src/main/java/io/reactivex/Flowable.java, +        return new FlowableDoOnLifecycle<T>(this, onSubscribe, onRequest, onCancel);, +        return new FlowableSerialized<T>(this);, +++ b/src/main/java/io/reactivex/Observable.java, +        return new ObservableDoOnLifecycle<T>(this, onSubscribe, onCancel);, +        return new ObservableSerialized<T>(this);, +++ b/src/main/java/io/reactivex/Flowable.java, +        return new FlowableDoOnLifecycle<T>(this, onSubscribe, onRequest, onCancel);, +        return new FlowableSerialized<T>(this);, +++ b/src/main/java/io/reactivex/Observable.java, +        return new ObservableDoOnLifecycle<T>(this, onSubscribe, onCancel);, +        return new ObservableSerialized<T>(this);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnLifecycle.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +package io.reactivex.internal.operators.flowable;, +, +import io.reactivex.Flowable;, +import io.reactivex.functions.Consumer;, +import io.reactivex.functions.LongConsumer;, +import io.reactivex.internal.subscribers.flowable.SubscriptionLambdaSubscriber;, +import org.reactivestreams.Subscriber;, +import org.reactivestreams.Subscription;, +, +public final class FlowableDoOnLifecycle<T> extends FlowableSource<T, T> {, +    private final Consumer<? super Subscription> onSubscribe;, +    private final LongConsumer onRequest;, +    private final Runnable onCancel;, +, +    public FlowableDoOnLifecycle(Flowable<T> source, Consumer<? super Subscription> onSubscribe,, +            LongConsumer onRequest, Runnable onCancel) {, +        super(source);, +        this.onSubscribe = onSubscribe;, +        this.onRequest = onRequest;, +        this.onCancel = onCancel;, +    }, +, +    @Override, +    protected void subscribeActual(Subscriber<? super T> s) {, +        source.subscribe(new SubscriptionLambdaSubscriber<T>(s, onSubscribe, onRequest, onCancel));, +    }, +}, +++ b/src/main/java/io/reactivex/Flowable.java, +        return new FlowableDoOnLifecycle<T>(this, onSubscribe, onRequest, onCancel);, +        return new FlowableSerialized<T>(this);, +++ b/src/main/java/io/reactivex/Observable.java, +        return new ObservableDoOnLifecycle<T>(this, onSubscribe, onCancel);, +        return new ObservableSerialized<T>(this);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnLifecycle.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +package io.reactivex.internal.operators.flowable;, +, +import io.reactivex.Flowable;, +import io.reactivex.functions.Consumer;, +import io.reactivex.functions.LongConsumer;, +import io.reactivex.internal.subscribers.flowable.SubscriptionLambdaSubscriber;, +import org.reactivestreams.Subscriber;, +import org.reactivestreams.Subscription;, +, +public final class FlowableDoOnLifecycle<T> extends FlowableSource<T, T> {, +    private final Consumer<? super Subscription> onSubscribe;, +    private final LongConsumer onRequest;, +    private final Runnable onCancel;, +, +    public FlowableDoOnLifecycle(Flowable<T> source, Consumer<? super Subscription> onSubscribe,, +            LongConsumer onRequest, Runnable onCancel) {, +        super(source);, +        this.onSubscribe = onSubscribe;, +        this.onRequest = onRequest;, +        this.onCancel = onCancel;, +    }, +, +    @Override, +    protected void subscribeActual(Subscriber<? super T> s) {, +        source.subscribe(new SubscriptionLambdaSubscriber<T>(s, onSubscribe, onRequest, onCancel));, +    }]