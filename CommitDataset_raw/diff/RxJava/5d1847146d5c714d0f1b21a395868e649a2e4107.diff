[+++ b/rxjava-core/src/main/java/rx/GroupedObservable.java, +import rx.util.functions.Func1;, +/**, + * An {@link Observable} that has been grouped by a key whose value can be obtained using {@link #getKey()} <p>, + * , + * @see {@link Observable#groupBy(Observable, Func1)}, + * , + * @param <K>, + * @param <T>, + */, +    public GroupedObservable(K key, Func1<Observer<T>, Subscription> onSubscribe) {, +        super(onSubscribe, true);, +++ b/rxjava-core/src/main/java/rx/GroupedObservable.java, +import rx.util.functions.Func1;, +/**, + * An {@link Observable} that has been grouped by a key whose value can be obtained using {@link #getKey()} <p>, + * , + * @see {@link Observable#groupBy(Observable, Func1)}, + * , + * @param <K>, + * @param <T>, + */, +    public GroupedObservable(K key, Func1<Observer<T>, Subscription> onSubscribe) {, +        super(onSubscribe, true);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    /*package*/ Observable(Func1<Observer<T>, Subscription> onSubscribe, boolean isTrusted) {, +++ b/rxjava-core/src/main/java/rx/GroupedObservable.java, +import rx.util.functions.Func1;, +/**, + * An {@link Observable} that has been grouped by a key whose value can be obtained using {@link #getKey()} <p>, + * , + * @see {@link Observable#groupBy(Observable, Func1)}, + * , + * @param <K>, + * @param <T>, + */, +    public GroupedObservable(K key, Func1<Observer<T>, Subscription> onSubscribe) {, +        super(onSubscribe, true);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    /*package*/ Observable(Func1<Observer<T>, Subscription> onSubscribe, boolean isTrusted) {, +++ b/rxjava-core/src/main/java/rx/operators/OperatorGroupBy.java, +        return new GroupedObservable<K, R>(key, new Func1<Observer<R>, Subscription>() {, +, +            @Override, +            public Subscription call(Observer<R> observer) {, +                return observable.subscribe(observer);, +        });, +    }]