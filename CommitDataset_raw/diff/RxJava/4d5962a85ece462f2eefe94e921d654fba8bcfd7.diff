[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import rx.operators.OperationSwitch;, +     * Accepts an {@link Observable} sequence of {@link Observable} sequences, and transforms it into a single, +     * {@link Observable} sequence, which publishes the values of the most recently published {@link Observable} sequence., +     *  , +     * @param sequenceOfSequences, +     *            the {@link Observable} sequence of {@link Observable} sequences., +     * @return an {@link Observable} which publishes only the values of the most recently published , +     *         {@link Observable} sequence., +     */, +    public static <T> Observable<T> switchDo(Observable<Observable<T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo(sequenceOfSequences));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import rx.operators.OperationSwitch;, +     * Accepts an {@link Observable} sequence of {@link Observable} sequences, and transforms it into a single, +     * {@link Observable} sequence, which publishes the values of the most recently published {@link Observable} sequence., +     *  , +     * @param sequenceOfSequences, +     *            the {@link Observable} sequence of {@link Observable} sequences., +     * @return an {@link Observable} which publishes only the values of the most recently published , +     *         {@link Observable} sequence., +     */, +    public static <T> Observable<T> switchDo(Observable<Observable<T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo(sequenceOfSequences));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/concurrency/TestScheduler.java, +import rx.subscriptions.Subscriptions;, +        queue.add(new TimedAction<T>(this, time + unit.toNanos(delayTime), action, state));, +        return Subscriptions.empty();, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import rx.operators.OperationSwitch;, +     * Accepts an {@link Observable} sequence of {@link Observable} sequences, and transforms it into a single, +     * {@link Observable} sequence, which publishes the values of the most recently published {@link Observable} sequence., +     *  , +     * @param sequenceOfSequences, +     *            the {@link Observable} sequence of {@link Observable} sequences., +     * @return an {@link Observable} which publishes only the values of the most recently published , +     *         {@link Observable} sequence., +     */, +    public static <T> Observable<T> switchDo(Observable<Observable<T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo(sequenceOfSequences));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/concurrency/TestScheduler.java, +import rx.subscriptions.Subscriptions;, +        queue.add(new TimedAction<T>(this, time + unit.toNanos(delayTime), action, state));, +        return Subscriptions.empty();, +++ b/rxjava-core/src/main/java/rx/operators/OperationSwitch.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;]