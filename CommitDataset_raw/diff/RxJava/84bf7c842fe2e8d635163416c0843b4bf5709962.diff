[+++ b/rxjava-core/src/main/java/rx/operators/OperatorSubscribeOnBounded.java, +                    o.subscribe(bus);, +++ b/rxjava-core/src/main/java/rx/operators/OperatorSubscribeOnBounded.java, +                    o.subscribe(bus);, +++ b/rxjava-core/src/test/java/rx/operators/OperatorSubscribeOnBoundedTest.java, +    @Test(timeout = 2000), +    public void testNoDeadlock() {, +        List<Integer> data = Arrays.asList(1, 2, 3, 4, 5);, +        Observable<Integer> source = Observable.from(data);, +        Observable<Integer> result = source.nest().lift(new OperatorSubscribeOnBounded<Integer>(Schedulers.newThread(), 1));, +        , +        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();, +        , +        result.subscribe(ts);, +        , +        ts.awaitTerminalEvent();, +        ts.assertReceivedOnNext(data);, +    }]