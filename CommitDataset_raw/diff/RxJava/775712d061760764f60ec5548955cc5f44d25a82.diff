[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.*;, +        return _create(OperatorTakeUntil.takeUntil(source, other));, +     * Returns the values from the source observable sequence until the other observable sequence produces a value., +     *, +     * @param other  the observable sequence that terminates propagation of elements of the source sequence., +     * @param <E>    the other type., +     * @return An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation., +     */, +    public <E> Observable<T> takeUntil(Observable<E> other) {, +        return takeUntil(this, other);, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.*;, +        return _create(OperatorTakeUntil.takeUntil(source, other));, +     * Returns the values from the source observable sequence until the other observable sequence produces a value., +     *, +     * @param other  the observable sequence that terminates propagation of elements of the source sequence., +     * @param <E>    the other type., +     * @return An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation., +     */, +    public <E> Observable<T> takeUntil(Observable<E> other) {, +        return takeUntil(this, other);, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperatorTakeUntil.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import org.junit.Test;, +import rx.Notification;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.util.AtomicObservableSubscription;, +import rx.util.Pair;, +import rx.util.functions.Func1;, +, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.*;, +, +public class OperatorTakeUntil {, +, +    /**, +     * Returns the values from the source observable sequence until the other observable sequence produces a value., +     *, +     * @param source the source sequence to propagate elements for., +     * @param other  the observable sequence that terminates propagation of elements of the source sequence., +     * @param <T>    the type of source., +     * @param <E>    the other type., +     * @return An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation., +     */, +    public static <T, E> Func1<Observer<T>, Subscription> takeUntil(final Observable<T> source, final Observable<E> other) {, +        return new TakeUntil<T, E>(source, other);, +    }, +, +    private static class TakeUntil<T, E> implements Func1<Observer<T>, Subscription> {, +, +        private final Observable<T> source;, +        private final Observable<E> other;, +        private final AtomicObservableSubscription subscription = new AtomicObservableSubscription();, +, +        private TakeUntil(Observable<T> source, Observable<E> other) {, +            this.source = source;, +            this.other = other;, +        }, +, +        @Override, +        public Subscription call(final Observer<T> observer) {, +            Observable<Pair<Type, Notification<T>>> result = mergeWithIdentifier(source, other);, +, +            return subscription.wrap(result.subscribe(new Observer<Pair<Type, Notification<T>>>() {, +                @Override, +                public void onCompleted() {, +                    // ignore, +                }, +, +                @Override, +                public void onError(Exception e) {, +                    // ignore, +                }, +, +                @Override]