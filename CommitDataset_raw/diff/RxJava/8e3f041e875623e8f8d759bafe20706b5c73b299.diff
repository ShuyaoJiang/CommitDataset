[+++ b/src/main/java/io/reactivex/Observable.java, +        return window(timespan, unit, scheduler, count, restart, bufferSize());, +    public final Observable<Observable<T>> window(, +            long timespan, TimeUnit unit, Scheduler scheduler, , +            long count, boolean restart, int bufferSize) {, +++ b/src/main/java/io/reactivex/Observable.java, +        return window(timespan, unit, scheduler, count, restart, bufferSize());, +    public final Observable<Observable<T>> window(, +            long timespan, TimeUnit unit, Scheduler scheduler, , +            long count, boolean restart, int bufferSize) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorConcatMap.java, +            }, +++ b/src/main/java/io/reactivex/Observable.java, +        return window(timespan, unit, scheduler, count, restart, bufferSize());, +    public final Observable<Observable<T>> window(, +            long timespan, TimeUnit unit, Scheduler scheduler, , +            long count, boolean restart, int bufferSize) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorConcatMap.java, +            }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorWindow.java, +import java.util.concurrent.atomic.*;, +    static final class WindowExactSubscriber<T>, +    extends AtomicInteger, +    implements Subscriber<T>, Subscription, Runnable {, +        /** */, +        private static final long serialVersionUID = -7481782523886138128L;, +        volatile boolean cancelled;, +        , +            if (w == null && !cancelled) {, +                w = UnicastSubject.create(capacityHint, this);, +                if (cancelled) {, +                    s.cancel();, +                }, +            cancelled = true;, +        }, +        , +        @Override, +        public void run() {, +            if (cancelled) {, +    }, +    static final class WindowSkipSubscriber<T> extends AtomicBoolean , +    implements Subscriber<T>, Subscription, Runnable {, +        volatile boolean cancelled;, +        , +        volatile int wip;, +        @SuppressWarnings("rawtypes"), +        static final AtomicIntegerFieldUpdater<WindowSkipSubscriber> WIP =, +                AtomicIntegerFieldUpdater.newUpdater(WindowSkipSubscriber.class, "wip");, +        , +            if (i % s == 0 && !cancelled) {, +                WIP.getAndIncrement(this);, +                UnicastSubject<T> w = UnicastSubject.create(capacityHint, this);, +                if (ws.isEmpty() && cancelled) {, +                    this.s.cancel();, +                    return;, +                }, +            cancelled = true;, +        }, +        , +        @Override, +        public void run() {, +            if (WIP.decrementAndGet(this) == 0) {, +                if (cancelled) {, +    }, +}, +++ b/src/main/java/io/reactivex/Observable.java, +        return window(timespan, unit, scheduler, count, restart, bufferSize());, +    public final Observable<Observable<T>> window(, +            long timespan, TimeUnit unit, Scheduler scheduler, , +            long count, boolean restart, int bufferSize) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorConcatMap.java, +            }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorWindow.java, +import java.util.concurrent.atomic.*;, +    static final class WindowExactSubscriber<T>, +    extends AtomicInteger, +    implements Subscriber<T>, Subscription, Runnable {, +        /** */, +        private static final long serialVersionUID = -7481782523886138128L;, +        volatile boolean cancelled;, +        , +            if (w == null && !cancelled) {, +                w = UnicastSubject.create(capacityHint, this);, +                if (cancelled) {, +                    s.cancel();, +                }, +            cancelled = true;, +        }, +        , +        @Override, +        public void run() {, +            if (cancelled) {, +    }, +    static final class WindowSkipSubscriber<T> extends AtomicBoolean , +    implements Subscriber<T>, Subscription, Runnable {, +        volatile boolean cancelled;, +        , +        volatile int wip;, +        @SuppressWarnings("rawtypes"), +        static final AtomicIntegerFieldUpdater<WindowSkipSubscriber> WIP =]