[+++ b/src/main/java/rx/Observable.java, +     *  <dd>The operator honors backpressure on its outer subscriber, ignores backpressure in its inner Observables , +++ b/src/main/java/rx/Observable.java, +     *  <dd>The operator honors backpressure on its outer subscriber, ignores backpressure in its inner Observables , +++ b/src/main/java/rx/internal/operators/OperatorWindowWithSize.java, +            ExactSubscriber e = new ExactSubscriber(child);, +            e.init();, +            return e;, +        InexactSubscriber ie = new InexactSubscriber(child);, +        ie.init();, +        return ie;, +        }, +        void init() {, +                        unsubscribe();, +                    unsubscribe();, +        volatile boolean noWindow = true;, +        }, +, +        void init() {, +                    if (noWindow) {, +                        unsubscribe();, +            , +            child.setProducer(new Producer() {, +                @Override, +                public void request(long n) {, +                    if (n > 0) {, +                        long u = n * size;, +                        if (((u >>> 31) != 0) && (u / n != size)) {, +                            u = Long.MAX_VALUE;, +                        }, +                        requestMore(u);, +                    }, +                }, +            });, +        void requestMore(long n) {, +            request(n);, +                    if (chunks.isEmpty()) {, +                        noWindow = false;, +                    }, +            if (chunks.isEmpty()) {, +                noWindow = true;, +                if (child.isUnsubscribed()) {, +                    unsubscribe();, +                }, +            noWindow = true;, +            noWindow = true;, +++ b/src/main/java/rx/Observable.java, +     *  <dd>The operator honors backpressure on its outer subscriber, ignores backpressure in its inner Observables , +++ b/src/main/java/rx/internal/operators/OperatorWindowWithSize.java, +            ExactSubscriber e = new ExactSubscriber(child);, +            e.init();, +            return e;, +        InexactSubscriber ie = new InexactSubscriber(child);, +        ie.init();, +        return ie;, +        }, +        void init() {, +                        unsubscribe();, +                    unsubscribe();, +        volatile boolean noWindow = true;, +        }, +, +        void init() {, +                    if (noWindow) {, +                        unsubscribe();, +            , +            child.setProducer(new Producer() {, +                @Override, +                public void request(long n) {, +                    if (n > 0) {, +                        long u = n * size;, +                        if (((u >>> 31) != 0) && (u / n != size)) {, +                            u = Long.MAX_VALUE;, +                        }, +                        requestMore(u);, +                    }, +                }, +            });, +        void requestMore(long n) {, +            request(n);, +                    if (chunks.isEmpty()) {, +                        noWindow = false;, +                    }, +            if (chunks.isEmpty()) {, +                noWindow = true;, +                if (child.isUnsubscribed()) {, +                    unsubscribe();, +                }, +            noWindow = true;, +            noWindow = true;, +++ b/src/main/java/rx/internal/operators/OperatorWindowWithTime.java, +import java.util.*;, +, +import rx.*;, +import rx.Observable;, +import rx.Observer;, +import rx.observers.*;, +import rx.subscriptions.Subscriptions;, +            s.add(worker);, +        s.add(worker);]