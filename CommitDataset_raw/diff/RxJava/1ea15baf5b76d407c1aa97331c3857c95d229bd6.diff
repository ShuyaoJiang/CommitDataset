[+++ b/CHANGES.md, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.13.2-SNAPSHOT, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.13.2-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * , +     * <p>A typical implementation of {@code subscribe} does the following:, +     * , +     * <p>A typical implementation of {@code subscribe} does the following:, +     * , +     * Combines the given observables, emitting an event containing an aggregation of the latest values of each of the source observables, +     * each time an event is received from one of the source observables, where the aggregation is defined by the given function., +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/combineLatest.png">, +     * , +     * <p>This Observable produces connected non-overlapping buffers. The current buffer is, +     * , +     * <p>This Observable produces buffers. Buffers are created when the specified "bufferOpenings", +     * , +     * <p>This Observable produces connected non-overlapping buffers, each containing "count", +     * , +     * , +     * <p>This Observable produces connected non-overlapping buffers, each of a fixed duration, +     * , +     * <p>This Observable produces connected non-overlapping buffers, each of a fixed duration, +     * , +     * <p> {@code zip} applies this function in strict sequence, so the first item emitted by the, +     * Returns an Observable that forwards all items emitted from the source Observable that are sequentially distinct according to, +     * a key selector function., +     * Returns an Observable that forwards all items emitted from the source Observable that are sequentially distinct according to, +     * a comparator., +     * Returns an Observable that forwards all items emitted from the source Observable that are sequentially distinct according to, +     * a key selector function and a comparator., +     * Returns an Observable that forwards all items emitted from the source Observable that are distinct according to, +     * a comparator., +     * Returns an Observable that forwards all items emitted from the source Observable that are distinct according to, +     * a key selector function., +     * Returns an Observable that forwards all items emitted from the source Observable that are distinct according to, +     * a key selector function and a comparator., +     *            a function that evaluates an item emitted by the source Observable, returning {@code true} if it passes the filter, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.13.2-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * , +     * <p>A typical implementation of {@code subscribe} does the following:, +     * , +     * <p>A typical implementation of {@code subscribe} does the following:, +     * , +     * Combines the given observables, emitting an event containing an aggregation of the latest values of each of the source observables, +     * each time an event is received from one of the source observables, where the aggregation is defined by the given function., +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/combineLatest.png">, +     * , +     * <p>This Observable produces connected non-overlapping buffers. The current buffer is, +     * , +     * <p>This Observable produces buffers. Buffers are created when the specified "bufferOpenings", +     * , +     * <p>This Observable produces connected non-overlapping buffers, each containing "count", +     * , +     * , +     * <p>This Observable produces connected non-overlapping buffers, each of a fixed duration, +     * , +     * <p>This Observable produces connected non-overlapping buffers, each of a fixed duration, +     * , +     * <p> {@code zip} applies this function in strict sequence, so the first item emitted by the, +     * Returns an Observable that forwards all items emitted from the source Observable that are sequentially distinct according to, +     * a key selector function., +     * Returns an Observable that forwards all items emitted from the source Observable that are sequentially distinct according to, +     * a comparator., +     * Returns an Observable that forwards all items emitted from the source Observable that are sequentially distinct according to, +     * a key selector function and a comparator., +     * Returns an Observable that forwards all items emitted from the source Observable that are distinct according to, +     * a comparator., +     * Returns an Observable that forwards all items emitted from the source Observable that are distinct according to, +     * a key selector function., +     * Returns an Observable that forwards all items emitted from the source Observable that are distinct according to, +     * a key selector function and a comparator., +     *            a function that evaluates an item emitted by the source Observable, returning {@code true} if it passes the filter, +++ b/rxjava-core/src/main/java/rx/concurrency/NewThreadScheduler.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ThreadFactory;, +import java.util.concurrent.atomic.AtomicLong;, +, +    private final static NewThreadScheduler INSTANCE = new NewThreadScheduler();, +    private final static AtomicLong count = new AtomicLong();, +    private NewThreadScheduler() {, +, +    }, +, +    private static class EventLoopScheduler extends Scheduler {, +        private final ExecutorService executor;, +, +        private EventLoopScheduler() {, +            executor = Executors.newFixedThreadPool(1, new ThreadFactory() {, +, +                @Override, +                public Thread newThread(Runnable r) {]