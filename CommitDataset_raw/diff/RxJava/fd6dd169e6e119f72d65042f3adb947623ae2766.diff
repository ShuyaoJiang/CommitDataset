[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import static org.junit.Assert.*;, +import rx.util.functions.Action2;, +     * @see MSDN: <a href="http://msdn.microsoft.com/en-us/library/hh229460.aspx">Observable.Range Method (Int32, Int32)</a>, +     * @see MSDN: <a href="http://msdn.microsoft.com/en-us/library/hh211896.aspx">Observable.Range Method (Int32, Int32, IScheduler)</a>, +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     * Repeats the observable sequence indefinitely., +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     * Create an Observable that extracts integer values from this Observable via, +     * the provided function and computes the integer sum of the value sequence., +     * @param valueExtractor the function to extract an integer from this Observable, +     * @return an Observable that extracts integer values from this Observable via, +     * the provided function and computes the integer sum of the value sequence., +     * Create an Observable that extracts long values from this Observable via, +     * the provided function and computes the long sum of the value sequence., +     * @param valueExtractor the function to extract an long from this Observable, +     * @return an Observable that extracts long values from this Observable via, +     * the provided function and computes the long sum of the value sequence., +     * Create an Observable that extracts float values from this Observable via, +     * the provided function and computes the float sum of the value sequence., +     * @param valueExtractor the function to extract an float from this Observable, +     * @return an Observable that extracts float values from this Observable via, +     * the provided function and computes the float sum of the value sequence., +     * Create an Observable that extracts double values from this Observable via, +     * the provided function and computes the double sum of the value sequence., +     * @param valueExtractor the function to extract an double from this Observable, +     * @return an Observable that extracts double values from this Observable via, +     * the provided function and computes the double sum of the value sequence., +     * Create an Observable that extracts integer values from this Observable via, +     * the provided function and computes the integer average of the value sequence., +     * @param valueExtractor the function to extract an integer from this Observable, +     * @return an Observable that extracts integer values from this Observable via, +     * the provided function and computes the integer average of the value sequence., +     * Create an Observable that extracts long values from this Observable via, +     * the provided function and computes the long average of the value sequence., +     * @param valueExtractor the function to extract an long from this Observable, +     * @return an Observable that extracts long values from this Observable via, +     * the provided function and computes the long average of the value sequence., +     * Create an Observable that extracts float values from this Observable via, +     * the provided function and computes the float average of the value sequence., +     * @param valueExtractor the function to extract an float from this Observable, +     * @return an Observable that extracts float values from this Observable via, +     * the provided function and computes the float average of the value sequence., +     * Create an Observable that extracts double values from this Observable via, +     * the provided function and computes the double average of the value sequence., +     * @param valueExtractor the function to extract an double from this Observable, +     * @return an Observable that extracts double values from this Observable via, +     * the provided function and computes the double average of the value sequence., +     * Collect values into a single mutable data structure., +     * <p>, +     * A simplified version of `reduce` that does not need to return the state on each pass., +     * <p>, +     * , +     * @param state, +     * @param collector, +     * @return, +     */, +    public <R> Observable<R> collect(R state, final Action2<R, ? super T> collector) {, +        Func2<R, T, R> accumulator = new Func2<R, T, R>() {, +, +            @Override, +            public R call(R state, T value) {, +                collector.call(state, value);, +                return state;, +            }, +, +        };, +        return reduce(state, accumulator);, +    }, +    , +    /**, +     * @param time, +     *            the length of the time window, +     * @param unit, +     *            the time unit, +     * Create an Observable that skips values before the given time, +     * elapses while waiting on the given scheduler., +     * @param time, +     *            the length of the time window, +     * @param unit, +     *            the time unit, +     * @param scheduler, +     *            the scheduler where the timed wait happens, +     * @return an Observable that skips values before the given time, +     *         elapses while waiting on the given scheduler, +     * @throws IllegalArgumentException, +     *             if the source emits more than one item, +      * Create an Observable that takes the emitted values of the source, +      * @return an Observable that takes the emitted values of the source, +      *         Observable before the time runs out., +      * Create an Observable that takes the emitted values of the source, +      * @return an Observable that takes the emitted values of the source, +      *         Observable before the time runs out, waiting on the given scheduler., +     * Create an observable which skips values emitted in a time window, +     * before the source completes., +     * @return an observable which skips values emitted in a time window, +     * before the source completes, +     * Create an observable which skips values emitted in a time window]