[+++ b/src/main/java/rx/Notification.java, +public class Notification<T> {, +++ b/src/main/java/rx/Notification.java, +public class Notification<T> {, +++ b/src/main/java/rx/Observable.java, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#count-and-countlong">RxJava wiki: count</a>, +     * @see #countLong(), +     * Returns an Observable that counts the total number of items emitted by the source Observable and emits, +     * this count as a 64-bit Long., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/longCount.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure Support:</b></dt>, +     *  <dd>This operator does not support backpressure because by intent it will receive all values and reduce, +     *      them to a single {@code onNext}.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code countLong} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @return an Observable that emits a single item: the number of items emitted by the source Observable as a, +     *         64-bit Long item, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#count-and-countlong">RxJava wiki: countLong</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229120.aspx">MSDN: Observable.LongCount</a>, +     * @see #count(), +     */, +    public final Observable<Long> countLong() {, +        return reduce(0L, new Func2<Long, T, Long>() {, +            @Override, +            public final Long call(Long t1, T t2) {, +                return t1 + 1;, +            }, +        });, +    }, +, +    /**, +        return delaySubscription(subscriptionDelay).lift(new OperatorDelayWithSelector<T, V>(this, itemDelay));, +        return lift(new OperatorDelayWithSelector<T, U>(this, itemDelay));, +        return lift(new OperatorDelay<T>(this, delay, unit, scheduler));, +     * Returns an Observable that delays the subscription to the source Observable until a second Observable, +     * emits an item., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delaySubscription.o.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>This version of {@code delay} operates by default on the {@code compuation} {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param subscriptionDelay, +     *            a function that returns an Observable that triggers the subscription to the source Observable, +     *            once it emits any item, +     * @return an Observable that delays the subscription to the source Observable until the Observable returned, +     *         by {@code subscriptionDelay} emits an item, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators#delaysubscription">RxJava wiki: delaySubscription</a>, +     */, +    public final <U> Observable<T> delaySubscription(Func0<? extends Observable<U>> subscriptionDelay) {, +        return create(new OnSubscribeDelaySubscriptionWithSelector<T, U>(this, subscriptionDelay));, +    }, +, +    /**, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code groupBy} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#groupby">RxJava wiki: groupBy</a>, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code groupBy} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#groupby">RxJava wiki: groupBy</a>, +     * a {@link void} item to the Observable provided as an argument to the {@code notificationHandler}, +     * function. If that Observable calls {@code onComplete} or {@code onError} then {@code repeatWhen} will, +     * a {@link void} item to the Observable provided as an argument to the {@code notificationHandler}, +     * function. If that Observable calls {@code onComplete} or {@code onError} then {@code repeatWhen} will, +     * {@link Throwable} item to the Observable provided as an argument to the {@code notificationHandler}, +     * function. If that Observable calls {@code onComplete} or {@code onError} then {@code retry} will call, +     * Returns an Observable that emits the same values as the source observable with the exception of an, +     * {@code onError}. An {@code onError} will cause the emission of the {@link Throwable} that cause the, +     * error to the Observable returned from {@code notificationHandler}. If that Observable calls, +     * {@code onComplete} or {@code onError} then {@code retry} will call {@code onCompleted} or {@code onError}, +     * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a, +     * particular Scheduler.    , +++ b/src/main/java/rx/Notification.java, +public class Notification<T> {, +++ b/src/main/java/rx/Observable.java, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#count-and-countlong">RxJava wiki: count</a>, +     * @see #countLong(), +     * Returns an Observable that counts the total number of items emitted by the source Observable and emits, +     * this count as a 64-bit Long., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/longCount.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure Support:</b></dt>, +     *  <dd>This operator does not support backpressure because by intent it will receive all values and reduce, +     *      them to a single {@code onNext}.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code countLong} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @return an Observable that emits a single item: the number of items emitted by the source Observable as a, +     *         64-bit Long item]