[+++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +        // TODO start with size hint, +                    pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +    private void pollQueue(AtomicLong wip, AtomicLong requested, Queue<Object> queue, Subscriber<? super T> child) {, +++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +        // TODO start with size hint, +                    pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +    private void pollQueue(AtomicLong wip, AtomicLong requested, Queue<Object> queue, Subscriber<? super T> child) {, +++ b/src/test/java/rx/internal/operators/OperatorOnBackpressureBufferTest.java, +import static org.junit.Assert.assertEquals;, +, +++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +        // TODO start with size hint, +                    pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +    private void pollQueue(AtomicLong wip, AtomicLong requested, Queue<Object> queue, Subscriber<? super T> child) {, +++ b/src/test/java/rx/internal/operators/OperatorOnBackpressureBufferTest.java, +import static org.junit.Assert.assertEquals;, +, +++ b/src/test/java/rx/schedulers/AbstractSchedulerConcurrencyTests.java, +        try {, +        } finally {, +            inner.unsubscribe();, +        }, +        try {, +        } finally {, +            inner.unsubscribe();, +        }, +        , +        try {, +        } finally {, +            inner.unsubscribe();, +        }, +        try {, +        } finally {, +            inner.unsubscribe();, +        }, +        try {, +        } finally {, +            inner.unsubscribe();, +        }, +        final Worker inner = getScheduler().createWorker();, +        try {, +        } finally {, +            inner.unsubscribe();, +        }, +++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +        // TODO start with size hint, +                    pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +    private void pollQueue(AtomicLong wip, AtomicLong requested, Queue<Object> queue, Subscriber<? super T> child) {, +++ b/src/test/java/rx/internal/operators/OperatorOnBackpressureBufferTest.java, +import static org.junit.Assert.assertEquals;, +, +++ b/src/test/java/rx/schedulers/AbstractSchedulerConcurrencyTests.java, +        try {, +        } finally {, +            inner.unsubscribe();, +        }, +        try {, +        } finally {, +            inner.unsubscribe();, +        }, +        , +        try {, +        } finally {, +            inner.unsubscribe();, +        }, +        try {, +        } finally {, +            inner.unsubscribe();, +        }, +        try {, +        } finally {, +            inner.unsubscribe();, +        }, +        final Worker inner = getScheduler().createWorker();, +        try {, +        } finally {, +            inner.unsubscribe();, +        }, +++ b/src/test/java/rx/schedulers/AbstractSchedulerTests.java, +        try {, +        } finally {, +            inner.unsubscribe();]