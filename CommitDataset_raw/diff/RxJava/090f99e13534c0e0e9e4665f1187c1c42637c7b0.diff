[+++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRepeatWhen.java, +            active = false;, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRepeatWhen.java, +            active = false;, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableRepeatTest.java, +import io.reactivex.plugins.RxJavaPlugins;, +, +    @Test, +    public void repeatFloodNoSubscriptionError() {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +, +        try {, +            final PublishProcessor<Integer> source = PublishProcessor.create();, +            final PublishProcessor<Integer> signaller = PublishProcessor.create();, +, +            for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {, +, +                TestSubscriber<Integer> ts = source.take(1), +                .repeatWhen(new Function<Flowable<Object>, Flowable<Integer>>() {, +                    @Override, +                    public Flowable<Integer> apply(Flowable<Object> v), +                            throws Exception {, +                        return signaller;, +                    }, +                }).test();, +, +                Runnable r1 = new Runnable() {, +                    @Override, +                    public void run() {, +                        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {, +                            source.onNext(1);, +                        }, +                    }, +                };, +                Runnable r2 = new Runnable() {, +                    @Override, +                    public void run() {, +                        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {, +                            signaller.offer(1);, +                        }, +                    }, +                };, +, +                TestHelper.race(r1, r2);, +, +                ts.dispose();, +            }, +, +            if (!errors.isEmpty()) {, +                for (Throwable e : errors) {, +                    e.printStackTrace();, +                }, +                fail(errors + "");, +            }, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRepeatWhen.java, +            active = false;, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableRepeatTest.java, +import io.reactivex.plugins.RxJavaPlugins;, +, +    @Test, +    public void repeatFloodNoSubscriptionError() {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +, +        try {, +            final PublishProcessor<Integer> source = PublishProcessor.create();, +            final PublishProcessor<Integer> signaller = PublishProcessor.create();, +, +            for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {, +, +                TestSubscriber<Integer> ts = source.take(1), +                .repeatWhen(new Function<Flowable<Object>, Flowable<Integer>>() {, +                    @Override, +                    public Flowable<Integer> apply(Flowable<Object> v), +                            throws Exception {, +                        return signaller;, +                    }, +                }).test();, +, +                Runnable r1 = new Runnable() {, +                    @Override, +                    public void run() {, +                        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {, +                            source.onNext(1);, +                        }, +                    }, +                };, +                Runnable r2 = new Runnable() {, +                    @Override, +                    public void run() {, +                        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {, +                            signaller.offer(1);, +                        }, +                    }, +                };, +, +                TestHelper.race(r1, r2);]