[+++ b/src/main/java/io/reactivex/Completable.java, +public abstract class Completable implements CompletableConsumable {, +    static final Completable COMPLETE = create(new CompletableConsumable() {, +        public void subscribe(CompletableSubscriber s) {, +    static final Completable NEVER = create(new CompletableConsumable() {, +        public void subscribe(CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +    public static Completable create(CompletableConsumable onSubscribe) {, +        return create(new CompletableConsumable() {, +            public void subscribe(CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber cs) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +                Completable.this.subscribe(new CompletableSubscriber() {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +                Completable.this.subscribe(new CompletableSubscriber() {, +        return create(new CompletableConsumable() {, +            public void subscribe(CompletableSubscriber s) {, +                    Completable.this.subscribe(sw);, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +                Completable.this.subscribe(new CompletableSubscriber() {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +                Completable.this.subscribe(new CompletableSubscriber() {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +                Completable.this.subscribe(new CompletableSubscriber() {, +    @Override, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +                        Completable.this.subscribe(s);, +        return Observable.create(new ObservableConsumable<T>() {, +            public void subscribe(Observer<? super T> s) {, +                Completable.this.subscribe(s);, +        return Single.create(new SingleConsumable<T>() {, +            public void subscribe(final SingleSubscriber<? super T> s) {, +                Completable.this.subscribe(new CompletableSubscriber() {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +                Completable.this.subscribe(new CompletableSubscriber() {, +++ b/src/main/java/io/reactivex/Completable.java, +public abstract class Completable implements CompletableConsumable {, +    static final Completable COMPLETE = create(new CompletableConsumable() {, +        public void subscribe(CompletableSubscriber s) {, +    static final Completable NEVER = create(new CompletableConsumable() {, +        public void subscribe(CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +    public static Completable create(CompletableConsumable onSubscribe) {, +        return create(new CompletableConsumable() {, +            public void subscribe(CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber cs) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +                Completable.this.subscribe(new CompletableSubscriber() {, +        return create(new CompletableConsumable() {, +            public void subscribe(final CompletableSubscriber s) {, +                Completable.this.subscribe(new CompletableSubscriber() {, +        return create(new CompletableConsumable() {]