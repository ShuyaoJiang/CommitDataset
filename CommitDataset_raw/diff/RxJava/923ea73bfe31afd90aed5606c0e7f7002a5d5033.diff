[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorConcat;, +        return observables.lift(new OperatorConcat<T>());, +        return concat(from(t1, t2));, +        return concat(from(t1, t2, t3));, +        return concat(from(t1, t2, t3, t4));, +        return concat(from(t1, t2, t3, t4, t5));, +        return concat(from(t1, t2, t3, t4, t5, t6));, +        return concat(from(t1, t2, t3, t4, t5, t6, t7));, +        return concat(from(t1, t2, t3, t4, t5, t6, t7, t8));, +        return concat(from(t1, t2, t3, t4, t5, t6, t7, t8, t9));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorConcat;, +        return observables.lift(new OperatorConcat<T>());, +        return concat(from(t1, t2));, +        return concat(from(t1, t2, t3));, +        return concat(from(t1, t2, t3, t4));, +        return concat(from(t1, t2, t3, t4, t5));, +        return concat(from(t1, t2, t3, t4, t5, t6));, +        return concat(from(t1, t2, t3, t4, t5, t6, t7));, +        return concat(from(t1, t2, t3, t4, t5, t6, t7, t8));, +        return concat(from(t1, t2, t3, t4, t5, t6, t7, t8, t9));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorConcat;, +        return observables.lift(new OperatorConcat<T>());, +        return concat(from(t1, t2));, +        return concat(from(t1, t2, t3));, +        return concat(from(t1, t2, t3, t4));, +        return concat(from(t1, t2, t3, t4, t5));, +        return concat(from(t1, t2, t3, t4, t5, t6));, +        return concat(from(t1, t2, t3, t4, t5, t6, t7));, +        return concat(from(t1, t2, t3, t4, t5, t6, t7, t8));, +        return concat(from(t1, t2, t3, t4, t5, t6, t7, t8, t9));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorConcat.java, + /**, +  * Copyright 2014 Netflix, Inc., +  *, +  * Licensed under the Apache License, Version 2.0 (the "License"); you may not, +  * use this file except in compliance with the License. You may obtain a copy of, +  * the License at, +  *, +  * http://www.apache.org/licenses/LICENSE-2.0, +  *, +  * Unless required by applicable law or agreed to in writing, software, +  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, +  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, +  * License for the specific language governing permissions and limitations under, +  * the License., +  */, +package rx.operators;, +, +import java.util.concurrent.ConcurrentLinkedQueue;, +import java.util.concurrent.atomic.AtomicInteger;, +import rx.Observable;, +import rx.Observable.Operator;, +import rx.Subscriber;, +import rx.functions.Action0;, +import rx.observers.SerializedSubscriber;, +import rx.subscriptions.SerialSubscription;, +import rx.subscriptions.Subscriptions;, +, +/**, + * Returns an Observable that emits the items emitted by two or more Observables, one after the, + * other., + * <p>, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/concat.png">, + */, +public final class OperatorConcat<T> implements Operator<T, Observable<? extends T>> {, +    final NotificationLite<Observable<? extends T>> nl = NotificationLite.instance();, +    @Override, +    public Subscriber<? super Observable<? extends T>> call(final Subscriber<? super T> child) {, +        final SerializedSubscriber<T> s = new SerializedSubscriber<T>(child);, +        final SerialSubscription current = new SerialSubscription();, +        child.add(current);, +        return new ConcatSubscriber(s, current);, +    }, +    , +    final class ConcatSubscriber extends Subscriber<Observable<? extends T>> {, +        , +        private final Subscriber<T> s;, +        private final SerialSubscription current;, +        final ConcurrentLinkedQueue<Object> queue;, +        final AtomicInteger wip;, +        , +        public ConcatSubscriber(Subscriber<T> s, SerialSubscription current) {, +            super(s);, +            this.s = s;, +            this.current = current;, +            this.queue = new ConcurrentLinkedQueue<Object>();, +            this.wip = new AtomicInteger();, +            add(Subscriptions.create(new Action0() {, +                @Override, +                public void call() {, +                    queue.clear();, +                }, +            }));, +        }, +        ]