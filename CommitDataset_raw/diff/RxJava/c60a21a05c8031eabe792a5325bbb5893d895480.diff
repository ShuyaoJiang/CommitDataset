[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableUnsubscribeOn.java, +import io.reactivex.Scheduler;, +import io.reactivex.plugins.RxJavaPlugins;, +            if (!get()) {, +        }, +            if (get()) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            if (!get()) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableUnsubscribeOn.java, +import io.reactivex.Scheduler;, +import io.reactivex.plugins.RxJavaPlugins;, +            if (!get()) {, +        }, +            if (get()) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            if (!get()) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableUnsubscribeOn.java, +import io.reactivex.plugins.RxJavaPlugins;, +            if (!get()) {, +        }, +            if (get()) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            if (!get()) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableUnsubscribeOn.java, +import io.reactivex.Scheduler;, +import io.reactivex.plugins.RxJavaPlugins;, +            if (!get()) {, +        }, +            if (get()) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            if (!get()) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableUnsubscribeOn.java, +import io.reactivex.plugins.RxJavaPlugins;, +            if (!get()) {, +        }, +            if (get()) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            if (!get()) {, +        }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableUnsubscribeOnTest.java, +, +    @Test, +    public void takeHalf() {, +        int elements = 1024;, +        Flowable.range(0, elements * 2).unsubscribeOn(Schedulers.single()), +        .take(elements), +        .test(), +        .awaitDone(5, TimeUnit.SECONDS), +        .assertValueCount(elements), +        .assertComplete(), +        .assertNoErrors(), +        .assertSubscribed();, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableUnsubscribeOn.java, +import io.reactivex.Scheduler;, +import io.reactivex.plugins.RxJavaPlugins;, +            if (!get()) {, +        }, +            if (get()) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            if (!get()) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableUnsubscribeOn.java, +import io.reactivex.plugins.RxJavaPlugins;, +            if (!get()) {, +        }, +            if (get()) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            if (!get()) {, +        }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableUnsubscribeOnTest.java, +, +    @Test, +    public void takeHalf() {, +        int elements = 1024;, +        Flowable.range(0, elements * 2).unsubscribeOn(Schedulers.single()), +        .take(elements), +        .test(), +        .awaitDone(5, TimeUnit.SECONDS), +        .assertValueCount(elements), +        .assertComplete(), +        .assertNoErrors()]