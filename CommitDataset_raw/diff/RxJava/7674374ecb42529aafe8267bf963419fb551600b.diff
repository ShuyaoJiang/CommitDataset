[+++ b/rxjava-core/src/main/java/rx/Scheduler.java, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +            return subscription.wrap(sequence.subscribe(new AllObserver(observer)));, +, +        }, +, +        private class AllObserver implements Observer<T> {, +            private final Observer<Boolean> underlying;, +, +            private final AtomicBoolean status = new AtomicBoolean(true);, +, +            public AllObserver(Observer<Boolean> underlying) {, +                this.underlying = underlying;, +            }, +, +                    underlying.onNext(true);, +                    underlying.onCompleted();, +                underlying.onError(e);, +                    underlying.onNext(false);, +                    underlying.onCompleted();, +, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +            return subscription.wrap(sequence.subscribe(new AllObserver(observer)));, +, +        }, +, +        private class AllObserver implements Observer<T> {, +            private final Observer<Boolean> underlying;, +, +            private final AtomicBoolean status = new AtomicBoolean(true);, +, +            public AllObserver(Observer<Boolean> underlying) {, +                this.underlying = underlying;, +            }, +, +                    underlying.onNext(true);, +                    underlying.onCompleted();, +                underlying.onError(e);, +                    underlying.onNext(false);, +                    underlying.onCompleted();, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationTake.java, +            private final AtomicInteger counter = new AtomicInteger();, +, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +            public Subscription call(Scheduler scheduler, Void t2) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +            return subscription.wrap(sequence.subscribe(new AllObserver(observer)));, +, +        }, +, +        private class AllObserver implements Observer<T> {, +            private final Observer<Boolean> underlying;, +, +            private final AtomicBoolean status = new AtomicBoolean(true);, +, +            public AllObserver(Observer<Boolean> underlying) {, +                this.underlying = underlying;, +            }, +, +                    underlying.onNext(true);, +                    underlying.onCompleted();, +                underlying.onError(e);, +                    underlying.onNext(false);, +                    underlying.onCompleted();, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationTake.java, +            private final AtomicInteger counter = new AtomicInteger();, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationTakeWhile.java, +            private final AtomicInteger counter = new AtomicInteger();, +, +            PublishSubject<Integer> s = PublishSubject.create();, +            Observable<Integer> w = (Observable<Integer>) s;, +            Observable<Integer> take = Observable.create(takeWhile(w, new Func1<Integer, Boolean>()]