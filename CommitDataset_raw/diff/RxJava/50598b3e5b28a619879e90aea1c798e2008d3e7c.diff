[+++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.fuseable.*;, +    @SuppressWarnings("unchecked"), +        if (this instanceof FuseToFlowable) {, +            return ((FuseToFlowable<T>)this).fuseToFlowable();, +        }, +    @SuppressWarnings("unchecked"), +        if (this instanceof FuseToObservable) {, +            return ((FuseToObservable<T>)this).fuseToObservable();, +        }, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.fuseable.*;, +    @SuppressWarnings("unchecked"), +        if (this instanceof FuseToFlowable) {, +            return ((FuseToFlowable<T>)this).fuseToFlowable();, +        }, +    @SuppressWarnings("unchecked"), +        if (this instanceof FuseToObservable) {, +            return ((FuseToObservable<T>)this).fuseToObservable();, +        }, +++ b/src/main/java/io/reactivex/internal/disposables/EmptyDisposable.java, +    INSTANCE,, +    /**, +     * An empty disposable that returns false for isDisposed., +     */, +    NEVER, +        return this == INSTANCE;, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.fuseable.*;, +    @SuppressWarnings("unchecked"), +        if (this instanceof FuseToFlowable) {, +            return ((FuseToFlowable<T>)this).fuseToFlowable();, +        }, +    @SuppressWarnings("unchecked"), +        if (this instanceof FuseToObservable) {, +            return ((FuseToObservable<T>)this).fuseToObservable();, +        }, +++ b/src/main/java/io/reactivex/internal/disposables/EmptyDisposable.java, +    INSTANCE,, +    /**, +     * An empty disposable that returns false for isDisposed., +     */, +    NEVER, +        return this == INSTANCE;, +++ b/src/main/java/io/reactivex/internal/observers/FutureSingleObserver.java, +        Disposable a = s.get();, +        if (a == DisposableHelper.DISPOSED) {, +        s.compareAndSet(a, this);, +            if (a == DisposableHelper.DISPOSED) {, +            error = t;, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.fuseable.*;, +    @SuppressWarnings("unchecked"), +        if (this instanceof FuseToFlowable) {, +            return ((FuseToFlowable<T>)this).fuseToFlowable();, +        }, +    @SuppressWarnings("unchecked"), +        if (this instanceof FuseToObservable) {, +            return ((FuseToObservable<T>)this).fuseToObservable();, +        }, +++ b/src/main/java/io/reactivex/internal/disposables/EmptyDisposable.java, +    INSTANCE,, +    /**, +     * An empty disposable that returns false for isDisposed., +     */, +    NEVER, +        return this == INSTANCE;, +++ b/src/main/java/io/reactivex/internal/observers/FutureSingleObserver.java, +        Disposable a = s.get();, +        if (a == DisposableHelper.DISPOSED) {, +        s.compareAndSet(a, this);, +            if (a == DisposableHelper.DISPOSED) {, +            error = t;, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableNever.java, +        s.onSubscribe(EmptyDisposable.NEVER);, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.internal.fuseable.*;, +    @SuppressWarnings("unchecked"), +        if (this instanceof FuseToFlowable) {, +            return ((FuseToFlowable<T>)this).fuseToFlowable();, +        }, +    @SuppressWarnings("unchecked"), +        if (this instanceof FuseToObservable) {, +            return ((FuseToObservable<T>)this).fuseToObservable();, +        }, +++ b/src/main/java/io/reactivex/internal/disposables/EmptyDisposable.java, +    INSTANCE,, +    /**, +     * An empty disposable that returns false for isDisposed., +     */, +    NEVER, +        return this == INSTANCE;, +++ b/src/main/java/io/reactivex/internal/observers/FutureSingleObserver.java, +        Disposable a = s.get();, +        if (a == DisposableHelper.DISPOSED) {, +        s.compareAndSet(a, this);, +            if (a == DisposableHelper.DISPOSED) {, +            error = t;, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableNever.java, +        s.onSubscribe(EmptyDisposable.NEVER);]