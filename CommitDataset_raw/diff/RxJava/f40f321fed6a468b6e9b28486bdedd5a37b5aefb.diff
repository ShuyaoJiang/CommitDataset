[+++ b/rxjava/src/main/java/rx/exceptions/CompositeException.java, + * <p>, + * Use <code>getMessage()</code> to retrieve a concatenation of the composite exceptions., +    private final Throwable cause;, +    public CompositeException(String messagePrefix, Collection<Throwable> errors) {, +        CompositeExceptionCausalChain _cause = new CompositeExceptionCausalChain();, +        int count = errors.size();, +        errors = removeDuplicatedCauses(errors);, +        for (Throwable e : errors) {, +            attachCallingThreadStack(_cause, e);, +            _exceptions.add(e);, +        , +        String msg = count + " exceptions occurred. See them in causal chain below.";, +        if(messagePrefix != null) {, +            msg = messagePrefix + " " + msg;, +        }, +        this.message = msg;, +        this.cause = _cause;, +    public CompositeException(Collection<Throwable> errors) {, +     * @return the exceptions that make up the {@code CompositeException}, as a {@link List} of, +     *         {@link Throwable}s, +        return cause;, +    }, +, +    private Collection<Throwable> removeDuplicatedCauses(Collection<Throwable> errors) {, +        Set<Throwable> duplicated = new HashSet<Throwable>();, +        for (Throwable cause : errors) {, +            for (Throwable error : errors) {, +                if(cause == error || duplicated.contains(error)) {, +                    continue;, +                }, +                while (error.getCause() != null) {, +                    error = error.getCause();, +                    if (error == cause) {, +                        duplicated.add(cause);, +                        break;, +                    }, +                }, +            }, +        }, +        if (!duplicated.isEmpty()) {, +            errors = new ArrayList<Throwable>(errors);, +            errors.removeAll(duplicated);, +        }, +        return errors;, +    }, +, +    @SuppressWarnings("unused"), +    // useful when debugging but don't want to make part of publicly supported API, +    private static String getStackTraceAsString(StackTraceElement[] stack) {, +        StringBuilder s = new StringBuilder();, +        boolean firstLine = true;, +        for (StackTraceElement e : stack) {, +            if (e.toString().startsWith("java.lang.Thread.getStackTrace")) {, +                // we'll ignore this one, +                continue;, +            }, +            if (!firstLine) {, +                s.append("\n\t");, +            }, +            s.append(e.toString());, +            firstLine = false;, +        }, +        return s.toString();, +    }, +, +    /* package-private */ static void attachCallingThreadStack(Throwable e, Throwable cause) {, +        while (e.getCause() != null) {, +            e = e.getCause();, +            if (seenCauses.contains(e.getCause())) {, +                break;, +            } else {, +                seenCauses.add(e.getCause());, +            e.initCause(cause);, +++ b/rxjava/src/main/java/rx/exceptions/CompositeException.java, + * <p>, + * Use <code>getMessage()</code> to retrieve a concatenation of the composite exceptions., +    private final Throwable cause;, +    public CompositeException(String messagePrefix, Collection<Throwable> errors) {, +        CompositeExceptionCausalChain _cause = new CompositeExceptionCausalChain();, +        int count = errors.size();, +        errors = removeDuplicatedCauses(errors);, +        for (Throwable e : errors) {, +            attachCallingThreadStack(_cause, e);, +            _exceptions.add(e);, +        , +        String msg = count + " exceptions occurred. See them in causal chain below.";, +        if(messagePrefix != null) {, +            msg = messagePrefix + " " + msg;, +        }, +        this.message = msg;, +        this.cause = _cause;, +    public CompositeException(Collection<Throwable> errors) {, +     * @return the exceptions that make up the {@code CompositeException}, as a {@link List} of, +     *         {@link Throwable}s, +        return cause;, +    }, +, +    private Collection<Throwable> removeDuplicatedCauses(Collection<Throwable> errors) {, +        Set<Throwable> duplicated = new HashSet<Throwable>();]