[+++ b/src/main/java/io/reactivex/Observable.java, +    public final Observable<T> take(long n) {, +    public final <U> Observable<T> takeUntil(Publisher<U> other) {, +        Objects.requireNonNull(other);, +    public final Observable<T> takeUntil(Predicate<? super T> predicate) {, +        Objects.requireNonNull(predicate);, +    public final Observable<T> takeLast(int n) {, +    public final Observable<T> ignoreElements() {, +    , +    public final Observable<T> skip(long n) {, +        if (n < 0) {, +            throw new IllegalArgumentException("n >= 0 required but it was " + n);, +        } else, +        if (n == 0) {, +            return this;, +        }, +        return lift(new OperatorSkip<>(n));, +    }, +    , +    public final Observable<T> skipLast(int n) {, +        if (n < 0) {, +            throw new IllegalArgumentException("n >= 0 required but it was " + n);, +        } else, +        if (n == 0) {, +            return this;, +        }, +        return lift(new OperatorSkipLast<>(n));, +    }, +    , +    public final Observable<T> skipWhile(Predicate<? super T> predicate) {, +        Objects.requireNonNull(predicate);, +        return lift(new OperatorSkipWhile<>(predicate));, +    }, +    , +    public final Observable<T> skipUntil(Publisher<? extends T> other) {, +        Objects.requireNonNull(other);, +        return lift(new OperatorSkipUntil<>(other));, +    }, +    , +    public final Observable<T> filter(Predicate<? super T> predicate) {, +        Objects.requireNonNull(predicate);, +        return lift(new OperatorFilter<>(predicate));, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +    public final Observable<T> take(long n) {, +    public final <U> Observable<T> takeUntil(Publisher<U> other) {, +        Objects.requireNonNull(other);, +    public final Observable<T> takeUntil(Predicate<? super T> predicate) {, +        Objects.requireNonNull(predicate);, +    public final Observable<T> takeLast(int n) {, +    public final Observable<T> ignoreElements() {, +    , +    public final Observable<T> skip(long n) {, +        if (n < 0) {, +            throw new IllegalArgumentException("n >= 0 required but it was " + n);, +        } else, +        if (n == 0) {, +            return this;, +        }, +        return lift(new OperatorSkip<>(n));, +    }, +    , +    public final Observable<T> skipLast(int n) {, +        if (n < 0) {, +            throw new IllegalArgumentException("n >= 0 required but it was " + n);, +        } else, +        if (n == 0) {, +            return this;, +        }, +        return lift(new OperatorSkipLast<>(n));, +    }, +    , +    public final Observable<T> skipWhile(Predicate<? super T> predicate) {, +        Objects.requireNonNull(predicate);, +        return lift(new OperatorSkipWhile<>(predicate));, +    }, +    , +    public final Observable<T> skipUntil(Publisher<? extends T> other) {, +        Objects.requireNonNull(other);, +        return lift(new OperatorSkipUntil<>(other));, +    }, +    , +    public final Observable<T> filter(Predicate<? super T> predicate) {, +        Objects.requireNonNull(predicate);, +        return lift(new OperatorFilter<>(predicate));, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorSkipUntil.java, +    public OperatorSkipUntil(Publisher<U> other) {]