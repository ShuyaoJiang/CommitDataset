[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * non-overlapping windows. The boundary of each window is determined by the items emitted from a specified, +   * boundary-governing Observable., +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/window8.png" />, +   *, +   * @param boundary an Observable whose emitted items close and open windows. Note: This is a by-name parameter,, +   *                 so it is only evaluated when someone subscribes to the returned Observable., +   * @return An Observable which produces connected non-overlapping windows. The boundary of each window is, +   *         determined by the items emitted from a specified boundary-governing Observable., +  def window(boundary: => Observable[Any]): Observable[Observable[T]] = {, +    val func = new Func0[rx.Observable[_ <: Any]]() {, +      override def call(): rx.Observable[_ <: Any] = boundary.asJavaObservable, +    }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * non-overlapping windows. The boundary of each window is determined by the items emitted from a specified, +   * boundary-governing Observable., +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/window8.png" />, +   *, +   * @param boundary an Observable whose emitted items close and open windows. Note: This is a by-name parameter,, +   *                 so it is only evaluated when someone subscribes to the returned Observable., +   * @return An Observable which produces connected non-overlapping windows. The boundary of each window is, +   *         determined by the items emitted from a specified boundary-governing Observable., +  def window(boundary: => Observable[Any]): Observable[Observable[T]] = {, +    val func = new Func0[rx.Observable[_ <: Any]]() {, +      override def call(): rx.Observable[_ <: Any] = boundary.asJavaObservable, +    }, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "window(Observable[U])" -> "window(=> Observable[Any])",, +      "window(Func0[_ <: Observable[_ <: TClosing]])" -> "window(=> Observable[Any])",]