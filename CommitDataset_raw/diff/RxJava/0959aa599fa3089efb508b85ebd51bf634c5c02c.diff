[+++ b/rxjava-contrib/rxjava-android/src/main/java/rx/concurrency/HandlerThreadScheduler.java, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.ArgumentCaptor;, +import rx.android.testsupport.AndroidTestRunner;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyLong;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.verify;, +, +, +    @RunWith(AndroidTestRunner.class), +    public static final class UnitTest {, +, +        @Test, +        public void shouldScheduleActionOnHandlerThread() {, +            final Handler handler = mock(Handler.class);, +            final Object state = new Object();, +            final Func2<Scheduler, Object, Subscription> action = mock(Func2.class);, +, +            Scheduler scheduler = new HandlerThreadScheduler(handler);, +            scheduler.schedule(state, action);, +, +            // verify that we post to the given Handler, +            ArgumentCaptor<Runnable> runnable = ArgumentCaptor.forClass(Runnable.class);, +            verify(handler).post(runnable.capture());, +, +            // verify that the given handler delegates to our action, +            runnable.getValue().run();, +            verify(action).call(scheduler, state);, +        }, +, +        @Test, +        public void shouldScheduleDelayedActionOnHandlerThread() {, +            final Handler handler = mock(Handler.class);, +            final Object state = new Object();, +            final Func2<Scheduler, Object, Subscription> action = mock(Func2.class);, +, +            Scheduler scheduler = new HandlerThreadScheduler(handler);, +            scheduler.schedule(state, action, 1L, TimeUnit.SECONDS);, +, +            // verify that we post to the given Handler, +            ArgumentCaptor<Runnable> runnable = ArgumentCaptor.forClass(Runnable.class);, +            verify(handler).postDelayed(runnable.capture(), eq(1000L));, +, +            // verify that the given handler delegates to our action, +            runnable.getValue().run();, +            verify(action).call(scheduler, state);, +        }, +, +        @Test, +        public void scheduleDelayedActionShouldForwardToNormalPostIfDelayIsZero() {, +            final Handler handler = mock(Handler.class);, +            final Object state = new Object();, +            final Func2<Scheduler, Object, Subscription> action = mock(Func2.class);, +, +            Scheduler scheduler = new HandlerThreadScheduler(handler);, +            scheduler.schedule(state, action, 0L, TimeUnit.SECONDS);, +, +            // verify that we post to the given Handler, +            verify(handler).post(any(Runnable.class));, +            verify(handler, never()).postDelayed(any(Runnable.class), anyLong());, +        }, +, +    }]