[+++ b/src/main/java/io/reactivex/internal/observers/BiConsumerSingleObserver.java, +            lazySet(DisposableHelper.DISPOSED);, +            lazySet(DisposableHelper.DISPOSED);, +++ b/src/main/java/io/reactivex/internal/observers/BiConsumerSingleObserver.java, +            lazySet(DisposableHelper.DISPOSED);, +            lazySet(DisposableHelper.DISPOSED);, +++ b/src/test/java/io/reactivex/single/SingleSubscribeTest.java, +import java.io.IOException;, +, +    @Test, +    public void biConsumerIsDisposedOnSuccess() {, +        final Object[] result = { null, null };, +        , +        Disposable d = Single.just(1), +        .subscribe(new BiConsumer<Integer, Throwable>() {, +            @Override, +            public void accept(Integer t1, Throwable t2) throws Exception {, +                result[0] = t1;, +                result[1] = t2;, +            }, +        });, +        , +        assertTrue("Not disposed?!", d.isDisposed());, +        assertEquals(1, result[0]);, +        assertNull(result[1]);, +    }, +, +    @Test, +    public void biConsumerIsDisposedOnError() {, +        final Object[] result = { null, null };, +        , +        Disposable d = Single.<Integer>error(new IOException()), +        .subscribe(new BiConsumer<Integer, Throwable>() {, +            @Override, +            public void accept(Integer t1, Throwable t2) throws Exception {, +                result[0] = t1;, +                result[1] = t2;, +            }, +        });, +        , +        assertTrue("Not disposed?!", d.isDisposed());, +        assertNull(result[0]);, +        assertTrue("" + result[1], result[1] instanceof IOException);, +    }]