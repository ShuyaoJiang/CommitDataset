[+++ b/src/main/java/rx/Observable.java, +        return NeverObservable.instance();, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +        return lift(OperatorDistinct.<T> instance());, +        return lift(OperatorDistinctUntilChanged.<T> instance());, +        return lift(OperatorIgnoreElements.<T> instance());, +    @SuppressWarnings("unchecked"), +        return lift((OperatorAny<T>) HolderAnyForEmpty.INSTANCE);, +    }, +    , +    private static class HolderAnyForEmpty {, +        static final OperatorAny<?> INSTANCE = new OperatorAny<Object>(UtilityFunctions.alwaysTrue(), true);, +        return lift(OperatorOnBackpressureBuffer.<T> instance());, +        return lift(OperatorSingle.<T> instance());, +        if (count == 0), +            return ignoreElements();, +        else if (count == 1 ), +            return lift(OperatorTakeLastOne.<T>instance());, +        else , +     *  <dd>The operator buffers everything from its upstream but it only emits the aggregated list when the downstream requests at least one item.</dd>, +     *  <dd>The operator buffers everything from its upstream but it only emits the sorted list when the downstream requests at least one item.</dd>, +        return lift(new OperatorToObservableSortedList<T>(10));, +     *  <dd>The operator buffers everything from its upstream but it only emits the sorted list when the downstream requests at least one item.</dd>, +        return lift(new OperatorToObservableSortedList<T>(sortFunction, 10));, +    }, +, +    /**, +     * Returns an Observable that emits a list that contains the items emitted by the source Observable, in a, +     * sorted order. Each item emitted by the Observable must implement {@link Comparable} with respect to all, +     * other items in the sequence., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toSortedList.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure Support:</b></dt>, +     *  <dd>The operator buffers everything from its upstream but it only emits the sorted list when the downstream requests at least one item.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code toSortedList} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @throws ClassCastException, +     *             if any item emitted by the Observable does not implement {@link Comparable} with respect to, +     *             all other items emitted by the Observable, +     * @param initialCapacity , +     *             the initial capacity of the ArrayList used to accumulate items before sorting, +     * @return an Observable that emits a list that contains the items emitted by the source Observable in, +     *         sorted order, +     * @see <a href="http://reactivex.io/documentation/operators/to.html">ReactiveX operators documentation: To</a>, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     */, +    @Experimental, +    public final Observable<List<T>> toSortedList(int initialCapacity) {, +        return lift(new OperatorToObservableSortedList<T>(initialCapacity));, +    }, +, +    /**, +     * Returns an Observable that emits a list that contains the items emitted by the source Observable, in a, +     * sorted order based on a specified comparison function., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toSortedList.f.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure Support:</b></dt>, +     *  <dd>The operator buffers everything from its upstream but it only emits the sorted list when the downstream requests at least one item.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code toSortedList} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param sortFunction, +     *            a function that compares two items emitted by the source Observable and returns an Integer, +     *            that indicates their sort order, +     * @param initialCapacity , +     *             the initial capacity of the ArrayList used to accumulate items before sorting, +     * @return an Observable that emits a list that contains the items emitted by the source Observable in, +     *         sorted order, +     * @see <a href="http://reactivex.io/documentation/operators/to.html">ReactiveX operators documentation: To</a>, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     */, +    @Experimental, +    public final Observable<List<T>> toSortedList(Func2<? super T, ? super T, Integer> sortFunction, int initialCapacity) {, +        return lift(new OperatorToObservableSortedList<T>(sortFunction, initialCapacity));, +     *  <dd>The operator honors backpressure on its outer subscriber, ignores backpressure in its inner Observables , +     *  but each of them will emit at most {@code count} elements.</dd>, +     *  <dd>The operator has limited backpressure support. If {@code count} == {@code skip}, the operator honors backpressure on its outer subscriber, ignores backpressure in its inner Observables , +     *  but each of them will emit at most {@code count} elements.</dd>, +        , +        private static class Holder {, +            static final NeverObservable<?> INSTANCE = new NeverObservable<Object>();, +        }, +        , +        /**, +         * Returns a singleton instance of NeverObservble (cast to the generic type)., +         * , +         * @return, +         */, +        @SuppressWarnings("unchecked"), +        static <T> NeverObservable<T> instance() {, +            return (NeverObservable<T>) Holder.INSTANCE;, +        }, +        , +        NeverObservable() {, +++ b/src/main/java/rx/Observable.java]