[+++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +               .toBlockingObservable, +               .single)))), +           .toBlockingObservable, +           .single)))), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +               .toBlockingObservable, +               .single)))), +           .toBlockingObservable, +           .single)))), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        public TestOnSubscribe getOnSubscribe() {, +            return new TestOnSubscribe(counter++);, +        }, +        , +        public Observable getObservable() {, +            return Observable.create(getOnSubscribe());, +    def class TestOnSubscribe implements OnSubscribeFunc<String> {, +        public TestOnSubscribe(int count) {, +        public Subscription onSubscribe(Observer<String> observer) {, +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +               .toBlockingObservable, +               .single)))), +           .toBlockingObservable, +           .single)))), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        public TestOnSubscribe getOnSubscribe() {, +            return new TestOnSubscribe(counter++);, +        }, +        , +        public Observable getObservable() {, +            return Observable.create(getOnSubscribe());, +    def class TestOnSubscribe implements OnSubscribeFunc<String> {, +        public TestOnSubscribe(int count) {, +        public Subscription onSubscribe(Observer<String> observer) {, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +import rx.Observable.OnSubscribeFunc;, + * You construct a BlockingObservable from an Observable with {@link #from(Observable)} or {@link Observable#toBlockingObservable()} <p>, +public class BlockingObservable<T> {, +    private final Observable<? extends T> o;, +, +    private BlockingObservable(Observable<? extends T> o) {, +        this.o = o;, +        return new BlockingObservable<T>(o);, +    private Subscription protectivelyWrapAndSubscribe(Observer<? super T> observer) {, +        return subscription.wrap(o.subscribe(new SafeObserver<T>(subscription, observer)));, +     * Returns an {@link Iterator} that iterates over all items emitted by a specified {@link Observable}., +        return OperationToIterator.toIterator(o);, +        return from(o.filter(predicate)).last();, +        return from(o.filter(predicate)).lastOrDefault(defaultValue);, +     * Returns an {@link Iterable} that always returns the item most recently emitted by an {@link Observable}., +     *            the initial value that will be yielded by the {@link Iterable} sequence if the {@link Observable} has not yet emitted an item, +     * @return an {@link Iterable} that on each iteration returns the item that the {@link Observable} has most recently emitted, +        return OperationMostRecent.mostRecent(o, initialValue);, +     * @return an {@link Iterable} that blocks upon each iteration until the {@link Observable} emits a new item, whereupon the Iterable returns that item, +        return OperationNext.next(o);, +        return _singleOrDefault(from(o.filter(predicate)), false, null);, +        return _singleOrDefault(from(o.filter(predicate)), true, defaultValue);, +     * the Observable may emit more than item, use {@link Observable#toList toList()}.toFuture()</code>., +     * @return a {@link Future} that expects a single item to be emitted by the source {@link Observable}, +        return OperationToFuture.toFuture(o);, +            BlockingObservable<Integer> observable = BlockingObservable.from(Observable.from(1, 0, -1));, +            BlockingObservable<String> observable = BlockingObservable.from(Observable.from("one", "two", "three"));, +            BlockingObservable<Object> observable = BlockingObservable.from(Observable.from());, +            BlockingObservable<Integer> observable = BlockingObservable.from(Observable.from(1, 0, -1));, +            BlockingObservable<Integer> observable = BlockingObservable.from(Observable.from(-1, -2, -3));, +            BlockingObservable<String> observable = BlockingObservable.from(Observable.from("one"));, +            BlockingObservable<Object> observable = BlockingObservable.from(Observable.from());, +            BlockingObservable.from(Observable.from("one", "two")).singleOrDefault("default", new Func1<String, Boolean>() {, +            BlockingObservable<String> observable = BlockingObservable.from(Observable.from("one", "two"));, +            BlockingObservable<String> observable = BlockingObservable.from(Observable.from("one", "two", "three"));, +            BlockingObservable<String> observable = BlockingObservable.from(Observable.from("one", "two", "four"));, +            BlockingObservable<Integer> observable = BlockingObservable.from(Observable.from(1, 2));, +            BlockingObservable<Integer> observable = BlockingObservable.from(Observable.from(-1));, +            BlockingObservable<String> obs = BlockingObservable.from(Observable.from("one", "two", "three"));, +            BlockingObservable<String> obs = BlockingObservable.from(Observable.create(new OnSubscribeFunc<String>() {]