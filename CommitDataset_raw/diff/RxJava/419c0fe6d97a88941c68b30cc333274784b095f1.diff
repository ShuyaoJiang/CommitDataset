[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-contrib/rxjava-joins/src/main/java/rx/joins/ActivePlan0.java, +    protected abstract void match();, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-contrib/rxjava-joins/src/main/java/rx/joins/ActivePlan0.java, +    protected abstract void match();, +++ b/rxjava-contrib/rxjava-joins/src/main/java/rx/joins/ActivePlan1.java, +public final class ActivePlan1<T1> extends ActivePlan0 {, +    private final JoinObserver1<T1> jo1;, +    ActivePlan1(JoinObserver1<T1> jo1, Action1<T1> onNext, Action0 onCompleted) {, +        this.jo1 = jo1;, +        addJoinObserver(jo1);, +    protected void match() {, +        if (!jo1.queue().isEmpty()) {, +            Notification<T1> n1 = jo1.queue().peek();, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-contrib/rxjava-joins/src/main/java/rx/joins/ActivePlan0.java, +    protected abstract void match();, +++ b/rxjava-contrib/rxjava-joins/src/main/java/rx/joins/ActivePlan1.java, +public final class ActivePlan1<T1> extends ActivePlan0 {, +    private final JoinObserver1<T1> jo1;, +    ActivePlan1(JoinObserver1<T1> jo1, Action1<T1> onNext, Action0 onCompleted) {, +        this.jo1 = jo1;, +        addJoinObserver(jo1);, +    protected void match() {, +        if (!jo1.queue().isEmpty()) {, +            Notification<T1> n1 = jo1.queue().peek();, +++ b/rxjava-contrib/rxjava-joins/src/main/java/rx/joins/ActivePlan2.java, +public final class ActivePlan2<T1, T2> extends ActivePlan0 {, +    private final JoinObserver1<T1> jo1;, +    private final JoinObserver1<T2> jo2;, +    ActivePlan2(JoinObserver1<T1> jo1, JoinObserver1<T2> jo2, Action2<T1, T2> onNext, Action0 onCompleted) {, +        this.jo1 = jo1;, +        this.jo2 = jo2;, +        addJoinObserver(jo1);, +        addJoinObserver(jo2);, +    protected void match() {, +        if (!jo1.queue().isEmpty() && !jo2.queue().isEmpty()) {, +            Notification<T1> n1 = jo1.queue().peek();, +            Notification<T2> n2 = jo2.queue().peek();, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-contrib/rxjava-joins/src/main/java/rx/joins/ActivePlan0.java, +    protected abstract void match();, +++ b/rxjava-contrib/rxjava-joins/src/main/java/rx/joins/ActivePlan1.java, +public final class ActivePlan1<T1> extends ActivePlan0 {, +    private final JoinObserver1<T1> jo1;, +    ActivePlan1(JoinObserver1<T1> jo1, Action1<T1> onNext, Action0 onCompleted) {, +        this.jo1 = jo1;, +        addJoinObserver(jo1);, +    protected void match() {, +        if (!jo1.queue().isEmpty()) {, +            Notification<T1> n1 = jo1.queue().peek();, +++ b/rxjava-contrib/rxjava-joins/src/main/java/rx/joins/ActivePlan2.java, +public final class ActivePlan2<T1, T2> extends ActivePlan0 {, +    private final JoinObserver1<T1> jo1;, +    private final JoinObserver1<T2> jo2;, +    ActivePlan2(JoinObserver1<T1> jo1, JoinObserver1<T2> jo2, Action2<T1, T2> onNext, Action0 onCompleted) {, +        this.jo1 = jo1;, +        this.jo2 = jo2;, +        addJoinObserver(jo1);, +        addJoinObserver(jo2);, +    protected void match() {, +        if (!jo1.queue().isEmpty() && !jo2.queue().isEmpty()) {, +            Notification<T1> n1 = jo1.queue().peek();]