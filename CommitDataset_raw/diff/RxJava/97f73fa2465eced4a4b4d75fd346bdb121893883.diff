[+++ b/build.gradle, +		jvmArgs '-XX:AutoBoxCacheMax=1000000', +++ b/build.gradle, +		jvmArgs '-XX:AutoBoxCacheMax=1000000', +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/build.gradle, +		jvmArgs '-XX:AutoBoxCacheMax=1000000', +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.internal.util.ScalarSynchronousObservable;, +        return from(iterable).subscribeOn(scheduler);, +        return ScalarSynchronousObservable.create(value);, +        if(count == 1) {, +            return Observable.just(start);, +        }, +    public final Observable<T> onBackpressureBuffer() {, +        return lift(new OperatorOnBackpressureBuffer<T>());, +    }, +    , +    public final Observable<T> onBackpressureDrop() {, +        return lift(new OperatorOnBackpressureDrop<T>());, +    }, +    , +++ b/build.gradle, +		jvmArgs '-XX:AutoBoxCacheMax=1000000', +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.internal.util.ScalarSynchronousObservable;, +        return from(iterable).subscribeOn(scheduler);, +        return ScalarSynchronousObservable.create(value);, +        if(count == 1) {, +            return Observable.just(start);, +        }, +    public final Observable<T> onBackpressureBuffer() {, +        return lift(new OperatorOnBackpressureBuffer<T>());, +    }, +    , +    public final Observable<T> onBackpressureDrop() {, +        return lift(new OperatorOnBackpressureDrop<T>());, +    }, +    , +++ b/rxjava-core/src/main/java/rx/Producer.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx;, +, +public interface Producer {, +, +    public void request(int n);, +, +}, +++ b/build.gradle, +		jvmArgs '-XX:AutoBoxCacheMax=1000000', +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.internal.util.ScalarSynchronousObservable;, +        return from(iterable).subscribeOn(scheduler);, +        return ScalarSynchronousObservable.create(value);, +        if(count == 1) {, +            return Observable.just(start);, +        }, +    public final Observable<T> onBackpressureBuffer() {, +        return lift(new OperatorOnBackpressureBuffer<T>());, +    }, +    , +    public final Observable<T> onBackpressureDrop() {, +        return lift(new OperatorOnBackpressureDrop<T>());, +    }, +    , +++ b/rxjava-core/src/main/java/rx/Producer.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]