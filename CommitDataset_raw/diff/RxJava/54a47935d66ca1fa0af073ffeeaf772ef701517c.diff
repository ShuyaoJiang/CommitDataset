[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def retryExample3(): Unit = {, +    var isFirst = true, +    val o = Observable {, +      (subscriber: Subscriber[String]) =>, +        if (isFirst) {, +          subscriber.onNext("alice"), +          subscriber.onError(new IOException("Oops")), +          isFirst = false, +        }, +        else {, +          subscriber.onNext("bob"), +          subscriber.onError(new RuntimeException("Oops")), +        }, +    }, +    o.retry {, +      (times, e) => e match {, +        case e: IOException => times <= 3, +        case _ => false, +      }, +    }.subscribe(s => println(s), e => e.printStackTrace()), +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def retryExample3(): Unit = {, +    var isFirst = true, +    val o = Observable {, +      (subscriber: Subscriber[String]) =>, +        if (isFirst) {, +          subscriber.onNext("alice"), +          subscriber.onError(new IOException("Oops")), +          isFirst = false, +        }, +        else {, +          subscriber.onNext("bob"), +          subscriber.onError(new RuntimeException("Oops")), +        }, +    }, +    o.retry {, +      (times, e) => e match {, +        case e: IOException => times <= 3, +        case _ => false, +      }, +    }.subscribe(s => println(s), e => e.printStackTrace()), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `onError`, +   * and the predicate returns true for that specific exception and retry count., +   *, +   * <img width="640" height="315" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/retry.png">, +   *, +   * @param predicate the predicate that determines if a resubscription may happen in case of a specific exception and retry count, +   * @return the source Observable modified with retry logic, +   */, +  def retry(predicate: (Int, Throwable) => Boolean): Observable[T] = {, +    val f = new Func2[java.lang.Integer, Throwable, java.lang.Boolean] {, +      def call(times: java.lang.Integer, e: Throwable): java.lang.Boolean = predicate(times, e), +    }, +    toScalaObservable[T](asJavaObservable.retry(f)), +  }, +, +  /**, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def retryExample3(): Unit = {, +    var isFirst = true, +    val o = Observable {, +      (subscriber: Subscriber[String]) =>, +        if (isFirst) {, +          subscriber.onNext("alice"), +          subscriber.onError(new IOException("Oops")), +          isFirst = false, +        }, +        else {, +          subscriber.onNext("bob"), +          subscriber.onError(new RuntimeException("Oops")), +        }, +    }, +    o.retry {, +      (times, e) => e match {, +        case e: IOException => times <= 3, +        case _ => false, +      }, +    }.subscribe(s => println(s), e => e.printStackTrace()), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `onError`, +   * and the predicate returns true for that specific exception and retry count., +   *, +   * <img width="640" height="315" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/retry.png">, +   *, +   * @param predicate the predicate that determines if a resubscription may happen in case of a specific exception and retry count, +   * @return the source Observable modified with retry logic, +   */, +  def retry(predicate: (Int, Throwable) => Boolean): Observable[T] = {, +    val f = new Func2[java.lang.Integer, Throwable, java.lang.Boolean] {, +      def call(times: java.lang.Integer, e: Throwable): java.lang.Boolean = predicate(times, e), +    }, +    toScalaObservable[T](asJavaObservable.retry(f))]