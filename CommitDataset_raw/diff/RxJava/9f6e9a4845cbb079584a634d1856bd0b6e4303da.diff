[+++ b/build.gradle, +        //perfCompile project, +		args '1', +//		args '.*OperatorSerializePerf.*' // for running only a specific test, +++ b/build.gradle, +        //perfCompile project, +		args '1', +//		args '.*OperatorSerializePerf.*' // for running only a specific test, +++ b/gradle/buildscript.gradle, +++ b/build.gradle, +        //perfCompile project, +		args '1', +//		args '.*OperatorSerializePerf.*' // for running only a specific test, +++ b/gradle/buildscript.gradle, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ b/build.gradle, +        //perfCompile project, +		args '1', +//		args '.*OperatorSerializePerf.*' // for running only a specific test, +++ b/gradle/buildscript.gradle, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/build.gradle, +        //perfCompile project, +		args '1', +//		args '.*OperatorSerializePerf.*' // for running only a specific test, +++ b/gradle/buildscript.gradle, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +        //perfCompile project, +		args '1', +//		args '.*OperatorSerializePerf.*' // for running only a specific test, +++ b/gradle/buildscript.gradle, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +        //perfCompile project, +		args '1', +//		args '.*OperatorSerializePerf.*' // for running only a specific test, +++ b/gradle/buildscript.gradle, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/Async.java, +        return fromFunc0(function, Schedulers.computation());, +        return Observable.create(OperationFromFunctionals.fromFunc0(function)).subscribeOn(scheduler);, +++ b/build.gradle, +        //perfCompile project, +		args '1', +//		args '.*OperatorSerializePerf.*' // for running only a specific test, +++ b/gradle/buildscript.gradle, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/Async.java, +        return fromFunc0(function, Schedulers.computation());, +        return Observable.create(OperationFromFunctionals.fromFunc0(function)).subscribeOn(scheduler);, +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/operators/OperationFromFunctionals.java, +    /** Subscriber function that invokes a function and returns its value. */, +        return new InvokeAsync<R>(function);, +        return new InvokeAsyncCallable<R>(callable);, +        return new InvokeAsync(new Func0<R>() {, +     * Invokes a function when an observer subscribes., +        final Func0<? extends R> function;, +        public InvokeAsync(Func0<? extends R> function) {, +            if (function == null) {, +                throw new NullPointerException("function");, +            }, +            this.function = function;, +        }, +        @Override, +        public Subscription onSubscribe(Observer<? super R> t1) {, +            Subscription s = Subscriptions.empty();, +            try {, +                t1.onNext(function.call());, +            } catch (Throwable t) {, +                t1.onError(t);, +                return s;, +            }, +            t1.onCompleted();, +            return s;, +        }, +    }, +    /**, +     * Invokes a java.util.concurrent.Callable when an observer subscribes., +     * @param <R> the return type, +     */, +    static final class InvokeAsyncCallable<R> implements OnSubscribeFunc<R> {, +        public InvokeAsyncCallable(Callable<? extends R> callable) {, +++ b/build.gradle, +        //perfCompile project, +		args '1', +//		args '.*OperatorSerializePerf.*' // for running only a specific test, +++ b/gradle/buildscript.gradle]