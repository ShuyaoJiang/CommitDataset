[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param delay the initial delay before emitting a single 0L, +    public static Observable<Long> timer(long delay, TimeUnit unit) {, +        return timer(delay, unit, Schedulers.threadPoolForComputation());, +     * @param delay the initial delay before emitting a single 0L, +    public static Observable<Long> timer(long delay, TimeUnit unit, Scheduler scheduler) {, +        return create(new OperationTimer.TimerOnce(delay, unit, scheduler));, +    }, +    , +    /**, +     * Return an Observable which emits a 0L after the initialDelay and ever increasing, +     * numbers after each period., +     * , +     * @param initialDelay the initial delay time to wait before emitting the first value of 0L, +     * @param period the time period after emitting the subsequent numbers, +     * @param unit the time unit for both <code>initialDelay</code> and <code>period</code>, +     * @return an Observable which emits a 0L after the initialDelay and ever increasing, +     *         numbers after each period, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229435.aspx'>MSDN: Observable.Timer</a>, +     */, +    public static Observable<Long> timer(long initialDelay, long period, TimeUnit unit) {, +        return timer(initialDelay, period, unit, Schedulers.threadPoolForComputation());, +    }, +    , +    /**, +     * Return an Observable which emits a 0L after the initialDelay and ever increasing, +     * numbers after each period while running on the given scheduler., +     * , +     * @param initialDelay the initial delay time to wait before emitting the first value of 0L, +     * @param period the time period after emitting the subsequent numbers, +     * @param unit the time unit for both <code>initialDelay</code> and <code>period</code>, +     * @param scheduler the scheduler where the waiting happens and value emissions run., +     * @return an Observable which emits a 0L after the initialDelay and ever increasing, +     *         numbers after each period while running on the given scheduler, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229652.aspx'>MSDN: Observable.Timer</a>, +     */, +    public static Observable<Long> timer(long initialDelay, long period, TimeUnit unit, Scheduler scheduler) {, +        return create(new OperationTimer.TimerPeriodically(initialDelay, period, unit, scheduler));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param delay the initial delay before emitting a single 0L, +    public static Observable<Long> timer(long delay, TimeUnit unit) {, +        return timer(delay, unit, Schedulers.threadPoolForComputation());, +     * @param delay the initial delay before emitting a single 0L, +    public static Observable<Long> timer(long delay, TimeUnit unit, Scheduler scheduler) {, +        return create(new OperationTimer.TimerOnce(delay, unit, scheduler));, +    }, +    , +    /**, +     * Return an Observable which emits a 0L after the initialDelay and ever increasing, +     * numbers after each period., +     * , +     * @param initialDelay the initial delay time to wait before emitting the first value of 0L, +     * @param period the time period after emitting the subsequent numbers, +     * @param unit the time unit for both <code>initialDelay</code> and <code>period</code>, +     * @return an Observable which emits a 0L after the initialDelay and ever increasing, +     *         numbers after each period, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229435.aspx'>MSDN: Observable.Timer</a>, +     */, +    public static Observable<Long> timer(long initialDelay, long period, TimeUnit unit) {, +        return timer(initialDelay, period, unit, Schedulers.threadPoolForComputation());, +    }, +    , +    /**, +     * Return an Observable which emits a 0L after the initialDelay and ever increasing, +     * numbers after each period while running on the given scheduler., +     * , +     * @param initialDelay the initial delay time to wait before emitting the first value of 0L, +     * @param period the time period after emitting the subsequent numbers, +     * @param unit the time unit for both <code>initialDelay</code> and <code>period</code>, +     * @param scheduler the scheduler where the waiting happens and value emissions run., +     * @return an Observable which emits a 0L after the initialDelay and ever increasing, +     *         numbers after each period while running on the given scheduler, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229652.aspx'>MSDN: Observable.Timer</a>, +     */, +    public static Observable<Long> timer(long initialDelay, long period, TimeUnit unit, Scheduler scheduler) {, +        return create(new OperationTimer.TimerPeriodically(initialDelay, period, unit, scheduler));, +++ b/rxjava-core/src/main/java/rx/operators/OperationDelay.java, +                ConnectableObservable<T> co = Observable.timer(delay, unit, scheduler).map(new Func1<Long, T>() {, +                    @Override, +                    public T call(Long ignored) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param delay the initial delay before emitting a single 0L, +    public static Observable<Long> timer(long delay, TimeUnit unit) {, +        return timer(delay, unit, Schedulers.threadPoolForComputation());, +     * @param delay the initial delay before emitting a single 0L, +    public static Observable<Long> timer(long delay, TimeUnit unit, Scheduler scheduler) {, +        return create(new OperationTimer.TimerOnce(delay, unit, scheduler));, +    }, +    , +    /**, +     * Return an Observable which emits a 0L after the initialDelay and ever increasing, +     * numbers after each period., +     * , +     * @param initialDelay the initial delay time to wait before emitting the first value of 0L, +     * @param period the time period after emitting the subsequent numbers, +     * @param unit the time unit for both <code>initialDelay</code> and <code>period</code>, +     * @return an Observable which emits a 0L after the initialDelay and ever increasing, +     *         numbers after each period, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229435.aspx'>MSDN: Observable.Timer</a>, +     */]