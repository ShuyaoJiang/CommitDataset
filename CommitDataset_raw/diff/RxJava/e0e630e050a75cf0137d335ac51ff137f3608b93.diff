[+++ b/src/main/java/rx/Observable.java, +     * Mirrors the one Observable in an Iterable of several Observables that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given two Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given three Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given four Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given five Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given six Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given seven Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given eight Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given nine Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Mirrors the first Observable (current or provided) that emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Returns an Observable that first emits items emitted by the source Observable, , +     * checks the specified condition after each item, and, +     * then completes if the condition is satisfied., +     * <p>, +     * The difference between this operator and {@link #takeWhile(Func1)} is that here, the condition is evaluated <b>after</b>, +     * the item was emitted., +     * , +     * @param stopPredicate , +     *            a function that evaluates an item emitted by the source Observable and returns a Boolean, +     * @return an Observable that first emits items emitted by the source Observable, , +     *         checks the specified condition after each item, and, +     *         then completes if the condition is satisfied., +     * @see Observable#takeWhile(Func1), +     */, +    @Experimental, +    public final Observable<T> takeUntil(final Func1<? super T, Boolean> stopPredicate) {, +        return lift(new OperatorTakeUntilPredicate<T>(stopPredicate));, +    }, +    , +    /**, +++ b/src/main/java/rx/Observable.java, +     * Mirrors the one Observable in an Iterable of several Observables that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given two Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given three Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given four Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given five Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given six Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given seven Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given eight Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Given nine Observables, mirrors the one that first emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Mirrors the first Observable (current or provided) that emits an item., +     * @return an Observable that emits the same sequence of items as whichever of the source Observables first, +     *         emitted an item, +     * Returns an Observable that first emits items emitted by the source Observable, , +     * checks the specified condition after each item, and, +     * then completes if the condition is satisfied., +     * <p>, +     * The difference between this operator and {@link #takeWhile(Func1)} is that here, the condition is evaluated <b>after</b>, +     * the item was emitted., +     * , +     * @param stopPredicate , +     *            a function that evaluates an item emitted by the source Observable and returns a Boolean, +     * @return an Observable that first emits items emitted by the source Observable, , +     *         checks the specified condition after each item, and, +     *         then completes if the condition is satisfied., +     * @see Observable#takeWhile(Func1), +     */, +    @Experimental, +    public final Observable<T> takeUntil(final Func1<? super T, Boolean> stopPredicate) {, +        return lift(new OperatorTakeUntilPredicate<T>(stopPredicate));, +    }]