[+++ b/src/main/java/rx/Observable.java, +     *  <dt><b>Backpressure Support:</b></dt>, +     *  <dd>This operator honors backpressure.</td>, +++ b/src/main/java/rx/Observable.java, +     *  <dt><b>Backpressure Support:</b></dt>, +     *  <dd>This operator honors backpressure.</td>, +++ b/src/main/java/rx/internal/operators/OperatorRetryWithPredicate.java, +, +import rx.Producer;, +import rx.internal.producers.ProducerArbiter;, +        ProducerArbiter pa = new ProducerArbiter();, +        child.setProducer(pa);, +        return new SourceSubscriber<T>(child, predicate, inner, serialSubscription, pa);, +        final ProducerArbiter pa;, +        public SourceSubscriber(Subscriber<? super T> child, , +                final Func2<Integer, Throwable, Boolean> predicate, , +                Scheduler.Worker inner, , +                SerialSubscription serialSubscription,, +                ProducerArbiter pa) {, +            this.pa = pa;, +                                pa.produced(1);, +                        @Override, +                        public void setProducer(Producer p) {, +                            pa.setProducer(p);, +                        }, +++ b/src/main/java/rx/Observable.java, +     *  <dt><b>Backpressure Support:</b></dt>, +     *  <dd>This operator honors backpressure.</td>, +++ b/src/main/java/rx/internal/operators/OperatorRetryWithPredicate.java, +, +import rx.Producer;, +import rx.internal.producers.ProducerArbiter;, +        ProducerArbiter pa = new ProducerArbiter();, +        child.setProducer(pa);, +        return new SourceSubscriber<T>(child, predicate, inner, serialSubscription, pa);, +        final ProducerArbiter pa;, +        public SourceSubscriber(Subscriber<? super T> child, , +                final Func2<Integer, Throwable, Boolean> predicate, , +                Scheduler.Worker inner, , +                SerialSubscription serialSubscription,, +                ProducerArbiter pa) {, +            this.pa = pa;, +                                pa.produced(1);, +                        @Override, +                        public void setProducer(Producer p) {, +                            pa.setProducer(p);, +                        }, +++ b/src/test/java/rx/internal/operators/OperatorRetryWithPredicateTest.java, +import java.util.ArrayList;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Action1;, +import rx.functions.Func1;, +import rx.functions.Func2;, +    @Test, +    public void testBackpressure() {, +        final List<Long> requests = new ArrayList<Long>();, +        , +        Observable<Integer> source = Observable, +                .just(1), +                .concatWith(Observable.<Integer>error(new TestException())), +                .doOnRequest(new Action1<Long>() {, +                    @Override, +                    public void call(Long t) {, +                        requests.add(t);, +                    }, +                });, +        , +        TestSubscriber<Integer> ts = TestSubscriber.create(3);, +        source, +        .retry(new Func2<Integer, Throwable, Boolean>() {, +            @Override, +            public Boolean call(Integer t1, Throwable t2) {, +                return t1 < 3;, +            }, +        }).subscribe(ts);, +        , +        assertEquals(Arrays.asList(3L, 2L, 1L), requests);, +        ts.assertValues(1, 1, 1);, +        ts.assertNotCompleted();, +        ts.assertNoErrors();, +    }]