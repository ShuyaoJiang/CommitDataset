[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDistinct.java, +            collection = ObjectHelper.requireNonNull(collectionSupplier.call(), "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDistinct.java, +            collection = ObjectHelper.requireNonNull(collectionSupplier.call(), "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDistinct.java, +            collection = ObjectHelper.requireNonNull(collectionSupplier.call(), "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDistinct.java, +            collection = ObjectHelper.requireNonNull(collectionSupplier.call(), "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDistinct.java, +            collection = ObjectHelper.requireNonNull(collectionSupplier.call(), "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableDistinctTest.java, +    public void collectionSupplierIsNull() {, +        Flowable.just(1), +        .distinct(Functions.identity(), new Callable<Collection<Object>>() {, +            @Override, +            public Collection<Object> call() throws Exception {, +                return null;, +            }, +        }), +        .test(), +        .assertFailure(NullPointerException.class), +        .assertErrorMessage("The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");, +    }, +, +    @Test, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDistinct.java, +            collection = ObjectHelper.requireNonNull(collectionSupplier.call(), "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDistinct.java, +            collection = ObjectHelper.requireNonNull(collectionSupplier.call(), "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableDistinctTest.java, +    public void collectionSupplierIsNull() {, +        Flowable.just(1), +        .distinct(Functions.identity(), new Callable<Collection<Object>>() {, +            @Override, +            public Collection<Object> call() throws Exception {, +                return null;, +            }, +        }), +        .test(), +        .assertFailure(NullPointerException.class), +        .assertErrorMessage("The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");, +    }, +, +    @Test, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableDistinctTest.java, +    public void collectionSupplierIsNull() {, +        Observable.just(1), +        .distinct(Functions.identity(), new Callable<Collection<Object>>() {, +            @Override, +            public Collection<Object> call() throws Exception {, +                return null;, +            }, +        }), +        .test(), +        .assertFailure(NullPointerException.class), +        .assertErrorMessage("The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");, +    }, +, +    @Test]