[+++ b/src/main/java/io/reactivex/Flowable.java, +     * Returns a Maybe that emits the single item at a specified index in a sequence of emissions from, +     * this Flowable or completes if this Flowable sequence has fewer elements than index., +     * Returns a Flowable that emits the item found at a specified index in a sequence of emissions from, +     * this Flowable, or a default item if that index is out of range., +     * Returns a Flowable that emits the item found at a specified index in a sequence of emissions from, +     * this Flowable or signals a {@link NoSuchElementException} if this Flowable has fewer elements than index., +     * Returns a Maybe that emits only the very first item emitted by this Flowable or, +     * completes if this Flowable is empty., +     * @return the new Maybe instance, +     * Returns a Single that emits only the very first item emitted by this Flowable, or a default, +     * item if this Flowable completes without emitting anything., +     * Returns a Single that emits only the very first item emitted by this Flowable or, +     * signals a {@link NoSuchElementException} if this Flowable is empty., +     * Returns a Maybe that emits the last item emitted by this Flowable or completes if, +     * this Flowable is empty., +     * Returns a Single that emits only the last item emitted by this Flowable, or a default item, +     * if this Flowable completes without emitting any items., +     * @return the new Single instance, +     * Returns a Single that emits only the last item emitted by this Flowable or signals, +     * a {@link NoSuchElementException} if this Flowable is empty., +     * Returns a Maybe that completes if this Flowable is empty, signals one item if this Flowable, +     * signals exactly one item or signals an {@code IllegalArgumentException} if this Flowable signals, +     * more than one item., +     * Publisher emits more than one item, an {@code IllegalArgumentException} is signalled instead., +     * Returns a Single that emits the single item emitted by this Flowable, if this Flowable, +     * emits only a single item, otherwise, +     * if this Flowable completes without emitting any items a {@link NoSuchElementException} will be signalled and, +     * if this Flowable emits more than one item, an {@code IllegalArgumentException} will be signalled., +     * <p>If any item emitted by this Flowable does not implement {@link Comparable} with respect to, +     *             all other items emitted by this Flowable, no items will be emitted and the, +     *             sequence is terminated with a {@link ClassCastException}., +     *, +     * <p>If any item emitted by this Flowable does not implement {@link Comparable} with respect to, +     *             all other items emitted by this Flowable, no items will be emitted and the, +     *             sequence is terminated with a {@link ClassCastException}., +     *, +     * <p>If any item emitted by this Flowable does not implement {@link Comparable} with respect to, +     *             all other items emitted by this Flowable, no items will be emitted and the, +     *             sequence is terminated with a {@link ClassCastException}., +++ b/src/main/java/io/reactivex/Flowable.java, +     * Returns a Maybe that emits the single item at a specified index in a sequence of emissions from, +     * this Flowable or completes if this Flowable sequence has fewer elements than index., +     * Returns a Flowable that emits the item found at a specified index in a sequence of emissions from, +     * this Flowable, or a default item if that index is out of range., +     * Returns a Flowable that emits the item found at a specified index in a sequence of emissions from, +     * this Flowable or signals a {@link NoSuchElementException} if this Flowable has fewer elements than index., +     * Returns a Maybe that emits only the very first item emitted by this Flowable or, +     * completes if this Flowable is empty., +     * @return the new Maybe instance, +     * Returns a Single that emits only the very first item emitted by this Flowable, or a default, +     * item if this Flowable completes without emitting anything., +     * Returns a Single that emits only the very first item emitted by this Flowable or, +     * signals a {@link NoSuchElementException} if this Flowable is empty., +     * Returns a Maybe that emits the last item emitted by this Flowable or completes if, +     * this Flowable is empty., +     * Returns a Single that emits only the last item emitted by this Flowable, or a default item, +     * if this Flowable completes without emitting any items., +     * @return the new Single instance, +     * Returns a Single that emits only the last item emitted by this Flowable or signals, +     * a {@link NoSuchElementException} if this Flowable is empty., +     * Returns a Maybe that completes if this Flowable is empty, signals one item if this Flowable, +     * signals exactly one item or signals an {@code IllegalArgumentException} if this Flowable signals, +     * more than one item., +     * Publisher emits more than one item, an {@code IllegalArgumentException} is signalled instead., +     * Returns a Single that emits the single item emitted by this Flowable, if this Flowable, +     * emits only a single item, otherwise, +     * if this Flowable completes without emitting any items a {@link NoSuchElementException} will be signalled and, +     * if this Flowable emits more than one item, an {@code IllegalArgumentException} will be signalled., +     * <p>If any item emitted by this Flowable does not implement {@link Comparable} with respect to, +     *             all other items emitted by this Flowable, no items will be emitted and the, +     *             sequence is terminated with a {@link ClassCastException}., +     *, +     * <p>If any item emitted by this Flowable does not implement {@link Comparable} with respect to, +     *             all other items emitted by this Flowable, no items will be emitted and the, +     *             sequence is terminated with a {@link ClassCastException}., +     *, +     * <p>If any item emitted by this Flowable does not implement {@link Comparable} with respect to, +     *             all other items emitted by this Flowable, no items will be emitted and the, +     *             sequence is terminated with a {@link ClassCastException}., +++ b/src/main/java/io/reactivex/Observable.java, +     * Returns a Maybe that emits the single item at a specified index in a sequence of emissions from, +     * this Observable or completes if this Observable signals fewer elements than index., +     * Returns a Single that emits the item found at a specified index in a sequence of emissions from, +     * this Observable, or a default item if that index is out of range., +     * Returns a Single that emits the item found at a specified index in a sequence of emissions from this Observable, +     * or signals a {@link NoSuchElementException} if this Observable signals fewer elements than index., +     * Returns a Single that emits only the very first item emitted by this Observable or, +     * signals a {@link NoSuchElementException} if this Observable is empty., +     * Returns a Maybe that emits the last item emitted by this Observable or, +     * completes if this Observable is empty., +     * Returns a Single that emits only the last item emitted by this Observable, or a default item, +     * if this Observable completes without emitting any items., +     * Returns a Single that emits only the last item emitted by this Observable or, +     * signals a {@link NoSuchElementException} if this Observable is empty., +     * Returns an Observable that emits the single item emitted by this Observable if this Observable, +     * emits only a single item, otherwise if this Observable emits more than one item or no items, an, +     * {@code IllegalArgumentException} or {@code NoSuchElementException} is signalled respectively., +     * Returns a Single that emits the single item emitted by this Observable, if this Observable, +     * ObservableSource emits more than one item, an {@code IllegalArgumentException} is signalled instead.]