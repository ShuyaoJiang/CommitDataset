[+++ b/src/main/java/io/reactivex/Maybe.java, +     * Returns a {@link Maybe} based on applying a specified function to the item emitted by the, +     * source {@link Maybe}, where that function returns a {@link Single}., +     * When this Maybe just completes the resulting {@code Maybe} completes as well., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMapSingle.png" alt="">, +     * <dl>, +     * <dt><b>Scheduler:</b></dt>, +     * <dd>{@code flatMapSingleElement} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <R> the result value type, +     * @param mapper, +     *            a function that, when applied to the item emitted by the source Maybe, returns a, +     *            Single, +     * @return the new Maybe instance, +     * @see <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>, +     * @since 2.0.2 - experimental, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    public final <R> Maybe<R> flatMapSingleElement(final Function<? super T, ? extends SingleSource<? extends R>> mapper) {, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        return RxJavaPlugins.onAssembly(new MaybeFlatMapSingleElement<T, R>(this, mapper));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Returns a {@link Maybe} based on applying a specified function to the item emitted by the, +     * source {@link Maybe}, where that function returns a {@link Single}., +     * When this Maybe just completes the resulting {@code Maybe} completes as well., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMapSingle.png" alt="">, +     * <dl>, +     * <dt><b>Scheduler:</b></dt>, +     * <dd>{@code flatMapSingleElement} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <R> the result value type, +     * @param mapper, +     *            a function that, when applied to the item emitted by the source Maybe, returns a, +     *            Single, +     * @return the new Maybe instance, +     * @see <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>, +     * @since 2.0.2 - experimental, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    public final <R> Maybe<R> flatMapSingleElement(final Function<? super T, ? extends SingleSource<? extends R>> mapper) {, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        return RxJavaPlugins.onAssembly(new MaybeFlatMapSingleElement<T, R>(this, mapper));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators.maybe;, +, +import java.util.concurrent.atomic.AtomicReference;, +, +import io.reactivex.*;, +import io.reactivex.annotations.Experimental;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.exceptions.Exceptions;, +import io.reactivex.functions.Function;, +import io.reactivex.internal.disposables.DisposableHelper;, +import io.reactivex.internal.functions.ObjectHelper;, +, +/**, + * Maps the success value of the source MaybeSource into a Single., + * @param <T> the input value type, + * @param <R> the result value type, + * , + * @since 2.0.2 - experimental, + */, +@Experimental, +public final class MaybeFlatMapSingleElement<T, R> extends Maybe<R> {, +, +    final MaybeSource<T> source;, +, +    final Function<? super T, ? extends SingleSource<? extends R>> mapper;, +, +    public MaybeFlatMapSingleElement(MaybeSource<T> source, Function<? super T, ? extends SingleSource<? extends R>> mapper) {, +        this.source = source;, +        this.mapper = mapper;, +    }, +, +    @Override]