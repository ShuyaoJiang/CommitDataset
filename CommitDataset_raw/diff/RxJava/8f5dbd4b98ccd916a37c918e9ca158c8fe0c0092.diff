[+++ b/src/main/java/io/reactivex/internal/operators/OperatorObserveOn.java, +            if (SubscriptionHelper.validateRequest(n)) {, +                if (cancelled) {, +                    return;, +                }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorObserveOn.java, +            if (SubscriptionHelper.validateRequest(n)) {, +                if (cancelled) {, +                    return;, +                }, +++ b/src/main/java/io/reactivex/internal/operators/PublisherCombineLatest.java, +                    } else, +                    if (value == null && error != null) {, +                        done = true; // if this source completed without a value, +++ b/src/main/java/io/reactivex/internal/operators/OperatorObserveOn.java, +            if (SubscriptionHelper.validateRequest(n)) {, +                if (cancelled) {, +                    return;, +                }, +++ b/src/main/java/io/reactivex/internal/operators/PublisherCombineLatest.java, +                    } else, +                    if (value == null && error != null) {, +                        done = true; // if this source completed without a value, +++ b/src/main/java/io/reactivex/internal/operators/PublisherIntervalSource.java, +import io.reactivex.exceptions.MissingBackpressureException;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {, +                        actual.onError(new MissingBackpressureException("Can't deliver value " + count + " due to lack of requests"));, +++ b/src/main/java/io/reactivex/internal/operators/OperatorObserveOn.java, +            if (SubscriptionHelper.validateRequest(n)) {, +                if (cancelled) {, +                    return;, +                }, +++ b/src/main/java/io/reactivex/internal/operators/PublisherCombineLatest.java, +                    } else, +                    if (value == null && error != null) {, +                        done = true; // if this source completed without a value, +++ b/src/main/java/io/reactivex/internal/operators/PublisherIntervalSource.java, +import io.reactivex.exceptions.MissingBackpressureException;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {, +                        actual.onError(new MissingBackpressureException("Can't deliver value " + count + " due to lack of requests"));, +++ b/src/main/java/io/reactivex/observables/BlockingObservable.java, +    @Override, +    public void forEach(Consumer<? super T> action) {, +        BlockingIterator<T> it = iterate(o);, +        while (it.hasNext()) {, +            try {, +                action.accept(it.next());, +            } catch (Throwable e) {, +                it.dispose();, +                throw e;, +            }, +        }, +    }, +    , +++ b/src/main/java/io/reactivex/internal/operators/OperatorObserveOn.java, +            if (SubscriptionHelper.validateRequest(n)) {, +                if (cancelled) {, +                    return;, +                }, +++ b/src/main/java/io/reactivex/internal/operators/PublisherCombineLatest.java, +                    } else, +                    if (value == null && error != null) {, +                        done = true; // if this source completed without a value, +++ b/src/main/java/io/reactivex/internal/operators/PublisherIntervalSource.java, +import io.reactivex.exceptions.MissingBackpressureException;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {, +                        actual.onError(new MissingBackpressureException("Can't deliver value " + count + " due to lack of requests"));, +++ b/src/main/java/io/reactivex/observables/BlockingObservable.java, +    @Override, +    public void forEach(Consumer<? super T> action) {, +        BlockingIterator<T> it = iterate(o);, +        while (it.hasNext()) {, +            try {, +                action.accept(it.next());, +            } catch (Throwable e) {, +                it.dispose();, +                throw e;, +            }, +        }, +    }, +    , +++ b/src/main/java/io/reactivex/subjects/PublishSubject.java, +import io.reactivex.exceptions.MissingBackpressureException;, +                actual.onError(new MissingBackpressureException("Could not emit value due to lack of requests"));, +++ b/src/main/java/io/reactivex/internal/operators/OperatorObserveOn.java, +            if (SubscriptionHelper.validateRequest(n)) {, +                if (cancelled) {, +                    return;, +                }, +++ b/src/main/java/io/reactivex/internal/operators/PublisherCombineLatest.java, +                    } else, +                    if (value == null && error != null) {, +                        done = true; // if this source completed without a value, +++ b/src/main/java/io/reactivex/internal/operators/PublisherIntervalSource.java, +import io.reactivex.exceptions.MissingBackpressureException;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {]