[+++ b/src/main/java/io/reactivex/Completable.java, +++ b/src/main/java/io/reactivex/Completable.java, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     *     to signal the overflow to the producer.</li>, +     * <p>, +++ b/src/main/java/io/reactivex/Completable.java, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     *     to signal the overflow to the producer.</li>, +     * <p>, +++ b/src/main/java/io/reactivex/Maybe.java, +++ b/src/main/java/io/reactivex/Completable.java, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     *     to signal the overflow to the producer.</li>, +     * <p>, +++ b/src/main/java/io/reactivex/Maybe.java, +++ b/src/main/java/io/reactivex/Observable.java, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <p>, +++ b/src/main/java/io/reactivex/Completable.java, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     *     to signal the overflow to the producer.</li>, +     * <p>, +++ b/src/main/java/io/reactivex/Maybe.java, +++ b/src/main/java/io/reactivex/Observable.java, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <p>, +++ b/src/main/java/io/reactivex/Scheduler.java, +     * Scheduler limitScheduler = Schedulers.computation().when(workers -&gt; {, +     * Scheduler limitScheduler = Schedulers.computation().when(workers -&gt; {, +     * Scheduler slowScheduler = Schedulers.computation().when(workers -&gt; {, +     *  return Completable.concat(workers.map(actions -&gt; {, +++ b/src/main/java/io/reactivex/Completable.java, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     *     to signal the overflow to the producer.</li>, +     * <p>, +++ b/src/main/java/io/reactivex/Maybe.java, +++ b/src/main/java/io/reactivex/Observable.java, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <!-- <p> -->, +     * <p>, +++ b/src/main/java/io/reactivex/Scheduler.java, +     * Scheduler limitScheduler = Schedulers.computation().when(workers -&gt; {, +     * Scheduler limitScheduler = Schedulers.computation().when(workers -&gt; {, +     * Scheduler slowScheduler = Schedulers.computation().when(workers -&gt; {, +     *  return Completable.concat(workers.map(actions -&gt; {, +++ b/src/main/java/io/reactivex/Single.java, +     * <p>, +     * <p>]