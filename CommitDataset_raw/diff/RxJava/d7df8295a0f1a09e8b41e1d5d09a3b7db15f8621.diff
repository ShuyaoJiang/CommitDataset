[+++ b/language-adaptors/rxjava-clojure/README.md, +## Using Observable/create, +As of 0.17, `rx.Observable/create` takes an implementation of `rx.Observable$OnSubscribe` which is basically an alias for `rx.util.functions.Action1` that takes an `rx.Subscriber` as its argument. Thus, you can just use `rx/action` when creating new observables:, +, +```clojure, +; A simple observable that emits 0..9 taking unsubscribe into account, +(Observable/create (rx/action [^rx.Subscriber s], +                     (loop [i 0], +                       (when (and (< i 10) (.isUnsubscribed s)), +                         (.onNext s i), +                         (recur (inc i)))), +                     (.onCompleted s))), +```, +, +++ b/language-adaptors/rxjava-clojure/README.md, +## Using Observable/create, +As of 0.17, `rx.Observable/create` takes an implementation of `rx.Observable$OnSubscribe` which is basically an alias for `rx.util.functions.Action1` that takes an `rx.Subscriber` as its argument. Thus, you can just use `rx/action` when creating new observables:, +, +```clojure, +; A simple observable that emits 0..9 taking unsubscribe into account, +(Observable/create (rx/action [^rx.Subscriber s], +                     (loop [i 0], +                       (when (and (< i 10) (.isUnsubscribed s)), +                         (.onNext s i), +                         (recur (inc i)))), +                     (.onCompleted s))), +```, +, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +         ; TODO remove this when OnSubscriberFunc is removed, +         ; OnSubscribe is just an Action1, so add it to the list of implemented interfaces, +         ; so an action cab be used with Observable/create, +         ~@(if (and (= prefix "rx.util.functions.Action"), +                    (some #{1} arities)), +             `(rx.Observable$OnSubscribe)), +, +  by delegating to the given function. Also implements rx.Observable$OnSubscribe which, +  is just an Action1., +++ b/language-adaptors/rxjava-clojure/README.md, +## Using Observable/create, +As of 0.17, `rx.Observable/create` takes an implementation of `rx.Observable$OnSubscribe` which is basically an alias for `rx.util.functions.Action1` that takes an `rx.Subscriber` as its argument. Thus, you can just use `rx/action` when creating new observables:, +, +```clojure, +; A simple observable that emits 0..9 taking unsubscribe into account, +(Observable/create (rx/action [^rx.Subscriber s], +                     (loop [i 0], +                       (when (and (< i 10) (.isUnsubscribed s)), +                         (.onNext s i), +                         (recur (inc i)))), +                     (.onCompleted s))), +```, +, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +         ; TODO remove this when OnSubscriberFunc is removed, +         ; OnSubscribe is just an Action1, so add it to the list of implemented interfaces, +         ; so an action cab be used with Observable/create, +         ~@(if (and (= prefix "rx.util.functions.Action"), +                    (some #{1} arities)), +             `(rx.Observable$OnSubscribe)), +, +  by delegating to the given function. Also implements rx.Observable$OnSubscribe which, +  is just an Action1., +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +      (is (instance? rx.Observable$OnSubscribe a)), +  (testing "can create an observable with old style fn", +  (testing "can create an observable with new-style action", +    (is (= 99, +           (-> (Observable/create (rx/action [^rx.Subscriber s], +                                    (when-not (.isUnsubscribed s), +                                      (.onNext s 99)), +                                    (.onCompleted s))), +               .toBlockingObservable, +               .single))))]