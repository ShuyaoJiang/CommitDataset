[+++ b/rxjava-core/src/main/java/rx/internal/util/RxRingBuffer.java, +import rx.internal.util.unsafe.SpmcArrayQueue;, +import rx.internal.util.unsafe.SpscArrayQueue;, +            // TODO the SpscArrayQueue isn't ready yet so using SpmcArrayQueue for now, +            return new RxRingBuffer(SPMC_POOL, SIZE);, +            return new RxRingBuffer(SPMC_POOL, SIZE);, +    private static ObjectPool<Queue<Object>> SPSC_POOL = new ObjectPool<Queue<Object>>() {, +, +        @Override, +        protected SpscArrayQueue<Object> createObject() {, +            return new SpscArrayQueue<Object>(SIZE);, +        }, +, +    };, +, +    private static ObjectPool<Queue<Object>> SPMC_POOL = new ObjectPool<Queue<Object>>() {, +, +        @Override, +        protected SpmcArrayQueue<Object> createObject() {, +            return new SpmcArrayQueue<Object>(SIZE);, +        }, +, +    };, +    , +++ b/rxjava-core/src/main/java/rx/internal/util/RxRingBuffer.java, +import rx.internal.util.unsafe.SpmcArrayQueue;, +import rx.internal.util.unsafe.SpscArrayQueue;, +            // TODO the SpscArrayQueue isn't ready yet so using SpmcArrayQueue for now, +            return new RxRingBuffer(SPMC_POOL, SIZE);, +            return new RxRingBuffer(SPMC_POOL, SIZE);, +    private static ObjectPool<Queue<Object>> SPSC_POOL = new ObjectPool<Queue<Object>>() {, +, +        @Override, +        protected SpscArrayQueue<Object> createObject() {, +            return new SpscArrayQueue<Object>(SIZE);, +        }, +, +    };, +, +    private static ObjectPool<Queue<Object>> SPMC_POOL = new ObjectPool<Queue<Object>>() {, +, +        @Override, +        protected SpmcArrayQueue<Object> createObject() {, +            return new SpmcArrayQueue<Object>(SIZE);, +        }, +, +    };, +    , +++ b/rxjava-core/src/main/java/rx/internal/util/unsafe/SpmcArrayQueue.java, +            // strict check as per https://github.com/JCTools/JCTools/issues/21#issuecomment-50204120, +            int size = (int) (currProducerIndex - lvConsumerIndex());, +            if (size == capacity) {, +            else {, +                // spin wait for slot to clear, buggers wait freedom, +                while (null != lvElement(lb, offset));, +            }, +        }]