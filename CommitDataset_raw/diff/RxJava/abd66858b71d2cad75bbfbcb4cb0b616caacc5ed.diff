[+++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +     * Returns an {@link Iterator} that iterates over all items emitted by a specified, +     * {@link Observable}., +     *            the source {@link Observable}, +     *            the type of items emitted by the source {@link Observable}, +     * @return an {@link Iterator} that can iterate over the items emitted by the {@link Observable}, +     * Returns the last item emitted by a specified {@link Observable}., +     *            the source {@link Observable}, +     * @return the last item emitted by the source {@link Observable}, +     * Returns the last item emitted by an {@link Observable} that matches a given predicate., +     *            the source {@link Observable}, +     *            a predicate function to evaluate items emitted by the {@link Observable}, +     * @return the last item emitted by the {@link Observable} for which the predicate function, +     *         returns <code>true</code>, +     * Returns the last item emitted by an {@link Observable} that matches a given predicate., +     *            the source {@link Observable}, +     *            a predicate function to evaluate items emitted by the {@link Observable}, +     * @return the last item emitted by the {@link Observable} for which the predicate function, +     *         returns <code>true</code>, +     * Returns the last item emitted by an {@link Observable}, or a default value if no item is, +     * emitted., +     *            the source {@link Observable}, +     *            a default value to return if the {@link Observable} emits no items, +     *            the type of items emitted by the {@link Observable}, +     * @return the last item emitted by an {@link Observable}, or the default value if no item is, +     *         emitted, +     * Returns the last item emitted by an {@link Observable} that matches a given predicate, or a, +     * default value if no such item is emitted., +     *            the source {@link Observable}, +     *            a default value to return if the {@link Observable} emits no matching items, +     *            a predicate function to evaluate items emitted by the {@link Observable}, +     *            the type of items emitted by the {@link Observable}, +     * @return the last item emitted by an {@link Observable} that matches the predicate, or the, +     *         default value if no matching item is emitted, +     * Returns the last item emitted by an {@link Observable} that matches a given predicate, or a, +     * default value if no such item is emitted., +     *            the source {@link Observable}, +     *            a default value to return if the {@link Observable} emits no matching items, +     *            a predicate function to evaluate items emitted by the {@link Observable}, +     *            the type of items emitted by the {@link Observable}, +     * @return the last item emitted by an {@link Observable} that matches the predicate, or the, +     *         default value if no matching item is emitted, +     * Returns an {@link Iterable} that always returns the item most recently emitted by an, +     * {@link Observable}., +     *            the source {@link Observable}, +     *            the type of items emitted by the {@link Observable}, +     *            the initial value that will be yielded by the {@link Iterable} sequence if the, +     *            {@link Observable} has not yet emitted an item, +     * @return an {@link Iterable} that on each iteration returns the item that the, +     *         {@link Observable} has most recently emitted, +     * Returns an {@link Iterable} that blocks until the {@link Observable} emits another item,, +     * then returns that item., +     *            the source {@link Observable}, +     *            the type of items emitted by the {@link Observable}, +     * @return an {@link Iterable} that blocks upon each iteration until the {@link Observable}, +     *         emits a new item, whereupon the Iterable returns that item, +     * If the {@link Observable} completes after emitting a single item, return that item,, +     * otherwise throw an exception., +     *            the source {@link Observable}, +     * @return the single item emitted by the {@link Observable}, +     *             if the {@link Observable} does not emit exactly one item, +     * If the {@link Observable} completes after emitting a single item that matches a given, +     * predicate, return that item, otherwise throw an exception., +     *            the source {@link Observable}, +     *            a predicate function to evaluate items emitted by the {@link Observable}, +     * @return the single item emitted by the source {@link Observable} that matches the predicate, +     *             if the {@link Observable} does not emit exactly one item that matches the, +     *             predicate, +     * If the {@link Observable} completes after emitting a single item that matches a given, +     * predicate, return that item, otherwise throw an exception., +     *            the source {@link Observable}, +     *            a predicate function to evaluate items emitted by the {@link Observable}, +     * @return the single item emitted by the source {@link Observable} that matches the predicate, +     *             if the {@link Observable} does not emit exactly one item that matches the, +     *             predicate, +     * If the {@link Observable} completes after emitting a single item, return that item, otherwise, +     * return a default value., +     *            the source {@link Observable}, +     *            a default value to return if the {@link Observable} emits no items, +     * @return the single item emitted by the source {@link Observable}, or a default value if no, +     *         value is emitted, +     * If the {@link Observable} completes after emitting a single item that matches a given, +     * predicate, return that item, otherwise return a default value., +     *            the source {@link Observable}, +     *            a default value to return if the {@link Observable} emits no matching items, +     *            a predicate function to evaluate items emitted by the {@link Observable}, +     * @return the single item emitted by the source {@link Observable} that matches the predicate,, +     *         or a default value if no such value is emitted, +     * If the {@link Observable} completes after emitting a single item that matches a given, +     * predicate, return that item, otherwise return a default value., +     *            the source {@link Observable}, +     *            a default value to return if the {@link Observable} emits no matching items, +     *            a predicate function to evaluate items emitted by the {@link Observable}, +     * @return the single item emitted by the source {@link Observable} that matches the predicate,, +     *         or a default value if no such value is emitted, +     * Returns a {@link Future} representing the single value emitted by an {@link Observable}., +     * <code>toFuture()</code> throws an exception if the {@link Observable} emits more than one, +     * item. If the Observable may emit more than item, use, +     * {@link Observable#toList toList()}.toFuture()</code>., +     *            the source {@link Observable}]