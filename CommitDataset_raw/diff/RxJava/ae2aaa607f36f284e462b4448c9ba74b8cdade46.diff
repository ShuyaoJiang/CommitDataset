[+++ b/src/main/java/io/reactivex/Observable.java, +                return new SubscriptionLambdaObserver<T>(s, onSubscribe, onCancel);, +        LambdaObserver<T> ls = new LambdaObserver<T>(onNext, onError, onComplete, onSubscribe);, +++ b/src/main/java/io/reactivex/Observable.java, +                return new SubscriptionLambdaObserver<T>(s, onSubscribe, onCancel);, +        LambdaObserver<T> ls = new LambdaObserver<T>(onNext, onError, onComplete, onSubscribe);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableAll.java, +    static final class AllSubscriber<T> implements Observer<T>, Disposable {, +                actual.onSubscribe(this);, +        , +        @Override, +        public void dispose() {, +            s.dispose();, +        }, +        , +        @Override, +        public boolean isDisposed() {, +            return s.isDisposed();, +        }, +++ b/src/main/java/io/reactivex/Observable.java, +                return new SubscriptionLambdaObserver<T>(s, onSubscribe, onCancel);, +        LambdaObserver<T> ls = new LambdaObserver<T>(onNext, onError, onComplete, onSubscribe);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableAll.java, +    static final class AllSubscriber<T> implements Observer<T>, Disposable {, +                actual.onSubscribe(this);, +        , +        @Override, +        public void dispose() {, +            s.dispose();, +        }, +        , +        @Override, +        public boolean isDisposed() {, +            return s.isDisposed();, +        }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableAny.java, +    static final class AnySubscriber<T> implements Observer<T>, Disposable {, +                actual.onSubscribe(this);, +, +        @Override, +        public void dispose() {, +            s.dispose();, +        }, +        , +        @Override, +        public boolean isDisposed() {, +            return s.isDisposed();, +        }, +++ b/src/main/java/io/reactivex/Observable.java, +                return new SubscriptionLambdaObserver<T>(s, onSubscribe, onCancel);, +        LambdaObserver<T> ls = new LambdaObserver<T>(onNext, onError, onComplete, onSubscribe);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableAll.java, +    static final class AllSubscriber<T> implements Observer<T>, Disposable {, +                actual.onSubscribe(this);, +        , +        @Override, +        public void dispose() {, +            s.dispose();, +        }, +        , +        @Override, +        public boolean isDisposed() {, +            return s.isDisposed();, +        }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableAny.java, +    static final class AnySubscriber<T> implements Observer<T>, Disposable {, +                actual.onSubscribe(this);, +, +        @Override, +        public void dispose() {, +            s.dispose();, +        }, +        , +        @Override, +        public boolean isDisposed() {, +            return s.isDisposed();, +        }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBuffer.java, +    static final class BufferExactSubscriber<T, U extends Collection<? super T>> implements Observer<T>, Disposable {, +                actual.onSubscribe(this);, +        public void dispose() {, +            s.dispose();, +        }, +        , +        @Override, +        public boolean isDisposed() {, +            return s.isDisposed();, +        }, +, +        @Override, +    extends AtomicBoolean implements Observer<T>, Disposable {, +                actual.onSubscribe(this);, +, +        @Override, +        public void dispose() {, +            s.dispose();, +        }, +        , +        @Override, +        public boolean isDisposed() {]