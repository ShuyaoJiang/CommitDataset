[+++ b/rxjava-core/src/test/java/rx/CombineLatestTests.java, +package rx;, +, +import org.junit.Test;, +, +import rx.CovarianceTest.CoolRating;, +import rx.CovarianceTest.ExtendedResult;, +import rx.CovarianceTest.HorrorMovie;, +import rx.CovarianceTest.Media;, +import rx.CovarianceTest.Movie;, +import rx.CovarianceTest.Rating;, +import rx.CovarianceTest.Result;, +import rx.util.functions.Action1;, +import rx.util.functions.Func2;, +, +public class CombineLatestTests {, +    /**, +     * This won't compile if super/extends isn't done correctly on generics, +     */, +    @Test, +    public void testCovarianceOfCombineLatest() {, +        Observable<HorrorMovie> horrors = Observable.from(new HorrorMovie());, +        Observable<CoolRating> ratings = Observable.from(new CoolRating());, +, +        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        Observable.<Media, Rating, ExtendedResult> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(extendedAction);, +        Observable.<Media, Rating, Result> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        Observable.<Media, Rating, ExtendedResult> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);, +, +        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine);, +    }, +, +    Func2<Media, Rating, ExtendedResult> combine = new Func2<Media, Rating, ExtendedResult>() {, +        @Override, +        public ExtendedResult call(Media m, Rating r) {, +            return new ExtendedResult();, +        }, +    };, +, +    Action1<Result> action = new Action1<Result>() {, +        @Override, +        public void call(Result t1) {, +            System.out.println("Result: " + t1);, +        }, +    };, +, +    Action1<ExtendedResult> extendedAction = new Action1<ExtendedResult>() {, +        @Override, +        public void call(ExtendedResult t1) {, +            System.out.println("Result: " + t1);, +        }, +    };, +}, +++ b/rxjava-core/src/test/java/rx/CombineLatestTests.java, +package rx;, +, +import org.junit.Test;, +, +import rx.CovarianceTest.CoolRating;, +import rx.CovarianceTest.ExtendedResult;, +import rx.CovarianceTest.HorrorMovie;, +import rx.CovarianceTest.Media;, +import rx.CovarianceTest.Movie;, +import rx.CovarianceTest.Rating;, +import rx.CovarianceTest.Result;, +import rx.util.functions.Action1;, +import rx.util.functions.Func2;, +, +public class CombineLatestTests {, +    /**, +     * This won't compile if super/extends isn't done correctly on generics, +     */, +    @Test, +    public void testCovarianceOfCombineLatest() {, +        Observable<HorrorMovie> horrors = Observable.from(new HorrorMovie());, +        Observable<CoolRating> ratings = Observable.from(new CoolRating());, +, +        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        Observable.<Media, Rating, ExtendedResult> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(extendedAction);, +        Observable.<Media, Rating, Result> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);, +        Observable.<Media, Rating, ExtendedResult> combineLatest(horrors, ratings, combine).toBlockingObservable().forEach(action);, +, +        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine);, +    }, +, +    Func2<Media, Rating, ExtendedResult> combine = new Func2<Media, Rating, ExtendedResult>() {, +        @Override, +        public ExtendedResult call(Media m, Rating r) {, +            return new ExtendedResult();, +        }, +    };, +, +    Action1<Result> action = new Action1<Result>() {, +        @Override, +        public void call(Result t1) {, +            System.out.println("Result: " + t1);, +        }, +    };]