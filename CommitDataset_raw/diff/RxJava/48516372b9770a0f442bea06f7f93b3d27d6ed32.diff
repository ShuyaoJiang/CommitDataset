[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableGenerate.java, +        boolean hasNext;, +, +                        state = null;, +                    hasNext = false;, +, +                        state = null;, +                        onError(ex);, +                        dispose(s);, +                        state = null;, +                    S s = state;, +                    state = null;, +                    dispose(s);, +            if (!terminate) {, +                if (hasNext) {, +                    onError(new IllegalStateException("onNext already called in this generate turn"));, +                } else {, +                    } else {, +                        hasNext = true;, +                }, +            }, +        }, +            if (terminate) {, +                RxJavaPlugins.onError(t);, +            } else {, +        }, +            if (!terminate) {, +}, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableGenerate.java, +        boolean hasNext;, +, +                        state = null;, +                    hasNext = false;, +, +                        state = null;, +                        onError(ex);, +                        dispose(s);, +                        state = null;, +                    S s = state;, +                    state = null;, +                    dispose(s);, +            if (!terminate) {, +                if (hasNext) {, +                    onError(new IllegalStateException("onNext already called in this generate turn"));, +                } else {, +                    } else {, +                        hasNext = true;, +                }, +            }, +        }, +            if (terminate) {, +                RxJavaPlugins.onError(t);, +            } else {, +        }, +            if (!terminate) {, +}, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableGenerate.java, +        boolean hasNext;, +, +                hasNext = false;, +, +                    onError(ex);, +                    dispose(s);, +, +            if (!terminate) {, +                if (hasNext) {, +                    onError(new IllegalStateException("onNext already called in this generate turn"));, +                } else {, +                    } else {, +                        hasNext = true;, +                }, +            }, +        }, +            if (terminate) {, +                RxJavaPlugins.onError(t);, +            } else {, +        }, +            if (!terminate) {, +}, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableGenerate.java, +        boolean hasNext;, +, +                        state = null;, +                    hasNext = false;, +, +                        state = null;, +                        onError(ex);, +                        dispose(s);, +                        state = null;, +                    S s = state;, +                    state = null;, +                    dispose(s);, +            if (!terminate) {, +                if (hasNext) {, +                    onError(new IllegalStateException("onNext already called in this generate turn"));, +                } else {, +                    } else {, +                        hasNext = true;, +                }, +            }]