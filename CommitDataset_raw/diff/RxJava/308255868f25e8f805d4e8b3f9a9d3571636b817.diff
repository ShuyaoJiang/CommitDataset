[+++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                svq = RxRingBuffer.getSpscInstance();, +        private final RxRingBuffer q = RxRingBuffer.getSpscInstance();, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                svq = RxRingBuffer.getSpscInstance();, +        private final RxRingBuffer q = RxRingBuffer.getSpscInstance();, +++ b/src/main/java/rx/internal/util/RxRingBuffer.java, +            return new RxRingBuffer(SPSC_POOL, SIZE);, +    public synchronized void release() {, +        ObjectPool<Queue<Object>> p = pool;, +        if (p != null && q != null) {, +            p.returnObject(q);, +        boolean iae = false;, +        boolean mbe = false;, +        synchronized (this) {, +            Queue<Object> q = queue;, +            if (q != null) {, +                mbe = !q.offer(on.next(o));, +            } else {, +                iae = true;, +            }, +        }, +        , +        if (iae) {, +        if (mbe) {, +        Queue<Object> q = queue;, +        if (q == null) {, +        return q.size();, +        Queue<Object> q = queue;, +        if (q == null) {, +        return q.isEmpty();, +        Object o;, +        synchronized (this) {, +            Queue<Object> q = queue;, +            if (q == null) {, +            o = q.poll();, +            , +            Object ts = terminalState;, +            if (o == null && ts != null && q.peek() == null) {, +                o = ts;, +        }, +        Object o;, +        synchronized (this) {, +            Queue<Object> q = queue;, +            if (q == null) {, +            o = q.peek();, +            Object ts = terminalState;, +            if (o == null && ts != null && q.peek() == null) {, +                o = ts;, +            }, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                svq = RxRingBuffer.getSpscInstance();, +        private final RxRingBuffer q = RxRingBuffer.getSpscInstance();, +++ b/src/main/java/rx/internal/util/RxRingBuffer.java, +            return new RxRingBuffer(SPSC_POOL, SIZE);, +    public synchronized void release() {, +        ObjectPool<Queue<Object>> p = pool;, +        if (p != null && q != null) {, +            p.returnObject(q);, +        boolean iae = false;, +        boolean mbe = false;, +        synchronized (this) {, +            Queue<Object> q = queue;, +            if (q != null) {, +                mbe = !q.offer(on.next(o));, +            } else {, +                iae = true;, +            }, +        }, +        , +        if (iae) {, +        if (mbe) {, +        Queue<Object> q = queue;, +        if (q == null) {, +        return q.size();, +        Queue<Object> q = queue;, +        if (q == null) {, +        return q.isEmpty();, +        Object o;, +        synchronized (this) {, +            Queue<Object> q = queue;, +            if (q == null) {, +            o = q.poll();, +            , +            Object ts = terminalState;, +            if (o == null && ts != null && q.peek() == null) {, +                o = ts;, +        }, +        Object o;, +        synchronized (this) {, +            Queue<Object> q = queue;, +            if (q == null) {, +            o = q.peek();, +            Object ts = terminalState;, +            if (o == null && ts != null && q.peek() == null) {, +                o = ts;, +            }, +++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java, +//        if (null == e) {, +//            throw new NullPointerException("Null is not a valid element");]