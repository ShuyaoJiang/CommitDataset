[+++ b/CHANGES.md, +### Version 0.19.0 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.19.0%22)) ###, +, +#### Performance and Object Allocation, +, +Fairly significant object allocation improvements are included in this release which reduce GC pressure and improve performance., +, +Two pull requests (amongst several) with details are:, +, +- https://github.com/Netflix/RxJava/pull/1281 Reduce Subscription Object Allocation, +- https://github.com/Netflix/RxJava/pull/1246 Moved to atomic field updaters, +, +With the following simple test code relative performance has increased as shown below:, +, +```java, +Observable<Integer> o = Observable.just(1);, +o.map(i -> {, +    return String.valueOf(i);, +}).map(i -> {, +    return Integer.parseInt(i);, +}).subscribe(observer);, +```, +, +, +###### Rx 0.19, +, +```, +Run: 10 - 10,692,099 ops/sec , +Run: 11 - 10,617,627 ops/sec , +Run: 12 - 10,938,405 ops/sec , +Run: 13 - 10,917,388 ops/sec , +Run: 14 - 10,783,298 ops/sec , +```, +, +###### Rx 0.18.4, +, +```, +Run: 11 - 8,493,506 ops/sec , +Run: 12 - 8,403,361 ops/sec , +Run: 13 - 8,400,537 ops/sec , +Run: 14 - 8,163,998 ops/sec , +```, +, +###### Rx 0.17.6, +, +```, +Run: 10 - 4,930,966 ops/sec , +Run: 11 - 6,119,951 ops/sec , +Run: 12 - 7,062,146 ops/sec , +Run: 13 - 6,514,657 ops/sec , +Run: 14 - 6,369,426 ops/sec , +```, +, +###### Rx 0.16.1, +, +```, +Run: 10 - 2,879,355 ops/sec , +Run: 11 - 3,236,245 ops/sec , +Run: 12 - 4,468,275 ops/sec , +Run: 13 - 3,237,293 ops/sec , +Run: 14 - 4,683,840 ops/sec , +```, +, +Note that these numbers are relative as they depend on the JVM and hardware. , +, +, +#### Scala Changes, +, +Many missing operators have been added to the RxScala APIs along with fixes and other maturation., +, +, +#### toBlockingObservable() -> toBlocking(), +, +The `toBlockingObservable()` method has been deprecated in favor of `toBlocking()` for brevity and fit better with possible future additions such as `toParallel()` without always needing the `Observable` suffix., +, +, +#### forEach, +, +`forEach` as added as an alias for `subscribe` to match the Java 8 naming convention., +, +This means code can now be written as:, +, +```java, +Observable.from(1, 2, 3).limit(2).forEach(System.out::println);, +```, +, +which is an alias of this:, +, +```java, +Observable.from(1, 2, 3).take(2).subscribe(System.out::println);, +```, +, +Since `forEach` exists on `BlockingObservable` as well, moving from non-blocking to blocking looks like this:, +, +```java, +// non-blocking, +Observable.from(1, 2, 3).limit(2).forEach(System.out::println);, +// blocking, +Observable.from(1, 2, 3).limit(2).toBlocking().forEach(System.out::println);, +```]