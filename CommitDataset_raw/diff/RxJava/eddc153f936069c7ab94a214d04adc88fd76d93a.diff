[+++ b/src/main/java/io/reactivex/Completable.java, +     * Returns a Completable which calls the given onEvent callback with the (throwable) for an onError, +     * or (null) for an onComplete signal from this Completable before delivering said signal to the downstream., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code doOnEvent} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param onEvent the event callback, +     * @return the new Completable instance, +     * @throws NullPointerException if onEvent is null, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable doOnEvent(final Consumer<? super Throwable> onEvent) {, +        ObjectHelper.requireNonNull(onEvent, "onEvent is null");, +        return doOnLifecycle(Functions.emptyConsumer(), new Consumer<Throwable>() {, +            @Override, +            public void accept(final Throwable throwable) throws Exception {, +                onEvent.accept(throwable);, +            }, +        }, new Action() {, +            @Override, +            public void run() throws Exception {, +                onEvent.accept(null);, +            }, +        }, Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Completable.java, +     * Returns a Completable which calls the given onEvent callback with the (throwable) for an onError, +     * or (null) for an onComplete signal from this Completable before delivering said signal to the downstream., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code doOnEvent} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param onEvent the event callback, +     * @return the new Completable instance, +     * @throws NullPointerException if onEvent is null, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable doOnEvent(final Consumer<? super Throwable> onEvent) {, +        ObjectHelper.requireNonNull(onEvent, "onEvent is null");, +        return doOnLifecycle(Functions.emptyConsumer(), new Consumer<Throwable>() {, +            @Override, +            public void accept(final Throwable throwable) throws Exception {, +                onEvent.accept(throwable);, +            }, +        }, new Action() {, +            @Override, +            public void run() throws Exception {, +                onEvent.accept(null);, +            }, +        }, Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Calls the given onEvent callback with the (success value, null) for an onSuccess, (null, throwable) for, +++ b/src/main/java/io/reactivex/Completable.java, +     * Returns a Completable which calls the given onEvent callback with the (throwable) for an onError, +     * or (null) for an onComplete signal from this Completable before delivering said signal to the downstream., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code doOnEvent} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param onEvent the event callback, +     * @return the new Completable instance, +     * @throws NullPointerException if onEvent is null, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable doOnEvent(final Consumer<? super Throwable> onEvent) {, +        ObjectHelper.requireNonNull(onEvent, "onEvent is null");, +        return doOnLifecycle(Functions.emptyConsumer(), new Consumer<Throwable>() {, +            @Override, +            public void accept(final Throwable throwable) throws Exception {, +                onEvent.accept(throwable);, +            }, +        }, new Action() {, +            @Override, +            public void run() throws Exception {, +                onEvent.accept(null);, +            }, +        }, Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Calls the given onEvent callback with the (success value, null) for an onSuccess, (null, throwable) for, +++ b/src/main/java/io/reactivex/Single.java, +     * Calls the shared consumer with the error sent via onError or the value, +     * via onSuccess for each SingleObserver that subscribes to the current Single., +     * <dl>, +     * <dt><b>Scheduler:</b></dt>, +     * <dd>{@code doOnSubscribe} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param onEvent the consumer called with the success value of onEvent, +     * @return the new Single instance, +     * @since 2.0, +     */, +    public final Single<T> doOnEvent(final BiConsumer<? super T, ? super Throwable> onEvent) {]