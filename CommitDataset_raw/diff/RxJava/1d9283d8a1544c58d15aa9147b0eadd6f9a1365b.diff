[+++ b/src/main/java/io/reactivex/Flowable.java, +     * Calls the specified action after this Flowable signals onError or onCompleted or gets cancelled by, +     * the downstream., +     * <p>In case of a race between a terminal event and a cancellation, the provided {@code onFinally} action, +     * is executed at once per subscription., +     * <p>Note that the {@code onFinally} action is shared between subscriptions and as such, +     * should be thread-safe., +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator doesn't interfere with backpressure which is determined by the source {@code Publisher}'s backpressure, +     *  behavior.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code doFinally} does not operate by default on a particular {@link Scheduler}.</dd>, +     *  <td><b>Operator-fusion:</b></dt>, +     *  <dd>This operator supports normal and conditional Subscribers as well as boundary-limited, +     *  synchronous or asynchronous queue-fusion.</dd>, +     * </dl>, +     * @param onFinally the action called when this Flowable terminates or gets cancelled, +     * @return the new Flowable instance, +     * @since 2.0.1 - experimental, +     */, +    @BackpressureSupport(BackpressureKind.PASS_THROUGH), +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    public final Flowable<T> doFinally(Action onFinally) {, +        ObjectHelper.requireNonNull(onFinally, "onFinally is null");, +        return RxJavaPlugins.onAssembly(new FlowableDoFinally<T>(this, onFinally));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Flowable.java, +     * Calls the specified action after this Flowable signals onError or onCompleted or gets cancelled by, +     * the downstream., +     * <p>In case of a race between a terminal event and a cancellation, the provided {@code onFinally} action, +     * is executed at once per subscription., +     * <p>Note that the {@code onFinally} action is shared between subscriptions and as such, +     * should be thread-safe., +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator doesn't interfere with backpressure which is determined by the source {@code Publisher}'s backpressure, +     *  behavior.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code doFinally} does not operate by default on a particular {@link Scheduler}.</dd>, +     *  <td><b>Operator-fusion:</b></dt>, +     *  <dd>This operator supports normal and conditional Subscribers as well as boundary-limited, +     *  synchronous or asynchronous queue-fusion.</dd>, +     * </dl>, +     * @param onFinally the action called when this Flowable terminates or gets cancelled, +     * @return the new Flowable instance, +     * @since 2.0.1 - experimental, +     */, +    @BackpressureSupport(BackpressureKind.PASS_THROUGH), +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    public final Flowable<T> doFinally(Action onFinally) {, +        ObjectHelper.requireNonNull(onFinally, "onFinally is null");, +        return RxJavaPlugins.onAssembly(new FlowableDoFinally<T>(this, onFinally));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoFinally.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators.flowable;, +, +import org.reactivestreams.*;, +, +import io.reactivex.annotations.Experimental;, +import io.reactivex.exceptions.Exceptions;, +import io.reactivex.functions.Action;, +import io.reactivex.internal.fuseable.*;, +import io.reactivex.internal.subscriptions.*;, +import io.reactivex.plugins.RxJavaPlugins;, +, +/**, + * Execute an action after an onError, onComplete or a cancel event., + *, + * @param <T> the value type, + * @since 2.0.1 - experimental, + */, +@Experimental, +public final class FlowableDoFinally<T> extends AbstractFlowableWithUpstream<T, T> {, +, +    final Action onFinally;, +, +    public FlowableDoFinally(Publisher<T> source, Action onFinally) {, +        super(source);, +        this.onFinally = onFinally;, +    }]