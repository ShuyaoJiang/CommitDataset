[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java, +                long r = requested.get();, +                long e = 0L;, +                boolean continueNextSource = false;, +, +                                continueNextSource = true;, +                                break;, +                                continueNextSource = true;, +                    requested.addAndGet(-e);, +                }, +, +                if (continueNextSource) {, +                    continue;, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java, +                long r = requested.get();, +                long e = 0L;, +                boolean continueNextSource = false;, +, +                                continueNextSource = true;, +                                break;, +                                continueNextSource = true;, +                    requested.addAndGet(-e);, +                }, +, +                if (continueNextSource) {, +                    continue;, +++ b/src/main/java/io/reactivex/internal/subscribers/InnerQueuedSubscriber.java, +                    QueueDrainHelper.request(s, prefetch);, +            QueueDrainHelper.request(s, prefetch);, +        if (fusionMode != QueueSubscription.SYNC) {, +    }, +        if (fusionMode != QueueSubscription.SYNC) {, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java, +                long r = requested.get();, +                long e = 0L;, +                boolean continueNextSource = false;, +, +                                continueNextSource = true;, +                                break;, +                                continueNextSource = true;, +                    requested.addAndGet(-e);, +                }, +, +                if (continueNextSource) {, +                    continue;, +++ b/src/main/java/io/reactivex/internal/subscribers/InnerQueuedSubscriber.java, +                    QueueDrainHelper.request(s, prefetch);, +            QueueDrainHelper.request(s, prefetch);, +        if (fusionMode != QueueSubscription.SYNC) {, +    }, +        if (fusionMode != QueueSubscription.SYNC) {, +    }, +++ b/src/test/java/io/reactivex/TestHelper.java, +import io.reactivex.internal.functions.ObjectHelper;, +        Throwable ex = list.get(index);, +        if (!clazz.isInstance(ex)) {, +            AssertionError err = new AssertionError(clazz + " expected but got " + list.get(index));, +            err.initCause(list.get(index));, +            throw err;, +        Throwable ex = list.get(index);, +        if (!clazz.isInstance(ex)) {, +            AssertionError err = new AssertionError("Type " + clazz + " expected but got " + ex);, +            err.initCause(ex);, +            throw err;, +        }, +        if (!ObjectHelper.equals(message, ex.getMessage())) {, +            AssertionError err = new AssertionError("Message " + message + " expected but got " + ex.getMessage());, +            err.initCause(ex);, +            throw err;, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java, +                long r = requested.get();, +                long e = 0L;, +                boolean continueNextSource = false;, +, +                                continueNextSource = true;, +                                break;, +                                continueNextSource = true;, +                    requested.addAndGet(-e);, +                }, +, +                if (continueNextSource) {, +                    continue;, +++ b/src/main/java/io/reactivex/internal/subscribers/InnerQueuedSubscriber.java, +                    QueueDrainHelper.request(s, prefetch);, +            QueueDrainHelper.request(s, prefetch);, +        if (fusionMode != QueueSubscription.SYNC) {, +    }, +        if (fusionMode != QueueSubscription.SYNC) {, +    }, +++ b/src/test/java/io/reactivex/TestHelper.java, +import io.reactivex.internal.functions.ObjectHelper;, +        Throwable ex = list.get(index);, +        if (!clazz.isInstance(ex)) {, +            AssertionError err = new AssertionError(clazz + " expected but got " + list.get(index));, +            err.initCause(list.get(index));, +            throw err;, +        Throwable ex = list.get(index);, +        if (!clazz.isInstance(ex)) {, +            AssertionError err = new AssertionError("Type " + clazz + " expected but got " + ex);]