[+++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +                handleScalarSynchronousObservable((ScalarSynchronousObservable)t);, +        private void handleScalarSynchronousObservable(ScalarSynchronousObservable<? extends T> t) {, +        private void handleScalarSynchronousObservableWithoutRequestLimits(ScalarSynchronousObservable<? extends T> t) {, +            T value = t.get();, +        private void handleScalarSynchronousObservableWithRequestLimits(ScalarSynchronousObservable<? extends T> t) {, +                        actual.onNext(t.get());, +                        MergeProducer.REQUESTED.decrementAndGet(mergeProducer);, +                scalarValueQueue.onNext(t.get());, +                    MergeProducer.REQUESTED.getAndAdd(mergeProducer, -emittedWhileDraining);, +                                MergeProducer.REQUESTED.decrementAndGet(producer);, +            MergeProducer.REQUESTED.getAndAdd(producer, -emitted);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +                handleScalarSynchronousObservable((ScalarSynchronousObservable)t);, +        private void handleScalarSynchronousObservable(ScalarSynchronousObservable<? extends T> t) {, +        private void handleScalarSynchronousObservableWithoutRequestLimits(ScalarSynchronousObservable<? extends T> t) {, +            T value = t.get();, +        private void handleScalarSynchronousObservableWithRequestLimits(ScalarSynchronousObservable<? extends T> t) {, +                        actual.onNext(t.get());, +                        MergeProducer.REQUESTED.decrementAndGet(mergeProducer);, +                scalarValueQueue.onNext(t.get());, +                    MergeProducer.REQUESTED.getAndAdd(mergeProducer, -emittedWhileDraining);, +                                MergeProducer.REQUESTED.decrementAndGet(producer);, +            MergeProducer.REQUESTED.getAndAdd(producer, -emitted);, +++ b/rxjava-core/src/main/java/rx/internal/util/RxRingBuffer.java, +            return new SpscArrayQueue<Object>(SIZE);, +            return new SpmcArrayQueue<Object>(SIZE);, +    private RxRingBuffer(Queue<Object> queue, int size) {, +            Queue<Object> q = queue;, +        this(new SynchronizedQueue<Object>(SIZE), SIZE);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +                handleScalarSynchronousObservable((ScalarSynchronousObservable)t);, +        private void handleScalarSynchronousObservable(ScalarSynchronousObservable<? extends T> t) {, +        private void handleScalarSynchronousObservableWithoutRequestLimits(ScalarSynchronousObservable<? extends T> t) {, +            T value = t.get();, +        private void handleScalarSynchronousObservableWithRequestLimits(ScalarSynchronousObservable<? extends T> t) {, +                        actual.onNext(t.get());, +                        MergeProducer.REQUESTED.decrementAndGet(mergeProducer);, +                scalarValueQueue.onNext(t.get());, +                    MergeProducer.REQUESTED.getAndAdd(mergeProducer, -emittedWhileDraining);, +                                MergeProducer.REQUESTED.decrementAndGet(producer);, +            MergeProducer.REQUESTED.getAndAdd(producer, -emitted);, +++ b/rxjava-core/src/main/java/rx/internal/util/RxRingBuffer.java, +            return new SpscArrayQueue<Object>(SIZE);, +            return new SpmcArrayQueue<Object>(SIZE);, +    private RxRingBuffer(Queue<Object> queue, int size) {, +            Queue<Object> q = queue;, +        this(new SynchronizedQueue<Object>(SIZE), SIZE);, +++ b/rxjava-core/src/main/java/rx/internal/util/SubscriptionRandomList.java, +        T[] ss=null;, +            ss = subscriptions.toArray(ss);, +        for (T t : ss) {, +            action.call(t);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +                handleScalarSynchronousObservable((ScalarSynchronousObservable)t);, +        private void handleScalarSynchronousObservable(ScalarSynchronousObservable<? extends T> t) {, +        private void handleScalarSynchronousObservableWithoutRequestLimits(ScalarSynchronousObservable<? extends T> t) {, +            T value = t.get();, +        private void handleScalarSynchronousObservableWithRequestLimits(ScalarSynchronousObservable<? extends T> t) {, +                        actual.onNext(t.get());, +                        MergeProducer.REQUESTED.decrementAndGet(mergeProducer);, +                scalarValueQueue.onNext(t.get());, +                    MergeProducer.REQUESTED.getAndAdd(mergeProducer, -emittedWhileDraining);, +                                MergeProducer.REQUESTED.decrementAndGet(producer);, +            MergeProducer.REQUESTED.getAndAdd(producer, -emitted);, +++ b/rxjava-core/src/main/java/rx/internal/util/RxRingBuffer.java, +            return new SpscArrayQueue<Object>(SIZE);, +            return new SpmcArrayQueue<Object>(SIZE);, +    private RxRingBuffer(Queue<Object> queue, int size) {, +            Queue<Object> q = queue;, +        this(new SynchronizedQueue<Object>(SIZE), SIZE);, +++ b/rxjava-core/src/main/java/rx/internal/util/SubscriptionRandomList.java, +        T[] ss=null;, +            ss = subscriptions.toArray(ss);, +        for (T t : ss) {, +            action.call(t);, +++ b/rxjava-core/src/test/java/rx/internal/util/IndexedRingBufferTest.java, +        final ArrayList<Integer> list = new ArrayList<Integer>();, +        assertEquals(Integer.valueOf(5000), list.get(0));, +        assertEquals(Integer.valueOf(9999), list.get(4999));, +        assertEquals(Integer.valueOf(0), list.get(5000));, +        assertEquals(Integer.valueOf(4999), list.get(9999));, +    private <T> Func1<T, Boolean> accumulate(final ArrayList<T> list) {, +        return new Func1<T, Boolean>() {, +            public Boolean call(T t1) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +                handleScalarSynchronousObservable((ScalarSynchronousObservable)t);, +        private void handleScalarSynchronousObservable(ScalarSynchronousObservable<? extends T> t) {, +        private void handleScalarSynchronousObservableWithoutRequestLimits(ScalarSynchronousObservable<? extends T> t) {, +            T value = t.get();, +        private void handleScalarSynchronousObservableWithRequestLimits(ScalarSynchronousObservable<? extends T> t) {, +                        actual.onNext(t.get());, +                        MergeProducer.REQUESTED.decrementAndGet(mergeProducer);, +                scalarValueQueue.onNext(t.get());, +                    MergeProducer.REQUESTED.getAndAdd(mergeProducer, -emittedWhileDraining);, +                                MergeProducer.REQUESTED.decrementAndGet(producer);, +            MergeProducer.REQUESTED.getAndAdd(producer, -emitted);, +++ b/rxjava-core/src/main/java/rx/internal/util/RxRingBuffer.java, +            return new SpscArrayQueue<Object>(SIZE);, +            return new SpmcArrayQueue<Object>(SIZE);]