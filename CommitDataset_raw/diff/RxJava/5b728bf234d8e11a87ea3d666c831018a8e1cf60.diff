[+++ b/rxjava-core/src/main/java/rx/Observable.java, +        return create(new OperatorDelayWithSelector<T, U, V>(this, subscriptionDelay, itemDelay));, +        return create(new OperatorDelayWithSelector<T, Object, U>(this, itemDelay));, +        return create(new OperatorDelay<T>(this, delay, unit, Schedulers.computation()));, +        return create(new OperatorDelay<T>(this, delay, unit, scheduler));, +        return create(new OperatorDelaySubscription<T>(this, delay, unit, scheduler));, +        return create(OperationWindow.window(this, closingSelector));, +        return create(OperationWindow.window(this, count));, +        return create(OperationWindow.window(this, count, skip));, +        return create(OperationWindow.window(this, timespan, timeshift, unit));, +        return create(OperationWindow.window(this, timespan, timeshift, unit, scheduler));, +        return create(OperationWindow.window(this, timespan, unit));, +        return create(OperationWindow.window(this, timespan, unit, count));, +        return create(OperationWindow.window(this, timespan, unit, count, scheduler));, +        return create(OperationWindow.window(this, timespan, unit, scheduler));, +        return create(OperationWindow.window(this, windowOpenings, closingSelector));, +        return create(OperationWindow.window(this, boundary));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return create(new OperatorDelayWithSelector<T, U, V>(this, subscriptionDelay, itemDelay));, +        return create(new OperatorDelayWithSelector<T, Object, U>(this, itemDelay));, +        return create(new OperatorDelay<T>(this, delay, unit, Schedulers.computation()));, +        return create(new OperatorDelay<T>(this, delay, unit, scheduler));, +        return create(new OperatorDelaySubscription<T>(this, delay, unit, scheduler));, +        return create(OperationWindow.window(this, closingSelector));, +        return create(OperationWindow.window(this, count));, +        return create(OperationWindow.window(this, count, skip));, +        return create(OperationWindow.window(this, timespan, timeshift, unit));, +        return create(OperationWindow.window(this, timespan, timeshift, unit, scheduler));, +        return create(OperationWindow.window(this, timespan, unit));, +        return create(OperationWindow.window(this, timespan, unit, count));, +        return create(OperationWindow.window(this, timespan, unit, count, scheduler));, +        return create(OperationWindow.window(this, timespan, unit, scheduler));, +        return create(OperationWindow.window(this, windowOpenings, closingSelector));, +        return create(OperationWindow.window(this, boundary));, +++ b/rxjava-core/src/main/java/rx/operators/BufferUntilSubscriber.java, +        return new BufferUntilSubscriber<T>(new AtomicReference<Observer<? super T>>(new BufferedObserver<T>()));, +    private final AtomicReference<Observer<? super T>> observerRef;, +    private BufferUntilSubscriber(final AtomicReference<Observer<? super T>> observerRef) {, +        super(new OnSubscribe<T>() {, +            public void call(Subscriber<? super T> s) {, +                BufferedObserver<T> buffered = (BufferedObserver<T>) observerRef.get();, +                Object o = null;, +                    emit(s, o);, +                observerRef.set(new PassThruObserver<T>(s, buffered.buffer, observerRef));, +        });, +        this.observerRef = observerRef;, +        observerRef.get().onCompleted();, +        observerRef.get().onError(e);, +        observerRef.get().onNext(t);, +            Object o = null;, +                emit(this, o);, +            observerRef.set(actual);, +            buffer.add(COMPLETE_SENTINEL);, +            buffer.add(new ErrorSentinel(e));, +            if (t == null) {, +                buffer.add(NULL_SENTINEL);, +            } else {, +                buffer.add(t);, +            }, +, +    private final static <T> void emit(Observer<T> s, Object v) {, +        if (v instanceof Sentinel) {, +            if (v == NULL_SENTINEL) {, +                s.onNext(null);, +            } else if (v == COMPLETE_SENTINEL) {, +                s.onCompleted();, +            } else if (v instanceof ErrorSentinel) {, +                s.onError(((ErrorSentinel) v).e);, +            }, +        } else {, +            s.onNext((T) v);, +        }, +    }, +, +    private static class Sentinel {, +, +    }, +, +    private static Sentinel NULL_SENTINEL = new Sentinel();, +    private static Sentinel COMPLETE_SENTINEL = new Sentinel();, +, +    private static class ErrorSentinel extends Sentinel {, +        final Throwable e;, +, +        ErrorSentinel(Throwable e) {, +            this.e = e;, +        }, +    }, +, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return create(new OperatorDelayWithSelector<T, U, V>(this, subscriptionDelay, itemDelay));, +        return create(new OperatorDelayWithSelector<T, Object, U>(this, itemDelay));, +        return create(new OperatorDelay<T>(this, delay, unit, Schedulers.computation()));, +        return create(new OperatorDelay<T>(this, delay, unit, scheduler));, +        return create(new OperatorDelaySubscription<T>(this, delay, unit, scheduler));, +        return create(OperationWindow.window(this, closingSelector));, +        return create(OperationWindow.window(this, count));, +        return create(OperationWindow.window(this, count, skip));, +        return create(OperationWindow.window(this, timespan, timeshift, unit));, +        return create(OperationWindow.window(this, timespan, timeshift, unit, scheduler));]