[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  val fourYears = 4000.millis, +  val neverUsedDummyMedal = Medal(3333, "?", "?", "?", "?", "?"), +  def fourYearsEmpty: Observable[Medal] = {, +    // Observable.interval(fourYears).take(1).map(i => neverUsedDummyMedal).filter(m => false), +    Observable.empty, +  }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  val fourYears = 4000.millis, +  val neverUsedDummyMedal = Medal(3333, "?", "?", "?", "?", "?"), +  def fourYearsEmpty: Observable[Medal] = {, +    // Observable.interval(fourYears).take(1).map(i => neverUsedDummyMedal).filter(m => false), +    Observable.empty, +  }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +@Ignore // Since this doesn't do automatic testing, don't increase build time unnecessarily, +    val b1 = (first zip second) map (p => p._1 == p._2) forall (b => b), +    val equality = (a: Any, b: Any) => a == b, +    val b2 = (first zip second) map (p => equality(p._1, p._2)) forall (b => b), +, +    assertTrue(b1.toBlockingObservable.single), +    assertTrue(b2.toBlockingObservable.single), +    val b1 = booleans.forall(_ == true) // without `== true`, b1 is assigned the forall function, +  @Ignore // TODO something's bad here, +      numbers.take(1) // <- TODO very unexpected, +      //numbers, +    waitFor(firstMedalOfEachCountry), +  // blocks until obs has completed, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  val fourYears = 4000.millis, +  val neverUsedDummyMedal = Medal(3333, "?", "?", "?", "?", "?"), +  def fourYearsEmpty: Observable[Medal] = {, +    // Observable.interval(fourYears).take(1).map(i => neverUsedDummyMedal).filter(m => false), +    Observable.empty, +  }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +@Ignore // Since this doesn't do automatic testing, don't increase build time unnecessarily, +    val b1 = (first zip second) map (p => p._1 == p._2) forall (b => b), +    val equality = (a: Any, b: Any) => a == b, +    val b2 = (first zip second) map (p => equality(p._1, p._2)) forall (b => b), +, +    assertTrue(b1.toBlockingObservable.single), +    assertTrue(b2.toBlockingObservable.single), +    val b1 = booleans.forall(_ == true) // without `== true`, b1 is assigned the forall function, +  @Ignore // TODO something's bad here, +      numbers.take(1) // <- TODO very unexpected, +      //numbers, +    waitFor(firstMedalOfEachCountry), +  // blocks until obs has completed, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  val fourYears = 4000.millis, +  val neverUsedDummyMedal = Medal(3333, "?", "?", "?", "?", "?"), +  def fourYearsEmpty: Observable[Medal] = {, +    // Observable.interval(fourYears).take(1).map(i => neverUsedDummyMedal).filter(m => false), +    Observable.empty, +  }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +@Ignore // Since this doesn't do automatic testing, don't increase build time unnecessarily, +    val b1 = (first zip second) map (p => p._1 == p._2) forall (b => b), +    val equality = (a: Any, b: Any) => a == b, +    val b2 = (first zip second) map (p => equality(p._1, p._2)) forall (b => b), +, +    assertTrue(b1.toBlockingObservable.single), +    assertTrue(b2.toBlockingObservable.single), +    val b1 = booleans.forall(_ == true) // without `== true`, b1 is assigned the forall function, +  @Ignore // TODO something's bad here, +      numbers.take(1) // <- TODO very unexpected, +      //numbers, +    waitFor(firstMedalOfEachCountry), +  // blocks until obs has completed, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +                onNotification.call(Notification.createOnCompleted());, +                onNotification.call(Notification.createOnError(e));, +                onNotification.call(Notification.createOnNext(v));, +     * Modifies an Observable so that it invokes an action when it calls {@code onCompleted} or {@code onError} <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/doOnCompleted.png">, +     * <p>, +     * This differs from {@code finallyDo} in that this happens BEFORE onCompleted/onError are emitted., +     * , +     * @param onTerminate, +     *            the action to invoke when the source Observable calls {@code onCompleted} or {@code onError}, +     * @return the source Observable with the side-effecting behavior applied, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#wiki-dooncompleted">RxJava Wiki: doOnCompleted()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229804.aspx">MSDN: Observable.Do</a>, +     */, +    public final Observable<T> doOnTerminate(final Action0 onTerminate) {, +        Observer<T> observer = new Observer<T>() {, +            @Override, +            public final void onCompleted() {, +                onTerminate.call();, +            }, +, +            @Override, +            public final void onError(Throwable e) {, +                onTerminate.call();, +            }, +, +            @Override]