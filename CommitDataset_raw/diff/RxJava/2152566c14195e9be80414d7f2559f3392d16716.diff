[+++ b/src/main/java/io/reactivex/internal/operators/OperatorFilter.java, +import io.reactivex.internal.subscribers.ConditionalSubscriber;, +    static final class FilterSubscriber<T> implements ConditionalSubscriber<T> {, +            if (!onNextIf(t)) {, +                subscription.request(1);, +            }, +        }, +        , +        @Override, +        public boolean onNextIf(T t) {, +                return true;, +            return b;, +        , +++ b/src/main/java/io/reactivex/internal/operators/OperatorFilter.java, +import io.reactivex.internal.subscribers.ConditionalSubscriber;, +    static final class FilterSubscriber<T> implements ConditionalSubscriber<T> {, +            if (!onNextIf(t)) {, +                subscription.request(1);, +            }, +        }, +        , +        @Override, +        public boolean onNextIf(T t) {, +                return true;, +            return b;, +        , +++ b/src/main/java/io/reactivex/internal/operators/PublisherArraySource.java, +import io.reactivex.internal.subscribers.ConditionalSubscriber;, +        if (s instanceof ConditionalSubscriber) {, +            ConditionalSubscriber<? super T> cs = (ConditionalSubscriber<? super T>) s;, +            s.onSubscribe(new ConditionalArraySourceSubscription<>(array, cs));, +        } else {, +    }, +    , +        , +    , +    static final class ConditionalArraySourceSubscription<T> extends AtomicLong implements Subscription {, +        /** */, +        private static final long serialVersionUID = -225561973532207332L;, +        , +        final T[] array;, +        final ConditionalSubscriber<? super T> subscriber;, +        , +        int index;, +        volatile boolean cancelled;, +        , +        public ConditionalArraySourceSubscription(T[] array, ConditionalSubscriber<? super T> subscriber) {, +            this.array = array;, +            this.subscriber = subscriber;, +        }, +        , +        @Override, +        public void request(long n) {, +            if (n <= 0) {, +                RxJavaPlugins.onError(new IllegalArgumentException("n > 0 required but it was " + n));, +                return;, +            }, +            if (BackpressureHelper.add(this, n) == 0L) {, +                long r = n;, +                final ConditionalSubscriber<? super T> s = subscriber;, +                for (;;) {, +                    int i = index;, +                    T[] a = array;, +                    int len = a.length;, +                    if (i + r >= len) {, +                        if (cancelled) {, +                            return;, +                        }, +                        for (int j = i; j < len; j++) {, +                            s.onNext(a[j]);, +                            if (cancelled) {, +                                return;, +                            }, +                        }, +                        s.onComplete();, +                        return;, +                    }, +                    long e = 0;, +                    if (cancelled) {, +                        return;, +                    }, +                    while (r != 0 && i < len) {, +                        boolean b = s.onNextIf(a[i]);, +                        if (cancelled) {, +                            return;, +                        }, +                        if (++i == len) {, +                            s.onComplete();, +                            return;, +                        }, +                        if (b) {, +                            r--;, +                            e--;, +                        }, +                    }, +                    index = i;, +                    r = addAndGet(e);, +                    if (r == 0L) {, +                        return;, +                    }]