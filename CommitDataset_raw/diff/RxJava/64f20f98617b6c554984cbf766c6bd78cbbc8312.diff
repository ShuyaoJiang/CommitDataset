[+++ b/rxjava-core/src/main/java/rx/Notification.java, +    private static final Notification<Void> ON_COMPLETED = new Notification<Void>(Kind.OnCompleted, null, null);, +, +    @SuppressWarnings("unchecked"), +        return (Notification<T>) ON_COMPLETED;, +    @SuppressWarnings("unchecked"), +        return (Notification<T>) ON_COMPLETED;, +++ b/rxjava-core/src/main/java/rx/Notification.java, +    private static final Notification<Void> ON_COMPLETED = new Notification<Void>(Kind.OnCompleted, null, null);, +, +    @SuppressWarnings("unchecked"), +        return (Notification<T>) ON_COMPLETED;, +    @SuppressWarnings("unchecked"), +        return (Notification<T>) ON_COMPLETED;, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * <em>Note:</em> Use {@link #create(OnSubscribeFunc)} to create an Observable, instead of this, +     * @param onSubscribe, +     *            {@link OnSubscribeFunc} to be executed when {@link #subscribe(Subscriber)} is called, +     * Returns an Observable that will execute the specified function when an {@link Subscriber} subscribes to it., +     * invoke the Observer's {@link Subscriber#onNext onNext}, {@link Subscriber#onError onError}, and {@link Subscriber#onCompleted onCompleted} methods appropriately., +     * A well-formed Observable must invoke either the Observer's {@code onCompleted} method, +     * @param func, +     *            a function that accepts an {@code Observer<T>}, invokes its {@code onNext}, {@code onError}, and {@code onCompleted} methods as appropriate, and returns a {@link Subscription} that, +     *            allows the Observer to cancel the subscription, +     * @return an Observable that, when an {@link Subscriber} subscribes to it, will execute the, +     * observs is determined by the factory function., +     * <p>, +     * Note: the entire iterable sequence is immediately emitted each time an {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned, it is not possible, +     * to unsubscribe from the sequence before it completes., +     * <p>, +     * Note: the item is immediately emitted each time an {@link Observer} subscribes. Since this, +     * occurs before the {@link Subscription} is returned, it is not possible to unsubscribe from, +     * the sequence before it completes., +     * <p>, +     * Note: the items will be immediately emitted each time an {@link Observer} subscribes. Since, +     * this occurs before the {@link Subscription} is returned, it is not possible to unsubscribe, +     * from the sequence before it completes., +     * <p>, +     * Note: the items will be immediately emitted each time an {@link Observer} subscribes. Since, +     * this occurs before the {@link Subscription} is returned, it is not possible to unsubscribe, +     * from the sequence before it completes., +     * <p>, +     * Note: the items will be immediately emitted each time an {@link Observer} subscribes. Since, +     * this occurs before the {@link Subscription} is returned, it is not possible to unsubscribe, +     * from the sequence before it completes., +     * <p>, +     * Note: the items will be immediately emitted each time an {@link Observer} subscribes. Since, +     * this occurs before the {@link Subscription} is returned, it is not possible to unsubscribe, +     * from the sequence before it completes., +     * <p>, +     * Note: the items will be immediately emitted each time an {@link Observer} subscribes. Since, +     * this occurs before the {@link Subscription} is returned, it is not possible to unsubscribe, +     * from the sequence before it completes., +     * <p>, +     * Note: the items will be immediately emitted each time an {@link Observer} subscribes. Since, +     * this occurs before the {@link Subscription} is returned, it is not possible to unsubscribe, +     * from the sequence before it completes., +     * <p>, +     * Note: the items will be immediately emitted each time an {@link Observer} subscribes. Since, +     * this occurs before the {@link Subscription} is returned, it is not possible to unsubscribe, +     * from the sequence before it completes., +     * <p>, +     * Note: the items will be immediately emitted each time an {@link Observer} subscribes. Since, +     * this occurs before the {@link Subscription} is returned, it is not possible to unsubscribe, +     * from the sequence before it completes., +     * <p>, +     * <em>Note:</em> the entire array is immediately emitted each time an {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned, it is not possible, +     * to unsubscribe from the sequence before it completes., +     * <p>, +     * <em>Note:</em> the entire array is immediately emitted each time an {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned, it is not, +     * possible to unsubscribe from the sequence before it completes., +     * subscribe/unsubscribe behavior of all the {@link Observer}s., +     * happens when {@code subscribe} is called the first time on the Observable returned by {@code cache()}., +     * <em>Note:</em> You sacrifice the ability to unsubscribe from the origin when you use the {@code cache()} Observer so be careful not to use this Observer on Observables that emit an]