[+++ b/rxjava-contrib/rxjava-computation-expressions/src/main/java/rx/Statement.java, +import rx.operators.OperationConditionals;, +public class Statement {, +, +        return Observable.create(OperationConditionals.switchCase(caseSelector, mapOfCases, defaultCase));, +    public static <T> Observable<T> doWhile(Observable<T> source, Func0<Boolean> postCondition) {, +        return Observable.create(OperationConditionals.doWhile(source, postCondition));, +    public static <T> Observable<T> whileDo(Observable<T> source, Func0<Boolean> preCondition) {, +        return Observable.create(OperationConditionals.whileDo(source, preCondition));, +        return Observable.create(OperationConditionals.ifThen(condition, then, orElse));, +++ b/rxjava-contrib/rxjava-computation-expressions/src/main/java/rx/Statement.java, +import rx.operators.OperationConditionals;, +public class Statement {, +, +        return Observable.create(OperationConditionals.switchCase(caseSelector, mapOfCases, defaultCase));, +    public static <T> Observable<T> doWhile(Observable<T> source, Func0<Boolean> postCondition) {, +        return Observable.create(OperationConditionals.doWhile(source, postCondition));, +    public static <T> Observable<T> whileDo(Observable<T> source, Func0<Boolean> preCondition) {, +        return Observable.create(OperationConditionals.whileDo(source, preCondition));, +        return Observable.create(OperationConditionals.ifThen(condition, then, orElse));, +++ b/rxjava-contrib/rxjava-computation-expressions/src/main/java/rx/operators/OperationConditionals.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.Map;, +, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Func0;, +import rx.subscriptions.MultipleAssignmentSubscription;, +import rx.subscriptions.SerialSubscription;, +import rx.subscriptions.Subscriptions;, +, +/**, + * Implementation of conditional-based operations such as Case, If, DoWhile and While., + */, +public final class OperationConditionals {, +    /** Utility class. */, +    private OperationConditionals() {, +        throw new IllegalStateException("No instances!");, +    }, +, +    /**, +     * Return a subscription function that subscribes to an observable sequence, +     * chosen from a map of observables via a selector function or to the, +     * default observable., +     * , +     * @param <K>, +     *            the case key type, +     * @param <R>, +     *            the result value type, +     * @param caseSelector, +     *            the function that produces a case key when an Observer subscribes, +     * @param mapOfCases, +     *            a map that maps a case key to an observable sequence, +     * @param defaultCase, +     *            the default observable if the {@code mapOfCases} doesn't contain a value for, +     *            the key returned by the {@case caseSelector}, +     * @return a subscription function, +     */, +    public static <K, R> OnSubscribeFunc<R> switchCase(, +            Func0<? extends K> caseSelector,, +            Map<? super K, ? extends Observable<? extends R>> mapOfCases,, +            Observable<? extends R> defaultCase) {, +        return new SwitchCase<K, R>(caseSelector, mapOfCases, defaultCase);, +    }, +, +    /**, +     * Return a subscription function that subscribes to either the, +     * then or orElse Observables depending on a condition function., +     * , +     * @param <R>, +     *            the result value type, +     * @param condition, +     *            the condition to decide which Observables to subscribe to, +     * @param then, +     *            the Observable sequence to subscribe to if {@code condition} is {@code true}, +     * @param orElse, +     *            the Observable sequence to subscribe to if {@code condition} is {@code false}, +     * @return a subscription function, +     */, +    public static <R> OnSubscribeFunc<R> ifThen(]