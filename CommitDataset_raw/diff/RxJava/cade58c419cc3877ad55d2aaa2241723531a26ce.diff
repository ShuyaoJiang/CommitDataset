[+++ b/src/main/java/rx/internal/operators/OperatorConcat.java, +        @SuppressWarnings("unused"), +        private volatile int once = 0;, +        @SuppressWarnings("rawtypes"), +        private final static AtomicIntegerFieldUpdater<ConcatInnerSubscriber> ONCE_UPDATER = AtomicIntegerFieldUpdater.newUpdater(ConcatInnerSubscriber.class, "once");, +            if (ONCE_UPDATER.compareAndSet(this, 0, 1)) {, +        }, +            if (ONCE_UPDATER.compareAndSet(this, 0, 1)) {, +        }, +++ b/src/main/java/rx/internal/operators/OperatorConcat.java, +        @SuppressWarnings("unused"), +        private volatile int once = 0;, +        @SuppressWarnings("rawtypes"), +        private final static AtomicIntegerFieldUpdater<ConcatInnerSubscriber> ONCE_UPDATER = AtomicIntegerFieldUpdater.newUpdater(ConcatInnerSubscriber.class, "once");, +            if (ONCE_UPDATER.compareAndSet(this, 0, 1)) {, +        }, +            if (ONCE_UPDATER.compareAndSet(this, 0, 1)) {, +        }, +++ b/src/test/java/rx/internal/operators/OperatorConcatTest.java, +    , +    // https://github.com/ReactiveX/RxJava/issues/1818, +    @Test, +    public void testConcatWithNonCompliantSourceDoubleOnComplete() {, +        Observable<String> o = Observable.create(new OnSubscribe<String>() {, +, +            @Override, +            public void call(Subscriber<? super String> s) {, +                s.onNext("hello");, +                s.onCompleted();, +                s.onCompleted();, +            }, +            , +        });, +        , +        TestSubscriber<String> ts = new TestSubscriber<String>();, +        Observable.concat(o, o).subscribe(ts);, +        ts.awaitTerminalEvent(500, TimeUnit.MILLISECONDS);, +        ts.assertTerminalEvent();, +        ts.assertNoErrors();, +        ts.assertReceivedOnNext(Arrays.asList("hello", "hello"));, +    }]