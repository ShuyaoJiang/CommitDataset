[+++ b/src/main/java/rx/Observable.java, +    /** Lazy initialized Holder for an empty observable which just emits onCompleted to any subscriber. */, +    private static final class EmptyHolder {, +        final static Observable<Object> INSTANCE = create(new OnSubscribe<Object>() {, +            public void call(Subscriber<? super Object> subscriber) {, +                subscriber.onCompleted();, +    }, +        return (Observable<T>) EmptyHolder.INSTANCE;, +     * Returns an Observable that emits only the first {@code num} items emitted by the source Observable., +     * {@link Observer#onNext onNext} function a maximum of {@code num} times before invoking, +     * @param num, +     * @return an Observable that emits only the first {@code num} items emitted by the source Observable, or, +     *         all of the items from the source Observable if that Observable emits fewer than {@code num} items, +    public final Observable<T> limit(int num) {, +        return take(num);, +     * Returns an Observable that skips the first {@code num} items emitted by the source Observable and emits, +     * @param num, +     *         {@code num} items that the source Observable emits, +    public final Observable<T> skip(int num) {, +        return lift(new OperatorSkip<T>(num));, +     * Returns an Observable that emits only the first {@code num} items emitted by the source Observable., +     * {@link Observer#onNext onNext} function a maximum of {@code num} times before invoking, +     * @param num, +     * @return an Observable that emits only the first {@code num} items emitted by the source Observable, or, +     *         all of the items from the source Observable if that Observable emits fewer than {@code num} items, +    public final Observable<T> take(final int num) {, +        return lift(new OperatorTake<T>(num));, +     * Returns an Observable that emits only the last {@code count} items emitted by the source Observable., +     *            the number of items to emit from the end of the sequence of items emitted by the source, +     * @return an Observable that emits only the last {@code count} items emitted by the source Observable, +     * Returns an Observable that emits a single List containing the last {@code count} elements emitted by the, +     * source Observable., +     *            the number of items to emit in the list, +     * @return an Observable that emits a single list containing the last {@code count} elements emitted by the, +++ b/src/main/java/rx/Observable.java, +    /** Lazy initialized Holder for an empty observable which just emits onCompleted to any subscriber. */, +    private static final class EmptyHolder {, +        final static Observable<Object> INSTANCE = create(new OnSubscribe<Object>() {, +            public void call(Subscriber<? super Object> subscriber) {, +                subscriber.onCompleted();, +    }, +        return (Observable<T>) EmptyHolder.INSTANCE;, +     * Returns an Observable that emits only the first {@code num} items emitted by the source Observable., +     * {@link Observer#onNext onNext} function a maximum of {@code num} times before invoking, +     * @param num, +     * @return an Observable that emits only the first {@code num} items emitted by the source Observable, or, +     *         all of the items from the source Observable if that Observable emits fewer than {@code num} items, +    public final Observable<T> limit(int num) {, +        return take(num);, +     * Returns an Observable that skips the first {@code num} items emitted by the source Observable and emits, +     * @param num, +     *         {@code num} items that the source Observable emits, +    public final Observable<T> skip(int num) {, +        return lift(new OperatorSkip<T>(num));, +     * Returns an Observable that emits only the first {@code num} items emitted by the source Observable., +     * {@link Observer#onNext onNext} function a maximum of {@code num} times before invoking, +     * @param num, +     * @return an Observable that emits only the first {@code num} items emitted by the source Observable, or, +     *         all of the items from the source Observable if that Observable emits fewer than {@code num} items, +    public final Observable<T> take(final int num) {, +        return lift(new OperatorTake<T>(num));, +     * Returns an Observable that emits only the last {@code count} items emitted by the source Observable., +     *            the number of items to emit from the end of the sequence of items emitted by the source, +     * @return an Observable that emits only the last {@code count} items emitted by the source Observable, +     * Returns an Observable that emits a single List containing the last {@code count} elements emitted by the, +     * source Observable., +     *            the number of items to emit in the list, +     * @return an Observable that emits a single list containing the last {@code count} elements emitted by the, +++ b/src/main/java/rx/internal/operators/OperatorTakeLast.java, + * Returns an Observable that emits the last <code>count</code> items emitted by the source Observable., +            throw new IndexOutOfBoundsException("count could not be negative");]