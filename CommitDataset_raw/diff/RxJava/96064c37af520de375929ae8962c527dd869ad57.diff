[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationSingle;, +     * If the Observable completes after emitting a single item, return an, +     * Observable containing that item. If it emits more than one item or no, +     * item, throw an IllegalArgumentException., +     * , +     * @return an Observable containing the single item emitted by the source, +     *         Observable that matches the predicate., +     * @throws IllegalArgumentException, +     *             if the source emits more than one item or no item, +     */, +    public Observable<T> single() {, +        return create(OperationSingle.<T> single(this));, +    }, +, +    /**, +     * If the Observable completes after emitting a single item that matches a, +     * predicate, return an Observable containing that item. If it emits more, +     * than one such item or no item, throw an IllegalArgumentException., +     * , +     * @param predicate, +     *            a predicate function to evaluate items emitted by the source, +     *            Observable, +     * @return an Observable containing the single item emitted by the source, +     *         Observable that matches the predicate., +     * @throws IllegalArgumentException, +     *             if the source emits more than one item or no item matching, +     *             the predicate, +     */, +    public Observable<T> single(Func1<? super T, Boolean> predicate) {, +        return filter(predicate).single();, +    }, +, +    /**, +     * If the Observable completes after emitting a single item, return an, +     * Observable containing that item. If it's empty, return an Observable, +     * containing the defaultValue. If it emits more than one item, throw an, +     * IllegalArgumentException., +     * , +     * @param defaultValue, +     *            a default value to return if the Observable emits no item, +     * @return an Observable containing the single item emitted by the source, +     *         Observable, or an Observable containing the defaultValue if no, +     *         item., +     * @throws IllegalArgumentException, +     *             if the source emits more than one item, +     */, +    public Observable<T> singleOrDefault(T defaultValue) {, +        return create(OperationSingle.<T> singleOrDefault(this, defaultValue));, +    }, +, +    /**, +     * If the Observable completes after emitting a single item that matches a, +     * predicate, return an Observable containing that item. If it emits no such, +     * item, return an Observable containing the defaultValue. If it emits more, +     * than one such item, throw an IllegalArgumentException., +     * , +     * @param defaultValue, +     *            a default value to return if the {@link Observable} emits no, +     *            matching items, +     * @param predicate, +     *            a predicate function to evaluate items emitted by the, +     *            Observable, +     * @return an Observable containing the single item emitted by the source, +     *         Observable that matches the predicate, or an Observable, +     *         containing the defaultValue if no item matches the predicate, +     * @throws IllegalArgumentException, +     *             if the source emits more than one item matching the predicate, +     */, +    public Observable<T> singleOrDefault(T defaultValue, Func1<? super T, Boolean> predicate) {, +        return filter(predicate).singleOrDefault(defaultValue);, +    }, +, +    /**, +        return take(1).single();, +        return takeFirst(predicate).single();, +        return take(1).singleOrDefault(defaultValue);, +    public Observable<T> firstOrDefault(T defaultValue, Func1<? super T, Boolean> predicate) {, +        return takeFirst(predicate).singleOrDefault(defaultValue);, +        return filter(predicate).take(1);, +        return takeLast(1).single();, +    }, +, +    /**, +     * Returns an Observable that emits only the last item emitted by the source, +     * Observable that satisfies a given condition, or an, +     * IllegalArgumentException if no such items are emitted., +     * , +     * @param predicate, +     *            the condition any source emitted item has to satisfy, +     * @return an Observable that emits only the last item satisfying the given, +     *         condition from the source, or an IllegalArgumentException if no, +     *         such items are emitted., +     * @throws IllegalArgumentException, +     *             if no such itmes are emmited, +     */, +    public Observable<T> last(Func1<? super T, Boolean> predicate) {, +        return filter(predicate).takeLast(1).single();, +    }, +]