[+++ b/CHANGES.md, +### Version 0.20.0-RC1 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.20.0-RC1%22)) ###, +, +, +Version 0.20.0-RC1 is a preview release that adds backpressure support to RxJava as per issue [#1000](https://github.com/Netflix/RxJava/issues/1000). It has been done in a way that is mostly additive and most existing code will not be affected by these additions. A section below on "Breaking Changes" will discuss use cases that do break and how to deal with them., +, +This release has been tested successfully in Netflix production canaries, but that does not exercise all use cases or operators, nor does it leverage the newly added backpressure functionality (though the backpressure code paths are used)., +, +, +#### Outstanding Work, +, +- The `zip` operator has not yet been upgraded to support backpressure. The work is almost done and it will be included in the next release., +- Not all operators have yet been reviewed for whether they need to be changed in any way. , +- Temporal operators (like `buffer`, `window`, `sample`, etc) need to be modified to disable backpressure upstream (using `request(Long.MAX_VALUE)`) and a decision made about how downstream backpressure requests will be supported., +- Ensure all code works on Android. New data structures rely on `sun.misc.Unsafe` but are conditionally used only when it is available. We need to ensure those conditions are working and the alternative implementations are adequate. The default buffer size of 1024 also needs to be reviewed for whether it is a correct default for all systems, or needs to be modified by environment (such as smaller for Android)., +- Ensure use cases needing backpressure all work., +, +#### Signature Changes, +, +A new type `Producer` has been added:, +, +```java, +public interface Producer {, +    public void request(long n);, +}, +```, +, +The `Subscriber` type now has these methods added:, +, +```java, +public abstract class Subscriber<T> implements Observer<T>, Subscription {, +	public void onStart();, +	public final void request(long n);, +	public final void setProducer(Producer producer);, +	protected Producer onSetProducer(Producer producer);, +}, +```, +, +, +#### Examples, +, +, +This trivial example shows requesting values one at a time:, +, +```java, +Observable.from(1, 2, 3, 4).subscribe(new Subscriber<Integer>() {, +, +    @Override, +    public void onStart() {, +        request(1);, +    }, +, +    @Override, +    public void onCompleted() {, +    }, +, +    @Override, +    public void onError(Throwable e) {, +    }, +, +    @Override, +    public void onNext(Integer t) {, +        request(1);, +    }, +, +});, +```, +, +The [OnSubscribeFromIterable](https://github.com/Netflix/RxJava/blob/master/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java) operator shows how an `Iterable` is consumed with backpressure., +, +Some hi-lights (modified for simplicity rather than performance and completeness):, +, +```java, +public final class OnSubscribeFromIterable<T> implements OnSubscribe<T> {, +, +    @Override, +    public void call(final Subscriber<? super T> o) {, +        final Iterator<? extends T> it = is.iterator();, +		// instead of emitting directly to the Subscriber, it emits a Producer, +        o.setProducer(new IterableProducer<T>(o, it));, +    }, +	, +	private static final class IterableProducer<T> implements Producer {, +	, +        public void request(long n) {, +            int _c = requested.getAndAdd(n);, +            if (_c == 0) {, +                while (it.hasNext()) {, +                    if (o.isUnsubscribed()) {, +                        return;, +                    }, +                    T t = it.next();, +                    o.onNext(t);, +                    if (requested.decrementAndGet() == 0) {, +                        // we're done emitting the number requested so return, +                        return;, +                    }, +                }, +, +                o.onCompleted();]