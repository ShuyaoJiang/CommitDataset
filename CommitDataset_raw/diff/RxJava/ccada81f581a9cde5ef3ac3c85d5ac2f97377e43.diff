[+++ b/src/main/java/rx/internal/operators/NotificationLite.java, +     * Indicates whether or not the lite notification represents a wrapped {@code null} {@code onNext} event., +     * @param n the lite notification, +     * @return {@code true} if {@code n} represents a wrapped {@code null} {@code onNext} event, {@code false} otherwise, +     */, +    public boolean isNull(Object n) {, +        return n == ON_NEXT_NULL_SENTINEL;, +    }, +, +    /**, +     * Indicates whether or not the lite notification represents an {@code onNext} event., +     * @param n the lite notification, +     * @return {@code true} if {@code n} represents an {@code onNext} event, {@code false} otherwise, +     */, +    public boolean isNext(Object n) {, +        return n != null && !isError(n) && !isCompleted(n);, +    }, +    /**, +++ b/src/main/java/rx/internal/operators/NotificationLite.java, +     * Indicates whether or not the lite notification represents a wrapped {@code null} {@code onNext} event., +     * @param n the lite notification, +     * @return {@code true} if {@code n} represents a wrapped {@code null} {@code onNext} event, {@code false} otherwise, +     */, +    public boolean isNull(Object n) {, +        return n == ON_NEXT_NULL_SENTINEL;, +    }, +, +    /**, +     * Indicates whether or not the lite notification represents an {@code onNext} event., +     * @param n the lite notification, +     * @return {@code true} if {@code n} represents an {@code onNext} event, {@code false} otherwise, +     */, +    public boolean isNext(Object n) {, +        return n != null && !isError(n) && !isCompleted(n);, +    }, +    /**, +++ b/src/main/java/rx/internal/operators/OperatorPublish.java, +        private long emittedSinceRequest = 0;, +                emittedSinceRequest++;, +            emittedSinceRequest--;, +        public synchronized long requestFromSubscriber(Subscriber<? super T> subscriber, Long request) {, +            AtomicLong r = ss.get(subscriber);, +                ss.put(subscriber, new AtomicLong(request));, +                if (r.get() != Long.MAX_VALUE) {, +                    if (request == Long.MAX_VALUE) {, +                        r.set(Long.MAX_VALUE);, +                    } else {, +                        r.addAndGet(request.longValue());, +            return resetAfterSubscriberUpdate();, +            ss.remove(subscriber);, +            resetAfterSubscriberUpdate();, +        private long resetAfterSubscriberUpdate() {, +            subscribers = new Subscriber[ss.size()];, +            for (Subscriber<? super T> s : ss.keySet()) {, +                subscribers[i++] = s;, +            }, +, +            for (AtomicLong l : ss.values()) {, +                // decrement all we have emitted since last request, +                long c = l.addAndGet(-emittedSinceRequest);, +            emittedSinceRequest = 0;, +            return outstandingRequests;, +        public void requestFromChildSubscriber(Subscriber<? super T> subscriber, Long request) {, +                        boolean shouldEmit = state.canEmitWithDecrement();, +                        Object o = originSubscriber.buffer.poll();, +                            state.incrementOutstandingAfterFailedEmit();, +                        if (notifier.isCompleted(o)) {, +                            for (Subscriber<? super T> s : state.getSubscribers()) {, +                                notifier.accept(s, o);, +                            }, +, +                        } else {, +                            for (Subscriber<? super T> s : state.getSubscribers()) {, +                                notifier.accept(s, o);, +                            }, +++ b/src/main/java/rx/internal/operators/NotificationLite.java, +     * Indicates whether or not the lite notification represents a wrapped {@code null} {@code onNext} event., +     * @param n the lite notification, +     * @return {@code true} if {@code n} represents a wrapped {@code null} {@code onNext} event, {@code false} otherwise, +     */, +    public boolean isNull(Object n) {, +        return n == ON_NEXT_NULL_SENTINEL;, +    }, +, +    /**, +     * Indicates whether or not the lite notification represents an {@code onNext} event., +     * @param n the lite notification, +     * @return {@code true} if {@code n} represents an {@code onNext} event, {@code false} otherwise, +     */, +    public boolean isNext(Object n) {, +        return n != null && !isError(n) && !isCompleted(n);, +    }, +    /**, +++ b/src/main/java/rx/internal/operators/OperatorPublish.java, +        private long emittedSinceRequest = 0;, +                emittedSinceRequest++;, +            emittedSinceRequest--;, +        public synchronized long requestFromSubscriber(Subscriber<? super T> subscriber, Long request) {, +            AtomicLong r = ss.get(subscriber);, +                ss.put(subscriber, new AtomicLong(request));]