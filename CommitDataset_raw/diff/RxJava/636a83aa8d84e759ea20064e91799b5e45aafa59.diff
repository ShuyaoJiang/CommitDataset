[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @warn description may be out-of-date, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @warn description may be out-of-date, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, + * Provides a mechanism for receiving push-based notifications., +     * Registers an unsubscribe callback., +     * @warn param "s" undescribed, +     * Indicates whether this Subscriber has unsubscribed from its Observable., +     * @return {@code true} if this Subscriber has unsubscribed from its Observable, {@code false} otherwise, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @warn description may be out-of-date, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, + * Provides a mechanism for receiving push-based notifications., +     * Registers an unsubscribe callback., +     * @warn param "s" undescribed, +     * Indicates whether this Subscriber has unsubscribed from its Observable., +     * @return {@code true} if this Subscriber has unsubscribed from its Observable, {@code false} otherwise, +++ b/rxjava-core/src/main/java/rx/internal/util/SubscriptionList.java, +    /**, +     * @warn javadoc missing, +     * @param subscriptions, +     */, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @warn description may be out-of-date, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, + * Provides a mechanism for receiving push-based notifications., +     * Registers an unsubscribe callback., +     * @warn param "s" undescribed, +     * Indicates whether this Subscriber has unsubscribed from its Observable., +     * @return {@code true} if this Subscriber has unsubscribed from its Observable, {@code false} otherwise, +++ b/rxjava-core/src/main/java/rx/internal/util/SubscriptionList.java, +    /**, +     * @warn javadoc missing, +     * @param subscriptions, +     */, +++ b/rxjava-core/src/perf/java/rx/PerfBaseline.java, +package rx;, +, +import java.util.Iterator;, +import java.util.concurrent.TimeUnit;, +, +import org.openjdk.jmh.annotations.BenchmarkMode;, +import org.openjdk.jmh.annotations.GenerateMicroBenchmark;, +import org.openjdk.jmh.annotations.Mode;, +import org.openjdk.jmh.annotations.OutputTimeUnit;, +import org.openjdk.jmh.annotations.Param;, +import org.openjdk.jmh.annotations.Scope;, +import org.openjdk.jmh.annotations.State;, +, +import rx.jmh.InputWithIncrementingInteger;, +, +@BenchmarkMode(Mode.Throughput), +@OutputTimeUnit(TimeUnit.SECONDS), +public class PerfBaseline {, +, +    @State(Scope.Thread), +    public static class Input extends InputWithIncrementingInteger {, +, +        @Param({ "1", "1000", "1000000" }), +        public int size;, +, +        @Override, +        public int getSize() {, +            return size;, +        }, +, +    }, +, +    @GenerateMicroBenchmark, +    public void observableConsumption(Input input) throws InterruptedException {, +        input.firehose.subscribe(input.observer);, +    }, +, +    @GenerateMicroBenchmark, +    public void observableViaRange(Input input) throws InterruptedException {, +        input.observable.subscribe(input.observer);, +    }, +, +    @GenerateMicroBenchmark, +    public void iterableViaForLoopConsumption(Input input) throws InterruptedException {, +        for (int i : input.iterable) {, +            input.observer.onNext(i);, +        }, +    }, +, +    @GenerateMicroBenchmark, +    public void iterableViaHasNextConsumption(Input input) throws InterruptedException {, +        Iterator<Integer> iterator = input.iterable.iterator();, +        while (iterator.hasNext()) {, +            input.observer.onNext(iterator.next());, +        }, +    }, +}, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @warn description may be out-of-date, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, + * Provides a mechanism for receiving push-based notifications., +     * Registers an unsubscribe callback., +     * @warn param "s" undescribed]