[+++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer up to, +     * a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting, +     * a {@code BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all undelivered, +     * items, and unsubscribing from the source., +     * @return the source Observable modified to buffer items up to the given capacity, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer up to, +     * a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting, +     * a {@code BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all undelivered, +     * items, unsubscribing from the source, and notifying the producer with {@code onOverflow}., +     * @return the source Observable modified to buffer items up to the given capacity, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer up to, +     * a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting, +     * a {@code BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all undelivered, +     * items, and unsubscribing from the source., +     * @return the source Observable modified to buffer items up to the given capacity, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer up to, +     * a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting, +     * a {@code BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all undelivered, +     * items, unsubscribing from the source, and notifying the producer with {@code onOverflow}., +     * @return the source Observable modified to buffer items up to the given capacity, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +++ b/src/main/java/rx/subjects/ReplaySubject.java, +            state.replayObserver(o);, +        public void replayObserver(SubjectObserver<? super T> observer) {, +        public void replayObserver(SubjectObserver<? super T> observer) {, +        void replayObserver(SubjectObserver<? super T> observer);, +++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer up to, +     * a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting, +     * a {@code BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all undelivered, +     * items, and unsubscribing from the source., +     * @return the source Observable modified to buffer items up to the given capacity, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer up to, +     * a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting, +     * a {@code BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all undelivered, +     * items, unsubscribing from the source, and notifying the producer with {@code onOverflow}., +     * @return the source Observable modified to buffer items up to the given capacity, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +++ b/src/main/java/rx/subjects/ReplaySubject.java, +            state.replayObserver(o);, +        public void replayObserver(SubjectObserver<? super T> observer) {, +        public void replayObserver(SubjectObserver<? super T> observer) {, +        void replayObserver(SubjectObserver<? super T> observer);, +++ b/src/test/java/rx/subjects/BehaviorSubjectTest.java, +import org.junit.Test;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.functions.Func1;, +++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer up to, +     * a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting, +     * a {@code BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all undelivered, +     * items, and unsubscribing from the source., +     * @return the source Observable modified to buffer items up to the given capacity, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer up to, +     * a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting, +     * a {@code BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all undelivered, +     * items, unsubscribing from the source, and notifying the producer with {@code onOverflow}., +     * @return the source Observable modified to buffer items up to the given capacity, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +++ b/src/main/java/rx/subjects/ReplaySubject.java, +            state.replayObserver(o);, +        public void replayObserver(SubjectObserver<? super T> observer) {, +        public void replayObserver(SubjectObserver<? super T> observer) {, +        void replayObserver(SubjectObserver<? super T> observer);, +++ b/src/test/java/rx/subjects/BehaviorSubjectTest.java, +import org.junit.Test;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.functions.Func1;, +++ b/src/test/java/rx/subjects/ReplaySubjectBoundedConcurrencyTest.java, +import org.junit.Test;, +import rx.Observable;, +import rx.functions.Action1;, +++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer up to, +     * a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting, +     * a {@code BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all undelivered, +     * items, and unsubscribing from the source., +     * @return the source Observable modified to buffer items up to the given capacity, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer up to, +     * a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting, +     * a {@code BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all undelivered, +     * items, unsubscribing from the source, and notifying the producer with {@code onOverflow}., +     * @return the source Observable modified to buffer items up to the given capacity, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +++ b/src/main/java/rx/subjects/ReplaySubject.java, +            state.replayObserver(o);, +        public void replayObserver(SubjectObserver<? super T> observer) {, +        public void replayObserver(SubjectObserver<? super T> observer) {]