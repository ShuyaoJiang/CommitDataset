[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java, +                            w.onComplete();, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java, +                            w.onComplete();, +, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java, +                            w.onComplete();, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java, +                            w.onComplete();, +, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java, +                            w.onComplete();, +, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableWindowWithTimeTest.java, +, +    @Test, +    public void sizeTimeTimeout() {, +        TestScheduler scheduler = new TestScheduler();, +        PublishProcessor<Integer> ps = PublishProcessor.<Integer>create();, +, +        TestSubscriber<Flowable<Integer>> ts = ps.window(5, TimeUnit.MILLISECONDS, scheduler, 100), +        .test(), +        .assertValueCount(1);, +, +        scheduler.advanceTimeBy(5, TimeUnit.MILLISECONDS);, +, +        ts.assertValueCount(2), +        .assertNoErrors(), +        .assertNotComplete();, +, +        ts.values().get(0).test().assertResult();, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java, +                            w.onComplete();, +, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java, +                            w.onComplete();, +, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableWindowWithTimeTest.java, +, +    @Test, +    public void sizeTimeTimeout() {, +        TestScheduler scheduler = new TestScheduler();, +        PublishProcessor<Integer> ps = PublishProcessor.<Integer>create();, +, +        TestSubscriber<Flowable<Integer>> ts = ps.window(5, TimeUnit.MILLISECONDS, scheduler, 100), +        .test(), +        .assertValueCount(1);, +, +        scheduler.advanceTimeBy(5, TimeUnit.MILLISECONDS);, +, +        ts.assertValueCount(2), +        .assertNoErrors(), +        .assertNotComplete();, +, +        ts.values().get(0).test().assertResult();, +    }, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableWindowWithTimeTest.java, +, +    @Test, +    public void sizeTimeTimeout() {, +        TestScheduler scheduler = new TestScheduler();, +        Subject<Integer> ps = PublishSubject.<Integer>create();, +, +        TestObserver<Observable<Integer>> ts = ps.window(5, TimeUnit.MILLISECONDS, scheduler, 100), +        .test(), +        .assertValueCount(1);, +, +        scheduler.advanceTimeBy(5, TimeUnit.MILLISECONDS);, +, +        ts.assertValueCount(2), +        .assertNoErrors(), +        .assertNotComplete();, +, +        ts.values().get(0).test().assertResult();, +    }]