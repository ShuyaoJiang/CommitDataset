[+++ b/src/main/java/io/reactivex/Completable.java, +    public final Completable retryWhen(Function<? super Flowable<Throwable>, ? extends Publisher<Object>> handler) {, +++ b/src/main/java/io/reactivex/Completable.java, +    public final Completable retryWhen(Function<? super Flowable<Throwable>, ? extends Publisher<Object>> handler) {, +++ b/src/main/java/io/reactivex/Flowable.java, +            final Function<? super Flowable<Throwable>, ? extends Publisher<?>> handler) {, +++ b/src/main/java/io/reactivex/Completable.java, +    public final Completable retryWhen(Function<? super Flowable<Throwable>, ? extends Publisher<Object>> handler) {, +++ b/src/main/java/io/reactivex/Flowable.java, +            final Function<? super Flowable<Throwable>, ? extends Publisher<?>> handler) {, +++ b/src/main/java/io/reactivex/Maybe.java, +            final Function<? super Flowable<Throwable>, ? extends Publisher<?>> handler) {, +++ b/src/main/java/io/reactivex/Completable.java, +    public final Completable retryWhen(Function<? super Flowable<Throwable>, ? extends Publisher<Object>> handler) {, +++ b/src/main/java/io/reactivex/Flowable.java, +            final Function<? super Flowable<Throwable>, ? extends Publisher<?>> handler) {, +++ b/src/main/java/io/reactivex/Maybe.java, +            final Function<? super Flowable<Throwable>, ? extends Publisher<?>> handler) {, +++ b/src/main/java/io/reactivex/Observable.java, +            final Function<? super Observable<Throwable>, ? extends ObservableSource<?>> handler) {, +++ b/src/main/java/io/reactivex/Completable.java, +    public final Completable retryWhen(Function<? super Flowable<Throwable>, ? extends Publisher<Object>> handler) {, +++ b/src/main/java/io/reactivex/Flowable.java, +            final Function<? super Flowable<Throwable>, ? extends Publisher<?>> handler) {, +++ b/src/main/java/io/reactivex/Maybe.java, +            final Function<? super Flowable<Throwable>, ? extends Publisher<?>> handler) {, +++ b/src/main/java/io/reactivex/Observable.java, +            final Function<? super Observable<Throwable>, ? extends ObservableSource<?>> handler) {, +++ b/src/main/java/io/reactivex/Single.java, +    public final Single<T> retryWhen(Function<? super Flowable<Throwable>, ? extends Publisher<Object>> handler) {, +++ b/src/main/java/io/reactivex/Completable.java, +    public final Completable retryWhen(Function<? super Flowable<Throwable>, ? extends Publisher<Object>> handler) {, +++ b/src/main/java/io/reactivex/Flowable.java, +            final Function<? super Flowable<Throwable>, ? extends Publisher<?>> handler) {, +++ b/src/main/java/io/reactivex/Maybe.java, +            final Function<? super Flowable<Throwable>, ? extends Publisher<?>> handler) {, +++ b/src/main/java/io/reactivex/Observable.java, +            final Function<? super Observable<Throwable>, ? extends ObservableSource<?>> handler) {, +++ b/src/main/java/io/reactivex/Single.java, +    public final Single<T> retryWhen(Function<? super Flowable<Throwable>, ? extends Publisher<Object>> handler) {, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableInternalHelper.java, +        private final Function<? super Observable<Throwable>, ? extends ObservableSource<?>> handler;, +                Function<? super Observable<Throwable>, ? extends ObservableSource<?>> handler) {, +    public static <T> Function<Observable<Notification<Object>>, ObservableSource<?>> retryWhenHandler(final Function<? super Observable<Throwable>, ? extends ObservableSource<?>> handler) {]