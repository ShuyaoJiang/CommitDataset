[+++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +     * Assert that the TestObserver/TestSubscriber received only items that are in the specified, +     * collection as well, irrespective of the order they were received., +     * <p>, +     * This helps asserting when the order of the values is not guaranteed, i.e., when merging, +     * <p>, +     * To ensure that only the expected items have been received, no more and no less, in any order,, +     * apply {@link #assertValueCount(int)} with {@code expected.size()}., +++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +     * Assert that the TestObserver/TestSubscriber received only items that are in the specified, +     * collection as well, irrespective of the order they were received., +     * <p>, +     * This helps asserting when the order of the values is not guaranteed, i.e., when merging, +     * <p>, +     * To ensure that only the expected items have been received, no more and no less, in any order,, +     * apply {@link #assertValueCount(int)} with {@code expected.size()}., +++ b/src/test/java/io/reactivex/observers/TestObserverTest.java, +, +    @Test, +    public void assertValueSetWiderSet() {, +        Set<Integer> set = new HashSet<Integer>(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7));, +, +        Observable.just(4, 5, 1, 3, 2), +        .test(), +        .assertValueSet(set);, +    }, +, +    @Test, +    public void assertValueSetExact() {, +        Set<Integer> set = new HashSet<Integer>(Arrays.asList(1, 2, 3, 4, 5));, +, +        Observable.just(4, 5, 1, 3, 2), +        .test(), +        .assertValueSet(set), +        .assertValueCount(set.size());, +    }, +, +    @Test, +    public void assertValueSetMissing() {, +        Set<Integer> set = new HashSet<Integer>(Arrays.asList(0, 1, 2, 4, 5, 6, 7));, +, +        try {, +            Observable.range(1, 5), +            .test(), +            .assertValueSet(set);, +, +            throw new RuntimeException("Should have failed");, +        } catch (AssertionError ex) {, +            assertTrue(ex.getMessage(), ex.getMessage().contains("Value not in the expected collection: " + 3));, +        }, +    }, +++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +     * Assert that the TestObserver/TestSubscriber received only items that are in the specified, +     * collection as well, irrespective of the order they were received., +     * <p>, +     * This helps asserting when the order of the values is not guaranteed, i.e., when merging, +     * <p>, +     * To ensure that only the expected items have been received, no more and no less, in any order,, +     * apply {@link #assertValueCount(int)} with {@code expected.size()}., +++ b/src/test/java/io/reactivex/observers/TestObserverTest.java, +, +    @Test, +    public void assertValueSetWiderSet() {, +        Set<Integer> set = new HashSet<Integer>(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7));, +, +        Observable.just(4, 5, 1, 3, 2), +        .test(), +        .assertValueSet(set);, +    }, +, +    @Test, +    public void assertValueSetExact() {, +        Set<Integer> set = new HashSet<Integer>(Arrays.asList(1, 2, 3, 4, 5));, +, +        Observable.just(4, 5, 1, 3, 2), +        .test(), +        .assertValueSet(set), +        .assertValueCount(set.size());, +    }, +, +    @Test, +    public void assertValueSetMissing() {, +        Set<Integer> set = new HashSet<Integer>(Arrays.asList(0, 1, 2, 4, 5, 6, 7));, +, +        try {, +            Observable.range(1, 5), +            .test(), +            .assertValueSet(set);, +, +            throw new RuntimeException("Should have failed");, +        } catch (AssertionError ex) {, +            assertTrue(ex.getMessage(), ex.getMessage().contains("Value not in the expected collection: " + 3));, +        }, +    }, +++ b/src/test/java/io/reactivex/subscribers/TestSubscriberTest.java, +, +    @Test, +    public void assertValueSetWiderSet() {, +        Set<Integer> set = new HashSet<Integer>(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7));, +]