[+++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +import java.util.concurrent.atomic.AtomicInteger;, +import rx.subscriptions.Subscriptions;, +        @SuppressWarnings("rawtypes"), +        static final AtomicIntegerFieldUpdater<GroupBySubscriber> WIP_FOR_UNSUBSCRIBE_UPDATER = AtomicIntegerFieldUpdater.newUpdater(GroupBySubscriber.class, "wipForUnsubscribe");, +        volatile int wipForUnsubscribe = 1;, +, +            child.add(Subscriptions.create(new Action0() {, +, +                @Override, +                public void call() {, +                    if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(self) == 0) {, +                        self.unsubscribe();, +                    }, +                }, +, +            }));, +                if (groups.isEmpty()) {, +                try {, +                } finally {, +                    // We have not chained the subscribers, so need to call it explicitly., +                    unsubscribe();, +                }, +                if (group != null) {, +                }, +            GroupState<K, T> putIfAbsent;, +            for (;;) {, +                int wip = wipForUnsubscribe;, +                if (wip <= 0) {, +                    return null;, +                }, +                if (WIP_FOR_UNSUBSCRIBE_UPDATER.compareAndSet(this, wip, wip + 1)) {, +                    putIfAbsent = groups.putIfAbsent(key, groupState);, +                    break;, +                }, +            }, +                if (!removed.buffer.isEmpty()) {, +            if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0) {, +                unsubscribe();, +            }, +            if (groups.isEmpty() && (terminated == 1 || child.isUnsubscribed())) {, +                    } else {, +        }, +++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +import java.util.concurrent.atomic.AtomicInteger;, +import rx.subscriptions.Subscriptions;, +        @SuppressWarnings("rawtypes"), +        static final AtomicIntegerFieldUpdater<GroupBySubscriber> WIP_FOR_UNSUBSCRIBE_UPDATER = AtomicIntegerFieldUpdater.newUpdater(GroupBySubscriber.class, "wipForUnsubscribe");, +        volatile int wipForUnsubscribe = 1;, +, +            child.add(Subscriptions.create(new Action0() {, +, +                @Override, +                public void call() {, +                    if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(self) == 0) {, +                        self.unsubscribe();, +                    }, +                }, +, +            }));, +                if (groups.isEmpty()) {, +                try {, +                } finally {, +                    // We have not chained the subscribers, so need to call it explicitly., +                    unsubscribe();, +                }, +                if (group != null) {, +                }, +            GroupState<K, T> putIfAbsent;, +            for (;;) {, +                int wip = wipForUnsubscribe;, +                if (wip <= 0) {, +                    return null;, +                }, +                if (WIP_FOR_UNSUBSCRIBE_UPDATER.compareAndSet(this, wip, wip + 1)) {, +                    putIfAbsent = groups.putIfAbsent(key, groupState);, +                    break;, +                }, +            }, +                if (!removed.buffer.isEmpty()) {, +            if (WIP_FOR_UNSUBSCRIBE_UPDATER.decrementAndGet(this) == 0) {, +                unsubscribe();, +            }, +            if (groups.isEmpty() && (terminated == 1 || child.isUnsubscribed())) {, +                    } else {, +        }, +++ b/src/test/java/rx/internal/operators/OperatorGroupByTest.java, +import rx.Subscription;, +, +    @Test, +    public void testGroupByUnsubscribe() {, +        final Subscription s = mock(Subscription.class);, +        Observable<Integer> o = Observable.create(, +                new OnSubscribe<Integer>() {, +                    @Override, +                    public void call(Subscriber<? super Integer> subscriber) {, +                        subscriber.add(s);, +                    }, +                }, +        );]