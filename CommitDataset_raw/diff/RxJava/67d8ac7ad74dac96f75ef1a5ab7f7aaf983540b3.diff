[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.BufferClosing;, +import rx.util.BufferOpening;, +     * NOTE: Use {@link #create(OnSubscribeFunc)} to create an Observable instead of this constructor unless you, +, +     * @deprecated Being renamed to {@link #switchOnNext}, +    @Deprecated, +     * Given an Observable that emits Observables, creates a single Observable that, +     * @param sequenceOfSequences, +     *            the source Observable that emits Observables, +    public static <T> Observable<T> switchOnNext(Observable<? extends Observable<? extends T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo(sequenceOfSequences));, +, +     * emitted and replaced with a new buffer when the Observable produced by the specified {@link Func0} produces a {@link BufferClosing} object. The * {@link Func0} will then, +     *            When this {@link Observable} produces a {@link BufferClosing} object, the associated buffer, +     *         when the current {@link Observable} created with the {@link Func0} argument produces a {@link BufferClosing} object., +    public Observable<List<T>> buffer(Func0<? extends Observable<? extends BufferClosing>> bufferClosingSelector) {, +     * Observable produces a {@link BufferOpening} object. Additionally the {@link Func0} argument, +     * is used to create an Observable which produces {@link BufferClosing} objects. When this, +     *            The {@link Observable} which, when it produces a {@link BufferOpening} object, will cause, +     *            When this {@link Observable} produces a {@link BufferClosing} object, the associated buffer, +    public Observable<List<T>> buffer(Observable<? extends BufferOpening> bufferOpenings, Func1<? super BufferOpening, ? extends Observable<? extends BufferClosing>> bufferClosingSelector) {, +     * @param f, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.BufferClosing;, +import rx.util.BufferOpening;, +     * NOTE: Use {@link #create(OnSubscribeFunc)} to create an Observable instead of this constructor unless you, +, +     * @deprecated Being renamed to {@link #switchOnNext}, +    @Deprecated, +     * Given an Observable that emits Observables, creates a single Observable that, +     * @param sequenceOfSequences, +     *            the source Observable that emits Observables, +    public static <T> Observable<T> switchOnNext(Observable<? extends Observable<? extends T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo(sequenceOfSequences));, +, +     * emitted and replaced with a new buffer when the Observable produced by the specified {@link Func0} produces a {@link BufferClosing} object. The * {@link Func0} will then, +     *            When this {@link Observable} produces a {@link BufferClosing} object, the associated buffer, +     *         when the current {@link Observable} created with the {@link Func0} argument produces a {@link BufferClosing} object., +    public Observable<List<T>> buffer(Func0<? extends Observable<? extends BufferClosing>> bufferClosingSelector) {, +     * Observable produces a {@link BufferOpening} object. Additionally the {@link Func0} argument, +     * is used to create an Observable which produces {@link BufferClosing} objects. When this, +     *            The {@link Observable} which, when it produces a {@link BufferOpening} object, will cause, +     *            When this {@link Observable} produces a {@link BufferClosing} object, the associated buffer, +    public Observable<List<T>> buffer(Observable<? extends BufferOpening> bufferOpenings, Func1<? super BufferOpening, ? extends Observable<? extends BufferClosing>> bufferClosingSelector) {, +     * @param f, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +     * This is similar to {@link Observable#subscribe(Observer)}, but it blocks. Because it blocks it does, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.BufferClosing;, +import rx.util.BufferOpening;, +     * NOTE: Use {@link #create(OnSubscribeFunc)} to create an Observable instead of this constructor unless you, +, +     * @deprecated Being renamed to {@link #switchOnNext}, +    @Deprecated, +     * Given an Observable that emits Observables, creates a single Observable that, +     * @param sequenceOfSequences, +     *            the source Observable that emits Observables, +    public static <T> Observable<T> switchOnNext(Observable<? extends Observable<? extends T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo(sequenceOfSequences));, +, +     * emitted and replaced with a new buffer when the Observable produced by the specified {@link Func0} produces a {@link BufferClosing} object. The * {@link Func0} will then, +     *            When this {@link Observable} produces a {@link BufferClosing} object, the associated buffer, +     *         when the current {@link Observable} created with the {@link Func0} argument produces a {@link BufferClosing} object., +    public Observable<List<T>> buffer(Func0<? extends Observable<? extends BufferClosing>> bufferClosingSelector) {, +     * Observable produces a {@link BufferOpening} object. Additionally the {@link Func0} argument, +     * is used to create an Observable which produces {@link BufferClosing} objects. When this, +     *            The {@link Observable} which, when it produces a {@link BufferOpening} object, will cause, +     *            When this {@link Observable} produces a {@link BufferClosing} object, the associated buffer, +    public Observable<List<T>> buffer(Observable<? extends BufferOpening> bufferOpenings, Func1<? super BufferOpening, ? extends Observable<? extends BufferClosing>> bufferClosingSelector) {, +     * @param f, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +     * This is similar to {@link Observable#subscribe(Observer)}, but it blocks. Because it blocks it does, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.BufferClosing;, +import rx.util.BufferOpening;, +     * NOTE: Use {@link #create(OnSubscribeFunc)} to create an Observable instead of this constructor unless you, +, +     * @deprecated Being renamed to {@link #switchOnNext}, +    @Deprecated, +     * Given an Observable that emits Observables, creates a single Observable that, +     * @param sequenceOfSequences, +     *            the source Observable that emits Observables, +    public static <T> Observable<T> switchOnNext(Observable<? extends Observable<? extends T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo(sequenceOfSequences));, +, +     * emitted and replaced with a new buffer when the Observable produced by the specified {@link Func0} produces a {@link BufferClosing} object. The * {@link Func0} will then, +     *            When this {@link Observable} produces a {@link BufferClosing} object, the associated buffer, +     *         when the current {@link Observable} created with the {@link Func0} argument produces a {@link BufferClosing} object., +    public Observable<List<T>> buffer(Func0<? extends Observable<? extends BufferClosing>> bufferClosingSelector) {, +     * Observable produces a {@link BufferOpening} object. Additionally the {@link Func0} argument, +     * is used to create an Observable which produces {@link BufferClosing} objects. When this, +     *            The {@link Observable} which, when it produces a {@link BufferOpening} object, will cause, +     *            When this {@link Observable} produces a {@link BufferClosing} object, the associated buffer, +    public Observable<List<T>> buffer(Observable<? extends BufferOpening> bufferOpenings, Func1<? super BufferOpening, ? extends Observable<? extends BufferClosing>> bufferClosingSelector) {, +     * @param f, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +     * This is similar to {@link Observable#subscribe(Observer)}, but it blocks. Because it blocks it does, +++ /dev/null]