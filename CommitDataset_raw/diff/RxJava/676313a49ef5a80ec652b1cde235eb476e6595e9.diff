[+++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorBufferWithSize.java, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import rx.Producer;, +        if (count <= 0) {, +            throw new IllegalArgumentException("count must be greater than 0");, +        }, +        if (skip <= 0) {, +            throw new IllegalArgumentException("skip must be greater than 0");, +        }, +, +                @Override, +                public void setProducer(final Producer producer) {, +                    child.setProducer(new Producer() {, +                        @Override, +                        public void request(long n) {, +                            if (n == Long.MAX_VALUE) {, +                                producer.request(Long.MAX_VALUE);, +                            } else {, +                                producer.request(n * count);, +                            }, +                        }, +                    });, +                }, +, +, +            @Override, +            public void setProducer(final Producer producer) {, +                child.setProducer(new Producer() {, +, +                    private final AtomicBoolean firstRequest = new AtomicBoolean(false);, +, +                    @Override, +                    public void request(long n) {, +                        if (n == Long.MAX_VALUE) {, +                            producer.request(Long.MAX_VALUE);, +                        } else {, +                            if (firstRequest.compareAndSet(false, true)) {, +                                // count = 5, skip = 2, n = 3, +                                // * * * * *, +                                //     * * * * *, +                                //         * * * * *, +                                // request = 5 + 2 * ( 3 - 1), +                                producer.request(count + skip * (n - 1));, +                            } else {, +                                // count = 5, skip = 2, n = 3, +                                // (* * *) * *, +                                // (    *) * * * *, +                                //           * * * * *, +                                // request = skip * n, +                                // "()" means the items already emitted before this request, +                                producer.request(skip * n);, +                            }, +                        }, +                    }, +                });, +            }, +, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorBufferWithSize.java, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import rx.Producer;, +        if (count <= 0) {, +            throw new IllegalArgumentException("count must be greater than 0");, +        }, +        if (skip <= 0) {, +            throw new IllegalArgumentException("skip must be greater than 0");, +        }, +, +                @Override, +                public void setProducer(final Producer producer) {, +                    child.setProducer(new Producer() {, +                        @Override, +                        public void request(long n) {, +                            if (n == Long.MAX_VALUE) {, +                                producer.request(Long.MAX_VALUE);, +                            } else {, +                                producer.request(n * count);, +                            }, +                        }, +                    });, +                }, +, +, +            @Override, +            public void setProducer(final Producer producer) {, +                child.setProducer(new Producer() {, +, +                    private final AtomicBoolean firstRequest = new AtomicBoolean(false);, +, +                    @Override, +                    public void request(long n) {, +                        if (n == Long.MAX_VALUE) {, +                            producer.request(Long.MAX_VALUE);, +                        } else {, +                            if (firstRequest.compareAndSet(false, true)) {, +                                // count = 5, skip = 2, n = 3, +                                // * * * * *, +                                //     * * * * *, +                                //         * * * * *]