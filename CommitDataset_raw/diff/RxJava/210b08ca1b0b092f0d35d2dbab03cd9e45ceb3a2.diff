[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Ignores all values in an observable sequence and only calls onCompleted or onError method., +     *, +     * @return An empty observable sequence that only call onCompleted, or onError method., +     *, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229242(v=vs.103).aspx">MSDN: Observable.IgnoreElements</a>, +     */, +    public Observable<T> ignoreElements() {, +        return filter(alwaysFalse());, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Ignores all values in an observable sequence and only calls onCompleted or onError method., +     *, +     * @return An empty observable sequence that only call onCompleted, or onError method., +     *, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229242(v=vs.103).aspx">MSDN: Observable.IgnoreElements</a>, +     */, +    public Observable<T> ignoreElements() {, +        return filter(alwaysFalse());, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/util/functions/Functions.java, +    public static <T> Func1<? super T, Boolean> alwaysFalse() {, +        return AlwaysFalse.INSTANCE;, +    }, +, +    private enum AlwaysFalse implements Func1<Object, Boolean> {, +        INSTANCE;, +, +        @Override, +        public Boolean call(Object o) {, +            return false;, +        }, +    }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Ignores all values in an observable sequence and only calls onCompleted or onError method., +     *, +     * @return An empty observable sequence that only call onCompleted, or onError method., +     *, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229242(v=vs.103).aspx">MSDN: Observable.IgnoreElements</a>, +     */, +    public Observable<T> ignoreElements() {, +        return filter(alwaysFalse());, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/util/functions/Functions.java, +    public static <T> Func1<? super T, Boolean> alwaysFalse() {, +        return AlwaysFalse.INSTANCE;, +    }, +, +    private enum AlwaysFalse implements Func1<Object, Boolean> {, +        INSTANCE;, +, +        @Override, +        public Boolean call(Object o) {, +            return false;, +        }, +    }, +++ b/rxjava-core/src/test/java/rx/ObservableTests.java, +, +    public void testIgnoreElements() {, +        Observable<Integer> observable = Observable.from(1, 2, 3).ignoreElements();, +, +        @SuppressWarnings("unchecked"), +        Observer<Integer> aObserver = mock(Observer.class);, +        observable.subscribe(aObserver);, +        verify(aObserver, never()).onNext(any(Integer.class));, +        verify(aObserver, never()).onError(any(Throwable.class));, +        verify(aObserver, times(1)).onCompleted();, +    }]