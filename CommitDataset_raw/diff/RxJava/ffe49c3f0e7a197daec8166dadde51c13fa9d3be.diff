[+++ b/src/main/java/io/reactivex/observers/TestObserver.java, +import io.reactivex.functions.Predicate;, +     * overload to test against the class of an error instead of an instance of an error, +     * or {@link #assertError(Predicate)} to test with different condition., +     * @see #assertError(Predicate), +     * Asserts that this TestObserver received exactly one onError event for which, +     * the provided predicate returns true., +     * @param errorPredicate, +     *            the predicate that receives the error Throwable, +     *            and should return true for expected errors., +     * @return this, +     */, +    public final TestObserver<T> assertError(Predicate<Throwable> errorPredicate) {, +        int s = errors.size();, +        if (s == 0) {, +            throw fail("No errors");, +        }, +, +        boolean found = false;, +, +        for (Throwable e : errors) {, +            try {, +                if (errorPredicate.test(e)) {, +                    found = true;, +                    break;, +                }, +            } catch (Exception ex) {, +                throw ExceptionHelper.wrapOrThrow(ex);, +            }, +        }, +, +        if (found) {, +            if (s != 1) {, +                throw fail("Error present but other errors as well");, +            }, +        } else {, +            throw fail("Error not present");, +        }, +        return this;, +    }, +, +    /**, +     * @see #assertFailure(Predicate, Object...), +     * Assert that the upstream signalled the specified values in order and then failed, +     * with a Throwable for which the provided predicate returns true., +     * @param errorPredicate, +     *            the predicate that receives the error Throwable, +     *            and should return true for expected errors., +     * @param values the expected values, asserted in order, +     * @return this, +     */, +    public final TestObserver<T> assertFailure(Predicate<Throwable> errorPredicate, T... values) {, +        return assertSubscribed(), +                .assertValues(values), +                .assertError(errorPredicate), +                .assertNotComplete();, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/observers/TestObserver.java, +import io.reactivex.functions.Predicate;, +     * overload to test against the class of an error instead of an instance of an error, +     * or {@link #assertError(Predicate)} to test with different condition., +     * @see #assertError(Predicate), +     * Asserts that this TestObserver received exactly one onError event for which, +     * the provided predicate returns true., +     * @param errorPredicate, +     *            the predicate that receives the error Throwable, +     *            and should return true for expected errors., +     * @return this, +     */, +    public final TestObserver<T> assertError(Predicate<Throwable> errorPredicate) {, +        int s = errors.size();, +        if (s == 0) {, +            throw fail("No errors");, +        }, +, +        boolean found = false;, +, +        for (Throwable e : errors) {, +            try {, +                if (errorPredicate.test(e)) {, +                    found = true;, +                    break;, +                }, +            } catch (Exception ex) {, +                throw ExceptionHelper.wrapOrThrow(ex);, +            }, +        }, +, +        if (found) {, +            if (s != 1) {, +                throw fail("Error present but other errors as well");, +            }, +        } else {, +            throw fail("Error not present");, +        }, +        return this;, +    }, +]