[+++ b/CHANGES.md, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +    // type mismatch; found : rx.Observable[java.lang.Boolean] required: rx.Observable[_ <: scala.Boolean], +    // new Observable[Boolean](asJavaNotification.all(predicate)), +    // it's more fun in Scala:, +    this.map(predicate).foldLeft(true)(_ && _), +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +    // type mismatch; found : rx.Observable[java.lang.Boolean] required: rx.Observable[_ <: scala.Boolean], +    // new Observable[Boolean](asJavaNotification.all(predicate)), +    // it's more fun in Scala:, +    this.map(predicate).foldLeft(true)(_ && _), +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +    // type mismatch; found : rx.Observable[java.lang.Boolean] required: rx.Observable[_ <: scala.Boolean], +    // new Observable[Boolean](asJavaNotification.all(predicate)), +    // it's more fun in Scala:, +    this.map(predicate).foldLeft(true)(_ && _), +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +    // type mismatch; found : rx.Observable[java.lang.Boolean] required: rx.Observable[_ <: scala.Boolean], +    // new Observable[Boolean](asJavaNotification.all(predicate)), +    // it's more fun in Scala:, +    this.map(predicate).foldLeft(true)(_ && _), +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Producer.java, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +    // type mismatch; found : rx.Observable[java.lang.Boolean] required: rx.Observable[_ <: scala.Boolean], +    // new Observable[Boolean](asJavaNotification.all(predicate)), +    // it's more fun in Scala:, +    this.map(predicate).foldLeft(true)(_ && _), +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Producer.java, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +    // type mismatch; found : rx.Observable[java.lang.Boolean] required: rx.Observable[_ <: scala.Boolean], +    // new Observable[Boolean](asJavaNotification.all(predicate)), +    // it's more fun in Scala:, +    this.map(predicate).foldLeft(true)(_ && _), +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Producer.java, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +    // type mismatch; found : rx.Observable[java.lang.Boolean] required: rx.Observable[_ <: scala.Boolean], +    // new Observable[Boolean](asJavaNotification.all(predicate)), +    // it's more fun in Scala:, +    this.map(predicate).foldLeft(true)(_ && _), +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Producer.java, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeRange.java, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC1-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +    // type mismatch; found : rx.Observable[java.lang.Boolean] required: rx.Observable[_ <: scala.Boolean], +    // new Observable[Boolean](asJavaNotification.all(predicate)), +    // it's more fun in Scala:, +    this.map(predicate).foldLeft(true)(_ && _), +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Producer.java, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeRange.java, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorAll.java, +                } else {, +                	// if we drop values we must replace them upstream as downstream won't receive and request more, +                	request(1);, +++ b/CHANGES.md]