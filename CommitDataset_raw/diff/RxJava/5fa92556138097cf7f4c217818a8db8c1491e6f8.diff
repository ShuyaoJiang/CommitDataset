[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   *            the `rx.lang.scala.subjects.Subject` to push source items into, +  def multicast[R >: T](subject: rx.lang.scala.Subject[R]): ConnectableObservable[R] = {, +    val s: rx.subjects.Subject[_ >: T, _<: R] = subject.asJavaSubject, +    new ConnectableObservable[R](asJavaObservable.multicast(s)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   *            the `rx.lang.scala.subjects.Subject` to push source items into, +  def multicast[R >: T](subject: rx.lang.scala.Subject[R]): ConnectableObservable[R] = {, +    val s: rx.subjects.Subject[_ >: T, _<: R] = subject.asJavaSubject, +    new ConnectableObservable[R](asJavaObservable.multicast(s)), +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {]