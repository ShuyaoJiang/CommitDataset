[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def testGroupByThenFlatMap() {, +    val m = Observable(1, 2, 3, 4), +    val g = m.groupBy(i => i % 2), +    val t = g.flatMap((p: (Int, Observable[Int])) => p._2), +    assertEquals(List(1, 2, 3, 4), t.toBlockingObservable.toList)    , +  @Test def testGroupByThenFlatMapByForComprehension() {, +    val m = Observable(1, 2, 3, 4), +    val g = m.groupBy(i => i % 2), +    val t = for ((i, o) <- g; n <- o) yield n, +    assertEquals(List(1, 2, 3, 4), t.toBlockingObservable.toList)    , +  }, +  @Test def testGroupByThenFlatMapByForComprehensionWithTiming() {, +    val m = Observable.interval(100 millis).take(4), +    val g = m.groupBy(i => i % 2), +    val t = for ((i, o) <- g; n <- o) yield n, +    assertEquals(List(0, 1, 2, 3), t.toBlockingObservable.toList)    , +  }, +  @Test def groupByExampleTest() {, +    val medalsByCountry = Olympics.mountainBikeMedals.groupBy(medal => medal.country), +    val firstMedalOfEachCountry =, +      medalsByCountry.flatMap((p: (String, Observable[Olympics.Medal])) => p._2.take(1)), +    firstMedalOfEachCountry.subscribe(medal => {, +      println(s"${medal.country} wins its first medal in ${medal.year}"), +    //waitFor(firstMedalOfEachCountry), +    Thread.sleep(20000), +  }, +  @Ignore  // TODO this test one does not terminate!, +  @Test def groupByExample() {, +    val medalsByCountry = Olympics.mountainBikeMedals.groupBy(medal => medal.country), +    , +    val firstMedalOfEachCountry = , +      for ((country, medals) <- medalsByCountry; firstMedal <- medals.take(1)) yield firstMedal, +      , +    firstMedalOfEachCountry.subscribe(medal => {, +      println(s"${medal.country} wins its first medal in ${medal.year}"), +    }), +    , +    waitFor(firstMedalOfEachCountry)]