[+++ b/rxjava-core/src/main/java/rx/operators/OperationToObservableIterable.java, +import rx.schedulers.ImmediateScheduler;, +        if (scheduler instanceof ImmediateScheduler) {, +            return new ToObservableIterable<T>(list);, +        } else {, +            return new ToObservableIterableScheduled<T>(list, scheduler);, +        }, +        return new ToObservableIterable<T>(list);, +    private static class ToObservableIterableScheduled<T> implements OnSubscribeFunc<T> {, +        public ToObservableIterableScheduled(Iterable<? extends T> list, Scheduler scheduler) {, +, +    private static class ToObservableIterable<T> implements OnSubscribeFunc<T> {, +, +        public ToObservableIterable(Iterable<? extends T> list) {, +            this.iterable = list;, +        }, +, +        final Iterable<? extends T> iterable;, +, +        public Subscription onSubscribe(final Observer<? super T> observer) {, +            try {, +                for (T t : iterable) {, +                    observer.onNext(t);, +                }, +                observer.onCompleted();, +            } catch (Exception e) {, +                observer.onError(e);, +            }, +            return Subscriptions.empty();, +        }, +    }, +++ b/rxjava-core/src/main/java/rx/operators/OperationToObservableIterable.java, +import rx.schedulers.ImmediateScheduler;, +        if (scheduler instanceof ImmediateScheduler) {, +            return new ToObservableIterable<T>(list);, +        } else {, +            return new ToObservableIterableScheduled<T>(list, scheduler);, +        }, +        return new ToObservableIterable<T>(list);, +    private static class ToObservableIterableScheduled<T> implements OnSubscribeFunc<T> {, +        public ToObservableIterableScheduled(Iterable<? extends T> list, Scheduler scheduler) {, +, +    private static class ToObservableIterable<T> implements OnSubscribeFunc<T> {, +, +        public ToObservableIterable(Iterable<? extends T> list) {, +            this.iterable = list;, +        }, +, +        final Iterable<? extends T> iterable;, +, +        public Subscription onSubscribe(final Observer<? super T> observer) {, +            try {, +                for (T t : iterable) {, +                    observer.onNext(t);, +                }, +                observer.onCompleted();, +            } catch (Exception e) {, +                observer.onError(e);, +            }, +            return Subscriptions.empty();, +        }, +    }, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperationToObservableIterable.java, +import rx.schedulers.ImmediateScheduler;, +        if (scheduler instanceof ImmediateScheduler) {, +            return new ToObservableIterable<T>(list);, +        } else {, +            return new ToObservableIterableScheduled<T>(list, scheduler);, +        }, +        return new ToObservableIterable<T>(list);, +    private static class ToObservableIterableScheduled<T> implements OnSubscribeFunc<T> {, +        public ToObservableIterableScheduled(Iterable<? extends T> list, Scheduler scheduler) {, +, +    private static class ToObservableIterable<T> implements OnSubscribeFunc<T> {, +, +        public ToObservableIterable(Iterable<? extends T> list) {, +            this.iterable = list;, +        }, +, +        final Iterable<? extends T> iterable;, +, +        public Subscription onSubscribe(final Observer<? super T> observer) {, +            try {, +                for (T t : iterable) {, +                    observer.onNext(t);, +                }, +                observer.onCompleted();, +            } catch (Exception e) {, +                observer.onError(e);, +            }, +            return Subscriptions.empty();, +        }, +    }, +++ /dev/null, +++ b/rxjava-core/src/test/java/rx/operators/OperationObserveOnTest.java, +import java.util.concurrent.atomic.AtomicInteger;, +import rx.util.functions.Func1;, +    }, +    /**]