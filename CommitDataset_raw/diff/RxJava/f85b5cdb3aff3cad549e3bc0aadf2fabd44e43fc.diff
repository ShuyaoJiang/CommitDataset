[+++ b/src/main/java/rx/Subscriber.java, +        this(null, false);, +        this(op, true);, +    }, +    /**, +     * Construct a subscriber by using the other subscriber for backpressure, +     * and optionally sharing the underlying subscriptions list., +     * <p>To retain the chaining of subscribers, the caller should add the, +     * created instance to the op via {@code add()}., +     * , +     * @param op the other subscriber, +     * @param shareSubscriptions should the subscription list in op shared with this instance?, +     */, +    protected Subscriber(Subscriber<?> op, boolean shareSubscriptions) {, +        this.cs = shareSubscriptions && op != null ? op.cs : new SubscriptionList();, +++ b/src/main/java/rx/Subscriber.java, +        this(null, false);, +        this(op, true);, +    }, +    /**, +     * Construct a subscriber by using the other subscriber for backpressure, +     * and optionally sharing the underlying subscriptions list., +     * <p>To retain the chaining of subscribers, the caller should add the, +     * created instance to the op via {@code add()}., +     * , +     * @param op the other subscriber, +     * @param shareSubscriptions should the subscription list in op shared with this instance?, +     */, +    protected Subscriber(Subscriber<?> op, boolean shareSubscriptions) {, +        this.cs = shareSubscriptions && op != null ? op.cs : new SubscriptionList();, +++ b/src/main/java/rx/internal/operators/OperatorTakeWhile.java, +        Subscriber<T> s = new Subscriber<T>(subscriber, false) {, +        subscriber.add(s);, +        return s;, +++ b/src/main/java/rx/Subscriber.java, +        this(null, false);, +        this(op, true);, +    }, +    /**, +     * Construct a subscriber by using the other subscriber for backpressure, +     * and optionally sharing the underlying subscriptions list., +     * <p>To retain the chaining of subscribers, the caller should add the, +     * created instance to the op via {@code add()}., +     * , +     * @param op the other subscriber, +     * @param shareSubscriptions should the subscription list in op shared with this instance?, +     */, +    protected Subscriber(Subscriber<?> op, boolean shareSubscriptions) {, +        this.cs = shareSubscriptions && op != null ? op.cs : new SubscriptionList();, +++ b/src/main/java/rx/internal/operators/OperatorTakeWhile.java, +        Subscriber<T> s = new Subscriber<T>(subscriber, false) {, +        subscriber.add(s);, +        return s;, +++ b/src/test/java/rx/internal/operators/OperatorTakeWhileTest.java, +import static org.mockito.Mockito.*;, +import java.util.Arrays;, +import org.junit.*;, +, +import rx.*;, +import rx.observers.TestSubscriber;, +import rx.subjects.*;, +    , +    @Test, +    public void testBackpressure() {, +        Observable<Integer> source = Observable.range(1, 1000).takeWhile(new Func1<Integer, Boolean>() {, +            @Override, +            public Boolean call(Integer t1) {, +                return t1 < 100;, +            }, +        });, +        TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {, +            @Override, +            public void onStart() {, +                request(5);, +            }, +        };, +        , +        source.subscribe(ts);, +        , +        ts.assertNoErrors();, +        ts.assertReceivedOnNext(Arrays.asList(1, 2, 3, 4, 5));, +        , +        ts.requestMore(5);, +, +        ts.assertNoErrors();, +        ts.assertReceivedOnNext(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));, +    }, +    , +    @Test, +    public void testNoUnsubscribeDownstream() {, +        Observable<Integer> source = Observable.range(1, 1000).takeWhile(new Func1<Integer, Boolean>() {, +            @Override, +            public Boolean call(Integer t1) {, +                return t1 < 2;, +            }, +        });, +        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();, +        , +        source.unsafeSubscribe(ts);, +        ]