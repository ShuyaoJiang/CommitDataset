[+++ b/build.gradle, +        perf {, +            java {, +                srcDir 'src/perf/java', +                compileClasspath += main.output, +                runtimeClasspath += main.output, +            }, +        }, +    }, +, +    dependencies {, +        perfCompile 'org.openjdk.jmh:jmh-core:0.2', +            plusConfigurations += configurations.perfCompile, +            // TODO not sure what to add it to, +            //scopes.PROVIDED.plus += configurations.perfCompile, +++ b/build.gradle, +        perf {, +            java {, +                srcDir 'src/perf/java', +                compileClasspath += main.output, +                runtimeClasspath += main.output, +            }, +        }, +    }, +, +    dependencies {, +        perfCompile 'org.openjdk.jmh:jmh-core:0.2', +            plusConfigurations += configurations.perfCompile, +            // TODO not sure what to add it to, +            //scopes.PROVIDED.plus += configurations.perfCompile, +++ b/rxjava-core/build.gradle, +apply plugin:'application', +task time(type:JavaExec) {, +    classpath = sourceSets.perf.runtimeClasspath, +    group 'Application', +    description 'Execute the calipser benchmark timing of Rx', +    main 'rx.operators.ObservableBenchmark', +}, +++ b/build.gradle, +        perf {, +            java {, +                srcDir 'src/perf/java', +                compileClasspath += main.output, +                runtimeClasspath += main.output, +            }, +        }, +    }, +, +    dependencies {, +        perfCompile 'org.openjdk.jmh:jmh-core:0.2', +            plusConfigurations += configurations.perfCompile, +            // TODO not sure what to add it to, +            //scopes.PROVIDED.plus += configurations.perfCompile, +++ b/rxjava-core/build.gradle, +apply plugin:'application', +task time(type:JavaExec) {, +    classpath = sourceSets.perf.runtimeClasspath, +    group 'Application', +    description 'Execute the calipser benchmark timing of Rx', +    main 'rx.operators.ObservableBenchmark', +}, +++ b/rxjava-core/src/perf/java/rx/operators/ObservableBenchmark.java, +package rx.operators;, +, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.openjdk.jmh.annotations.GenerateMicroBenchmark;, +import org.openjdk.jmh.runner.Runner;, +import org.openjdk.jmh.runner.RunnerException;, +import org.openjdk.jmh.runner.options.Options;, +import org.openjdk.jmh.runner.options.OptionsBuilder;, +, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Observer;, +import rx.util.functions.Func1;, +, +public class ObservableBenchmark {, +, +    @GenerateMicroBenchmark, +    public void timeBaseline() {, +        observableOfInts.subscribe(newObserver());, +        awaitAllObservers();, +    }, +, +    @GenerateMicroBenchmark, +    public int timeMapIterate() {, +        int x = 0;, +        for (int j = 0; j < intValues.length; j++) {, +            // use hash code to make sure the JIT doesn't optimize too much and remove all of, +            // our code., +            x |= ident.call(intValues[j]).hashCode();, +        }, +        return x;, +    }, +, +    @GenerateMicroBenchmark, +    public void timeMap() {, +        timeOperator(new OperatorMap<Integer, Object>(ident));]