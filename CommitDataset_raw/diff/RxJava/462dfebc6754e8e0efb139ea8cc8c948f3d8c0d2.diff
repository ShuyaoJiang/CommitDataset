[+++ b/src/main/java/rx/observers/SafeSubscriber.java, + * {@code SafeSubscriber} is a wrapper around {@code Subscriber} that ensures that the {@code Subscriber}, + * complies with the Rx contract., + * subscriber, optionally followed by a single success ({@code OnCompleted}) or failure ({@code OnError}), + * message., + * <li>If {@code unsubscribe} is called, calls {@code onCompleted} and forbids any further {@code onNext} calls.</li>, + * <li>When {@code onError} or {@code onCompleted} occur, unsubscribes from the {@code Observable} (if executing asynchronously).</li>, + * {@code SafeSubscriber} will not synchronize {@code onNext} execution. Use {@link SerializedSubscriber} to do, +++ b/src/main/java/rx/observers/SafeSubscriber.java, + * {@code SafeSubscriber} is a wrapper around {@code Subscriber} that ensures that the {@code Subscriber}, + * complies with the Rx contract., + * subscriber, optionally followed by a single success ({@code OnCompleted}) or failure ({@code OnError}), + * message., + * <li>If {@code unsubscribe} is called, calls {@code onCompleted} and forbids any further {@code onNext} calls.</li>, + * <li>When {@code onError} or {@code onCompleted} occur, unsubscribes from the {@code Observable} (if executing asynchronously).</li>, + * {@code SafeSubscriber} will not synchronize {@code onNext} execution. Use {@link SerializedSubscriber} to do, +++ b/src/main/java/rx/observers/TestSubscriber.java, + * A {@code TestSubscriber} is a variety of {@link Subscriber} that you can use for unit testing, to perform, + * assertions, inspect received events, or wrap a mocked {@code Subscriber}., +     * Get the {@link Notification}s representing each time this {@link Subscriber} was notified of sequence, +     * completion via {@link #onCompleted}, as a {@link List}., +     * Get the {@link Throwable}s this {@link Subscriber} was notified of via {@link #onError} as a, +     * {@link List}., +     *, +     * @warn parameter "n" not described, +     * Get the sequence of items observed by this {@link Subscriber}, as an ordered {@link List}., +     * Assert that a particular sequence of items was received by this {@link Subscriber} in order., +     * Blocks until this {@link Subscriber} receives a notification that the {@code Observable} is complete, +     * (either an {@code onCompleted} or {@code onError} notification)., +     * Blocks until this {@link Subscriber} receives a notification that the {@code Observable} is complete, +     * (either an {@code onCompleted} or {@code onError} notification), or until a timeout expires., +     * Blocks until this {@link Subscriber} receives a notification that the {@code Observable} is complete, +     * (either an {@code onCompleted} or {@code onError} notification), or until a timeout expires; if the, +     * Subscriber is interrupted before either of these events take place, this method unsubscribes the, +     * Subscriber from the Observable)., +     * Returns the last thread that was in use when an item or notification was received by this, +     * {@link Subscriber}.]