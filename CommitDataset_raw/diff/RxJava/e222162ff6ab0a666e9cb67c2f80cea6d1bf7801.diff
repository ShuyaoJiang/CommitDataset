[+++ b/src/main/java/io/reactivex/Completable.java, +public abstract class Completable {, +            return new CompletableWrapper(onSubscribe);, +            subscribeActual(s);, +    protected abstract void subscribeActual(CompletableSubscriber s);, +, +++ b/src/main/java/io/reactivex/Completable.java, +public abstract class Completable {, +            return new CompletableWrapper(onSubscribe);, +            subscribeActual(s);, +    protected abstract void subscribeActual(CompletableSubscriber s);, +, +++ b/src/main/java/io/reactivex/Flowable.java, +public abstract class Flowable<T> implements Publisher<T> {, +        return fromPublisher(onSubscribe);, +        return new FlowableWrapper<T>(publisher);, +        return create(new PublisherLift<R, T>(this, lifter));, +            subscribeActual(s);, +    protected abstract void subscribeActual(Subscriber<? super T> s);, +    , +++ b/src/main/java/io/reactivex/Completable.java, +public abstract class Completable {, +            return new CompletableWrapper(onSubscribe);, +            subscribeActual(s);, +    protected abstract void subscribeActual(CompletableSubscriber s);, +, +++ b/src/main/java/io/reactivex/Flowable.java, +public abstract class Flowable<T> implements Publisher<T> {, +        return fromPublisher(onSubscribe);, +        return new FlowableWrapper<T>(publisher);, +        return create(new PublisherLift<R, T>(this, lifter));, +            subscribeActual(s);, +    protected abstract void subscribeActual(Subscriber<? super T> s);, +    , +++ b/src/main/java/io/reactivex/Observable.java, +public abstract class Observable<T> {, +        return new ObservableWrapper<T>(onSubscribe);, +    public final void subscribe(Observer<? super T> observer) {, +        Objects.requireNonNull(observer, "observer is null");, +        , +        // TODO plugin wrappings, +        , +        subscribeActual(observer);, +    protected abstract void subscribeActual(Observer<? super T> observer);, +, +++ b/src/main/java/io/reactivex/Completable.java, +public abstract class Completable {, +            return new CompletableWrapper(onSubscribe);, +            subscribeActual(s);, +    protected abstract void subscribeActual(CompletableSubscriber s);, +, +++ b/src/main/java/io/reactivex/Flowable.java, +public abstract class Flowable<T> implements Publisher<T> {, +        return fromPublisher(onSubscribe);, +        return new FlowableWrapper<T>(publisher);, +        return create(new PublisherLift<R, T>(this, lifter));, +            subscribeActual(s);, +    protected abstract void subscribeActual(Subscriber<? super T> s);, +    , +++ b/src/main/java/io/reactivex/Observable.java, +public abstract class Observable<T> {, +        return new ObservableWrapper<T>(onSubscribe);, +    public final void subscribe(Observer<? super T> observer) {, +        Objects.requireNonNull(observer, "observer is null");, +        , +        // TODO plugin wrappings, +        , +        subscribeActual(observer);, +    protected abstract void subscribeActual(Observer<? super T> observer);, +, +++ b/src/main/java/io/reactivex/Single.java, +public abstract class Single<T> {, +        return new SingleWrapper<T>(onSubscribe);, +                    subscribe(sr);, +        subscribeActual(subscriber);, +    protected abstract void subscribeActual(SingleSubscriber<? super T> subscriber);, +    , +++ b/src/main/java/io/reactivex/Completable.java, +public abstract class Completable {, +            return new CompletableWrapper(onSubscribe);, +            subscribeActual(s);, +    protected abstract void subscribeActual(CompletableSubscriber s);, +, +++ b/src/main/java/io/reactivex/Flowable.java, +public abstract class Flowable<T> implements Publisher<T> {, +        return fromPublisher(onSubscribe);, +        return new FlowableWrapper<T>(publisher);, +        return create(new PublisherLift<R, T>(this, lifter));, +            subscribeActual(s);, +    protected abstract void subscribeActual(Subscriber<? super T> s);, +    , +++ b/src/main/java/io/reactivex/Observable.java, +public abstract class Observable<T> {, +        return new ObservableWrapper<T>(onSubscribe);, +    public final void subscribe(Observer<? super T> observer) {, +        Objects.requireNonNull(observer, "observer is null");, +        , +        // TODO plugin wrappings, +        , +        subscribeActual(observer);]