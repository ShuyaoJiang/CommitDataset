[+++ b/src/main/java/io/reactivex/Observable.java, +    public Observable<T> take(long n) {, +        if (n < 0) {, +            throw new IllegalArgumentException("n >= required but it was " + n);, +        } else, +        if (n == 0) {, +            return empty();, +        }, +        return lift(new OperatorTake<>(n));, +    }, +    , +    public <U> Observable<T> takeUntil(Publisher<U> other) {, +        return lift(new OperatorTakeUntil<>(other));, +    }, +    , +    public Observable<T> takeUntil(Predicate<? super T> predicate) {, +        return lift(new OperatorTakeUntilPredicate<>(predicate));, +    }, +    , +    public Observable<T> takeLast(int n) {, +        if (n < 0) {, +            throw new IllegalArgumentException("n >= required but it was " + n);, +        } else, +        if (n == 0) {, +            return ignoreElements();, +        } else, +        if (n == 1) {, +            return lift(OperatorTakeLastOne.instance());, +        }, +        return lift(new OperatorTakeLast<>(n));, +    }, +    , +    public Observable<T> ignoreElements() {, +        return lift(OperatorIgnoreElements.instance());, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +    public Observable<T> take(long n) {, +        if (n < 0) {, +            throw new IllegalArgumentException("n >= required but it was " + n);, +        } else, +        if (n == 0) {, +            return empty();, +        }, +        return lift(new OperatorTake<>(n));, +    }, +    , +    public <U> Observable<T> takeUntil(Publisher<U> other) {, +        return lift(new OperatorTakeUntil<>(other));, +    }, +    , +    public Observable<T> takeUntil(Predicate<? super T> predicate) {, +        return lift(new OperatorTakeUntilPredicate<>(predicate));, +    }, +    , +    public Observable<T> takeLast(int n) {, +        if (n < 0) {, +            throw new IllegalArgumentException("n >= required but it was " + n);, +        } else, +        if (n == 0) {, +            return ignoreElements();, +        } else, +        if (n == 1) {, +            return lift(OperatorTakeLastOne.instance());, +        }, +        return lift(new OperatorTakeLast<>(n));, +    }, +    , +    public Observable<T> ignoreElements() {, +        return lift(OperatorIgnoreElements.instance());, +    }, +++ b/src/main/java/io/reactivex/Observer.java, +import io.reactivex.plugins.RxJavaPlugins;, +, +            RxJavaPlugins.onError(new IllegalStateException("Subscription already set!"));, +++ b/src/main/java/io/reactivex/Observable.java, +    public Observable<T> take(long n) {, +        if (n < 0) {, +            throw new IllegalArgumentException("n >= required but it was " + n);, +        } else, +        if (n == 0) {, +            return empty();, +        }, +        return lift(new OperatorTake<>(n));, +    }, +    , +    public <U> Observable<T> takeUntil(Publisher<U> other) {, +        return lift(new OperatorTakeUntil<>(other));, +    }, +    , +    public Observable<T> takeUntil(Predicate<? super T> predicate) {, +        return lift(new OperatorTakeUntilPredicate<>(predicate));, +    }, +    , +    public Observable<T> takeLast(int n) {, +        if (n < 0) {, +            throw new IllegalArgumentException("n >= required but it was " + n);, +        } else, +        if (n == 0) {, +            return ignoreElements();, +        } else]