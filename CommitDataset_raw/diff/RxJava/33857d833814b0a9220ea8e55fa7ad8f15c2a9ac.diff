[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationTakeLast;, +     * Returns an Observable that emits the last <code>count</code> items emitted by the source, +     * Observable., +     *, +     * @param items, +     *            the source Observable, +     * @param count, +     *            the number of items from the end of the sequence emitted by the source, +     *            Observable to emit, +     * @return an Observable that only emits the last <code>count</code> items emitted by the source, +     *         Observable, +     */, +    public static <T> Observable<T> takeLast(final Observable<T> items, final int count) {, +        return _create(OperationTakeLast.takeLast(items, count));, +    }, +, +    /**, +     * Returns an Observable that emits the last <code>count</code> items emitted by the source, +     * Observable., +     *, +     * @param count, +     *            the number of items from the end of the sequence emitted by the source, +     *            Observable to emit, +     * @return an Observable that only emits the last <code>count</code> items emitted by the source, +     *         Observable, +     */, +    public Observable<T> takeLast(final int count) {, +        return takeLast(this, count);, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationTakeLast;, +     * Returns an Observable that emits the last <code>count</code> items emitted by the source, +     * Observable., +     *, +     * @param items, +     *            the source Observable, +     * @param count, +     *            the number of items from the end of the sequence emitted by the source, +     *            Observable to emit, +     * @return an Observable that only emits the last <code>count</code> items emitted by the source, +     *         Observable, +     */, +    public static <T> Observable<T> takeLast(final Observable<T> items, final int count) {, +        return _create(OperationTakeLast.takeLast(items, count));, +    }, +, +    /**, +     * Returns an Observable that emits the last <code>count</code> items emitted by the source, +     * Observable., +     *, +     * @param count, +     *            the number of items from the end of the sequence emitted by the source, +     *            Observable to emit, +     * @return an Observable that only emits the last <code>count</code> items emitted by the source, +     *         Observable, +     */, +    public Observable<T> takeLast(final int count) {, +        return takeLast(this, count);, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationTakeLast.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import org.junit.Test;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.util.AtomicObservableSubscription;, +import rx.util.functions.Func1;, +, +import java.util.Iterator;, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.*;, +, +/**, + * Returns a specified number of contiguous elements from the end of an observable sequence., + */, +public final class OperationTakeLast {]