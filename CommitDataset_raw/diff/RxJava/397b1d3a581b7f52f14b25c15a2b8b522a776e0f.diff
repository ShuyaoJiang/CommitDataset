[+++ b/rxjava-core/src/main/java/rx/observers/SerializedObserver.java, +public class SerializedObserver<T> implements Observer<T> {, +    private final Observer<? super T> actual;, +, +    private boolean emitting = false;, +    private boolean terminated = false;, +    private FastList queue;, +, +    private static final int MAX_DRAIN_ITERATION = Integer.MAX_VALUE;, +    private static final Object NULL_SENTINEL = new Object();, +    private static final Object COMPLETE_SENTINEL = new Object();, +, +    static final class FastList {, +        Object[] array;, +        int size;, +, +        public void add(Object o) {, +            int s = size;, +            Object[] a = array;, +            if (a == null) {, +                a = new Object[16];, +                array = a;, +            } else if (s == a.length) {, +                Object[] array2 = new Object[s + (s >> 2)];, +                System.arraycopy(a, 0, array2, 0, s);, +                a = array2;, +                array = a;, +            }, +            a[s] = o;, +            size = s + 1;, +        }, +    }, +, +    private static final class ErrorSentinel {, +        final Throwable e;, +, +        ErrorSentinel(Throwable e) {, +            this.e = e;, +        }, +    }, +, +        this.actual = s;, +        FastList list;, +        synchronized (this) {, +            if (terminated) {, +                return;, +            }, +            terminated = true;, +            if (emitting) {, +                if (queue == null) {, +                    queue = new FastList();, +                }, +                queue.add(COMPLETE_SENTINEL);, +                return;, +            }, +            emitting = true;, +            list = queue;, +            queue = null;, +        }, +        drainQueue(list);, +        FastList list;, +        synchronized (this) {, +            if (terminated) {, +                return;, +            }, +            terminated = true;, +            if (emitting) {, +                if (queue == null) {, +                    queue = new FastList();, +                }, +                queue.add(new ErrorSentinel(e));, +                return;, +            }, +            emitting = true;, +            list = queue;, +            queue = null;, +        }, +        drainQueue(list);, +    public void onNext(T t) {, +        FastList list;, +, +        synchronized (this) {, +            if (terminated) {, +                return;, +            }, +            if (emitting) {, +                if (queue == null) {, +                    queue = new FastList();, +                }, +                queue.add(t != null ? t : NULL_SENTINEL);, +                // another thread is emitting so we add to the queue and return, +                return;, +            }, +            // we can emit, +            emitting = true;, +            // reference to the list to drain before emitting our value, +            list = queue;, +            queue = null;, +        }, +]