[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val sharedNumbers = numbers.replay[Long, Long]((o: Observable[Long]) => o.map(_ * 2)), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val sharedNumbers = numbers.replay[Long, Long]((o: Observable[Long]) => o.map(_ * 2)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +  implicit def scalaFunction1ToOnSubscribeFunc[T](f: rx.lang.scala.Observer[T] => Subscription) =, +    new rx.Observable.OnSubscribeFunc[T] {, +      def onSubscribe(obs: rx.Observer[_ >: T]): rx.Subscription = {, +        f(obs), +      }, +    }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val sharedNumbers = numbers.replay[Long, Long]((o: Observable[Long]) => o.map(_ * 2)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +  implicit def scalaFunction1ToOnSubscribeFunc[T](f: rx.lang.scala.Observer[T] => Subscription) =, +    new rx.Observable.OnSubscribeFunc[T] {, +      def onSubscribe(obs: rx.Observer[_ >: T]): rx.Subscription = {, +        f(obs), +      }, +    }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def replay[U >: T, R](selector: Observable[U] => Observable[R]): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    val fJava: Func1[rx.Observable[U], rx.Observable[R]] =, +      (jo: rx.Observable[U]) => selector(toScalaObservable[U](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[U >: T, R](selector: Observable[U] => Observable[R], bufferSize: Int): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    val fJava: Func1[rx.Observable[U], rx.Observable[R]] =, +      (jo: rx.Observable[U]) => selector(toScalaObservable[U](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[U >: T, R](selector: Observable[U] => Observable[R], bufferSize: Int, time: Duration): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    val fJava: Func1[rx.Observable[U], rx.Observable[R]] =, +      (jo: rx.Observable[U]) => selector(toScalaObservable[U](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[U >: T, R](selector: Observable[U] => Observable[R], bufferSize: Int, time: Duration, scheduler: Scheduler): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    val fJava: Func1[rx.Observable[U], rx.Observable[R]] =, +      (jo: rx.Observable[U]) => selector(toScalaObservable[U](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[U >: T, R](selector: Observable[U] => Observable[R], bufferSize: Int, scheduler: Scheduler): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    val fJava: Func1[rx.Observable[U], rx.Observable[R]] =, +      (jo: rx.Observable[U]) => selector(toScalaObservable[U](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[U >: T, R](selector: Observable[U] => Observable[R], time: Duration, scheduler: Scheduler): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    val fJava: Func1[rx.Observable[U], rx.Observable[R]] =, +      (jo: rx.Observable[U]) => selector(toScalaObservable[U](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[U >: T, R](selector: Observable[U] => Observable[R], scheduler: Scheduler): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    val fJava: Func1[rx.Observable[U], rx.Observable[R]] =, +      (jo: rx.Observable[U]) => selector(toScalaObservable[U](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[U >: T, R](selector: Observable[U] => Observable[R], time: Duration): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    val fJava: Func1[rx.Observable[U], rx.Observable[R]] =, +      (jo: rx.Observable[U]) => selector(toScalaObservable[U](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def publish[U >: T](initialValue: U): ConnectableObservable[U] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    new ConnectableObservable[U](thisJava.publish(initialValue)), +  def publish[U >: T, R](selector: Observable[U] => Observable[R]): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    val fJava: Func1[rx.Observable[U], rx.Observable[R]] =, +      (jo: rx.Observable[U]) => selector(toScalaObservable[U](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def publish[U >: T, R](selector: Observable[U] => Observable[R], initialValue: U): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    val fJava: Func1[rx.Observable[U], rx.Observable[R]] =, +      (jo: rx.Observable[U]) => selector(toScalaObservable[U](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def dropUntil[E](other: Observable[E]): Observable[T] = {, +   * @tparam E, +   *            the type of items emitted by `other`, +  def takeUntil[E](that: Observable[E]): Observable[T] = {, +  def timeout[V](timeoutSelector: T => Observable[V]): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.timeout({ t: T => timeoutSelector(t).asJavaObservable.asInstanceOf[rx.Observable[V]] })), +  def timeout[V, O >: T](timeoutSelector: T => Observable[V], other: Observable[O]): Observable[O] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[O]], +    toScalaObservable[O](thisJava.timeout(, +      { t: O => timeoutSelector(t.asInstanceOf[T]).asJavaObservable.asInstanceOf[rx.Observable[V]] },, +  def timeout[U, V](firstTimeoutSelector: () => Observable[U], timeoutSelector: T => Observable[V]): Observable[T] = {, +      { firstTimeoutSelector().asJavaObservable.asInstanceOf[rx.Observable[U]] },, +      { t: T => timeoutSelector(t).asJavaObservable.asInstanceOf[rx.Observable[V]] })), +  def timeout[U, V, O >: T](firstTimeoutSelector: () => Observable[U], timeoutSelector: T => Observable[V], other: Observable[O]): Observable[O] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[O]], +    toScalaObservable[O](thisJava.timeout(, +      { firstTimeoutSelector().asJavaObservable.asInstanceOf[rx.Observable[U]] },, +      { t: O => timeoutSelector(t.asInstanceOf[T]).asJavaObservable.asInstanceOf[rx.Observable[V]] },, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val sharedNumbers = numbers.replay[Long, Long]((o: Observable[Long]) => o.map(_ * 2)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +  implicit def scalaFunction1ToOnSubscribeFunc[T](f: rx.lang.scala.Observer[T] => Subscription) =, +    new rx.Observable.OnSubscribeFunc[T] {, +      def onSubscribe(obs: rx.Observer[_ >: T]): rx.Subscription = {, +        f(obs), +      }, +    }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def replay[U >: T, R](selector: Observable[U] => Observable[R]): Observable[R] = {, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    val fJava: Func1[rx.Observable[U], rx.Observable[R]] =, +      (jo: rx.Observable[U]) => selector(toScalaObservable[U](jo)).asJavaObservable.asInstanceOf[rx.Observable[R]], +  def replay[U >: T, R](selector: Observable[U] => Observable[R], bufferSize: Int): Observable[R] = {]