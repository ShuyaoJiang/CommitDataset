[+++ b/rxjava-core/src/main/java/rx/Scheduler.java, +     * @param state, +     *            State to pass into the action., +     * @param action, +     *            Action to schedule., +     * Schedules a cancelable action to be executed in delayTime., +     * , +     * @param state, +     *            State to pass into the action., +     * @param action, +     *            Action to schedule., +     * @param delayTime, +     *            Time the action is to be delayed before executing., +     * @param unit, +     *            Time unit of the delay time., +     * @return a subscription to be able to unsubscribe from action., +     */, +    <T> Subscription schedule(T state, Func2<Scheduler, T, Subscription> action, long delayTime, TimeUnit unit);, +, +    /**, +     * @param action, +     *            Action to schedule., +     * Schedules a cancelable action to be executed in delayTime., +     * @param action, +     *            Action to schedule., +     * @param delayTime, +     *            Time the action is to be delayed before executing., +     * @param unit, +     *            Time unit of the delay time., +    Subscription schedule(Func1<Scheduler, Subscription> action, long delayTime, TimeUnit unit);, +     * Schedules an action to be executed in delayTime., +    Subscription schedule(Action0 action, long delayTime, TimeUnit unit);, +     * Schedules a cancelable action to be executed in delayTime., +    Subscription schedule(Func0<Subscription> action, long delayTime, TimeUnit unit);, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +     * @param state, +     *            State to pass into the action., +     * @param action, +     *            Action to schedule., +     * Schedules a cancelable action to be executed in delayTime., +     * , +     * @param state, +     *            State to pass into the action., +     * @param action, +     *            Action to schedule., +     * @param delayTime, +     *            Time the action is to be delayed before executing., +     * @param unit, +     *            Time unit of the delay time., +     * @return a subscription to be able to unsubscribe from action., +     */, +    <T> Subscription schedule(T state, Func2<Scheduler, T, Subscription> action, long delayTime, TimeUnit unit);, +, +    /**, +     * @param action, +     *            Action to schedule., +     * Schedules a cancelable action to be executed in delayTime., +     * @param action, +     *            Action to schedule., +     * @param delayTime, +     *            Time the action is to be delayed before executing., +     * @param unit, +     *            Time unit of the delay time., +    Subscription schedule(Func1<Scheduler, Subscription> action, long delayTime, TimeUnit unit);, +     * Schedules an action to be executed in delayTime., +    Subscription schedule(Action0 action, long delayTime, TimeUnit unit);, +     * Schedules a cancelable action to be executed in delayTime., +    Subscription schedule(Func0<Subscription> action, long delayTime, TimeUnit unit);, +++ b/rxjava-core/src/main/java/rx/concurrency/AbstractScheduler.java, +/**, + * Default implementations of various convenience overload methods on the Scheduler., + * <p>, + * The methods left to implement are:, + * <ul>, + * <li>{@code <T> Subscription schedule(T state, Func2<Scheduler, T, Subscription> action, long delayTime, TimeUnit unit)}</li>, + * <li>{@code <T> Subscription schedule(T state, Func2<Scheduler, T, Subscription> action)}</li>, + * </ul>, + * <p>, + * This is a utility class expected to be used by all {@link Scheduler} implementations since we can't yet rely on Java 8 default methods on the {@link Scheduler}., + */, +public abstract class AbstractScheduler implements Scheduler {, +    public Subscription schedule(final Action0 action) {, +        return schedule(null, new Func2<Scheduler, Void, Subscription>() {, +, +            @Override, +            public Subscription call(Scheduler scheduler, Void t2) {, +                action.call();, +                return Subscriptions.empty();, +            }, +        });, +        return schedule(null, new Func2<Scheduler, Void, Subscription>() {, +, +            public Subscription call(Scheduler scheduler, Void t2) {, +                return action.call(scheduler);, +    public Subscription schedule(final Action0 action, long delayTime, TimeUnit unit) {, +        return schedule(null, new Func2<Scheduler, Void, Subscription>() {, +, +            public Subscription call(Scheduler scheduler, Void t2) {, +                action.call();, +                return Subscriptions.empty();]