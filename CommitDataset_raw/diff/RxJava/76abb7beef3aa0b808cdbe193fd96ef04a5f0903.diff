[+++ b/src/main/java/io/reactivex/Observable.java, +     * the sequence (subscription, disposal)., +++ b/src/main/java/io/reactivex/Observable.java, +     * the sequence (subscription, disposal)., +++ b/src/main/java/io/reactivex/internal/observers/DisposableLambdaObserver.java, +            upstream = DisposableHelper.DISPOSED;, +            upstream = DisposableHelper.DISPOSED;, +        Disposable d = upstream;, +        if (d != DisposableHelper.DISPOSED) {, +            upstream = DisposableHelper.DISPOSED;, +            d.dispose();, +        }, +++ b/src/main/java/io/reactivex/Observable.java, +     * the sequence (subscription, disposal)., +++ b/src/main/java/io/reactivex/internal/observers/DisposableLambdaObserver.java, +            upstream = DisposableHelper.DISPOSED;, +            upstream = DisposableHelper.DISPOSED;, +        Disposable d = upstream;, +        if (d != DisposableHelper.DISPOSED) {, +            upstream = DisposableHelper.DISPOSED;, +            d.dispose();, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnLifecycle.java, +            Subscription s = upstream;, +            if (s != SubscriptionHelper.CANCELLED) {, +                upstream = SubscriptionHelper.CANCELLED;, +                s.cancel();, +            }, +++ b/src/main/java/io/reactivex/Observable.java, +     * the sequence (subscription, disposal)., +++ b/src/main/java/io/reactivex/internal/observers/DisposableLambdaObserver.java, +            upstream = DisposableHelper.DISPOSED;, +            upstream = DisposableHelper.DISPOSED;, +        Disposable d = upstream;, +        if (d != DisposableHelper.DISPOSED) {, +            upstream = DisposableHelper.DISPOSED;, +            d.dispose();, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnLifecycle.java, +            Subscription s = upstream;, +            if (s != SubscriptionHelper.CANCELLED) {, +                upstream = SubscriptionHelper.CANCELLED;, +                s.cancel();, +            }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableDoOnLifecycleTest.java, +        assertEquals(1, calls[1]);, +++ b/src/main/java/io/reactivex/Observable.java, +     * the sequence (subscription, disposal)., +++ b/src/main/java/io/reactivex/internal/observers/DisposableLambdaObserver.java, +            upstream = DisposableHelper.DISPOSED;, +            upstream = DisposableHelper.DISPOSED;, +        Disposable d = upstream;, +        if (d != DisposableHelper.DISPOSED) {, +            upstream = DisposableHelper.DISPOSED;, +            d.dispose();, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnLifecycle.java, +            Subscription s = upstream;, +            if (s != SubscriptionHelper.CANCELLED) {, +                upstream = SubscriptionHelper.CANCELLED;, +                s.cancel();, +            }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableDoOnLifecycleTest.java, +        assertEquals(1, calls[1]);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableDoOnUnsubscribeTest.java, +import io.reactivex.processors.BehaviorProcessor;, +, +    @Test, +    public void noReentrantDispose() {, +, +        final AtomicInteger cancelCalled = new AtomicInteger();, +, +        final BehaviorProcessor<Integer> p = BehaviorProcessor.create();, +        p.doOnCancel(new Action() {, +            @Override, +            public void run() throws Exception {, +                cancelCalled.incrementAndGet();, +                p.onNext(2);, +            }, +        }), +        .firstOrError(), +        .subscribe(), +        .dispose();, +, +        assertEquals(1, cancelCalled.get());, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +     * the sequence (subscription, disposal)., +++ b/src/main/java/io/reactivex/internal/observers/DisposableLambdaObserver.java, +            upstream = DisposableHelper.DISPOSED;, +            upstream = DisposableHelper.DISPOSED;, +        Disposable d = upstream;, +        if (d != DisposableHelper.DISPOSED) {, +            upstream = DisposableHelper.DISPOSED;, +            d.dispose();, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnLifecycle.java, +            Subscription s = upstream;, +            if (s != SubscriptionHelper.CANCELLED) {, +                upstream = SubscriptionHelper.CANCELLED;]