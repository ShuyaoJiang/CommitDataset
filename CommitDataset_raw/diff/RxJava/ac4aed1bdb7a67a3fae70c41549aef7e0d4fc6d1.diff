[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorObserveOnBounded;, +     * Move notifications to the specified {@link Scheduler} asynchronously with an unbounded buffer., +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorObserveOnBounded;, +     * Move notifications to the specified {@link Scheduler} asynchronously with an unbounded buffer., +++ b/rxjava-core/src/main/java/rx/operators/OperatorObserveOn.java, +import java.util.concurrent.ConcurrentLinkedQueue;, + * Delivers events on the specified Scheduler asynchronously via an unbounded buffer., +        this.scheduler = scheduler;, +    private static class Sentinel {, +    }, +, +    private static Sentinel NULL_SENTINEL = new Sentinel();, +    private static Sentinel COMPLETE_SENTINEL = new Sentinel();, +, +    private static class ErrorSentinel extends Sentinel {, +        private final ConcurrentLinkedQueue<Object> queue = new ConcurrentLinkedQueue<Object>();, +                queue.offer(NULL_SENTINEL);, +                queue.offer(t);, +            queue.offer(COMPLETE_SENTINEL);, +            queue.offer(new ErrorSentinel(e));, +                    if (v instanceof Sentinel) {, +                        }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorObserveOnBounded;, +     * Move notifications to the specified {@link Scheduler} asynchronously with an unbounded buffer., +++ b/rxjava-core/src/main/java/rx/operators/OperatorObserveOn.java, +import java.util.concurrent.ConcurrentLinkedQueue;, + * Delivers events on the specified Scheduler asynchronously via an unbounded buffer., +        this.scheduler = scheduler;, +    private static class Sentinel {, +    }, +, +    private static Sentinel NULL_SENTINEL = new Sentinel();, +    private static Sentinel COMPLETE_SENTINEL = new Sentinel();, +, +    private static class ErrorSentinel extends Sentinel {, +        private final ConcurrentLinkedQueue<Object> queue = new ConcurrentLinkedQueue<Object>();, +                queue.offer(NULL_SENTINEL);, +                queue.offer(t);, +            queue.offer(COMPLETE_SENTINEL);, +            queue.offer(new ErrorSentinel(e));, +                    if (v instanceof Sentinel) {, +                        }, +++ b/rxjava-core/src/main/java/rx/operators/OperatorObserveOnBounded.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.concurrent.Semaphore;, +import java.util.concurrent.atomic.AtomicLong;, +, +import rx.Observable.Operator;, +import rx.Scheduler;, +import rx.Scheduler.Inner;, +import rx.Subscriber;, +import rx.schedulers.ImmediateScheduler;, +import rx.schedulers.TestScheduler;, +import rx.schedulers.TrampolineScheduler;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Action0;, +import rx.util.functions.Action1;, +, +/**, + * Delivers events on the specified Scheduler., + * <p>, + * This provides backpressure by blocking the incoming onNext when there is already one in the queue., + * <p>, + * This means that at any given time the max number of "onNext" in flight is 3:, + * -> 1 being delivered on the Scheduler, + * -> 1 in the queue waiting for the Scheduler, + * -> 1 blocking on the queue waiting to deliver it, + * , + * I have chosen to allow 1 in the queue rather than using an Exchanger style process so that the Scheduler, + * can loop and have something to do each time around to optimize for avoiding rescheduling when it, + * can instead just loop. I'm avoiding having the Scheduler thread ever block as it could be an event-loop, + * thus if the queue is empty it exits and next time something is added it will reschedule., + * , + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/observeOn.png">, + */, +public class OperatorObserveOnBounded<T> implements Operator<T, T> {, +, +    private final Scheduler scheduler;, +    private final int bufferSize;, +, +    /**]