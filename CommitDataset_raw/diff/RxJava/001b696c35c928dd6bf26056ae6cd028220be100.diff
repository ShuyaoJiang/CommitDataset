[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Backpressure">RxJava wiki: Backpressure</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Backpressure">RxJava wiki: Backpressure</a>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Backpressure">RxJava wiki: Backpressure</a>, +        return merge(map(func));, +    }, +    , +    /**, +     * Returns an Observable that applies a function to each item emitted or notification raised by the source, +     * Observable and then flattens the Observables returned from these functions and emits the resulting items., +     * <p>, +     * <img width="640" height="410" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mergeMap.nce.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code mergeMap} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param <R>, +     *            the result type, +     * @param onNext, +     *            a function that returns an Observable to merge for each item emitted by the source Observable, +     * @param onError, +     *            a function that returns an Observable to merge for an onError notification from the source, +     *            Observable, +     * @param onCompleted, +     *            a function that returns an Observable to merge for an onCompleted notification from the source, +     *            Observable, +     * @return an Observable that emits the results of merging the Observables returned from applying the, +     *         specified functions to the emissions and notifications of the source Observable, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#mergemap-and-mergemapiterable">RxJava wiki: mergeMap</a>, +     */, +    public final <R> Observable<R> flatMap(, +            Func1<? super T, ? extends Observable<? extends R>> onNext,, +            Func1<? super Throwable, ? extends Observable<? extends R>> onError,, +            Func0<? extends Observable<? extends R>> onCompleted) {, +        return merge(mapNotification(onNext, onError, onCompleted));, +    }, +, +    /**, +     * Returns an Observable that emits the results of a specified function to the pair of values emitted by the, +     * source Observable and a specified collection Observable., +     * <p>, +     * <img width="640" height="390" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mergeMap.r.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code mergeMap} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param <U>, +     *            the type of items emitted by the collection Observable, +     * @param <R>, +     *            the type of items emitted by the resulting Observable, +     * @param collectionSelector, +     *            a function that returns an Observable for each item emitted by the source Observable, +     * @param resultSelector, +     *            a function that combines one item emitted by each of the source and collection Observables and, +     *            returns an item to be emitted by the resulting Observable, +     * @return an Observable that emits the results of applying a function to a pair of values emitted by the, +     *         source Observable and the collection Observable, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#mergemap-and-mergemapiterable">RxJava wiki: mergeMap</a>, +     */, +    public final <U, R> Observable<R> flatMap(final Func1<? super T, ? extends Observable<? extends U>> collectionSelector,, +            final Func2<? super T, ? super U, ? extends R> resultSelector) {, +        return merge(lift(new OperatorMapPair<T, U, R>(collectionSelector, resultSelector)));, +    }, +, +    /**, +     * Returns an Observable that merges each item emitted by the source Observable with the values in an, +     * Iterable corresponding to that item that is generated by a selector., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mergeMapIterable.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code mergeMapIterable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param <R>, +     *            the type of item emitted by the resulting Observable, +     * @param collectionSelector, +     *            a function that returns an Iterable sequence of values for when given an item emitted by the, +     *            source Observable, +     * @return an Observable that emits the results of merging the items emitted by the source Observable with, +     *         the values in the Iterables corresponding to those items, as generated by {@code collectionSelector}, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#mergemap-and-mergemapiterable">RxJava wiki: mergeMapIterable</a>, +     */, +    public final <R> Observable<R> flatMapIterable(Func1<? super T, ? extends Iterable<? extends R>> collectionSelector) {, +        return merge(map(OperatorMapPair.convertSelector(collectionSelector)));, +    }, +, +    /**, +     * Returns an Observable that emits the results of applying a function to the pair of values from the source, +     * Observable and an Iterable corresponding to that item that is generated by a selector., +     * <p>, +     * <img width="640" height="390" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mergeMapIterable.r.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code mergeMapIterable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param <U>]