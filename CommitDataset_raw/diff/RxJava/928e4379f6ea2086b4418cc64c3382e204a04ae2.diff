[+++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.functions.*;, +import io.reactivex.internal.fuseable.ScalarCallable;, +import io.reactivex.internal.operators.single.*;, +     * If the source is empty, a {@code NoSuchElementException} is signalled., +     * <p>, +     * @return a Single that emits a single item that is the result of accumulating the items emitted by, +     *         the source Flowable, +    public final Single<T> reduce(BiFunction<T, T, T> reducer) {, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +//        return RxJavaPlugins.onAssembly(new FlowableReduce<T>(this, reducer));, +        return RxJavaPlugins.onAssembly(new SingleReduceFlowable<T>(this, reducer));, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.functions.*;, +import io.reactivex.internal.fuseable.ScalarCallable;, +import io.reactivex.internal.operators.single.*;, +     * If the source is empty, a {@code NoSuchElementException} is signalled., +     * <p>, +     * @return a Single that emits a single item that is the result of accumulating the items emitted by, +     *         the source Flowable, +    public final Single<T> reduce(BiFunction<T, T, T> reducer) {, +        ObjectHelper.requireNonNull(reducer, "reducer is null");, +//        return RxJavaPlugins.onAssembly(new FlowableReduce<T>(this, reducer));, +        return RxJavaPlugins.onAssembly(new SingleReduceFlowable<T>(this, reducer));, +++ b/src/main/java/io/reactivex/Observable.java, +     * @return an Observable that emits the same sequence as whichever of the source ObservableSources first, +     * @return an Observable that emits the same sequence as whichever of the source ObservableSources first, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     * Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source, +     *            an ObservableSource that emits ObservableSources, +     * @return an Observable that emits items all of the items emitted by the ObservableSources emitted by, +     * Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source, +     *            an ObservableSource that emits ObservableSources, +     * @return an Observable that emits items all of the items emitted by the ObservableSources emitted by, +     * Returns an Observable that emits the items emitted by two ObservableSources, one after the other, without, +     *            an ObservableSource to be concatenated, +     *            an ObservableSource to be concatenated, +     * @return an Observable that emits items emitted by the two source ObservableSources, one after the other,, +     * Returns an Observable that emits the items emitted by three ObservableSources, one after the other, without, +     *            an ObservableSource to be concatenated, +     *            an ObservableSource to be concatenated, +     *            an ObservableSource to be concatenated, +     * @return an Observable that emits items emitted by the three source ObservableSources, one after the other,, +     * Returns an Observable that emits the items emitted by four ObservableSources, one after the other, without, +     *            an ObservableSource to be concatenated, +     *            an ObservableSource to be concatenated, +     *            an ObservableSource to be concatenated, +     *            an ObservableSource to be concatenated, +     * @return an Observable that emits items emitted by the four source ObservableSources, one after the other,, +     * Concatenates an ObservableSource sequence of ObservableSources eagerly into a single stream of values., +     * Concatenates an ObservableSource sequence of ObservableSources eagerly into a single stream of values., +     * Returns an Observable that calls an ObservableSource factory to create an ObservableSource for each new Observer, +     * The defer Observer allows you to defer or delay emitting items from an ObservableSource until such time as an, +     * @return an Observable whose {@link Observer}s' subscriptions trigger an invocation of the given, +     * Returns an Observable that emits no items to the {@link Observer} and immediately invokes its, +     * @return an Observable that emits no items to the {@link Observer} but immediately invokes the, +     * Returns an Observable that invokes an {@link Observer}'s {@link Observer#onError onError} method when the, +     * @return an Observable that invokes the {@link Observer}'s {@link Observer#onError onError} method when, +     * Returns an Observable that invokes an {@link Observer}'s {@link Observer#onError onError} method when the, +     * @return an Observable that invokes the {@link Observer}'s {@link Observer#onError onError} method when, +     * Converts an Array into an ObservableSource that emits the items in the Array., +     * @return an Observable that emits each item in the source Array, +     * Returns an Observable that, when an observer subscribes to it, invokes a function you specify and then, +     * @return an Observable whose {@link Observer}s' subscriptions trigger an invocation of the given function, +     * Converts a {@link Future} into an ObservableSource., +     * You can convert any object that supports the {@link Future} interface into an ObservableSource that emits the, +     * @return an Observable that emits the item from the source {@link Future}, +     * Converts a {@link Future} into an ObservableSource, with a timeout on the Future., +     * You can convert any object that supports the {@link Future} interface into an ObservableSource that emits the, +     * @return an Observable that emits the item from the source {@link Future}, +     * Converts a {@link Future} into an ObservableSource, with a timeout on the Future., +     * You can convert any object that supports the {@link Future} interface into an ObservableSource that emits the, +     * @return an Observable that emits the item from the source {@link Future}, +     * Converts a {@link Future}, operating on a specified {@link Scheduler}, into an ObservableSource., +     * You can convert any object that supports the {@link Future} interface into an ObservableSource that emits the, +     * @return an Observable that emits the item from the source {@link Future}, +     * Converts an {@link Iterable} sequence into an ObservableSource that emits the items in the sequence., +     * @return an Observable that emits each item in the source {@link Iterable} sequence, +     * Returns an Observable that emits a {@code 0L} after the {@code initialDelay} and ever increasing numbers, +     * @return an Observable that emits a 0L after the {@code initialDelay} and ever increasing numbers after, +     * Returns an Observable that emits a {@code 0L} after the {@code initialDelay} and ever increasing numbers, +     * @return an Observable that emits a 0L after the {@code initialDelay} and ever increasing numbers after, +     * Returns an Observable that emits a sequential number every specified interval of time.]