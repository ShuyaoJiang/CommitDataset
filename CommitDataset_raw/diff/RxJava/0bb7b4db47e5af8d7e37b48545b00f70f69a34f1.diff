[+++ b/src/main/java/io/reactivex/disposables/CompositeDisposable.java, +     * @param disposables the array of Disposables to start with, +     * @throws NullPointerException if {@code disposables} or any of its array items is null, +    public CompositeDisposable(@NonNull Disposable... disposables) {, +        ObjectHelper.requireNonNull(disposables, "disposables is null");, +        this.resources = new OpenHashSet<Disposable>(disposables.length + 1);, +        for (Disposable d : disposables) {, +            ObjectHelper.requireNonNull(d, "A Disposable in the disposables array is null");, +     * @param disposables the Iterable sequence of Disposables to start with, +     * @throws NullPointerException if {@code disposables} or any of its items is null, +    public CompositeDisposable(@NonNull Iterable<? extends Disposable> disposables) {, +        ObjectHelper.requireNonNull(disposables, "disposables is null");, +        for (Disposable d : disposables) {, +            ObjectHelper.requireNonNull(d, "A Disposable item in the disposables sequence is null");, +     * @param disposable the disposable to add, not null, +     * @throws NullPointerException if {@code disposable} is null, +    public boolean add(@NonNull Disposable disposable) {, +        ObjectHelper.requireNonNull(disposable, "disposable is null");, +                    set.add(disposable);, +        disposable.dispose();, +     * @param disposables the array of Disposables, +     * @throws NullPointerException if {@code disposables} or any of its array items is null, +    public boolean addAll(@NonNull Disposable... disposables) {, +        ObjectHelper.requireNonNull(disposables, "disposables is null");, +                        set = new OpenHashSet<Disposable>(disposables.length + 1);, +                    for (Disposable d : disposables) {, +                        ObjectHelper.requireNonNull(d, "A Disposable in the disposables array is null");, +        for (Disposable d : disposables) {, +     * @param disposable the disposable to remove and dispose, not null, +    public boolean remove(@NonNull Disposable disposable) {, +        if (delete(disposable)) {, +            disposable.dispose();, +     * @param disposable the disposable to remove, not null, +     * @throws NullPointerException if {@code disposable} is null, +    public boolean delete(@NonNull Disposable disposable) {, +        ObjectHelper.requireNonNull(disposable, "disposables is null");, +            if (set == null || !set.remove(disposable)) {]