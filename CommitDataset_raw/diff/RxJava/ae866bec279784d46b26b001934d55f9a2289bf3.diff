[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * emitted and replaced with a new buffer when the Observable produced by the specified function produces an object. The function will then, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated buffer, +   *         when the current [[rx.lang.scala.Observable]] created with the function argument produces an object., +  def buffer[Closing](closings: () => Observable[_ <: Closing]) : Observable[Seq[T]] = {, +    val jObs: rx.Observable[_ <: java.util.List[_]] = asJavaObservable.buffer[Closing](f), +   * Observable produces an object. Additionally the function argument, +   *            The [[rx.lang.scala.Observable]] which, when it produces an object, will cause, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated buffer, +  def buffer[Opening, Closing](openings: Observable[Opening], closings: Opening => Observable[Closing]): Observable[Seq[T]] = {, +    val closing: Func1[_ >: Opening, _ <: rx.Observable[_ <: Closing]] = (o: Opening) => closings(o).asJavaObservable, +    val jObs: rx.Observable[_ <: java.util.List[_]] = asJavaObservable.buffer[Opening, Closing](opening, closing), +   * Observable produced by the specified function produces an object. , +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated window, +   *         when the current [[rx.lang.scala.Observable]] created with the function argument produces an object., +  def window[Closing](closings: () => Observable[Closing]): Observable[Observable[T]] = {, +    val o1: rx.Observable[_ <: rx.Observable[_]] = asJavaObservable.window[Closing](func), +    val o2 = Observable[rx.Observable[_]](o1).map((x: rx.Observable[_]) => {, +   * Chunks are created when the specified `openings` Observable produces an object., +   *            The [[rx.lang.scala.Observable]] which when it produces an object, will cause, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated window, +  def window[Opening, Closing](openings: Observable[Opening], closings: Opening => Observable[Closing]) = {, +      asJavaObservable.window[Opening, Closing](openings.asJavaObservable, (op: Opening) => closings(op).asJavaObservable)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * emitted and replaced with a new buffer when the Observable produced by the specified function produces an object. The function will then, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated buffer, +   *         when the current [[rx.lang.scala.Observable]] created with the function argument produces an object., +  def buffer[Closing](closings: () => Observable[_ <: Closing]) : Observable[Seq[T]] = {, +    val jObs: rx.Observable[_ <: java.util.List[_]] = asJavaObservable.buffer[Closing](f), +   * Observable produces an object. Additionally the function argument, +   *            The [[rx.lang.scala.Observable]] which, when it produces an object, will cause, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated buffer, +  def buffer[Opening, Closing](openings: Observable[Opening], closings: Opening => Observable[Closing]): Observable[Seq[T]] = {, +    val closing: Func1[_ >: Opening, _ <: rx.Observable[_ <: Closing]] = (o: Opening) => closings(o).asJavaObservable, +    val jObs: rx.Observable[_ <: java.util.List[_]] = asJavaObservable.buffer[Opening, Closing](opening, closing), +   * Observable produced by the specified function produces an object. , +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated window, +   *         when the current [[rx.lang.scala.Observable]] created with the function argument produces an object., +  def window[Closing](closings: () => Observable[Closing]): Observable[Observable[T]] = {, +    val o1: rx.Observable[_ <: rx.Observable[_]] = asJavaObservable.window[Closing](func), +    val o2 = Observable[rx.Observable[_]](o1).map((x: rx.Observable[_]) => {, +   * Chunks are created when the specified `openings` Observable produces an object., +   *            The [[rx.lang.scala.Observable]] which when it produces an object, will cause, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated window, +  def window[Opening, Closing](openings: Observable[Opening], closings: Opening => Observable[Closing]) = {, +      asJavaObservable.window[Opening, Closing](openings.asJavaObservable, (op: Opening) => closings(op).asJavaObservable)), +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * emitted and replaced with a new buffer when the Observable produced by the specified function produces an object. The function will then, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated buffer, +   *         when the current [[rx.lang.scala.Observable]] created with the function argument produces an object., +  def buffer[Closing](closings: () => Observable[_ <: Closing]) : Observable[Seq[T]] = {, +    val jObs: rx.Observable[_ <: java.util.List[_]] = asJavaObservable.buffer[Closing](f), +   * Observable produces an object. Additionally the function argument, +   *            The [[rx.lang.scala.Observable]] which, when it produces an object, will cause, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated buffer, +  def buffer[Opening, Closing](openings: Observable[Opening], closings: Opening => Observable[Closing]): Observable[Seq[T]] = {, +    val closing: Func1[_ >: Opening, _ <: rx.Observable[_ <: Closing]] = (o: Opening) => closings(o).asJavaObservable, +    val jObs: rx.Observable[_ <: java.util.List[_]] = asJavaObservable.buffer[Opening, Closing](opening, closing), +   * Observable produced by the specified function produces an object. , +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated window, +   *         when the current [[rx.lang.scala.Observable]] created with the function argument produces an object., +  def window[Closing](closings: () => Observable[Closing]): Observable[Observable[T]] = {, +    val o1: rx.Observable[_ <: rx.Observable[_]] = asJavaObservable.window[Closing](func), +    val o2 = Observable[rx.Observable[_]](o1).map((x: rx.Observable[_]) => {, +   * Chunks are created when the specified `openings` Observable produces an object., +   *            The [[rx.lang.scala.Observable]] which when it produces an object, will cause, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated window, +  def window[Opening, Closing](openings: Observable[Opening], closings: Opening => Observable[Closing]) = {, +      asJavaObservable.window[Opening, Closing](openings.asJavaObservable, (op: Opening) => closings(op).asJavaObservable)), +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * produced by the specified <code>bufferClosingSelector</code> produces an, +     * object. The <code>bufferClosingSelector</code>, +     *                              produces an object,, +     *         created with the {@link Func0} argument produces an, +     *         object, +    public <TClosing> Observable<List<T>> buffer(Func0<? extends Observable<? extends TClosing>> bufferClosingSelector) {, +     * <code>bufferOpenings</code> Observable produces an, +     * used to create an Observable which produces, +     * @param bufferOpenings the {@link Observable} that, when it produces an, +     *                       object, will cause another, +     *                              produces an object,, +    public <TOpening, TClosing> Observable<List<T>> buffer(Observable<? extends TOpening> bufferOpenings, Func1<? super TOpening, ? extends Observable<? extends TClosing>> bufferClosingSelector) {, +     * produced by the specified <code>closingSelector</code> produces an, +     * object. The <code>closingSelector</code> will, +     *            {@link Observable} emits an object, the, +     *         created with the <code>closingSelector</code> argument emits an, +     *         object., +    public <TClosing> Observable<Observable<T>> window(Func0<? extends Observable<? extends TClosing>> closingSelector) {, +     * <code>windowOpenings</code> Observable produces an, +     * Observable that produces objects. When this, +     * @param windowOpenings the {@link Observable} that, when it produces an, +     *                       object, causes another, +     *                        this {@link Observable} produces an, +     *                        object, the associated, +    public <TOpening, TClosing> Observable<Observable<T>> window(Observable<? extends TOpening> windowOpenings, Func1<? super TOpening, ? extends Observable<? extends TClosing>> closingSelector) {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * emitted and replaced with a new buffer when the Observable produced by the specified function produces an object. The function will then, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated buffer]