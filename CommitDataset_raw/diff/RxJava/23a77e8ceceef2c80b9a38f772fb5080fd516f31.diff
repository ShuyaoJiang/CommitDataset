[+++ b/src/main/java/io/reactivex/Maybe.java, +     * @return an empty Completable that only calls {@code onComplete} or {@code onError}, based on which one is, +    public final Completable ignoreElement() {, +        return RxJavaPlugins.onAssembly(new MaybeIgnoreElementCompletable<T>(this));, +++ b/src/main/java/io/reactivex/Maybe.java, +     * @return an empty Completable that only calls {@code onComplete} or {@code onError}, based on which one is, +    public final Completable ignoreElement() {, +        return RxJavaPlugins.onAssembly(new MaybeIgnoreElementCompletable<T>(this));, +++ b/src/main/java/io/reactivex/internal/disposables/DisposableHelper.java, +    /**, +     * Atomically disposes the Disposable in the field if not already disposed., +     * @param field the target field, +     * @return true if the curren thread managed to dispose the Disposable, +     */, +++ b/src/main/java/io/reactivex/Maybe.java, +     * @return an empty Completable that only calls {@code onComplete} or {@code onError}, based on which one is, +    public final Completable ignoreElement() {, +        return RxJavaPlugins.onAssembly(new MaybeIgnoreElementCompletable<T>(this));, +++ b/src/main/java/io/reactivex/internal/disposables/DisposableHelper.java, +    /**, +     * Atomically disposes the Disposable in the field if not already disposed., +     * @param field the target field, +     * @return true if the curren thread managed to dispose the Disposable, +     */, +++ b/src/main/java/io/reactivex/internal/observers/ToNotificationObserver.java, +import io.reactivex.exceptions.*;, +            RxJavaPlugins.onError(new CompositeException(t, ex));, +++ b/src/main/java/io/reactivex/Maybe.java, +     * @return an empty Completable that only calls {@code onComplete} or {@code onError}, based on which one is, +    public final Completable ignoreElement() {, +        return RxJavaPlugins.onAssembly(new MaybeIgnoreElementCompletable<T>(this));, +++ b/src/main/java/io/reactivex/internal/disposables/DisposableHelper.java, +    /**, +     * Atomically disposes the Disposable in the field if not already disposed., +     * @param field the target field, +     * @return true if the curren thread managed to dispose the Disposable, +     */, +++ b/src/main/java/io/reactivex/internal/observers/ToNotificationObserver.java, +import io.reactivex.exceptions.*;, +            RxJavaPlugins.onError(new CompositeException(t, ex));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFromIterable.java, +++ b/src/main/java/io/reactivex/Maybe.java, +     * @return an empty Completable that only calls {@code onComplete} or {@code onError}, based on which one is, +    public final Completable ignoreElement() {, +        return RxJavaPlugins.onAssembly(new MaybeIgnoreElementCompletable<T>(this));, +++ b/src/main/java/io/reactivex/internal/disposables/DisposableHelper.java, +    /**, +     * Atomically disposes the Disposable in the field if not already disposed., +     * @param field the target field, +     * @return true if the curren thread managed to dispose the Disposable, +     */, +++ b/src/main/java/io/reactivex/internal/observers/ToNotificationObserver.java, +import io.reactivex.exceptions.*;, +            RxJavaPlugins.onError(new CompositeException(t, ex));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFromIterable.java, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java, +import io.reactivex.exceptions.*;, +                a.onError(new MissingBackpressureException("Could not deliver first window due to lack of requests."));, +                                a.onError(new MissingBackpressureException("Could not deliver first window due to lack of requests."));, +                a.onError(new MissingBackpressureException("Could not deliver initial window due to lack of requests."));, +                        actual.onError(new MissingBackpressureException("Could not deliver window due to lack of requests"));, +                                a.onError(new MissingBackpressureException("Could not deliver first window due to lack of requests."));, +                            actual.onError(new MissingBackpressureException("Could not deliver window due to lack of requests"));, +                actual.onError(new MissingBackpressureException("Could not emit the first window due to lack of requests"));, +                                a.onError(new MissingBackpressureException("Can't emit window due to lack of requests"));, +++ b/src/main/java/io/reactivex/Maybe.java, +     * @return an empty Completable that only calls {@code onComplete} or {@code onError}, based on which one is, +    public final Completable ignoreElement() {, +        return RxJavaPlugins.onAssembly(new MaybeIgnoreElementCompletable<T>(this));, +++ b/src/main/java/io/reactivex/internal/disposables/DisposableHelper.java, +    /**, +     * Atomically disposes the Disposable in the field if not already disposed., +     * @param field the target field, +     * @return true if the curren thread managed to dispose the Disposable, +     */, +++ b/src/main/java/io/reactivex/internal/observers/ToNotificationObserver.java, +import io.reactivex.exceptions.*;, +            RxJavaPlugins.onError(new CompositeException(t, ex));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFromIterable.java, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java, +import io.reactivex.exceptions.*;, +                a.onError(new MissingBackpressureException("Could not deliver first window due to lack of requests."));, +                                a.onError(new MissingBackpressureException("Could not deliver first window due to lack of requests."));, +                a.onError(new MissingBackpressureException("Could not deliver initial window due to lack of requests."));, +                        actual.onError(new MissingBackpressureException("Could not deliver window due to lack of requests"));, +                                a.onError(new MissingBackpressureException("Could not deliver first window due to lack of requests."));, +                            actual.onError(new MissingBackpressureException("Could not deliver window due to lack of requests"));, +                actual.onError(new MissingBackpressureException("Could not emit the first window due to lack of requests"));, +                                a.onError(new MissingBackpressureException("Can't emit window due to lack of requests"));, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeFromFuture.java, +        if (!d.isDisposed()) {, +                if (!d.isDisposed()) {, +                }, +                if (!d.isDisposed()) {, +                }, +                if (!d.isDisposed()) {, +                }, +            if (!d.isDisposed()) {, +    }, +}]