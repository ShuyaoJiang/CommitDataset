[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala._, +    val o = Observable.from(1 to 18), +    (for ((o, i) <- Observable.from(1 to 18).window(5).zipWithIndex; n <- o), +      yield s"Observable#$i emits $n", +    ).subscribe(output(_)), +  @Ignore // TODO something's bad here, +    Observable.from(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable.from(1 to 10)).toBlockingObservable.foreach(println(_)), +    val o2 = Observable.error(new IOException("Oops")), +    Thread.sleep(500), +  @Test def createExample() {, +    val o = Observable.create[String](observer => {, +      // this is bad because you cannot unsubscribe!, +      observer.onNext("a"), +      observer.onNext("b"), +      observer.onCompleted(), +      Subscription {}, +    }), +    o.subscribe(println(_)), +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala._, +    val o = Observable.from(1 to 18), +    (for ((o, i) <- Observable.from(1 to 18).window(5).zipWithIndex; n <- o), +      yield s"Observable#$i emits $n", +    ).subscribe(output(_)), +  @Ignore // TODO something's bad here, +    Observable.from(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable.from(1 to 10)).toBlockingObservable.foreach(println(_)), +    val o2 = Observable.error(new IOException("Oops")), +    Thread.sleep(500), +  @Test def createExample() {, +    val o = Observable.create[String](observer => {, +      // this is bad because you cannot unsubscribe!, +      observer.onNext("a"), +      observer.onNext("b"), +      observer.onCompleted(), +      Subscription {}, +    }), +    o.subscribe(println(_)), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +    val o2 = toScalaObservable[rx.Observable[_]](o1).map((x: rx.Observable[_]) => {, +  def create[T](func: Observer[T] => Subscription): Observable[T] = {, +  def error[T](exception: Throwable): Observable[T] = {, +   * Converts an `Iterable` into an Observable., +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/from.png">, +   * Note: the entire iterable sequence is immediately emitted each time an, +   * Observer subscribes. Since this occurs before the, +   * `Subscription` is returned, it is not possible to unsubscribe from, +   * the sequence before it completes., +   * @param iterable the source `Iterable` sequence, +   * @param <T> the type of items in the `Iterable` sequence and the, +   *            type of items to be emitted by the resulting Observable, +   * @return an Observable that emits each item in the source `Iterable`, +   *         sequence, +  def from[T](iterable: Iterable[T]): Observable[T] = {, +    toScalaObservable(rx.Observable.from(iterable.asJava)), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala._, +    val o = Observable.from(1 to 18), +    (for ((o, i) <- Observable.from(1 to 18).window(5).zipWithIndex; n <- o), +      yield s"Observable#$i emits $n", +    ).subscribe(output(_)), +  @Ignore // TODO something's bad here, +    Observable.from(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable.from(1 to 10)).toBlockingObservable.foreach(println(_)), +    val o2 = Observable.error(new IOException("Oops")), +    Thread.sleep(500), +  @Test def createExample() {, +    val o = Observable.create[String](observer => {, +      // this is bad because you cannot unsubscribe!, +      observer.onNext("a"), +      observer.onNext("b"), +      observer.onCompleted(), +      Subscription {}, +    }), +    o.subscribe(println(_)), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +    val o2 = toScalaObservable[rx.Observable[_]](o1).map((x: rx.Observable[_]) => {, +  def create[T](func: Observer[T] => Subscription): Observable[T] = {, +  def error[T](exception: Throwable): Observable[T] = {, +   * Converts an `Iterable` into an Observable., +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/from.png">, +   * Note: the entire iterable sequence is immediately emitted each time an, +   * Observer subscribes. Since this occurs before the, +   * `Subscription` is returned, it is not possible to unsubscribe from, +   * the sequence before it completes., +   * @param iterable the source `Iterable` sequence, +   * @param <T> the type of items in the `Iterable` sequence and the, +   *            type of items to be emitted by the resulting Observable, +   * @return an Observable that emits each item in the source `Iterable`, +   *         sequence, +  def from[T](iterable: Iterable[T]): Observable[T] = {, +    toScalaObservable(rx.Observable.from(iterable.asJava))]