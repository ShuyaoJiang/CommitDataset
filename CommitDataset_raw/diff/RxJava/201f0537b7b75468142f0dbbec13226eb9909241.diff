[+++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +public fun<T> Function0<Observable<out T>>.defer(): Observable<T> {, +    return Observable.defer(this)!!, +}, +, +, +public fun<T> Throwable.asObservable(): Observable<T> {, +    return Observable.error(this)!!, +}, +, +public fun<T> Pair<T, T>.asObservable(): Observable<T> {, +    return Observable.from(this.component1(), this.component2())!!, +}, +, +public fun<T> Triple<T, T, T>.asObservable(): Observable<T> {, +    return Observable.from(this.component1(), this.component2(), this.component3())!!, +}, +, +public fun<T> Pair<Observable<T>, Observable<T>>.merge(): Observable<T> {, +    return Observable.merge(this.component1(), this.component2())!!, +}, +, +public fun<T> Triple<Observable<T>, Observable<T>, Observable<T>>.merge(): Observable<T> {, +    return Observable.merge(this.component1(), this.component2(), this.component3())!!, +}, +, +public fun<T> Pair<Observable<T>, Observable<T>>.mergeDelayError(): Observable<T> {, +    return Observable.mergeDelayError(this.component1(), this.component2())!!, +}, +, +public fun<T> Triple<Observable<T>, Observable<T>, Observable<T>>.mergeDelayError(): Observable<T> {, +    return Observable.mergeDelayError(this.component1(), this.component2(), this.component3())!!, +}, +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +public fun<T> Function0<Observable<out T>>.defer(): Observable<T> {, +    return Observable.defer(this)!!, +}, +, +, +public fun<T> Throwable.asObservable(): Observable<T> {, +    return Observable.error(this)!!, +}, +, +public fun<T> Pair<T, T>.asObservable(): Observable<T> {, +    return Observable.from(this.component1(), this.component2())!!, +}, +, +public fun<T> Triple<T, T, T>.asObservable(): Observable<T> {, +    return Observable.from(this.component1(), this.component2(), this.component3())!!, +}, +, +public fun<T> Pair<Observable<T>, Observable<T>>.merge(): Observable<T> {, +    return Observable.merge(this.component1(), this.component2())!!, +}, +, +public fun<T> Triple<Observable<T>, Observable<T>, Observable<T>>.merge(): Observable<T> {, +    return Observable.merge(this.component1(), this.component2(), this.component3())!!, +}, +, +public fun<T> Pair<Observable<T>, Observable<T>>.mergeDelayError(): Observable<T> {, +    return Observable.mergeDelayError(this.component1(), this.component2())!!, +}, +, +public fun<T> Triple<Observable<T>, Observable<T>, Observable<T>>.mergeDelayError(): Observable<T> {, +    return Observable.mergeDelayError(this.component1(), this.component2(), this.component3())!!, +}, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +import rx.Subscription, +import kotlin.concurrent.thread, +    fun received<T>(): (T?) -> Unit {, +        return {(result: T?) -> a!!.received(result) }, +    }, +, +, +        Observable.from(1, 2, 3)!!.filter { it!! >= 2 }!!.subscribe(received()), +        listOf(1, 2, 3).asObservable().filter { it!! >= 2 }!!.subscribe(received()), +        Observable.from(1)!!.map { v -> "hello_$v" }!!.subscribe(received()), +        1.asObservable().map { v -> "hello_$v" }!!.subscribe((received())), +        Observable.from(1, 2, 3)!!.map { v -> "hello_$v" }!!.subscribe((received())), +        listOf(1, 2, 3).asObservable().map { v -> "hello_$v" }!!.subscribe((received())), +        Observable.from(1, 2, 3)!!.materialize()!!.subscribe((received())), +        listOf(1, 2, 3).asObservable().materialize()!!.subscribe((received())), +    [Test], +    public fun testMergeDelayError() {, +        Observable.mergeDelayError(, +                Observable.from(1, 2, 3),, +                Observable.merge(, +                        Observable.from(6),, +                        Observable.error(NullPointerException()),, +                        Observable.from(7), +                ),, +                Observable.from(4, 5), +        )!!.subscribe(received(), { e -> a!!.error(e) }), +        verify(a, times(1))!!.received(1), +        verify(a, times(1))!!.received(2), +        verify(a, times(1))!!.received(3), +        verify(a, times(1))!!.received(4), +        verify(a, times(1))!!.received(5), +        verify(a, times(1))!!.received(6), +        verify(a, times(0))!!.received(7)]