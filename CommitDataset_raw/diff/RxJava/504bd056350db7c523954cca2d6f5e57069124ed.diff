[+++ b/rxjava-core/src/main/java/rx/Scheduler.java, +     * Schedules a cancelable action to be executed periodically., +     *, +     * @param state State to pass into the action., +     * @param action The action to execute periodically., +     * @param initialDelay Time to wait before executing the action for the first time., +     * @param period The time interval to wait each time in between executing the action., +     * @param unit The time unit the interval above is given in., +     * @return A subscription to be able to unsubscribe from action., +     */, +    public abstract <T> Subscription schedulePeriodically(T state, Func2<Scheduler, T, Subscription> action, long initialDelay, long period, TimeUnit unit);, +    , +    /**, +            public Subscription call(Scheduler scheduler, @SuppressWarnings("unused") Void state) {, +            public Subscription call(@SuppressWarnings("unused") Scheduler scheduler, @SuppressWarnings("unused") Void state) {, +            public Subscription call(@SuppressWarnings("unused") Scheduler scheduler, @SuppressWarnings("unused") Void state) {, +            public Subscription call(Scheduler scheduler, @SuppressWarnings("unused") Void state) {, +            public Subscription call(@SuppressWarnings("unused") Scheduler scheduler, @SuppressWarnings("unused") Void state) {, +            public Subscription call(@SuppressWarnings("unused") Scheduler scheduler, @SuppressWarnings("unused") Void state) {, +     * Schedules a cancelable action to be executed periodically., +     * , +     * @param action The action to execute periodically., +     * @param initialDelay Time to wait before executing the action for the first time., +     * @param period The time interval to wait each time in between executing the action., +     * @param unit The time unit the interval above is given in., +     * @return A subscription to be able to unsubscribe from action., +     */, +    public Subscription schedulePeriodically(final Func1<Scheduler, Subscription> action, long initialDelay, long period, TimeUnit unit) {, +        return schedulePeriodically(null, new Func2<Scheduler, Void, Subscription>() {, +            @Override, +            public Subscription call(Scheduler scheduler, @SuppressWarnings("unused") Void state) {, +                return action.call(scheduler);, +            }, +        }, initialDelay, period, unit);, +    }, +, +    /**, +     * Schedules a cancelable action to be executed periodically., +     * , +     * @param action The action to execute periodically., +     * @param initialDelay Time to wait before executing the action for the first time., +     * @param period The time interval to wait each time in between executing the action., +     * @param unit The time unit the interval above is given in., +     * @return A subscription to be able to unsubscribe from action., +     */, +    public Subscription schedulePeriodically(final Func0<Subscription> action, long initialDelay, long period, TimeUnit unit) {, +        return schedulePeriodically(null, new Func2<Scheduler, Void, Subscription>() {, +            @Override, +            public Subscription call(@SuppressWarnings("unused") Scheduler scheduler, @SuppressWarnings("unused") Void state) {, +                return action.call();, +            }, +        }, initialDelay, period, unit);, +    }, +, +    /**, +    public Subscription schedulePeriodically(final Action0 action, long initialDelay, long period, TimeUnit unit) {, +        return schedulePeriodically(null, new Func2<Scheduler, Void, Subscription>() {, +            @Override, +            public Subscription call(@SuppressWarnings("unused") Scheduler scheduler, @SuppressWarnings("unused") Void state) {, +                action.call();, +                return Subscriptions.empty();, +            }, +        }, initialDelay, period, unit);, +    }]