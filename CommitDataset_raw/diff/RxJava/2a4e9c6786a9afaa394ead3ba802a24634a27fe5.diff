[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +        case OnCompleted() => println("Completed"), +      case OnCompleted() => println("Completed"), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +        case OnCompleted() => println("Completed"), +      case OnCompleted() => println("Completed"), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Notification.scala, +      case Notification.OnCompleted()  => onCompleted(), +      case Notification.OnCompleted()  => observer.onCompleted(), +    case rx.Notification.Kind.OnCompleted => new OnCompleted(n), +  object OnCompleted {, +, +    /**, +     * Constructor for onCompleted notifications., +     */, +    def apply[T](): Notification[T] = {, +      Notification(rx.Notification.createOnCompleted[T]()), +    }, +, +    /**, +     * Extractor for onCompleted notifications., +     */, +    def unapply[U](notification: Notification[U]): Option[Unit] = notification match {, +      case onCompleted: OnCompleted[U] => Some(), +      case _ => None, +    }, +  }, +, +  class OnCompleted[T] private[scala](val asJavaNotification: rx.Notification[_ <: T]) extends Notification[T] {, +    override def toString = "OnCompleted()", +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +        case OnCompleted() => println("Completed"), +      case OnCompleted() => println("Completed"), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Notification.scala, +      case Notification.OnCompleted()  => onCompleted(), +      case Notification.OnCompleted()  => observer.onCompleted(), +    case rx.Notification.Kind.OnCompleted => new OnCompleted(n), +  object OnCompleted {, +, +    /**, +     * Constructor for onCompleted notifications., +     */, +    def apply[T](): Notification[T] = {, +      Notification(rx.Notification.createOnCompleted[T]()), +    }, +, +    /**, +     * Extractor for onCompleted notifications., +     */, +    def unapply[U](notification: Notification[U]): Option[Unit] = notification match {, +      case onCompleted: OnCompleted[U] => Some(), +      case _ => None, +    }, +  }, +, +  class OnCompleted[T] private[scala](val asJavaNotification: rx.Notification[_ <: T]) extends Notification[T] {, +    override def toString = "OnCompleted()", +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/NotificationTests.scala, +    val onCompleted = OnCompleted(), +      assertEquals((), onCompleted match { case OnCompleted() => () }), +    val onCompleted = OnCompleted(), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +        case OnCompleted() => println("Completed"), +      case OnCompleted() => println("Completed"), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Notification.scala, +      case Notification.OnCompleted()  => onCompleted(), +      case Notification.OnCompleted()  => observer.onCompleted(), +    case rx.Notification.Kind.OnCompleted => new OnCompleted(n), +  object OnCompleted {, +, +    /**, +     * Constructor for onCompleted notifications., +     */, +    def apply[T](): Notification[T] = {, +      Notification(rx.Notification.createOnCompleted[T]()), +    }, +, +    /**, +     * Extractor for onCompleted notifications., +     */, +    def unapply[U](notification: Notification[U]): Option[Unit] = notification match {, +      case onCompleted: OnCompleted[U] => Some(), +      case _ => None, +    }, +  }, +, +  class OnCompleted[T] private[scala](val asJavaNotification: rx.Notification[_ <: T]) extends Notification[T] {, +    override def toString = "OnCompleted()", +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/NotificationTests.scala, +    val onCompleted = OnCompleted(), +      assertEquals((), onCompleted match { case OnCompleted() => () }), +    val onCompleted = OnCompleted(), +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.Exceptions;, +            // special handling for certain Throwable/Error/Exception types, +            Exceptions.throwIfFatal(e);, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +        case OnCompleted() => println("Completed"), +      case OnCompleted() => println("Completed"), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Notification.scala]