[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Given an Observable that emits Observables, returns an Observable that, +     * emits the items emitted by the most recently emitted of those, +     * Observables., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/switchDo.png">, +     * , +     * @param sequenceOfSequences the source Observable that emits Observables, +     * @return an Observable that emits only the items emitted by the Observable, +     *         most recently emitted by the source Observable, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#switchonnext">RxJava Wiki: switchOnNext()</a>, +     * @see {@link #switchOnNext(Observable)}, +     */, +    public static <T> Observable<T> switchLatest(Observable<? extends Observable<? extends T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo(sequenceOfSequences));, +    }, +, +    /**, +        return ws.toList().mergeMap(new Func1<List<? extends Observable<?>>, Observable<? extends R>>() {, +        return mergeMap(func);, +    }, +    , +    /**, +     * Creates a new Observable by applying a function that you supply to each, +     * item emitted by the source Observable, where that function returns an, +     * Observable, and then merging those resulting Observables and emitting the, +     * results of this merger., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/flatMap.png">, +     * <p>, +     * Note: {@code mapMany} and {@code flatMap} are equivalent., +     * , +     * @param func a function that, when applied to an item emitted by the, +     *             source Observable, returns an Observable, +     * @return an Observable that emits the result of applying the, +     *         transformation function to each item emitted by the source, +     *         Observable and merging the results of the Observables obtained, +     *         from this transformation., +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#mapmany-or-flatmap-and-mapmanydelayerror">RxJava Wiki: flatMap()</a>, +     * @see #flatMap(Func1), +     */, +    public <R> Observable<R> mergeMap(Func1<? super T, ? extends Observable<? extends R>> func) {, +        return merge(map(func));, +    }, +    , +    /**, +     * Creates a new Observable by applying a function that you supply to each, +     * item emitted by the source Observable, where that function returns an, +     * Observable, and then concatting those resulting Observables and emitting the, +     * results of this concat., +     * <p>, +     * , +     * @param func a function that, when applied to an item emitted by the, +     *             source Observable, returns an Observable, +     * @return an Observable that emits the result of applying the, +     *         transformation function to each item emitted by the source, +     *         Observable and concatting the results of the Observables obtained, +     *         from this transformation., +     */, +    public <R> Observable<R> concatMap(Func1<? super T, ? extends Observable<? extends R>> func) {, +        return concat(map(func));, +    }, +    , +    /**, +     * Creates a new Observable by applying a function that you supply to each, +     * item emitted by the source Observable resulting in an Observable of Observables., +     * <p>, +     * Then a {@link #switchLatest(Observable)} / {@link #switchOnNext(Observable)} is applied., +     * , +     * @param func a function that, when applied to an item emitted by the, +     *             source Observable, returns an Observable, +     * @return an Observable that emits the result of applying the, +     *         transformation function to each item emitted by the source, +     *         Observable and then switch, +     */, +    public <R> Observable<R> switchMap(Func1<? super T, ? extends Observable<? extends R>> func) {, +        return switchOnNext(map(func));, +     * @deprecate just use zip with {@link Observable#range(int)}, +     * @deprecated, +        return mergeMap(func);, +     * @deprecated, +     * @deprecated, +    , +     * Invokes an action when the source Observable calls, +     * <code>onNext</code>., +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/doOnCompleted.png">, +     * @param onCompleted the action to invoke when the source Observable calls, +     *                    <code>onCompleted</code>, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#dooneach">RxJava Wiki: doOnNext()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229804.aspx">MSDN: Observable.Do</a>, +    public Observable<T> doOnNext(final Action1<T> onNext) {, +            public void onError(Throwable e) { }, +     * Invokes an action for each item emitted by the Observable., +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/doOnEach.png">, +     * @param observer the action to invoke for each item emitted by the source, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229307.aspx">MSDN: Observable.Do</a>, +    public Observable<T> doOnEach(final Action1<Notification<T>> onNotification) {, +                onNotification.call(new Notification<T>());, +                onNotification.call(new Notification<T>(e));, +            public void onNext(T v) {]