[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDebounce;, +import rx.operators.OperatorGroupByUntil;, +        return create(OperationDebounce.debounceSelector(this, debounceSelector));, +        return create(OperationDebounce.debounce(this, timeout, unit));, +        return create(OperationDebounce.debounce(this, timeout, unit, scheduler));, +        return lift(new OperatorGroupByUntil<T, TKey, TValue, TDuration>(keySelector, valueSelector, durationSelector));, +        return create(OperationDebounce.debounce(this, timeout, unit));, +        return create(OperationDebounce.debounce(this, timeout, unit, scheduler));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDebounce;, +import rx.operators.OperatorGroupByUntil;, +        return create(OperationDebounce.debounceSelector(this, debounceSelector));, +        return create(OperationDebounce.debounce(this, timeout, unit));, +        return create(OperationDebounce.debounce(this, timeout, unit, scheduler));, +        return lift(new OperatorGroupByUntil<T, TKey, TValue, TDuration>(keySelector, valueSelector, durationSelector));, +        return create(OperationDebounce.debounce(this, timeout, unit));, +        return create(OperationDebounce.debounce(this, timeout, unit, scheduler));, +++ b/rxjava-core/src/main/java/rx/operators/OperationDebounce.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Scheduler;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Action0;, +import rx.functions.Func1;, +import rx.observers.SerializedObserver;, +import rx.schedulers.Schedulers;, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.SerialSubscription;, +, +/**, + * This operation is used to filter out bursts of events. This is done by ignoring the events from an observable which are too, + * quickly followed up with other values. Values which are not followed up by other values within the specified timeout are published, + * as soon as the timeout expires., + */, +public final class OperationDebounce {, +, +    /**, +     * This operation filters out events which are published too quickly in succession. This is done by dropping events which are, +     * followed up by other events before a specified timer has expired. If the timer expires and no follow up event was published (yet), +     * the last received event is published., +     * , +     * @param items, +     *            The {@link Observable} which is publishing events., +     * @param timeout, +     *            How long each event has to be the 'last event' before it gets published., +     * @param unit, +     *            The unit of time for the specified timeout., +     * @return A {@link Func1} which performs the throttle operation., +     */, +    public static <T> OnSubscribeFunc<T> debounce(Observable<T> items, long timeout, TimeUnit unit) {, +        return debounce(items, timeout, unit, Schedulers.computation());, +    }, +, +    /**, +     * This operation filters out events which are published too quickly in succession. This is done by dropping events which are, +     * followed up by other events before a specified timer has expired. If the timer expires and no follow up event was published (yet), +     * the last received event is published., +     * , +     * @param items, +     *            The {@link Observable} which is publishing events., +     * @param timeout, +     *            How long each event has to be the 'last event' before it gets published., +     * @param unit, +     *            The unit of time for the specified timeout., +     * @param scheduler, +     *            The {@link Scheduler} to use internally to manage the timers which handle timeout for each event., +     * @return A {@link Func1} which performs the throttle operation., +     */, +    public static <T> OnSubscribeFunc<T> debounce(final Observable<T> items, final long timeout, final TimeUnit unit, final Scheduler scheduler) {, +        return new OnSubscribeFunc<T>() {, +            @Override, +            public Subscription onSubscribe(Observer<? super T> observer) {, +                return new Debounce<T>(items, timeout, unit, scheduler).onSubscribe(observer);, +            }, +        };, +    }, +]