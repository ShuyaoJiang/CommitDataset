[+++ b/build.gradle, +// apply plugin: 'pmd'  // disabled because runs out of memory on Travis, +// apply plugin: 'findbugs'  // disabled because runs out of memory on Travis, +/*, +*/, +++ b/build.gradle, +// apply plugin: 'pmd'  // disabled because runs out of memory on Travis, +// apply plugin: 'findbugs'  // disabled because runs out of memory on Travis, +/*, +*/, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +    final AtomicInteger subscriptionCount = new AtomicInteger();, +    final class ConnectionSubscriber, +    extends AtomicReference<Subscription>, +    implements Subscriber<T>, Subscription {, +        /** */, +        private static final long serialVersionUID = 152064694420235350L;, +        final AtomicLong requested;, +            this.requested = new AtomicLong();, +            SubscriptionHelper.deferredSetOnce(this, requested, s);, +            SubscriptionHelper.deferredRequest(this, requested, n);, +            SubscriptionHelper.cancel(this);, +        ConnectionSubscriber connection = new ConnectionSubscriber(subscriber, currentBase, d);, +        subscriber.onSubscribe(connection);, +        source.subscribe(connection);, +++ b/build.gradle, +// apply plugin: 'pmd'  // disabled because runs out of memory on Travis, +// apply plugin: 'findbugs'  // disabled because runs out of memory on Travis, +/*, +*/, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +    final AtomicInteger subscriptionCount = new AtomicInteger();, +    final class ConnectionSubscriber, +    extends AtomicReference<Subscription>, +    implements Subscriber<T>, Subscription {, +        /** */, +        private static final long serialVersionUID = 152064694420235350L;, +        final AtomicLong requested;, +            this.requested = new AtomicLong();, +            SubscriptionHelper.deferredSetOnce(this, requested, s);, +            SubscriptionHelper.deferredRequest(this, requested, n);, +            SubscriptionHelper.cancel(this);, +        ConnectionSubscriber connection = new ConnectionSubscriber(subscriber, currentBase, d);, +        subscriber.onSubscribe(connection);, +        source.subscribe(connection);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java, +    private Consumer<Disposable> onSubscribe(final Observer<? super T> observer,, +                    doSubscribe(observer, baseSubscription);, +    void doSubscribe(final Observer<? super T> observer, final CompositeDisposable currentBase) {, +        ConnectionSubscriber s = new ConnectionSubscriber(observer, currentBase, d);, +        observer.onSubscribe(s);, +    final class ConnectionSubscriber, +    extends AtomicReference<Disposable>, +    implements Observer<T>, Disposable {, +        /** */, +        private static final long serialVersionUID = 3813126992133394324L;, +, +            DisposableHelper.setOnce(this, s);, +            DisposableHelper.dispose(this);, +            return DisposableHelper.isDisposed(get());, +++ b/build.gradle, +// apply plugin: 'pmd'  // disabled because runs out of memory on Travis, +// apply plugin: 'findbugs'  // disabled because runs out of memory on Travis, +/*, +*/, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +    final AtomicInteger subscriptionCount = new AtomicInteger();, +    final class ConnectionSubscriber, +    extends AtomicReference<Subscription>, +    implements Subscriber<T>, Subscription {, +        /** */, +        private static final long serialVersionUID = 152064694420235350L;, +        final AtomicLong requested;, +            this.requested = new AtomicLong();, +            SubscriptionHelper.deferredSetOnce(this, requested, s);, +            SubscriptionHelper.deferredRequest(this, requested, n);, +            SubscriptionHelper.cancel(this);, +        ConnectionSubscriber connection = new ConnectionSubscriber(subscriber, currentBase, d);, +        subscriber.onSubscribe(connection);, +        source.subscribe(connection);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java, +    private Consumer<Disposable> onSubscribe(final Observer<? super T> observer,, +                    doSubscribe(observer, baseSubscription);, +    void doSubscribe(final Observer<? super T> observer, final CompositeDisposable currentBase) {, +        ConnectionSubscriber s = new ConnectionSubscriber(observer, currentBase, d);, +        observer.onSubscribe(s);, +    final class ConnectionSubscriber, +    extends AtomicReference<Disposable>, +    implements Observer<T>, Disposable {, +        /** */, +        private static final long serialVersionUID = 3813126992133394324L;, +, +            DisposableHelper.setOnce(this, s);, +            DisposableHelper.dispose(this);, +            return DisposableHelper.isDisposed(get());, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableWindowWithSizeTest.java, +                                Thread.sleep(5);]