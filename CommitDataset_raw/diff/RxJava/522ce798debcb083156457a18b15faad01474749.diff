[+++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +        private final ConcurrentHashMap<K, GroupState<K, T>> groups = new ConcurrentHashMap<K, GroupState<K, T>>();, +                final K key = keySelector.call(t);, +        private GroupState<K, T> createNewGroup(final K key) {, +            GroupedObservable<K, R> go = GroupedObservable.create(key, new OnSubscribe<R>() {, +        private void cleanupGroup(K key) {, +++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +        private final ConcurrentHashMap<K, GroupState<K, T>> groups = new ConcurrentHashMap<K, GroupState<K, T>>();, +                final K key = keySelector.call(t);, +        private GroupState<K, T> createNewGroup(final K key) {, +            GroupedObservable<K, R> go = GroupedObservable.create(key, new OnSubscribe<R>() {, +        private void cleanupGroup(K key) {, +++ b/src/main/java/rx/internal/operators/OperatorSampleWithTime.java, +        child.add(sampler);, +++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +        private final ConcurrentHashMap<K, GroupState<K, T>> groups = new ConcurrentHashMap<K, GroupState<K, T>>();, +                final K key = keySelector.call(t);, +        private GroupState<K, T> createNewGroup(final K key) {, +            GroupedObservable<K, R> go = GroupedObservable.create(key, new OnSubscribe<R>() {, +        private void cleanupGroup(K key) {, +++ b/src/main/java/rx/internal/operators/OperatorSampleWithTime.java, +        child.add(sampler);, +++ b/src/test/java/rx/internal/operators/OperatorGroupByTest.java, +++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +        private final ConcurrentHashMap<K, GroupState<K, T>> groups = new ConcurrentHashMap<K, GroupState<K, T>>();, +                final K key = keySelector.call(t);, +        private GroupState<K, T> createNewGroup(final K key) {, +            GroupedObservable<K, R> go = GroupedObservable.create(key, new OnSubscribe<R>() {, +        private void cleanupGroup(K key) {, +++ b/src/main/java/rx/internal/operators/OperatorSampleWithTime.java, +        child.add(sampler);, +++ b/src/test/java/rx/internal/operators/OperatorGroupByTest.java, +++ b/src/test/java/rx/internal/operators/OperatorSampleTest.java, +import rx.*;, +import rx.subscriptions.Subscriptions;, +, +    @Test, +    public void testSampleUnsubscribe() {, +        final Subscription s = mock(Subscription.class);, +        Observable<Integer> o = Observable.create(, +                new OnSubscribe<Integer>() {, +                    @Override, +                    public void call(Subscriber<? super Integer> subscriber) {, +                        subscriber.add(s);, +                    }, +                }, +        );, +        o.throttleLast(1, TimeUnit.MILLISECONDS).subscribe().unsubscribe();, +        verify(s).unsubscribe();, +    }]