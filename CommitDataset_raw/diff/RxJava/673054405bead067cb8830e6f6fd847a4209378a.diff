[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Groups the items emitted by this Observable according to a specified discriminator function., +   * @param f, +   *            the type of keys returned by the discriminator function., +   * @return an Observable that emits {@code (key, observable)} pairs, where {@code observable}, +   *         contains all items for which {@code f} returned {@code key}., +  def groupBy[K](f: T => K): Observable[(K, Observable[T])] = {, +    val o1 = asJava.groupBy[K](f) : rx.Observable[_ <: rx.observables.GroupedObservable[K, _ <: T]] , +    val func = (o: rx.observables.GroupedObservable[K, _ <: T]) => (o.getKey(), Observable[T](o)), +    Observable[(K, Observable[T])](o1.map[(K, Observable[T])](func)), +  // There's no method corresponding to, +  // public <K, R> Observable<GroupedObservable<K, R>> groupBy(final Func1<? super T, ? extends K> keySelector, final Func1<? super T, ? extends R> elementSelector) , +  // because this can be obtained by combining groupBy and map (as in Scala), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Groups the items emitted by this Observable according to a specified discriminator function., +   * @param f, +   *            the type of keys returned by the discriminator function., +   * @return an Observable that emits {@code (key, observable)} pairs, where {@code observable}, +   *         contains all items for which {@code f} returned {@code key}., +  def groupBy[K](f: T => K): Observable[(K, Observable[T])] = {, +    val o1 = asJava.groupBy[K](f) : rx.Observable[_ <: rx.observables.GroupedObservable[K, _ <: T]] , +    val func = (o: rx.observables.GroupedObservable[K, _ <: T]) => (o.getKey(), Observable[T](o)), +    Observable[(K, Observable[T])](o1.map[(K, Observable[T])](func)), +  // There's no method corresponding to, +  // public <K, R> Observable<GroupedObservable<K, R>> groupBy(final Func1<? super T, ? extends K> keySelector, final Func1<? super T, ? extends R> elementSelector) , +  // because this can be obtained by combining groupBy and map (as in Scala), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/examples/Olympics.scala, +package rx.lang.scala.examples, +, +object Olympics {, +  case class Medal(val year: Int, val games: String, val discipline: String, val medal: String, val athlete: String, val country: String), +  , +  val mountainBikeMedals = List(, +    Medal(2012, "London 2012", "cross-country men", "Gold", "Jaroslav KULHAVY", "Czech Republic"),, +    Medal(2012, "London 2012", "cross-country men", "Silver", "Nino SCHURTER", "Switzerland"),, +    Medal(2012, "London 2012", "cross-country men", "Bronze", "Marco Aurelio FONTANA", "Italy"),, +    Medal(2012, "London 2012", "cross-country women", "Gold", "Julie BRESSET", "France"),, +    Medal(2012, "London 2012", "cross-country women", "Silver", "Sabine SPITZ", "Germany"),, +    Medal(2012, "London 2012", "cross-country women", "Bronze", "Georgia GOULD", "United States of America"),, +    Medal(2008, "Beijing 2008", "cross-country women", "Gold", "Sabine SPITZ", "Germany"),, +    Medal(2008, "Beijing 2008", "cross-country women", "Silver", "Maja WLOSZCZOWSKA", "Poland"),, +    Medal(2008, "Beijing 2008", "cross-country women", "Bronze", "Irina KALENTYEVA", "Russian Federation"),, +    Medal(2008, "Beijing 2008", "cross-country men", "Gold", "Julien ABSALON", "France"),, +    Medal(2008, "Beijing 2008", "cross-country men", "Silver", "Jean-Christophe PERAUD", "France"),, +    Medal(2008, "Beijing 2008", "cross-country men", "Bronze", "Nino SCHURTER", "Switzerland"),, +    Medal(2004, "Athens 2004", "cross-country men", "Gold", "Julien ABSALON", "France"),, +    Medal(2004, "Athens 2004", "cross-country men", "Silver", "Jose Antonio HERMIDA RAMOS", "Spain"),, +    Medal(2004, "Athens 2004", "cross-country men", "Bronze", "Bart BRENTJENS", "Netherlands"),, +    Medal(2004, "Athens 2004", "cross-country women", "Gold", "Gunn-Rita DAHLE", "Norway"),, +    Medal(2004, "Athens 2004", "cross-country women", "Silver", "Marie-Helene PREMONT", "Canada"),, +    Medal(2004, "Athens 2004", "cross-country women", "Bronze", "Sabine SPITZ", "Germany"),, +    Medal(2000, "Sydney 2000", "cross-country women", "Gold", "Paola PEZZO", "Italy"),, +    Medal(2000, "Sydney 2000", "cross-country women", "Silver", "Barbara BLATTER", "Switzerland"),, +    Medal(2000, "Sydney 2000", "cross-country women", "Bronze", "Marga FULLANA", "Spain"),, +    Medal(2000, "Sydney 2000", "cross-country men", "Gold", "Miguel MARTINEZ", "France"),, +    Medal(2000, "Sydney 2000", "cross-country men", "Silver", "Filip MEIRHAEGHE", "Belgium"),, +    Medal(2000, "Sydney 2000", "cross-country men", "Bronze", "Christoph SAUSER", "Switzerland"),, +    Medal(1996, "Atlanta 1996", "cross-country men", "Silver", "Thomas FRISCHKNECHT", "Switzerland"),, +    Medal(1996, "Atlanta 1996", "cross-country men", "Bronze", "Miguel MARTINEZ", "France"),, +    Medal(1996, "Atlanta 1996", "cross-country men", "Gold", "Bart BRENTJENS", "Netherlands"),, +    Medal(1996, "Atlanta 1996", "cross-country women", "Gold", "Paola PEZZO", "Italy"),, +    Medal(1996, "Atlanta 1996", "cross-country women", "Silver", "Alison SYDOR", "Canada"),, +    Medal(1996, "Atlanta 1996", "cross-country women", "Bronze", "Susan DEMATTEI", "United States of America"), +  ).reverse, +  , +}, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Groups the items emitted by this Observable according to a specified discriminator function., +   * @param f, +   *            the type of keys returned by the discriminator function., +   * @return an Observable that emits {@code (key, observable)} pairs, where {@code observable}, +   *         contains all items for which {@code f} returned {@code key}., +  def groupBy[K](f: T => K): Observable[(K, Observable[T])] = {, +    val o1 = asJava.groupBy[K](f) : rx.Observable[_ <: rx.observables.GroupedObservable[K, _ <: T]] , +    val func = (o: rx.observables.GroupedObservable[K, _ <: T]) => (o.getKey(), Observable[T](o)), +    Observable[(K, Observable[T])](o1.map[(K, Observable[T])](func)), +  // There's no method corresponding to, +  // public <K, R> Observable<GroupedObservable<K, R>> groupBy(final Func1<? super T, ? extends K> keySelector, final Func1<? super T, ? extends R> elementSelector) , +  // because this can be obtained by combining groupBy and map (as in Scala), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/examples/Olympics.scala, +package rx.lang.scala.examples, +, +object Olympics {, +  case class Medal(val year: Int, val games: String, val discipline: String, val medal: String, val athlete: String, val country: String), +  , +  val mountainBikeMedals = List(, +    Medal(2012, "London 2012", "cross-country men", "Gold", "Jaroslav KULHAVY", "Czech Republic"),, +    Medal(2012, "London 2012", "cross-country men", "Silver", "Nino SCHURTER", "Switzerland"),, +    Medal(2012, "London 2012", "cross-country men", "Bronze", "Marco Aurelio FONTANA", "Italy"),, +    Medal(2012, "London 2012", "cross-country women", "Gold", "Julie BRESSET", "France"),, +    Medal(2012, "London 2012", "cross-country women", "Silver", "Sabine SPITZ", "Germany"),, +    Medal(2012, "London 2012", "cross-country women", "Bronze", "Georgia GOULD", "United States of America"),, +    Medal(2008, "Beijing 2008", "cross-country women", "Gold", "Sabine SPITZ", "Germany"),, +    Medal(2008, "Beijing 2008", "cross-country women", "Silver", "Maja WLOSZCZOWSKA", "Poland"),, +    Medal(2008, "Beijing 2008", "cross-country women", "Bronze", "Irina KALENTYEVA", "Russian Federation"),, +    Medal(2008, "Beijing 2008", "cross-country men", "Gold", "Julien ABSALON", "France"),, +    Medal(2008, "Beijing 2008", "cross-country men", "Silver", "Jean-Christophe PERAUD", "France"),, +    Medal(2008, "Beijing 2008", "cross-country men", "Bronze", "Nino SCHURTER", "Switzerland"),, +    Medal(2004, "Athens 2004", "cross-country men", "Gold", "Julien ABSALON", "France"),, +    Medal(2004, "Athens 2004", "cross-country men", "Silver", "Jose Antonio HERMIDA RAMOS", "Spain"),]