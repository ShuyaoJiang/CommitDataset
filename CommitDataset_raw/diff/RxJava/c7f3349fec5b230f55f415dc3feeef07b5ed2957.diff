[+++ b/docs/Creating-Observables.md, +This page shows methods that create reactive sources, such as `Observable`s., +### Outline, +, +- [`create`](#create), +- [`defer`](#defer), +- [`empty`](#empty), +- [`error`](#error), +- [`from`](#from), +- [`interval`](#interval), +- [`just`](#just), +- [`never`](#never), +- [`range`](#range), +- [`timer`](#timer), +, +## just, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +**ReactiveX doumentation:** [http://reactivex.io/documentation/operators/just.html](http://reactivex.io/documentation/operators/just.html), +, +Constructs a reactive type by taking a pre-existing object and emitting that specific object to the downstream consumer upon subscription., +, +#### just example:, +, +```java, +String greeting = "Hello world!";, +, +Observable<String> observable = Observable.just(greeting);, +, +observable.subscribe(item -> System.out.println(item));, +```, +, +There exist overloads with 2 to 9 arguments for convenience, which objects (with the same common type) will be emitted in the order they are specified., +, +```java, +Observable<Object> observable = Observable.just("1", "A", "3.2", "def");, +, +observable.subscribe(item -> System.out.print(item), error -> error.printStackTrace, , +    () -> System.out.println());, +```, +, +## From, +, +Constructs a sequence from a pre-existing source or generator type. , +, +*Note: These static methods use the postfix naming convention (i.e., the argument type is repeated in the method name) to avoid overload resolution ambiguities.*, +, +**ReactiveX doumentation:** [http://reactivex.io/documentation/operators/from.html](http://reactivex.io/documentation/operators/from.html), +, +### fromIterable, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +Signals the items from a `java.lang.Iterable` source (such as `List`s, `Set`s or `Collection`s or custom `Iterable`s) and then completes the sequence., +, +#### fromIterable example:, +, +```java, +List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8));, +, +Observable<Integer> observable = Observable.fromIterable(list);, +, +observable.subscribe(item -> System.out.println(item), error -> error.printStackTrace(), , +     () -> System.out.println("Done"));, +```, +, +### fromArray, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +Signals the elements of the given array and then completes the sequence., +, +#### fromArray example:, +, +```java, +Integer[] array = new Integer[10];, +for (int i = 0; i < array.length; i++) {, +    array[i] = i;, +}, +, +Observable<Integer> observable = Observable.fromIterable(array);, +, +observable.subscribe(item -> System.out.println(item), error -> error.printStackTrace(), , +     () -> System.out.println("Done"));, +```, +, +*Note: RxJava does not support primitive arrays, only (generic) reference arrays.*, +, +### fromCallable, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Completable`, +, +When a consumer subscribes, the given `java.util.concurrent.Callable` is invoked and its returned value (or thrown exception) is relayed to that consumer., +, +#### fromCallable example:, +, +```java, +Callable<String> callable = () -> {, +    System.out.println("Hello World!");]