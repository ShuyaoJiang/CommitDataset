[+++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +  val commentForTakeLastBuffer = "[use `takeRight(...).toSeq`]", +      "buffer(Func0[_ <: Observable[_ <: TClosing]])" -> "buffer(() => Observable[Any])",, +      "buffer(Observable[B])" -> "buffer(Observable[Any])",, +      "buffer(Observable[B], Int)" -> "buffer(Observable[Any], Int)",, +      "buffer(Observable[_ <: TOpening], Func1[_ >: TOpening, _ <: Observable[_ <: TClosing]])" -> "buffer(Observable[Opening], Opening => Observable[Any])",, +      "delay(Func0[_ <: Observable[U]], Func1[_ >: T, _ <: Observable[V]])" -> "delay(() => Observable[Any], T => Observable[Any])",, +      "delay(Func1[_ >: T, _ <: Observable[U]])" -> "delay(T => Observable[Any])",, +      "takeLast(Long, TimeUnit)" -> "takeRight(Duration)",, +      "takeLast(Long, TimeUnit, Scheduler)" -> "takeRight(Duration, Scheduler)",, +      "takeLast(Int, Long, TimeUnit)" -> "takeRight(Int, Duration)",, +      "takeLast(Int, Long, TimeUnit, Scheduler)" -> "takeRight(Int, Duration, Scheduler)",, +      "takeLastBuffer(Int)" -> commentForTakeLastBuffer,, +      "takeLastBuffer(Int, Long, TimeUnit)" -> commentForTakeLastBuffer,, +      "takeLastBuffer(Int, Long, TimeUnit, Scheduler)" -> commentForTakeLastBuffer,, +      "takeLastBuffer(Long, TimeUnit)" -> commentForTakeLastBuffer,, +      "takeLastBuffer(Long, TimeUnit, Scheduler)" -> commentForTakeLastBuffer,, +      "sequenceEqual(Observable[_ <: T], Observable[_ <: T])" -> "sequenceEqual(Observable[U])",, +      "sequenceEqual(Observable[_ <: T], Observable[_ <: T], Func2[_ >: T, _ >: T, Boolean])" -> "sequenceEqual(Observable[U], (U, U) => Boolean)",]