[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import static rx.util.functions.Functions.not;, +import java.util.Collections;, +    public Observable<T> reduce(Func2<T, T, T> accumulator) {, +    public Observable<T> aggregate(Func2<T, T, T> accumulator) {, +    public Observable<T> scan(Func2<T, T, T> accumulator) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static rx.util.functions.Functions.not;, +import java.util.Collections;, +    public Observable<T> reduce(Func2<T, T, T> accumulator) {, +    public Observable<T> aggregate(Func2<T, T, T> accumulator) {, +    public Observable<T> scan(Func2<T, T, T> accumulator) {, +++ b/rxjava-core/src/main/java/rx/concurrency/TestScheduler.java, +import rx.subscriptions.Subscriptions;, +        queue.add(new TimedAction<T>(this, time + unit.toNanos(delayTime), action, state));, +        return Subscriptions.empty();, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static rx.util.functions.Functions.not;, +import java.util.Collections;, +    public Observable<T> reduce(Func2<T, T, T> accumulator) {, +    public Observable<T> aggregate(Func2<T, T, T> accumulator) {, +    public Observable<T> scan(Func2<T, T, T> accumulator) {, +++ b/rxjava-core/src/main/java/rx/concurrency/TestScheduler.java, +import rx.subscriptions.Subscriptions;, +        queue.add(new TimedAction<T>(this, time + unit.toNanos(delayTime), action, state));, +        return Subscriptions.empty();, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static rx.util.functions.Functions.not;, +import java.util.Collections;, +    public Observable<T> reduce(Func2<T, T, T> accumulator) {, +    public Observable<T> aggregate(Func2<T, T, T> accumulator) {, +    public Observable<T> scan(Func2<T, T, T> accumulator) {, +++ b/rxjava-core/src/main/java/rx/concurrency/TestScheduler.java, +import rx.subscriptions.Subscriptions;, +        queue.add(new TimedAction<T>(this, time + unit.toNanos(delayTime), action, state));, +        return Subscriptions.empty();, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperationScan.java, +    public static <T> OnSubscribeFunc<T> scan(Observable<? extends T> sequence, Func2<T, T, T> accumulator) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static rx.util.functions.Functions.not;, +import java.util.Collections;, +    public Observable<T> reduce(Func2<T, T, T> accumulator) {, +    public Observable<T> aggregate(Func2<T, T, T> accumulator) {, +    public Observable<T> scan(Func2<T, T, T> accumulator) {, +++ b/rxjava-core/src/main/java/rx/concurrency/TestScheduler.java, +import rx.subscriptions.Subscriptions;, +        queue.add(new TimedAction<T>(this, time + unit.toNanos(delayTime), action, state));, +        return Subscriptions.empty();, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperationScan.java, +    public static <T> OnSubscribeFunc<T> scan(Observable<? extends T> sequence, Func2<T, T, T> accumulator) {, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static rx.util.functions.Functions.not;, +import java.util.Collections;, +    public Observable<T> reduce(Func2<T, T, T> accumulator) {, +    public Observable<T> aggregate(Func2<T, T, T> accumulator) {, +    public Observable<T> scan(Func2<T, T, T> accumulator) {, +++ b/rxjava-core/src/main/java/rx/concurrency/TestScheduler.java, +import rx.subscriptions.Subscriptions;, +        queue.add(new TimedAction<T>(this, time + unit.toNanos(delayTime), action, state));, +        return Subscriptions.empty();, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperationScan.java, +    public static <T> OnSubscribeFunc<T> scan(Observable<? extends T> sequence, Func2<T, T, T> accumulator) {, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/SynchronizedObserver.java, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static rx.util.functions.Functions.not;, +import java.util.Collections;, +    public Observable<T> reduce(Func2<T, T, T> accumulator) {, +    public Observable<T> aggregate(Func2<T, T, T> accumulator) {, +    public Observable<T> scan(Func2<T, T, T> accumulator) {, +++ b/rxjava-core/src/main/java/rx/concurrency/TestScheduler.java, +import rx.subscriptions.Subscriptions;, +        queue.add(new TimedAction<T>(this, time + unit.toNanos(delayTime), action, state));, +        return Subscriptions.empty();, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperationScan.java, +    public static <T> OnSubscribeFunc<T> scan(Observable<? extends T> sequence, Func2<T, T, T> accumulator) {, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/SynchronizedObserver.java, +++ b/rxjava-core/src/test/java/rx/CovarianceTest.java, +import rx.util.functions.Func2;, +, +    @Test, +    public void testSortedList() {, +        Func2<Media, Media, Integer> SORT_FUNCTION = new Func2<Media, Media, Integer>() {, +, +            @Override, +            public Integer call(Media t1, Media t2) {, +                return 1;, +            }, +        };, +, +        // this one would work without the covariance generics, +        Observable<Media> o = Observable.from(new Movie(), new TVSeason(), new Album());, +        o.toSortedList(SORT_FUNCTION);]