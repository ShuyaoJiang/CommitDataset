[+++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/Async.java, + * Copyright 2013 Netflix, Inc., +import rx.util.async.operators.OperationDeferFuture;, +import rx.util.async.operators.OperationForEachFuture;, +import rx.util.async.operators.OperationFromFunctionals;, +import rx.util.async.operators.OperationStartFuture;, +        return OperationStartFuture.startFuture(functionAsync);, +        return OperationStartFuture.startFuture(functionAsync, scheduler);, +        return OperationDeferFuture.deferFuture(observableFactoryAsync);, +        return OperationDeferFuture.deferFuture(observableFactoryAsync, scheduler);, +     * @see #forEachFuture(rx.functions.Action1, rx.Scheduler), +        return OperationForEachFuture.forEachFuture(source, onNext);, +     * @see #forEachFuture(rx.functions.Action1, rx.functions.Action1, rx.Scheduler), +        return OperationForEachFuture.forEachFuture(source, onNext, onError);, +     * @see #forEachFuture(rx.functions.Action1, rx.functions.Action1, rx.functions.Action0, rx.Scheduler), +        return OperationForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        FutureTask<Void> task = OperationForEachFuture.forEachFuture(source, onNext);, +        FutureTask<Void> task = OperationForEachFuture.forEachFuture(source, onNext, onError);, +        FutureTask<Void> task = OperationForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +     * Return an Observable that calls the given function and emits its, +     * result when an Observer subscribes., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/fromFunc0.png">, +     * <p>, +     * The function is called on the default thread pool for computation., +     * , +     * @param <R> the return type, +     * @param function the function to call on each subscription, +     * @return an Observable that calls the given function and emits its, +     *         result when an Observer subscribes, +     * @see #start(rx.functions.Func0) , +     * @see #fromCallable(java.util.concurrent.Callable) , +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Async-Operators#fromfunc0">RxJava Wiki: fromFunc0()</a>, +     *, +     * @deprecated  Unnecessary now that Func0 extends Callable. Just call, +     *              {@link #fromCallable(Callable)} instead., +     */, +    @Deprecated, +    public static <R> Observable<R> fromFunc0(Func0<? extends R> function) {, +        return fromCallable(function);, +    }, +, +    /**, +     * @see #fromFunc0(rx.functions.Func0) , +        return Observable.create(OperationFromFunctionals.fromAction(action, result)).subscribeOn(scheduler);, +    }, +    , +    /**, +     * Return an Observable that calls the given function and emits its, +     * result when an Observer subscribes., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/fromFunc0.s.png">, +     * , +     * @param <R> the return type, +     * @param function the function to call on each subscription, +     * @param scheduler the scheduler where the function is called and the, +     *                  result is emitted, +     * @return an Observable that calls the given function and emits its, +     *         result when an Observer subscribes, +     * @see #start(rx.functions.Func0) , +     * @see #fromCallable(java.util.concurrent.Callable) , +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Async-Operators#fromfunc0">RxJava Wiki: fromFunc0()</a>, +     *, +     * @deprecated  Unnecessary now that Func0 extends Callable. Just call, +     *              {@link #fromCallable(Callable, Scheduler)} instead., +     */, +    @Deprecated, +    public static <R> Observable<R> fromFunc0(Func0<? extends R> function, Scheduler scheduler) {, +        return fromCallable(function, scheduler);, +     * @see #fromFunc0(rx.functions.Func0) , +        return Observable.create(OperationFromFunctionals.fromCallable(callable)).subscribeOn(scheduler);, +        return Observable.create(OperationFromFunctionals.fromRunnable(run, result)).subscribeOn(scheduler);, +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/Async.java, + * Copyright 2013 Netflix, Inc., +import rx.util.async.operators.OperationDeferFuture;, +import rx.util.async.operators.OperationForEachFuture;, +import rx.util.async.operators.OperationFromFunctionals;, +import rx.util.async.operators.OperationStartFuture;, +        return OperationStartFuture.startFuture(functionAsync);, +        return OperationStartFuture.startFuture(functionAsync, scheduler);, +        return OperationDeferFuture.deferFuture(observableFactoryAsync);, +        return OperationDeferFuture.deferFuture(observableFactoryAsync, scheduler);, +     * @see #forEachFuture(rx.functions.Action1, rx.Scheduler), +        return OperationForEachFuture.forEachFuture(source, onNext);, +     * @see #forEachFuture(rx.functions.Action1, rx.functions.Action1, rx.Scheduler), +        return OperationForEachFuture.forEachFuture(source, onNext, onError);, +     * @see #forEachFuture(rx.functions.Action1, rx.functions.Action1, rx.functions.Action0, rx.Scheduler), +        return OperationForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        FutureTask<Void> task = OperationForEachFuture.forEachFuture(source, onNext);, +        FutureTask<Void> task = OperationForEachFuture.forEachFuture(source, onNext, onError);, +        FutureTask<Void> task = OperationForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +     * Return an Observable that calls the given function and emits its, +     * result when an Observer subscribes., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/fromFunc0.png">, +     * <p>, +     * The function is called on the default thread pool for computation., +     * , +     * @param <R> the return type, +     * @param function the function to call on each subscription]