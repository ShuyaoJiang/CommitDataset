[+++ b/language-adaptors/rxjava-scala/build.gradle, +            //srcDir 'src/examples/java', +            //srcDir 'src/examples/java', +++ b/language-adaptors/rxjava-scala/build.gradle, +            //srcDir 'src/examples/java', +            //srcDir 'src/examples/java', +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Invokes an action when the source Observable calls <code>onNext</code>., +   *, +   * @param onNext the action to invoke when the source Observable calls <code>onNext</code>, +   * @return the source Observable with the side-effecting behavior applied, +   */, +  def doOnNext(onNext: T => Unit): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.doOnNext(onNext)), +  }, +, +  /**, +   * Invokes an action if the source Observable calls <code>onError</code>., +   *, +   * @param onError the action to invoke if the source Observable calls, +   *                <code>onError</code>, +   * @return the source Observable with the side-effecting behavior applied, +   */, +  def doOnError(onError: Throwable => Unit): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.doOnError(onError)), +  }, +, +  /**, +   * Invokes an action when the source Observable calls <code>onCompleted</code>., +   *, +   * @param onCompleted the action to invoke when the source Observable calls, +   *                    <code>onCompleted</code>, +   * @return the source Observable with the side-effecting behavior applied, +   */, +  def doOnCompleted(onCompleted: () => Unit): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.doOnCompleted(onCompleted)), +  }, +, +  /**, +    toScalaObservable[T](asJavaObservable.doOnNext(onNext)), +    toScalaObservable[T](asJavaObservable.doOnEach(Observer(onNext, onError, ()=>{}))), +    toScalaObservable[T](asJavaObservable.doOnEach(Observer(onNext, onError,onCompleted))), +++ b/language-adaptors/rxjava-scala/build.gradle, +            //srcDir 'src/examples/java', +            //srcDir 'src/examples/java', +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Invokes an action when the source Observable calls <code>onNext</code>., +   *, +   * @param onNext the action to invoke when the source Observable calls <code>onNext</code>, +   * @return the source Observable with the side-effecting behavior applied, +   */, +  def doOnNext(onNext: T => Unit): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.doOnNext(onNext)), +  }, +, +  /**, +   * Invokes an action if the source Observable calls <code>onError</code>., +   *, +   * @param onError the action to invoke if the source Observable calls, +   *                <code>onError</code>, +   * @return the source Observable with the side-effecting behavior applied, +   */, +  def doOnError(onError: Throwable => Unit): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.doOnError(onError)), +  }, +, +  /**, +   * Invokes an action when the source Observable calls <code>onCompleted</code>., +   *, +   * @param onCompleted the action to invoke when the source Observable calls, +   *                    <code>onCompleted</code>, +   * @return the source Observable with the side-effecting behavior applied, +   */, +  def doOnCompleted(onCompleted: () => Unit): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.doOnCompleted(onCompleted)), +  }, +, +  /**, +    toScalaObservable[T](asJavaObservable.doOnNext(onNext)), +    toScalaObservable[T](asJavaObservable.doOnEach(Observer(onNext, onError, ()=>{}))), +    toScalaObservable[T](asJavaObservable.doOnEach(Observer(onNext, onError,onCompleted))), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subscriptions/BooleanSubscription.scala, +  override val asJavaSubscription: rx.subscriptions.BooleanSubscription = boolean, +}, +, +/*, +new rx.subscriptions.BooleanSubscription() {, + */, +++ b/language-adaptors/rxjava-scala/build.gradle, +            //srcDir 'src/examples/java', +            //srcDir 'src/examples/java', +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Invokes an action when the source Observable calls <code>onNext</code>., +   *, +   * @param onNext the action to invoke when the source Observable calls <code>onNext</code>, +   * @return the source Observable with the side-effecting behavior applied, +   */, +  def doOnNext(onNext: T => Unit): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.doOnNext(onNext)), +  }]