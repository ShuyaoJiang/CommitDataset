[+++ b/src/main/java/io/reactivex/Observable.java, +    final Publisher<T> onSubscribe;, +    protected Observable(Publisher<T> onSubscribe) {, +    public static <T> Observable<T> create(Publisher<T> onSubscribe) {, +            onSubscribe.subscribe(s);, +    /**, +     * Interface to map/wrap a downstream subscriber to an upstream subscriber., +     *, +     * @param <Downstream> the value type of the downstream, +     * @param <Upstream> the value type of the upstream, +     */, +    public interface Operator<Downstream, Upstream> extends Function<Subscriber<? super Downstream>, Subscriber<? super Upstream>> {, +        , +    }, +    , +    public final <R> Observable<R> lift(Operator<? extends R, ? super T> lifter) {, +                onSubscribe.subscribe(st);, +++ b/src/main/java/io/reactivex/Observable.java, +    final Publisher<T> onSubscribe;, +    protected Observable(Publisher<T> onSubscribe) {, +    public static <T> Observable<T> create(Publisher<T> onSubscribe) {, +            onSubscribe.subscribe(s);, +    /**, +     * Interface to map/wrap a downstream subscriber to an upstream subscriber., +     *, +     * @param <Downstream> the value type of the downstream, +     * @param <Upstream> the value type of the upstream, +     */, +    public interface Operator<Downstream, Upstream> extends Function<Subscriber<? super Downstream>, Subscriber<? super Upstream>> {, +        , +    }, +    , +    public final <R> Observable<R> lift(Operator<? extends R, ? super T> lifter) {, +                onSubscribe.subscribe(st);, +++ b/src/main/java/io/reactivex/internal/util/AppendOnlyLinkedArrayList.java, +package io.reactivex.internal.util;, +, +import java.util.function.*;, +, +/**, + * A linked-array-list implementation that only supports appending and consumption., + *, + * @param <T> the value type, + */, +public class AppendOnlyLinkedArrayList<T> {, +    final int capacity;, +    Object[] head;, +    Object[] tail;, +    int offset;, +    , +    /**, +     * Constructs an empty list with a per-link capacity, +     * @param capacity the capacity of each link, +     */, +    public AppendOnlyLinkedArrayList(int capacity) {, +        this.capacity = capacity;, +        this.head = new Object[capacity + 1];, +        this.tail = head;, +    }, +    , +    /**, +     * Append a non-null value to the list., +     * <p>Don't add null to the list!, +     * @param value the value to append, +     */, +    public void add(T value) {, +        final int c = capacity;, +        int o = offset;, +        if (o == c) {, +            Object[] next = new Object[c + 1];, +            tail[c] = next;, +            tail = next;, +            o = 0;, +        }, +        tail[o] = value;, +        offset = o + 1;, +    }, +    , +    /**, +     * Set a value as the first element of the list., +     * @param value the value to set, +     */, +    public void setFirst(T value) {, +        head[0] = value;, +    }, +    , +    /**, +     * Loops through all elements of the list., +     * @param consumer the consumer of elements, +     */, +    @SuppressWarnings("unchecked"), +    public void forEach(Consumer<? super T> consumer) {, +        Object[] a = head;, +        final int c = capacity;, +        while (a != null) {, +            for (int i = 0; i < c; i++) {, +                Object o = a[i];, +                if (o == null) {, +                    return;, +                }]