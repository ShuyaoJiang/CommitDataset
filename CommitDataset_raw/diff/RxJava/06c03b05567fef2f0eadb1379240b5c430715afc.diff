[+++ b/language-adaptors/rxjava-scala/README.md, +Observable.just(1, 2, 3, 4).reduce(_ + _), +val first = Observable.just(10, 11, 12), +val second = Observable.just(10, 11, 12), +++ b/language-adaptors/rxjava-scala/README.md, +Observable.just(1, 2, 3, 4).reduce(_ + _), +val first = Observable.just(10, 11, 12), +val second = Observable.just(10, 11, 12), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  def mountainBikeMedals: Observable[Medal] = Observable.just(, +    Observable.just(, +    Observable.just(, +    Observable.just(, +    Observable.just(, +    Observable.just(, +    (Observable.from(1996 to 2014) zip (Observable.just(-1) ++ Observable.interval(oneYear))).map(_._1), +++ b/language-adaptors/rxjava-scala/README.md, +Observable.just(1, 2, 3, 4).reduce(_ + _), +val first = Observable.just(10, 11, 12), +val second = Observable.just(10, 11, 12), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  def mountainBikeMedals: Observable[Medal] = Observable.just(, +    Observable.just(, +    Observable.just(, +    Observable.just(, +    Observable.just(, +    Observable.just(, +    (Observable.from(1996 to 2014) zip (Observable.just(-1) ++ Observable.interval(oneYear))).map(_._1), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val o = Observable.just(1, 2, 3), +    val xs = Observable.just(1, 3, 5, 7), +    val ys = Observable.just(2, 4, 6, 8), +      (i: Int) => Observable.just(i).delay(i millis), +      (i: Int) => Observable.just(i).delay(i millis), +    val o = Observable.just(10, 100), +    val o = Observable.just(10, 100), +    val o = Observable.just(10, 100), +    val o = Observable.just(1, 10, 100, 1000), +    val o = Observable.just(10, 100), +    val o = Observable.just(1, 10, 100, 1000), +    val o = Observable.just(10, 100), +    o.onErrorResumeNext(_ => Observable.just(10, 11, 12)).subscribe(println(_)), +    o.onErrorFlatMap((_, _) => Observable.just(10, 11, 12)).subscribe(println(_)), +    val o = Observable.just(4, 2, 0).map(16 / _).onErrorFlatMap {, +        case Some(v) if v == 0 => Observable.just(Int.MinValue), +++ b/language-adaptors/rxjava-scala/README.md, +Observable.just(1, 2, 3, 4).reduce(_ + _), +val first = Observable.just(10, 11, 12), +val second = Observable.just(10, 11, 12), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  def mountainBikeMedals: Observable[Medal] = Observable.just(, +    Observable.just(, +    Observable.just(, +    Observable.just(, +    Observable.just(, +    Observable.just(, +    (Observable.from(1996 to 2014) zip (Observable.just(-1) ++ Observable.interval(oneYear))).map(_._1), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val o = Observable.just(1, 2, 3), +    val xs = Observable.just(1, 3, 5, 7), +    val ys = Observable.just(2, 4, 6, 8), +      (i: Int) => Observable.just(i).delay(i millis), +      (i: Int) => Observable.just(i).delay(i millis), +    val o = Observable.just(10, 100), +    val o = Observable.just(10, 100), +    val o = Observable.just(10, 100), +    val o = Observable.just(1, 10, 100, 1000), +    val o = Observable.just(10, 100), +    val o = Observable.just(1, 10, 100, 1000), +    val o = Observable.just(10, 100), +    o.onErrorResumeNext(_ => Observable.just(10, 11, 12)).subscribe(println(_)), +    o.onErrorFlatMap((_, _) => Observable.just(10, 11, 12)).subscribe(println(_)), +    val o = Observable.just(4, 2, 0).map(16 / _).onErrorFlatMap {, +        case Some(v) if v == 0 => Observable.just(Int.MinValue), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +    this ++ Observable.just(elem), +  @deprecated("Use `just` instead", "0.20"), +  /**, +   * Converts a sequence of values into an Observable., +   *, +   * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/from.png">, +   *, +   * Implementation note: the entire array will be immediately emitted each time an [[rx.lang.scala.Observer]] subscribes., +   * Since this occurs before the [[rx.lang.scala.Subscription]] is returned,, +   * it in not possible to unsubscribe from the sequence before it completes., +   *, +   * @param items, +   *            the source Array, +   * @tparam T, +   *            the type of items in the Array, and the type of items to be emitted by the, +   *            resulting Observable, +   * @return an Observable that emits each item in the source Array, +   */, +  def just[T](items: T*): Observable[T] = {, +    toScalaObservable[T](rx.Observable.from(items.toIterable.asJava)), +  }, +, +++ b/language-adaptors/rxjava-scala/README.md, +Observable.just(1, 2, 3, 4).reduce(_ + _), +val first = Observable.just(10, 11, 12)]