[+++ b/src/main/java/io/reactivex/Completable.java, +        return RxJavaPlugins.onAssembly(new CompletableAmb(sources, null));, +        return RxJavaPlugins.onAssembly(new CompletableAmb(null, sources));, +++ b/src/main/java/io/reactivex/Completable.java, +        return RxJavaPlugins.onAssembly(new CompletableAmb(sources, null));, +        return RxJavaPlugins.onAssembly(new CompletableAmb(null, sources));, +++ b/src/main/java/io/reactivex/Maybe.java, +        return RxJavaPlugins.onAssembly(new MaybeAmb<T>(null, sources));, +        return RxJavaPlugins.onAssembly(new MaybeAmb<T>(sources, null));, +++ b/src/main/java/io/reactivex/Completable.java, +        return RxJavaPlugins.onAssembly(new CompletableAmb(sources, null));, +        return RxJavaPlugins.onAssembly(new CompletableAmb(null, sources));, +++ b/src/main/java/io/reactivex/Maybe.java, +        return RxJavaPlugins.onAssembly(new MaybeAmb<T>(null, sources));, +        return RxJavaPlugins.onAssembly(new MaybeAmb<T>(sources, null));, +++ b/src/main/java/io/reactivex/Single.java, +        return RxJavaPlugins.onAssembly(new SingleAmb<T>(null, sources));, +        return RxJavaPlugins.onAssembly(new SingleAmb<T>(sources, null));, +++ b/src/main/java/io/reactivex/Completable.java, +        return RxJavaPlugins.onAssembly(new CompletableAmb(sources, null));, +        return RxJavaPlugins.onAssembly(new CompletableAmb(null, sources));, +++ b/src/main/java/io/reactivex/Maybe.java, +        return RxJavaPlugins.onAssembly(new MaybeAmb<T>(null, sources));, +        return RxJavaPlugins.onAssembly(new MaybeAmb<T>(sources, null));, +++ b/src/main/java/io/reactivex/Single.java, +        return RxJavaPlugins.onAssembly(new SingleAmb<T>(null, sources));, +        return RxJavaPlugins.onAssembly(new SingleAmb<T>(sources, null));, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableAmb.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators.completable;, +, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import io.reactivex.*;, +import io.reactivex.disposables.*;, +import io.reactivex.exceptions.Exceptions;, +import io.reactivex.internal.disposables.EmptyDisposable;, +import io.reactivex.plugins.RxJavaPlugins;, +, +public final class CompletableAmb extends Completable {, +    private final CompletableSource[] sources;, +    private final Iterable<? extends CompletableSource> sourcesIterable;, +, +    public CompletableAmb(CompletableSource[] sources, Iterable<? extends CompletableSource> sourcesIterable) {, +        this.sources = sources;, +        this.sourcesIterable = sourcesIterable;, +    }, +, +    @Override, +    public void subscribeActual(final CompletableObserver s) {, +        CompletableSource[] sources = this.sources;, +        int count = 0;, +        if (sources == null) {, +            sources = new CompletableSource[8];, +            try {, +                for (CompletableSource element : sourcesIterable) {, +                    if (element == null) {, +                        EmptyDisposable.error(new NullPointerException("One of the sources is null"), s);, +                        return;, +                    }, +                    if (count == sources.length) {, +                        CompletableSource[] b = new CompletableSource[count + (count >> 2)];, +                        System.arraycopy(sources, 0, b, 0, count);, +                        sources = b;, +                    }, +                    sources[count++] = element;, +                };, +            } catch (Throwable e) {, +                Exceptions.throwIfFatal(e);, +                EmptyDisposable.error(e, s);, +                return;, +            }, +        } else {, +            count = sources.length;, +        }, +, +        final CompositeDisposable set = new CompositeDisposable();, +        s.onSubscribe(set);, +, +        final AtomicBoolean once = new AtomicBoolean();, +, +        CompletableObserver inner = new CompletableObserver() {, +            @Override, +            public void onComplete() {, +                if (once.compareAndSet(false, true)) {, +                    set.dispose();, +                    s.onComplete();, +                }]