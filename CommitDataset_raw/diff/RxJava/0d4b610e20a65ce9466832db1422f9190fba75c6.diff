[+++ b/.travis.yml, +after_success: gradle/publishViaTravis.sh, +++ b/.travis.yml, +after_success: gradle/publishViaTravis.sh, +++ b/gradle/buildViaTravis.sh, +echo -e 'Build Script => Branch ['$TRAVIS_BRANCH']  Tag ['$TRAVIS_TAG']', +, +++ b/.travis.yml, +after_success: gradle/publishViaTravis.sh, +++ b/gradle/buildViaTravis.sh, +echo -e 'Build Script => Branch ['$TRAVIS_BRANCH']  Tag ['$TRAVIS_TAG']', +, +++ b/src/main/java/rx/Observable.java, +     * Returns an Observable that first emits items emitted by the source Observable, , +     * checks the specified condition after each item, and, +     * then completes if the condition is satisfied., +     * The difference between this operator and {@link #takeWhile(Func1)} is that here, the condition is evaluated <b>after</b>, +     * the item was emitted., +     * @return an Observable that first emits items emitted by the source Observable, , +     *         checks the specified condition after each item, and, +     *         then completes if the condition is satisfied., +++ b/.travis.yml, +after_success: gradle/publishViaTravis.sh, +++ b/gradle/buildViaTravis.sh, +echo -e 'Build Script => Branch ['$TRAVIS_BRANCH']  Tag ['$TRAVIS_TAG']', +, +++ b/src/main/java/rx/Observable.java, +     * Returns an Observable that first emits items emitted by the source Observable, , +     * checks the specified condition after each item, and, +     * then completes if the condition is satisfied., +     * The difference between this operator and {@link #takeWhile(Func1)} is that here, the condition is evaluated <b>after</b>, +     * the item was emitted., +     * @return an Observable that first emits items emitted by the source Observable, , +     *         checks the specified condition after each item, and, +     *         then completes if the condition is satisfied., +++ b/src/main/java/rx/exceptions/Exceptions.java, +import java.util.List;, +import rx.annotations.Experimental;, +, +     * Convenience method to throw a {@code RuntimeException} and {@code Error} directly, +     * or wrap any other exception type into a {@code RuntimeException}., +     * @param t the exception to throw directly or wrapped, +    /**, +     * Throws a single or multiple exceptions contained in the collection, wrapping it into, +     * {@code CompositeException} if necessary., +     * @param exceptions the collection of exceptions. If null or empty, no exception is thrown., +     * If the collection contains a single exception, that exception is either thrown as-is or wrapped into a, +     * CompositeException. Multiple exceptions are wrapped into a CompositeException., +     */, +    @Experimental, +    public static void throwIfAny(List<? extends Throwable> exceptions) {, +        if (exceptions != null && !exceptions.isEmpty()) {, +            if (exceptions.size() == 1) {, +                Throwable t = exceptions.get(0);, +                // had to manually inline propagate because some tests attempt StackOverflowError , +                // and can't handle it with the stack space remaining, +                if (t instanceof RuntimeException) {, +                    throw (RuntimeException) t;, +                } else if (t instanceof Error) {, +                    throw (Error) t;, +                } else {, +                    throw new RuntimeException(t);, +                }, +            }, +            throw new CompositeException(, +                    "Multiple exceptions", exceptions);, +        }, +    }, +++ b/.travis.yml, +after_success: gradle/publishViaTravis.sh, +++ b/gradle/buildViaTravis.sh, +echo -e 'Build Script => Branch ['$TRAVIS_BRANCH']  Tag ['$TRAVIS_TAG']', +, +++ b/src/main/java/rx/Observable.java, +     * Returns an Observable that first emits items emitted by the source Observable, , +     * checks the specified condition after each item, and, +     * then completes if the condition is satisfied., +     * The difference between this operator and {@link #takeWhile(Func1)} is that here, the condition is evaluated <b>after</b>, +     * the item was emitted., +     * @return an Observable that first emits items emitted by the source Observable, , +     *         checks the specified condition after each item, and, +     *         then completes if the condition is satisfied., +++ b/src/main/java/rx/exceptions/Exceptions.java, +import java.util.List;, +import rx.annotations.Experimental;, +, +     * Convenience method to throw a {@code RuntimeException} and {@code Error} directly, +     * or wrap any other exception type into a {@code RuntimeException}., +     * @param t the exception to throw directly or wrapped, +    /**, +     * Throws a single or multiple exceptions contained in the collection, wrapping it into, +     * {@code CompositeException} if necessary., +     * @param exceptions the collection of exceptions. If null or empty, no exception is thrown., +     * If the collection contains a single exception, that exception is either thrown as-is or wrapped into a, +     * CompositeException. Multiple exceptions are wrapped into a CompositeException., +     */, +    @Experimental, +    public static void throwIfAny(List<? extends Throwable> exceptions) {, +        if (exceptions != null && !exceptions.isEmpty()) {, +            if (exceptions.size() == 1) {]