[+++ b/rxjava-core/build.gradle, +++ b/rxjava-core/build.gradle, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationFinally;, +import rx.operators.OperationTake;, +     * Emits the same objects as the given Observable, calling the given action, +     * when it calls <code>onComplete</code> or <code>onError</code>., +     * @param source an observable, +     * @param action an action to be called when the source completes or errors., +     * @return an Observable that emits the same objects, then calls the action., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh212133(v=vs.103).aspx">MSDN: Observable.Finally Method</a>, +     */, +    public static <T> Observable<T> finallyDo(Observable source, Action0 action) {, +        return _create(OperationFinally.finallyDo(source, action));, +    }, +, +    /**, +        return create(OperationTake.takeWhile(items, predicate));, +        return create(OperationTake.takeWhileWithIndex(items, predicate));, +        return create(OperationTake.takeWhileWithIndex(items, new Func2<T, Integer, Boolean>() {, +            public Boolean call(T t, Integer integer) {, +     * Registers an action to be called when this observable calls, +     * <code>onComplete</code> or <code>onError</code>., +     * @param action an action to be called when this observable completes or errors., +     * @return an Observable that emits the same objects as this observable, then calls the action., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh212133(v=vs.103).aspx">MSDN: Observable.Finally Method</a>, +     */, +    public Observable<T> finallyDo(Action0 action) {, +        return _create(OperationFinally.finallyDo(this, action));, +    }, +, +    /**, +++ b/rxjava-core/build.gradle, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationFinally;, +import rx.operators.OperationTake;, +     * Emits the same objects as the given Observable, calling the given action, +     * when it calls <code>onComplete</code> or <code>onError</code>., +     * @param source an observable, +     * @param action an action to be called when the source completes or errors., +     * @return an Observable that emits the same objects, then calls the action., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh212133(v=vs.103).aspx">MSDN: Observable.Finally Method</a>, +     */, +    public static <T> Observable<T> finallyDo(Observable source, Action0 action) {, +        return _create(OperationFinally.finallyDo(source, action));, +    }, +, +    /**, +        return create(OperationTake.takeWhile(items, predicate));, +        return create(OperationTake.takeWhileWithIndex(items, predicate));, +        return create(OperationTake.takeWhileWithIndex(items, new Func2<T, Integer, Boolean>() {, +            public Boolean call(T t, Integer integer) {, +     * Registers an action to be called when this observable calls, +     * <code>onComplete</code> or <code>onError</code>., +     * @param action an action to be called when this observable completes or errors., +     * @return an Observable that emits the same objects as this observable, then calls the action., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh212133(v=vs.103).aspx">MSDN: Observable.Finally Method</a>, +     */, +    public Observable<T> finallyDo(Action0 action) {, +        return _create(OperationFinally.finallyDo(this, action));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationCombineLatest.java, +import java.util.List;, +import java.util.Set;, +    /**, +     * Combines the two given observables, emitting an event containing an aggregation of the latest values of each of the source observables, +     * each time an event is received from one of the source observables, where the aggregation is defined by the given function., +     * @param w0 The first source observable., +     * @param w1 The second source observable., +     * @param combineLatestFunction The aggregation function used to combine the source observable values., +     * @return A function from an observer to a subscription. This can be used to create an observable from., +     */, +    /**, +     * @see #combineLatest(Observable w0, Observable w1, Func2 combineLatestFunction), +     */, +    /**, +     * @see #combineLatest(Observable w0, Observable w1, Func2 combineLatestFunction), +     */, +            a.error(e);, +        public void onNext(T args) {, +     * Receive notifications from each of the observables we are reducing and execute the combineLatestFunction , +     * whenever we have received an event from one of the observables, as soon as each Observable has received , +     * at least one event., +        private Observer<R> observer;, +, +        private final AtomicBoolean running = new AtomicBoolean(true);, +, +        // used as an internal lock for handling the latest values and the completed state of each observer, +        private final Object lockObject = new Object();, +         * Store when an observer completes., +         * Note that access to this set MUST BE SYNCHRONIZED via 'lockObject' above., +         * */, +        private final Set<CombineObserver<R, ?>> completed = new HashSet<CombineObserver<R, ?>>();, +, +        /**, +         * The latest value from each observer, +         * <p>, +         * Note that access to this set MUST BE SYNCHRONIZED via 'lockObject' above.]