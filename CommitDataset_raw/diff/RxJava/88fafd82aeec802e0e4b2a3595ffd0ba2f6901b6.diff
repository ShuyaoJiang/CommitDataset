[+++ b/src/main/java/io/reactivex/Completable.java, +     * @param onDispose the callback to call when the child subscriber disposes the subscription, +     * @param onDispose the runnable called when the child disposes the subscription, +            final Action onDispose) {, +        ObjectHelper.requireNonNull(onDispose, "onDispose is null");, +        return RxJavaPlugins.onAssembly(new CompletablePeek(this, onSubscribe, onError, onComplete, onTerminate, onAfterTerminate, onDispose));, +++ b/src/main/java/io/reactivex/Completable.java, +     * @param onDispose the callback to call when the child subscriber disposes the subscription, +     * @param onDispose the runnable called when the child disposes the subscription, +            final Action onDispose) {, +        ObjectHelper.requireNonNull(onDispose, "onDispose is null");, +        return RxJavaPlugins.onAssembly(new CompletablePeek(this, onSubscribe, onError, onComplete, onTerminate, onAfterTerminate, onDispose));, +++ b/src/main/java/io/reactivex/Observable.java, +     *  <dd>{@code doOnDispose} does not operate by default on a particular {@link Scheduler}.</dd>, +     * @param onDispose, +     *            the action that gets called when the source {@code ObservableSource}'s Subscription is disposed, +    public final Observable<T> doOnDispose(Action onDispose) {, +        return doOnLifecycle(Functions.emptyConsumer(), onDispose);, +     * @param onDispose, +     *              called when the downstream disposes the Subscription via dispose(), +    public final Observable<T> doOnLifecycle(final Consumer<? super Disposable> onSubscribe, final Action onDispose) {, +        ObjectHelper.requireNonNull(onDispose, "onDispose is null");, +        return RxJavaPlugins.onAssembly(new ObservableDoOnLifecycle<T>(this, onSubscribe, onDispose));, +++ b/src/main/java/io/reactivex/Completable.java, +     * @param onDispose the callback to call when the child subscriber disposes the subscription, +     * @param onDispose the runnable called when the child disposes the subscription, +            final Action onDispose) {, +        ObjectHelper.requireNonNull(onDispose, "onDispose is null");, +        return RxJavaPlugins.onAssembly(new CompletablePeek(this, onSubscribe, onError, onComplete, onTerminate, onAfterTerminate, onDispose));, +++ b/src/main/java/io/reactivex/Observable.java, +     *  <dd>{@code doOnDispose} does not operate by default on a particular {@link Scheduler}.</dd>, +     * @param onDispose, +     *            the action that gets called when the source {@code ObservableSource}'s Subscription is disposed, +    public final Observable<T> doOnDispose(Action onDispose) {, +        return doOnLifecycle(Functions.emptyConsumer(), onDispose);, +     * @param onDispose, +     *              called when the downstream disposes the Subscription via dispose(), +    public final Observable<T> doOnLifecycle(final Consumer<? super Disposable> onSubscribe, final Action onDispose) {, +        ObjectHelper.requireNonNull(onDispose, "onDispose is null");, +        return RxJavaPlugins.onAssembly(new ObservableDoOnLifecycle<T>(this, onSubscribe, onDispose));, +++ b/src/main/java/io/reactivex/Single.java, +     * @param onDispose the runnable called when the subscription is disposed, +    public final Single<T> doOnDispose(final Action onDispose) {, +        ObjectHelper.requireNonNull(onDispose, "onDispose is null");, +        return RxJavaPlugins.onAssembly(new SingleDoOnDispose<T>(this, onDispose));, +++ b/src/main/java/io/reactivex/Completable.java, +     * @param onDispose the callback to call when the child subscriber disposes the subscription, +     * @param onDispose the runnable called when the child disposes the subscription, +            final Action onDispose) {, +        ObjectHelper.requireNonNull(onDispose, "onDispose is null");, +        return RxJavaPlugins.onAssembly(new CompletablePeek(this, onSubscribe, onError, onComplete, onTerminate, onAfterTerminate, onDispose));, +++ b/src/main/java/io/reactivex/Observable.java, +     *  <dd>{@code doOnDispose} does not operate by default on a particular {@link Scheduler}.</dd>, +     * @param onDispose, +     *            the action that gets called when the source {@code ObservableSource}'s Subscription is disposed, +    public final Observable<T> doOnDispose(Action onDispose) {, +        return doOnLifecycle(Functions.emptyConsumer(), onDispose);, +     * @param onDispose, +     *              called when the downstream disposes the Subscription via dispose(), +    public final Observable<T> doOnLifecycle(final Consumer<? super Disposable> onSubscribe, final Action onDispose) {, +        ObjectHelper.requireNonNull(onDispose, "onDispose is null");, +        return RxJavaPlugins.onAssembly(new ObservableDoOnLifecycle<T>(this, onSubscribe, onDispose));, +++ b/src/main/java/io/reactivex/Single.java, +     * @param onDispose the runnable called when the subscription is disposed, +    public final Single<T> doOnDispose(final Action onDispose) {, +        ObjectHelper.requireNonNull(onDispose, "onDispose is null");, +        return RxJavaPlugins.onAssembly(new SingleDoOnDispose<T>(this, onDispose));, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletablePeek.java, +    final Action onDispose;, +                           Action onDispose) {, +        this.onDispose = onDispose;, +                            onDispose.run();, +++ b/src/main/java/io/reactivex/Completable.java, +     * @param onDispose the callback to call when the child subscriber disposes the subscription, +     * @param onDispose the runnable called when the child disposes the subscription, +            final Action onDispose) {, +        ObjectHelper.requireNonNull(onDispose, "onDispose is null");, +        return RxJavaPlugins.onAssembly(new CompletablePeek(this, onSubscribe, onError, onComplete, onTerminate, onAfterTerminate, onDispose));, +++ b/src/main/java/io/reactivex/Observable.java, +     *  <dd>{@code doOnDispose} does not operate by default on a particular {@link Scheduler}.</dd>, +     * @param onDispose, +     *            the action that gets called when the source {@code ObservableSource}'s Subscription is disposed, +    public final Observable<T> doOnDispose(Action onDispose) {, +        return doOnLifecycle(Functions.emptyConsumer(), onDispose);, +     * @param onDispose, +     *              called when the downstream disposes the Subscription via dispose(), +    public final Observable<T> doOnLifecycle(final Consumer<? super Disposable> onSubscribe, final Action onDispose) {, +        ObjectHelper.requireNonNull(onDispose, "onDispose is null");, +        return RxJavaPlugins.onAssembly(new ObservableDoOnLifecycle<T>(this, onSubscribe, onDispose));, +++ b/src/main/java/io/reactivex/Single.java, +     * @param onDispose the runnable called when the subscription is disposed, +    public final Single<T> doOnDispose(final Action onDispose) {, +        ObjectHelper.requireNonNull(onDispose, "onDispose is null");, +        return RxJavaPlugins.onAssembly(new SingleDoOnDispose<T>(this, onDispose));, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletablePeek.java, +    final Action onDispose;, +                           Action onDispose) {, +        this.onDispose = onDispose;, +                            onDispose.run();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDoOnLifecycle.java]