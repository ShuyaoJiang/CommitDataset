[+++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableResumeNext.java, +import java.util.concurrent.atomic.AtomicReference;, +, +import io.reactivex.internal.disposables.DisposableHelper;, +import io.reactivex.internal.functions.ObjectHelper;, +        ResumeNextObserver parent = new ResumeNextObserver(observer, errorMapper);, +        observer.onSubscribe(parent);, +        source.subscribe(parent);, +    static final class ResumeNextObserver, +    extends AtomicReference<Disposable>, +    implements CompletableObserver, Disposable {, +, +        private static final long serialVersionUID = 5018523762564524046L;, +        final Function<? super Throwable, ? extends CompletableSource> errorMapper;, +, +        boolean once;, +, +        ResumeNextObserver(CompletableObserver observer, Function<? super Throwable, ? extends CompletableSource> errorMapper) {, +            this.errorMapper = errorMapper;, +        }, +, +, +        @Override, +        public void onSubscribe(Disposable d) {, +            DisposableHelper.replace(this, d);, +            if (once) {, +                downstream.onError(e);, +                return;, +            }, +            once = true;, +, +                c = ObjectHelper.requireNonNull(errorMapper.apply(e), "The errorMapper returned a null CompletableSource");, +                downstream.onError(new CompositeException(e, ex));, +            c.subscribe(this);, +        public boolean isDisposed() {, +            return DisposableHelper.isDisposed(get());, +        public void dispose() {, +            DisposableHelper.dispose(this);, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableResumeNext.java, +import java.util.concurrent.atomic.AtomicReference;, +, +import io.reactivex.internal.disposables.DisposableHelper;, +import io.reactivex.internal.functions.ObjectHelper;, +        ResumeNextObserver parent = new ResumeNextObserver(observer, errorMapper);, +        observer.onSubscribe(parent);, +        source.subscribe(parent);, +    static final class ResumeNextObserver, +    extends AtomicReference<Disposable>, +    implements CompletableObserver, Disposable {, +, +        private static final long serialVersionUID = 5018523762564524046L;, +        final Function<? super Throwable, ? extends CompletableSource> errorMapper;, +, +        boolean once;, +, +        ResumeNextObserver(CompletableObserver observer, Function<? super Throwable, ? extends CompletableSource> errorMapper) {, +            this.errorMapper = errorMapper;, +        }, +, +, +        @Override, +        public void onSubscribe(Disposable d) {, +            DisposableHelper.replace(this, d);, +            if (once) {, +                downstream.onError(e);, +                return;, +            }, +            once = true;, +, +                c = ObjectHelper.requireNonNull(errorMapper.apply(e), "The errorMapper returned a null CompletableSource");, +                downstream.onError(new CompositeException(e, ex));, +            c.subscribe(this);, +        public boolean isDisposed() {, +            return DisposableHelper.isDisposed(get());, +        public void dispose() {, +            DisposableHelper.dispose(this);, +++ b/src/test/java/io/reactivex/completable/CompletableTest.java, +        } catch (CompositeException ex) {, +            List<Throwable> errors = ex.getExceptions();, +            TestHelper.assertError(errors, 0, TestException.class);, +            TestHelper.assertError(errors, 1, NullPointerException.class);, +            assertEquals(2, errors.size());, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableResumeNext.java, +import java.util.concurrent.atomic.AtomicReference;, +, +import io.reactivex.internal.disposables.DisposableHelper;, +import io.reactivex.internal.functions.ObjectHelper;, +        ResumeNextObserver parent = new ResumeNextObserver(observer, errorMapper);, +        observer.onSubscribe(parent);, +        source.subscribe(parent);, +    static final class ResumeNextObserver, +    extends AtomicReference<Disposable>, +    implements CompletableObserver, Disposable {, +, +        private static final long serialVersionUID = 5018523762564524046L;, +        final Function<? super Throwable, ? extends CompletableSource> errorMapper;, +, +        boolean once;, +, +        ResumeNextObserver(CompletableObserver observer, Function<? super Throwable, ? extends CompletableSource> errorMapper) {]