[+++ b/src/main/java/rx/Observable.java, +    public final Observable<T> repeatWhen(final Func1<? super Observable<? extends Void>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> dematerializedNotificationHandler = new Func1<Observable<? extends Notification<?>>, Observable<?>>() {, +            @Override, +            public Observable<?> call(Observable<? extends Notification<?>> notifications) {, +                return notificationHandler.call(notifications.map(new Func1<Notification<?>, Void>() {, +                    @Override, +                    public Void call(Notification<?> notification) {, +                        return null;, +                    }, +                }));, +            }, +        };, +        return OnSubscribeRedo.repeat(this, dematerializedNotificationHandler, scheduler);, +    public final Observable<T> repeatWhen(final Func1<? super Observable<? extends Void>, ? extends Observable<?>> notificationHandler) {, +        Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> dematerializedNotificationHandler = new Func1<Observable<? extends Notification<?>>, Observable<?>>() {, +            @Override, +            public Observable<?> call(Observable<? extends Notification<?>> notifications) {, +                return notificationHandler.call(notifications.map(new Func1<Notification<?>, Void>() {, +                    @Override, +                    public Void call(Notification<?> notification) {, +                        return null;, +                    }, +                }));, +            }, +        };, +        return OnSubscribeRedo.repeat(this, dematerializedNotificationHandler);, +    public final Observable<T> retryWhen(final Func1<? super Observable<? extends Throwable>, ? extends Observable<?>> notificationHandler) {, +        Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> dematerializedNotificationHandler = new Func1<Observable<? extends Notification<?>>, Observable<?>>() {, +            @Override, +            public Observable<?> call(Observable<? extends Notification<?>> notifications) {, +                return notificationHandler.call(notifications.map(new Func1<Notification<?>, Throwable>() {, +                    @Override, +                    public Throwable call(Notification<?> notification) {, +                        return notification.getThrowable();, +                    }, +                }));, +            }, +        };, +        return OnSubscribeRedo.<T> retry(this, dematerializedNotificationHandler);, +    public final Observable<T> retryWhen(final Func1<? super Observable<? extends Throwable>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> dematerializedNotificationHandler = new Func1<Observable<? extends Notification<?>>, Observable<?>>() {, +            @Override, +            public Observable<?> call(Observable<? extends Notification<?>> notifications) {, +                return notificationHandler.call(notifications.map(new Func1<Notification<?>, Throwable>() {, +                    @Override, +                    public Throwable call(Notification<?> notification) {, +                        return notification.getThrowable();, +                    }, +                }));, +            }, +        };, +        return OnSubscribeRedo.<T> retry(this, dematerializedNotificationHandler, scheduler);, +++ b/src/main/java/rx/Observable.java, +    public final Observable<T> repeatWhen(final Func1<? super Observable<? extends Void>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> dematerializedNotificationHandler = new Func1<Observable<? extends Notification<?>>, Observable<?>>() {, +            @Override, +            public Observable<?> call(Observable<? extends Notification<?>> notifications) {, +                return notificationHandler.call(notifications.map(new Func1<Notification<?>, Void>() {, +                    @Override, +                    public Void call(Notification<?> notification) {, +                        return null;, +                    }, +                }));, +            }, +        };, +        return OnSubscribeRedo.repeat(this, dematerializedNotificationHandler, scheduler);, +    public final Observable<T> repeatWhen(final Func1<? super Observable<? extends Void>, ? extends Observable<?>> notificationHandler) {, +        Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> dematerializedNotificationHandler = new Func1<Observable<? extends Notification<?>>, Observable<?>>() {, +            @Override, +            public Observable<?> call(Observable<? extends Notification<?>> notifications) {, +                return notificationHandler.call(notifications.map(new Func1<Notification<?>, Void>() {, +                    @Override, +                    public Void call(Notification<?> notification) {, +                        return null;, +                    }, +                }));, +            }, +        };, +        return OnSubscribeRedo.repeat(this, dematerializedNotificationHandler);, +    public final Observable<T> retryWhen(final Func1<? super Observable<? extends Throwable>, ? extends Observable<?>> notificationHandler) {, +        Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> dematerializedNotificationHandler = new Func1<Observable<? extends Notification<?>>, Observable<?>>() {, +            @Override, +            public Observable<?> call(Observable<? extends Notification<?>> notifications) {, +                return notificationHandler.call(notifications.map(new Func1<Notification<?>, Throwable>() {, +                    @Override, +                    public Throwable call(Notification<?> notification) {, +                        return notification.getThrowable();, +                    }, +                }));, +            }, +        };, +        return OnSubscribeRedo.<T> retry(this, dematerializedNotificationHandler);, +    public final Observable<T> retryWhen(final Func1<? super Observable<? extends Throwable>, ? extends Observable<?>> notificationHandler, Scheduler scheduler) {, +        Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> dematerializedNotificationHandler = new Func1<Observable<? extends Notification<?>>, Observable<?>>() {, +            @Override, +            public Observable<?> call(Observable<? extends Notification<?>> notifications) {, +                return notificationHandler.call(notifications.map(new Func1<Notification<?>, Throwable>() {, +                    @Override, +                    public Throwable call(Notification<?> notification) {]