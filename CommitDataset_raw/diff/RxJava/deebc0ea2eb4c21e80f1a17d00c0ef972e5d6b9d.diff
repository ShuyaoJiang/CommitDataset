[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +import rx.lang.scala.concurrency.Scheduler, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +import rx.lang.scala.concurrency.Scheduler, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.lang.scala.concurrency.Scheduler, +    zip(that, (t: T, u: U) => (t, u)), +  }, +, +  /**, +   * Returns an Observable formed from this Observable and another Observable by combining, +   * corresponding elements using the selector function., +   * The number of `onNext` invocations of the resulting `Observable[(T, U)]`, +   * is the minumum of the number of `onNext` invocations of `this` and `that`., +   */, +  def zip[U, R](that: Observable[U], selector: (T,U) => R): Observable[R] = {, +    Observable[R](rx.Observable.zip[T, U, R](this.asJavaObservable, that.asJavaObservable, selector)), +   *            The [[Scheduler]] to use when determining the end and start of a buffer., +   *            The [[Scheduler]] to use when determining the end and start of a buffer., +   *            The [[Scheduler]] to use when determining the end and start of a buffer., +   *            The [[Scheduler]] to use when determining the end and start of a window., +   *            The [[Scheduler]] to use when determining the end and start of a window., +   *            The [[Scheduler]] to use when determining the end and start of a window., +   * Asynchronously subscribes and unsubscribes Observers on the specified [[Scheduler]]., +   *            the [[Scheduler]] to perform subscription and unsubscription actions on, +   *         on the specified [[Scheduler]], +   * Asynchronously notify [[rx.lang.scala.Observer]]s on the specified [[Scheduler]]., +   *            the [[Scheduler]] to notify [[rx.lang.scala.Observer]]s on, +   *         specified [[Scheduler]], +   *            the [[Scheduler]] to use when sampling, +   *            The [[Scheduler]] to use internally to manage the timers which handle timeout for each event., +   *            The [[Scheduler]] to use internally to manage the timers which handle timeout for each event., +   *            The [[Scheduler]] to use internally to manage the timers which handle timeout for each event., +   * [[Scheduler]] and return an `Observable[R]` with the output., +   * @return an Observable with the output of the function executed on a [[Scheduler]], +   * Perform work in parallel by sharding an `Observable[T]` on a [[Scheduler]] and return an `Observable[R]` with the output., +   *            a [[Scheduler]] to perform the work on., +   * @return an Observable with the output of the function executed on a [[Scheduler]], +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +import rx.lang.scala.concurrency.Scheduler, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.lang.scala.concurrency.Scheduler, +    zip(that, (t: T, u: U) => (t, u)), +  }, +, +  /**, +   * Returns an Observable formed from this Observable and another Observable by combining, +   * corresponding elements using the selector function., +   * The number of `onNext` invocations of the resulting `Observable[(T, U)]`, +   * is the minumum of the number of `onNext` invocations of `this` and `that`., +   */, +  def zip[U, R](that: Observable[U], selector: (T,U) => R): Observable[R] = {, +    Observable[R](rx.Observable.zip[T, U, R](this.asJavaObservable, that.asJavaObservable, selector)), +   *            The [[Scheduler]] to use when determining the end and start of a buffer., +   *            The [[Scheduler]] to use when determining the end and start of a buffer., +   *            The [[Scheduler]] to use when determining the end and start of a buffer., +   *            The [[Scheduler]] to use when determining the end and start of a window., +   *            The [[Scheduler]] to use when determining the end and start of a window., +   *            The [[Scheduler]] to use when determining the end and start of a window., +   * Asynchronously subscribes and unsubscribes Observers on the specified [[Scheduler]]., +   *            the [[Scheduler]] to perform subscription and unsubscription actions on, +   *         on the specified [[Scheduler]], +   * Asynchronously notify [[rx.lang.scala.Observer]]s on the specified [[Scheduler]]., +   *            the [[Scheduler]] to notify [[rx.lang.scala.Observer]]s on, +   *         specified [[Scheduler]], +   *            the [[Scheduler]] to use when sampling, +   *            The [[Scheduler]] to use internally to manage the timers which handle timeout for each event., +   *            The [[Scheduler]] to use internally to manage the timers which handle timeout for each event., +   *            The [[Scheduler]] to use internally to manage the timers which handle timeout for each event., +   * [[Scheduler]] and return an `Observable[R]` with the output., +   * @return an Observable with the output of the function executed on a [[Scheduler]], +   * Perform work in parallel by sharding an `Observable[T]` on a [[Scheduler]] and return an `Observable[R]` with the output., +   *            a [[Scheduler]] to perform the work on., +   * @return an Observable with the output of the function executed on a [[Scheduler]], +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, + * Represents an object that schedules units of work., +  def schedule(action: Scheduler => Subscription): Subscription = {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +import rx.lang.scala.concurrency.Scheduler, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.lang.scala.concurrency.Scheduler, +    zip(that, (t: T, u: U) => (t, u)), +  }, +, +  /**, +   * Returns an Observable formed from this Observable and another Observable by combining, +   * corresponding elements using the selector function., +   * The number of `onNext` invocations of the resulting `Observable[(T, U)]`, +   * is the minumum of the number of `onNext` invocations of `this` and `that`., +   */, +  def zip[U, R](that: Observable[U], selector: (T,U) => R): Observable[R] = {, +    Observable[R](rx.Observable.zip[T, U, R](this.asJavaObservable, that.asJavaObservable, selector)), +   *            The [[Scheduler]] to use when determining the end and start of a buffer., +   *            The [[Scheduler]] to use when determining the end and start of a buffer., +   *            The [[Scheduler]] to use when determining the end and start of a buffer., +   *            The [[Scheduler]] to use when determining the end and start of a window., +   *            The [[Scheduler]] to use when determining the end and start of a window., +   *            The [[Scheduler]] to use when determining the end and start of a window., +   * Asynchronously subscribes and unsubscribes Observers on the specified [[Scheduler]]., +   *            the [[Scheduler]] to perform subscription and unsubscription actions on]