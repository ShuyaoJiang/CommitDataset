[+++ b/src/main/java/io/reactivex/processors/ReplayProcessor.java, +            long limit = scheduler.now(unit) - maxAge;, +            if (h.time < limit) {, +                return null;, +            }, +, +++ b/src/main/java/io/reactivex/processors/ReplayProcessor.java, +            long limit = scheduler.now(unit) - maxAge;, +            if (h.time < limit) {, +                return null;, +            }, +, +++ b/src/main/java/io/reactivex/subjects/ReplaySubject.java, +            long limit = scheduler.now(unit) - maxAge;, +            if (h.time < limit) {, +                return null;, +            }, +, +++ b/src/main/java/io/reactivex/processors/ReplayProcessor.java, +            long limit = scheduler.now(unit) - maxAge;, +            if (h.time < limit) {, +                return null;, +            }, +, +++ b/src/main/java/io/reactivex/subjects/ReplaySubject.java, +            long limit = scheduler.now(unit) - maxAge;, +            if (h.time < limit) {, +                return null;, +            }, +, +++ b/src/test/java/io/reactivex/processors/ReplayProcessorTest.java, +    public void peekStateTimeAndSizeValueExpired() {, +        TestScheduler scheduler = new TestScheduler();, +        ReplayProcessor<Integer> rp = ReplayProcessor.createWithTime(1, TimeUnit.DAYS, scheduler);, +, +        assertNull(rp.getValue());, +        assertNull(rp.getValues(new Integer[2])[0]);, +, +        rp.onNext(2);, +, +        assertEquals((Integer)2, rp.getValue());, +        assertEquals(2, rp.getValues()[0]);, +, +        scheduler.advanceTimeBy(2, TimeUnit.DAYS);, +, +        assertEquals(null, rp.getValue());, +        assertEquals(0, rp.getValues().length);, +        assertNull(rp.getValues(new Integer[2])[0]);, +    }, +, +    @Test, +++ b/src/main/java/io/reactivex/processors/ReplayProcessor.java, +            long limit = scheduler.now(unit) - maxAge;, +            if (h.time < limit) {, +                return null;, +            }, +, +++ b/src/main/java/io/reactivex/subjects/ReplaySubject.java, +            long limit = scheduler.now(unit) - maxAge;, +            if (h.time < limit) {, +                return null;, +            }, +, +++ b/src/test/java/io/reactivex/processors/ReplayProcessorTest.java, +    public void peekStateTimeAndSizeValueExpired() {, +        TestScheduler scheduler = new TestScheduler();, +        ReplayProcessor<Integer> rp = ReplayProcessor.createWithTime(1, TimeUnit.DAYS, scheduler);, +, +        assertNull(rp.getValue());, +        assertNull(rp.getValues(new Integer[2])[0]);, +, +        rp.onNext(2);, +, +        assertEquals((Integer)2, rp.getValue());, +        assertEquals(2, rp.getValues()[0]);, +, +        scheduler.advanceTimeBy(2, TimeUnit.DAYS);, +, +        assertEquals(null, rp.getValue());, +        assertEquals(0, rp.getValues().length);, +        assertNull(rp.getValues(new Integer[2])[0]);, +    }, +, +    @Test, +++ b/src/test/java/io/reactivex/subjects/ReplaySubjectTest.java, +    public void peekStateTimeAndSizeValueExpired() {, +        TestScheduler scheduler = new TestScheduler();, +        ReplaySubject<Integer> rp = ReplaySubject.createWithTime(1, TimeUnit.DAYS, scheduler);, +, +        assertNull(rp.getValue());, +        assertNull(rp.getValues(new Integer[2])[0]);, +, +        rp.onNext(2);, +, +        assertEquals((Integer)2, rp.getValue());, +        assertEquals(2, rp.getValues()[0]);, +, +        scheduler.advanceTimeBy(2, TimeUnit.DAYS);, +, +        assertEquals(null, rp.getValue());]