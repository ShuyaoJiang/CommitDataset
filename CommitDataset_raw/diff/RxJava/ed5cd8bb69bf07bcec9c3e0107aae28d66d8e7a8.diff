[+++ b/src/main/java/io/reactivex/flowables/ConnectableFlowable.java, + * A {@code ConnectableFlowable} resembles an ordinary {@link Flowable}, except that it does not begin, + * can wait for all intended {@link Subscriber}s to {@link Flowable#subscribe} to the {@code Flowable}, + * before the {@code Flowable} begins emitting items., + *          the type of items emitted by the {@code ConnectableFlowable}, +     * Instructs the {@code ConnectableFlowable} to begin emitting the items from its underlying, +     * Instructs the {@code ConnectableFlowable} to begin emitting the items from its underlying, +     * Returns a {@code Flowable} that stays connected to this {@code ConnectableFlowable} as long as there, +     * is at least one subscription to this {@code ConnectableFlowable}., +     * Returns a Flowable that automatically connects to this ConnectableFlowable, +     * @return a Flowable that automatically connects to this ConnectableFlowable, +     * Returns a Flowable that automatically connects to this ConnectableFlowable, +     *                            on the ConnectableFlowable. A non-positive value indicates, +     * @return a Flowable that automatically connects to this ConnectableFlowable, +     * Returns a Flowable that automatically connects to this ConnectableFlowable, +     *                            on the ConnectableFlowable. A non-positive value indicates, +     * @return a Flowable that automatically connects to this ConnectableFlowable, +++ b/src/main/java/io/reactivex/flowables/ConnectableFlowable.java, + * A {@code ConnectableFlowable} resembles an ordinary {@link Flowable}, except that it does not begin, + * can wait for all intended {@link Subscriber}s to {@link Flowable#subscribe} to the {@code Flowable}, + * before the {@code Flowable} begins emitting items., + *          the type of items emitted by the {@code ConnectableFlowable}, +     * Instructs the {@code ConnectableFlowable} to begin emitting the items from its underlying, +     * Instructs the {@code ConnectableFlowable} to begin emitting the items from its underlying, +     * Returns a {@code Flowable} that stays connected to this {@code ConnectableFlowable} as long as there, +     * is at least one subscription to this {@code ConnectableFlowable}., +     * Returns a Flowable that automatically connects to this ConnectableFlowable, +     * @return a Flowable that automatically connects to this ConnectableFlowable, +     * Returns a Flowable that automatically connects to this ConnectableFlowable, +     *                            on the ConnectableFlowable. A non-positive value indicates, +     * @return a Flowable that automatically connects to this ConnectableFlowable, +     * Returns a Flowable that automatically connects to this ConnectableFlowable, +     *                            on the ConnectableFlowable. A non-positive value indicates, +     * @return a Flowable that automatically connects to this ConnectableFlowable, +++ b/src/main/java/io/reactivex/flowables/GroupedFlowable.java, + * {@code GroupedFlowable}s that do not concern you. Instead, you can signal to them that they, +     * Returns the key that identifies the group of items emitted by this {@code GroupedFlowable}., +     * @return the key that the items emitted by this {@code GroupedFlowable} were grouped by, +++ b/src/main/java/io/reactivex/flowables/ConnectableFlowable.java, + * A {@code ConnectableFlowable} resembles an ordinary {@link Flowable}, except that it does not begin, + * can wait for all intended {@link Subscriber}s to {@link Flowable#subscribe} to the {@code Flowable}, + * before the {@code Flowable} begins emitting items., + *          the type of items emitted by the {@code ConnectableFlowable}, +     * Instructs the {@code ConnectableFlowable} to begin emitting the items from its underlying, +     * Instructs the {@code ConnectableFlowable} to begin emitting the items from its underlying, +     * Returns a {@code Flowable} that stays connected to this {@code ConnectableFlowable} as long as there, +     * is at least one subscription to this {@code ConnectableFlowable}., +     * Returns a Flowable that automatically connects to this ConnectableFlowable, +     * @return a Flowable that automatically connects to this ConnectableFlowable, +     * Returns a Flowable that automatically connects to this ConnectableFlowable, +     *                            on the ConnectableFlowable. A non-positive value indicates, +     * @return a Flowable that automatically connects to this ConnectableFlowable, +     * Returns a Flowable that automatically connects to this ConnectableFlowable, +     *                            on the ConnectableFlowable. A non-positive value indicates, +     * @return a Flowable that automatically connects to this ConnectableFlowable, +++ b/src/main/java/io/reactivex/flowables/GroupedFlowable.java, + * {@code GroupedFlowable}s that do not concern you. Instead, you can signal to them that they, +     * Returns the key that identifies the group of items emitted by this {@code GroupedFlowable}., +     * @return the key that the items emitted by this {@code GroupedFlowable} were grouped by, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAutoConnect.java, + * Wraps a {@link ConnectableFlowable} and calls its {@code connect()} method once, + * the specified number of {@link Subscriber}s have subscribed.]