[+++ b/rxjava-core/src/main/java/rx/observers/SerializedObserver.java, +import java.util.concurrent.ConcurrentLinkedQueue;, +    private final Observer<? super T> actual;, +    private final AtomicInteger count = new AtomicInteger();, +    private final ConcurrentLinkedQueue<Object> queue = new ConcurrentLinkedQueue<Object>();, +    private static Sentinel NULL_SENTINEL = new Sentinel();, +    private static Sentinel COMPLETE_SENTINEL = new Sentinel();, +    private static class Sentinel {, +, +    private static class ErrorSentinel extends Sentinel {, +        final Throwable e;, +, +        ErrorSentinel(Throwable e) {, +            this.e = e;, +        }, +    }, +, +    public SerializedObserver(Observer<? super T> s) {, +        this.actual = s;, +    }, +        queue.add(COMPLETE_SENTINEL);, +        doIt();, +    public void onError(final Throwable e) {, +        queue.add(new ErrorSentinel(e));, +        doIt();, +    public void onNext(T t) {, +        queue.add(t);, +        doIt();, +    public void doIt() {, +        if (count.getAndIncrement() == 0) {, +            do {, +                Object v = queue.poll();, +                if (v != null) {, +                    if (v instanceof Sentinel) {, +                        if (v == NULL_SENTINEL) {, +                            actual.onNext(null);, +                        } else if (v == COMPLETE_SENTINEL) {, +                            actual.onCompleted();, +                        } else if (v instanceof ErrorSentinel) {, +                            actual.onError(((ErrorSentinel) v).e);, +                        }, +                    } else {, +                        actual.onNext((T) v);, +                    }, +                }, +            } while (count.decrementAndGet() > 0);, +        }, +++ b/rxjava-core/src/main/java/rx/observers/SerializedObserver.java, +import java.util.concurrent.ConcurrentLinkedQueue;, +    private final Observer<? super T> actual;, +    private final AtomicInteger count = new AtomicInteger();, +    private final ConcurrentLinkedQueue<Object> queue = new ConcurrentLinkedQueue<Object>();, +    private static Sentinel NULL_SENTINEL = new Sentinel();, +    private static Sentinel COMPLETE_SENTINEL = new Sentinel();, +    private static class Sentinel {, +, +    private static class ErrorSentinel extends Sentinel {, +        final Throwable e;, +, +        ErrorSentinel(Throwable e) {, +            this.e = e;, +        }, +    }, +, +    public SerializedObserver(Observer<? super T> s) {, +        this.actual = s;, +    }, +        queue.add(COMPLETE_SENTINEL);, +        doIt();, +    public void onError(final Throwable e) {, +        queue.add(new ErrorSentinel(e));, +        doIt();, +    public void onNext(T t) {, +        queue.add(t);, +        doIt();, +    public void doIt() {, +        if (count.getAndIncrement() == 0) {, +            do {, +                Object v = queue.poll();, +                if (v != null) {, +                    if (v instanceof Sentinel) {, +                        if (v == NULL_SENTINEL) {, +                            actual.onNext(null);, +                        } else if (v == COMPLETE_SENTINEL) {, +                            actual.onCompleted();, +                        } else if (v instanceof ErrorSentinel) {, +                            actual.onError(((ErrorSentinel) v).e);, +                        }, +                    } else {, +                        actual.onNext((T) v);, +                    }, +                }, +            } while (count.decrementAndGet() > 0);, +        }, +++ b/rxjava-core/src/main/java/rx/observers/SerializedObserverViaStateMachine.java, +package rx.observers;, +, +import java.util.concurrent.atomic.AtomicReference;, +, +import rx.Observer;]