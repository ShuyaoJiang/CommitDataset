[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +   * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +   * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +     * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +   * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +     * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +++ b/rxjava-core/src/main/java/rx/operators/OperatorSkipLastTimed.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +            private List<Timestamped<T>> buffer = new ArrayList<Timestamped<T>>();, +                buffer.add(new Timestamped<T>(scheduler.now(), value));, +                buffer = Collections.emptyList();, +                long limit = scheduler.now() - timeInMillis;, +                try {, +                    for (Timestamped<T> v : buffer) {, +                        if (v.getTimestampMillis() < limit) {, +                            try {, +                                subscriber.onNext(v.getValue());, +                            } catch (Throwable t) {, +                                subscriber.onError(t);, +                                return;, +                            }, +                        } else {, +                            break;, +                        }, +                    }, +                } finally {, +                    buffer = Collections.emptyList();, +                }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +   * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +     * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +++ b/rxjava-core/src/main/java/rx/operators/OperatorSkipLastTimed.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +            private List<Timestamped<T>> buffer = new ArrayList<Timestamped<T>>();, +                buffer.add(new Timestamped<T>(scheduler.now(), value));, +                buffer = Collections.emptyList();, +                long limit = scheduler.now() - timeInMillis;, +                try {, +                    for (Timestamped<T> v : buffer) {, +                        if (v.getTimestampMillis() < limit) {, +                            try {, +                                subscriber.onNext(v.getValue());, +                            } catch (Throwable t) {, +                                subscriber.onError(t);, +                                return;, +                            }, +                        } else {, +                            break;, +                        }, +                    }, +                } finally {, +                    buffer = Collections.emptyList();, +                }, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +                    if (idx == newSubscriptions.length) {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +   * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +     * Note: this action will cache all items until "onCompleted" arrives. So don't use it on an infinite Observable., +++ b/rxjava-core/src/main/java/rx/operators/OperatorSkipLastTimed.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +            private List<Timestamped<T>> buffer = new ArrayList<Timestamped<T>>();, +                buffer.add(new Timestamped<T>(scheduler.now(), value));, +                buffer = Collections.emptyList();, +                long limit = scheduler.now() - timeInMillis;, +                try {, +                    for (Timestamped<T> v : buffer) {, +                        if (v.getTimestampMillis() < limit) {, +                            try {, +                                subscriber.onNext(v.getValue());, +                            } catch (Throwable t) {, +                                subscriber.onError(t);, +                                return;, +                            }, +                        } else {, +                            break;, +                        }, +                    }, +                } finally {, +                    buffer = Collections.emptyList();]