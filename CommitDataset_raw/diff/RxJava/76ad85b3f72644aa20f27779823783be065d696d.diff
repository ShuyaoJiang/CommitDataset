[+++ b/rxjava-core/src/main/java/rx/Observable.java, + * @param <T>, + *            the type of the item emitted by the Observable, +     * Function interface for work to be performed when an {@link Observable} is subscribed to via {@link Observable#subscribe(Observer)}, +     * @param onSubscribe, +     *            {@link OnSubscribeFunc} to be executed when {@link #subscribe(Observer)} is called, +     * also invokes the Observer's {@link Observer#onCompleted onCompleted} method.</li>, +     * @param observer, +     *            the Observer, +     * @return a {@link Subscription} reference with which the {@link Observer} can stop receiving items before the Observable has finished, +     * @throws IllegalArgumentException, +     *             if the {@link Observer} provided as the, +     *             argument to {@code subscribe()} is {@code null}, +     * also invokes the Observer's {@link Observer#onCompleted onCompleted} method.</li>, +     * @param observer, +     *            the Observer, +     * @param scheduler, +     *            the {@link Scheduler} on which Observers subscribe to, +     * @throws IllegalArgumentException, +     *             if an argument to {@code subscribe()} is {@code null}, +     * , +     * @param subject, +     *            the {@link Subject} for the {@link ConnectableObservable} to push source items into, +     * @param <R>, +     *            result type, +     *         source Observable to push results into the specified {@link Subject}, +     * @param subjectFactory, +     *            the subject factory, +     * @param selector, +     *            the selector function which can use the multicasted, +     * @param <T>, +     *            the type of item emitted by the Observable, +     * An Observable that invokes {@link Observer#onError onError} when the {@link Observer} subscribes to it., +     * @param <T>, +     *            the type of item emitted by the Observable, +                 * Accepts an {@link Observer} and calls its {@link Observer#onError onError} method., +                 * @param observer, +                 *            an {@link Observer} of this Observable, +     * Creates an Observable that will execute the given function when an {@link Observer} subscribes to it., +     * an Observable: It should invoke the Observer's {@link Observer#onNext onNext}, {@link Observer#onError onError}, and {@link Observer#onCompleted onCompleted} methods appropriately., +     * @param <T>, +     *            the type of the items that this Observable emits, +     * @param func, +     *            a function that accepts an {@code Observer<T>}, invokes its {@code onNext}, {@code onError}, and {@code onCompleted} methods as appropriate, and returns a {@link Subscription} to, +     * @param <T>, +     *            the type of the items (ostensibly) emitted by the Observable, +     *         immediately invokes the {@link Observer}'s {@link Observer#onCompleted() onCompleted} method, +     * @param scheduler, +     *            the scheduler to call the {@link Observer#onCompleted onCompleted} method, +     * @param <T>, +     *            the type of the items (ostensibly) emitted by the Observable, +     *         immediately invokes the {@link Observer}'s {@link Observer#onCompleted() onCompleted} method with the, +     * Returns an Observable that invokes an {@link Observer}'s {@link Observer#onError onError} method when the Observer subscribes to, +     * @param exception, +     *            the particular error to report, +     * @param <T>, +     *            the type of the items (ostensibly) emitted by the Observable, +     * @return an Observable that invokes the {@link Observer}'s {@link Observer#onError onError} method when the Observer, +     * Returns an Observable that invokes an {@link Observer}'s {@link Observer#onError onError} method with the specified scheduler., +     * @param exception, +     *            the particular error to report, +     * @param scheduler, +     *            the scheduler to call the {@link Observer#onError onError} method, +     * @param <T>, +     *            the type of the items (ostensibly) emitted by the Observable, +     * @return an Observable that invokes the {@link Observer}'s {@link Observer#onError onError} method with the specified, +     * Note: the entire iterable sequence is immediately emitted each time an {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned, it is not possible to, +     * unsubscribe from, +     * @param iterable, +     *            the source {@link Iterable} sequence, +     * @param <T>, +     *            the type of items in the {@link Iterable} sequence and the, +     * @return an Observable that emits each item in the source {@link Iterable} sequence, +     * @param iterable, +     *            the source {@link Iterable} sequence, +     * @param scheduler, +     *            the scheduler to emit the items of the iterable, +     * @param <T>, +     *            the type of items in the {@link Iterable} sequence and the, +     * @return an Observable that emits each item in the source {@link Iterable} sequence with the specified scheduler, +     * Note: the entire array is immediately emitted each time an {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned, it is not possible to unsubscribe from, +     * @param items, +     *            the source array, +     * @param <T>, +     *            the type of items in the Array and the type of items to be, +     * Note: the entire array is immediately emitted each time an {@link Observer} subscribes. Since this occurs before the {@link Subscription} is returned, it is not possible to unsubscribe from, +     * @param items, +     *            the source array, +     * @param scheduler, +     *            the scheduler to emit the items of the array, +     * @param <T>, +     *            the type of items in the Array and the type of items to be, +     * Note: the item is immediately emitted each time an {@link Observer} subscribes. Since this occurs before the {@link Subscription} is, +     * @param t1, +     *            the item, +     * @param <T>, +     *            the type of the item, and the type of the item to be, +     * Note: the items will be immediately emitted each time an {@link Observer} subscribes. Since this occurs before the {@link Subscription} is, +     * @param t1, +     *            first item]