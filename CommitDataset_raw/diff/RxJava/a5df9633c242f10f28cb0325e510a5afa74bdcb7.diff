[+++ b/src/main/java/io/reactivex/Observable.java, +        return new BlockingObservableLatest<T>(this);, +        return new BlockingObservableMostRecent<T>(this, initialValue);, +        return new BlockingObservableNext<T>(this);, +++ b/src/main/java/io/reactivex/Observable.java, +        return new BlockingObservableLatest<T>(this);, +        return new BlockingObservableMostRecent<T>(this, initialValue);, +        return new BlockingObservableNext<T>(this);, +++ b/src/main/java/io/reactivex/internal/operators/observable/BlockingObservableIterator.java, +implements io.reactivex.Observer<T>, Iterator<T>, Disposable {, +                try {, +                        while (!done && queue.isEmpty()) {, +                } catch (InterruptedException ex) {, +                    DisposableHelper.dispose(this);, +                    signalConsumer();, +                    throw ExceptionHelper.wrapOrThrow(ex);, +                }, +            return queue.poll();, +        queue.offer(t);, +++ b/src/main/java/io/reactivex/Observable.java, +        return new BlockingObservableLatest<T>(this);, +        return new BlockingObservableMostRecent<T>(this, initialValue);, +        return new BlockingObservableNext<T>(this);, +++ b/src/main/java/io/reactivex/internal/operators/observable/BlockingObservableIterator.java, +implements io.reactivex.Observer<T>, Iterator<T>, Disposable {, +                try {, +                        while (!done && queue.isEmpty()) {, +                } catch (InterruptedException ex) {, +                    DisposableHelper.dispose(this);, +                    signalConsumer();, +                    throw ExceptionHelper.wrapOrThrow(ex);, +                }, +            return queue.poll();, +        queue.offer(t);, +++ b/src/main/java/io/reactivex/internal/operators/observable/BlockingObservableLatest.java, +import io.reactivex.plugins.RxJavaPlugins;, +public final class BlockingObservableLatest<T> implements Iterable<T> {, +, +    final ObservableSource<T> source;, +, +    public BlockingObservableLatest(ObservableSource<T> source) {, +        this.source = source;, +    }, +, +        BlockingObservableLatestIterator<T> lio = new BlockingObservableLatestIterator<T>();, +        Observable<Notification<T>> materialized = Observable.wrap(source).materialize();, +    static final class BlockingObservableLatestIterator<T> extends DisposableObserver<Notification<T>> implements Iterator<T> {, +            RxJavaPlugins.onError(e);, +++ b/src/main/java/io/reactivex/Observable.java, +        return new BlockingObservableLatest<T>(this);, +        return new BlockingObservableMostRecent<T>(this, initialValue);, +        return new BlockingObservableNext<T>(this);, +++ b/src/main/java/io/reactivex/internal/operators/observable/BlockingObservableIterator.java, +implements io.reactivex.Observer<T>, Iterator<T>, Disposable {, +                try {, +                        while (!done && queue.isEmpty()) {, +                } catch (InterruptedException ex) {, +                    DisposableHelper.dispose(this);, +                    signalConsumer();, +                    throw ExceptionHelper.wrapOrThrow(ex);, +                }, +            return queue.poll();, +        queue.offer(t);, +++ b/src/main/java/io/reactivex/internal/operators/observable/BlockingObservableLatest.java, +import io.reactivex.plugins.RxJavaPlugins;, +public final class BlockingObservableLatest<T> implements Iterable<T> {, +, +    final ObservableSource<T> source;, +, +    public BlockingObservableLatest(ObservableSource<T> source) {, +        this.source = source;, +    }, +, +        BlockingObservableLatestIterator<T> lio = new BlockingObservableLatestIterator<T>();, +        Observable<Notification<T>> materialized = Observable.wrap(source).materialize();, +    static final class BlockingObservableLatestIterator<T> extends DisposableObserver<Notification<T>> implements Iterator<T> {, +            RxJavaPlugins.onError(e);, +++ b/src/main/java/io/reactivex/internal/operators/observable/BlockingObservableMostRecent.java, +public final class BlockingObservableMostRecent<T> implements Iterable<T> {, +, +    final ObservableSource<T> source;, +, +    final T initialValue;, +, +    public BlockingObservableMostRecent(ObservableSource<T> source, T initialValue) {, +        this.source = source;, +        this.initialValue = initialValue;, +    }, +, +++ b/src/main/java/io/reactivex/Observable.java, +        return new BlockingObservableLatest<T>(this);, +        return new BlockingObservableMostRecent<T>(this, initialValue);, +        return new BlockingObservableNext<T>(this);, +++ b/src/main/java/io/reactivex/internal/operators/observable/BlockingObservableIterator.java, +implements io.reactivex.Observer<T>, Iterator<T>, Disposable {, +                try {, +                        while (!done && queue.isEmpty()) {, +                } catch (InterruptedException ex) {, +                    DisposableHelper.dispose(this);, +                    signalConsumer();]