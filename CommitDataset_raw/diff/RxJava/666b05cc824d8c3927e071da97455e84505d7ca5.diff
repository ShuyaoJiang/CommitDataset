[+++ b/src/main/java/io/reactivex/Flowable.java, +     * @param itemTimeoutIndicator, +    public final <V> Flowable<T> timeout(Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator) {, +        return timeout0(null, itemTimeoutIndicator, null);, +     * @param itemTimeoutIndicator, +    public final <V> Flowable<T> timeout(Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator, Flowable<? extends T> other) {, +        return timeout0(null, itemTimeoutIndicator, other);, +     * @param other, +     *            the Publisher to use as the fallback in case of a timeout, +    public final Flowable<T> timeout(long timeout, TimeUnit timeUnit, Scheduler scheduler, Flowable<? extends T> other) {, +     * @param firstTimeoutIndicator, +     * @param itemTimeoutIndicator, +    public final <U, V> Flowable<T> timeout(Publisher<U> firstTimeoutIndicator,, +            Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator) {, +        ObjectHelper.requireNonNull(firstTimeoutIndicator, "firstTimeoutIndicator is null");, +        return timeout0(firstTimeoutIndicator, itemTimeoutIndicator, null);, +     * @param firstTimeoutIndicator, +     * @param itemTimeoutIndicator, +     *             if {@code itemTimeoutIndicator} is null, +            Publisher<U> firstTimeoutIndicator,, +            Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator,, +        ObjectHelper.requireNonNull(firstTimeoutIndicator, "firstTimeoutSelector is null");, +        return timeout0(firstTimeoutIndicator, itemTimeoutIndicator, other);, +            Publisher<U> firstTimeoutIndicator,, +            Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator,, +        ObjectHelper.requireNonNull(itemTimeoutIndicator, "itemTimeoutIndicator is null");, +        return RxJavaPlugins.onAssembly(new FlowableTimeout<T, U, V>(this, firstTimeoutIndicator, itemTimeoutIndicator, other));, +++ b/src/main/java/io/reactivex/Flowable.java, +     * @param itemTimeoutIndicator, +    public final <V> Flowable<T> timeout(Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator) {, +        return timeout0(null, itemTimeoutIndicator, null);, +     * @param itemTimeoutIndicator, +    public final <V> Flowable<T> timeout(Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator, Flowable<? extends T> other) {, +        return timeout0(null, itemTimeoutIndicator, other);, +     * @param other, +     *            the Publisher to use as the fallback in case of a timeout, +    public final Flowable<T> timeout(long timeout, TimeUnit timeUnit, Scheduler scheduler, Flowable<? extends T> other) {, +     * @param firstTimeoutIndicator, +     * @param itemTimeoutIndicator, +    public final <U, V> Flowable<T> timeout(Publisher<U> firstTimeoutIndicator,, +            Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator) {, +        ObjectHelper.requireNonNull(firstTimeoutIndicator, "firstTimeoutIndicator is null");, +        return timeout0(firstTimeoutIndicator, itemTimeoutIndicator, null);, +     * @param firstTimeoutIndicator, +     * @param itemTimeoutIndicator, +     *             if {@code itemTimeoutIndicator} is null, +            Publisher<U> firstTimeoutIndicator,, +            Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator,, +        ObjectHelper.requireNonNull(firstTimeoutIndicator, "firstTimeoutSelector is null");, +        return timeout0(firstTimeoutIndicator, itemTimeoutIndicator, other);, +            Publisher<U> firstTimeoutIndicator,, +            Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator,, +        ObjectHelper.requireNonNull(itemTimeoutIndicator, "itemTimeoutIndicator is null");, +        return RxJavaPlugins.onAssembly(new FlowableTimeout<T, U, V>(this, firstTimeoutIndicator, itemTimeoutIndicator, other));, +++ b/src/main/java/io/reactivex/Observable.java, +     * @param itemTimeoutIndicator, +    public final <V> Observable<T> timeout(Function<? super T, ? extends ObservableSource<V>> itemTimeoutIndicator) {, +        return timeout0(null, itemTimeoutIndicator, null);, +     * @param itemTimeoutIndicator, +    public final <V> Observable<T> timeout(Function<? super T, ? extends ObservableSource<V>> itemTimeoutIndicator,, +        return timeout0(null, itemTimeoutIndicator, other);, +     * @param other, +     *            the ObservableSource to use as the fallback in case of a timeout, +    public final Observable<T> timeout(long timeout, TimeUnit timeUnit, Scheduler scheduler, ObservableSource<? extends T> other) {, +     * @param firstTimeoutIndicator, +     * @param itemTimeoutIndicator, +    public final <U, V> Observable<T> timeout(ObservableSource<U> firstTimeoutIndicator,, +            Function<? super T, ? extends ObservableSource<V>> itemTimeoutIndicator) {, +        ObjectHelper.requireNonNull(firstTimeoutIndicator, "firstTimeoutIndicator is null");, +        return timeout0(firstTimeoutIndicator, itemTimeoutIndicator, null);, +     * @param firstTimeoutIndicator, +     * @param itemTimeoutIndicator, +     *             if {@code itemTimeoutIndicator} is null, +            ObservableSource<U> firstTimeoutIndicator,, +            Function<? super T, ? extends ObservableSource<V>> itemTimeoutIndicator,, +        ObjectHelper.requireNonNull(firstTimeoutIndicator, "firstTimeoutIndicator is null");, +        return timeout0(firstTimeoutIndicator, itemTimeoutIndicator, other);, +            ObservableSource<U> firstTimeoutIndicator,, +            Function<? super T, ? extends ObservableSource<V>> itemTimeoutIndicator,, +        ObjectHelper.requireNonNull(itemTimeoutIndicator, "itemTimeoutIndicator is null");, +        return RxJavaPlugins.onAssembly(new ObservableTimeout<T, U, V>(this, firstTimeoutIndicator, itemTimeoutIndicator, other));, +++ b/src/main/java/io/reactivex/Flowable.java, +     * @param itemTimeoutIndicator, +    public final <V> Flowable<T> timeout(Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator) {, +        return timeout0(null, itemTimeoutIndicator, null);, +     * @param itemTimeoutIndicator, +    public final <V> Flowable<T> timeout(Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator, Flowable<? extends T> other) {, +        return timeout0(null, itemTimeoutIndicator, other);, +     * @param other, +     *            the Publisher to use as the fallback in case of a timeout, +    public final Flowable<T> timeout(long timeout, TimeUnit timeUnit, Scheduler scheduler, Flowable<? extends T> other) {, +     * @param firstTimeoutIndicator, +     * @param itemTimeoutIndicator, +    public final <U, V> Flowable<T> timeout(Publisher<U> firstTimeoutIndicator,, +            Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator) {, +        ObjectHelper.requireNonNull(firstTimeoutIndicator, "firstTimeoutIndicator is null");, +        return timeout0(firstTimeoutIndicator, itemTimeoutIndicator, null);, +     * @param firstTimeoutIndicator, +     * @param itemTimeoutIndicator, +     *             if {@code itemTimeoutIndicator} is null]