[+++ b/src/main/java/rx/internal/operators/OperatorConcat.java, +            if (n > 0 && BackpressureUtils.getAndAddRequest(REQUESTED_UPDATER, this, n) == 0) {, +++ b/src/main/java/rx/internal/operators/OperatorConcat.java, +            if (n > 0 && BackpressureUtils.getAndAddRequest(REQUESTED_UPDATER, this, n) == 0) {, +++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +            group.requested.getAndAdd(n);, +++ b/src/main/java/rx/internal/operators/OperatorConcat.java, +            if (n > 0 && BackpressureUtils.getAndAddRequest(REQUESTED_UPDATER, this, n) == 0) {, +++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +            group.requested.getAndAdd(n);, +++ b/src/test/java/rx/internal/operators/OperatorConcatTest.java, +import static org.junit.Assert.assertTrue;, +import rx.Scheduler.Worker;, +import rx.functions.Action0;, +    , +    @Test, +    public void testRequestOverflowDoesNotStallStream() {, +        Observable<Integer> o1 = Observable.just(1,2,3);, +        Observable<Integer> o2 = Observable.just(4,5,6);, +        final AtomicBoolean completed = new AtomicBoolean(false);, +        o1.concatWith(o2).subscribe(new Subscriber<Integer>() {, +, +            @Override, +            public void onCompleted() {, +                completed.set(true);, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                , +            }, +, +            @Override, +            public void onNext(Integer t) {, +                request(2);, +            }});, +        , +        assertTrue(completed.get());, +    }, +    , +++ b/src/main/java/rx/internal/operators/OperatorConcat.java, +            if (n > 0 && BackpressureUtils.getAndAddRequest(REQUESTED_UPDATER, this, n) == 0) {, +++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +            group.requested.getAndAdd(n);, +++ b/src/test/java/rx/internal/operators/OperatorConcatTest.java, +import static org.junit.Assert.assertTrue;, +import rx.Scheduler.Worker;, +import rx.functions.Action0;, +    , +    @Test, +    public void testRequestOverflowDoesNotStallStream() {, +        Observable<Integer> o1 = Observable.just(1,2,3);, +        Observable<Integer> o2 = Observable.just(4,5,6);, +        final AtomicBoolean completed = new AtomicBoolean(false);, +        o1.concatWith(o2).subscribe(new Subscriber<Integer>() {, +, +            @Override, +            public void onCompleted() {, +                completed.set(true);, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                , +            }, +, +            @Override, +            public void onNext(Integer t) {, +                request(2);, +            }});, +        , +        assertTrue(completed.get());, +    }, +    , +++ b/src/test/java/rx/internal/operators/OperatorGroupByTest.java]