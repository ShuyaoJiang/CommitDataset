[+++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/observables/SwingObservable.java, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/observables/SwingObservable.java, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/AbstractButtonSource.java, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/observables/SwingObservable.java, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/AbstractButtonSource.java, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/KeyEventSource.java, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/observables/SwingObservable.java, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/AbstractButtonSource.java, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/KeyEventSource.java, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/where.png">, +            }).subscribe(new Action1<String>() {, +                public void call(String t1) {, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/observables/SwingObservable.java, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/AbstractButtonSource.java, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/KeyEventSource.java, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/where.png">, +            }).subscribe(new Action1<String>() {, +                public void call(String t1) {, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/observables/SwingObservable.java, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/AbstractButtonSource.java, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/KeyEventSource.java, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/where.png">, +            }).subscribe(new Action1<String>() {, +                public void call(String t1) {, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +++ b/rxjava-core/src/main/java/rx/operators/OperationCombineLatest.java, +    public static <T0, T1, R> Func1<Observer<R>, Subscription> combineLatest(Observable<T0> w0, Observable<T1> w1, Func2<T0, T1, ? extends R> combineLatestFunction) {, +    public static <T0, T1, T2, R> Func1<Observer<R>, Subscription> combineLatest(Observable<T0> w0, Observable<T1> w1, Observable<T2> w2, Func3<T0, T1, T2, ? extends R> combineLatestFunction) {, +    public static <T0, T1, T2, T3, R> Func1<Observer<R>, Subscription> combineLatest(Observable<T0> w0, Observable<T1> w1, Observable<T2> w2, Observable<T3> w3, Func4<T0, T1, T2, T3, ? extends R> combineLatestFunction) {, +        final Observable<T> w;, +        final Aggregator<R> a;, +        public CombineObserver(Aggregator<R> a, Observable<T> w) {, +    private static class Aggregator<R> implements Func1<Observer<R>, Subscription> {, +        private volatile Observer<R> observer;, +        <T> void complete(CombineObserver<? extends R, T> w) {, +        <T> void next(CombineObserver<? extends R, T> w, T arg) {, +        public Subscription call(Observer<R> observer) {, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/observables/SwingObservable.java, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/AbstractButtonSource.java, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/KeyEventSource.java, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +            Action1<Throwable> error = mock(Action1.class);, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +            verify(error, never()).call(Matchers.<Throwable>any());, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/where.png">, +            }).subscribe(new Action1<String>() {]