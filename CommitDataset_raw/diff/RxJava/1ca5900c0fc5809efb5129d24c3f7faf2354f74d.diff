[+++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +    public static <T> Func1<Observer<? super Boolean>, Subscription> all(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +        private final Observable<? extends T> sequence;, +        private AllObservable(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +    public static <T> Func1<Observer<? super Boolean>, Subscription> all(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +        private final Observable<? extends T> sequence;, +        private AllObservable(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationCache.java, +    public static <T> Func1<Observer<? super T>, Subscription> cache(final Observable<? extends T> source) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +    public static <T> Func1<Observer<? super Boolean>, Subscription> all(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +        private final Observable<? extends T> sequence;, +        private AllObservable(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationCache.java, +    public static <T> Func1<Observer<? super T>, Subscription> cache(final Observable<? extends T> source) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefer.java, +    public static <T> Func1<Observer<? super T>, Subscription> defer(final Func0<? extends Observable<? extends T>> observableFactory) {, +                Observable<? extends T> obs = observableFactory.call();, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +    public static <T> Func1<Observer<? super Boolean>, Subscription> all(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +        private final Observable<? extends T> sequence;, +        private AllObservable(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationCache.java, +    public static <T> Func1<Observer<? super T>, Subscription> cache(final Observable<? extends T> source) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefer.java, +    public static <T> Func1<Observer<? super T>, Subscription> defer(final Func0<? extends Observable<? extends T>> observableFactory) {, +                Observable<? extends T> obs = observableFactory.call();, +++ b/rxjava-core/src/main/java/rx/operators/OperationFilter.java, +    public static <T> Func1<Observer<? super T>, Subscription> filter(Observable<? extends T> that, Func1<? super T, Boolean> predicate) {, +        private final Observable<? extends T> that;, +        public Filter(Observable<? extends T> that, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +    public static <T> Func1<Observer<? super Boolean>, Subscription> all(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +        private final Observable<? extends T> sequence;, +        private AllObservable(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationCache.java, +    public static <T> Func1<Observer<? super T>, Subscription> cache(final Observable<? extends T> source) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefer.java, +    public static <T> Func1<Observer<? super T>, Subscription> defer(final Func0<? extends Observable<? extends T>> observableFactory) {, +                Observable<? extends T> obs = observableFactory.call();, +++ b/rxjava-core/src/main/java/rx/operators/OperationFilter.java, +    public static <T> Func1<Observer<? super T>, Subscription> filter(Observable<? extends T> that, Func1<? super T, Boolean> predicate) {, +        private final Observable<? extends T> that;, +        public Filter(Observable<? extends T> that, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationFinally.java, +    public static <T> Func1<Observer<? super T>, Subscription> finallyDo(final Observable<? extends T> sequence, final Action0 action) {, +        private final Observable<? extends T> sequence;, +        Finally(final Observable<? extends T> sequence, Action0 finalAction) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +    public static <T> Func1<Observer<? super Boolean>, Subscription> all(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +        private final Observable<? extends T> sequence;, +        private AllObservable(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationCache.java, +    public static <T> Func1<Observer<? super T>, Subscription> cache(final Observable<? extends T> source) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefer.java, +    public static <T> Func1<Observer<? super T>, Subscription> defer(final Func0<? extends Observable<? extends T>> observableFactory) {, +                Observable<? extends T> obs = observableFactory.call();, +++ b/rxjava-core/src/main/java/rx/operators/OperationFilter.java, +    public static <T> Func1<Observer<? super T>, Subscription> filter(Observable<? extends T> that, Func1<? super T, Boolean> predicate) {, +        private final Observable<? extends T> that;, +        public Filter(Observable<? extends T> that, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationFinally.java, +    public static <T> Func1<Observer<? super T>, Subscription> finallyDo(final Observable<? extends T> sequence, final Action0 action) {, +        private final Observable<? extends T> sequence;, +        Finally(final Observable<? extends T> sequence, Action0 finalAction) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationGroupBy.java, +    public static <K, T, R> Func1<Observer<? super GroupedObservable<K, R>>, Subscription> groupBy(Observable<? extends T> source, final Func1<? super T, ? extends K> keySelector, final Func1<? super T, ? extends R> elementSelector) {, +    public static <K, T> Func1<Observer<? super GroupedObservable<K, T>>, Subscription> groupBy(Observable<? extends T> source, final Func1<? super T, ? extends K> keySelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +    public static <T> Func1<Observer<? super Boolean>, Subscription> all(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +        private final Observable<? extends T> sequence;, +        private AllObservable(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationCache.java, +    public static <T> Func1<Observer<? super T>, Subscription> cache(final Observable<? extends T> source) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefer.java, +    public static <T> Func1<Observer<? super T>, Subscription> defer(final Func0<? extends Observable<? extends T>> observableFactory) {, +                Observable<? extends T> obs = observableFactory.call();, +++ b/rxjava-core/src/main/java/rx/operators/OperationFilter.java, +    public static <T> Func1<Observer<? super T>, Subscription> filter(Observable<? extends T> that, Func1<? super T, Boolean> predicate) {, +        private final Observable<? extends T> that;, +        public Filter(Observable<? extends T> that, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationFinally.java, +    public static <T> Func1<Observer<? super T>, Subscription> finallyDo(final Observable<? extends T> sequence, final Action0 action) {, +        private final Observable<? extends T> sequence;, +        Finally(final Observable<? extends T> sequence, Action0 finalAction) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationGroupBy.java, +    public static <K, T, R> Func1<Observer<? super GroupedObservable<K, R>>, Subscription> groupBy(Observable<? extends T> source, final Func1<? super T, ? extends K> keySelector, final Func1<? super T, ? extends R> elementSelector) {, +    public static <K, T> Func1<Observer<? super GroupedObservable<K, T>>, Subscription> groupBy(Observable<? extends T> source, final Func1<? super T, ? extends K> keySelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationMostRecent.java, +    public static <T> Iterable<T> mostRecent(final Observable<? extends T> source, T initialValue) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +    public static <T> Func1<Observer<? super Boolean>, Subscription> all(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +        private final Observable<? extends T> sequence;, +        private AllObservable(Observable<? extends T> sequence, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationCache.java, +    public static <T> Func1<Observer<? super T>, Subscription> cache(final Observable<? extends T> source) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefer.java, +    public static <T> Func1<Observer<? super T>, Subscription> defer(final Func0<? extends Observable<? extends T>> observableFactory) {, +                Observable<? extends T> obs = observableFactory.call();]