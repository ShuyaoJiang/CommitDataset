[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.subscriptions.CompositeSubscription;, +<<<<<<< HEAD, +=======, +     * Function interface for work to be performed when an {@link Observable} is subscribed to via {@link Observable#subscribe(Observer)}, +>>>>>>> Added Observable.bind, +    public static class OperatorSubscription implements Subscription {, +, +        private final CompositeSubscription cs = new CompositeSubscription();, +, +        @Override, +        public void unsubscribe() {, +            cs.unsubscribe();, +        }, +, +        public static OperatorSubscription create(Subscription s) {, +            OperatorSubscription _s = new OperatorSubscription();, +            _s.add(s);, +            return _s;, +        }, +, +        public boolean isUnsubscribed() {, +            return cs.isUnsubscribed();, +        }, +, +        public void add(Subscription s) {, +            cs.add(s);, +        }, +, +    }, +, +    final Action2<Observer<? super T>, OperatorSubscription> f;, +    protected Observable(Action2<Observer<? super T>, OperatorSubscription> f) {, +        this.f = f;, +<<<<<<< HEAD, +=======, +     * Creates an Observable that will execute the given function when an {@link Observer} subscribes to it., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/create.png">, +     * <p>, +     * Write the function you pass to <code>create</code> so that it behaves as, +     * an Observable: It should invoke the Observer's {@link Observer#onNext onNext}, {@link Observer#onError onError}, and {@link Observer#onCompleted onCompleted} methods appropriately., +     * <p>, +     * A well-formed Observable must invoke either the Observer's, +     * <code>onCompleted</code> method exactly once or its <code>onError</code>, +     * method exactly once., +     * <p>, +     * See <a href="http://go.microsoft.com/fwlink/?LinkID=205219">Rx Design, +     * Guidelines (PDF)</a> for detailed information., +     * , +     * @param <T>, +     *            the type of the items that this Observable emits, +     * @param func, +     *            a function that accepts an {@code Observer<T>}, invokes its {@code onNext}, {@code onError}, and {@code onCompleted} methods as appropriate, and returns a {@link Subscription} to, +     *            allow the Observer to cancel the subscription, +     * @return an Observable that, when an {@link Observer} subscribes to it,, +     *         will execute the given function, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#create">RxJava Wiki: create()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/system.reactive.linq.observable.create.aspx">MSDN: Observable.Create</a>, +     */, +    public final static <T> Observable<T> create(final Action2<Observer<? super T>, OperatorSubscription> f) {, +        return new Observable<T>(f);, +    }, +, +    public final static <T> Observable<T> create(final OnSubscribeFunc<T> func) {, +        return new Observable<T>(new Action2<Observer<? super T>, OperatorSubscription>() {, +, +            @Override, +            public void call(Observer<? super T> o, OperatorSubscription s) {, +                s.add(func.onSubscribe(o));, +            }, +, +        });, +    }, +    , +    public <R> Observable<R> bind(final Func2<Observer<? super R>, OperatorSubscription, Observer<? super T>> bind) {, +        return new Observable<R>(new Action2<Observer<? super R>, OperatorSubscription>() {, +, +            @Override, +            public void call(Observer<? super R> o, OperatorSubscription s) {, +                f.call(bind.call(o, s), s);, +            }, +        });, +    }, +, +    /* ******************************************************************************, +     * Operators Below Here, +     * ******************************************************************************, +     */, +, +    /**, +     * Given multiple Observables, return the one that first emits an item., +>>>>>>> Added Observable.bind, +<<<<<<< HEAD, +=======, +     * Returns an Observable that calls an Observable factory to create its, +     * Observable for each new Observer that subscribes. That is, for each, +     * subscriber, the actual Observable is determined by the factory function., +>>>>>>> Added Observable.bind, +<<<<<<< HEAD]