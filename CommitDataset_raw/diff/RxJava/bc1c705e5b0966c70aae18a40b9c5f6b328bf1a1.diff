[+++ b/src/main/java/io/reactivex/Completable.java, +     *  <dd>If any of the source {@code CompletableSource}s signal a {@code Throwable} via {@code onError}, the resulting, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are cancelled., +     *  If more than one {@code CompletableSource} signals an error, the resulting {@code Completable} may terminate with the, +     *  first one's error or, depending on the concurrency of the sources, may terminate with a, +     *  {@code CompositeException} containing two or more of the various error signals., +     *  {@code Throwable}s that didn't make into the composite will be sent (individually) to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} method as {@code UndeliverableException} errors. Similarly, {@code Throwable}s, +     *  signaled by source(s) after the returned {@code Completable} has been cancelled or terminated with a, +     *  (composite) error will be sent to the same global error handler., +     *  Use {@link #mergeArrayDelayError(CompletableSource...)} to merge sources and terminate only when all source {@code CompletableSource}s, +     *  have completed or failed with an error., +     *  </dd>, +     * @see #mergeArrayDelayError(CompletableSource...), +     *  <dt><b>Error handling:</b></dt>, +     *  <dd>If any of the source {@code CompletableSource}s signal a {@code Throwable} via {@code onError}, the resulting, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are cancelled., +     *  If more than one {@code CompletableSource} signals an error, the resulting {@code Completable} may terminate with the, +     *  first one's error or, depending on the concurrency of the sources, may terminate with a, +     *  {@code CompositeException} containing two or more of the various error signals., +     *  {@code Throwable}s that didn't make into the composite will be sent (individually) to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} method as {@code UndeliverableException} errors. Similarly, {@code Throwable}s, +     *  signaled by source(s) after the returned {@code Completable} has been cancelled or terminated with a, +     *  (composite) error will be sent to the same global error handler., +     *  Use {@link #mergeDelayError(Iterable)} to merge sources and terminate only when all source {@code CompletableSource}s, +     *  have completed or failed with an error., +     *  </dd>, +     * @see #mergeDelayError(Iterable), +     *  <dd>If any of the source {@code CompletableSource}s signal a {@code Throwable} via {@code onError}, the resulting, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are cancelled., +     *  If more than one {@code CompletableSource} signals an error, the resulting {@code Completable} may terminate with the, +     *  first one's error or, depending on the concurrency of the sources, may terminate with a, +     *  {@code CompositeException} containing two or more of the various error signals., +     *  {@code Throwable}s that didn't make into the composite will be sent (individually) to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} method as {@code UndeliverableException} errors. Similarly, {@code Throwable}s, +     *  signaled by source(s) after the returned {@code Completable} has been cancelled or terminated with a, +     *  (composite) error will be sent to the same global error handler., +     *  Use {@link #mergeDelayError(Publisher)} to merge sources and terminate only when all source {@code CompletableSource}s, +     *  have completed or failed with an error., +     *  </dd>, +     * @see #mergeDelayError(Publisher), +     *  <dd>If any of the source {@code CompletableSource}s signal a {@code Throwable} via {@code onError}, the resulting, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are cancelled., +     *  If more than one {@code CompletableSource} signals an error, the resulting {@code Completable} may terminate with the, +     *  first one's error or, depending on the concurrency of the sources, may terminate with a, +     *  {@code CompositeException} containing two or more of the various error signals., +     *  {@code Throwable}s that didn't make into the composite will be sent (individually) to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} method as {@code UndeliverableException} errors. Similarly, {@code Throwable}s, +     *  signaled by source(s) after the returned {@code Completable} has been cancelled or terminated with a, +     *  (composite) error will be sent to the same global error handler., +     *  Use {@link #mergeDelayError(Publisher, int)} to merge sources and terminate only when all source {@code CompletableSource}s, +     *  have completed or failed with an error., +     *  </dd>, +     * @see #mergeDelayError(Publisher, int), +     * completes normally or with an exception., +     * completes normally or with an exception., +     * dispose is called on the specified scheduler., +++ b/src/main/java/io/reactivex/Completable.java, +     *  <dd>If any of the source {@code CompletableSource}s signal a {@code Throwable} via {@code onError}, the resulting, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are cancelled., +     *  If more than one {@code CompletableSource} signals an error, the resulting {@code Completable} may terminate with the, +     *  first one's error or, depending on the concurrency of the sources, may terminate with a, +     *  {@code CompositeException} containing two or more of the various error signals., +     *  {@code Throwable}s that didn't make into the composite will be sent (individually) to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} method as {@code UndeliverableException} errors. Similarly, {@code Throwable}s, +     *  signaled by source(s) after the returned {@code Completable} has been cancelled or terminated with a, +     *  (composite) error will be sent to the same global error handler., +     *  Use {@link #mergeArrayDelayError(CompletableSource...)} to merge sources and terminate only when all source {@code CompletableSource}s, +     *  have completed or failed with an error., +     *  </dd>, +     * @see #mergeArrayDelayError(CompletableSource...), +     *  <dt><b>Error handling:</b></dt>, +     *  <dd>If any of the source {@code CompletableSource}s signal a {@code Throwable} via {@code onError}, the resulting, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are cancelled., +     *  If more than one {@code CompletableSource} signals an error, the resulting {@code Completable} may terminate with the, +     *  first one's error or, depending on the concurrency of the sources, may terminate with a, +     *  {@code CompositeException} containing two or more of the various error signals., +     *  {@code Throwable}s that didn't make into the composite will be sent (individually) to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} method as {@code UndeliverableException} errors. Similarly, {@code Throwable}s, +     *  signaled by source(s) after the returned {@code Completable} has been cancelled or terminated with a, +     *  (composite) error will be sent to the same global error handler., +     *  Use {@link #mergeDelayError(Iterable)} to merge sources and terminate only when all source {@code CompletableSource}s, +     *  have completed or failed with an error., +     *  </dd>, +     * @see #mergeDelayError(Iterable), +     *  <dd>If any of the source {@code CompletableSource}s signal a {@code Throwable} via {@code onError}, the resulting, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are cancelled., +     *  If more than one {@code CompletableSource} signals an error, the resulting {@code Completable} may terminate with the, +     *  first one's error or, depending on the concurrency of the sources, may terminate with a, +     *  {@code CompositeException} containing two or more of the various error signals., +     *  {@code Throwable}s that didn't make into the composite will be sent (individually) to the global error handler via, +     *  {@link RxJavaPlugins#onError(Throwable)} method as {@code UndeliverableException} errors. Similarly, {@code Throwable}s, +     *  signaled by source(s) after the returned {@code Completable} has been cancelled or terminated with a, +     *  (composite) error will be sent to the same global error handler., +     *  Use {@link #mergeDelayError(Publisher)} to merge sources and terminate only when all source {@code CompletableSource}s, +     *  have completed or failed with an error., +     *  </dd>, +     * @see #mergeDelayError(Publisher), +     *  <dd>If any of the source {@code CompletableSource}s signal a {@code Throwable} via {@code onError}, the resulting, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are cancelled.]