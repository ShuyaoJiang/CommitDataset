[+++ b/build.gradle, +apply plugin: 'pmd', +, +pmd {, +    toolVersion = '5.4.2', +    ignoreFailures = true, +    sourceSets = [sourceSets.main], +    ruleSets = [], +    ruleSetFiles = files('pmd.xml'), +, +}, +, +pmdMain {, +    reports {, +        html.enabled = true, +        xml.enabled = true, +    }, +}, +, +build.dependsOn pmdMain, +, +task pmdPrint(dependsOn: 'pmdMain') << {, +    File file = new File('build/reports/pmd/main.xml'), +    if (file.exists()) {, +, +        println("Listing first 100 PMD violations"), +, +        file.eachLine { line, count ->, +            if (count <= 100) {, +               println(line), +            }, +        }, +, +    } else {, +        println("PMD file not found."), +    }, +}, +, +build.dependsOn pmdPrint, +++ b/build.gradle, +apply plugin: 'pmd', +, +pmd {, +    toolVersion = '5.4.2', +    ignoreFailures = true, +    sourceSets = [sourceSets.main], +    ruleSets = [], +    ruleSetFiles = files('pmd.xml'), +, +}, +, +pmdMain {, +    reports {, +        html.enabled = true, +        xml.enabled = true, +    }, +}, +, +build.dependsOn pmdMain, +, +task pmdPrint(dependsOn: 'pmdMain') << {, +    File file = new File('build/reports/pmd/main.xml'), +    if (file.exists()) {, +, +        println("Listing first 100 PMD violations"), +, +        file.eachLine { line, count ->, +            if (count <= 100) {, +               println(line), +            }, +        }, +, +    } else {, +        println("PMD file not found."), +    }, +}, +, +build.dependsOn pmdPrint, +++ b/pmd.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0", +         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         name="pmd", +         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">, +   <description>RxJava PMD ruleset</description>, +   <rule ref="rulesets/java/design.xml/AbstractClassWithoutAbstractMethod"/>, +   <rule ref="rulesets/java/design.xml/AbstractClassWithoutAnyMethod"/>, +   <rule ref="rulesets/java/design.xml/AccessorClassGeneration"/>, +   <rule ref="rulesets/java/optimizations.xml/AddEmptyString"/>, +   <rule ref="rulesets/java/strings.xml/AppendCharacterWithChar"/>, +   <rule ref="rulesets/java/design.xml/AssignmentToNonFinalStatic"/>, +   <rule ref="rulesets/java/controversial.xml/AvoidAccessibilityAlteration"/>, +   <rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops"/>, +   <rule ref="rulesets/java/migrating.xml/AvoidAssertAsIdentifier"/>, +   <rule ref="rulesets/java/basic.xml/AvoidBranchingStatementAsLastInLoop"/>, +   <rule ref="rulesets/java/finalizers.xml/AvoidCallingFinalize"/>, +   <rule ref="rulesets/java/strictexception.xml/AvoidCatchingGenericException"/>, +   <rule ref="rulesets/java/strictexception.xml/AvoidCatchingNPE"/>, +   <rule ref="rulesets/java/design.xml/AvoidConstantsInterface"/>, +   <rule ref="rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>]