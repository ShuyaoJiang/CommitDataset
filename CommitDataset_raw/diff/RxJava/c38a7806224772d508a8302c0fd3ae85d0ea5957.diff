[+++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBlock.java, +                    if (n == 0) {, +                        return;, +                    }, +            boolean term;, +                term = terminated;, +                Subscriber<? super T> child = this.child;, +                BlockingQueue<Object> queue = this.queue;, +                    while (n > 0 || term) {, +                        Object o;, +                        if (term) {, +                            o = queue.peek();, +                                Throwable e = exception;, +                                if (e != null) {, +                                    child.onError(e);, +                                skipFinal = true;, +                            if (n == 0) {, +                                break;, +                            }, +                        }, +                        o = queue.poll();, +                        if (o == null) {, +                        term = terminated;, +                        boolean more = queue.peek() != null;, +                            if (!more && !term) {, +                            requestedCount -= emitted;, +                            n = requestedCount;, +                            if ((n == 0 || !more) && (!term || more)) {, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBlock.java, +                    if (n == 0) {, +                        return;, +                    }, +            boolean term;, +                term = terminated;, +                Subscriber<? super T> child = this.child;, +                BlockingQueue<Object> queue = this.queue;, +                    while (n > 0 || term) {, +                        Object o;, +                        if (term) {, +                            o = queue.peek();, +                                Throwable e = exception;, +                                if (e != null) {, +                                    child.onError(e);, +                                skipFinal = true;, +                            if (n == 0) {, +                                break;, +                            }, +                        }, +                        o = queue.poll();, +                        if (o == null) {, +                        term = terminated;, +                        boolean more = queue.peek() != null;, +                            if (!more && !term) {, +                            requestedCount -= emitted;, +                            n = requestedCount;, +                            if ((n == 0 || !more) && (!term || more)) {, +++ b/src/perf/java/rx/operators/OperatorSerializePerf.java, +import org.openjdk.jmh.annotations.BenchmarkMode;, +import org.openjdk.jmh.annotations.Benchmark;, +import org.openjdk.jmh.annotations.Mode;, +import org.openjdk.jmh.annotations.OutputTimeUnit;, +import org.openjdk.jmh.annotations.Param;, +import org.openjdk.jmh.annotations.Scope;, +import org.openjdk.jmh.annotations.State;, +import rx.Observable;, +import rx.Subscriber;, +import rx.jmh.InputWithIncrementingInteger;, +import rx.jmh.LatchedObserver;, +    public static class InputWithInterval extends InputWithIncrementingInteger {, +            interval = Observable.timer(0, 1, TimeUnit.MILLISECONDS).take(size).cast(Integer.class);, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBlock.java, +                    if (n == 0) {, +                        return;, +                    }, +            boolean term;, +                term = terminated;, +                Subscriber<? super T> child = this.child;, +                BlockingQueue<Object> queue = this.queue;, +                    while (n > 0 || term) {, +                        Object o;, +                        if (term) {, +                            o = queue.peek();, +                                Throwable e = exception;, +                                if (e != null) {, +                                    child.onError(e);, +                                skipFinal = true;, +                            if (n == 0) {, +                                break;, +                            }, +                        }, +                        o = queue.poll();, +                        if (o == null) {, +                        term = terminated;, +                        boolean more = queue.peek() != null;, +                            if (!more && !term) {, +                            requestedCount -= emitted;, +                            n = requestedCount;, +                            if ((n == 0 || !more) && (!term || more)) {, +++ b/src/perf/java/rx/operators/OperatorSerializePerf.java, +import org.openjdk.jmh.annotations.BenchmarkMode;]