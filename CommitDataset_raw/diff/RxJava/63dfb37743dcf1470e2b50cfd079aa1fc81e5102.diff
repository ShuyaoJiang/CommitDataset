[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationRepeat;, +     * Repeats the observable sequence indefinitely., +     * <p>, +     *, +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     */, +    public Observable<T> repeat() {, +        return this.repeat(Schedulers.currentThread());, +    }, +, +    /**, +     * Repeats the observable sequence indefinitely., +     * <p>, +     * @param scheduler the scheduler to send the values on., +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     */, +    public Observable<T> repeat(Scheduler scheduler) {, +        return create(OperationRepeat.repeat(this, scheduler));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationRepeat;, +     * Repeats the observable sequence indefinitely., +     * <p>, +     *, +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     */, +    public Observable<T> repeat() {, +        return this.repeat(Schedulers.currentThread());, +    }, +, +    /**, +     * Repeats the observable sequence indefinitely., +     * <p>, +     * @param scheduler the scheduler to send the values on., +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     */, +    public Observable<T> repeat(Scheduler scheduler) {, +        return create(OperationRepeat.repeat(this, scheduler));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationRepeat.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package rx.operators;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Scheduler;, +import rx.Subscription;, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.MultipleAssignmentSubscription;, +import rx.util.functions.Action0;, +import rx.util.functions.Action1;, +, +public class OperationRepeat<T> implements Observable.OnSubscribeFunc<T> {, +, +    private final Observable<T> source;, +    private final Scheduler scheduler;, +, +    public static <T> Observable.OnSubscribeFunc<T> repeat(Observable<T> source, Scheduler scheduler) {, +        return new OperationRepeat<T>(source, scheduler);, +    }, +, +    private OperationRepeat(Observable<T> source, Scheduler scheduler) {, +        this.source = source;, +        this.scheduler = scheduler;, +    }, +, +    @Override, +    public Subscription onSubscribe(final Observer<? super T> observer) {, +        final CompositeSubscription compositeSubscription = new CompositeSubscription();, +        final MultipleAssignmentSubscription innerSubscription = new MultipleAssignmentSubscription();, +        compositeSubscription.add(innerSubscription);, +        compositeSubscription.add(scheduler.schedule(new Action1<Action0>() {, +            @Override, +            public void call(final Action0 self) {, +                innerSubscription.set(source.subscribe(new Observer<T>() {, +]