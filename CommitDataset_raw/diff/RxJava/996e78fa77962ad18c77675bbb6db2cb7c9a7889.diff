[+++ b/rxjava-core/src/main/java/rx/subscriptions/SerialSubscription.java, +public final class SerialSubscription implements Subscription {, +, +    private final AtomicReference<State> state = new AtomicReference<State>(new State(false, Subscriptions.empty()));, +, +    private static final class State {, +        final boolean isUnsubscribed;, +        final Subscription subscription;, +, +        State(boolean u, Subscription s) {, +            this.isUnsubscribed = u;, +            this.subscription = s;, +, +        State unsubscribe() {, +            return new State(true, subscription);, +        }, +, +        State set(Subscription s) {, +            return new State(isUnsubscribed, s);, +        }, +, +    }, +        return state.get().isUnsubscribed;, +        State oldState;, +        State newState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                return;, +            } else {, +                newState = oldState.unsubscribe();, +        } while (!state.compareAndSet(oldState, newState));, +        oldState.subscription.unsubscribe();, +    @Deprecated, +    public void setSubscription(Subscription s) {, +        set(s);, +, +    public void set(Subscription s) {, +        if (s == null) {, +            throw new IllegalArgumentException("Subscription can not be null");, +        }, +        State oldState;, +        State newState;, +        do {, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                s.unsubscribe();, +                return;, +            } else {, +                newState = oldState.set(s);, +            }, +        } while (!state.compareAndSet(oldState, newState));, +        oldState.subscription.unsubscribe();, +    }, +, +    @Deprecated, +    public Subscription getSubscription() {, +        return get();, +    }, +, +    public Subscription get() {, +        return state.get().subscription;, +    }, +]