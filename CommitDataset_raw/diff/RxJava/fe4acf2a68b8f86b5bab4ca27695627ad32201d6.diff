[+++ b/src/main/java/io/reactivex/CompletableOperator.java, + * Interface to map/wrap a downstream observer to an upstream observer., +public interface CompletableOperator {, +    /**, +     * Applies a function to the child CompletableObserver and returns a new parent CompletableObserver., +     * @param observer the child CompletableObservable instance, +     * @return the parent CompletableObserver instance, +     */, +    CompletableObserver apply(CompletableObserver observer) throws Exception;, +++ b/src/main/java/io/reactivex/CompletableOperator.java, + * Interface to map/wrap a downstream observer to an upstream observer., +public interface CompletableOperator {, +    /**, +     * Applies a function to the child CompletableObserver and returns a new parent CompletableObserver., +     * @param observer the child CompletableObservable instance, +     * @return the parent CompletableObserver instance, +     */, +    CompletableObserver apply(CompletableObserver observer) throws Exception;, +++ b/src/main/java/io/reactivex/FlowableOperator.java, +public interface FlowableOperator<Downstream, Upstream> {, +    /**, +     * Applies a function to the child Subscriber and returns a new parent Subscriber., +     * @param observer the child Subscriber instance, +     * @return the parent Subscriber instance, +     */, +    Subscriber<? super Upstream> apply(Subscriber<? super Downstream> observer) throws Exception;, +++ b/src/main/java/io/reactivex/CompletableOperator.java, + * Interface to map/wrap a downstream observer to an upstream observer., +public interface CompletableOperator {, +    /**, +     * Applies a function to the child CompletableObserver and returns a new parent CompletableObserver., +     * @param observer the child CompletableObservable instance, +     * @return the parent CompletableObserver instance, +     */, +    CompletableObserver apply(CompletableObserver observer) throws Exception;, +++ b/src/main/java/io/reactivex/FlowableOperator.java, +public interface FlowableOperator<Downstream, Upstream> {, +    /**, +     * Applies a function to the child Subscriber and returns a new parent Subscriber., +     * @param observer the child Subscriber instance, +     * @return the parent Subscriber instance, +     */, +    Subscriber<? super Upstream> apply(Subscriber<? super Downstream> observer) throws Exception;, +++ b/src/main/java/io/reactivex/MaybeOperator.java, + * Interface to map/wrap a downstream observer to an upstream observer., +public interface MaybeOperator<Downstream, Upstream> {, +    /**, +     * Applies a function to the child MaybeObserver and returns a new parent MaybeObserver., +     * @param observer the child MaybeObserver instance, +     * @return the parent MaybeObserver instance, +     */, +    MaybeObserver<? super Upstream> apply(MaybeObserver<? super Downstream> observer) throws Exception;, +++ b/src/main/java/io/reactivex/CompletableOperator.java, + * Interface to map/wrap a downstream observer to an upstream observer., +public interface CompletableOperator {, +    /**, +     * Applies a function to the child CompletableObserver and returns a new parent CompletableObserver., +     * @param observer the child CompletableObservable instance, +     * @return the parent CompletableObserver instance, +     */, +    CompletableObserver apply(CompletableObserver observer) throws Exception;, +++ b/src/main/java/io/reactivex/FlowableOperator.java, +public interface FlowableOperator<Downstream, Upstream> {, +    /**, +     * Applies a function to the child Subscriber and returns a new parent Subscriber., +     * @param observer the child Subscriber instance, +     * @return the parent Subscriber instance, +     */, +    Subscriber<? super Upstream> apply(Subscriber<? super Downstream> observer) throws Exception;, +++ b/src/main/java/io/reactivex/MaybeOperator.java, + * Interface to map/wrap a downstream observer to an upstream observer., +public interface MaybeOperator<Downstream, Upstream> {, +    /**, +     * Applies a function to the child MaybeObserver and returns a new parent MaybeObserver., +     * @param observer the child MaybeObserver instance, +     * @return the parent MaybeObserver instance, +     */, +    MaybeObserver<? super Upstream> apply(MaybeObserver<? super Downstream> observer) throws Exception;, +++ b/src/main/java/io/reactivex/ObservableOperator.java, + * Interface to map/wrap a downstream observer to an upstream observer., +public interface ObservableOperator<Downstream, Upstream> {, +    /**, +     * Applies a function to the child Observer and returns a new parent Observer., +     * @param observer the child Observer instance, +     * @return the parent Observer instance, +     */, +    Observer<? super Upstream> apply(Observer<? super Downstream> observer) throws Exception;, +++ b/src/main/java/io/reactivex/CompletableOperator.java, + * Interface to map/wrap a downstream observer to an upstream observer., +public interface CompletableOperator {, +    /**, +     * Applies a function to the child CompletableObserver and returns a new parent CompletableObserver., +     * @param observer the child CompletableObservable instance, +     * @return the parent CompletableObserver instance, +     */, +    CompletableObserver apply(CompletableObserver observer) throws Exception;, +++ b/src/main/java/io/reactivex/FlowableOperator.java, +public interface FlowableOperator<Downstream, Upstream> {, +    /**, +     * Applies a function to the child Subscriber and returns a new parent Subscriber.]