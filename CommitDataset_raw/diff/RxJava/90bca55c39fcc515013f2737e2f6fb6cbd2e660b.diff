[+++ b/src/main/java/io/reactivex/exceptions/CompositeException.java, +    /*private */Throwable getRootCause(Throwable e) {, +++ b/src/main/java/io/reactivex/exceptions/CompositeException.java, +    /*private */Throwable getRootCause(Throwable e) {, +++ b/src/main/java/io/reactivex/internal/functions/ObjectHelper.java, +     * Compares two long values similar to Long.compare., +++ b/src/main/java/io/reactivex/exceptions/CompositeException.java, +    /*private */Throwable getRootCause(Throwable e) {, +++ b/src/main/java/io/reactivex/internal/functions/ObjectHelper.java, +     * Compares two long values similar to Long.compare., +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier.java, +            if (DisposableHelper.replace(other, bs)) {, +        }, +++ b/src/main/java/io/reactivex/exceptions/CompositeException.java, +    /*private */Throwable getRootCause(Throwable e) {, +++ b/src/main/java/io/reactivex/internal/functions/ObjectHelper.java, +     * Compares two long values similar to Long.compare., +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier.java, +            if (DisposableHelper.replace(other, bs)) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java, +            cancelled = true;, +                buffer = next;, +            }, +            cancelled = true;, +            clear();, +++ b/src/main/java/io/reactivex/exceptions/CompositeException.java, +    /*private */Throwable getRootCause(Throwable e) {, +++ b/src/main/java/io/reactivex/internal/functions/ObjectHelper.java, +     * Compares two long values similar to Long.compare., +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier.java, +            if (DisposableHelper.replace(other, bs)) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java, +            cancelled = true;, +                buffer = next;, +            }, +            cancelled = true;, +            clear();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDebounceTimed.java, +        Disposable timer;, +            Disposable d = timer;, +            timer = de;, +            Disposable d = timer;, +            if (d != null) {, +                d.dispose();, +            }, +            Disposable d = timer;, +            if (d != null) {, +                d.dispose();, +            }, +, +++ b/src/main/java/io/reactivex/exceptions/CompositeException.java, +    /*private */Throwable getRootCause(Throwable e) {, +++ b/src/main/java/io/reactivex/internal/functions/ObjectHelper.java, +     * Compares two long values similar to Long.compare., +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier.java, +            if (DisposableHelper.replace(other, bs)) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java, +            cancelled = true;, +                buffer = next;, +            }, +            cancelled = true;, +            clear();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDebounceTimed.java, +        Disposable timer;, +            Disposable d = timer;, +            timer = de;, +            Disposable d = timer;, +            if (d != null) {, +                d.dispose();, +            }, +            Disposable d = timer;, +            if (d != null) {, +                d.dispose();, +            }, +, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBuffer.java, +            if (b != null) {, +                if (!b.isEmpty()) {, +    }, +++ b/src/main/java/io/reactivex/exceptions/CompositeException.java, +    /*private */Throwable getRootCause(Throwable e) {, +++ b/src/main/java/io/reactivex/internal/functions/ObjectHelper.java, +     * Compares two long values similar to Long.compare., +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier.java, +            if (DisposableHelper.replace(other, bs)) {, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java, +            cancelled = true;, +                buffer = next;, +            }, +            cancelled = true;, +            clear();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDebounceTimed.java, +        Disposable timer;, +            Disposable d = timer;, +            timer = de;, +            Disposable d = timer;]