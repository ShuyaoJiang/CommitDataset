[+++ b/src/main/java/io/reactivex/processors/PublishProcessor.java, +                BackpressureHelper.producedCancel(this, 1);, +++ b/src/main/java/io/reactivex/processors/PublishProcessor.java, +                BackpressureHelper.producedCancel(this, 1);, +++ b/src/test/java/io/reactivex/processors/BehaviorProcessorTest.java, +, +    @Test(timeout = 10000), +    public void subscriberCancelOfferRace() {, +        for (int i = 0; i < 1000; i++) {, +            final BehaviorProcessor<Integer> pp = BehaviorProcessor.create();, +, +            final TestSubscriber<Integer> ts = pp.test(1);, +, +            Runnable r1 = new Runnable() {, +                @Override, +                public void run() {, +                    for (int i = 0; i < 2; i++) {, +                        while (!pp.offer(i)) ;, +                    }, +                }, +            };, +, +            Runnable r2 = new Runnable() {, +                @Override, +                public void run() {, +                    ts.cancel();, +                }, +            };, +, +            TestHelper.race(r1, r2);, +, +            if (ts.valueCount() > 0) {, +                ts.assertValuesOnly(0);, +            } else {, +                ts.assertEmpty();, +            }, +        }, +    }, +++ b/src/main/java/io/reactivex/processors/PublishProcessor.java, +                BackpressureHelper.producedCancel(this, 1);, +++ b/src/test/java/io/reactivex/processors/BehaviorProcessorTest.java, +, +    @Test(timeout = 10000), +    public void subscriberCancelOfferRace() {, +        for (int i = 0; i < 1000; i++) {, +            final BehaviorProcessor<Integer> pp = BehaviorProcessor.create();, +, +            final TestSubscriber<Integer> ts = pp.test(1);, +, +            Runnable r1 = new Runnable() {, +                @Override, +                public void run() {, +                    for (int i = 0; i < 2; i++) {, +                        while (!pp.offer(i)) ;, +                    }, +                }, +            };, +, +            Runnable r2 = new Runnable() {, +                @Override, +                public void run() {, +                    ts.cancel();, +                }, +            };, +, +            TestHelper.race(r1, r2);, +, +            if (ts.valueCount() > 0) {, +                ts.assertValuesOnly(0);, +            } else {, +                ts.assertEmpty();, +            }, +        }, +    }, +++ b/src/test/java/io/reactivex/processors/PublishProcessorTest.java, +, +    @Test(timeout = 10000), +    public void subscriberCancelOfferRace() {, +        for (int i = 0; i < 1000; i++) {, +            final PublishProcessor<Integer> pp = PublishProcessor.create();, +, +            final TestSubscriber<Integer> ts = pp.test(1);, +, +            Runnable r1 = new Runnable() {, +                @Override, +                public void run() {, +                    for (int i = 0; i < 2; i++) {, +                        while (!pp.offer(i)) ;, +                    }, +                }, +            };, +, +            Runnable r2 = new Runnable() {, +                @Override, +                public void run() {, +                    ts.cancel();, +                }, +            };, +, +            TestHelper.race(r1, r2);]