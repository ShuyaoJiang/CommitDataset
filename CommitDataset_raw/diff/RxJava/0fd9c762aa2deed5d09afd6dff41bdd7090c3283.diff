[+++ b/src/main/java/rx/internal/operators/OperatorMulticast.java, +    private final AtomicReference<Subject<? super T, ? extends R>> connectedSubject;, +    private final List<Subscriber<? super R>> waitingForConnect;, +    Subscriber<T> subscription;, +        boolean shouldSubscribe = false;, +, +                // already connected, return as there is nothing to do, +                shouldSubscribe = true;, +        if (shouldSubscribe) {, +            connection.call(Subscriptions.create(new Action0() {, +                @Override, +                public void call() {, +                    Subscription s;, +                    synchronized (guard) {, +                        s = subscription;, +                        subscription = null;, +                        connectedSubject.set(null);, +                    }, +                    if (s != null) {, +                        s.unsubscribe();, +                    }, +                }, +            }));, +            boolean subscriptionIsNull;, +                subscriptionIsNull = subscription == null;, +            if (!subscriptionIsNull), +                source.subscribe(subscription);, +        }, +++ b/src/main/java/rx/internal/operators/OperatorMulticast.java, +    private final AtomicReference<Subject<? super T, ? extends R>> connectedSubject;, +    private final List<Subscriber<? super R>> waitingForConnect;, +    Subscriber<T> subscription;, +        boolean shouldSubscribe = false;, +, +                // already connected, return as there is nothing to do, +                shouldSubscribe = true;, +        if (shouldSubscribe) {, +            connection.call(Subscriptions.create(new Action0() {, +                @Override, +                public void call() {, +                    Subscription s;, +                    synchronized (guard) {, +                        s = subscription;, +                        subscription = null;, +                        connectedSubject.set(null);, +                    }, +                    if (s != null) {, +                        s.unsubscribe();, +                    }, +                }, +            }));, +            boolean subscriptionIsNull;, +                subscriptionIsNull = subscription == null;, +            if (!subscriptionIsNull), +                source.subscribe(subscription);, +        }, +++ b/src/main/java/rx/internal/operators/OperatorPublish.java, +        public synchronized boolean hasNoSubscriber() {, +            return subscribers.length == 0;, +        }, +, +            if (emitted > 0) {, +                if (origin != null) {, +        }, +                        if (localState.hasNoSubscriber()) {, +                            // Drop items due to no subscriber, +                            if (localBuffer.poll() == null) {, +                                // Exit due to no more item, +                                break;, +                            } else {, +                                // Keep dropping cached items., +                                continue;, +                            }, +                        }, +, +++ b/src/main/java/rx/internal/operators/OperatorMulticast.java, +    private final AtomicReference<Subject<? super T, ? extends R>> connectedSubject;, +    private final List<Subscriber<? super R>> waitingForConnect;, +    Subscriber<T> subscription;, +        boolean shouldSubscribe = false;, +, +                // already connected, return as there is nothing to do, +                shouldSubscribe = true;, +        if (shouldSubscribe) {, +            connection.call(Subscriptions.create(new Action0() {, +                @Override, +                public void call() {, +                    Subscription s;, +                    synchronized (guard) {, +                        s = subscription;, +                        subscription = null;, +                        connectedSubject.set(null);, +                    }, +                    if (s != null) {, +                        s.unsubscribe();, +                    }, +                }, +            }));, +            boolean subscriptionIsNull;, +                subscriptionIsNull = subscription == null;]