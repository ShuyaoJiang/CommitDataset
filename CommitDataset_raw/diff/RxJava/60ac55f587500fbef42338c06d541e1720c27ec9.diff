[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorCast;, +import rx.operators.OperatorMap;, +import rx.operators.OperatorTimestamp;, +        return bind(new OperatorCast<T, R>(klass));, +        return bind(new OperatorMap<T, R>(func));, +<<<<<<< HEAD, +=======, +     * Turns all of the emissions and notifications from a source Observable, +     * into emissions marked with their original types within {@link Notification} objects., +>>>>>>> Bind implementation of Map, Cast, Timestamp, +        return timestamp(Schedulers.immediate());, +        return bind(new OperatorTimestamp<T>(scheduler));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorCast;, +import rx.operators.OperatorMap;, +import rx.operators.OperatorTimestamp;, +        return bind(new OperatorCast<T, R>(klass));, +        return bind(new OperatorMap<T, R>(func));, +<<<<<<< HEAD, +=======, +     * Turns all of the emissions and notifications from a source Observable, +     * into emissions marked with their original types within {@link Notification} objects., +>>>>>>> Bind implementation of Map, Cast, Timestamp, +        return timestamp(Schedulers.immediate());, +        return bind(new OperatorTimestamp<T>(scheduler));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorCast;, +import rx.operators.OperatorMap;, +import rx.operators.OperatorTimestamp;, +        return bind(new OperatorCast<T, R>(klass));, +        return bind(new OperatorMap<T, R>(func));, +<<<<<<< HEAD, +=======, +     * Turns all of the emissions and notifications from a source Observable, +     * into emissions marked with their original types within {@link Notification} objects., +>>>>>>> Bind implementation of Map, Cast, Timestamp, +        return timestamp(Schedulers.immediate());, +        return bind(new OperatorTimestamp<T>(scheduler));, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorCast;, +import rx.operators.OperatorMap;, +import rx.operators.OperatorTimestamp;, +        return bind(new OperatorCast<T, R>(klass));, +        return bind(new OperatorMap<T, R>(func));, +<<<<<<< HEAD, +=======, +     * Turns all of the emissions and notifications from a source Observable, +     * into emissions marked with their original types within {@link Notification} objects., +>>>>>>> Bind implementation of Map, Cast, Timestamp, +        return timestamp(Schedulers.immediate());, +        return bind(new OperatorTimestamp<T>(scheduler));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorCast;, +import rx.operators.OperatorMap;, +import rx.operators.OperatorTimestamp;, +        return bind(new OperatorCast<T, R>(klass));, +        return bind(new OperatorMap<T, R>(func));, +<<<<<<< HEAD, +=======, +     * Turns all of the emissions and notifications from a source Observable, +     * into emissions marked with their original types within {@link Notification} objects., +>>>>>>> Bind implementation of Map, Cast, Timestamp, +        return timestamp(Schedulers.immediate());, +        return bind(new OperatorTimestamp<T>(scheduler));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorCast.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import rx.Observable.OperatorSubscription;, +import rx.Observer;, +import rx.util.functions.Func2;, +, +/**, + * Converts the elements of an observable sequence to the specified type., + */, +public class OperatorCast<T, R> implements Func2<Observer<? super R>, OperatorSubscription, Observer<? super T>> {]