[+++ b/src/main/java/io/reactivex/Completable.java, +        return this.<T>toObservable().concatWith(next);, +        return other.concatWith(this.<T>toObservable());, +++ b/src/main/java/io/reactivex/Completable.java, +        return this.<T>toObservable().concatWith(next);, +        return other.concatWith(this.<T>toObservable());, +++ b/src/main/java/io/reactivex/Observable.java, +import io.reactivex.Observer;, +import io.reactivex.flowables.*;, +import io.reactivex.internal.fuseable.*;, +import io.reactivex.internal.operators.flowable.*;, + * The Observable class that is designed similar to the Reactive-Streams Pattern, minus the backpressure,, + *  and offers factory methods, intermediate operators and the ability to consume reactive dataflows., + * <p>, + * Reactive-Streams operates with {@code ObservableSource}s which {@code Observable} extends. Many operators, + * therefore accept general {@code ObservableSource}s directly and allow direct interoperation with other, + * Reactive-Streams implementations., + * <p>, + * The Observable's operators, by default, run with a buffer size of 128 elements (see {@link Flowable#bufferSize()},, + * that can be overridden globally via the system parameter {@code rx2.buffer-size}. Most operators, however, have, + * overloads that allow setting their internal buffer size explicitly., + * <p>, + * The documentation for this class makes use of marble diagrams. The following legend explains these diagrams:, + * <p>, + * <img width="640" height="301" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/legend.png" alt="">, + * <p>, + * For more information see the <a href="http://reactivex.io/documentation/ObservableSource.html">ReactiveX, + * documentation</a>., + * , + *            the type of the items emitted by the Observable, +    /**, +     * Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends, +     * a termination notification., +     * <p>, +     * <img width="640" height="385" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/amb.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code amb} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param <T> the common element type, +     * @param sources, +     *            an Iterable of ObservableSources sources competing to react first, +     * @return a Observable that emits the same sequence as whichever of the source ObservableSources first, +     *         emitted an item or sent a termination notification, +     * @see <a href="http://reactivex.io/documentation/operators/amb.html">ReactiveX operators documentation: Amb</a>, +     */, +    /**, +     * Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends, +     * a termination notification., +     * <p>, +     * <img width="640" height="385" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/amb.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code amb} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param <T> the common element type, +     * @param sources, +     *            an array of ObservableSource sources competing to react first, +     * @return a Observable that emits the same sequence as whichever of the source ObservableSources first, +     *         emitted an item or sent a termination notification, +     * @see <a href="http://reactivex.io/documentation/operators/amb.html">ReactiveX operators documentation: Amb</a>, +     */, +            return (Observable<T>)wrap(sources[0]);, +     * @return the default 'island' size or capacity-increment hint, +    /**, +     * Combines a collection of source ObservableSources by emitting an item that aggregates the latest values of each of, +     * the source ObservableSources each time an item is received from any of the source ObservableSources, where this, +     * aggregation is defined by a specified function., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code combineLatest} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <T>, +     *            the common base type of source values, +     * @param <R>, +     *            the result type, +     * @param sources, +     *            the collection of source ObservableSources, +     * @param combiner, +     *            the aggregation function used to combine the items emitted by the source ObservableSources, +     * @param bufferSize , +     *            the internal buffer size and prefetch amount applied to every source Observable, +     * @return a Observable that emits items that are the result of combining the items emitted by the source, +     *         ObservableSources by means of the given aggregation function, +     * @see <a href="http://reactivex.io/documentation/operators/combinelatest.html">ReactiveX operators documentation: CombineLatest</a>, +     */, +    public static <T, R> Observable<R> combineLatest(Function<? super T[], ? extends R> combiner, int bufferSize, ObservableSource<? extends T>... sources) {, +        return combineLatest(sources, combiner, bufferSize);, +    /**, +     * Combines a collection of source ObservableSources by emitting an item that aggregates the latest values of each of, +     * the source ObservableSources each time an item is received from any of the source ObservableSources, where this, +     * aggregation is defined by a specified function., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code combineLatest} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *]