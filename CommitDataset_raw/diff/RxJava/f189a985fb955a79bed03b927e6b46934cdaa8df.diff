[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationRepeat;, +     * @see MSDN: <a href="http://msdn.microsoft.com/en-us/library/hh229460.aspx">Observable.Range Method (Int32, Int32)</a>, +     * @see MSDN: <a href="http://msdn.microsoft.com/en-us/library/hh211896.aspx">Observable.Range Method (Int32, Int32, IScheduler)</a>, +     * Repeats the observable sequence indefinitely., +     * <p>, +     *, +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     */, +    public Observable<T> repeat() {, +        return this.repeat(Schedulers.currentThread());, +    }, +, +    /**, +     * Repeats the observable sequence indefinitely., +     * <p>, +     * @param scheduler the scheduler to send the values on., +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     */, +    public Observable<T> repeat(Scheduler scheduler) {, +        return create(OperationRepeat.repeat(this, scheduler));, +    }, +, +    /**, +     * @param time, +     *            the length of the time window, +     * @param unit, +     *            the time unit, +     * Create an Observable that skips values before the given time, +     * elapses while waiting on the given scheduler., +     * @param time, +     *            the length of the time window, +     * @param unit, +     *            the time unit, +     * @param scheduler, +     *            the scheduler where the timed wait happens, +     * @return an Observable that skips values before the given time, +     *         elapses while waiting on the given scheduler, +     * @throws IllegalArgumentException, +     *             if the source emits more than one item, +      * Create an Observable that takes the emitted values of the source, +      * @return an Observable that takes the emitted values of the source, +      *         Observable before the time runs out., +      * Create an Observable that takes the emitted values of the source, +      * @return an Observable that takes the emitted values of the source, +      *         Observable before the time runs out, waiting on the given scheduler., +     * Create an observable which skips values emitted in a time window, +     * before the source completes., +     * @return an observable which skips values emitted in a time window, +     * before the source completes, +     * Create an observable which skips values emitted in a time window, +     * before the source completes by using the given scheduler as time source., +     * @return an observable which skips values emitted in a time window, +     * before the source completes by using the given scheduler as time source, +     * @param onCompleted the action to invoke when the source Observable calls, +     *                    <code>onCompleted</code>, +     * , +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationRepeat;, +     * @see MSDN: <a href="http://msdn.microsoft.com/en-us/library/hh229460.aspx">Observable.Range Method (Int32, Int32)</a>, +     * @see MSDN: <a href="http://msdn.microsoft.com/en-us/library/hh211896.aspx">Observable.Range Method (Int32, Int32, IScheduler)</a>, +     * Repeats the observable sequence indefinitely., +     * <p>, +     *, +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     */, +    public Observable<T> repeat() {, +        return this.repeat(Schedulers.currentThread());, +    }, +, +    /**, +     * Repeats the observable sequence indefinitely., +     * <p>, +     * @param scheduler the scheduler to send the values on., +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     */, +    public Observable<T> repeat(Scheduler scheduler) {, +        return create(OperationRepeat.repeat(this, scheduler));, +    }, +, +    /**, +     * @param time, +     *            the length of the time window, +     * @param unit, +     *            the time unit, +     * Create an Observable that skips values before the given time, +     * elapses while waiting on the given scheduler., +     * @param time, +     *            the length of the time window, +     * @param unit, +     *            the time unit, +     * @param scheduler, +     *            the scheduler where the timed wait happens, +     * @return an Observable that skips values before the given time, +     *         elapses while waiting on the given scheduler, +     * @throws IllegalArgumentException]