[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    for ((finalSum, finalCount) <- o.foldLeft((0.0, 0))({case ((sum, count), elem) => (sum+elem, count+1)})), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    for ((finalSum, finalCount) <- o.foldLeft((0.0, 0))({case ((sum, count), elem) => (sum+elem, count+1)})), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def foldLeft[R](initialValue: R)(accumulator: (R, T) => R): Observable[R] = {, +    this.map(predicate).foldLeft(true)(_ && _), +    foldLeft(num.zero)(num.plus), +    foldLeft(num.one)(num.times), +    this.take(1).foldLeft[Option[U]](None)((v: Option[U], e: U) => Some(e)).map({]