[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMap.java, +                    if (ex != ExceptionHelper.TERMINATED) {, +                    }, +                Throwable ex = errs.terminate();, +                if (ex != ExceptionHelper.TERMINATED) {, +                    actual.onError(ex);, +                }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMap.java, +                    if (ex != ExceptionHelper.TERMINATED) {, +                    }, +                Throwable ex = errs.terminate();, +                if (ex != ExceptionHelper.TERMINATED) {, +                    actual.onError(ex);, +                }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableFlatMap.java, +                    Throwable ex = errors.terminate();, +                    if (ex != ExceptionHelper.TERMINATED) {, +                            child.onError(ex);, +                        }, +                e = errors.terminate();, +                if (e != ExceptionHelper.TERMINATED) {, +                    actual.onError(e);, +                }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMap.java, +                    if (ex != ExceptionHelper.TERMINATED) {, +                    }, +                Throwable ex = errs.terminate();, +                if (ex != ExceptionHelper.TERMINATED) {, +                    actual.onError(ex);, +                }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableFlatMap.java, +                    Throwable ex = errors.terminate();, +                    if (ex != ExceptionHelper.TERMINATED) {, +                            child.onError(ex);, +                        }, +                e = errors.terminate();, +                if (e != ExceptionHelper.TERMINATED) {, +                    actual.onError(e);, +                }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableFlatMapTest.java, +import io.reactivex.plugins.RxJavaPlugins;, +, +    @Test, +    public void cancelScalarDrainRace() {, +        for (int i = 0; i < 1000; i++) {, +            List<Throwable> errors = TestHelper.trackPluginErrors();, +            try {, +, +                final PublishProcessor<Flowable<Integer>> pp = PublishProcessor.create();, +, +                final TestSubscriber<Integer> ts = pp.flatMap(Functions.<Flowable<Integer>>identity()).test(0);, +, +                Runnable r1 = new Runnable() {, +                    @Override, +                    public void run() {, +                        ts.cancel();, +                    }, +                };, +                Runnable r2 = new Runnable() {, +                    @Override, +                    public void run() {, +                        pp.onComplete();, +                    }, +                };, +, +                TestHelper.race(r1, r2);, +, +                assertTrue(errors.toString(), errors.isEmpty());, +            } finally {, +                RxJavaPlugins.reset();, +            }, +        }, +    }, +, +    @Test, +    public void cancelDrainRace() {, +        for (int i = 0; i < 1000; i++) {, +            for (int j = 1; j < 50; j += 5) {, +                List<Throwable> errors = TestHelper.trackPluginErrors();, +                try {, +, +                    final PublishProcessor<Flowable<Integer>> pp = PublishProcessor.create();, +, +                    final TestSubscriber<Integer> ts = pp.flatMap(Functions.<Flowable<Integer>>identity()).test(0);, +, +                    final PublishProcessor<Integer> just = PublishProcessor.create();, +                    pp.onNext(just);, +, +                    Runnable r1 = new Runnable() {, +                        @Override, +                        public void run() {, +                            ts.request(1);, +                            ts.cancel();, +                        }, +                    };, +                    Runnable r2 = new Runnable() {, +                        @Override, +                        public void run() {, +                            just.onNext(1);, +                        }]