[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationTake;, +        return create(OperationTake.takeWhile(items, predicate));, +        return create(OperationTake.takeWhileWithIndex(items, predicate));, +        return create(OperationTake.takeWhileWithIndex(items, new Func2<T, Integer, Boolean>() {, +            public Boolean call(T t, Integer integer) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationTake;, +        return create(OperationTake.takeWhile(items, predicate));, +        return create(OperationTake.takeWhileWithIndex(items, predicate));, +        return create(OperationTake.takeWhileWithIndex(items, new Func2<T, Integer, Boolean>() {, +            public Boolean call(T t, Integer integer) {, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationTake;, +        return create(OperationTake.takeWhile(items, predicate));, +        return create(OperationTake.takeWhileWithIndex(items, predicate));, +        return create(OperationTake.takeWhileWithIndex(items, new Func2<T, Integer, Boolean>() {, +            public Boolean call(T t, Integer integer) {, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperationTake.java, +import rx.subjects.PublishSubject;, +import rx.util.functions.Func2;, +        return takeWhileWithIndex(items, OperationTake.<T> numPredicate(num));, +    }, +, +    /**, +     * Returns a specified number of contiguous values from the start of an observable sequence., +     * , +     * @param items, +     * @param predicate, +     *            a function to test each source element for a condition, +     * @return, +     */, +    public static <T> Func1<Observer<T>, Subscription> takeWhile(final Observable<T> items, final Func1<T, Boolean> predicate) {, +        return takeWhileWithIndex(items, OperationTake.<T> skipIndex(predicate));, +    }, +, +    /**, +     * Returns values from an observable sequence as long as a specified condition is true, and then skips the remaining values., +     * , +     * @param items, +     * @param predicate, +     *            a function to test each element for a condition; the second parameter of the function represents the index of the source element; otherwise, false., +     * @return, +     */, +    public static <T> Func1<Observer<T>, Subscription> takeWhileWithIndex(final Observable<T> items, final Func2<T, Integer, Boolean> predicate) {, +                return new TakeWhile<T>(items, predicate).call(observer);, +    private static <T> Func2<T, Integer, Boolean> numPredicate(final int num) {, +        return new Func2<T, Integer, Boolean>() {, +, +            @Override, +            public Boolean call(T input, Integer index) {, +                return index < num;, +            }, +, +        };, +    }, +, +    private static <T> Func2<T, Integer, Boolean> skipIndex(final Func1<T, Boolean> underlying) {, +        return new Func2<T, Integer, Boolean>() {, +            @Override, +            public Boolean call(T input, Integer index) {, +                return underlying.call(input);, +            }, +        };, +    }, +, +    private static class TakeWhile<T> implements Func1<Observer<T>, Subscription> {, +        private final Func2<T, Integer, Boolean> predicate;, +        private TakeWhile(Observable<T> items, Func2<T, Integer, Boolean> predicate) {, +            this.predicate = predicate;, +                if (predicate.call(args, counter.getAndIncrement())) {, +                } else {, +        public void testTakeWhile1() {, +            Observable<Integer> w = Observable.toObservable(1, 2, 3);, +            Observable<Integer> take = Observable.create(takeWhile(w, new Func1<Integer, Boolean>() {, +                @Override, +                public Boolean call(Integer input) {, +                    return input < 3;, +                }, +            }));, +, +            @SuppressWarnings("unchecked"), +            Observer<Integer> aObserver = mock(Observer.class);, +            take.subscribe(aObserver);, +            verify(aObserver, times(1)).onNext(1);, +            verify(aObserver, times(1)).onNext(2);, +            verify(aObserver, never()).onNext(3);, +            verify(aObserver, never()).onError(any(Exception.class));, +            verify(aObserver, times(1)).onCompleted();, +        }, +, +        @Test, +        public void testTakeWhileOnSubject1() {, +            PublishSubject<Integer> s = PublishSubject.create();, +            Observable<Integer> w = (Observable<Integer>)s;, +            Observable<Integer> take = Observable.create(takeWhile(w, new Func1<Integer, Boolean>(), +            {, +                @Override]