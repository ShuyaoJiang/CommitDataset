[+++ b/src/main/java/io/reactivex/Flowable.java, +     * Consumes the upstream {@code Flowable} in a blocking fashion and invokes the given, +     * {@code Consumer} with each upstream item on the <em>current thread</em> until the, +     * upstream terminates., +     * <em>Note:</em> the method will only return if the upstream terminates or the current, +     * thread is interrupted., +     * <p>, +     * <p>This method executes the {@code Consumer} on the current thread while, +     * {@link #subscribe(Consumer)} executes the consumer on the original caller thread of the, +     * sequence., +++ b/src/main/java/io/reactivex/Flowable.java, +     * Consumes the upstream {@code Flowable} in a blocking fashion and invokes the given, +     * {@code Consumer} with each upstream item on the <em>current thread</em> until the, +     * upstream terminates., +     * <em>Note:</em> the method will only return if the upstream terminates or the current, +     * thread is interrupted., +     * <p>, +     * <p>This method executes the {@code Consumer} on the current thread while, +     * {@link #subscribe(Consumer)} executes the consumer on the original caller thread of the, +     * sequence., +++ b/src/main/java/io/reactivex/Observable.java, +     * Consumes the upstream {@code Observable} in a blocking fashion and invokes the given, +     * {@code Consumer} with each upstream item on the <em>current thread</em> until the, +     * upstream terminates., +     * <em>Note:</em> the method will only return if the upstream terminates or the current, +     * thread is interrupted., +     * <p>, +     * <p>This method executes the {@code Consumer} on the current thread while, +     * {@link #subscribe(Consumer)} executes the consumer on the original caller thread of the, +     * sequence.]