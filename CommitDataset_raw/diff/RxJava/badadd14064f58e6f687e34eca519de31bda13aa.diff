[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/test/java/rx/operators/OperatorFirstTest.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import static org.mockito.MockitoAnnotations.*;, +, +import java.util.NoSuchElementException;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;, +import org.mockito.Mock;, +, +import rx.Observable;, +import rx.Observer;, +import rx.functions.Func1;, +, +public class OperatorFirstTest {, +, +    @Mock, +    Observer<String> w;, +, +    private static final Func1<String, Boolean> IS_D = new Func1<String, Boolean>() {, +        @Override, +        public Boolean call(String value) {, +            return "d".equals(value);, +        }, +    };, +, +    @Before, +    public void before() {, +        initMocks(this);, +    }, +, +    @Test, +    public void testFirstOrElseOfNone() {, +        Observable<String> src = Observable.empty();, +        src.firstOrDefault("default").subscribe(w);, +, +        verify(w, times(1)).onNext(anyString());, +        verify(w, times(1)).onNext("default");, +        verify(w, never()).onError(any(Throwable.class));, +        verify(w, times(1)).onCompleted();, +    }, +, +    @Test, +    public void testFirstOrElseOfSome() {, +        Observable<String> src = Observable.from("a", "b", "c");, +        src.firstOrDefault("default").subscribe(w);, +, +        verify(w, times(1)).onNext(anyString());, +        verify(w, times(1)).onNext("a");, +        verify(w, never()).onError(any(Throwable.class));, +        verify(w, times(1)).onCompleted();, +    }, +, +    @Test, +    public void testFirstOrElseWithPredicateOfNoneMatchingThePredicate() {, +        Observable<String> src = Observable.from("a", "b", "c");, +        src.firstOrDefault("default", IS_D).subscribe(w);, +, +        verify(w, times(1)).onNext(anyString());, +        verify(w, times(1)).onNext("default");, +        verify(w, never()).onError(any(Throwable.class));, +        verify(w, times(1)).onCompleted();, +    }, +, +    @Test, +    public void testFirstOrElseWithPredicateOfSome() {, +        Observable<String> src = Observable.from("a", "b", "c", "d", "e", "f");, +        src.firstOrDefault("default", IS_D).subscribe(w);, +, +        verify(w, times(1)).onNext(anyString());, +        verify(w, times(1)).onNext("d");, +        verify(w, never()).onError(any(Throwable.class));, +        verify(w, times(1)).onCompleted();, +    }, +, +    @Test]