[+++ b/src/test/java/rx/internal/operators/OperatorRetryTest.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +, +        producer.retryWhen(new Func1<Observable<? extends Throwable>, Observable<?>>() {, +            public Observable<?> call(Observable<? extends Throwable> attempts) {, +                    .map(new Func1<Throwable, Tuple>() {, +                        public Tuple call(Throwable n) {, +                                Observable.<Long>error(t.n) :, +        Throwable n;, +        Tuple(Long c, Throwable n) {, +        origin.retryWhen(new Func1<Observable<? extends Throwable>, Observable<?>>() {, +            public Observable<?> call(Observable<? extends Throwable> t1) {, +                return t1.observeOn(Schedulers.computation()).map(new Func1<Throwable, Void>() {, +                    public Void call(Throwable t1) {, +                        return null;, +                }).startWith((Void) null);, +        origin.retryWhen(new Func1<Observable<? extends Throwable>, Observable<?>>() {, +            public Observable<?> call(Observable<? extends Throwable> t1) {, +                return t1.map(new Func1<Throwable, Void>() {, +                    public Void call(Throwable t1) {, +                        return null;, +                }).startWith((Void) null);, +        origin.retryWhen(new Func1<Observable<? extends Throwable>, Observable<?>>() {, +            public Observable<?> call(Observable<? extends Throwable> t1) {, +        origin.retryWhen(new Func1<Observable<? extends Throwable>, Observable<?>>() {, +            public Observable<?> call(Observable<? extends Throwable> t1) {]