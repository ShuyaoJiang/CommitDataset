[+++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    public void testTakeWhileViaGroovy() {, +        Observable.takeWhile(Observable.toObservable(1, 2, 3), { x -> x < 3}).subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received(1);, +        verify(a, times(1)).received(2);, +        verify(a, times(0)).received(3);, +    }, +, +    @Test, +    public void testTakeWhileWithIndexViaGroovy() {, +        Observable.takeWhileWithIndex(Observable.toObservable(1, 2, 3), { x, i -> i < 2}).subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received(1);, +        verify(a, times(1)).received(2);, +        verify(a, times(0)).received(3);, +    }, +, +    @Test, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    public void testTakeWhileViaGroovy() {, +        Observable.takeWhile(Observable.toObservable(1, 2, 3), { x -> x < 3}).subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received(1);, +        verify(a, times(1)).received(2);, +        verify(a, times(0)).received(3);, +    }, +, +    @Test, +    public void testTakeWhileWithIndexViaGroovy() {, +        Observable.takeWhileWithIndex(Observable.toObservable(1, 2, 3), { x, i -> i < 2}).subscribe({ result -> a.received(result)});, +        verify(a, times(1)).received(1);, +        verify(a, times(1)).received(2);, +        verify(a, times(0)).received(3);, +    }, +, +    @Test, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns a specified number of contiguous values from the start of an observable sequence., +     *, +     * @param items, +     * @param predicate a function to test each source element for a condition, +     * @return, +     */, +    public static <T> Observable<T> takeWhile(final Observable<T> items, Func1<T, Boolean> predicate) {, +        return create(OperationTake.takeWhile(items, predicate));, +    }, +, +    /**, +     * Returns a specified number of contiguous values from the start of an observable sequence., +     *, +     * @param items, +     * @param predicate a function to test each source element for a condition, +     * @return, +     */, +    public static <T> Observable<T> takeWhile(final Observable<T> items, Object predicate) {, +        final FuncN _f = Functions.from(predicate);, +, +        return takeWhile(items, new Func1<T, Boolean>() {, +            @Override, +            public Boolean call(T t) {, +                return (Boolean) _f.call(t);, +            }, +        });, +    }, +, +    /**, +     * Returns values from an observable sequence as long as a specified condition is true, and then skips the remaining values., +     *, +     * @param items, +     * @param predicate a function to test each element for a condition; the second parameter of the function represents the index of the source element; otherwise, false., +     * @return, +     */, +    public static <T> Observable<T> takeWhileWithIndex(final Observable<T> items, Func2<T, Integer, Boolean> predicate) {, +        return create(OperationTake.takeWhileWithIndex(items, predicate));, +    }, +, +    public static <T> Observable<T> takeWhileWithIndex(final Observable<T> items, Object predicate) {, +        final FuncN _f = Functions.from(predicate);, +, +        return create(OperationTake.takeWhileWithIndex(items, new Func2<T, Integer, Boolean>() {, +            @Override, +            public Boolean call(T t, Integer integer) {, +                return (Boolean) _f.call(t, integer);, +            }, +        }));, +    }, +, +    /**, +, +    /**, +     * Returns an Observable that items emitted by the source Observable as long as a specified condition is true., +     *, +     * @param predicate a function to test each source element for a condition, +     * @return, +     */, +    public Observable<T> takeWhile(final Func1<T, Boolean> predicate) {, +        return takeWhile(this, predicate);, +    }, +, +    /**, +     * Returns a specified number of contiguous values from the start of an observable sequence., +     *]