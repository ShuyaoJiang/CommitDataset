[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +import io.reactivex.Scheduler.Worker;, +import io.reactivex.internal.schedulers.TrampolineScheduler;, +        Scheduler sch = scheduler;, +        if (sch instanceof TrampolineScheduler) {, +            Worker worker = sch.createWorker();, +            is.setResource(worker);, +            worker.schedulePeriodically(is, initialDelay, period, unit);, +        } else {, +            Disposable d = sch.schedulePeriodicallyDirect(is, initialDelay, period, unit);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +import io.reactivex.Scheduler.Worker;, +import io.reactivex.internal.schedulers.TrampolineScheduler;, +        Scheduler sch = scheduler;, +        if (sch instanceof TrampolineScheduler) {, +            Worker worker = sch.createWorker();, +            is.setResource(worker);, +            worker.schedulePeriodically(is, initialDelay, period, unit);, +        } else {, +            Disposable d = sch.schedulePeriodicallyDirect(is, initialDelay, period, unit);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableIntervalRange.java, +import io.reactivex.Scheduler.Worker;, +import io.reactivex.internal.schedulers.TrampolineScheduler;, +        Scheduler sch = scheduler;, +        if (sch instanceof TrampolineScheduler) {, +            Worker worker = sch.createWorker();, +            is.setResource(worker);, +            worker.schedulePeriodically(is, initialDelay, period, unit);, +        } else {, +            Disposable d = sch.schedulePeriodicallyDirect(is, initialDelay, period, unit);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +import io.reactivex.Scheduler.Worker;, +import io.reactivex.internal.schedulers.TrampolineScheduler;, +        Scheduler sch = scheduler;, +        if (sch instanceof TrampolineScheduler) {, +            Worker worker = sch.createWorker();, +            is.setResource(worker);, +            worker.schedulePeriodically(is, initialDelay, period, unit);, +        } else {, +            Disposable d = sch.schedulePeriodicallyDirect(is, initialDelay, period, unit);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableIntervalRange.java, +import io.reactivex.Scheduler.Worker;, +import io.reactivex.internal.schedulers.TrampolineScheduler;, +        Scheduler sch = scheduler;, +        if (sch instanceof TrampolineScheduler) {, +            Worker worker = sch.createWorker();, +            is.setResource(worker);, +            worker.schedulePeriodically(is, initialDelay, period, unit);, +        } else {, +            Disposable d = sch.schedulePeriodicallyDirect(is, initialDelay, period, unit);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableInterval.java, +import io.reactivex.Scheduler.Worker;, +import io.reactivex.internal.schedulers.TrampolineScheduler;, +        Scheduler sch = scheduler;, +        if (sch instanceof TrampolineScheduler) {, +            Worker worker = sch.createWorker();, +            is.setResource(worker);, +            worker.schedulePeriodically(is, initialDelay, period, unit);, +        } else {, +            Disposable d = sch.schedulePeriodicallyDirect(is, initialDelay, period, unit);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +import io.reactivex.Scheduler.Worker;, +import io.reactivex.internal.schedulers.TrampolineScheduler;, +        Scheduler sch = scheduler;, +        if (sch instanceof TrampolineScheduler) {, +            Worker worker = sch.createWorker();, +            is.setResource(worker);, +            worker.schedulePeriodically(is, initialDelay, period, unit);, +        } else {, +            Disposable d = sch.schedulePeriodicallyDirect(is, initialDelay, period, unit);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableIntervalRange.java, +import io.reactivex.Scheduler.Worker;, +import io.reactivex.internal.schedulers.TrampolineScheduler;, +        Scheduler sch = scheduler;, +        if (sch instanceof TrampolineScheduler) {, +            Worker worker = sch.createWorker();, +            is.setResource(worker);, +            worker.schedulePeriodically(is, initialDelay, period, unit);, +        } else {, +            Disposable d = sch.schedulePeriodicallyDirect(is, initialDelay, period, unit);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableInterval.java, +import io.reactivex.Scheduler.Worker;, +import io.reactivex.internal.schedulers.TrampolineScheduler;, +        Scheduler sch = scheduler;, +        if (sch instanceof TrampolineScheduler) {, +            Worker worker = sch.createWorker();, +            is.setResource(worker);, +            worker.schedulePeriodically(is, initialDelay, period, unit);, +        } else {, +            Disposable d = sch.schedulePeriodicallyDirect(is, initialDelay, period, unit);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableIntervalRange.java]