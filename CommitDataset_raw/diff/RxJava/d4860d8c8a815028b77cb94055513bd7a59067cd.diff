[+++ b/README.md, +# RxJava: Reactive Programming on the JVM, +++ b/README.md, +# RxJava: Reactive Programming on the JVM, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ b/README.md, +# RxJava: Reactive Programming on the JVM, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/README.md, +# RxJava: Reactive Programming on the JVM, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/ListeningFragmentActivity.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +            strings = SampleObservables.numberStrings(1, 50, 250).observeOn(mainThread()).publish();, +            subscription = strings.subscribe(new Subscriber<String>() {, +++ b/README.md, +# RxJava: Reactive Programming on the JVM, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/ListeningFragmentActivity.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +            strings = SampleObservables.numberStrings(1, 50, 250).observeOn(mainThread()).publish();, +            subscription = strings.subscribe(new Subscriber<String>() {, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/RetainedFragmentActivity.java, +import rx.android.schedulers.AndroidSchedulers;, +            strings = SampleObservables.fakeApiCall(2000).map(PARSE_JSON), +                    .observeOn(AndroidSchedulers.mainThread()), +                    .cache();, +++ b/README.md, +# RxJava: Reactive Programming on the JVM, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/ListeningFragmentActivity.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +            strings = SampleObservables.numberStrings(1, 50, 250).observeOn(mainThread()).publish();, +            subscription = strings.subscribe(new Subscriber<String>() {, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/RetainedFragmentActivity.java, +import rx.android.schedulers.AndroidSchedulers;, +            strings = SampleObservables.fakeApiCall(2000).map(PARSE_JSON), +                    .observeOn(AndroidSchedulers.mainThread()), +                    .cache();, +++ /dev/null, +++ b/README.md, +# RxJava: Reactive Programming on the JVM, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/ListeningFragmentActivity.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +            strings = SampleObservables.numberStrings(1, 50, 250).observeOn(mainThread()).publish();, +            subscription = strings.subscribe(new Subscriber<String>() {, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/RetainedFragmentActivity.java, +import rx.android.schedulers.AndroidSchedulers;, +            strings = SampleObservables.fakeApiCall(2000).map(PARSE_JSON), +                    .observeOn(AndroidSchedulers.mainThread()), +                    .cache();, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +import rx.operators.OperatorWeakBinding;, +            return fragment.isAdded();, +                    return fragment.isAdded();, +     * Binds the given source sequence to the life-cycle of an activity., +     * that no notifications will be forwarded to the activity in case it gets destroyed by the Android runtime, +     * or garbage collected by the VM., +        return source.observeOn(mainThread()).lift(new OperatorWeakBinding<T, Activity>(activity, ACTIVITY_VALIDATOR));, +     * Binds the given source sequence to the life-cycle of a fragment (native or support-v4)., +     * activity or garbage collected by the VM., +    public static <T> Observable<T> bindFragment(Object fragment, Observable<T> cachedSequence) {, +        final Observable<T> source = cachedSequence.observeOn(mainThread());, +            return source.lift(new OperatorWeakBinding<T, android.support.v4.app.Fragment>(f, FRAGMENTV4_VALIDATOR));, +            return source.lift(new OperatorWeakBinding<T, Fragment>(f, FRAGMENT_VALIDATOR));, +++ b/README.md, +# RxJava: Reactive Programming on the JVM, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/ListeningFragmentActivity.java, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +            strings = SampleObservables.numberStrings(1, 50, 250).observeOn(mainThread()).publish();, +            subscription = strings.subscribe(new Subscriber<String>() {, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/RetainedFragmentActivity.java, +import rx.android.schedulers.AndroidSchedulers;, +            strings = SampleObservables.fakeApiCall(2000).map(PARSE_JSON), +                    .observeOn(AndroidSchedulers.mainThread()), +                    .cache();, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +import rx.operators.OperatorWeakBinding;, +            return fragment.isAdded();, +                    return fragment.isAdded();, +     * Binds the given source sequence to the life-cycle of an activity., +     * that no notifications will be forwarded to the activity in case it gets destroyed by the Android runtime, +     * or garbage collected by the VM., +        return source.observeOn(mainThread()).lift(new OperatorWeakBinding<T, Activity>(activity, ACTIVITY_VALIDATOR));, +     * Binds the given source sequence to the life-cycle of a fragment (native or support-v4)., +     * activity or garbage collected by the VM., +    public static <T> Observable<T> bindFragment(Object fragment, Observable<T> cachedSequence) {, +        final Observable<T> source = cachedSequence.observeOn(mainThread());, +            return source.lift(new OperatorWeakBinding<T, android.support.v4.app.Fragment>(f, FRAGMENTV4_VALIDATOR));, +            return source.lift(new OperatorWeakBinding<T, Fragment>(f, FRAGMENT_VALIDATOR));]