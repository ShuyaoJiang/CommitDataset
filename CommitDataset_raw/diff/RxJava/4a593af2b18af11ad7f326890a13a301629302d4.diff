[+++ b/src/main/java/rx/Observable.java, +    @SuppressWarnings("unchecked"), +    public <R> Observable<R> compose(Transformer<? super T, ? extends R> transformer) {, +        // Casting to Observable<R> is type-safe because we know Observable is covariant., +        return (Observable<R>) transformer.call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<? extends T>, Observable<? extends R>> {, +++ b/src/main/java/rx/Observable.java, +    @SuppressWarnings("unchecked"), +    public <R> Observable<R> compose(Transformer<? super T, ? extends R> transformer) {, +        // Casting to Observable<R> is type-safe because we know Observable is covariant., +        return (Observable<R>) transformer.call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<? extends T>, Observable<? extends R>> {, +++ b/src/test/java/rx/CovarianceTest.java, +import rx.functions.Func1;, + * See https://github.com/Netflix/RxJava/pull/331, +        Observable<HorrorMovie> movie = Observable.just(new HorrorMovie());, +            public Observable<? extends Movie> call(Observable<? extends Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<? extends Movie> t1) {, +    @Test, +    public void testCovarianceOfCompose3() {, +        Observable<Movie> movie = Observable.<Movie>just(new HorrorMovie());, +        Observable<HorrorMovie> movie2 = movie.compose(new Transformer<Movie, HorrorMovie>() {, +            @Override, +            public Observable<? extends HorrorMovie> call(Observable<? extends Movie> t1) {, +                return Observable.just(new HorrorMovie()).map(new Func1<HorrorMovie, HorrorMovie>() {, +, +                    @Override, +                    public HorrorMovie call(HorrorMovie horrorMovie) {, +                        return horrorMovie;, +                    }, +                });, +            }, +        });, +    }, +, +    @Test, +    public void testCovarianceOfCompose4() {, +        Observable<HorrorMovie> movie = Observable.just(new HorrorMovie());, +        Observable<HorrorMovie> movie2 = movie.compose(new Transformer<HorrorMovie, HorrorMovie>() {, +            @Override, +            public Observable<? extends HorrorMovie> call(Observable<? extends HorrorMovie> t1) {, +                return t1.map(new Func1<HorrorMovie, HorrorMovie>() {, +, +                    @Override, +                    public HorrorMovie call(HorrorMovie horrorMovie) {, +                        return horrorMovie;, +                    }, +                });, +            }, +        });, +    }]