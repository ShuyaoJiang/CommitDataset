[+++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +++ b/src/main/java/rx/internal/operators/OperatorDebounceWithTime.java, +, +            @Override, +            public void onStart() {, +                request(Long.MAX_VALUE);, +            }, +, +++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +++ b/src/main/java/rx/internal/operators/OperatorDebounceWithTime.java, +, +            @Override, +            public void onStart() {, +                request(Long.MAX_VALUE);, +            }, +, +++ b/src/main/java/rx/internal/operators/OperatorRetryWithPredicate.java, +, +++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +++ b/src/main/java/rx/internal/operators/OperatorDebounceWithTime.java, +, +            @Override, +            public void onStart() {, +                request(Long.MAX_VALUE);, +            }, +, +++ b/src/main/java/rx/internal/operators/OperatorRetryWithPredicate.java, +, +++ b/src/test/java/rx/internal/operators/OperatorDebounceTest.java, +import java.util.Arrays;, +import rx.observers.TestSubscriber;, +, +    @Test, +    public void debounceWithTimeBackpressure() throws InterruptedException {, +        TestScheduler scheduler = new TestScheduler();, +        TestSubscriber<Integer> subscriber = new TestSubscriber<Integer>();, +        Observable.merge(, +                Observable.just(1),, +                Observable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler), +        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(subscriber);, +, +        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);, +, +        subscriber.assertReceivedOnNext(Arrays.asList(2));, +        subscriber.assertTerminalEvent();, +        subscriber.assertNoErrors();, +    }, +++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +++ b/src/main/java/rx/internal/operators/OperatorDebounceWithTime.java, +, +            @Override, +            public void onStart() {, +                request(Long.MAX_VALUE);, +            }, +, +++ b/src/main/java/rx/internal/operators/OperatorRetryWithPredicate.java, +, +++ b/src/test/java/rx/internal/operators/OperatorDebounceTest.java, +import java.util.Arrays;, +import rx.observers.TestSubscriber;, +, +    @Test, +    public void debounceWithTimeBackpressure() throws InterruptedException {, +        TestScheduler scheduler = new TestScheduler();, +        TestSubscriber<Integer> subscriber = new TestSubscriber<Integer>();, +        Observable.merge(, +                Observable.just(1),, +                Observable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler), +        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(subscriber);, +, +        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);, +, +        subscriber.assertReceivedOnNext(Arrays.asList(2));, +        subscriber.assertTerminalEvent();, +        subscriber.assertNoErrors();, +    }, +++ b/src/test/java/rx/internal/operators/OperatorRetryWithPredicateTest.java, +import java.util.concurrent.atomic.AtomicInteger;, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.*;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Action1;, +import rx.functions.Func2;]