[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorZip;, +        return from(Arrays.asList(value));, +        List<Observable<?>> os = new ArrayList<Observable<?>>();, +        for (Observable<?> o : ws) {, +            os.add(o);, +        }, +        return Observable.just(os.toArray(new Observable<?>[os.size()])).lift(new OperatorZip<R>(zipFunction));, +        return ws.toList().map(new Func1<List<? extends Observable<?>>, Observable<?>[]>() {, +, +            public Observable<?>[] call(List<? extends Observable<?>> o) {, +                return o.toArray(new Observable<?>[o.size()]);, +, +        }).lift(new OperatorZip<R>(zipFunction));, +    public final static <T1, T2, R> Observable<R> zip(Observable<? extends T1> o1, Observable<? extends T2> o2, final Func2<? super T1, ? super T2, ? extends R> zipFunction) {, +        return just(new Observable<?>[] { o1, o2 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5, o6 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5, o6, o7 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5, o6, o7, o8 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5, o6, o7, o8, o9 }).lift(new OperatorZip<R>(zipFunction));, +//        return create(OperatorZip.zipIterable(this, other, zipFunction));, +        // TODO fix this, +        return null;, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorZip;, +        return from(Arrays.asList(value));, +        List<Observable<?>> os = new ArrayList<Observable<?>>();, +        for (Observable<?> o : ws) {, +            os.add(o);, +        }, +        return Observable.just(os.toArray(new Observable<?>[os.size()])).lift(new OperatorZip<R>(zipFunction));, +        return ws.toList().map(new Func1<List<? extends Observable<?>>, Observable<?>[]>() {, +, +            public Observable<?>[] call(List<? extends Observable<?>> o) {, +                return o.toArray(new Observable<?>[o.size()]);, +, +        }).lift(new OperatorZip<R>(zipFunction));, +    public final static <T1, T2, R> Observable<R> zip(Observable<? extends T1> o1, Observable<? extends T2> o2, final Func2<? super T1, ? super T2, ? extends R> zipFunction) {, +        return just(new Observable<?>[] { o1, o2 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5, o6 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5, o6, o7 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5, o6, o7, o8 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5, o6, o7, o8, o9 }).lift(new OperatorZip<R>(zipFunction));, +//        return create(OperatorZip.zipIterable(this, other, zipFunction));, +        // TODO fix this, +        return null;, +++ b/rxjava-core/src/main/java/rx/observers/TestObserver.java, +import java.util.Arrays;, +    public List<Object> getEvents() {, +        ArrayList<Object> events = new ArrayList<Object>();, +        events.add(onNextEvents);, +        events.add(onErrorEvents);, +        events.add(onCompletedEvents);, +        return Collections.unmodifiableList(events);, +    }, +, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorZip;, +        return from(Arrays.asList(value));, +        List<Observable<?>> os = new ArrayList<Observable<?>>();, +        for (Observable<?> o : ws) {, +            os.add(o);, +        }, +        return Observable.just(os.toArray(new Observable<?>[os.size()])).lift(new OperatorZip<R>(zipFunction));, +        return ws.toList().map(new Func1<List<? extends Observable<?>>, Observable<?>[]>() {, +, +            public Observable<?>[] call(List<? extends Observable<?>> o) {, +                return o.toArray(new Observable<?>[o.size()]);, +, +        }).lift(new OperatorZip<R>(zipFunction));, +    public final static <T1, T2, R> Observable<R> zip(Observable<? extends T1> o1, Observable<? extends T2> o2, final Func2<? super T1, ? super T2, ? extends R> zipFunction) {, +        return just(new Observable<?>[] { o1, o2 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5, o6 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5, o6, o7 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5, o6, o7, o8 }).lift(new OperatorZip<R>(zipFunction));, +        return just(new Observable<?>[] { o1, o2, o3, o4, o5, o6, o7, o8, o9 }).lift(new OperatorZip<R>(zipFunction));, +//        return create(OperatorZip.zipIterable(this, other, zipFunction));, +        // TODO fix this, +        return null;, +++ b/rxjava-core/src/main/java/rx/observers/TestObserver.java, +import java.util.Arrays;, +    public List<Object> getEvents() {, +        ArrayList<Object> events = new ArrayList<Object>();, +        events.add(onNextEvents);, +        events.add(onErrorEvents);, +        events.add(onCompletedEvents);, +        return Collections.unmodifiableList(events);, +    }, +, +++ b/rxjava-core/src/main/java/rx/operators/OperatorZip.java, +/**]