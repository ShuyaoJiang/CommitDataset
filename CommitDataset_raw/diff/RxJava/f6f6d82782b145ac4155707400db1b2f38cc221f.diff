[+++ b/src/main/java/io/reactivex/Observable.java, +import io.reactivex.internal.operators.mixed.*;, +        return RxJavaPlugins.onAssembly(new ObservableConcatMapCompletable<T>(this, mapper, ErrorMode.IMMEDIATE, capacityHint));, +    }, +, +    /**, +     * Maps the upstream items into {@link CompletableSource}s and subscribes to them one after the, +     * other terminates, delaying all errors till both this {@code Observable} and all, +     * inner {@code CompletableSource}s terminate., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMap.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concatMapCompletableDelayError} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param mapper the function called with the upstream item and should return, +     *               a {@code CompletableSource} to become the next source to, +     *               be subscribed to, +     * @return a new Completable instance, +     * @since 2.1.11 - experimental, +     * @see #concatMapCompletable(Function, int), +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    public final Completable concatMapCompletableDelayError(Function<? super T, ? extends CompletableSource> mapper) {, +        return concatMapCompletableDelayError(mapper, true, 2);, +    }, +, +    /**, +     * Maps the upstream items into {@link CompletableSource}s and subscribes to them one after the, +     * other terminates, optionally delaying all errors till both this {@code Observable} and all, +     * inner {@code CompletableSource}s terminate., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMap.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concatMapCompletableDelayError} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param mapper the function called with the upstream item and should return, +     *               a {@code CompletableSource} to become the next source to, +     *               be subscribed to, +     * @param tillTheEnd If {@code true}, errors from this {@code Observable} or any of the, +     *                   inner {@code CompletableSource}s are delayed until all, +     *                   of them terminate. If {@code false}, an error from this, +     *                   {@code Observable} is delayed until the current inner, +     *                   {@code CompletableSource} terminates and only then is, +     *                   it emitted to the downstream., +     * @return a new Completable instance, +     * @since 2.1.11 - experimental, +     * @see #concatMapCompletable(Function), +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    public final Completable concatMapCompletableDelayError(Function<? super T, ? extends CompletableSource> mapper, boolean tillTheEnd) {, +        return concatMapCompletableDelayError(mapper, tillTheEnd, 2);, +    }, +, +    /**, +     * Maps the upstream items into {@link CompletableSource}s and subscribes to them one after the, +     * other terminates, optionally delaying all errors till both this {@code Observable} and all, +     * inner {@code CompletableSource}s terminate., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMap.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concatMapCompletableDelayError} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param mapper the function called with the upstream item and should return, +     *               a {@code CompletableSource} to become the next source to, +     *               be subscribed to, +     * @param tillTheEnd If {@code true}, errors from this {@code Observable} or any of the, +     *                   inner {@code CompletableSource}s are delayed until all, +     *                   of them terminate. If {@code false}, an error from this, +     *                   {@code Observable} is delayed until the current inner, +     *                   {@code CompletableSource} terminates and only then is, +     *                   it emitted to the downstream., +     * @param prefetch The number of upstream items to prefetch so that fresh items are, +     *                 ready to be mapped when a previous {@code CompletableSource} terminates., +     *                 The operator replenishes after half of the prefetch amount has been consumed, +     *                 and turned into {@code CompletableSource}s., +     * @return a new Completable instance, +     * @since 2.1.11 - experimental, +     * @see #concatMapCompletable(Function, int), +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    public final Completable concatMapCompletableDelayError(Function<? super T, ? extends CompletableSource> mapper, boolean tillTheEnd, int prefetch) {, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        return RxJavaPlugins.onAssembly(new ObservableConcatMapCompletable<T>(this, mapper, tillTheEnd ? ErrorMode.END : ErrorMode.BOUNDARY, prefetch));, +     * Maps the upstream items into {@link MaybeSource}s and subscribes to them one after the, +     * other succeeds or completes, emits their success value if available or terminates immediately if, +     * either this {@code Observable} or the current inner {@code MaybeSource} fail., +     * <p>, +     * <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMap.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>]