[+++ b/src/main/java/io/reactivex/Maybe.java, +     * <dl>, +++ b/src/main/java/io/reactivex/Maybe.java, +     * <dl>, +++ b/src/main/java/io/reactivex/Observable.java, +++ b/src/main/java/io/reactivex/Maybe.java, +     * <dl>, +++ b/src/main/java/io/reactivex/Observable.java, +++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, + * This processor does not have a public constructor by design; a new empty instance of this, + * {@code AsyncProcessor} can be created via the {@link #create()} method., + * <p>, + * Since an {@code AsyncProcessor} is a Reactive Streams {@code Processor} type,, + * {@code null}s are not allowed (<a href="https://github.com/reactive-streams/reactive-streams-jvm#2.13">Rule 2.13</a>), + * as parameters to {@link #onNext(Object)} and {@link #onError(Throwable)}. Such calls will result in a, + * {@link NullPointerException} being thrown and the processor's state is not changed., + * <p>, + * {@code AsyncProcessor} is a {@link io.reactivex.Flowable} as well as a {@link FlowableProcessor} and supports backpressure from the downstream but, + * its {@link Subscriber}-side consumes items in an unbounded manner., + * <p>, + * When this {@code AsyncProcessor} is terminated via {@link #onError(Throwable)}, the, + * last observed item (if any) is cleared and late {@link Subscriber}s only receive, + * the {@code onError} event., + * <p>, + * The {@code AsyncProcessor} caches the latest item internally and it emits this item only when {@code onComplete} is called., + * Therefore, it is not recommended to use this {@code Processor} with infinite or never-completing sources., + * <p>, + * Even though {@code AsyncProcessor} implements the {@link Subscriber} interface, calling, + * {@code onSubscribe} is not required (<a href="https://github.com/reactive-streams/reactive-streams-jvm#2.12">Rule 2.12</a>), + * if the processor is used as a standalone source. However, calling {@code onSubscribe}, + * after the {@code AsyncProcessor} reached its terminal state will result in the, + * given {@link Subscription} being canceled immediately., + * <p>, + * Calling {@link #onNext(Object)}, {@link #onError(Throwable)} and {@link #onComplete()}, + * is required to be serialized (called from the same thread or called non-overlappingly from different threads, + * through external means of serialization). The {@link #toSerialized()} method available to all {@code FlowableProcessor}s, + * provides such serialization and also protects against reentrance (i.e., when a downstream {@code Subscriber}, + * consuming this processor also wants to call {@link #onNext(Object)} on this processor recursively)., + * The implementation of {@code onXXX} methods are technically thread-safe but non-serialized calls, + * to them may lead to undefined state in the currently subscribed {@code Subscriber}s., + * <p>, + * This {@code AsyncProcessor} supports the standard state-peeking methods {@link #hasComplete()}, {@link #hasThrowable()},, + * {@link #getThrowable()} and {@link #hasSubscribers()} as well as means to read the very last observed value -, + * after this {@code AsyncProcessor} has been completed - in a non-blocking and thread-safe, + * manner via {@link #hasValue()}, {@link #getValue()}, {@link #getValues()} or {@link #getValues(Object[])}., + * <dl>, + *  <dt><b>Backpressure:</b></dt>, + *  <dd>The {@code AsyncProcessor} honors the backpressure of the downstream {@code Subscriber}s and won't emit, + *  its single value to a particular {@code Subscriber} until that {@code Subscriber} has requested an item., + *  When the {@code AsyncProcessor} is subscribed to a {@link io.reactivex.Flowable}, the processor consumes this, + *  {@code Flowable} in an unbounded manner (requesting `Long.MAX_VALUE`) as only the very last upstream item is, + *  retained by it., + *  </dd>, + *  <dt><b>Scheduler:</b></dt>, + *  <dd>{@code AsyncProcessor} does not operate by default on a particular {@link io.reactivex.Scheduler} and, + *  the {@code Subscriber}s get notified on the thread where the terminating {@code onError} or {@code onComplete}, + *  methods were invoked.</dd>, + *  <dt><b>Error handling:</b></dt>, + *  <dd>When the {@link #onError(Throwable)} is called, the {@code AsyncProcessor} enters into a terminal state, + *  and emits the same {@code Throwable} instance to the last set of {@code Subscriber}s. During this emission,, + *  if one or more {@code Subscriber}s dispose their respective {@code Subscription}s, the, + *  {@code Throwable} is delivered to the global error handler via, + *  {@link io.reactivex.plugins.RxJavaPlugins#onError(Throwable)} (multiple times if multiple {@code Subscriber}s, + *  cancel at once)., + *  If there were no {@code Subscriber}s subscribed to this {@code AsyncProcessor} when the {@code onError()}, + *  was called, the global error handler is not invoked., + *  </dd>, + * </dl>, + * <p>, + * Example usage:, + * <pre><code>, + * AsyncProcessor&lt;Object&gt; processor = AsyncProcessor.create();, + * TestSubscriber&lt;Object&gt; ts1 = processor.test();, + *, + * ts1.assertEmpty();, + *, + * processor.onNext(1);, + *, + * // AsyncProcessor only emits when onComplete was called., + * ts1.assertEmpty();, + *, + * processor.onNext(2);, + * processor.onComplete();, + *, + * // onComplete triggers the emission of the last cached item and the onComplete event., + * ts1.assertResult(2);, + *, + * TestSubscriber&lt;Object&gt; ts2 = processor.test();, + *, + * // late Subscribers receive the last cached item too, + * ts2.assertResult(2);, + * </code></pre>, +        // AsyncProcessor doesn't bother with request coordination., +     * or returns false if the processor has terminated., +     * @return true if successful, false if the processor has terminated, +     * Atomically removes the given subscriber if it is subscribed to this processor., +     * @param ps the subscriber's subscription wrapper to remove, +     * Returns true if this processor has any value., +     * @return true if this processor has any value, +     * Returns a single value this processor currently has or null if no such value exists.]