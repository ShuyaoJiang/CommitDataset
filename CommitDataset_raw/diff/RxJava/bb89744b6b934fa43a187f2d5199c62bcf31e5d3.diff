[+++ b/src/main/java/rx/Observable.java, +     * Forces an Observable's emissions and notifications to be serialized and for it to obey, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> in other ways., +     * purposes, use {@link #subscribe(Subscriber)} which ensures, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> and other, +     * functionality., +++ b/src/main/java/rx/Observable.java, +     * Forces an Observable's emissions and notifications to be serialized and for it to obey, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> in other ways., +     * purposes, use {@link #subscribe(Subscriber)} which ensures, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> and other, +     * functionality., +++ b/src/main/java/rx/internal/util/RxRingBuffer.java, + * This assumes Spsc or Spmc usage. This means only a single producer calling the on* methods. This is the Rx, + * contract of an Observer (see http://reactivex.io/documentation/contract.html). Concurrent invocations of, + * on* methods will not be thread-safe., +++ b/src/main/java/rx/Observable.java, +     * Forces an Observable's emissions and notifications to be serialized and for it to obey, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> in other ways., +     * purposes, use {@link #subscribe(Subscriber)} which ensures, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> and other, +     * functionality., +++ b/src/main/java/rx/internal/util/RxRingBuffer.java, + * This assumes Spsc or Spmc usage. This means only a single producer calling the on* methods. This is the Rx, + * contract of an Observer (see http://reactivex.io/documentation/contract.html). Concurrent invocations of, + * on* methods will not be thread-safe., +++ b/src/main/java/rx/observables/BlockingObservable.java, +         * (see http://reactivex.io/documentation/contract.html) as this is the final subscribe in the chain., +++ b/src/main/java/rx/Observable.java, +     * Forces an Observable's emissions and notifications to be serialized and for it to obey, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> in other ways., +     * purposes, use {@link #subscribe(Subscriber)} which ensures, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> and other, +     * functionality., +++ b/src/main/java/rx/internal/util/RxRingBuffer.java, + * This assumes Spsc or Spmc usage. This means only a single producer calling the on* methods. This is the Rx, + * contract of an Observer (see http://reactivex.io/documentation/contract.html). Concurrent invocations of, + * on* methods will not be thread-safe., +++ b/src/main/java/rx/observables/BlockingObservable.java, +         * (see http://reactivex.io/documentation/contract.html) as this is the final subscribe in the chain., +++ b/src/main/java/rx/observers/SafeSubscriber.java, + * complies with <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a>., +++ b/src/main/java/rx/Observable.java, +     * Forces an Observable's emissions and notifications to be serialized and for it to obey, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> in other ways., +     * purposes, use {@link #subscribe(Subscriber)} which ensures, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> and other, +     * functionality., +++ b/src/main/java/rx/internal/util/RxRingBuffer.java, + * This assumes Spsc or Spmc usage. This means only a single producer calling the on* methods. This is the Rx, + * contract of an Observer (see http://reactivex.io/documentation/contract.html). Concurrent invocations of, + * on* methods will not be thread-safe., +++ b/src/main/java/rx/observables/BlockingObservable.java, +         * (see http://reactivex.io/documentation/contract.html) as this is the final subscribe in the chain., +++ b/src/main/java/rx/observers/SafeSubscriber.java, + * complies with <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a>., +++ b/src/main/java/rx/subjects/SerializedSubject.java, + * to non-serialized calls, which violates <a href="http://reactivex.io/documentation/contract.html">the, + * Observable contract</a> and creates an ambiguity in the resulting Subject., +++ b/src/main/java/rx/Observable.java, +     * Forces an Observable's emissions and notifications to be serialized and for it to obey, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> in other ways., +     * purposes, use {@link #subscribe(Subscriber)} which ensures, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> and other, +     * functionality., +++ b/src/main/java/rx/internal/util/RxRingBuffer.java, + * This assumes Spsc or Spmc usage. This means only a single producer calling the on* methods. This is the Rx, + * contract of an Observer (see http://reactivex.io/documentation/contract.html). Concurrent invocations of, + * on* methods will not be thread-safe., +++ b/src/main/java/rx/observables/BlockingObservable.java, +         * (see http://reactivex.io/documentation/contract.html) as this is the final subscribe in the chain., +++ b/src/main/java/rx/observers/SafeSubscriber.java, + * complies with <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a>., +++ b/src/main/java/rx/subjects/SerializedSubject.java, + * to non-serialized calls, which violates <a href="http://reactivex.io/documentation/contract.html">the, + * Observable contract</a> and creates an ambiguity in the resulting Subject., +++ b/src/main/java/rx/subjects/Subject.java, +     * lead to non-serialized calls, which violates, +     * <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> and creates an, +     * ambiguity in the resulting Subject., +     * To protect a {@code Subject} from this danger, you can convert it into a {@code SerializedSubject} with, +     * code like the following:]