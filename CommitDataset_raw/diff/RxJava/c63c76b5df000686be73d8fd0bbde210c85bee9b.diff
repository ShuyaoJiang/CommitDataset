[+++ b/src/main/java/rx/Observable.java, +     * @param stateFactory, +    public final <R> Observable<R> collect(Func0<R> stateFactory, final Action2<R, ? super T> collector) {, +        , +        /*, +         * Discussion and confirmation of implementation at, +         * https://github.com/ReactiveX/RxJava/issues/423#issuecomment-27642532, +         * , +         * It should use last() not takeLast(1) since it needs to emit an error if the sequence is empty., +         */, +        return lift(new OperatorScan<R, T>(stateFactory, accumulator)).last();, +++ b/src/main/java/rx/Observable.java, +     * @param stateFactory, +    public final <R> Observable<R> collect(Func0<R> stateFactory, final Action2<R, ? super T> collector) {, +        , +        /*, +         * Discussion and confirmation of implementation at, +         * https://github.com/ReactiveX/RxJava/issues/423#issuecomment-27642532, +         * , +         * It should use last() not takeLast(1) since it needs to emit an error if the sequence is empty., +         */, +        return lift(new OperatorScan<R, T>(stateFactory, accumulator)).last();, +++ b/src/test/java/rx/ObservableTests.java, +import rx.functions.Func0;, +        Observable<List<Integer>> o = Observable.just(1, 2, 3).collect(new Func0<List<Integer>>() {, +, +            @Override, +            public List<Integer> call() {, +                return new ArrayList<Integer>();, +            }, +            , +        }, new Action2<List<Integer>, Integer>() {, +        });, +        , +        List<Integer> list =  o.toBlocking().last();, +        , +        // test multiple subscribe, +        List<Integer> list2 =  o.toBlocking().last();, +, +        assertEquals(3, list2.size());, +        assertEquals(1, list2.get(0).intValue());, +        assertEquals(2, list2.get(1).intValue());, +        assertEquals(3, list2.get(2).intValue());, +        String value = Observable.just(1, 2, 3).collect(new Func0<StringBuilder>() {, +, +            @Override, +            public StringBuilder call() {, +                return new StringBuilder();, +            }, +            , +        }, new Action2<StringBuilder, Integer>() {, +++ b/src/main/java/rx/Observable.java, +     * @param stateFactory, +    public final <R> Observable<R> collect(Func0<R> stateFactory, final Action2<R, ? super T> collector) {, +        , +        /*, +         * Discussion and confirmation of implementation at, +         * https://github.com/ReactiveX/RxJava/issues/423#issuecomment-27642532, +         * , +         * It should use last() not takeLast(1) since it needs to emit an error if the sequence is empty., +         */, +        return lift(new OperatorScan<R, T>(stateFactory, accumulator)).last();, +++ b/src/test/java/rx/ObservableTests.java, +import rx.functions.Func0;, +        Observable<List<Integer>> o = Observable.just(1, 2, 3).collect(new Func0<List<Integer>>() {, +, +            @Override, +            public List<Integer> call() {, +                return new ArrayList<Integer>();, +            }, +            , +        }, new Action2<List<Integer>, Integer>() {, +        });, +        , +        List<Integer> list =  o.toBlocking().last();, +        , +        // test multiple subscribe, +        List<Integer> list2 =  o.toBlocking().last();, +, +        assertEquals(3, list2.size());, +        assertEquals(1, list2.get(0).intValue());, +        assertEquals(2, list2.get(1).intValue());, +        assertEquals(3, list2.get(2).intValue());, +        String value = Observable.just(1, 2, 3).collect(new Func0<StringBuilder>() {, +, +            @Override, +            public StringBuilder call() {, +                return new StringBuilder();, +            }, +            , +        }, new Action2<StringBuilder, Integer>() {, +++ b/src/test/java/rx/internal/operators/OperatorScanTest.java, +import rx.functions.Action2;, +    /**, +     * This uses the public API collect which uses scan under the covers., +     */, +                .collect(new Func0<List<Integer>>() {, +                }, new Action2<List<Integer>, Integer>() {, +                    public void call(List<Integer> list, Integer t2) {]