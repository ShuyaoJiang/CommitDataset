[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * an {@link Observer} must call an Observable's <code>subscribe</code> method in order to register itself, +     * to receive push-based notifications from the Observable. A typical implementation of the, +     * <code>subscribe</code> method does the following:, +     * <p>, +     * It stores a reference to the Observer in a collection object, such as a <code>List<T></code>, +     * object., +     * <p>, +     * It returns a reference to the {@link Subscription} interface. This enables, +     * Observers to unsubscribe (that is, to stop receiving notifications) before the Observable has, +     * finished sending them and has called the Observer's {@link Observer#onCompleted()} method., +     * <p>, +     * At any given time, a particular instance of an <code>Observable<T></code> implementation is, +     * responsible for accepting all subscriptions and notifying all subscribers. Unless the, +     * documentation for a particular <code>Observable<T></code> implementation indicates otherwise,, +     * Observers should make no assumptions about the <code>Observable<T></code> implementation, such, +     * as the order of notifications that multiple Observers will receive., +     * <p>, +     * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +     * , +     * , +     * @param observer, +     * @param scheduler, +     *            The {@link Scheduler} that the sequence is subscribed to on., +     * @return a {@link Subscription} reference that allows observers, +     *         to stop receiving notifications before the provider has finished sending them, +     */, +    public Subscription subscribe(Observer<T> observer, Scheduler scheduler) {, +        return subscribeOn(scheduler).subscribe(observer);, +    }, +, +    /**, +    public Subscription subscribe(final Map<String, Object> callbacks, Scheduler scheduler) {, +        return subscribeOn(scheduler).subscribe(callbacks);, +    }, +, +    public Subscription subscribe(final Object o, Scheduler scheduler) {, +        return subscribeOn(scheduler).subscribe(o);, +    }, +, +    public Subscription subscribe(final Action1<T> onNext, Scheduler scheduler) {, +        return subscribeOn(scheduler).subscribe(onNext);, +    }, +, +    public Subscription subscribe(final Object onNext, final Object onError, Scheduler scheduler) {, +        return subscribeOn(scheduler).subscribe(onNext, onError);, +    }, +, +    public Subscription subscribe(final Action1<T> onNext, final Action1<Exception> onError, Scheduler scheduler) {, +        return subscribeOn(scheduler).subscribe(onNext, onError);, +    }, +, +    public Subscription subscribe(final Object onNext, final Object onError, final Object onComplete, Scheduler scheduler) {, +        return subscribeOn(scheduler).subscribe(onNext, onError, onComplete);, +    }, +, +    public Subscription subscribe(final Action1<T> onNext, final Action1<Exception> onError, final Action0 onComplete, Scheduler scheduler) {, +        return subscribeOn(scheduler).subscribe(onNext, onError, onComplete);, +    }, +, +     * Returns an Observable that returns no data to the {@link Observer} and immediately invokes its <code>onCompleted</code> method on the given {@link Scheduler}., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/empty.png">, +     * , +     * @param <T>, +     *            the type of item emitted by the Observable, +     * @param {@link Scheduler} The scheduler to send the termination ({@link Observer#onCompleted()} call., +     * @return an Observable that returns no data to the {@link Observer} and immediately invokes the {@link Observer}'s <code>onCompleted</code> method, +     */, +    @SuppressWarnings("unchecked"), +    public static <T> Observable<T> empty(Scheduler scheduler) {, +        return (Observable<T>) empty().subscribeOn(scheduler);, +    }, +, +    /**, +     * Converts an {@link Iterable} sequence to an Observable sequence that is subscribed to on the given {@link Scheduler}., +     * , +     * @param iterable, +     *            the source {@link Iterable} sequence, +     * @param scheduler, +     *            The {@link Scheduler} that the sequence is subscribed to on., +     * @param <T>, +     *            the type of items in the {@link Iterable} sequence and the type emitted by the resulting Observable, +     * @return an Observable that emits each item in the source {@link Iterable} sequence, +     * @see {@link #toObservable(Iterable)}, +     */, +    public static <T> Observable<T> from(Iterable<T> iterable, Scheduler scheduler) {, +        return toObservable(iterable, scheduler);, +    }, +, +    /**, +     * Converts an Array to an Observable sequence that is subscribed to on the given {@link Scheduler}., +     * , +     * @param scheduler, +     *            The {@link Scheduler} that the sequence is subscribed to on., +     * @param items, +     *            the source Array, +     * @param <T>, +     *            the type of items in the Array, and the type of items emitted by the resulting Observable, +     * @return an Observable that emits each item in the source Array]