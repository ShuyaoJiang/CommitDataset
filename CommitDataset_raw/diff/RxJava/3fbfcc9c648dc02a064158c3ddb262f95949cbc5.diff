[+++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * The delivery of the item happens on the thread of the first {@code onNext} or {@code onComplete}, +     * signal of the generated {@code Publisher} sequence,, +     * which if takes too long, a newer item may arrive from the upstream, causing the, +     * generated sequence to get cancelled, which may also interrupt any downstream blocking operation, +     * (yielding an {@code InterruptedException}). It is recommended processing items, +     * that may take long time to be moved to another thread via {@link #observeOn} applied after, +     * {@code debounce} itself., +     * <p>, +     * Delivery of the item after the grace period happens on the {@code computation} {@code Scheduler}'s, +     * {@code Worker} which if takes too long, a newer item may arrive from the upstream, causing the, +     * {@code Worker}'s task to get disposed, which may also interrupt any downstream blocking operation, +     * (yielding an {@code InterruptedException}). It is recommended processing items, +     * that may take long time to be moved to another thread via {@link #observeOn} applied after, +     * {@code debounce} itself., +     * <p>, +     * Delivery of the item after the grace period happens on the given {@code Scheduler}'s, +     * {@code Worker} which if takes too long, a newer item may arrive from the upstream, causing the, +     * {@code Worker}'s task to get disposed, which may also interrupt any downstream blocking operation, +     * (yielding an {@code InterruptedException}). It is recommended processing items, +     * that may take long time to be moved to another thread via {@link #observeOn} applied after, +     * {@code debounce} itself., +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * The delivery of the item happens on the thread of the first {@code onNext} or {@code onComplete}, +     * signal of the generated {@code Publisher} sequence,, +     * which if takes too long, a newer item may arrive from the upstream, causing the, +     * generated sequence to get cancelled, which may also interrupt any downstream blocking operation, +     * (yielding an {@code InterruptedException}). It is recommended processing items, +     * that may take long time to be moved to another thread via {@link #observeOn} applied after, +     * {@code debounce} itself., +     * <p>, +     * Delivery of the item after the grace period happens on the {@code computation} {@code Scheduler}'s, +     * {@code Worker} which if takes too long, a newer item may arrive from the upstream, causing the, +     * {@code Worker}'s task to get disposed, which may also interrupt any downstream blocking operation, +     * (yielding an {@code InterruptedException}). It is recommended processing items, +     * that may take long time to be moved to another thread via {@link #observeOn} applied after, +     * {@code debounce} itself., +     * <p>, +     * Delivery of the item after the grace period happens on the given {@code Scheduler}'s, +     * {@code Worker} which if takes too long, a newer item may arrive from the upstream, causing the, +     * {@code Worker}'s task to get disposed, which may also interrupt any downstream blocking operation, +     * (yielding an {@code InterruptedException}). It is recommended processing items, +     * that may take long time to be moved to another thread via {@link #observeOn} applied after, +     * {@code debounce} itself., +++ b/src/main/java/io/reactivex/Observable.java, +     * <p>, +     * The delivery of the item happens on the thread of the first {@code onNext} or {@code onComplete}, +     * signal of the generated {@code ObservableSource} sequence,, +     * which if takes too long, a newer item may arrive from the upstream, causing the, +     * generated sequence to get disposed, which may also interrupt any downstream blocking operation, +     * (yielding an {@code InterruptedException}). It is recommended processing items, +     * that may take long time to be moved to another thread via {@link #observeOn} applied after, +     * {@code debounce} itself., +     * <p>, +     * Delivery of the item after the grace period happens on the {@code computation} {@code Scheduler}'s, +     * {@code Worker} which if takes too long, a newer item may arrive from the upstream, causing the, +     * {@code Worker}'s task to get disposed, which may also interrupt any downstream blocking operation, +     * (yielding an {@code InterruptedException}). It is recommended processing items, +     * that may take long time to be moved to another thread via {@link #observeOn} applied after, +     * {@code debounce} itself., +     * <p>, +     * Delivery of the item after the grace period happens on the given {@code Scheduler}'s, +     * {@code Worker} which if takes too long, a newer item may arrive from the upstream, causing the, +     * {@code Worker}'s task to get disposed, which may also interrupt any downstream blocking operation, +     * (yielding an {@code InterruptedException}). It is recommended processing items, +     * that may take long time to be moved to another thread via {@link #observeOn} applied after, +     * {@code debounce} itself.]