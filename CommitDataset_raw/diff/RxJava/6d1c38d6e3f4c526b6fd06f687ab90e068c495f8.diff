[+++ b/CHANGES.md, +### Version 0.6.1 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.6.1%22)) ###, +, +* [Pull 190](https://github.com/Netflix/RxJava/pull/190) Fix generics issue with materialize() that prevented chaining, +, +++ b/CHANGES.md, +### Version 0.6.1 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.6.1%22)) ###, +, +* [Pull 190](https://github.com/Netflix/RxJava/pull/190) Fix generics issue with materialize() that prevented chaining, +, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationConcat;, +import rx.operators.OperationDefer;, +import rx.operators.OperationDematerialize;, +import rx.operators.OperationFilter;, +import rx.operators.OperationMap;, +import rx.operators.OperationMaterialize;, +import rx.operators.OperationMerge;, +import rx.operators.OperationMergeDelayError;, +import rx.operators.OperationMostRecent;, +import rx.operators.OperationNext;, +import rx.operators.OperationOnErrorResumeNextViaFunction;, +import rx.operators.OperationOnErrorResumeNextViaObservable;, +import rx.operators.OperationOnErrorReturn;, +import rx.operators.OperationScan;, +import rx.operators.OperationSkip;, +import rx.operators.OperationSynchronize;, +import rx.operators.OperationTake;, +import rx.operators.OperationTakeLast;, +import rx.operators.OperationToObservableFuture;, +import rx.operators.OperationToObservableIterable;, +import rx.operators.OperationToObservableList;, +import rx.operators.OperationToObservableSortedList;, +import rx.operators.OperationZip;, +import rx.operators.OperatorGroupBy;, +import rx.operators.OperatorTakeUntil;, +import rx.operators.OperatorToIterator;, +    public <T2> Observable<T2> dematerialize() {, +        return dematerialize((Observable<Notification<T2>>)this);, +        @Test, +        public void testMaterializeDematerializeChaining() {, +            Observable<Integer> obs = Observable.just(1);, +            Observable<Integer> chained = obs.materialize().dematerialize();, +, +            Observer<Integer> observer = mock(Observer.class);, +            chained.subscribe(observer);, +, +            verify(observer, times(1)).onNext(1);, +            verify(observer, times(1)).onCompleted();, +            verify(observer, times(0)).onError(any(Exception.class));, +        }, +, +++ b/CHANGES.md, +### Version 0.6.1 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.6.1%22)) ###, +, +* [Pull 190](https://github.com/Netflix/RxJava/pull/190) Fix generics issue with materialize() that prevented chaining, +, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationConcat;, +import rx.operators.OperationDefer;, +import rx.operators.OperationDematerialize;, +import rx.operators.OperationFilter;, +import rx.operators.OperationMap;, +import rx.operators.OperationMaterialize;, +import rx.operators.OperationMerge;, +import rx.operators.OperationMergeDelayError;, +import rx.operators.OperationMostRecent;, +import rx.operators.OperationNext;, +import rx.operators.OperationOnErrorResumeNextViaFunction;, +import rx.operators.OperationOnErrorResumeNextViaObservable;, +import rx.operators.OperationOnErrorReturn;, +import rx.operators.OperationScan;, +import rx.operators.OperationSkip;, +import rx.operators.OperationSynchronize;, +import rx.operators.OperationTake;, +import rx.operators.OperationTakeLast;, +import rx.operators.OperationToObservableFuture;, +import rx.operators.OperationToObservableIterable;, +import rx.operators.OperationToObservableList;, +import rx.operators.OperationToObservableSortedList;, +import rx.operators.OperationZip;, +import rx.operators.OperatorGroupBy;, +import rx.operators.OperatorTakeUntil;, +import rx.operators.OperatorToIterator;, +    public <T2> Observable<T2> dematerialize() {, +        return dematerialize((Observable<Notification<T2>>)this);, +        @Test, +        public void testMaterializeDematerializeChaining() {, +            Observable<Integer> obs = Observable.just(1);, +            Observable<Integer> chained = obs.materialize().dematerialize();, +, +            Observer<Integer> observer = mock(Observer.class);, +            chained.subscribe(observer);, +, +            verify(observer, times(1)).onNext(1);, +            verify(observer, times(1)).onCompleted();, +            verify(observer, times(0)).onError(any(Exception.class));, +        }, +, +++ /dev/null]