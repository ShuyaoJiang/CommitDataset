[+++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, + * modified to illustrate blocking operators. The following legend explains these marble diagrams:, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/B.legend.png">, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, + * modified to illustrate blocking operators. The following legend explains these marble diagrams:, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/B.legend.png">, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +/**, + * Returns an Observable that emits a Boolean that indicates whether all items emitted by an, + * Observable satisfy a condition., + * <p>, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/all.png">, + */, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, + * modified to illustrate blocking operators. The following legend explains these marble diagrams:, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/B.legend.png">, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +/**, + * Returns an Observable that emits a Boolean that indicates whether all items emitted by an, + * Observable satisfy a condition., + * <p>, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/all.png">, + */, +++ b/rxjava-core/src/main/java/rx/operators/OperationCache.java, + * This method has similar behavior to {@link Observable#replay()} except that this auto-subscribes, + * to the source Observable rather than returning a connectable Observable., + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/cache.png">, + * <p>, + * This is useful with an Observable that you want to cache responses when you can't control the, + * NOTE: You sacrifice the ability to unsubscribe from the origin when you use this operator, so be, + * careful not to use this operator on Observables that emit infinite or very large numbers of, + * items, as this will use up memory., +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, + * modified to illustrate blocking operators. The following legend explains these marble diagrams:, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/B.legend.png">, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +/**, + * Returns an Observable that emits a Boolean that indicates whether all items emitted by an, + * Observable satisfy a condition., + * <p>, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/all.png">, + */, +++ b/rxjava-core/src/main/java/rx/operators/OperationCache.java, + * This method has similar behavior to {@link Observable#replay()} except that this auto-subscribes, + * to the source Observable rather than returning a connectable Observable., + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/cache.png">, + * <p>, + * This is useful with an Observable that you want to cache responses when you can't control the, + * NOTE: You sacrifice the ability to unsubscribe from the origin when you use this operator, so be, + * careful not to use this operator on Observables that emit infinite or very large numbers of, + * items, as this will use up memory., +++ b/rxjava-core/src/main/java/rx/operators/OperationConcat.java, +/**, + * Returns an Observable that emits the items emitted by two or more Observables, one after the, + * other., + * <p>, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/concat.png">, + */, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, + * modified to illustrate blocking operators. The following legend explains these marble diagrams:, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/B.legend.png">, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +/**, + * Returns an Observable that emits a Boolean that indicates whether all items emitted by an, + * Observable satisfy a condition., + * <p>, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/all.png">, + */, +++ b/rxjava-core/src/main/java/rx/operators/OperationCache.java, + * This method has similar behavior to {@link Observable#replay()} except that this auto-subscribes, + * to the source Observable rather than returning a connectable Observable., + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/cache.png">, + * <p>, + * This is useful with an Observable that you want to cache responses when you can't control the, + * NOTE: You sacrifice the ability to unsubscribe from the origin when you use this operator, so be, + * careful not to use this operator on Observables that emit infinite or very large numbers of, + * items, as this will use up memory., +++ b/rxjava-core/src/main/java/rx/operators/OperationConcat.java, +/**, + * Returns an Observable that emits the items emitted by two or more Observables, one after the, + * other., + * <p>, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/concat.png">, + */, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, + * Reverses the effect of {@link OperationMaterialize} by transforming the Notification objects, + * emitted by a source Observable into the items or notifications they represent., + * <p>, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/dematerialize.png">, + * <p>, + * See <a href="http://msdn.microsoft.com/en-us/library/hh229047(v=vs.103).aspx">here</a> for the, + * Microsoft Rx equivalent., +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java]