[+++ b/rxjava-core/src/main/java/rx/Scheduler.java, +import java.util.concurrent.Executors;, +import rx.concurrency.Schedulers;, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +import java.util.concurrent.Executors;, +import rx.concurrency.Schedulers;, +++ b/rxjava-core/src/main/java/rx/concurrency/ExecutorScheduler.java, +    public <T> Subscription schedulePeriodically(final T state, final Func2<Scheduler, T, Subscription> action, long initialDelay, long period, TimeUnit unit) {, +        if (executor instanceof ScheduledExecutorService) {, +            final CompositeSubscription subscriptions = new CompositeSubscription();, +            , +            ScheduledFuture<?> f = ((ScheduledExecutorService) executor).scheduleAtFixedRate(new Runnable() {, +                @Override, +                public void run() {, +                    Subscription s = action.call(ExecutorScheduler.this, state);, +                    subscriptions.add(s);, +                }, +            }, initialDelay, period, unit);, +            , +            subscriptions.add(Subscriptions.create(f));, +            return subscriptions;, +            , +        } else {, +            return super.schedulePeriodically(state, action, initialDelay, period, unit);, +        }, +    }, +    , +    @Override]