[+++ b/src/main/java/io/reactivex/Completable.java, +     * <strong>This method requires advanced knowledge about building operators, please consider, +     * other standard composition methods first;</strong>, +     * Returns a {@code Completable} which, when subscribed to, invokes the {@link CompletableOperator#apply(CompletableObserver) apply(CompletableObserver)} method, +     * of the provided {@link CompletableOperator} for each individual downstream {@link Completable} and allows the, +     * insertion of a custom operator by accessing the downstream's {@link CompletableObserver} during this subscription phase, +     * and providing a new {@code CompletableObserver}, containing the custom operator's intended business logic, that will be, +     * used in the subscription process going further upstream., +     * <p>, +     * Generally, such a new {@code CompletableObserver} will wrap the downstream's {@code CompletableObserver} and forwards the, +     * {@code onError} and {@code onComplete} events from the upstream directly or according to the, +     * emission pattern the custom operator's business logic requires. In addition, such operator can intercept the, +     * flow control calls of {@code dispose} and {@code isDisposed} that would have traveled upstream and perform, +     * additional actions depending on the same business logic requirements., +     * <p>, +     * Example:, +     * <pre><code>, +     * // Step 1: Create the consumer type that will be returned by the CompletableOperator.apply():, +     * , +     * public final class CustomCompletableObserver implements CompletableObserver, Disposable {, +     *, +     *     // The donstream's CompletableObserver that will receive the onXXX events, +     *     final CompletableObserver downstream;, +     *, +     *     // The connection to the upstream source that will call this class' onXXX methods, +     *     Disposable upstream;, +     *, +     *     // The constructor takes the downstream subscriber and usually any other parameters, +     *     public CustomCompletableObserver(CompletableObserver downstream) {, +     *         this.downstream = downstream;, +     *     }, +     *, +     *     // In the subscription phase, the upstream sends a Disposable to this class, +     *     // and subsequently this class has to send a Disposable to the downstream., +     *     // Note that relaying the upstream's Disposable directly is not allowed in RxJava, +     *     &#64;Override, +     *     public void onSubscribe(Disposable s) {, +     *         if (upstream != null) {, +     *             s.cancel();, +     *         } else {, +     *             upstream = s;, +     *             downstream.onSubscribe(this);, +     *         }, +     *     }, +     *, +     *     // Some operators may handle the upstream's error while others, +     *     // could just forward it to the downstream., +     *     &#64;Override, +     *     public void onError(Throwable throwable) {, +     *         downstream.onError(throwable);, +     *     }, +     *, +     *     // When the upstream completes, usually the downstream should complete as well., +     *     // In completable, this could also mean doing some side-effects, +     *     &#64;Override, +     *     public void onComplete() {, +     *         System.out.println("Sequence completed");, +     *         downstream.onComplete();, +     *     }, +     *, +     *     // Some operators may use their own resources which should be cleaned up if, +     *     // the downstream disposes the flow before it completed. Operators without, +     *     // resources can simply forward the dispose to the upstream., +     *     // In some cases, a disposed flag may be set by this method so that other parts, +     *     // of this class may detect the dispose and stop sending events, +     *     // to the downstream., +     *     &#64;Override, +     *     public void dispose() {, +     *         upstream.dispose();, +     *     }, +     *, +     *     // Some operators may simply forward the call to the upstream while others, +     *     // can return the disposed flag set in dispose()., +     *     &#64;Override, +     *     public boolean isDisposed() {, +     *         return upstream.isDisposed();, +     *     }, +     * }, +     *, +     * // Step 2: Create a class that implements the CompletableOperator interface and, +     * //         returns the custom consumer type from above in its apply() method., +     * //         Such class may define additional parameters to be submitted to, +     * //         the custom consumer type., +     *, +     * final class CustomCompletableOperator implements CompletableOperator {, +     *     &#64;Override, +     *     public CompletableObserver apply(CompletableObserver upstream) {, +     *         return new CustomCompletableObserver(upstream);, +     *     }, +     * }, +     *, +     * // Step 3: Apply the custom operator via lift() in a flow by creating an instance of it, +     * //         or reusing an existing one., +     *, +     * Completable.complete(), +     * .lift(new CustomCompletableOperator()), +     * .test(), +     * .assertResult();, +     * </code></pre>, +     * <p>]