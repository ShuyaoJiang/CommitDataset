[+++ b/rxjava-core/src/main/java/rx/operators/BufferUntilSubscriber.java, +import rx.subjects.Subject;, +public class BufferUntilSubscriber<T> extends Subject<T, T> {, +    private static final class PassThruObserver<T> extends Subscriber<T> {, +    private static final class BufferedObserver<T> extends Subscriber<T> {, +++ b/rxjava-core/src/main/java/rx/operators/BufferUntilSubscriber.java, +import rx.subjects.Subject;, +public class BufferUntilSubscriber<T> extends Subject<T, T> {, +    private static final class PassThruObserver<T> extends Subscriber<T> {, +    private static final class BufferedObserver<T> extends Subscriber<T> {, +++ b/rxjava-core/src/main/java/rx/operators/OperatorGroupByUntil.java, +            Subject<R, R> publish = BufferUntilSubscriber.create();, +++ b/rxjava-core/src/main/java/rx/operators/BufferUntilSubscriber.java, +import rx.subjects.Subject;, +public class BufferUntilSubscriber<T> extends Subject<T, T> {, +    private static final class PassThruObserver<T> extends Subscriber<T> {, +    private static final class BufferedObserver<T> extends Subscriber<T> {, +++ b/rxjava-core/src/main/java/rx/operators/OperatorGroupByUntil.java, +            Subject<R, R> publish = BufferUntilSubscriber.create();, +++ b/rxjava-core/src/test/java/rx/operators/OperatorGroupByUntilTest.java, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Mockito.mock;, +import rx.exceptions.TestException;, +        verify(observer).onNext(0);, +        verify(observer).onCompleted();, +    }, +, +    @Test, +    public void innerEscapeCompletedTwice() {, +        Observable<Integer> source = Observable.from(0);, +, +        final AtomicReference<GroupedObservable<Integer, Integer>> inner = new AtomicReference<GroupedObservable<Integer, Integer>>();, +, +        Func1<GroupedObservable<Integer, Integer>, Observable<Object>> duration = just(Observable.never());, +, +        Observable<GroupedObservable<Integer, Integer>> m = source.groupByUntil(identity, dbl, duration);, +, +        m.subscribe(new Action1<GroupedObservable<Integer, Integer>>() {, +            @Override, +            public void call(GroupedObservable<Integer, Integer> t1) {, +                inner.set(t1);, +            }, +        });, +, +        inner.get().subscribe(observer);, +        , +        @SuppressWarnings("unchecked"), +        Observer<Integer> o2 = mock(Observer.class);, +        , +        inner.get().subscribe(o2);, +, +        verify(o2, never()).onCompleted();, +        verify(o2, never()).onNext(anyInt());, +        verify(o2).onError(any(IllegalStateException.class));, +        Observable<Integer> source = Observable.concat(Observable.from(0), Observable.<Integer> error(, +                new TestException("Forced failure")));, +        verify(observer).onNext(0);, +        verify(observer).onError(any(TestException.class));, +    }, +    , +    @Test, +    public void innerEscapeErrorTwice() {, +        Observable<Integer> source = Observable.concat(Observable.from(0), Observable.<Integer> error(, +                new TestException("Forced failure")));, +, +        final AtomicReference<GroupedObservable<Integer, Integer>> inner = new AtomicReference<GroupedObservable<Integer, Integer>>();, +, +        Func1<GroupedObservable<Integer, Integer>, Observable<Object>> duration = just(Observable.never());, +, +        Observable<GroupedObservable<Integer, Integer>> m = source.groupByUntil(identity, dbl, duration);, +, +        m.subscribe(new Subscriber<GroupedObservable<Integer, Integer>>() {, +            @Override, +            public void onNext(GroupedObservable<Integer, Integer> t1) {, +                inner.set(t1);, +            }, +, +            @Override, +            public void onError(Throwable e) {, +            }, +, +            @Override, +            public void onCompleted() {, +            }, +, +        });, +, +        inner.get().subscribe(observer);, +, +        @SuppressWarnings("unchecked"), +        Observer<Integer> o2 = mock(Observer.class);, +        , +        inner.get().subscribe(o2);, +, +        verify(o2, never()).onCompleted();, +        verify(o2, never()).onNext(anyInt());, +        verify(o2).onError(any(IllegalStateException.class));]