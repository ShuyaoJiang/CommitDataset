[+++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test, +    public void testAll() {, +        Observable.toObservable(1, 2, 3).all({ x -> x > 0 }).subscribe({ result -> a.received(result) });, +        verify(a, times(1)).received(true);, +    }, +, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test, +    public void testAll() {, +        Observable.toObservable(1, 2, 3).all({ x -> x > 0 }).subscribe({ result -> a.received(result) });, +        verify(a, times(1)).received(true);, +    }, +, +++ b/rxjava-core/build.gradle, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test, +    public void testAll() {, +        Observable.toObservable(1, 2, 3).all({ x -> x > 0 }).subscribe({ result -> a.received(result) });, +        verify(a, times(1)).received(true);, +    }, +, +++ b/rxjava-core/build.gradle, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationAll;, +     * Determines whether all elements of an observable sequence satisfies a condition., +     * @param sequence an observable sequence whose elements to apply the predicate to., +     * @param predicate a function to test each element for a condition., +     * @param <T> the type of observable., +     * @return true if all elements of an observable sequence satisfies a condition; otherwise, false., +     */, +    public static <T> Observable<Boolean> all(final Observable<T> sequence, final Func1<T, Boolean> predicate) {, +        return _create(OperationAll.all(sequence, predicate));, +    }, +, +    /**, +     * Determines whether all elements of an observable sequence satisfies a condition., +     * @param sequence an observable sequence whose elements to apply the predicate to., +     * @param predicate a function to test each element for a condition., +     * @param <T> the type of observable., +     * @return true if all elements of an observable sequence satisfies a condition; otherwise, false., +     */, +    public static <T> Observable<Boolean> all(final Observable<T> sequence, Object predicate) {, +        final FuncN _f = Functions.from(predicate);, +, +        return all(sequence, new Func1<T, Boolean>() {, +            @Override, +            public Boolean call(T t) {, +                return (Boolean) _f.call(t);, +            }, +        });, +    }, +, +    /**, +     * Determines whether all elements of an observable sequence satisfies a condition., +     * @param predicate a function to test each element for a condition., +     * @return true if all elements of an observable sequence satisfies a condition; otherwise, false., +     */, +    public Observable<Boolean> all(Func1<T, Boolean> predicate) {, +        return all(this, predicate);, +    }, +, +    /**, +     * Determines whether all elements of an observable sequence satisfies a condition., +     * @param predicate a function to test each element for a condition., +     * @return true if all elements of an observable sequence satisfies a condition; otherwise, false., +     */, +    public Observable<Boolean> all(Object predicate) {, +        return all(this, predicate);, +    }, +, +    /**, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test, +    public void testAll() {, +        Observable.toObservable(1, 2, 3).all({ x -> x > 0 }).subscribe({ result -> a.received(result) });, +        verify(a, times(1)).received(true);, +    }, +, +++ b/rxjava-core/build.gradle, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationAll;, +     * Determines whether all elements of an observable sequence satisfies a condition., +     * @param sequence an observable sequence whose elements to apply the predicate to., +     * @param predicate a function to test each element for a condition., +     * @param <T> the type of observable., +     * @return true if all elements of an observable sequence satisfies a condition; otherwise, false., +     */, +    public static <T> Observable<Boolean> all(final Observable<T> sequence, final Func1<T, Boolean> predicate) {, +        return _create(OperationAll.all(sequence, predicate));, +    }, +, +    /**, +     * Determines whether all elements of an observable sequence satisfies a condition., +     * @param sequence an observable sequence whose elements to apply the predicate to., +     * @param predicate a function to test each element for a condition., +     * @param <T> the type of observable., +     * @return true if all elements of an observable sequence satisfies a condition; otherwise, false., +     */, +    public static <T> Observable<Boolean> all(final Observable<T> sequence, Object predicate) {]