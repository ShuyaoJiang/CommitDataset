[+++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +  Observable returned by (f e) if (p e) is true. If (p e) returns a Throwable, +    (->> my-observable, +         (catch* IllegalArgumentException, +                 (fn [e] (rx/return 1))), +         (catch* (fn [e] (-> e .getMessage (.contains \"WAT\"))), +                 (fn [e] (rx/seq->o [\\W \\A \\T])))), +    rx.Observable/onErrorResumeNext, +  [p f ^Observable o], +                                   (f (if (instance? Throwable maybe-e), +                                        maybe-e, +                                        e)), +  Note that the source observable is the last argument so this works with ->> but may look, +  slightly odd when used standalone., +    (->> my-observable, +  {:arglists '([p binding & body observable])}, +  [p binding & body], +  (let [o    (last body), +        body (butlast body)], +    `(catch* ~p, +             (fn [~binding] ~@body), +             ~o))), +  "Returns an Observable that, as a side-effect, executes (f) when the given, +    (->> my-observable, +  [f ^Observable o], +  (.finallyDo o ^Action0 (iop/action* f))), +  Note that the source observable is the last argument so this works with ->> but may look, +  slightly odd when used standalone., +, +    (->> my-observable, +  {:arglists '([& body observable])}, +  [& body], +  (let [o    (last body), +        body (butlast body)], +    `(finally* (fn [] ~@body) ~o))), +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +  Observable returned by (f e) if (p e) is true. If (p e) returns a Throwable, +    (->> my-observable, +         (catch* IllegalArgumentException, +                 (fn [e] (rx/return 1))), +         (catch* (fn [e] (-> e .getMessage (.contains \"WAT\"))), +                 (fn [e] (rx/seq->o [\\W \\A \\T])))), +    rx.Observable/onErrorResumeNext, +  [p f ^Observable o], +                                   (f (if (instance? Throwable maybe-e), +                                        maybe-e, +                                        e)), +  Note that the source observable is the last argument so this works with ->> but may look, +  slightly odd when used standalone., +    (->> my-observable, +  {:arglists '([p binding & body observable])}, +  [p binding & body], +  (let [o    (last body), +        body (butlast body)], +    `(catch* ~p, +             (fn [~binding] ~@body), +             ~o))), +  "Returns an Observable that, as a side-effect, executes (f) when the given, +    (->> my-observable, +  [f ^Observable o], +  (.finallyDo o ^Action0 (iop/action* f))), +  Note that the source observable is the last argument so this works with ->> but may look, +  slightly odd when used standalone., +, +    (->> my-observable, +  {:arglists '([& body observable])}, +  [& body], +  (let [o    (last body), +        body (butlast body)], +    `(finally* (fn [] ~@body) ~o))), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/core_test.clj, +           (->> (rx/seq->o [1 2 3]), +                (rx/catch* Exception (fn [e] (throw "OH NO"))), +                (b/into []))))), +           (->> (rx/generator [o], +                             (rx/seq->o [4 5 6 (.getMessage e)]))), +                (b/into []))))), +      (rx/subscribe (->> (rx/generator [o], +             (->> (rx/throw wrapper), +                    (rx/return e)), +                  (b/into []))))))), +        (rx/subscribe (->> (rx/seq->o [1 2 3]), +                           (rx/finally* (fn [] (reset! called (str "got it"))))), +        (rx/subscribe (->> (rx/generator [o], +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +  Observable returned by (f e) if (p e) is true. If (p e) returns a Throwable, +    (->> my-observable, +         (catch* IllegalArgumentException, +                 (fn [e] (rx/return 1))), +         (catch* (fn [e] (-> e .getMessage (.contains \"WAT\"))), +                 (fn [e] (rx/seq->o [\\W \\A \\T])))), +    rx.Observable/onErrorResumeNext, +  [p f ^Observable o], +                                   (f (if (instance? Throwable maybe-e), +                                        maybe-e, +                                        e)), +  Note that the source observable is the last argument so this works with ->> but may look, +  slightly odd when used standalone., +    (->> my-observable, +  {:arglists '([p binding & body observable])}]