[+++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +    public abstract Subscription connect();, +, +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +    public abstract Subscription connect();, +, +++ b/rxjava-core/src/main/java/rx/operators/BufferUntilSubscriber.java, +import rx.subjects.Subject;, +public class BufferUntilSubscriber<T> extends Subject<T, T> {, +    private static final class PassThruObserver<T> extends Subscriber<T> {, +    private static final class BufferedObserver<T> extends Subscriber<T> {, +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +    public abstract Subscription connect();, +, +++ b/rxjava-core/src/main/java/rx/operators/BufferUntilSubscriber.java, +import rx.subjects.Subject;, +public class BufferUntilSubscriber<T> extends Subject<T, T> {, +    private static final class PassThruObserver<T> extends Subscriber<T> {, +    private static final class BufferedObserver<T> extends Subscriber<T> {, +++ b/rxjava-core/src/main/java/rx/operators/OperatorGroupByUntil.java, +            Subject<R, R> publish = BufferUntilSubscriber.create();, +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +    public abstract Subscription connect();, +, +++ b/rxjava-core/src/main/java/rx/operators/BufferUntilSubscriber.java, +import rx.subjects.Subject;, +public class BufferUntilSubscriber<T> extends Subject<T, T> {, +    private static final class PassThruObserver<T> extends Subscriber<T> {, +    private static final class BufferedObserver<T> extends Subscriber<T> {, +++ b/rxjava-core/src/main/java/rx/operators/OperatorGroupByUntil.java, +            Subject<R, R> publish = BufferUntilSubscriber.create();, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMulticast.java, +    public Subscription connect() {, +, +        return Subscriptions.create(new Action0() {, +            @Override, +            public void call() {, +                Subscription s;, +                synchronized (guard) {, +                    s = subscription;, +                    subscription = null;, +                if (s != null) {, +                    s.unsubscribe();, +                }, +            }, +        });, +    }, +    , +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +    public abstract Subscription connect();, +, +++ b/rxjava-core/src/main/java/rx/operators/BufferUntilSubscriber.java, +import rx.subjects.Subject;, +public class BufferUntilSubscriber<T> extends Subject<T, T> {, +    private static final class PassThruObserver<T> extends Subscriber<T> {, +    private static final class BufferedObserver<T> extends Subscriber<T> {, +++ b/rxjava-core/src/main/java/rx/operators/OperatorGroupByUntil.java, +            Subject<R, R> publish = BufferUntilSubscriber.create();, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMulticast.java, +    public Subscription connect() {, +, +        return Subscriptions.create(new Action0() {, +            @Override, +            public void call() {, +                Subscription s;, +                synchronized (guard) {, +                    s = subscription;, +                    subscription = null;, +                if (s != null) {, +                    s.unsubscribe();, +                }, +            }, +        });, +    }, +    , +++ b/rxjava-core/src/main/java/rx/operators/OperatorMulticastSelector.java, +import rx.subscriptions.CompositeSubscription;, +        CompositeSubscription csub = new CompositeSubscription();, +        child.add(csub);, +        , +        SafeSubscriber<TResult> s = new SafeSubscriber<TResult>(child);, +        csub.add(connectable.connect());, +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +    public abstract Subscription connect();, +, +++ b/rxjava-core/src/main/java/rx/operators/BufferUntilSubscriber.java, +import rx.subjects.Subject;, +public class BufferUntilSubscriber<T> extends Subject<T, T> {, +    private static final class PassThruObserver<T> extends Subscriber<T> {, +    private static final class BufferedObserver<T> extends Subscriber<T> {, +++ b/rxjava-core/src/main/java/rx/operators/OperatorGroupByUntil.java, +            Subject<R, R> publish = BufferUntilSubscriber.create();, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMulticast.java, +    public Subscription connect() {, +, +        return Subscriptions.create(new Action0() {, +            @Override, +            public void call() {, +                Subscription s;, +                synchronized (guard) {]