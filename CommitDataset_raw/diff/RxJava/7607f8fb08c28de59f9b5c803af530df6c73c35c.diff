[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def sequenceEqualExampe(): Unit = {, +    val o1 = List(1, 2, 3).toObservable, +    val o2 = List(1, 2, 3).toObservable, +    val o3 = List(1, 2).toObservable, +    val o4 = List(1.0, 2.0, 3.0).toObservable, +    assertTrue(o1.sequenceEqual(o2).toBlockingObservable.single), +    assertFalse(o1.sequenceEqual(o3).toBlockingObservable.single), +    assertTrue(o1.sequenceEqual(o4).toBlockingObservable.single), +  }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def sequenceEqualExampe(): Unit = {, +    val o1 = List(1, 2, 3).toObservable, +    val o2 = List(1, 2, 3).toObservable, +    val o3 = List(1, 2).toObservable, +    val o4 = List(1.0, 2.0, 3.0).toObservable, +    assertTrue(o1.sequenceEqual(o2).toBlockingObservable.single), +    assertFalse(o1.sequenceEqual(o3).toBlockingObservable.single), +    assertTrue(o1.sequenceEqual(o4).toBlockingObservable.single), +  }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Returns an Observable that emits a Boolean value that indicates whether `this` and `that` Observable sequences are the, +   * same by comparing the items emitted by each Observable pairwise., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/sequenceEqual.png">, +   *, +   * Note: this method uses `==` to compare elements. It's a bit different from RxJava which uses `Object.equals`., +   *, +   * @param that the Observable to compare, +   * @return an Observable that emits a `Boolean` value that indicates whether the two sequences are the same, +   */, +  def sequenceEqual[U >: T](that: Observable[U]): Observable[Boolean] = {, +    sequenceEqual(that, (_1: U, _2: U) => _1 == _2), +  }, +, +  /**, +   * Returns an Observable that emits a Boolean value that indicates whether `this` and `that` Observable sequences are the, +   * same by comparing the items emitted by each Observable pairwise based on the results of a specified `equality` function., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/sequenceEqual.png">, +   *, +   * @param that the Observable to compare, +   * @param equality a function used to compare items emitted by each Observable, +   * @return an Observable that emits a `Boolean` value that indicates whether the two sequences are the same based on the `equality` function., +   */, +  def sequenceEqual[U >: T](that: Observable[U], equality: (U, U) => Boolean): Observable[Boolean] = {, +    val thisJava: rx.Observable[_ <: U] = this.asJavaObservable, +    val thatJava: rx.Observable[_ <: U] = that.asJavaObservable, +    val equalityJava: Func2[_ >: U, _ >: U, java.lang.Boolean] = equality, +    toScalaObservable[java.lang.Boolean](rx.Observable.sequenceEqual[U](thisJava, thatJava, equalityJava)).map(_.booleanValue), +  }, +, +  /**, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def sequenceEqualExampe(): Unit = {, +    val o1 = List(1, 2, 3).toObservable, +    val o2 = List(1, 2, 3).toObservable, +    val o3 = List(1, 2).toObservable, +    val o4 = List(1.0, 2.0, 3.0).toObservable, +    assertTrue(o1.sequenceEqual(o2).toBlockingObservable.single), +    assertFalse(o1.sequenceEqual(o3).toBlockingObservable.single), +    assertTrue(o1.sequenceEqual(o4).toBlockingObservable.single), +  }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Returns an Observable that emits a Boolean value that indicates whether `this` and `that` Observable sequences are the, +   * same by comparing the items emitted by each Observable pairwise., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/sequenceEqual.png">, +   *, +   * Note: this method uses `==` to compare elements. It's a bit different from RxJava which uses `Object.equals`., +   *, +   * @param that the Observable to compare, +   * @return an Observable that emits a `Boolean` value that indicates whether the two sequences are the same, +   */, +  def sequenceEqual[U >: T](that: Observable[U]): Observable[Boolean] = {, +    sequenceEqual(that, (_1: U, _2: U) => _1 == _2), +  }, +, +  /**, +   * Returns an Observable that emits a Boolean value that indicates whether `this` and `that` Observable sequences are the, +   * same by comparing the items emitted by each Observable pairwise based on the results of a specified `equality` function., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/sequenceEqual.png">, +   *, +   * @param that the Observable to compare, +   * @param equality a function used to compare items emitted by each Observable, +   * @return an Observable that emits a `Boolean` value that indicates whether the two sequences are the same based on the `equality` function., +   */, +  def sequenceEqual[U >: T](that: Observable[U], equality: (U, U) => Boolean): Observable[Boolean] = {, +    val thisJava: rx.Observable[_ <: U] = this.asJavaObservable, +    val thatJava: rx.Observable[_ <: U] = that.asJavaObservable, +    val equalityJava: Func2[_ >: U, _ >: U, java.lang.Boolean] = equality, +    toScalaObservable[java.lang.Boolean](rx.Observable.sequenceEqual[U](thisJava, thatJava, equalityJava)).map(_.booleanValue), +  }, +, +  /**, +++ b/rxjava-core/src/test/java/rx/operators/OperatorPivotTest.java, +, +]