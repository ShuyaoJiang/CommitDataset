[+++ b/src/main/java/rx/internal/operators/OperatorAll.java, +                boolean result = predicate.call(t);, +                    child.onNext(false);, +                    child.onCompleted();, +                } else {, +                	// if we drop values we must replace them upstream as downstream won't receive and request more, +                	request(1);, +                    child.onNext(true);, +                    child.onCompleted();, +++ b/src/main/java/rx/internal/operators/OperatorAll.java, +                boolean result = predicate.call(t);, +                    child.onNext(false);, +                    child.onCompleted();, +                } else {, +                	// if we drop values we must replace them upstream as downstream won't receive and request more, +                	request(1);, +                    child.onNext(true);, +                    child.onCompleted();, +++ b/src/main/java/rx/internal/operators/OperatorSkip.java, +import java.util.concurrent.atomic.AtomicBoolean;, +, +                child.setProducer(producer);, +                producer.request(toSkip);, +++ b/src/main/java/rx/internal/operators/OperatorAll.java, +                boolean result = predicate.call(t);, +                    child.onNext(false);, +                    child.onCompleted();, +                } else {, +                	// if we drop values we must replace them upstream as downstream won't receive and request more, +                	request(1);, +                    child.onNext(true);, +                    child.onCompleted();, +++ b/src/main/java/rx/internal/operators/OperatorSkip.java, +import java.util.concurrent.atomic.AtomicBoolean;, +, +                child.setProducer(producer);, +                producer.request(toSkip);, +++ b/src/test/java/rx/internal/operators/OperatorAllTest.java, +++ b/src/main/java/rx/internal/operators/OperatorAll.java, +                boolean result = predicate.call(t);, +                    child.onNext(false);, +                    child.onCompleted();, +                } else {, +                	// if we drop values we must replace them upstream as downstream won't receive and request more, +                	request(1);, +                    child.onNext(true);, +                    child.onCompleted();, +++ b/src/main/java/rx/internal/operators/OperatorSkip.java, +import java.util.concurrent.atomic.AtomicBoolean;, +, +                child.setProducer(producer);, +                producer.request(toSkip);, +++ b/src/test/java/rx/internal/operators/OperatorAllTest.java, +++ b/src/test/java/rx/internal/operators/OperatorSkipTest.java, +import static org.junit.Assert.assertEquals;, +import java.util.Arrays;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicLong;, +, +import rx.functions.Action1;, +import rx.observers.TestSubscriber;, +    , +    @Test, +    public void testBackpressureMultipleSmallAsyncRequests() throws InterruptedException {, +        final AtomicLong requests = new AtomicLong(0);, +        TestSubscriber<Long> ts = new TestSubscriber<Long>(0);, +        Observable.interval(100, TimeUnit.MILLISECONDS), +                .doOnRequest(new Action1<Long>() {, +                    @Override, +                    public void call(Long n) {, +                        requests.addAndGet(n);, +                    }, +                }).skip(4).subscribe(ts);, +        Thread.sleep(100);, +        ts.requestMore(1);, +        ts.requestMore(1);, +        Thread.sleep(100);, +        ts.unsubscribe();, +        ts.assertUnsubscribed();, +        ts.assertNoErrors();, +        assertEquals(6, requests.get());, +    }, +    , +    @Test, +    public void testRequestOverflowDoesNotOccur() {, +        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(Long.MAX_VALUE-1);, +        Observable.range(1, 10).skip(5).subscribe(ts);, +        ts.assertTerminalEvent();, +        ts.assertCompleted();, +        ts.assertNoErrors();, +        assertEquals(Arrays.asList(6,7,8,9,10), ts.getOnNextEvents());, +    }, +    ]