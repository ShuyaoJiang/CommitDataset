[+++ b/src/main/java/io/reactivex/observers/TestObserver.java, +++ b/src/main/java/io/reactivex/observers/TestObserver.java, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableDoOnTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.junit.Assert.*;, +import org.junit.*;, +import io.reactivex.functions.*;, +, +    @Test, +    public void doOnDisposeCalled() {, +        final AtomicBoolean atomicBoolean = new AtomicBoolean();, +, +        assertFalse(atomicBoolean.get());, +, +        Completable.complete(), +            .doOnDispose(new Action() {, +                @Override, +                public void run() throws Exception {, +                    atomicBoolean.set(true);, +                }, +            }), +            .test(), +            .assertResult(), +            .dispose();, +, +        assertTrue(atomicBoolean.get());, +    }, +++ b/src/main/java/io/reactivex/observers/TestObserver.java, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableDoOnTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.junit.Assert.*;, +import org.junit.*;, +import io.reactivex.functions.*;, +, +    @Test, +    public void doOnDisposeCalled() {, +        final AtomicBoolean atomicBoolean = new AtomicBoolean();, +, +        assertFalse(atomicBoolean.get());, +, +        Completable.complete(), +            .doOnDispose(new Action() {, +                @Override, +                public void run() throws Exception {, +                    atomicBoolean.set(true);, +                }, +            }), +            .test(), +            .assertResult(), +            .dispose();, +, +        assertTrue(atomicBoolean.get());, +    }, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableTakeUntilTest.java, +        // 2.0.2 - not anymore, +//        assertTrue("Not cancelled!", ts.isCancelled());, +        // 2.0.2 - not anymore, +//        assertTrue("Not cancelled!", ts.isCancelled());, +        // 2.0.2 - not anymore, +//        assertTrue("Not cancelled!", ts.isCancelled());, +++ b/src/main/java/io/reactivex/observers/TestObserver.java, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableDoOnTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.junit.Assert.*;, +import org.junit.*;, +import io.reactivex.functions.*;, +, +    @Test, +    public void doOnDisposeCalled() {, +        final AtomicBoolean atomicBoolean = new AtomicBoolean();, +, +        assertFalse(atomicBoolean.get());, +, +        Completable.complete(), +            .doOnDispose(new Action() {, +                @Override, +                public void run() throws Exception {, +                    atomicBoolean.set(true);, +                }, +            }), +            .test(), +            .assertResult(), +            .dispose();, +, +        assertTrue(atomicBoolean.get());, +    }, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableTakeUntilTest.java, +        // 2.0.2 - not anymore, +//        assertTrue("Not cancelled!", ts.isCancelled());, +        // 2.0.2 - not anymore, +//        assertTrue("Not cancelled!", ts.isCancelled());, +        // 2.0.2 - not anymore, +//        assertTrue("Not cancelled!", ts.isCancelled());, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableTakeWhileTest.java, +        // 2.0.2 - not anymore, +//        Assert.assertTrue("Not cancelled!", ts.isCancelled());, +++ b/src/main/java/io/reactivex/observers/TestObserver.java, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableDoOnTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.junit.Assert.*;]