[+++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(count, "count");, +        ObjectHelper.verifyPositive(initialCapacity, "initialCapacity");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(capacity, "bufferSize");, +        ObjectHelper.verifyPositive(capacity, "capacity");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +     * @return a {@link Disposable} reference with which the caller can stop receiving items before, +     * @return a {@link Disposable} reference with which the caller can stop receiving items before, +     * @return a {@link Disposable} reference with which the caller can stop receiving items before, +     * @return a {@link Disposable} reference with which the caller can stop receiving items before, +     * @return a {@link Disposable} reference with which the caller can stop receiving items before, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(capacityHint, "capacityHint");, +        ObjectHelper.verifyPositive(skip, "skip");, +        ObjectHelper.verifyPositive(count, "count");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(count, "count");, +++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(count, "count");, +        ObjectHelper.verifyPositive(initialCapacity, "initialCapacity");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(capacity, "bufferSize");, +        ObjectHelper.verifyPositive(capacity, "capacity");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +     * @return a {@link Disposable} reference with which the caller can stop receiving items before, +     * @return a {@link Disposable} reference with which the caller can stop receiving items before, +     * @return a {@link Disposable} reference with which the caller can stop receiving items before, +     * @return a {@link Disposable} reference with which the caller can stop receiving items before, +     * @return a {@link Disposable} reference with which the caller can stop receiving items before, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(capacityHint, "capacityHint");, +        ObjectHelper.verifyPositive(skip, "skip");, +        ObjectHelper.verifyPositive(count, "count");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +        ObjectHelper.verifyPositive(count, "count");, +++ b/src/main/java/io/reactivex/Maybe.java, +import org.reactivestreams.*;, +, +import io.reactivex.annotations.*;, +import io.reactivex.internal.operators.flowable.*;, +import io.reactivex.internal.util.*;, +     * Runs multiple Maybe sources and signals the events of the first one that signals (cancelling, +     * the rest)., +     * <dl>, +     * <dt><b>Scheduler:</b></dt>, +     * <dd>{@code amb} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param <T> the value type, +     * @param sources the Iterable sequence of sources, +     * @return the new Maybe instance, +     */, +    public static <T> Maybe<T> amb(final Iterable<? extends MaybeSource<? extends T>> sources) {, +        ObjectHelper.requireNonNull(sources, "sources is null");, +        return RxJavaPlugins.onAssembly(new MaybeAmbIterable<T>(sources));, +    }, +    , +    /**, +     * Runs multiple Maybe sources and signals the events of the first one that signals (cancelling, +     * the rest).]