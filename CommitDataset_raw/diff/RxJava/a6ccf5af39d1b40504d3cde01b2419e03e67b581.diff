[+++ b/rxjava-core/src/main/java/rx/concurrency/ExecutorScheduler.java, +import java.util.concurrent.Executor;, +import java.util.concurrent.ScheduledExecutorService;, +import java.util.concurrent.TimeUnit;, +, +import rx.Scheduler;, +/**, + * A {@link Scheduler} implementation that uses an {@link Executor} or {@link ScheduledExecutorService} implementation., + * <p>, + * Note that if an {@link Executor} implementation is used instead of {@link ScheduledExecutorService} then scheduler events requiring delays will not work and an IllegalStateException be thrown., + */, +    public ExecutorScheduler(ScheduledExecutorService executor) {, +        this.executor = executor;, +    }, +, +    @Override, +    public Subscription schedule(Func0<Subscription> action, long dueTime, TimeUnit unit) {, +        if (executor instanceof ScheduledExecutorService) {, +            final DiscardableAction discardableAction = new DiscardableAction(action);, +            ((ScheduledExecutorService) executor).schedule(new Runnable() {, +                @Override, +                public void run() {, +                    discardableAction.call();, +                }, +            }, dueTime, unit);, +            return discardableAction;, +        } else {, +            throw new IllegalStateException("Delayed scheduling is not supported with 'Executor' please use 'ScheduledExecutorServiceScheduler'");, +        }, +    }, +, +++ b/rxjava-core/src/main/java/rx/concurrency/ExecutorScheduler.java, +import java.util.concurrent.Executor;, +import java.util.concurrent.ScheduledExecutorService;, +import java.util.concurrent.TimeUnit;, +, +import rx.Scheduler;, +/**, + * A {@link Scheduler} implementation that uses an {@link Executor} or {@link ScheduledExecutorService} implementation., + * <p>, + * Note that if an {@link Executor} implementation is used instead of {@link ScheduledExecutorService} then scheduler events requiring delays will not work and an IllegalStateException be thrown., + */, +    public ExecutorScheduler(ScheduledExecutorService executor) {, +        this.executor = executor;, +    }, +, +    @Override, +    public Subscription schedule(Func0<Subscription> action, long dueTime, TimeUnit unit) {, +        if (executor instanceof ScheduledExecutorService) {, +            final DiscardableAction discardableAction = new DiscardableAction(action);, +            ((ScheduledExecutorService) executor).schedule(new Runnable() {, +                @Override, +                public void run() {, +                    discardableAction.call();, +                }, +            }, dueTime, unit);, +            return discardableAction;, +        } else {, +            throw new IllegalStateException("Delayed scheduling is not supported with 'Executor' please use 'ScheduledExecutorServiceScheduler'");, +        }, +    }, +, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/concurrency/ExecutorScheduler.java, +import java.util.concurrent.Executor;, +import java.util.concurrent.ScheduledExecutorService;, +import java.util.concurrent.TimeUnit;, +, +import rx.Scheduler;, +/**, + * A {@link Scheduler} implementation that uses an {@link Executor} or {@link ScheduledExecutorService} implementation., + * <p>, + * Note that if an {@link Executor} implementation is used instead of {@link ScheduledExecutorService} then scheduler events requiring delays will not work and an IllegalStateException be thrown., + */, +    public ExecutorScheduler(ScheduledExecutorService executor) {, +        this.executor = executor;, +    }, +, +    @Override, +    public Subscription schedule(Func0<Subscription> action, long dueTime, TimeUnit unit) {, +        if (executor instanceof ScheduledExecutorService) {, +            final DiscardableAction discardableAction = new DiscardableAction(action);, +            ((ScheduledExecutorService) executor).schedule(new Runnable() {, +                @Override, +                public void run() {, +                    discardableAction.call();, +                }, +            }, dueTime, unit);, +            return discardableAction;, +        } else {, +            throw new IllegalStateException("Delayed scheduling is not supported with 'Executor' please use 'ScheduledExecutorServiceScheduler'");, +        }, +    }, +, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/concurrency/Schedulers.java, +import java.util.concurrent.Executor;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ScheduledExecutorService;, +import java.util.concurrent.ScheduledThreadPoolExecutor;]