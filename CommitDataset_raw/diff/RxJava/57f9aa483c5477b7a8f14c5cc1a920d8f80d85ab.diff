[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationThrottleLast;, +    , +    /**, +     * Throttles the {@link Observable} by dropping values which are followed by newer values before the timer has expired., +     * , +     * @param timeout, +     *            The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +     * , +     * @param unit, +     *            The {@link TimeUnit} for the timeout., +     * , +     * @return An {@link Observable} which filters out values which are too quickly followed up with newer values., +     */, +    public Observable<T> throttleLast(long timeout, TimeUnit unit) {, +        return create(OperationThrottleLast.throttleLast(this, timeout, unit));, +    }, +, +    /**, +     * Throttles the {@link Observable} by dropping values which are followed by newer values before the timer has expired., +     * , +     * @param timeout, +     *            The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +     * @param unit, +     *            The {@link TimeUnit} for the timeout., +     * @param scheduler, +     *            The {@link Scheduler} to use when timing incoming values., +     * @return An {@link Observable} which filters out values which are too quickly followed up with newer values., +     */, +    public Observable<T> throttleLast(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationThrottleLast.throttleLast(this, timeout, unit, scheduler));, +    }, +    , +, +<<<<<<< HEAD, +=======, +>>>>>>> throttleLast, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationThrottleLast;, +    , +    /**, +     * Throttles the {@link Observable} by dropping values which are followed by newer values before the timer has expired., +     * , +     * @param timeout, +     *            The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +     * , +     * @param unit, +     *            The {@link TimeUnit} for the timeout., +     * , +     * @return An {@link Observable} which filters out values which are too quickly followed up with newer values., +     */, +    public Observable<T> throttleLast(long timeout, TimeUnit unit) {, +        return create(OperationThrottleLast.throttleLast(this, timeout, unit));, +    }, +, +    /**, +     * Throttles the {@link Observable} by dropping values which are followed by newer values before the timer has expired., +     * , +     * @param timeout, +     *            The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +     * @param unit, +     *            The {@link TimeUnit} for the timeout., +     * @param scheduler, +     *            The {@link Scheduler} to use when timing incoming values., +     * @return An {@link Observable} which filters out values which are too quickly followed up with newer values., +     */, +    public Observable<T> throttleLast(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationThrottleLast.throttleLast(this, timeout, unit, scheduler));, +    }, +    , +, +<<<<<<< HEAD, +=======, +>>>>>>> throttleLast, +++ b/rxjava-core/src/main/java/rx/operators/OperationThrottleLast.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.concurrent.TimeUnit;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;]