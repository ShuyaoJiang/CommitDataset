[+++ b/rxjava-core/src/main/java/rx/Observable.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + * This interface provides overloaded methods for subscribing as well as, + * delegate methods to the various operators., + * The documentation for this interface makes use of marble diagrams. The, + * following legend explains these diagrams:, + * For more information see the, + * <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, + * @param <T> the type of the item emitted by the Observable, +     * Function interface for work to be performed when an {@link Observable}, +     * is subscribed to via {@link Observable#subscribe(Observer)}, +     * NOTE: Use {@link #create(OnSubscribeFunc)} to create an Observable, +     * instead of this constructor unless you specifically have a need for, +     * inheritance., +     * @param onSubscribe {@link OnSubscribeFunc} to be executed when, +     *                    {@link #subscribe(Observer)} is called, +     * An {@link Observer} must call an Observable's {@code subscribe} method in, +     * order to receive items and notifications from the Observable., +     * <ol>, +     * <li>It stores a reference to the Observer in a collection object, such as, +     *     a {@code List<T>} object.</li>, +     * <li>It returns a reference to the {@link Subscription} interface. This, +     *     enables Observers to unsubscribe, that is, to stop receiving items, +     *     and notifications before the Observable stops sending them, which, +     *     also invokes the Observer's {@link Observer#onCompleted onCompleted}, +     *     method.</li>, +     * </ol><p>, +     * An <code>Observable&lt;T&gt;</code> instance is responsible for accepting, +     * all subscriptions and notifying all Observers. Unless the documentation, +     * for a particular <code>Observable&lt;T&gt;</code> implementation, +     * indicates otherwise, Observers should make no assumptions about the order, +     * in which multiple Observers will receive their notifications., +     * @param observer the Observer, +     * @return a {@link Subscription} reference with which the {@link Observer}, +     *         can stop receiving items before the Observable has finished, +     *         sending them, +     * @throws IllegalArgumentException if the {@link Observer} provided as the, +     *                                  argument to {@code subscribe()} is, +     *                                  {@code null}, +     * An {@link Observer} must call an Observable's {@code subscribe} method in, +     * order to receive items and notifications from the Observable., +     * <ol>, +     * <li>It stores a reference to the Observer in a collection object, such as, +     *     a {@code List<T>} object.</li>, +     * <li>It returns a reference to the {@link Subscription} interface. This, +     *     enables Observers to unsubscribe, that is, to stop receiving items, +     *     and notifications before the Observable stops sending them, which, +     *     also invokes the Observer's {@link Observer#onCompleted onCompleted}, +     *     method.</li>, +     * </ol><p>, +     * An {@code Observable<T>} instance is responsible for accepting all, +     * subscriptions and notifying all Observers. Unless the documentation for a, +     * particular {@code Observable<T>} implementation indicates otherwise,, +     * Observers should make no assumptions about the order in which multiple, +     * Observers will receive their notifications., +     * @param observer the Observer, +     * @param scheduler the {@link Scheduler} on which Observers subscribe to, +     *                  the Observable, +     * @return a {@link Subscription} reference with which Observers can stop, +     *         receiving items and notifications before the Observable has, +     *         finished sending them, +     * @throws IllegalArgumentException if an argument to {@code subscribe()}, +     *                                  is {@code null}, +     * Protects against errors being thrown from Observer implementations and, +     * ensures onNext/onError/onCompleted contract compliance., +     * See https://github.com/Netflix/RxJava/issues/216 for a discussion on, +     * "Guideline 6.4: Protect calls to user code from within an operator", +     * An {@link Observer} must call an Observable's {@code subscribe} method, +     * in order to receive items and notifications from the Observable., +     * @return , +     * An {@link Observer} must call an Observable's {@code subscribe} method in, +     * order to receive items and notifications from the Observable., +     * @return, +    /**, +     * An {@link Observer} must call an Observable's {@code subscribe} method in, +     * order to receive items and notifications from the Observable., +     * , +     * @param onNext, +     * @param onError, +     * @return, +     */, +     * An {@link Observer} must call an Observable's {@code subscribe} method in, +     * order to receive items and notifications from the Observable., +     * @return, +     * An {@link Observer} must call an Observable's {@code subscribe} method in, +     * order to receive items and notifications from the Observable., +     * @return, +     * An {@link Observer} must call an Observable's {@code subscribe} method in, +     * order to receive items and notifications from the Observable., +     * @return, +     * Returns a {@link ConnectableObservable} that upon connection causes the, +     * source Observable to push results into the specified subject., +     * @param subject the {@link Subject} for the {@link ConnectableObservable}, +     *                to push source items into]