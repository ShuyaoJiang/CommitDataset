[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +  /**, +   * Register a callback to be run when Subscriber is unsubscribed, +   *, +   * @param u callback to run when unsubscribed, +   */, +  final def add(u: => Unit): Unit = {, +    asJavaSubscriber.add(Subscription(u).asJavaSubscription), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +  /**, +   * Register a callback to be run when Subscriber is unsubscribed, +   *, +   * @param u callback to run when unsubscribed, +   */, +  final def add(u: => Unit): Unit = {, +    asJavaSubscriber.add(Subscription(u).asJavaSubscription), +  }, +, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/SubscriberTests.scala, +  @Test def testBlockCallbackOnlyOnce() {, +    var called = false, +    val o = Observable[Int](subscriber => {, +      subscriber.add({ called = !called }), +    }), +, +    val subscription = o.subscribe(), +    subscription.unsubscribe(), +    subscription.unsubscribe(), +, +    // Even if called multiple times, callback is only called once, +    assertTrue(called), +    assertTrue(subscription.isUnsubscribed), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +  /**, +   * Register a callback to be run when Subscriber is unsubscribed, +   *, +   * @param u callback to run when unsubscribed, +   */, +  final def add(u: => Unit): Unit = {, +    asJavaSubscriber.add(Subscription(u).asJavaSubscription), +  }, +, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/SubscriberTests.scala, +  @Test def testBlockCallbackOnlyOnce() {, +    var called = false, +    val o = Observable[Int](subscriber => {, +      subscriber.add({ called = !called }), +    }), +, +    val subscription = o.subscribe(), +    subscription.unsubscribe(), +    subscription.unsubscribe(), +, +    // Even if called multiple times, callback is only called once, +    assertTrue(called), +    assertTrue(subscription.isUnsubscribed), +  }, +, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +  /**, +   * Register a callback to be run when Subscriber is unsubscribed, +   *, +   * @param u callback to run when unsubscribed, +   */, +  final def add(u: => Unit): Unit = {, +    asJavaSubscriber.add(Subscription(u).asJavaSubscription), +  }, +, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/SubscriberTests.scala, +  @Test def testBlockCallbackOnlyOnce() {, +    var called = false, +    val o = Observable[Int](subscriber => {, +      subscriber.add({ called = !called }), +    }), +, +    val subscription = o.subscribe(), +    subscription.unsubscribe(), +    subscription.unsubscribe(), +, +    // Even if called multiple times, callback is only called once, +    assertTrue(called), +    assertTrue(subscription.isUnsubscribed), +  }, +, +++ /dev/null, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +  /**, +   * Register a callback to be run when Subscriber is unsubscribed, +   *, +   * @param u callback to run when unsubscribed, +   */, +  final def add(u: => Unit): Unit = {, +    asJavaSubscriber.add(Subscription(u).asJavaSubscription), +  }]