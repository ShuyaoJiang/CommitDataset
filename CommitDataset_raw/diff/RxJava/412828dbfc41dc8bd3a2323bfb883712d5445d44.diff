[+++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +                        if (subscriber.isUnsubscribed()), +                            return;, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +                        if (subscriber.isUnsubscribed()), +                            return;, +++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java, +        final long offset = calcElementOffset(producerIndex);, +            if (null == lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad, +            else if (null != lvElement(lElementBuffer, offset)){, +                return false;, +            }, +        }, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +                        if (subscriber.isUnsubscribed()), +                            return;, +++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java, +        final long offset = calcElementOffset(producerIndex);, +            if (null == lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad, +            else if (null != lvElement(lElementBuffer, offset)){, +                return false;, +            }, +        }, +++ b/src/main/java/rx/observers/TestSubscriber.java, +import java.util.concurrent.*;, +import rx.*;, +            if (!latch.await(timeout, unit)) {, +                throw new RuntimeException(new TimeoutException());, +            }, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +                        if (subscriber.isUnsubscribed()), +                            return;, +++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java, +        final long offset = calcElementOffset(producerIndex);, +            if (null == lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad, +            else if (null != lvElement(lElementBuffer, offset)){, +                return false;, +            }, +        }, +++ b/src/main/java/rx/observers/TestSubscriber.java, +import java.util.concurrent.*;, +import rx.*;, +            if (!latch.await(timeout, unit)) {, +                throw new RuntimeException(new TimeoutException());, +            }, +++ b/src/main/java/rx/schedulers/TrampolineScheduler.java, +            synchronized (queue) {, +            }, +                    TimedAction polled;, +                    synchronized (queue) {, +                        polled = queue.poll();, +                    }, +                        synchronized (queue) {, +                            queue.remove(timedAction);, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +                        if (subscriber.isUnsubscribed()), +                            return;, +++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java, +        final long offset = calcElementOffset(producerIndex);, +            if (null == lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad, +            else if (null != lvElement(lElementBuffer, offset)){, +                return false;, +            }, +        }, +++ b/src/main/java/rx/observers/TestSubscriber.java, +import java.util.concurrent.*;, +import rx.*;, +            if (!latch.await(timeout, unit)) {, +                throw new RuntimeException(new TimeoutException());, +            }, +++ b/src/main/java/rx/schedulers/TrampolineScheduler.java, +            synchronized (queue) {, +            }, +                    TimedAction polled;, +                    synchronized (queue) {, +                        polled = queue.poll();, +                    }, +                        synchronized (queue) {, +                            queue.remove(timedAction);, +++ b/src/main/java/rx/subscriptions/CompositeSubscription.java, +++ b/src/main/java/rx/internal/operators/TakeLastQueueProducer.java, +                        if (subscriber.isUnsubscribed()), +                            return;, +++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java, +        final long offset = calcElementOffset(producerIndex);, +            if (null == lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad, +            else if (null != lvElement(lElementBuffer, offset)){, +                return false;, +            }, +        }, +++ b/src/main/java/rx/observers/TestSubscriber.java, +import java.util.concurrent.*;, +import rx.*;, +            if (!latch.await(timeout, unit)) {, +                throw new RuntimeException(new TimeoutException());, +            }, +++ b/src/main/java/rx/schedulers/TrampolineScheduler.java, +            synchronized (queue) {, +            }, +                    TimedAction polled;]