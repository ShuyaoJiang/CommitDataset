[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFrom.java, +                if (this.s.get() != SubscriptionHelper.CANCELLED) {, +                if (current == SubscriptionHelper.CANCELLED) {, +            if (s.compareAndSet(null, SubscriptionHelper.CANCELLED)) {, +                if (s.get() != SubscriptionHelper.CANCELLED) {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFrom.java, +                if (this.s.get() != SubscriptionHelper.CANCELLED) {, +                if (current == SubscriptionHelper.CANCELLED) {, +            if (s.compareAndSet(null, SubscriptionHelper.CANCELLED)) {, +                if (s.get() != SubscriptionHelper.CANCELLED) {, +++ b/src/main/java/io/reactivex/internal/subscriptions/SubscriptionHelper.java, +    /**, +     * Represents a cancelled Subscription., +     */, +    /**, +     * Check if the given subscription is the common cancelled subscription., +     * @param d the subscription to check, +     * @return true if the subscription is the common cancelled subscription, +     */, +    /**, +     * Atomically sets the subscription on the field and cancels the, +     * previous subscription if any., +     * @param field the target field to set the new subscription on, +     * @param d the new subscription, +     * @return true if the operation succeeded, false if the target field, +     * holds the {@link #CANCELLED} instance., +     * @see #replace(AtomicReference, Subscription), +     */, +    /**, +     * Atomically sets the subscription on the field if it is still null., +     * <p>If the field is not null and doesn't contain the {@link #CANCELLED}, +     * instance, the {@link #reportSubscriptionSet()} is called., +     * @param field the target field, +     * @param d the new subscription to set, +     * @return true if the operation succeeded, false if the target field was not null., +     */, +    /**, +     * Atomically sets the subscription on the field but does not, +     * cancel the previouls subscription., +     * @param field the target field to set the new subscription on, +     * @param d the new subscription, +     * @return true if the operation succeeded, false if the target field, +     * holds the {@link #CANCELLED} instance., +     * @see #set(AtomicReference, Subscription), +     */, +    /**, +     * Atomically swaps in the common cancelled subscription instance, +     * and disposes the previous subscription if any., +     * @param field the target field to dispose the contents of, +     * @return true if the swap from the non-cancelled instance to the, +     * common cancelled instance happened in the caller's thread (allows, +     * further one-time actions)., +     */, +            if (current != null && current != CANCELLED) { // FIXME return true if current was null?, +    /**, +     * The common cancelled instance implemented as a singleton enum., +     */, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFrom.java, +                if (this.s.get() != SubscriptionHelper.CANCELLED) {, +                if (current == SubscriptionHelper.CANCELLED) {, +            if (s.compareAndSet(null, SubscriptionHelper.CANCELLED)) {, +                if (s.get() != SubscriptionHelper.CANCELLED) {, +++ b/src/main/java/io/reactivex/internal/subscriptions/SubscriptionHelper.java, +    /**, +     * Represents a cancelled Subscription., +     */, +    /**, +     * Check if the given subscription is the common cancelled subscription., +     * @param d the subscription to check, +     * @return true if the subscription is the common cancelled subscription, +     */, +    /**, +     * Atomically sets the subscription on the field and cancels the, +     * previous subscription if any., +     * @param field the target field to set the new subscription on, +     * @param d the new subscription, +     * @return true if the operation succeeded, false if the target field, +     * holds the {@link #CANCELLED} instance., +     * @see #replace(AtomicReference, Subscription), +     */, +    /**, +     * Atomically sets the subscription on the field if it is still null., +     * <p>If the field is not null and doesn't contain the {@link #CANCELLED}, +     * instance, the {@link #reportSubscriptionSet()} is called., +     * @param field the target field, +     * @param d the new subscription to set, +     * @return true if the operation succeeded, false if the target field was not null., +     */, +    /**, +     * Atomically sets the subscription on the field but does not, +     * cancel the previouls subscription., +     * @param field the target field to set the new subscription on, +     * @param d the new subscription, +     * @return true if the operation succeeded, false if the target field, +     * holds the {@link #CANCELLED} instance., +     * @see #set(AtomicReference, Subscription), +     */, +    /**, +     * Atomically swaps in the common cancelled subscription instance, +     * and disposes the previous subscription if any.]