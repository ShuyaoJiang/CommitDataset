[+++ b/src/main/java/rx/internal/operators/OperatorWindowWithSize.java, +import java.util.*;, +import rx.*;, +import rx.Observable;, +import rx.Observer;, +            child.setProducer(new Producer() {, +                @Override, +                public void request(long n) {, +                    if (n > 0) {, +                        long u = n * size;, +                        if (((u >>> 31) != 0) && (u / n != size)) {, +                            u = Long.MAX_VALUE;, +                        }, +                        requestMore(u);, +                    }, +                }, +            });, +        void requestMore(long n) {, +            request(n);, +++ b/src/main/java/rx/internal/operators/OperatorWindowWithSize.java, +import java.util.*;, +import rx.*;, +import rx.Observable;, +import rx.Observer;, +            child.setProducer(new Producer() {, +                @Override, +                public void request(long n) {, +                    if (n > 0) {, +                        long u = n * size;, +                        if (((u >>> 31) != 0) && (u / n != size)) {, +                            u = Long.MAX_VALUE;, +                        }, +                        requestMore(u);, +                    }, +                }, +            });, +        void requestMore(long n) {, +            request(n);, +++ b/src/test/java/rx/internal/operators/OperatorWindowWithSizeTest.java, +import static org.junit.Assert.*;, +import java.util.*;, +import static org.mockito.Mockito.*;, +import rx.*;, +import rx.Observer;, +import rx.functions.*;, +    @Test, +    public void testBackpressureOuter() {, +        Observable<Observable<Integer>> source = Observable.range(1, 10).window(3);, +        , +        final List<Integer> list = new ArrayList<Integer>();, +        , +        @SuppressWarnings("unchecked"), +        final Observer<Integer> o = mock(Observer.class);, +        , +        source.subscribe(new Subscriber<Observable<Integer>>() {, +            @Override, +            public void onStart() {, +                request(1);, +            }, +            @Override, +            public void onNext(Observable<Integer> t) {, +                t.subscribe(new Observer<Integer>() {, +                    @Override, +                    public void onNext(Integer t) {, +                        list.add(t);, +                    }, +                    @Override, +                    public void onError(Throwable e) {, +                        o.onError(e);, +                    }, +                    @Override, +                    public void onCompleted() {, +                        o.onCompleted();, +                    }, +                });, +            }, +            @Override, +            public void onError(Throwable e) {, +                o.onError(e);, +            }, +            @Override, +            public void onCompleted() {, +                o.onCompleted();, +            }, +        });, +        , +        assertEquals(Arrays.asList(1, 2, 3), list);, +        , +        verify(o, never()).onError(any(Throwable.class));, +        verify(o, times(1)).onCompleted(); // 1 inner, +    }, +]