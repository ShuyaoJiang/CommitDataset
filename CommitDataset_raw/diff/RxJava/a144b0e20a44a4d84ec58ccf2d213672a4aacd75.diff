[+++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.subjects.SubjectSubscriptionManager.SubjectObserver;, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.subjects.SubjectSubscriptionManager.SubjectObserver;, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +import rx.subjects.SubjectSubscriptionManager.SubjectObserver;, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.subjects.SubjectSubscriptionManager.SubjectObserver;, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +import rx.subjects.SubjectSubscriptionManager.SubjectObserver;, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +import rx.subjects.SubjectSubscriptionManager.SubjectObserver;, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.subjects.SubjectSubscriptionManager.SubjectObserver;, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +import rx.subjects.SubjectSubscriptionManager.SubjectObserver;, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +import rx.subjects.SubjectSubscriptionManager.SubjectObserver;, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +        subscriptionManager.terminate(new Action1<Collection<SubjectObserver<? super T>>>() {, +            public void call(Collection<SubjectObserver<? super T>> observers) {, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +import java.util.ArrayList;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReference;, +import rx.subjects.SubjectSubscriptionManager.SubjectObserver;, + * ReplaySubject<Object> subject = ReplaySubject.create();, +                new Action1<SubjectObserver<? super T>>() {, +                    public void call(SubjectObserver<? super T> o) {, +                        int lastIndex = replayObserverFromIndex(state.history, 0, o);, +                        state.replayState.put(o, lastIndex);]