[+++ b/rxjava-core/src/main/java/rx/observables/Observable.java, +    private final boolean isTrusted;, +        this(onSubscribe, false);, +    }, +, +    private Observable(Func1<Observer<T>, Subscription> onSubscribe, boolean isTrusted) {, +        this.isTrusted = isTrusted;, +        if (isTrusted) {, +            AtomicObservableSubscription subscription = new AtomicObservableSubscription();, +            return subscription.wrap(onSubscribe.call(new AtomicObserver<T>(subscription, observer)));, +    /*, +     * Private version that creates a 'trusted' Observable to allow performance optimizations., +     */, +    private static <T> Observable<T> _create(Func1<Observer<T>, Subscription> func) {, +        return new Observable<T>(func, true);, +    }, +, +        return _create(new Func1<Observer<T>, Subscription>() {, +        return _create(OperationFilter.filter(that, predicate));, +        return _create(OperationLast.last(that));, +        return _create(OperationMap.map(sequence, func));, +        return _create(OperationMap.mapMany(sequence, func));, +        return _create(OperationMaterialize.materialize(sequence));, +        return _create(OperationMerge.merge(source));, +        return _create(OperationMerge.merge(source));, +        return _create(OperationMerge.merge(source));, +        return _create(OperationConcat.concat(source));, +        return _create(OperationMergeDelayError.mergeDelayError(source));, +        return _create(OperationMergeDelayError.mergeDelayError(source));, +        return _create(OperationMergeDelayError.mergeDelayError(source));, +        return _create(OperationOnErrorResumeNextViaFunction.onErrorResumeNextViaFunction(that, resumeFunction));, +        return _create(OperationOnErrorResumeNextViaObservable.onErrorResumeNextViaObservable(that, resumeSequence));, +        return _create(OperationOnErrorReturn.onErrorReturn(that, resumeFunction));, +        return _create(OperationScan.scan(sequence, accumulator));, +        return _create(OperationScan.scan(sequence, initialValue, accumulator));, +        return _create(OperationSkip.skip(items, num));, +        return _create(OperationSynchronize.synchronize(observable));, +        return _create(OperationTake.take(items, num));, +        return _create(OperationToObservableList.toObservableList(that));, +        return _create(OperationToObservableIterable.toObservableIterable(iterable));, +        return _create(OperationToObservableFuture.toObservableFuture(future));, +     * @param time, +     *            the maximum time to wait, +     * @param unit, +     *            the time unit of the time argument, +        return _create(OperationToObservableFuture.toObservableFuture(future, time, unit));, +        return _create(OperationToObservableSortedList.toSortedList(sequence));, +        return _create(OperationToObservableSortedList.toSortedList(sequence, sortFunction));, +        return _create(OperationToObservableSortedList.toSortedList(sequence, new Func2<T, T, Integer>() {, +        return _create(OperationZip.zip(w0, w1, reduceFunction));, +        return _create(OperationZip.zip(w0, w1, w2, function));, +        return _create(OperationZip.zip(w0, w1, w2, w3, reduceFunction));, +++ b/rxjava-core/src/main/java/rx/observables/Observable.java, +    private final boolean isTrusted;, +        this(onSubscribe, false);, +    }, +, +    private Observable(Func1<Observer<T>, Subscription> onSubscribe, boolean isTrusted) {, +        this.isTrusted = isTrusted;, +        if (isTrusted) {, +            AtomicObservableSubscription subscription = new AtomicObservableSubscription();, +            return subscription.wrap(onSubscribe.call(new AtomicObserver<T>(subscription, observer)));, +    /*, +     * Private version that creates a 'trusted' Observable to allow performance optimizations., +     */, +    private static <T> Observable<T> _create(Func1<Observer<T>, Subscription> func) {, +        return new Observable<T>(func, true);, +    }, +, +        return _create(new Func1<Observer<T>, Subscription>() {, +        return _create(OperationFilter.filter(that, predicate));, +        return _create(OperationLast.last(that));, +        return _create(OperationMap.map(sequence, func));, +        return _create(OperationMap.mapMany(sequence, func));, +        return _create(OperationMaterialize.materialize(sequence));, +        return _create(OperationMerge.merge(source));, +        return _create(OperationMerge.merge(source));, +        return _create(OperationMerge.merge(source));, +        return _create(OperationConcat.concat(source));, +        return _create(OperationMergeDelayError.mergeDelayError(source));, +        return _create(OperationMergeDelayError.mergeDelayError(source));, +        return _create(OperationMergeDelayError.mergeDelayError(source));, +        return _create(OperationOnErrorResumeNextViaFunction.onErrorResumeNextViaFunction(that, resumeFunction));, +        return _create(OperationOnErrorResumeNextViaObservable.onErrorResumeNextViaObservable(that, resumeSequence));, +        return _create(OperationOnErrorReturn.onErrorReturn(that, resumeFunction));, +        return _create(OperationScan.scan(sequence, accumulator));, +        return _create(OperationScan.scan(sequence, initialValue, accumulator));, +        return _create(OperationSkip.skip(items, num));, +        return _create(OperationSynchronize.synchronize(observable));, +        return _create(OperationTake.take(items, num));, +        return _create(OperationToObservableList.toObservableList(that));, +        return _create(OperationToObservableIterable.toObservableIterable(iterable));, +        return _create(OperationToObservableFuture.toObservableFuture(future));, +     * @param time, +     *            the maximum time to wait, +     * @param unit, +     *            the time unit of the time argument, +        return _create(OperationToObservableFuture.toObservableFuture(future, time, unit));, +        return _create(OperationToObservableSortedList.toSortedList(sequence));, +        return _create(OperationToObservableSortedList.toSortedList(sequence, sortFunction));]