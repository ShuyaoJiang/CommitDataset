[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +, +  @Test def debounceExample() {, +    val o = Observable.interval(100 millis).take(20).debounce {, +      n =>, +        if (n % 2 == 0) {, +          Observable.interval(50 millis), +        }, +        else {, +          Observable.interval(150 millis), +        }, +    }, +    o.toBlockingObservable.foreach(println(_)), +  }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +, +  @Test def debounceExample() {, +    val o = Observable.interval(100 millis).take(20).debounce {, +      n =>, +        if (n % 2 == 0) {, +          Observable.interval(50 millis), +        }, +        else {, +          Observable.interval(150 millis), +        }, +    }, +    o.toBlockingObservable.foreach(println(_)), +  }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Return an Observable that mirrors the source Observable, except that it drops items emitted by the source, +   * Observable that are followed by another item within a computed debounce duration., +   *, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/debounce.f.png">, +   *, +   * @param debounceSelector function to retrieve a sequence that indicates the throttle duration for each item, +   * @return an Observable that omits items emitted by the source Observable that are followed by another item, +   *         within a computed debounce duration, +   */, +  def debounce(debounceSelector: T => Observable[Any]): Observable[T] = {, +    val fJava = new rx.functions.Func1[T, rx.Observable[Any]] {, +      override def call(t: T) = debounceSelector(t).asJavaObservable.asInstanceOf[rx.Observable[Any]], +    }, +    toScalaObservable[T](asJavaObservable.debounce[Any](fJava)), +  }, +, +  /**]