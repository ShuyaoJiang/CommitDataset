[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def testForeach() {, +    val numbers = Observable.interval(200 millis).take(3), +    , +    // foreach is not available on normal Observables:, +    // for (n <- numbers) println(n+10), +    , +    // but on BlockingObservable, it is:, +    for (n <- numbers.toBlockingObservable) println(n+10), +  }, +  , +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def testForeach() {, +    val numbers = Observable.interval(200 millis).take(3), +    , +    // foreach is not available on normal Observables:, +    // for (n <- numbers) println(n+10), +    , +    // but on BlockingObservable, it is:, +    for (n <- numbers.toBlockingObservable) println(n+10), +  }, +  , +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/observables/BlockingObservable.scala, +import rx.lang.scala.internal.ImplicitFunctionConversions._, +  extends AnyVal , +  def foreach(f: T => Unit): Unit = {, +    asJava.forEach(f), +  def last: T = {, +    asJava.last() : T // useless ascription because of compiler bug, +  }, +, +  // getIterator(), +    asJava.single() : T // useless ascription because of compiler bug, +    asJava.toIterable().asScala : Iterable[T] // useless ascription because of compiler bug, +    asJava.toIterable().asScala.toList : List[T] // useless ascription because of compiler bug]