[+++ b/src/main/java/rx/Observable.java, +import rx.internal.util.UtilityFunctions;, +, +        return lift(new OperatorDistinct<T, T>(UtilityFunctions.<T>identity()));, +        return lift(new OperatorDistinctUntilChanged<T, T>(UtilityFunctions.<T>identity()));, +        return filter(UtilityFunctions.alwaysFalse());, +        return lift(new OperatorAny<T>(UtilityFunctions.alwaysTrue(), true));, +        return lift(new OperatorToMap<T, K, T>(keySelector, UtilityFunctions.<T>identity()));, +        return lift(new OperatorToMultimap<T, K, T>(keySelector, UtilityFunctions.<T>identity()));, +++ b/src/main/java/rx/Observable.java, +import rx.internal.util.UtilityFunctions;, +, +        return lift(new OperatorDistinct<T, T>(UtilityFunctions.<T>identity()));, +        return lift(new OperatorDistinctUntilChanged<T, T>(UtilityFunctions.<T>identity()));, +        return filter(UtilityFunctions.alwaysFalse());, +        return lift(new OperatorAny<T>(UtilityFunctions.alwaysTrue(), true));, +        return lift(new OperatorToMap<T, K, T>(keySelector, UtilityFunctions.<T>identity()));, +        return lift(new OperatorToMultimap<T, K, T>(keySelector, UtilityFunctions.<T>identity()));, +++ b/src/main/java/rx/functions/Functions.java, +++ b/src/main/java/rx/Observable.java, +import rx.internal.util.UtilityFunctions;, +, +        return lift(new OperatorDistinct<T, T>(UtilityFunctions.<T>identity()));, +        return lift(new OperatorDistinctUntilChanged<T, T>(UtilityFunctions.<T>identity()));, +        return filter(UtilityFunctions.alwaysFalse());, +        return lift(new OperatorAny<T>(UtilityFunctions.alwaysTrue(), true));, +        return lift(new OperatorToMap<T, K, T>(keySelector, UtilityFunctions.<T>identity()));, +        return lift(new OperatorToMultimap<T, K, T>(keySelector, UtilityFunctions.<T>identity()));, +++ b/src/main/java/rx/functions/Functions.java, +++ b/src/main/java/rx/internal/operators/OperatorSequenceEqual.java, +import rx.internal.util.UtilityFunctions;, +                }).all(UtilityFunctions.<Boolean> identity());, +++ b/src/main/java/rx/Observable.java, +import rx.internal.util.UtilityFunctions;, +, +        return lift(new OperatorDistinct<T, T>(UtilityFunctions.<T>identity()));, +        return lift(new OperatorDistinctUntilChanged<T, T>(UtilityFunctions.<T>identity()));, +        return filter(UtilityFunctions.alwaysFalse());, +        return lift(new OperatorAny<T>(UtilityFunctions.alwaysTrue(), true));, +        return lift(new OperatorToMap<T, K, T>(keySelector, UtilityFunctions.<T>identity()));, +        return lift(new OperatorToMultimap<T, K, T>(keySelector, UtilityFunctions.<T>identity()));, +++ b/src/main/java/rx/functions/Functions.java, +++ b/src/main/java/rx/internal/operators/OperatorSequenceEqual.java, +import rx.internal.util.UtilityFunctions;, +                }).all(UtilityFunctions.<Boolean> identity());, +++ b/src/main/java/rx/internal/util/UtilityFunctions.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +package rx.internal.util;, +, +import rx.functions.Func0;, +import rx.functions.Func1;, +import rx.functions.Func2;, +import rx.functions.Func3;, +import rx.functions.Func4;, +import rx.functions.Func5;, +import rx.functions.Func6;, +import rx.functions.Func7;, +import rx.functions.Func8;, +import rx.functions.Func9;, +import rx.functions.FuncN;, +, +/**, + * Utility functions for internal use that we don't want part of the public API. , + */, +public final class UtilityFunctions {, +, +    /**, +     * Returns a function that always returns {@code true}., +     *, +     * @return a {@link Func1} that accepts an Object and returns the Boolean {@code true}, +     */, +    public static <T> Func1<? super T, Boolean> alwaysTrue() {, +        return AlwaysTrue.INSTANCE;, +    }, +, +    /**, +     * Returns a function that always returns {@code false}., +     *, +     * @return a {@link Func1} that accepts an Object and returns the Boolean {@code false}, +     */, +    public static <T> Func1<? super T, Boolean> alwaysFalse() {, +        return AlwaysFalse.INSTANCE;, +    }, +, +    /**, +     * Returns a function that always returns the Object it is passed., +     *, +     * @return a {@link Func1} that accepts an Object and returns the same Object, +     */]