[+++ b/src/main/java/io/reactivex/Observable.java, +        Objects.requireNonNull(scheduler);, +    , +    public final Observable<Boolean> any(Predicate<? super T> predicate) {, +        Objects.requireNonNull(predicate);, +        return lift(new OperatorAny<>(predicate));, +    }, +    , +    public final Observable<Boolean> all(Predicate<? super T> predicate) {, +        Objects.requireNonNull(predicate);, +        return lift(new OperatorAny<>(predicate));, +    }, +    , +    public final Observable<Long> count() {, +        return lift(OperatorCount.instance());, +    }, +    , +    public final Observable<T> elementAt(long index) {, +        if (index < 0) {, +            throw new IllegalArgumentException("index >= 0 required but it was " + index);, +        }, +        return lift(new OperatorElementAt<>(index, null));, +    }, +, +    public final Observable<T> elementAt(long index, T defaultValue) {, +        if (index < 0) {, +            throw new IllegalArgumentException("index >= 0 required but it was " + index);, +        }, +        Objects.requireNonNull(defaultValue);, +        return lift(new OperatorElementAt<>(index, defaultValue));, +    }, +    , +    public final Observable<Boolean> isEmpty() {, +        return any(v -> true);, +    }, +    , +    public final Observable<T> single() {, +        return lift(OperatorSingle.instanceNoDefault());, +    }, +    , +    public final Observable<T> single(T defaultValue) {, +        Objects.requireNonNull(defaultValue);, +        return lift(new OperatorSingle<>(defaultValue));, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +        Objects.requireNonNull(scheduler);, +    , +    public final Observable<Boolean> any(Predicate<? super T> predicate) {, +        Objects.requireNonNull(predicate);, +        return lift(new OperatorAny<>(predicate));, +    }, +    , +    public final Observable<Boolean> all(Predicate<? super T> predicate) {, +        Objects.requireNonNull(predicate);, +        return lift(new OperatorAny<>(predicate));, +    }, +    , +    public final Observable<Long> count() {, +        return lift(OperatorCount.instance());, +    }, +    , +    public final Observable<T> elementAt(long index) {, +        if (index < 0) {, +            throw new IllegalArgumentException("index >= 0 required but it was " + index);, +        }, +        return lift(new OperatorElementAt<>(index, null));, +    }, +, +    public final Observable<T> elementAt(long index, T defaultValue) {, +        if (index < 0) {, +            throw new IllegalArgumentException("index >= 0 required but it was " + index);, +        }, +        Objects.requireNonNull(defaultValue);, +        return lift(new OperatorElementAt<>(index, defaultValue));, +    }, +    , +    public final Observable<Boolean> isEmpty() {, +        return any(v -> true);, +    }, +    , +    public final Observable<T> single() {, +        return lift(OperatorSingle.instanceNoDefault());, +    }, +    , +    public final Observable<T> single(T defaultValue) {, +        Objects.requireNonNull(defaultValue);, +        return lift(new OperatorSingle<>(defaultValue));, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorAll.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License.]