[+++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, +In this release we have made the constructor in the companion object `Observer` and the `asJavaObserver` property, +in `Observable[T]`private to the Scala bindings package., +, +, +, +The major changes in `Observable` are wrt to the factory methods *Can't write this when I don't have Samuel's changes*., +, +The `Subject` trait now also hides the underlying Java `asJavaSubject: rx.subjects.Subject[_ >: T, _<: R]`., +, +```scala, +  private [scala] val asJavaSubject: rx.subjects.Subject[_ >: T, _<: R], +}, +```, +, +There is no companion object for `Subject` but instead there are a number of subtypes for each kind of subject,, +that follows the pattern of a companion object and a class with a private constructor:, +, +```scala, +object XXXSubject {, +  def apply[T](...): XXXSubject[T] = {, +    new XXXSubject[T](... create corresponding rx subject ...), +  }, +class XXXSubject[T] private[scala] (val asJavaSubject: rx.subjects.XXXSubject[T]) extends Subject[T,T] {}, +```, +, +The subjects that are available are:, +, +* AsyncSubject[T](), +* BehaviorSubject[T](T value), +* PublishSubject[T](), +* ReplaySubject[T](), +, +The latter is still missing various overloads http://msdn.microsoft.com/en-us/library/hh211810(v=vs.103).aspx which, +you can expect to appear once they are added to the underlying RxJava implementation., +, +Compared with release 0.15.1 there are no breaking changes in `Subject` for this release, except for, +making `asJavaSubject` private., +, +Schedulers, +----------, +, +The biggest breaking change compared to the 0.15.1 release is giving `Scheduler` the same structure as the other types., +The trait itself remains unchanged, except that we made the underlying Java representation hidden as above., +, +```scala, +   private[scala] def asJavaScheduler: rx.Scheduler;, +private [scala] object Scheduler {â€¦}, +```, +, +In the previous release, you created schedulers by selecting them from the `Schedulers` object,, +as in `Schedulers.immediate` or `Schedulers.newThread` where each would return an instance of the `Scheduler` trait., +However, several of the scheduler implementations have additional methods, such as the `testScheduler`,, +which already deviated from the pattern., +, +In this release, we changed this to make scheduler more like `Subject` and provide a family of schedulers, +that you create using their factory function:, +, +* CurrentThreadScheduler(), +* ExecutorScheduler(executor: Executor), +* ImmediateScheduler(), +* NewThreadScheduler(), +* ScheduledExecutorServiceScheduler(executor: ScheduledExecutorService), +* TestScheduler(), +* ThreadPoolForComputationScheduler(), +* ThreadPoolForIOScheduler(), +, +In the future we expect that this list will grow further., +, +To make your code compile in the new release you will have to change all occurrences of `Schedulers.xxx`, +into `XxxScheduler()`., +, +, +Notifications, +-------------, +, +```scala, +++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, +In this release we have made the constructor in the companion object `Observer` and the `asJavaObserver` property, +in `Observable[T]`private to the Scala bindings package., +, +, +, +The major changes in `Observable` are wrt to the factory methods *Can't write this when I don't have Samuel's changes*., +, +The `Subject` trait now also hides the underlying Java `asJavaSubject: rx.subjects.Subject[_ >: T, _<: R]`., +, +```scala, +  private [scala] val asJavaSubject: rx.subjects.Subject[_ >: T, _<: R], +}, +```, +, +There is no companion object for `Subject` but instead there are a number of subtypes for each kind of subject,, +that follows the pattern of a companion object and a class with a private constructor:, +, +```scala, +object XXXSubject {, +  def apply[T](...): XXXSubject[T] = {, +    new XXXSubject[T](... create corresponding rx subject ...), +  }]