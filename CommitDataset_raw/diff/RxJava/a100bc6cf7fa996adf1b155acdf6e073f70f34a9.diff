[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorSwitch;, +     * , +     * @param <T> the element type, +        return sequenceOfSequences.lift(new OperatorSwitch<T>());, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorSwitch;, +     * , +     * @param <T> the element type, +        return sequenceOfSequences.lift(new OperatorSwitch<T>());, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorSwitch;, +     * , +     * @param <T> the element type, +        return sequenceOfSequences.lift(new OperatorSwitch<T>());, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorSwitch.java, +/**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations under, + * the License., + */, +package rx.operators;, +, +import java.util.ArrayList;, +import java.util.List;, +import rx.Observable;, +import rx.Observable.Operator;, +import rx.Subscriber;, +import rx.observers.SerializedSubscriber;, +import rx.subscriptions.SerialSubscription;, +, +/**, + * Transforms an Observable that emits Observables into a single Observable that, + * emits the items emitted by the most recently published of those Observables., + * <p>, + * <img width="640" src=, + * "https://github.com/Netflix/RxJava/wiki/images/rx-operators/switchDo.png">, + * , + * @param <T> the value type, + */, +public final class OperatorSwitch<T> implements Operator<T, Observable<? extends T>> {, +, +    @Override, +    public Subscriber<? super Observable<? extends T>> call(final Subscriber<? super T> child) {, +        final SerializedSubscriber<T> s = new SerializedSubscriber<T>(child);, +        final SerialSubscription ssub = new SerialSubscription();, +        child.add(ssub);, +        , +        return new Subscriber<Observable<? extends T>>(child) {, +            final Object guard = new Object();, +            final Subscriber<?> self = this;, +            final NotificationLite<?> nl = NotificationLite.instance();, +            /** Guarded by guard. */, +            int index;, +            /** Guarded by guard. */, +            boolean active;, +            /** Guarded by guard. */, +            boolean mainDone;, +            /** Guarded by guard. */, +            List<Object> queue;, +            /** Guarded by guard. */, +            boolean emitting;, +            @Override, +            public void onNext(Observable<? extends T> t) {, +                final int id;, +                synchronized (guard) {, +                    id = ++index;, +                    active = true;, +                }, +                , +                Subscriber<T> sub = new Subscriber<T>() {, +, +                    @Override, +                    public void onNext(T t) {, +                        emit(t, id);, +                    }, +, +                    @Override, +                    public void onError(Throwable e) {, +                        error(e, id);, +                    }, +, +                    @Override, +                    public void onCompleted() {, +                        complete(id);, +                    }, +                    , +                };]