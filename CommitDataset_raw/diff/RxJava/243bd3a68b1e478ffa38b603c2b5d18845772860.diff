[+++ b/rxjava-core/src/main/java/rx/operators/OperatorZip.java, +            boolean started = false;, +, +                if (!started) {, +                    // this means we have not received a valid onNext before termination so we emit the onCompleted, +                    observer.onCompleted();, +                }, +                if (observables == null || observables.length == 0) {, +                    observer.onCompleted();, +                } else {, +                    started = true;, +            }, +++ b/rxjava-core/src/main/java/rx/operators/OperatorZip.java, +            boolean started = false;, +, +                if (!started) {, +                    // this means we have not received a valid onNext before termination so we emit the onCompleted, +                    observer.onCompleted();, +                }, +                if (observables == null || observables.length == 0) {, +                    observer.onCompleted();, +                } else {, +                    started = true;, +            }, +++ b/rxjava-core/src/test/java/rx/ZipTests.java, +     * Occasionally zip may be invoked with 0 observables. Test that we don't block indefinitely instead, +     * , +     * We now expect an IllegalArgumentException since last() requires at least one value and nothing will be emitted., +    @Test(expected = IllegalArgumentException.class), +                System.out.println("received: " + args);, +++ b/rxjava-core/src/main/java/rx/operators/OperatorZip.java, +            boolean started = false;, +, +                if (!started) {, +                    // this means we have not received a valid onNext before termination so we emit the onCompleted, +                    observer.onCompleted();, +                }, +                if (observables == null || observables.length == 0) {, +                    observer.onCompleted();, +                } else {, +                    started = true;, +            }, +++ b/rxjava-core/src/test/java/rx/ZipTests.java, +     * Occasionally zip may be invoked with 0 observables. Test that we don't block indefinitely instead, +     * , +     * We now expect an IllegalArgumentException since last() requires at least one value and nothing will be emitted., +    @Test(expected = IllegalArgumentException.class), +                System.out.println("received: " + args);, +++ b/rxjava-core/src/test/java/rx/operators/OperatorZipTest.java, +import java.util.Collections;, +import rx.observers.TestSubscriber;, +    @Test, +    public void testZipEmptyObservables() {, +, +        Observable<String> o = Observable.zip(Observable.<Integer> empty(), Observable.<String> empty(), new Func2<Integer, String, String>() {, +, +            @Override, +            public String call(Integer t1, String t2) {, +                return t1 + "-" + t2;, +            }, +, +        });, +, +        final ArrayList<String> list = new ArrayList<String>();, +        o.subscribe(new Action1<String>() {, +, +            @Override, +            public void call(String s) {, +                System.out.println(s);, +                list.add(s);, +            }, +        });, +, +        assertEquals(0, list.size());, +    }, +, +    @Test, +    public void testZipEmptyList() {, +, +        final Object invoked = new Object();, +        Collection<Observable<Object>> observables = Collections.emptyList();, +, +        Observable<Object> o = Observable.zip(observables, new FuncN<Object>() {, +            @Override, +            public Object call(final Object... args) {, +                assertEquals("No argument should have been passed", 0, args.length);, +                return invoked;, +            }, +        });, +, +        TestSubscriber<Object> ts = new TestSubscriber<Object>();, +        o.subscribe(ts);, +        ts.awaitTerminalEvent(200, TimeUnit.MILLISECONDS);, +        ts.assertReceivedOnNext(Collections.emptyList());, +    }, +, +    /**, +     * Expect IllegalArgumentException instead of blocking forever as zip should emit onCompleted and no onNext, +     * and last() expects at least a single response., +     */]