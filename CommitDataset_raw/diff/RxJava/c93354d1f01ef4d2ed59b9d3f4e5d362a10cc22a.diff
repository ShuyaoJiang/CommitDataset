[+++ b/rxjava-core/src/main/java/rx/operators/OperationMostRecent.java, +import org.junit.Test;, +import rx.Subscription;, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.mock;, +, +        @Test, +        public void testMostRecent() {, +            Subscription s = mock(Subscription.class);, +            TestObservable observable = new TestObservable(s);, +, +            Iterator<String> it = mostRecent(observable, "default").iterator();, +, +            assertTrue(it.hasNext());, +            assertEquals("default", it.next());, +            assertEquals("default", it.next());, +, +            observable.sendOnNext("one");, +            assertTrue(it.hasNext());, +            assertEquals("one", it.next());, +            assertEquals("one", it.next());, +, +            observable.sendOnNext("two");, +            assertTrue(it.hasNext());, +            assertEquals("two", it.next());, +            assertEquals("two", it.next());, +, +            observable.sendOnCompleted();, +            assertFalse(it.hasNext());, +, +        }, +, +        @Test(expected = TestException.class), +        public void testMostRecentWithException() {, +            Subscription s = mock(Subscription.class);, +            TestObservable observable = new TestObservable(s);, +, +            Iterator<String> it = mostRecent(observable, "default").iterator();, +, +            assertTrue(it.hasNext());, +            assertEquals("default", it.next());, +            assertEquals("default", it.next());, +, +            observable.sendOnError(new TestException());, +            assertTrue(it.hasNext());, +, +            it.next();, +        }, +, +        private static class TestObservable extends Observable<String> {, +, +            Observer<String> observer = null;, +            Subscription s;, +, +            public TestObservable(Subscription s) {, +                this.s = s;, +            }, +, +            /* used to simulate subscription */, +            public void sendOnCompleted() {, +                observer.onCompleted();, +            }, +, +            /* used to simulate subscription */, +            public void sendOnNext(String value) {, +                observer.onNext(value);, +            }, +, +            /* used to simulate subscription */, +            @SuppressWarnings("unused"), +            public void sendOnError(Exception e) {, +                observer.onError(e);, +            }, +, +            @Override, +            public Subscription subscribe(final Observer<String> observer) {, +                this.observer = observer;, +                return s;, +            }, +        }, +, +        private static class TestException extends RuntimeException {, +, +        }]