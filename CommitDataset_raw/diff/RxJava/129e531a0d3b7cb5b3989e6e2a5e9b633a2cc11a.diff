[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +  /*, +   val observer = mock(classOf[Observer[Int]]), +   val o = Observable().head, +   val sub = o.subscribe(observer), +   verify(observer, never).onNext(any(classOf[Int])), +   verify(observer, never).onCompleted(), +   verify(observer, times(1)).onError(any(classOf[NoSuchElementException])), + */, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +  /*, +   val observer = mock(classOf[Observer[Int]]), +   val o = Observable().head, +   val sub = o.subscribe(observer), +   verify(observer, never).onNext(any(classOf[Int])), +   verify(observer, never).onCompleted(), +   verify(observer, times(1)).onError(any(classOf[NoSuchElementException])), + */, +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/Async.java, + * Copyright 2014 Netflix, Inc., +import rx.util.async.operators.OperatorDeferFuture;, +import rx.util.async.operators.OperatorForEachFuture;, +import rx.util.async.operators.OperatorFromFunctionals;, +import rx.util.async.operators.OperatorStartFuture;, +        return OperatorStartFuture.startFuture(functionAsync);, +        return OperatorStartFuture.startFuture(functionAsync, scheduler);, +        return OperatorDeferFuture.deferFuture(observableFactoryAsync);, +        return OperatorDeferFuture.deferFuture(observableFactoryAsync, scheduler);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.functions.Action1, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext, onError);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.functions.Action1, rx.functions.Action0, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext, onError);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        return Observable.create(OperatorFromFunctionals.fromAction(action, result)).subscribeOn(scheduler);, +        return Observable.create(OperatorFromFunctionals.fromCallable(callable)).subscribeOn(scheduler);, +        return Observable.create(OperatorFromFunctionals.fromRunnable(run, result)).subscribeOn(scheduler);, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +  /*, +   val observer = mock(classOf[Observer[Int]]), +   val o = Observable().head, +   val sub = o.subscribe(observer), +   verify(observer, never).onNext(any(classOf[Int])), +   verify(observer, never).onCompleted(), +   verify(observer, times(1)).onError(any(classOf[NoSuchElementException])), + */, +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/Async.java, + * Copyright 2014 Netflix, Inc., +import rx.util.async.operators.OperatorDeferFuture;, +import rx.util.async.operators.OperatorForEachFuture;, +import rx.util.async.operators.OperatorFromFunctionals;, +import rx.util.async.operators.OperatorStartFuture;, +        return OperatorStartFuture.startFuture(functionAsync);, +        return OperatorStartFuture.startFuture(functionAsync, scheduler);, +        return OperatorDeferFuture.deferFuture(observableFactoryAsync);, +        return OperatorDeferFuture.deferFuture(observableFactoryAsync, scheduler);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.functions.Action1, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext, onError);, +     * @see #forEachFuture(rx.Observable, rx.functions.Action1, rx.functions.Action1, rx.functions.Action0, rx.Scheduler), +        return OperatorForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext, onError);, +        FutureTask<Void> task = OperatorForEachFuture.forEachFuture(source, onNext, onError, onCompleted);, +        return Observable.create(OperatorFromFunctionals.fromAction(action, result)).subscribeOn(scheduler);, +        return Observable.create(OperatorFromFunctionals.fromCallable(callable)).subscribeOn(scheduler);]