[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.subjects.AsyncSubject;, +     * Returns a {@link ConnectableObservable} that shares a single subscription that contains the last notification only., +     * @return a {@link ConnectableObservable}, +     */, +    public ConnectableObservable<T> publishLast() {, +        return OperationMulticast.multicast(this, AsyncSubject.<T> create());, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.subjects.AsyncSubject;, +     * Returns a {@link ConnectableObservable} that shares a single subscription that contains the last notification only., +     * @return a {@link ConnectableObservable}, +     */, +    public ConnectableObservable<T> publishLast() {, +        return OperationMulticast.multicast(this, AsyncSubject.<T> create());, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +import rx.operators.OperationRefCount;, +import rx.util.functions.Func1;, +    /**, +     * Returns an observable sequence that stays connected to the source as long, +     * as there is at least one subscription to the observable sequence., +     * @return a {@link Observable}, +     */, +    public Observable<T> refCount() {, +        return refCount(this);, +    }, +, +    /**, +     * Returns an observable sequence that stays connected to the source as long, +     * as there is at least one subscription to the observable sequence., +     * @return a {@link Observable}, +     * @param that a {@link ConnectableObservable}, +     */, +    public static <T> Observable<T> refCount(ConnectableObservable<T> that) {, +        return Observable.create(OperationRefCount.refCount(that));, +    }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.subjects.AsyncSubject;, +     * Returns a {@link ConnectableObservable} that shares a single subscription that contains the last notification only., +     * @return a {@link ConnectableObservable}, +     */, +    public ConnectableObservable<T> publishLast() {, +        return OperationMulticast.multicast(this, AsyncSubject.<T> create());, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +import rx.operators.OperationRefCount;, +import rx.util.functions.Func1;, +    /**, +     * Returns an observable sequence that stays connected to the source as long, +     * as there is at least one subscription to the observable sequence., +     * @return a {@link Observable}, +     */, +    public Observable<T> refCount() {, +        return refCount(this);, +    }, +, +    /**, +     * Returns an observable sequence that stays connected to the source as long, +     * as there is at least one subscription to the observable sequence., +     * @return a {@link Observable}, +     * @param that a {@link ConnectableObservable}, +     */, +    public static <T> Observable<T> refCount(ConnectableObservable<T> that) {, +        return Observable.create(OperationRefCount.refCount(that));, +    }, +++ b/rxjava-core/src/main/java/rx/operators/OperationRefCount.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.observables.ConnectableObservable;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Action0;, +, +/**, + * Returns an observable sequence that stays connected to the source as long, + * as there is at least one subscription to the observable sequence.]