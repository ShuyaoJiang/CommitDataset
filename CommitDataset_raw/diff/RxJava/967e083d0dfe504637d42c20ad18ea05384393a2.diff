[+++ b/src/main/java/io/reactivex/internal/operators/OperatorReplay.java, +import io.reactivex.internal.subscriptions.*;, +import io.reactivex.internal.util.*;, +            if (SubscriptionHelper.validateRequest(n)) {, +                long u = BackpressureHelper.addCap(r, n);, +                , +                    BackpressureHelper.add(totalRequested, n);, +            final Subscriber<? super T> child = output.child;, +            , +                        if (NotificationLite.accept(o, child)) {, +                            child.onError(err);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorReplay.java, +import io.reactivex.internal.subscriptions.*;, +import io.reactivex.internal.util.*;, +            if (SubscriptionHelper.validateRequest(n)) {, +                long u = BackpressureHelper.addCap(r, n);, +                , +                    BackpressureHelper.add(totalRequested, n);, +            final Subscriber<? super T> child = output.child;, +            , +                        if (NotificationLite.accept(o, child)) {, +                            child.onError(err);, +++ b/src/main/java/io/reactivex/internal/queue/MpscLinkedQueue.java, +        final LinkedQueueNode<T> nextNode = new LinkedQueueNode<>(nextValue);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorReplay.java, +import io.reactivex.internal.subscriptions.*;, +import io.reactivex.internal.util.*;, +            if (SubscriptionHelper.validateRequest(n)) {, +                long u = BackpressureHelper.addCap(r, n);, +                , +                    BackpressureHelper.add(totalRequested, n);, +            final Subscriber<? super T> child = output.child;, +            , +                        if (NotificationLite.accept(o, child)) {, +                            child.onError(err);, +++ b/src/main/java/io/reactivex/internal/queue/MpscLinkedQueue.java, +        final LinkedQueueNode<T> nextNode = new LinkedQueueNode<>(nextValue);, +++ b/src/main/java/io/reactivex/internal/subscriptions/SubscriptionArbiter.java, +        if (SubscriptionHelper.validateRequest(n)) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorReplay.java, +import io.reactivex.internal.subscriptions.*;, +import io.reactivex.internal.util.*;, +            if (SubscriptionHelper.validateRequest(n)) {, +                long u = BackpressureHelper.addCap(r, n);, +                , +                    BackpressureHelper.add(totalRequested, n);, +            final Subscriber<? super T> child = output.child;, +            , +                        if (NotificationLite.accept(o, child)) {, +                            child.onError(err);, +++ b/src/main/java/io/reactivex/internal/queue/MpscLinkedQueue.java, +        final LinkedQueueNode<T> nextNode = new LinkedQueueNode<>(nextValue);, +++ b/src/main/java/io/reactivex/internal/subscriptions/SubscriptionArbiter.java, +        if (SubscriptionHelper.validateRequest(n)) {, +++ b/src/main/java/io/reactivex/internal/util/NotificationLite.java, +        @Override, +        public String toString() {, +            return "NotificationLite.Complete";, +        };, +        , +        @Override, +        public String toString() {, +            return "NotificationLite.Error[" + e + "]";, +        }, +        , +        @Override, +        public String toString() {, +            return "NotificationLite.Subscription[" + s + "]";, +        }]