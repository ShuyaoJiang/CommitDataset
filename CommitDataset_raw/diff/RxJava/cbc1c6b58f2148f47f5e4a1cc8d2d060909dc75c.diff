[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits the results of sampling the items emitted by the source Observable at a, +     * specified time interval., +     * Returns an Observable that emits the results of sampling the items emitted by the source Observable at a, +     * specified time interval., +     * Return an Observable that emits the results of sampling the items emitted by the source Observable, +     * whenever the specified {@code sampler} Observable emits an item or completes., +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits the results of sampling the items emitted by the source Observable at a, +     * specified time interval., +     * Returns an Observable that emits the results of sampling the items emitted by the source Observable at a, +     * specified time interval., +     * Return an Observable that emits the results of sampling the items emitted by the source Observable, +     * whenever the specified {@code sampler} Observable emits an item or completes., +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +import rx.functions.Action0;, +import rx.schedulers.Schedulers;, + * Common implementations can be found in {@link Schedulers}., +     * Retrieve or create a new {@link Scheduler.Inner} that represents serial execution of actions., +     * <p>, +     * When work is completed it should be unsubscribed. Work on a {@link Scheduler.Inner} is guaranteed to be sequential., +     * , +     * @return Inner representing a serial queue of actions to be executed, +     */, +    public abstract Inner inner();, +, +    /**, +     * Sequential Scheduler for executing actions on a single thread or event loop., +     * <p>, +     * Unsubscribing the {@Inner} unschedules all outstanding work and allows resources cleanup., +     */, +    public abstract static class Inner implements Subscription {, +, +        /**, +         * Schedules an Action for execution., +         * @return a subscription to be able to unsubscribe the action (unschedule it if not executed), +        public abstract Subscription schedule(Action0 action);, +         * Schedules an Action for execution at some point in the future., +         * @return a subscription to be able to unsubscribe the action (unschedule it if not executed), +        public abstract Subscription schedule(final Action0 action, final long delayTime, final TimeUnit unit);, +         * @return a subscription to be able to unsubscribe the action (unschedule it if not executed), +        public Subscription schedulePeriodically(final Action0 action, long initialDelay, long period, TimeUnit unit) {, +            final Action0 recursiveAction = new Action0() {, +                public void call() {, +                    if (!isUnsubscribed()) {, +                        action.call();, +                        schedule(this, periodInNanos - timeTakenByActionInNanos, TimeUnit.NANOSECONDS);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits the results of sampling the items emitted by the source Observable at a, +     * specified time interval., +     * Returns an Observable that emits the results of sampling the items emitted by the source Observable at a, +     * specified time interval., +     * Return an Observable that emits the results of sampling the items emitted by the source Observable, +     * whenever the specified {@code sampler} Observable emits an item or completes., +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +import rx.functions.Action0;, +import rx.schedulers.Schedulers;, + * Common implementations can be found in {@link Schedulers}., +     * Retrieve or create a new {@link Scheduler.Inner} that represents serial execution of actions., +     * <p>, +     * When work is completed it should be unsubscribed. Work on a {@link Scheduler.Inner} is guaranteed to be sequential., +     * , +     * @return Inner representing a serial queue of actions to be executed, +     */, +    public abstract Inner inner();, +, +    /**, +     * Sequential Scheduler for executing actions on a single thread or event loop., +     * <p>, +     * Unsubscribing the {@Inner} unschedules all outstanding work and allows resources cleanup., +     */, +    public abstract static class Inner implements Subscription {, +, +        /**, +         * Schedules an Action for execution., +         * @return a subscription to be able to unsubscribe the action (unschedule it if not executed), +        public abstract Subscription schedule(Action0 action);, +         * Schedules an Action for execution at some point in the future., +         * @return a subscription to be able to unsubscribe the action (unschedule it if not executed), +        public abstract Subscription schedule(final Action0 action, final long delayTime, final TimeUnit unit);, +         * @return a subscription to be able to unsubscribe the action (unschedule it if not executed), +        public Subscription schedulePeriodically(final Action0 action, long initialDelay, long period, TimeUnit unit) {, +            final Action0 recursiveAction = new Action0() {, +                public void call() {, +                    if (!isUnsubscribed()) {, +                        action.call();, +                        schedule(this, periodInNanos - timeTakenByActionInNanos, TimeUnit.NANOSECONDS);, +++ b/rxjava-core/src/main/java/rx/operators/ChunkedOperation.java, +import rx.functions.Action0;, +import rx.subscriptions.MultipleAssignmentSubscription;, +        private final Scheduler.Inner scheduler;, +            this.scheduler = scheduler.inner();, +            subscriptions.put(chunk, scheduler.schedule(new Action0() {, +                public void call() {, +            scheduler.unsubscribe();, +        private final Scheduler.Inner scheduler;, +            this.scheduler = scheduler.inner();, +            subscriptions.put(chunk, scheduler.schedule(new Action0() {, +                public void call() {, +            scheduler.unsubscribe();]