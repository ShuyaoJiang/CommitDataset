[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnEach.java, +import io.reactivex.internal.util.ExceptionHelper;, +            T v;, +, +            try {, +                v = qs.poll();, +            } catch (Throwable ex) {, +                Exceptions.throwIfFatal(ex);, +                try {, +                    onError.accept(ex);, +                } catch (Throwable exc) {, +                    throw new CompositeException(ex, exc);, +                }, +                throw ExceptionHelper.<Exception>throwIfThrowable(ex);, +            }, +                    try {, +                    } catch (Throwable ex) {, +                        Exceptions.throwIfFatal(ex);, +                        try {, +                            onError.accept(ex);, +                        } catch (Throwable exc) {, +                            throw new CompositeException(ex, exc);, +                        }, +                        throw ExceptionHelper.<Exception>throwIfThrowable(ex);, +                    }, +            T v;, +, +            try {, +                v = qs.poll();, +            } catch (Throwable ex) {, +                Exceptions.throwIfFatal(ex);, +                try {, +                    onError.accept(ex);, +                } catch (Throwable exc) {, +                    throw new CompositeException(ex, exc);, +                }, +                throw ExceptionHelper.<Exception>throwIfThrowable(ex);, +            }, +                    try {, +                    } catch (Throwable ex) {, +                        Exceptions.throwIfFatal(ex);, +                        try {, +                            onError.accept(ex);, +                        } catch (Throwable exc) {, +                            throw new CompositeException(ex, exc);, +                        }, +                        throw ExceptionHelper.<Exception>throwIfThrowable(ex);, +                    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnEach.java, +import io.reactivex.internal.util.ExceptionHelper;, +            T v;, +, +            try {, +                v = qs.poll();, +            } catch (Throwable ex) {, +                Exceptions.throwIfFatal(ex);, +                try {, +                    onError.accept(ex);, +                } catch (Throwable exc) {, +                    throw new CompositeException(ex, exc);, +                }, +                throw ExceptionHelper.<Exception>throwIfThrowable(ex);, +            }, +                    try {, +                    } catch (Throwable ex) {, +                        Exceptions.throwIfFatal(ex);, +                        try {, +                            onError.accept(ex);, +                        } catch (Throwable exc) {, +                            throw new CompositeException(ex, exc);, +                        }, +                        throw ExceptionHelper.<Exception>throwIfThrowable(ex);, +                    }, +            T v;, +, +            try {, +                v = qs.poll();, +            } catch (Throwable ex) {, +                Exceptions.throwIfFatal(ex);, +                try {, +                    onError.accept(ex);, +                } catch (Throwable exc) {, +                    throw new CompositeException(ex, exc);, +                }, +                throw ExceptionHelper.<Exception>throwIfThrowable(ex);, +            }, +                    try {, +                    } catch (Throwable ex) {, +                        Exceptions.throwIfFatal(ex);, +                        try {, +                            onError.accept(ex);, +                        } catch (Throwable exc) {, +                            throw new CompositeException(ex, exc);, +                        }, +                        throw ExceptionHelper.<Exception>throwIfThrowable(ex);, +                    }, +++ b/src/main/java/io/reactivex/internal/util/ExceptionHelper.java, +    /**, +     * Workaround for Java 6 not supporting throwing a final Throwable from a catch block., +     * @param <E> the generic exception type]