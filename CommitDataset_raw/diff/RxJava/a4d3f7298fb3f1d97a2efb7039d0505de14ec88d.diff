[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublish.java, +public final class FlowablePublish<T> extends ConnectableFlowable<T> implements FlowableWithUpstream<T> {, +    final Publisher<T> source;, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source, final int bufferSize) {, +    public static <T, R> Flowable<R> create(final Flowable<T> source,, +    private FlowablePublish(Publisher<T> onSubscribe, Publisher<T> source,, +    public Publisher<T> source() {, +        return source;, +    }, +, +    @Override, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublish.java, +public final class FlowablePublish<T> extends ConnectableFlowable<T> implements FlowableWithUpstream<T> {, +    final Publisher<T> source;, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source, final int bufferSize) {, +    public static <T, R> Flowable<R> create(final Flowable<T> source,, +    private FlowablePublish(Publisher<T> onSubscribe, Publisher<T> source,, +    public Publisher<T> source() {, +        return source;, +    }, +, +    @Override, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +public final class FlowableReplay<T> extends ConnectableFlowable<T> implements FlowableWithUpstream<T> {, +    final Publisher<T> source;, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source,, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source,, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source,, +    static <T> ConnectableFlowable<T> create(Flowable<T> source,, +    private FlowableReplay(Publisher<T> onSubscribe, Flowable<T> source,, +    public Publisher<T> source() {, +        return source;, +    }, +, +    @Override, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublish.java, +public final class FlowablePublish<T> extends ConnectableFlowable<T> implements FlowableWithUpstream<T> {, +    final Publisher<T> source;, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source, final int bufferSize) {, +    public static <T, R> Flowable<R> create(final Flowable<T> source,, +    private FlowablePublish(Publisher<T> onSubscribe, Publisher<T> source,, +    public Publisher<T> source() {, +        return source;, +    }, +, +    @Override, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +public final class FlowableReplay<T> extends ConnectableFlowable<T> implements FlowableWithUpstream<T> {, +    final Publisher<T> source;, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source,, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source,, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source,, +    static <T> ConnectableFlowable<T> create(Flowable<T> source,, +    private FlowableReplay(Publisher<T> onSubscribe, Flowable<T> source,, +    public Publisher<T> source() {, +        return source;, +    }, +, +    @Override, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservablePublish.java, +public final class ObservablePublish<T> extends ConnectableObservable<T> implements ObservableWithUpstream<T> {, +    final ObservableSource<T> source;, +    public static <T> ConnectableObservable<T> create(ObservableSource<T> source, final int bufferSize) {, +    public static <T, R> Observable<R> create(final ObservableSource<T> source,, +    private ObservablePublish(ObservableSource<T> onSubscribe, ObservableSource<T> source,, +    public ObservableSource<T> source() {, +        return source;, +    }, +, +    @Override, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublish.java, +public final class FlowablePublish<T> extends ConnectableFlowable<T> implements FlowableWithUpstream<T> {, +    final Publisher<T> source;, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source, final int bufferSize) {, +    public static <T, R> Flowable<R> create(final Flowable<T> source,, +    private FlowablePublish(Publisher<T> onSubscribe, Publisher<T> source,, +    public Publisher<T> source() {, +        return source;, +    }, +, +    @Override, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +public final class FlowableReplay<T> extends ConnectableFlowable<T> implements FlowableWithUpstream<T> {, +    final Publisher<T> source;, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source,, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source,, +    public static <T> ConnectableFlowable<T> create(Flowable<T> source,, +    static <T> ConnectableFlowable<T> create(Flowable<T> source,, +    private FlowableReplay(Publisher<T> onSubscribe, Flowable<T> source,, +    public Publisher<T> source() {, +        return source;, +    }, +, +    @Override, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservablePublish.java, +public final class ObservablePublish<T> extends ConnectableObservable<T> implements ObservableWithUpstream<T> {, +    final ObservableSource<T> source;, +    public static <T> ConnectableObservable<T> create(ObservableSource<T> source, final int bufferSize) {, +    public static <T, R> Observable<R> create(final ObservableSource<T> source,, +    private ObservablePublish(ObservableSource<T> onSubscribe, ObservableSource<T> source,]