[+++ b/src/main/java/io/reactivex/observers/TestObserver.java, + * <p>The TestObserver implements Disposable for convenience where dispose calls cancel., +     * Returns true if this TestObserver has been cancelled., +     * @return true if this TestObserver has been cancelled, +     * Returns the last thread which called the onXXX methods of this TestObserver., +     * Returns true if TestObserver received any onError or onComplete events., +     * @return true if TestObserver received any onError or onComplete events, +     * Returns true if this TestObserver received a subscription., +     * @return true if this TestObserver received a subscription, +     * Awaits until this TestObserver receives an onError or onComplete events., +     * Awaits the specified amount of time or until this TestObserver , +     * @return true if the TestObserver terminated, false if timeout happened, +     * Assert that this TestObserver received exactly one onComplete event., +     * Assert that this TestObserver has not received any onComplete event., +     * Assert that this TestObserver has not received any onError event., +     * Assert that this TestObserver received exactly the specified onError event value., +     * Asserts that this TestObserver received exactly one onError event which is an, +     * Assert that this TestObserver received exactly one onNext value which is equal to, +     * Assert that this TestObserver received the specified number onNext events., +     * Assert that this TestObserver has not received any onNext events., +     * Assert that the TestObserver received only the specified values in the specified order., +     * Assert that the TestObserver received only the specified values in any order., +     * Assert that the TestObserver received only the specified sequence of values in the same order., +     * Assert that the TestObserver terminated (i.e., the terminal latch reached zero)., +     * Assert that the TestObserver has not terminated (i.e., the terminal latch is still non-zero)., +     * Waits until the any terminal event has been received by this TestObserver, +     * @return true if the TestObserver terminated, false if the wait has been interrupted, +     * Awaits the specified amount of time or until this TestObserver , +     * @return true if the TestObserver terminated, false if timeout or interrupt happened, +     * <p>If the wait times out or gets interrupted, the TestObserver is cancelled.]