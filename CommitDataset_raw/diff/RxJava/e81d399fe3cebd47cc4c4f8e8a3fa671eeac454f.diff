[+++ b/src/main/java/io/reactivex/Completable.java, +public abstract class Completable implements CompletableSource {, +    public static Completable wrap(CompletableSource source) {, +    public static Completable amb(final CompletableSource... sources) {, +    public static Completable amb(final Iterable<? extends CompletableSource> sources) {, +    public static Completable concat(CompletableSource... sources) {, +    public static Completable concat(Iterable<? extends CompletableSource> sources) {, +    public static Completable concat(Publisher<? extends CompletableSource> sources) {, +    public static Completable concat(Publisher<? extends CompletableSource> sources, int prefetch) {, +    public static Completable create(CompletableSource onSubscribe) {, +    public static Completable defer(final Callable<? extends CompletableSource> completableSupplier) {, +    public static Completable merge(CompletableSource... sources) {, +    public static Completable merge(Iterable<? extends CompletableSource> sources) {, +    public static Completable merge(Publisher<? extends CompletableSource> sources) {, +    public static Completable merge(Publisher<? extends CompletableSource> sources, int maxConcurrency) {, +    private static Completable merge0(Publisher<? extends CompletableSource> sources, int maxConcurrency, boolean delayErrors) {, +    public static Completable mergeDelayError(CompletableSource... sources) {, +    public static Completable mergeDelayError(Iterable<? extends CompletableSource> sources) {, +    public static Completable mergeDelayError(Publisher<? extends CompletableSource> sources) {, +    public static Completable mergeDelayError(Publisher<? extends CompletableSource> sources, int maxConcurrency) {, +            Function<? super R, ? extends CompletableSource> completableFunction,, +            final Function<? super R, ? extends CompletableSource> completableFunction,, +    public final Completable ambWith(CompletableSource other) {, +     * This is an alias for {@link #concatWith(CompletableSource)}., +    public final Completable concatWith(CompletableSource other) {, +     * This is an alias for {@link #concatWith(CompletableSource)}., +    public final Completable endWith(CompletableSource other) {, +    public final Completable mergeWith(CompletableSource other) {, +    public final Completable onErrorResumeNext(final Function<? super Throwable, ? extends CompletableSource> errorMapper) {, +    public final Completable startWith(CompletableSource other) {, +        EmptyCompletableObserver s = new EmptyCompletableObserver();, +    public final void subscribe(CompletableObserver s) {, +    protected abstract void subscribeActual(CompletableObserver s);, +        CallbackCompletableObserver s = new CallbackCompletableObserver(onError, onComplete);, +        ObserverCompletableObserver<T> os = new ObserverCompletableObserver<T>(s);, +        CallbackCompletableObserver s = new CallbackCompletableObserver(onComplete);, +        SubscriberCompletableObserver<T> os = new SubscriberCompletableObserver<T>(s);, +    public final Completable timeout(long timeout, TimeUnit unit, CompletableSource other) {, +    public final Completable timeout(long timeout, TimeUnit unit, Scheduler scheduler, CompletableSource other) {, +    private Completable timeout0(long timeout, TimeUnit unit, Scheduler scheduler, CompletableSource other) {, +++ b/src/main/java/io/reactivex/Completable.java, +public abstract class Completable implements CompletableSource {, +    public static Completable wrap(CompletableSource source) {, +    public static Completable amb(final CompletableSource... sources) {, +    public static Completable amb(final Iterable<? extends CompletableSource> sources) {, +    public static Completable concat(CompletableSource... sources) {, +    public static Completable concat(Iterable<? extends CompletableSource> sources) {, +    public static Completable concat(Publisher<? extends CompletableSource> sources) {, +    public static Completable concat(Publisher<? extends CompletableSource> sources, int prefetch) {, +    public static Completable create(CompletableSource onSubscribe) {, +    public static Completable defer(final Callable<? extends CompletableSource> completableSupplier) {, +    public static Completable merge(CompletableSource... sources) {, +    public static Completable merge(Iterable<? extends CompletableSource> sources) {, +    public static Completable merge(Publisher<? extends CompletableSource> sources) {, +    public static Completable merge(Publisher<? extends CompletableSource> sources, int maxConcurrency) {, +    private static Completable merge0(Publisher<? extends CompletableSource> sources, int maxConcurrency, boolean delayErrors) {, +    public static Completable mergeDelayError(CompletableSource... sources) {, +    public static Completable mergeDelayError(Iterable<? extends CompletableSource> sources) {, +    public static Completable mergeDelayError(Publisher<? extends CompletableSource> sources) {, +    public static Completable mergeDelayError(Publisher<? extends CompletableSource> sources, int maxConcurrency) {, +            Function<? super R, ? extends CompletableSource> completableFunction,, +            final Function<? super R, ? extends CompletableSource> completableFunction,, +    public final Completable ambWith(CompletableSource other) {, +     * This is an alias for {@link #concatWith(CompletableSource)}., +    public final Completable concatWith(CompletableSource other) {, +     * This is an alias for {@link #concatWith(CompletableSource)}., +    public final Completable endWith(CompletableSource other) {, +    public final Completable mergeWith(CompletableSource other) {, +    public final Completable onErrorResumeNext(final Function<? super Throwable, ? extends CompletableSource> errorMapper) {, +    public final Completable startWith(CompletableSource other) {, +        EmptyCompletableObserver s = new EmptyCompletableObserver();, +    public final void subscribe(CompletableObserver s) {, +    protected abstract void subscribeActual(CompletableObserver s);, +        CallbackCompletableObserver s = new CallbackCompletableObserver(onError, onComplete);, +        ObserverCompletableObserver<T> os = new ObserverCompletableObserver<T>(s);, +        CallbackCompletableObserver s = new CallbackCompletableObserver(onComplete);, +        SubscriberCompletableObserver<T> os = new SubscriberCompletableObserver<T>(s);, +    public final Completable timeout(long timeout, TimeUnit unit, CompletableSource other) {, +    public final Completable timeout(long timeout, TimeUnit unit, Scheduler scheduler, CompletableSource other) {, +    private Completable timeout0(long timeout, TimeUnit unit, Scheduler scheduler, CompletableSource other) {, +++ /dev/null, +++ b/src/main/java/io/reactivex/Completable.java, +public abstract class Completable implements CompletableSource {, +    public static Completable wrap(CompletableSource source) {, +    public static Completable amb(final CompletableSource... sources) {, +    public static Completable amb(final Iterable<? extends CompletableSource> sources) {, +    public static Completable concat(CompletableSource... sources) {, +    public static Completable concat(Iterable<? extends CompletableSource> sources) {, +    public static Completable concat(Publisher<? extends CompletableSource> sources) {, +    public static Completable concat(Publisher<? extends CompletableSource> sources, int prefetch) {, +    public static Completable create(CompletableSource onSubscribe) {, +    public static Completable defer(final Callable<? extends CompletableSource> completableSupplier) {, +    public static Completable merge(CompletableSource... sources) {, +    public static Completable merge(Iterable<? extends CompletableSource> sources) {, +    public static Completable merge(Publisher<? extends CompletableSource> sources) {, +    public static Completable merge(Publisher<? extends CompletableSource> sources, int maxConcurrency) {, +    private static Completable merge0(Publisher<? extends CompletableSource> sources, int maxConcurrency, boolean delayErrors) {, +    public static Completable mergeDelayError(CompletableSource... sources) {, +    public static Completable mergeDelayError(Iterable<? extends CompletableSource> sources) {, +    public static Completable mergeDelayError(Publisher<? extends CompletableSource> sources) {]