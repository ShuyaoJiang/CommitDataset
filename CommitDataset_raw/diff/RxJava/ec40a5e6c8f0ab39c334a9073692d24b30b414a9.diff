[+++ b/src/main/java/io/reactivex/flowables/ConnectableFlowable.java, +     * Returns a Flowable that automatically connects (at most once) to this ConnectableFlowable, +     * <p>, +     * <img width="640" height="392" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.f.png" alt="">, +     * <p>, +     * The connection happens after the first subscription and happens at most once, +     * during the lifetime of the returned Flowable. If this ConnectableFlowable, +     * terminates, the connection is never renewed, no matter how Subscribers come, +     * and go. Use {@link #refCount()} to renew a connection or dispose an active, +     * connection when all {@code Subscriber}s have cancelled their {@code Subscription}s., +     * <p>, +     * This overload does not allow disconnecting the connection established via, +     * {@link #connect(Consumer)}. Use the {@link #autoConnect(int, Consumer)} overload, +     * to gain access to the {@code Disposable} representing the only connection., +     * @see #refCount(), +     * @see #autoConnect(int, Consumer), +     * Returns a Flowable that automatically connects (at most once) to this ConnectableFlowable, +     * <p>, +     * <img width="640" height="392" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.f.png" alt="">, +     * <p>, +     * The connection happens after the given number of subscriptions and happens at most once, +     * during the lifetime of the returned Flowable. If this ConnectableFlowable, +     * terminates, the connection is never renewed, no matter how Subscribers come, +     * and go. Use {@link #refCount()} to renew a connection or dispose an active, +     * connection when all {@code Subscriber}s have cancelled their {@code Subscription}s., +     * <p>, +     * This overload does not allow disconnecting the connection established via, +     * {@link #connect(Consumer)}. Use the {@link #autoConnect(int, Consumer)} overload, +     * to gain access to the {@code Disposable} representing the only connection., +     * Returns a Flowable that automatically connects (at most once) to this ConnectableFlowable, +     * <p>, +     * <img width="640" height="392" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.f.png" alt="">, +     * <p>, +     * The connection happens after the given number of subscriptions and happens at most once, +     * during the lifetime of the returned Flowable. If this ConnectableFlowable, +     * terminates, the connection is never renewed, no matter how Subscribers come, +     * and go. Use {@link #refCount()} to renew a connection or dispose an active, +     * connection when all {@code Subscriber}s have cancelled their {@code Subscription}s., +++ b/src/main/java/io/reactivex/flowables/ConnectableFlowable.java, +     * Returns a Flowable that automatically connects (at most once) to this ConnectableFlowable, +     * <p>, +     * <img width="640" height="392" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.f.png" alt="">, +     * <p>, +     * The connection happens after the first subscription and happens at most once, +     * during the lifetime of the returned Flowable. If this ConnectableFlowable, +     * terminates, the connection is never renewed, no matter how Subscribers come, +     * and go. Use {@link #refCount()} to renew a connection or dispose an active, +     * connection when all {@code Subscriber}s have cancelled their {@code Subscription}s., +     * <p>, +     * This overload does not allow disconnecting the connection established via, +     * {@link #connect(Consumer)}. Use the {@link #autoConnect(int, Consumer)} overload, +     * to gain access to the {@code Disposable} representing the only connection., +     * @see #refCount(), +     * @see #autoConnect(int, Consumer), +     * Returns a Flowable that automatically connects (at most once) to this ConnectableFlowable, +     * <p>, +     * <img width="640" height="392" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.f.png" alt="">, +     * <p>, +     * The connection happens after the given number of subscriptions and happens at most once, +     * during the lifetime of the returned Flowable. If this ConnectableFlowable, +     * terminates, the connection is never renewed, no matter how Subscribers come, +     * and go. Use {@link #refCount()} to renew a connection or dispose an active, +     * connection when all {@code Subscriber}s have cancelled their {@code Subscription}s., +     * <p>, +     * This overload does not allow disconnecting the connection established via, +     * {@link #connect(Consumer)}. Use the {@link #autoConnect(int, Consumer)} overload, +     * to gain access to the {@code Disposable} representing the only connection., +     * Returns a Flowable that automatically connects (at most once) to this ConnectableFlowable, +     * <p>, +     * <img width="640" height="392" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.f.png" alt="">, +     * <p>, +     * The connection happens after the given number of subscriptions and happens at most once, +     * during the lifetime of the returned Flowable. If this ConnectableFlowable, +     * terminates, the connection is never renewed, no matter how Subscribers come, +     * and go. Use {@link #refCount()} to renew a connection or dispose an active, +     * connection when all {@code Subscriber}s have cancelled their {@code Subscription}s., +++ b/src/main/java/io/reactivex/observables/ConnectableObservable.java, +     * Returns an Observable that automatically connects (at most once) to this ConnectableObservable, +     * <p>, +     * <img width="640" height="348" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.o.png" alt="">, +     * <p>, +     * The connection happens after the first subscription and happens at most once, +     * during the lifetime of the returned Observable. If this ConnectableObservable, +     * terminates, the connection is never renewed, no matter how Observers come, +     * and go. Use {@link #refCount()} to renew a connection or dispose an active, +     * connection when all {@code Observers}s have disposed their {@code Disposable}s., +     * <p>, +     * This overload does not allow disconnecting the connection established via, +     * {@link #connect(Consumer)}. Use the {@link #autoConnect(int, Consumer)} overload, +     * to gain access to the {@code Disposable} representing the only connection., +     * Returns an Observable that automatically connects (at most once) to this ConnectableObservable, +     * <p>, +     * <img width="640" height="348" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.o.png" alt="">, +     * <p>, +     * The connection happens after the given number of subscriptions and happens at most once, +     * during the lifetime of the returned Observable. If this ConnectableObservable, +     * terminates, the connection is never renewed, no matter how Observers come, +     * and go. Use {@link #refCount()} to renew a connection or dispose an active, +     * connection when all {@code Observers}s have disposed their {@code Disposable}s., +     * <p>]