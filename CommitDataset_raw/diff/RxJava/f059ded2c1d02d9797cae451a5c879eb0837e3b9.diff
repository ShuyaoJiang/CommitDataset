[+++ b/src/main/java/io/reactivex/Observable.java, +++ b/src/main/java/io/reactivex/Observable.java, +++ b/src/main/java/io/reactivex/internal/observers/LambdaObserver.java, +                s.dispose();, +                get().dispose();, +++ b/src/main/java/io/reactivex/Observable.java, +++ b/src/main/java/io/reactivex/internal/observers/LambdaObserver.java, +                s.dispose();, +                get().dispose();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableInternalHelper.java, +++ b/src/main/java/io/reactivex/Observable.java, +++ b/src/main/java/io/reactivex/internal/observers/LambdaObserver.java, +                s.dispose();, +                get().dispose();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableInternalHelper.java, +++ b/src/test/java/io/reactivex/internal/observers/LambdaObserverTest.java, +import io.reactivex.subjects.PublishSubject;, +, +    @Test, +    public void onNextThrowsCancelsUpstream() {, +        PublishSubject<Integer> ps = PublishSubject.create();, +, +        final List<Throwable> errors = new ArrayList<Throwable>();, +, +        ps.subscribe(new Consumer<Integer>() {, +            @Override, +            public void accept(Integer v) throws Exception {, +                throw new TestException();, +            }, +        }, new Consumer<Throwable>() {, +            @Override, +            public void accept(Throwable e) throws Exception {, +                errors.add(e);, +            }, +        });, +, +        assertTrue("No observers?!", ps.hasObservers());, +        assertTrue("Has errors already?!", errors.isEmpty());, +, +        ps.onNext(1);, +, +        assertFalse("Has observers?!", ps.hasObservers());, +        assertFalse("No errors?!", errors.isEmpty());, +, +        assertTrue(errors.toString(), errors.get(0) instanceof TestException);, +    }, +, +    @Test, +    public void onSubscribeThrowsCancelsUpstream() {, +        PublishSubject<Integer> ps = PublishSubject.create();, +, +        final List<Throwable> errors = new ArrayList<Throwable>();, +, +        ps.subscribe(new Consumer<Integer>() {, +            @Override, +            public void accept(Integer v) throws Exception {, +            }, +        }, new Consumer<Throwable>() {, +            @Override, +            public void accept(Throwable e) throws Exception {, +                errors.add(e);, +            }, +        }, new Action() {, +            @Override, +            public void run() throws Exception {, +            }, +        }, new Consumer<Disposable>() {, +            @Override, +            public void accept(Disposable s) throws Exception {, +                throw new TestException();, +            }, +        });, +, +        assertFalse("Has observers?!", ps.hasObservers());, +        assertFalse("No errors?!", errors.isEmpty());, +, +        assertTrue(errors.toString(), errors.get(0) instanceof TestException);, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +++ b/src/main/java/io/reactivex/internal/observers/LambdaObserver.java, +                s.dispose();, +                get().dispose();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableInternalHelper.java, +++ b/src/test/java/io/reactivex/internal/observers/LambdaObserverTest.java, +import io.reactivex.subjects.PublishSubject;, +, +    @Test, +    public void onNextThrowsCancelsUpstream() {, +        PublishSubject<Integer> ps = PublishSubject.create();, +, +        final List<Throwable> errors = new ArrayList<Throwable>();, +, +        ps.subscribe(new Consumer<Integer>() {, +            @Override, +            public void accept(Integer v) throws Exception {, +                throw new TestException();, +            }, +        }, new Consumer<Throwable>() {, +            @Override, +            public void accept(Throwable e) throws Exception {]