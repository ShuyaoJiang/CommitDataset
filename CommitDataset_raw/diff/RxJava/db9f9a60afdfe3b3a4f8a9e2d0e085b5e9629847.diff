[+++ b/rxjava-core/src/main/java/rx/Scheduler.java, +/**, + * Represents an object that schedules units of work., + */, +    /**, +     * Schedules a cancelable action to be executed., +     *, +     * @param action action, +     * @return a subscription to be able to unsubscribe from action., +     */, +    /**, +     * Schedules an action to be executed., +     *, +     * @param action action, +     * @return a subscription to be able to unsubscribe from action., +     */, +    Subscription schedule(Action0 action);, +    /**, +     * Schedules an action to be executed in dueTime., +     *, +     * @param action action, +     * @return a subscription to be able to unsubscribe from action., +     */, +    Subscription schedule(Action0 action, long dueTime, TimeUnit unit);, +    /**, +     * Schedules a cancelable action to be executed in dueTime., +     *, +     * @param action action, +     * @return a subscription to be able to unsubscribe from action., +     */, +    Subscription schedule(Func0<Subscription> action, long dueTime, TimeUnit unit);, +, +    /**, +     * Returns the scheduler's notion of current time., +     */, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +/**, + * Represents an object that schedules units of work., + */, +    /**, +     * Schedules a cancelable action to be executed., +     *, +     * @param action action, +     * @return a subscription to be able to unsubscribe from action., +     */, +    /**, +     * Schedules an action to be executed., +     *, +     * @param action action, +     * @return a subscription to be able to unsubscribe from action., +     */, +    Subscription schedule(Action0 action);, +    /**, +     * Schedules an action to be executed in dueTime., +     *, +     * @param action action, +     * @return a subscription to be able to unsubscribe from action., +     */, +    Subscription schedule(Action0 action, long dueTime, TimeUnit unit);, +    /**, +     * Schedules a cancelable action to be executed in dueTime., +     *, +     * @param action action, +     * @return a subscription to be able to unsubscribe from action., +     */, +    Subscription schedule(Func0<Subscription> action, long dueTime, TimeUnit unit);, +, +    /**, +     * Returns the scheduler's notion of current time., +     */, +++ b/rxjava-core/src/main/java/rx/concurrency/AbstractScheduler.java, +    public Subscription schedule(Action0 action, long dueTime, TimeUnit unit) {, +        return schedule(asFunc0(action), dueTime, unit);, +    public Subscription schedule(Func0<Subscription> action, long dueTime, TimeUnit unit) {, +        return schedule(new SleepingAction(action, this, dueTime, unit));, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +/**, + * Represents an object that schedules units of work., + */, +    /**, +     * Schedules a cancelable action to be executed., +     *, +     * @param action action, +     * @return a subscription to be able to unsubscribe from action., +     */, +    /**, +     * Schedules an action to be executed., +     *, +     * @param action action, +     * @return a subscription to be able to unsubscribe from action., +     */, +    Subscription schedule(Action0 action);, +    /**, +     * Schedules an action to be executed in dueTime., +     *, +     * @param action action, +     * @return a subscription to be able to unsubscribe from action., +     */, +    Subscription schedule(Action0 action, long dueTime, TimeUnit unit);, +    /**]