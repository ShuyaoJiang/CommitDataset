[+++ b/src/test/java/io/reactivex/SubscriberTest.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex;, +, +import static org.junit.Assert.assertEquals;, +, +import java.util.*;, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.*;, +, +import org.junit.*;, +import org.reactivestreams.*;, +, +import io.reactivex.Observable.Operator;, +import io.reactivex.subscribers.*;, +, +public class SubscriberTest {, +, +    /**, +     * Should request n for whatever the final Subscriber asks for, +     */, +    @Test, +    public void testRequestFromFinalSubscribeWithRequestValue() {, +        TestSubscriber<String> s = new TestSubscriber<>((Long)null);, +        s.request(10);, +        final AtomicLong r = new AtomicLong();, +        s.onSubscribe(new Subscription() {, +, +            @Override, +            public void request(long n) {, +                r.set(n);, +            }, +            , +            @Override, +            public void cancel() {, +                , +            }, +, +        });, +        assertEquals(10, r.get());, +    }, +, +    /**, +     * Should request -1 for infinite, +     */, +    @Test, +    public void testRequestFromFinalSubscribeWithoutRequestValue() {, +        TestSubscriber<String> s = new TestSubscriber<>();, +        final AtomicLong r = new AtomicLong();, +        s.onSubscribe(new Subscription() {, +, +            @Override, +            public void request(long n) {, +                r.set(n);, +            }, +            , +            @Override, +            public void cancel() {, +                , +            }, +, +        });, +        assertEquals(Long.MAX_VALUE, r.get());, +    }, +, +    @Test, +    public void testRequestFromChainedOperator() {, +        TestSubscriber<String> s = new TestSubscriber<>();, +        Operator<String, String> o = s1 -> new Subscriber<String>() {, +, +            @Override, +            public void onSubscribe(Subscription a) {, +                s1.onSubscribe(a);, +            }, +            , +            @Override, +            public void onComplete() {, +, +            }, +, +            @Override, +            public void onError(Throwable e) {, +, +            }, +, +            @Override, +            public void onNext(String t) {, +]