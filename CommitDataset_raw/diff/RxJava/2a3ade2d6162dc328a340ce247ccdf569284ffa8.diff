[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationThrottleWithTimeout;, +     * Throttles by dropping all values that are followed by newer values before the timeout value expires. The timer reset on each `onNext` call., +     * <p>, +     * NOTE: If the timeout is set higher than the rate of traffic then this will drop all data., +     * @param timeout, +     *            The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +     *            The {@link TimeUnit} for the timeout., +     * , +     * @return An {@link Observable} which filters out values which are too quickly followed up with newer values., +    public Observable<T> throttleWithTimeout(long timeout, TimeUnit unit) {, +        return create(OperationThrottleWithTimeout.throttleWithTimeout(this, timeout, unit));, +     * Throttles by dropping all values that are followed by newer values before the timeout value expires. The timer reset on each `onNext` call., +     * <p>, +     * NOTE: If the timeout is set higher than the rate of traffic then this will drop all data., +     * @param timeout, +     *            The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +    public Observable<T> throttleWithTimeout(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationThrottleWithTimeout.throttleWithTimeout(this, timeout, unit, scheduler));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationThrottleWithTimeout;, +     * Throttles by dropping all values that are followed by newer values before the timeout value expires. The timer reset on each `onNext` call., +     * <p>, +     * NOTE: If the timeout is set higher than the rate of traffic then this will drop all data., +     * @param timeout, +     *            The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +     *            The {@link TimeUnit} for the timeout., +     * , +     * @return An {@link Observable} which filters out values which are too quickly followed up with newer values., +    public Observable<T> throttleWithTimeout(long timeout, TimeUnit unit) {, +        return create(OperationThrottleWithTimeout.throttleWithTimeout(this, timeout, unit));, +     * Throttles by dropping all values that are followed by newer values before the timeout value expires. The timer reset on each `onNext` call., +     * <p>, +     * NOTE: If the timeout is set higher than the rate of traffic then this will drop all data., +     * @param timeout, +     *            The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +    public Observable<T> throttleWithTimeout(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationThrottleWithTimeout.throttleWithTimeout(this, timeout, unit, scheduler));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationThrottleWithTimeout;, +     * Throttles by dropping all values that are followed by newer values before the timeout value expires. The timer reset on each `onNext` call., +     * <p>, +     * NOTE: If the timeout is set higher than the rate of traffic then this will drop all data., +     * @param timeout, +     *            The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +     *            The {@link TimeUnit} for the timeout., +     * , +     * @return An {@link Observable} which filters out values which are too quickly followed up with newer values., +    public Observable<T> throttleWithTimeout(long timeout, TimeUnit unit) {, +        return create(OperationThrottleWithTimeout.throttleWithTimeout(this, timeout, unit));, +     * Throttles by dropping all values that are followed by newer values before the timeout value expires. The timer reset on each `onNext` call., +     * <p>, +     * NOTE: If the timeout is set higher than the rate of traffic then this will drop all data., +     * @param timeout, +     *            The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +    public Observable<T> throttleWithTimeout(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationThrottleWithTimeout.throttleWithTimeout(this, timeout, unit, scheduler));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperationThrottleWithTimeout.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Scheduler;, +import rx.Subscription;, +import rx.concurrency.Schedulers;, +import rx.concurrency.TestScheduler;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Action0;, +import rx.util.functions.Func1;, +, +/**, + * This operation is used to filter out bursts of events. This is done by ignoring the events from an observable which are too]