[+++ b/rxjava-core/build.gradle, +++ b/rxjava-core/build.gradle, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +import static org.junit.Assert.*;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.concurrent.atomic.AtomicInteger;, +import org.junit.Test;, +import rx.util.CompositeException;, +            Collection<Exception> es = null;, +                    if (es == null) {, +                        es = new ArrayList<Exception>();, +                    }, +                    es.add(e);, +            if (es != null) {, +                throw new CompositeException("Failed to unsubscribe to 1 or more subscriptions.", es);, +            }, +        }, +    }, +, +    public static class UnitTest {, +, +        @Test, +        public void testSuccess() {, +            final AtomicInteger counter = new AtomicInteger();, +            CompositeSubscription s = new CompositeSubscription();, +            s.add(new Subscription() {, +, +                @Override, +                public void unsubscribe() {, +                    counter.incrementAndGet();, +                }, +            });, +, +            s.add(new Subscription() {, +, +                @Override, +                public void unsubscribe() {, +                    counter.incrementAndGet();, +                }, +            });, +, +            s.unsubscribe();, +, +            assertEquals(2, counter.get());, +        }, +, +        @Test, +        public void testException() {, +            final AtomicInteger counter = new AtomicInteger();, +            CompositeSubscription s = new CompositeSubscription();, +            s.add(new Subscription() {, +, +                @Override, +                public void unsubscribe() {, +                    throw new RuntimeException("failed on first one");, +                }, +            });, +, +            s.add(new Subscription() {, +, +                @Override, +                public void unsubscribe() {, +                    counter.incrementAndGet();, +                }, +            });, +, +            try {, +                s.unsubscribe();, +                fail("Expecting an exception");, +            } catch (CompositeException e) {, +                // we expect this, +                assertEquals(1, e.getExceptions().size());, +            }, +, +            // we should still have unsubscribed to the second one, +            assertEquals(1, counter.get());, +++ b/rxjava-core/build.gradle, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +import static org.junit.Assert.*;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.concurrent.atomic.AtomicInteger;, +import org.junit.Test;, +import rx.util.CompositeException;, +            Collection<Exception> es = null;, +                    if (es == null) {, +                        es = new ArrayList<Exception>();, +                    }, +                    es.add(e);, +            if (es != null) {, +                throw new CompositeException("Failed to unsubscribe to 1 or more subscriptions.", es);, +            }, +        }, +    }, +, +    public static class UnitTest {, +]