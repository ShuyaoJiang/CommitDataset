[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorSampleWithObservable;, +import rx.operators.OperatorSampleWithTime;, +import rx.operators.OperatorTimerOnce;, +import rx.operators.OperatorTimerPeriodically;, +        return create(new OperatorTimerPeriodically(interval, interval, unit, Schedulers.computation()));, +        return create(new OperatorTimerPeriodically(interval, interval, unit, scheduler));, +        return create(new OperatorTimerPeriodically(initialDelay, period, unit, scheduler));, +     * @return an Observable that emits one item after a specified delay, and then completes, +     * @return Observable that emits one item after a specified delay, on a specified Scheduler, and then, +     * completes, +        return create(new OperatorTimerOnce(delay, unit, scheduler));, +        return lift(new OperatorSampleWithTime<T>(period, unit, Schedulers.computation()));, +        return lift(new OperatorSampleWithTime<T>(period, unit, scheduler));, +        return lift(new OperatorSampleWithObservable<T, U>(sampler));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorSampleWithObservable;, +import rx.operators.OperatorSampleWithTime;, +import rx.operators.OperatorTimerOnce;, +import rx.operators.OperatorTimerPeriodically;, +        return create(new OperatorTimerPeriodically(interval, interval, unit, Schedulers.computation()));, +        return create(new OperatorTimerPeriodically(interval, interval, unit, scheduler));, +        return create(new OperatorTimerPeriodically(initialDelay, period, unit, scheduler));, +     * @return an Observable that emits one item after a specified delay, and then completes, +     * @return Observable that emits one item after a specified delay, on a specified Scheduler, and then, +     * completes, +        return create(new OperatorTimerOnce(delay, unit, scheduler));, +        return lift(new OperatorSampleWithTime<T>(period, unit, Schedulers.computation()));, +        return lift(new OperatorSampleWithTime<T>(period, unit, scheduler));, +        return lift(new OperatorSampleWithObservable<T, U>(sampler));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorSampleWithObservable;, +import rx.operators.OperatorSampleWithTime;, +import rx.operators.OperatorTimerOnce;, +import rx.operators.OperatorTimerPeriodically;, +        return create(new OperatorTimerPeriodically(interval, interval, unit, Schedulers.computation()));, +        return create(new OperatorTimerPeriodically(interval, interval, unit, scheduler));, +        return create(new OperatorTimerPeriodically(initialDelay, period, unit, scheduler));, +     * @return an Observable that emits one item after a specified delay, and then completes, +     * @return Observable that emits one item after a specified delay, on a specified Scheduler, and then, +     * completes, +        return create(new OperatorTimerOnce(delay, unit, scheduler));, +        return lift(new OperatorSampleWithTime<T>(period, unit, Schedulers.computation()));, +        return lift(new OperatorSampleWithTime<T>(period, unit, scheduler));, +        return lift(new OperatorSampleWithObservable<T, U>(sampler));, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorSampleWithObservable;, +import rx.operators.OperatorSampleWithTime;, +import rx.operators.OperatorTimerOnce;, +import rx.operators.OperatorTimerPeriodically;, +        return create(new OperatorTimerPeriodically(interval, interval, unit, Schedulers.computation()));, +        return create(new OperatorTimerPeriodically(interval, interval, unit, scheduler));, +        return create(new OperatorTimerPeriodically(initialDelay, period, unit, scheduler));, +     * @return an Observable that emits one item after a specified delay, and then completes, +     * @return Observable that emits one item after a specified delay, on a specified Scheduler, and then, +     * completes, +        return create(new OperatorTimerOnce(delay, unit, scheduler));, +        return lift(new OperatorSampleWithTime<T>(period, unit, Schedulers.computation()));, +        return lift(new OperatorSampleWithTime<T>(period, unit, scheduler));, +        return lift(new OperatorSampleWithObservable<T, U>(sampler));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorSampleWithObservable;, +import rx.operators.OperatorSampleWithTime;, +import rx.operators.OperatorTimerOnce;, +import rx.operators.OperatorTimerPeriodically;, +        return create(new OperatorTimerPeriodically(interval, interval, unit, Schedulers.computation()));, +        return create(new OperatorTimerPeriodically(interval, interval, unit, scheduler));, +        return create(new OperatorTimerPeriodically(initialDelay, period, unit, scheduler));, +     * @return an Observable that emits one item after a specified delay, and then completes, +     * @return Observable that emits one item after a specified delay, on a specified Scheduler, and then, +     * completes, +        return create(new OperatorTimerOnce(delay, unit, scheduler));, +        return lift(new OperatorSampleWithTime<T>(period, unit, Schedulers.computation()));, +        return lift(new OperatorSampleWithTime<T>(period, unit, scheduler));, +        return lift(new OperatorSampleWithObservable<T, U>(sampler));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorSampleWithObservable.java, +/**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations under, + * the License., + */]