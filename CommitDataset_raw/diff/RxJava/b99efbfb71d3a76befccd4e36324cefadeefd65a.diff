[+++ b/src/test/java/io/reactivex/processors/AsyncProcessorTest.java, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.subscribe(observer);, +        processor.onNext("one");, +        processor.onNext("two");, +        processor.onNext("three");, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.subscribe(observer);, +        processor.onNext("one");, +        processor.onNext("two");, +        processor.onNext("three");, +        processor.onComplete();, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.subscribe(observer);, +        processor.onNext(null);, +        processor.onComplete();, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.onNext("one");, +        processor.onNext("two");, +        processor.onNext("three");, +        processor.onComplete();, +        processor.subscribe(observer);, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.onNext("one");, +        processor.onNext("two");, +        processor.onNext("three");, +        processor.onError(re);, +        processor.subscribe(observer);, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.subscribe(observer);, +        processor.onNext("one");, +        processor.onNext("two");, +        processor.onNext("three");, +        processor.onError(testException);, +        processor.onNext("four");, +        processor.onError(new Throwable());, +        processor.onComplete();, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.subscribe(ts);, +        processor.onNext("one");, +        processor.onNext("two");, +        processor.onNext("three");, +        processor.onComplete();, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.subscribe(observer);, +        processor.onComplete();, +            final AsyncProcessor<String> processor = AsyncProcessor.create();, +            processor.subscribe(new Consumer<String>() {, +                    processor.onNext("value");, +                    processor.onComplete();, +            SubjectSubscriberThread t2 = new SubjectSubscriberThread(processor);, +            SubjectSubscriberThread t3 = new SubjectSubscriberThread(processor);, +            SubjectSubscriberThread t4 = new SubjectSubscriberThread(processor);, +            SubjectSubscriberThread t5 = new SubjectSubscriberThread(processor);, +        private final AsyncProcessor<String> processor;, +        SubjectSubscriberThread(AsyncProcessor<String> processor) {, +            this.processor = processor;, +                String v = processor.timeout(2000, TimeUnit.MILLISECONDS).blockingSingle();, +++ b/src/test/java/io/reactivex/processors/AsyncProcessorTest.java, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.subscribe(observer);, +        processor.onNext("one");, +        processor.onNext("two");, +        processor.onNext("three");, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.subscribe(observer);, +        processor.onNext("one");, +        processor.onNext("two");, +        processor.onNext("three");, +        processor.onComplete();, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.subscribe(observer);, +        processor.onNext(null);, +        processor.onComplete();, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.onNext("one");, +        processor.onNext("two");, +        processor.onNext("three");, +        processor.onComplete();, +        processor.subscribe(observer);, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.onNext("one");, +        processor.onNext("two");, +        processor.onNext("three");, +        processor.onError(re);, +        processor.subscribe(observer);, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.subscribe(observer);, +        processor.onNext("one");, +        processor.onNext("two");, +        processor.onNext("three");, +        processor.onError(testException);, +        processor.onNext("four");, +        processor.onError(new Throwable());, +        processor.onComplete();, +        AsyncProcessor<String> processor = AsyncProcessor.create();, +        processor.subscribe(ts);, +        processor.onNext("one");, +        processor.onNext("two");, +        processor.onNext("three");]