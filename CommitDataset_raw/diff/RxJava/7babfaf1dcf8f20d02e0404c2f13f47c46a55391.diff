[+++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +import rx.operators.OperationObserveFromAndroidComponent;, +        return OperationObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, activity);, +            return OperationObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (android.support.v4.app.Fragment) fragment);, +            return OperationObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (Fragment) fragment);, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +import rx.operators.OperationObserveFromAndroidComponent;, +        return OperationObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, activity);, +            return OperationObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (android.support.v4.app.Fragment) fragment);, +            return OperationObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (Fragment) fragment);, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +import rx.operators.OperationObserveFromAndroidComponent;, +        return OperationObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, activity);, +            return OperationObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (android.support.v4.app.Fragment) fragment);, +            return OperationObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (Fragment) fragment);, +++ /dev/null, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/operators/OperationObserveFromAndroidComponent.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.Scheduler.Inner;, +import rx.android.schedulers.AndroidSchedulers;, +import rx.functions.Action0;, +import rx.functions.Action1;, +import rx.subscriptions.Subscriptions;, +import android.app.Activity;, +import android.os.Looper;, +import android.util.Log;, +, +public class OperationObserveFromAndroidComponent {, +, +    public static <T> Observable<T> observeFromAndroidComponent(Observable<T> source, android.app.Fragment fragment) {, +        return Observable.create(new OnSubscribeFragment<T>(source, fragment));, +    }, +, +    public static <T> Observable<T> observeFromAndroidComponent(Observable<T> source, android.support.v4.app.Fragment fragment) {, +        return Observable.create(new OnSubscribeSupportFragment<T>(source, fragment));, +    }, +, +    public static <T> Observable<T> observeFromAndroidComponent(Observable<T> source, Activity activity) {, +        return Observable.create(new OnSubscribeBase<T, Activity>(source, activity));, +    }, +, +    private static class OnSubscribeBase<T, AndroidComponent> implements Observable.OnSubscribeFunc<T> {, +, +        private static final String LOG_TAG = "AndroidObserver";, +, +        private final Observable<T> source;, +        private AndroidComponent componentRef;, +        private Observer<? super T> observerRef;, +, +        private OnSubscribeBase(Observable<T> source, AndroidComponent component) {, +            this.source = source;, +            this.componentRef = component;, +        }, +, +        private void log(String message) {, +            if (Log.isLoggable(LOG_TAG, Log.DEBUG)) {, +                Log.d(LOG_TAG, "componentRef = " + componentRef);, +                Log.d(LOG_TAG, "observerRef = " + observerRef);, +                Log.d(LOG_TAG, message);, +            }, +        }, +, +        protected boolean isComponentValid(AndroidComponent component) {, +            return true;, +        }, +, +        @Override, +        public Subscription onSubscribe(Observer<? super T> observer) {, +            assertUiThread();, +            observerRef = observer;, +            final Subscription sourceSub = source.observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<T>() {, +                @Override, +                public void onCompleted() {, +                    if (componentRef != null && isComponentValid(componentRef)) {, +                        observerRef.onCompleted();, +                    } else {, +                        log("onComplete: target component released or detached; dropping message");, +                    }, +                }, +]