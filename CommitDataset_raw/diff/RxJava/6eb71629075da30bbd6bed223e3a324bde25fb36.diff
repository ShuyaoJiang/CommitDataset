[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Wraps each item emitted by a source Observable in a timestamped tuple, +   * with timestamps provided by the given Scheduler., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/timestamp.s.png">, +   * , +   * @param scheduler [[rx.lang.scala.Scheduler]] to use as a time source., +   * @return an Observable that emits timestamped items from the source, +   *         Observable with timestamps provided by the given Scheduler, +   */, +  def timestamp(scheduler: Scheduler): Observable[(Long, T)] = {, +    toScalaObservable[rx.util.Timestamped[_ <: T]](asJavaObservable.timestamp(scheduler)), +      .map((t: rx.util.Timestamped[_ <: T]) => (t.getTimestampMillis, t.getValue)), +  }, +, +  /**, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Wraps each item emitted by a source Observable in a timestamped tuple, +   * with timestamps provided by the given Scheduler., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/timestamp.s.png">, +   * , +   * @param scheduler [[rx.lang.scala.Scheduler]] to use as a time source., +   * @return an Observable that emits timestamped items from the source, +   *         Observable with timestamps provided by the given Scheduler, +   */, +  def timestamp(scheduler: Scheduler): Observable[(Long, T)] = {, +    toScalaObservable[rx.util.Timestamped[_ <: T]](asJavaObservable.timestamp(scheduler)), +      .map((t: rx.util.Timestamped[_ <: T]) => (t.getTimestampMillis, t.getValue)), +  }, +, +  /**, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +import scala.collection.mutable.ListBuffer, +  @Test def testTimestampWithScheduler() {, +    val c = 10, +    val s = TestScheduler(), +    val o1 = Observable interval (1.milliseconds, s) map (_ + 1), +    val o2 = o1 timestamp s, +    val l = ListBuffer[(Long, Long)](), +    o2.subscribe (, +      onNext = (l += _), +    ), +    s advanceTimeTo c.milliseconds, +    val (l1, l2) = l.toList.unzip, +    assertTrue(l1.size == c), +    assertEquals(l2, l1), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Wraps each item emitted by a source Observable in a timestamped tuple, +   * with timestamps provided by the given Scheduler., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/timestamp.s.png">, +   * , +   * @param scheduler [[rx.lang.scala.Scheduler]] to use as a time source., +   * @return an Observable that emits timestamped items from the source, +   *         Observable with timestamps provided by the given Scheduler, +   */, +  def timestamp(scheduler: Scheduler): Observable[(Long, T)] = {, +    toScalaObservable[rx.util.Timestamped[_ <: T]](asJavaObservable.timestamp(scheduler)), +      .map((t: rx.util.Timestamped[_ <: T]) => (t.getTimestampMillis, t.getValue)), +  }, +, +  /**, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +import scala.collection.mutable.ListBuffer, +  @Test def testTimestampWithScheduler() {, +    val c = 10, +    val s = TestScheduler(), +    val o1 = Observable interval (1.milliseconds, s) map (_ + 1), +    val o2 = o1 timestamp s, +    val l = ListBuffer[(Long, Long)](), +    o2.subscribe (, +      onNext = (l += _), +    ), +    s advanceTimeTo c.milliseconds, +    val (l1, l2) = l.toList.unzip, +    assertTrue(l1.size == c), +    assertEquals(l2, l1), +  }, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationGroupByUntil.java, +            synchronized (key) {]