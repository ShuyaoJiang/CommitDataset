[+++ b/src/main/java/io/reactivex/Scheduler.java, +import io.reactivex.annotations.NonNull;, +    @NonNull, +    public long now(@NonNull TimeUnit unit) {, +    @NonNull, +    public Disposable scheduleDirect(@NonNull Runnable run) {, +    @NonNull, +    public Disposable scheduleDirect(@NonNull Runnable run, long delay, @NonNull TimeUnit unit) {, +    @NonNull, +    public Disposable schedulePeriodicallyDirect(@NonNull Runnable run, long initialDelay, long period, @NonNull TimeUnit unit) {, +    @NonNull, +    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {, +        @NonNull, +        public Disposable schedule(@NonNull Runnable run) {, +        @NonNull, +        public abstract Disposable schedule(@NonNull Runnable run, long delay, @NonNull TimeUnit unit);, +        @NonNull, +        public Disposable schedulePeriodically(@NonNull Runnable run, final long initialDelay, final long period, @NonNull final TimeUnit unit) {, +        public long now(@NonNull TimeUnit unit) {, +            @NonNull, +            @NonNull, +            PeriodicTask(long firstStartInNanoseconds, @NonNull Runnable decoratedRun,, +                    long firstNowNanoseconds, @NonNull SequentialDisposable sd, long periodInNanoseconds) {, +        @NonNull, +        @NonNull, +        PeriodicDirectTask(@NonNull Runnable run, @NonNull Worker worker) {, +++ b/src/main/java/io/reactivex/Scheduler.java, +import io.reactivex.annotations.NonNull;, +    @NonNull, +    public long now(@NonNull TimeUnit unit) {, +    @NonNull, +    public Disposable scheduleDirect(@NonNull Runnable run) {, +    @NonNull, +    public Disposable scheduleDirect(@NonNull Runnable run, long delay, @NonNull TimeUnit unit) {, +    @NonNull, +    public Disposable schedulePeriodicallyDirect(@NonNull Runnable run, long initialDelay, long period, @NonNull TimeUnit unit) {, +    @NonNull, +    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {, +        @NonNull, +        public Disposable schedule(@NonNull Runnable run) {, +        @NonNull, +        public abstract Disposable schedule(@NonNull Runnable run, long delay, @NonNull TimeUnit unit);, +        @NonNull, +        public Disposable schedulePeriodically(@NonNull Runnable run, final long initialDelay, final long period, @NonNull final TimeUnit unit) {, +        public long now(@NonNull TimeUnit unit) {, +            @NonNull, +            @NonNull, +            PeriodicTask(long firstStartInNanoseconds, @NonNull Runnable decoratedRun,, +                    long firstNowNanoseconds, @NonNull SequentialDisposable sd, long periodInNanoseconds) {, +        @NonNull, +        @NonNull, +        PeriodicDirectTask(@NonNull Runnable run, @NonNull Worker worker) {, +++ b/src/main/java/io/reactivex/annotations/NonNull.java, +/**, + * Indicates that a field/parameter/variable/return type is never null., + */, +++ b/src/main/java/io/reactivex/Scheduler.java, +import io.reactivex.annotations.NonNull;, +    @NonNull, +    public long now(@NonNull TimeUnit unit) {, +    @NonNull, +    public Disposable scheduleDirect(@NonNull Runnable run) {, +    @NonNull, +    public Disposable scheduleDirect(@NonNull Runnable run, long delay, @NonNull TimeUnit unit) {, +    @NonNull, +    public Disposable schedulePeriodicallyDirect(@NonNull Runnable run, long initialDelay, long period, @NonNull TimeUnit unit) {, +    @NonNull, +    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {, +        @NonNull, +        public Disposable schedule(@NonNull Runnable run) {, +        @NonNull, +        public abstract Disposable schedule(@NonNull Runnable run, long delay, @NonNull TimeUnit unit);, +        @NonNull, +        public Disposable schedulePeriodically(@NonNull Runnable run, final long initialDelay, final long period, @NonNull final TimeUnit unit) {, +        public long now(@NonNull TimeUnit unit) {, +            @NonNull, +            @NonNull, +            PeriodicTask(long firstStartInNanoseconds, @NonNull Runnable decoratedRun,, +                    long firstNowNanoseconds, @NonNull SequentialDisposable sd, long periodInNanoseconds) {, +        @NonNull, +        @NonNull, +        PeriodicDirectTask(@NonNull Runnable run, @NonNull Worker worker) {, +++ b/src/main/java/io/reactivex/annotations/NonNull.java, +/**, + * Indicates that a field/parameter/variable/return type is never null., + */, +++ b/src/main/java/io/reactivex/annotations/Nullable.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +]