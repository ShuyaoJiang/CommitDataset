[+++ b/src/main/java/io/reactivex/Maybe.java, +     * Instructs a Maybe to pass control to another {@link MaybeSource} rather than invoking, +     *            the next {@code MaybeSource} that will take over if the source Maybe encounters, +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link MaybeSource} signals, a, +     * {@link TimeoutException} is signaled instead., +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling onSuccess, +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link MaybeSource} signals,, +     * the current {@code Maybe} is cancelled and the {@code fallback} {@code MaybeSource} subscribed to, +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling {@code onSuccess}, +     * or {@code onComplete}., +     * @param fallback the {@code MaybeSource} that is subscribed to if the current {@code Maybe} times out, +     * If the current {@code Maybe} source didn't signal an event before the {@code timeoutIndicator} {@link Publisher} signals, a, +     * {@link TimeoutException} is signaled instead., +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling {@code onSuccess}, +     * or {@code onComplete}., +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link Publisher} signals,, +     * the current {@code Maybe} is cancelled and the {@code fallback} {@code MaybeSource} subscribed to, +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling {@code onSuccess}, +     * or {@code onComplete}, +     * @param fallback the {@code MaybeSource} that is subscribed to if the current {@code Maybe} times out, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Instructs a Maybe to pass control to another {@link MaybeSource} rather than invoking, +     *            the next {@code MaybeSource} that will take over if the source Maybe encounters, +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link MaybeSource} signals, a, +     * {@link TimeoutException} is signaled instead., +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling onSuccess, +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link MaybeSource} signals,, +     * the current {@code Maybe} is cancelled and the {@code fallback} {@code MaybeSource} subscribed to, +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling {@code onSuccess}, +     * or {@code onComplete}., +     * @param fallback the {@code MaybeSource} that is subscribed to if the current {@code Maybe} times out, +     * If the current {@code Maybe} source didn't signal an event before the {@code timeoutIndicator} {@link Publisher} signals, a, +     * {@link TimeoutException} is signaled instead., +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling {@code onSuccess}, +     * or {@code onComplete}., +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link Publisher} signals,, +     * the current {@code Maybe} is cancelled and the {@code fallback} {@code MaybeSource} subscribed to, +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling {@code onSuccess}, +     * or {@code onComplete}, +     * @param fallback the {@code MaybeSource} that is subscribed to if the current {@code Maybe} times out, +++ b/src/main/java/io/reactivex/Single.java, +     * Calls a {@link Callable} for each individual {@link SingleObserver} to return the actual {@link SingleSource} to, +     * @param singleSupplier the {@code Callable} that is called for each individual {@code SingleObserver} and, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Instructs a Maybe to pass control to another {@link MaybeSource} rather than invoking, +     *            the next {@code MaybeSource} that will take over if the source Maybe encounters, +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link MaybeSource} signals, a, +     * {@link TimeoutException} is signaled instead., +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling onSuccess, +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link MaybeSource} signals,, +     * the current {@code Maybe} is cancelled and the {@code fallback} {@code MaybeSource} subscribed to, +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling {@code onSuccess}, +     * or {@code onComplete}., +     * @param fallback the {@code MaybeSource} that is subscribed to if the current {@code Maybe} times out, +     * If the current {@code Maybe} source didn't signal an event before the {@code timeoutIndicator} {@link Publisher} signals, a, +     * {@link TimeoutException} is signaled instead., +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling {@code onSuccess}, +     * or {@code onComplete}., +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link Publisher} signals,, +     * the current {@code Maybe} is cancelled and the {@code fallback} {@code MaybeSource} subscribed to, +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling {@code onSuccess}, +     * or {@code onComplete}, +     * @param fallback the {@code MaybeSource} that is subscribed to if the current {@code Maybe} times out, +++ b/src/main/java/io/reactivex/Single.java, +     * Calls a {@link Callable} for each individual {@link SingleObserver} to return the actual {@link SingleSource} to, +     * @param singleSupplier the {@code Callable} that is called for each individual {@code SingleObserver} and, +++ b/src/test/java/io/reactivex/JavadocWording.java, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Instructs a Maybe to pass control to another {@link MaybeSource} rather than invoking, +     *            the next {@code MaybeSource} that will take over if the source Maybe encounters, +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link MaybeSource} signals, a, +     * {@link TimeoutException} is signaled instead., +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling onSuccess, +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link MaybeSource} signals,, +     * the current {@code Maybe} is cancelled and the {@code fallback} {@code MaybeSource} subscribed to, +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling {@code onSuccess}, +     * or {@code onComplete}., +     * @param fallback the {@code MaybeSource} that is subscribed to if the current {@code Maybe} times out, +     * If the current {@code Maybe} source didn't signal an event before the {@code timeoutIndicator} {@link Publisher} signals, a, +     * {@link TimeoutException} is signaled instead., +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling {@code onSuccess}, +     * or {@code onComplete}., +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link Publisher} signals,, +     * the current {@code Maybe} is cancelled and the {@code fallback} {@code MaybeSource} subscribed to, +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling {@code onSuccess}, +     * or {@code onComplete}, +     * @param fallback the {@code MaybeSource} that is subscribed to if the current {@code Maybe} times out, +++ b/src/main/java/io/reactivex/Single.java, +     * Calls a {@link Callable} for each individual {@link SingleObserver} to return the actual {@link SingleSource} to, +     * @param singleSupplier the {@code Callable} that is called for each individual {@code SingleObserver} and, +++ b/src/test/java/io/reactivex/JavadocWording.java, +++ b/src/test/java/io/reactivex/internal/operators/mixed/ObservableConcatMapMaybeTest.java, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Instructs a Maybe to pass control to another {@link MaybeSource} rather than invoking, +     *            the next {@code MaybeSource} that will take over if the source Maybe encounters, +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link MaybeSource} signals, a, +     * {@link TimeoutException} is signaled instead., +     * @param timeoutIndicator the {@code MaybeSource} that indicates the timeout by signaling onSuccess, +     * If the current {@code Maybe} didn't signal an event before the {@code timeoutIndicator} {@link MaybeSource} signals,, +     * the current {@code Maybe} is cancelled and the {@code fallback} {@code MaybeSource} subscribed to]