[+++ b/rxjava-core/src/main/java/rx/Observable.java, +        return from(iterable, Schedulers.currentThread());, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return from(iterable, Schedulers.currentThread());, +++ b/rxjava-core/src/main/java/rx/operators/OperationToObservableIterable.java, +        return toObservableIterable(list, Schedulers.currentThread());, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return from(iterable, Schedulers.currentThread());, +++ b/rxjava-core/src/main/java/rx/operators/OperationToObservableIterable.java, +        return toObservableIterable(list, Schedulers.currentThread());, +++ b/rxjava-core/src/main/java/rx/schedulers/Schedulers.java, +     * Do not perform IO-bound work on this scheduler. Use {@link #io()} instead., +     * @Deprecated Use {@link #computation()}, +    @Deprecated, +     * {@link Scheduler} intended for computational work., +     * <p>, +     * This can be used for event-loops, processing callbacks and other computational work., +     * <p>, +     * Do not perform IO-bound work on this scheduler. Use {@link #io()} instead., +     * , +     * @return {@link Scheduler} for computation-bound work., +     */, +    public static Scheduler computation() {, +        return executor(COMPUTATION_EXECUTOR);, +    }, +, +    /**, +     * Do not perform computational work on this scheduler. Use {@link #computation()} instead., +     * , +     * @return {@link ExecutorScheduler} for IO-bound work., +     * @deprecated Use {@link #io()} instead., +     */, +    @Deprecated, +    public static Scheduler threadPoolForIO() {, +        return executor(IO_EXECUTOR);, +    }, +    , +    /**, +     * {@link Scheduler} intended for IO-bound work., +     * <p>, +     * The implementation is backed by an {@link Executor} thread-pool that will grow as needed., +     * <p>, +     * This can be used for asynchronously performing blocking IO., +     * <p>, +     * Do not perform computational work on this scheduler. Use {@link #computation()} instead., +    public static Scheduler io() {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return from(iterable, Schedulers.currentThread());, +++ b/rxjava-core/src/main/java/rx/operators/OperationToObservableIterable.java, +        return toObservableIterable(list, Schedulers.currentThread());, +++ b/rxjava-core/src/main/java/rx/schedulers/Schedulers.java, +     * Do not perform IO-bound work on this scheduler. Use {@link #io()} instead., +     * @Deprecated Use {@link #computation()}, +    @Deprecated, +     * {@link Scheduler} intended for computational work., +     * <p>, +     * This can be used for event-loops, processing callbacks and other computational work., +     * <p>, +     * Do not perform IO-bound work on this scheduler. Use {@link #io()} instead., +     * , +     * @return {@link Scheduler} for computation-bound work., +     */, +    public static Scheduler computation() {, +        return executor(COMPUTATION_EXECUTOR);, +    }, +, +    /**, +     * Do not perform computational work on this scheduler. Use {@link #computation()} instead., +     * , +     * @return {@link ExecutorScheduler} for IO-bound work., +     * @deprecated Use {@link #io()} instead., +     */, +    @Deprecated, +    public static Scheduler threadPoolForIO() {, +        return executor(IO_EXECUTOR);, +    }, +    , +    /**, +     * {@link Scheduler} intended for IO-bound work., +     * <p>, +     * The implementation is backed by an {@link Executor} thread-pool that will grow as needed., +     * <p>, +     * This can be used for asynchronously performing blocking IO., +     * <p>, +     * Do not perform computational work on this scheduler. Use {@link #computation()} instead., +    public static Scheduler io() {, +++ /dev/null]