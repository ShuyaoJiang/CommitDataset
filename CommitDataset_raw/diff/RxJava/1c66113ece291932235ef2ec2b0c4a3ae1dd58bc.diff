[+++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ /dev/null, +++ b/rxjava-core/src/test/java/rx/SchedulersTest.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx;, +, +import org.junit.Test;, +import rx.Observable.OnSubscribeFunc;, +import rx.concurrency.Schedulers;, +import rx.concurrency.TestScheduler;, +import rx.subscriptions.BooleanSubscription;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Action0;, +import rx.util.functions.Action1;, +import rx.util.functions.Func1;, +import rx.util.functions.Func2;, +, +import java.util.Date;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReference;, +, +import static org.junit.Assert.*;, +, +public class SchedulersTest {, +, +    @Test, +    public void testComputationThreadPool1() {, +, +        Observable<Integer> o1 = Observable.<Integer> from(1, 2, 3, 4, 5);, +        Observable<Integer> o2 = Observable.<Integer> from(6, 7, 8, 9, 10);, +        Observable<String> o = Observable.<Integer> merge(o1, o2).map(new Func1<Integer, String>() {, +, +            @Override, +            public String call(Integer t) {, +                assertTrue(Thread.currentThread().getName().startsWith("RxComputationThreadPool"));, +                return "Value_" + t + "_Thread_" + Thread.currentThread().getName();, +            }, +        });, +, +        o.subscribeOn(Schedulers.threadPoolForComputation()).toBlockingObservable().forEach(new Action1<String>() {, +, +            @Override, +            public void call(String t) {, +                System.out.println("t: " + t);, +            }, +        });, +    }, +, +    @Test, +    public void testIOThreadPool1() {, +, +        Observable<Integer> o1 = Observable.<Integer> from(1, 2, 3, 4, 5);, +        Observable<Integer> o2 = Observable.<Integer> from(6, 7, 8, 9, 10);, +        Observable<String> o = Observable.<Integer> merge(o1, o2).map(new Func1<Integer, String>() {, +, +            @Override, +            public String call(Integer t) {, +                assertTrue(Thread.currentThread().getName().startsWith("RxIOThreadPool"));, +                return "Value_" + t + "_Thread_" + Thread.currentThread().getName();, +            }, +        });, +, +        o.subscribeOn(Schedulers.threadPoolForIO()).toBlockingObservable().forEach(new Action1<String>() {, +, +            @Override, +            public void call(String t) {, +                System.out.println("t: " + t);, +            }, +        });, +    }, +, +    @Test, +    public void testMergeWithoutScheduler1() {, +, +        final String currentThreadName = Thread.currentThread().getName();, +, +        Observable<Integer> o1 = Observable.<Integer> from(1, 2, 3, 4, 5);, +        Observable<Integer> o2 = Observable.<Integer> from(6, 7, 8, 9, 10);, +        Observable<String> o = Observable.<Integer> merge(o1, o2).map(new Func1<Integer, String>() {, +]