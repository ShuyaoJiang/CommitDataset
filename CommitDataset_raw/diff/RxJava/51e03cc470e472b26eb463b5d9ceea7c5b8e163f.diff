[+++ b/src/main/java/rx/internal/operators/OperatorWindowWithObservable.java, +                        once = false;, +++ b/src/main/java/rx/internal/operators/OperatorWindowWithObservable.java, +                        once = false;, +++ b/src/test/java/rx/exceptions/ExceptionsTest.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +    @Test, +    public void testStackOverflowWouldOccur() {, +        final int MAX_STACK_DEPTH = 1000;, +        final AtomicInteger depth = new AtomicInteger();, +            public void onNext(Integer n) {, +                b.onNext(n + 1);, +            public void onNext(Integer n) {, +                if (depth.get() < MAX_STACK_DEPTH) { , +                    depth.set(Thread.currentThread().getStackTrace().length);, +                    a.onNext(n + 1);, +                }, +        assertTrue(depth.get() > MAX_STACK_DEPTH);, +    }, +    , +    @Test(expected = StackOverflowError.class), +    public void testStackOverflowErrorIsThrown() {, +        Observable.just(1).subscribe(new Observer<Integer>() {, +, +            @Override, +            public void onCompleted() {, +, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                e.printStackTrace();, +            }, +, +            @Override, +            public void onNext(Integer t) {, +                throw new StackOverflowError();, +            }, +, +        });, +++ b/src/main/java/rx/internal/operators/OperatorWindowWithObservable.java, +                        once = false;, +++ b/src/test/java/rx/exceptions/ExceptionsTest.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +    @Test, +    public void testStackOverflowWouldOccur() {, +        final int MAX_STACK_DEPTH = 1000;, +        final AtomicInteger depth = new AtomicInteger();, +            public void onNext(Integer n) {, +                b.onNext(n + 1);, +            public void onNext(Integer n) {, +                if (depth.get() < MAX_STACK_DEPTH) { , +                    depth.set(Thread.currentThread().getStackTrace().length);, +                    a.onNext(n + 1);, +                }, +        assertTrue(depth.get() > MAX_STACK_DEPTH);, +    }, +    , +    @Test(expected = StackOverflowError.class), +    public void testStackOverflowErrorIsThrown() {, +        Observable.just(1).subscribe(new Observer<Integer>() {, +, +            @Override, +            public void onCompleted() {, +, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                e.printStackTrace();, +            }, +, +            @Override, +            public void onNext(Integer t) {, +                throw new StackOverflowError();, +            }, +, +        });, +++ b/src/test/java/rx/internal/operators/OperatorWindowWithObservableTest.java, +import java.util.Arrays;, +import rx.functions.Func0;, +import rx.observers.TestSubscriber;, +, +    @Test, +    public void testWindowNoDuplication() {, +        final PublishSubject<Integer> source = PublishSubject.create();, +        final TestSubscriber<Integer> tsw = new TestSubscriber<Integer>() {, +            boolean once;, +            @Override, +            public void onNext(Integer t) {, +                if (!once) {, +                    once = true;, +                    source.onNext(2);, +                }, +                super.onNext(t);, +            }, +        };, +        TestSubscriber<Observable<Integer>> ts = new TestSubscriber<Observable<Integer>>() {]