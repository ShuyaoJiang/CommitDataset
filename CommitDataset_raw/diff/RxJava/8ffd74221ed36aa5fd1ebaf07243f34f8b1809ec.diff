[+++ b/CHANGES.md, +++ b/CHANGES.md, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/CHANGES.md, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservable.java, +++ b/CHANGES.md, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +            Thread thread = Thread.currentThread();, +            thread.getUncaughtExceptionHandler().uncaughtException(thread, ie);, +++ b/CHANGES.md, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +            Thread thread = Thread.currentThread();, +            thread.getUncaughtExceptionHandler().uncaughtException(thread, ie);, +++ b/src/main/java/rx/schedulers/Schedulers.java, +     * <p>, +     * Unhandled errors will be delivered to the scheduler Thread's {@link java.lang.Thread.UncaughtExceptionHandler}., +     * <p>, +     * Unhandled errors will be delivered to the scheduler Thread's {@link java.lang.Thread.UncaughtExceptionHandler}., +     * <p>, +     * Unhandled errors will be delivered to the scheduler Thread's {@link java.lang.Thread.UncaughtExceptionHandler}., +++ b/CHANGES.md, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +            Thread thread = Thread.currentThread();, +            thread.getUncaughtExceptionHandler().uncaughtException(thread, ie);, +++ b/src/main/java/rx/schedulers/Schedulers.java, +     * <p>, +     * Unhandled errors will be delivered to the scheduler Thread's {@link java.lang.Thread.UncaughtExceptionHandler}., +     * <p>, +     * Unhandled errors will be delivered to the scheduler Thread's {@link java.lang.Thread.UncaughtExceptionHandler}., +     * <p>, +     * Unhandled errors will be delivered to the scheduler Thread's {@link java.lang.Thread.UncaughtExceptionHandler}., +++ b/src/test/java/rx/RefCountTests.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx;, +, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.verify;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;, +import org.mockito.MockitoAnnotations;, +, +import rx.Observable.OnSubscribe;, +import rx.functions.Action0;, +import rx.functions.Action1;, +import rx.functions.Func2;, +import rx.observers.Subscribers;, +import rx.observers.TestSubscriber;, +import rx.schedulers.TestScheduler;, +import rx.subjects.ReplaySubject;, +import rx.subscriptions.Subscriptions;, +, +public class RefCountTests {, +, +    @Before, +    public void setUp() {, +        MockitoAnnotations.initMocks(this);, +    }, +, +    @Test, +    public void onlyFirstShouldSubscribeAndLastUnsubscribe() {, +        final AtomicInteger subscriptionCount = new AtomicInteger();, +        final AtomicInteger unsubscriptionCount = new AtomicInteger();, +        Observable<Integer> observable = Observable.create(new OnSubscribe<Integer>() {, +            @Override, +            public void call(Subscriber<? super Integer> observer) {, +                subscriptionCount.incrementAndGet();, +                observer.add(Subscriptions.create(new Action0() {]