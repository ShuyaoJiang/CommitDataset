[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +import rx.functions.Action0, +  def inner: Inner = this.asJavaScheduler.inner(), +  def schedule(action: Unit => Unit, delayTime: Duration): Subscription =, +      new Action0 {, +        override def call(): Unit = action(), +  def schedule(action: Unit => Unit): Subscription = this.asJavaInner.schedule(, +    new Action0 {, +      override def call(): Unit = action(), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +import rx.functions.Action0, +  def inner: Inner = this.asJavaScheduler.inner(), +  def schedule(action: Unit => Unit, delayTime: Duration): Subscription =, +      new Action0 {, +        override def call(): Unit = action(), +  def schedule(action: Unit => Unit): Subscription = this.asJavaInner.schedule(, +    new Action0 {, +      override def call(): Unit = action(), +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +import rx.functions.Action0;, +import rx.subscriptions.Subscriptions;, +    public Inner inner() {, +        return new InnerHandlerThreadScheduler(handler);, +        public Subscription schedule(final Action0 action, long delayTime, TimeUnit unit) {, +            final Runnable runnable = new Runnable() {, +                    if (isUnsubscribed()) {, +                    action.call();, +            };, +            handler.postDelayed(runnable, unit.toMillis(delayTime));, +            return Subscriptions.create(new Action0() {, +, +                @Override, +                public void call() {, +                    handler.removeCallbacks(runnable);, +                    , +                }, +                , +            });, +        public Subscription schedule(final Action0 action) {, +            return schedule(action, 0, TimeUnit.MILLISECONDS);, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +import rx.functions.Action0, +  def inner: Inner = this.asJavaScheduler.inner(), +  def schedule(action: Unit => Unit, delayTime: Duration): Subscription =, +      new Action0 {, +        override def call(): Unit = action(), +  def schedule(action: Unit => Unit): Subscription = this.asJavaInner.schedule(, +    new Action0 {, +      override def call(): Unit = action(), +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +import rx.functions.Action0;, +import rx.subscriptions.Subscriptions;, +    public Inner inner() {, +        return new InnerHandlerThreadScheduler(handler);, +        public Subscription schedule(final Action0 action, long delayTime, TimeUnit unit) {, +            final Runnable runnable = new Runnable() {, +                    if (isUnsubscribed()) {, +                    action.call();, +            };, +            handler.postDelayed(runnable, unit.toMillis(delayTime));, +            return Subscriptions.create(new Action0() {, +, +                @Override, +                public void call() {, +                    handler.removeCallbacks(runnable);, +                    , +                }, +                , +            });, +        public Subscription schedule(final Action0 action) {, +            return schedule(action, 0, TimeUnit.MILLISECONDS);, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/subscriptions/AndroidSubscriptions.java, +                    final Inner inner = AndroidSchedulers.mainThread().inner();, +                    inner.schedule(new Action0() {, +                        public void call() {, +                            inner.unsubscribe();, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +import rx.functions.Action0, +  def inner: Inner = this.asJavaScheduler.inner(), +  def schedule(action: Unit => Unit, delayTime: Duration): Subscription =, +      new Action0 {, +        override def call(): Unit = action(), +  def schedule(action: Unit => Unit): Subscription = this.asJavaInner.schedule(, +    new Action0 {, +      override def call(): Unit = action(), +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +import rx.functions.Action0;, +import rx.subscriptions.Subscriptions;, +    public Inner inner() {, +        return new InnerHandlerThreadScheduler(handler);, +        public Subscription schedule(final Action0 action, long delayTime, TimeUnit unit) {, +            final Runnable runnable = new Runnable() {, +                    if (isUnsubscribed()) {, +                    action.call();, +            };, +            handler.postDelayed(runnable, unit.toMillis(delayTime));, +            return Subscriptions.create(new Action0() {, +, +                @Override, +                public void call() {]