[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import scala.collection.generic.CanBuildFrom, +import scala.annotation.unchecked.uncheckedVariance, +import scala.collection.{Iterable, Traversable, immutable}, +import scala.collection.mutable.ArrayBuffer, +import scala.reflect.ClassTag, +, +  /**, +   * Returns an Observable that emits a single item, a collection composed of all the items emitted by, +   * the source Observable., +   *, +   * Be careful not to use this operator on Observables that emit infinite or very large numbers, +   * of items, as you do not have the option to unsubscribe., +   *, +   * @tparam Col the collection type to build., +   * @return an Observable that emits a single item, a collection containing all of the items emitted by, +   *         the source Observable., +   */, +  def to[Col[_]](implicit cbf: CanBuildFrom[Nothing, T, Col[T @uncheckedVariance]]): Observable[Col[T @uncheckedVariance]] = {, +    lift {, +      (subscriber: Subscriber[Col[T]]) => {, +        val b = cbf(), +        Subscriber[T](, +          subscriber,, +          (t: T) => {, +            b += t: Unit, +          },, +          e => subscriber.onError(e),, +          () => {, +            subscriber.onNext(b.result), +            subscriber.onCompleted(), +          }, +        ), +      }, +    }, +  }, +, +  /**, +   * Returns an Observable that emits a single item, a `Traversable` composed of all the items emitted by, +   * the source Observable., +   *, +   * Be careful not to use this operator on Observables that emit infinite or very large numbers, +   * of items, as you do not have the option to unsubscribe., +   *, +   * @return an Observable that emits a single item, a `Traversable` containing all of the items emitted by, +   *         the source Observable., +   */, +  def toTraversable: Observable[Traversable[T]] = to[Traversable], +, +  /**, +   * Returns an Observable that emits a single item, a `List` composed of all the items emitted by, +   * the source Observable., +   *, +   * Be careful not to use this operator on Observables that emit infinite or very large numbers, +   * of items, as you do not have the option to unsubscribe., +   *, +   * @return an Observable that emits a single item, a `List` containing all of the items emitted by, +   *         the source Observable., +   */, +  def toList: Observable[List[T]] = to[List], +, +  /**, +   * Returns an Observable that emits a single item, an `Iterable` composed of all the items emitted by, +   * the source Observable., +   *, +   * Be careful not to use this operator on Observables that emit infinite or very large numbers, +   * of items, as you do not have the option to unsubscribe., +   *, +   * @return an Observable that emits a single item, an `Iterable` containing all of the items emitted by, +   *         the source Observable., +   */, +  def toIterable: Observable[Iterable[T]] = to[Iterable], +, +  /**, +   * Returns an Observable that emits a single item, an `Iterator` composed of all the items emitted by, +   * the source Observable., +   *, +   * Be careful not to use this operator on Observables that emit infinite or very large numbers, +   * of items, as you do not have the option to unsubscribe., +   *, +   * @return an Observable that emits a single item, an `Iterator` containing all of the items emitted by, +   *         the source Observable., +   */, +  def toIterator: Observable[Iterator[T]] = toIterable.map(_.iterator), +, +  /**, +   * Returns an Observable that emits a single item, a `Stream` composed of all the items emitted by, +   * the source Observable., +   *, +   * Be careful not to use this operator on Observables that emit infinite or very large numbers, +   * of items, as you do not have the option to unsubscribe., +   *, +   * @return an Observable that emits a single item, a `Stream` containing all of the items emitted by, +   *         the source Observable., +   */, +  def toStream: Observable[Stream[T]] = to[Stream], +, +  /**, +   * Returns an Observable that emits a single item, an `IndexedSeq` composed of all the items emitted by, +   * the source Observable.]