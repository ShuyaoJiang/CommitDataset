[+++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/operators/ChunkedOperation.java, +    protected static class TimeAndSizeBasedChunks<T, C> extends Chunks<T, C> implements Subscription {, +        @Override, +        public void unsubscribe() {, +            for (Subscription s : subscriptions.values()) {, +                s.unsubscribe();, +            }, +        }, +    protected static class TimeBasedChunks<T, C> extends OverlappingChunks<T, C> implements Subscription {, +, +        @Override, +        public void unsubscribe() {, +            for (Subscription s : subscriptions.values()) {, +                s.unsubscribe();, +            }, +        }, +        , +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/operators/ChunkedOperation.java, +    protected static class TimeAndSizeBasedChunks<T, C> extends Chunks<T, C> implements Subscription {, +        @Override, +        public void unsubscribe() {, +            for (Subscription s : subscriptions.values()) {, +                s.unsubscribe();, +            }, +        }, +    protected static class TimeBasedChunks<T, C> extends OverlappingChunks<T, C> implements Subscription {, +, +        @Override, +        public void unsubscribe() {, +            for (Subscription s : subscriptions.values()) {, +                s.unsubscribe();, +            }, +        }, +        , +++ b/rxjava-core/src/main/java/rx/operators/OperationBuffer.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import rx.subscriptions.CompositeSubscription;, +                return new CompositeSubscription(, +                        new ChunkToSubscription(creator),, +                        source.subscribe(new ChunkObserver<T, List<T>>(buffers, observer, creator)), +                );, +                return new CompositeSubscription(, +                        new ChunkToSubscription(creator),, +                        source.subscribe(new ChunkObserver<T, List<T>>(buffers, observer, creator)), +                );, +                return new CompositeSubscription(, +                        new ChunkToSubscription(creator),, +                        source.subscribe(new ChunkObserver<T, List<T>>(chunks, observer, creator)), +                );, +                return new CompositeSubscription(, +                        new ChunkToSubscription(creator),, +                        source.subscribe(new ChunkObserver<T, List<T>>(buffers, observer, creator)), +                );, +                TimeAndSizeBasedChunks<T, List<T>> chunks = new TimeAndSizeBasedChunks<T, List<T>>(observer, OperationBuffer.<T> bufferMaker(), count, timespan, unit, scheduler);, +                return new CompositeSubscription(, +                        chunks,, +                        new ChunkToSubscription(creator),, +                        source.subscribe(new ChunkObserver<T, List<T>>(chunks, observer, creator)), +                );, +                TimeBasedChunks<T, List<T>> buffers = new TimeBasedChunks<T, List<T>>(observer, OperationBuffer.<T> bufferMaker(), timespan, unit, scheduler);, +                return new CompositeSubscription(, +                        buffers,, +                        new ChunkToSubscription(creator),, +                        source.subscribe(new ChunkObserver<T, List<T>>(buffers, observer, creator)), +                );, +    , +    /**, +     * Converts a chunk creator into a subscription which stops the chunk., +     */, +    private static class ChunkToSubscription implements Subscription {, +        private ChunkCreator cc;, +        private final AtomicBoolean done;, +        public ChunkToSubscription(ChunkCreator cc) {, +            this.cc = cc;, +            this.done = new AtomicBoolean();, +        }, +        @Override, +        public void unsubscribe() {, +            if (done.compareAndSet(false, true)) {, +                ChunkCreator cc0 = cc;, +                cc = null;, +                cc0.stop();, +            }, +        }, +    }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/operators/ChunkedOperation.java, +    protected static class TimeAndSizeBasedChunks<T, C> extends Chunks<T, C> implements Subscription {, +        @Override, +        public void unsubscribe() {, +            for (Subscription s : subscriptions.values()) {, +                s.unsubscribe();, +            }, +        }, +    protected static class TimeBasedChunks<T, C> extends OverlappingChunks<T, C> implements Subscription {, +, +        @Override]