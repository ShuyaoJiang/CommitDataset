[+++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create<String>{ observer ->, +    observer!!.onNext("Hello"), +    observer.onCompleted(), +}!!.subscribe { result ->, +}.asObservable().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create<String>{ observer ->, +    observer!!.onNext("Hello"), +    observer.onCompleted(), +}!!.subscribe { result ->, +}.asObservable().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +import rx.Subscription, +public fun<T> Function1<Observer<in T>, Subscription>.asObservable(): Observable<T> {, +    return Observable.create { this(it!!) }!!, +    return Observable.from(this.component1(), this.component2())!!, +    return Observable.from(this.component1(), this.component2(), this.component3())!!, +++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create<String>{ observer ->, +    observer!!.onNext("Hello"), +    observer.onCompleted(), +}!!.subscribe { result ->, +}.asObservable().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +import rx.Subscription, +public fun<T> Function1<Observer<in T>, Subscription>.asObservable(): Observable<T> {, +    return Observable.create { this(it!!) }!!, +    return Observable.from(this.component1(), this.component2())!!, +    return Observable.from(this.component1(), this.component2(), this.component3())!!, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +public class BasicKotlinTests {, +    [Mock] var a: ScriptAssertion? = null, +    [Mock] var w: Observable<Int>? = null, +    [Before], +    public fun before() {, +        MockitoAnnotations.initMocks(this), +    }, +, +    fun received<T>(): (T?) -> Unit {, +        return {(result: T?) -> a!!.received(result) }, +    }, +        Observable.create<String>{, +        }!!.subscribe { result ->, +        Observable.from(1, 2, 3)!!.filter { it!! >= 2 }!!.subscribe(received()), +        assertEquals("three", Observable.from("one", "two", "three")!!.toBlockingObservable()!!.last()), +        assertEquals("two", Observable.from("one", "two", "three")!!.toBlockingObservable()!!.last { x -> x!!.length == 3 }), +        Observable.from(1, 2, 3)!!.map { v -> "hello_$v" }!!.subscribe((received())), +        Observable.from(1, 2, 3)!!.materialize()!!.subscribe((received())), +                Observable.from(1, 2, 3),, +                Observable.from(4, 5), +                Observable.from(1, 2, 3),, +                Observable.from(4, 5), +        assertEquals(2, Observable.from(list, 6)!!.count()!!.toBlockingObservable()!!.single()), +        Observable.from(1, 2, 3)!!.skip(1)!!.take(1)!!.subscribe(received()), +        Observable.from(1, 2, 3)!!.skip(2)!!.subscribe(received()), +        Observable.from(1, 2, 3)!!.take(2)!!.subscribe(received()), +        Observable.from(1, 2, 3)!!.takeWhile { x -> x!! < 3 }!!.subscribe(received()), +        Observable.from(1, 2, 3)!!.takeWhileWithIndex { x, i -> i!! < 2 }!!.subscribe(received()), +        assertEquals("two", Observable.from("one", "two")!!.toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length == 3 }), +        assertEquals("default", Observable.from("one", "two")!!.toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length > 3 }), +        Observable.from("one", "two")!!.toBlockingObservable()!!.single { x -> x!!.length == 3 }, +        Observable.defer { Observable.from(1, 2) }!!.subscribe(received()), +        Observable.from(1, 2, 3)!!.all { x -> x!! > 0 }!!.subscribe(received()), +        val o1 = Observable.from(1, 2, 3)!!, +        val o2 = Observable.from(4, 5, 6)!!, +        val o3 = Observable.from(7, 8, 9)!!, +        val o1 = Observable.from(1, 2, 3)!!, +        val o2 = Observable.from(4, 5, 6)!!, +        val o3 = Observable.from(7, 8, 9)!!, +        Observable.from("one", "two", "three", "four", "five", "six")!!, +                .mapMany { groupObervable ->, +        }!!, +                .toBlockingObservable()!!.forEach { s ->, +    public trait ScriptAssertion{, +        fun error(e: Throwable?), +        fun received(e: Any?), +    }, +                return Observable.from(1, 3, 2, 5, 4)!!, +        override fun onSubscribe(t1: Observer<in Int>?): Subscription? {, +                t1!!.onNext(1), +                t1.onNext(2), +                t1.onNext(3), +                t1.onCompleted(), +        override fun onSubscribe(t1: Observer<in String>?): Subscription? {, +            t1!!.onNext("hello_$count"), +            t1.onCompleted(), +++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create<String>{ observer ->, +    observer!!.onNext("Hello"), +    observer.onCompleted(), +}!!.subscribe { result ->, +}.asObservable().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +import rx.Subscription, +public fun<T> Function1<Observer<in T>, Subscription>.asObservable(): Observable<T> {, +    return Observable.create { this(it!!) }!!, +    return Observable.from(this.component1(), this.component2())!!, +    return Observable.from(this.component1(), this.component2(), this.component3())!!, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt]