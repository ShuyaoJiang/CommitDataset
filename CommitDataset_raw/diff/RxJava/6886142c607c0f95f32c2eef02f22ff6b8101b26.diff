[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.SafeObservableSubscription;, +import rx.operators.SafeObserver;, +                SafeObservableSubscription subscription = new SafeObservableSubscription();, +                subscription.wrap(onSubscribeFunction.call(new SafeObserver<T>(subscription, observer)));, +        SafeObservableSubscription subscription = new SafeObservableSubscription();, +        return subscription.wrap(subscribe(new SafeObserver<T>(subscription, o)));, +        if (o instanceof SafeObserver), +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.SafeObservableSubscription;, +import rx.operators.SafeObserver;, +                SafeObservableSubscription subscription = new SafeObservableSubscription();, +                subscription.wrap(onSubscribeFunction.call(new SafeObserver<T>(subscription, observer)));, +        SafeObservableSubscription subscription = new SafeObservableSubscription();, +        return subscription.wrap(subscribe(new SafeObserver<T>(subscription, o)));, +        if (o instanceof SafeObserver), +++ b/rxjava-core/src/main/java/rx/concurrency/DiscardableAction.java, +import rx.operators.SafeObservableSubscription;, +    private final SafeObservableSubscription wrapper = new SafeObservableSubscription();, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.SafeObservableSubscription;, +import rx.operators.SafeObserver;, +                SafeObservableSubscription subscription = new SafeObservableSubscription();, +                subscription.wrap(onSubscribeFunction.call(new SafeObserver<T>(subscription, observer)));, +        SafeObservableSubscription subscription = new SafeObservableSubscription();, +        return subscription.wrap(subscribe(new SafeObserver<T>(subscription, o)));, +        if (o instanceof SafeObserver), +++ b/rxjava-core/src/main/java/rx/concurrency/DiscardableAction.java, +import rx.operators.SafeObservableSubscription;, +    private final SafeObservableSubscription wrapper = new SafeObservableSubscription();, +++ b/rxjava-core/src/main/java/rx/concurrency/NewThreadScheduler.java, +import rx.operators.SafeObservableSubscription;, +        final SafeObservableSubscription subscription = new SafeObservableSubscription();, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.SafeObservableSubscription;, +import rx.operators.SafeObserver;, +                SafeObservableSubscription subscription = new SafeObservableSubscription();, +                subscription.wrap(onSubscribeFunction.call(new SafeObserver<T>(subscription, observer)));, +        SafeObservableSubscription subscription = new SafeObservableSubscription();, +        return subscription.wrap(subscribe(new SafeObserver<T>(subscription, o)));, +        if (o instanceof SafeObserver), +++ b/rxjava-core/src/main/java/rx/concurrency/DiscardableAction.java, +import rx.operators.SafeObservableSubscription;, +    private final SafeObservableSubscription wrapper = new SafeObservableSubscription();, +++ b/rxjava-core/src/main/java/rx/concurrency/NewThreadScheduler.java, +import rx.operators.SafeObservableSubscription;, +        final SafeObservableSubscription subscription = new SafeObservableSubscription();, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +import rx.operators.SafeObservableSubscription;, +import rx.operators.SafeObserver;, +        SafeObservableSubscription subscription = new SafeObservableSubscription();, +        return subscription.wrap(subscribe(new SafeObserver<T>(subscription, o)));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.SafeObservableSubscription;, +import rx.operators.SafeObserver;, +                SafeObservableSubscription subscription = new SafeObservableSubscription();, +                subscription.wrap(onSubscribeFunction.call(new SafeObserver<T>(subscription, observer)));, +        SafeObservableSubscription subscription = new SafeObservableSubscription();, +        return subscription.wrap(subscribe(new SafeObserver<T>(subscription, o)));, +        if (o instanceof SafeObserver), +++ b/rxjava-core/src/main/java/rx/concurrency/DiscardableAction.java, +import rx.operators.SafeObservableSubscription;, +    private final SafeObservableSubscription wrapper = new SafeObservableSubscription();, +++ b/rxjava-core/src/main/java/rx/concurrency/NewThreadScheduler.java, +import rx.operators.SafeObservableSubscription;, +        final SafeObservableSubscription subscription = new SafeObservableSubscription();, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +import rx.operators.SafeObservableSubscription;, +import rx.operators.SafeObserver;, +        SafeObservableSubscription subscription = new SafeObservableSubscription();, +        return subscription.wrap(subscribe(new SafeObserver<T>(subscription, o)));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.SafeObservableSubscription;, +import rx.operators.SafeObserver;, +                SafeObservableSubscription subscription = new SafeObservableSubscription();, +                subscription.wrap(onSubscribeFunction.call(new SafeObserver<T>(subscription, observer)));, +        SafeObservableSubscription subscription = new SafeObservableSubscription();, +        return subscription.wrap(subscribe(new SafeObserver<T>(subscription, o)));, +        if (o instanceof SafeObserver), +++ b/rxjava-core/src/main/java/rx/concurrency/DiscardableAction.java, +import rx.operators.SafeObservableSubscription;, +    private final SafeObservableSubscription wrapper = new SafeObservableSubscription();, +++ b/rxjava-core/src/main/java/rx/concurrency/NewThreadScheduler.java, +import rx.operators.SafeObservableSubscription;, +        final SafeObservableSubscription subscription = new SafeObservableSubscription();, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +import rx.operators.SafeObservableSubscription;, +import rx.operators.SafeObserver;, +        SafeObservableSubscription subscription = new SafeObservableSubscription();, +        return subscription.wrap(subscribe(new SafeObserver<T>(subscription, o)));, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.SafeObservableSubscription;, +import rx.operators.SafeObserver;, +                SafeObservableSubscription subscription = new SafeObservableSubscription();, +                subscription.wrap(onSubscribeFunction.call(new SafeObserver<T>(subscription, observer)));, +        SafeObservableSubscription subscription = new SafeObservableSubscription();, +        return subscription.wrap(subscribe(new SafeObserver<T>(subscription, o)));]