[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +        Subscriber[Int](, +          (v: Int)  => subscriber.onNext("No. " + v),, +    // Split the input Strings with " ", +    val splitStringsWithSpace = (subscriber: Subscriber[String]) => {, +      Subscriber[String](, +        (v: String) => v.split(" ").foreach(subscriber.onNext(_)),, +    }, +, +    // Convert the input Strings to Chars, +    val stringsToChars = (subscriber: Subscriber[Char]) => {, +      Subscriber[String](, +        subscriber,, +        (v: String) => v.foreach(subscriber.onNext(_)),, +        e => subscriber.onError(e),, +        () => subscriber.onCompleted, +      ), +    }, +, +    // Skip the first n items. If the length of source is less than n, throw an IllegalArgumentException, +    def skipWithException[T](n: Int) = (subscriber: Subscriber[T]) => {, +      var count = 0, +      Subscriber[T](, +        subscriber,, +        (v: T) => {, +          if (count >= n) subscriber.onNext(v), +          count += 1, +        },, +        e => subscriber.onError(e),, +        () => if (count < n) subscriber.onError(new IllegalArgumentException("There is no enough items")) else subscriber.onCompleted, +      ), +    }, +, +    val o = List("RxJava – Reactive Extensions for the JVM").toObservable, +      .lift(splitStringsWithSpace), +      .map(_.toLowerCase), +      .lift(stringsToChars), +      .filter(_.isLetter), +      .lift(skipWithException(100)), +    try {, +      o.toBlockingObservable.toList, +    }, +    catch {, +      case e: IllegalArgumentException => println("IllegalArgumentException from skipWithException"), +    }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +        Subscriber[Int](, +          (v: Int)  => subscriber.onNext("No. " + v),, +    // Split the input Strings with " ", +    val splitStringsWithSpace = (subscriber: Subscriber[String]) => {, +      Subscriber[String](, +        (v: String) => v.split(" ").foreach(subscriber.onNext(_)),, +    }, +, +    // Convert the input Strings to Chars, +    val stringsToChars = (subscriber: Subscriber[Char]) => {, +      Subscriber[String](, +        subscriber,, +        (v: String) => v.foreach(subscriber.onNext(_)),, +        e => subscriber.onError(e),, +        () => subscriber.onCompleted, +      ), +    }, +, +    // Skip the first n items. If the length of source is less than n, throw an IllegalArgumentException, +    def skipWithException[T](n: Int) = (subscriber: Subscriber[T]) => {, +      var count = 0, +      Subscriber[T](, +        subscriber,, +        (v: T) => {, +          if (count >= n) subscriber.onNext(v), +          count += 1, +        },, +        e => subscriber.onError(e),, +        () => if (count < n) subscriber.onError(new IllegalArgumentException("There is no enough items")) else subscriber.onCompleted, +      ), +    }, +, +    val o = List("RxJava – Reactive Extensions for the JVM").toObservable, +      .lift(splitStringsWithSpace), +      .map(_.toLowerCase), +      .lift(stringsToChars), +      .filter(_.isLetter), +      .lift(skipWithException(100)), +    try {, +      o.toBlockingObservable.toList, +    }, +    catch {, +      case e: IllegalArgumentException => println("IllegalArgumentException from skipWithException"), +    }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +, +  implicit def toJavaOperator[T, R](operator: Subscriber[R] => Subscriber[_ >: T]): rx.Observable.Operator[R, T] = {, +    new rx.Observable.Operator[R, T] {, +      override def call(subscriber: rx.Subscriber[_ >: R]): rx.Subscriber[_ >: T] = {, +        toJavaSubscriber[T](operator(toScalaSubscriber[R](subscriber))), +      }, +    }, +  }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala]