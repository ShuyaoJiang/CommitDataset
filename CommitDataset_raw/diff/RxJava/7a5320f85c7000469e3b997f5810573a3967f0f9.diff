[+++ b/src/main/java/io/reactivex/flowables/BlockingFlowable.java, +        T v = first(o);, +    static <T> T first(Publisher<? extends T> o) {, +        BlockingFirstSubscriber<T> s = new BlockingFirstSubscriber<T>();, +        o.subscribe(s);, +        return s.blockingGet();, +    }, +    , +        T v = first(o);, +        if (v != null) {, +            return v;, +        T v = first(o);, +        if (v != null) {, +            return v;, +        T v = last(o);, +    static <T> T last(Publisher<? extends T> o) {, +        BlockingLastSubscriber<T> s = new BlockingLastSubscriber<T>();, +        o.subscribe(s);, +        return s.blockingGet();, +    }, +    , +        T v = last(o);, +        if (v != null) {, +            return v;, +        T v = last(o);, +        if (v != null) {, +            return v;, +    @SuppressWarnings("unchecked"), +        return first(new FlowableSingle<T>((Publisher<T>)this.o, null));, +    @SuppressWarnings("unchecked"), +        return first(new FlowableSingle<T>((Publisher<T>)this.o, defaultValue));, +++ b/src/main/java/io/reactivex/flowables/BlockingFlowable.java, +        T v = first(o);, +    static <T> T first(Publisher<? extends T> o) {, +        BlockingFirstSubscriber<T> s = new BlockingFirstSubscriber<T>();, +        o.subscribe(s);, +        return s.blockingGet();, +    }, +    , +        T v = first(o);, +        if (v != null) {, +            return v;, +        T v = first(o);, +        if (v != null) {, +            return v;, +        T v = last(o);, +    static <T> T last(Publisher<? extends T> o) {, +        BlockingLastSubscriber<T> s = new BlockingLastSubscriber<T>();, +        o.subscribe(s);, +        return s.blockingGet();, +    }, +    , +        T v = last(o);, +        if (v != null) {, +            return v;, +        T v = last(o);, +        if (v != null) {, +            return v;, +    @SuppressWarnings("unchecked"), +        return first(new FlowableSingle<T>((Publisher<T>)this.o, null));, +    @SuppressWarnings("unchecked"), +        return first(new FlowableSingle<T>((Publisher<T>)this.o, defaultValue));, +++ b/src/main/java/io/reactivex/internal/subscribers/flowable/BlockingFirstSubscriber.java, +/**, + * Copyright 2016 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.subscribers.flowable;, +, +/**, + * Blocks until the upstream signals its first value or completes., + *, + * @param <T> the value type, + */, +public final class BlockingFirstSubscriber<T> extends BlockingSingleSubscriber<T> {, +, +    @Override, +    public void onNext(T t) {, +        if (value == null) {, +            value = t;, +            s.cancel();, +            countDown();, +        }, +    }, +, +    @Override, +    public void onError(Throwable t) {, +        if (value == null) {, +            error = t;, +        }, +        countDown();]