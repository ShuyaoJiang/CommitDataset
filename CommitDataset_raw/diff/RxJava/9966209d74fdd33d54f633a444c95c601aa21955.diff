[+++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +     *, +    public static <T, R> Flowable<R> combineLatest(Publisher<? extends T>[] sources, Function<? super Object[], ? extends R> combiner) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +     *, +    public static <T, R> Flowable<R> combineLatest(Function<? super Object[], ? extends R> combiner, Publisher<? extends T>... sources) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +     *, +    public static <T, R> Flowable<R> combineLatest(Publisher<? extends T>[] sources, Function<? super Object[], ? extends R> combiner, int bufferSize) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +     *, +            Function<? super Object[], ? extends R> combiner) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +     *, +            Function<? super Object[], ? extends R> combiner, int bufferSize) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +     *, +            Function<? super Object[], ? extends R> combiner) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +    public static <T, R> Flowable<R> combineLatestDelayError(Function<? super Object[], ? extends R> combiner,, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +    public static <T, R> Flowable<R> combineLatestDelayError(Function<? super Object[], ? extends R> combiner,, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +            Function<? super Object[], ? extends R> combiner, int bufferSize) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +            Function<? super Object[], ? extends R> combiner) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +            Function<? super Object[], ? extends R> combiner, int bufferSize) {, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +     *, +    public static <T, R> Flowable<R> combineLatest(Publisher<? extends T>[] sources, Function<? super Object[], ? extends R> combiner) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +     *, +    public static <T, R> Flowable<R> combineLatest(Function<? super Object[], ? extends R> combiner, Publisher<? extends T>... sources) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +     *, +    public static <T, R> Flowable<R> combineLatest(Publisher<? extends T>[] sources, Function<? super Object[], ? extends R> combiner, int bufferSize) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +     *, +            Function<? super Object[], ? extends R> combiner) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +     *, +            Function<? super Object[], ? extends R> combiner, int bufferSize) {, +     * <p>, +     * Note on method signature: since Java doesn't allow creating a generic array with {@code new T[]}, the, +     * implementation of this operator has to create an {@code Object[]} instead. Unfortunately, a, +     * {@code Function<Integer[], R>} passed to the method would trigger a {@code ClassCastException}., +     *, +            Function<? super Object[], ? extends R> combiner) {, +     * <p>]