[+++ b/src/main/java/io/reactivex/Observable.java, +    , +    public static <T> Observable<Boolean> sequenceEqual(Publisher<? extends T> p1, Publisher<? extends T> p2) {, +        return sequenceEqual(p1, p2, Objects::equals, bufferSize());, +    }, +, +    public static <T> Observable<Boolean> sequenceEqual(Publisher<? extends T> p1, Publisher<? extends T> p2, int bufferSize) {, +        return sequenceEqual(p1, p2, Objects::equals, bufferSize);, +    }, +, +    public static <T> Observable<Boolean> sequenceEqual(Publisher<? extends T> p1, Publisher<? extends T> p2, BiPredicate<? super T, ? super T> isEqual) {, +        return sequenceEqual(p1, p2, isEqual, bufferSize());, +    }, +, +    public static <T> Observable<Boolean> sequenceEqual(Publisher<? extends T> p1, Publisher<? extends T> p2, BiPredicate<? super T, ? super T> isEqual, int bufferSize) {, +        Objects.requireNonNull(p1);, +        Objects.requireNonNull(p2);, +        Objects.requireNonNull(isEqual);, +        if (bufferSize <= 0) {, +            throw new IllegalArgumentException("bufferSize > 0 required but it was " + bufferSize);, +        }, +        return create(new PublisherSequenceEqual<>(p1, p2, isEqual, bufferSize));, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +    , +    public static <T> Observable<Boolean> sequenceEqual(Publisher<? extends T> p1, Publisher<? extends T> p2) {, +        return sequenceEqual(p1, p2, Objects::equals, bufferSize());, +    }, +, +    public static <T> Observable<Boolean> sequenceEqual(Publisher<? extends T> p1, Publisher<? extends T> p2, int bufferSize) {, +        return sequenceEqual(p1, p2, Objects::equals, bufferSize);, +    }, +, +    public static <T> Observable<Boolean> sequenceEqual(Publisher<? extends T> p1, Publisher<? extends T> p2, BiPredicate<? super T, ? super T> isEqual) {, +        return sequenceEqual(p1, p2, isEqual, bufferSize());, +    }, +, +    public static <T> Observable<Boolean> sequenceEqual(Publisher<? extends T> p1, Publisher<? extends T> p2, BiPredicate<? super T, ? super T> isEqual, int bufferSize) {, +        Objects.requireNonNull(p1);, +        Objects.requireNonNull(p2);, +        Objects.requireNonNull(isEqual);, +        if (bufferSize <= 0) {, +            throw new IllegalArgumentException("bufferSize > 0 required but it was " + bufferSize);, +        }, +        return create(new PublisherSequenceEqual<>(p1, p2, isEqual, bufferSize));, +    }, +++ b/src/main/java/io/reactivex/internal/operators/PublisherSequenceEqual.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import java.util.*;, +import java.util.concurrent.atomic.*;, +import java.util.function.BiPredicate;, +, +import org.reactivestreams.*;, +, +import io.reactivex.internal.disposables.ArrayCompositeResource;, +import io.reactivex.internal.queue.*;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +import io.reactivex.internal.util.Pow2;, +, +public final class PublisherSequenceEqual<T> implements Publisher<Boolean> {, +    final Publisher<? extends T> first;, +    final Publisher<? extends T> second;, +    final BiPredicate<? super T, ? super T> comparer;, +    final int bufferSize;, +    , +    public PublisherSequenceEqual(Publisher<? extends T> first, Publisher<? extends T> second,, +            BiPredicate<? super T, ? super T> comparer, int bufferSize) {, +        this.first = first;, +        this.second = second;, +        this.comparer = comparer;, +        this.bufferSize = bufferSize;, +    }, +    , +    @Override, +    public void subscribe(Subscriber<? super Boolean> s) {, +        // TODO Auto-generated method stub, +        , +    }, +    , +    static final class EqualCoordinator<T> extends AtomicInteger implements Subscription {, +        /** */, +        private static final long serialVersionUID = -6178010334400373240L;, +        final Subscriber<? super Boolean> actual;, +        final BiPredicate<? super T, ? super T> comparer;, +        final ArrayCompositeResource<Subscription> resources;, +        final Publisher<? extends T> first;]