[+++ b/src/main/java/rx/Observable.java, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +++ b/src/main/java/rx/Observable.java, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +++ b/src/main/java/rx/internal/operators/OperatorObserveOn.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +import rx.Producer;, +import rx.Scheduler;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.internal.util.RxRingBuffer;, +import rx.internal.util.SynchronizedQueue;, +import rx.internal.util.unsafe.SpscArrayQueue;, +import rx.internal.util.unsafe.UnsafeAccess;, +import rx.schedulers.ImmediateScheduler;, +import rx.schedulers.TrampolineScheduler;, +            ObserveOnSubscriber<T> parent = new ObserveOnSubscriber<T>(scheduler, child);, +            parent.init();, +            return parent;, +        }, +        , +        void init() {, +            // don't want this code in the constructor because `this` can escape through the , +            // setProducer call, +                    BackpressureUtils.getAndAddRequest(REQUESTED, ObserveOnSubscriber.this, n);, +++ b/src/main/java/rx/Observable.java, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +++ b/src/main/java/rx/internal/operators/OperatorObserveOn.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +import rx.Producer;, +import rx.Scheduler;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.internal.util.RxRingBuffer;, +import rx.internal.util.SynchronizedQueue;, +import rx.internal.util.unsafe.SpscArrayQueue;, +import rx.internal.util.unsafe.UnsafeAccess;, +import rx.schedulers.ImmediateScheduler;, +import rx.schedulers.TrampolineScheduler;, +            ObserveOnSubscriber<T> parent = new ObserveOnSubscriber<T>(scheduler, child);, +            parent.init();, +            return parent;, +        }, +        , +        void init() {, +            // don't want this code in the constructor because `this` can escape through the , +            // setProducer call, +                    BackpressureUtils.getAndAddRequest(REQUESTED, ObserveOnSubscriber.this, n);, +++ /dev/null, +++ b/src/main/java/rx/Observable.java, +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +++ b/src/main/java/rx/internal/operators/OperatorObserveOn.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +import rx.Producer;, +import rx.Scheduler;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.internal.util.RxRingBuffer;, +import rx.internal.util.SynchronizedQueue;, +import rx.internal.util.unsafe.SpscArrayQueue;, +import rx.internal.util.unsafe.UnsafeAccess;, +import rx.schedulers.ImmediateScheduler;, +import rx.schedulers.TrampolineScheduler;, +            ObserveOnSubscriber<T> parent = new ObserveOnSubscriber<T>(scheduler, child);, +            parent.init();, +            return parent;, +        }, +        , +        void init() {, +            // don't want this code in the constructor because `this` can escape through the , +            // setProducer call, +                    BackpressureUtils.getAndAddRequest(REQUESTED, ObserveOnSubscriber.this, n);, +++ /dev/null, +++ b/src/main/java/rx/subjects/Subject.java, +     *, +     *, +     * @return {@code true} if the subject has received a throwable through {@code onError}., +     * @since (If this graduates from being an Experimental class method, replace this parenthetical with the release number), +     *, +     * @return {@code true} if the subject completed normally via {@code onCompleted}, +     * @since (If this graduates from being an Experimental class method, replace this parenthetical with the release number), +     *, +     * @return the Throwable that terminated the Subject or {@code null} if the subject hasn't terminated yet or, +     *         if it terminated normally., +     * @since (If this graduates from being an Experimental class method, replace this parenthetical with the release number), +     *, +     * @return {@code true} if and only if the subject has some value but not an error, +     * @since (If this graduates from being an Experimental class method, replace this parenthetical with the release number), +     *]