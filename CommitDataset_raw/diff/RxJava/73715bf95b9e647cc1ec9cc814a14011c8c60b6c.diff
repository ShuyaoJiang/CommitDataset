[+++ b/src/main/java/rx/internal/operators/OperatorScan.java, +                                // n != Long.MAX_VALUE && n != 1, +                            if (n > 1 // avoid to request 0, +                                    && excessive.compareAndSet(true, false) && n != Long.MAX_VALUE) {, +++ b/src/main/java/rx/internal/operators/OperatorScan.java, +                                // n != Long.MAX_VALUE && n != 1, +                            if (n > 1 // avoid to request 0, +                                    && excessive.compareAndSet(true, false) && n != Long.MAX_VALUE) {, +++ b/src/test/java/rx/internal/operators/OperatorScanTest.java, +import static org.mockito.Mockito.*;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicReference;, +import rx.Producer;, +, +    @Test, +    public void testScanShouldNotRequestZero() {, +        final AtomicReference<Producer> producer = new AtomicReference<Producer>();, +        Observable<Integer> o = Observable.create(new Observable.OnSubscribe<Integer>() {, +            @Override, +            public void call(final Subscriber subscriber) {, +                Producer p = spy(new Producer() {, +, +                    private AtomicBoolean requested = new AtomicBoolean(false);, +, +                    @Override, +                    public void request(long n) {, +                        if (requested.compareAndSet(false, true)) {, +                            subscriber.onNext(1);, +                        } else {, +                            subscriber.onCompleted();, +                        }, +                    }, +                });, +                producer.set(p);, +                subscriber.setProducer(p);, +            }, +        }).scan(100, new Func2<Integer, Integer, Integer>() {, +, +            @Override, +            public Integer call(Integer t1, Integer t2) {, +                return t1 + t2;, +            }, +, +        });, +, +        o.subscribe(new TestSubscriber<Integer>() {, +, +            @Override, +            public void onStart() {, +                request(1);, +            }, +, +            @Override, +            public void onNext(Integer integer) {, +                request(1);, +            }, +        });, +, +        verify(producer.get(), never()).request(0);, +        verify(producer.get(), times(2)).request(1);, +    }]