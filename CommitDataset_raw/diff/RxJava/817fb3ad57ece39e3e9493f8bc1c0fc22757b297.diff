[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationConcat;, +import rx.operators.OperatorCombineLatest;, +    public static final <T1, T2, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Func2<? super T1, ? super T2, ? extends R> combineFunction) {, +        return combineLatest(Arrays.asList(o1, o2), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Func3<? super T1, ? super T2, ? super T3, ? extends R> combineFunction) {, +        return combineLatest(Arrays.asList(o1, o2, o3), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, T5, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4, o5), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, T5, T6, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4, o5, o6), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, T5, T6, T7, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6, Observable<? extends T7> o7,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4, o5, o6, o7), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, T5, T6, T7, T8, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6, Observable<? extends T7> o7, Observable<? extends T8> o8,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4, o5, o6, o7, o8), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, T5, T6, T7, T8, T9, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6, Observable<? extends T7> o7, Observable<? extends T8> o8,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4, o5, o6, o7, o8, o9), Functions.fromFunc(combineFunction));, +    }, +    /**, +     * Combines nine source Observables by emitting an item that aggregates the latest values of each of the, +     * source Observables each time an item is received from any of the source Observables, where this, +     * aggregation is defined by a specified function., +     * @param <T> the common base type of source values, +     * @param <R> the result type, +     * @param sources the list of observable sources, +     * @param combineFunction, +     *            the aggregation function used to combine the items emitted by the source Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     *         Observables by means of the given aggregation function, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#wiki-combinelatest">RxJava Wiki: combineLatest()</a>, +     */, +    public static final <T, R> Observable<R> combineLatest(List<? extends Observable<? extends T>> sources, FuncN<? extends R> combineFunction) {, +        return create(new OperatorCombineLatest<T, R>(sources, combineFunction));, +        return create(OperationConcat.concat(observables));, +        return create(OperationConcat.concat(t1, t2));, +        return create(OperationConcat.concat(t1, t2, t3));, +        return create(OperationConcat.concat(t1, t2, t3, t4));, +        return create(OperationConcat.concat(t1, t2, t3, t4, t5));, +        return create(OperationConcat.concat(t1, t2, t3, t4, t5, t6));, +        return create(OperationConcat.concat(t1, t2, t3, t4, t5, t6, t7));, +        return create(OperationConcat.concat(t1, t2, t3, t4, t5, t6, t7, t8));, +        return create(OperationConcat.concat(t1, t2, t3, t4, t5, t6, t7, t8, t9));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationConcat;, +import rx.operators.OperatorCombineLatest;, +    public static final <T1, T2, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Func2<? super T1, ? super T2, ? extends R> combineFunction) {, +        return combineLatest(Arrays.asList(o1, o2), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Func3<? super T1, ? super T2, ? super T3, ? extends R> combineFunction) {, +        return combineLatest(Arrays.asList(o1, o2, o3), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, T5, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4, o5), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, T5, T6, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4, o5, o6), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, T5, T6, T7, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6, Observable<? extends T7> o7,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4, o5, o6, o7), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, T5, T6, T7, T8, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6, Observable<? extends T7> o7, Observable<? extends T8> o8,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4, o5, o6, o7, o8), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, T5, T6, T7, T8, T9, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5, Observable<? extends T6> o6, Observable<? extends T7> o7, Observable<? extends T8> o8,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4, o5, o6, o7, o8, o9), Functions.fromFunc(combineFunction));, +    }, +    /**, +     * Combines nine source Observables by emitting an item that aggregates the latest values of each of the, +     * source Observables each time an item is received from any of the source Observables, where this, +     * aggregation is defined by a specified function., +     * @param <T> the common base type of source values, +     * @param <R> the result type, +     * @param sources the list of observable sources, +     * @param combineFunction, +     *            the aggregation function used to combine the items emitted by the source Observables, +     * @return an Observable that emits items that are the result of combining the items emitted by the source, +     *         Observables by means of the given aggregation function, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#wiki-combinelatest">RxJava Wiki: combineLatest()</a>, +     */, +    public static final <T, R> Observable<R> combineLatest(List<? extends Observable<? extends T>> sources, FuncN<? extends R> combineFunction) {, +        return create(new OperatorCombineLatest<T, R>(sources, combineFunction));, +        return create(OperationConcat.concat(observables));, +        return create(OperationConcat.concat(t1, t2));, +        return create(OperationConcat.concat(t1, t2, t3));, +        return create(OperationConcat.concat(t1, t2, t3, t4));, +        return create(OperationConcat.concat(t1, t2, t3, t4, t5));, +        return create(OperationConcat.concat(t1, t2, t3, t4, t5, t6));, +        return create(OperationConcat.concat(t1, t2, t3, t4, t5, t6, t7));, +        return create(OperationConcat.concat(t1, t2, t3, t4, t5, t6, t7, t8));, +        return create(OperationConcat.concat(t1, t2, t3, t4, t5, t6, t7, t8, t9));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationConcat;, +import rx.operators.OperatorCombineLatest;, +    public static final <T1, T2, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Func2<? super T1, ? super T2, ? extends R> combineFunction) {, +        return combineLatest(Arrays.asList(o1, o2), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Func3<? super T1, ? super T2, ? super T3, ? extends R> combineFunction) {, +        return combineLatest(Arrays.asList(o1, o2, o3), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4), Functions.fromFunc(combineFunction));, +    public static final <T1, T2, T3, T4, T5, R> Observable<R> combineLatest(Observable<? extends T1> o1, Observable<? extends T2> o2, Observable<? extends T3> o3, Observable<? extends T4> o4, Observable<? extends T5> o5,, +        return combineLatest(Arrays.asList(o1, o2, o3, o4, o5), Functions.fromFunc(combineFunction));]