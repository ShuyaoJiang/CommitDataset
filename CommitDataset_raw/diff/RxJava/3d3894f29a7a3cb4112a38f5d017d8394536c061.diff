[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorTimeout;, +import rx.operators.OperatorTimeoutWithSelector;, +    public final <U, V> Observable<T> timeout(Func0<? extends Observable<U>> firstTimeoutSelector, Func1<? super T, ? extends Observable<V>> timeoutSelector) {, +        return timeout(firstTimeoutSelector, timeoutSelector, null);, +    public final <U, V> Observable<T> timeout(Func0<? extends Observable<U>> firstTimeoutSelector, Func1<? super T, ? extends Observable<V>> timeoutSelector, Observable<? extends T> other) {, +        if(timeoutSelector == null) {, +            throw new NullPointerException("timeoutSelector is null");, +        return lift(new OperatorTimeoutWithSelector<T, U, V>(firstTimeoutSelector, timeoutSelector, other));, +    public final <V> Observable<T> timeout(Func1<? super T, ? extends Observable<V>> timeoutSelector) {, +        return timeout(null, timeoutSelector, null);, +    public final <V> Observable<T> timeout(Func1<? super T, ? extends Observable<V>> timeoutSelector, Observable<? extends T> other) {, +        return timeout(null, timeoutSelector, other);, +        return timeout(timeout, timeUnit, null, Schedulers.computation());, +        return timeout(timeout, timeUnit, other, Schedulers.computation());, +        return lift(new OperatorTimeout<T>(timeout, timeUnit, other, scheduler));, +        return timeout(timeout, timeUnit, null, scheduler);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorTimeout;, +import rx.operators.OperatorTimeoutWithSelector;, +    public final <U, V> Observable<T> timeout(Func0<? extends Observable<U>> firstTimeoutSelector, Func1<? super T, ? extends Observable<V>> timeoutSelector) {, +        return timeout(firstTimeoutSelector, timeoutSelector, null);, +    public final <U, V> Observable<T> timeout(Func0<? extends Observable<U>> firstTimeoutSelector, Func1<? super T, ? extends Observable<V>> timeoutSelector, Observable<? extends T> other) {, +        if(timeoutSelector == null) {, +            throw new NullPointerException("timeoutSelector is null");, +        return lift(new OperatorTimeoutWithSelector<T, U, V>(firstTimeoutSelector, timeoutSelector, other));, +    public final <V> Observable<T> timeout(Func1<? super T, ? extends Observable<V>> timeoutSelector) {, +        return timeout(null, timeoutSelector, null);, +    public final <V> Observable<T> timeout(Func1<? super T, ? extends Observable<V>> timeoutSelector, Observable<? extends T> other) {, +        return timeout(null, timeoutSelector, other);, +        return timeout(timeout, timeUnit, null, Schedulers.computation());, +        return timeout(timeout, timeUnit, other, Schedulers.computation());, +        return lift(new OperatorTimeout<T>(timeout, timeUnit, other, scheduler));, +        return timeout(timeout, timeUnit, null, scheduler);, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorTimeout;, +import rx.operators.OperatorTimeoutWithSelector;, +    public final <U, V> Observable<T> timeout(Func0<? extends Observable<U>> firstTimeoutSelector, Func1<? super T, ? extends Observable<V>> timeoutSelector) {, +        return timeout(firstTimeoutSelector, timeoutSelector, null);, +    public final <U, V> Observable<T> timeout(Func0<? extends Observable<U>> firstTimeoutSelector, Func1<? super T, ? extends Observable<V>> timeoutSelector, Observable<? extends T> other) {, +        if(timeoutSelector == null) {, +            throw new NullPointerException("timeoutSelector is null");, +        return lift(new OperatorTimeoutWithSelector<T, U, V>(firstTimeoutSelector, timeoutSelector, other));, +    public final <V> Observable<T> timeout(Func1<? super T, ? extends Observable<V>> timeoutSelector) {, +        return timeout(null, timeoutSelector, null);, +    public final <V> Observable<T> timeout(Func1<? super T, ? extends Observable<V>> timeoutSelector, Observable<? extends T> other) {, +        return timeout(null, timeoutSelector, other);, +        return timeout(timeout, timeUnit, null, Schedulers.computation());, +        return timeout(timeout, timeUnit, other, Schedulers.computation());, +        return lift(new OperatorTimeout<T>(timeout, timeUnit, other, scheduler));, +        return timeout(timeout, timeUnit, null, scheduler);, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorTimeout.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.concurrent.TimeUnit;, +, +import rx.Observable;, +import rx.Scheduler;, +import rx.Scheduler.Inner;, +import rx.Subscription;, +import rx.util.functions.Action1;, +, +/**, + * Applies a timeout policy for each element in the observable sequence, using, + * the specified scheduler to run timeout timers. If the next element isn't, + * received within the specified timeout duration starting from its predecessor,, + * the other observable sequence is used to produce future messages from that, + * point on., + */, +public final class OperatorTimeout<T> extends OperatorTimeoutBase<T> {, +, +    public OperatorTimeout(final long timeout, final TimeUnit timeUnit,, +            Observable<? extends T> other, final Scheduler scheduler) {, +        super(new FirstTimeoutStub<T>() {, +, +            @Override, +            public Subscription call(, +                    final TimeoutSubscriber<T> timeoutSubscriber,, +                    final Long seqId) {, +                return scheduler.schedule(new Action1<Inner>() {, +                    @Override, +                    public void call(Inner inner) {, +                        timeoutSubscriber.onTimeout(seqId);]