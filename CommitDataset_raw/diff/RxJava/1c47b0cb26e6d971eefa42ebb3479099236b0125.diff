[+++ b/CHANGES.md, +### Version 0.12.2 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.12.2%22)) ###, +, +* [Pull 352](https://github.com/Netflix/RxJava/pull/352) Groovy Language Adaptor: Add Func5-9 and N to the wrapper, +, +### Version 0.12.1 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.12.1%22)) ###, +, +* [Pull 350](https://github.com/Netflix/RxJava/pull/350) Swing module enhancements, +* [Pull 351](https://github.com/Netflix/RxJava/pull/351) Fix Observable.window static/instance bug, +, +### Version 0.12.0 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.12.0%22)) ###, +, +This version adds to the static typing changes in 0.11 and adds covariant/contravariant typing via super/extends generics., +, +Additional cleanup was done, particularly related to `BlockingObservable`. Also the `window` operator was added., +, +The largest breaking change is that `Observable.create` now accepts an `OnSubscribeFunc` rather than a `Func1`., +, +This means that instead of this:, +, +```java, +public static <T> Observable<T> create(Func1<? super Observer<? super T>, ? extends Subscription> func), +```, +, +it is now:, +, +```java, +public static <T> Observable<T> create(OnSubscribeFunc<T> func), +```, +, +This was done to simplify the usage of `Observable.create` which was already verbose but made far worse by the `? super` generics., +, +For example, instead of writing this:, +, +```java, +Observable.create(new Func1<Observer<? super SomeType>, Subscription>() {, +   /// body here, +}, +```, +, +it is now written as:, +, +```java, +Observable.create(new OnSubscribeFunc<SomeType>() {, +   /// body here, +}, +```, +, +* [Pull 343](https://github.com/Netflix/RxJava/pull/343) Covariant Support with super/extends and `OnSubscribeFunc` as type for `Observable.create`, +* [Pull 337](https://github.com/Netflix/RxJava/pull/337) Operator: `window`, +* [Pull 348](https://github.com/Netflix/RxJava/pull/348) Rename `switchDo` to `switchOnNext` (deprecate `switchDo` for eventual deletion), +* [Pull 348](https://github.com/Netflix/RxJava/pull/348) Delete `switchDo` instance method in preference for static, +* [Pull 346](https://github.com/Netflix/RxJava/pull/346) Remove duplicate static methods from `BlockingObservable` , +* [Pull 346](https://github.com/Netflix/RxJava/pull/346) `BlockingObservable` no longer extends from `Observable`, +* [Pull 345](https://github.com/Netflix/RxJava/pull/345) Remove unnecessary constructor from `Observable`, +, +### Version 0.11.2 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.11.2%22)) ###, +, +* [Commit ccf53e8]( https://github.com/Netflix/RxJava/commit/ccf53e84835d99136cce80a4c508bae787d5da45) Update to Scala 2.10.2, +, +### Version 0.11.1 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.11.1%22)) ###, +, +* [Pull 325](https://github.com/Netflix/RxJava/pull/325) Clojure: Preserve metadata on fn and action macros, +, +### Version 0.11.0 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.11.0%22)) ###, +, +This is a major refactor of rxjava-core and the language adaptors. , +, +Note that there are *breaking changes* in this release. Details are below., +, +After this refactor it is expected that the API will settle down and allow us to stabilize towards a 1.0 release., +, +* [Pull 332](https://github.com/Netflix/RxJava/pull/332) Refactor Core to be Statically Typed, +, +RxJava was written from the beginning to target the JVM, not any specific language., +, +As a side-effect of Java not having lambdas/clojures yet (and other considerations), Netflix used dynamic languages with it predominantly for the year of its existence prior to open sourcing., +, +To bridge the rxjava-core written in Java with the various languages a FunctionalLanguageAdaptor was registered at runtime for each language of interest., +, +To enable these language adaptors methods are overloaded with `Object` in the API since `Object` is the only super-type that works across all languages for their various implementations of lambdas and closures., +, +This downside of this has been that it breaks static typing for Java, Scala and other statically-typed languages. More can be read on this issue and discussion of the subject here: https://groups.google.com/forum/#!topic/rxjava/bVZoKSsb1-o, +, +This release:, +, +- removes all `Object` overload methods from rxjava-core so it is statically typed, +- removes dynamic FunctionalLanguageAdaptors , +- uses idiomatic approaches for each language adaptor , +  - Java core is statically typed and has no knowledge of other languages, +  - Scala uses implicits, +  - Groovy uses an ExtensionModule, +  - Clojure adds a new macro ([NOTE: this requires code changes](https://github.com/Netflix/RxJava/tree/master/language-adaptors/rxjava-clojure#basic-usage)), +  - JRuby has been temporarily disabled (discussing new implementation at https://github.com/Netflix/RxJava/issues/320), +- language supports continue to be additive, +  - the rxjava-core will always be required and then whichever language modules are desired such as rxjava-scala, rxjava-clojure, rxjava-groovy are added to the classpath, +- deletes deprecated methods, +- deletes redundant static methods on `Observable` that cluttered the API and in some cases caused dynamic languages trouble choosing which method to invoke, +- deletes redundant methods on `Scheduler` that gave dynamic languages a hard time choosing which method to invoke, +]