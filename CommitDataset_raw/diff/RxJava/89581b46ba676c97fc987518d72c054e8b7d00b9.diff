[+++ b/src/main/java/io/reactivex/Completable.java, +     * <p>, +     * The {@link Publisher} must follow the, +     * <a href="https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams">Reactive-Streams specification</a>., +     * Violating the specification may result in undefined behavior., +     * <p>, +     * If possible, use {@link #create(CompletableOnSubscribe)} to create a, +     * source-like {@code Completable} instead., +     * <p>, +     * Note that even though {@link Publisher} appears to be a functional interface, it, +     * is not recommended to implement it through a lambda as the specification requires, +     * state management that is not achievable with a stateless lambda., +     * @see #create(CompletableOnSubscribe), +++ b/src/main/java/io/reactivex/Completable.java, +     * <p>, +     * The {@link Publisher} must follow the, +     * <a href="https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams">Reactive-Streams specification</a>., +     * Violating the specification may result in undefined behavior., +     * <p>, +     * If possible, use {@link #create(CompletableOnSubscribe)} to create a, +     * source-like {@code Completable} instead., +     * <p>, +     * Note that even though {@link Publisher} appears to be a functional interface, it, +     * is not recommended to implement it through a lambda as the specification requires, +     * state management that is not achievable with a stateless lambda., +     * @see #create(CompletableOnSubscribe), +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * The {@link Publisher} must follow the, +     * <a href="https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams">Reactive-Streams specification</a>., +     * Violating the specification may result in undefined behavior., +     * <p>, +     * If possible, use {@link #create(FlowableOnSubscribe, BackpressureStrategy)} to create a, +     * source-like {@code Flowable} instead., +     * <p>, +     * Note that even though {@link Publisher} appears to be a functional interface, it, +     * is not recommended to implement it through a lambda as the specification requires, +     * state management that is not achievable with a stateless lambda., +     * @see #create(FlowableOnSubscribe, BackpressureStrategy), +++ b/src/main/java/io/reactivex/Completable.java, +     * <p>, +     * The {@link Publisher} must follow the, +     * <a href="https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams">Reactive-Streams specification</a>., +     * Violating the specification may result in undefined behavior., +     * <p>, +     * If possible, use {@link #create(CompletableOnSubscribe)} to create a, +     * source-like {@code Completable} instead., +     * <p>, +     * Note that even though {@link Publisher} appears to be a functional interface, it, +     * is not recommended to implement it through a lambda as the specification requires, +     * state management that is not achievable with a stateless lambda., +     * @see #create(CompletableOnSubscribe), +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * The {@link Publisher} must follow the, +     * <a href="https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams">Reactive-Streams specification</a>., +     * Violating the specification may result in undefined behavior., +     * <p>, +     * If possible, use {@link #create(FlowableOnSubscribe, BackpressureStrategy)} to create a, +     * source-like {@code Flowable} instead., +     * <p>, +     * Note that even though {@link Publisher} appears to be a functional interface, it, +     * is not recommended to implement it through a lambda as the specification requires, +     * state management that is not achievable with a stateless lambda., +     * @see #create(FlowableOnSubscribe, BackpressureStrategy), +++ b/src/main/java/io/reactivex/Observable.java, +     * <p>, +     * The {@link Publisher} must follow the, +     * <a href="https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams">Reactive-Streams specification</a>., +     * Violating the specification may result in undefined behavior., +     * <p>, +     * If possible, use {@link #create(ObservableOnSubscribe)} to create a, +     * source-like {@code Observable} instead., +     * <p>, +     * Note that even though {@link Publisher} appears to be a functional interface, it, +     * is not recommended to implement it through a lambda as the specification requires, +     * state management that is not achievable with a stateless lambda., +     * @see #create(ObservableOnSubscribe), +++ b/src/main/java/io/reactivex/Completable.java, +     * <p>, +     * The {@link Publisher} must follow the, +     * <a href="https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams">Reactive-Streams specification</a>., +     * Violating the specification may result in undefined behavior., +     * <p>, +     * If possible, use {@link #create(CompletableOnSubscribe)} to create a, +     * source-like {@code Completable} instead., +     * <p>, +     * Note that even though {@link Publisher} appears to be a functional interface, it, +     * is not recommended to implement it through a lambda as the specification requires, +     * state management that is not achievable with a stateless lambda., +     * @see #create(CompletableOnSubscribe), +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * The {@link Publisher} must follow the, +     * <a href="https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams">Reactive-Streams specification</a>., +     * Violating the specification may result in undefined behavior., +     * <p>, +     * If possible, use {@link #create(FlowableOnSubscribe, BackpressureStrategy)} to create a, +     * source-like {@code Flowable} instead., +     * <p>]