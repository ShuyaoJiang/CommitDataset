[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ScalaAdaptor.scala, +            case (func: Map[String, _]) => return matchOption(function.asInstanceOf[Map[String, _]].get(ON_NEXT), args), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ScalaAdaptor.scala, +            case (func: Map[String, _]) => return matchOption(function.asInstanceOf[Map[String, _]].get(ON_NEXT), args), +++ b/rxjava-core/src/main/java/rx/operators/OperationTake.java, +        Func1<T, Boolean> predicate = numPredicate(num);, +        return takeWhile(items, predicate);, +    }, +, +    /**, +     * Returns a specified number of contiguous values from the start of an observable sequence., +     *, +     * @param items, +     * @param num, +     * @return, +     */, +    public static <T> Func1<Observer<T>, Subscription> takeWhile(final Observable<T> items, final Func1<T, Boolean> predicate) {, +                return new TakeWhile<T>(items, predicate).call(observer);, +    private static <T> Func1<T, Boolean> numPredicate(final int num) {, +        return new Func1<T, Boolean>() {, +            final AtomicInteger counter = new AtomicInteger();, +            @Override, +            public Boolean call(T input) {, +                return counter.getAndIncrement() < num;, +        };, +    }, +, +, +    private static class TakeWhile<T> implements Func1<Observer<T>, Subscription> {, +        private final Observable<T> items;, +        private final Func1<T, Boolean> predicate;, +        private final AtomicObservableSubscription subscription = new AtomicObservableSubscription();, +, +        private TakeWhile(Observable<T> items, Func1<T, Boolean> predicate) {, +            this.items = items;, +            this.predicate = predicate;, +        }, +, +, +        @Override, +                if (predicate.call(args)) {]