[+++ b/src/main/java/io/reactivex/internal/observers/CallbackCompletableObserver.java, +import io.reactivex.observers.LambdaConsumerIntrospection;, +extends AtomicReference<Disposable>, +        implements CompletableObserver, Disposable, Consumer<Throwable>, LambdaConsumerIntrospection {, +, +    @Override, +    public boolean hasCustomOnError() {, +        return onError != this;, +    }, +++ b/src/main/java/io/reactivex/internal/observers/CallbackCompletableObserver.java, +import io.reactivex.observers.LambdaConsumerIntrospection;, +extends AtomicReference<Disposable>, +        implements CompletableObserver, Disposable, Consumer<Throwable>, LambdaConsumerIntrospection {, +, +    @Override, +    public boolean hasCustomOnError() {, +        return onError != this;, +    }, +++ b/src/main/java/io/reactivex/internal/observers/ConsumerSingleObserver.java, +import io.reactivex.internal.functions.Functions;, +import io.reactivex.observers.LambdaConsumerIntrospection;, +implements SingleObserver<T>, Disposable, LambdaConsumerIntrospection {, +, +    @Override, +    public boolean hasCustomOnError() {, +        return onError != Functions.ON_ERROR_MISSING;, +    }, +++ b/src/main/java/io/reactivex/internal/observers/CallbackCompletableObserver.java, +import io.reactivex.observers.LambdaConsumerIntrospection;, +extends AtomicReference<Disposable>, +        implements CompletableObserver, Disposable, Consumer<Throwable>, LambdaConsumerIntrospection {, +, +    @Override, +    public boolean hasCustomOnError() {, +        return onError != this;, +    }, +++ b/src/main/java/io/reactivex/internal/observers/ConsumerSingleObserver.java, +import io.reactivex.internal.functions.Functions;, +import io.reactivex.observers.LambdaConsumerIntrospection;, +implements SingleObserver<T>, Disposable, LambdaConsumerIntrospection {, +, +    @Override, +    public boolean hasCustomOnError() {, +        return onError != Functions.ON_ERROR_MISSING;, +    }, +++ b/src/main/java/io/reactivex/internal/observers/EmptyCompletableObserver.java, +import io.reactivex.observers.LambdaConsumerIntrospection;, +implements CompletableObserver, Disposable, LambdaConsumerIntrospection {, +    @Override, +    public boolean hasCustomOnError() {, +        return false;, +    }, +++ b/src/main/java/io/reactivex/internal/observers/CallbackCompletableObserver.java, +import io.reactivex.observers.LambdaConsumerIntrospection;, +extends AtomicReference<Disposable>, +        implements CompletableObserver, Disposable, Consumer<Throwable>, LambdaConsumerIntrospection {, +, +    @Override, +    public boolean hasCustomOnError() {, +        return onError != this;, +    }, +++ b/src/main/java/io/reactivex/internal/observers/ConsumerSingleObserver.java, +import io.reactivex.internal.functions.Functions;, +import io.reactivex.observers.LambdaConsumerIntrospection;, +implements SingleObserver<T>, Disposable, LambdaConsumerIntrospection {, +, +    @Override, +    public boolean hasCustomOnError() {, +        return onError != Functions.ON_ERROR_MISSING;, +    }, +++ b/src/main/java/io/reactivex/internal/observers/EmptyCompletableObserver.java, +import io.reactivex.observers.LambdaConsumerIntrospection;, +implements CompletableObserver, Disposable, LambdaConsumerIntrospection {, +    @Override, +    public boolean hasCustomOnError() {, +        return false;, +    }, +++ b/src/main/java/io/reactivex/internal/observers/LambdaObserver.java, +import io.reactivex.internal.functions.Functions;, +import io.reactivex.observers.LambdaConsumerIntrospection;, +public final class LambdaObserver<T> extends AtomicReference<Disposable>, +        implements Observer<T>, Disposable, LambdaConsumerIntrospection {, +, +    @Override, +    public boolean hasCustomOnError() {, +        return onError != Functions.ON_ERROR_MISSING;, +    }, +++ b/src/main/java/io/reactivex/internal/observers/CallbackCompletableObserver.java, +import io.reactivex.observers.LambdaConsumerIntrospection;, +extends AtomicReference<Disposable>, +        implements CompletableObserver, Disposable, Consumer<Throwable>, LambdaConsumerIntrospection {, +, +    @Override, +    public boolean hasCustomOnError() {, +        return onError != this;, +    }, +++ b/src/main/java/io/reactivex/internal/observers/ConsumerSingleObserver.java, +import io.reactivex.internal.functions.Functions;, +import io.reactivex.observers.LambdaConsumerIntrospection;, +implements SingleObserver<T>, Disposable, LambdaConsumerIntrospection {]