[+++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +        private static String renderValue(Object value){, +            if (value.getClass().isPrimitive()) {, +++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +        private static String renderValue(Object value){, +            if (value.getClass().isPrimitive()) {, +++ b/src/main/java/rx/internal/operators/OperatorAny.java, +import rx.exceptions.Exceptions;, +import rx.exceptions.OnErrorThrowable;, +import rx.internal.producers.SingleDelayedProducer;, +        final SingleDelayedProducer<Boolean> producer = new SingleDelayedProducer<Boolean>(child);, +                boolean result;, +                try {, +                    result = predicate.call(t);, +                } catch (Throwable e) {, +                    Exceptions.throwIfFatal(e);, +                    onError(OnErrorThrowable.addValueAsLastCause(e, t));, +                    return;, +                }, +                    producer.setValue(!returnOnEmpty);, +                // note that don't need to request more of upstream because this subscriber , +                // defaults to requesting Long.MAX_VALUE, +                        producer.setValue(false);, +                        producer.setValue(returnOnEmpty);, +        child.setProducer(producer);, +++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +        private static String renderValue(Object value){, +            if (value.getClass().isPrimitive()) {, +++ b/src/main/java/rx/internal/operators/OperatorAny.java, +import rx.exceptions.Exceptions;, +import rx.exceptions.OnErrorThrowable;, +import rx.internal.producers.SingleDelayedProducer;, +        final SingleDelayedProducer<Boolean> producer = new SingleDelayedProducer<Boolean>(child);, +                boolean result;, +                try {, +                    result = predicate.call(t);, +                } catch (Throwable e) {, +                    Exceptions.throwIfFatal(e);, +                    onError(OnErrorThrowable.addValueAsLastCause(e, t));, +                    return;, +                }, +                    producer.setValue(!returnOnEmpty);, +                // note that don't need to request more of upstream because this subscriber , +                // defaults to requesting Long.MAX_VALUE, +                        producer.setValue(false);, +                        producer.setValue(returnOnEmpty);, +        child.setProducer(producer);, +++ b/src/main/java/rx/internal/operators/OperatorTake.java, +import java.util.concurrent.atomic.AtomicLong;, +, +                    // keeps track of requests up to maximum of `limit`, +                    final AtomicLong requested = new AtomicLong(0);, +                    , +                        if (n >0 && !completed) {, +                            // because requests may happen concurrently use a CAS loop to , +                            // ensure we only request as much as needed, no more no less, +                            while (true) {, +                                long r = requested.get();, +                                long c = Math.min(n, limit - r);, +                                if (c == 0), +                                    break;, +                                else if (requested.compareAndSet(r, r + c)) {, +                                    break;, +                                }, +++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +        private static String renderValue(Object value){, +            if (value.getClass().isPrimitive()) {, +++ b/src/main/java/rx/internal/operators/OperatorAny.java, +import rx.exceptions.Exceptions;, +import rx.exceptions.OnErrorThrowable;, +import rx.internal.producers.SingleDelayedProducer;, +        final SingleDelayedProducer<Boolean> producer = new SingleDelayedProducer<Boolean>(child);, +                boolean result;, +                try {, +                    result = predicate.call(t);, +                } catch (Throwable e) {, +                    Exceptions.throwIfFatal(e);, +                    onError(OnErrorThrowable.addValueAsLastCause(e, t));, +                    return;, +                }, +                    producer.setValue(!returnOnEmpty);, +                // note that don't need to request more of upstream because this subscriber , +                // defaults to requesting Long.MAX_VALUE, +                        producer.setValue(false);, +                        producer.setValue(returnOnEmpty);, +        child.setProducer(producer);, +++ b/src/main/java/rx/internal/operators/OperatorTake.java, +import java.util.concurrent.atomic.AtomicLong;, +, +                    // keeps track of requests up to maximum of `limit`, +                    final AtomicLong requested = new AtomicLong(0);, +                    , +                        if (n >0 && !completed) {, +                            // because requests may happen concurrently use a CAS loop to , +                            // ensure we only request as much as needed, no more no less, +                            while (true) {, +                                long r = requested.get();, +                                long c = Math.min(n, limit - r);, +                                if (c == 0), +                                    break;]