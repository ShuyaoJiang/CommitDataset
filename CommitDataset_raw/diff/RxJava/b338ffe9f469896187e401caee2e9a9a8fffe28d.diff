[+++ b/src/main/java/io/reactivex/Completable.java, +     * @see #andThen(MaybeSource), +     * @see #andThen(ObservableSource), +     * @see #andThen(SingleSource), +     * @see #andThen(Publisher), +     * @see #doFinally(Action), +     * @see #doFinally(Action), +     * @see #doFinally(Action), +     * @see #doFinally(Action), +++ b/src/main/java/io/reactivex/Completable.java, +     * @see #andThen(MaybeSource), +     * @see #andThen(ObservableSource), +     * @see #andThen(SingleSource), +     * @see #andThen(Publisher), +     * @see #doFinally(Action), +     * @see #doFinally(Action), +     * @see #doFinally(Action), +     * @see #doFinally(Action), +++ b/src/test/java/io/reactivex/JavadocWording.java, +import java.util.regex.Pattern;, +                            Pattern p = Pattern.compile("@see\\s+#[A-Za-z0-9 _.,()]*Flowable");, +                            if (!p.matcher(m.javadoc).find()) {, +                        }, +                            Pattern p = Pattern.compile("@see\\s+#[A-Za-z0-9 _.,()]*Single");, +                            if (!p.matcher(m.javadoc).find()) {, +                        }, +                            Pattern p = Pattern.compile("@see\\s+#[A-Za-z0-9 _.,()]*SingleSource");, +                            if (!p.matcher(m.javadoc).find()) {, +                        }, +                            Pattern p = Pattern.compile("@see\\s+#[A-Za-z0-9 _.,()]*Observable");, +                            if (!p.matcher(m.javadoc).find()) {, +                        }, +                            Pattern p = Pattern.compile("@see\\s+#[A-Za-z0-9 _.,()]*ObservableSource");, +                            if (!p.matcher(m.javadoc).find()) {, +                        }]