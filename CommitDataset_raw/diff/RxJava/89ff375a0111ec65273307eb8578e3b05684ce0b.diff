[+++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +import java.util.Objects;, +    /**, +     * Reads from the bytes from a source {@link InputStream} and outputs {@link Observable} of, +     * {@link byte[]}s, +     * , +     * @param i, +     *            Source {@link InputStream}, +     * @return, +     */, +    /**, +     * Reads from the bytes from a source {@link InputStream} and outputs {@link Observable} of, +     * {@link byte[]}s, +     * , +     * @param i, +     *            Source {@link InputStream}, +     * @param size, +     *            internal buffer size, +     * @return, +     */, +    /**, +     * Reads from the characters from a source {@link Reader} and outputs {@link Observable} of, +     * {@link String}s, +     * , +     * @param i, +     *            Source {@link Reader}, +     * @return, +     */, +    /**, +     * Reads from the characters from a source {@link Reader} and outputs {@link Observable} of, +     * {@link String}s, +     * , +     * @param i, +     *            Source {@link Reader}, +     * @param size, +     *            internal buffer size, +     * @return, +     */, +                        o.onNext(new String(buffer, 0, n));, +     * and where it handles when a multibyte character spans two chunks., +                        if (o.isUnsubscribed()), +                            return false;, +, +     * <pre>, +     * split(["boo:an", "d:foo"], ":") --> ["boo", "and", "foo"], +     * split(["boo:an", "d:foo"], "o") --> ["b", "", ":and:f", "", ""], +     * </pre>, +, +    public final static class Line {, +        private final int number;, +        private final String text;, +, +        public Line(int number, String text) {, +            this.number = number;, +            this.text = text;, +        }, +, +        public int getNumber() {, +            return number;, +        }, +, +        public String getText() {, +            return text;, +        }, +, +        @Override, +        public int hashCode() {, +            return Objects.hash(number, text);, +        }, +, +        @Override, +        public boolean equals(Object obj) {, +            if (!(obj instanceof Line)), +                return false;, +            return Objects.equals(number, ((Line) obj).number) && Objects.equals(text, ((Line) obj).text);, +        }, +, +        @Override, +        public String toString() {, +            return number + ":" + text;, +        }, +    }, +, +    /**, +     * Splits the {@link Observable} of Strings by lines and numbers them (zero based index), +     * , +     * @param source, +     * @return, +     */, +    public static Observable<Line> byLine(Observable<String> source) {, +        return split(source, System.getProperty("line.separator")).map(new Func1<String, Line>() {, +            int lineNumber = 0;, +, +            @Override, +            public Line call(String text) {, +                return new Line(lineNumber++, text);, +            }, +        });, +    }, +++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java]