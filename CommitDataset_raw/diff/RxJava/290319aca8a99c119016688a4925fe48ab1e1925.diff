[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/test/java/rx/operators/OperatorTimeoutTests.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.isA;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;, +import org.mockito.MockitoAnnotations;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.Observable.OnSubscribe;, +import rx.schedulers.TestScheduler;, +import rx.subjects.PublishSubject;, +, +public class OperatorTimeoutTests {, +    private PublishSubject<String> underlyingSubject;, +    private TestScheduler testScheduler;, +    private Observable<String> withTimeout;, +    private static final long TIMEOUT = 3;, +    private static final TimeUnit TIME_UNIT = TimeUnit.SECONDS;, +, +    @Before, +    public void setUp() {, +        MockitoAnnotations.initMocks(this);, +, +        underlyingSubject = PublishSubject.create();, +        testScheduler = new TestScheduler();, +        withTimeout = underlyingSubject.timeout(TIMEOUT, TIME_UNIT, testScheduler);, +    }, +, +    @Test, +    public void shouldNotTimeoutIfOnNextWithinTimeout() {, +        @SuppressWarnings("unchecked"), +        Observer<String> observer = mock(Observer.class);, +        Subscription subscription = withTimeout.subscribe(observer);, +        testScheduler.advanceTimeBy(2, TimeUnit.SECONDS);, +        underlyingSubject.onNext("One");, +        verify(observer).onNext("One");, +        testScheduler.advanceTimeBy(2, TimeUnit.SECONDS);, +        verify(observer, never()).onError(any(Throwable.class));, +        subscription.unsubscribe();, +    }, +, +    @Test, +    public void shouldNotTimeoutIfSecondOnNextWithinTimeout() {, +        @SuppressWarnings("unchecked"), +        Observer<String> observer = mock(Observer.class);, +        Subscription subscription = withTimeout.subscribe(observer);, +        testScheduler.advanceTimeBy(2, TimeUnit.SECONDS);, +        underlyingSubject.onNext("One");, +        testScheduler.advanceTimeBy(2, TimeUnit.SECONDS);, +        underlyingSubject.onNext("Two");, +        verify(observer).onNext("Two");, +        testScheduler.advanceTimeBy(2, TimeUnit.SECONDS);, +        verify(observer, never()).onError(any(Throwable.class));, +        subscription.unsubscribe();, +    }, +, +    @Test, +    public void shouldTimeoutIfOnNextNotWithinTimeout() {, +        @SuppressWarnings("unchecked"), +        Observer<String> observer = mock(Observer.class);, +        Subscription subscription = withTimeout.subscribe(observer);, +        testScheduler.advanceTimeBy(TIMEOUT + 1, TimeUnit.SECONDS);, +        verify(observer).onError(any(TimeoutException.class));, +        subscription.unsubscribe();]