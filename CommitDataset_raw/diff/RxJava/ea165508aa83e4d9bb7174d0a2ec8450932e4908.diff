[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import java.util.Collection;, + * It provides overloaded methods for subscribing as well as delegate methods to the various operators., + * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +     * NOTE: Use {@link #create(Func1)} to create an Observable instead of this method unless you specifically have a need for inheritance., +     * register itself to receive push-based notifications from the Observable. A typical, +     * implementation of the <code>subscribe</code> method does the following:, +     * It stores a reference to the Observer in a collection object, such as a <code>List<T></code>, +     * object., +     * unsubscribe (that is, to stop receiving notifications) before the Observable stops sending, +     * them and invokes the Observer's {@link Observer#onCompleted()} method., +     * An <code>Observable<T></code> instance is responsible for accepting all subscriptions and, +     * notifying all Observers. Unless the documentation for a particular, +     * <code>Observable<T></code> implementation indicates otherwise, Observers should make no, +     * assumptions about the <code>Observable<T></code> implementation, such as in what order, +     * multiple Observers will receive their notifications., +     * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +     * @return a {@link Subscription} reference that allows Observers to stop receiving, +     *             notifications before the Observable has finished sending them, +     *             if the Observer provided as the argument to subscribe() is null, +     * register itself to receive push-based notifications from the Observable. A typical, +     * implementation of the <code>subscribe</code> method does the following:, +     * It stores a reference to the Observer in a collection object, such as a <code>List<T></code>, +     * object., +     * unsubscribe (that is, to stop receiving notifications) before the Observable stops sending, +     * them and invokes the Observer's {@link Observer#onCompleted()} method., +     * An <code>Observable<T></code> instance is responsible for accepting all subscriptions and, +     * notifying all Observers. Unless the documentation for a particular, +     * <code>Observable<T></code> implementation indicates otherwise, Observers should make no, +     * assumptions about the <code>Observable<T></code> implementation, such as in what order, +     * multiple Observers will receive their notifications., +     * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +     * @return a {@link Subscription} reference that allows Observers to stop receiving, +     * Returns a connectable Observable that upon connection causes the source Observable to, +     *            the subject for the connectable Observable to push source items into, +     * @return a connectable Observable that upon connection causes the source Observable to push, +     *         results into the specified subject, +     * an Observable that invokes {@link Observer#onError(Exception)} when the Observer subscribes., +                 * Accepts an {@link Observer} and calls its <code>onError</code> method., +     * Creates an Observable that will execute the given function when a {@link Observer}, +     * should invoke the Observer's <code>onNext</code>, <code>onError</code>, and, +     * <code>onCompleted</code> methods appropriately., +     * A well-formed Observable must invoke either the {@link Observer}'s <code>onCompleted</code>, +     * method exactly once or its <code>onError</code> method exactly once., +     *            a function that accepts an <code>Observer<T></code>, invokes its, +     *            as appropriate, and returns a {@link Subscription} to allow canceling the, +     *            subscription (if applicable), +     * Creates an Observable that will execute the given function when a {@link Observer}, +     * should invoke the Observer's <code>onNext</code>, <code>onError</code>, and, +     * <code>onCompleted</code> methods appropriately., +     * A well-formed Observable must invoke either the {@link Observer}'s <code>onCompleted</code>, +     * method exactly once or its <code>onError</code> method exactly once., +     *            a function that accepts an <code>Observer<T></code>, invokes its, +     *            as appropriate, and returns a {@link Subscription} to allow canceling the, +     *            subscription (if applicable), +     * its <code>onCompleted</code> method., +     *         the {@link Observer}'s <code>onCompleted</code> method, +     * Returns an Observable that invokes <code>onError</code> when an {@link Observer} subscribes, +     * to it., +     *            the error to throw, +     * @return an Observable that invokes <code>onError</code> when an {@link Observer} subscribes, +     * @return an Observable that emits only those items in the original Observable that the filter, +     *         evaluates as true, +     * @return an Observable that emits only those items in the original Observable that the filter, +     *         evaluates as true, +     * @return an Observable that emits only those items in the original Observable that the filter, +     *         evaluates as true, +     * Converts an {@link Iterable} sequence to an Observable., +     *            the type of items in the {@link Iterable} sequence and the type emitted by the, +     *            resulting Observable, +     * Converts an Array to an Observable., +     *            the type of items in the Array, and the type of items emitted by the resulting, +     *            Observable, +     * Generates an Observable that emits a sequence of integral numbers within a specified range., +     * Asynchronously subscribes and unsubscribes Observers on the specified Scheduler., +     *            the Scheduler to perform subscription and unsubscription actions on, +     *         on the specified Scheduler, +     * Asynchronously notify Observers on the specified Scheduler., +     *            the Scheduler to notify Observers on, +     *         Scheduler, +     * Returns an Observable that invokes the Observable factory whenever a new Observer, +     * subscribes., +     * The defer operator allows you to defer or delay emitting items from an Observable, +     * until such time as an Observer subscribes to the Observable. This allows an Observer to, +     * easily obtain an updates or refreshed version of the sequence., +     *            the Observable factory function to invoke for each Observer that subscribes to, +     *            the resulting Observable, +     * @return an Observable whose Observers trigger an invocation of the given Observable factory, +     *         function, +     * Returns an Observable that invokes the Observable factory whenever a new Observer, +     * subscribes., +     * until such time as an Observer subscribes to the Observable. This allows an Observer to, +     * easily obtain an updates or refreshed version of the sequence., +     *            the Observable factory function to invoke for each Observer that subscribes to, +     *            the resulting Observable, +     * @return an Observable whose Observers trigger an invocation of the given Observable factory, +     *         function, +     * This is similar to the {@link #toObservable} method, except that <code>toObservable</code>, +     * will convert an {@link Iterable} object into an Observable that emits each of the items in, +     * the {@link Iterable}, one at a time, while the <code>just</code> method would convert the]