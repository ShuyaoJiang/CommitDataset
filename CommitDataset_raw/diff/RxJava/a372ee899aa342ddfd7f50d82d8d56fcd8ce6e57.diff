[+++ b/rxjava-core/src/main/java/rx/Scheduler.java, +import static org.mockito.Matchers.anyLong;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +import org.mockito.Mockito;, +, +import rx.concurrency.TestScheduler;, +                    long startedAt = now();, +                    long timeTakenByActionInNanos = TimeUnit.MILLISECONDS.toNanos(now() - startedAt);, +    public static class UnitTest {, +        @SuppressWarnings("unchecked") // mocking is unchecked, unfortunately, +        @Test, +        public void testPeriodicScheduling() {, +            final Func1<Long, Void> calledOp = mock(Func1.class);, +            , +            final TestScheduler scheduler = new TestScheduler();, +            scheduler.schedulePeriodically(new Action0() {, +                @Override public void call() {, +                    System.out.println(scheduler.now());, +                    calledOp.call(scheduler.now());, +                }, +            }, 1, 2, TimeUnit.SECONDS);, +            , +            verify(calledOp, never()).call(anyLong());, +, +            InOrder inOrder = Mockito.inOrder(calledOp);, +            , +            scheduler.advanceTimeBy(999L, TimeUnit.MILLISECONDS);, +            inOrder.verify(calledOp, never()).call(anyLong());, +, +            scheduler.advanceTimeBy(1L, TimeUnit.MILLISECONDS);, +            inOrder.verify(calledOp, times(1)).call(1000L);, +            , +            scheduler.advanceTimeBy(1999L, TimeUnit.MILLISECONDS);, +            inOrder.verify(calledOp, never()).call(3000L);, +            , +            scheduler.advanceTimeBy(1L, TimeUnit.MILLISECONDS);, +            inOrder.verify(calledOp, times(1)).call(3000L);, +            , +            scheduler.advanceTimeBy(5L, TimeUnit.SECONDS);, +            inOrder.verify(calledOp, times(1)).call(5000L);, +            inOrder.verify(calledOp, times(1)).call(7000L);, +        }, +    }, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +import static org.mockito.Matchers.anyLong;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +import org.mockito.Mockito;, +, +import rx.concurrency.TestScheduler;, +                    long startedAt = now();, +                    long timeTakenByActionInNanos = TimeUnit.MILLISECONDS.toNanos(now() - startedAt);, +    public static class UnitTest {, +        @SuppressWarnings("unchecked") // mocking is unchecked, unfortunately, +        @Test, +        public void testPeriodicScheduling() {, +            final Func1<Long, Void> calledOp = mock(Func1.class);, +            , +            final TestScheduler scheduler = new TestScheduler();, +            scheduler.schedulePeriodically(new Action0() {, +                @Override public void call() {, +                    System.out.println(scheduler.now());, +                    calledOp.call(scheduler.now());, +                }, +            }, 1, 2, TimeUnit.SECONDS);, +            , +            verify(calledOp, never()).call(anyLong());, +, +            InOrder inOrder = Mockito.inOrder(calledOp);, +            , +            scheduler.advanceTimeBy(999L, TimeUnit.MILLISECONDS);, +            inOrder.verify(calledOp, never()).call(anyLong());, +, +            scheduler.advanceTimeBy(1L, TimeUnit.MILLISECONDS);, +            inOrder.verify(calledOp, times(1)).call(1000L);, +            , +            scheduler.advanceTimeBy(1999L, TimeUnit.MILLISECONDS);, +            inOrder.verify(calledOp, never()).call(3000L);, +            , +            scheduler.advanceTimeBy(1L, TimeUnit.MILLISECONDS);, +            inOrder.verify(calledOp, times(1)).call(3000L);, +            , +            scheduler.advanceTimeBy(5L, TimeUnit.SECONDS);, +            inOrder.verify(calledOp, times(1)).call(5000L);, +            inOrder.verify(calledOp, times(1)).call(7000L);, +        }, +    }, +++ b/rxjava-core/src/main/java/rx/concurrency/TestScheduler.java, +    // Storing time in nanoseconds internally.]