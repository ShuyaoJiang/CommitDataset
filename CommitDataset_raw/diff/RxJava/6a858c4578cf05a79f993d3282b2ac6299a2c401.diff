[+++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.7.270', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.7.270', +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.7.270', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.7.270', +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +import rx.Subscriber, +public fun<T> Function1<Subscriber<in T>, Unit>.asObservable(): Observable<T> {, +    val v = this, +    return Observable.create(object:OnSubscribe<T> {, +        override fun call(t1: Subscriber<in T>?) {, +            v(t1!!), +        }, +, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.7.270', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.7.270', +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +import rx.Subscriber, +public fun<T> Function1<Subscriber<in T>, Unit>.asObservable(): Observable<T> {, +    val v = this, +    return Observable.create(object:OnSubscribe<T> {, +        override fun call(t1: Subscriber<in T>?) {, +            v(t1!!), +        }, +, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +import rx.Observable.OnSubscribe, +import rx.Subscriber, +        Observable.create(object:OnSubscribe<String> {, +            override fun call(subscriber: Subscriber<in String>?) {, +                subscriber!!.onNext("Hello"), +                subscriber.onCompleted(), +            }, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.7.270', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.7.270', +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +import rx.Subscriber, +public fun<T> Function1<Subscriber<in T>, Unit>.asObservable(): Observable<T> {, +    val v = this, +    return Observable.create(object:OnSubscribe<T> {, +        override fun call(t1: Subscriber<in T>?) {, +            v(t1!!), +        }, +, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +import rx.Observable.OnSubscribe, +import rx.Subscriber, +        Observable.create(object:OnSubscribe<String> {, +            override fun call(subscriber: Subscriber<in String>?) {, +                subscriber!!.onNext("Hello"), +                subscriber.onCompleted(), +            }, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +import rx.Subscriber, +        {(subscriber: Subscriber<in String>) ->, +            subscriber.onNext("Hello"), +            subscriber.onCompleted(), +        }.asObservable().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.7.270', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.7.270', +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +import rx.Subscriber, +public fun<T> Function1<Subscriber<in T>, Unit>.asObservable(): Observable<T> {, +    val v = this, +    return Observable.create(object:OnSubscribe<T> {, +        override fun call(t1: Subscriber<in T>?) {, +            v(t1!!), +        }, +, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +import rx.Observable.OnSubscribe, +import rx.Subscriber, +        Observable.create(object:OnSubscribe<String> {, +            override fun call(subscriber: Subscriber<in String>?) {, +                subscriber!!.onNext("Hello"), +                subscriber.onCompleted(), +            }, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +import rx.Subscriber, +        {(subscriber: Subscriber<in String>) ->, +            subscriber.onNext("Hello"), +            subscriber.onCompleted(), +        }.asObservable().subscribe { result ->, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationCache;, +        return create(OperationCache.cache(this));, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.7.270', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.7.270', +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +import rx.Subscriber, +public fun<T> Function1<Subscriber<in T>, Unit>.asObservable(): Observable<T> {, +    val v = this, +    return Observable.create(object:OnSubscribe<T> {, +        override fun call(t1: Subscriber<in T>?) {, +            v(t1!!)]