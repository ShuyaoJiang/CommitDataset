[+++ b/src/main/java/io/reactivex/Observable.java, +        return lift(new OperatorAll<>(predicate));, +        return all(v -> false);, +++ b/src/main/java/io/reactivex/Observable.java, +        return lift(new OperatorAll<>(predicate));, +        return all(v -> false);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorAll.java, +import java.util.concurrent.atomic.AtomicInteger;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +        return new AllSubscriber<>(t, predicate);, +    static final class AllSubscriber<T> extends AtomicInteger implements Subscriber<T>, Subscription {, +        /** */, +        private static final long serialVersionUID = -3521127104134758517L;, +        static final int NO_REQUEST_NO_VALUE = 0;, +        static final int NO_REQUEST_HAS_VALUE = 1;, +        static final int HAS_REQUEST_NO_VALUE = 2;, +        static final int HAS_REQUEST_HAS_VALUE = 3;, +        , +        public AllSubscriber(Subscriber<? super Boolean> actual, Predicate<? super T> predicate) {, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +                lazySet(HAS_REQUEST_HAS_VALUE);, +                lazySet(HAS_REQUEST_HAS_VALUE);, +            if (done) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            if (done) {, +                return;, +            }, +, +            for (;;) {, +                int state = get();, +                if (state == NO_REQUEST_HAS_VALUE || state == HAS_REQUEST_HAS_VALUE) {, +                    break;, +                }, +                if (state == HAS_REQUEST_NO_VALUE) {, +                    if (compareAndSet(HAS_REQUEST_NO_VALUE, HAS_REQUEST_HAS_VALUE)) {, +                    break;, +                }, +                if (compareAndSet(NO_REQUEST_NO_VALUE, NO_REQUEST_HAS_VALUE)) {, +                    break;, +                }, +            }, +            if (SubscriptionHelper.validateRequest(n)) {, +                return;, +            }, +            , +            for (;;) {, +                int state = get();, +                if (state == HAS_REQUEST_NO_VALUE || state == HAS_REQUEST_HAS_VALUE) {, +                    break;, +                }, +                if (state == NO_REQUEST_HAS_VALUE) {, +                    if (compareAndSet(state, HAS_REQUEST_HAS_VALUE)) {, +                        actual.onNext(true);, +                        actual.onComplete();, +                    }, +                    break;, +                }, +                if (compareAndSet(NO_REQUEST_NO_VALUE, HAS_REQUEST_NO_VALUE)) {, +                    s.request(Long.MAX_VALUE);, +                    break;, +                }, +            }, +            lazySet(HAS_REQUEST_HAS_VALUE);, +++ b/src/main/java/io/reactivex/Observable.java, +        return lift(new OperatorAll<>(predicate));, +        return all(v -> false);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorAll.java, +import java.util.concurrent.atomic.AtomicInteger;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +        return new AllSubscriber<>(t, predicate);, +    static final class AllSubscriber<T> extends AtomicInteger implements Subscriber<T>, Subscription {, +        /** */, +        private static final long serialVersionUID = -3521127104134758517L;, +        static final int NO_REQUEST_NO_VALUE = 0;, +        static final int NO_REQUEST_HAS_VALUE = 1;, +        static final int HAS_REQUEST_NO_VALUE = 2;, +        static final int HAS_REQUEST_HAS_VALUE = 3;, +        , +        public AllSubscriber(Subscriber<? super Boolean> actual, Predicate<? super T> predicate) {, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +                lazySet(HAS_REQUEST_HAS_VALUE);, +                lazySet(HAS_REQUEST_HAS_VALUE);, +            if (done) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            if (done) {, +                return;, +            }, +, +            for (;;) {, +                int state = get();, +                if (state == NO_REQUEST_HAS_VALUE || state == HAS_REQUEST_HAS_VALUE) {, +                    break;, +                }, +                if (state == HAS_REQUEST_NO_VALUE) {, +                    if (compareAndSet(HAS_REQUEST_NO_VALUE, HAS_REQUEST_HAS_VALUE)) {, +                    break;]