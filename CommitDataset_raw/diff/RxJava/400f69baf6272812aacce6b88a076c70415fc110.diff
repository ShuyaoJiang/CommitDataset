[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +  /**, +   * Register a callback to be run when Subscriber is unsubscribed, +   *, +   * @param u callback to run when unsubscribed, +   */, +  final def add(u: => Unit): Unit = {, +    asJavaSubscriber.add(Subscription(u).asJavaSubscription), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +  /**, +   * Register a callback to be run when Subscriber is unsubscribed, +   *, +   * @param u callback to run when unsubscribed, +   */, +  final def add(u: => Unit): Unit = {, +    asJavaSubscriber.add(Subscription(u).asJavaSubscription), +  }, +, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/SubscriberTests.scala, +  @Test def testBlockCallbackOnlyOnce() {, +    var called = false, +    val o = Observable[Int](subscriber => {, +      subscriber.add({ called = !called }), +    }), +, +    val subscription = o.subscribe(), +    subscription.unsubscribe(), +    subscription.unsubscribe(), +, +    // Even if called multiple times, callback is only called once, +    assertTrue(called), +    assertTrue(subscription.isUnsubscribed), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +  /**, +   * Register a callback to be run when Subscriber is unsubscribed, +   *, +   * @param u callback to run when unsubscribed, +   */, +  final def add(u: => Unit): Unit = {, +    asJavaSubscriber.add(Subscription(u).asJavaSubscription), +  }, +, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/SubscriberTests.scala, +  @Test def testBlockCallbackOnlyOnce() {, +    var called = false, +    val o = Observable[Int](subscriber => {, +      subscriber.add({ called = !called }), +    }), +, +    val subscription = o.subscribe(), +    subscription.unsubscribe(), +    subscription.unsubscribe(), +, +    // Even if called multiple times, callback is only called once, +    assertTrue(called), +    assertTrue(subscription.isUnsubscribed), +  }, +, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorGroupBy.java, +    public Subscriber<? super T> call(final Subscriber<? super GroupedObservable<K, T>> childObserver) {, +        return new GroupBySubscriber<K, T>(keySelector, childObserver);, +        final Subscriber<? super GroupedObservable<K, T>> childObserver;, +        public GroupBySubscriber(Func1<? super T, ? extends K> keySelector, Subscriber<? super GroupedObservable<K, T>> childObserver) {, +            this.childObserver = childObserver;, +                        childObserver.onCompleted();, +                childObserver.onError(e);, +                BufferUntilSubscriber<T> gps = groups.get(key);, +                if (gps == null) {, +                    if (childObserver.isUnsubscribed()) {, +                    gps = BufferUntilSubscriber.create();, +                    final BufferUntilSubscriber<T> _gps = gps;, +                            _gps.unsafeSubscribe(new Subscriber<T>(o) {, +                    groups.put(key, gps);, +                    childObserver.onNext(go);, +                gps.onNext(t);, +            if (COUNTER_UPDATER.decrementAndGet(this) <= 0 && (terminated == 1 || childObserver.isUnsubscribed())) {, +                    if (childObserver.isUnsubscribed()) {, +                    childObserver.onCompleted();]