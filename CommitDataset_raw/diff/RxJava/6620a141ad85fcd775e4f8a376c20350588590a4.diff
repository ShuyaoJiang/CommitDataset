[+++ b/src/main/java/rx/internal/operators/OperatorAll.java, +        return new Subscriber<T>(child) {, +++ b/src/main/java/rx/internal/operators/OperatorAll.java, +        return new Subscriber<T>(child) {, +++ b/src/main/java/rx/internal/operators/OperatorAny.java, +        return new Subscriber<T>(child) {, +++ b/src/main/java/rx/internal/operators/OperatorAll.java, +        return new Subscriber<T>(child) {, +++ b/src/main/java/rx/internal/operators/OperatorAny.java, +        return new Subscriber<T>(child) {, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +import java.lang.reflect.Method;, +import rx.*;, +import rx.functions.Action0;, +import rx.plugins.*;, +import rx.subscriptions.Subscriptions;, +, +        // Java 7+: cancelled future tasks can be removed from the executor thus avoiding memory leak, +        for (Method m : executor.getClass().getMethods()) {, +            if (m.getName().equals("setRemoveOnCancelPolicy"), +                    && m.getParameterTypes().length == 1, +                    && m.getParameterTypes()[0] == Boolean.TYPE) {, +                try {, +                    m.invoke(executor, true);, +                } catch (Exception ex) {, +                    RxJavaPlugins.getInstance().getErrorHandler().handleError(ex);, +                }, +                break;, +            }, +        }, +++ b/src/main/java/rx/internal/operators/OperatorAll.java, +        return new Subscriber<T>(child) {, +++ b/src/main/java/rx/internal/operators/OperatorAny.java, +        return new Subscriber<T>(child) {, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +import java.lang.reflect.Method;, +import rx.*;, +import rx.functions.Action0;, +import rx.plugins.*;, +import rx.subscriptions.Subscriptions;, +, +        // Java 7+: cancelled future tasks can be removed from the executor thus avoiding memory leak, +        for (Method m : executor.getClass().getMethods()) {, +            if (m.getName().equals("setRemoveOnCancelPolicy"), +                    && m.getParameterTypes().length == 1, +                    && m.getParameterTypes()[0] == Boolean.TYPE) {, +                try {, +                    m.invoke(executor, true);, +                } catch (Exception ex) {, +                    RxJavaPlugins.getInstance().getErrorHandler().handleError(ex);, +                }, +                break;, +            }, +        }, +++ b/src/test/java/rx/internal/operators/OperatorAllTest.java, +import static org.junit.Assert.assertFalse;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import rx.Observable;, +import rx.Observer;, +import java.util.Arrays;, +, +++ b/src/main/java/rx/internal/operators/OperatorAll.java, +        return new Subscriber<T>(child) {, +++ b/src/main/java/rx/internal/operators/OperatorAny.java, +        return new Subscriber<T>(child) {, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +import java.lang.reflect.Method;, +import rx.*;, +import rx.functions.Action0;, +import rx.plugins.*;, +import rx.subscriptions.Subscriptions;, +, +        // Java 7+: cancelled future tasks can be removed from the executor thus avoiding memory leak, +        for (Method m : executor.getClass().getMethods()) {, +            if (m.getName().equals("setRemoveOnCancelPolicy"), +                    && m.getParameterTypes().length == 1, +                    && m.getParameterTypes()[0] == Boolean.TYPE) {, +                try {, +                    m.invoke(executor, true);, +                } catch (Exception ex) {, +                    RxJavaPlugins.getInstance().getErrorHandler().handleError(ex);, +                }, +                break;, +            }, +        }, +++ b/src/test/java/rx/internal/operators/OperatorAllTest.java, +import static org.junit.Assert.assertFalse;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import rx.Observable;, +import rx.Observer;, +import java.util.Arrays;, +, +++ b/src/test/java/rx/internal/operators/OperatorAnyTest.java, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;]