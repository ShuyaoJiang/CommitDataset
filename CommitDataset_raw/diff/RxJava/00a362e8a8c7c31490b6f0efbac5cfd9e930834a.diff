[+++ b/rxjava-core/src/main/java/rx/concurrency/SleepingAction.java, +        if (execTime > scheduler.now()) {, +            long delay = execTime - scheduler.now();, +            if (delay> 0) {, +                    Thread.sleep(delay);, +                }, +             catch (InterruptedException e) {, +        }, +++ b/rxjava-core/src/main/java/rx/concurrency/SleepingAction.java, +        if (execTime > scheduler.now()) {, +            long delay = execTime - scheduler.now();, +            if (delay> 0) {, +                    Thread.sleep(delay);, +                }, +             catch (InterruptedException e) {, +        }, +++ b/rxjava-core/src/main/java/rx/operators/OperationObserveOn.java, +import static org.mockito.Matchers.*;, +import rx.util.functions.Action0;, +            verify(scheduler, times(4)).schedule(any(Action0.class));, +            verifyNoMoreInteractions(scheduler);, +, +++ b/rxjava-core/src/main/java/rx/concurrency/SleepingAction.java, +        if (execTime > scheduler.now()) {, +            long delay = execTime - scheduler.now();, +            if (delay> 0) {, +                    Thread.sleep(delay);, +                }, +             catch (InterruptedException e) {, +        }, +++ b/rxjava-core/src/main/java/rx/operators/OperationObserveOn.java, +import static org.mockito.Matchers.*;, +import rx.util.functions.Action0;, +            verify(scheduler, times(4)).schedule(any(Action0.class));, +            verifyNoMoreInteractions(scheduler);, +, +++ b/rxjava-core/src/main/java/rx/operators/ScheduledObserver.java, +        scheduler.schedule(new Action0() {, +            @Override, +            public void call() {, +                underlying.onCompleted();, +            }, +        });, +        scheduler.schedule(new Action0() {, +            @Override, +            public void call() {, +                underlying.onError(e);, +            }, +        });, +                underlying.onNext(args);]