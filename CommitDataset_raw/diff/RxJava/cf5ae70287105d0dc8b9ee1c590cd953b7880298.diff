[+++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +                        unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +                        unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +                observer.unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +                        unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +                observer.unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorToIterator.java, +import rx.Subscription;, +        final Subscription subscription = source.materialize().subscribe(new Subscriber<Notification<? extends T>>() {, +                    subscription.unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +                        unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +                observer.unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorToIterator.java, +import rx.Subscription;, +        final Subscription subscription = source.materialize().subscribe(new Subscriber<Notification<? extends T>>() {, +                    subscription.unsubscribe();, +++ b/src/main/java/rx/observables/BlockingObservable.java, +import rx.Subscription;, +        Subscription subscription = o.subscribe(new Subscriber<T>() {, +            subscription.unsubscribe();, +        Subscription subscription = observable.subscribe(new Subscriber<T>() {, +            subscription.unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +                        unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +                observer.unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorToIterator.java, +import rx.Subscription;, +        final Subscription subscription = source.materialize().subscribe(new Subscriber<Notification<? extends T>>() {, +                    subscription.unsubscribe();, +++ b/src/main/java/rx/observables/BlockingObservable.java, +import rx.Subscription;, +        Subscription subscription = o.subscribe(new Subscriber<T>() {, +            subscription.unsubscribe();, +        Subscription subscription = observable.subscribe(new Subscriber<T>() {, +            subscription.unsubscribe();, +++ b/src/test/java/rx/observables/BlockingObservableTest.java, +, +    @Test, +    public void testUnsubscribeFromSingleWhenInterrupted() throws InterruptedException {, +        new InterruptionTests().assertUnsubscribeIsInvoked("single()", new Action1<BlockingObservable<Void>>() {, +            @Override, +            public void call(final BlockingObservable<Void> o) {, +                o.single();, +            }, +        });, +    }, +, +    @Test, +    public void testUnsubscribeFromForEachWhenInterrupted() throws InterruptedException {, +        new InterruptionTests().assertUnsubscribeIsInvoked("forEach()", new Action1<BlockingObservable<Void>>() {, +            @Override, +            public void call(final BlockingObservable<Void> o) {, +                o.forEach(new Action1<Void>() {, +                    @Override, +                    public void call(final Void aVoid) {, +                        // nothing, +                    }, +                });, +            }, +        });, +    }, +, +    @Test, +    public void testUnsubscribeFromFirstWhenInterrupted() throws InterruptedException {, +        new InterruptionTests().assertUnsubscribeIsInvoked("first()", new Action1<BlockingObservable<Void>>() {, +            @Override, +            public void call(final BlockingObservable<Void> o) {, +                o.first();, +            }, +        });, +    }, +, +    @Test, +    public void testUnsubscribeFromLastWhenInterrupted() throws InterruptedException {, +        new InterruptionTests().assertUnsubscribeIsInvoked("last()", new Action1<BlockingObservable<Void>>() {, +            @Override, +            public void call(final BlockingObservable<Void> o) {, +                o.last();, +            }, +        });, +    }, +, +    @Test, +    public void testUnsubscribeFromLatestWhenInterrupted() throws InterruptedException {, +        new InterruptionTests().assertUnsubscribeIsInvoked("latest()", new Action1<BlockingObservable<Void>>() {, +            @Override, +            public void call(final BlockingObservable<Void> o) {, +                o.latest().iterator().next();, +            }, +        });, +    }, +, +    @Test]