[+++ b/src/main/java/io/reactivex/Observable.java, +    , +    public final Observable<Observable<T>> window(long count) {, +        return window(count, count, bufferSize());, +    }, +, +    public final Observable<Observable<T>> window(long count, long skip) {, +        return window(count, skip, bufferSize());, +    }, +    , +    public final Observable<Observable<T>> window(long count, long skip, int bufferSize) {, +        if (skip <= 0) {, +            throw new IllegalArgumentException("skip > 0 required but it was " + skip);, +        }, +        if (count <= 0) {, +            throw new IllegalArgumentException("count > 0 required but it was " + count);, +        }, +        validateBufferSize(bufferSize);, +        return lift(new OperatorWindow<>(count, skip, bufferSize));, +    }, +, +, +++ b/src/main/java/io/reactivex/Observable.java, +    , +    public final Observable<Observable<T>> window(long count) {, +        return window(count, count, bufferSize());, +    }, +, +    public final Observable<Observable<T>> window(long count, long skip) {, +        return window(count, skip, bufferSize());, +    }, +    , +    public final Observable<Observable<T>> window(long count, long skip, int bufferSize) {, +        if (skip <= 0) {, +            throw new IllegalArgumentException("skip > 0 required but it was " + skip);, +        }, +        if (count <= 0) {, +            throw new IllegalArgumentException("count > 0 required but it was " + count);, +        }, +        validateBufferSize(bufferSize);, +        return lift(new OperatorWindow<>(count, skip, bufferSize));, +    }, +, +, +++ b/src/main/java/io/reactivex/internal/operators/OperatorWindow.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import java.util.ArrayDeque;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.reactivestreams.*;, +, +import io.reactivex.Observable;, +import io.reactivex.Observable.Operator;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +import io.reactivex.internal.util.BackpressureHelper;, +import io.reactivex.subjects.UnicastSubject;, +, +public final class OperatorWindow<T> implements Operator<Observable<T>, T> {, +    final long count;, +    final long skip;, +    final int capacityHint;, +    , +    public OperatorWindow(long count, long skip, int capacityHint) {, +        this.count = count;, +        this.skip = skip;, +        this.capacityHint = capacityHint;, +    }, +    , +    @Override, +    public Subscriber<? super T> apply(Subscriber<? super Observable<T>> t) {, +        if (count == skip) {, +            return new WindowExactSubscriber<>(t, count, capacityHint);, +        }, +        return new WindowSkipSubscriber<>(t, count, skip, capacityHint);, +    }, +    , +    static final class WindowExactSubscriber<T> implements Subscriber<T>, Subscription {, +        final Subscriber<? super Observable<T>> actual;, +        final long count;, +        final int capacityHint;, +        , +        long size;, +        , +        Subscription s;, +        , +        UnicastSubject<T> window;]