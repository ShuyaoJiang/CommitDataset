[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits only the very first item emitted by the source Observable, or raises an, +     * {@code NoSuchElementException} if the source Observable is empty., +     * a specified condition, or raises an {@code NoSuchElementException} if no such items are emitted., +     * an {@code NoSuchElementException} if the source Observable is empty., +     * given condition, or an {@code NoSuchElementException} if no such items are emitted., +     * emits only a single item. If the source Observable emits more than one item or no items, throw an, +     * {@code NoSuchElementException}., +     * such item or no such items, throw an {@code NoSuchElementException}., +     * @throws IllegalArgumentException, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits only the very first item emitted by the source Observable, or raises an, +     * {@code NoSuchElementException} if the source Observable is empty., +     * a specified condition, or raises an {@code NoSuchElementException} if no such items are emitted., +     * an {@code NoSuchElementException} if the source Observable is empty., +     * given condition, or an {@code NoSuchElementException} if no such items are emitted., +     * emits only a single item. If the source Observable emits more than one item or no items, throw an, +     * {@code NoSuchElementException}., +     * such item or no such items, throw an {@code NoSuchElementException}., +     * @throws IllegalArgumentException, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +                    if (!isUnsubscribed()) {, +                        schedule(this, nextTick - TimeUnit.MILLISECONDS.toNanos(now()), TimeUnit.NANOSECONDS);, +            return schedule(recursiveAction, initialDelay, unit);, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits only the very first item emitted by the source Observable, or raises an, +     * {@code NoSuchElementException} if the source Observable is empty., +     * a specified condition, or raises an {@code NoSuchElementException} if no such items are emitted., +     * an {@code NoSuchElementException} if the source Observable is empty., +     * given condition, or an {@code NoSuchElementException} if no such items are emitted., +     * emits only a single item. If the source Observable emits more than one item or no items, throw an, +     * {@code NoSuchElementException}., +     * such item or no such items, throw an {@code NoSuchElementException}., +     * @throws IllegalArgumentException, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +                    if (!isUnsubscribed()) {, +                        schedule(this, nextTick - TimeUnit.MILLISECONDS.toNanos(now()), TimeUnit.NANOSECONDS);, +            return schedule(recursiveAction, initialDelay, unit);, +++ b/rxjava-core/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, + * Wait for and iterate over the latest values of the source observable., + * If the source works faster than the iterator, values may be skipped, but, + * not the onError or onCompleted events., +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits only the very first item emitted by the source Observable, or raises an, +     * {@code NoSuchElementException} if the source Observable is empty., +     * a specified condition, or raises an {@code NoSuchElementException} if no such items are emitted., +     * an {@code NoSuchElementException} if the source Observable is empty., +     * given condition, or an {@code NoSuchElementException} if no such items are emitted., +     * emits only a single item. If the source Observable emits more than one item or no items, throw an, +     * {@code NoSuchElementException}., +     * such item or no such items, throw an {@code NoSuchElementException}., +     * @throws IllegalArgumentException, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +                    if (!isUnsubscribed()) {, +                        schedule(this, nextTick - TimeUnit.MILLISECONDS.toNanos(now()), TimeUnit.NANOSECONDS);, +            return schedule(recursiveAction, initialDelay, unit);, +++ b/rxjava-core/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, + * Wait for and iterate over the latest values of the source observable., + * If the source works faster than the iterator, values may be skipped, but, + * not the onError or onCompleted events.]