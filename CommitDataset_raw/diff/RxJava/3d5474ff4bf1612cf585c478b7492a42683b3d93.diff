[+++ b/rxjava-core/src/main/java/rx/operators/OperatorZip.java, +        static Object NULL_SENTINEL = new Object();, +        static Object COMPLETE_SENTINEL = new Object();, +, +                        if (vs[i] == NULL_SENTINEL) {, +                            // special handling for null, +                            vs[i] = null;, +                        } else if (vs[i] == COMPLETE_SENTINEL) {, +                            // special handling for onComplete, +                        } else if (vs[i] == null) {, +                            if (((InnerObserver) observers[i]).items.peek() == COMPLETE_SENTINEL) {, +                items.add(COMPLETE_SENTINEL);, +                if (t == null) {, +                    items.add(NULL_SENTINEL);, +                } else {, +                }, +++ b/rxjava-core/src/main/java/rx/operators/OperatorZip.java, +        static Object NULL_SENTINEL = new Object();, +        static Object COMPLETE_SENTINEL = new Object();, +, +                        if (vs[i] == NULL_SENTINEL) {, +                            // special handling for null, +                            vs[i] = null;, +                        } else if (vs[i] == COMPLETE_SENTINEL) {, +                            // special handling for onComplete, +                        } else if (vs[i] == null) {, +                            if (((InnerObserver) observers[i]).items.peek() == COMPLETE_SENTINEL) {, +                items.add(COMPLETE_SENTINEL);, +                if (t == null) {, +                    items.add(NULL_SENTINEL);, +                } else {, +                }, +++ b/rxjava-core/src/test/java/rx/operators/OperatorZipTest.java, +import rx.Notification;, +    @Test, +    public void testEmitNull() {, +        Observable<Integer> oi = Observable.from(1, null, 3);, +        Observable<String> os = Observable.from("a", "b", null);, +        Observable<String> o = Observable.zip(oi, os, new Func2<Integer, String, String>() {, +, +            @Override, +            public String call(Integer t1, String t2) {, +                return t1 + "-" + t2;, +            }, +, +        });, +, +        final ArrayList<String> list = new ArrayList<String>();, +        o.subscribe(new Action1<String>() {, +, +            @Override, +            public void call(String s) {, +                System.out.println(s);, +                list.add(s);, +            }, +        });, +, +        assertEquals(3, list.size());, +        assertEquals("1-a", list.get(0));, +        assertEquals("null-b", list.get(1));, +        assertEquals("3-null", list.get(2));, +    }, +, +    @Test, +    public void testEmitMaterializedNotifications() {, +        Observable<Notification<Integer>> oi = Observable.from(1, 2, 3).materialize();, +        Observable<Notification<String>> os = Observable.from("a", "b", "c").materialize();, +        Observable<String> o = Observable.zip(oi, os, new Func2<Notification<Integer>, Notification<String>, String>() {, +, +            @Override, +            public String call(Notification<Integer> t1, Notification<String> t2) {, +                return t1.getKind() + "_" + t1.getValue() + "-" + t2.getKind() + "_" + t2.getValue();, +            }, +, +        });, +, +        final ArrayList<String> list = new ArrayList<String>();, +        o.subscribe(new Action1<String>() {, +, +            @Override, +            public void call(String s) {, +                System.out.println(s);, +                list.add(s);, +            }, +        });, +, +        assertEquals(4, list.size());, +        assertEquals("OnNext_1-OnNext_a", list.get(0));, +        assertEquals("OnNext_2-OnNext_b", list.get(1));, +        assertEquals("OnNext_3-OnNext_c", list.get(2));, +        assertEquals("OnCompleted_null-OnCompleted_null", list.get(3));, +    }, +]