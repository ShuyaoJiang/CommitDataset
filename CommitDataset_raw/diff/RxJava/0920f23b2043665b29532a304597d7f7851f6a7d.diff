[+++ b/src/main/java/rx/Notification.java, +public final class Notification<T> {, +++ b/src/main/java/rx/Notification.java, +public final class Notification<T> {, +++ b/src/main/java/rx/Observable.java, +        return create(new OnSubscribeDelayWithSelector<T, U, V>(this, subscriptionDelay, itemDelay));, +        return create(new OnSubscribeDelayWithSelector<T, U, U>(this, itemDelay));, +        return create(new OnSubscribeDelay<T>(this, delay, unit, scheduler));, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#groupby-and-groupbyuntil">RxJava wiki: groupBy</a>, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#groupby-and-groupbyuntil">RxJava wiki: groupBy</a>, +     * Returns an Observable that counts the total number of items emitted by the source Observable and emits, +     * this count as a 64-bit Long., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/longCount.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure Support:</b></dt>, +     *  <dd>This operator does not support backpressure because by intent it will receive all values and reduce, +     *      them to a single {@code onNext}.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code longCount} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @return an Observable that emits a single item: the number of items emitted by the source Observable as a, +     *         64-bit Long item, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#count-and-longcount">RxJava wiki: count</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229120.aspx">MSDN: Observable.LongCount</a>, +     * @see #count(), +     */, +    public final Observable<Long> longCount() {, +        return reduce(0L, new Func2<Long, T, Long>() {, +            @Override, +            public final Long call(Long t1, T t2) {, +                return t1 + 1;, +            }, +        });, +    }, +, +    /**, +     * a {@link Notification} to the Observable provided as an argument to the {@code notificationHandler}, +     * function. If the Observable returned {@code onCompletes} or {@code onErrors} then {@code repeatWhen} will, +     * a {@link Notification} to the Observable provided as an argument to the {@code notificationHandler}, +     * function. If the Observable returned {@code onCompletes} or {@code onErrors} then {@code repeatWhen} will, +     * {@link Notification} to the Observable provided as an argument to the {@code notificationHandler}, +     * function. If the Observable returned {@code onCompletes} or {@code onErrors} then {@code retry} will call, +     * Returns an Observable that emits the same values as the source observable with the exception of an {@code onError}., +     * An onError will emit a {@link Notification} to the observable provided as an argument to the notificationHandler , +     * func. If the observable returned {@code onCompletes} or {@code onErrors} then retry will call {@code onCompleted} , +     * or {@code onError} on the child subscription. Otherwise, this observable will resubscribe to the source observable, on a particular Scheduler.    , +++ b/src/main/java/rx/Notification.java, +public final class Notification<T> {, +++ b/src/main/java/rx/Observable.java, +        return create(new OnSubscribeDelayWithSelector<T, U, V>(this, subscriptionDelay, itemDelay));, +        return create(new OnSubscribeDelayWithSelector<T, U, U>(this, itemDelay));, +        return create(new OnSubscribeDelay<T>(this, delay, unit, scheduler));, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#groupby-and-groupbyuntil">RxJava wiki: groupBy</a>, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Transforming-Observables#groupby-and-groupbyuntil">RxJava wiki: groupBy</a>, +     * Returns an Observable that counts the total number of items emitted by the source Observable and emits, +     * this count as a 64-bit Long., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/longCount.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure Support:</b></dt>, +     *  <dd>This operator does not support backpressure because by intent it will receive all values and reduce, +     *      them to a single {@code onNext}.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code longCount} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @return an Observable that emits a single item: the number of items emitted by the source Observable as a, +     *         64-bit Long item, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators#count-and-longcount">RxJava wiki: count</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229120.aspx">MSDN: Observable.LongCount</a>, +     * @see #count(), +     */, +    public final Observable<Long> longCount() {, +        return reduce(0L, new Func2<Long, T, Long>() {, +            @Override, +            public final Long call(Long t1, T t2) {, +                return t1 + 1;, +            }, +        });, +    }, +, +    /**, +     * a {@link Notification} to the Observable provided as an argument to the {@code notificationHandler}, +     * function. If the Observable returned {@code onCompletes} or {@code onErrors} then {@code repeatWhen} will, +     * a {@link Notification} to the Observable provided as an argument to the {@code notificationHandler}, +     * function. If the Observable returned {@code onCompletes} or {@code onErrors} then {@code repeatWhen} will, +     * {@link Notification} to the Observable provided as an argument to the {@code notificationHandler}, +     * function. If the Observable returned {@code onCompletes} or {@code onErrors} then {@code retry} will call, +     * Returns an Observable that emits the same values as the source observable with the exception of an {@code onError}., +     * An onError will emit a {@link Notification} to the observable provided as an argument to the notificationHandler , +     * func. If the observable returned {@code onCompletes} or {@code onErrors} then retry will call {@code onCompleted} , +     * or {@code onError} on the child subscription. Otherwise, this observable will resubscribe to the source observable, on a particular Scheduler.    , +++ b/src/main/java/rx/exceptions/Exceptions.java, +public final class Exceptions {, +++ b/src/main/java/rx/Notification.java, +public final class Notification<T> {, +++ b/src/main/java/rx/Observable.java, +        return create(new OnSubscribeDelayWithSelector<T, U, V>(this, subscriptionDelay, itemDelay));]