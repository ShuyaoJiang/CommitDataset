[+++ b/rxjava-core/src/main/java/rx/Observable.java, +        try {, +        } catch (Throwable e) {, +            if (e instanceof OnErrorNotImplementedException) {, +                throw (OnErrorNotImplementedException) e;, +            }, +            // handle broken contracts: https://github.com/Netflix/RxJava/issues/1090, +            subscriber.onError(e);, +        }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        try {, +        } catch (Throwable e) {, +            if (e instanceof OnErrorNotImplementedException) {, +                throw (OnErrorNotImplementedException) e;, +            }, +            // handle broken contracts: https://github.com/Netflix/RxJava/issues/1090, +            subscriber.onError(e);, +        }, +++ b/rxjava-core/src/test/java/rx/operators/OperatorMergeTest.java, +    , +    @Test, +    public void testThrownErrorHandling() {, +        TestSubscriber<String> ts = new TestSubscriber<String>();, +        Observable<String> o1 = Observable.create(new OnSubscribe<String>() {, +, +            @Override, +            public void call(Subscriber<? super String> s) {, +                throw new RuntimeException("fail");, +            }, +, +        });, +, +        Observable.merge(o1, o1).subscribe(ts);, +        ts.awaitTerminalEvent(1000, TimeUnit.MILLISECONDS);, +        ts.assertTerminalEvent();, +        System.out.println("Error: " + ts.getOnErrorEvents());, +    }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        try {, +        } catch (Throwable e) {, +            if (e instanceof OnErrorNotImplementedException) {, +                throw (OnErrorNotImplementedException) e;, +            }, +            // handle broken contracts: https://github.com/Netflix/RxJava/issues/1090, +            subscriber.onError(e);, +        }, +++ b/rxjava-core/src/test/java/rx/operators/OperatorMergeTest.java, +    , +    @Test, +    public void testThrownErrorHandling() {, +        TestSubscriber<String> ts = new TestSubscriber<String>();, +        Observable<String> o1 = Observable.create(new OnSubscribe<String>() {, +, +            @Override, +            public void call(Subscriber<? super String> s) {, +                throw new RuntimeException("fail");, +            }, +, +        });, +, +        Observable.merge(o1, o1).subscribe(ts);, +        ts.awaitTerminalEvent(1000, TimeUnit.MILLISECONDS);, +        ts.assertTerminalEvent();, +        System.out.println("Error: " + ts.getOnErrorEvents());, +    }, +++ b/rxjava-core/src/test/java/rx/operators/OperatorSubscribeOnTest.java, +    , +    @Test, +    public void testThrownErrorHandling() {, +        TestSubscriber<String> ts = new TestSubscriber<String>();, +        Observable.create(new OnSubscribe<String>() {, +, +            @Override, +            public void call(Subscriber<? super String> s) {, +                throw new RuntimeException("fail");, +            }, +, +        }).subscribeOn(Schedulers.computation()).subscribe(ts);, +        ts.awaitTerminalEvent(1000, TimeUnit.MILLISECONDS);, +        ts.assertTerminalEvent();, +    }, +    , +    @Test, +    public void testOnError() {, +        TestSubscriber<String> ts = new TestSubscriber<String>();, +        Observable.create(new OnSubscribe<String>() {, +, +            @Override, +            public void call(Subscriber<? super String> s) {, +                s.onError(new RuntimeException("fail"));, +            }, +, +        }).subscribeOn(Schedulers.computation()).subscribe(ts);, +        ts.awaitTerminalEvent(1000, TimeUnit.MILLISECONDS);, +        ts.assertTerminalEvent();, +    }]