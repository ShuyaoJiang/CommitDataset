[+++ b/rxjava-core/src/main/java/rx/Observable.java, +                    Subscriber<? super T> st = hook.onLift(lift).call(o);, +                    // new Subscriber created and being subscribed with so 'onStart' it, +                    st.onStart();, +                    onSubscribe.call(st);, +            // new Subscriber so onStart it, +            subscriber.onStart();, +        , +        // new Subscriber so onStart it, +        subscriber.onStart();, +        , +++ b/rxjava-core/src/main/java/rx/Observable.java, +                    Subscriber<? super T> st = hook.onLift(lift).call(o);, +                    // new Subscriber created and being subscribed with so 'onStart' it, +                    st.onStart();, +                    onSubscribe.call(st);, +            // new Subscriber so onStart it, +            subscriber.onStart();, +        , +        // new Subscriber so onStart it, +        subscriber.onStart();, +        , +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +    public void onStart() {, +        // do nothing by default, +    }, +    , +++ b/rxjava-core/src/main/java/rx/Observable.java, +                    Subscriber<? super T> st = hook.onLift(lift).call(o);, +                    // new Subscriber created and being subscribed with so 'onStart' it, +                    st.onStart();, +                    onSubscribe.call(st);, +            // new Subscriber so onStart it, +            subscriber.onStart();, +        , +        // new Subscriber so onStart it, +        subscriber.onStart();, +        , +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +    public void onStart() {, +        // do nothing by default, +    }, +    , +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +            super(actual);, +        @Override, +        public void onStart() {, +            // we request backpressure so we can handle long-running Observables that are enqueueing, such as flatMap use cases, +            // we decouple the Producer chain while keeping the Subscription chain together (perf benefit) via super(actual), +            request(RxRingBuffer.SIZE);, +        }, +        , +++ b/rxjava-core/src/main/java/rx/Observable.java, +                    Subscriber<? super T> st = hook.onLift(lift).call(o);, +                    // new Subscriber created and being subscribed with so 'onStart' it, +                    st.onStart();, +                    onSubscribe.call(st);, +            // new Subscriber so onStart it, +            subscriber.onStart();, +        , +        // new Subscriber so onStart it, +        subscriber.onStart();, +        , +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +    public void onStart() {, +        // do nothing by default, +    }, +    , +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +            super(actual);, +        @Override, +        public void onStart() {, +            // we request backpressure so we can handle long-running Observables that are enqueueing, such as flatMap use cases, +            // we decouple the Producer chain while keeping the Subscription chain together (perf benefit) via super(actual), +            request(RxRingBuffer.SIZE);, +        }, +        , +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorObserveOn.java, +        public void onStart() {, +            // signal that this is an async operator capable of receiving this many, +            request(RxRingBuffer.SIZE);, +        }, +, +        @Override, +++ b/rxjava-core/src/main/java/rx/Observable.java, +                    Subscriber<? super T> st = hook.onLift(lift).call(o);, +                    // new Subscriber created and being subscribed with so 'onStart' it, +                    st.onStart();, +                    onSubscribe.call(st);, +            // new Subscriber so onStart it, +            subscriber.onStart();, +        , +        // new Subscriber so onStart it, +        subscriber.onStart();, +        , +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +    public void onStart() {, +        // do nothing by default, +    }, +    ]