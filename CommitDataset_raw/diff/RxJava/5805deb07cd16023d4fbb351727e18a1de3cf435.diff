[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  private [scala] def apply[T](observable: rx.Observable[_ <: T]): Observable[T] = {, +   *            the type of the items that this Observable emits., +   *            canceling the subscription., +   * @return, +   *         an Observable that, when an [[rx.lang.scala.Observer]] subscribes to it, will execute the given function., +   * Returns an Observable that invokes an [[rx.lang.scala.Observer]]'s [[rx.lang.scala.Observer.onError onError]], +   * method when the Observer subscribes to it., +   * @return an Observable that invokes the [[rx.lang.scala.Observer]]'s [[rx.lang.scala.Observer.onError onError]], +   *         method when the Observer subscribes to it, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  private [scala] def apply[T](observable: rx.Observable[_ <: T]): Observable[T] = {, +   *            the type of the items that this Observable emits., +   *            canceling the subscription., +   * @return, +   *         an Observable that, when an [[rx.lang.scala.Observer]] subscribes to it, will execute the given function., +   * Returns an Observable that invokes an [[rx.lang.scala.Observer]]'s [[rx.lang.scala.Observer.onError onError]], +   * method when the Observer subscribes to it., +   * @return an Observable that invokes the [[rx.lang.scala.Observer]]'s [[rx.lang.scala.Observer.onError onError]], +   *         method when the Observer subscribes to it, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observer.scala, +  private [scala] def asJavaObserver: rx.Observer[_ >: T] = new ObserverBase[T] {, +    protected def onCompletedCore(): Unit = onCompleted(), +    protected def onErrorCore(error: Throwable): Unit = onError(error), +    protected def onNextCore(value: T): Unit = onNext(value), +  }, +  def onNext(value: T): Unit, +  def onError(error: Throwable): Unit, +  def onCompleted(): Unit, +  /**, +   * Assume that the underlying rx.Observer does not need to be wrapped, +   */, +       override def asJavaObserver: rx.Observer[_ >: T] = observer, +       def onCompleted(): Unit = asJavaObserver.onCompleted(), +       def onError(error: Throwable): Unit = asJavaObserver.onError(error), +       def onNext(value: T): Unit = asJavaObserver.onNext(value), +}, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  private [scala] def apply[T](observable: rx.Observable[_ <: T]): Observable[T] = {, +   *            the type of the items that this Observable emits., +   *            canceling the subscription., +   * @return, +   *         an Observable that, when an [[rx.lang.scala.Observer]] subscribes to it, will execute the given function., +   * Returns an Observable that invokes an [[rx.lang.scala.Observer]]'s [[rx.lang.scala.Observer.onError onError]], +   * method when the Observer subscribes to it., +   * @return an Observable that invokes the [[rx.lang.scala.Observer]]'s [[rx.lang.scala.Observer.onError onError]], +   *         method when the Observer subscribes to it, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observer.scala, +  private [scala] def asJavaObserver: rx.Observer[_ >: T] = new ObserverBase[T] {, +    protected def onCompletedCore(): Unit = onCompleted(), +    protected def onErrorCore(error: Throwable): Unit = onError(error), +    protected def onNextCore(value: T): Unit = onNext(value), +  }, +  def onNext(value: T): Unit, +  def onError(error: Throwable): Unit, +  def onCompleted(): Unit, +  /**, +   * Assume that the underlying rx.Observer does not need to be wrapped, +   */, +       override def asJavaObserver: rx.Observer[_ >: T] = observer, +       def onCompleted(): Unit = asJavaObserver.onCompleted(), +       def onError(error: Throwable): Unit = asJavaObserver.onError(error), +       def onNext(value: T): Unit = asJavaObserver.onNext(value), +}, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subject.scala, +  override def asJavaObserver:   rx.Observer[_ >: T] = asJavaSubject, +, +  def onCompleted(): Unit = asJavaObserver.onCompleted(), +  def onError(error: Throwable): Unit = asJavaObserver.onError(error), +  def onNext(value: T): Unit = asJavaObserver.onNext(value)]