[+++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.operators.observable.ObservableFromPublisher;, +        return distinctUntilChanged(Functions.identity());, +        return RxJavaPlugins.onAssembly(new FlowableDistinctUntilChanged<T, K>(this, keySelector, ObjectHelper.equalsPredicate()));, +        return RxJavaPlugins.onAssembly(new FlowableDistinctUntilChanged<T, T>(this, Functions.<T>identity(), comparer));, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.operators.observable.ObservableFromPublisher;, +        return distinctUntilChanged(Functions.identity());, +        return RxJavaPlugins.onAssembly(new FlowableDistinctUntilChanged<T, K>(this, keySelector, ObjectHelper.equalsPredicate()));, +        return RxJavaPlugins.onAssembly(new FlowableDistinctUntilChanged<T, T>(this, Functions.<T>identity(), comparer));, +++ b/src/main/java/io/reactivex/Observable.java, +        return distinctUntilChanged(Functions.identity());, +        return RxJavaPlugins.onAssembly(new ObservableDistinctUntilChanged<T, K>(this, keySelector, ObjectHelper.equalsPredicate()));, +        return RxJavaPlugins.onAssembly(new ObservableDistinctUntilChanged<T, T>(this, Functions.<T>identity(), comparer));, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.operators.observable.ObservableFromPublisher;, +        return distinctUntilChanged(Functions.identity());, +        return RxJavaPlugins.onAssembly(new FlowableDistinctUntilChanged<T, K>(this, keySelector, ObjectHelper.equalsPredicate()));, +        return RxJavaPlugins.onAssembly(new FlowableDistinctUntilChanged<T, T>(this, Functions.<T>identity(), comparer));, +++ b/src/main/java/io/reactivex/Observable.java, +        return distinctUntilChanged(Functions.identity());, +        return RxJavaPlugins.onAssembly(new ObservableDistinctUntilChanged<T, K>(this, keySelector, ObjectHelper.equalsPredicate()));, +        return RxJavaPlugins.onAssembly(new ObservableDistinctUntilChanged<T, T>(this, Functions.<T>identity(), comparer));, +++ b/src/main/java/io/reactivex/internal/functions/Functions.java, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.operators.observable.ObservableFromPublisher;, +        return distinctUntilChanged(Functions.identity());, +        return RxJavaPlugins.onAssembly(new FlowableDistinctUntilChanged<T, K>(this, keySelector, ObjectHelper.equalsPredicate()));, +        return RxJavaPlugins.onAssembly(new FlowableDistinctUntilChanged<T, T>(this, Functions.<T>identity(), comparer));, +++ b/src/main/java/io/reactivex/Observable.java, +        return distinctUntilChanged(Functions.identity());, +        return RxJavaPlugins.onAssembly(new ObservableDistinctUntilChanged<T, K>(this, keySelector, ObjectHelper.equalsPredicate()));, +        return RxJavaPlugins.onAssembly(new ObservableDistinctUntilChanged<T, T>(this, Functions.<T>identity(), comparer));, +++ b/src/main/java/io/reactivex/internal/functions/Functions.java, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged.java, +import io.reactivex.functions.*;, +public final class FlowableDistinctUntilChanged<T, K> extends AbstractFlowableWithUpstream<T, T> {, +    final Function<? super T, K> keySelector;, +    final BiPredicate<? super K, ? super K> comparer;, +, +    public FlowableDistinctUntilChanged(Publisher<T> source, Function<? super T, K> keySelector, BiPredicate<? super K, ? super K> comparer) {, +        this.keySelector = keySelector;, +            source.subscribe(new DistinctUntilChangedConditionalSubscriber<T, K>(cs, keySelector, comparer));, +            source.subscribe(new DistinctUntilChangedSubscriber<T, K>(s, keySelector, comparer));, +    static final class DistinctUntilChangedSubscriber<T, K> extends BasicFuseableSubscriber<T, T>, +        final Function<? super T, K> keySelector;, +, +        final BiPredicate<? super K, ? super K> comparer;, +, +        K last;, +                Function<? super T, K> keySelector,, +                BiPredicate<? super K, ? super K> comparer) {, +            this.keySelector = keySelector;, +            K key;, +, +                key = keySelector.apply(t);, +                if (hasValue) {, +                    boolean equal = comparer.test(last, key);, +                    last = key;, +                } else {, +                    hasValue = true;, +                    last = key;, +                }, +            } catch (Throwable ex) {, +               fail(ex);, +, +                K key = keySelector.apply(v);, +                    last = key;, +                if (!comparer.test(last, key)) {, +                    last = key;, +                last = key;, +    static final class DistinctUntilChangedConditionalSubscriber<T, K> extends BasicFuseableConditionalSubscriber<T, T> {, +        final Function<? super T, K> keySelector;, +        final BiPredicate<? super K, ? super K> comparer;, +, +        K last;, +                Function<? super T, K> keySelector,, +                BiPredicate<? super K, ? super K> comparer) {, +            this.keySelector = keySelector;, +            K key;, +, +                key = keySelector.apply(t);, +                if (hasValue) {, +                    boolean equal = comparer.test(last, key);, +                    last = key;, +                    if (equal) {, +                } else {, +                    last = key;, +                }, +            } catch (Throwable ex) {, +               fail(ex);, +               return true;, +            }, +, +            actual.onNext(t);, +            return true;, +                K key = keySelector.apply(v);, +                    last = key;, +, +                if (!comparer.test(last, key)) {]