[+++ b/src/main/java/io/reactivex/Notification.java, +    , +    public static <T> boolean isNext(Try<Optional<T>> notification) {, +        if (notification.hasValue()) {, +            return notification.value().isPresent();, +        }, +        return false;, +    }, +    , +    public static <T> boolean isComplete(Try<Optional<T>> notification) {, +        if (notification.hasValue()) {, +            return !notification.value().isPresent();, +        }, +        return false;, +    }, +    , +    public static <T> boolean isError(Try<Optional<T>> notification) {, +        return notification.hasError();, +    }, +    , +    public static <T> T getValue(Try<Optional<T>> notification) {, +        if (notification.hasValue()) {, +            return notification.value.get();, +        }, +        return null;, +    }, +++ b/src/main/java/io/reactivex/Notification.java, +    , +    public static <T> boolean isNext(Try<Optional<T>> notification) {, +        if (notification.hasValue()) {, +            return notification.value().isPresent();, +        }, +        return false;, +    }, +    , +    public static <T> boolean isComplete(Try<Optional<T>> notification) {, +        if (notification.hasValue()) {, +            return !notification.value().isPresent();, +        }, +        return false;, +    }, +    , +    public static <T> boolean isError(Try<Optional<T>> notification) {, +        return notification.hasError();, +    }, +    , +    public static <T> T getValue(Try<Optional<T>> notification) {, +        if (notification.hasValue()) {, +            return notification.value.get();, +        }, +        return null;, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorMaterialize.java, +                        done = true;, +            BackpressureHelper.add(this, n);, +            } else {, +                s.request(n);, +++ b/src/main/java/io/reactivex/Notification.java, +    , +    public static <T> boolean isNext(Try<Optional<T>> notification) {, +        if (notification.hasValue()) {, +            return notification.value().isPresent();, +        }, +        return false;, +    }, +    , +    public static <T> boolean isComplete(Try<Optional<T>> notification) {, +        if (notification.hasValue()) {, +            return !notification.value().isPresent();, +        }, +        return false;, +    }, +    , +    public static <T> boolean isError(Try<Optional<T>> notification) {, +        return notification.hasError();, +    }, +    , +    public static <T> T getValue(Try<Optional<T>> notification) {, +        if (notification.hasValue()) {, +            return notification.value.get();, +        }, +        return null;, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorMaterialize.java, +                        done = true;, +            BackpressureHelper.add(this, n);, +            } else {, +                s.request(n);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorTakeLastOne.java, +            if (SubscriptionHelper.validateRequest(n)) {, +++ b/src/main/java/io/reactivex/Notification.java, +    , +    public static <T> boolean isNext(Try<Optional<T>> notification) {, +        if (notification.hasValue()) {, +            return notification.value().isPresent();, +        }, +        return false;, +    }, +    , +    public static <T> boolean isComplete(Try<Optional<T>> notification) {]