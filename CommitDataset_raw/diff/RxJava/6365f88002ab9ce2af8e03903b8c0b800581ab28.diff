[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationSkipWhile;, +     * Returns an Observable that bypasses all items from the source Observable as long as the specified, +     * condition holds true. Emits all further source items as soon as the condition becomes false., +     * @param predicate, +     *            A function to test each item emitted from the source Observable for a condition., +     *            It receives the emitted item as first parameter and the index of the emitted item as, +     *            second parameter., +     * @return an Observable that emits all items from the source Observable as soon as the condition, +     *         becomes false. , +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh211631%28v=vs.103%29.aspx">MSDN: Observable.SkipWhile</a>, +     */, +    public Observable<T> skipWhileWithIndex(Func2<? super T, Integer, Boolean> predicate) {, +        return create(OperationSkipWhile.skipWhileWithIndex(this, predicate));, +    }, +, +    /**, +     * Returns an Observable that bypasses all items from the source Observable as long as the specified, +     * condition holds true. Emits all further source items as soon as the condition becomes false., +     * @param predicate, +     *            A function to test each item emitted from the source Observable for a condition., +     * @return an Observable that emits all items from the source Observable as soon as the condition, +     *         becomes false. , +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229685%28v=vs.103%29.aspx">MSDN: Observable.SkipWhile</a>, +     */, +    public Observable<T> skipWhile(Func1<? super T, Boolean> predicate) {, +        return create(OperationSkipWhile.skipWhile(this, predicate));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationSkipWhile;, +     * Returns an Observable that bypasses all items from the source Observable as long as the specified, +     * condition holds true. Emits all further source items as soon as the condition becomes false., +     * @param predicate, +     *            A function to test each item emitted from the source Observable for a condition., +     *            It receives the emitted item as first parameter and the index of the emitted item as, +     *            second parameter., +     * @return an Observable that emits all items from the source Observable as soon as the condition, +     *         becomes false. , +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh211631%28v=vs.103%29.aspx">MSDN: Observable.SkipWhile</a>, +     */, +    public Observable<T> skipWhileWithIndex(Func2<? super T, Integer, Boolean> predicate) {, +        return create(OperationSkipWhile.skipWhileWithIndex(this, predicate));, +    }, +, +    /**, +     * Returns an Observable that bypasses all items from the source Observable as long as the specified, +     * condition holds true. Emits all further source items as soon as the condition becomes false., +     * @param predicate, +     *            A function to test each item emitted from the source Observable for a condition., +     * @return an Observable that emits all items from the source Observable as soon as the condition, +     *         becomes false. , +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229685%28v=vs.103%29.aspx">MSDN: Observable.SkipWhile</a>, +     */, +    public Observable<T> skipWhile(Func1<? super T, Boolean> predicate) {, +        return create(OperationSkipWhile.skipWhile(this, predicate));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationSkipWhile.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import static rx.Observable.create;, +, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscription;, +import rx.util.functions.Func1;, +import rx.util.functions.Func2;, +, +/**, + * Skips any emitted source items as long as the specified condition holds true. Emits all further source items, + * as soon as the condition becomes false., + */, +public final class OperationSkipWhile {]