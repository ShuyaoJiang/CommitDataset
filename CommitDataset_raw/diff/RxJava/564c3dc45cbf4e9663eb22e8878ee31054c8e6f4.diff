[+++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java, +        ObjectHelper.requireNonNull(run, "run is null");, +, +++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java, +        ObjectHelper.requireNonNull(run, "run is null");, +, +++ b/src/test/java/io/reactivex/plugins/RxJavaPluginsTest.java, +++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java, +        ObjectHelper.requireNonNull(run, "run is null");, +, +++ b/src/test/java/io/reactivex/plugins/RxJavaPluginsTest.java, +++ b/src/test/java/io/reactivex/schedulers/AbstractSchedulerTests.java, +, +    @Test, +    public void scheduleDirectNullRunnable() {, +        try {, +            getScheduler().scheduleDirect(null);, +            fail();, +        } catch (NullPointerException npe) {, +            assertEquals("run is null", npe.getMessage());, +        }, +    }, +, +    @Test, +    public void scheduleDirectWithDelayNullRunnable() {, +        try {, +            getScheduler().scheduleDirect(null, 10, TimeUnit.MILLISECONDS);, +            fail();, +        } catch (NullPointerException npe) {, +            assertEquals("run is null", npe.getMessage());, +        }, +    }, +, +    @Test, +    public void schedulePeriodicallyDirectNullRunnable() {, +        try {, +            getScheduler().schedulePeriodicallyDirect(null, 5, 10, TimeUnit.MILLISECONDS);, +            fail();, +        } catch (NullPointerException npe) {, +            assertEquals("run is null", npe.getMessage());, +        }, +    }]