[+++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns the values from the source observable sequence until the other observable sequence produces a value., +     *, +     * @param source the source sequence to propagate elements for., +     * @param other  the observable sequence that terminates propagation of elements of the source sequence., +     * @param <T>    the type of source., +     * @param <E>    the other type., +     * @return An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation., +     */, +    public static <T, E> Observable<T> takeUntil(final Observable<T> source, final Observable<E> other) {, +        return OperatorTakeUntil.takeUntil(source, other);, +    }, +, +, +    /**, +     * Returns the values from the source observable sequence until the other observable sequence produces a value., +     *, +     * @param other  the observable sequence that terminates propagation of elements of the source sequence., +     * @param <E>    the other type., +     * @return An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation., +     */, +    public <E> Observable<T> takeUntil(Observable<E> other) {, +        return takeUntil(this, other);, +    }, +, +    /**, +, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns the values from the source observable sequence until the other observable sequence produces a value., +     *, +     * @param source the source sequence to propagate elements for., +     * @param other  the observable sequence that terminates propagation of elements of the source sequence., +     * @param <T>    the type of source., +     * @param <E>    the other type., +     * @return An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation., +     */, +    public static <T, E> Observable<T> takeUntil(final Observable<T> source, final Observable<E> other) {, +        return OperatorTakeUntil.takeUntil(source, other);, +    }, +, +, +    /**, +     * Returns the values from the source observable sequence until the other observable sequence produces a value., +     *, +     * @param other  the observable sequence that terminates propagation of elements of the source sequence., +     * @param <E>    the other type., +     * @return An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation., +     */, +    public <E> Observable<T> takeUntil(Observable<E> other) {, +        return takeUntil(this, other);, +    }, +, +    /**, +, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns the values from the source observable sequence until the other observable sequence produces a value., +     *, +     * @param source the source sequence to propagate elements for., +     * @param other  the observable sequence that terminates propagation of elements of the source sequence., +     * @param <T>    the type of source., +     * @param <E>    the other type., +     * @return An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation., +     */, +    public static <T, E> Observable<T> takeUntil(final Observable<T> source, final Observable<E> other) {, +        return OperatorTakeUntil.takeUntil(source, other);, +    }, +, +, +    /**, +     * Returns the values from the source observable sequence until the other observable sequence produces a value., +     *, +     * @param other  the observable sequence that terminates propagation of elements of the source sequence., +     * @param <E>    the other type., +     * @return An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation., +     */, +    public <E> Observable<T> takeUntil(Observable<E> other) {, +        return takeUntil(this, other);, +    }, +, +    /**, +, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorTakeUntil.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.]