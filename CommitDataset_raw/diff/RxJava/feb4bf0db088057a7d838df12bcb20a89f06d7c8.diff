[+++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/SwingObservable.java, +import java.awt.event.MouseEvent;, +import rx.swing.sources.MouseEventSource;, +, +    /**, +     * Creates an observable corresponding to raw mouse events (excluding mouse motion events)., +     * , +     * @param component, +     *            The component to register the observable for., +     * @return Observable of mouse events., +     */, +    public static Observable<MouseEvent> fromMouseEvents(JComponent component) {, +        return MouseEventSource.fromMouseEventsOf(component);, +    }, +, +    /**, +     * Creates an observable corresponding to raw mouse motion events., +     * , +     * @param component, +     *            The component to register the observable for., +     * @return Observable of mouse motion events., +     */, +    public static Observable<MouseEvent> fromMouseMotionEvents(JComponent component) {, +        return MouseEventSource.fromMouseMotionEventsOf(component);, +    }, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/SwingObservable.java, +import java.awt.event.MouseEvent;, +import rx.swing.sources.MouseEventSource;, +, +    /**, +     * Creates an observable corresponding to raw mouse events (excluding mouse motion events)., +     * , +     * @param component, +     *            The component to register the observable for., +     * @return Observable of mouse events., +     */, +    public static Observable<MouseEvent> fromMouseEvents(JComponent component) {, +        return MouseEventSource.fromMouseEventsOf(component);, +    }, +, +    /**, +     * Creates an observable corresponding to raw mouse motion events., +     * , +     * @param component, +     *            The component to register the observable for., +     * @return Observable of mouse motion events., +     */, +    public static Observable<MouseEvent> fromMouseMotionEvents(JComponent component) {, +        return MouseEventSource.fromMouseMotionEventsOf(component);, +    }, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/MouseEventSource.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.swing.sources;, +, +import java.awt.event.MouseEvent;, +import java.awt.event.MouseListener;, +import java.awt.event.MouseMotionListener;, +, +import javax.swing.JComponent;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Action0;, +import rx.util.functions.Func1;, +, +public enum MouseEventSource { ; // no instances, +, +    public static Observable<MouseEvent> fromMouseEventsOf(final JComponent component) {, +        return Observable.create(new Func1<Observer<MouseEvent>, Subscription>() {, +            @Override, +            public Subscription call(final Observer<MouseEvent> observer) {, +                final MouseListener listener = new MouseListener() {, +                    @Override, +                    public void mouseClicked(MouseEvent event) {, +                        observer.onNext(event);, +                    }, +, +                    @Override, +                    public void mousePressed(MouseEvent event) {, +                        observer.onNext(event);, +                    }, +, +                    @Override, +                    public void mouseReleased(MouseEvent event) {]