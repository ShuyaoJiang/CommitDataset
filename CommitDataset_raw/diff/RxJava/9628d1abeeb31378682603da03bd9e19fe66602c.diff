[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationRetry;, +     * Retry subscription to origin Observable upto given retry count., +     * <p>, +     * If {@link Observer#onError} is invoked the source Observable will be re-subscribed to as many times as defined by retryCount., +     * <p>, +     * Any {@link Observer#onNext} calls received on each attempt will be emitted and concatenated together., +     * <p>, +     * For example, if an Observable fails on first time but emits [1, 2] then succeeds the second time and, +     * emits [1, 2, 3, 4, 5] then the complete output would be [1, 2, 1, 2, 3, 4, 5, onCompleted]., +     * , +     * @param retryCount, +     *            Number of retry attempts before failing., +     * @return Observable with retry logic., +     */, +    public Observable<T> retry(int retryCount) {, +        return create(OperationRetry.retry(this, retryCount));, +    }, +, +    /**, +     * Retry subscription to origin Observable whenever onError is called (infinite retry count)., +     * <p>, +     * If {@link Observer#onError} is invoked the source Observable will be re-subscribed to., +     * <p>, +     * Any {@link Observer#onNext} calls received on each attempt will be emitted and concatenated together., +     * <p>, +     * For example, if an Observable fails on first time but emits [1, 2] then succeeds the second time and, +     * emits [1, 2, 3, 4, 5] then the complete output would be [1, 2, 1, 2, 3, 4, 5, onCompleted]., +     * , +     * @param retryCount, +     *            Number of retry attempts before failing., +     * @return Observable with retry logic., +     */, +    public Observable<T> retry() {, +        return create(OperationRetry.retry(this));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationRetry;, +     * Retry subscription to origin Observable upto given retry count., +     * <p>, +     * If {@link Observer#onError} is invoked the source Observable will be re-subscribed to as many times as defined by retryCount., +     * <p>, +     * Any {@link Observer#onNext} calls received on each attempt will be emitted and concatenated together., +     * <p>, +     * For example, if an Observable fails on first time but emits [1, 2] then succeeds the second time and, +     * emits [1, 2, 3, 4, 5] then the complete output would be [1, 2, 1, 2, 3, 4, 5, onCompleted]., +     * , +     * @param retryCount, +     *            Number of retry attempts before failing., +     * @return Observable with retry logic., +     */, +    public Observable<T> retry(int retryCount) {, +        return create(OperationRetry.retry(this, retryCount));, +    }, +, +    /**, +     * Retry subscription to origin Observable whenever onError is called (infinite retry count)., +     * <p>, +     * If {@link Observer#onError} is invoked the source Observable will be re-subscribed to., +     * <p>, +     * Any {@link Observer#onNext} calls received on each attempt will be emitted and concatenated together., +     * <p>, +     * For example, if an Observable fails on first time but emits [1, 2] then succeeds the second time and, +     * emits [1, 2, 3, 4, 5] then the complete output would be [1, 2, 1, 2, 3, 4, 5, onCompleted]., +     * , +     * @param retryCount, +     *            Number of retry attempts before failing., +     * @return Observable with retry logic., +     */, +    public Observable<T> retry() {, +        return create(OperationRetry.retry(this));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationRetry.java, +package rx.operators;, +, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.junit.Test;]