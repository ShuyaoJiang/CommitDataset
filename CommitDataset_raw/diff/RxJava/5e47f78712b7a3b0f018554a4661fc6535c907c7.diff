[+++ b/src/main/java/rx/subjects/AsyncSubject.java, +import java.lang.reflect.Array;, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Experimental, +    @SuppressWarnings("unchecked"), +    public T[] getValues(T[] a) {, +        Object v = lastValue;, +        Object o = state.get();, +        if (!nl.isError(o) && nl.isNext(v)) {, +            T val = nl.getValue(v);, +            if (a.length == 0) {, +                a = (T[])Array.newInstance(a.getClass().getComponentType(), 1);, +            }, +            a[0] = val;, +            if (a.length > 1) {, +                a[1] = null;, +            }, +        } else, +        if (a.length > 0) {, +            a[0] = null;, +        }, +        return a;, +    }, +++ b/src/main/java/rx/subjects/AsyncSubject.java, +import java.lang.reflect.Array;, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Experimental, +    @SuppressWarnings("unchecked"), +    public T[] getValues(T[] a) {, +        Object v = lastValue;, +        Object o = state.get();, +        if (!nl.isError(o) && nl.isNext(v)) {, +            T val = nl.getValue(v);, +            if (a.length == 0) {, +                a = (T[])Array.newInstance(a.getClass().getComponentType(), 1);, +            }, +            a[0] = val;, +            if (a.length > 1) {, +                a[1] = null;, +            }, +        } else, +        if (a.length > 0) {, +            a[0] = null;, +        }, +        return a;, +    }, +++ b/src/main/java/rx/subjects/BehaviorSubject.java, +import java.lang.reflect.Array;, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Experimental, +    @SuppressWarnings("unchecked"), +    public T[] getValues(T[] a) {, +        Object o = state.get();, +        if (nl.isNext(o)) {, +            if (a.length == 0) {, +                a = (T[])Array.newInstance(a.getClass().getComponentType(), 1);, +            }, +            a[0] = nl.getValue(o);, +            if (a.length > 1) {, +                a[1] = null;, +            }, +        } else, +        if (a.length > 0) {, +            a[0] = null;, +        }, +        return a;, +    }, +++ b/src/main/java/rx/subjects/AsyncSubject.java, +import java.lang.reflect.Array;, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Experimental, +    @SuppressWarnings("unchecked"), +    public T[] getValues(T[] a) {, +        Object v = lastValue;, +        Object o = state.get();, +        if (!nl.isError(o) && nl.isNext(v)) {, +            T val = nl.getValue(v);, +            if (a.length == 0) {, +                a = (T[])Array.newInstance(a.getClass().getComponentType(), 1);, +            }]