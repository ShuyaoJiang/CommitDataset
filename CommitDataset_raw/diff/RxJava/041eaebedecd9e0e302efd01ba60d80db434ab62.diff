[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import static org.junit.Assert.*;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +import rx.operators.OperationConcat;, +import rx.operators.OperationDefer;, +import rx.operators.OperationDematerialize;, +import rx.operators.OperationFilter;, +import rx.operators.OperationLast;, +import rx.operators.OperationMap;, +import rx.operators.OperationMaterialize;, +import rx.operators.OperationMerge;, +import rx.operators.OperationMergeDelayError;, +import rx.operators.OperationMostRecent;, +import rx.operators.OperationNext;, +import rx.operators.OperationOnErrorResumeNextViaFunction;, +import rx.operators.OperationOnErrorResumeNextViaObservable;, +import rx.operators.OperationOnErrorReturn;, +import rx.operators.OperationScan;, +import rx.operators.OperationSkip;, +import rx.operators.OperationSynchronize;, +import rx.operators.OperationTake;, +import rx.operators.OperationTakeLast;, +import rx.operators.OperationToObservableFuture;, +import rx.operators.OperationToObservableIterable;, +import rx.operators.OperationToObservableList;, +import rx.operators.OperationToObservableSortedList;, +import rx.operators.OperationZip;, +import rx.operators.OperatorGroupBy;, +import rx.operators.OperatorTakeUntil;, +import rx.operators.OperatorToIterator;, +import rx.util.functions.Action0;, +import rx.util.functions.Action1;, +import rx.util.functions.Func0;, +import rx.util.functions.Func1;, +import rx.util.functions.Func2;, +import rx.util.functions.Func3;, +import rx.util.functions.Func4;, +import rx.util.functions.FuncN;, +import rx.util.functions.FunctionLanguageAdaptor;, +import rx.util.functions.Functions;, +    /**, +     * Construct an Observable with Function to execute when subscribed to., +     * <p>, +     * NOTE: Generally you're better off using {@link #create(Func1)} to create an Observable instead of using inheritance., +     * , +     * @param onSubscribe, +     *            {@link Func1} to be executed when {@link #subscribe(Observer)} is called., +     */, +    protected Observable(Func1<Observer<T>, Subscription> onSubscribe) {, +        this(onSubscribe, false);, +    }, +, +    /**, +     * @param onSubscribe, +     *            {@link Func1} to be executed when {@link #subscribe(Observer)} is called., +     * @param isTrusted, +     *            boolean true if the <code>onSubscribe</code> function is guaranteed to conform to the correct contract and thus shortcuts can be taken., +     */, +    private Observable(Func1<Observer<T>, Subscription> onSubscribe, boolean isTrusted) {, +     * @param predicate, +     *            A predicate function to evaluate for elements in the sequence., +     * @param predicate, +     *            A predicate function to evaluate for elements in the sequence., +     * @param defaultValue, +     *            default value for a sequence., +     * , +     * @param defaultValue, +     *            default value for a sequence., +     * @param predicate, +     *            A predicate function to evaluate for elements in the sequence., +     * @param defaultValue, +     *            default value for a sequence., +     * @param predicate, +     *            A predicate function to evaluate for elements in the sequence., +            }, true);, +            }, true);, +     * @param start, +     *            The value of the first integer in the sequence, +     * @param count, +     *            The number of sequential integers to generate., +     * @param observableFactory, +     *            the observable factory function to invoke for each observer that subscribes to the resulting sequence., +     * @param <T>, +     *            the type of the observable., +     * @param observableFactory, +     *            the observable factory function to invoke for each observer that subscribes to the resulting sequence., +     * @param <T>, +     *            the type of the observable., +     * , +     * @param source, +     *            the source observable., +     * @param defaultValue]