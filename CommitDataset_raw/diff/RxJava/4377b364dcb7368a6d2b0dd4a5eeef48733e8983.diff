[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Given an Observable that emits Observables, returns an Observable that, +     * emits the items emitted by the most recently emitted of those, +     * Observables., +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/switchDo.png">, +     * @param sequenceOfSequences the source Observable that emits Observables, +     * @return an Observable that emits only the items emitted by the Observable, +     *         most recently emitted by the source Observable, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Combining-Observables#switchonnext">RxJava Wiki: switchOnNext()</a>, +     * @see {@link #switchOnNext(Observable)}, +     */, +    public static <T> Observable<T> switchLatest(Observable<? extends Observable<? extends T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo(sequenceOfSequences));, +    }, +, +    /**, +     * Return an Observable that subscribes to an observable sequence, +     * chosen from a map of observables via a selector function or to an, +     * empty observable., +     * @param caseSelector the function that produces a case key when an Observer subscribes, +     * @param mapOfCases a map that maps a case key to an observable sequence, +     * @return an Observable that subscribes to an observable sequence, +     *         chosen from a map of observables via a selector function or to an, +     *         empty observable, +     * Return an Observable that subscribes to an observable sequence, +     * chosen from a map of observables via a selector function or to an, +     * empty observable which runs on the given scheduler., +     * @param mapOfCases a map that maps a case key to an observable sequence, +     * @return an Observable that subscribes to an observable sequence, +     *         chosen from a map of observables via a selector function or to an, +     *         empty observable which runs on the given scheduler, +     * Return an Observable that subscribes to an observable sequence, +     * chosen from a map of observables via a selector function or to the, +     * default observable., +     * @param caseSelector the function that produces a case key when an Observer subscribes, +     * @param mapOfCases a map that maps a case key to an observable sequence, +     * @param defaultCase the default observable if the {@code mapOfCases} doesn't contain a value for, +     *                    the key returned by the {@case caseSelector}, +     * @return an Observable that subscribes to an observable sequence, +     *         chosen from a map of observables via a selector function or to an, +     *         empty observable, +     * Return an Observable that subscribes to the this Observable,, +     * then resubscribes only if the postCondition evaluates to true., +     * @param postCondition the post condition after the source completes, +     * @return an Observable that subscribes to the source Observable,, +     * then resubscribes only if the postCondition evaluates to true., +     * Return an Observable that subscribes and resubscribes to this, +     * Observable if the preCondition evaluates to true., +     * @param preCondition the condition to evaluate before subscribing to this, , +     *                     and subscribe to source if it returns {@code true}, +     * @return an Observable that subscribes and resubscribes to the source, +     * Observable if the preCondition evaluates to true., +     * Return an Observable that subscribes to the, +     * then Observables if the condition function evaluates to true, or to an empty, +     * Observable if false., +     * @param condition the condition to decide which Observables to subscribe to, +     * @param then the Observable sequence to subscribe to if {@code condition} is {@code true}, +     * @return an Observable that subscribes to the, +     *         then Observables if the condition function evaluates to true, or to an empty, +     *         Observable running on the given scheduler if false, +     * Return an Observable that subscribes to the, +     * then Observables if the condition function evaluates to true, or to an empty, +     * Observable running on the given scheduler if false., +     * @param condition the condition to decide which Observables to subscribe to, +     * @param then the Observable sequence to subscribe to if {@code condition} is {@code true}, +     * @param scheduler the scheduler where the empty Observable is observed in case the condition returns false, +     * @return an Observable that subscribes to the, +     *         then Observables if the condition function evaluates to true, or to an empty, +     *         Observable running on the given scheduler if false, +     * Return an Observable that subscribes to either the, +     * then or orElse Observables depending on a condition function., +     * @param condition the condition to decide which Observables to subscribe to, +     * @param then the Observable sequence to subscribe to if {@code condition} is {@code true}, +     * @param orElse the Observable sequence to subscribe to if {@code condition} is {@code false}, +     * @return an Observable that subscribes to either the, +     *         then or orElse Observables depending on a condition function, +     * Return an Observable which delays the subscription to this Observable sequence, +     * by the given amount., +     * @return an Observable which delays the subscription to this Observable sequence, +     *         by the given amount., +     * Return an Observable which delays the subscription to this Observable sequence, +     * by the given amount, waiting and subscribing on the given scheduler., +     * @param scheduler the scheduler where the waiting and subscription will happen, +     * @return an Observable which delays the subscription to this Observable sequence, +     *         by the given amount, waiting and subscribing on the given scheduler, +     * If the Observable completes after emitting a single item, return an, +     * Observable containing that item. If it emits more than one item or no, +     * item, throw an IllegalArgumentException., +     * @return an Observable containing the single item emitted by the source, +     *         Observable that matches the predicate., +     * @throws IllegalArgumentException, +     *             if the source emits more than one item or no item, +     * predicate, return an Observable containing that item. If it emits more, +     * than one such item or no item, throw an IllegalArgumentException., +     * @param predicate, +     *            a predicate function to evaluate items emitted by the source, +     *            Observable, +     * @return an Observable containing the single item emitted by the source, +     *         Observable that matches the predicate., +     * @throws IllegalArgumentException]