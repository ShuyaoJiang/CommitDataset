[+++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +final class BackpressureUtils {, +, +    static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +            if (next < 0), +            if (requested.compareAndSet(object, current, next)), +    static <T> long getAndAddRequest(AtomicLong requested, long n) {, +            if (next < 0), +            if (requested.compareAndSet(current, next)), +++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +final class BackpressureUtils {, +, +    static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +            if (next < 0), +            if (requested.compareAndSet(object, current, next)), +    static <T> long getAndAddRequest(AtomicLong requested, long n) {, +            if (next < 0), +            if (requested.compareAndSet(current, next)), +++ b/src/main/java/rx/internal/operators/OperatorSingle.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import rx.Producer;, +    public Subscriber<? super T> call(final Subscriber<? super T> child) {, +, +        final ParentSubscriber<T> parent = new ParentSubscriber<T>(child, hasDefaultValue,, +                defaultValue);, +, +        child.setProducer(new Producer() {, +, +            private final AtomicBoolean requestedTwo = new AtomicBoolean(false);, +, +            @Override, +            public void request(long n) {, +                if (n > 0 && requestedTwo.compareAndSet(false, true)) {, +                    parent.requestMore(2);, +                }, +            }, +, +        });, +        child.add(parent);, +        return parent;, +    }, +, +    private static final class ParentSubscriber<T> extends Subscriber<T> {, +        private final Subscriber<? super T> child;, +        private final boolean hasDefaultValue;, +        private final T defaultValue;, +        , +        ParentSubscriber(Subscriber<? super T> child, boolean hasDefaultValue,, +                T defaultValue) {, +            this.child = child;, +            this.hasDefaultValue = hasDefaultValue;, +            this.defaultValue = defaultValue;, +        }, +, +        void requestMore(long n) {, +            request(n);, +        }, +, +                child.onError(new IllegalArgumentException("Sequence contains too many elements"));, +                    child.onNext(value);, +                    child.onCompleted();, +                        child.onNext(defaultValue);, +                        child.onCompleted();, +                        child.onError(new NoSuchElementException("Sequence contains no elements"));, +            child.onError(e);, +++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +final class BackpressureUtils {, +, +    static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +            if (next < 0), +            if (requested.compareAndSet(object, current, next)), +    static <T> long getAndAddRequest(AtomicLong requested, long n) {, +            if (next < 0), +            if (requested.compareAndSet(current, next)), +++ b/src/main/java/rx/internal/operators/OperatorSingle.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import rx.Producer;, +    public Subscriber<? super T> call(final Subscriber<? super T> child) {, +, +        final ParentSubscriber<T> parent = new ParentSubscriber<T>(child, hasDefaultValue,, +                defaultValue);, +, +        child.setProducer(new Producer() {, +, +            private final AtomicBoolean requestedTwo = new AtomicBoolean(false);, +, +            @Override, +            public void request(long n) {, +                if (n > 0 && requestedTwo.compareAndSet(false, true)) {, +                    parent.requestMore(2);, +                }, +            }, +, +        });, +        child.add(parent);, +        return parent;, +    }, +, +    private static final class ParentSubscriber<T> extends Subscriber<T> {, +        private final Subscriber<? super T> child;]