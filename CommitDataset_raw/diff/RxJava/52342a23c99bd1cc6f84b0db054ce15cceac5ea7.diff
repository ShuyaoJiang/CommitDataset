[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/RxImplicits.scala, +        val mapped: Observable[Int] = numbers map ((x: Int) => x * x), +        mapped.subscribe((squareVal: Int) => {, +        val filteredObservable: Observable[Int] = for {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/RxImplicits.scala, +        val mapped: Observable[Int] = numbers map ((x: Int) => x * x), +        mapped.subscribe((squareVal: Int) => {, +        val filteredObservable: Observable[Int] = for {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    private final Func1<? super Observer<T>, ? extends Subscription> onSubscribe;, +    protected Observable(Func1<? super Observer<T>, ? extends Subscription> onSubscribe) {, +        Func1<? super Observer<T>, ? extends Subscription> onSubscribeFunction = hook.onSubscribeStart(this, onSubscribe);, +    public static <T> Observable<T> create(Func1<? super Observer<T>, ? extends Subscription> func) {, +    public Observable<List<T>> buffer(Observable<BufferOpening> bufferOpenings, Func1<? super BufferOpening, ? extends Observable<BufferClosing>> bufferClosingSelector) {, +    public Observable<T> filter(Func1<? super T, Boolean> predicate) {, +    public <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<R>> func) {, +    public Observable<T> where(Func1<? super T, Boolean> predicate) {, +    public <R> Observable<R> map(Func1<? super T, ? extends R> func) {, +    public <R> Observable<R> mapMany(Func1<? super T, ? extends Observable<R>> func) {, +    public Observable<T> onErrorResumeNext(final Func1<? super Throwable, ? extends Observable<T>> resumeFunction) {, +    public Observable<T> onErrorReturn(Func1<? super Throwable, ? extends T> resumeFunction) {, +    public Observable<Boolean> all(Func1<? super T, Boolean> predicate) {, +    public Observable<T> takeWhile(final Func1<? super T, Boolean> predicate) {, +    public <K, R> Observable<GroupedObservable<K, R>> groupBy(final Func1<? super T, ? extends K> keySelector, final Func1<? super T, ? extends R> elementSelector) {, +    public <K> Observable<GroupedObservable<K, T>> groupBy(final Func1<? super T, ? extends K> keySelector) {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/RxImplicits.scala, +        val mapped: Observable[Int] = numbers map ((x: Int) => x * x), +        mapped.subscribe((squareVal: Int) => {, +        val filteredObservable: Observable[Int] = for {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    private final Func1<? super Observer<T>, ? extends Subscription> onSubscribe;, +    protected Observable(Func1<? super Observer<T>, ? extends Subscription> onSubscribe) {, +        Func1<? super Observer<T>, ? extends Subscription> onSubscribeFunction = hook.onSubscribeStart(this, onSubscribe);, +    public static <T> Observable<T> create(Func1<? super Observer<T>, ? extends Subscription> func) {, +    public Observable<List<T>> buffer(Observable<BufferOpening> bufferOpenings, Func1<? super BufferOpening, ? extends Observable<BufferClosing>> bufferClosingSelector) {, +    public Observable<T> filter(Func1<? super T, Boolean> predicate) {, +    public <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<R>> func) {, +    public Observable<T> where(Func1<? super T, Boolean> predicate) {, +    public <R> Observable<R> map(Func1<? super T, ? extends R> func) {, +    public <R> Observable<R> mapMany(Func1<? super T, ? extends Observable<R>> func) {, +    public Observable<T> onErrorResumeNext(final Func1<? super Throwable, ? extends Observable<T>> resumeFunction) {, +    public Observable<T> onErrorReturn(Func1<? super Throwable, ? extends T> resumeFunction) {, +    public Observable<Boolean> all(Func1<? super T, Boolean> predicate) {, +    public Observable<T> takeWhile(final Func1<? super T, Boolean> predicate) {, +    public <K, R> Observable<GroupedObservable<K, R>> groupBy(final Func1<? super T, ? extends K> keySelector, final Func1<? super T, ? extends R> elementSelector) {, +    public <K> Observable<GroupedObservable<K, T>> groupBy(final Func1<? super T, ? extends K> keySelector) {, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +    protected BlockingObservable(Func1<? super Observer<T>, ? extends Subscription> onSubscribe) {, +    public static <T> T last(final Observable<T> source, final Func1<? super T, Boolean> predicate) {, +    public static <T> T lastOrDefault(Observable<T> source, T defaultValue, Func1<? super T, Boolean> predicate) {, +    public static <T> T single(Observable<T> source, Func1<? super T, Boolean> predicate) {, +    public static <T> T singleOrDefault(Observable<T> source, T defaultValue, Func1<? super T, Boolean> predicate) {, +    public T last(final Func1<? super T, Boolean> predicate) {, +    public T lastOrDefault(T defaultValue, Func1<? super T, Boolean> predicate) {, +    public T single(Func1<? super T, Boolean> predicate) {, +    public T singleOrDefault(T defaultValue, Func1<? super T, Boolean> predicate) {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/RxImplicits.scala, +        val mapped: Observable[Int] = numbers map ((x: Int) => x * x), +        mapped.subscribe((squareVal: Int) => {, +        val filteredObservable: Observable[Int] = for {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    private final Func1<? super Observer<T>, ? extends Subscription> onSubscribe;, +    protected Observable(Func1<? super Observer<T>, ? extends Subscription> onSubscribe) {, +        Func1<? super Observer<T>, ? extends Subscription> onSubscribeFunction = hook.onSubscribeStart(this, onSubscribe);, +    public static <T> Observable<T> create(Func1<? super Observer<T>, ? extends Subscription> func) {, +    public Observable<List<T>> buffer(Observable<BufferOpening> bufferOpenings, Func1<? super BufferOpening, ? extends Observable<BufferClosing>> bufferClosingSelector) {, +    public Observable<T> filter(Func1<? super T, Boolean> predicate) {, +    public <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<R>> func) {, +    public Observable<T> where(Func1<? super T, Boolean> predicate) {, +    public <R> Observable<R> map(Func1<? super T, ? extends R> func) {, +    public <R> Observable<R> mapMany(Func1<? super T, ? extends Observable<R>> func) {, +    public Observable<T> onErrorResumeNext(final Func1<? super Throwable, ? extends Observable<T>> resumeFunction) {, +    public Observable<T> onErrorReturn(Func1<? super Throwable, ? extends T> resumeFunction) {, +    public Observable<Boolean> all(Func1<? super T, Boolean> predicate) {, +    public Observable<T> takeWhile(final Func1<? super T, Boolean> predicate) {, +    public <K, R> Observable<GroupedObservable<K, R>> groupBy(final Func1<? super T, ? extends K> keySelector, final Func1<? super T, ? extends R> elementSelector) {, +    public <K> Observable<GroupedObservable<K, T>> groupBy(final Func1<? super T, ? extends K> keySelector) {, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +    protected BlockingObservable(Func1<? super Observer<T>, ? extends Subscription> onSubscribe) {, +    public static <T> T last(final Observable<T> source, final Func1<? super T, Boolean> predicate) {, +    public static <T> T lastOrDefault(Observable<T> source, T defaultValue, Func1<? super T, Boolean> predicate) {, +    public static <T> T single(Observable<T> source, Func1<? super T, Boolean> predicate) {, +    public static <T> T singleOrDefault(Observable<T> source, T defaultValue, Func1<? super T, Boolean> predicate) {, +    public T last(final Func1<? super T, Boolean> predicate) {, +    public T lastOrDefault(T defaultValue, Func1<? super T, Boolean> predicate) {, +    public T single(Func1<? super T, Boolean> predicate) {, +    public T singleOrDefault(T defaultValue, Func1<? super T, Boolean> predicate) {, +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +    protected ConnectableObservable(Func1<? super Observer<T>, ? extends Subscription> onSubscribe) {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/RxImplicits.scala, +        val mapped: Observable[Int] = numbers map ((x: Int) => x * x), +        mapped.subscribe((squareVal: Int) => {, +        val filteredObservable: Observable[Int] = for {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    private final Func1<? super Observer<T>, ? extends Subscription> onSubscribe;, +    protected Observable(Func1<? super Observer<T>, ? extends Subscription> onSubscribe) {, +        Func1<? super Observer<T>, ? extends Subscription> onSubscribeFunction = hook.onSubscribeStart(this, onSubscribe);, +    public static <T> Observable<T> create(Func1<? super Observer<T>, ? extends Subscription> func) {, +    public Observable<List<T>> buffer(Observable<BufferOpening> bufferOpenings, Func1<? super BufferOpening, ? extends Observable<BufferClosing>> bufferClosingSelector) {, +    public Observable<T> filter(Func1<? super T, Boolean> predicate) {]