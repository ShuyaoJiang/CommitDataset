[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.observables.BlockingObservable;, +import rx.operators.AtomicObservableSubscription;, +import rx.operators.AtomicObserver;, +    public BlockingObservable<T> toBlockingObservable() {, +        return BlockingObservable.from(this);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.observables.BlockingObservable;, +import rx.operators.AtomicObservableSubscription;, +import rx.operators.AtomicObserver;, +    public BlockingObservable<T> toBlockingObservable() {, +        return BlockingObservable.from(this);, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +package rx.observables;, +, +import static org.junit.Assert.*;, +, +import java.util.Iterator;, +import java.util.concurrent.Future;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.operators.OperationMostRecent;, +import rx.operators.OperationNext;, +import rx.operators.OperationToFuture;, +import rx.operators.OperationToIterator;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Func1;, +import rx.util.functions.FuncN;, +import rx.util.functions.Functions;, +, +/**, + * Extension of {@link Observable} that provides blocking operators., + * <p>, + * Constructud via {@link #from(Observable)} or {@link Observable#toBlockingObservable()}, + * , + * @param <T>, + */, +public class BlockingObservable<T> extends Observable<T> {, +, +    public static <T> BlockingObservable<T> from(final Observable<T> o) {, +        return new BlockingObservable<T>(new Func1<Observer<T>, Subscription>() {, +, +            @Override, +            public Subscription call(Observer<T> observer) {, +                return o.subscribe(observer);, +            }, +        });, +    }, +, +    /**, +     * Returns an iterator that iterates all values of the observable., +     * , +     * @param that, +     *            an observable sequence to get an iterator for., +     * @param <T>, +     *            the type of source., +     * @return the iterator that could be used to iterate over the elements of the observable., +     */, +    public static <T> Iterator<T> toIterator(Observable<T> source) {, +        return OperationToIterator.toIterator(source);, +    }, +, +    /**, +     * Returns the last element of an observable sequence with a specified source., +     * , +     * @param that, +     *            the source Observable, +     * @return the last element in the observable sequence., +     */, +    public static <T> T last(final Observable<T> source) {, +        return from(source).last();, +    }, +, +    /**, +     * Returns the last element of an observable sequence that matches the predicate., +     * , +     * @param that, +     *            the source Observable, +     * @param predicate, +     *            a predicate function to evaluate for elements in the sequence., +     * @return the last element in the observable sequence., +     */, +    public static <T> T last(final Observable<T> source, final Func1<T, Boolean> predicate) {, +        return last(source.filter(predicate));, +    }, +, +    /**, +     * Returns the last element of an observable sequence that matches the predicate., +     * , +     * @param that, +     *            the source Observable, +     * @param predicate, +     *            a predicate function to evaluate for elements in the sequence.]