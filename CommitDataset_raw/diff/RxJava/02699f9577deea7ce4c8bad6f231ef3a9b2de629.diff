[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def tumblingBufferExample() {, +    o.tumblingBuffer(5).subscribe((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  @Test def tumblingBufferExample2() {, +    val o = Observable.from(1 to 18).slidingBuffer(4, 2), +    o.subscribe(println(_)), +  }, +, +  @Test def slidingBufferExample2() {, +  @Test def slidingBufferExample3() {, +    val o = Observable.from(1 to 18).zip(Observable.interval(100 millis)).map(_._1), +    o.slidingBuffer(500 millis, 200 millis).toBlocking.foreach((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  }, +, +  @Test def tumblingExample() {, +    (for ((o, i) <- Observable.from(1 to 18).tumbling(5).zipWithIndex; n <- o), +  @Test def tumblingExample2() {, +    val o = Observable.from(1 to 18).sliding(4, 2), +    (for ((o, i) <- o.zipWithIndex;, +          n <- o), +      yield s"Observable#$i emits $n", +    ).toBlocking.foreach(println), +  }, +, +  @Test def slidingExample2() {, +    val o = Observable.interval(100 millis).take(20).sliding(500 millis, 200 millis), +    (for ((o, i) <- o.zipWithIndex;, +          n <- o), +      yield s"Observable#$i emits $n", +    ).toBlocking.foreach(println), +  }, +, +  @Test def slidingExample3() {, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def tumblingBufferExample() {, +    o.tumblingBuffer(5).subscribe((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  @Test def tumblingBufferExample2() {, +    val o = Observable.from(1 to 18).slidingBuffer(4, 2), +    o.subscribe(println(_)), +  }, +, +  @Test def slidingBufferExample2() {, +  @Test def slidingBufferExample3() {, +    val o = Observable.from(1 to 18).zip(Observable.interval(100 millis)).map(_._1), +    o.slidingBuffer(500 millis, 200 millis).toBlocking.foreach((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  }, +, +  @Test def tumblingExample() {, +    (for ((o, i) <- Observable.from(1 to 18).tumbling(5).zipWithIndex; n <- o), +  @Test def tumblingExample2() {, +    val o = Observable.from(1 to 18).sliding(4, 2), +    (for ((o, i) <- o.zipWithIndex;, +          n <- o), +      yield s"Observable#$i emits $n", +    ).toBlocking.foreach(println), +  }, +, +  @Test def slidingExample2() {, +    val o = Observable.interval(100 millis).take(20).sliding(500 millis, 200 millis), +    (for ((o, i) <- o.zipWithIndex;, +          n <- o), +      yield s"Observable#$i emits $n", +    ).toBlocking.foreach(println), +  }, +, +  @Test def slidingExample3() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def tumblingBuffer(count: Int): Observable[Seq[T]] = {, +  def slidingBuffer(count: Int, skip: Int): Observable[Seq[T]] = {, +  def tumblingBuffer(timespan: Duration): Observable[Seq[T]] = {, +  def tumblingBuffer(timespan: Duration, scheduler: Scheduler): Observable[Seq[T]] = {, +  def tumblingBuffer(timespan: Duration, count: Int): Observable[Seq[T]] = {, +  def tumblingBuffer(timespan: Duration, count: Int, scheduler: Scheduler): Observable[Seq[T]] = {, +  def slidingBuffer(timespan: Duration, timeshift: Duration): Observable[Seq[T]] = {, +  def slidingBuffer(timespan: Duration, timeshift: Duration, scheduler: Scheduler): Observable[Seq[T]] = {, +  def tumbling(count: Int): Observable[Observable[T]] = {, +  def sliding(count: Int, skip: Int): Observable[Observable[T]] = {, +  def tumbling(timespan: Duration): Observable[Observable[T]] = {, +  def tumbling(timespan: Duration, scheduler: Scheduler): Observable[Observable[T]] = {, +  def tumbling(timespan: Duration, count: Int): Observable[Observable[T]] = {, +  def tumbling(timespan: Duration, count: Int, scheduler: Scheduler): Observable[Observable[T]] = {, +  def sliding(timespan: Duration, timeshift: Duration): Observable[Observable[T]] = {, +  def sliding(timespan: Duration, timeshift: Duration, scheduler: Scheduler): Observable[Observable[T]] = {, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def tumblingBufferExample() {, +    o.tumblingBuffer(5).subscribe((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  @Test def tumblingBufferExample2() {, +    val o = Observable.from(1 to 18).slidingBuffer(4, 2), +    o.subscribe(println(_)), +  }, +, +  @Test def slidingBufferExample2() {, +  @Test def slidingBufferExample3() {, +    val o = Observable.from(1 to 18).zip(Observable.interval(100 millis)).map(_._1), +    o.slidingBuffer(500 millis, 200 millis).toBlocking.foreach((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  }, +, +  @Test def tumblingExample() {, +    (for ((o, i) <- Observable.from(1 to 18).tumbling(5).zipWithIndex; n <- o), +  @Test def tumblingExample2() {]