[+++ b/src/main/java/io/reactivex/Observable.java, +        return new Observable<T>() {, +            protected void subscribeActual(final Observer<? super T> o) {, +                        o.onComplete();, +                        o.onError(t);, +                        o.onNext(t);, +                        o.onSubscribe(Disposables.from(inner));, +        };, +        return new Observable<Integer>() {, +            protected void subscribeActual(Observer<? super Integer> o) {, +                o.onSubscribe(d);, +                    o.onNext((int)i);, +                    o.onComplete();, +        };, +        final Observable<T> outer = this;, +        return new Observable<T>() {, +            protected void subscribeActual(Observer<? super T> o) {, +                outer.subscribe(o);, +        };, +++ b/src/main/java/io/reactivex/Observable.java, +        return new Observable<T>() {, +            protected void subscribeActual(final Observer<? super T> o) {, +                        o.onComplete();, +                        o.onError(t);, +                        o.onNext(t);, +                        o.onSubscribe(Disposables.from(inner));, +        };, +        return new Observable<Integer>() {, +            protected void subscribeActual(Observer<? super Integer> o) {, +                o.onSubscribe(d);, +                    o.onNext((int)i);, +                    o.onComplete();, +        };, +        final Observable<T> outer = this;, +        return new Observable<T>() {, +            protected void subscribeActual(Observer<? super T> o) {, +                outer.subscribe(o);, +        };, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservablePublish.java, +        return new Observable<R>() {, +            protected void subscribeActual(Observer<? super R> o) {, +                ConnectableObservable<T> op = ObservablePublish.create(source, bufferSize);, +                final ObserverResourceWrapper<R> srw = new ObserverResourceWrapper<R>(o);, +        };, +++ b/src/main/java/io/reactivex/Observable.java, +        return new Observable<T>() {, +            protected void subscribeActual(final Observer<? super T> o) {, +                        o.onComplete();, +                        o.onError(t);, +                        o.onNext(t);, +                        o.onSubscribe(Disposables.from(inner));, +        };, +        return new Observable<Integer>() {, +            protected void subscribeActual(Observer<? super Integer> o) {, +                o.onSubscribe(d);, +                    o.onNext((int)i);, +                    o.onComplete();, +        };, +        final Observable<T> outer = this;, +        return new Observable<T>() {, +            protected void subscribeActual(Observer<? super T> o) {, +                outer.subscribe(o);, +        };, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservablePublish.java, +        return new Observable<R>() {, +            protected void subscribeActual(Observer<? super R> o) {, +                ConnectableObservable<T> op = ObservablePublish.create(source, bufferSize);, +                final ObserverResourceWrapper<R> srw = new ObserverResourceWrapper<R>(o);, +        };, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java, +        return new Observable<R>() {, +            protected void subscribeActual(Observer<? super R> child) {, +        };, +++ b/src/main/java/io/reactivex/Observable.java, +        return new Observable<T>() {, +            protected void subscribeActual(final Observer<? super T> o) {, +                        o.onComplete();, +                        o.onError(t);, +                        o.onNext(t);, +                        o.onSubscribe(Disposables.from(inner));, +        };, +        return new Observable<Integer>() {, +            protected void subscribeActual(Observer<? super Integer> o) {, +                o.onSubscribe(d);, +                    o.onNext((int)i);, +                    o.onComplete();, +        };, +        final Observable<T> outer = this;, +        return new Observable<T>() {, +            protected void subscribeActual(Observer<? super T> o) {, +                outer.subscribe(o);, +        };, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservablePublish.java, +        return new Observable<R>() {, +            protected void subscribeActual(Observer<? super R> o) {, +                ConnectableObservable<T> op = ObservablePublish.create(source, bufferSize);, +                final ObserverResourceWrapper<R> srw = new ObserverResourceWrapper<R>(o);, +        };, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java, +        return new Observable<R>() {]