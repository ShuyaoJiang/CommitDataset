[+++ b/src/main/java/io/reactivex/Maybe.java, +    public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) {, +++ b/src/main/java/io/reactivex/Maybe.java, +    public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) {, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeDoOnEvent.java, +                this.d = d;, +, +++ b/src/main/java/io/reactivex/Maybe.java, +    public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) {, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeDoOnEvent.java, +                this.d = d;, +, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeEqualSingle.java, +            return DisposableHelper.isDisposed(observer1.get());, +    implements MaybeObserver<T> {, +++ b/src/main/java/io/reactivex/Maybe.java, +    public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) {, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeDoOnEvent.java, +                this.d = d;, +, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeEqualSingle.java, +            return DisposableHelper.isDisposed(observer1.get());, +    implements MaybeObserver<T> {, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable.java, +        void fastPath(Subscriber<? super R> a, Iterator<? extends R> iter) {, +        void drain() {, +            if (getAndIncrement() != 0) {, +                return;, +            }, +, +            Subscriber<? super R> a = actual;, +            Iterator<? extends R> iter = this.it;, +, +            if (outputFused && iter != null) {, +                a.onNext(null);, +                a.onComplete();, +                return;, +            }, +, +            int missed = 1;, +, +            for (;;) {, +, +                if (iter != null) {, +                    long r = requested.get();, +, +                    if (r == Long.MAX_VALUE) {, +                        fastPath(a, iter);, +                        return;, +                    }, +, +                    long e = 0L;, +, +++ b/src/main/java/io/reactivex/Maybe.java, +    public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) {, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeDoOnEvent.java, +                this.d = d;, +, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeEqualSingle.java, +            return DisposableHelper.isDisposed(observer1.get());, +    implements MaybeObserver<T> {, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable.java, +        void fastPath(Subscriber<? super R> a, Iterator<? extends R> iter) {, +        void drain() {, +            if (getAndIncrement() != 0) {, +                return;, +            }, +, +            Subscriber<? super R> a = actual;, +            Iterator<? extends R> iter = this.it;, +, +            if (outputFused && iter != null) {, +                a.onNext(null);, +                a.onComplete();, +                return;, +            }, +, +            int missed = 1;, +, +            for (;;) {, +, +                if (iter != null) {, +                    long r = requested.get();, +, +                    if (r == Long.MAX_VALUE) {, +                        fastPath(a, iter);, +                        return;, +                    }, +, +                    long e = 0L;, +, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable.java, +import io.reactivex.internal.observers.BasicQueueDisposable;, +    extends BasicQueueDisposable<R>, +            Observer<? super R> a = actual;, +, +                a.onError(ex);, +                a.onComplete();, +        @Override, +        public void onError(Throwable e) {]