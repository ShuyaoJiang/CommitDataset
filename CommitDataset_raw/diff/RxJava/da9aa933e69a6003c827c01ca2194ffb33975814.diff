[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Pivots a sequence of {@code GroupedObservable}s emitted by an {@code Observable} so as to swap the group, +     * and and the set on which their items are grouped., +     * For example an {@code Observable} such as this =&gt;, +     * <p>, +     * <em>Note:</em> A {@link GroupedObservable} will cache the items it is to emit until such time as it, +     * is subscribed to. For this reason, in order to avoid memory leaks, you should not simply ignore those, +     * {@code GroupedObservable}s that do not concern you. Instead, you can signal to them that they may, +     * discard their buffers by applying an operator like {@link #take}{@code (0)} to them., +     * @return an {@code Observable} containing a stream of nested {@code GroupedObservable}s with swapped, +     *         inner-outer keys., +     * Groups the items emitted by an {@code Observable} according to a specified criterion, and emits these, +     * grouped items as {@link GroupedObservable}s, one {@code GroupedObservable} per group., +     * <p>, +     * <em>Note:</em> A {@link GroupedObservable} will cache the items it is to emit until such time as it, +     * is subscribed to. For this reason, in order to avoid memory leaks, you should not simply ignore those, +     * {@code GroupedObservable}s that do not concern you. Instead, you can signal to them that they may, +     * discard their buffers by applying an operator like {@link #take}{@code (0)} to them., +     * @return an {@code Observable} that emits {@link GroupedObservable}s, each of which corresponds to a, +     *         unique key value and each of which emits those items from the source Observable that share that, +     *         key value, +     * Groups the items emitted by an {@code Observable} according to a specified key selector function until, +     * the duration {@code Observable} expires for the key., +     * <p>, +     * <em>Note:</em> A {@link GroupedObservable} will cache the items it is to emit until such time as it, +     * is subscribed to. For this reason, in order to avoid memory leaks, you should not simply ignore those, +     * {@code GroupedObservable}s that do not concern you. Instead, you can signal to them that they may, +     * discard their buffers by applying an operator like {@link #take}{@code (0)} to them., +     * @return an {@code Observable} that emits {@link GroupedObservable}s, each of which corresponds to a key, +     *         value and each of which emits all items emitted by the source {@code Observable} during that, +     *         key's duration that share that same key value, +     * Groups the items emitted by an {@code Observable} (transformed by a selector) according to a specified, +     * key selector function until the duration Observable expires for the key., +     * <p>, +     * <em>Note:</em> A {@link GroupedObservable} will cache the items it is to emit until such time as it, +     * is subscribed to. For this reason, in order to avoid memory leaks, you should not simply ignore those, +     * {@code GroupedObservable}s that do not concern you. Instead, you can signal to them that they may, +     * discard their buffers by applying an operator like {@link #take}{@code (0)} to them., +     *            a function to map each item emitted by the source {@code Observable} to an item emitted by one, +     *            of the resulting {@link GroupedObservable}s, +     * @return an {@code Observable} that emits {@link GroupedObservable}s, each of which corresponds to a key, +     *         value and each of which emits all items emitted by the source {@code Observable} during that, +     *         key's duration that share that same key value, transformed by the value selector, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Pivots a sequence of {@code GroupedObservable}s emitted by an {@code Observable} so as to swap the group, +     * and and the set on which their items are grouped., +     * For example an {@code Observable} such as this =&gt;, +     * <p>, +     * <em>Note:</em> A {@link GroupedObservable} will cache the items it is to emit until such time as it, +     * is subscribed to. For this reason, in order to avoid memory leaks, you should not simply ignore those, +     * {@code GroupedObservable}s that do not concern you. Instead, you can signal to them that they may, +     * discard their buffers by applying an operator like {@link #take}{@code (0)} to them., +     * @return an {@code Observable} containing a stream of nested {@code GroupedObservable}s with swapped, +     *         inner-outer keys., +     * Groups the items emitted by an {@code Observable} according to a specified criterion, and emits these, +     * grouped items as {@link GroupedObservable}s, one {@code GroupedObservable} per group., +     * <p>, +     * <em>Note:</em> A {@link GroupedObservable} will cache the items it is to emit until such time as it, +     * is subscribed to. For this reason, in order to avoid memory leaks, you should not simply ignore those, +     * {@code GroupedObservable}s that do not concern you. Instead, you can signal to them that they may, +     * discard their buffers by applying an operator like {@link #take}{@code (0)} to them., +     * @return an {@code Observable} that emits {@link GroupedObservable}s, each of which corresponds to a, +     *         unique key value and each of which emits those items from the source Observable that share that, +     *         key value, +     * Groups the items emitted by an {@code Observable} according to a specified key selector function until, +     * the duration {@code Observable} expires for the key., +     * <p>, +     * <em>Note:</em> A {@link GroupedObservable} will cache the items it is to emit until such time as it, +     * is subscribed to. For this reason, in order to avoid memory leaks, you should not simply ignore those, +     * {@code GroupedObservable}s that do not concern you. Instead, you can signal to them that they may, +     * discard their buffers by applying an operator like {@link #take}{@code (0)} to them., +     * @return an {@code Observable} that emits {@link GroupedObservable}s, each of which corresponds to a key, +     *         value and each of which emits all items emitted by the source {@code Observable} during that, +     *         key's duration that share that same key value, +     * Groups the items emitted by an {@code Observable} (transformed by a selector) according to a specified, +     * key selector function until the duration Observable expires for the key., +     * <p>, +     * <em>Note:</em> A {@link GroupedObservable} will cache the items it is to emit until such time as it, +     * is subscribed to. For this reason, in order to avoid memory leaks, you should not simply ignore those, +     * {@code GroupedObservable}s that do not concern you. Instead, you can signal to them that they may, +     * discard their buffers by applying an operator like {@link #take}{@code (0)} to them., +     *            a function to map each item emitted by the source {@code Observable} to an item emitted by one, +     *            of the resulting {@link GroupedObservable}s, +     * @return an {@code Observable} that emits {@link GroupedObservable}s, each of which corresponds to a key, +     *         value and each of which emits all items emitted by the source {@code Observable} during that, +     *         key's duration that share that same key value, transformed by the value selector, +++ b/rxjava-core/src/main/java/rx/observables/GroupedObservable.java, + * <p>, + * <em>Note:</em> A {@link GroupedObservable} will cache the items it is to emit until such time as it, + * is subscribed to. For this reason, in order to avoid memory leaks, you should not simply ignore those, + * {@code GroupedObservable}s that do not concern you. Instead, you can signal to them that they may, + * discard their buffers by applying an operator like {@link Observable#take}{@code (0)} to them., + * @see Observable#groupBy(Func1), + * @see <a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#groupby-and-groupbyuntil">RxJava Wiki: groupBy() and groupByUntil()</a>, + * @see <a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#pivot">RxJava Wiki: pivot()</a>]