[+++ b/src/main/java/io/reactivex/Completable.java, +     *     // The downstream's CompletableObserver that will receive the onXXX events, +++ b/src/main/java/io/reactivex/Completable.java, +     *     // The downstream's CompletableObserver that will receive the onXXX events, +++ b/src/main/java/io/reactivex/Flowable.java, +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     * resulting sequence terminates immediately (normally or with all the errors accumulated until that point)., +     *  {@code MissingBackpressureException} is signaled. If any of the inner {@code Publisher}s violates, +     *  {@code MissingBackpressureException} is signaled. If any of the inner {@code Publisher}s violates, +     *                       is interpreted as an indication to subscribe to all sources at once, +     *  {@code MissingBackpressureException} is signaled. If any of the inner {@code Publisher}s violates, +     * The defer Subscriber allows you to defer or delay emitting items from a Publisher until such time as a, +     * return value of the {@link Future#get} method of that object by passing the object into the {@code from}, +     * Unlike 1.x, canceling the Flowable won't cancel the future. If necessary, one can use composition to achieve the, +     * return value of the {@link Future#get} method of that object by passing the object into the {@code fromFuture}, +     * Unlike 1.x, canceling the Flowable won't cancel the future. If necessary, one can use composition to achieve the, +     * return value of the {@link Future#get} method of that object by passing the object into the {@code from}, +     * Unlike 1.x, canceling the Flowable won't cancel the future. If necessary, one can use composition to achieve the, +     * return value of the {@link Future#get} method of that object by passing the object into the {@code from}, +     * Unlike 1.x, canceling the Flowable won't cancel the future. If necessary, one can use composition to achieve the, +     * @throws NullPointerException if the {@code source} {@code Publisher} is null, +     * {@code onComplete} to signal a value or a terminal event. Signaling multiple {@code onNext}, +     * {@code onComplete} to signal a value or a terminal event. Signaling multiple {@code onNext}, +     * {@code onComplete} to signal a value or a terminal event. Signaling multiple {@code onNext}, +     * terminates the sequence or it gets canceled, +     * the next invocation. Signaling multiple {@code onNext}, +     * the next invocation. Signaling multiple {@code onNext}, +     * terminates the sequence or it gets canceled, +     * Returns a Flowable that emits a {@code 0L} after the {@code initialDelay} and ever-increasing numbers, +     * @return a Flowable that emits a 0L after the {@code initialDelay} and ever-increasing numbers after, +     * Returns a Flowable that emits a {@code 0L} after the {@code initialDelay} and ever-increasing numbers, +     * @return a Flowable that emits a 0L after the {@code initialDelay} and ever-increasing numbers after, +     * @param initialDelay the initial delay before signaling the first value (the start), +     * @param initialDelay the initial delay before signaling the first value (the start), +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code Publisher}s are canceled., +     *  signaled by source(s) after the returned {@code Flowable} has been canceled or terminated with a, +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code Publisher}s are canceled., +     *  signaled by source(s) after the returned {@code Flowable} has been canceled or terminated with a, +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code Publisher}s are canceled., +     *  signaled by source(s) after the returned {@code Flowable} has been canceled or terminated with a, +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code Publisher}s are canceled., +     *  signaled by source(s) after the returned {@code Flowable} has been canceled or terminated with a, +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code Publisher}s are canceled., +     *  signaled by source(s) after the returned {@code Flowable} has been canceled or terminated with a, +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code Publisher}s are canceled., +     *  signaled by source(s) after the returned {@code Flowable} has been canceled or terminated with a, +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code Publisher}s are canceled., +     *  signaled by source(s) after the returned {@code Flowable} has been canceled or terminated with a, +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code Publisher}s are canceled., +     *  signaled by source(s) after the returned {@code Flowable} has been canceled or terminated with a, +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code Publisher}s are canceled., +     *  signaled by source(s) after the returned {@code Flowable} has been canceled or terminated with a, +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code Publisher}s are canceled., +     *  signaled by source(s) after the returned {@code Flowable} has been canceled or terminated with a, +     * If the outer Publisher signals an onError, the inner Publisher is canceled and the error delivered in-sequence., +     * If the outer Publisher signals an onError, the inner Publisher is canceled and the error delivered in-sequence., +     * or wrapped into a CompositeException along with the other possible errors the former inner Publishers signaled., +     * or wrapped into a CompositeException along with the other possible errors the former inner Publishers signaled., +     * before termination. Otherwise, resource disposal will occur on cancellation.  Eager disposal is, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if, +     * one of the sources is shorter than the rest while canceling the other sources. Therefore, it, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if, +     * one of the sources is shorter than the rest while canceling the other sources. Therefore, it, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if, +     * one of the sources is shorter than the rest while canceling the other sources. Therefore, it, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if, +     * one of the sources is shorter than the rest while canceling the other sources. Therefore, it, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if, +     * one of the sources is shorter than the rest while canceling the other sources. Therefore, it, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if, +     * one of the sources is shorter than the rest while canceling the other sources. Therefore, it, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if, +     * one of the sources is shorter than the rest while canceling the other sources. Therefore, it, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if, +     * one of the sources is shorter than the rest while canceling the other sources. Therefore, it, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if, +     * one of the sources is shorter than the rest while canceling the other sources. Therefore, it, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if, +     * one of the sources is shorter than the rest while canceling the other sources. Therefore, it, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if, +     * one of the sources is shorter than the rest while canceling the other sources. Therefore, it, +     * The operator subscribes to its sources in the order they are specified and completes eagerly if]