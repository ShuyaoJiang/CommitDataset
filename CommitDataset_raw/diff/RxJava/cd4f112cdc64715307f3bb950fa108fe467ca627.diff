[+++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.7.270', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.7.270', +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.7.270', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.7.270', +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +import rx.subscriptions.Subscriptions, +import rx.Observer, +import rx.Subscription, +import rx.Observable.OnSubscribeFunc, +        assertEquals("three", Observable.from(listOf("one", "two", "three"))!!.toBlockingObservable()!!.last()), +        assertEquals("two", Observable.from(listOf("one", "two", "three"))!!.toBlockingObservable()!!.last { x -> x!!.length == 3 }), +        assertEquals(5, Observable.from(list)!!.count()!!.toBlockingObservable()!!.single()), +        assertEquals(2, Observable.from(listOf(list, 6))!!.count()!!.toBlockingObservable()!!.single()), +        assertEquals(6, Observable.from(list)!!.startWith(0)!!.count()!!.toBlockingObservable()!!.single()), +        assertEquals(10, Observable.from(list)!!.startWith(startList)!!.count()!!.toBlockingObservable()!!.single()), +        Observable.create(AsyncObservable())!!.toBlockingObservable()!!.forEach(received()), +        Observable.create(AsyncObservable())!!.toBlockingObservable()!!.forEach { throw RuntimeException("err") }, +        assertEquals("two", Observable.from(listOf("one", "two"))!!.toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length == 3 }), +        assertEquals("default", Observable.from(listOf("one", "two"))!!.toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length > 3 }), +        assertEquals("one", Observable.from("one")!!.toBlockingObservable()!!.single { x -> x!!.length == 3 }), +        Observable.from(listOf("one", "two"))!!.toBlockingObservable()!!.single { x -> x!!.length == 3 }, +        val values = Observable.zip(o1, o2, o3) { a, b, c -> listOf(a, b, c) }!!.toList()!!.toBlockingObservable()!!.single()!!, +        val values = Observable.zip(listOf(o1, o2, o3)) { args -> listOf(*args) }!!.toList()!!.toBlockingObservable()!!.single()!!, +        }!!.toBlockingObservable()!!.forEach { s ->, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.7.270', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.7.270', +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +import rx.subscriptions.Subscriptions, +import rx.Observer, +import rx.Subscription, +import rx.Observable.OnSubscribeFunc, +        assertEquals("three", Observable.from(listOf("one", "two", "three"))!!.toBlockingObservable()!!.last()), +        assertEquals("two", Observable.from(listOf("one", "two", "three"))!!.toBlockingObservable()!!.last { x -> x!!.length == 3 }), +        assertEquals(5, Observable.from(list)!!.count()!!.toBlockingObservable()!!.single()), +        assertEquals(2, Observable.from(listOf(list, 6))!!.count()!!.toBlockingObservable()!!.single()), +        assertEquals(6, Observable.from(list)!!.startWith(0)!!.count()!!.toBlockingObservable()!!.single()), +        assertEquals(10, Observable.from(list)!!.startWith(startList)!!.count()!!.toBlockingObservable()!!.single()), +        Observable.create(AsyncObservable())!!.toBlockingObservable()!!.forEach(received()), +        Observable.create(AsyncObservable())!!.toBlockingObservable()!!.forEach { throw RuntimeException("err") }, +        assertEquals("two", Observable.from(listOf("one", "two"))!!.toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length == 3 }), +        assertEquals("default", Observable.from(listOf("one", "two"))!!.toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length > 3 }), +        assertEquals("one", Observable.from("one")!!.toBlockingObservable()!!.single { x -> x!!.length == 3 }), +        Observable.from(listOf("one", "two"))!!.toBlockingObservable()!!.single { x -> x!!.length == 3 }, +        val values = Observable.zip(o1, o2, o3) { a, b, c -> listOf(a, b, c) }!!.toList()!!.toBlockingObservable()!!.single()!!, +        val values = Observable.zip(listOf(o1, o2, o3)) { args -> listOf(*args) }!!.toList()!!.toBlockingObservable()!!.single()!!, +        }!!.toBlockingObservable()!!.forEach { s ->, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        assertEquals("three", listOf("one", "two", "three").asObservable().toBlockingObservable()!!.last()), +        assertEquals("two", listOf("one", "two", "three").asObservable().toBlockingObservable()!!.last { x -> x!!.length == 3 }), +        assertEquals(5, listOf(1, 2, 3, 4, 5).asObservable().count()!!.toBlockingObservable()!!.single()), +        assertEquals(6, list.asObservable().startWith(0)!!.count()!!.toBlockingObservable()!!.single()), +        assertEquals(10, list.asObservable().startWith(startList)!!.count()!!.toBlockingObservable()!!.single()), +        asyncObservable.asObservable().toBlockingObservable()!!.forEach(received()), +        asyncObservable.asObservable().toBlockingObservable()!!.forEach { throw RuntimeException("err") }, +        assertEquals("two", ("one" to"two").asObservable().toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length == 3 }), +        assertEquals("default", ("one" to"two").asObservable().toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length > 3 }), +        val values = Observable.zip(o1, o2, o3) { a, b, c -> listOf(a, b, c) }!!.toList()!!.toBlockingObservable()!!.single()!!, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.7.270', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.7.270', +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +import rx.subscriptions.Subscriptions, +import rx.Observer, +import rx.Subscription, +import rx.Observable.OnSubscribeFunc, +        assertEquals("three", Observable.from(listOf("one", "two", "three"))!!.toBlockingObservable()!!.last()), +        assertEquals("two", Observable.from(listOf("one", "two", "three"))!!.toBlockingObservable()!!.last { x -> x!!.length == 3 }), +        assertEquals(5, Observable.from(list)!!.count()!!.toBlockingObservable()!!.single()), +        assertEquals(2, Observable.from(listOf(list, 6))!!.count()!!.toBlockingObservable()!!.single()), +        assertEquals(6, Observable.from(list)!!.startWith(0)!!.count()!!.toBlockingObservable()!!.single()), +        assertEquals(10, Observable.from(list)!!.startWith(startList)!!.count()!!.toBlockingObservable()!!.single()), +        Observable.create(AsyncObservable())!!.toBlockingObservable()!!.forEach(received()), +        Observable.create(AsyncObservable())!!.toBlockingObservable()!!.forEach { throw RuntimeException("err") }, +        assertEquals("two", Observable.from(listOf("one", "two"))!!.toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length == 3 }), +        assertEquals("default", Observable.from(listOf("one", "two"))!!.toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length > 3 }), +        assertEquals("one", Observable.from("one")!!.toBlockingObservable()!!.single { x -> x!!.length == 3 }), +        Observable.from(listOf("one", "two"))!!.toBlockingObservable()!!.single { x -> x!!.length == 3 }, +        val values = Observable.zip(o1, o2, o3) { a, b, c -> listOf(a, b, c) }!!.toList()!!.toBlockingObservable()!!.single()!!, +        val values = Observable.zip(listOf(o1, o2, o3)) { args -> listOf(*args) }!!.toList()!!.toBlockingObservable()!!.single()!!, +        }!!.toBlockingObservable()!!.forEach { s ->, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        assertEquals("three", listOf("one", "two", "three").asObservable().toBlockingObservable()!!.last()), +        assertEquals("two", listOf("one", "two", "three").asObservable().toBlockingObservable()!!.last { x -> x!!.length == 3 }), +        assertEquals(5, listOf(1, 2, 3, 4, 5).asObservable().count()!!.toBlockingObservable()!!.single()), +        assertEquals(6, list.asObservable().startWith(0)!!.count()!!.toBlockingObservable()!!.single()), +        assertEquals(10, list.asObservable().startWith(startList)!!.count()!!.toBlockingObservable()!!.single()), +        asyncObservable.asObservable().toBlockingObservable()!!.forEach(received()), +        asyncObservable.asObservable().toBlockingObservable()!!.forEach { throw RuntimeException("err") }, +        assertEquals("two", ("one" to"two").asObservable().toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length == 3 }), +        assertEquals("default", ("one" to"two").asObservable().toBlockingObservable()!!.lastOrDefault("default") { x -> x!!.length > 3 }), +        val values = Observable.zip(o1, o2, o3) { a, b, c -> listOf(a, b, c) }!!.toList()!!.toBlockingObservable()!!.single()!!, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorObserveOn.java, +            add(scheduledUnsubscribe);, +, +            subscriber.add(recursiveScheduler);, +            subscriber.add(this);, +++ b/language-adaptors/rxjava-kotlin/build.gradle]