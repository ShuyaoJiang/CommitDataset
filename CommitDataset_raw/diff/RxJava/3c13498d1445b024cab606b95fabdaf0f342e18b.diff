[+++ b/rxjava-core/src/main/java/rx/observers/SafeSubscriber.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +    /** Terminal state indication if not zero. */, +    volatile int done;, +    @SuppressWarnings("rawtypes"), +    static final AtomicIntegerFieldUpdater<SafeSubscriber> DONE_UPDATER, +            = AtomicIntegerFieldUpdater.newUpdater(SafeSubscriber.class, "done");, +        if (DONE_UPDATER.getAndSet(this, 1) == 0) {, +        if (DONE_UPDATER.getAndSet(this, 1) == 0) {, +            if (done == 0) {, +++ b/rxjava-core/src/main/java/rx/observers/SafeSubscriber.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +    /** Terminal state indication if not zero. */, +    volatile int done;, +    @SuppressWarnings("rawtypes"), +    static final AtomicIntegerFieldUpdater<SafeSubscriber> DONE_UPDATER, +            = AtomicIntegerFieldUpdater.newUpdater(SafeSubscriber.class, "done");, +        if (DONE_UPDATER.getAndSet(this, 1) == 0) {, +        if (DONE_UPDATER.getAndSet(this, 1) == 0) {, +            if (done == 0) {, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +, +    private final AtomicReference<State> state = new AtomicReference<State>();, +        state.set(CLEAR_STATE);, +        state.set(new State(false, subscriptions));, +        return state.get().isUnsubscribed;, +            oldState = state.get();, +        } while (!state.compareAndSet(oldState, newState));, +            oldState = state.get();, +        } while (!state.compareAndSet(oldState, newState));, +            oldState = state.get();, +        } while (!state.compareAndSet(oldState, newState));, +        State oldState;, +        State newState;, +        do {, +            oldState = state.get();, +            } else {, +                newState = oldState.unsubscribe();, +        } while (!state.compareAndSet(oldState, newState));]