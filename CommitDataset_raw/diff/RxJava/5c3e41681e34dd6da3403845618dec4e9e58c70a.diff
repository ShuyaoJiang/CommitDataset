[+++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +                        Integer idx = state.replayState.remove(o);, +                        replayObserverFromIndex(state.history, idx, o);, +                    }, +                }, , +                new Action1<SubjectObserver<? super T>>() {, +                    @Override, +                    public void call(SubjectObserver<? super T> o) {, +                        state.replayState.remove(o);, +    /**, +     * @return Returns the number of subscribers., +     */, +    /* Support test.*/ int subscriberCount() {, +        return state.replayState.size();, +    }, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +                        Integer idx = state.replayState.remove(o);, +                        replayObserverFromIndex(state.history, idx, o);, +                    }, +                }, , +                new Action1<SubjectObserver<? super T>>() {, +                    @Override, +                    public void call(SubjectObserver<? super T> o) {, +                        state.replayState.remove(o);, +    /**, +     * @return Returns the number of subscribers., +     */, +    /* Support test.*/ int subscriberCount() {, +        return state.replayState.size();, +    }, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +     * @param onUnsubscribe called after the child subscription is removed from the state, +    public OnSubscribe<T> getOnSubscribeFunc(final Action1<SubjectObserver<? super T>> onSubscribe, , +            final Action1<SubjectObserver<? super T>> onTerminated,, +            final Action1<SubjectObserver<? super T>> onUnsubscribe) {, +                final SubjectObserver<T> observer = new SubjectObserver<T>(actualOperator);, +                                if (onUnsubscribe != null) {, +                                    onUnsubscribe.call(observer);, +                                }, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +                }, null);, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +                        Integer idx = state.replayState.remove(o);, +                        replayObserverFromIndex(state.history, idx, o);, +                    }, +                }, , +                new Action1<SubjectObserver<? super T>>() {, +                    @Override, +                    public void call(SubjectObserver<? super T> o) {, +                        state.replayState.remove(o);, +    /**, +     * @return Returns the number of subscribers., +     */, +    /* Support test.*/ int subscriberCount() {, +        return state.replayState.size();, +    }, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +     * @param onUnsubscribe called after the child subscription is removed from the state, +    public OnSubscribe<T> getOnSubscribeFunc(final Action1<SubjectObserver<? super T>> onSubscribe, , +            final Action1<SubjectObserver<? super T>> onTerminated,, +            final Action1<SubjectObserver<? super T>> onUnsubscribe) {, +                final SubjectObserver<T> observer = new SubjectObserver<T>(actualOperator);, +                                if (onUnsubscribe != null) {, +                                    onUnsubscribe.call(observer);, +                                }, +++ b/rxjava-core/src/test/java/rx/subjects/ReplaySubjectTest.java, +    @Test, +    public void testSubscriptionLeak() {, +        ReplaySubject<Object> replaySubject = ReplaySubject.create();, +        Subscription s = replaySubject.subscribe();, +, +        assertEquals(1, replaySubject.subscriberCount());]