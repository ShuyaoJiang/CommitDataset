[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +  implicit def scalaWorkerToJavaWorker(s: Worker): rx.Scheduler.Worker = s.asJavaWorker, +  implicit def javaWorkerToScalaWorker(s: rx.Scheduler.Worker): Worker = Worker(s), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +  implicit def scalaWorkerToJavaWorker(s: Worker): rx.Scheduler.Worker = s.asJavaWorker, +  implicit def javaWorkerToScalaWorker(s: rx.Scheduler.Worker): Worker = Worker(s), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  def createWorker: Worker = this.asJavaScheduler.createWorker(), +object Worker {, +  def apply(worker: rx.Scheduler.Worker): Worker = new Worker { private[scala] val asJavaWorker = worker }, +trait Worker extends Subscription {, +  private [scala] val asJavaWorker: rx.Scheduler.Worker, +    this.asJavaWorker.schedule(, +  def schedule(action: Unit => Unit): Subscription = this.asJavaWorker.schedule(, +  def now: Long = this.asJavaWorker.now(), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +  implicit def scalaWorkerToJavaWorker(s: Worker): rx.Scheduler.Worker = s.asJavaWorker, +  implicit def javaWorkerToScalaWorker(s: rx.Scheduler.Worker): Worker = Worker(s), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  def createWorker: Worker = this.asJavaScheduler.createWorker(), +object Worker {, +  def apply(worker: rx.Scheduler.Worker): Worker = new Worker { private[scala] val asJavaWorker = worker }, +trait Worker extends Subscription {, +  private [scala] val asJavaWorker: rx.Scheduler.Worker, +    this.asJavaWorker.schedule(, +  def schedule(action: Unit => Unit): Subscription = this.asJavaWorker.schedule(, +  def now: Long = this.asJavaWorker.now(), +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +    public Worker createWorker() {, +    private static class InnerHandlerThreadScheduler extends Worker {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +  implicit def scalaWorkerToJavaWorker(s: Worker): rx.Scheduler.Worker = s.asJavaWorker, +  implicit def javaWorkerToScalaWorker(s: rx.Scheduler.Worker): Worker = Worker(s), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  def createWorker: Worker = this.asJavaScheduler.createWorker(), +object Worker {, +  def apply(worker: rx.Scheduler.Worker): Worker = new Worker { private[scala] val asJavaWorker = worker }, +trait Worker extends Subscription {, +  private [scala] val asJavaWorker: rx.Scheduler.Worker, +    this.asJavaWorker.schedule(, +  def schedule(action: Unit => Unit): Subscription = this.asJavaWorker.schedule(, +  def now: Long = this.asJavaWorker.now(), +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +    public Worker createWorker() {, +    private static class InnerHandlerThreadScheduler extends Worker {, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/subscriptions/AndroidSubscriptions.java, +import rx.Scheduler.Worker;, +                    final Worker inner = AndroidSchedulers.mainThread().createWorker();, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +  implicit def scalaWorkerToJavaWorker(s: Worker): rx.Scheduler.Worker = s.asJavaWorker, +  implicit def javaWorkerToScalaWorker(s: rx.Scheduler.Worker): Worker = Worker(s), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  def createWorker: Worker = this.asJavaScheduler.createWorker(), +object Worker {, +  def apply(worker: rx.Scheduler.Worker): Worker = new Worker { private[scala] val asJavaWorker = worker }, +trait Worker extends Subscription {, +  private [scala] val asJavaWorker: rx.Scheduler.Worker, +    this.asJavaWorker.schedule(, +  def schedule(action: Unit => Unit): Subscription = this.asJavaWorker.schedule(, +  def now: Long = this.asJavaWorker.now(), +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +    public Worker createWorker() {, +    private static class InnerHandlerThreadScheduler extends Worker {, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/subscriptions/AndroidSubscriptions.java, +import rx.Scheduler.Worker;, +                    final Worker inner = AndroidSchedulers.mainThread().createWorker();, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java, +import rx.Scheduler.Worker;, +        Worker inner = scheduler.createWorker();, +        Worker inner = scheduler.createWorker();, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +  implicit def scalaWorkerToJavaWorker(s: Worker): rx.Scheduler.Worker = s.asJavaWorker, +  implicit def javaWorkerToScalaWorker(s: rx.Scheduler.Worker): Worker = Worker(s), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Scheduler.scala, +  def createWorker: Worker = this.asJavaScheduler.createWorker(), +object Worker {, +  def apply(worker: rx.Scheduler.Worker): Worker = new Worker { private[scala] val asJavaWorker = worker }, +trait Worker extends Subscription {, +  private [scala] val asJavaWorker: rx.Scheduler.Worker, +    this.asJavaWorker.schedule(, +  def schedule(action: Unit => Unit): Subscription = this.asJavaWorker.schedule(, +  def now: Long = this.asJavaWorker.now(), +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +    public Worker createWorker() {, +    private static class InnerHandlerThreadScheduler extends Worker {, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/subscriptions/AndroidSubscriptions.java, +import rx.Scheduler.Worker;, +                    final Worker inner = AndroidSchedulers.mainThread().createWorker();, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java, +import rx.Scheduler.Worker;, +        Worker inner = scheduler.createWorker();, +        Worker inner = scheduler.createWorker();, +++ b/rxjava-contrib/rxjava-async-util/src/main/java/rx/util/async/Async.java, +import rx.Scheduler.Worker;, +                final Worker inner = scheduler.createWorker();, +                final Worker inner = scheduler.createWorker();, +                final Worker inner = scheduler.createWorker();, +                final Worker inner = scheduler.createWorker();, +                final Worker inner = scheduler.createWorker();, +                final Worker inner = scheduler.createWorker();]