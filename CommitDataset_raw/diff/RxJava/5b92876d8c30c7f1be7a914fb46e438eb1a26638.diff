[+++ b/rxjava-core/src/main/java/rx/Notification.java, +    private final Throwable exception;, +    public Notification(Throwable exception) {, +     * @return Throwable associated with an onError notification., +    public Throwable getThrowable() {, +            str.append(" ").append(getThrowable().getMessage());, +            hash = hash * 31 + getThrowable().hashCode();, +        if (hasException() && !getThrowable().equals(notification.getThrowable())), +++ b/rxjava-core/src/main/java/rx/Notification.java, +    private final Throwable exception;, +    public Notification(Throwable exception) {, +     * @return Throwable associated with an onError notification., +    public Throwable getThrowable() {, +            str.append(" ").append(getThrowable().getMessage());, +            hash = hash * 31 + getThrowable().hashCode();, +        if (hasException() && !getThrowable().equals(notification.getThrowable())), +++ b/rxjava-core/src/main/java/rx/Observable.java, +        } catch (Throwable e) {, +            } catch (Throwable e2) {, +            public void onError(Throwable e) {, +            public void onError(Throwable e) {, +            public void onError(Throwable e) {, +            public void onError(Throwable e) {, +    public Subscription subscribe(final Action1<T> onNext, final Action1<Throwable> onError) {, +            public void onError(Throwable e) {, +    public Subscription subscribe(final Action1<T> onNext, final Action1<Throwable> onError, Scheduler scheduler) {, +            public void onError(Throwable e) {, +    public Subscription subscribe(final Action1<T> onNext, final Action1<Throwable> onError, final Action0 onComplete) {, +            public void onError(Throwable e) {, +    public Subscription subscribe(final Action1<T> onNext, final Action1<Throwable> onError, final Action0 onComplete, Scheduler scheduler) {, +    private void handleError(Throwable e) {, +        public ThrowObservable(final Throwable exception) {, +    public static <T> Observable<T> error(Throwable exception) {, +    public static <T> Observable<T> onErrorResumeNext(final Observable<T> that, final Func1<Throwable, Observable<T>> resumeFunction) {, +        return onErrorResumeNext(that, new Func1<Throwable, Observable<T>>() {, +            public Observable<T> call(Throwable e) {, +    public static <T> Observable<T> onErrorReturn(final Observable<T> that, Func1<Throwable, T> resumeFunction) {, +     * @throws Throwable, +    public Observable<T> onErrorResumeNext(final Func1<Throwable, Observable<T>> resumeFunction) {, +        return onErrorResumeNext(this, new Func1<Throwable, Observable<T>>() {, +            public Observable<T> call(Throwable e) {, +    public Observable<T> onErrorReturn(Func1<Throwable, T> resumeFunction) {, +        return onErrorReturn(this, new Func1<Throwable, T>() {, +            public T call(Throwable e) {, +            verify(aObserver, Mockito.never()).onError(any(Throwable.class));, +            verify(observer, times(0)).onError(any(Throwable.class));, +            final AtomicReference<Throwable> error = new AtomicReference<Throwable>();, +                public void onError(Throwable e) {, +            final AtomicReference<Throwable> error = new AtomicReference<Throwable>();, +                public void onError(Throwable e) {, +            final AtomicReference<Throwable> error = new AtomicReference<Throwable>();, +                public void onError(Throwable e) {, +            } catch (Throwable e) {, +            final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();, +                            } catch (Throwable e) {, +++ b/rxjava-core/src/main/java/rx/Notification.java, +    private final Throwable exception;, +    public Notification(Throwable exception) {, +     * @return Throwable associated with an onError notification., +    public Throwable getThrowable() {, +            str.append(" ").append(getThrowable().getMessage());, +            hash = hash * 31 + getThrowable().hashCode();, +        if (hasException() && !getThrowable().equals(notification.getThrowable())), +++ b/rxjava-core/src/main/java/rx/Observable.java, +        } catch (Throwable e) {, +            } catch (Throwable e2) {, +            public void onError(Throwable e) {, +            public void onError(Throwable e) {, +            public void onError(Throwable e) {, +            public void onError(Throwable e) {, +    public Subscription subscribe(final Action1<T> onNext, final Action1<Throwable> onError) {, +            public void onError(Throwable e) {, +    public Subscription subscribe(final Action1<T> onNext, final Action1<Throwable> onError, Scheduler scheduler) {, +            public void onError(Throwable e) {, +    public Subscription subscribe(final Action1<T> onNext, final Action1<Throwable> onError, final Action0 onComplete) {, +            public void onError(Throwable e) {, +    public Subscription subscribe(final Action1<T> onNext, final Action1<Throwable> onError, final Action0 onComplete, Scheduler scheduler) {, +    private void handleError(Throwable e) {, +        public ThrowObservable(final Throwable exception) {, +    public static <T> Observable<T> error(Throwable exception) {, +    public static <T> Observable<T> onErrorResumeNext(final Observable<T> that, final Func1<Throwable, Observable<T>> resumeFunction) {, +        return onErrorResumeNext(that, new Func1<Throwable, Observable<T>>() {, +            public Observable<T> call(Throwable e) {, +    public static <T> Observable<T> onErrorReturn(final Observable<T> that, Func1<Throwable, T> resumeFunction) {, +     * @throws Throwable, +    public Observable<T> onErrorResumeNext(final Func1<Throwable, Observable<T>> resumeFunction) {, +        return onErrorResumeNext(this, new Func1<Throwable, Observable<T>>() {, +            public Observable<T> call(Throwable e) {, +    public Observable<T> onErrorReturn(Func1<Throwable, T> resumeFunction) {, +        return onErrorReturn(this, new Func1<Throwable, T>() {, +            public T call(Throwable e) {, +            verify(aObserver, Mockito.never()).onError(any(Throwable.class));, +            verify(observer, times(0)).onError(any(Throwable.class));, +            final AtomicReference<Throwable> error = new AtomicReference<Throwable>();, +                public void onError(Throwable e) {, +            final AtomicReference<Throwable> error = new AtomicReference<Throwable>();, +                public void onError(Throwable e) {, +            final AtomicReference<Throwable> error = new AtomicReference<Throwable>();, +                public void onError(Throwable e) {, +            } catch (Throwable e) {]