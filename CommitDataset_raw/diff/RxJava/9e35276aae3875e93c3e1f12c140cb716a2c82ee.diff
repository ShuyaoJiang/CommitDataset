[+++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscriptions.empty()!!, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscriptions.empty()!!, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        Subscriptions.empty()!!, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscriptions.empty()!!, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        Subscriptions.empty()!!, +++ b/rxjava-contrib/rxjava-apache-http/src/main/java/rx/apache/http/ObservableHttp.java, +import org.apache.http.protocol.Http.HttpContext;, +import org.apache.http.protocol.BasicHttpContext;, +        return createRequest(requestProducer, client, new BasicHttpContext());, +    }, +, +    /**, +     * Execute request using {@link HttpAsyncRequestProducer} to define HTTP Method, URI and payload (if applicable)., +     * <p>, +     * If the response is chunked (or flushed progressively such as with <i>text/event-stream</i> <a href="http://www.w3.org/TR/2009/WD-eventsource-20091029/">Server-Sent Events</a>) this will call, +     * {@link Observer#onNext} multiple times., +     * <p>, +     * Use {@code HttpAsyncMethods.create* } factory methods to create {@link HttpAsyncRequestProducer} instances., +     * <p>, +     * A client can be retrieved like this:, +     * <p>, +     * <pre> {@code      CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault(); } </pre>, +     * <p>, +     * A client with custom configurations can be created like this:, +     * </p>, +     * <pre> {@code, +     * final RequestConfig requestConfig = RequestConfig.custom(), +     *     .setSocketTimeout(3000), +     *     .setConnectTimeout(3000).build();, +     * final CloseableHttpAsyncClient httpclient = HttpAsyncClients.custom(), +     *     .setDefaultRequestConfig(requestConfig), +     *     .setMaxConnPerRoute(20), +     *     .setMaxConnTotal(50), +     *     .build();, +     * httpclient.start();, +     * }</pre>, +     *, +     *, +     * @param requestProducer, +     * @param client, +     * @param context The HttpContext, +     * @return, +     */, +    public static ObservableHttp<ObservableHttpResponse> createRequest(final HttpAsyncRequestProducer requestProducer, final HttpAsyncClient client, final HttpContext context) {, +                        context, new FutureCallback<HttpResponse>() {, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscriptions.empty()!!, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        Subscriptions.empty()!!, +++ b/rxjava-contrib/rxjava-apache-http/src/main/java/rx/apache/http/ObservableHttp.java, +import org.apache.http.protocol.Http.HttpContext;, +import org.apache.http.protocol.BasicHttpContext;, +        return createRequest(requestProducer, client, new BasicHttpContext());, +    }, +, +    /**, +     * Execute request using {@link HttpAsyncRequestProducer} to define HTTP Method, URI and payload (if applicable)., +     * <p>, +     * If the response is chunked (or flushed progressively such as with <i>text/event-stream</i> <a href="http://www.w3.org/TR/2009/WD-eventsource-20091029/">Server-Sent Events</a>) this will call, +     * {@link Observer#onNext} multiple times., +     * <p>, +     * Use {@code HttpAsyncMethods.create* } factory methods to create {@link HttpAsyncRequestProducer} instances., +     * <p>, +     * A client can be retrieved like this:, +     * <p>, +     * <pre> {@code      CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault(); } </pre>, +     * <p>, +     * A client with custom configurations can be created like this:, +     * </p>, +     * <pre> {@code, +     * final RequestConfig requestConfig = RequestConfig.custom(), +     *     .setSocketTimeout(3000), +     *     .setConnectTimeout(3000).build();, +     * final CloseableHttpAsyncClient httpclient = HttpAsyncClients.custom(), +     *     .setDefaultRequestConfig(requestConfig), +     *     .setMaxConnPerRoute(20), +     *     .setMaxConnTotal(50), +     *     .build();, +     * httpclient.start();, +     * }</pre>, +     *, +     *, +     * @param requestProducer, +     * @param client, +     * @param context The HttpContext, +     * @return, +     */, +    public static ObservableHttp<ObservableHttpResponse> createRequest(final HttpAsyncRequestProducer requestProducer, final HttpAsyncClient client, final HttpContext context) {, +                        context, new FutureCallback<HttpResponse>() {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationFilter;, +        return source.lift(new OperatorMerge(maxConcurrent)); // any idea how to get these generics working?!, +    private final Observable<Observable<T>> nest() {, +        if (count < 1) {, +            throw new IllegalArgumentException("Count must be positive");]