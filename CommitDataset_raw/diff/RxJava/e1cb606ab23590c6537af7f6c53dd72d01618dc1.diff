[+++ b/src/main/java/io/reactivex/Observable.java, +     * Maps each element of the upstream Observable into CompletableSources, subscribes to them one at a time in, +     * order and waits until the upstream and all CompletableSources complete., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concatMapCompletable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param mapper, +     *            a function that, when applied to an item emitted by the source ObservableSource, returns a CompletableSource, +     * @return a Completable that signals {@code onComplete} when the upstream and all CompletableSources complete, +     * @since 2.1.6 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable concatMapCompletable(Function<? super T, ? extends CompletableSource> mapper) {, +        return concatMapCompletable(mapper, 2);, +    }, +, +    /**, +     * Maps each element of the upstream Observable into CompletableSources, subscribes to them one at a time in, +     * order and waits until the upstream and all CompletableSources complete., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concatMapCompletable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param mapper, +     *            a function that, when applied to an item emitted by the source ObservableSource, returns a CompletableSource, +     *, +     * @param capacityHint, +     *            the number of upstream items expected to be buffered until the current CompletableSource,  mapped from, +     *            the current item, completes., +     * @return a Completable that signals {@code onComplete} when the upstream and all CompletableSources complete, +     * @since 2.1.6 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable concatMapCompletable(Function<? super T, ? extends CompletableSource> mapper, int capacityHint) {, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.verifyPositive(capacityHint, "capacityHint");, +        return RxJavaPlugins.onAssembly(new ObservableConcatMapCompletable<T>(this, mapper, capacityHint));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Observable.java, +     * Maps each element of the upstream Observable into CompletableSources, subscribes to them one at a time in, +     * order and waits until the upstream and all CompletableSources complete., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concatMapCompletable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param mapper, +     *            a function that, when applied to an item emitted by the source ObservableSource, returns a CompletableSource, +     * @return a Completable that signals {@code onComplete} when the upstream and all CompletableSources complete, +     * @since 2.1.6 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable concatMapCompletable(Function<? super T, ? extends CompletableSource> mapper) {, +        return concatMapCompletable(mapper, 2);, +    }, +, +    /**, +     * Maps each element of the upstream Observable into CompletableSources, subscribes to them one at a time in, +     * order and waits until the upstream and all CompletableSources complete., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concatMapCompletable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param mapper, +     *            a function that, when applied to an item emitted by the source ObservableSource, returns a CompletableSource, +     *, +     * @param capacityHint, +     *            the number of upstream items expected to be buffered until the current CompletableSource,  mapped from, +     *            the current item, completes., +     * @return a Completable that signals {@code onComplete} when the upstream and all CompletableSources complete, +     * @since 2.1.6 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable concatMapCompletable(Function<? super T, ? extends CompletableSource> mapper, int capacityHint) {, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.verifyPositive(capacityHint, "capacityHint");, +        return RxJavaPlugins.onAssembly(new ObservableConcatMapCompletable<T>(this, mapper, capacityHint));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMapCompletable.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at]