[+++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer, +     * up to a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting a, +     * {@link java.nio.BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all, +     * undelivered items, and unsubscribing from the source., +     * <p>, +     * <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/bp.obp.buffer.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code onBackpressureBuffer} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @return the source Observable modified to buffer items up to the given capacity., +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Backpressure">RxJava wiki: Backpressure</a>, +     */, +    public final Observable<T> onBackpressureBuffer(long capacity) {, +        return lift(new OperatorOnBackpressureBuffer<T>(capacity));, +    }, +, +    /**, +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer, +     * up to a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting a, +     * {@link java.nio.BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all, +     * undelivered items, unsubscribing from the source, and notifying the producer with {@code onOverflow}., +     * <p>, +     * <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/bp.obp.buffer.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code onBackpressureBuffer} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @return the source Observable modified to buffer items up to the given capacity., +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Backpressure">RxJava wiki: Backpressure</a>, +     */, +    public final Observable<T> onBackpressureBuffer(long capacity, Func0<Void> onOverflow) {, +        return lift(new OperatorOnBackpressureBuffer<T>(capacity, onOverflow));, +    }, +, +    /**, +++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer, +     * up to a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting a, +     * {@link java.nio.BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all, +     * undelivered items, and unsubscribing from the source., +     * <p>, +     * <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/bp.obp.buffer.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code onBackpressureBuffer} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @return the source Observable modified to buffer items up to the given capacity., +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Backpressure">RxJava wiki: Backpressure</a>, +     */, +    public final Observable<T> onBackpressureBuffer(long capacity) {, +        return lift(new OperatorOnBackpressureBuffer<T>(capacity));, +    }, +, +    /**, +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer, +     * up to a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting a, +     * {@link java.nio.BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all, +     * undelivered items, unsubscribing from the source, and notifying the producer with {@code onOverflow}., +     * <p>, +     * <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/bp.obp.buffer.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code onBackpressureBuffer} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @return the source Observable modified to buffer items up to the given capacity., +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Backpressure">RxJava wiki: Backpressure</a>, +     */, +    public final Observable<T> onBackpressureBuffer(long capacity, Func0<Void> onOverflow) {, +        return lift(new OperatorOnBackpressureBuffer<T>(capacity, onOverflow));, +    }, +, +    /**, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                        if (emitted > 0) {, +                        }, +            if (!completed) {, +                innerError(e, true);, +            }, +        private void innerError(Throwable e, boolean parent) {, +                    if (!parent) {, +                    }, +        @SuppressWarnings("unused"), +                parentSubscriber.innerError(e, false);, +++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to buffer, +     * up to a given amount of items until they can be emitted. The resulting Observable will {@code onError} emitting a, +     * {@link java.nio.BufferOverflowException} as soon as the buffer's capacity is exceeded, dropping all, +     * undelivered items, and unsubscribing from the source., +     * <p>, +     * <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/bp.obp.buffer.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code onBackpressureBuffer} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>]