[+++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> defer(Func0<? extends Observable<T>> observableFactory) {, +    public Observable<List<T>> buffer(Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> defer(Func0<? extends Observable<T>> observableFactory) {, +    public Observable<List<T>> buffer(Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationBuffer.java, +    public static <T> Func1<Observer<List<T>>, Subscription> buffer(final Observable<T> source, final Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +        private final Func0<? extends Observable<BufferClosing>> bufferClosingSelector;, +        public ObservableBasedSingleBufferCreator(NonOverlappingBuffers<T> buffers, Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> defer(Func0<? extends Observable<T>> observableFactory) {, +    public Observable<List<T>> buffer(Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationBuffer.java, +    public static <T> Func1<Observer<List<T>>, Subscription> buffer(final Observable<T> source, final Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +        private final Func0<? extends Observable<BufferClosing>> bufferClosingSelector;, +        public ObservableBasedSingleBufferCreator(NonOverlappingBuffers<T> buffers, Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefer.java, +    public static <T> Func1<Observer<T>, Subscription> defer(final Func0<? extends Observable<T>> observableFactory) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> defer(Func0<? extends Observable<T>> observableFactory) {, +    public Observable<List<T>> buffer(Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationBuffer.java, +    public static <T> Func1<Observer<List<T>>, Subscription> buffer(final Observable<T> source, final Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +        private final Func0<? extends Observable<BufferClosing>> bufferClosingSelector;, +        public ObservableBasedSingleBufferCreator(NonOverlappingBuffers<T> buffers, Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefer.java, +    public static <T> Func1<Observer<T>, Subscription> defer(final Func0<? extends Observable<T>> observableFactory) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationZip.java, +        Aggregator<R> a = new Aggregator<R>(zipFunction);, +        for (@SuppressWarnings("rawtypes") Observable w : ws) {, +            ZipObserver<R, Object> zipObserver = new ZipObserver<R, Object>(a, w);, +            FuncN<String> zipr = Functions.fromFunc(getConcatStringIntegerIntArrayZipr());, +            //Func3<String, Integer, int[], String>, +            @SuppressWarnings("rawtypes"), +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> defer(Func0<? extends Observable<T>> observableFactory) {, +    public Observable<List<T>> buffer(Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationBuffer.java, +    public static <T> Func1<Observer<List<T>>, Subscription> buffer(final Observable<T> source, final Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +        private final Func0<? extends Observable<BufferClosing>> bufferClosingSelector;, +        public ObservableBasedSingleBufferCreator(NonOverlappingBuffers<T> buffers, Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefer.java, +    public static <T> Func1<Observer<T>, Subscription> defer(final Func0<? extends Observable<T>> observableFactory) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationZip.java, +        Aggregator<R> a = new Aggregator<R>(zipFunction);, +        for (@SuppressWarnings("rawtypes") Observable w : ws) {, +            ZipObserver<R, Object> zipObserver = new ZipObserver<R, Object>(a, w);, +            FuncN<String> zipr = Functions.fromFunc(getConcatStringIntegerIntArrayZipr());, +            //Func3<String, Integer, int[], String>, +            @SuppressWarnings("rawtypes"), +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> defer(Func0<? extends Observable<T>> observableFactory) {, +    public Observable<List<T>> buffer(Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationBuffer.java, +    public static <T> Func1<Observer<List<T>>, Subscription> buffer(final Observable<T> source, final Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +        private final Func0<? extends Observable<BufferClosing>> bufferClosingSelector;, +        public ObservableBasedSingleBufferCreator(NonOverlappingBuffers<T> buffers, Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefer.java, +    public static <T> Func1<Observer<T>, Subscription> defer(final Func0<? extends Observable<T>> observableFactory) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationZip.java, +        Aggregator<R> a = new Aggregator<R>(zipFunction);, +        for (@SuppressWarnings("rawtypes") Observable w : ws) {, +            ZipObserver<R, Object> zipObserver = new ZipObserver<R, Object>(a, w);, +            FuncN<String> zipr = Functions.fromFunc(getConcatStringIntegerIntArrayZipr());, +            //Func3<String, Integer, int[], String>, +            @SuppressWarnings("rawtypes"), +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public static <T> Observable<T> defer(Func0<? extends Observable<T>> observableFactory) {, +    public Observable<List<T>> buffer(Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationBuffer.java, +    public static <T> Func1<Observer<List<T>>, Subscription> buffer(final Observable<T> source, final Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +        private final Func0<? extends Observable<BufferClosing>> bufferClosingSelector;, +        public ObservableBasedSingleBufferCreator(NonOverlappingBuffers<T> buffers, Func0<? extends Observable<BufferClosing>> bufferClosingSelector) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefer.java, +    public static <T> Func1<Observer<T>, Subscription> defer(final Func0<? extends Observable<T>> observableFactory) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationZip.java, +        Aggregator<R> a = new Aggregator<R>(zipFunction);, +        for (@SuppressWarnings("rawtypes") Observable w : ws) {, +            ZipObserver<R, Object> zipObserver = new ZipObserver<R, Object>(a, w);, +            FuncN<String> zipr = Functions.fromFunc(getConcatStringIntegerIntArrayZipr());, +            //Func3<String, Integer, int[], String>]