[+++ b/rxjava-core/src/main/java/rx/Observable.java, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + * This interface provides overloaded methods for subscribing as well as delegate methods to the, + * various operators., + * The documentation for this interface makes use of marble diagrams. The following legend explains, + * these diagrams:, + * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, + * @param <T>, +     * Function interface for work to be performed when an {@link Observable} is subscribed to via {@link Observable#subscribe(Observer)}, +     * NOTE: Use {@link #create(OnSubscribeFunc)} to create an Observable instead of this constructor unless you, +     * specifically have a need for inheritance., +     * @param onSubscribe, +     *            {@link OnSubscribeFunc} to be executed when {@link #subscribe(Observer)} is called., +     * An {@link Observer} must call an Observable's {@code subscribe} method in order to, +     * receive items and notifications from the Observable., +     * <p>, +     * It stores a reference to the Observer in a collection object, such as a {@code List<T>} object., +     * <p>, +     * It returns a reference to the {@link Subscription} interface. This enables Observers to, +     * unsubscribe, that is, to stop receiving items and notifications before the Observable stops, +     * sending them, which also invokes the Observer's {@link Observer#onCompleted onCompleted} method., +     * <p>, +     * An <code>Observable&lt;T&gt;</code> instance is responsible for accepting all subscriptions, +     * and notifying all Observers. Unless the documentation for a particular, +     * <code>Observable&lt;T&gt;</code> implementation indicates otherwise, Observers should make no, +     * assumptions about the order in which multiple Observers will receive their notifications., +     * @param observer, +     *            the observer, +     * @return a {@link Subscription} reference with which the {@link Observer} can stop receiving items, +     *         before the Observable has finished sending them, +     * @throws IllegalArgumentException, +     *             if the {@link Observer} provided as the argument to {@code subscribe()} is {@code null}, +     * An {@link Observer} must call an Observable's {@code subscribe} method in order to, +     * receive items and notifications from the Observable., +     * <p>, +     * It stores a reference to the Observer in a collection object, such as a {@code List<T>} object., +     * <p>, +     * It returns a reference to the {@link Subscription} interface. This enables Observers to, +     * unsubscribe, that is, to stop receiving items and notifications before the Observable stops, +     * sending them, which also invokes the Observer's {@link Observer#onCompleted onCompleted} method., +     * <p>, +     * An {@code Observable<T>} instance is responsible for accepting all subscriptions, +     * and notifying all Observers. Unless the documentation for a particular {@code Observable<T>} implementation indicates otherwise, Observers should make no, +     * assumptions about the order in which multiple Observers will receive their notifications., +     * @param observer, +     *            the observer, +     * @param scheduler, +     *            the {@link Scheduler} on which Observers subscribe to the Observable, +     * @return a {@link Subscription} reference with which Observers can stop receiving items and, +     *         notifications before the Observable has finished sending them, +     * @throws IllegalArgumentException, +     *             if an argument to {@code subscribe()} is {@code null}, +     * Used for protecting against errors being thrown from Observer implementations and ensuring onNext/onError/onCompleted contract compliance., +     * See https://github.com/Netflix/RxJava/issues/216 for discussion on "Guideline 6.4: Protect calls to user code from within an operator", +     * An {@link Observer} must call an Observable's {@code subscribe} method in order to, +     * receive items and notifications from the Observable., +     * An {@link Observer} must call an Observable's {@code subscribe} method in order to, +     * receive items and notifications from the Observable., +     * An {@link Observer} must call an Observable's {@code subscribe} method in order to, +     * receive items and notifications from the Observable., +     * An {@link Observer} must call an Observable's {@code subscribe} method in order to, +     * receive items and notifications from the Observable., +     * An {@link Observer} must call an Observable's {@code subscribe} method in order to, +     * receive items and notifications from the Observable., +     * Returns a {@link ConnectableObservable} that upon connection causes the source Observable to, +     * push results into the specified subject., +     * @param subject, +     *            the {@link Subject} for the {@link ConnectableObservable} to push source items, +     *            into, +     * @param <R>, +     *            result type, +     * @return a {@link ConnectableObservable} that upon connection causes the source Observable to, +     *         push results into the specified {@link Subject}, +     * Allow the {@link RxJavaErrorHandler} to receive the exception from onError., +     * @param <T>, +     *            the type of item emitted by the Observable, +     * an Observable that invokes {@link Observer#onError onError} when the {@link Observer} subscribes to it., +     * @param <T>, +     *            the type of item emitted by the Observable, +                 * Accepts an {@link Observer} and calls its {@link Observer#onError onError} method., +                 * @param observer, +                 *            an {@link Observer} of this Observable, +     * Creates an Observable that will execute the given function when an {@link Observer} subscribes to it., +     * Write the function you pass to <code>create</code> so that it behaves as an Observable: It, +     * should invoke the Observer's {@link Observer#onNext onNext}, {@link Observer#onError onError}, and {@link Observer#onCompleted onCompleted} methods, +     * appropriately., +     * A well-formed Observable must invoke either the Observer's <code>onCompleted</code> method, +     * exactly once or its <code>onError</code> method exactly once., +     * See <a href="http://go.microsoft.com/fwlink/?LinkID=205219">Rx Design Guidelines (PDF)</a>, +     * for detailed information., +     * @param <T>, +     *            the type of the items that this Observable emits, +     * @param func, +     *            a function that accepts an {@code Observer<T>}, invokes its {@code onNext}, {@code onError}, and {@code onCompleted} methods]