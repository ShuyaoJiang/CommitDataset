[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscription.scala, +, +  private [scala] def asJavaSubscription: rx.Subscription = new rx.Subscription {, +    override def unsubscribe(){, +      Subscription.this.unsubscribe();, +      Subscription.this.unsubscribed.set(true), +    }, +  def unsubscribe(): Unit = { }, +    /*subscription match {, +      case x: rx.subscriptions.BooleanSubscription => new rx.lang.scala.subscriptions.BooleanSubscription(x), +      case x: rx.subscriptions.CompositeSubscription => new rx.lang.scala.subscriptions.CompositeSubscription(x), +      case x: rx.subscriptions.MultipleAssignmentSubscription => new rx.lang.scala.subscriptions.MultipleAssignmentSubscription(x), +      case x: rx.subscriptions.SerialSubscription => new rx.lang.scala.subscriptions.SerialSubscription(x), +    }*/, +    apply { subscription.unsubscribe() }, +  def apply(u: => Unit): Subscription =  {, +    new Subscription() {, +      override def unsubscribe(): Unit = { u }, +    }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscription.scala, +, +  private [scala] def asJavaSubscription: rx.Subscription = new rx.Subscription {, +    override def unsubscribe(){, +      Subscription.this.unsubscribe();, +      Subscription.this.unsubscribed.set(true), +    }, +  def unsubscribe(): Unit = { }, +    /*subscription match {, +      case x: rx.subscriptions.BooleanSubscription => new rx.lang.scala.subscriptions.BooleanSubscription(x), +      case x: rx.subscriptions.CompositeSubscription => new rx.lang.scala.subscriptions.CompositeSubscription(x), +      case x: rx.subscriptions.MultipleAssignmentSubscription => new rx.lang.scala.subscriptions.MultipleAssignmentSubscription(x), +      case x: rx.subscriptions.SerialSubscription => new rx.lang.scala.subscriptions.SerialSubscription(x), +    }*/, +    apply { subscription.unsubscribe() }, +  def apply(u: => Unit): Subscription =  {, +    new Subscription() {, +      override def unsubscribe(): Unit = { u }, +    }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subscriptions/BooleanSubscription.scala, +        if(!super.isUnsubscribed) { u; super.unsubscribe() }, +private [scala] class BooleanSubscription private[scala] (subscription: rx.subscriptions.BooleanSubscription), +  override def asJavaSubscription =  subscription, +, +  override def unsubscribe(): Unit =  asJavaSubscription.unsubscribe(), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscription.scala, +, +  private [scala] def asJavaSubscription: rx.Subscription = new rx.Subscription {, +    override def unsubscribe(){, +      Subscription.this.unsubscribe();, +      Subscription.this.unsubscribed.set(true), +    }, +  def unsubscribe(): Unit = { }, +    /*subscription match {, +      case x: rx.subscriptions.BooleanSubscription => new rx.lang.scala.subscriptions.BooleanSubscription(x), +      case x: rx.subscriptions.CompositeSubscription => new rx.lang.scala.subscriptions.CompositeSubscription(x), +      case x: rx.subscriptions.MultipleAssignmentSubscription => new rx.lang.scala.subscriptions.MultipleAssignmentSubscription(x), +      case x: rx.subscriptions.SerialSubscription => new rx.lang.scala.subscriptions.SerialSubscription(x), +    }*/, +    apply { subscription.unsubscribe() }, +  def apply(u: => Unit): Subscription =  {, +    new Subscription() {, +      override def unsubscribe(): Unit = { u }, +    }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subscriptions/BooleanSubscription.scala, +        if(!super.isUnsubscribed) { u; super.unsubscribe() }, +private [scala] class BooleanSubscription private[scala] (subscription: rx.subscriptions.BooleanSubscription), +  override def asJavaSubscription =  subscription, +, +  override def unsubscribe(): Unit =  asJavaSubscription.unsubscribe(), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subscriptions/CompositeSubscription.scala, +  private [scala] def apply(subscription: rx.subscriptions.CompositeSubscription): CompositeSubscription = {, +class CompositeSubscription private[scala] (subscription: rx.subscriptions.CompositeSubscription) extends Subscription, +  override def asJavaSubscription = subscription, +  override def unsubscribe(): Unit =  asJavaSubscription.unsubscribe(), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscription.scala, +, +  private [scala] def asJavaSubscription: rx.Subscription = new rx.Subscription {, +    override def unsubscribe(){, +      Subscription.this.unsubscribe();, +      Subscription.this.unsubscribed.set(true), +    }, +  def unsubscribe(): Unit = { }, +    /*subscription match {, +      case x: rx.subscriptions.BooleanSubscription => new rx.lang.scala.subscriptions.BooleanSubscription(x), +      case x: rx.subscriptions.CompositeSubscription => new rx.lang.scala.subscriptions.CompositeSubscription(x), +      case x: rx.subscriptions.MultipleAssignmentSubscription => new rx.lang.scala.subscriptions.MultipleAssignmentSubscription(x), +      case x: rx.subscriptions.SerialSubscription => new rx.lang.scala.subscriptions.SerialSubscription(x), +    }*/, +    apply { subscription.unsubscribe() }, +  def apply(u: => Unit): Subscription =  {, +    new Subscription() {, +      override def unsubscribe(): Unit = { u }, +    }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subscriptions/BooleanSubscription.scala, +        if(!super.isUnsubscribed) { u; super.unsubscribe() }, +private [scala] class BooleanSubscription private[scala] (subscription: rx.subscriptions.BooleanSubscription), +  override def asJavaSubscription =  subscription, +, +  override def unsubscribe(): Unit =  asJavaSubscription.unsubscribe(), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/subscriptions/CompositeSubscription.scala]