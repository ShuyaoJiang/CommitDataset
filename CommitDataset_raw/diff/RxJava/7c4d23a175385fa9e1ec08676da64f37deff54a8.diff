[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +import rx.lang.scala.concurrency.GenericScheduler, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription) =, +    new Func2[rx.Scheduler, T, Subscription] {, +      def call(s: rx.Scheduler, t: T): Subscription = {, +        action(s, t), +      }, +    }  , +  , +  implicit def scalaSchedulerToJavaScheduler(s: Scheduler): rx.Scheduler = s.asJava, +  , +  implicit def javaSchedulerToScalaScheduler[S <: rx.Scheduler](s: S): GenericScheduler[S] = new GenericScheduler(s), +  , +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +import rx.lang.scala.concurrency.GenericScheduler, +  implicit def schedulerActionToFunc2[T](action: (Scheduler, T) => Subscription) =, +    new Func2[rx.Scheduler, T, Subscription] {, +      def call(s: rx.Scheduler, t: T): Subscription = {, +        action(s, t), +      }, +    }  , +  , +  implicit def scalaSchedulerToJavaScheduler(s: Scheduler): rx.Scheduler = s.asJava, +  , +  implicit def javaSchedulerToScalaScheduler[S <: rx.Scheduler](s: S): GenericScheduler[S] = new GenericScheduler(s), +  , +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/concurrency/GenericScheduler.scala, +package rx.lang.scala.concurrency, +, +import rx.Subscription, +import java.util.Date, +import scala.concurrent.duration.Duration, +import rx.lang.scala.ImplicitFunctionConversions._, +import rx.util.functions.Func2, +import rx.lang.scala.Scheduler, +import rx.lang.scala.Observer, +import org.scalatest.junit.JUnitSuite, +import org.junit.Before, +import rx.lang.scala.Observable, +, +, +class GenericScheduler[+S <: rx.Scheduler](val asJava: S) extends AnyVal {, +    /**, +     * Schedules a cancelable action to be executed., +     *, +     * @param state, +     *            State to pass into the action., +     * @param action, +     *            Action to schedule., +     * @return a subscription to be able to unsubscribe from action., +     */, +    def schedule[T](state: T, action: (Scheduler, T) => Subscription): Subscription = {, +      asJava.schedule(state, action), +    }, +, +    /**, +     * Schedules a cancelable action to be executed in delayTime., +     *, +     * @param state, +     *            State to pass into the action., +     * @param action, +     *            Action to schedule., +     * @param delayTime, +     *            Time the action is to be delayed before executing., +     * @param unit, +     *            Time unit of the delay time., +     * @return a subscription to be able to unsubscribe from action., +     */, +    def schedule[T](state: T, action: (Scheduler, T) => Subscription, delayTime: Duration): Subscription = {, +      asJava.schedule(state, action, delayTime.length, delayTime.unit), +    }, +, +    /**, +     * Schedules a cancelable action to be executed periodically., +     * This default implementation schedules recursively and waits for actions to complete (instead of potentially executing, +     * long-running actions concurrently). Each scheduler that can do periodic scheduling in a better way should override this., +     *, +     * @param state, +     *            State to pass into the action., +     * @param action, +     *            The action to execute periodically., +     * @param initialDelay, +     *            Time to wait before executing the action for the first time., +     * @param period, +     *            The time interval to wait each time in between executing the action., +     * @return A subscription to be able to unsubscribe from action., +     */, +    def schedulePeriodically[T](state: T, action: (Scheduler, T) => Subscription, initialDelay: Duration, period: Duration): Subscription = {, +      asJava.schedulePeriodically(state, action, initialDelay.length, initialDelay.unit.convert(period.length, period.unit), initialDelay.unit), +    }, +, +    /**, +     * Schedules a cancelable action to be executed at dueTime., +     *, +     * @param state, +     *            State to pass into the action., +     * @param action, +     *            Action to schedule., +     * @param dueTime, +     *            Time the action is to be executed. If in the past it will be executed immediately.]