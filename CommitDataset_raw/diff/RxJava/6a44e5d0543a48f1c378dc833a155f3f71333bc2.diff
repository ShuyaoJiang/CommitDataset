[+++ b/src/main/java/io/reactivex/Completable.java, +     * Calls the specified converter function during assembly time and returns its resulting value., +     * <p>, +     * This allows fluent conversion to any other type., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code as} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <R> the resulting object type, +     * @param converter the function that receives the current Completable instance and returns a value, +     * @return the converted value, +     * @throws NullPointerException if converter is null, +     * @since 2.1.7 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final <R> R as(@NonNull CompletableConverter<? extends R> converter) {, +        return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Completable.java, +     * Calls the specified converter function during assembly time and returns its resulting value., +     * <p>, +     * This allows fluent conversion to any other type., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code as} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <R> the resulting object type, +     * @param converter the function that receives the current Completable instance and returns a value, +     * @return the converted value, +     * @throws NullPointerException if converter is null, +     * @since 2.1.7 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final <R> R as(@NonNull CompletableConverter<? extends R> converter) {, +        return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/CompletableConverter.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex;, +, +import io.reactivex.annotations.*;, +, +/**, + * Convenience interface and callback used by the {@link Completable#as} operator to turn a Completable into another, + * value fluently., + *, + * @param <R> the output type, + * @since 2.1.7 - experimental, + */, +@Experimental, +public interface CompletableConverter<R> {, +    /**, +     * Applies a function to the upstream Completable and returns a converted value of type {@code R}., +     *, +     * @param upstream the upstream Completable instance, +     * @return the converted value, +     */, +    @NonNull, +    R apply(@NonNull Completable upstream);, +}, +++ b/src/main/java/io/reactivex/Completable.java, +     * Calls the specified converter function during assembly time and returns its resulting value., +     * <p>, +     * This allows fluent conversion to any other type., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code as} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param <R> the resulting object type, +     * @param converter the function that receives the current Completable instance and returns a value, +     * @return the converted value, +     * @throws NullPointerException if converter is null, +     * @since 2.1.7 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE)]