[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +  /*, +   val observer = mock(classOf[Observer[Int]]), +   val o = Observable().head, +   val sub = o.subscribe(observer), +   verify(observer, never).onNext(any(classOf[Int])), +   verify(observer, never).onCompleted(), +   verify(observer, times(1)).onError(any(classOf[NoSuchElementException])), + */, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +  /*, +   val observer = mock(classOf[Observer[Int]]), +   val o = Observable().head, +   val sub = o.subscribe(observer), +   verify(observer, never).onNext(any(classOf[Int])), +   verify(observer, never).onCompleted(), +   verify(observer, times(1)).onError(any(classOf[NoSuchElementException])), + */, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorTakeWhile;, +        return lift(new OperatorTakeWhile(predicate));, +        return lift(new OperatorTakeWhile(predicate));, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +  /*, +   val observer = mock(classOf[Observer[Int]]), +   val o = Observable().head, +   val sub = o.subscribe(observer), +   verify(observer, never).onNext(any(classOf[Int])), +   verify(observer, never).onCompleted(), +   verify(observer, times(1)).onError(any(classOf[NoSuchElementException])), + */, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorTakeWhile;, +        return lift(new OperatorTakeWhile(predicate));, +        return lift(new OperatorTakeWhile(predicate));, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +  /*, +   val observer = mock(classOf[Observer[Int]]), +   val o = Observable().head, +   val sub = o.subscribe(observer), +   verify(observer, never).onNext(any(classOf[Int])), +   verify(observer, never).onCompleted(), +   verify(observer, times(1)).onError(any(classOf[NoSuchElementException])), + */, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorTakeWhile;, +        return lift(new OperatorTakeWhile(predicate));, +        return lift(new OperatorTakeWhile(predicate));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorTakeWhile.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import rx.Observable.Operator;, +import rx.Subscriber;, +import rx.functions.Func1;, +import rx.functions.Func2;, +, +/**]