[+++ b/operators.html, +<!DOCTYPE html>, +   dt { font-weight: normal;, +        margin-right: -1.5em; }, +   dd.sub::before { content: ""; }, +   dd { float: left;, +        margin-start: 0;, +        -webkit-margin-start: 0;, +        margin-left: 1.5em; }, +   dd.sub { float: none;, +            margin-left: 0; }, + <dt>I want to create a new Observable</dt>, +  <dd class="sub"><dl>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#just"><code>just(&#8239;)</code></a></dd>, +    <dd class="sub"><dl>, +     <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#timer"><code>timer(&#8239;)</code></a></dd>, +    </dl></dd>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from"><code>from(&#8239;)</code></a></dd>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from"><code>from(&#8239;)</code></a></dd>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from"><code>from(&#8239;)</code></a></dd>, +    <dd class="sub"><dl>, +     <dd><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from"><code>from(&#8239;)</code></a></dd>, +    </dl></dd>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#from"><code>from(&#8239;)</code></a></dd>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#repeat"><code>repeat(&#8239;)</code></a></dd>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#create"><code>create(&#8239;)</code></a></dd>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#defer"><code>defer(&#8239;)</code></a></dd>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#range"><code>range(&#8239;)</code></a></dd>, +    <dd class="sub"><dl>, +      <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#interval"><code>interval(&#8239;)</code></a></dd>, +      <dd class="sub"><dl>, +       <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#timer"><code>timer(&#8239;)</code></a></dd>, +      </dl></dd>, +    </dl></dd>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#empty"><code>empty(&#8239;)</code></a></dd>, +    <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#error"><code>error(&#8239;)</code></a></dd>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#never"><code>never(&#8239;)</code></a></dd>, +  </dl></dd>, +, + <dt>I want to transform the items emitted by an Observable and then reemit them</dt>, +  <dd class="sub"><dl>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#map"><code>map(&#8239;)</code></a></dd>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#cast"><code>cast(&#8239;)</code></a></dd>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#flatMap"><code>flatMap(&#8239;)</code></a></dd>, +    <dd class="sub"><dl>, +      <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#mergemap-and-mergemapiterable"><code>mergeMap(collectionSelector,resultSelector)</code></a></dd>, +    </dl></dd>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#mergemap-and-mergemapiterable"><code>mergeMapIterable(collectionSelector)</code></a></dd>, +    <dd class="sub"><dl>, +      <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#mergemap-and-mergemapiterable"><code>mergeMapIterable(collectionSelector,resultSelector)</code></a></dd>, +    </dl></dd>, +   <dt>based on all of the items that proceeded them</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#scan"><code>scan(accumulator)</code></a></dd>, +    <dd class="sub"><dl>, +     <dt>and an initial seed value to get the ball rolling</dt>, +      <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#scan"><code>scan(accumulator,initialValue)</code></a></dd>, +    </dl></dd>, +  </dl></dd>, +, + <dt>I want to transform items <em>and</em> notifications from an Observable into items and reemit them</dt>, +  <dd class="sub"><dl>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#mergemap-and-mergemapiterable"><code>mergeMap(&#8239;)</code></a></dd>, +  </dl></dd>, +, + <dt>I want to collect items from an Observable and reemit them as buffers of items</dt>, +  <dd class="sub"><dl>, +   <dt>with a maximum number of items per buffer</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#buffer"><code>buffer(count)</code></a></dd>, +    <dd class="sub"><dl>, +     <dt>and starting every <i>n</i> items</dt>, +      <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#buffer"><code>buffer(count,skip)</code></a></dd>, +    </dl></dd>, +   <dt>each time a second Observable emits an item</dt>, +    <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#buffer"><code>buffer(boundary)</code></a></dd>, +    <dd class="sub"><dl>, +     <dt>with buffers given an initial capacity for efficiency reasons</dt>, +      <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#buffer"><code>buffer(boundary,initialCapacity)</code></a></dd>, +     <dt>where that second Observable is returned from a function I supply</dt>, +      <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#buffer"><code>buffer(bufferClosingSelector)</code></a></dd>, +      <dd class="sub"><dl>, +       <dt>and operates on the emission of a third Observable that opens the buffer</dt>, +        <dd><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#buffer"><code>buffer(bufferOpenings,bufferClosingSelector)</code></a></dd>, +      </dl></dd>, +     </dl></dd>, +    <dt>at periodic intervals</dt>, +     <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#buffer"><code>buffer(timespan,unit)</code></a></dd>, +     <dd class="sub"><dl>, +      <dt>or when a certain maximum number of items fill the buffer</dt>, +       <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#buffer"><code>buffer(timespan,unit,count)</code></a></dd>, +      <dt>for a certain period of time after the interval begins</dt>, +       <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Transforming-Observables#buffer"><code>buffer(timespan,timeshift,unit)</code></a></dd>, +     </dl></dd>, +   <dt>containing only the last items emitted</dt>, +    <dd class="sub"><dl>, +     <dt>that is, the last <i>n</i> items</dt>, +      <dd><a href="https://github.com/Netflix/RxJava/wiki/Filtering-Observables#takelastbuffer"><code>takeLastBuffer(count)</code></a></dd>, +      <dd class="sub"><dl>, +       <dt>emitted during a window of time before the Observable completed</dt>, +       <dd class="s"><a href="https://github.com/Netflix/RxJava/wiki/Filtering-Observables#takelastbuffer"><code>takeLastBuffer(count,time,unit)</code></a></dd>, +      </dl></dd>]