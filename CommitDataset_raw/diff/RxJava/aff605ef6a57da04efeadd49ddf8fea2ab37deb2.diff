[+++ b/language-adaptors/rxjava-clojure/build.gradle, +clojureTest.dependsOn compileTestJava, +++ b/language-adaptors/rxjava-clojure/build.gradle, +clojureTest.dependsOn compileTestJava, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +  ; preserve metadata so type hints work, +  (with-meta `(rx.lang.clojure.interop/fn* (clojure.core/fn ~@fn-form)), +             (meta &form))), +  "Given function f, returns an object that implements rx.util.functions.Action0-3, +  ; preserve metadata so type hints work, +  (with-meta `(action* (clojure.core/fn ~@fn-form)), +             (meta &form))), +++ b/language-adaptors/rxjava-clojure/build.gradle, +clojureTest.dependsOn compileTestJava, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +  ; preserve metadata so type hints work, +  (with-meta `(rx.lang.clojure.interop/fn* (clojure.core/fn ~@fn-form)), +             (meta &form))), +  "Given function f, returns an object that implements rx.util.functions.Action0-3, +  ; preserve metadata so type hints work, +  (with-meta `(action* (clojure.core/fn ~@fn-form)), +             (meta &form))), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +           [rx.lang.clojure.interop DummyObservable])), +      (is (= [1 2 3 4 5 6 7 8 9] (.call f 1 2 3 4 5 6 7 8 9))))), +, +  (let [dummy (DummyObservable.)], +    (testing "preserves metadata applied to form", +      ; No type hint, picks Object overload, +      (is (= "Object", +             (.call dummy (rx/fn* +)))), +      (is (= "rx.util.functions.Func1", +             (.call dummy, +                    ^rx.util.functions.Func1 (rx/fn* +)))), +      (is (= "rx.util.functions.Func2", +             (.call dummy, +                    ^rx.util.functions.Func2 (rx/fn* *))))))), +      (is (= 6 (.call f 1 2 3))))), +, +  (let [dummy (DummyObservable.)], +    (testing "preserves metadata applied to form", +      ; No type hint, picks Object overload, +      (is (= "Object", +             (.call dummy, +                    (rx/fn [a] a)))), +      (is (= "rx.util.functions.Func1", +             (.call dummy, +                    ^rx.util.functions.Func1 (rx/fn [a] a)))), +      (is (= "rx.util.functions.Func2", +             (.call dummy, +                    ^rx.util.functions.Func2 (rx/fn [a b] (* a b)))))))), +, +      (is (= [[] [1] [1 2] [1 2 3]])))), +  (let [dummy (DummyObservable.)], +    (testing "preserves metadata applied to form", +      ; no meta, picks Object overload, +      (is (= "Object", +             (.call dummy, +                    (rx/action* println)))), +      (is (= "rx.util.functions.Action1", +             (.call dummy, +                    ^rx.util.functions.Action1 (rx/action* println)))), +      (is (= "rx.util.functions.Action2", +             (.call dummy, +                    ^rx.util.functions.Action2 (rx/action* prn))))))), +      (is (= [9 10] @called)))), +, +  (let [dummy (DummyObservable.)], +    (testing "preserves metadata applied to form", +      ; no meta, picks Object overload, +      (is (= "Object", +             (.call dummy, +                    (rx/action [a] a)))), +      (is (= "rx.util.functions.Action1", +             (.call dummy, +                    ^rx.util.functions.Action1 (rx/action [a] a)))), +      (is (= "rx.util.functions.Action2", +             (.call dummy, +                    ^rx.util.functions.Action2 (rx/action [a b] (* a b)))))))), +++ b/language-adaptors/rxjava-clojure/build.gradle, +clojureTest.dependsOn compileTestJava, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +  ; preserve metadata so type hints work, +  (with-meta `(rx.lang.clojure.interop/fn* (clojure.core/fn ~@fn-form)), +             (meta &form))), +  "Given function f, returns an object that implements rx.util.functions.Action0-3, +  ; preserve metadata so type hints work, +  (with-meta `(action* (clojure.core/fn ~@fn-form)), +             (meta &form))), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +           [rx.lang.clojure.interop DummyObservable])), +      (is (= [1 2 3 4 5 6 7 8 9] (.call f 1 2 3 4 5 6 7 8 9))))), +, +  (let [dummy (DummyObservable.)], +    (testing "preserves metadata applied to form", +      ; No type hint, picks Object overload, +      (is (= "Object", +             (.call dummy (rx/fn* +)))), +      (is (= "rx.util.functions.Func1", +             (.call dummy]