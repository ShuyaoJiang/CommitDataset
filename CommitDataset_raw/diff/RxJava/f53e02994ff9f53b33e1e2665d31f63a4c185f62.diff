[+++ b/src/main/java/io/reactivex/internal/schedulers/ComputationScheduler.java, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.AtomicReference;, +, +    static final FixedSchedulerPool NONE;, +    final ThreadFactory threadFactory;, +, +        NONE = new FixedSchedulerPool(0, THREAD_FACTORY);, +        NONE.shutdown();, +        FixedSchedulerPool(int maxThreads, ThreadFactory threadFactory) {, +                this.eventLoops[i] = new PoolWorker(threadFactory);, +        this(THREAD_FACTORY);, +    }, +, +    /**, +     * Create a scheduler with pool size equal to the available processor, +     * count and using least-recent worker selection policy., +     *, +     * @param threadFactory thread factory to use for creating worker threads. Note that this takes precedence over any, +     *                      system properties for configuring new thread creation. Cannot be null., +     */, +    public ComputationScheduler(ThreadFactory threadFactory) {, +        this.threadFactory = threadFactory;, +        FixedSchedulerPool update = new FixedSchedulerPool(MAX_THREADS, threadFactory);, +++ b/src/main/java/io/reactivex/internal/schedulers/ComputationScheduler.java, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.AtomicReference;, +, +    static final FixedSchedulerPool NONE;, +    final ThreadFactory threadFactory;, +, +        NONE = new FixedSchedulerPool(0, THREAD_FACTORY);, +        NONE.shutdown();, +        FixedSchedulerPool(int maxThreads, ThreadFactory threadFactory) {, +                this.eventLoops[i] = new PoolWorker(threadFactory);, +        this(THREAD_FACTORY);, +    }, +, +    /**, +     * Create a scheduler with pool size equal to the available processor, +     * count and using least-recent worker selection policy., +     *, +     * @param threadFactory thread factory to use for creating worker threads. Note that this takes precedence over any, +     *                      system properties for configuring new thread creation. Cannot be null., +     */, +    public ComputationScheduler(ThreadFactory threadFactory) {, +        this.threadFactory = threadFactory;, +        FixedSchedulerPool update = new FixedSchedulerPool(MAX_THREADS, threadFactory);, +++ b/src/main/java/io/reactivex/internal/schedulers/IoScheduler.java, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.*;, +, +    final ThreadFactory threadFactory;, +, +        NONE = new CachedWorkerPool(0, null, WORKER_THREAD_FACTORY);, +        NONE.shutdown();, +        private final ThreadFactory threadFactory;, +        CachedWorkerPool(long keepAliveTime, TimeUnit unit, ThreadFactory threadFactory) {, +            this.threadFactory = threadFactory;, +            ThreadWorker w = new ThreadWorker(threadFactory);, +        this(WORKER_THREAD_FACTORY);, +    }, +, +    /**, +     * @param threadFactory thread factory to use for creating worker threads. Note that this takes precedence over any, +     *                      system properties for configuring new thread creation. Cannot be null., +     */, +    public IoScheduler(ThreadFactory threadFactory) {, +        this.threadFactory = threadFactory;, +        CachedWorkerPool update = new CachedWorkerPool(KEEP_ALIVE_TIME, KEEP_ALIVE_UNIT, threadFactory);, +++ b/src/main/java/io/reactivex/internal/schedulers/ComputationScheduler.java, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.AtomicReference;, +, +    static final FixedSchedulerPool NONE;, +    final ThreadFactory threadFactory;, +, +        NONE = new FixedSchedulerPool(0, THREAD_FACTORY);, +        NONE.shutdown();, +        FixedSchedulerPool(int maxThreads, ThreadFactory threadFactory) {, +                this.eventLoops[i] = new PoolWorker(threadFactory);, +        this(THREAD_FACTORY);, +    }, +, +    /**, +     * Create a scheduler with pool size equal to the available processor, +     * count and using least-recent worker selection policy., +     *, +     * @param threadFactory thread factory to use for creating worker threads. Note that this takes precedence over any, +     *                      system properties for configuring new thread creation. Cannot be null., +     */, +    public ComputationScheduler(ThreadFactory threadFactory) {, +        this.threadFactory = threadFactory;, +        FixedSchedulerPool update = new FixedSchedulerPool(MAX_THREADS, threadFactory);, +++ b/src/main/java/io/reactivex/internal/schedulers/IoScheduler.java, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.*;, +, +    final ThreadFactory threadFactory;, +]