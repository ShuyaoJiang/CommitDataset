[+++ b/rxjava-core/src/main/java/rx/joins/JoinObserver1.java, +import rx.subscriptions.SingleAssignmentSubscription;, +    private final SingleAssignmentSubscription subscription;, +        subscription = new SingleAssignmentSubscription();, +        subscription.set(source.materialize().subscribe(this));, +++ b/rxjava-core/src/main/java/rx/joins/JoinObserver1.java, +import rx.subscriptions.SingleAssignmentSubscription;, +    private final SingleAssignmentSubscription subscription;, +        subscription = new SingleAssignmentSubscription();, +        subscription.set(source.materialize().subscribe(this));, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +        // do not overwrite a terminal notification, +        // so new subscribers can get them, +        if (lastNotification.get().isOnNext()) {, +    }, +++ b/rxjava-core/src/main/java/rx/joins/JoinObserver1.java, +import rx.subscriptions.SingleAssignmentSubscription;, +    private final SingleAssignmentSubscription subscription;, +        subscription = new SingleAssignmentSubscription();, +        subscription.set(source.materialize().subscribe(this));, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +        // do not overwrite a terminal notification, +        // so new subscribers can get them, +        if (lastNotification.get().isOnNext()) {, +    }, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +                            Thread.currentThread().interrupt();, +++ b/rxjava-core/src/main/java/rx/joins/JoinObserver1.java, +import rx.subscriptions.SingleAssignmentSubscription;, +    private final SingleAssignmentSubscription subscription;, +        subscription = new SingleAssignmentSubscription();, +        subscription.set(source.materialize().subscribe(this));, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +        // do not overwrite a terminal notification, +        // so new subscribers can get them, +        if (lastNotification.get().isOnNext()) {, +    }, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +                            Thread.currentThread().interrupt();, +++ b/rxjava-core/src/main/java/rx/subscriptions/BooleanSubscription.java, +    public void unsubscribe() {, +        unsubscribed.set(true);, +++ b/rxjava-core/src/main/java/rx/joins/JoinObserver1.java, +import rx.subscriptions.SingleAssignmentSubscription;, +    private final SingleAssignmentSubscription subscription;, +        subscription = new SingleAssignmentSubscription();, +        subscription.set(source.materialize().subscribe(this));, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +        // do not overwrite a terminal notification, +        // so new subscribers can get them, +        if (lastNotification.get().isOnNext()) {, +    }, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +                            Thread.currentThread().interrupt();, +++ b/rxjava-core/src/main/java/rx/subscriptions/BooleanSubscription.java, +    public void unsubscribe() {, +        unsubscribed.set(true);, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, + * @see <a, + *      href="http://msdn.microsoft.com/en-us/library/system.reactive.disposables.compositedisposable(v=vs.103).aspx">Rx.Net, + *      equivalent CompositeDisposable</a>, +     * @param subs the collection of subscriptions, +++ b/rxjava-core/src/main/java/rx/joins/JoinObserver1.java, +import rx.subscriptions.SingleAssignmentSubscription;, +    private final SingleAssignmentSubscription subscription;, +        subscription = new SingleAssignmentSubscription();, +        subscription.set(source.materialize().subscribe(this));, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +        // do not overwrite a terminal notification, +        // so new subscribers can get them, +        if (lastNotification.get().isOnNext()) {, +    }, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +                            Thread.currentThread().interrupt();, +++ b/rxjava-core/src/main/java/rx/subscriptions/BooleanSubscription.java, +    public void unsubscribe() {, +        unsubscribed.set(true);, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, + * @see <a, + *      href="http://msdn.microsoft.com/en-us/library/system.reactive.disposables.compositedisposable(v=vs.103).aspx">Rx.Net, + *      equivalent CompositeDisposable</a>, +     * @param subs the collection of subscriptions, +++ b/rxjava-core/src/main/java/rx/subscriptions/MultipleAssignmentSubscription.java, +import java.util.concurrent.atomic.AtomicBoolean;, +++ b/rxjava-core/src/main/java/rx/joins/JoinObserver1.java, +import rx.subscriptions.SingleAssignmentSubscription;, +    private final SingleAssignmentSubscription subscription;, +        subscription = new SingleAssignmentSubscription();, +        subscription.set(source.materialize().subscribe(this));, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +        // do not overwrite a terminal notification, +        // so new subscribers can get them, +        if (lastNotification.get().isOnNext()) {, +    }, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +                            Thread.currentThread().interrupt();, +++ b/rxjava-core/src/main/java/rx/subscriptions/BooleanSubscription.java, +    public void unsubscribe() {, +        unsubscribed.set(true);, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java]