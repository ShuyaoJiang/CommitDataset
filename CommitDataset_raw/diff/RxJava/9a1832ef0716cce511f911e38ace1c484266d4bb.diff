[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that counts the total number of elements in the source Observable., +     * @return an Observable emitting the number of counted elements of the source Observable , +     *         as its single item., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229470%28v=vs.103%29.aspx">MSDN: Observable.Count</a>, +     */, +    public Observable<Integer> count() {, +        return reduce(0, new Func2<Integer, T, Integer>() {, +            @Override, +            public Integer call(Integer t1, T t2) {, +                return t1 + 1;, +            }, +        });, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that counts the total number of elements in the source Observable., +     * @return an Observable emitting the number of counted elements of the source Observable , +     *         as its single item., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229470%28v=vs.103%29.aspx">MSDN: Observable.Count</a>, +     */, +    public Observable<Integer> count() {, +        return reduce(0, new Func2<Integer, T, Integer>() {, +            @Override, +            public Integer call(Integer t1, T t2) {, +                return t1 + 1;, +            }, +        });, +    }, +    , +    /**, +++ b/rxjava-core/src/test/java/rx/ObservableTests.java, +        verify(aObserver, never()).onError(any(Throwable.class));, +    public void testCountAFewItems() {, +        Observable<String> observable = Observable.from("a", "b", "c", "d");, +        observable.count().subscribe(w);, +        // we should be called only once, +        verify(w, times(1)).onNext(anyInt());, +        verify(w).onNext(4);, +        verify(w, never()).onError(any(Throwable.class));, +        verify(w, times(1)).onCompleted();, +    }, +    , +    @Test, +    public void testCountZeroItems() {, +        Observable<String> observable = Observable.empty();, +        observable.count().subscribe(w);, +        // we should be called only once, +        verify(w, times(1)).onNext(anyInt());, +        verify(w).onNext(0);, +        verify(w, never()).onError(any(Throwable.class));, +        verify(w, times(1)).onCompleted();, +    }, +, +    @Test, +    public void testCountError() {, +        Observable<String> o = Observable.create(new OnSubscribeFunc<String>() {, +            @Override, +            public Subscription onSubscribe(Observer<? super String> obsv) {, +                obsv.onError(new RuntimeException());, +                return Subscriptions.empty();, +            }, +        });, +        o.count().subscribe(w);, +        verify(w, never()).onNext(anyInt());, +        verify(w, never()).onCompleted();, +        verify(w, times(1)).onError(any(RuntimeException.class));, +    }, +    , +    @Test]