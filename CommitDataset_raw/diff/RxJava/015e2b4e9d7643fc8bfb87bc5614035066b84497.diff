[+++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +public final class AsyncSubject<T> extends Subject<T> {, +        OnSubscribe<T> onSubscribe = subscriptionManager.getOnSubscribeFunc(, +    private final OnSubscribe<T> onSubscribe;, +    protected AsyncSubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> subscriptionManager, AtomicReference<Notification<T>> lastNotification) {, +        this.onSubscribe = onSubscribe;, +    public Observable<T> toObservable() {, +        return Observable.create(onSubscribe);, +    }, +, +    @Override, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +public final class AsyncSubject<T> extends Subject<T> {, +        OnSubscribe<T> onSubscribe = subscriptionManager.getOnSubscribeFunc(, +    private final OnSubscribe<T> onSubscribe;, +    protected AsyncSubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> subscriptionManager, AtomicReference<Notification<T>> lastNotification) {, +        this.onSubscribe = onSubscribe;, +    public Observable<T> toObservable() {, +        return Observable.create(onSubscribe);, +    }, +, +    @Override, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +public final class BehaviorSubject<T> extends Subject<T> {, +        OnSubscribe<T> onSubscribe = subscriptionManager.getOnSubscribeFunc(, +    private final OnSubscribe<T> onSubscribe;, +    protected BehaviorSubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> subscriptionManager, AtomicReference<Notification<T>> lastNotification) {, +        this.onSubscribe = onSubscribe;, +    public Observable<T> toObservable() {, +        return Observable.create(onSubscribe);, +    }, +, +    @Override, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +public final class AsyncSubject<T> extends Subject<T> {, +        OnSubscribe<T> onSubscribe = subscriptionManager.getOnSubscribeFunc(, +    private final OnSubscribe<T> onSubscribe;, +    protected AsyncSubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> subscriptionManager, AtomicReference<Notification<T>> lastNotification) {, +        this.onSubscribe = onSubscribe;, +    public Observable<T> toObservable() {, +        return Observable.create(onSubscribe);, +    }, +, +    @Override, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +public final class BehaviorSubject<T> extends Subject<T> {, +        OnSubscribe<T> onSubscribe = subscriptionManager.getOnSubscribeFunc(, +    private final OnSubscribe<T> onSubscribe;, +    protected BehaviorSubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> subscriptionManager, AtomicReference<Notification<T>> lastNotification) {, +        this.onSubscribe = onSubscribe;, +    public Observable<T> toObservable() {, +        return Observable.create(onSubscribe);, +    }, +, +    @Override, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +public final class PublishSubject<T> extends Subject<T> {, +        OnSubscribe<T> onSubscribe = subscriptionManager.getOnSubscribeFunc(, +    private final OnSubscribe<T> onSubscribe;, +    protected PublishSubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> subscriptionManager, AtomicReference<Notification<T>> lastNotification) {, +        this.onSubscribe = onSubscribe;, +    public Observable<T> toObservable() {, +        return Observable.create(onSubscribe);, +    }, +, +    @Override, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +public final class AsyncSubject<T> extends Subject<T> {, +        OnSubscribe<T> onSubscribe = subscriptionManager.getOnSubscribeFunc(, +    private final OnSubscribe<T> onSubscribe;, +    protected AsyncSubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> subscriptionManager, AtomicReference<Notification<T>> lastNotification) {, +        this.onSubscribe = onSubscribe;, +    public Observable<T> toObservable() {, +        return Observable.create(onSubscribe);, +    }, +, +    @Override, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +public final class BehaviorSubject<T> extends Subject<T> {, +        OnSubscribe<T> onSubscribe = subscriptionManager.getOnSubscribeFunc(, +    private final OnSubscribe<T> onSubscribe;, +    protected BehaviorSubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> subscriptionManager, AtomicReference<Notification<T>> lastNotification) {, +        this.onSubscribe = onSubscribe;, +    public Observable<T> toObservable() {]