[+++ b/rxjava-core/src/main/java/rx/Observable.java, +        return this.repeat(Schedulers.currentThread());, +    }, +, +    /**, +     * Repeats the observable sequence indefinitely., +     * <p>, +     * @param scheduler the scheduler to send the values on., +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     */, +    public Observable<T> repeat(Scheduler scheduler) {, +        return create(OperationRepeat.repeat(this, scheduler));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return this.repeat(Schedulers.currentThread());, +    }, +, +    /**, +     * Repeats the observable sequence indefinitely., +     * <p>, +     * @param scheduler the scheduler to send the values on., +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     */, +    public Observable<T> repeat(Scheduler scheduler) {, +        return create(OperationRepeat.repeat(this, scheduler));, +++ b/rxjava-core/src/main/java/rx/operators/OperationRepeat.java, +import rx.Scheduler;, +import rx.subscriptions.MultipleAssignmentSubscription;, +    private final Scheduler scheduler;, +    public static <T> Observable.OnSubscribeFunc<T> repeat(Observable<T> source, Scheduler scheduler) {, +        return new OperationRepeat(source, scheduler);, +    private OperationRepeat(Observable<T> source, Scheduler scheduler) {, +        this.scheduler = scheduler;, +        final MultipleAssignmentSubscription subscription = new MultipleAssignmentSubscription();, +        subscription.setSubscription(scheduler.schedule(new Action1<Action0>() {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return this.repeat(Schedulers.currentThread());, +    }, +, +    /**, +     * Repeats the observable sequence indefinitely., +     * <p>, +     * @param scheduler the scheduler to send the values on., +     * @return The observable sequence producing the elements of the given sequence repeatedly and sequentially., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428(v=vs.103).aspx">MSDN: Observable.Repeat</a>, +     */, +    public Observable<T> repeat(Scheduler scheduler) {, +        return create(OperationRepeat.repeat(this, scheduler));, +++ b/rxjava-core/src/main/java/rx/operators/OperationRepeat.java, +import rx.Scheduler;, +import rx.subscriptions.MultipleAssignmentSubscription;, +    private final Scheduler scheduler;, +    public static <T> Observable.OnSubscribeFunc<T> repeat(Observable<T> source, Scheduler scheduler) {, +        return new OperationRepeat(source, scheduler);, +    private OperationRepeat(Observable<T> source, Scheduler scheduler) {, +        this.scheduler = scheduler;, +        final MultipleAssignmentSubscription subscription = new MultipleAssignmentSubscription();, +        subscription.setSubscription(scheduler.schedule(new Action1<Action0>() {, +++ b/rxjava-core/src/test/java/rx/ObservableTests.java, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import rx.Observable.OnSubscribeFunc;, +import rx.concurrency.Schedulers;, +import rx.concurrency.TestScheduler;, +import rx.observables.ConnectableObservable;, +import rx.subscriptions.BooleanSubscription;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Action1;, +import rx.util.functions.Func1;, +import rx.util.functions.Func2;, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Mockito.*;, +, +    @Test, +    public void testRepeatTake() {, +        Observable<Integer> xs = Observable.from(1,2);, +        Object[] ys = xs.repeat(Schedulers.newThread()).take(4).toList().toBlockingObservable().last().toArray();, +        assertArrayEquals(new Object[]{ 1, 2, 1, 2}, ys);, +    }]