[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     *             if {@code count} is less than zero, or if {@code start} + {@code count} - 1 exceeds {@code Integer.MAX_VALUE}, +        if (count == 0) {, +            return Observable.empty();, +        }, +        if (start > Integer.MAX_VALUE - count + 1) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     *             if {@code count} is less than zero, or if {@code start} + {@code count} - 1 exceeds {@code Integer.MAX_VALUE}, +        if (count == 0) {, +            return Observable.empty();, +        }, +        if (start > Integer.MAX_VALUE - count + 1) {, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     *             if {@code count} is less than zero, or if {@code start} + {@code count} - 1 exceeds {@code Integer.MAX_VALUE}, +        if (count == 0) {, +            return Observable.empty();, +        }, +        if (start > Integer.MAX_VALUE - count + 1) {, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/schedulers/Schedulers.java, +import java.util.concurrent.Executor;, +, +            ioScheduler = NewThreadScheduler.instance(); // defaults to new thread, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     *             if {@code count} is less than zero, or if {@code start} + {@code count} - 1 exceeds {@code Integer.MAX_VALUE}, +        if (count == 0) {, +            return Observable.empty();, +        }, +        if (start > Integer.MAX_VALUE - count + 1) {, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/schedulers/Schedulers.java, +import java.util.concurrent.Executor;, +, +            ioScheduler = NewThreadScheduler.instance(); // defaults to new thread, +++ b/rxjava-core/src/test/java/rx/operators/OnSubscribeRangeTest.java, +import static org.junit.Assert.assertFalse;, +, +    @Test, +    public void testRangeWithOverflow() {, +        Observable.range(1, 0);, +    }, +, +    @Test, +    public void testRangeWithOverflow2() {, +        Observable.range(Integer.MAX_VALUE, 0);, +    }, +, +    @Test, +    public void testRangeWithOverflow3() {, +        Observable.range(1, Integer.MAX_VALUE);, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void testRangeWithOverflow4() {, +        Observable.range(2, Integer.MAX_VALUE);, +    }, +, +    @Test, +    public void testRangeWithOverflow5() {, +        assertFalse(Observable.range(Integer.MIN_VALUE, 0).toBlocking().getIterator().hasNext());, +    }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     *             if {@code count} is less than zero, or if {@code start} + {@code count} - 1 exceeds {@code Integer.MAX_VALUE}, +        if (count == 0) {, +            return Observable.empty();, +        }, +        if (start > Integer.MAX_VALUE - count + 1) {, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/schedulers/Schedulers.java, +import java.util.concurrent.Executor;, +, +            ioScheduler = NewThreadScheduler.instance(); // defaults to new thread, +++ b/rxjava-core/src/test/java/rx/operators/OnSubscribeRangeTest.java, +import static org.junit.Assert.assertFalse;, +, +    @Test, +    public void testRangeWithOverflow() {, +        Observable.range(1, 0);, +    }, +, +    @Test, +    public void testRangeWithOverflow2() {, +        Observable.range(Integer.MAX_VALUE, 0);, +    }, +, +    @Test, +    public void testRangeWithOverflow3() {, +        Observable.range(1, Integer.MAX_VALUE);, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void testRangeWithOverflow4() {, +        Observable.range(2, Integer.MAX_VALUE);, +    }, +, +    @Test, +    public void testRangeWithOverflow5() {, +        assertFalse(Observable.range(Integer.MIN_VALUE, 0).toBlocking().getIterator().hasNext());, +    }]