[+++ b/rxjava-core/src/main/java/rx/exceptions/OnErrorThrowable.java, +            super("OnError while emitting onNext value: " + renderValue(value));, +        /**, +         * Render the object if it is a basic type. This avoids the library making potentially expensive, +         * or calls to toString() which may throw exceptions. See PR #1401 for details., +         *, +         * @param value, +         *        the item that the Observable was trying to emit at the time of the exception, +         * @return a string version of the object if primitive, otherwise the classname of the object, +         */, +        private static String renderValue(Object value){, +            if(value == null){, +                return "null";, +            }, +            if(value.getClass().isPrimitive()){, +                return value.toString();, +            }, +            if(value instanceof String){, +                return (String)value;, +            }, +            return value.getClass().getSimpleName() + ".class";, +        }, +++ b/rxjava-core/src/main/java/rx/exceptions/OnErrorThrowable.java, +            super("OnError while emitting onNext value: " + renderValue(value));, +        /**, +         * Render the object if it is a basic type. This avoids the library making potentially expensive, +         * or calls to toString() which may throw exceptions. See PR #1401 for details., +         *, +         * @param value, +         *        the item that the Observable was trying to emit at the time of the exception, +         * @return a string version of the object if primitive, otherwise the classname of the object, +         */, +        private static String renderValue(Object value){, +            if(value == null){, +                return "null";, +            }, +            if(value.getClass().isPrimitive()){, +                return value.toString();, +            }, +            if(value instanceof String){, +                return (String)value;, +            }, +            return value.getClass().getSimpleName() + ".class";, +        }, +++ b/rxjava-core/src/test/java/rx/exceptions/OnNextValueTest.java, +package rx.exceptions;, +, +import org.junit.Test;, +import rx.Observable;, +import rx.Observer;, +import rx.functions.Func1;, +, +import java.io.PrintWriter;, +import java.io.StringWriter;, +, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +/**, + * ```java, + * public OnNextValue(Object value) {, + *    super("OnError while emitting onNext value: " + value);, + *    this.value = value;, + * }, + * ```, + * I know this is probably a helpful error message in some cases but this can be a really costly operation when an objects toString is an expensive call or contains alot of output. I don't think we should be printing this in any case but if so it should be on demand (overload of getMessage()) rather than eagerly., + * <p/>, + * In my case it is causing a toString of a large context object that is normally only used for debugging purposes which makes the exception logs hard to use and they are rolling over the log files very quickly., + * <p/>, + * There is an added danger that if there is a bug in the toString method it will cause inconsistent exception creation. If the object throws an exception while rendering a string it will actually end up not seeing the real exception., + */, +public final class OnNextValueTest {, +    private static class BadToString {, +, +        private final boolean throwDuringToString;, +, +        private BadToString(boolean throwDuringToString) {, +            this.throwDuringToString = throwDuringToString;, +        }, +, +        @Override, +        public String toString() {, +            if (throwDuringToString) {, +                throw new IllegalArgumentException("Error Making toString");, +            } else {, +                return "BadToString";, +            }, +        }, +    }, +, +    private static class BadToStringObserver implements Observer<BadToString> {, +        @Override, +        public void onCompleted() {, +            System.out.println("On Complete");, +            fail("OnComplete shouldn't be reached");, +        }, +, +        @Override, +        public void onError(Throwable e) {, +            String trace = stackTraceAsString(e);]