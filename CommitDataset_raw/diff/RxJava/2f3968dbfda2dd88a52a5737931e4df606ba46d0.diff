[+++ b/.gitignore, +++ b/.gitignore, +++ b/gradle.properties, +version=0.17.0-RC2-SNAPSHOT, +++ b/.gitignore, +++ b/gradle.properties, +version=0.17.0-RC2-SNAPSHOT, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-all.zip, +++ b/.gitignore, +++ b/gradle.properties, +version=0.17.0-RC2-SNAPSHOT, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-all.zip, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscriptions.empty()!!, +++ b/.gitignore, +++ b/gradle.properties, +version=0.17.0-RC2-SNAPSHOT, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-all.zip, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscriptions.empty()!!, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        Subscriptions.empty()!!, +++ b/.gitignore, +++ b/gradle.properties, +version=0.17.0-RC2-SNAPSHOT, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-all.zip, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscriptions.empty()!!, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        Subscriptions.empty()!!, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def combineLatestExample() {, +    val first_counter = Observable.interval(250 millis), +    val second_counter = Observable.interval(550 millis), +    val combined_counter = first_counter.combineLatest(second_counter,, +      (x: Long, y: Long) => List(x,y)) take 10, +, +    combined_counter subscribe {x => println(s"Emitted group: $x")}, +  }, +, +  @Test def timeoutExample(): Unit = {, +    val other = List(100L, 200L, 300L).toObservable, +    val result = Observable.interval(100 millis).timeout(50 millis, other).toBlockingObservable.toList, +    println(result), +  }, +, +  @Test def timeoutExample2(): Unit = {, +    val firstTimeoutSelector = () => {, +      Observable.timer(10 seconds, 10 seconds, ComputationScheduler()).take(1), +    }, +    val timeoutSelector = (t: Long) => {, +      Observable.timer(, +        (500 - t * 100) max 1 millis,, +        (500 - t * 100) max 1 millis,, +        ComputationScheduler()).take(1), +    }, +    val other = List(100L, 200L, 300L).toObservable, +    val result = Observable.interval(100 millis).timeout(firstTimeoutSelector, timeoutSelector, other).toBlockingObservable.toList, +    println(result), +  }, +, +++ b/.gitignore, +++ b/gradle.properties, +version=0.17.0-RC2-SNAPSHOT, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-all.zip, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +            return Subscriptions.empty()!!, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        Subscriptions.empty()!!, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def combineLatestExample() {, +    val first_counter = Observable.interval(250 millis), +    val second_counter = Observable.interval(550 millis), +    val combined_counter = first_counter.combineLatest(second_counter,, +      (x: Long, y: Long) => List(x,y)) take 10, +, +    combined_counter subscribe {x => println(s"Emitted group: $x")}, +  }, +, +  @Test def timeoutExample(): Unit = {, +    val other = List(100L, 200L, 300L).toObservable, +    val result = Observable.interval(100 millis).timeout(50 millis, other).toBlockingObservable.toList, +    println(result), +  }, +, +  @Test def timeoutExample2(): Unit = {, +    val firstTimeoutSelector = () => {, +      Observable.timer(10 seconds, 10 seconds, ComputationScheduler()).take(1), +    }, +    val timeoutSelector = (t: Long) => {, +      Observable.timer(, +        (500 - t * 100) max 1 millis,, +        (500 - t * 100) max 1 millis,, +        ComputationScheduler()).take(1), +    }]