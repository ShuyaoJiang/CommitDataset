[+++ b/src/main/java/io/reactivex/processors/UnicastProcessor.java, +import io.reactivex.annotations.Experimental;, +    final boolean delayError;, +, +, +     * Creates an UnicastProcessor with default internal buffer capacity hint and delay error flag., +     * @param <T> the value type, +     * @param delayError deliver pending onNext events before onError, +     * @return an UnicastProcessor instance, +     * @since 2.0.8 - experimental, +     */, +    @CheckReturnValue, +    @Experimental, +    public static <T> UnicastProcessor<T> create(boolean delayError) {, +        return new UnicastProcessor<T>(bufferSize(), null, delayError);, +    }, +, +    /**, +        ObjectHelper.requireNonNull(onCancelled, "onTerminate");, +     * Creates an UnicastProcessor with the given internal buffer capacity hint, delay error flag and a callback for, +     * the case when the single Subscriber cancels its subscription., +     *, +     * <p>The callback, if not null, is called exactly once and, +     * non-overlapped with any active replay., +     *, +     * @param <T> the value type, +     * @param capacityHint the hint to size the internal unbounded buffer, +     * @param onCancelled the non null callback, +     * @param delayError deliver pending onNext events before onError, +     * @return an UnicastProcessor instance, +     * @since 2.0.8 - experimental, +     */, +    @CheckReturnValue, +    @Experimental, +    public static <T> UnicastProcessor<T> create(int capacityHint, Runnable onCancelled, boolean delayError) {, +        ObjectHelper.requireNonNull(onCancelled, "onTerminate");, +        return new UnicastProcessor<T>(capacityHint, onCancelled, delayError);, +    }, +, +    /**, +        this(capacityHint,null, true);, +        this(capacityHint, onTerminate, true);, +    }, +, +    /**, +     * Creates an UnicastProcessor with the given capacity hint and callback, +     * for when the Processor is terminated normally or its single Subscriber cancels., +     * @param capacityHint the capacity hint for the internal, unbounded queue, +     * @param onTerminate the callback to run when the Processor is terminated or cancelled, null not allowed, +     * @param delayError deliver pending onNext events before onError, +     * @since 2.0.8 - experimental, +     */, +    UnicastProcessor(int capacityHint, Runnable onTerminate, boolean delayError) {, +        this.onTerminate = new AtomicReference<Runnable>(onTerminate);, +        this.delayError = delayError;, +        final boolean failFast = !delayError;, +                if (checkTerminated(failFast, d, empty, a, q)) {, +            if (r == e && checkTerminated(failFast, done, q.isEmpty(), a, q)) {, +        final boolean failFast = !delayError;, +            if (failFast && d && error != null) {, +                q.clear();, +                actual.lazySet(null);, +                a.onError(error);, +                return;, +            }, +    boolean checkTerminated(boolean failFast, boolean d, boolean empty, Subscriber<? super T> a, SpscLinkedArrayQueue<T> q) {, +, +        if (d) {, +            if (failFast && error != null) {, +                q.clear();, +                actual.lazySet(null);, +                a.onError(error);, +                return true;, +            }, +            if (empty) {, +        }, +++ b/src/main/java/io/reactivex/processors/UnicastProcessor.java, +import io.reactivex.annotations.Experimental;, +    final boolean delayError;, +, +, +     * Creates an UnicastProcessor with default internal buffer capacity hint and delay error flag., +     * @param <T> the value type, +     * @param delayError deliver pending onNext events before onError, +     * @return an UnicastProcessor instance, +     * @since 2.0.8 - experimental, +     */, +    @CheckReturnValue, +    @Experimental, +    public static <T> UnicastProcessor<T> create(boolean delayError) {, +        return new UnicastProcessor<T>(bufferSize(), null, delayError);, +    }, +, +    /**, +        ObjectHelper.requireNonNull(onCancelled, "onTerminate");, +     * Creates an UnicastProcessor with the given internal buffer capacity hint, delay error flag and a callback for, +     * the case when the single Subscriber cancels its subscription., +     *, +     * <p>The callback, if not null, is called exactly once and, +     * non-overlapped with any active replay.]