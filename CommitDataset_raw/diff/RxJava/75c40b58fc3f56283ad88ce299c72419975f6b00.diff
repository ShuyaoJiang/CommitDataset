[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnEach.java, +import io.reactivex.internal.fuseable.ConditionalSubscriber;, +import io.reactivex.internal.subscribers.flowable.*;, +import io.reactivex.internal.util.Exceptions;, +        if (s instanceof ConditionalSubscriber) {, +            source.subscribe(new DoOnEachConditionalSubscriber<T>(, +                    (ConditionalSubscriber<? super T>)s, onNext, onError, onComplete, onAfterTerminate));, +        } else {, +            source.subscribe(new DoOnEachSubscriber<T>(, +                    s, onNext, onError, onComplete, onAfterTerminate));, +        }, +    static final class DoOnEachSubscriber<T> extends BasicFuseableSubscriber<T, T> {, +            super(actual);, +            , +            if (sourceMode != NONE) {, +                actual.onNext(null);, +                return;, +            }, +            , +                fail(e);, +                Exceptions.throwIfFatal(e);, +                fail(e);, +        public int requestFusion(int mode) {, +            return transitiveBoundaryFusion(mode);, +        public T poll() {, +            T v = qs.poll();, +            , +            if (v != null) {, +                try {, +                    onNext.accept(v);, +                } finally {, +                    onAfterTerminate.run();, +                }, +            } else {, +                if (sourceMode == SYNC) {, +                    onComplete.run();, +                    , +                    onAfterTerminate.run();, +                }, +            }, +            return v;, +        }, +    static final class DoOnEachConditionalSubscriber<T> extends BasicFuseableConditionalSubscriber<T, T> {, +        final Consumer<? super T> onNext;, +        final Consumer<? super Throwable> onError;, +        final Runnable onComplete;, +        final Runnable onAfterTerminate;, +        , +        public DoOnEachConditionalSubscriber(, +                ConditionalSubscriber<? super T> actual,, +                Consumer<? super T> onNext, , +                Consumer<? super Throwable> onError, , +                Runnable onComplete,, +                Runnable onAfterTerminate) {, +            super(actual);, +            this.onNext = onNext;, +            this.onError = onError;, +            this.onComplete = onComplete;, +            this.onAfterTerminate = onAfterTerminate;, +        }, +        , +        @Override, +        public void onNext(T t) {, +            if (done) {, +                return;, +            }, +            , +            if (sourceMode != NONE) {, +                actual.onNext(null);, +                return;, +            }, +            , +            try {, +                onNext.accept(t);, +            } catch (Throwable e) {, +                fail(e);, +                return;, +            }, +            , +            actual.onNext(t);, +        }, +        , +        @Override, +        public boolean tryOnNext(T t) {, +            if (done) {, +                return false;, +            }, +            , +            if (sourceMode != NONE) {, +                return actual.tryOnNext(null);, +            }, +            , +            try {, +                onNext.accept(t);, +            } catch (Throwable e) {, +                fail(e);, +                return false;, +            }, +            , +            return actual.tryOnNext(t);]