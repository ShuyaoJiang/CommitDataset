[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/gradle.properties, +version=0.13.0-SNAPSHOT, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/gradle.properties, +version=0.13.0-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import static rx.util.functions.Functions.*;, +import rx.operators.OperationThrottleFirst;, +import rx.operators.OperationDebounce;, +     * Debounces by dropping all values that are followed by newer values before the timeout value expires. The timer resets on each `onNext` call., +     * <p>, +     * NOTE: If events keep firing faster than the timeout then no data will be emitted., +     * <p>, +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/debounce.png">, +     * <p>, +     * Information on debounce vs throttle:, +     * <p>, +     * <ul>, +     * <li>http://drupalmotion.com/article/debounce-and-throttle-visual-explanation</li>, +     * <li>http://unscriptable.com/2009/03/20/debouncing-javascript-methods/</li>, +     * <li>http://www.illyriad.co.uk/blog/index.php/2011/09/javascript-dont-spam-your-server-debounce-and-throttle/</li>, +     * </ul>, +     * , +     * @param timeout, +     *            The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +     * @param unit, +     *            The {@link TimeUnit} for the timeout., +     * , +     * @return An {@link Observable} which filters out values which are too quickly followed up with newer values., +     * @see {@link #throttleWithTimeout};, +     */, +    public Observable<T> debounce(long timeout, TimeUnit unit) {, +        return create(OperationDebounce.debounce(this, timeout, unit));, +    }, +, +    /**, +     * Debounces by dropping all values that are followed by newer values before the timeout value expires. The timer resets on each `onNext` call., +     * <p>, +     * NOTE: If events keep firing faster than the timeout then no data will be emitted., +     * <p>, +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/debounce.png">, +     * <p>, +     * Information on debounce vs throttle:, +     * <p>, +     * <ul>, +     * <li>http://drupalmotion.com/article/debounce-and-throttle-visual-explanation</li>, +     * <li>http://unscriptable.com/2009/03/20/debouncing-javascript-methods/</li>, +     * <li>http://www.illyriad.co.uk/blog/index.php/2011/09/javascript-dont-spam-your-server-debounce-and-throttle/</li>, +     * </ul>, +     * , +     * @param timeout, +     *            The time each value has to be 'the most recent' of the {@link Observable} to ensure that it's not dropped., +     * @param unit, +     *            The unit of time for the specified timeout., +     * @param scheduler, +     *            The {@link Scheduler} to use internally to manage the timers which handle timeout for each event., +     * @return Observable which performs the throttle operation., +     * @see {@link #throttleWithTimeout};, +     */, +    public Observable<T> debounce(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationDebounce.debounce(this, timeout, unit));, +    }, +, +    /**, +     * Debounces by dropping all values that are followed by newer values before the timeout value expires. The timer resets on each `onNext` call., +     * <p>, +     * NOTE: If events keep firing faster than the timeout then no data will be emitted., +     * <p>, +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/throttleWithTimeout.png">, +     * <p>, +     * Information on debounce vs throttle:, +     * <p>, +     * <ul>, +     * <li>http://drupalmotion.com/article/debounce-and-throttle-visual-explanation</li>, +     * <li>http://unscriptable.com/2009/03/20/debouncing-javascript-methods/</li>, +     * <li>http://www.illyriad.co.uk/blog/index.php/2011/09/javascript-dont-spam-your-server-debounce-and-throttle/</li>]