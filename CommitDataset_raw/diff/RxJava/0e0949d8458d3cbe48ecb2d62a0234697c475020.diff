[+++ b/src/main/java/rx/Single.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +package rx;, +, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +, +import rx.Observable.Operator;, +import rx.annotations.Experimental;, +import rx.exceptions.Exceptions;, +import rx.exceptions.OnErrorNotImplementedException;, +import rx.functions.Action1;, +import rx.functions.Func1;, +import rx.functions.Func2;, +import rx.functions.Func3;, +import rx.functions.Func4;, +import rx.functions.Func5;, +import rx.functions.Func6;, +import rx.functions.Func7;, +import rx.functions.Func8;, +import rx.functions.Func9;, +import rx.internal.operators.OnSubscribeToObservableFuture;, +import rx.internal.operators.OperatorMap;, +import rx.internal.operators.OperatorObserveOn;, +import rx.internal.operators.OperatorOnErrorReturn;, +import rx.internal.operators.OperatorSubscribeOn;, +import rx.internal.operators.OperatorTimeout;, +import rx.internal.operators.OperatorZip;, +import rx.internal.producers.SingleDelayedProducer;, +import rx.observers.SafeSubscriber;, +import rx.plugins.RxJavaObservableExecutionHook;, +import rx.plugins.RxJavaPlugins;, +import rx.schedulers.Schedulers;, +import rx.subscriptions.Subscriptions;, +, +/**, + * The Single class that implements the Reactive Pattern for a single value response. See {@link Observable} for a stream or vector of values., + * <p>, + * This behaves the same as an {@link Observable} except that it can only emit either a single successful value, or an error., + * <p>, + * Like an {@link Observable} it is lazy, can be either "hot" or "cold", synchronous or asynchronous., + * <p>, + * The documentation for this class makes use of marble diagrams. The following legend explains these diagrams:, + * <p>, + * <img width="640" height="301" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/legend.png" alt="">, + * <p>, + * For more information see the <a href="http://reactivex.io/documentation/observable.html">ReactiveX documentation</a>., + * , + * @param <T>, + *            the type of the item emitted by the Single, + */, +@Experimental, +public class Single<T> {, +, +    final Observable.OnSubscribe<T> onSubscribe;, +, +    /**, +     * Creates a Single with a Function to execute when it is subscribed to (executed)., +     * <p>, +     * <em>Note:</em> Use {@link #create(OnExecute)} to create a Single, instead of this constructor,, +     * unless you specifically have a need for inheritance., +     * , +     * @param f, +     *            {@link OnExecute} to be executed when {@link #execute(SingleSubscriber)} or {@link #subscribe(Subscriber)} is called, +     */, +    protected Single(final OnSubscribe<T> f) {, +        // bridge between OnSubscribe (which all Operators and Observables use) and OnExecute (for Single), +        this.onSubscribe = new Observable.OnSubscribe<T>() {, +, +            @Override, +            public void call(final Subscriber<? super T> child) {, +                final SingleDelayedProducer<T> producer = new SingleDelayedProducer<T>(child);, +                child.setProducer(producer);, +                SingleSubscriber<T> ss = new SingleSubscriber<T>() {, +, +                    @Override, +                    public void onSuccess(T value) {, +                        producer.setValue(value);, +                    }, +, +                    @Override, +                    public void onError(Throwable error) {, +                        child.onError(error);, +                    }, +, +                };, +                child.add(ss);, +                f.call(ss);]