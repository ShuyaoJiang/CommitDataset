[+++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally or with an error. Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * @see #blockingSubscribe(Consumer), +     * @see #blockingSubscribe(Consumer, Consumer), +     * @see #blockingSubscribe(Consumer, Consumer, Action), +     * Using the overloads {@link #blockingSubscribe(Consumer, Consumer)}, +     * or {@link #blockingSubscribe(Consumer, Consumer, Action)} instead is recommended., +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally or with an error. Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * @see #blockingSubscribe(Consumer, Consumer), +     * @see #blockingSubscribe(Consumer, Consumer, Action), +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally or with an error. Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * @see #blockingSubscribe(Consumer, Consumer, Action), +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally or with an error. Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * Subscribes to the source and calls the {@link Subscriber} methods <strong>on the current thread</strong>., +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally, with an error or the {@code Subscriber} cancels the {@link Subscription} it receives via, +     * {@link Subscriber#onSubscribe(Subscription)}., +     * Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally or with an error. Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * @see #blockingSubscribe(Consumer), +     * @see #blockingSubscribe(Consumer, Consumer), +     * @see #blockingSubscribe(Consumer, Consumer, Action), +     * Using the overloads {@link #blockingSubscribe(Consumer, Consumer)}, +     * or {@link #blockingSubscribe(Consumer, Consumer, Action)} instead is recommended., +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally or with an error. Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * @see #blockingSubscribe(Consumer, Consumer), +     * @see #blockingSubscribe(Consumer, Consumer, Action), +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally or with an error. Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * @see #blockingSubscribe(Consumer, Consumer, Action), +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally or with an error. Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * Subscribes to the source and calls the {@link Subscriber} methods <strong>on the current thread</strong>., +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally, with an error or the {@code Subscriber} cancels the {@link Subscription} it receives via, +     * {@link Subscriber#onSubscribe(Subscription)}., +     * Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +++ b/src/main/java/io/reactivex/Observable.java, +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally or with an error. Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * @see #blockingSubscribe(Consumer), +     * @see #blockingSubscribe(Consumer, Consumer), +     * @see #blockingSubscribe(Consumer, Consumer, Action), +     * If the {@code Observable} emits an error, it is wrapped into an, +     * Using the overloads {@link #blockingSubscribe(Consumer, Consumer)}, +     * or {@link #blockingSubscribe(Consumer, Consumer, Action)} instead is recommended., +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally or with an error. Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * @see #blockingSubscribe(Consumer, Consumer), +     * @see #blockingSubscribe(Consumer, Consumer, Action), +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally or with an error. Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * @see #blockingSubscribe(Consumer, Consumer, Action), +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally or with an error. Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * Subscribes to the source and calls the {@link Observer} methods <strong>on the current thread</strong>., +     * <p>, +     * Note that calling this method will block the caller thread until the upstream terminates, +     * normally, with an error or the {@code Observer} disposes the {@link Disposable} it receives via, +     * {@link Observer#onSubscribe(Disposable)}., +     * Therefore, calling this method from special threads such as the, +     * Android Main Thread or the Swing Event Dispatch Thread is not recommended., +     * @param observer the {@code Observer} instance to forward events and calls to in the current thread, +    public final void blockingSubscribe(Observer<? super T> observer) {, +        ObservableBlockingSubscribe.subscribe(this, observer);]