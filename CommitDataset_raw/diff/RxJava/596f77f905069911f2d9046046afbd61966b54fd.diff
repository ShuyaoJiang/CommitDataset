[+++ b/src/main/java/io/reactivex/Observable.java, +    public interface NbpTransformer<Upstream, Downstream> extends Function<Observable<Upstream>, ObservableConsumable<Downstream>> {, +    public static <T> Observable<T> amb(Iterable<? extends ObservableConsumable<? extends T>> sources) {, +    public static <T> Observable<T> amb(ObservableConsumable<? extends T>... sources) {, +            return (Observable<T>)sources[0]; // FIXME wrap(), +    public static <T, R> Observable<R> combineLatest(Function<? super Object[], ? extends R> combiner, boolean delayError, int bufferSize, ObservableConsumable<? extends T>... sources) {, +    public static <T, R> Observable<R> combineLatest(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super Object[], ? extends R> combiner) {, +    public static <T, R> Observable<R> combineLatest(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super Object[], ? extends R> combiner, boolean delayError) {, +    public static <T, R> Observable<R> combineLatest(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super Object[], ? extends R> combiner, boolean delayError, int bufferSize) {, +    public static <T, R> Observable<R> combineLatest(ObservableConsumable<? extends T>[] sources, Function<? super Object[], ? extends R> combiner) {, +    public static <T, R> Observable<R> combineLatest(ObservableConsumable<? extends T>[] sources, Function<? super Object[], ? extends R> combiner, boolean delayError) {, +    public static <T, R> Observable<R> combineLatest(ObservableConsumable<? extends T>[] sources, Function<? super Object[], ? extends R> combiner, boolean delayError, int bufferSize) {, +            ObservableConsumable<? extends T1> p1, ObservableConsumable<? extends T2> p2, , +            ObservableConsumable<? extends T1> p1, ObservableConsumable<? extends T2> p2, , +            ObservableConsumable<? extends T3> p3, , +            ObservableConsumable<? extends T1> p1, ObservableConsumable<? extends T2> p2, , +            ObservableConsumable<? extends T3> p3, ObservableConsumable<? extends T4> p4,, +            ObservableConsumable<? extends T1> p1, ObservableConsumable<? extends T2> p2, , +            ObservableConsumable<? extends T3> p3, ObservableConsumable<? extends T4> p4,, +            ObservableConsumable<? extends T5> p5,, +            ObservableConsumable<? extends T1> p1, ObservableConsumable<? extends T2> p2, , +            ObservableConsumable<? extends T3> p3, ObservableConsumable<? extends T4> p4,, +            ObservableConsumable<? extends T5> p5, ObservableConsumable<? extends T6> p6,, +            ObservableConsumable<? extends T1> p1, ObservableConsumable<? extends T2> p2, , +            ObservableConsumable<? extends T3> p3, ObservableConsumable<? extends T4> p4,, +            ObservableConsumable<? extends T5> p5, ObservableConsumable<? extends T6> p6,, +            ObservableConsumable<? extends T7> p7,, +            ObservableConsumable<? extends T1> p1, ObservableConsumable<? extends T2> p2, , +            ObservableConsumable<? extends T3> p3, ObservableConsumable<? extends T4> p4,, +            ObservableConsumable<? extends T5> p5, ObservableConsumable<? extends T6> p6,, +            ObservableConsumable<? extends T7> p7, ObservableConsumable<? extends T8> p8,, +            ObservableConsumable<? extends T1> p1, ObservableConsumable<? extends T2> p2, , +            ObservableConsumable<? extends T3> p3, ObservableConsumable<? extends T4> p4,, +            ObservableConsumable<? extends T5> p5, ObservableConsumable<? extends T6> p6,, +            ObservableConsumable<? extends T7> p7, ObservableConsumable<? extends T8> p8,, +            ObservableConsumable<? extends T9> p9,, +    public static <T> Observable<T> concat(int prefetch, Iterable<? extends ObservableConsumable<? extends T>> sources) {, +    public static <T> Observable<T> concat(Iterable<? extends ObservableConsumable<? extends T>> sources) {, +    public static final <T> Observable<T> concat(ObservableConsumable<? extends ObservableConsumable<? extends T>> sources) {, +    public static final <T> Observable<T> concat(ObservableConsumable<? extends ObservableConsumable<? extends T>> sources, int bufferSize) {, +        Objects.requireNonNull(sources, "sources is null");, +        return new NbpOnSubscribeLift<T, ObservableConsumable<? extends T>>(sources, new NbpOperatorConcatMap(Functions.identity(), bufferSize));, +    public static <T> Observable<T> concat(ObservableConsumable<? extends T> p1, ObservableConsumable<? extends T> p2) {, +            ObservableConsumable<? extends T> p1, ObservableConsumable<? extends T> p2,, +            ObservableConsumable<? extends T> p3) {, +            ObservableConsumable<? extends T> p1, ObservableConsumable<? extends T> p2,, +            ObservableConsumable<? extends T> p3, ObservableConsumable<? extends T> p4) {, +            ObservableConsumable<? extends T> p1, ObservableConsumable<? extends T> p2, , +            ObservableConsumable<? extends T> p3, ObservableConsumable<? extends T> p4,, +            ObservableConsumable<? extends T> p5, +            ObservableConsumable<? extends T> p1, ObservableConsumable<? extends T> p2, , +            ObservableConsumable<? extends T> p3, ObservableConsumable<? extends T> p4,, +            ObservableConsumable<? extends T> p5, ObservableConsumable<? extends T> p6, +            ObservableConsumable<? extends T> p1, ObservableConsumable<? extends T> p2,, +            ObservableConsumable<? extends T> p3, ObservableConsumable<? extends T> p4,, +            ObservableConsumable<? extends T> p5, ObservableConsumable<? extends T> p6,, +            ObservableConsumable<? extends T> p7, +            ObservableConsumable<? extends T> p1, ObservableConsumable<? extends T> p2, , +            ObservableConsumable<? extends T> p3, ObservableConsumable<? extends T> p4,, +            ObservableConsumable<? extends T> p5, ObservableConsumable<? extends T> p6,, +            ObservableConsumable<? extends T> p7, ObservableConsumable<? extends T> p8, +            ObservableConsumable<? extends T> p1, ObservableConsumable<? extends T> p2, , +            ObservableConsumable<? extends T> p3, ObservableConsumable<? extends T> p4,, +            ObservableConsumable<? extends T> p5, ObservableConsumable<? extends T> p6,, +            ObservableConsumable<? extends T> p7, ObservableConsumable<? extends T> p8,, +            ObservableConsumable<? extends T> p9, +    public static <T> Observable<T> concatArray(int prefetch, ObservableConsumable<? extends T>... sources) {, +    public static <T> Observable<T> concatArray(ObservableConsumable<? extends T>... sources) {, +            return wrap((ObservableConsumable<T>)sources[0]);, +        return new ObservableWrapper<T>(onSubscribe);, +    }, +    , +    public static <T> Observable<T> wrap(ObservableConsumable<T> onSubscribe) {, +        Objects.requireNonNull(onSubscribe, "onSubscribe is null");, +        // TODO plugin wrapper?, +        if (onSubscribe instanceof Observable) {, +            return (Observable<T>)onSubscribe;, +        }, +    public static <T> Observable<T> defer(Supplier<? extends ObservableConsumable<? extends T>> supplier) {, +    public static <T> Observable<T> merge(int maxConcurrency, int bufferSize, Iterable<? extends ObservableConsumable<? extends T>> sources) {, +    public static <T> Observable<T> merge(int maxConcurrency, int bufferSize, ObservableConsumable<? extends T>... sources) {, +    public static <T> Observable<T> merge(int maxConcurrency, ObservableConsumable<? extends T>... sources) {, +    public static <T> Observable<T> merge(Iterable<? extends ObservableConsumable<? extends T>> sources) {, +    public static <T> Observable<T> merge(Iterable<? extends ObservableConsumable<? extends T>> sources, int maxConcurrency) {, +    public static <T> Observable<T> merge(ObservableConsumable<? extends ObservableConsumable<? extends T>> sources) {, +        return new NbpOnSubscribeLift(sources, new NbpOperatorFlatMap(Functions.identity(), false, Integer.MAX_VALUE, bufferSize()));, +    public static <T> Observable<T> merge(ObservableConsumable<? extends ObservableConsumable<? extends T>> sources, int maxConcurrency) {, +        return new NbpOnSubscribeLift(sources, new NbpOperatorFlatMap(Functions.identity(), false, maxConcurrency, bufferSize()));, +    public static <T> Observable<T> merge(ObservableConsumable<? extends T> p1, ObservableConsumable<? extends T> p2) {, +    public static <T> Observable<T> merge(ObservableConsumable<? extends T> p1, ObservableConsumable<? extends T> p2, Observable<? extends T> p3) {, +            ObservableConsumable<? extends T> p1, ObservableConsumable<? extends T> p2, , +            ObservableConsumable<? extends T> p3, ObservableConsumable<? extends T> p4) {, +    public static <T> Observable<T> merge(ObservableConsumable<? extends T>... sources) {, +    public static <T> Observable<T> mergeDelayError(boolean delayErrors, Iterable<? extends ObservableConsumable<? extends T>> sources) {, +    public static <T> Observable<T> mergeDelayError(int maxConcurrency, int bufferSize, Iterable<? extends ObservableConsumable<? extends T>> sources) {, +    public static <T> Observable<T> mergeDelayError(int maxConcurrency, int bufferSize, ObservableConsumable<? extends T>... sources) {, +    public static <T> Observable<T> mergeDelayError(int maxConcurrency, Iterable<? extends ObservableConsumable<? extends T>> sources) {, +    public static <T> Observable<T> mergeDelayError(int maxConcurrency, ObservableConsumable<? extends T>... sources) {, +    public static <T> Observable<T> mergeDelayError(ObservableConsumable<? extends ObservableConsumable<? extends T>> sources) {, +        return new NbpOnSubscribeLift(sources, new NbpOperatorFlatMap(Functions.identity(), true, Integer.MAX_VALUE, bufferSize()));]