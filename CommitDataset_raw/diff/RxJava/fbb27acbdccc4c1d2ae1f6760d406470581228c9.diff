[+++ b/rxjava-core/src/main/java/rx/operators/OperationTakeWhile.java, +import rx.subjects.PublishSubject;, +            PublishSubject<Integer> s = PublishSubject.create();, +++ b/rxjava-core/src/main/java/rx/operators/OperationTakeWhile.java, +import rx.subjects.PublishSubject;, +            PublishSubject<Integer> s = PublishSubject.create();, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMulticast.java, +import rx.subjects.PublishSubject;, +                    PublishSubject.<String>create());, +                    PublishSubject.<String>create());, +                    PublishSubject.<String>create());, +++ b/rxjava-core/src/main/java/rx/operators/OperationTakeWhile.java, +import rx.subjects.PublishSubject;, +            PublishSubject<Integer> s = PublishSubject.create();, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMulticast.java, +import rx.subjects.PublishSubject;, +                    PublishSubject.<String>create());, +                    PublishSubject.<String>create());, +                    PublishSubject.<String>create());, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperationTakeWhile.java, +import rx.subjects.PublishSubject;, +            PublishSubject<Integer> s = PublishSubject.create();, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMulticast.java, +import rx.subjects.PublishSubject;, +                    PublishSubject.<String>create());, +                    PublishSubject.<String>create());, +                    PublishSubject.<String>create());, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.subjects;, +, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicReference;, +, +import junit.framework.Assert;, +, +import org.junit.Test;, +import org.mockito.Mockito;, +, +import rx.Notification;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.util.AtomicObservableSubscription;, +import rx.util.SynchronizedObserver;, +import rx.util.functions.Action1;, +import rx.util.functions.Func0;, +import rx.util.functions.Func1;, +, +/**, + * Subject that publishes a single event to each {@link Observer} that has subscribed. , + * <p>, + * Example usage:, + * <p>, + * <pre> {@code, + , +  PublishSubject<Object> subject = PublishSubject.create();, +  // observer1 will receive all onNext events, +  subject.subscribe(observer1);, +  subject.onNext("one");, +  subject.onNext("two");, +  // observer2 will only receive "three" and onCompleted, +  subject.subscribe(observer2);, +  subject.onNext("three");, +  subject.onCompleted();, + , +  } </pre>, + * , + * @param <T>, + */, +public class PublishSubject<T> extends Subject<T, T> {, +    public static <T> PublishSubject<T> create() {, +        final ConcurrentHashMap<Subscription, Observer<T>> observers = new ConcurrentHashMap<Subscription, Observer<T>>();, +, +        Func1<Observer<T>, Subscription> onSubscribe = new Func1<Observer<T>, Subscription>() {, +            @Override, +            public Subscription call(Observer<T> observer) {, +                final AtomicObservableSubscription subscription = new AtomicObservableSubscription();]