[+++ b/rxjava-core/src/main/java/rx/operators/OperationAmb.java, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +public final class OperationAmb<T> implements OnSubscribe<T>{, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7, Observable<? extends T> o8) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7, Observable<? extends T> o8, Observable<? extends T> o9) {, +    public static <T> OnSubscribe<T> amb(final Iterable<? extends Observable<? extends T>> sources) {, +        return new OperationAmb<T>(sources);, +    private static final class AmbSubscriber<T> extends Subscriber<T> {, +        private AmbSubscriber(Subscriber<? super T> observer, int index, AtomicInteger choice) {, +                unsubscribe();, +                unsubscribe();, +                unsubscribe();, +    private final Iterable<? extends Observable<? extends T>> sources;, +, +    private OperationAmb(Iterable<? extends Observable<? extends T>> sources) {, +        this.sources = sources;, +    }, +, +    @Override, +    public void call(Subscriber<? super T> subscriber) {, +        AtomicInteger choice = new AtomicInteger(AmbSubscriber.NONE);, +        int index = 0;, +        for (Observable<? extends T> source : sources) {, +            if (subscriber.isUnsubscribed()) {, +                break;, +            }, +            AmbSubscriber<T> ambSubscriber = new AmbSubscriber<T>(subscriber, index, choice);, +            subscriber.add(ambSubscriber);, +            source.subscribe(ambSubscriber);, +            index++;, +        }, +    }, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationAmb.java, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +public final class OperationAmb<T> implements OnSubscribe<T>{, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7, Observable<? extends T> o8) {, +    public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7, Observable<? extends T> o8, Observable<? extends T> o9) {, +    public static <T> OnSubscribe<T> amb(final Iterable<? extends Observable<? extends T>> sources) {, +        return new OperationAmb<T>(sources);, +    private static final class AmbSubscriber<T> extends Subscriber<T> {, +        private AmbSubscriber(Subscriber<? super T> observer, int index, AtomicInteger choice) {, +                unsubscribe();, +                unsubscribe();, +                unsubscribe();, +    private final Iterable<? extends Observable<? extends T>> sources;, +, +    private OperationAmb(Iterable<? extends Observable<? extends T>> sources) {, +        this.sources = sources;, +    }, +, +    @Override, +    public void call(Subscriber<? super T> subscriber) {, +        AtomicInteger choice = new AtomicInteger(AmbSubscriber.NONE);, +        int index = 0;, +        for (Observable<? extends T> source : sources) {, +            if (subscriber.isUnsubscribed()) {, +                break;, +            }, +            AmbSubscriber<T> ambSubscriber = new AmbSubscriber<T>(subscriber, index, choice);, +            subscriber.add(ambSubscriber);, +            source.subscribe(ambSubscriber);, +            index++;, +        }, +    }, +, +++ b/rxjava-core/src/test/java/rx/operators/OperationAmbTest.java, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static rx.operators.OperationAmb.amb;, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +        return Observable.create(new OnSubscribe<String>() {, +            public void call(final Subscriber<? super String> subscriber) {, +                subscriber.add(parentSubscription);, +                            subscriber.onNext(value);, +                            subscriber.onCompleted();, +                            subscriber.onError(e);, +        IOException expectedException = new IOException(, +                "2", "22", "222", "2222" }, 1000, expectedException);, +        inOrder.verify(observer, times(1)).onError(expectedException);]