[+++ b/src/main/java/rx/Observable.java, +     * Returns an Observable that emits {@code initialValue} followed by the results of invoking a specified, +     * selector on items emitted by a {@link ConnectableObservable} that shares a single subscription to the, +     * source Observable., +     * <p>, +     * <img width="640" height="510" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/publishConnect.if.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code publish} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param <R>, +     *            the type of items emitted by the resulting Observable, +     * @param selector, +     *            a function that can use the multicasted source sequence as many times as needed, without, +     *            causing multiple subscriptions to the source Observable. Subscribers to the source will, +     *            receive all notifications of the source from the time of the subscription forward, +     * @param initialValue, +     *            the initial value of the underlying {@link BehaviorSubject}, +     * @return an Observable that emits {@code initialValue} followed by the results of invoking the selector, +     *         on a {@link ConnectableObservable} that shares a single subscription to the underlying Observable, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators#observablepublish-and-observablemulticast">RxJava wiki: publish</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/system.reactive.linq.observable.publish.aspx">MSDN: Observable.Publish</a>, +     */, +    public final <R> Observable<R> publish(Func1<? super Observable<T>, ? extends Observable<R>> selector, final T initialValue) {, +        return concatWith(just(initialValue)).publish(selector);, +    }, +, +    /**, +     * Returns a {@link ConnectableObservable} that emits {@code initialValue} followed by the items emitted by, +     * the source Observable. A Connectable Observable resembles an ordinary Observable, except that it does not, +     * begin emitting items when it is subscribed to, but only when its {@code connect} method is called., +     * <p>, +     * <img width="640" height="510" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/publishConnect.i.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code publish} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param initialValue, +     *            the initial value to be emitted by the resulting Observable, +     * @return a {@link ConnectableObservable} that shares a single subscription to the underlying Observable, +     *         and starts with {@code initialValue}, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators#observablepublish-and-observablemulticast">RxJava wiki: publish</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/system.reactive.linq.observable.publish.aspx">MSDN: Observable.Publish</a>, +     */, +    public final ConnectableObservable<T> publish(final T initialValue) {, +        return concatWith(just(initialValue)).publish();, +    }, +, +    /**, +     * Returns a {@link ConnectableObservable} that emits only the last item emitted by the source Observable., +     * A Connectable Observable resembles an ordinary Observable, except that it does not begin emitting items, +     * when it is subscribed to, but only when its {@code connect} method is called. , +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/publishLast.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure Support:</b></dt>, +     *  <dd>This operator does not support backpressure because by intent it is skipping all values except the, +     *      last.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code publishLast} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @return a {@link ConnectableObservable} that emits only the last item emitted by the source Observable, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators#observablepublishlast">RxJava wiki: publishLast</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/system.reactive.linq.observable.publishlast.aspx">MSDN: Observable.PublishLast</a>, +     */, +    public final ConnectableObservable<T> publishLast() {, +        return takeLast(1).publish();, +    }, +, +    /**, +     * Returns an Observable that emits an item that results from invoking a specified selector on the last item, +     * emitted by a {@link ConnectableObservable} that shares a single subscription to the source Observable., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/publishLast.f.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure Support:</b></dt>, +     *  <dd>This operator does not support backpressure because by intent it is skipping all values except the, +     *      last.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code publishLast} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param <R>, +     *            the type of items emitted by the resulting Observable, +     * @param selector, +     *            a function that can use the multicasted source sequence as many times as needed, without, +     *            causing multiple subscriptions to the source Observable. Subscribers to the source will only, +     *            receive the last item emitted by the source., +     * @return an Observable that emits an item that is the result of invoking the selector on a {@link ConnectableObservable} that shares a single subscription to the source Observable, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators#observablepublishlast">RxJava wiki: publishLast</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/system.reactive.linq.observable.publishlast.aspx">MSDN: Observable.PublishLast</a>, +     */, +    public final <R> Observable<R> publishLast(Func1<? super Observable<T>, ? extends Observable<R>> selector) {, +        return takeLast(1).publish(selector);, +    }, +, +    /**]