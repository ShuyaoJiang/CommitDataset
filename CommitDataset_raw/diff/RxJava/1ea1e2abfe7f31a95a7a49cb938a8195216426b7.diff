[+++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableFlatMap.java, +                        U o = svq.poll();, +                        if (q != null) {, +                                U o;, +                                    j++;, +                                    if (j == n) {, +                                        j = 0;, +                                    }, +, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableFlatMap.java, +                        U o = svq.poll();, +                        if (q != null) {, +                                U o;, +                                    j++;, +                                    if (j == n) {, +                                        j = 0;, +                                    }, +, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableFlatMapTest.java, +import io.reactivex.disposables.*;, +import io.reactivex.subjects.*;, +, +    @Test, +    public void fusedSourceCrashResumeWithNextSource() {, +        final UnicastSubject<Integer> fusedSource = UnicastSubject.create();, +        TestObserver<Integer> to = new TestObserver<Integer>();, +, +        ObservableFlatMap.MergeObserver<Integer, Integer> merger =, +                new ObservableFlatMap.MergeObserver<Integer, Integer>(to, new Function<Integer, Observable<Integer>>() {, +                    @Override, +                    public Observable<Integer> apply(Integer t), +                            throws Exception {, +                        if (t == 0) {, +                            return fusedSource, +                                    .map(new Function<Integer, Integer>() {, +                                        @Override, +                                        public Integer apply(Integer v), +                                                throws Exception { throw new TestException(); }, +                                    }), +                                    .compose(TestHelper.<Integer>observableStripBoundary());, +                        }, +                        return Observable.range(10 * t, 5);, +                    }, +                }, true, Integer.MAX_VALUE, 128);, +, +        merger.onSubscribe(Disposables.empty());, +        merger.getAndIncrement();, +, +        merger.onNext(0);, +        merger.onNext(1);, +        merger.onNext(2);, +, +        assertTrue(fusedSource.hasObservers());, +, +        fusedSource.onNext(-1);, +, +        merger.drainLoop();, +, +        to.assertValuesOnly(10, 11, 12, 13, 14, 20, 21, 22, 23, 24);, +    }]