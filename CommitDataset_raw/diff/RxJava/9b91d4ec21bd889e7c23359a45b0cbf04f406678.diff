[+++ b/src/main/java/io/reactivex/internal/disposables/DisposableHelper.java, +    /**, +     * Checks if the given Disposable is the common {@link #DISPOSED} enum value., +     * @param d the disposable to check, +     * @return true if d is {@link #DISPOSED}, +     */, +    /**, +     * Atomically sets the field and disposes the old contents., +     * @param field the target field, +     * @param d the new Disposable to set, +     * @return true if successful, false if the field contains the {@link #DISPOSED} instance., +     */, +    /**, +     * Atomically tries to set the given Disposable on the field if it is null or disposes it if, +     * the field contains {@link #DISPOSED}., +     * @param field the target field, +     * @param d the disposable to set, +     * @return true if successful, false otherwise, +     */, +    public static boolean trySet(AtomicReference<Disposable> field, Disposable d) {, +        if (!field.compareAndSet(null, d)) {, +            if (field.get() == DISPOSED) {, +                d.dispose();, +            }, +            return false;, +        }, +        return true;, +    }, +, +++ b/src/main/java/io/reactivex/internal/disposables/DisposableHelper.java, +    /**, +     * Checks if the given Disposable is the common {@link #DISPOSED} enum value., +     * @param d the disposable to check, +     * @return true if d is {@link #DISPOSED}, +     */, +    /**, +     * Atomically sets the field and disposes the old contents., +     * @param field the target field, +     * @param d the new Disposable to set, +     * @return true if successful, false if the field contains the {@link #DISPOSED} instance., +     */, +    /**, +     * Atomically tries to set the given Disposable on the field if it is null or disposes it if, +     * the field contains {@link #DISPOSED}., +     * @param field the target field, +     * @param d the disposable to set, +     * @return true if successful, false otherwise, +     */, +    public static boolean trySet(AtomicReference<Disposable> field, Disposable d) {, +        if (!field.compareAndSet(null, d)) {, +            if (field.get() == DISPOSED) {, +                d.dispose();, +            }, +            return false;, +        }, +        return true;, +    }, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimer.java, +        TimerSubscriber ios = new TimerSubscriber(s);, +    static final class TimerSubscriber extends AtomicReference<Disposable>, +        TimerSubscriber(Subscriber<? super Long> actual) {, +                    lazySet(EmptyDisposable.INSTANCE);, +                    lazySet(EmptyDisposable.INSTANCE);, +            DisposableHelper.trySet(this, d);, +++ b/src/main/java/io/reactivex/internal/disposables/DisposableHelper.java, +    /**, +     * Checks if the given Disposable is the common {@link #DISPOSED} enum value., +     * @param d the disposable to check, +     * @return true if d is {@link #DISPOSED}, +     */, +    /**, +     * Atomically sets the field and disposes the old contents., +     * @param field the target field, +     * @param d the new Disposable to set, +     * @return true if successful, false if the field contains the {@link #DISPOSED} instance., +     */, +    /**, +     * Atomically tries to set the given Disposable on the field if it is null or disposes it if, +     * the field contains {@link #DISPOSED}., +     * @param field the target field, +     * @param d the disposable to set, +     * @return true if successful, false otherwise, +     */, +    public static boolean trySet(AtomicReference<Disposable> field, Disposable d) {, +        if (!field.compareAndSet(null, d)) {, +            if (field.get() == DISPOSED) {, +                d.dispose();, +            }, +            return false;, +        }, +        return true;, +    }, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimer.java, +        TimerSubscriber ios = new TimerSubscriber(s);, +    static final class TimerSubscriber extends AtomicReference<Disposable>, +        TimerSubscriber(Subscriber<? super Long> actual) {, +                    lazySet(EmptyDisposable.INSTANCE);, +                    lazySet(EmptyDisposable.INSTANCE);]