[+++ b/rxjava-core/src/main/java/rx/exceptions/Exceptions.java, +     * Throws a particular {@code Throwable} only if it belongs to a set of "fatal" error varieties. These, +     * varieties are as follows:, +     * <ul>, +     * <li>{@link OnErrorNotImplementedException}</li>, +     * <li>{@link OnErrorFailedException}</li>, +     * <li>{@code StackOverflowError}</li>, +     * <li>{@code VirtualMachineError}</li>, +     * <li>{@code ThreadDeath}</li>, +     * <li>{@code LinkageError}</li>, +     * </ul>, +     * This can be useful if you are writing an operator that calls user-supplied code, and you want to, +     * notify subscribers of errors encountered in that code by calling their {@code onError} methods, but only, +     * if the errors are not so catastrophic that such a call would be futile, in which case you simply want to, +     * rethrow the error., +     *, +     * @param t, +     *         the {@code Throwable} to test and perhaps throw, +     * @see <a href="https://github.com/Netflix/RxJava/issues/748#issuecomment-32471495">RxJava: StackOverflowError is swallowed (Issue #748)</a>, +     * Adds a {@code Throwable} to a causality-chain of Throwables, as an additional cause (if it does not, +     * already appear in the chain among the causes)., +     *, +     * @param e, +     *         the {@code Throwable} at the head of the causality chain, +     * @param cause, +     *         the {@code Throwable} you want to add as a cause of the chain, +     * Get the {@code Throwable} at the end of the causality-chain for a particular {@code Throwable}, +     *, +     * @param e, +     *         the {@code Throwable} whose final cause you are curious about, +     * @return the last {@code Throwable} in the causality-chain of {@code e} (or a "Stack too deep to get, +     *         final cause" {@code RuntimeException} if the chain is too long to traverse), +++ b/rxjava-core/src/main/java/rx/exceptions/Exceptions.java, +     * Throws a particular {@code Throwable} only if it belongs to a set of "fatal" error varieties. These, +     * varieties are as follows:, +     * <ul>, +     * <li>{@link OnErrorNotImplementedException}</li>, +     * <li>{@link OnErrorFailedException}</li>, +     * <li>{@code StackOverflowError}</li>, +     * <li>{@code VirtualMachineError}</li>, +     * <li>{@code ThreadDeath}</li>, +     * <li>{@code LinkageError}</li>, +     * </ul>, +     * This can be useful if you are writing an operator that calls user-supplied code, and you want to, +     * notify subscribers of errors encountered in that code by calling their {@code onError} methods, but only, +     * if the errors are not so catastrophic that such a call would be futile, in which case you simply want to, +     * rethrow the error., +     *, +     * @param t, +     *         the {@code Throwable} to test and perhaps throw, +     * @see <a href="https://github.com/Netflix/RxJava/issues/748#issuecomment-32471495">RxJava: StackOverflowError is swallowed (Issue #748)</a>, +     * Adds a {@code Throwable} to a causality-chain of Throwables, as an additional cause (if it does not, +     * already appear in the chain among the causes)., +     *, +     * @param e, +     *         the {@code Throwable} at the head of the causality chain, +     * @param cause, +     *         the {@code Throwable} you want to add as a cause of the chain, +     * Get the {@code Throwable} at the end of the causality-chain for a particular {@code Throwable}, +     *, +     * @param e, +     *         the {@code Throwable} whose final cause you are curious about, +     * @return the last {@code Throwable} in the causality-chain of {@code e} (or a "Stack too deep to get, +     *         final cause" {@code RuntimeException} if the chain is too long to traverse), +++ b/rxjava-core/src/main/java/rx/exceptions/OnErrorThrowable.java, + * Represents a {@code Throwable} that an {@code Observable} might notify its subscribers of, but that then can, + * be handled by an operator that is designed to recover from or react appropriately to such an error. You can, + * recover more information from an {@code OnErrorThrowable} than is found in a typical {@code Throwable}, such, + * as the item the {@code Observable} was trying to emit at the time the error was encountered., +     * Get the value associated with this {@code OnErrorThrowable}, +     *, +     * @return the value associated with this {@code OnErrorThrowable} (or {@code null} if there is none), +     * Adds the given item as the final cause of the given {@code Throwable}, wrapped in {@code OnNextValue}, +     * (which extends {@code RuntimeException})., +     *          the item you want to add to {@code e} as the cause of the {@code Throwable}, +     * Represents an exception that was encountered while trying to emit an item from an Observable, and, +     * tries to preserve that item for future use and/or reporting., +         * Create an {@code OnNextValue} exception and include in its error message a string representation of, +         * the item that was intended to be emitted at the time the exception was handled., +         *, +         * @param value, +         *         the item that the Observable was trying to emit at the time of the exception, +         * Retrieve the item that the Observable was trying to emit at the time this exception occurred., +         *, +         * @return the item that the Observable was trying to emit at the time of the exception]