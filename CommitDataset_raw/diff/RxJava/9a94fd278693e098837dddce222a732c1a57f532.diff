[+++ b/rxjava-core/src/main/java/rx/schedulers/CurrentThreadScheduler.java, +import java.util.concurrent.atomic.AtomicLong;, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.MultipleAssignmentSubscription;, +    private static final AtomicLong counter = new AtomicLong(0);, +        // immediately move to the InnerCurrentThreadScheduler, +        InnerCurrentThreadScheduler innerScheduler = new InnerCurrentThreadScheduler();, +        enqueue(innerScheduler, discardableAction, now());, +        return innerScheduler;, +        // immediately move to the InnerCurrentThreadScheduler, +        InnerCurrentThreadScheduler innerScheduler = new InnerCurrentThreadScheduler();, +        enqueue(innerScheduler, discardableAction, execTime);, +    private static void enqueue(Scheduler scheduler, DiscardableAction<?> action, long execTime) {, +                queue.poll().action.call(scheduler);, +    private static class InnerCurrentThreadScheduler extends Scheduler implements Subscription {, +        private final MultipleAssignmentSubscription childSubscription = new MultipleAssignmentSubscription();, +, +        @Override, +        public <T> Subscription schedule(T state, Func2<? super Scheduler, ? super T, ? extends Subscription> action) {, +            DiscardableAction<T> discardableAction = new DiscardableAction<T>(state, action);, +            childSubscription.set(discardableAction);, +            enqueue(this, discardableAction, now());, +            return childSubscription;, +        }, +, +        @Override, +        public <T> Subscription schedule(T state, Func2<? super Scheduler, ? super T, ? extends Subscription> action, long delayTime, TimeUnit unit) {, +            long execTime = now() + unit.toMillis(delayTime);, +, +            DiscardableAction<T> discardableAction = new DiscardableAction<T>(state, action);, +            childSubscription.set(discardableAction);, +            enqueue(this, discardableAction, execTime);, +            return childSubscription;, +        }, +, +        @Override, +        public void unsubscribe() {, +            childSubscription.unsubscribe();, +        }, +, +    }, +, +    /**, +     * Use time to sort items so delayed actions are sorted to their appropriate position in the queue., +     */, +        final Long count; // In case if time between enqueueing took less than 1ms, +        private TimedAction(DiscardableAction<?> action, Long execTime, Long count) {, +++ b/rxjava-core/src/main/java/rx/schedulers/CurrentThreadScheduler.java, +import java.util.concurrent.atomic.AtomicLong;, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.MultipleAssignmentSubscription;, +    private static final AtomicLong counter = new AtomicLong(0);, +        // immediately move to the InnerCurrentThreadScheduler, +        InnerCurrentThreadScheduler innerScheduler = new InnerCurrentThreadScheduler();, +        enqueue(innerScheduler, discardableAction, now());, +        return innerScheduler;, +        // immediately move to the InnerCurrentThreadScheduler, +        InnerCurrentThreadScheduler innerScheduler = new InnerCurrentThreadScheduler();, +        enqueue(innerScheduler, discardableAction, execTime);, +    private static void enqueue(Scheduler scheduler, DiscardableAction<?> action, long execTime) {, +                queue.poll().action.call(scheduler);, +    private static class InnerCurrentThreadScheduler extends Scheduler implements Subscription {, +        private final MultipleAssignmentSubscription childSubscription = new MultipleAssignmentSubscription();, +, +        @Override, +        public <T> Subscription schedule(T state, Func2<? super Scheduler, ? super T, ? extends Subscription> action) {, +            DiscardableAction<T> discardableAction = new DiscardableAction<T>(state, action);, +            childSubscription.set(discardableAction);, +            enqueue(this, discardableAction, now());, +            return childSubscription;, +        }, +, +        @Override, +        public <T> Subscription schedule(T state, Func2<? super Scheduler, ? super T, ? extends Subscription> action, long delayTime, TimeUnit unit) {, +            long execTime = now() + unit.toMillis(delayTime);, +, +            DiscardableAction<T> discardableAction = new DiscardableAction<T>(state, action);, +            childSubscription.set(discardableAction);, +            enqueue(this, discardableAction, execTime);, +            return childSubscription;, +        }, +, +        @Override, +        public void unsubscribe() {, +            childSubscription.unsubscribe();, +        }, +, +    }, +, +    /**, +     * Use time to sort items so delayed actions are sorted to their appropriate position in the queue., +     */, +        final Long count; // In case if time between enqueueing took less than 1ms, +        private TimedAction(DiscardableAction<?> action, Long execTime, Long count) {, +++ b/rxjava-core/src/test/java/rx/schedulers/AbstractSchedulerConcurrencyTests.java, +import rx.Observable;, +import rx.Observer;, +import rx.util.functions.Func1;, +    /**, +     * Bug report: https://github.com/Netflix/RxJava/issues/431]