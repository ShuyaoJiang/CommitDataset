[+++ b/rxjava-core/src/main/java/rx/Observable.java, +    public final <R> ConnectableObservable<R> multicast(Subject<? super T, ? extends R> subject) {, +        return new OperatorMulticast<T, R>(this, subject);, +        return new OperatorMulticast<T, T>(this, PublishSubject.<T> create());, +    public final ConnectableObservable<T> publish(T initialValue) {, +        return new OperatorMulticast<T, T>(this, BehaviorSubject.<T> create(initialValue));, +        return new OperatorMulticast<T, T>(this, AsyncSubject.<T> create());, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T> create());, +    public final ConnectableObservable<T> replay(int bufferSize) {, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T>createWithSize(bufferSize));, +    public final ConnectableObservable<T> replay(int bufferSize, long time, TimeUnit unit, Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T>createWithTimeAndSize(time, unit, bufferSize, scheduler));, +    public final ConnectableObservable<T> replay(int bufferSize, Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this,, +                OperatorReplay.createScheduledSubject(, +                        ReplaySubject.<T>createWithSize(bufferSize), scheduler));, +    public final ConnectableObservable<T> replay(long time, TimeUnit unit, Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T>createWithTime(time, unit, scheduler));, +    public final ConnectableObservable<T> replay(Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this, OperatorReplay.createScheduledSubject(ReplaySubject.<T> create(), scheduler));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public final <R> ConnectableObservable<R> multicast(Subject<? super T, ? extends R> subject) {, +        return new OperatorMulticast<T, R>(this, subject);, +        return new OperatorMulticast<T, T>(this, PublishSubject.<T> create());, +    public final ConnectableObservable<T> publish(T initialValue) {, +        return new OperatorMulticast<T, T>(this, BehaviorSubject.<T> create(initialValue));, +        return new OperatorMulticast<T, T>(this, AsyncSubject.<T> create());, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T> create());, +    public final ConnectableObservable<T> replay(int bufferSize) {, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T>createWithSize(bufferSize));, +    public final ConnectableObservable<T> replay(int bufferSize, long time, TimeUnit unit, Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T>createWithTimeAndSize(time, unit, bufferSize, scheduler));, +    public final ConnectableObservable<T> replay(int bufferSize, Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this,, +                OperatorReplay.createScheduledSubject(, +                        ReplaySubject.<T>createWithSize(bufferSize), scheduler));, +    public final ConnectableObservable<T> replay(long time, TimeUnit unit, Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T>createWithTime(time, unit, scheduler));, +    public final ConnectableObservable<T> replay(Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this, OperatorReplay.createScheduledSubject(ReplaySubject.<T> create(), scheduler));, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeMulticastSelector.java, +            Subject<? super TInput, ? extends TIntermediate> subject = subjectFactory.call();, +            , +            connectable = new OperatorMulticast<TInput, TIntermediate>(source, subject);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public final <R> ConnectableObservable<R> multicast(Subject<? super T, ? extends R> subject) {, +        return new OperatorMulticast<T, R>(this, subject);, +        return new OperatorMulticast<T, T>(this, PublishSubject.<T> create());, +    public final ConnectableObservable<T> publish(T initialValue) {, +        return new OperatorMulticast<T, T>(this, BehaviorSubject.<T> create(initialValue));, +        return new OperatorMulticast<T, T>(this, AsyncSubject.<T> create());, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T> create());, +    public final ConnectableObservable<T> replay(int bufferSize) {, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T>createWithSize(bufferSize));, +    public final ConnectableObservable<T> replay(int bufferSize, long time, TimeUnit unit, Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T>createWithTimeAndSize(time, unit, bufferSize, scheduler));, +    public final ConnectableObservable<T> replay(int bufferSize, Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this,, +                OperatorReplay.createScheduledSubject(, +                        ReplaySubject.<T>createWithSize(bufferSize), scheduler));, +    public final ConnectableObservable<T> replay(long time, TimeUnit unit, Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this, ReplaySubject.<T>createWithTime(time, unit, scheduler));, +    public final ConnectableObservable<T> replay(Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this, OperatorReplay.createScheduledSubject(ReplaySubject.<T> create(), scheduler));, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeMulticastSelector.java, +            Subject<? super TInput, ? extends TIntermediate> subject = subjectFactory.call();, +            , +            connectable = new OperatorMulticast<TInput, TIntermediate>(source, subject);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMulticast.java, + * @param <T> the source value type, + * @param <R> the result value type, +    final Subject<? super T, ? extends R> subject;, +    final Object guard = new Object();, +    Subscription subscription;, +    public OperatorMulticast(Observable<? extends T> source, final Subject<? super T, ? extends R> subject) {, +                    subject.unsafeSubscribe(subscriber);, +        this.subject = subject;, +        connection.call(Subscriptions.create(new Action0() {, +            @Override, +            public void call() {, +                Subscription s;, +                    s = subscription;, +                    subscription = null;, +                }, +                if (s != null) {, +                    s.unsubscribe();, +                }, +            }, +        }));, +        Subscriber<T> s = null;, +        synchronized (guard) {, +            if (subscription == null) {, +                s = new Subscriber<T>() {, +                subscription = s;, +            source.unsafeSubscribe(s);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +    public final <R> ConnectableObservable<R> multicast(Subject<? super T, ? extends R> subject) {, +        return new OperatorMulticast<T, R>(this, subject);, +        return new OperatorMulticast<T, T>(this, PublishSubject.<T> create());, +    public final ConnectableObservable<T> publish(T initialValue) {]