[+++ b/src/main/java/io/reactivex/Observable.java, +    /**, +     * Interface to compose observables., +     *, +     * @param <T> the upstream value type, +     * @param <R> the downstream value type, +     */, +    @FunctionalInterface, +    public interface Transformer<T, R> extends Function<Observable<T>, Publisher<? extends R>> {, +        , +    }, +, +, +    public final <R> Observable<R> compose(Transformer<T, R> composer) {, +    public static final <T> Observable<T> just(T v1, T v2) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7, T v8) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7, T v8, T v9) {, +++ b/src/main/java/io/reactivex/Observable.java, +    /**, +     * Interface to compose observables., +     *, +     * @param <T> the upstream value type, +     * @param <R> the downstream value type, +     */, +    @FunctionalInterface, +    public interface Transformer<T, R> extends Function<Observable<T>, Publisher<? extends R>> {, +        , +    }, +, +, +    public final <R> Observable<R> compose(Transformer<T, R> composer) {, +    public static final <T> Observable<T> just(T v1, T v2) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7, T v8) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7, T v8, T v9) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorGroupBy.java, +            for (GroupedUnicast<V, K> e : list) {, +                e.onError(t);, +            }, +            for (GroupedUnicast<V, K> e : list) {, +                e.onComplete();, +            }, +                        a.onNext(v);, +                        , +                queue.clear();, +++ b/src/main/java/io/reactivex/Observable.java, +    /**, +     * Interface to compose observables., +     *, +     * @param <T> the upstream value type, +     * @param <R> the downstream value type, +     */, +    @FunctionalInterface, +    public interface Transformer<T, R> extends Function<Observable<T>, Publisher<? extends R>> {, +        , +    }, +, +, +    public final <R> Observable<R> compose(Transformer<T, R> composer) {, +    public static final <T> Observable<T> just(T v1, T v2) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7, T v8) {, +    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7, T v8, T v9) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorGroupBy.java, +            for (GroupedUnicast<V, K> e : list) {, +                e.onError(t);, +            }, +            for (GroupedUnicast<V, K> e : list) {, +                e.onComplete();, +            }, +                        a.onNext(v);, +                        , +                queue.clear();, +++ b/src/test/java/io/reactivex/CombineLatestTests.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]