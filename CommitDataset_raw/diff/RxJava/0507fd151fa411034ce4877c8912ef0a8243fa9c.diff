[+++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +public final class BackpressureUtils {, +    /** Utility class, no instances. */, +    private BackpressureUtils() {, +        throw new IllegalStateException("No instances!");, +    }, +    public static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(object, current, next)) {, +    }, +    public static long getAndAddRequest(AtomicLong requested, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(current, next)) {, +}, +++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +public final class BackpressureUtils {, +    /** Utility class, no instances. */, +    private BackpressureUtils() {, +        throw new IllegalStateException("No instances!");, +    }, +    public static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(object, current, next)) {, +    }, +    public static long getAndAddRequest(AtomicLong requested, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(current, next)) {, +}, +++ b/src/main/java/rx/internal/operators/OperatorDoOnRequest.java, +        child.add(parent);, +++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +public final class BackpressureUtils {, +    /** Utility class, no instances. */, +    private BackpressureUtils() {, +        throw new IllegalStateException("No instances!");, +    }, +    public static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(object, current, next)) {, +    }, +    public static long getAndAddRequest(AtomicLong requested, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(current, next)) {, +}, +++ b/src/main/java/rx/internal/operators/OperatorDoOnRequest.java, +        child.add(parent);, +++ b/src/main/java/rx/internal/operators/OperatorSingle.java, +    public Subscriber<? super T> call(final Subscriber<? super T> subscriber) {, +        return new Subscriber<T>(subscriber) {, +                    subscriber.onError(new IllegalArgumentException("Sequence contains too many elements"));, +                    // Issue: https://github.com/ReactiveX/RxJava/pull/1527, +                    // Because we cache a value and don't emit now, we need to request another one., +                    request(1);, +                        subscriber.onNext(value);, +                        subscriber.onCompleted();, +                            subscriber.onNext(defaultValue);, +                            subscriber.onCompleted();, +                            subscriber.onError(new NoSuchElementException("Sequence contains no elements"));, +                subscriber.onError(e);, +        };, +++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +public final class BackpressureUtils {, +    /** Utility class, no instances. */, +    private BackpressureUtils() {, +        throw new IllegalStateException("No instances!");, +    }, +    public static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(object, current, next)) {, +    }, +    public static long getAndAddRequest(AtomicLong requested, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(current, next)) {, +}, +++ b/src/main/java/rx/internal/operators/OperatorDoOnRequest.java, +        child.add(parent);, +++ b/src/main/java/rx/internal/operators/OperatorSingle.java, +    public Subscriber<? super T> call(final Subscriber<? super T> subscriber) {, +        return new Subscriber<T>(subscriber) {, +                    subscriber.onError(new IllegalArgumentException("Sequence contains too many elements"));, +                    // Issue: https://github.com/ReactiveX/RxJava/pull/1527, +                    // Because we cache a value and don't emit now, we need to request another one., +                    request(1);, +                        subscriber.onNext(value);, +                        subscriber.onCompleted();, +                            subscriber.onNext(defaultValue);, +                            subscriber.onCompleted();, +                            subscriber.onError(new NoSuchElementException("Sequence contains no elements"));, +                subscriber.onError(e);, +        };, +++ b/src/main/java/rx/observables/AbstractOnSubscribe.java, +import rx.internal.operators.BackpressureUtils;]