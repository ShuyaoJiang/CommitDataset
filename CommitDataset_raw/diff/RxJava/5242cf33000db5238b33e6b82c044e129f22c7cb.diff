[+++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +import io.reactivex.annotations.Experimental;, +     * the given value with respect to null-safe Object.equals., +     * which is equal to the given value with respect to null-safe Object.equals., +     * @param index the position to assert on, +     * @param value the value to expect, +     * @return this, +     * @since 2.1.3 - experimental, +     */, +    @SuppressWarnings("unchecked"), +    @Experimental, +    public final U assertValueAt(int index, T value) {, +        int s = values.size();, +        if (s == 0) {, +            throw fail("No values");, +        }, +, +        if (index >= s) {, +            throw fail("Invalid index: " + index);, +        }, +, +        T v = values.get(index);, +        if (!ObjectHelper.equals(value, v)) {, +            throw fail("Expected: " + valueAndClass(value) + ", Actual: " + valueAndClass(v));, +        }, +        return (U)this;, +    }, +, +    /**, +     * Asserts that this TestObserver/TestSubscriber received an onNext value at the given index, +++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +import io.reactivex.annotations.Experimental;, +     * the given value with respect to null-safe Object.equals., +     * which is equal to the given value with respect to null-safe Object.equals., +     * @param index the position to assert on, +     * @param value the value to expect, +     * @return this, +     * @since 2.1.3 - experimental, +     */, +    @SuppressWarnings("unchecked"), +    @Experimental, +    public final U assertValueAt(int index, T value) {, +        int s = values.size();, +        if (s == 0) {, +            throw fail("No values");, +        }, +, +        if (index >= s) {, +            throw fail("Invalid index: " + index);, +        }, +, +        T v = values.get(index);, +        if (!ObjectHelper.equals(value, v)) {, +            throw fail("Expected: " + valueAndClass(value) + ", Actual: " + valueAndClass(v));, +        }, +        return (U)this;, +    }, +, +    /**, +     * Asserts that this TestObserver/TestSubscriber received an onNext value at the given index, +++ b/src/test/java/io/reactivex/observers/TestObserverTest.java, +    public void assertValueAtIndexEmpty() {, +        TestObserver<Object> ts = new TestObserver<Object>();, +, +        Observable.empty().subscribe(ts);, +, +        thrown.expect(AssertionError.class);, +        thrown.expectMessage("No values");, +        ts.assertValueAt(0, "a");, +    }, +, +    @Test, +    public void assertValueAtIndexMatch() {, +        TestObserver<String> ts = new TestObserver<String>();, +, +        Observable.just("a", "b").subscribe(ts);, +, +        ts.assertValueAt(1, "b");, +    }, +, +    @Test, +    public void assertValueAtIndexNoMatch() {, +        TestObserver<String> ts = new TestObserver<String>();, +, +        Observable.just("a", "b", "c").subscribe(ts);, +, +        thrown.expect(AssertionError.class);, +        thrown.expectMessage("Expected: b (class: String), Actual: c (class: String) (latch = 0, values = 3, errors = 0, completions = 1)");, +        ts.assertValueAt(2, "b");, +    }, +, +    @Test, +    public void assertValueAtIndexInvalidIndex() {, +        TestObserver<String> ts = new TestObserver<String>();, +, +        Observable.just("a", "b").subscribe(ts);, +, +        thrown.expect(AssertionError.class);, +        thrown.expectMessage("Invalid index: 2 (latch = 0, values = 2, errors = 0, completions = 1)");, +        ts.assertValueAt(2, "c");]