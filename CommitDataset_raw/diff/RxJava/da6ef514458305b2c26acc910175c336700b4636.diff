[+++ b/src/main/java/rx/subjects/TestSubject.java, +     * Schedule a call to {@code onCompleted} on TestScheduler., +        onCompleted(0);, +     * @param delayTime, +    public void onCompleted(long delayTime) {, +        }, delayTime, TimeUnit.MILLISECONDS);, +     * Schedule a call to {@code onError} on TestScheduler., +        onError(e, 0);, +     * @param dalayTime, +    public void onError(final Throwable e, long dalayTime) {, +        }, dalayTime, TimeUnit.MILLISECONDS);, +++ b/src/main/java/rx/subjects/TestSubject.java, +     * Schedule a call to {@code onCompleted} on TestScheduler., +        onCompleted(0);, +     * @param delayTime, +    public void onCompleted(long delayTime) {, +        }, delayTime, TimeUnit.MILLISECONDS);, +     * Schedule a call to {@code onError} on TestScheduler., +        onError(e, 0);, +     * @param dalayTime, +    public void onError(final Throwable e, long dalayTime) {, +        }, dalayTime, TimeUnit.MILLISECONDS);, +++ b/src/test/java/rx/subjects/TestSubjectTest.java, +import java.io.IOException;, +, +, +, +    @Test, +    public void testObserverPropagateErrorAfterTriggeringActions() {, +        final IOException e = new IOException();, +        final TestScheduler scheduler = new TestScheduler();, +, +        final TestSubject<Integer> subject = TestSubject.create(scheduler);, +        @SuppressWarnings("unchecked"), +        Observer<Integer> observer = mock(Observer.class);, +        subject.subscribe(observer);, +, +        subject.onError(e);, +        scheduler.triggerActions();, +, +        verify(observer, times(1)).onError(e);, +    }, +, +    @Test, +    public void testObserverPropagateErrorInFutureTimeAfterTriggeringActions() {, +        final IOException e = new IOException();, +        final TestScheduler scheduler = new TestScheduler();, +        scheduler.advanceTimeTo(100, TimeUnit.SECONDS);, +, +        final TestSubject<Integer> subject = TestSubject.create(scheduler);, +        @SuppressWarnings("unchecked"), +        Observer<Integer> observer = mock(Observer.class);, +        subject.subscribe(observer);, +, +        subject.onError(e);, +        scheduler.triggerActions();, +, +        verify(observer, times(1)).onError(e);, +    }, +, +, +, +    @Test, +    public void testObserverPropagateCompletedAfterTriggeringActions() {, +        final TestScheduler scheduler = new TestScheduler();, +, +        final TestSubject<Integer> subject = TestSubject.create(scheduler);, +        @SuppressWarnings("unchecked"), +        Observer<Integer> observer = mock(Observer.class);, +        subject.subscribe(observer);, +, +        subject.onCompleted();, +        scheduler.triggerActions();, +, +        verify(observer, times(1)).onCompleted();, +    }, +, +    @Test, +    public void testObserverPropagateCompletedInFutureTimeAfterTriggeringActions() {, +        final TestScheduler scheduler = new TestScheduler();, +        scheduler.advanceTimeTo(100, TimeUnit.SECONDS);, +, +        final TestSubject<Integer> subject = TestSubject.create(scheduler);, +        @SuppressWarnings("unchecked"), +        Observer<Integer> observer = mock(Observer.class);, +        subject.subscribe(observer);, +, +        subject.onCompleted();, +        scheduler.triggerActions();, +, +        verify(observer, times(1)).onCompleted();, +    }]