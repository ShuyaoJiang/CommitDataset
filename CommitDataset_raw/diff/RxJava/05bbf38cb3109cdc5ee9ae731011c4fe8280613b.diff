[+++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +         ; If they want Func1, give them onSubscribe as well so Observable/create can be, +         ; used seemlessly with rx/fn., +         ~@(if (and (= prefix "rx.util.functions.Func"), +                    (some #{1} arities)), +             `(rx.Observable$OnSubscribeFunc, +                (~'onSubscribe [~'this observer#], +                  (~f-name observer#)))), +, +  This will also implement rx.Observable$OnSubscribeFunc.onSubscribe for use with, +  Observable/create. In this case, the function must take an Observable as its single, +  argument and return a subscription object., +, +    or, to create an Observable:, +, +    (Observable/create (rx/fn [observer], +                         (.onNext observer 10), +                         (.onCompleted observer), +                         (Subscriptions/empty))), +, +  See:, +    rx.lang.clojure.interop/fn*, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +         ; If they want Func1, give them onSubscribe as well so Observable/create can be, +         ; used seemlessly with rx/fn., +         ~@(if (and (= prefix "rx.util.functions.Func"), +                    (some #{1} arities)), +             `(rx.Observable$OnSubscribeFunc, +                (~'onSubscribe [~'this observer#], +                  (~f-name observer#)))), +, +  This will also implement rx.Observable$OnSubscribeFunc.onSubscribe for use with, +  Observable/create. In this case, the function must take an Observable as its single, +  argument and return a subscription object., +, +    or, to create an Observable:, +, +    (Observable/create (rx/fn [observer], +                         (.onNext observer 10), +                         (.onCompleted observer), +                         (Subscriptions/empty))), +, +  See:, +    rx.lang.clojure.interop/fn*, +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +      (is (instance? rx.Observable$OnSubscribeFunc f)), +  (testing "can create an observable", +    (is (= 99, +           (-> (Observable/create (rx/fn [^rx.Observer o], +                                    (.onNext o 99), +                                    (.onCompleted o), +                                    (rx.subscriptions.Subscriptions/empty))), +               (BlockingObservable/single))))), +]