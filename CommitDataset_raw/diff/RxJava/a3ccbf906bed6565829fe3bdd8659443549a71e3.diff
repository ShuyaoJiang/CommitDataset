[+++ b/src/main/java/io/reactivex/Flowable.java, +    @SuppressWarnings("unchecked"), +    public final <R> Flowable<R> compose(FlowableTransformer<? super T, ? extends R> composer) {, +        return fromPublisher(((FlowableTransformer<T, R>) composer).apply(this));, +++ b/src/main/java/io/reactivex/Flowable.java, +    @SuppressWarnings("unchecked"), +    public final <R> Flowable<R> compose(FlowableTransformer<? super T, ? extends R> composer) {, +        return fromPublisher(((FlowableTransformer<T, R>) composer).apply(this));, +++ b/src/main/java/io/reactivex/Maybe.java, +    @SuppressWarnings("unchecked"), +    public final <R> Maybe<R> compose(MaybeTransformer<? super T, ? extends R> transformer) {, +        return wrap(((MaybeTransformer<T, R>) transformer).apply(this));, +++ b/src/main/java/io/reactivex/Flowable.java, +    @SuppressWarnings("unchecked"), +    public final <R> Flowable<R> compose(FlowableTransformer<? super T, ? extends R> composer) {, +        return fromPublisher(((FlowableTransformer<T, R>) composer).apply(this));, +++ b/src/main/java/io/reactivex/Maybe.java, +    @SuppressWarnings("unchecked"), +    public final <R> Maybe<R> compose(MaybeTransformer<? super T, ? extends R> transformer) {, +        return wrap(((MaybeTransformer<T, R>) transformer).apply(this));, +++ b/src/main/java/io/reactivex/Observable.java, +    @SuppressWarnings("unchecked"), +    public final <R> Observable<R> compose(ObservableTransformer<? super T, ? extends R> composer) {, +        return wrap(((ObservableTransformer<T, R>) composer).apply(this));, +++ b/src/main/java/io/reactivex/Flowable.java, +    @SuppressWarnings("unchecked"), +    public final <R> Flowable<R> compose(FlowableTransformer<? super T, ? extends R> composer) {, +        return fromPublisher(((FlowableTransformer<T, R>) composer).apply(this));, +++ b/src/main/java/io/reactivex/Maybe.java, +    @SuppressWarnings("unchecked"), +    public final <R> Maybe<R> compose(MaybeTransformer<? super T, ? extends R> transformer) {, +        return wrap(((MaybeTransformer<T, R>) transformer).apply(this));, +++ b/src/main/java/io/reactivex/Observable.java, +    @SuppressWarnings("unchecked"), +    public final <R> Observable<R> compose(ObservableTransformer<? super T, ? extends R> composer) {, +        return wrap(((ObservableTransformer<T, R>) composer).apply(this));, +++ b/src/main/java/io/reactivex/Single.java, +    @SuppressWarnings("unchecked"), +    public final <R> Single<R> compose(SingleTransformer<? super T, ? extends R> transformer) {, +        return wrap(((SingleTransformer<T, R>) transformer).apply(this));, +++ b/src/main/java/io/reactivex/Flowable.java, +    @SuppressWarnings("unchecked"), +    public final <R> Flowable<R> compose(FlowableTransformer<? super T, ? extends R> composer) {, +        return fromPublisher(((FlowableTransformer<T, R>) composer).apply(this));, +++ b/src/main/java/io/reactivex/Maybe.java, +    @SuppressWarnings("unchecked"), +    public final <R> Maybe<R> compose(MaybeTransformer<? super T, ? extends R> transformer) {, +        return wrap(((MaybeTransformer<T, R>) transformer).apply(this));, +++ b/src/main/java/io/reactivex/Observable.java, +    @SuppressWarnings("unchecked"), +    public final <R> Observable<R> compose(ObservableTransformer<? super T, ? extends R> composer) {, +        return wrap(((ObservableTransformer<T, R>) composer).apply(this));, +++ b/src/main/java/io/reactivex/Single.java, +    @SuppressWarnings("unchecked"), +    public final <R> Single<R> compose(SingleTransformer<? super T, ? extends R> transformer) {, +        return wrap(((SingleTransformer<T, R>) transformer).apply(this));, +++ b/src/test/java/io/reactivex/TransformerTest.java, +import io.reactivex.exceptions.TestException;, +import static org.junit.Assert.*;, +    public void completableTransformerThrows() {, +, +    // Test demos for signature generics in compose() methods. Just needs to compile., +, +    @Test, +    public void observableGenericsSignatureTest() {, +        A<String, Integer> a = new A<String, Integer>() { };, +, +        Observable.just(a).compose(TransformerTest.<String>testObservableTransformerCreator());, +    }, +, +    @Test, +    public void singleGenericsSignatureTest() {, +        A<String, Integer> a = new A<String, Integer>() { };, +, +        Single.just(a).compose(TransformerTest.<String>testSingleTransformerCreator());, +    }, +, +    @Test, +    public void maybeGenericsSignatureTest() {, +        A<String, Integer> a = new A<String, Integer>() { };, +, +        Maybe.just(a).compose(TransformerTest.<String>testMaybeTransformerCreator());, +    }, +, +    @Test, +    public void flowableGenericsSignatureTest() {, +        A<String, Integer> a = new A<String, Integer>() { };, +, +        Flowable.just(a).compose(TransformerTest.<String>testFlowableTransformerCreator());, +    }, +, +    interface A<T, R> {}, +    interface B<T> {}, +, +    private static <T> ObservableTransformer<A<T, ?>, B<T>> testObservableTransformerCreator() {, +        return new ObservableTransformer<A<T, ?>, B<T>>() {, +            @Override, +            public ObservableSource<B<T>> apply(Observable<A<T, ?>> a) {, +                return Observable.empty();, +            }]