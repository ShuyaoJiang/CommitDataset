[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableToList.java, +            U v = value;, +            if (v != null) {, +                v.add(t);, +            }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableToList.java, +            U v = value;, +            if (v != null) {, +                v.add(t);, +            }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableToListTest.java, +import static org.mockito.ArgumentMatchers.any;, +, +    @Test, +    public void onNextCancelRace() {, +        for (int i = 0; i < 1000; i++) {, +            final PublishProcessor<Integer> pp = PublishProcessor.create();, +            final TestObserver<List<Integer>> ts = pp.toList().test();, +            , +            Runnable r1 = new Runnable() {, +                @Override, +                public void run() {, +                    pp.onNext(1);, +                }, +            };, +            Runnable r2 = new Runnable() {, +                @Override, +                public void run() {, +                    ts.cancel();, +                }, +            };, +            , +            TestHelper.race(r1, r2);, +        }, +        , +    }, +, +    @Test, +    public void onNextCancelRaceFlowable() {, +        for (int i = 0; i < 1000; i++) {, +            final PublishProcessor<Integer> pp = PublishProcessor.create();, +            final TestSubscriber<List<Integer>> ts = pp.toList().toFlowable().test();, +            , +            Runnable r1 = new Runnable() {, +                @Override, +                public void run() {, +                    pp.onNext(1);, +                }, +            };, +            Runnable r2 = new Runnable() {, +                @Override, +                public void run() {, +                    ts.cancel();, +                }, +            };, +            , +            TestHelper.race(r1, r2);, +        }, +        , +    }, +, +    @Test, +    public void onCompleteCancelRaceFlowable() {, +        for (int i = 0; i < 1000; i++) {, +            final PublishProcessor<Integer> pp = PublishProcessor.create();, +            final TestSubscriber<List<Integer>> ts = pp.toList().toFlowable().test();, +            , +            pp.onNext(1);, +            , +            Runnable r1 = new Runnable() {, +                @Override, +                public void run() {, +                    pp.onComplete();, +                }, +            };, +            Runnable r2 = new Runnable() {, +                @Override, +                public void run() {, +                    ts.cancel();, +                }, +            };, +            , +            TestHelper.race(r1, r2);, +            , +            if (ts.valueCount() != 0) {, +                ts.assertValue(Arrays.asList(1)), +                .assertNoErrors();, +            }, +        }, +        , +    }]