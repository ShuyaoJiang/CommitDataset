[+++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/test/java/rx/operators/OperatorConcatTest.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.schedulers.TestScheduler;, +import rx.subscriptions.BooleanSubscription;, +import rx.subscriptions.Subscriptions;, +, +public class OperatorConcatTest {, +, +    @Test, +    public void testConcat() {, +        @SuppressWarnings("unchecked"), +        Observer<String> observer = mock(Observer.class);, +, +        final String[] o = { "1", "3", "5", "7" };, +        final String[] e = { "2", "4", "6" };, +, +        final Observable<String> odds = Observable.from(o);, +        final Observable<String> even = Observable.from(e);, +, +        @SuppressWarnings("unchecked"), +        Observable<String> concat = Observable.concat(odds, even);, +        concat.subscribe(observer);, +, +        verify(observer, times(7)).onNext(anyString());, +    }, +, +    @Test, +    public void testConcatWithList() {, +        @SuppressWarnings("unchecked"), +        Observer<String> observer = mock(Observer.class);, +, +        final String[] o = { "1", "3", "5", "7" };, +        final String[] e = { "2", "4", "6" };, +, +        final Observable<String> odds = Observable.from(o);, +        final Observable<String> even = Observable.from(e);, +        final List<Observable<String>> list = new ArrayList<Observable<String>>();, +        list.add(odds);, +        list.add(even);, +        Observable<String> concat = Observable.concat(Observable.from(list));, +        concat.subscribe(observer);, +, +        verify(observer, times(7)).onNext(anyString());, +    }, +, +    @Test, +    public void testConcatObservableOfObservables() {, +        @SuppressWarnings("unchecked"), +        Observer<String> observer = mock(Observer.class);, +, +        final String[] o = { "1", "3", "5", "7" };, +        final String[] e = { "2", "4", "6" };, +, +        final Observable<String> odds = Observable.from(o);, +        final Observable<String> even = Observable.from(e);, +, +        Observable<Observable<String>> observableOfObservables = Observable.create(new Observable.OnSubscribeFunc<Observable<String>>() {, +]