[+++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/SubjectTests.scala, +import rx.lang.scala.subjects.{AsyncSubject, ReplaySubject, BehaviorSubject}, +, +, +, +, +, +  @Test def ReplaySubjectIsAChannel() {, +, +    val channel = ReplaySubject[Int], +    , +    var lastA: Integer = null, +    var errorA, completedA: Boolean = false, +    val a = channel.subscribe(x => { lastA = x}, e => { errorA = true} , () => { completedA = true }), +, +    var lastB: Integer = null, +    var errorB, completedB: Boolean = false, +    val b = channel.subscribe(x => { lastB = x}, e => { errorB = true} , () => { completedB = true }), +, +    channel.onNext(42), +, +      Assert.assertEquals(42, lastA), +      Assert.assertEquals(42, lastB), +    , +    a.unsubscribe(), +, +    channel.onNext(4711), +, +      Assert.assertEquals(42, lastA), +      Assert.assertEquals(4711, lastB), +    , +    channel.onCompleted(), +, +    Assert.assertEquals(42, lastA), +      Assert.assertFalse(completedA), +      Assert.assertFalse(errorA), +, +      Assert.assertEquals(4711, lastB), +      Assert.assertTrue(completedB), +      Assert.assertFalse(errorB), +, +    var lastC: Integer = null, +    var errorC, completedC: Boolean = false, +    val c = channel.subscribe(x => { lastC = x}, e => { errorC = true} , () => { completedC = true }), +, +      Assert.assertEquals(4711, lastC), +      Assert.assertTrue(completedC), +      Assert.assertFalse(errorC), +, +    channel.onNext(13), +, +      Assert.assertEquals(42, lastA), +      Assert.assertFalse(completedA), +      Assert.assertFalse(errorA), +, +      Assert.assertEquals(4711, lastB), +      Assert.assertTrue(completedB), +      Assert.assertFalse(errorB), +, +      Assert.assertEquals(4711, lastC), +      Assert.assertTrue(completedC), +      Assert.assertFalse(errorC), +, +    channel.onError(new Exception("Boom")), +, +      Assert.assertEquals(42, lastA), +      Assert.assertFalse(completedA), +      Assert.assertFalse(errorA), +, +      Assert.assertEquals(4711, lastB), +      Assert.assertTrue(completedB), +      Assert.assertFalse(errorB), +, +      Assert.assertEquals(4711, lastC), +      Assert.assertTrue(completedC), +      Assert.assertFalse(errorC), +  }, +, +  @Test def BehaviorSubjectIsACache() {, +, +    val channel = BehaviorSubject(2013), +, +    var lastA: Integer = null, +    var errorA, completedA: Boolean = false, +    val a = channel.subscribe(x => { lastA = x}, e => { errorA = true} , () => { completedA = true }), +, +    var lastB: Integer = null, +    var errorB, completedB: Boolean = false, +    val b = channel.subscribe(x => { lastB = x}, e => { errorB = true} , () => { completedB = true }), +, +    Assert.assertEquals(2013, lastA), +    Assert.assertEquals(2013, lastB), +, +    channel.onNext(42), +, +    Assert.assertEquals(42, lastA), +    Assert.assertEquals(42, lastB), +, +    a.unsubscribe(), +]