[+++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher.java, +                SubscriptionHelper.cancel(this);, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher.java, +                SubscriptionHelper.cancel(this);, +++ b/src/main/java/io/reactivex/internal/operators/single/SingleTakeUntil.java, +            other.dispose();, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher.java, +                SubscriptionHelper.cancel(this);, +++ b/src/main/java/io/reactivex/internal/operators/single/SingleTakeUntil.java, +            other.dispose();, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableAmbTest.java, +, +, +    @Test, +    public void untilCompletableMainComplete() {, +        CompletableSubject main = CompletableSubject.create();, +        CompletableSubject other = CompletableSubject.create();, +, +        TestObserver<Void> to = main.ambWith(other).test();, +, +        assertTrue("Main no observers?", main.hasObservers());, +        assertTrue("Other no observers?", other.hasObservers());, +, +        main.onComplete();, +, +        assertFalse("Main has observers?", main.hasObservers());, +        assertFalse("Other has observers?", other.hasObservers());, +, +        to.assertResult();, +    }, +, +    @Test, +    public void untilCompletableMainError() {, +        CompletableSubject main = CompletableSubject.create();, +        CompletableSubject other = CompletableSubject.create();, +, +        TestObserver<Void> to = main.ambWith(other).test();, +, +        assertTrue("Main no observers?", main.hasObservers());, +        assertTrue("Other no observers?", other.hasObservers());, +, +        main.onError(new TestException());, +, +        assertFalse("Main has observers?", main.hasObservers());, +        assertFalse("Other has observers?", other.hasObservers());, +, +        to.assertFailure(TestException.class);, +    }, +, +    @Test, +    public void untilCompletableOtherOnComplete() {, +        CompletableSubject main = CompletableSubject.create();, +        CompletableSubject other = CompletableSubject.create();, +, +        TestObserver<Void> to = main.ambWith(other).test();, +, +        assertTrue("Main no observers?", main.hasObservers());, +        assertTrue("Other no observers?", other.hasObservers());, +, +        other.onComplete();, +, +        assertFalse("Main has observers?", main.hasObservers());, +        assertFalse("Other has observers?", other.hasObservers());, +, +        to.assertResult();, +    }, +, +    @Test, +    public void untilCompletableOtherError() {, +        CompletableSubject main = CompletableSubject.create();, +        CompletableSubject other = CompletableSubject.create();, +, +        TestObserver<Void> to = main.ambWith(other).test();, +, +        assertTrue("Main no observers?", main.hasObservers());, +        assertTrue("Other no observers?", other.hasObservers());, +, +        other.onError(new TestException());, +, +        assertFalse("Main has observers?", main.hasObservers());, +        assertFalse("Other has observers?", other.hasObservers());, +, +        to.assertFailure(TestException.class);, +    }, +, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher.java, +                SubscriptionHelper.cancel(this);, +++ b/src/main/java/io/reactivex/internal/operators/single/SingleTakeUntil.java, +            other.dispose();, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableAmbTest.java, +, +, +    @Test, +    public void untilCompletableMainComplete() {, +        CompletableSubject main = CompletableSubject.create();, +        CompletableSubject other = CompletableSubject.create();, +, +        TestObserver<Void> to = main.ambWith(other).test();, +, +        assertTrue("Main no observers?", main.hasObservers());]