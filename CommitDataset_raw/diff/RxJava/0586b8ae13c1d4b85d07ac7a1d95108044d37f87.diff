[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def tumblingBufferExample() {, +    o.tumblingBuffer(5).subscribe((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  @Test def tumblingBufferExample2() {, +    o.tumblingBuffer(boundary).toBlocking.foreach((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  @Test def slidingBufferExample() {, +    val o = Observable.from(1 to 18).slidingBuffer(4, 2), +    o.subscribe(println(_)), +  }, +, +  @Test def slidingBufferExample2() {, +    val open = Observable.interval(300 millis), +    val closing = Observable.interval(600 millis), +    val o = Observable.interval(100 millis).take(20).slidingBuffer(open)(_ => closing), +    o.zipWithIndex.toBlocking.foreach {, +      case (seq, i) => println(s"Observable#$i emits $seq"), +    }, +  }, +, +  @Test def slidingBufferExample3() {, +    val o = Observable.from(1 to 18).zip(Observable.interval(100 millis)).map(_._1), +    o.slidingBuffer(500 millis, 200 millis).toBlocking.foreach((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  }, +, +  @Test def tumblingExample() {, +    (for ((o, i) <- Observable.from(1 to 18).tumbling(5).zipWithIndex; n <- o), +  @Test def tumblingExample2() {, +    (for ((o, i) <- o.tumbling(windowObservable).zipWithIndex; n <- o), +      yield s"Observable#$i emits $n", +    ).toBlocking.foreach(println), +  }, +, +  @Test def slidingExample() {, +    val o = Observable.from(1 to 18).sliding(4, 2), +    (for ((o, i) <- o.zipWithIndex;, +          n <- o), +      yield s"Observable#$i emits $n", +    ).toBlocking.foreach(println), +  }, +, +  @Test def slidingExample2() {, +    val o = Observable.interval(100 millis).take(20).sliding(500 millis, 200 millis), +    (for ((o, i) <- o.zipWithIndex;, +          n <- o), +      yield s"Observable#$i emits $n", +    ).toBlocking.foreach(println), +  }, +, +  @Test def slidingExample3() {, +    val open = Observable.interval(300 millis), +    val closing = Observable.interval(600 millis), +    val o = Observable.interval(100 millis).take(20).sliding(open)(_ => closing), +    (for ((o, i) <- o.zipWithIndex;, +          n <- o), +    val grouped = numbers.groupByUntil(x => x % 2){ case (key, obs) => obs.filter(x => x == 7) }, +    val grouped = numbers.groupByUntil(x => x % 2, x => x * 10){ case (key, obs) => Observable.interval(2 seconds) }, +    val combinedCounter = firstCounter.combineLatestWith(secondCounter)(List(_, _)) take 10, +    val combinedCounter = Observable.combineLatest(sources)(_.toList).take(10), +  @Test def zipWithExample() {, +    val xs = Observable.items(1, 3, 5, 7), +    val ys = Observable.items(2, 4, 6, 8), +    xs.zipWith(ys)(_ * _).subscribe(println(_)), +  }, +, +    val shared = unshared.multicast(Subject[Int]()), +    val shared = unshared.multicast(() => Subject[Int]())(o => o.map("No. " + _)), +    o.flatMapWith(_ => Observable.interval(200 millis).take(5))(_ * _).toBlocking.foreach(println), +    o.flatMapIterableWith(_=> (1 to 5))(_ * _).toBlocking.foreach(println), +    val o = o1.join(o2)(_ => Observable.timer(300 millis), _ => Observable.timer(200 millis), (_, _)), +    val o = o1.groupJoin(o2)(_ => Observable.timer(300 millis), _ => Observable.timer(200 millis), (t1, t2) => (t1, t2.toSeq.toBlocking.single)), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def tumblingBufferExample() {, +    o.tumblingBuffer(5).subscribe((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  @Test def tumblingBufferExample2() {, +    o.tumblingBuffer(boundary).toBlocking.foreach((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  @Test def slidingBufferExample() {, +    val o = Observable.from(1 to 18).slidingBuffer(4, 2), +    o.subscribe(println(_)), +  }, +, +  @Test def slidingBufferExample2() {, +    val open = Observable.interval(300 millis), +    val closing = Observable.interval(600 millis), +    val o = Observable.interval(100 millis).take(20).slidingBuffer(open)(_ => closing), +    o.zipWithIndex.toBlocking.foreach {, +      case (seq, i) => println(s"Observable#$i emits $seq"), +    }, +  }, +, +  @Test def slidingBufferExample3() {, +    val o = Observable.from(1 to 18).zip(Observable.interval(100 millis)).map(_._1), +    o.slidingBuffer(500 millis, 200 millis).toBlocking.foreach((l: Seq[Int]) => println(l.mkString("[", ", ", "]"))), +  }, +, +  @Test def tumblingExample() {, +    (for ((o, i) <- Observable.from(1 to 18).tumbling(5).zipWithIndex; n <- o), +  @Test def tumblingExample2() {, +    (for ((o, i) <- o.tumbling(windowObservable).zipWithIndex; n <- o), +      yield s"Observable#$i emits $n", +    ).toBlocking.foreach(println)]