[+++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/observables/SwingObservable.java, +import java.awt.Dimension;, +import java.awt.event.ComponentEvent;, +import rx.swing.sources.ComponentEventSource;, +    , +    /**, +     * Creates an observable corresponding to raw component events., +     * , +     * @param component, +     *            The component to register the observable for., +     * @return Observable of component events., +     */, +    public static Observable<ComponentEvent> fromComponentEvents(JComponent component) {, +        return ComponentEventSource.fromComponentEventsOf(component);, +    }, +, +    /**, +     * Creates an observable corresponding to component resize events., +     * , +     * @param component, +     *            The component to register the observable for., +     * @return Observable emitting the current size of the given component after each resize event., +     */, +    public static Observable<Dimension> fromResizing(JComponent component) {, +        return ComponentEventSource.fromResizing(component);, +    }, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/observables/SwingObservable.java, +import java.awt.Dimension;, +import java.awt.event.ComponentEvent;, +import rx.swing.sources.ComponentEventSource;, +    , +    /**, +     * Creates an observable corresponding to raw component events., +     * , +     * @param component, +     *            The component to register the observable for., +     * @return Observable of component events., +     */, +    public static Observable<ComponentEvent> fromComponentEvents(JComponent component) {, +        return ComponentEventSource.fromComponentEventsOf(component);, +    }, +, +    /**, +     * Creates an observable corresponding to component resize events., +     * , +     * @param component, +     *            The component to register the observable for., +     * @return Observable emitting the current size of the given component after each resize event., +     */, +    public static Observable<Dimension> fromResizing(JComponent component) {, +        return ComponentEventSource.fromResizing(component);, +    }, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/swing/sources/ComponentEventSource.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.swing.sources;, +, +import java.awt.Dimension;, +import java.awt.event.ComponentEvent;, +import java.awt.event.ComponentListener;, +, +import javax.swing.JComponent;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Action0;, +import rx.util.functions.Func1;, +, +public enum ComponentEventSource { ; // no instances, +, +    public static Observable<ComponentEvent> fromComponentEventsOf(final JComponent component) {, +        return Observable.create(new Func1<Observer<ComponentEvent>, Subscription>() {, +            @Override, +            public Subscription call(final Observer<ComponentEvent> observer) {, +                final ComponentListener listener = new ComponentListener() {, +                    @Override, +                    public void componentHidden(ComponentEvent event) {, +                        observer.onNext(event);, +                    }, +, +                    @Override, +                    public void componentMoved(ComponentEvent event) {, +                        observer.onNext(event);, +                    }, +]