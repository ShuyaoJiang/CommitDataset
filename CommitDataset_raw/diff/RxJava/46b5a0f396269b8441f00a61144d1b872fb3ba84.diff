[+++ b/src/main/java/rx/internal/operators/OperatorSwitch.java, +            super(child);, +++ b/src/main/java/rx/internal/operators/OperatorSwitch.java, +            super(child);, +++ b/src/test/java/rx/internal/operators/OperatorSwitchTest.java, +import static org.junit.Assert.assertTrue;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +    @Test, +    public void testUnsubscribe() {, +        final AtomicBoolean isUnsubscribed = new AtomicBoolean();, +        Observable.switchOnNext(, +                Observable.create(new Observable.OnSubscribe<Observable<Integer>>() {, +                    @Override, +                    public void call(final Subscriber<? super Observable<Integer>> subscriber) {, +                        subscriber.onNext(Observable.just(1));, +                        isUnsubscribed.set(subscriber.isUnsubscribed());, +                    }, +                }), +        ).take(1).subscribe();, +        assertTrue("Switch doesn't propagate 'unsubscribe'", isUnsubscribed.get());, +    }]