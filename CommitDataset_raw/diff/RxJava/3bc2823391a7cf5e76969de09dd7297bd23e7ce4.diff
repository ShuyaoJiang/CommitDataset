[+++ b/src/main/java/io/reactivex/disposables/FutureDisposable.java, +import java.util.concurrent.atomic.AtomicReference;, +final class FutureDisposable extends AtomicReference<Future<?>> implements Disposable {, +    public boolean isDisposed() {, +        Future<?> f = get();, +        return f == null || f.isDone();, +    }, +, +    @Override, +    public void dispose() {, +        Future<?> f = getAndSet(null);, +        if (f != null) {, +            f.cancel(allowInterrupt);, +        }, +++ b/src/main/java/io/reactivex/disposables/FutureDisposable.java, +import java.util.concurrent.atomic.AtomicReference;, +final class FutureDisposable extends AtomicReference<Future<?>> implements Disposable {, +    public boolean isDisposed() {, +        Future<?> f = get();, +        return f == null || f.isDone();, +    }, +, +    @Override, +    public void dispose() {, +        Future<?> f = getAndSet(null);, +        if (f != null) {, +            f.cancel(allowInterrupt);, +        }, +++ b/src/main/java/io/reactivex/internal/schedulers/ExecutorScheduler.java, +    public Disposable scheduleDirect(Runnable run, final long delay, final TimeUnit unit) {, +        final DelayedRunnable dr = new DelayedRunnable(decoratedRun);, +                dr.direct.replace(scheduleDirect(dr));, +        dr.timed.replace(delayed);, +        return dr;, +                try {, +                } finally {, +                    lazySet(true);, +                }, +, +    }, +, +    static final class DelayedRunnable extends AtomicReference<Runnable> implements Runnable, Disposable {, +, +        private static final long serialVersionUID = -4101336210206799084L;, +, +        final SequentialDisposable timed;, +, +        final SequentialDisposable direct;, +, +        DelayedRunnable(Runnable run) {, +            super(run);, +            this.timed = new SequentialDisposable();, +            this.direct = new SequentialDisposable();, +        }, +, +        @Override, +        public void run() {, +            Runnable r = get();, +            if (r != null) {, +                try {, +                    r.run();, +                } finally {, +                    lazySet(null);, +                    timed.lazySet(DisposableHelper.DISPOSED);, +                    direct.lazySet(DisposableHelper.DISPOSED);, +                }, +            }, +        }, +, +        @Override, +        public boolean isDisposed() {, +            return get() == null;, +        }, +, +        @Override, +        public void dispose() {, +            if (getAndSet(null) != null) {, +                timed.dispose();, +                direct.dispose();, +            }, +        }, +++ b/src/main/java/io/reactivex/disposables/FutureDisposable.java, +import java.util.concurrent.atomic.AtomicReference;, +final class FutureDisposable extends AtomicReference<Future<?>> implements Disposable {, +    public boolean isDisposed() {, +        Future<?> f = get();, +        return f == null || f.isDone();, +    }, +, +    @Override, +    public void dispose() {, +        Future<?> f = getAndSet(null);, +        if (f != null) {, +            f.cancel(allowInterrupt);, +        }, +++ b/src/main/java/io/reactivex/internal/schedulers/ExecutorScheduler.java, +    public Disposable scheduleDirect(Runnable run, final long delay, final TimeUnit unit) {, +        final DelayedRunnable dr = new DelayedRunnable(decoratedRun);, +                dr.direct.replace(scheduleDirect(dr));, +        dr.timed.replace(delayed);]