[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/rxjava-core/src/main/java/rx/internal/operators/BlockingOperatorMostRecent.java, +, +                final MostRecentIterator<T> nextIterator = new MostRecentIterator<T>(mostRecentObserver);, +                return nextIterator;, +, +    }, +, +    private static class MostRecentIterator<T> implements Iterator<T> {, +, +        private final MostRecentObserver<T> observer;, +, +        private MostRecentIterator(MostRecentObserver<T> observer) {, +            this.observer = observer;, +        }, +, +        @Override, +        public boolean hasNext() {, +            return !observer.isCompleted();, +        }, +, +        @Override, +        public T next() {, +            if (observer.getThrowable() != null) {, +                throw Exceptions.propagate(observer.getThrowable());, +            }, +            return observer.getRecentValue();, +        }, +, +        @Override, +        public void remove() {, +            throw new UnsupportedOperationException("Read only iterator");, +        }, +        static final NotificationLite<Object> nl = NotificationLite.instance();, +        private boolean isCompleted() {, +            return nl.isCompleted(value);, +        private Throwable getThrowable() {, +            Object v = value;, +            return nl.isError(v) ? nl.getError(v) : null;, +        @SuppressWarnings("unchecked"), +        private T getRecentValue() {, +            return (T)value;, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/rxjava-core/src/main/java/rx/internal/operators/BlockingOperatorMostRecent.java, +, +                final MostRecentIterator<T> nextIterator = new MostRecentIterator<T>(mostRecentObserver);, +                return nextIterator;, +, +    }, +, +    private static class MostRecentIterator<T> implements Iterator<T> {, +, +        private final MostRecentObserver<T> observer;, +, +        private MostRecentIterator(MostRecentObserver<T> observer) {, +            this.observer = observer;, +        }, +, +        @Override, +        public boolean hasNext() {, +            return !observer.isCompleted();, +        }, +, +        @Override, +        public T next() {, +            if (observer.getThrowable() != null) {, +                throw Exceptions.propagate(observer.getThrowable());, +            }, +            return observer.getRecentValue();, +        }, +, +        @Override, +        public void remove() {, +            throw new UnsupportedOperationException("Read only iterator");, +        }, +        static final NotificationLite<Object> nl = NotificationLite.instance();, +        private boolean isCompleted() {, +            return nl.isCompleted(value);, +        private Throwable getThrowable() {, +            Object v = value;, +            return nl.isError(v) ? nl.getError(v) : null;, +        @SuppressWarnings("unchecked"), +        private T getRecentValue() {, +            return (T)value;, +, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorSwitch.java, +import rx.Producer;, +        return new SwitchSubscriber(child);, +    }, +    private static final class SwitchSubscriber<T> extends Subscriber<Observable<? extends T>> {, +        final SerializedSubscriber<T> s;, +        final SerialSubscription ssub;, +        /** Guarded by guard. */, +        InnerSubscriber currentSubscriber;]