[+++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +                        if (consumerCapacity.get() != Long.MAX_VALUE) {, +                        }, +                        long c = consumerCapacity.get();, +                        if (c > 0) {, +                            producer.request(c);, +                        }, +                    producer.request(n);, +++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +                        if (consumerCapacity.get() != Long.MAX_VALUE) {, +                        }, +                        long c = consumerCapacity.get();, +                        if (c > 0) {, +                            producer.request(c);, +                        }, +                    producer.request(n);, +++ b/src/test/java/rx/internal/operators/OperatorRetryTest.java, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.*;, +import org.mockito.*;, +import rx.*;, +import rx.functions.*;, +        public void call(final Subscriber<? super String> o) {, +            o.setProducer(new Producer() {, +                final AtomicLong req = new AtomicLong();, +                @Override, +                public void request(long n) {, +                    if (n == Long.MAX_VALUE) {, +                        return;, +                    }, +                    if (n > 0 && req.getAndAdd(1) == 0) {, +                        int i = count.getAndIncrement();, +                        if (i < numFailures) {, +                            o.onNext("beginningEveryTime");, +                            o.onError(new RuntimeException("forced failure: " + count.get()));, +                        } else, +                        if (i == numFailures) {, +                            o.onNext("beginningEveryTime");, +                        } else, +                        if (i > numFailures) {, +                            o.onNext("onSuccessOnly");, +                            o.onCompleted();, +                        }, +                        req.decrementAndGet();, +                    }, +                }, +            });, +    @Test(timeout = 10000), +        for (int i = 0; i < 200; i++) {, +            verify(observer, never()).onError(any(Throwable.class));, +            // should show NUM_RETRIES attempts, +            inOrder.verify(observer, times(NUM_RETRIES + 1)).onNext("beginningEveryTime");, +    }]