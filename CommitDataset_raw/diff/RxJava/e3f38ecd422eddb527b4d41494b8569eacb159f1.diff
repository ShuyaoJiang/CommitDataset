[+++ b/src/main/java/io/reactivex/Flowable.java, +     * Publisher completes, the resulting Publisher emits the current buffer and propagates the notification from the, +     * source Publisher. Note that if the source Publisher issues an onError notification the event is passed on, +     * immediately without first emitting the buffer it is in the process of assembling., +     * Publisher completes, the resulting Publisher emits the current buffer and propagates the notification from the, +     * source Publisher. Note that if the source Publisher issues an onError notification the event is passed on, +     * immediately without first emitting the buffer it is in the process of assembling., +     * Publisher completes, the resulting Publisher emits the current buffer and propagates the notification from the, +     * source Publisher. Note that if the source Publisher issues an onError notification the event is passed on, +     * immediately without first emitting the buffer it is in the process of assembling., +     * Publisher completes, the resulting Publisher emits the current buffer and propagates the notification from the, +     * source Publisher. Note that if the source Publisher issues an onError notification the event is passed on, +     * immediately without first emitting the buffer it is in the process of assembling., +     * Publisher completes, the resulting Publisher emits the current buffer and propagates the notification from the, +     * source Publisher. Note that if the source Publisher issues an onError notification the event is passed on, +     * immediately without first emitting the buffer it is in the process of assembling., +     * {@code timespan} argument. When the source Publisher completes, the resulting Publisher emits the current buffer, +     * and propagates the notification from the source Publisher. Note that if the source Publisher issues an onError, +     * notification the event is passed on immediately without first emitting the buffer it is in the process of, +     * assembling., +     * {@code timespan} argument. When the source Publisher completes, the resulting Publisher emits the current buffer, +     * and propagates the notification from the source Publisher. Note that if the source Publisher issues an onError, +     * notification the event is passed on immediately without first emitting the buffer it is in the process of, +     * assembling., +     * {@code timespan} argument. When the source Publisher completes, the resulting Publisher emits the current buffer, +     * and propagates the notification from the source Publisher. Note that if the source Publisher issues an onError, +     * notification the event is passed on immediately without first emitting the buffer it is in the process of, +     * assembling., +     * first). When the source Publisher completes, the resulting Publisher emits the current buffer and propagates the, +     * notification from the source Publisher. Note that if the source Publisher issues an onError notification the event, +     * is passed on immediately without first emitting the buffer it is in the process of assembling., +     * the {@code count} argument (whichever is reached first). When the source Publisher completes, the resulting, +     * Publisher emits the current buffer and propagates the notification from the source Publisher. Note that if the, +     * source Publisher issues an onError notification the event is passed on immediately without first emitting the, +     * buffer it is in the process of assembling., +     * the {@code count} argument (whichever is reached first). When the source Publisher completes, the resulting, +     * Publisher emits the current buffer and propagates the notification from the source Publisher. Note that if the, +     * source Publisher issues an onError notification the event is passed on immediately without first emitting the, +     * buffer it is in the process of assembling., +     * {@code timespan} argument and on the specified {@code scheduler}. When the source Publisher completes, the, +     * resulting Publisher emits the current buffer and propagates the notification from the source Publisher. Note that, +     * if the source Publisher issues an onError notification the event is passed on immediately without first emitting, +     * the buffer it is in the process of assembling., +     * item, and closes when the Publisher returned from {@code closingIndicator} emits an item. If any of the source, +     * Publisher, {@code openingIndicator} or {@code closingIndicator} issues an onError notification the event is passed, +     * on immediately without first emitting the buffer it is in the process of assembling., +     * item, and closes when the Publisher returned from {@code closingIndicator} emits an item. If any of the source, +     * Publisher, {@code openingIndicator} or {@code closingIndicator} issues an onError notification the event is passed, +     * on immediately without first emitting the buffer it is in the process of assembling., +     * latest buffer and complete. If either the source Publisher or the boundary Publisher issues an onError notification, +     * the event is passed on immediately without first emitting the buffer it is in the process of assembling., +     * latest buffer and complete. If either the source Publisher or the boundary Publisher issues an onError notification, +     * the event is passed on immediately without first emitting the buffer it is in the process of assembling., +     * latest buffer and complete. If either the source Publisher or the boundary Publisher issues an onError notification, +     * the event is passed on immediately without first emitting the buffer it is in the process of assembling., +     * new buffer whenever the Publisher produced by the specified {@code boundaryIndicatorSupplier} emits an item., +     * If either the source Publisher or the boundary Publisher issues an onError notification the event is passed on, +     * immediately without first emitting the buffer it is in the process of assembling., +     *            Whenever the supplied {@code Publisher} emits an item, {@code buffer} emits the current buffer and, +     * new buffer whenever the Publisher produced by the specified {@code boundaryIndicatorSupplier} emits an item., +     * If either the source Publisher or the boundary Publisher issues an onError notification the event is passed on, +     * immediately without first emitting the buffer it is in the process of assembling., +     *            Whenever the supplied {@code Publisher} emits an item, {@code buffer} emits the current buffer and, +++ b/src/main/java/io/reactivex/Flowable.java, +     * Publisher completes, the resulting Publisher emits the current buffer and propagates the notification from the, +     * source Publisher. Note that if the source Publisher issues an onError notification the event is passed on, +     * immediately without first emitting the buffer it is in the process of assembling., +     * Publisher completes, the resulting Publisher emits the current buffer and propagates the notification from the, +     * source Publisher. Note that if the source Publisher issues an onError notification the event is passed on, +     * immediately without first emitting the buffer it is in the process of assembling., +     * Publisher completes, the resulting Publisher emits the current buffer and propagates the notification from the, +     * source Publisher. Note that if the source Publisher issues an onError notification the event is passed on, +     * immediately without first emitting the buffer it is in the process of assembling., +     * Publisher completes, the resulting Publisher emits the current buffer and propagates the notification from the, +     * source Publisher. Note that if the source Publisher issues an onError notification the event is passed on, +     * immediately without first emitting the buffer it is in the process of assembling., +     * Publisher completes, the resulting Publisher emits the current buffer and propagates the notification from the, +     * source Publisher. Note that if the source Publisher issues an onError notification the event is passed on, +     * immediately without first emitting the buffer it is in the process of assembling., +     * {@code timespan} argument. When the source Publisher completes, the resulting Publisher emits the current buffer, +     * and propagates the notification from the source Publisher. Note that if the source Publisher issues an onError, +     * notification the event is passed on immediately without first emitting the buffer it is in the process of, +     * assembling., +     * {@code timespan} argument. When the source Publisher completes, the resulting Publisher emits the current buffer, +     * and propagates the notification from the source Publisher. Note that if the source Publisher issues an onError, +     * notification the event is passed on immediately without first emitting the buffer it is in the process of, +     * assembling., +     * {@code timespan} argument. When the source Publisher completes, the resulting Publisher emits the current buffer, +     * and propagates the notification from the source Publisher. Note that if the source Publisher issues an onError, +     * notification the event is passed on immediately without first emitting the buffer it is in the process of, +     * assembling., +     * first). When the source Publisher completes, the resulting Publisher emits the current buffer and propagates the, +     * notification from the source Publisher. Note that if the source Publisher issues an onError notification the event, +     * is passed on immediately without first emitting the buffer it is in the process of assembling., +     * the {@code count} argument (whichever is reached first). When the source Publisher completes, the resulting, +     * Publisher emits the current buffer and propagates the notification from the source Publisher. Note that if the, +     * source Publisher issues an onError notification the event is passed on immediately without first emitting the, +     * buffer it is in the process of assembling., +     * the {@code count} argument (whichever is reached first). When the source Publisher completes, the resulting, +     * Publisher emits the current buffer and propagates the notification from the source Publisher. Note that if the]