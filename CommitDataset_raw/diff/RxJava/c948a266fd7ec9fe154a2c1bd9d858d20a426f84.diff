[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import java.util.concurrent.CountDownLatch, +import java.util.concurrent.TimeUnit, +  @Test def schedulerExample1(): Unit = {, +    val latch = new CountDownLatch(1), +    val worker = IOScheduler().createWorker, +    worker.schedule {, +      println("Hello from Scheduler"), +      latch.countDown(), +    }, +    latch.await(5, TimeUnit.SECONDS), +  }, +, +  @Test def schedulerExample2(): Unit = {, +    val latch = new CountDownLatch(1), +    val worker = IOScheduler().createWorker, +    worker.schedule(, +      {, +        println("Hello from Scheduler after 1 second"), +        latch.countDown(), +      }, 1 seconds), +    latch.await(5, TimeUnit.SECONDS), +  }, +, +  @Test def schedulerExample3(): Unit = {, +    val worker = IOScheduler().createWorker, +    var no = 1, +    val subscription = worker.schedulePeriodically(, +      {, +        println(s"Hello(${no}) from Scheduler"), +        no += 1, +      }, initialDelay = 1 seconds, period = 100 millis), +    TimeUnit.SECONDS.sleep(2), +    subscription.unsubscribe(), +  }, +, +  @Test def schedulerExample4(): Unit = {, +    val worker = IOScheduler().createWorker, +    var no = 1, +    def hello: Unit = {, +      println(s"Hello(${no}) from Scheduler"), +      no += 1, +      worker.schedule(hello, 100 millis), +    }, +    val subscription = worker.schedule(hello, 1 seconds), +    TimeUnit.SECONDS.sleep(2), +    subscription.unsubscribe(), +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import java.util.concurrent.CountDownLatch, +import java.util.concurrent.TimeUnit, +  @Test def schedulerExample1(): Unit = {, +    val latch = new CountDownLatch(1), +    val worker = IOScheduler().createWorker, +    worker.schedule {, +      println("Hello from Scheduler"), +      latch.countDown(), +    }, +    latch.await(5, TimeUnit.SECONDS), +  }, +, +  @Test def schedulerExample2(): Unit = {, +    val latch = new CountDownLatch(1), +    val worker = IOScheduler().createWorker, +    worker.schedule(, +      {, +        println("Hello from Scheduler after 1 second"), +        latch.countDown(), +      }, 1 seconds), +    latch.await(5, TimeUnit.SECONDS), +  }, +, +  @Test def schedulerExample3(): Unit = {, +    val worker = IOScheduler().createWorker, +    var no = 1, +    val subscription = worker.schedulePeriodically(, +      {, +        println(s"Hello(${no}) from Scheduler"), +        no += 1, +      }, initialDelay = 1 seconds, period = 100 millis), +    TimeUnit.SECONDS.sleep(2), +    subscription.unsubscribe(), +  }, +, +  @Test def schedulerExample4(): Unit = {, +    val worker = IOScheduler().createWorker, +    var no = 1, +    def hello: Unit = {, +      println(s"Hello(${no}) from Scheduler"), +      no += 1, +      worker.schedule(hello, 100 millis), +    }, +    val subscription = worker.schedule(hello, 1 seconds), +    TimeUnit.SECONDS.sleep(2), +    subscription.unsubscribe(), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Notification.scala, +     *         The [[java.lang.Throwable]] value contained in this notification.]