[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +                    if (connectionObject == null) {, +                        rc.disconnectedEarly = true;, +                    } else {, +    }, +        boolean disconnectedEarly;, +, +            synchronized (parent) {, +                if (disconnectedEarly) {, +                    ((ResettableConnectable)parent.source).resetIf(t);, +                }, +            }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +                    if (connectionObject == null) {, +                        rc.disconnectedEarly = true;, +                    } else {, +    }, +        boolean disconnectedEarly;, +, +            synchronized (parent) {, +                if (disconnectedEarly) {, +                    ((ResettableConnectable)parent.source).resetIf(t);, +                }, +            }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java, +, +                    if (connectionObject == null) {, +                        rc.disconnectedEarly = true;, +                    } else {, +    }, +        boolean disconnectedEarly;, +, +            synchronized (parent) {, +                if (disconnectedEarly) {, +                    ((ResettableConnectable)parent.source).resetIf(t);, +                }, +            }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +                    if (connectionObject == null) {, +                        rc.disconnectedEarly = true;, +                    } else {, +    }, +        boolean disconnectedEarly;, +, +            synchronized (parent) {, +                if (disconnectedEarly) {, +                    ((ResettableConnectable)parent.source).resetIf(t);, +                }, +            }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java, +, +                    if (connectionObject == null) {, +                        rc.disconnectedEarly = true;, +                    } else {, +    }, +        boolean disconnectedEarly;, +, +            synchronized (parent) {, +                if (disconnectedEarly) {, +                    ((ResettableConnectable)parent.source).resetIf(t);, +                }, +            }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableRefCountTest.java, +, +    @Test, +    public void disconnectBeforeConnect() {, +        BehaviorProcessor<Integer> processor = BehaviorProcessor.create();, +, +        Flowable<Integer> flowable = processor, +                .replay(1), +                .refCount();, +, +        flowable.takeUntil(Flowable.just(1)).test();, +, +        processor.onNext(2);, +, +        flowable.take(1).test().assertResult(2);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +                    if (connectionObject == null) {, +                        rc.disconnectedEarly = true;, +                    } else {, +    }, +        boolean disconnectedEarly;, +, +            synchronized (parent) {, +                if (disconnectedEarly) {, +                    ((ResettableConnectable)parent.source).resetIf(t);, +                }, +            }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java, +, +                    if (connectionObject == null) {, +                        rc.disconnectedEarly = true;, +                    } else {, +    }, +        boolean disconnectedEarly;, +, +            synchronized (parent) {, +                if (disconnectedEarly) {]