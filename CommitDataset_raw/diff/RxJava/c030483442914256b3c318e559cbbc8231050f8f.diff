[+++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableCreateTest.java, +import io.reactivex.functions.Cancellable;, +    public void basicWithCancellable() {, +        final Disposable d1 = Disposables.empty();, +        final Disposable d2 = Disposables.empty();, +, +        Completable.create(new CompletableOnSubscribe() {, +            @Override, +            public void subscribe(CompletableEmitter e) throws Exception {, +                e.setDisposable(d1);, +                e.setCancellable(new Cancellable() {, +                    @Override, +                    public void cancel() throws Exception {, +                        d2.dispose();, +                    }, +                });, +, +                e.onComplete();, +                e.onError(new TestException());, +                e.onComplete();, +            }, +        }), +        .test(), +        .assertResult();, +, +        assertTrue(d1.isDisposed());, +        assertTrue(d2.isDisposed());, +    }, +, +    @Test, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableCreateTest.java, +import io.reactivex.functions.Cancellable;, +    public void basicWithCancellable() {, +        final Disposable d1 = Disposables.empty();, +        final Disposable d2 = Disposables.empty();, +, +        Completable.create(new CompletableOnSubscribe() {, +            @Override, +            public void subscribe(CompletableEmitter e) throws Exception {, +                e.setDisposable(d1);, +                e.setCancellable(new Cancellable() {, +                    @Override, +                    public void cancel() throws Exception {, +                        d2.dispose();, +                    }, +                });, +, +                e.onComplete();, +                e.onError(new TestException());, +                e.onComplete();, +            }, +        }), +        .test(), +        .assertResult();, +, +        assertTrue(d1.isDisposed());, +        assertTrue(d2.isDisposed());, +    }, +, +    @Test, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableCreateTest.java, +import io.reactivex.functions.Cancellable;, +    public void basicWithCancellable() {, +        final Disposable d1 = Disposables.empty();, +        final Disposable d2 = Disposables.empty();, +, +        Flowable.<Integer>create(new FlowableOnSubscribe<Integer>() {, +            @Override, +            public void subscribe(FlowableEmitter<Integer> e) throws Exception {, +                e.setDisposable(d1);, +                e.setCancellable(new Cancellable() {, +                    @Override, +                    public void cancel() throws Exception {, +                        d2.dispose();, +                    }, +                });, +, +                e.onNext(1);, +                e.onNext(2);, +                e.onNext(3);, +                e.onComplete();, +                e.onError(new TestException());, +                e.onNext(4);, +                e.onError(new TestException());, +                e.onComplete();, +            }, +        }, FlowableEmitter.BackpressureMode.BUFFER), +        .test(), +        .assertResult(1, 2, 3);, +, +        assertTrue(d1.isDisposed());, +        assertTrue(d2.isDisposed());, +    }, +, +    @Test, +++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableCreateTest.java, +import io.reactivex.functions.Cancellable;, +    public void basicWithCancellable() {, +        final Disposable d1 = Disposables.empty();, +        final Disposable d2 = Disposables.empty();]