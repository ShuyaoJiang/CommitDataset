[+++ b/rxjava-core/src/main/java/rx/operators/SafeObserver.java, +    private volatile Observer<? super T> actual;, +    /** , +     * If the observer completes, this is swapped in place of the actual, +     * should avoid the overhead of isFinished.get() on every onNext call. */, +    private static final Observer<Object> nopObserver = new Observer<Object>() {, +        @Override, +        public void onNext(Object args) {, +        }, +        @Override, +        public void onError(Throwable e) {, +        }, +        @Override, +        public void onCompleted() {, +        }, +        , +    };, +            Observer<? super T> a = actual;, +            actual = nopObserver;, +                a.onCompleted();, +            Observer<? super T> a = actual;, +            // will prevent onNext from sending a new value after completion, +            actual = nopObserver;, +                a.onError(e);, +        } catch (Throwable t) {, +            onError(t);, +++ b/rxjava-core/src/main/java/rx/operators/SafeObserver.java, +    private volatile Observer<? super T> actual;, +    /** , +     * If the observer completes, this is swapped in place of the actual, +     * should avoid the overhead of isFinished.get() on every onNext call. */, +    private static final Observer<Object> nopObserver = new Observer<Object>() {, +        @Override, +        public void onNext(Object args) {, +        }, +        @Override, +        public void onError(Throwable e) {, +        }, +        @Override, +        public void onCompleted() {, +        }, +        , +    };, +            Observer<? super T> a = actual;, +            actual = nopObserver;, +                a.onCompleted();, +            Observer<? super T> a = actual;, +            // will prevent onNext from sending a new value after completion, +            actual = nopObserver;, +                a.onError(e);, +        } catch (Throwable t) {, +            onError(t);, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +        for (Observer<? super T> o : subscriptionManager.rawSnapshot()) {, +++ b/rxjava-core/src/main/java/rx/operators/SafeObserver.java, +    private volatile Observer<? super T> actual;, +    /** , +     * If the observer completes, this is swapped in place of the actual, +     * should avoid the overhead of isFinished.get() on every onNext call. */, +    private static final Observer<Object> nopObserver = new Observer<Object>() {, +        @Override, +        public void onNext(Object args) {, +        }, +        @Override, +        public void onError(Throwable e) {, +        }, +        @Override, +        public void onCompleted() {, +        }, +        , +    };, +            Observer<? super T> a = actual;, +            actual = nopObserver;, +                a.onCompleted();, +            Observer<? super T> a = actual;, +            // will prevent onNext from sending a new value after completion, +            actual = nopObserver;, +                a.onError(e);, +        } catch (Throwable t) {, +            onError(t);, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +        for (Observer<? super T> o : subscriptionManager.rawSnapshot()) {, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +        for (Observer<? super T> o : subscriptionManager.rawSnapshot()) {, +++ b/rxjava-core/src/main/java/rx/operators/SafeObserver.java, +    private volatile Observer<? super T> actual;, +    /** , +     * If the observer completes, this is swapped in place of the actual, +     * should avoid the overhead of isFinished.get() on every onNext call. */, +    private static final Observer<Object> nopObserver = new Observer<Object>() {, +        @Override, +        public void onNext(Object args) {, +        }, +        @Override, +        public void onError(Throwable e) {, +        }, +        @Override, +        public void onCompleted() {, +        }, +        ]