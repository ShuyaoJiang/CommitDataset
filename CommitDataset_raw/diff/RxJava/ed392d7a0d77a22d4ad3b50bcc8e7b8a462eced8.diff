[+++ b/rxjava-core/src/main/java/rx/observers/SerializedObserver.java, +    private FastList queue;, +, +    private static final int MAX_DRAIN_ITERATION = 1;, +    private static final Object NULL_SENTINEL = new Object();, +    private static final Object COMPLETE_SENTINEL = new Object();, +, +    static final class FastList {, +        Object[] array;, +        int size;, +, +        public void add(Object o) {, +            int s = size;, +            Object[] a = array;, +            if (a == null) {, +                a = new Object[16];, +                array = a;, +            } else if (s == a.length) {, +                Object[] array2 = new Object[s + (s >> 2)];, +                System.arraycopy(a, 0, array2, 0, s);, +                a = array2;, +                array = a;, +            }, +            a[s] = o;, +            size = s + 1;, +        }, +    }, +, +    private static final class ErrorSentinel {, +        final Throwable e;, +, +        ErrorSentinel(Throwable e) {, +            this.e = e;, +        }, +    }, +        FastList list;, +            if (emitting) {, +                if (queue == null) {, +                    queue = new FastList();, +                }, +                queue.add(COMPLETE_SENTINEL);, +                return;, +            }, +            list = queue;, +            queue = null;, +        FastList list;, +            if (emitting) {, +                if (queue == null) {, +                    queue = new FastList();, +                }, +                queue.add(new ErrorSentinel(e));, +                return;, +            }, +            list = queue;, +            queue = null;, +        FastList list;, +, +            if (emitting) {, +                if (queue == null) {, +                    queue = new FastList();, +                }, +                queue.add(t != null ? t : NULL_SENTINEL);, +                return;, +            }, +            list = queue;, +            queue = null;, +, +            int iter = MAX_DRAIN_ITERATION;, +            do {, +                if (iter == MAX_DRAIN_ITERATION) {, +                }, +                --iter;, +                if (iter > 0) {, +                    synchronized (this) {, +                        list = queue;, +                        queue = null;, +                    }, +                    if (list == null) {, +                        break;, +                    }, +                }, +            } while (iter > 0);, +                    list = queue;, +                    queue = null;, +                    list = null;, +    void drainQueue(FastList list) {, +        if (list == null || list.size == 0) {, +        for (Object v : list.array) {, +            if (v == null) {, +                break;, +            }, +            if (v == NULL_SENTINEL) {, +                actual.onNext(null);, +            } else if (v == COMPLETE_SENTINEL) {, +                actual.onCompleted();, +            } else if (v.getClass() == ErrorSentinel.class) {, +                actual.onError(((ErrorSentinel) v).e);, +            } else {, +                actual.onNext((T) v);, +            }]