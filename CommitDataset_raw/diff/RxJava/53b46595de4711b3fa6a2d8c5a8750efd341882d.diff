[+++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorDoOnEach.java, +, +            private boolean done = false;, +, +                if (done) {, +                    return;, +                }, +                // Set `done` here so that the error in `doOnEachObserver.onCompleted()` can be noticed by observer, +                done = true;, +                if (done) {, +                    return;, +                }, +                done = true;, +                if (done) {, +                    return;, +                }, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorDoOnEach.java, +, +            private boolean done = false;, +, +                if (done) {, +                    return;, +                }, +                // Set `done` here so that the error in `doOnEachObserver.onCompleted()` can be noticed by observer, +                done = true;, +                if (done) {, +                    return;, +                }, +                done = true;, +                if (done) {, +                    return;, +                }, +++ b/rxjava-core/src/test/java/rx/ObservableTests.java, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorDoOnEach.java, +, +            private boolean done = false;, +, +                if (done) {, +                    return;, +                }, +                // Set `done` here so that the error in `doOnEachObserver.onCompleted()` can be noticed by observer, +                done = true;, +                if (done) {, +                    return;, +                }, +                done = true;, +                if (done) {, +                    return;, +                }, +++ b/rxjava-core/src/test/java/rx/ObservableTests.java, +++ b/rxjava-core/src/test/java/rx/internal/operators/OperatorDoOnEachTest.java, +import static org.junit.Assert.assertEquals;, +import java.util.List;, +import java.util.concurrent.atomic.AtomicInteger;, +, +    @Test, +    public void testIssue1451Case1() {, +        // https://github.com/Netflix/RxJava/issues/1451, +        int[] nums = {1, 2, 3};, +        final AtomicInteger count = new AtomicInteger();, +        for (final int n : nums) {, +            Observable, +                    .from(Boolean.TRUE, Boolean.FALSE), +                    .takeWhile(new Func1<Boolean, Boolean>() {, +                        @Override, +                        public Boolean call(Boolean value) {, +                            return value;, +                        }, +                    }), +                    .toList(), +                    .doOnNext(new Action1<List<Boolean>>() {, +                        @Override, +                        public void call(List<Boolean> booleans) {, +                            count.incrementAndGet();, +                        }, +                    }), +                    .subscribe();, +        }, +        assertEquals(nums.length, count.get());, +    }, +, +    @Test, +    public void testIssue1451Case2() {, +        // https://github.com/Netflix/RxJava/issues/1451, +        int[] nums = {1, 2, 3};, +        final AtomicInteger count = new AtomicInteger();, +        for (final int n : nums) {, +            Observable, +                    .from(Boolean.TRUE, Boolean.FALSE, Boolean.FALSE), +                    .takeWhile(new Func1<Boolean, Boolean>() {, +                        @Override, +                        public Boolean call(Boolean value) {, +                            return value;, +                        }, +                    }), +                    .toList(), +                    .doOnNext(new Action1<List<Boolean>>() {, +                        @Override, +                        public void call(List<Boolean> booleans) {, +                            count.incrementAndGet();]