[+++ b/gradle.properties, +version=0.17.0-RC4-SNAPSHOT, +++ b/gradle.properties, +version=0.17.0-RC4-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +    duration(100 millis), // a short delay because medals are only awarded some time after the Games began, +  val oneYear = 1000.millis, +  //val neverUsedDummyMedal = Medal(3333, "?", "?", "?", "?", "?"), +  /** runs an infinite loop, and returns Bottom type (Nothing) */, +  def getNothing: Nothing = {, +    println("You shouldn't have called this method ;-)"), +    getNothing, +  }, +  , +  /** returns an Observable which emits no elements and completes after a duration of d */, +  def duration(d: Duration): Observable[Nothing] = Observable.interval(d).take(1).filter(_ => false).map(_ => getNothing), +  , +  def fourYearsEmpty: Observable[Medal] = duration(4*oneYear), +, +  def yearTicks: Observable[Int] = , +    (Observable.from(1996 to 2014) zip (Observable.items(-1) ++ Observable.interval(oneYear))).map(_._1), +  , +  /*, +  def fourYearsEmptyOld: Observable[Medal] = {, +    Observable.interval(fourYears).take(1).map(i => neverUsedDummyMedal).filter(m => false), +    // Observable.empty, +  }*/, +++ b/gradle.properties, +version=0.17.0-RC4-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +    duration(100 millis), // a short delay because medals are only awarded some time after the Games began, +  val oneYear = 1000.millis, +  //val neverUsedDummyMedal = Medal(3333, "?", "?", "?", "?", "?"), +  /** runs an infinite loop, and returns Bottom type (Nothing) */, +  def getNothing: Nothing = {, +    println("You shouldn't have called this method ;-)"), +    getNothing, +  }, +  , +  /** returns an Observable which emits no elements and completes after a duration of d */, +  def duration(d: Duration): Observable[Nothing] = Observable.interval(d).take(1).filter(_ => false).map(_ => getNothing), +  , +  def fourYearsEmpty: Observable[Medal] = duration(4*oneYear), +, +  def yearTicks: Observable[Int] = , +    (Observable.from(1996 to 2014) zip (Observable.items(-1) ++ Observable.interval(oneYear))).map(_._1), +  , +  /*, +  def fourYearsEmptyOld: Observable[Medal] = {, +    Observable.interval(fourYears).take(1).map(i => neverUsedDummyMedal).filter(m => false), +    // Observable.empty, +  }*/, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +/**, + * Demo how the different operators can be used. In Eclipse, you can right-click, + * a test and choose "Run As" > "Scala JUnit Test"., + * , + * For each operator added to Observable.java, we add a little usage demo here., + * It does not need to test the functionality (that's already done by the tests in, + * RxJava core), but it should demonstrate how it can be used, to make sure that, + * the method signature makes sense., + */, +    val b = (first zip second) forall { case (a, b) => a == b }, +    assertTrue(b.toBlockingObservable.single), +    val b1 = booleans.forall(identity), +      numbers.map(n => s"${n} is in the modulo-$modulo group"), +  @Test def testOlympicYearTicks() {, +    Olympics.yearTicks.subscribe(println(_)), +    waitFor(Olympics.yearTicks), +  }, +, +    Olympics.yearTicks.subscribe(year => println(s"\nYear $year starts.")), +, +    waitFor(Olympics.yearTicks), +    val firstCounter = Observable.interval(250 millis), +    val secondCounter = Observable.interval(550 millis), +    val combinedCounter = firstCounter.combineLatest(secondCounter,, +    combinedCounter subscribe {x => println(s"Emitted group: $x")}, +    waitFor(combinedCounter), +  @Test def olympicsExampleWithoutPublish() {, +    val medals = Olympics.mountainBikeMedals.doOnEach(_ => println("onNext")), +    medals.subscribe(println(_)) // triggers an execution of medals Observable, +    waitFor(medals) // triggers another execution of medals Observable, +  }, +  @Test def olympicsExampleWithPublish() {, +    val medals = Olympics.mountainBikeMedals.doOnEach(_ => println("onNext")).publish, +    medals.subscribe(println(_)) // triggers an execution of medals Observable, +    waitFor(medals) // triggers another execution of medals Observable, +    val unshared = Observable.from(1 to 4), +    val unshared = Observable.from(1 to 4), +    val timestamped = Observable.interval(100 millis).take(6).timestamp.toBlockingObservable, +  /** Subscribes to obs and waits until obs has completed. Note that if you subscribe to, +   *  obs yourself and also call waitFor(obs), all side-effects of subscribing to obs, +   *  will happen twice., +   */, +++ b/gradle.properties, +version=0.17.0-RC4-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +    duration(100 millis), // a short delay because medals are only awarded some time after the Games began, +  val oneYear = 1000.millis]