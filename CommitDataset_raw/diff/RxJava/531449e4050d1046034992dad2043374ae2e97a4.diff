[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def firstLastSingleExample() {, +    assertEquals(1, List(1, 2, 3, 4).toObservable.head.toBlockingObservable.single), +    assertEquals(1, List(1, 2, 3, 4).toObservable.first.toBlockingObservable.single), +    assertEquals(4, List(1, 2, 3, 4).toObservable.last.toBlockingObservable.single), +    assertEquals(1, List(1).toObservable.single.toBlockingObservable.single), +, +    assertEquals(1, List(1, 2, 3, 4).toObservable.toBlockingObservable.head), +    assertEquals(1, List(1, 2, 3, 4).toObservable.toBlockingObservable.first), +    assertEquals(4, List(1, 2, 3, 4).toObservable.toBlockingObservable.last), +    assertEquals(1, List(1).toObservable.toBlockingObservable.single), +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def firstLastSingleExample() {, +    assertEquals(1, List(1, 2, 3, 4).toObservable.head.toBlockingObservable.single), +    assertEquals(1, List(1, 2, 3, 4).toObservable.first.toBlockingObservable.single), +    assertEquals(4, List(1, 2, 3, 4).toObservable.last.toBlockingObservable.single), +    assertEquals(1, List(1).toObservable.single.toBlockingObservable.single), +, +    assertEquals(1, List(1, 2, 3, 4).toObservable.toBlockingObservable.head), +    assertEquals(1, List(1, 2, 3, 4).toObservable.toBlockingObservable.first), +    assertEquals(4, List(1, 2, 3, 4).toObservable.toBlockingObservable.last), +    assertEquals(1, List(1).toObservable.toBlockingObservable.single), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Returns an Observable that emits only the very first item emitted by the source Observable, or raises an, +   * `IllegalArgumentException` if the source Observable is empty., +   * <p>, +   * @return an Observable that emits only the very first item emitted by the source Observable, or raises an, +   *         `IllegalArgumentException` if the source Observable is empty, +   * @see <a href="https://github.com/Netflix/RxJava/wiki/Filtering-Observables#wiki-first">RxJava Wiki: first()</a>, +   * @see "MSDN: Observable.firstAsync()", +  def first: Observable[T] = {, +    toScalaObservable[T](asJavaObservable.first), +   * Returns an Observable that emits only the very first item emitted by the source Observable, or raises an, +   * `IllegalArgumentException` if the source Observable is empty., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/first.png">, +   * , +   * @return an Observable that emits only the very first item emitted by the source Observable, or raises an, +   *         `IllegalArgumentException` if the source Observable is empty, +   * @see <a href="https://github.com/Netflix/RxJava/wiki/Filtering-Observables#wiki-first">RxJava Wiki: first()</a>, +   * @see "MSDN: Observable.firstAsync()", +   * @see [[Observable.first]], +  def head: Observable[T] = first, +  /**, +   * Returns an Observable that emits the last item emitted by the source Observable or notifies observers of, +   * an `IllegalArgumentException` if the source Observable is empty., +   * , +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/last.png">, +   * , +   * @return an Observable that emits the last item from the source Observable or notifies observers of an, +   *         error, +   * @see <a href="https://github.com/Netflix/RxJava/wiki/Filtering-Observable-Operators#wiki-last">RxJava Wiki: last()</a>, +   * @see "MSDN: Observable.lastAsync()", +  def last: Observable[T] = {, +    toScalaObservable[T](asJavaObservable.last), +  }, +, +  /**, +   * If the source Observable completes after emitting a single item, return an Observable that emits that, +   * item. If the source Observable emits more than one item or no items, throw an `IllegalArgumentException`., +   * , +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/single.png">, +   * , +   * @return an Observable that emits the single item emitted by the source Observable, +   * @throws IllegalArgumentException, +   *             if the source emits more than one item or no items, +   * @see <a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#wiki-single-and-singleordefault">RxJava Wiki: single()</a>, +   * @see "MSDN: Observable.singleAsync()", +   */, +  def single: Observable[T] = {, +    toScalaObservable[T](asJavaObservable.single), +  }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def firstLastSingleExample() {, +    assertEquals(1, List(1, 2, 3, 4).toObservable.head.toBlockingObservable.single), +    assertEquals(1, List(1, 2, 3, 4).toObservable.first.toBlockingObservable.single), +    assertEquals(4, List(1, 2, 3, 4).toObservable.last.toBlockingObservable.single), +    assertEquals(1, List(1).toObservable.single.toBlockingObservable.single), +, +    assertEquals(1, List(1, 2, 3, 4).toObservable.toBlockingObservable.head), +    assertEquals(1, List(1, 2, 3, 4).toObservable.toBlockingObservable.first), +    assertEquals(4, List(1, 2, 3, 4).toObservable.toBlockingObservable.last), +    assertEquals(1, List(1).toObservable.toBlockingObservable.single), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Returns an Observable that emits only the very first item emitted by the source Observable, or raises an, +   * `IllegalArgumentException` if the source Observable is empty., +   * <p>, +   * @return an Observable that emits only the very first item emitted by the source Observable, or raises an, +   *         `IllegalArgumentException` if the source Observable is empty, +   * @see <a href="https://github.com/Netflix/RxJava/wiki/Filtering-Observables#wiki-first">RxJava Wiki: first()</a>, +   * @see "MSDN: Observable.firstAsync()", +  def first: Observable[T] = {, +    toScalaObservable[T](asJavaObservable.first), +   * Returns an Observable that emits only the very first item emitted by the source Observable, or raises an]