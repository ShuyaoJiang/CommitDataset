[+++ b/src/main/java/io/reactivex/Flowable.java, +     * If the {@code Flowable} may emit more than one item, use {@code Flowable.toList().toFuture()}., +     * to avoid same-pool deadlock because requests may pile up behind an eager/blocking emitter., +     * because requests may pile up behind an eager/blocking emitter., +     * Returns a Single that emits a single item, a list composed of all the items emitted by the, +     * finite upstream source Publisher., +     * Note that this operator requires the upstream to signal {@code onComplete} for the accumulated list to, +     * be emitted. Sources that are infinite and never complete will never emit anything through this, +     * operator and an infinite source may lead to a fatal {@code OutOfMemoryError}., +     * Returns a Single that emits a single item, a list composed of all the items emitted by the, +     * finite source Publisher., +     * Note that this operator requires the upstream to signal {@code onComplete} for the accumulated list to, +     * be emitted. Sources that are infinite and never complete will never emit anything through this, +     * operator and an infinite source may lead to a fatal {@code OutOfMemoryError}., +     * Returns a Single that emits a single item, a list composed of all the items emitted by the, +     * finite source Publisher., +     * Note that this operator requires the upstream to signal {@code onComplete} for the accumulated collection to, +     * be emitted. Sources that are infinite and never complete will never emit anything through this, +     * operator and an infinite source may lead to a fatal {@code OutOfMemoryError}., +++ b/src/main/java/io/reactivex/Flowable.java, +     * If the {@code Flowable} may emit more than one item, use {@code Flowable.toList().toFuture()}., +     * to avoid same-pool deadlock because requests may pile up behind an eager/blocking emitter., +     * because requests may pile up behind an eager/blocking emitter., +     * Returns a Single that emits a single item, a list composed of all the items emitted by the, +     * finite upstream source Publisher., +     * Note that this operator requires the upstream to signal {@code onComplete} for the accumulated list to, +     * be emitted. Sources that are infinite and never complete will never emit anything through this, +     * operator and an infinite source may lead to a fatal {@code OutOfMemoryError}., +     * Returns a Single that emits a single item, a list composed of all the items emitted by the, +     * finite source Publisher., +     * Note that this operator requires the upstream to signal {@code onComplete} for the accumulated list to, +     * be emitted. Sources that are infinite and never complete will never emit anything through this, +     * operator and an infinite source may lead to a fatal {@code OutOfMemoryError}., +     * Returns a Single that emits a single item, a list composed of all the items emitted by the, +     * finite source Publisher., +     * Note that this operator requires the upstream to signal {@code onComplete} for the accumulated collection to, +     * be emitted. Sources that are infinite and never complete will never emit anything through this, +     * operator and an infinite source may lead to a fatal {@code OutOfMemoryError}., +++ b/src/main/java/io/reactivex/Observable.java, +     * If the {@code Observable} may emit more than one item, use {@code Observable.toList().toFuture()}., +     * Returns a Single that emits a single item, a list composed of all the items emitted by the, +     * finite source ObservableSource., +     * Note that this operator requires the upstream to signal {@code onComplete} for the accumulated list to, +     * be emitted. Sources that are infinite and never complete will never emit anything through this, +     * operator and an infinite source may lead to a fatal {@code OutOfMemoryError}., +     * Returns a Single that emits a single item, a list composed of all the items emitted by the, +     * finite source ObservableSource., +     * Note that this operator requires the upstream to signal {@code onComplete} for the accumulated list to, +     * be emitted. Sources that are infinite and never complete will never emit anything through this, +     * operator and an infinite source may lead to a fatal {@code OutOfMemoryError}., +     * Returns a Single that emits a single item, a list composed of all the items emitted by the, +     * finite source ObservableSource., +     * Note that this operator requires the upstream to signal {@code onComplete} for the accumulated collection to, +     * be emitted. Sources that are infinite and never complete will never emit anything through this, +     * operator and an infinite source may lead to a fatal {@code OutOfMemoryError}.]