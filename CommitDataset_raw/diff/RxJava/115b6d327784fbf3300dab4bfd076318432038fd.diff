[+++ b/rxjava-core/src/test/java/rx/operators/OperationMapTest.java, +    /**, +     * This is testing how unsubscribe behavior is handled when an error occurs in a user provided function, +     * and the source is unsubscribed from ... but ignores or can't receive the unsubscribe as it is synchronous., +     */, +    public void testMapContainingErrorWithSequenceThatDoesntUnsubscribe() {, +        // We should have only returned 1 value: "one", +        // Since the unsubscribe doesn't propagate, we will actually be sent all events and need, +        // to ignore all after the first failure., +    /**, +     * While mapping over range(1,1).last() we expect IllegalArgumentException since the sequence is empty., +     */, +    @Test(expected = IllegalArgumentException.class), +    public void testErrorPassesThruMap() {, +        Observable.range(1,0).last().map(new Func1<Integer, Integer>() {, +, +            @Override, +            public Integer call(Integer i) {, +                return i;, +            }, +            , +        }).toBlockingObservable().single();, +    }, +    , +    /**, +     * We expect IllegalStateException to pass thru map., +     */, +    @Test(expected = IllegalStateException.class), +    public void testErrorPassesThruMap2() {, +        Observable.error(new IllegalStateException()).map(new Func1<Object, Object>() {, +, +            @Override, +            public Object call(Object i) {, +                return i;, +            }, +            , +        }).toBlockingObservable().single();, +    }, +    , +    /**, +     * We expect an ArithmeticException exception here because last() emits a single value, +     * but then we divide by 0., +     */, +    @Test(expected = ArithmeticException.class), +    public void testMapWithErrorInFunc() {, +        Observable.range(1,1).last().map(new Func1<Integer, Integer>() {, +, +            @Override, +            public Integer call(Integer i) {, +                return i/0;, +            }, +            , +        }).toBlockingObservable().single();, +    }, +]