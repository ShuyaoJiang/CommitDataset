[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def ambExample(): Unit = {, +    val o1 = List(100L, 200L, 300L).toObservable.delay(4 seconds), +    val o2 = List(1000L, 2000L, 3000L).toObservable.delay(2 seconds), +    val result = o1.amb(o2).toBlockingObservable.toList, +    println(result), +  }, +, +  @Test def delayExample(): Unit = {, +    val o = List(100L, 200L, 300L).toObservable.delay(2 seconds), +    val result = o.toBlockingObservable.toList, +    println(result), +  }, +, +  @Test def delayExample2(): Unit = {, +    val o = List(100L, 200L, 300L).toObservable.delay(2 seconds, IOScheduler()), +    val result = o.toBlockingObservable.toList, +    println(result), +  }, +, +  @Test def delaySubscriptionExample(): Unit = {, +    val o = List(100L, 200L, 300L).toObservable.delaySubscription(2 seconds), +    val result = o.toBlockingObservable.toList, +    println(result), +  }, +, +  @Test def delaySubscriptionExample2(): Unit = {, +    val o = List(100L, 200L, 300L).toObservable.delaySubscription(2 seconds, IOScheduler()), +    val result = o.toBlockingObservable.toList, +    println(result), +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def ambExample(): Unit = {, +    val o1 = List(100L, 200L, 300L).toObservable.delay(4 seconds), +    val o2 = List(1000L, 2000L, 3000L).toObservable.delay(2 seconds), +    val result = o1.amb(o2).toBlockingObservable.toList, +    println(result), +  }, +, +  @Test def delayExample(): Unit = {, +    val o = List(100L, 200L, 300L).toObservable.delay(2 seconds), +    val result = o.toBlockingObservable.toList, +    println(result), +  }, +, +  @Test def delayExample2(): Unit = {, +    val o = List(100L, 200L, 300L).toObservable.delay(2 seconds, IOScheduler()), +    val result = o.toBlockingObservable.toList, +    println(result), +  }, +, +  @Test def delaySubscriptionExample(): Unit = {, +    val o = List(100L, 200L, 300L).toObservable.delaySubscription(2 seconds), +    val result = o.toBlockingObservable.toList, +    println(result), +  }, +, +  @Test def delaySubscriptionExample2(): Unit = {, +    val o = List(100L, 200L, 300L).toObservable.delaySubscription(2 seconds, IOScheduler()), +    val result = o.toBlockingObservable.toList, +    println(result), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +, +  /**, +   * Given two Observables, mirror the one that first emits an item., +   *, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/amb.png">, +   *, +   * @param that, +   *            an Observable competing to react first, +   * @return an Observable that emits the same sequence of items as whichever of `this` or `that` first emitted an item., +   */, +  def amb[U >: T](that: Observable[U]): Observable[U] = {, +    val thisJava: rx.Observable[_ <: U] = this.asJavaObservable, +    val thatJava: rx.Observable[_ <: U] = that.asJavaObservable, +    toScalaObservable[U](rx.Observable.amb(thisJava, thatJava)), +  }, +, +  /**, +   * Returns an Observable that emits the items emitted by the source Observable shifted forward in time by a, +   * specified delay. Error notifications from the source Observable are not delayed., +   *, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/delay.png">, +   * , +   * @param delay the delay to shift the source by, +   * @return the source Observable shifted in time by the specified delay, +   */, +  def delay(delay: Duration): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.delay(delay.length, delay.unit)), +  }, +, +  /**, +   * Returns an Observable that emits the items emitted by the source Observable shifted forward in time by a, +   * specified delay. Error notifications from the source Observable are not delayed., +   *, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/delay.s.png">, +   * ]