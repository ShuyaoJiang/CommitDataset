[+++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                        if (emitted > 0) {, +                        }, +            if (!completed) {, +                innerError(e, true);, +            }, +        private void innerError(Throwable e, boolean parent) {, +                    if (!parent) {, +                    }, +        @SuppressWarnings("unused"), +                parentSubscriber.innerError(e, false);, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                        if (emitted > 0) {, +                        }, +            if (!completed) {, +                innerError(e, true);, +            }, +        private void innerError(Throwable e, boolean parent) {, +                    if (!parent) {, +                    }, +        @SuppressWarnings("unused"), +                parentSubscriber.innerError(e, false);, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +        run.add(Subscriptions.from(f));, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                        if (emitted > 0) {, +                        }, +            if (!completed) {, +                innerError(e, true);, +            }, +        private void innerError(Throwable e, boolean parent) {, +                    if (!parent) {, +                    }, +        @SuppressWarnings("unused"), +                parentSubscriber.innerError(e, false);, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +        run.add(Subscriptions.from(f));, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +    volatile int once;, +    static final AtomicIntegerFieldUpdater<ScheduledAction> ONCE_UPDATER, +            = AtomicIntegerFieldUpdater.newUpdater(ScheduledAction.class, "once");, +        if (ONCE_UPDATER.compareAndSet(this, 0, 1)) {, +    }, +     * @warn javadoc missing, +     * @param s, +     * @warn param "s" undescribed, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                        if (emitted > 0) {, +                        }, +            if (!completed) {, +                innerError(e, true);, +            }, +        private void innerError(Throwable e, boolean parent) {, +                    if (!parent) {, +                    }, +        @SuppressWarnings("unused"), +                parentSubscriber.innerError(e, false);, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +        run.add(Subscriptions.from(f));, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +    volatile int once;, +    static final AtomicIntegerFieldUpdater<ScheduledAction> ONCE_UPDATER, +            = AtomicIntegerFieldUpdater.newUpdater(ScheduledAction.class, "once");, +        if (ONCE_UPDATER.compareAndSet(this, 0, 1)) {, +    }, +     * @warn javadoc missing, +     * @param s, +     * @warn param "s" undescribed, +++ b/src/test/java/rx/internal/operators/OperatorMergeDelayErrorTest.java, +        for (int i = 0; i < 50; i++) {, +            @SuppressWarnings("unchecked"), +            Observer<String> stringObserver = mock(Observer.class);, +            , +            System.out.println("testErrorInParentObservableDelayed | " + i);, +    }, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                        if (emitted > 0) {, +                        }, +            if (!completed) {, +                innerError(e, true);, +            }, +        private void innerError(Throwable e, boolean parent) {, +                    if (!parent) {, +                    }, +        @SuppressWarnings("unused"), +                parentSubscriber.innerError(e, false);, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +        run.add(Subscriptions.from(f));, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +    volatile int once;, +    static final AtomicIntegerFieldUpdater<ScheduledAction> ONCE_UPDATER, +            = AtomicIntegerFieldUpdater.newUpdater(ScheduledAction.class, "once");, +        if (ONCE_UPDATER.compareAndSet(this, 0, 1)) {, +    }, +     * @warn javadoc missing, +     * @param s, +     * @warn param "s" undescribed, +++ b/src/test/java/rx/internal/operators/OperatorMergeDelayErrorTest.java, +        for (int i = 0; i < 50; i++) {, +            @SuppressWarnings("unchecked")]