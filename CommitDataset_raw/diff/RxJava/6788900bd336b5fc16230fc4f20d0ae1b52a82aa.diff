[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationCast;, +     * Converts the elements of an observable sequence to the specified type., +     *, +     * @param klass, +     *            The target class type which the elements will be converted to., +     *, +     * @return An observable sequence that contains each element of the source, +     *         sequence converted to the specified type., +     *, +     * @see <a, +     *      href="http://msdn.microsoft.com/en-us/library/hh211842(v=vs.103).aspx">MSDN:, +     *      Observable.Cast</a>, +     */, +    public <R> Observable<R> cast(final Class<R> klass) {, +        return create(OperationCast.cast(this, klass));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationCast;, +     * Converts the elements of an observable sequence to the specified type., +     *, +     * @param klass, +     *            The target class type which the elements will be converted to., +     *, +     * @return An observable sequence that contains each element of the source, +     *         sequence converted to the specified type., +     *, +     * @see <a, +     *      href="http://msdn.microsoft.com/en-us/library/hh211842(v=vs.103).aspx">MSDN:, +     *      Observable.Cast</a>, +     */, +    public <R> Observable<R> cast(final Class<R> klass) {, +        return create(OperationCast.cast(this, klass));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationCast.java, +package rx.operators;, +, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +import org.junit.Test;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.util.functions.Func1;, +, +/**, + * Converts the elements of an observable sequence to the specified type., + */, +public class OperationCast {, +, +    public static <T, R> OnSubscribeFunc<R> cast(, +            Observable<? extends T> source, final Class<R> klass) {, +        return OperationMap.map(source, new Func1<T, R>() {, +            @SuppressWarnings("unchecked"), +            public R call(T t) {, +                if (klass.isAssignableFrom(t.getClass())) {, +                    return (R) t;, +                } else {, +                    throw new ClassCastException(t.getClass(), +                            + " cannot be cast to " + klass);, +                }, +            }, +        });, +    }, +, +    public static class UnitTest {, +, +        @Test, +        public void testCast() {, +            Observable<?> source = Observable.from(1, 2);, +            Observable<Integer> observable = Observable.create(cast(source,, +                    Integer.class));, +, +            @SuppressWarnings("unchecked"), +            Observer<Integer> aObserver = mock(Observer.class);, +            observable.subscribe(aObserver);, +            verify(aObserver, times(1)).onNext(1);, +            verify(aObserver, times(1)).onNext(1);, +            verify(aObserver, never()).onError(, +                    org.mockito.Matchers.any(Throwable.class));, +            verify(aObserver, times(1)).onCompleted();, +        }, +, +        @Test, +        public void testCastWithWrongType() {, +            Observable<?> source = Observable.from(1, 2);, +            Observable<Boolean> observable = Observable.create(cast(source,, +                    Boolean.class));, +, +            @SuppressWarnings("unchecked"), +            Observer<Boolean> aObserver = mock(Observer.class);, +            observable.subscribe(aObserver);]