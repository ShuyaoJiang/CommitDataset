[+++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +import org.mockito.Mockito;, +import rx.testing.UnsubscribeTester;, +import rx.util.functions.Func0;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +, +        private final Exception testException = new Exception();, +, +        @Test, +        public void testCompleted() {, +            PublishSubject<Object> subject = PublishSubject.create();, +, +            Observer<String> aObserver = mock(Observer.class);, +            subject.subscribe(aObserver);, +, +            subject.onNext("one");, +            subject.onNext("two");, +            subject.onNext("three");, +            subject.onCompleted();, +, +            Observer<String> anotherObserver = mock(Observer.class);, +            subject.subscribe(anotherObserver);, +, +            subject.onNext("four");, +            subject.onCompleted();, +            subject.onError(new Exception());, +, +            assertCompletedObserver(aObserver);, +// todo bug?            assertNeverObserver(anotherObserver);, +        }, +, +        private void assertCompletedObserver(Observer<String> aObserver), +        {, +            verify(aObserver, times(1)).onNext("one");, +            verify(aObserver, times(1)).onNext("two");, +            verify(aObserver, times(1)).onNext("three");, +            verify(aObserver, Mockito.never()).onError(any(Exception.class));, +            verify(aObserver, times(1)).onCompleted();, +        }, +, +        private void assertNeverObserver(Observer<String> aObserver), +        {, +            verify(aObserver, Mockito.never()).onNext(any(String.class));, +            verify(aObserver, Mockito.never()).onError(any(Exception.class));, +            verify(aObserver, Mockito.never()).onCompleted();, +        }, +, +        @Test, +        public void testError() {, +            PublishSubject<Object> subject = PublishSubject.create();, +, +            Observer<String> aObserver = mock(Observer.class);, +            subject.subscribe(aObserver);, +, +            subject.onNext("one");, +            subject.onNext("two");, +            subject.onNext("three");, +            subject.onError(testException);, +, +            Observer<String> anotherObserver = mock(Observer.class);, +            subject.subscribe(anotherObserver);, +, +            subject.onNext("four");, +            subject.onError(new Exception());, +            subject.onCompleted();, +, +            assertErrorObserver(aObserver);, +// todo bug?            assertNeverObserver(anotherObserver);, +        }, +, +        private void assertErrorObserver(Observer<String> aObserver), +        {, +            verify(aObserver, times(1)).onNext("one");, +            verify(aObserver, times(1)).onNext("two");, +            verify(aObserver, times(1)).onNext("three");, +            verify(aObserver, times(1)).onError(testException);, +            verify(aObserver, Mockito.never()).onCompleted();, +        }, +, +, +        @Test, +        public void testSubscribeMidSequence() {, +            PublishSubject<Object> subject = PublishSubject.create();, +, +            Observer<String> aObserver = mock(Observer.class);, +            subject.subscribe(aObserver);, +, +            subject.onNext("one");, +            subject.onNext("two");, +, +            assertObservedUntilTwo(aObserver);, +, +            Observer<String> anotherObserver = mock(Observer.class);, +            subject.subscribe(anotherObserver);, +, +            subject.onNext("three");]