[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.observables.ConnectableObservable;, +import rx.operators.OperatorMulticast;, +import rx.subjects.Subject;, +     * Returns a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     *, +     * @param subject the subject to push source elements into., +     * @param <R> result type, +     * @return a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     */, +    public <R> ConnectableObservable<R> multicast(Subject<T, R> subject) {, +        return multicast(this, subject);, +    }, +, +    /**, +     * Returns a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     *, +     * @param source the source sequence whose elements will be pushed into the specified subject., +     * @param subject the subject to push source elements into., +     * @param <T> source type, +     * @param <R> result type, +     * @return a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     */, +    public static <T, R> ConnectableObservable<R> multicast(Observable<T> source, final Subject<T, R> subject) {, +        return OperatorMulticast.multicast(source, subject);, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.observables.ConnectableObservable;, +import rx.operators.OperatorMulticast;, +import rx.subjects.Subject;, +     * Returns a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     *, +     * @param subject the subject to push source elements into., +     * @param <R> result type, +     * @return a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     */, +    public <R> ConnectableObservable<R> multicast(Subject<T, R> subject) {, +        return multicast(this, subject);, +    }, +, +    /**, +     * Returns a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     *, +     * @param source the source sequence whose elements will be pushed into the specified subject., +     * @param subject the subject to push source elements into., +     * @param <T> source type, +     * @param <R> result type, +     * @return a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     */, +    public static <T, R> ConnectableObservable<R> multicast(Observable<T> source, final Subject<T, R> subject) {, +        return OperatorMulticast.multicast(source, subject);, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.observables.ConnectableObservable;, +import rx.operators.OperatorMulticast;, +import rx.subjects.Subject;, +     * Returns a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     *, +     * @param subject the subject to push source elements into., +     * @param <R> result type, +     * @return a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     */, +    public <R> ConnectableObservable<R> multicast(Subject<T, R> subject) {, +        return multicast(this, subject);, +    }, +, +    /**, +     * Returns a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     *, +     * @param source the source sequence whose elements will be pushed into the specified subject., +     * @param subject the subject to push source elements into., +     * @param <T> source type, +     * @param <R> result type, +     * @return a connectable observable sequence that upon connection causes the source sequence to push results into the specified subject., +     */, +    public static <T, R> ConnectableObservable<R> multicast(Observable<T> source, final Subject<T, R> subject) {, +        return OperatorMulticast.multicast(source, subject);, +    }, +, +    /**]