[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnLifecycle.java, +import org.reactivestreams.*;, +import io.reactivex.Flowable;, +import io.reactivex.exceptions.Exceptions;, +import io.reactivex.functions.*;, +import io.reactivex.internal.subscriptions.*;, +import io.reactivex.plugins.RxJavaPlugins;, +, +    static final class SubscriptionLambdaSubscriber<T> implements Subscriber<T>, Subscription {, +        final Subscriber<? super T> actual;, +        final Consumer<? super Subscription> onSubscribe;, +        final LongConsumer onRequest;, +        final Action onCancel;, +, +        Subscription s;, +, +        public SubscriptionLambdaSubscriber(Subscriber<? super T> actual,, +                Consumer<? super Subscription> onSubscribe,, +                LongConsumer onRequest,, +                Action onCancel) {, +            this.actual = actual;, +            this.onSubscribe = onSubscribe;, +            this.onCancel = onCancel;, +            this.onRequest = onRequest;, +        }, +, +        @Override, +        public void onSubscribe(Subscription s) {, +            // this way, multiple calls to onSubscribe can show up in tests that use doOnSubscribe to validate behavior, +            try {, +                onSubscribe.accept(s);, +            } catch (Throwable e) {, +                Exceptions.throwIfFatal(e);, +                s.cancel();, +                RxJavaPlugins.onError(e);, +                EmptySubscription.error(e, actual);, +                return;, +            }, +            if (SubscriptionHelper.validate(this.s, s)) {, +                this.s = s;, +                actual.onSubscribe(this);, +            }, +        }, +, +        @Override, +        public void onNext(T t) {, +            actual.onNext(t);, +        }, +, +        @Override, +        public void onError(Throwable t) {, +            actual.onError(t);, +        }, +, +        @Override, +        public void onComplete() {, +            actual.onComplete();, +        }, +, +        @Override, +        public void request(long n) {, +            try {, +                onRequest.accept(n);, +            } catch (Throwable e) {, +                Exceptions.throwIfFatal(e);, +                RxJavaPlugins.onError(e);, +            }, +            s.request(n);, +        }, +, +        @Override, +        public void cancel() {, +            try {, +                onCancel.run();, +            } catch (Throwable e) {, +                Exceptions.throwIfFatal(e);, +                RxJavaPlugins.onError(e);, +            }, +            s.cancel();, +        }, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnLifecycle.java, +import org.reactivestreams.*;, +import io.reactivex.Flowable;, +import io.reactivex.exceptions.Exceptions;, +import io.reactivex.functions.*;, +import io.reactivex.internal.subscriptions.*;, +import io.reactivex.plugins.RxJavaPlugins;, +, +    static final class SubscriptionLambdaSubscriber<T> implements Subscriber<T>, Subscription {, +        final Subscriber<? super T> actual;, +        final Consumer<? super Subscription> onSubscribe;, +        final LongConsumer onRequest;, +        final Action onCancel;, +, +        Subscription s;, +, +        public SubscriptionLambdaSubscriber(Subscriber<? super T> actual,, +                Consumer<? super Subscription> onSubscribe,, +                LongConsumer onRequest,]