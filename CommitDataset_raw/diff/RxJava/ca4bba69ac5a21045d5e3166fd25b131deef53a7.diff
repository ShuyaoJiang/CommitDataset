[+++ b/src/main/java/io/reactivex/Completable.java, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +++ b/src/main/java/io/reactivex/Completable.java, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.verifyPositive(count, "count");, +        ObjectHelper.verifyPositive(skip, "skip");, +        ObjectHelper.requireNonNull(bufferSupplier, "bufferSupplier is null");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +++ b/src/main/java/io/reactivex/Completable.java, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.verifyPositive(count, "count");, +        ObjectHelper.verifyPositive(skip, "skip");, +        ObjectHelper.requireNonNull(bufferSupplier, "bufferSupplier is null");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAutoConnect.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +++ b/src/main/java/io/reactivex/Completable.java, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.verifyPositive(count, "count");, +        ObjectHelper.verifyPositive(skip, "skip");, +        ObjectHelper.requireNonNull(bufferSupplier, "bufferSupplier is null");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAutoConnect.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBuffer.java, +        this.bufferSupplier = bufferSupplier;, +++ b/src/main/java/io/reactivex/Completable.java, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.verifyPositive(count, "count");, +        ObjectHelper.verifyPositive(skip, "skip");, +        ObjectHelper.requireNonNull(bufferSupplier, "bufferSupplier is null");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAutoConnect.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBuffer.java, +        this.bufferSupplier = bufferSupplier;, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCache.java, +import io.reactivex.internal.functions.ObjectHelper;, +        ObjectHelper.verifyPositive(capacityHint, "capacityHint");, +++ b/src/main/java/io/reactivex/Completable.java, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.verifyPositive(count, "count");, +        ObjectHelper.verifyPositive(skip, "skip");, +        ObjectHelper.requireNonNull(bufferSupplier, "bufferSupplier is null");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAutoConnect.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBuffer.java, +        this.bufferSupplier = bufferSupplier;, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCache.java, +import io.reactivex.internal.functions.ObjectHelper;, +        ObjectHelper.verifyPositive(capacityHint, "capacityHint");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCombineLatest.java, +        this.array = array;, +        this.combiner = combiner;, +        this.iterable = iterable;, +        this.combiner = combiner;, +++ b/src/main/java/io/reactivex/Completable.java, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.verifyPositive(maxConcurrency, "maxConcurrency");, +++ b/src/main/java/io/reactivex/Flowable.java, +        ObjectHelper.verifyPositive(count, "count");, +        ObjectHelper.verifyPositive(skip, "skip");, +        ObjectHelper.requireNonNull(bufferSupplier, "bufferSupplier is null");, +        ObjectHelper.verifyPositive(prefetch, "prefetch");, +        ObjectHelper.requireNonNull(mapper, "mapper is null");, +        ObjectHelper.verifyPositive(bufferSize, "bufferSize");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAutoConnect.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBuffer.java, +        this.bufferSupplier = bufferSupplier;, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCache.java, +import io.reactivex.internal.functions.ObjectHelper;, +        ObjectHelper.verifyPositive(capacityHint, "capacityHint");]