[+++ b/src/main/java/rx/internal/operators/OperatorSwitch.java, +import rx.internal.producers.ProducerArbiter;, +    , +    , +        final SerializedSubscriber<T> serializedChild;, +        final ProducerArbiter arbiter;, +        , +        InnerSubscriber<T> currentSubscriber;, +        SwitchSubscriber(Subscriber<? super T> child) {, +            serializedChild = new SerializedSubscriber<T>(child);, +            arbiter = new ProducerArbiter();, +                    if (n > 0) {, +                        arbiter.request(n);, +                currentSubscriber = new InnerSubscriber<T>(id, arbiter, this);, +            serializedChild.onError(e);, +            serializedChild.onCompleted();, +        void emit(T value, int id, InnerSubscriber<T> innerSubscriber) {, +                        serializedChild.onNext(value);, +                        arbiter.produced(1);                        , +                } while (!serializedChild.isUnsubscribed());, +                    serializedChild.onCompleted();, +                    serializedChild.onError(nl.getError(o));, +                    serializedChild.onNext(t);, +                    arbiter.produced(1);, +            serializedChild.onError(e);, +            serializedChild.onCompleted();, +    }, +    private static final class InnerSubscriber<T> extends Subscriber<T> {, +        private final ProducerArbiter arbiter;, +        private final SwitchSubscriber<T> parent;, +, +        InnerSubscriber(int id, ProducerArbiter arbiter, SwitchSubscriber<T> parent) {, +            this.arbiter = arbiter;, +            this.parent = parent;, +        public void setProducer(Producer p) {, +            arbiter.setProducer(p);, +            parent.emit(t, id, this);, +            parent.error(e, id);, +            parent.complete(id);, +, +++ b/src/main/java/rx/internal/operators/OperatorSwitch.java, +import rx.internal.producers.ProducerArbiter;, +    , +    , +        final SerializedSubscriber<T> serializedChild;, +        final ProducerArbiter arbiter;, +        , +        InnerSubscriber<T> currentSubscriber;, +        SwitchSubscriber(Subscriber<? super T> child) {, +            serializedChild = new SerializedSubscriber<T>(child);, +            arbiter = new ProducerArbiter();, +                    if (n > 0) {, +                        arbiter.request(n);, +                currentSubscriber = new InnerSubscriber<T>(id, arbiter, this);, +            serializedChild.onError(e);, +            serializedChild.onCompleted();, +        void emit(T value, int id, InnerSubscriber<T> innerSubscriber) {, +                        serializedChild.onNext(value);, +                        arbiter.produced(1);                        , +                } while (!serializedChild.isUnsubscribed());, +                    serializedChild.onCompleted();, +                    serializedChild.onError(nl.getError(o));, +                    serializedChild.onNext(t);, +                    arbiter.produced(1);, +            serializedChild.onError(e);, +            serializedChild.onCompleted();, +    }, +    private static final class InnerSubscriber<T> extends Subscriber<T> {, +        private final ProducerArbiter arbiter;, +        private final SwitchSubscriber<T> parent;, +, +        InnerSubscriber(int id, ProducerArbiter arbiter, SwitchSubscriber<T> parent) {, +            this.arbiter = arbiter;, +            this.parent = parent;, +        public void setProducer(Producer p) {, +            arbiter.setProducer(p);, +            parent.emit(t, id, this);, +            parent.error(e, id);, +            parent.complete(id);, +, +++ b/src/test/java/rx/internal/operators/OperatorSwitchIfEmptyTest.java, +++ b/src/main/java/rx/internal/operators/OperatorSwitch.java, +import rx.internal.producers.ProducerArbiter;, +    , +    , +        final SerializedSubscriber<T> serializedChild;, +        final ProducerArbiter arbiter;, +        , +        InnerSubscriber<T> currentSubscriber;, +        SwitchSubscriber(Subscriber<? super T> child) {, +            serializedChild = new SerializedSubscriber<T>(child);, +            arbiter = new ProducerArbiter();, +                    if (n > 0) {, +                        arbiter.request(n);, +                currentSubscriber = new InnerSubscriber<T>(id, arbiter, this);, +            serializedChild.onError(e);, +            serializedChild.onCompleted();, +        void emit(T value, int id, InnerSubscriber<T> innerSubscriber) {, +                        serializedChild.onNext(value);, +                        arbiter.produced(1);                        ]