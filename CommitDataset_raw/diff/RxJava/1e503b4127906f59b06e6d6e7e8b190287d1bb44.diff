[+++ b/rxjava-core/src/main/java/rx/operators/OperatorRetry.java, +import rx.functions.Action0;, +import rx.subscriptions.Subscriptions;, +                        // new subscription each time so if it unsubscribes itself it does not prevent retries, +                        // by unsubscribing the child subscription, +++ b/rxjava-core/src/main/java/rx/operators/OperatorRetry.java, +import rx.functions.Action0;, +import rx.subscriptions.Subscriptions;, +                        // new subscription each time so if it unsubscribes itself it does not prevent retries, +                        // by unsubscribing the child subscription, +++ b/rxjava-core/src/test/java/rx/operators/OperatorRetryTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import rx.Observable.OnSubscribe;, +import rx.observers.TestSubscriber;, +    public static class FuncWithErrors implements Observable.OnSubscribe<String> {, +        public void call(Subscriber<? super String> o) {, +    public void testRetryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed() throws InterruptedException {, +        OnSubscribe<String> onSubscribe = new OnSubscribe<String>() {, +            public void call(Subscriber<? super String> s) {, +                s.add(new Subscription() {, +                });, +    @Test, +    public void testSourceObservableCallsUnsubscribe() throws InterruptedException {, +        final AtomicInteger subsCount = new AtomicInteger(0);, +, +        final TestSubscriber<String> ts = new TestSubscriber<String>();, +, +        OnSubscribe<String> onSubscribe = new OnSubscribe<String>() {, +            @Override, +            public void call(Subscriber<? super String> s) {, +                // if isUnsubscribed is true that means we have a bug such as https://github.com/Netflix/RxJava/issues/1024, +                if (!s.isUnsubscribed()) {, +                    subsCount.incrementAndGet();, +                    s.onError(new RuntimeException("failed"));, +                    // it unsubscribes the child directly, +                    // this simulates various error/completion scenarios that could occur, +                    // or just a source that proactively triggers cleanup, +                    s.unsubscribe();, +                }, +            }, +        };, +, +        Observable.create(onSubscribe).retry(3).subscribe(ts);, +        assertEquals(4, subsCount.get()); // 1 + 3 retries, +    }, +, +    @Test(timeout = 1000), +    @Test(timeout = 1000)]