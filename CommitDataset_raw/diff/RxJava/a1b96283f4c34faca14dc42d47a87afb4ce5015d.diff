[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTake.java, +import io.reactivex.plugins.RxJavaPlugins;, +            } else {, +                RxJavaPlugins.onError(t);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTake.java, +import io.reactivex.plugins.RxJavaPlugins;, +            } else {, +                RxJavaPlugins.onError(t);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableLimitTest.java, +, +    @Test, +    public void errorAfterLimitReached() {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +        try {, +            Flowable.error(new TestException()), +            .limit(0), +            .test(), +            .assertResult();, +, +            TestHelper.assertUndeliverable(errors, 0, TestException.class);, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTake.java, +import io.reactivex.plugins.RxJavaPlugins;, +            } else {, +                RxJavaPlugins.onError(t);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableLimitTest.java, +, +    @Test, +    public void errorAfterLimitReached() {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +        try {, +            Flowable.error(new TestException()), +            .limit(0), +            .test(), +            .assertResult();, +, +            TestHelper.assertUndeliverable(errors, 0, TestException.class);, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableTakeTest.java, +import static org.mockito.ArgumentMatchers.*;, +import java.util.*;, +import io.reactivex.plugins.RxJavaPlugins;, +, +    @Test, +    public void errorAfterLimitReached() {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +        try {, +            Flowable.error(new TestException()), +            .take(0), +            .test(), +            .assertResult();, +, +            TestHelper.assertUndeliverable(errors, 0, TestException.class);, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTake.java, +import io.reactivex.plugins.RxJavaPlugins;, +            } else {, +                RxJavaPlugins.onError(t);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableLimitTest.java, +, +    @Test, +    public void errorAfterLimitReached() {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +        try {, +            Flowable.error(new TestException()), +            .limit(0), +            .test(), +            .assertResult();, +, +            TestHelper.assertUndeliverable(errors, 0, TestException.class);, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableTakeTest.java, +import static org.mockito.ArgumentMatchers.*;, +import java.util.*;, +import io.reactivex.plugins.RxJavaPlugins;, +, +    @Test, +    public void errorAfterLimitReached() {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +        try {, +            Flowable.error(new TestException()), +            .take(0), +            .test(), +            .assertResult();, +, +            TestHelper.assertUndeliverable(errors, 0, TestException.class);, +        } finally {, +            RxJavaPlugins.reset();]