BUG - FEATURE: <type-ID> 

This is a degenerate modifier commit: this change set is composed of empty, incidental, and abstract methods. These methods indicate that a new feature is planned. 
 This change set is mainly composed of:  

1. Changes to package io.netty.example.http2.helloworld.multiplex.server:  

1.1. Add a class for hello world http 2 handler. It allows to:

	Handle exception caught;
	Channel read;
	Handle channel read complete;
	Handle on data read;
	Process hello world http 2 handler hello world http 2 handler on headers read;
	Send response

1.2. Add a class for http 2 or http handler. It allows to:

	Instantiate http 2 or http handler;
	Configure pipeline

1.3. Add a class for http 2 server. It allows to:

	Handle main

2. Changes to package io.netty.handler.codec.http2:  

2.1. Add a class for abstract http 2 stream frame. It allows to:

	Get stream;
	Check if abstract http 2 stream frame equals;
	Hash code

2.2. Add a class for default http 2 data frame. It allows to:

	Instantiate default http 2 data frame  with content byte buf;
	Instantiate default http 2 data frame;
	Get stream;
	Name default http 2 data frame;
	Check if default http 2 data frame is end stream;
	Get padding;
	Handle content;
	Handle initial flow controlled bytes;
	Get copy;
	Duplicate default http 2 data frame;
	Get retained duplicate;
	Replace content byte buf;
	Ref cnt;
	Handle release;
	Retain default http 2 data frame;
	Convert default http 2 data frame to string;
	Touch default http 2 data frame;
	Check if default http 2 data frame equals;
	Hash code

2.3. Add a class for default http 2 go away frame. It allows to:

	Instantiate default http 2 go away frame  with http 2 error;
	Instantiate default http 2 go away frame;
	Instantiate default http 2 go away frame  with http 2 error, content byte buf and content byte buf;
	Instantiate default http 2 go away frame  with content byte buf;
	Name default http 2 go away frame;
	Get error code;
	Handle extra stream ids;
	Set extra stream ids;
	Handle last stream id;
	Get copy;
	Duplicate default http 2 go away frame;
	Get retained duplicate;
	Replace content byte buf;
	Retain default http 2 go away frame;
	Touch default http 2 go away frame;
	Check if default http 2 go away frame equals;
	Hash code;
	Convert default http 2 go away frame to string

2.4. Add a class for default http 2 headers frame. It allows to:

	Instantiate default http 2 headers frame  with http 2 headers;
	Get stream;
	Name default http 2 headers frame;
	Get headers;
	Check if default http 2 headers frame is end stream;
	Get padding;
	Convert default http 2 headers frame to string;
	Check if default http 2 headers frame equals;
	Hash code

2.5. Add a class for default http 2 reset frame. It allows to:

	Instantiate default http 2 reset frame  with http 2 error;
	Instantiate default http 2 reset frame;
	Get stream;
	Name default http 2 reset frame;
	Get error code;
	Convert default http 2 reset frame to string;
	Check if default http 2 reset frame equals;
	Hash code

2.6. Add an interface declaration  for http 2 data frame. It allows to:

	Get padding;
	Handle content;
	Handle initial flow controlled bytes;
	Check if http 2 data frame is end stream;
	Get copy;
	Duplicate http 2 data frame;
	Get retained duplicate;
	Replace content byte buf;
	Retain http 2 data frame;
	Touch http 2 data frame;

2.7. Add an interface declaration  for http 2 frame. It allows to:

	Name http 2 frame

2.8. Add an interface declaration  for http 2 go away frame. It allows to:

	Get error code;
	Handle extra stream ids;
	Set extra stream ids;
	Handle last stream id;
	Handle content;
	Get copy;
	Duplicate http 2 go away frame;
	Get retained duplicate;
	Replace content byte buf;
	Retain http 2 go away frame;
	Touch http 2 go away frame;

2.9. Add an interface declaration  for http 2 headers frame. It allows to:

	Get headers;
	Get padding;
	Check if http 2 headers frame is end stream

2.10. Add a class for http 2 multiplex codec test. It allows to:

	Set http 2 multiplex codec test;
	Eq multiplex codec ctx;
	Tear http 2 multiplex codec test;
	Write unknown frame;
	Channel active;
	Handle new inbound stream;
	Registered ctx channel handler context;
	Read unkown frame;
	Handle header and data frames should be delivered;
	Handle frames should be multiplexed;
	Handle inbound data frame should update local flow controller;
	Handle matches;
	Handle unhandled http 2 frames should be propagated;
	Channel read should respect auto read;
	Read http 2 multiplex codec test in channel read without auto read;
	Read http 2 multiplex codec test in channel read complete without auto read;
	Use read  without auto read;
	Channel read;
	Handle channel read complete;
	Handle new outbound stream;
	Handle idle outbound stream should not write reset frame on close;
	Handle outbound stream should write reset frame on close headers sent;
	Handle outbound stream should not write reset frame on close if stream didnt exist;
	Answer invocation on mock;
	Handle inbound rst stream fire channel inactive;
	Handle stream exception triggers child channel exception and close;
	Convert stream closed error translated;
	Creating writing reading and closing outbound stream should work;
	Get failed outbound stream creation throws and closes channel;
	Handle channel closed when close listener completes;
	Handle operation complete;
	Handle channel closed when channel close promise completes;
	Handle channel closed when write future fails;
	Handle channel closed twice marks promise as successful;
	Setting channel opts and attrs;
	Handle outbound flow control writability;
	Handle writability and flow control;
	Handle channel closed when inactive fired;
	Channel inactive;
	Channel inactive happens  after exception caught events;
	Handle user event triggered;
	Handle exception caught;
	Channel unregistered;
	Call unsafe close multiple times;
	Handle end of stream does not discard data;
	Accept obj channel handler context;
	Handle child queue is drained and new data is dispatched in parent read loop auto read;
	Handle child queue is drained and new data is dispatched in parent read loop no auto read;
	Verify frames multiplexed  to correct channel;
	Eq stream id

2.11. Add an interface declaration  for http 2 reset frame. It allows to:

	Get error code

2.12. Add a class for http 2 stream channel config. It allows to:

	Instantiate http 2 stream channel config  with channel;
	Get write buffer high water mark;
	Get write buffer low water mark;
	Get message size estimator;
	Get write buffer water mark;
	Set message size estimator;
	Set write buffer high water mark;
	Set write buffer low water mark;
	Set write buffer water mark;
	Set recv byte buf  allocator recv byte buf allocator

2.13. Add an interface declaration  for http 2 stream frame. It allows to:

	Get stream;

2.14. Add a class for inbound http to http 2 adapter. It allows to:

	Instantiate inbound http to http 2 adapter  with http 2 connection, http 2 frame listener and http 2 frame listener;
	Get stream id;
	Channel read;
	Handle ctx channel handler context

