BUG - FEATURE: <type-ID> 

This is a degenerate modifier commit: this change set is composed of empty, incidental, and abstract methods. These methods indicate that a new feature is planned. This commit  includes changes to internationalization, properties or configuration files (pom.xml). 
 This change set is mainly composed of:  

1. Changes to package io.netty.buffer:  

1.1. Add a class for advanced leak aware byte buf. It allows to:

	Instantiate advanced leak aware byte buf  with byte buf, resource leak tracker and resource leak tracker;
	Instantiate advanced leak aware byte buf  with wrapped byte buf, tracked byte buf, resource leak tracker and resource leak tracker;
	Handle record leak non ref counting operation;
	Get order;
	Get slice;
	Get retained slice;
	Get retained duplicate;
	Read retained slice;
	Duplicate advanced leak aware byte buf;
	Read slice;
	Discard read bytes;
	Discard some read bytes;
	Ensure writable;
	Get boolean;
	Get byte;
	Get unsigned byte;
	Get short;
	Get unsigned short;
	Get medium;
	Get unsigned medium;
	Get int;
	Get unsigned int;
	Get advanced leak aware byte buf long;
	Get char;
	Get float;
	Get advanced leak aware byte buf double;
	Get bytes;
	Get char sequence;
	Set boolean;
	Set byte;
	Set short;
	Set medium;
	Set int;
	Set advanced leak aware byte buf long;
	Set char;
	Set float;
	Set double;
	Set bytes;
	Set advanced leak aware byte buf;
	Set char sequence;
	Read boolean;
	Read byte;
	Read unsigned byte;
	Read short;
	Read unsigned short;
	Read medium;
	Read unsigned medium;
	Read int;
	Read unsigned int;
	Read advanced leak aware byte buf long;
	Read char;
	Read float;
	Read double;
	Read bytes;
	Read char sequence;
	Skip bytes;
	Write boolean;
	Write byte;
	Write short;
	Write medium;
	Write int;
	Write advanced leak aware byte buf long;
	Write char;
	Write float;
	Write double;
	Write bytes;
	Write advanced leak aware byte buf;
	Get index of;
	Get bytes before;
	Process advanced leak aware byte buf advanced leak aware byte buf for each byte;
	Process advanced leak aware byte buf advanced leak aware byte buf for each byte desc;
	Get copy;
	Handle nio buffer count;
	Handle nio buffer;
	Handle nio buffers;
	Handle internal nio buffer;
	Convert advanced leak aware byte buf to string;
	Get capacity;
	Get short LE;
	Get unsigned short LE;
	Get medium LE;
	Get unsigned medium LE;
	Get int LE;
	Get unsigned int LE;
	Get advanced leak aware byte buf long LE;
	Set short LE;
	Set int LE;
	Set medium LE;
	Set long LE;
	Read short LE;
	Read unsigned short LE;
	Read medium LE;
	Read unsigned medium LE;
	Read int LE;
	Read unsigned int LE;
	Read long LE;
	Write short LE;
	Write medium LE;
	Write int LE;
	Write long LE;
	Write char sequence;
	Process advanced leak aware byte buf advanced leak aware byte buf as read only;
	Retain advanced leak aware byte buf;
	Handle release;
	Touch advanced leak aware byte buf;
	Handle new leak aware byte buf

1.2. Add a class for simple leak aware byte buf. It allows to:

	Instantiate simple leak aware byte buf  with wrapped byte buf, tracked byte buf, resource leak tracker and resource leak tracker;
	Instantiate simple leak aware byte buf  with wrapped byte buf, resource leak tracker and resource leak tracker;
	Get slice;
	Get retained slice;
	Get retained duplicate;
	Read retained slice;
	Duplicate simple leak aware byte buf;
	Read slice;
	Process simple leak aware byte buf simple leak aware byte buf as read only;
	Touch simple leak aware byte buf;
	Handle release;
	Close leak;
	Get order;
	Handle unwrapped derived;
	Handle unwrap swapped;
	Handle new shared leak aware byte buf;
	Handle new leak aware byte buf;

1.3. Add a class for wrapped byte buf. It allows to:

	Instantiate wrapped byte buf  with byte buf;
	Check if wrapped byte buf has memory address;
	Get memory address;
	Get capacity;
	Get max capacity;
	Process wrapped byte buf wrapped byte buf alloc;
	Get order;
	Get unwrap;
	Process wrapped byte buf wrapped byte buf as read only;
	Check if wrapped byte buf is read only;
	Check if wrapped byte buf is direct;
	Get reader index;
	Get writer index;
	Set index;
	Handle readable bytes;
	Handle writable bytes;
	Max writable bytes;
	Check if wrapped byte buf is readable;
	Check if wrapped byte buf is writable;
	Handle clear;
	Get mark reader index;
	Reset reader index;
	Get mark writer index;
	Reset writer index;
	Discard read bytes;
	Discard some read bytes;
	Ensure writable;
	Get boolean;
	Get byte;
	Get unsigned byte;
	Get short;
	Get short LE;
	Get unsigned short;
	Get unsigned short LE;
	Get medium;
	Get medium LE;
	Get unsigned medium;
	Get unsigned medium LE;
	Get int;
	Get int LE;
	Get unsigned int;
	Get unsigned int LE;
	Get wrapped byte buf long;
	Get wrapped byte buf long LE;
	Get char;
	Get float;
	Get wrapped byte buf double;
	Get bytes;
	Get char sequence;
	Set boolean;
	Set byte;
	Set short;
	Set short LE;
	Set medium;
	Set medium LE;
	Set int;
	Set int LE;
	Set wrapped byte buf long;
	Set long LE;
	Set char;
	Set float;
	Set double;
	Set bytes;
	Set wrapped byte buf;
	Set char sequence;
	Read boolean;
	Read byte;
	Read unsigned byte;
	Read short;
	Read short LE;
	Read unsigned short;
	Read unsigned short LE;
	Read medium;
	Read medium LE;
	Read unsigned medium;
	Read unsigned medium LE;
	Read int;
	Read int LE;
	Read unsigned int;
	Read unsigned int LE;
	Read wrapped byte buf long;
	Read long LE;
	Read char;
	Read float;
	Read double;
	Read bytes;
	Read slice;
	Read retained slice;
	Read char sequence;
	Skip bytes;
	Write boolean;
	Write byte;
	Write short;
	Write short LE;
	Write medium;
	Write medium LE;
	Write int;
	Write int LE;
	Write wrapped byte buf long;
	Write long LE;
	Write char;
	Write float;
	Write double;
	Write bytes;
	Write wrapped byte buf;
	Write char sequence;
	Get index of;
	Get bytes before;
	Process wrapped byte buf wrapped byte buf for each byte;
	Process wrapped byte buf wrapped byte buf for each byte desc;
	Get copy;
	Get slice;
	Get retained slice;
	Duplicate wrapped byte buf;
	Get retained duplicate;
	Handle nio buffer count;
	Handle nio buffer;
	Handle nio buffers;
	Handle internal nio buffer;
	Check if wrapped byte buf has array;
	Get array;
	Handle array offset;
	Convert wrapped byte buf to string;
	Hash code;
	Check if wrapped byte buf equals;
	Compare  to buffer;
	Retain wrapped byte buf;
	Touch wrapped byte buf;
	Ref cnt;
	Handle release;
	Check if wrapped byte buf is accessible

2. Changes to package io.netty.util:  

