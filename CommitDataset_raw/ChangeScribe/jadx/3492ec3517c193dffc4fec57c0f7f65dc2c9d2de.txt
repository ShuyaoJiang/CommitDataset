BUG - FEATURE: <type-ID> 

This is a degenerate modifier commit: this change set is composed of empty, incidental, and abstract methods. These methods indicate that a new feature is planned. This commit  includes changes to internationalization, properties or configuration files (.editorconfig, .gitignore, logback.xml, ... ).  renames some files.
 This change set is mainly composed of:  

1. Changes to package jadx:  

1. Changes to package jadx.api:  

1. Changes to package jadx.core:  

1. Changes to package jadx.core.clsp:  

1. Changes to package jadx.core.codegen:  

1. Changes to package jadx.core.deobf:  

1. Changes to package jadx.core.dex.attributes:  

1. Changes to package jadx.core.dex.attributes.annotations:  

1. Changes to package jadx.core.dex.attributes.nodes:  

1.1. Add a class for local vars debug info attr. It allows to:

	Instantiate local vars debug info attr  with local vars list;
	Get local vars;
	Get type;
	Convert local vars debug info attr to string

1.2. Add a class for reg debug info attr. It allows to:

	Instantiate reg debug info attr  with local var;
	Instantiate reg debug info attr  with arg type;
	Get name;
	Get reg type;
	Get type;
	Check if reg debug info attr equals;
	Hash code;
	Convert reg debug info attr to string

2. Changes to package jadx.core.dex.info:  

2. Changes to package jadx.core.dex.instructions:  

2. Changes to package jadx.core.dex.instructions.args:  

2.1. Add a class for code var. It allows to:

	Process code var code var from mth arg;
	Get name;
	Set name;
	Get type;
	Set type;
	Get ssa vars;
	Add ssa var;
	Set ssa vars;
	Check if code var is final;
	Set final;
	Check if code var is this;
	Set code var;
	Check if code var is declared;
	Declared code var;
	Merge flags  from other code var;
	Convert code var to string

3. Changes to package jadx.core.dex.instructions.mods:  

3. Changes to package jadx.core.dex.nodes:  

3. Changes to package jadx.core.dex.nodes.parser:  

3. Changes to package jadx.core.dex.regions:  

3. Changes to package jadx.core.dex.regions.conditions:  

3. Changes to package jadx.core.dex.regions.loops:  

3. Changes to package jadx.core.dex.trycatch:  

3. Changes to package jadx.core.dex.visitors:  

3.1. Add a class for constructor visitor. It allows to:

	Handle visit;
	Invoke mth method node;
	Handle process invoke;
	Get process constructor;
	All args  null;
	Remove assign chain

3.2. Add a class for init code variables. It allows to:

	Handle visit;
	Init code vars;
	Init code var;
	Set code var;
	Set code var type;
	Collect connected vars

3.3. Add a class for mark finally visitor. It allows to:

	Handle visit;
	Handle process exception handler;
	Extract  finally mth method node;
	Check slices;
	Apply finally extract info;
	Handle mark slice;
	Copy code vars;
	Search duplicate insns;
	Get search from first block;
	Check if mark finally visitor is start block;
	Check insns;
	Check blocks tree;
	Compare blocks;
	Handle same insns

4. Changes to package jadx.core.dex.visitors.blocksmaker:  

4. Changes to package jadx.core.dex.visitors.blocksmaker.helpers:  

4.1. Add a class for finally extract info. It allows to:

	Instantiate finally extract info  with finally handler, start block node, all handler blocks list and all handler blocks list;
	Get finally extract info finally handler;
	Get all handler blocks;
	Get finally extract info finally insns slice;
	Get duplicate slices;
	Get checked blocks;
	Get start block

4.2. Add a class for insns slice. It allows to:

	Add insn;
	Add block;
	Add insns;
	Get block;
	Get insns list;
	Get blocks;
	Check if insns slice is complete;
	Set complete;
	Convert insns slice to string

5. Changes to package jadx.core.dex.visitors.debuginfo:  

5.1. Add a class for debug info apply visitor. It allows to:

	Handle visit;
	Check types;
	Apply debug info;
	Collect mth method node;
	Handle search debug info by offset;
	Check if debug info apply visitor is inside;
	Get insn offset  by arg;
	Detach debug info;
	Add reg dbd info;
	Fix lines  for return;
	Fix names  for phi insns;
	Add arg name;
	Set name  for insn

5.2. Add a class for debug info parse visitor. It allows to:

	Handle visit;
	Handle process debug info;
	Attach debug info;
	Set method source line

5.3. Add a class for debug info parser. It allows to:

	Instantiate debug info parser  with mth method node, insn node and insn node;
	Get process;
	Handle addr change;
	Set source lines;
	Set line;
	Restart var;
	Start var;
	End var

5.4. Add a class for local var. It allows to:

	Instantiate local var  with dex node;
	Instantiate local var  with arg type;
	Check signature;
	Start local var;
	End local var;
	Get reg num;
	Get name;
	Get type;
	Check if local var is end;
	Get start addr;
	Get end  addr;
	Check if local var equals;
	Hash code;
	Convert local var to string

6. Changes to package jadx.core.dex.visitors.regions:  

6. Changes to package jadx.core.dex.visitors.regions.variables:  

6.1. Add a class for collect usage region visitor. It allows to:

	Get usage map;
	Handle process block traced;
	Handle region process;
	Handle process insn;
	Get usage

6.2. Add a class for process variables. It allows to:

	Handle visit;
	Check code vars;
	Declare var;
	Collect code vars;
	Merge usage maps;
	Check declare  at assign;
	Can declare  at;
	Check if process variables is all use after;
	Check if process variables is container contains use place;
	Handle search declare region;
	Declare var  in region;
	Check if process variables is all regions after

6.3. Add a class for use place. It allows to:

	Instantiate use place  with I region, I block and I block;
	Get region;
	Get block;
	Check if use place equals;
	Hash code;
	Convert use place to string

6.4. Add a class for var usage. It allows to:

	Instantiate var usage  with SSA var;
	Get var;
	Assigns var usage;
	Get uses;
	Convert var usage to string

7. Changes to package jadx.core.dex.visitors.shrink:  

7.1. Add a class for args info. It allows to:

	Instantiate args info  with insn node, args list and args list;
	Get args;
	Add args;
	Get insn;
	Check inline;
	Move args info;
	Get used arg assign;
	Get inline;
	Get inlined insn;
	Convert args info to string

7.2. Add a class for code shrink visitor. It allows to:

	Handle visit;
	Shrink method;
	Shrink block;
	Handle inline;
	Can move  between blocks;
	Simplify move insns

7.3. Add a class for wrap info. It allows to:

	Instantiate wrap info  with assign insn node, register arg and register arg;
	Get insn;
	Get wrap info arg;
	Convert wrap info to string

8. Changes to package jadx.core.dex.visitors.ssa:  

8. Changes to package jadx.core.dex.visitors.typeinference:  

8.1. Add a class for abstract type constraint. It allows to:

	Instantiate abstract type constraint  with insn node, insn arg and insn arg;
	Collect related vars;
	Get related vars;
	Convert abstract type constraint to string

8.2. Add an interface declaration  for i type bound. It allows to:

	Bound i type bound;
	Get type

8.3. Add an interface declaration  for i type constraint. It allows to:

	Get related vars;
	Check type search state

8.4. Add an interface declaration  for i type listener. It allows to:

	Update type update info

8.5. Add a class for type bound const. It allows to:

	Instantiate type bound const  with bound enum, arg type and arg type;
	Bound type bound const;
	Get type;
	Check if type bound const equals;
	Hash code;
	Convert type bound const to string

8.6. Add a class for type compare test. It allows to:

	Handle init;
	Compare types;
	Compare primitives;
	Compare arrays;
	Compare generics;
	Compare generic types;
	Compare generic types NYI;
	First is narrow;
	Check first arg type

8.7. Add a class for type inference visitor. It allows to:

	Handle init;
	Handle visit;
	Run multi variable search;
	Set immutable type;
	Set best type;
	Apply immutable type;
	Calculate SSA var from bounds;
	Select best type  from bounds;
	Attach bounds;
	Merge phi bounds;
	Bound type info;
	Add type info;
	Make use bound;
	Try possible types;
	Make possible types list;
	Try deduce type;
	Try insert additional insn;
	Try wider objects

8.8. Add a class for type info. It allows to:

	Get type;
	Set type;
	Get bounds;
	Convert type info to string

8.9. Add a class for type search. It allows to:

	Instantiate type search  with mth method node;
	Run type search;
	Apply resolved vars;
	Handle search;
	Resolve independent variables;
	Handle full check;
	Handle single check;
	Fill type candidates;
	Add candidate types;
	Get wider types;
	Get narrow types;
	Expand unknown type;
	Collect constraints;
	Get arg type;
	Add constraint;
	Make constraint;
	Make move constraint;
	Check type search state;
	Make phi constraint;

8.10. Add a class for type search state. It allows to:

	Instantiate type search state  with mth method node;
	Get SSA var;
	Get all vars;
	Get unresolved vars;
	Get resolved vars

8.11. Add a class for type search var info. It allows to:

	Instantiate type search var info  with SSA var;
	Reset type search var info;
	Handle next type;
	Get var;
	Check if type search var info is type resolved;
	Set type resolved;
	Get current type;
	Set current type;
	Get candidate types;
	Set candidate types;
	Get constraints;
	Set constraints;
	Convert type search var info to string

8.12. Add a class for type update. It allows to:

	Instantiate type update  with root node;
	Apply SSA var;
	Apply SSA var with wider allow;
	Update type checked;
	Update type  for ssa var;
	Get request update for ssa var;
	Get request update;
	Run listeners;
	Process type update type update in bounds;
	Bound candidate type;
	Check assign  for unknown;
	Handle init listener registry;
	Handle same first arg listener;
	Move listener;
	All same listener;
	Suggest all same listener;
	Check cast listener;
	Get array get listener;
	Get array put listener;
	Process type update type update if listener;
	Check if type update is assign;
	Get comparator;
	Get arg type comparator

8.13. Add a class for type update entry. It allows to:

	Instantiate type update entry  with insn arg, arg type and arg type;
	Apply type update entry;
	Get type update entry arg;
	Get type;
	Convert type update entry to string

8.14. Add a class for type update info. It allows to:

	Handle request update;
	Check if type update info is processed;
	Handle rollback update;
	Get updates

8.15. Add a class for type update registry. It allows to:

	Add insn type;
	Get listeners  for insn

9. Changes to package jadx.core.utils:  

9. Changes to package jadx.core.utils.android:  

9. Changes to package jadx.core.xmlgen:  

9. Changes to package jadx.core.xmlgen.entry:  

9. Changes to package jadx.gui.treemodel:  

9. Changes to package jadx.gui.ui.codearea:  

9. Changes to package jadx.gui.utils:  

9. Changes to package jadx.samples:  

9. Changes to package jadx.tests.api:  

9. Changes to package jadx.tests.api.compiler:  

9. Changes to package jadx.tests.api.utils:  

9. Changes to package jadx.tests.external:  

9. Changes to package jadx.tests.functional:  

9. Changes to package jadx.tests.integration.arith:  

9. Changes to package jadx.tests.integration.conditions:  

9.1. Add a class for test complex if 2. It allows to:

	Handle test

10. Changes to package jadx.tests.integration.enums:  

10. Changes to package jadx.tests.integration.generics:  

10. Changes to package jadx.tests.integration.inner:  

10. Changes to package jadx.tests.integration.names:  

10. Changes to package jadx.tests.integration.others:  

10. Changes to package jadx.tests.integration.trycatch:  

10.1. Add a class for test try catch no move exc. It allows to:

	Handle test

11. Changes to package jadx.tests.integration.types:  

11.1. Add a class for test const inline. It allows to:

	Handle test

11.2. Add a class for test type resolver 5. It allows to:

	Handle test

12. Changes to package jadx.tests.integration.variables:  

12.1. Add a class for test variables 6. It allows to:

	Handle test

12.2. Add a class for test variables generic. It allows to:

	Handle test

