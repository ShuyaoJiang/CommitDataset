BUG - FEATURE: <type-ID> 

This is a degenerate modifier commit: this change set is composed of empty, incidental, and abstract methods. These methods indicate that a new feature is planned. This commit  includes changes to internationalization, properties or configuration files (.gitignore, .travis.yml, pom.xml, ... ).  renames some files.
 This change set is mainly composed of:  

1. Changes to package sample.activemq:  

1.1. Add a class for consumer. It allows to:

	Receive queue

1.2. Add a class for producer. It allows to:

	Run producer;
	Send producer

1.3. Add a class for sample active MQ application. It allows to:

	Queue sample active MQ application;
	Handle main

1.4. Add a class for sample active mq tests. It allows to:

	Send simple message

2. Changes to package sample.actuator:  

2. Changes to package sample.actuator.noweb:  

2.1. Add a class for hello world service. It allows to:

	Instantiate hello world service  with configuration service properties;
	Get hello message

2.2. Add a class for sample actuator no web application. It allows to:

	Handle main

2.3. Add a class for sample actuator no web application tests. It allows to:

	Handle context loads

2.4. Add a class for service properties. It allows to:

	Get name;
	Set name

3. Changes to package sample.actuator.ui:  

3. Changes to package sample.amqp:  

3. Changes to package sample.ant:  

3.1. Add a class for sample ant application. It allows to:

	Run sample ant application;
	Handle main

3.2. Add a class for sample ant application IT. It allows to:

	Run jar;
	Accept file

4. Changes to package sample.aop:  

4. Changes to package sample.atmosphere:  

4.1. Add a class for message. It allows to:

	Get message;
	Set message;
	Get author;
	Set author;
	Get time;
	Set time

5. Changes to package sample.batch:  

5. Changes to package sample.cache:  

5.1. Add a class for cache manager check. It allows to:

	Instantiate cache manager check  with cache manager;
	Run cache manager check

5.2. Add a class for country. It allows to:

	Instantiate country;
	Get code;
	Check if country equals;
	Hash code

5.3. Add an object creator class for country repository. It allows to:

	Find country repository by code

5.4. Add a class for sample cache application. It allows to:

	Handle main

5.5. Add a class for sample cache application tests. It allows to:

	Validate cache

5.6. Add a class for sample client. It allows to:

	Instantiate sample client  with country repository;
	Retrieve country

6. Changes to package sample.data.elasticsearch:  

6. Changes to package sample.data.jpa:  

6. Changes to package sample.data.jpa.service:  

6. Changes to package sample.data.mongo:  

6. Changes to package sample.data.redis:  

6. Changes to package sample.data.rest:  

6.1. Add a class for sample data rest application. It allows to:

	Handle main

6.2. Add a class for sample data rest application tests. It allows to:

	Set sample data rest application tests;
	Handle test home;
	Find sample data rest application tests by name and country;
	Find sample data rest application tests by containing

7. Changes to package sample.data.rest.domain:  

7.1. Add a class for city. It allows to:

	Instantiate city;
	Get name;
	Get state;
	Get country;
	Get map;
	Convert city to string

7.2. Add a class for hotel. It allows to:

	Instantiate hotel;
	Instantiate hotel  with city;
	Get city;
	Get name;
	Get address;
	Get zip

8. Changes to package sample.data.rest.service:  

8.1. Add an interface declaration  for city repository. It allows to:

	Find pageable by name containing and country containing all ignoring case;
	Find city repository by name and country all ignoring case

8.2. Add a class for city repository integration tests. It allows to:

	Check if city repository integration tests finds first page of cities;
	Find city repository integration tests by name and country;
	Containing city repository integration tests

8.3. Add a class for city search criteria. It allows to:

	Instantiate city search criteria;
	Get name;
	Set name

8.4. Add an interface declaration  for hotel repository. It allows to:

	Find city by city and name

9. Changes to package sample.devtools:  

9.1. Add a class for message. It allows to:

	Instantiate message

9.2. Add a class for my controller. It allows to:

	Restart my controller;
	Get http session

9.3. Add a class for sample dev tools application. It allows to:

	Handle main

10. Changes to package sample.flyway:  

10.1. Add a class for person. It allows to:

	Get person first name;
	Set first name;
	Get last name;
	Get set last name;
	Convert person to string

10.2. Add an interface declaration  for person repository

11. Changes to package sample.freemarker:  

11. Changes to package sample.groovytemplates:  

11.1. Add a class for message. It allows to:

	Get id;
	Set id;
	Created message;
	Created created date;
	Get text;
	Set text;
	Get summary;
	Set summary

11.2. Add an interface declaration  for message repository. It allows to:

	Find message repository;
	Save message;
	Find message

11.3. Add a class for sample groovy template application. It allows to:

	Get message repository;
	Get message converter;
	Convert;
	Handle main

11.4. Add a class for sample groovy template application tests. It allows to:

	Handle test home;
	Handle test create;
	Handle test css

12. Changes to package sample.groovytemplates.mvc:  

12.1. Add a class for message controller. It allows to:

	Instantiate message controller  with message repository;
	Get list;
	View message;
	Create form;
	Create message;
	Get field errors;
	Get foo

13. Changes to package sample.hateoas:  

13.1. Add a class for sample hateoas application. It allows to:

	Handle main

13.2. Add a class for sample hateoas application tests. It allows to:

	Check if sample hateoas application tests has hal links;
	Check if sample hateoas application tests produces json when xml is preferred

14. Changes to package sample.hateoas.domain:  

14.1. Add a class for customer. It allows to:

	Instantiate customer;
	Get id;
	Get customer first name;
	Get last name

14.2. Add an interface declaration  for customer repository. It allows to:

	Find customer repository;

14.3. Add a class for in memory customer repository. It allows to:

	Instantiate in memory customer repository;
	Find in memory customer repository;

15. Changes to package sample.hateoas.web:  

15.1. Add an object creator class for customer controller. It allows to:

	Instantiate customer controller  with customer repository, entity links and entity links;
	Show customers;
	Show customer

16. Changes to package sample.jersey:  

16. Changes to package sample.jetty:  

16. Changes to package sample.jetty.ssl:  

16.1. Add a class for sample jetty ssl application. It allows to:

	Handle main

16.2. Add a class for sample jetty ssl application tests. It allows to:

	Handle test ssl;
	Handle test home

17. Changes to package sample.jetty.ssl.web:  

17.1. Add a class for sample controller. It allows to:

	Hello world

18. Changes to package sample.jooq:  

18.1. Add a class for jooq examples. It allows to:

	Instantiate jooq examples  with DSL context, jdbc template and jdbc template;
	Run jooq examples;
	Handle jooq fetch;
	Handle jooq sql;
	Map row

18.2. Add a class for sample jooq application. It allows to:

	Handle main

18.3. Add a class for sample jooq application tests. It allows to:

	Handle output results

19. Changes to package sample.jooq.domain:  

19.1. Add a class for public. It allows to:

	Instantiate public;
	Get catalog;
	Get tables;
	Get tables 0

19.2. Add a class for tables

20. Changes to package sample.jpa:  

20. Changes to package sample.jpa.repository:  

20. Changes to package sample.jsp:  

20. Changes to package sample.logback:  

20.1. Add a class for sample logback application. It allows to:

	Log something;
	Handle main

20.2. Add a class for sample logback application tests. It allows to:

	Handle test loaded custom logback config;
	Handle test profile

21. Changes to package sample.mustache:  

21. Changes to package sample.profile:  

21. Changes to package sample.propertyvalidation:  

21.1. Add a class for sample properties. It allows to:

	Get host;
	Set host;
	Get port;
	Set port

21.2. Add a class for sample properties validator. It allows to:

	Handle supports;
	Validate errors

21.3. Add a class for sample property validation application. It allows to:

	Instantiate sample property validation application  with sample properties;
	Get configuration properties validator;
	Run sample property validation application;
	Handle main

21.4. Add a class for sample property validation application tests. It allows to:

	Close context;
	Handle bind valid properties;
	Handle bind invalid host;
	Handle bind null host;
	Validator sample property validation application tests only called on supported class

22. Changes to package sample.secure:  

22. Changes to package sample.security.method:  

22.1. Add a class for sample method security application tests. It allows to:

	Handle test home;
	Handle test login;
	Handle test denied;
	Handle test management protected;
	Handle test management authorized access;
	Get csrf

23. Changes to package sample.servlet:  

23. Changes to package sample.simple:  

23. Changes to package sample.testng:  

23. Changes to package sample.tomcat:  

23. Changes to package sample.tomcat.jsp:  

23.1. Add a class for sample tomcat jsp application. It allows to:

	Configure spring application builder;
	Handle main

23.2. Add a class for sample web jsp application tests. It allows to:

	Handle test jsp with el

23.3. Add a class for welcome controller. It allows to:

	Welcome model map;
	Fail welcome controller;
	Handle my runtime exception

24. Changes to package sample.tomcat.multiconnector:  

24.1. Add a class for sample tomcat two connectors application. It allows to:

	Get servlet container;
	Create standard connector;
	Handle main

25. Changes to package sample.tomcat.multiconnector.web:  

25.1. Add a class for sample controller. It allows to:

	Hello world

26. Changes to package sample.tomcat.ssl:  

26.1. Add a class for sample tomcat ssl application. It allows to:

	Handle main

27. Changes to package sample.tomcat.ssl.web:  

27.1. Add a class for sample controller. It allows to:

	Hello world

28. Changes to package sample.traditional:  

28. Changes to package sample.undertow:  

28. Changes to package sample.undertow.ssl:  

28.1. Add a class for sample undertow ssl application. It allows to:

	Handle main

28.2. Add a class for sample undertow ssl application tests. It allows to:

	Handle test ssl;
	Handle test home

29. Changes to package sample.undertow.ssl.web:  

29.1. Add a class for sample controller. It allows to:

	Hello world

30. Changes to package sample.web.secure:  

30.1. Add a class for sample secure application tests. It allows to:

	Handle test home;
	Handle test login page;
	Handle test login;
	Get headers;
	Handle test css

31. Changes to package sample.web.staticcontent:  

31.1. Add a class for sample web static application. It allows to:

	Configure spring application builder;
	Handle main

32. Changes to package sample.web.ui:  

32.1. Add a class for in memory message repository. It allows to:

	Find in memory message repository;
	Save message;
	Find message;
	Delete message

32.2. Add a class for message. It allows to:

	Get id;
	Set id;
	Created message;
	Created created calendar;
	Get text;
	Set text;
	Get summary;
	Set summary

32.3. Add an interface declaration  for message repository. It allows to:

	Find message repository;
	Save message;
	Find message;
	Delete message

32.4. Add a class for sample web ui application. It allows to:

	Get message repository;
	Get message converter;
	Convert;
	Handle main

33. Changes to package sample.web.ui.mvc:  

33.1. Add an object creator class for message controller. It allows to:

	Instantiate message controller  with message repository;
	Get list;
	View message;
	Create form;
	Create message;
	Get foo;
	Delete message controller;
	Modify form

34. Changes to package sample.xml:  

34. Changes to package samples.websocket.jetty:  

34.1. Add an object creator class for sample jetty web sockets application. It allows to:

	Register web socket handlers;
	Configure spring application builder;
	Echo service;
	Greeting service;
	Echo web socket handler;
	Get snake web socket handler;
	Reverse web socket endpoint;
	Handle server endpoint exporter;
	Handle main

35. Changes to package samples.websocket.jetty.client:  

35.1. Add an interface declaration  for greeting service. It allows to:

	Greeting greeting service

35.2. Add a class for simple client web socket handler. It allows to:

	Instantiate simple client web socket handler  with greeting service, count down latch, message atomic reference and message atomic reference;
	Handle after connection established;
	Handle text message

35.3. Add a class for simple greeting service. It allows to:

	Greeting simple greeting service

36. Changes to package samples.websocket.jetty.echo:  

36.1. Add a class for default echo service. It allows to:

	Instantiate default echo service;
	Get message

36.2. Add an interface declaration  for echo service. It allows to:

	Get message

36.3. Add a class for echo web socket handler. It allows to:

	Instantiate echo web socket handler  with echo service;
	Handle after connection established;
	Handle text message;
	Handle transport error

37. Changes to package samples.websocket.jetty.reverse:  

37.1. Add a class for reverse web socket endpoint. It allows to:

	Handle message

38. Changes to package samples.websocket.jetty.snake:  

38.1. Add a class for location. It allows to:

	Instantiate location;
	Get adjacent location;
	Check if location equals;
	Hash code

38.2. Add a class for snake. It allows to:

	Instantiate snake  with web socket session;
	Reset state;
	Kill snake;
	Reward snake;
	Send message;
	Update snakes collection;
	Handle collisions;
	Get head;
	Get tail;
	Set direction;
	Get locations json;
	Get id;
	Get hex color

38.3. Add a class for snake timer. It allows to:

	Instantiate snake timer;
	Add snake;
	Get snakes;
	Remove snake;
	Tick snake timer;
	Handle broadcast;
	Start timer;
	Run;
	Stop timer

38.4. Add a class for snake timer tests. It allows to:

	Remove dysfunctional snakes

38.5. Add a class for snake utils. It allows to:

	Instantiate snake utils;
	Get random hex color;
	Get random location;
	Get round by grid size

38.6. Add a class for snake web socket handler. It allows to:

	Get random hex color;
	Get random location;
	Get round by grid size;
	Instantiate snake web socket handler;
	Handle after connection established;
	Handle text message;
	Handle after connection closed

39. Changes to package samples.websocket.tomcat:  

39.1. Add an object creator class for sample tomcat web socket application. It allows to:

	Register web socket handlers;
	Configure spring application builder;
	Echo service;
	Greeting service;
	Echo web socket handler;
	Get snake web socket handler;
	Reverse web socket endpoint;
	Handle server endpoint exporter;
	Handle main

40. Changes to package samples.websocket.tomcat.client:  

40.1. Add an interface declaration  for greeting service. It allows to:

	Greeting greeting service

40.2. Add a class for simple client web socket handler. It allows to:

	Instantiate simple client web socket handler  with greeting service, count down latch, message atomic reference and message atomic reference;
	Handle after connection established;
	Handle text message

40.3. Add a class for simple greeting service. It allows to:

	Greeting simple greeting service

41. Changes to package samples.websocket.tomcat.echo:  

41.1. Add a class for default echo service. It allows to:

	Instantiate default echo service;
	Get message

41.2. Add an interface declaration  for echo service. It allows to:

	Get message

41.3. Add a class for echo web socket handler. It allows to:

	Instantiate echo web socket handler  with echo service;
	Handle after connection established;
	Handle text message;
	Handle transport error

42. Changes to package samples.websocket.tomcat.reverse:  

42.1. Add a class for reverse web socket endpoint. It allows to:

	Handle message

43. Changes to package samples.websocket.tomcat.snake:  

43.1. Add a class for location. It allows to:

	Instantiate location;
	Get adjacent location;
	Check if location equals;
	Hash code

43.2. Add a class for snake. It allows to:

	Instantiate snake  with web socket session;
	Reset state;
	Kill snake;
	Reward snake;
	Send message;
	Update snakes collection;
	Handle collisions;
	Get head;
	Get tail;
	Set direction;
	Get locations json;
	Get id;
	Get hex color

43.3. Add a class for snake timer. It allows to:

	Instantiate snake timer;
	Add snake;
	Get snakes;
	Remove snake;
	Tick snake timer;
	Handle broadcast;
	Start timer;
	Run;
	Stop timer

43.4. Add a class for snake timer tests. It allows to:

	Remove dysfunctional snakes

43.5. Add a class for snake utils. It allows to:

	Instantiate snake utils;
	Get random hex color;
	Get random location;
	Get round by grid size

43.6. Add a class for snake web socket handler. It allows to:

	Get random hex color;
	Get random location;
	Get round by grid size;
	Instantiate snake web socket handler;
	Handle after connection established;
	Handle text message;
	Handle after connection closed

44. Changes to package samples.websocket.undertow:  

44.1. Add an object creator class for sample undertow web sockets application. It allows to:

	Register web socket handlers;
	Configure spring application builder;
	Echo service;
	Greeting service;
	Echo web socket handler;
	Get snake web socket handler;
	Reverse web socket endpoint;
	Handle server endpoint exporter;
	Handle main

45. Changes to package samples.websocket.undertow.client:  

45.1. Add an interface declaration  for greeting service. It allows to:

	Greeting greeting service

45.2. Add a class for simple client web socket handler. It allows to:

	Instantiate simple client web socket handler  with greeting service, count down latch, message atomic reference and message atomic reference;
	Handle after connection established;
	Handle text message

45.3. Add a class for simple greeting service. It allows to:

	Greeting simple greeting service

46. Changes to package samples.websocket.undertow.echo:  

46.1. Add a class for default echo service. It allows to:

	Instantiate default echo service;
	Get message

46.2. Add an interface declaration  for echo service. It allows to:

	Get message

46.3. Add a class for echo web socket handler. It allows to:

	Instantiate echo web socket handler  with echo service;
	Handle after connection established;
	Handle text message;
	Handle transport error

47. Changes to package samples.websocket.undertow.reverse:  

47.1. Add a class for reverse web socket endpoint. It allows to:

	Handle message

48. Changes to package samples.websocket.undertow.snake:  

48.1. Add a class for location. It allows to:

	Instantiate location;
	Get adjacent location;
	Check if location equals;
	Hash code

48.2. Add a class for snake. It allows to:

	Instantiate snake  with web socket session;
	Reset state;
	Kill snake;
	Reward snake;
	Send message;
	Update snakes collection;
	Handle collisions;
	Get head;
	Get tail;
	Set direction;
	Get locations json;
	Get id;
	Get hex color

48.3. Add a class for snake timer. It allows to:

	Instantiate snake timer;
	Add snake;
	Get snakes;
	Remove snake;
	Tick snake timer;
	Handle broadcast;
	Start timer;
	Run;
	Stop timer

48.4. Add a class for snake timer tests. It allows to:

	Remove dysfunctional snakes

48.5. Add a class for snake utils. It allows to:

	Instantiate snake utils;
	Get random hex color;
	Get random location;
	Get round by grid size

48.6. Add a class for snake web socket handler. It allows to:

	Get random hex color;
	Get random location;
	Get round by grid size;
	Instantiate snake web socket handler;
	Handle after connection established;
	Handle text message;
	Handle after connection closed

