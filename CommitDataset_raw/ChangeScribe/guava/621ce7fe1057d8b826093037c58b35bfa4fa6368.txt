BUG - FEATURE: <type-ID> 

This is a degenerate modifier commit: this change set is composed of empty, incidental, and abstract methods. These methods indicate that a new feature is planned. 
 This change set is mainly composed of:  

1. Changes to package com.google.common.graph:  

1.1. Add a class for abstract directed graph test. It allows to:

	Handle predecessors one edge;
	Handle successors one edge;
	Handle incident edges one edge;
	Process abstract directed graph test abstract directed graph test in degree one edge;
	Out degree one edge;
	Check if abstract directed graph test has edge connecting correct;
	Check if abstract directed graph test has edge connecting backwards;
	Check if abstract directed graph test has edge connecting mismatch;
	Put edge existing nodes;
	Put edge existing edge  between same nodes;
	Put edge order mismatch;
	Remove edge antiparallel edges;
	Remove edge order mismatch

1.2. Add a class for abstract graph test. It allows to:

	Create graph;
	Add node;
	Put edge;
	Handle init;
	Validate graph state;
	Validate graph;
	Handle nodes check returned set mutability;
	Handle adjacent nodes check returned set mutability;
	Handle predecessors check returned set mutability;
	Handle successors check returned set mutability;
	Handle incident edges check returned set mutability;
	Handle nodes one node;
	Handle nodes no nodes;
	Handle adjacent nodes one edge;
	Handle adjacent nodes no adjacent nodes;
	Handle adjacent nodes node not in graph;
	Handle predecessors no predecessors;
	Handle predecessors node not in graph;
	Handle successors no successors;
	Handle successors node not in graph;
	Handle incident edges no incident edges;
	Handle incident edges node not in graph;
	Handle degree one edge;
	Handle degree isolated node;
	Handle degree node not in graph;
	Process abstract graph test abstract graph test in degree isolated node;
	Process abstract graph test abstract graph test in degree node not in graph;
	Out degree isolated node;
	Out degree node  not in graph;
	Add node new node;
	Add node existing node;
	Remove node existing node;
	Remove node antiparallel edges;
	Remove node node  not present;
	Remove node query  after removal;
	Remove edge existing edge;
	Remove edge one  of many;
	Remove edge node  not present;
	Remove edge edge  not present

1.3. Add a class for abstract undirected graph test. It allows to:

	Validate undirected edges;
	Handle predecessors one edge;
	Handle successors one edge;
	Handle incident edges one edge;
	Process abstract undirected graph test abstract undirected graph test in degree one edge;
	Out degree one edge;
	Check if abstract undirected graph test has edge connecting correct;
	Check if abstract undirected graph test has edge connecting mismatch;
	Add edge existing nodes;
	Add edge existing edge  between same nodes;
	Remove edge antiparallel edges

1.4. Add an interface declaration  for graph. It allows to:

	Get nodes;
	Get edges;
	Check if graph is directed;
	Check if graph allows self loops;
	Handle node order;
	Handle adjacent nodes;
	Get predecessors;
	Get successors;
	Get incident edges;
	Get degree;
	Process graph graph in degree;
	Out degree;
	Check if graph has edge connecting;
	Check if graph equals;
	Hash code

1.5. Add a class for graph properties test. It allows to:

	Handle init;
	Check if graph properties test has cycle empty graph;
	Check if graph properties test has cycle isolated nodes;
	Check if graph properties test has cycle one edge;
	Check if graph properties test has cycle self loop edge;
	Check if graph properties test has cycle two acyclic edges;
	Check if graph properties test has cycle two cyclic edges;
	Check if graph properties test has cycle three acyclic edges;
	Check if graph properties test has cycle three cyclic edges;
	Check if graph properties test has cycle disconnected cyclic graph;
	Check if graph properties test has cycle multiple cycles;
	Check if graph properties test has cycle two parallel edges;
	Check if graph properties test has cycle cyclic multigraph

1.6. Add a class for graphs test. It allows to:

	Handle transitive closure directed graph;
	Handle transitive closure undirected graph;
	Handle transitive closure directed path graph;
	Handle transitive closure undirected path graph;
	Handle transitive closure directed cycle graph;
	Handle transitive closure undirected cycle graph;
	Transpose undirected graph;
	Transpose directed graph;
	Transpose undirected value graph;
	Transpose directed value graph;
	Transpose undirected network;
	Transpose directed network;
	Handle induced subgraph graph;
	Handle induced subgraph value graph;
	Handle induced subgraph network;
	Handle induced subgraph node not in graph;
	Handle copy of null argument;
	Handle copy of directed graph;
	Handle copy of undirected graph;
	Handle copy of directed value graph;
	Handle copy of undirected value graph;
	Handle copy of directed network;
	Handle copy of undirected network;
	Directed graphs test;
	Create undirected;
	Create directed multigraph;
	Create undirected multigraph;
	Create directed expected node count;
	Create undirected expected node count;
	Handle builder expected node count negative;
	Create directed expected edge count;
	Create undirected expected edge count;
	Handle builder expected edge count negative;
	Check transitive closure;
	Build directed graph;
	Build undirected graph;
	Build directed value graph;
	Build undirected value graph;
	Build directed network;
	Build undirected network

1.7. Add a class for package sanity tests. It allows to:

	Instantiate package sanity tests;
	Handle test nulls;
	Get graph with node;
	Get network with node

