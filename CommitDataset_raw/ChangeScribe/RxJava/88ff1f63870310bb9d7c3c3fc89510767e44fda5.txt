BUG - FEATURE: <type-ID> 

This is a degenerate modifier commit: this change set is composed of empty, incidental, and abstract methods. These methods indicate that a new feature is planned. 
 This change set is mainly composed of:  

1. Changes to package io.reactivex:  

1. Changes to package io.reactivex.internal.operators.flowable:  

1.1. Add a class for flowable flat map completable test. It allows to:

	Handle normal flowable;
	Apply v integer;
	Handle mapper throws flowable;
	Handle mapper returns null flowable;
	Handle normal delay error flowable;
	Handle normal async flowable;
	Handle normal async flowable max concurrency;
	Handle normal delay error all flowable;
	Handle normal delay inner error all flowable;
	Handle normal non delay error outer flowable;
	Get fused flowable;
	Handle normal;
	Handle mapper throws;
	Handle mapper returns null;
	Handle normal delay error;
	Handle normal async;
	Handle normal delay error all;
	Handle normal delay inner error all;
	Handle normal non delay error outer;
	Get fused;
	Handle disposed;
	Handle normal async max concurrency;
	Handle disposed flowable;
	Handle bad source;
	Apply flowable;
	Get fused internals flowable;
	Process  on subscribe;
	Process  on next;
	Process  on error;
	Process  on complete;
	Handle inner observer flowable;
	Subscribe actual;
	Handle bad source flowable;
	Handle inner observer;
	Delay error max concurrency;
	Handle async max concurrency

1.2. Add a class for flowable flat map maybe test. It allows to:

	Handle normal;
	Apply v integer;
	Handle normal empty;
	Handle normal delay error;
	Handle normal async;
	Handle normal async max concurrency;
	Handle normal async max concurrency 1;
	Handle mapper throws flowable;
	Handle mapper returns null flowable;
	Handle normal delay error all;
	Handle normal backpressured;
	Handle normal max concurrent 1 backpressured;
	Handle normal max concurrent 2 backpressured;
	Take async;
	Take flowable flat map maybe test;
	Handle middle error;
	Apply;
	Call;
	Handle disposed;
	Handle async flatten;
	Handle async flatten none;
	Handle async flatten none max concurrency;
	Handle async flatten error max concurrency;
	Handle success error;
	Handle complete error;
	Double flowable flat map maybe test on subscribe;
	Apply flowable;
	Handle bad source;
	Subscribe actual;
	Handle bad inner source;
	Handle emission queue trigger;
	Process  on next;
	Apply v publish processor;
	Convert emission queue trigger;
	Dispose inner;
	Handle inner success completes after main;
	Handle backpressure;
	Handle error;
	Handle error delayed;
	Handle request cancel race;
	Run;

1.3. Add a class for flowable flat map single test. It allows to:

	Handle normal;
	Apply v integer;
	Handle normal delay error;
	Handle normal async;
	Handle normal async max concurrency;
	Handle normal async max concurrency 1;
	Handle mapper throws flowable;
	Handle mapper returns null flowable;
	Handle normal delay error all;
	Handle normal backpressured;
	Handle normal max concurrent 1 backpressured;
	Handle normal max concurrent 2 backpressured;
	Take async;
	Take flowable flat map single test;
	Handle middle error;
	Apply;
	Call;
	Handle async flatten;
	Handle success error;
	Handle disposed;
	Double flowable flat map single test on subscribe;
	Apply flowable;
	Handle bad source;
	Subscribe actual;
	Handle bad inner source;
	Handle emission queue trigger;
	Process  on next;
	Apply v publish processor;
	Dispose inner;
	Handle inner success completes after main;
	Handle backpressure;
	Handle error;
	Handle error delayed;
	Handle request cancel race;
	Run;
	Handle async flatten error max concurrency;

2. Changes to package io.reactivex.internal.operators.observable:  

2.1. Add a class for observable flat map completable test. It allows to:

	Handle normal observable;
	Apply v integer;
	Handle mapper throws observable;
	Handle mapper returns null observable;
	Handle normal delay error observable;
	Handle normal async observable;
	Handle normal delay error all observable;
	Handle normal delay inner error all observable;
	Handle normal non delay error outer observable;
	Get fused observable;
	Handle disposed observable;
	Handle normal;
	Handle mapper throws;
	Handle mapper returns null;
	Handle normal delay error;
	Handle normal async;
	Handle normal delay error all;
	Handle normal delay inner error all;
	Handle normal non delay error outer;
	Get fused;
	Handle disposed;
	Handle inner observer;
	Subscribe actual;
	Handle bad source;
	Apply observable;
	Get fused internals observable;
	Process  on subscribe;
	Process  on next;
	Process  on error;
	Process  on complete;
	Handle inner observer observable;
	Handle bad source observable;

2.2. Add a class for observable flat map maybe test. It allows to:

	Handle normal;
	Apply v integer;
	Handle normal empty;
	Handle normal delay error;
	Handle normal async;
	Handle mapper throws observable;
	Handle mapper returns null observable;
	Handle normal delay error all;
	Take async;
	Take observable flat map maybe test;
	Handle middle error;
	Apply;
	Call;
	Handle async flatten;
	Handle async flatten none;
	Handle success error;
	Handle complete error;
	Handle disposed;
	Handle inner success completes after main;
	Double observable flat map maybe test on subscribe;
	Apply f observable;
	Handle bad source;
	Subscribe actual;
	Handle bad inner source;
	Handle emission queue trigger;
	Process  on next;
	Apply v publish subject;
	Convert emission queue trigger;
	Dispose inner;

2.3. Add a class for observable flat map single test. It allows to:

	Handle normal;
	Apply v integer;
	Handle normal delay error;
	Handle normal async;
	Handle mapper throws observable;
	Handle mapper returns null observable;
	Handle normal delay error all;
	Take async;
	Take observable flat map single test;
	Handle middle error;
	Apply;
	Call;
	Handle async flatten;
	Handle success error;
	Handle disposed;
	Handle inner success completes after main;
	Double observable flat map single test on subscribe;
	Apply f observable;
	Handle bad source;
	Subscribe actual;
	Handle bad inner source;
	Handle emission queue trigger;
	Process  on next;
	Apply v publish subject;
	Dispose inner;

