BUG - FEATURE: <type-ID> 

This is a degenerate modifier commit: this change set is composed of empty, incidental, and abstract methods. These methods indicate that a new feature is planned. This commit  includes changes to internationalization, properties or configuration files (gradle-wrapper.properties). 
 This change set is mainly composed of:  

1. Changes to package io.reactivex:  

1.1. Add a class for flowable. It allows to:

	Get amb;
	Get amb array;
	Buffer size;
	Combine latest;
	Combine latest delay error;
	Get concat;
	Concat array;
	Concat array delay error;
	Concat array eager;
	Concat array eager delay error;
	Handle concat delay error;
	Concat eager;
	Create source flowable on subscribe;
	Defer supplier callable;
	Handle empty;
	Get error;
	Process flowable flowable from array;
	Process flowable flowable from callable;
	Process flowable flowable from future;
	Process flowable flowable from iterable;
	Process flowable flowable from publisher;
	Generate generator consumer;
	Generate initial state callable;
	Get interval;
	Handle interval range;
	Just flowable;
	Merge sources iterable;
	Merge array;
	Merge sources publisher;
	Merge source 1 publisher;
	Merge delay error;
	Merge array delay error;
	Never flowable;
	Get range;
	Get range long;
	Get sequence equal;
	Switch sources publisher on next;
	Switch sources publisher on next delay error;
	Get timer;
	Handle unsafe create;
	Using resource supplier callable;
	Get zip;
	Zip array;
	Zip iterable;
	All predicate;
	Get amb with;
	Any predicate;
	A flowable converter;
	Blocking flowable first;
	Blocking  first default item;
	Blocking on next consumer for each;
	Blocking iterable;
	Blocking last;
	Blocking latest;
	Blocking initial item most recent;
	Blocking next;
	Blocking single;
	Convert flowable to future;
	Subscribe flowable;
	Subscribe on next consumer;
	Subscribe subscriber;
	Get buffer;
	Get cache;
	Get cache with initial capacity;
	Cast clazz class;
	Collect initial item supplier callable;
	Collect  into initial item;
	Compose composer flowable transformer;
	Concat map;
	Concat map completable;
	Concat map completable delay error;
	Concat map delay error;
	Concat map eager;
	Concat map eager delay error;
	Concat map iterable;
	Concat map  maybe mapper function;
	Concat map  maybe delay error;
	Concat map single;
	Concat map single delay error;
	Concat  with other publisher;
	Concat  with other single source;
	Concat  with other maybe source;
	Concat  with other completable source;
	Check if flowable contains;
	Get count;
	Get debounce;
	Get default if empty;
	Get delay;
	Delay subscription;
	Dematerialize flowable;
	Dematerialize selector function;
	Handle distinct;
	Handle distinct until changed;
	Do  finally on finally action;
	Do on after next consumer after next;
	Do on after terminate action after terminate;
	Do on cancel action on cancel;
	Do on complete action on complete;
	Do on next consumer on each;
	Do on notification consumer on each;
	Do subscriber on each;
	Do on error consumer on error;
	Do on subscribe consumer on lifecycle;
	Do on next consumer on next;
	Do on request long consumer on request;
	Do on subscribe consumer on subscribe;
	Do on terminate action on terminate;
	Get element at;
	Get element at or error;
	Get filter;
	First element;
	First flowable;
	First or error;
	Handle flat map;
	Handle flat map completable;
	Handle flat map iterable;
	Handle flat map maybe;
	Handle flat map single;
	Process flowable flowable for each;
	Process flowable flowable for each while;
	Get group by;
	Get group join;
	Hide flowable;
	Ignore elements;
	Check if flowable is empty;
	Join other publisher;
	Handle last element;
	Handle last;
	Handle last or error;
	Lift lifter flowable operator;
	Get limit;
	Map mapper function;
	Materialize flowable;
	Merge  with other publisher;
	Merge  with other single source;
	Merge  with other maybe source;
	Merge  with other completable source;
	Observe  on scheduler;
	Process flowable flowable of type;
	Process flowable flowable on backpressure buffer;
	Process flowable flowable on backpressure drop;
	Process flowable flowable on backpressure latest;
	Process flowable flowable on error resume next;
	Process flowable flowable on error return;
	Process flowable flowable on error return item;
	Process flowable flowable on exception resume next;
	Process flowable flowable on terminate detach;
	Parallel flowable;
	Publish flowable;
	Publish selector function;
	Rebatch requests;
	Reduce reducer bi function;
	Reduce seed;
	Reduce  with seed supplier callable;
	Get repeat;
	Repeat  until stop boolean supplier;
	Repeat handler function;
	Get replay;
	Retry flowable;
	Retry bi predicate;
	Retry predicate;
	Retry  until stop boolean supplier;
	Retry handler function;
	Handle safe subscribe;
	Get sample;
	Scan accumulator bi function;
	Scan initial value;
	Scan  with seed supplier callable;
	Serialize flowable;
	Get share;
	Handle single element;
	Handle single;
	Handle single or error;
	Skip flowable;
	Skip time unit;
	Skip last;
	Skip  until other publisher;
	Skip  while predicate;
	Get sorted;
	Start  with items iterable;
	Start  with other publisher;
	Start  with value;
	Start items with array;
	Subscribe flowable subscriber;
	Subscribe actual;
	Subscribe  with subscriber;
	Subscribe  on scheduler;
	Switch other publisher if empty;
	Switch map;
	Switch map completable;
	Switch map completable delay error;
	Switch map delay error;
	Switch map 0;
	Switch map  maybe mapper function;
	Switch map  maybe delay error;
	Switch map single;
	Switch map single delay error;
	Take flowable;
	Take time unit;
	Take last;
	Take  until stop predicate;
	Take  until other publisher;
	Take while;
	Throttle  first time unit;
	Throttle last;
	Throttle latest;
	Throttle time unit with timeout;
	Get time interval;
	Get timeout;
	Get timeout 0;
	Timestamp flowable;
	Timestamp scheduler;
	Timestamp time unit;
	Process flowable flowable t;
	Convert flowable to list;
	Convert flowable to map;
	Convert flowable to multimap;
	Convert flowable to observable;
	Convert flowable to sorted list;
	Unsubscribe  on scheduler;
	Get window;
	Process flowable flowable with latest from;
	Zip  with other iterable;
	Zip  with other publisher;
	Get test;

2. Changes to package io.reactivex.disposables:  

2. Changes to package io.reactivex.flowables:  

2.1. Add a class for connectable flowable. It allows to:

	Connect connection consumer;
	Connect connectable flowable;
	Ref count;
	Get auto connect;

2.2. Add a class for grouped flowable. It allows to:

	Instantiate grouped flowable  with key;
	Get key

3. Changes to package io.reactivex.internal.operators.flowable:  

3.1. Add a class for buffer until subscriber test. It allows to:

	Handle test issue 1677;
	Apply integer observable flowable;
	Apply integer;
	Accept integers list

3.2. Add a class for notification lite test. It allows to:

	Handle test complete;
	Handle test value kind;
	Handle solo enum;
	Handle error notification;
	Handle complete notification;
	Handle disposable notification;
	Handle subscription notification

4. Changes to package io.reactivex.internal.subscriptions:  

4. Changes to package io.reactivex.internal.util:  

4. Changes to package io.reactivex.observables:  

4. Changes to package io.reactivex.observers:  

4.1. Add a class for default observer. It allows to:

	Process default observer default observer on subscribe;
	Cancel default observer;
	Process default observer default observer on start

4.2. Add a class for safe observer. It allows to:

	Instantiate safe observer  with downstream observer;
	Process safe observer safe observer on subscribe;
	Dispose safe observer;
	Check if safe observer is disposed;
	Process safe observer safe observer on next;
	Process safe observer safe observer on next no subscription;
	Process safe observer safe observer on error;
	Process safe observer safe observer on complete;
	Process safe observer safe observer on complete no subscription

4.3. Add a class for serialized observer. It allows to:

	Instantiate serialized observer  with downstream observer;
	Instantiate serialized observer  with actual observer;
	Process serialized observer serialized observer on subscribe;
	Dispose serialized observer;
	Check if serialized observer is disposed;
	Process serialized observer serialized observer on next;
	Process serialized observer serialized observer on error;
	Process serialized observer serialized observer on complete;
	Emit loop

4.4. Add a class for test observer. It allows to:

	Create test observer;
	Create delegate observer;
	Instantiate test observer;
	Instantiate test observer  with downstream observer;
	Process test observer test observer on subscribe;
	Process test observer test observer on next;
	Process test observer test observer on error;
	Process test observer test observer on complete;
	Check if test observer is canceled;
	Cancel test observer;
	Dispose test observer;
	Check if test observer is disposed;
	Check if test observer has subscription;
	Subscribed test observer;
	Assert test observer not subscribed;
	Assert  of check consumer;
	Set initial fusion mode;
	Assert fusion mode;
	Convert fusion mode;
	Assert fuseable;
	Assert test observer not fuseable;
	Process test observer test observer on success;

5. Changes to package io.reactivex.plugins:  

5. Changes to package io.reactivex.processors:  

5.1. Add a class for serialized processor. It allows to:

	Instantiate serialized processor  with actual flowable processor;
	Subscribe actual;
	Process serialized processor serialized processor on subscribe;
	Process serialized processor serialized processor on next;
	Process serialized processor serialized processor on error;
	Process serialized processor serialized processor on complete;
	Emit loop;
	Check if serialized processor has subscribers;
	Check if serialized processor has throwable;
	Get throwable;
	Check if serialized processor has complete

6. Changes to package io.reactivex.schedulers:  

6. Changes to package io.reactivex.single:  

6.1. Add a class for single null tests. It allows to:

	Handle amb iterable null;
	Handle amb iterable iterator null;
	Get iterator;
	Handle amb iterable one is null;
	Handle amb array null;
	Handle amb array one is null;
	Concat iterable null;
	Concat iterable iterator null;
	Concat iterable one is null;
	Concat observable null;
	Concat null;
	Create null;
	Defer null;
	Defer returns  null;
	Handle error supplier null;
	Handle error supplier returns null;
	Handle error null;
	Process single null tests single null tests from callable null;
	Process single null tests single null tests from callable returns null;
	Call;
	Process single null tests single null tests from future null;
	Process single null tests single null tests from future returns null;
	Process single null tests single null tests from future timed future null;
	Process single null tests single null tests from future timed unit null;
	Process single null tests single null tests from future timed scheduler null;
	Process single null tests single null tests from future timed returns null;
	Process single null tests single null tests from future scheduler null;
	Process single null tests single null tests from publisher null;
	Just null;
	Merge iterable null;
	Merge iterable iterator null;
	Merge iterable one is null;
	Merge single null;
	Merge null;
	Handle timer unit null;
	Handle timer scheduler null;
	Check if single null tests equals first null;
	Check if single null tests equals second null;
	Using resource supplier null;
	Apply;
	Using single supplier null;
	Using single supplier returns  null;
	Using dispose  null;
	Zip iterable null;
	Zip iterable iterator null;
	Zip iterable one is null;
	Zip iterable one function null;
	Zip iterable one function returns  null;
	Zip null;
	Invoke method;
	Zip 2 first null;
	Apply b integer;
	Zip 2 second null;
	Apply a integer;
	Zip 2 zipper null;
	Zip 2 zipper returnsd null;
	Zip array  null;
	Zip iterable two is null;
	Zip array one is null;
	Zip array function  null;
	Zip array function returns  null;
	Handle amb with null;
	Compose null;
	Cast null;
	Concat single null tests with;
	Delay unit  null;
	Delay scheduler  null;
	Do single null tests on subscribe null;
	Do single null tests on success;
	Do single null tests on error;
	Do single null tests on dispose null;
	Handle flat map null;
	Handle flat map function returns null;
	Apply v integer;
	Handle flat map publisher null;
	Handle flat map publisher function returns null;
	Lift null;
	Lift function returns  null;
	Apply single observer;
	Check if single null tests contains null;
	Check if single null tests contains comparer null;
	Merge single null tests with null;
	Observe single null tests on null;
	Process single null tests single null tests on error return supplier null;
	Process single null tests single null tests on error returns supplier returns null;
	Apply throwable;
	Process single null tests single null tests on error return value null;
	Process single null tests single null tests on error resume next single null;
	Process single null tests single null tests on error resume next function null;
	Process single null tests single null tests on error resume next function returns null;
	Repeat when null;
	Repeat when function returns  null;
	Apply v flowable;
	Repeat single null tests until null;
	Retry single null tests;
	Retry predicate  null;
	Retry when null;
	Retry when function returns  null;
	Apply flowable;
	Subscribe bi consumer null;
	Subscribe consumer  null;
	Subscribe singe subscriber null;
	Subscribe single null tests on success null;
	Accept throwable;
	Subscribe single null tests on error null;
	Accept v integer;
	Subscribe subscriber  null;
	Subscribe single null tests on null;
	Timeout unit  null;
	Timeout scheduler  null;
	Timeout other null;
	Timeout other 2 null;
	Convert single null tests to null;
	Process single null tests single null tests as null;
	Zip single null tests with null;
	Zip single null tests with function null;
	Zip single null tests with function returns null;

6.2. Add a class for single test. It allows to:

	Handle test hello world;
	Convert test hello world;
	Process  on subscribe;
	Process  on success;
	Process  on error;
	Handle test map;
	Apply;
	Handle test zip;
	Handle test zip with;
	Handle test merge;
	Handle test merge with;
	Handle test create success;
	Subscribe single observer;
	Handle test create error;
	Handle test async;
	Handle test flat map;
	Handle test timeout;
	Handle test timeout with fallback;
	Handle test unsubscribe;
	Run;
	Convert test unsubscribe;
	Handle test unsubscribe via returned subscription;
	Handle test backpressure as observable;
	Subscribe t single observer;
	Convert single test to observable;
	Do single test on event null event;
	Do single test on event complete;
	Accept integer;
	Do single test on event error;
	Accept throwable;
	Convert single test to future;
	Convert single test to future throws;
	Convert single test to flowable iterable remove;
	Zip iterable object;
	Process single test single test t;
	Apply v single;
	A single test;
	Process single test single test from observable null;
	Process single test single test from observable empty;
	Process single test single test from observable more than 1 elements;
	Process single test single test from observable one element;
	Process single test single test from observable error;
	Handle implementation throws;
	Subscribe actual

7. Changes to package io.reactivex.subjects:  

7. Changes to package io.reactivex.subscribers:  

