BUG - FEATURE: <type-ID> 

This is a degenerate modifier commit: this change set is composed of empty, incidental, and abstract methods. These methods indicate that a new feature is planned. 
 This change set is mainly composed of:  

1. Changes to package io.reactivex:  

1. Changes to package io.reactivex.internal.fuseable:  

1.1. Add an interface declaration  for fuse to maybe. It allows to:

	Convert fuse

2. Changes to package io.reactivex.internal.operators.maybe:  

2.1. Add a class for maybe delay other test. It allows to:

	Just maybe delay other test with on next;
	Just maybe delay other test with on complete;
	Just maybe delay other test with on error;
	Handle empty with on next;
	Handle empty with on complete;
	Handle empty with on error;
	Handle error with on next;
	Handle error with on complete;
	Handle error with on error;
	Process maybe delay other test maybe delay other test with completable dispose;
	Process maybe delay other test maybe delay other test with completable double on subscribe;
	Apply completable;
	Process maybe delay other test maybe delay other test with other publisher dispose;
	Process maybe delay other test maybe delay other test with other publisher double on subscribe;
	Apply c maybe;
	Handle other publisher next slips through;
	Subscribe actual

2.2. Add a class for maybe delay subscription test. It allows to:

	Handle normal;
	Get timed;
	Get timed empty;
	Get timed test scheduler;
	Handle other error;
	Handle main error;
	Process maybe delay subscription test maybe delay subscription test with publisher dispose;
	Process maybe delay subscription test maybe delay subscription test with publisher double on subscribe;
	Apply maybe;
	Process maybe delay subscription test maybe delay subscription test with publisher call after terminal event;
	Subscribe actual

2.3. Add a class for maybe flat map bi selector test. It allows to:

	Combine maybe flat map bi selector test;
	Apply a integer;
	Handle normal;
	Apply v integer;
	Handle normal with empty;
	Handle empty with just;
	Handle error with just;
	Just maybe flat map bi selector test with error;
	Dispose maybe flat map bi selector test;
	Apply;
	Apply b integer;
	Double maybe flat map bi selector test on subscribe;
	Apply v maybe;
	Handle mapper throws;
	Handle mapper returns null;
	Result selector throws;
	Result selector returns  null;
	Handle mapper cancels;

2.4. Add a class for maybe hide test. It allows to:

	Handle normal;
	Handle empty;
	Handle error;
	Get hidden;
	Dispose maybe hide test;
	Apply maybe;
	Check if maybe hide test is disposed;
	Double maybe hide test on subscribe;
	Apply f maybe

2.5. Add a class for maybe is empty test. It allows to:

	Handle normal;
	Handle empty;
	Handle error;
	Get fused back to maybe;
	Handle normal to maybe;
	Handle empty to maybe;
	Convert error;
	Dispose maybe is empty test;
	Apply maybe;
	Check if maybe is empty test is disposed;
	Double maybe is empty test on subscribe;
	Apply f maybe;
	Dispose maybe is empty test to maybe;
	Check if maybe is empty test is disposed to maybe;
	Convert double on subscribe;

2.6. Add a class for maybe merge with test. It allows to:

	Handle normal

2.7. Add a class for maybe of type test. It allows to:

	Handle normal;
	Handle normal downcast;
	Not instance;
	Handle error;
	Handle error not instance;
	Dispose maybe of type test;
	Apply maybe;
	Check if maybe of type test is disposed;
	Double maybe of type test on subscribe;
	Apply f maybe

2.8. Add a class for maybe on error X test. It allows to:

	Process maybe on error X test maybe on error X test on error return const;
	Process maybe on error X test maybe on error X test on error return;
	Process maybe on error X test maybe on error X test on error complete;
	Process maybe on error X test maybe on error X test on error complete true;
	Process maybe on error X test maybe on error X test on error complete false;
	Process maybe on error X test maybe on error X test on error return function throws;
	Apply v throwable;
	Process maybe on error X test maybe on error X test on error complete predicate throws;
	Handle test;
	Process maybe on error X test maybe on error X test on error resume next;
	Process maybe on error X test maybe on error X test on exception resume next;
	Process maybe on error X test maybe on error X test on exception resume next passthrough;
	Process maybe on error X test maybe on error X test on error resume next function throws;
	Process maybe on error X test maybe on error X test on error return success;
	Process maybe on error X test maybe on error X test on error return empty;
	Process maybe on error X test maybe on error X test on error return dispose;
	Process maybe on error X test maybe on error X test on error return double on subscribe;
	Apply v maybe;
	Process maybe on error X test maybe on error X test on error complete success;
	Process maybe on error X test maybe on error X test on error complete empty;
	Process maybe on error X test maybe on error X test on error complete dispose;
	Process maybe on error X test maybe on error X test on error complete double on subscribe;
	Process maybe on error X test maybe on error X test on error next dispose;
	Process maybe on error X test maybe on error X test on error next double on subscribe;
	Process maybe on error X test maybe on error X test on error next is also error

