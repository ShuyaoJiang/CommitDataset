BUG - FEATURE: <type-ID> 

This is a degenerate modifier commit: this change set is composed of empty, incidental, and abstract methods. These methods indicate that a new feature is planned. 
 This change set is mainly composed of:  

1. Changes to package io.reactivex:  

1. Changes to package io.reactivex.exceptions:  

1. Changes to package io.reactivex.internal.operators.maybe:  

1.1. Add a class for maybe flat map iterable flowable test. It allows to:

	Handle normal;
	Apply v integer;
	Handle empty iterable;
	Handle error;
	Handle empty;
	Handle backpressure;
	Take maybe flat map iterable flowable test;
	Get fused;
	Get fused no sync;
	Handle iterator crash;
	Check if maybe flat map iterable flowable test has next crash;
	Handle next crash;
	Check if maybe flat map iterable flowable test has next crash 2;
	Handle async 1;
	Apply;
	Handle async 2;
	Handle async 3;
	Handle async 4;
	Get fused empty check;
	Process  on subscribe;
	Process  on next;
	Process  on error;
	Process  on complete;
	Check if maybe flat map iterable flowable test has next throws unbounded;
	Handle next throws unbounded;
	Check if maybe flat map iterable flowable test has next throws;
	Handle next throws;
	Handle request before;
	Handle request create inner race;
	Run;
	Cancel create inner race;
	Slow path cancel  after has next;
	Get iterator;
	Check if  has next;
	Handle next;
	Remove;
	Fast path cancel  after has next;

1.2. Add a class for maybe flat map iterable observable test. It allows to:

	Handle normal;
	Apply v integer;
	Handle empty iterable;
	Handle error;
	Handle empty;
	Take maybe flat map iterable observable test;
	Get fused;
	Get fused no sync;
	Handle iterator crash;
	Check if maybe flat map iterable observable test has next crash;
	Handle next crash;
	Check if maybe flat map iterable observable test has next crash 2;
	Double maybe flat map iterable observable test on subscribe;
	Apply o maybe;
	Apply;
	Dispose maybe flat map iterable observable test;
	Handle async 1;
	Handle async 2;
	Handle async 3;
	Handle async 4;
	Get fused empty check;
	Process  on subscribe;
	Process  on next;
	Process  on error;
	Process  on complete

2. Changes to package io.reactivex.internal.operators.single:  

2.1. Add a class for single flat map iterable flowable test. It allows to:

	Handle normal;
	Apply v integer;
	Handle empty iterable;
	Handle error;
	Handle backpressure;
	Take single flat map iterable flowable test;
	Get fused;
	Get fused no sync;
	Handle iterator crash;
	Check if single flat map iterable flowable test has next crash;
	Handle next crash;
	Check if single flat map iterable flowable test has next crash 2;
	Handle async 1;
	Apply;
	Handle async 2;
	Handle async 3;
	Handle async 4;
	Get fused empty check;
	Process  on subscribe;
	Process  on next;
	Process  on error;
	Process  on complete;
	Check if single flat map iterable flowable test has next throws unbounded;
	Handle next throws unbounded;
	Check if single flat map iterable flowable test has next throws;
	Handle next throws;
	Handle request before;
	Handle request create inner race;
	Run;
	Cancel create inner race;
	Slow path cancel  after has next;
	Get iterator;
	Check if  has next;
	Handle next;
	Remove;
	Fast path cancel  after has next;
	Handle request iterator race;

2.2. Add a class for single flat map iterable observable test. It allows to:

	Handle normal;
	Apply v integer;
	Handle empty iterable;
	Handle error;
	Take single flat map iterable observable test;
	Get fused;
	Get fused no sync;
	Handle iterator crash;
	Check if single flat map iterable observable test has next crash;
	Handle next crash;
	Check if single flat map iterable observable test has next crash 2;
	Double single flat map iterable observable test on subscribe;
	Apply o single;
	Apply;
	Dispose single flat map iterable observable test;
	Handle async 1;
	Handle async 2;
	Handle async 3;
	Handle async 4;
	Get fused empty check;
	Process  on subscribe;
	Process  on next;
	Process  on error;
	Process  on complete

