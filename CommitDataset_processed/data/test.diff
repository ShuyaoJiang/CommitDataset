[+++ b/COMPARISON.md, + <td>Name conventions</td>, +++ b/COMPARISON.md, + <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, + pom.artifactId = 'eventbus', +++ b/COMPARISON.md, + <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, + pom.artifactId = 'eventbus', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de), + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., + public static String TAG =
[+++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.3.3', +++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.3.3', +++ b/EventBusTest/AndroidManifest.xml, + <instrumentation
[+++ b/EventBusTest/AndroidManifest.xml, + <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
[+++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, + public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky) {, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, + public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import de.greenrobot.event.meta.SubscriberInfo;, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null,
[+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java, +/*
[+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusStickyEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusStickyEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberExceptionTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusStickyEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberExceptionTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberInJarTestWithIndex.java]
[+++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="34", + android:versionName="2.0.2" >, +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="34", + android:versionName="2.0.2" >, +++ b/MPChartExample/build.gradle, + versionCode 34, + versionName '2.0.2']
[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/AxisRenderer.java, + if (labelCount == 0 || range <= 0 || Double.isInfinite(range)) {, + mAxis.mCenteredEntries = new float[]{};, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/AxisRenderer.java, + if (labelCount == 0 || range <= 0 || Double.isInfinite(range)) {, + mAxis.mCenteredEntries = new float[]{};, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/YAxisRendererRadarChart.java, + if (labelCount == 0 || range <= 0 || Double.isInfinite(range)) {, + mAxis.mCenteredEntries = new float[]{};]
[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/listener/BarLineChartTouchListener.java, + if (mChart.isScaleXEnabled() != mChart.isScaleYEnabled()) {, + mTouchMode = mChart.isScaleXEnabled() ? X_ZOOM : Y_ZOOM;, + } else {, + mTouchMode = mSavedXDist > mSavedYDist ? X_ZOOM : Y_ZOOM;, + }, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/listener/BarLineChartTouchListener.java, + if (mChart.isScaleXEnabled() != mChart.isScaleYEnabled()) {, + mTouchMode = mChart.isScaleXEnabled() ? X_ZOOM : Y_ZOOM;, + } else {, + mTouchMode = mSavedXDist > mSavedYDist ? X_ZOOM : Y_ZOOM;, + }, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/PieChartRenderer.java, + if ((Math.abs(dataSet.getEntryForIndex(j).getY()) > Utils.FLOAT_EPSILON)) {, + if ((Math.abs(e.getY()) > Utils.FLOAT_EPSILON)) {, + if (sweepAngleOuter % 360f <= Utils.FLOAT_EPSILON) {, + if ((Math.abs(set.getEntryForIndex(j).getY()) > Utils.FLOAT_EPSILON)) {, + if ((Math.abs(e.getY()) > Utils.FLOAT_EPSILON)) {]
[+++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, + protected transient ValueFormatter mValueFormatter;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, + protected transient ValueFormatter mValueFormatter;, +++ b/Projects_using_MPAndroidChart.txt]
[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, + l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);, + l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);, + l.setOrientation(Legend.LegendOrientation.HORIZONTAL);, + l.setDrawInside(false);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, + l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);, + l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);, + l.setOrientation(Legend.LegendOrientation.HORIZONTAL);, + l.setDrawInside(false);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, + l.setVerticalAlignment(Legend.LegendVerticalAlignment.TOP);, + l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);, + l.setOrientation(Legend.LegendOrientation.VERTICAL);, + l.setDrawInside(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, + l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);, + l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);, + l.setOrientation(Legend.LegendOrientation.HORIZONTAL);, + l.setDrawInside(false);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, + l.setVerticalAlignment(Legend.LegendVerticalAlignment.TOP);, + l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);, + l.setOrientation(Legend.LegendOrientation.VERTICAL);, + l.setDrawInside(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivitySinus.java, + l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);, + l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);, + l.setOrientation(Legend.LegendOrientation.HORIZONTAL);, + l.setDrawInside(false);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, + l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);, + l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);, + l.setOrientation(Legend.LegendOrientation.HORIZONTAL);, + l.setDrawInside(false);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, + l.setVerticalAlignment(Legend.LegendVerticalAlignment.TOP);, + l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);, + l.setOrientation(Legend.LegendOrientation.VERTICAL);, + l.setDrawInside(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivitySinus.java, + l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);, + l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);, + l.setOrientation(Legend.LegendOrientation.HORIZONTAL);, + l.setDrawInside(false);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BubbleChartActivity.java, + l.setVerticalAlignment(Legend.LegendVerticalAlignment.TOP);, + l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);, + l.setOrientation(Legend.LegendOrientation.VERTICAL);, +
[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.data.Entry;, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.data.Entry;, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarLineChartBase.java, +// @Override, +// protected float[] getMarkerPosition(Highlight high) {, +// return new float[] { high.getXPx(), high.getYPx() };, +//, +// int dataSetIndex = highlight.getDataSetIndex();, +// float xPos = e.getX();, +// float yPos = e.getY() * mAnimator.getPhaseY();, +//, +// // position of the marker depends on selected value index and value, +// float[] pts = new float[]{, +// xPos, yPos, +// };, +//, +// getTransformer(mData.getDataSetByIndex(dataSetIndex).getAxisDependency()), +// .pointValuesToPixel(pts);, +//, +// return pts;, +// }, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.data.Entry;, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarLineChartBase.java, +// @Override, +// protected float[] getMarkerPosition(Highlight high) {, +// return new float[] {
[+++ b/MPChartExample/AndroidManifest.xml, +++ b/MPChartExample/AndroidManifest.xml, +++ /dev/null, +++ b/MPChartExample/AndroidManifest.xml, +++ /dev/null, +++ b/MPChartExample/res/layout/activity_barchart.xml, + android:max="500", +++ b/MPChartExample/AndroidManifest.xml, +++ /dev/null, +++ b/MPChartExample/res/layout/activity_barchart.xml, + android:max="500", +++ /dev/null, +++ b/MPChartExample/AndroidManifest.xml, +++ /dev/null, +++ b/MPChartExample/res/layout/activity_barchart.xml, + android:max="500", +++ /dev/null, +++ b/MPChartExample/res/layout/activity_candlechart.xml, + android:max="500", +++ b/MPChartExample/AndroidManifest.xml, +++ /dev/null, +++ b/MPChartExample/res/layout/activity_barchart.xml, + android:max="500", +++ /dev/null, +++ b/MPChartExample/res/layout/activity_candlechart.xml, + android:max="500", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, + tvX.setText("" + (mSeekBarX.getProgress() + 1));, + float mult = mSeekBarY.getProgress() * 10000000f;, + data.setValueFormatter(new LargeValueFormatter());, +++ b/MPChartExample/AndroidManifest.xml, +++ /dev/null, +++ b/MPChartExample/res/layout/activity_barchart.xml, + android:max="500", +++ /dev/null, +++ b/MPChartExample/res/layout/activity_candlechart.xml, + android:max="500", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, + tvX.setText("" + (mSeekBarX.getProgress() + 1));, + float mult = mSeekBarY.getProgress() * 10000000f;,
[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarLineChartBase.java, + * When enabled, the borders rectangle will be rendered., + * If this is enabled, there is no point drawing the axis-lines of x- and y-axis., + * When enabled, the borders rectangle will be rendered., + * If this is enabled, there is no point drawing the axis-lines of x- and y-axis., + *, + * @return, + */, + public boolean isDrawBordersEnabled() {, + return mDrawBorders;, + }, +, + /**]
[+++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="16", + android:versionName="1.4.1" >, + <activity android:name="RadarChartActivitry"></activity>, + <activity android:name="LineChartActivityColored"></activity>, +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="16", + android:versionName="1.4.1" >, + <activity android:name="RadarChartActivitry"></activity>, + <activity android:name="LineChartActivityColored"></activity>, +++ b/MPChartExample/build.gradle, + versionCode 16, + versionName '1.4.1', +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="16", + android:versionName="1.4.1" >, + <activity android:name="RadarChartActivitry"></activity>, + <activity android:name="LineChartActivityColored"></activity>, +++ b/MPChartExample/build.gradle, + versionCode 16, + versionName '1.4.1', +++ b/MPChartExample/res/layout/activity_colored_lines.xml, +<?xml version="1.0" encoding="utf-8"?>, +<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android", + android:layout_width="match_parent", + android:layout_height="match_parent", + android:background="@android:color/white", + android:orientation="vertical" >, +, + <com.github.mikephil.charting.charts.LineChart, + android:id="@+id/chart1", + android:layout_weight="1", + android:layout_width="match_parent", + android:layout_height="match_parent"/>, + <com.github.mikephil.charting.charts.LineChart, + android:id="@+id/chart2", + android:layout_weight="1", + android:layout_width="match_parent", + android:layout_height="match_parent"/>, + <com.github.mikephil.charting.charts.LineChart, + android:id="@+id/chart3", + android:layout_weight="1", +
[+++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="26", + android:versionName="1.6.5" >, +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="26", + android:versionName="1.6.5" >, +++ b/MPChartExample/build.gradle, + versionCode 26, + versionName '1.6.5', +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="26", + android:versionName="1.6.5" >, +++ b/MPChartExample/build.gradle, + versionCode 26, + versionName '1.6.5', +++ b/MPChartExample/libs/mpandroidchartlibrary-1-6-5.jar, +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="26", + android:versionName="1.6.5" >, +++ b/MPChartExample/build.gradle, + versionCode 26, + versionName '1.6.5', +++ b/MPChartExample/libs/mpandroidchartlibrary-1-6-5.jar, +++ b/MPChartExample/project.properties, +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="26", + android:versionName="1.6.5" >, +++ b/MPChartExample/build.gradle, + versionCode 26, + versionName '1.6.5', +++ b/MPChartExample/libs/mpandroidchartlibrary-1-6-5.jar, +++ b/MPChartExample/project.properties, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="26", + android:versionName="1.6.5" >, +++ b/MPChartExample/build.gradle, + versionCode 26, + versionName '1.6.5', +++ b/MPChartExample/libs/mpandroidchartlibrary-1-6-5.jar, +++ b/MPChartExample/project.properties, +++
[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CombinedChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CombinedChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartTime.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CombinedChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartTime.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CombinedChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartTime.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivityNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CombinedChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartTime.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivityNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/DayAxisValueFormatter.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CombinedChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartTime.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivityNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/DayAxisValueFormatter.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/MyAxisValueFormatter.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CombinedChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartTime.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivityNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/DayAxisValueFormatter.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/MyAxisValueFormatter.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/MyCustomXAxisValueFormatter.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CombinedChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartTime.java, +++
[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/LineRadarDataSet.java, + if (width < 0.0f), + width = 0.0f;]
[+++ b/MPChartExample/AndroidManifest.xml, + <activity android:name="BarChartActivitySinus"></activity>, +++ b/MPChartExample/AndroidManifest.xml, + <activity android:name="BarChartActivitySinus"></activity>, +++ b/MPChartExample/res/layout/activity_barchart_sinus.xml, +<?xml version="1.0" encoding="utf-8"?>, +<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android", + android:layout_width="match_parent", + android:layout_height="match_parent">, +, + <com.github.mikephil.charting.charts.BarChart, + android:id="@+id/chart1", + android:layout_width="match_parent", + android:layout_height="match_parent", + android:layout_above="@+id/seekbarValues" />, +, + <SeekBar, + android:id="@+id/seekbarValues", + android:layout_width="match_parent", + android:layout_height="wrap_content", + android:layout_alignParentBottom="true", + android:layout_alignParentLeft="true", + android:layout_margin="8dp", + android:layout_marginBottom="35dp", + android:layout_toLeftOf="@+id/tvValueCount", + android:layout_marginRight="5dp", + android:max="750", + android:paddingBottom="12dp" />, +, + <TextView, + android:id="@+id/tvValueCount", + android:layout_width="60dp", + android:layout_height="wrap_content", + android:layout_alignBottom="@+id/seekbarValues", + android:layout_alignParentRight="true", + android:text="0", + android:layout_marginBottom="15dp", + android:layout_marginRight="10dp", + android:gravity="right", + android:textAppearance="?android:attr/textAppearanceMedium" />, +, +</RelativeLayout>, +++ b/MPChartExample/AndroidManifest.xml, + <activity android:name="BarChartActivitySinus"></activity>, +++ b/MPChartExample/res/layout/activity_barchart_sinus.xml, +<?xml version="1.0" encoding="utf-8"?>, +<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android", + android:layout_width="match_parent",
[+++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="38", +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="38", +++ b/MPChartExample/build.gradle, + versionCode 38, +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="38", +++ b/MPChartExample/build.gradle, + versionCode 38, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, + leftAxis.setSpaceTop(15f);, + rightAxis.setSpaceTop(15f);, +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="38", +++ b/MPChartExample/build.gradle, + versionCode 38, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, + leftAxis.setSpaceTop(15f);, + rightAxis.setSpaceTop(15f);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, + // in case all values are equal, + if (leftRange == 0f), + maxLeft = maxLeft + 1f;, +, + if (rightRange == 0f), + maxRight = maxRight + 1f;, +, + offsetLeft += mAxisLeft.getRequiredWidthSpace(mAxisRendererLeft, + .getPaintAxisLabels());, + offsetRight += mAxisRight.getRequiredWidthSpace(mAxisRendererRight, + .getPaintAxisLabels());, +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="38", +++ b/MPChartExample/build.gradle, + versionCode 38, +++
[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/AxisRenderer.java, + if (Double.isInfinite(rawInterval)), + {, + rawInterval = range > 0.0 ? range : 1.0;, + }, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/AxisRenderer.java, + if (Double.isInfinite(rawInterval)), + {, + rawInterval = range > 0.0 ? range : 1.0;, + }, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/YAxisRendererRadarChart.java, + if (Double.isInfinite(rawInterval)), + {, + rawInterval = range > 0.0 ? range : 1.0;, + }]
[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/Chart.java, + if (mData.getEntryCount() <= 0), +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/Chart.java, + if (mData.getEntryCount() <= 0), +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/PieChart.java, + int entryCount = mData.getEntryCount();, +, + mDrawAngles = new float[entryCount];, + mAbsoluteAngles = new float[entryCount];, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/Chart.java, + if (mData.getEntryCount() <= 0), +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/PieChart.java, + int entryCount = mData.getEntryCount();, +, + mDrawAngles = new float[entryCount];, + mAbsoluteAngles = new float[entryCount];, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/PieRadarChartBase.java, + public int getMaxVisibleCount() {, + return mData.getEntryCount();, + }, +, + @Override, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/Chart.java, + if (mData.getEntryCount() <= 0), +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/PieChart.java, + int entryCount = mData.getEntryCount();, +, + mDrawAngles = new float[entryCount];, + mAbsoluteAngles = new float[entryCount];, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/PieRadarChartBase.java,
[+++ b/MPChartExample/res/menu/bar.xml, + android:id="@+id/actionToggleStartzero", + android:title="Toggle StartZero">, + </item>, + <item, +++ b/MPChartExample/res/menu/bar.xml, + android:id="@+id/actionToggleStartzero", + android:title="Toggle StartZero">, + </item>, + <item, +++ b/MPChartExample/res/menu/bubble.xml, + android:id="@+id/actionToggleStartzero", + android:title="Toggle StartZero">, + </item>, + <item, +++ b/MPChartExample/res/menu/bar.xml, + android:id="@+id/actionToggleStartzero", + android:title="Toggle StartZero">, + </item>, + <item, +++ b/MPChartExample/res/menu/bubble.xml, + android:id="@+id/actionToggleStartzero", + android:title="Toggle StartZero">, + </item>, + <item, +++ b/MPChartExample/res/menu/candle.xml, + android:id="@+id/actionToggleStartzero", + android:title="Toggle StartZero">, + </item>, + <item, +++ b/MPChartExample/res/menu/bar.xml, + android:id="@+id/actionToggleStartzero", + android:title="Toggle StartZero">, + </item>, + <item, +++ b/MPChartExample/res/menu/bubble.xml, + android:id="@+id/actionToggleStartzero", + android:title="Toggle StartZero">, + </item>, + <item, +++ b/MPChartExample/res/menu/candle.xml, + android:id="@+id/actionToggleStartzero", + android:title="Toggle StartZero">, + </item>, + <item,
[+++ b/MPChartExample/AndroidManifest.xml, + android:versionName="2.0.7" >, +++ b/MPChartExample/AndroidManifest.xml, + android:versionName="2.0.7" >, +++ b/MPChartExample/build.gradle, + versionName '2.0.7', + //compile 'com.github.PhilJay:MPAndroidChart:v2.0.7' , +++ b/MPChartExample/AndroidManifest.xml, + android:versionName="2.0.7" >, +++ b/MPChartExample/build.gradle, + versionName '2.0.7', + //compile 'com.github.PhilJay:MPAndroidChart:v2.0.7' , +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, + protected boolean mLogEnabled = false;]
[+++ b/MPChartExample/build.gradle, + compileSdkVersion 23, + buildToolsVersion '23.0.1', + targetSdkVersion 23, + classpath 'com.android.tools.build:gradle:1.3.1', + compile 'com.android.support:appcompat-v7:23.0.0', +++ b/MPChartExample/build.gradle, + compileSdkVersion 23, + buildToolsVersion '23.0.1', + targetSdkVersion 23, + classpath 'com.android.tools.build:gradle:1.3.1', + compile 'com.android.support:appcompat-v7:23.0.0', +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import com.github.mikephil.charting.formatter.YAxisValueFormatter;, +import com.xxmassdeveloper.mpchartexample.custom.MyYAxisValueFormatter;, + YAxisValueFormatter custom = new MyYAxisValueFormatter();, +++ b/MPChartExample/build.gradle, + compileSdkVersion 23, + buildToolsVersion '23.0.1', + targetSdkVersion 23, + classpath 'com.android.tools.build:gradle:1.3.1', + compile 'com.android.support:appcompat-v7:23.0.0', +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import com.github.mikephil.charting.formatter.YAxisValueFormatter;, +import com.xxmassdeveloper.mpchartexample.custom.MyYAxisValueFormatter;, + YAxisValueFormatter custom = new MyYAxisValueFormatter();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +import com.github.mikephil.charting.formatter.LargeValueFormatter;, +++ b/MPChartExample/build.gradle, + compileSdkVersion 23, + buildToolsVersion '23.0.1', + targetSdkVersion 23, + classpath 'com.android.tools.build:gradle:1.3.1', + compile 'com.android.support:appcompat-v7:23.0.0', +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import
[+++ /dev/null, +++ /dev/null, +++ b/MPChartLib/src/com/github/mikephil/charting/jobs/AnimatedMoveViewJob.java, +public class AnimatedMoveViewJob extends AnimatedViewPortJob {, +++ /dev/null, +++ b/MPChartLib/src/com/github/mikephil/charting/jobs/AnimatedMoveViewJob.java, +public class AnimatedMoveViewJob extends AnimatedViewPortJob {, +++ b/MPChartLib/src/com/github/mikephil/charting/jobs/AnimatedViewPortJob.java, +package com.github.mikephil.charting.jobs;, +, +import android.animation.ObjectAnimator;, +import android.animation.ValueAnimator;, +import android.annotation.SuppressLint;, +import android.view.View;, +, +import com.github.mikephil.charting.utils.Transformer;, +import com.github.mikephil.charting.utils.ViewPortHandler;, +, +/**, + * Created by Philipp Jahoda on 19/02/16., + */, +@SuppressLint("NewApi"), +public abstract class AnimatedViewPortJob extends ViewPortJob implements ValueAnimator.AnimatorUpdateListener {, +, + protected ObjectAnimator animator;, +, + protected float phase;, +, + protected float xOrigin;, + protected float yOrigin;, +, + public AnimatedViewPortJob(ViewPortHandler viewPortHandler, float xValue, float yValue, Transformer trans, View v, float xOrigin, float yOrigin, long
[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +import com.github.mikephil.charting.highlight.Highlight;, + //xAxis.setXValueFormatter(new MyCustomXValueFormatter());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +import com.github.mikephil.charting.highlight.Highlight;, + //xAxis.setXValueFormatter(new MyCustomXValueFormatter());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/MyCustomXValueFormatter.java, +package com.xxmassdeveloper.mpchartexample.custom;, +, +import com.github.mikephil.charting.utils.ViewPortHandler;, +import com.github.mikephil.charting.utils.XValueFormatter;, +, +/**, + * Created by Philipp Jahoda on 14/09/15., + */, +public class MyCustomXValueFormatter implements XValueFormatter {, +, + public MyCustomXValueFormatter() {, + // maybe do something here or provide parameters in constructor, + }, +, + @Override, + public String getXValue(String original, int index, ViewPortHandler viewPortHandler) {, +, + //Log.i("TRANS", "x: " + viewPortHandler.getTransX() + ", y: " + viewPortHandler.getTransY());, +, + // e.g. adjust the x-axis values depending on scale / zoom level,
[+++ b/MPChartExample/AndroidManifest.xml, + <activity android:name="DrawChartActivity"></activity>, +++ b/MPChartExample/AndroidManifest.xml, + <activity android:name="DrawChartActivity"></activity>, +++ b/MPChartExample/res/layout/activity_barchart.xml, + <com.github.mikephil.charting.charts.BarChart, +++ b/MPChartExample/AndroidManifest.xml, + <activity android:name="DrawChartActivity"></activity>, +++ b/MPChartExample/res/layout/activity_barchart.xml, + <com.github.mikephil.charting.charts.BarChart, +++ b/MPChartExample/res/layout/activity_linechart.xml, + <com.github.mikephil.charting.charts.LineChart, +++ b/MPChartExample/AndroidManifest.xml, + <activity android:name="DrawChartActivity"></activity>, +++ b/MPChartExample/res/layout/activity_barchart.xml, + <com.github.mikephil.charting.charts.BarChart, +++ b/MPChartExample/res/layout/activity_linechart.xml, + <com.github.mikephil.charting.charts.LineChart, +++ b/MPChartExample/res/layout/activity_main.xml, +, + android:text="Draw Chart" />, + <Button, + android:id="@+id/button8", + android:layout_width="match_parent", + android:layout_height="wrap_content", + android:layout_margin="4dp", + android:text="View on GitHub" />, +++ b/MPChartExample/AndroidManifest.xml, + <activity android:name="DrawChartActivity"></activity>, +++ b/MPChartExample/res/layout/activity_barchart.xml, + <com.github.mikephil.charting.charts.BarChart, +++ b/MPChartExample/res/layout/activity_linechart.xml, + <com.github.mikephil.charting.charts.LineChart, +++ b/MPChartExample/res/layout/activity_main.xml, +, + android:text="Draw Chart" />, + <Button, + android:id="@+id/button8", + android:layout_width="match_parent", + android:layout_height="wrap_content", + android:layout_margin="4dp", + android:text="View on GitHub" />, +++ b/MPChartExample/res/layout/activity_multiplecharts.xml,
[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import com.github.mikephil.charting.components.YAxis.AxisDependency;, + YAxis leftAxis = mChart.getAxisLeft();, + leftAxis.setTypeface(tf);, + leftAxis.setLabelCount(8);, + YAxis rightAxis = mChart.getAxisRight();, + rightAxis.setDrawGridLines(false);, + rightAxis.setTypeface(tf);, + rightAxis.setLabelCount(8);, + , + mChart.setValueFormatter(new MyValueFormatter());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import com.github.mikephil.charting.components.YAxis.AxisDependency;, + YAxis leftAxis = mChart.getAxisLeft();, + leftAxis.setTypeface(tf);, + leftAxis.setLabelCount(8);, + YAxis rightAxis = mChart.getAxisRight();, + rightAxis.setDrawGridLines(false);, + rightAxis.setTypeface(tf);, + rightAxis.setLabelCount(8);, + , + mChart.setValueFormatter(new MyValueFormatter());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +import com.xxmassdeveloper.mpchartexample.custom.MyMarkerView;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import com.github.mikephil.charting.components.YAxis.AxisDependency;, + YAxis leftAxis = mChart.getAxisLeft();, + leftAxis.setTypeface(tf);, + leftAxis.setLabelCount(8);, + YAxis rightAxis = mChart.getAxisRight();, + rightAxis.setDrawGridLines(false);, + rightAxis.setTypeface(tf);, + rightAxis.setLabelCount(8);, + , + mChart.setValueFormatter(new MyValueFormatter());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +import com.xxmassdeveloper.mpchartexample.custom.MyMarkerView;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/InvertedLineChartActivity.java, +import com.xxmassdeveloper.mpchartexample.custom.MyMarkerView;,
[+++ b/MPChartExample/res/menu/pie.xml, + <item, + android:id="@+id/actionToggleSpin", + android:title="Spin Animation">, + </item>]
[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/Entry.java, +import com.github.mikephil.charting.utils.Utils;, +, + if (Math.abs(e.x - this.x) > Utils.FLOAT_EPSILON), + if (Math.abs(e.getY() - this.getY()) > Utils.FLOAT_EPSILON), +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/Entry.java, +import com.github.mikephil.charting.utils.Utils;, +, + if (Math.abs(e.x - this.x) > Utils.FLOAT_EPSILON), + if (Math.abs(e.getY() - this.getY()) > Utils.FLOAT_EPSILON), +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/utils/Utils.java, + @SuppressWarnings("unused"), + public final static double DOUBLE_EPSILON = Double.longBitsToDouble(Double.doubleToLongBits(1.0) + 1);, +, + @SuppressWarnings("unused"), + public final static float FLOAT_EPSILON = Float.intBitsToFloat(Float.floatToIntBits(1f) + 1);, +]
[+++ b/MPChartExample/libs/mpandroidchartlibrary-1-6-5.jar, +++ b/MPChartExample/libs/mpandroidchartlibrary-1-6-5.jar, +++ b/MPChartExample/project.properties, +++ b/MPChartExample/libs/mpandroidchartlibrary-1-6-5.jar, +++ b/MPChartExample/project.properties, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +// private void removeLastEntry() {, +//, +// PieData data = mChart.getDataOriginal();, +//, +// if (data != null) {, +//, +// PieDataSet set = data.getDataSet();, +//, +// if (set != null) {, +//, +// Entry e = set.getEntryForXIndex(set.getEntryCount() - 1);, +//, +// data.removeEntry(e, 0);, +// // or remove by index, +// // mData.removeEntry(xIndex, dataSetIndex);, +//, +// mChart.notifyDataSetChanged();, +// mChart.invalidate();, +// }, +// }, +// }, +// , +// private void addEntry() {, +//, +// PieData data = mChart.getDataOriginal();, +// , +// if(data != null) {, +//, +// PieDataSet
[+++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="15", + android:versionName="1.3.3" >, + <activity android:name="RadarChartActivitry"></activity>, +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="15", + android:versionName="1.3.3" >, + <activity android:name="RadarChartActivitry"></activity>, +++ b/MPChartExample/build.gradle, + versionCode 15, + versionName '1.3.3', +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="15", + android:versionName="1.3.3" >, + <activity android:name="RadarChartActivitry"></activity>, +++ b/MPChartExample/build.gradle, + versionCode 15, + versionName '1.3.3', +++ b/MPChartExample/res/layout/activity_radarchart.xml, +<?xml version="1.0" encoding="utf-8"?>, +<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android", + android:layout_width="match_parent", + android:layout_height="match_parent" >, +, + <com.github.mikephil.charting.charts.RadarChart, + android:id="@+id/chart1", + android:layout_width="match_parent", + android:layout_height="match_parent" />, +, +</RelativeLayout>, +++ b/MPChartExample/AndroidManifest.xml, + android:versionCode="15", + android:versionName="1.3.3" >, + <activity android:name="RadarChartActivitry"></activity>, +++ b/MPChartExample/build.gradle, + versionCode 15, + versionName '1.3.3', +++ b/MPChartExample/res/layout/activity_radarchart.xml, +<?xml version="1.0" encoding="utf-8"?>, +<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android", + android:layout_width="match_parent", + android:layout_height="match_parent"
[+++ b/MPChartExample/libs/mpandroidchartlibrary-2-0-1.jar, +++ b/MPChartExample/libs/mpandroidchartlibrary-2-0-1.jar, +++ b/MPChartExample/project.properties, +++ b/MPChartExample/libs/mpandroidchartlibrary-2-0-1.jar, +++ b/MPChartExample/project.properties, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CubicLineChartActivity.java, +++ b/MPChartExample/libs/mpandroidchartlibrary-2-0-1.jar, +++ b/MPChartExample/project.properties, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CubicLineChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/HorizontalBarChartActivity.java, + yr.setDrawGridLines(true);, + PointF position = mChart.getPosition(e, AxisDependency.LEFT);, +++ b/MPChartExample/libs/mpandroidchartlibrary-2-0-1.jar, +++ b/MPChartExample/project.properties, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CubicLineChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/HorizontalBarChartActivity.java, + yr.setDrawGridLines(true);, + PointF position = mChart.getPosition(e, AxisDependency.LEFT);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartExample/libs/mpandroidchartlibrary-2-0-1.jar, +++ b/MPChartExample/project.properties, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CubicLineChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/HorizontalBarChartActivity.java, + yr.setDrawGridLines(true);, + PointF position = mChart.getPosition(e, AxisDependency.LEFT);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +++ b/MPChartExample/libs/mpandroidchartlibrary-2-0-1.jar, +++ b/MPChartExample/project.properties, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CubicLineChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/HorizontalBarChartActivity.java, + yr.setDrawGridLines(true);, + PointF position = mChart.getPosition(e, AxisDependency.LEFT);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +++ b/MPChartExample/libs/mpandroidchartlibrary-2-0-1.jar, +++ b/MPChartExample/project.properties, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CubicLineChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/HorizontalBarChartActivity.java, + yr.setDrawGridLines(true);, +
[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/AxisRenderer.java, + int n = mAxis.isCenterAxisLabelsEnabled() ? 1 : 0;]
[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarLineChartBase.java, + protected Matrix mZoomMatrixBuffer = new Matrix();, + * Zooms in by 1.4f, into the charts center., + mViewPortHandler.zoomIn(center.x, -center.y, mZoomMatrixBuffer);, + mViewPortHandler.refresh(mZoomMatrixBuffer, this, false);, + * Zooms out by 0.7f, from the charts center., + mViewPortHandler.zoomOut(center.x, -center.y, mZoomMatrixBuffer);, + mViewPortHandler.refresh(mZoomMatrixBuffer, this, false);, + /**, + * Zooms out to original size., + */, + public void resetZoom() {, +, + mViewPortHandler.resetZoom(mZoomMatrixBuffer);, + mViewPortHandler.refresh(mZoomMatrixBuffer, this, false);, +, + // Range might have changed, which means that Y-axis labels, + // could have changed in size, affecting Y-axis size., + // So we need to recalculate offsets., +
[+++ b/MPChartExample/build.gradle, + //compile 'com.github.PhilJay:MPAndroidChart:v2.2.5', +++ b/MPChartExample/build.gradle, + //compile 'com.github.PhilJay:MPAndroidChart:v2.2.5', +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarLineChartBase.java, + * 10, no more than a range of 10 on the x-axis can be viewed at once without, + * 10, no less than a range of 10 on the x-axis can be viewed at once without, + * Limits the maximum and minimum x range that can be visible by pinching and zooming. e.g. minRange=10, maxRange=100 the, + * smallest range to be displayed at once is 10, and no more than a range of 100 values can be viewed at once without, + *
[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/components/ComponentBase.java, + * sets the size of the label text in density pixels min = 6f, max = 24f, default, + * @param size the text size, in DP, + * returns the text size that is currently set for the labels, in pixels]
[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/MyMarkerView.java, + // content, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/MyMarkerView.java, + // content, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, + protected void drawData() {, +, + ArrayList<BarDataSet> dataSets = mData.getDataSets();, + int setCount = mData.getDataSetCount();, + // 2D drawing, + for (int i = 0; i < setCount; i++) {, +, + BarDataSet dataSet = dataSets.get(i);, + float x = e.getXIndex() + j * (setCount - 1) + i + space * j + space / 2f;, + }, + float posOffset = 0f; float negOffset = 0f;, + float[] valuePoints = mTrans.generateTransformedValuesBarChart(entries, i, mData, mPhaseY);, +
[+++ b/MPChartExample/build.gradle, + compileSdkVersion 27, + buildToolsVersion '26.0.2', + targetSdkVersion 27, + classpath 'com.android.tools.build:gradle:3.0.1', + implementation 'com.github.PhilJay:MPAndroidChart-Realm:v2.0.2@aar', + implementation project(':MPChartLib'), + implementation 'com.android.support:appcompat-v7:27.0.2', +++ b/MPChartExample/build.gradle, + compileSdkVersion 27, + buildToolsVersion '26.0.2', + targetSdkVersion 27, + classpath 'com.android.tools.build:gradle:3.0.1', + implementation 'com.github.PhilJay:MPAndroidChart-Realm:v2.0.2@aar', + implementation project(':MPChartLib'), + implementation 'com.android.support:appcompat-v7:27.0.2', +++ b/MPChartLib/build.gradle, + compileSdkVersion 27, + buildToolsVersion '26.0.2', + targetSdkVersion 27, + testCompile "org.mockito:mockito-core:1.10.19", +++ b/MPChartExample/build.gradle, + compileSdkVersion 27, + buildToolsVersion '26.0.2', + targetSdkVersion 27, + classpath 'com.android.tools.build:gradle:3.0.1', + implementation 'com.github.PhilJay:MPAndroidChart-Realm:v2.0.2@aar', + implementation project(':MPChartLib'), + implementation 'com.android.support:appcompat-v7:27.0.2', +++ b/MPChartLib/build.gradle, + compileSdkVersion 27, + buildToolsVersion '26.0.2', + targetSdkVersion 27, + testCompile "org.mockito:mockito-core:1.10.19", +++ b/build.gradle,
[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BubbleChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BubbleChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CandleStickChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BubbleChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CandleStickChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CombinedChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BubbleChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CandleStickChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CombinedChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/HorizontalBarChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BubbleChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CandleStickChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CombinedChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/HorizontalBarChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/LineChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BubbleChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CandleStickChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CombinedChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/HorizontalBarChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/LineChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/ScatterChart.java, + }, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BubbleChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CandleStickChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CombinedChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/HorizontalBarChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/LineChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/ScatterChart.java, + }, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/filter/Approximator.java, + public float distance(float x, float y) {, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BubbleChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CandleStickChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/CombinedChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/HorizontalBarChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/LineChart.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/ScatterChart.java, + }, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/filter/Approximator.java, + public float distance(float x, float y) {, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/Renderer.java]
[+++ b/rxjava-core/src/main/java/rx/Observable.java, + return lift(new OperatorGroupBy<K, T>(keySelector));, + return lift(new OperatorGroupByUntil<T, TKey, TValue, TDuration>(keySelector, valueSelector, durationSelector));, +++ b/rxjava-core/src/main/java/rx/Observable.java, + return lift(new OperatorGroupBy<K, T>(keySelector));, + return lift(new OperatorGroupByUntil<T, TKey, TValue, TDuration>(keySelector, valueSelector, durationSelector));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, + return lift(new OperatorGroupBy<K, T>(keySelector));, + return lift(new OperatorGroupByUntil<T, TKey, TValue, TDuration>(keySelector, valueSelector, durationSelector));, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, + return lift(new OperatorGroupBy<K, T>(keySelector));, + return lift(new OperatorGroupByUntil<T, TKey, TValue, TDuration>(keySelector, valueSelector, durationSelector));, +++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorGroupBy.java, + /**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + *
[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorFinally;, + return lift(new OperatorFinally<T>(action));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorFinally;, + return lift(new OperatorFinally<T>(action));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorFinally;, + return lift(new OperatorFinally<T>(action));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorFinally.java, +/**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under
[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDefer;, +import rx.operators.OperatorDematerialize;, + return create(OperationDefer.defer(observableFactory));, + @SuppressWarnings({"unchecked", "rawtypes"}), + return lift(new OperatorDematerialize());, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDefer;, +import rx.operators.OperatorDematerialize;, + return create(OperationDefer.defer(observableFactory));, + @SuppressWarnings({"unchecked", "rawtypes"}), + return lift(new OperatorDematerialize());, +++ b/rxjava-core/src/main/java/rx/operators/OperationDefer.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to
[+++ b/src/main/java/io/reactivex/Completable.java, + * <dt><b>Error handling:</b></dt>, + * <dd> If the {@link Runnable} throws an exception, the respective {@link Throwable} is, + * delivered to the downstream via {@link CompletableObserver#onError(Throwable)},, + * except when the downstream has disposed this {@code Completable} source., + * In this latter case, the {@code Throwable} is delivered to the global error handler via, + * {@link RxJavaPlugins#onError(Throwable)} as an {@link io.reactivex.exceptions.UndeliverableException UndeliverableException}., + * </dd>, +++ b/src/main/java/io/reactivex/Completable.java, + * <dt><b>Error handling:</b></dt>, + * <dd> If the {@link Runnable} throws an exception, the respective {@link Throwable} is, + * delivered to the downstream via
[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCount.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, + if (!SubscriptionHelper.validateRequest(n)) {, + }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCount.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, + if (!SubscriptionHelper.validateRequest(n)) {, + }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableElementAt.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, + if (!SubscriptionHelper.validateRequest(n)) {, + }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCount.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, + if (!SubscriptionHelper.validateRequest(n)) {, + }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableElementAt.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, + if (!SubscriptionHelper.validateRequest(n)) {, + }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableIntervalRange.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, + if (!SubscriptionHelper.validateRequest(n)) {, + }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCount.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, + if (!SubscriptionHelper.validateRequest(n)) {, + }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableElementAt.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, + if (!SubscriptionHelper.validateRequest(n)) {, + }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableIntervalRange.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, + if (!SubscriptionHelper.validateRequest(n)) {, + }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, + if (!SubscriptionHelper.validateRequest(n)) {, +
[+++ b/gradle.properties, +version=0.17.4-SNAPSHOT]
[+++ b/src/main/java/io/reactivex/Completable.java, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, +++ b/src/main/java/io/reactivex/Completable.java, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, +++ b/src/main/java/io/reactivex/Flowable.java, + * Note: named this way because of overload conflict with concat(Publisher&lt;Publisher&gt;)., + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>, + * <dt><b>Backpressure:</b></dt>,
[+++ b/CHANGES.md, +### Version 0.9.1 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.9.1%22)) ###, +, +* [Pull 303](https://github.com/Netflix/RxJava/pull/303) CombineLatest, +* [Pull 290](https://github.com/Netflix/RxJava/pull/290) Zip overload with FuncN, +* [Pull 302](https://github.com/Netflix/RxJava/pull/302) NPE fix when no package on class, +* [Pull 284](https://github.com/Netflix/RxJava/pull/284) GroupBy fixes (items still [oustanding](https://github.com/Netflix/RxJava/issues/282)), +* [Pull 288](https://github.com/Netflix/RxJava/pull/288) PublishSubject concurrent modification fixes, +* [Issue 198](https://github.com/Netflix/RxJava/issues/198) Throw if no onError handler specified, +* [Issue 278](https://github.com/Netflix/RxJava/issues/278) Subscribe argument validation, +* Javadoc improvements and many new marble diagrams, +, +++ b/CHANGES.md, +### Version 0.9.1 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.9.1%22)) ###, +, +* [Pull 303](https://github.com/Netflix/RxJava/pull/303) CombineLatest, +* [Pull 290](https://github.com/Netflix/RxJava/pull/290) Zip overload with FuncN, +* [Pull 302](https://github.com/Netflix/RxJava/pull/302) NPE fix when no package on class,
[+++ b/CHANGES.md, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/language-adaptors/rxjava-scala/README.md, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/language-adaptors/rxjava-scala/README.md, +++ /dev/null, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.14.11-SNAPSHOT, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/language-adaptors/rxjava-scala/README.md, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/TODO.md, +* Bring `BooleanSubscription`, `CompositeSubscription`, `MultipleAssignmentSubscription` to Scala, `compositeSubscription.subscription = ...`instead of setter method, add on `CompositeSubscription` should be `+=`, +* Java Scheduler methods take `state` arguments (they were needed to schedule work on a different machine, but are now considered a bad idea). Remove these `state` arguments from all Scala schedulers., +*
[+++ b/src/main/java/io/reactivex/disposables/BooleanDisposable.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the
[+++ b/src/main/java/io/reactivex/Observable.java, +, + public final Observable<T> sample(long period, TimeUnit unit) {, + return sample(period, unit, Schedulers.computation());, + }, +, + public final Observable<T> sample(long period, TimeUnit unit, Scheduler scheduler) {, + Objects.requireNonNull(unit);, + Objects.requireNonNull(scheduler);, + return lift(new OperatorSampleTimed<>(period, unit, scheduler));, + }, + , + public final <U> Observable<T> sample(Publisher<U> sampler) {, + Objects.requireNonNull(sampler);, + return lift(new OperatorSamplePublisher<>(sampler));, + }, +++ b/src/main/java/io/reactivex/Observable.java, +, + public final Observable<T> sample(long period, TimeUnit unit) {, + return sample(period, unit, Schedulers.computation());, + }, +, + public final Observable<T> sample(long period, TimeUnit unit, Scheduler scheduler) {, + Objects.requireNonNull(unit);, + Objects.requireNonNull(scheduler);, + return lift(new
[+++ b/src/main/java/io/reactivex/Flowable.java, + * <p>, + * <p>, + * <p>]
[+++ b/src/main/java/io/reactivex/Flowable.java, + * This method executes the {@code Consumer} on the current thread while, +++ b/src/main/java/io/reactivex/Flowable.java, + * This method executes the {@code Consumer} on the current thread while, +++ b/src/main/java/io/reactivex/Observable.java, + * This method executes the {@code Consumer} on the current thread while]
[+++ b/gradle.properties, +version=0.11.0]
[+++ b/src/main/java/io/reactivex/Completable.java, + * <p>History: 2.0.4 - experimental, + * @since 2.1, + * <p>History: 2.0.1 - experimental, + * @since 2.1, + * <p>History: 2.0.5 - experimental, + * @since 2.1, +++ b/src/main/java/io/reactivex/Completable.java, + * <p>History: 2.0.4 - experimental, + * @since 2.1, + * <p>History: 2.0.1 - experimental, + * @since 2.1, + * <p>History: 2.0.5 - experimental, + * @since 2.1, +++ b/src/main/java/io/reactivex/Flowable.java, + * <p>History: 2.0.1 - experimental, + * @since 2.1, + * <p>History: 2.0.1 - experimental, + * @since 2.1, + * <p>History: 2.0.5 - experimental, + * @since 2.1 - beta, +
[+++ b/src/test/java/io/reactivex/internal/operators/completable/CompletableDelaySubscriptionTest.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language
[+++ b/.gitignore, +/.nb-gradle/profiles/private/, +.nb-gradle-properties, +/.nb-gradle/private/, +++ b/.gitignore, +/.nb-gradle/profiles/private/, +.nb-gradle-properties, +/.nb-gradle/private/, +++ b/CHANGES.md, +### Version 0.17.5 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.17.5%22)) ###, +, +* [Pull 1010] (https://github.com/Netflix/RxJava/pull/1010) Observable.unsafeSubscribe, +* [Pull 1015] (https://github.com/Netflix/RxJava/pull/1015) Remove Redundant protectivelyWrap Method, +* [Pull 1019] (https://github.com/Netflix/RxJava/pull/1019) Fix: retry() never unsubscribes from source until operator completes , +, +### Version 0.17.4 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.17.4%22)) ###, +, +* [Pull 990] (https://github.com/Netflix/RxJava/pull/990) Quasar Lightweight Threads/Fibers Contrib Module, +* [Pull 1012] (https://github.com/Netflix/RxJava/pull/1012) SerializedObserver: Removed window between the two synchronized blocks, +, +, +### Version 0.17.3 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.17.3%22)) ###, +, +* [Pull 991] (https://github.com/Netflix/RxJava/pull/991) JMH Benchmark Build Config, +* [Pull 993] (https://github.com/Netflix/RxJava/pull/993) JMH Perf Tests,
[+++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/perf/java/rx/archive/ObservableCreatePerformance.java, +package rx.archive;, +, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +import rx.archive.perf.AbstractPerformanceTester;, +import rx.archive.perf.LongSumObserver;, +import rx.functions.Action0;, +, +public class ObservableCreatePerformance extends AbstractPerformanceTester {, +, + ObservableCreatePerformance() {, + super(REPETITIONS);, + }, +, + public static void main(String args[]) {, +, + final ObservableCreatePerformance spt = new ObservableCreatePerformance();, + try {, + spt.runTest(new Action0() {, +, + @Override, + public void call() {, + spt.timeCreateAndSubscribe();, + }, + });, + } catch (Exception e) {, + e.printStackTrace();, + }, +, + }, +, + /**, + * Observable.create(f).subscribe(), + * , + * With old
[+++ /dev/null]
[+++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableFlatMap.java, + if (tryEmitScalar(((Callable<? extends U>)p)) && maxConcurrency != Integer.MAX_VALUE) {, + boolean empty = false;, + empty = true;, + if (empty) {, + drain();, + break;, + }, + boolean tryEmitScalar(Callable<? extends U> value) {, + return true;, + return true;, + return true;, + return true;, + return false;, + return true;, + int nSources = 0;, + if (maxConcurrency != Integer.MAX_VALUE) {, + synchronized (this) {, + nSources = sources.size();, + }, + }, +, + if (d && (svq == null || svq.isEmpty()) && n == 0 && nSources == 0) {, +++
[+++ b/.gitignore, +++ b/.gitignore, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/src/main/java/io/reactivex/Completable.java, + * that error through a Flowable and the Publisher should signal a value indicating a retry in response]
[+++ b/gradle.properties, +version=0.18.3-SNAPSHOT]
[+++ b/gradle.properties, +version=0.9.1-SNAPSHOT]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Tue Apr 02 11:45:56 PDT 2013, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.5-bin.zip]
[+++ b/gradlew, +JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk/Contents/Home", +, +++ b/gradlew, +JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk/Contents/Home", +, +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observable { …}, +++ b/gradlew, +JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk/Contents/Home", +, +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observable { …}, +++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, +RxScala Release Notes, +=====================, +, +This release of the RxScala bindings builds on the previous 0.15 release to make the Rx bindings for Scala, +include all Rx types. In particular this release focuses on the `Subject` and `Scheduler` types., +To makes these notes self-contained, we will start with the `Observer[T]` and `Observable[T]` traits, +that lay at the heart of Rx., +, +Observer, +--------, +, +In this release we have made the `asJavaObserver` property
[+++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/test/java/rx/operators/OperatorAnyTest.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeout.java, +import java.util.concurrent.atomic.*;, +import io.reactivex.internal.disposables.SequentialDisposable;, +import io.reactivex.internal.operators.flowable.FlowableTimeoutTimed.TimeoutSupport;, + TimeoutSubscriber<T> parent = new TimeoutSubscriber<T>(s, itemTimeoutIndicator);, + s.onSubscribe(parent);, + parent.startFirstTimeout(firstTimeoutIndicator);, + source.subscribe(parent);, + TimeoutFallbackSubscriber<T> parent = new TimeoutFallbackSubscriber<T>(s, itemTimeoutIndicator, other);, + s.onSubscribe(parent);, + parent.startFirstTimeout(firstTimeoutIndicator);, + source.subscribe(parent);, + interface TimeoutSelectorSupport extends TimeoutSupport {, + void onTimeoutError(long idx, Throwable ex);, + }, +, + static final class TimeoutSubscriber<T> extends AtomicLong, + implements FlowableSubscriber<T>, Subscription, TimeoutSelectorSupport {, +, + private static final long serialVersionUID = 3764492702657003550L;, +, + final Function<? super T, ? extends Publisher<?>> itemTimeoutIndicator;, + final SequentialDisposable task;, + final AtomicReference<Subscription> upstream;, + final AtomicLong requested;, + TimeoutSubscriber(Subscriber<? super T> actual,
[+++ b/gradle.properties, +version=0.5.5-SNAPSHOT, +++ b/gradle.properties, +version=0.5.5-SNAPSHOT, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.observables.GroupedObservable;, + /*package*/ Observable(Func1<Observer<T>, Subscription> onSubscribe, boolean isTrusted) {, + * Groups the elements of an observable and selects the resulting elements by using a specified function., + *, + * @param source an observable whose elements to group., + * @param keySelector a function to extract the key for each element., + * @param elementSelector a function to map each source element to an element in an observable group., + * @param <K> the key type., + * @param <T> the source type., + * @param <R> the resulting
[+++ b/gradle.properties, +version=0.19.0]
[+++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.10-bin.zip]
[+++ b/rxjava-core/src/main/java/rx/Observable.java, + return create(OnSubscribeAmb.amb(sources));, + return create(OnSubscribeAmb.amb(o1, o2));, + return create(OnSubscribeAmb.amb(o1, o2, o3));, + return create(OnSubscribeAmb.amb(o1, o2, o3, o4));, + return create(OnSubscribeAmb.amb(o1, o2, o3, o4, o5));, + return create(OnSubscribeAmb.amb(o1, o2, o3, o4, o5, o6));, + return create(OnSubscribeAmb.amb(o1, o2, o3, o4, o5, o6, o7));, + return create(OnSubscribeAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8));, + return create(OnSubscribeAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8, o9));, + return create(new OnSubscribeCombineLatest<T, R>(sources, combineFunction));, + return create(new OnSubscribeDefer<T>(observableFactory));, + return create(OnSubscribeToObservableFuture.toObservableFuture(future));, + return create(OnSubscribeToObservableFuture.toObservableFuture(future, timeout, unit));, + return create(OnSubscribeToObservableFuture.toObservableFuture(future)).subscribeOn(scheduler);, + return create(new OnSubscribeTimerPeriodically(interval, interval, unit, Schedulers.computation()));, + return create(new OnSubscribeTimerPeriodically(interval, interval, unit,
[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorSkipLast;, + return lift(new OperatorSkipLast<T>(count));, + return create(new OperatorSkipLast.SkipLastTimed<T>(this, time, unit, scheduler));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorSkipLast;, + return lift(new OperatorSkipLast<T>(count));, + return create(new OperatorSkipLast.SkipLastTimed<T>(this, time, unit, scheduler));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorSkipLast;, + return lift(new OperatorSkipLast<T>(count));, + return create(new OperatorSkipLast.SkipLastTimed<T>(this, time, unit, scheduler));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorSkipLast.java, +/**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, +
[+++ b/CHANGES.md, +### Version 0.14.3 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.3%22)) ###, +, +* [Pull 407](https://github.com/Netflix/RxJava/pull/407) Operator: RefCount, +* [Pull 410](https://github.com/Netflix/RxJava/pull/410) Operator: Contains, +* [Pull 411](https://github.com/Netflix/RxJava/pull/411) Unit Test fix: update counter before triggering latch , +* [Pull 413](https://github.com/Netflix/RxJava/pull/413) Fixed the issues of takeLast(items, 0) and null values, +* [Pull 414](https://github.com/Netflix/RxJava/pull/414) Operator: SkipLast, +* [Pull 415](https://github.com/Netflix/RxJava/pull/415) Operator: Empty with scheduler, +* [Pull 416](https://github.com/Netflix/RxJava/pull/416) Operator: Throw with scheduler , +* [Pull 420](https://github.com/Netflix/RxJava/pull/420) Scala Adaptor Improvements, +* [Pull 422](https://github.com/Netflix/RxJava/pull/422) JRuby function wrapping support, +* [Pull 424](https://github.com/Netflix/RxJava/pull/424) Operator: IgnoreElements, +* [Pull 426](https://github.com/Netflix/RxJava/pull/426) PublishSubject ReSubscribe for publish().refCount() Behavior, +, +++ b/CHANGES.md, +### Version 0.14.3 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.3%22)) ###, +,
[+++ b/build.gradle, + compile 'org.reactivestreams:reactive-streams:1.0.0', +++ b/build.gradle, + compile 'org.reactivestreams:reactive-streams:1.0.0', +++ b/src/main/java/io/reactivex/Observable.java, +import java.util.Objects;, +import java.util.function.*;, +, +import org.reactivestreams.*;, +, +public class Observable<T> implements Publisher<T> {, + final Consumer<Subscriber<? super T>> onSubscribe;, + , + private Observable(Consumer<Subscriber<? super T>> onSubscribe) {, + this.onSubscribe = onSubscribe;, + }, + , + public static <T> Observable<T> create(Consumer<Subscriber<? super T>> onSubscribe) {, + // TODO plugin wrapping, + return new Observable<>(onSubscribe);, + }, + , + @Override, + public final void subscribe(Subscriber<? super T> s) {, + Objects.requireNonNull(s);, + try {, + onSubscribe.accept(s);, + } catch (NullPointerException e) {, + throw e;,
[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableToList.java, + U v = value;, + if (v != null) {, + v.add(t);, + }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableToList.java, + U v = value;, + if (v != null) {, + v.add(t);, + }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableToListTest.java, +import static org.mockito.ArgumentMatchers.any;, +, + @Test, + public void onNextCancelRace() {, + for (int i = 0; i < 1000; i++) {, + final PublishProcessor<Integer> pp = PublishProcessor.create();, + final TestObserver<List<Integer>> ts = pp.toList().test();, + , + Runnable r1 = new Runnable() {, + @Override, + public void run() {, + pp.onNext(1);, + }, + };, + Runnable r2 = new Runnable() {,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/README.md, +## Documentation, +, +You can build the documentation as follows: In the RxJava root directory, run, +, + ./gradlew :language-adaptors:rxjava-scala:scaladoc, +, +Then navigate to, +, + RxJava/language-adaptors/rxjava-scala/build/docs/scaladoc/index.html, +, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/README.md, +## Documentation, +, +You can build the documentation as follows: In the RxJava root directory, run, +, + ./gradlew :language-adaptors:rxjava-scala:scaladoc, +, +Then navigate to, +, + RxJava/language-adaptors/rxjava-scala/build/docs/scaladoc/index.html, +, +, +++ b/language-adaptors/rxjava-scala/build.gradle, + main { , + test { , + scala {
[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorFromIterable;, +import rx.operators.OperatorTake;, +import rx.operators.OperatorToObservableList;, +import rx.operators.OperatorToObservableSortedList;, + final Action2<Observer<? super T>, OperatorSubscription> f;, +, + /**, + * Observable with Function to execute when subscribed to., + * <p>, + * NOTE: Use {@link #create(OnSubscribeFunc)} to create an Observable, + * instead of this constructor unless you specifically have a need for, + * inheritance., + * , + * @param onSubscribe, + * {@link OnSubscribeFunc} to be executed when {@link #subscribe(Observer)} is called, + */, + protected Observable(Action2<Observer<? super T>, OperatorSubscription> f) {, + this.f = f;, + }, +, +<<<<<<< HEAD, +=======, +>>>>>>>
[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnEach.java, +import io.reactivex.internal.fuseable.ConditionalSubscriber;, +import io.reactivex.internal.subscribers.flowable.*;, +import io.reactivex.internal.util.Exceptions;, + if (s instanceof ConditionalSubscriber) {, + source.subscribe(new DoOnEachConditionalSubscriber<T>(, + (ConditionalSubscriber<? super T>)s, onNext, onError, onComplete, onAfterTerminate));, + } else {, + source.subscribe(new DoOnEachSubscriber<T>(, + s, onNext, onError, onComplete, onAfterTerminate));, + }, + static final class DoOnEachSubscriber<T> extends BasicFuseableSubscriber<T, T> {, + super(actual);, + , + if (sourceMode != NONE) {, + actual.onNext(null);, + return;, + }, + , + fail(e);, + Exceptions.throwIfFatal(e);, + fail(e);, + public int requestFusion(int mode) {, + return transitiveBoundaryFusion(mode);, + public T poll() {, + T v = qs.poll();, + , + if (v != null)
[+++ b/src/main/java/io/reactivex/Observable.java, + * <p>, + * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatest.png" alt="">, + * <p>, + * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatest.png" alt="">, + * <p>, + * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatest.png" alt="">, + * <p>, + * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatest.png" alt="">, + * <p>, + * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatest.png" alt="">, + * <p>, + * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatestDelayError.png" alt="">, + * <p>, + * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatestDelayError.png" alt="">, + * <p>, + * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatestDelayError.png" alt="">, + * <p>, + * <img width="640" height="290" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArray.png" alt="">, + * <img width="640" height="290" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArray.png" alt="">,
[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDistinct;, +import rx.operators.OperatorDistinctUntilChanged;, + return create(OperationDistinct.distinct(this));, + return create(OperationDistinct.distinct(this, keySelector));, + return lift(new OperatorDistinctUntilChanged<T, T>(Functions.<T>identity()));, + return lift(new OperatorDistinctUntilChanged<T, U>(keySelector));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDistinct;, +import rx.operators.OperatorDistinctUntilChanged;, + return create(OperationDistinct.distinct(this));, + return create(OperationDistinct.distinct(this, keySelector));, + return lift(new OperatorDistinctUntilChanged<T, T>(Functions.<T>identity()));, + return lift(new OperatorDistinctUntilChanged<T, U>(keySelector));, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinct.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + *
[+++ b/src/main/java/io/reactivex/processors/PublishProcessor.java, + BackpressureHelper.producedCancel(this, 1);, +++ b/src/main/java/io/reactivex/processors/PublishProcessor.java, + BackpressureHelper.producedCancel(this, 1);, +++ b/src/test/java/io/reactivex/processors/BehaviorProcessorTest.java, +, + @Test(timeout = 10000), + public void subscriberCancelOfferRace() {, + for (int i = 0; i < 1000; i++) {, + final BehaviorProcessor<Integer> pp = BehaviorProcessor.create();, +, + final TestSubscriber<Integer> ts = pp.test(1);, +, + Runnable r1 = new Runnable() {, + @Override, + public void run() {, + for (int i = 0; i < 2; i++) {, + while (!pp.offer(i)) ;, + }, + }, + };, +, + Runnable r2 = new Runnable() {, + @Override, + public void run() {, + ts.cancel();,
[+++ b/gradle.properties, +version=0.18.2]
[+++ b/src/main/java/rx/Observable.java, + if (this instanceof ScalarSynchronousObservable) {, + return ((ScalarSynchronousObservable<T>)this).scalarScheduleOn(scheduler);, + }, + if (this instanceof ScalarSynchronousObservable) {, + return ((ScalarSynchronousObservable<T>)this).scalarScheduleOn(scheduler);, + }, +++ b/src/main/java/rx/Observable.java, + if (this instanceof ScalarSynchronousObservable) {, + return ((ScalarSynchronousObservable<T>)this).scalarScheduleOn(scheduler);, + }, + if (this instanceof ScalarSynchronousObservable) {, + return ((ScalarSynchronousObservable<T>)this).scalarScheduleOn(scheduler);, + }, +++ b/src/main/java/rx/internal/schedulers/EventLoopsScheduler.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * ,
[+++ b/gradle.properties, +version=0.15.0]
[+++ b/src/main/java/io/reactivex/Completable.java, + * This overload disposes eagerly before the terminal event is emitted., + * If this overload performs a lazy cancellation after the terminal event is emitted., + return RxJavaPlugins.onAssembly(new CompletableDisposeOn(this, scheduler));, +++ b/src/main/java/io/reactivex/Completable.java, + * This overload disposes eagerly before the terminal event is emitted., + * If this overload performs a lazy cancellation after the terminal event is emitted., + return RxJavaPlugins.onAssembly(new CompletableDisposeOn(this, scheduler));, +++ b/src/main/java/io/reactivex/CompletableEmitter.java, + * or Cancellation will be disposed/cancelled., + * or Cancellation will be disposed/cancelled., +++ b/src/main/java/io/reactivex/Completable.java, + * This overload disposes eagerly before the terminal event is emitted., +
[+++ b/src/main/java/io/reactivex/Observable.java, + Objects.requireNonNull(other);, + Objects.requireNonNull(value);, + , + /*, + * It doesn't add cancellation support by default like 1.x, + * if necessary, one can use composition to achieve it:, + * futureObservable.doOnCancel(() -> future.cancel(true));, + */, + public static <T> Observable<T> fromFuture(Future<? extends T> future) {, + if (future instanceof CompletableFuture) {, + return fromFuture((CompletableFuture<? extends T>)future);, + }, + Objects.requireNonNull(future);, + Observable<T> o = create(new PublisherFutureSource<>(future, 0L, null));, + , + return o;, + }, +, + public static <T> Observable<T> fromFuture(Future<? extends T> future, long timeout, TimeUnit unit) {, + Objects.requireNonNull(future);, + Objects.requireNonNull(unit);, +
[+++ b/src/main/java/io/reactivex/Observable.java, + * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatestDelayError.png" alt="">, + * <p>, + * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatestDelayError.png" alt="">, + * <p>, + * <img width="640" height="410" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEager.png" alt="">, + * <img width="640" height="220" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/error.supplier.png" alt="">, + * <img width="640" height="220" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/error.item.png" alt="">, + * <img width="640" height="284" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromFuture.noarg.png" alt="">, + * <img width="640" height="287" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromFuture.timeout.png" alt="">, + * <img width="640" height="287" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromFuture.timeout.scheduler.png" alt="">, + * <img width="640" height="294" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromFuture.scheduler.png" alt="">, + * <img width="640" height="186" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromIterable.png" alt="">, + * <img width="640" height="228" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/singleOrError.png" alt="">]
[+++ b/src/main/java/io/reactivex/Completable.java, + * @return a {@link Maybe} that only calls {@code onComplete} or {@code onError}, based on which one is, + * called by the source Completable.]
[+++ b/.gitignore, +# Compiled source #, +###################, +*.com, +*.class, +*.dll, +*.exe, +*.o, +*.so, +, +# Packages #, +############, +# it's better to unpack these files and commit the raw source, +# git has its own built in compression methods, +*.7z, +*.dmg, +*.gz, +*.iso, +*.jar, +*.rar, +*.tar, +*.zip, +, +# Logs and databases #, +######################, +*.log, +, +# OS generated files #, +######################, +.DS_Store*, +ehthumbs.db, +Icon?, +Thumbs.db, +, +# Editor Files #, +################, +*~, +*.swp, +, +# Gradle Files #, +################, +.gradle, +, +# Build output directies, +/target, +*/target, +/build, +*/build, +, +# IntelliJ specific files/directories, +out, +.idea, +*.ipr, +*.iws,
[+++ b/gradle.properties, +version=0.20.0-RC5-SNAPSHOT]
[+++ b/src/main/java/io/reactivex/Observable.java, + return buffer(boundarySupplier, ArrayList::new);, + , + }, +, + public final <B, U extends Collection<? super T>> Observable<U> buffer(Supplier<? extends Observable<B>> boundarySupplier, Supplier<U> bufferSupplier) {, + Objects.requireNonNull(bufferSupplier);, + return lift(new OperatorBufferBoundarySupplier<>(boundarySupplier, bufferSupplier));, +++ b/src/main/java/io/reactivex/Observable.java, + return buffer(boundarySupplier, ArrayList::new);, + , + }, +, + public final <B, U extends Collection<? super T>> Observable<U> buffer(Supplier<? extends Observable<B>> boundarySupplier, Supplier<U> bufferSupplier) {, + Objects.requireNonNull(bufferSupplier);, + return lift(new OperatorBufferBoundarySupplier<>(boundarySupplier, bufferSupplier));, +++ b/src/main/java/io/reactivex/internal/operators/OperatorBufferBoundarySupplier.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
[+++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.schedulers.ImmediateThinScheduler;, + public static <T> Flowable<T> mergeDelayError(Iterable<? extends Publisher<? extends T>> sources) {, + public static <T> Flowable<T> mergeDelayError(Iterable<? extends Publisher<? extends T>> sources, int maxConcurrency, int bufferSize) {, + public static <T> Flowable<T> mergeDelayError(Iterable<? extends Publisher<? extends T>> sources, int maxConcurrency) {, + return merge(new FlowableMapNotification<T, Publisher<? extends R>>(this, onNextMapper, onErrorMapper, onCompleteSupplier));, + return merge(new FlowableMapNotification<T, Publisher<? extends R>>(this, onNextMapper, onErrorMapper, onCompleteSupplier), maxConcurrency);, + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerSupport.NONE), + public final Flowable<T> rebatchRequests(int bufferSize) {, + return observeOn(ImmediateThinScheduler.INSTANCE, true, bufferSize);, + }, + , +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.schedulers.ImmediateThinScheduler;, + public static <T> Flowable<T> mergeDelayError(Iterable<? extends Publisher<?
[+++ b/src/main/java/io/reactivex/Notification.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the
[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublishMulticast.java, + final int limit;, +, + int consumed;, +, + this.limit = prefetch - (prefetch >> 2); // request after 75% consumption, + int upstreamConsumed = consumed;, + int localLimit = limit;, + boolean canRequest = sourceMode != QueueSubscription.SYNC;, + , +, + if (canRequest && ++upstreamConsumed == localLimit) {, + upstreamConsumed = 0;, + s.get().request(localLimit);, + }, + consumed = upstreamConsumed;, + if (getAndSet(Long.MIN_VALUE) != Long.MIN_VALUE) {, + parent.drain(); // unblock the others, + }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublishMulticast.java, + final int limit;, +, + int consumed;, +, + this.limit = prefetch - (prefetch >> 2); // request
[+++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, + <activity, + android:name=".ListeningFragmentActivity">, +, + <intent-filter>, + <category android:name="android.intent.category.LAUNCHER"/>, + <category android:name="android.intent.category.DEFAULT"/>, + <action android:name="android.intent.action.MAIN"/>, + </intent-filter>, + </activity>, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/AndroidManifest.xml, + <activity, + android:name=".ListeningFragmentActivity">, +, + <intent-filter>, + <category android:name="android.intent.category.LAUNCHER"/>, + <category android:name="android.intent.category.DEFAULT"/>, + <action android:name="android.intent.action.MAIN"/>, + </intent-filter>, + </activity>, +++ b/rxjava-contrib/rxjava-android-samples/samples/src/main/java/com/netflix/rxjava/android/samples/ListeningFragmentActivity.java, +package com.netflix.rxjava.android.samples;, +, +import android.app.Activity;, +import android.app.Fragment;, +import android.os.Bundle;, +import android.view.LayoutInflater;, +import android.view.View;, +import android.view.ViewGroup;, +import android.widget.TextView;, +import android.widget.Toast;, +, +import rx.Subscriber;, +import rx.Subscription;, +import rx.observables.ConnectableObservable;, +import rx.subscriptions.Subscriptions;, +, +import static rx.android.schedulers.AndroidSchedulers.mainThread;, +, +/**, + * Problem:, + * You have a background sequence which keeps emitting items (either a limited or unlimited
[+++ b/rxjava-contrib/rxjava-joins/src/main/java/rx/joins/operators/OperationJoinPatterns.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, +
[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subject.scala, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for
[+++ b/src/main/java/io/reactivex/Observable.java, +import io.reactivex.annotations.*;, + /** The default buffer size. */, + /** An empty observable instance as there is no need to instantiate this more than once. */, + /** A never observable instance as there is no need to instantiate this more than once. */, + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE), + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE), + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE), + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE), + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE), + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE), + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE), + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE), + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE), + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE), + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE), + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE), + @BackpressureSupport(BackpressureKind.FULL), + @SchedulerSupport(SchedulerKind.NONE),
[+++ b/src/main/java/io/reactivex/Maybe.java, + * Returns a {@link Maybe} that invokes the given {@link Callable} for each individual {@link MaybeObserver} that, + * subscribes and emits the resulting non-null item via {@code onSuccess} while, + * considering a {@code null} result from the {@code Callable} as indication for valueless completion, + * via {@code onComplete}., + * This operator allows you to defer the execution of the given {@code Callable} until a {@code MaybeObserver}, + * subscribes to the returned {@link Maybe}. In other terms, this source operator evaluates the given, + * {@code Callable} "lazily"., + * <p>, +
[+++ b/src/main/java/io/reactivex/Completable.java, + * Hides the identity of this Completable and its Disposable., + * <p>Allows preventing certain identity-based, + * optimizations (fusion)., + * <dl>, + * <dt><b>Scheduler:</b></dt>, + * <dd>{@code hide} does not operate by default on a particular {@link Scheduler}.</dd>, + * </dl>, + * @return the new Completable instance, + * @since 2.0.5 - experimental, + */, + @Experimental, + @CheckReturnValue, + @SchedulerSupport(SchedulerSupport.NONE), + public final Completable hide() {, + return RxJavaPlugins.onAssembly(new CompletableHide(this));, + }, +, + /**, +++ b/src/main/java/io/reactivex/Completable.java, + * Hides the identity of this Completable and its Disposable., + * <p>Allows preventing
[+++ b/gradle.properties, +version=0.17.0-RC2-SNAPSHOT]
[+++ b/src/main/java/io/reactivex/Observable.java, +import io.reactivex.observables.ConnectableObservable;, +import io.reactivex.schedulers.Schedulers;, + , + public final Observable<T> observeOn(Scheduler scheduler) {, + return observeOn(scheduler, false, bufferSize());, + }, + , + public final Observable<T> observeOn(Scheduler scheduler, boolean delayError) {, + return observeOn(scheduler, delayError, bufferSize());, + }, + , + public final Observable<T> observeOn(Scheduler scheduler, boolean delayError, int bufferSize) {, + // TODO implement, + throw new UnsupportedOperationException();, + }, + , + public final Observable<T> subscribeOn(Scheduler scheduler) {, + // TODO implement, + throw new UnsupportedOperationException();, + }, + , + public final Observable<T> unsubscribeOn(Scheduler scheduler) {, + // TODO implement, + throw new UnsupportedOperationException();,
[+++ b/gradle.properties, +version=0.6.1]
[+++ b/src/main/java/io/reactivex/BackpressureOverflow.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for
[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorAmb;, + return create(OperatorAmb.amb(sources));, + return create(OperatorAmb.amb(o1, o2));, + return create(OperatorAmb.amb(o1, o2, o3));, + return create(OperatorAmb.amb(o1, o2, o3, o4));, + return create(OperatorAmb.amb(o1, o2, o3, o4, o5));, + return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6));, + return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6, o7));, + return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8));, + return create(OperatorAmb.amb(o1, o2, o3, o4, o5, o6, o7, o8, o9));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorAmb;, + return create(OperatorAmb.amb(sources));, + return create(OperatorAmb.amb(o1, o2));, + return create(OperatorAmb.amb(o1, o2, o3));, + return create(OperatorAmb.amb(o1, o2, o3, o4));, + return create(OperatorAmb.amb(o1, o2, o3, o4, o5));, + return create(OperatorAmb.amb(o1,
[+++ b/build.gradle, + perf {, + java {, + srcDir 'src/perf/java', + compileClasspath += main.output, + runtimeClasspath += main.output, + }, + }, + }, +, + dependencies {, + perfCompile 'org.openjdk.jmh:jmh-core:0.2', + plusConfigurations += configurations.perfCompile, + // TODO not sure what to add it to, + //scopes.PROVIDED.plus += configurations.perfCompile, +++ b/build.gradle, + perf {, + java {, + srcDir 'src/perf/java', + compileClasspath += main.output, + runtimeClasspath += main.output, + }, + }, + }, +, + dependencies {, + perfCompile 'org.openjdk.jmh:jmh-core:0.2', + plusConfigurations += configurations.perfCompile, + // TODO not sure what to add it to, + //scopes.PROVIDED.plus +=
[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDebounce.java, +import io.reactivex.exceptions.*;, +import io.reactivex.internal.functions.ObjectHelper;, + actual.onError(new MissingBackpressureException("Could not deliver value due to lack of requests"));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDebounce.java, +import io.reactivex.exceptions.*;, +import io.reactivex.internal.functions.ObjectHelper;, + actual.onError(new MissingBackpressureException("Could not deliver value due to lack of requests"));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDebounceTimed.java, +import io.reactivex.exceptions.MissingBackpressureException;, +import io.reactivex.internal.disposables.DisposableHelper;, + actual.onError(new MissingBackpressureException("Could not deliver value due to lack of requests"));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDebounce.java, +import io.reactivex.exceptions.*;, +import io.reactivex.internal.functions.ObjectHelper;, + actual.onError(new MissingBackpressureException("Could not deliver value due to lack of requests"));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDebounceTimed.java, +import io.reactivex.exceptions.MissingBackpressureException;, +import io.reactivex.internal.disposables.DisposableHelper;, + actual.onError(new MissingBackpressureException("Could not deliver value due to lack of requests"));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableIntervalRange.java, +import io.reactivex.exceptions.MissingBackpressureException;, +import io.reactivex.internal.disposables.DisposableHelper;, + actual.onError(new MissingBackpressureException("Can't deliver value " + count
[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorDematerialize;, + @SuppressWarnings({"unchecked", "rawtypes"}), + return lift(new OperatorDematerialize());, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorDematerialize;, + @SuppressWarnings({"unchecked", "rawtypes"}), + return lift(new OperatorDematerialize());, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorDematerialize;, + @SuppressWarnings({"unchecked", "rawtypes"}), + return lift(new OperatorDematerialize());, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorDematerialize.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by
[+++ b/src/main/java/io/reactivex/Completable.java, + ObjectHelper.requireNonNull(next, "next is null");, + return RxJavaPlugins.onAssembly(new CompletableAndThenCompletable(this, next));, + return RxJavaPlugins.onAssembly(new CompletableAndThenCompletable(this, other));, +++ b/src/main/java/io/reactivex/Completable.java, + ObjectHelper.requireNonNull(next, "next is null");, + return RxJavaPlugins.onAssembly(new CompletableAndThenCompletable(this, next));, + return RxJavaPlugins.onAssembly(new CompletableAndThenCompletable(this, other));, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableAndThenCompletable.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,
[+++ b/CHANGES.md, +### Version 0.14.1 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.1%22)) ###, +, +* [Pull 402](https://github.com/Netflix/RxJava/pull/402) rxjava-apache-http improvements, +, +### Version 0.14.0 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.0%22)) ###, +, +Further progress to the Scala adaptor and a handful of new operators., +, +Bump to 0.14.0 due to small breaking change to `distinct` operator removing overloaded methods with `Comparator`. These methods were added in 0.13.2 and determined to be incorrect., +, +This release also includes a new contrib module, [rxjava-apache-http](https://github.com/Netflix/RxJava/tree/master/rxjava-contrib/rxjava-apache-http) that provides an Observable API to the Apache HttpAsyncClient., +, +* [Pull 396](https://github.com/Netflix/RxJava/pull/396) Add missing methods to Scala Adaptor, +* [Pull 390](https://github.com/Netflix/RxJava/pull/390) Operators: ElementAt and ElementAtOrDefault, +*
[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +import rx.lang.scala.concurrency.Scheduler, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +import rx.lang.scala.concurrency.Scheduler, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.lang.scala.concurrency.Scheduler, + zip(that, (t: T, u: U) => (t, u)), + }, +, + /**, + * Returns an Observable formed from this Observable and another Observable by combining, + * corresponding elements using the selector function., + * The number of `onNext` invocations of the resulting `Observable[(T, U)]`, + * is the minumum of the number of `onNext` invocations of `this` and `that`., + */, + def zip[U, R](that: Observable[U], selector: (T,U) => R): Observable[R] = {, + Observable[R](rx.Observable.zip[T, U, R](this.asJavaObservable, that.asJavaObservable, selector)), + * The [[Scheduler]]
[+++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +import rx.operators.OperatorObserveFromAndroidComponent;, + return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, activity);, + return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (android.support.v4.app.Fragment) fragment);, + return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (Fragment) fragment);, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +import rx.operators.OperatorObserveFromAndroidComponent;, + return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, activity);, + return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (android.support.v4.app.Fragment) fragment);, + return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (Fragment) fragment);, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/subscriptions/AndroidSubscriptions.java, +/**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed
[+++ b/src/main/java/io/reactivex/Flowable.java, + * <dd>{@code debounce} operates by default on the {@code computation} {@link Scheduler}.</dd>, + * the length of the window of time that must pass after the emission of an item from the source, + * Publisher in which that Publisher emits no items in order for the item to be emitted by the, + * resulting Publisher, + * the unit of time for the specified {@code timeout}, + * the unit of time for the specified {@code timeout}, + * Returns a Flowable that mirrors the source Publisher, except that it drops items emitted by
[+++ b/src/main/java/io/reactivex/Flowable.java, + return RxJavaPlugins.onAssembly(new FlowableSubscribeOn<T>(this, scheduler, this instanceof FlowableCreate));, +++ b/src/main/java/io/reactivex/Flowable.java, + return RxJavaPlugins.onAssembly(new FlowableSubscribeOn<T>(this, scheduler, this instanceof FlowableCreate));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSubscribeOn.java, +/**, + * Subscribes to the source Flowable on the specified Scheduler and makes, + * sure downstream requests are scheduled there as well., + *, + * @param <T> the value type emitted, + */, +, + final boolean nonScheduledRequests;, +, + public FlowableSubscribeOn(Publisher<T> source, Scheduler scheduler, boolean nonScheduledRequests) {, + this.nonScheduledRequests = nonScheduledRequests;, + final SubscribeOnSubscriber<T> sos = new SubscribeOnSubscriber<T>(s, w, source, nonScheduledRequests);, +, +, + final boolean nonScheduledRequests;, +, + SubscribeOnSubscriber(Subscriber<? super T> actual,
[+++ b/rxjava-contrib/rxjava-computation-expressions/src/main/java/rx/Statement.java, +import rx.operators.OperatorIfThen;, +import rx.operators.OperatorSwitchCase;, +import rx.operators.OperatorWhileDoWhile;, +public final class Statement {, + private Statement() { throw new IllegalStateException("No instances!"); }, + return Observable.create(new OperatorSwitchCase<K, R>(caseSelector, mapOfCases, defaultCase));, + public static <T> Observable<T> doWhile(Observable<? extends T> source, Func0<Boolean> postCondition) {, + return Observable.create(new OperatorWhileDoWhile<T>(source, TRUE, postCondition));, + public static <T> Observable<T> whileDo(Observable<? extends T> source, Func0<Boolean> preCondition) {, + return Observable.create(new OperatorWhileDoWhile<T>(source, preCondition, preCondition));, + return Observable.create(new OperatorIfThen<R>(condition, then, orElse));, + }, + /** Returns always true. */, + private static final class Func0True implements Func0<Boolean> {, + @Override, + public Boolean call() {, + return true;, +
[+++ b/src/main/java/io/reactivex/Observable.java, + public final Observable<Observable<T>> window(long timespan, TimeUnit unit) {, + return window(timespan, unit, Schedulers.computation(), Long.MAX_VALUE, false);, + }, +, + public final Observable<Observable<T>> window(long timespan, TimeUnit unit, , + long count) {, + return window(timespan, unit, Schedulers.computation(), count, false);, + }, +, + public final Observable<Observable<T>> window(long timespan, TimeUnit unit, , + long count, boolean restart) {, + return window(timespan, unit, Schedulers.computation(), count, restart);, + }, +, + public final Observable<Observable<T>> window(long timespan, TimeUnit unit, , + Scheduler scheduler) {, + return window(timespan, unit, scheduler, Long.MAX_VALUE, false);, + }, +, + public final Observable<Observable<T>> window(long timespan, TimeUnit
[+++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +apply plugin: 'osgi', +, +sourceCompatibility = JavaVersion.VERSION_1_6, +targetCompatibility = JavaVersion.VERSION_1_6, +, +dependencies {, + compile project(':rxjava-core'), + testCompile project(":rxjava-core").sourceSets.test.output , + provided 'junit:junit-dep:4.10', + provided 'org.mockito:mockito-core:1.8.5', +}, +, +jar {, + manifest {, + name = 'rxjava-computation-expressions', + instruction 'Bundle-Vendor', 'Netflix', + instruction 'Bundle-DocURL', 'https://github.com/Netflix/RxJava', + instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*', + }, +}, +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +apply plugin: 'osgi', +, +sourceCompatibility = JavaVersion.VERSION_1_6, +targetCompatibility = JavaVersion.VERSION_1_6, +, +dependencies {, + compile project(':rxjava-core'), + testCompile project(":rxjava-core").sourceSets.test.output , + provided 'junit:junit-dep:4.10', + provided 'org.mockito:mockito-core:1.8.5', +}, +, +jar {, + manifest {, + name = 'rxjava-computation-expressions', + instruction 'Bundle-Vendor', 'Netflix', + instruction
[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBuffer.java, +public final class FlowableBuffer<T, C extends Collection<? super T>> extends FlowableWithUpstream<T, C> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBuffer.java, +public final class FlowableBuffer<T, C extends Collection<? super T>> extends FlowableWithUpstream<T, C> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMap.java, +public final class FlowableConcatMap<T, R> extends FlowableWithUpstream<T, R> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBuffer.java, +public final class FlowableBuffer<T, C extends Collection<? super T>> extends FlowableWithUpstream<T, C> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMap.java, +public final class FlowableConcatMap<T, R> extends FlowableWithUpstream<T, R> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java, +public class FlowableConcatMapEager<T, R> extends FlowableWithUpstream<T, R> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBuffer.java, +public final class FlowableBuffer<T, C extends Collection<? super T>> extends FlowableWithUpstream<T, C> {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMap.java, +public final class FlowableConcatMap<T, R>
[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationAll;, +import rx.operators.OperatorAny;, + return create(OperationAll.all(this, predicate));, + return lift(new OperatorAny<T>(predicate, false));, + return lift(new OperatorAny<T>(Functions.alwaysTrue(), true)); // create(OperatorAny.isEmpty(this));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationAll;, +import rx.operators.OperatorAny;, + return create(OperationAll.all(this, predicate));, + return lift(new OperatorAny<T>(predicate, false));, + return lift(new OperatorAny<T>(Functions.alwaysTrue(), true)); // create(OperatorAny.isEmpty(this));, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, +
[+++ b/gradle.properties, +version=0.17.0-RC5, +++ b/gradle.properties, +version=0.17.0-RC5, +++ b/language-adaptors/rxjava-clojure/README.md, +# Clojure Adaptor for RxJava, +, +This adaptor provides functions and macros to ease Clojure/RxJava interop. In particular, there are functions and macros for turning Clojure functions and code into RxJava `Func*` and `Action*` interfaces without the tedium of manually reifying the interfaces., +, +# Basic Usage, +, +## Requiring the interop namespace, +The first thing to do is to require the namespace:, +, +```clojure, +(ns my.namespace, + (:require [rx.lang.clojure.interop :as rx]), + (:import [rx Observable])), +```, +, +or, at the REPL:, +, +```clojure, +(require '[rx.lang.clojure.interop :as rx]), +```, +, +##
[+++ b/.travis.yml, +before_cache:, + - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock, + - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, + - $HOME/.gradle/caches/, + - $HOME/.gradle/wrapper/, + - $HOME/.android/build-cache]
[+++ b/CHANGELOG.md, +Version 10.0.0 *(2019-01-03)*, +-----------------------------, +, + * Equivalent to 9.0.0 but only supports AndroidX-enabled builds., + * Removed APIs deprecated in 9.0.0., +, +, +++ b/CHANGELOG.md, +Version 10.0.0 *(2019-01-03)*, +-----------------------------, +, + * Equivalent to 9.0.0 but only supports AndroidX-enabled builds., + * Removed APIs deprecated in 9.0.0., +, +, +++ b/README.md, + implementation 'com.jakewharton:butterknife:10.0.0', + annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0', + classpath 'com.jakewharton:butterknife-gradle-plugin:10.0.0', +++ b/CHANGELOG.md, +Version 10.0.0 *(2019-01-03)*, +-----------------------------, +, + * Equivalent to 9.0.0 but only supports AndroidX-enabled builds., + * Removed APIs deprecated in 9.0.0., +, +, +++ b/README.md, + implementation 'com.jakewharton:butterknife:10.0.0', + annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0', + classpath
[+++ b/butterknife/src/it/method-cannot-have-dupliate-ids/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project, + xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <groupId>com.example.butterknife.tests</groupId>, + <artifactId>method-cannot-have-dupliate-ids</artifactId>, + <version>HEAD-SNAPSHOT</version>, +, + <properties>, + <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, + </properties>, +, + <dependencies>, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <version>4.1.1.4</version>, + <scope>provided</scope>, + </dependency>, + <dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>butterknife</artifactId>, + <version>@project.version@</version>, + </dependency>, + </dependencies>, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-compiler-plugin</artifactId>, + <version>3.0</version>, + <configuration>, + <source>1.5</source>, + <target>1.5</target>, + </configuration>, + </plugin>, + </plugins>, + </build>, +</project>, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/invoker.properties, +invoker.buildResult=failure, +++ b/butterknife/src/it/method-cannot-have-dupliate-ids/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>,
[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + + " was not found. If this view is optional add '@Optional' annotation.");]
[+++ b/build.gradle, + 'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/build.gradle, + 'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + defaultReturn = "false", +++ b/build.gradle, + 'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + defaultReturn = "false", +++ b/build.gradle, + 'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, + defaultReturn = "false", +++ b/build.gradle, + 'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/build.gradle, + 'viewpager': "androidx.viewpager:viewpager:1.0.0",, +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, + defaultReturn = "false", +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, +
[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, + if (bindNeedsView()) {, + constructor.addParameter(VIEW, "source");, + if (parentBinding.bindNeedsView()) invoke.add(", source");, + .returns(UNBINDER);, + result.addParameter(VIEW, "source");, + boolean needsView = bindNeedsView();, + result.addStatement("$T context = source.getContext()", CONTEXT);, + result.addStatement("$T res = source.getContext().getResources()", RESOURCES);, + if (needsView) invoke.add(", source");, + if (parentBinding.bindNeedsView()) invoke.add(", source");, + builder.add("\n");, +, + boolean requiresCast = requiresCast(binding.getType());, + if (!requiresCast && !binding.isRequired()) {, + builder.add("source.findViewById($L)", ids.get(i).code);, + } else {, + builder.add("$T.find", UTILS);, + if (requiresCast) {, + if (binding.isRequired() || requiresCast) {, + if (requiresCast) {, + }, + CodeBlock.Builder builder = CodeBlock.builder(), + .add("target.$L = ", fieldBinding.getName());, +, + boolean
[+++ b/butterknife/proguard-rules.txt, +-keep class butterknife.*, +-keepclasseswithmembernames class * { @butterknife.* <methods>; }, +-keepclasseswithmembernames class * { @butterknife.* <fields>; }]
[+++ b/butterknife-compiler/build.gradle, +def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger), +def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger), +for (File file : sdkHandler.sdkLoader.repositories) {, + repositories.maven {, + url = file.toURI(), + }, +}, +, +++ b/butterknife-compiler/build.gradle, +def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger), +def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger), +for (File file : sdkHandler.sdkLoader.repositories) {, + repositories.maven {, + url = file.toURI(), + }, +}, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/butterknife-compiler/build.gradle, +def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger), +def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger), +for (File file : sdkHandler.sdkLoader.repositories) {, + repositories.maven {, + url = file.toURI(), + }, +}, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-rc-2-all.zip]
[+++ b/CHANGELOG.md, +Version 1.3.2 *(In Development)*, +--------------------------------, +, + * Fix: Ensure injection happens on classes who do not have any injections but, + their superclasses do., +, +, +++ b/CHANGELOG.md, +Version 1.3.2 *(In Development)*, +--------------------------------, +, + * Fix: Ensure injection happens on classes who do not have any injections but, + their superclasses do., +, +, +++ b/butterknife/pom.xml, +++ b/CHANGELOG.md, +Version 1.3.2 *(In Development)*, +--------------------------------, +, + * Fix: Ensure injection happens on classes who do not have any injections but, + their superclasses do., +, +, +++ b/butterknife/pom.xml, +++ b/butterknife/src/it/field-visibility/pom.xml, +, +, + <dependency>, + <groupId>junit</groupId>,
[+++ b/CHANGELOG.md, +Version 9.0.0-rc1 *(2018-10-10)*, +--------------------------------, +, + * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate, + AndroidX code., +, + * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs, + required for the generated code but does not contain the code to reflectively look up the generated, + code. This allows you to reference the generated code directly such that R8/ProGuard optimization can, + rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules, + remain in the old `butterknife` artifact., + , + * New:
[+++ b/butterknife-sample/pom.xml, + <version>5.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.1.1-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.1.1-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>5.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>]
[+++ b/gradle.properties, +VERSION_NAME=8.2.2-SNAPSHOT]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.5.1-all.zip]
[+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.view.View;, +import android.view.animation.AlphaAnimation;, +import butterknife.InjectView;, +import butterknife.InjectViews;, +import butterknife.OnClick;, +import java.util.List;, + private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {, + @Override public void apply(View view, int index) {, + AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);, + alphaAnimation.setFillBefore(true);, + alphaAnimation.setDuration(500);, + alphaAnimation.setStartOffset(index * 100);, + view.startAnimation(alphaAnimation);, + }, + };, +, + @InjectViews({ R.id.title, R.id.subtitle, R.id.hello }), + List<View> headerViews;, +, + ButterKnife.apply(headerViews, ALPHA_FADE);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.view.View;, +import android.view.animation.AlphaAnimation;, +import butterknife.InjectView;, +import butterknife.InjectViews;, +import butterknife.OnClick;, +import java.util.List;, + private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {, + @Override public void apply(View view, int
[+++ b/.travis.yml, + # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out., + # Install SDK license so Android Gradle plugin can install deps., + - mkdir "$ANDROID_HOME/licenses" || true, + - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license", +++ b/.travis.yml, + # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out., + # Install SDK license so Android Gradle plugin can install deps., + - mkdir "$ANDROID_HOME/licenses" || true, + - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license", +++ b/build.gradle, + 'supportLibrary': '25.3.0',,
[+++ b/build.gradle, + 'androidPlugin': '3.2.0-rc02',, + 'androidTools': '26.2.0-rc02',, +++ b/build.gradle, + 'androidPlugin': '3.2.0-rc02',, + 'androidTools': '26.2.0-rc02',, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, + if (clsName.startsWith("android.") || clsName.startsWith("java."), + || clsName.startsWith("androidx.")) {, +++ b/build.gradle, + 'androidPlugin': '3.2.0-rc02',, + 'androidTools': '26.2.0-rc02',, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, + if (clsName.startsWith("android.") || clsName.startsWith("java."), + || clsName.startsWith("androidx.")) {, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + if (clsName.startsWith("android.") || clsName.startsWith("java."), + || clsName.startsWith("androidx.")) {]
[+++ b/butterknife-sample/pom.xml, + <version>5.0.0-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.0.0-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.0.0-SNAPSHOT</version>, +++ b/butterknife-sample/pom.xml, + <version>5.0.0-SNAPSHOT</version>, +++ b/butterknife/pom.xml, + <version>5.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>5.0.0-SNAPSHOT</version>]
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, + docs = in.readOptionalWriteable(DocsStats::new);, + store = in.readOptionalWriteable(StoreStats::new);, + indexing = in.readOptionalWriteable(IndexingStats::new);, + get = in.readOptionalWriteable(GetStats::new);, + merge = in.readOptionalWriteable(MergeStats::new);, + refresh = in.readOptionalWriteable(RefreshStats::new);, + flush = in.readOptionalWriteable(FlushStats::new);, + warmer = in.readOptionalWriteable(WarmerStats::new);, + queryCache = in.readOptionalWriteable(QueryCacheStats::new);, + fieldData = in.readOptionalWriteable(FieldDataStats::new);, + completion = in.readOptionalWriteable(CompletionStats::new);, + segments = in.readOptionalWriteable(SegmentsStats::new);, + translog = in.readOptionalWriteable(TranslogStats::new);, + requestCache = in.readOptionalWriteable(RequestCacheStats::new);, + recoveryStats = in.readOptionalWriteable(RecoveryStats::new);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, + docs = in.readOptionalWriteable(DocsStats::new);, + store = in.readOptionalWriteable(StoreStats::new);, + indexing = in.readOptionalWriteable(IndexingStats::new);, + get = in.readOptionalWriteable(GetStats::new);, + merge = in.readOptionalWriteable(MergeStats::new);, + refresh = in.readOptionalWriteable(RefreshStats::new);, + flush = in.readOptionalWriteable(FlushStats::new);, + warmer = in.readOptionalWriteable(WarmerStats::new);, + queryCache =
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/docs/reference/migration/index.asciidoc, +See <<setup-upgrade>> for more info., +++ b/docs/reference/migration/index.asciidoc, +See <<setup-upgrade>> for more info., +++ b/docs/reference/migration/migrate_7_0.asciidoc, +++ b/docs/reference/migration/index.asciidoc, +See <<setup-upgrade>> for more info., +++ b/docs/reference/migration/migrate_7_0.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/docs/reference/migration/index.asciidoc, +See <<setup-upgrade>> for more info., +++ b/docs/reference/migration/migrate_7_0.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/docs/reference/migration/index.asciidoc, +See <<setup-upgrade>> for more info., +++ b/docs/reference/migration/migrate_7_0.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++ b/docs/reference/migration/index.asciidoc, +See <<setup-upgrade>> for more info., +++ b/docs/reference/migration/migrate_7_0.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++
[+++ b/server/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +public class ActiveShardsObserver {, +, + private static final Logger logger = LogManager.getLogger(ActiveShardsObserver.class);, +++ b/server/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +public class ActiveShardsObserver {, +, + private static final Logger logger = LogManager.getLogger(ActiveShardsObserver.class);, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +import org.apache.logging.log4j.LogManager;, +public class UpdateHelper {, +, + private static final Logger logger = LogManager.getLogger(UpdateHelper.class);, +++ b/server/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +public class ActiveShardsObserver {, +, + private static final Logger logger = LogManager.getLogger(ActiveShardsObserver.class);, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +import org.apache.logging.log4j.LogManager;, +public class UpdateHelper {, +, + private static final Logger logger = LogManager.getLogger(UpdateHelper.class);, +++ b/server/src/main/java/org/elasticsearch/client/support/AbstractClient.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +public abstract
[+++ b/TESTING.asciidoc, +, +, +, +, +, +, +++ b/TESTING.asciidoc, +, +, +, +, +, +, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/TESTING.asciidoc, +, +, +, +, +, +, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/buildSrc/src/main/resources/checkstyle.xml, +++ b/TESTING.asciidoc, +, +, +, +, +, +, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/buildSrc/src/main/resources/checkstyle.xml, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +++ b/TESTING.asciidoc, +, +,
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/PutWatchRequest.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/PutWatchRequest.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, + if (opType != DocWriteRequest.OpType.UPDATE && randomBoolean()) {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/PutWatchRequest.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, + if (opType != DocWriteRequest.OpType.UPDATE && randomBoolean()) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/WatcherRequestConvertersTests.java, +import org.elasticsearch.client.watcher.PutWatchRequest;, + long seqNo = randomNonNegativeLong();, + long ifPrimaryTerm = randomLongBetween(1, 200);, + putWatchRequest.setIfSeqNo(seqNo);, + putWatchRequest.setIfPrimaryTerm(ifPrimaryTerm);, + expectedParams.put("if_seq_no", String.valueOf(seqNo));, + expectedParams.put("if_primary_term", String.valueOf(ifPrimaryTerm));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/PutWatchRequest.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, + if (opType != DocWriteRequest.OpType.UPDATE && randomBoolean()) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/WatcherRequestConvertersTests.java, +import org.elasticsearch.client.watcher.PutWatchRequest;, + long seqNo = randomNonNegativeLong();, + long ifPrimaryTerm = randomLongBetween(1, 200);, + putWatchRequest.setIfSeqNo(seqNo);, + putWatchRequest.setIfPrimaryTerm(ifPrimaryTerm);, + expectedParams.put("if_seq_no", String.valueOf(seqNo));, + expectedParams.put("if_primary_term", String.valueOf(ifPrimaryTerm));, +++
[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, + String key = PainlessLookupUtility.buildPainlessMethodKey(name, arity);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, + String key = PainlessLookupUtility.buildPainlessMethodKey(name, arity);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, + impl = struct.constructors.get(PainlessLookupUtility.buildPainlessMethodKey("<init>", method.arguments.size()));, + PainlessMethod staticImpl =, + struct.staticMethods.get(PainlessLookupUtility.buildPainlessMethodKey(call, method.arguments.size()));, + impl = struct.methods.get(PainlessLookupUtility.buildPainlessMethodKey(call, arity));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, + String key = PainlessLookupUtility.buildPainlessMethodKey(name, arity);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, + impl = struct.constructors.get(PainlessLookupUtility.buildPainlessMethodKey("<init>", method.arguments.size()));, + PainlessMethod staticImpl =, + struct.staticMethods.get(PainlessLookupUtility.buildPainlessMethodKey(call, method.arguments.size()));, + impl = struct.methods.get(PainlessLookupUtility.buildPainlessMethodKey(call, arity));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, + public PainlessMethod getMethod(String key) {, + private Map<String,PainlessMethod> methods;, + private PainlessMethod lookupMethod(String key) {, + methods.put(PainlessLookupUtility.buildPainlessMethodKey(method.name, method.arguments.size()), method);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, + String key = PainlessLookupUtility.buildPainlessMethodKey(name, arity);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, + impl = struct.constructors.get(PainlessLookupUtility.buildPainlessMethodKey("<init>", method.arguments.size()));,
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/AuthenticateResponse.java, + "client_security_authenticate_response", true,, + final ConstructingObjectParser<RealmInfo, Void> realmInfoParser = new ConstructingObjectParser<>("realm_info", true,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/AuthenticateResponse.java, + "client_security_authenticate_response", true,, + final ConstructingObjectParser<RealmInfo, Void> realmInfoParser = new ConstructingObjectParser<>("realm_info", true,, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/AuthenticateResponseTests.java, + .supportsUnknownFields(true), + //metadata is a series of kv pairs, so we dont want to add random fields here for test equality, + .randomFieldsExcludeFilter(f -> f.startsWith("metadata"))]
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufBytesReference.java, + public int getInt(int index) {, + return buffer.getInt(offset + index);, + }, +, + @Override, + public int indexOf(byte marker, int from) {, + final int start = offset + from;, + return buffer.forEachByte(start, length - start, value -> value != marker);, + }, +, + @Override, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufBytesReference.java, + public int getInt(int index) {, + return buffer.getInt(offset + index);, + }, +, + @Override, + public int indexOf(byte marker, int from) {, + final int start = offset + from;, + return buffer.forEachByte(start, length - start, value -> value != marker);, + }, +, +
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java, + final Client remoteClient = client.getRemoteClusterClient(clusterAlias);, + hasPrivilegesToFollowIndices(remoteClient, new String[] {leaderIndex}, e -> {, + fetchLeaderHistoryUUIDs(remoteClient, leaderIndexMetaData, onFailure, historyUUIDs ->, + * @param remoteClient the remote client to use to execute cluster state API, + final Client remoteClient,, + remoteClient.admin().cluster().state(request, clusterStateListener);, + * Fetches the history UUIDs for leader index on per shard basis using the specified remoteClient., + * @param remoteClient the remote client, + final Client remoteClient,, + remoteClient.admin().indices().stats(request, ActionListener.wrap(indicesStatsHandler, onFailure));, + * @param remoteClient the remote client, + public void hasPrivilegesToFollowIndices(final Client remoteClient, final String[] indices, final Consumer<Exception> handler) {, + Objects.requireNonNull(remoteClient, "remoteClient");, +
[+++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/StandardCastTests.java, +, + public void testPrimitiveByteCasts() {, + expectScriptThrows(ClassCastException.class, () -> exec("byte o = 0; Object n = o;"));, + expectScriptThrows(ClassCastException.class, () -> exec("byte o = 0; Object n = (Object)o;"));, +, + expectScriptThrows(ClassCastException.class, () -> exec("byte o = 0; Number n = o;"));, + expectScriptThrows(ClassCastException.class, () -> exec("byte o = 0; Number n = (Number)o;"));, +, + expectScriptThrows(ClassCastException.class, () -> exec("byte o = 0; String n = o;"));, + expectScriptThrows(ClassCastException.class, () -> exec("byte o = 0; String n = (String)o;"));, +, + expectScriptThrows(ClassCastException.class, () -> exec("byte o = 0; boolean b = o;"));, + expectScriptThrows(ClassCastException.class, () ->
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/filestructurefinder/DelimitedFileStructureFinder.java, + trimFields ? row.stream().map(field -> (field == null) ? null : field.trim()).collect(Collectors.toList()) : row);]
[+++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +import org.elasticsearch.action.admin.cluster.node.tasks.cancel.CancelTasksRequest;, +import org.elasticsearch.tasks.TaskCancelledException;, +import org.elasticsearch.tasks.TaskManager;, + private Logger logger;, + private TaskManager taskManager;, + * <p>, + void init(PersistentTasksService persistentTasksService, TaskManager taskManager, Logger logger, long persistentTaskId, long, + allocationId) {, + this.logger = logger;, + this.taskManager = taskManager;, + return state.compareAndSet(AllocatedPersistentTask.State.STARTED, AllocatedPersistentTask.State.PENDING_CANCEL);, + PENDING_CANCEL, // the task is cancelled on master, cancelling it locally, +, + public void markAsCompleted() {, + completeAndNotifyIfNeeded(null);, + }, +, + public void markAsFailed(Exception e) {, + if (CancelTasksRequest.DEFAULT_REASON.equals(getReasonCancelled())) {, + completeAndNotifyIfNeeded(null);, + } else {, + completeAndNotifyIfNeeded(e);, + }, +, + }, +, +
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/buildSrc/build.gradle, +, +plugins {, + id 'java-gradle-plugin', + id 'groovy', +}, + compile "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${props.getProperty('randomizedrunner')}", +, + testCompile "junit:junit:${props.getProperty('junit')}", +, + testClass = 'org.elasticsearch.gradle.test.GradleUnitTestCase', + integTestClass = 'org.elasticsearch.gradle.test.GradleIntegrationTestCase', +++ b/buildSrc/build.gradle, +, +plugins {, + id 'java-gradle-plugin', + id 'groovy', +}, + compile "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${props.getProperty('randomizedrunner')}", +, + testCompile "junit:junit:${props.getProperty('junit')}", +, + testClass = 'org.elasticsearch.gradle.test.GradleUnitTestCase', + integTestClass = 'org.elasticsearch.gradle.test.GradleIntegrationTestCase', +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, + testClassesDirs = oldTestTask.project.sourceSets.test.output.classesDirs, +++ b/buildSrc/build.gradle, +, +plugins {, + id 'java-gradle-plugin', + id 'groovy', +}, + compile "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${props.getProperty('randomizedrunner')}", +, + testCompile "junit:junit:${props.getProperty('junit')}", +, + testClass = 'org.elasticsearch.gradle.test.GradleUnitTestCase', + integTestClass = 'org.elasticsearch.gradle.test.GradleIntegrationTestCase', +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, + testClassesDirs = oldTestTask.project.sourceSets.test.output.classesDirs, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingTask.groovy, +import
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/analysis/FingerprintAnalyzerProvider.java, + public static ParseField SEPARATOR = new ParseField("separator");, + public static ParseField MAX_OUTPUT_SIZE = new ParseField("max_output_size");, + public static int DEFAULT_MAX_OUTPUT_SIZE = 255;, + public static final char DEFAULT_SEPARATOR = ' ';, + char separator = parseSeparator(settings);, +, + public static char parseSeparator(Settings settings) throws IllegalArgumentException {, + String customSeparator = settings.get(SEPARATOR.getPreferredName());, + if (customSeparator == null) {, + return DEFAULT_SEPARATOR;, + } else if (customSeparator.length() == 1) {,
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/server/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, + } else if (newShardRouting.primary() && currentRoutingEntry.primary() == false && newShardRouting.initializing()) {, + assert currentRoutingEntry.initializing() : currentRoutingEntry; // see above if clause, + // this can happen when cluster state batching batches activation of the shard, closing an index, reopening it, + // and assigning an initializing primary to this node, + logger.debug("{} removing shard (not active, current {}, new {})", shardId, currentRoutingEntry, newShardRouting);, + indexService.removeShard(shardId.id(), "removing shard (stale copy)");, +++ b/server/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, + } else if (newShardRouting.primary() && currentRoutingEntry.primary() == false && newShardRouting.initializing()) {, + assert currentRoutingEntry.initializing() : currentRoutingEntry; // see above if clause, + // this
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcess.java, +, + /**, + * Read anything left in the stream before, + * closing the stream otherwise if the process, + * tries to write more after the close it gets, + * a SIGPIPE, + */, + void consumeAndCloseOutputStream();, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcess.java, +, + /**, + * Read anything left in the stream before, + * closing the stream otherwise if the process, + * tries to write more after the close it gets, + * a SIGPIPE, + */, + void consumeAndCloseOutputStream();, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/BlackHoleAutodetectProcess.java, + public void consumeAndCloseOutputStream() {, + }, +, + @Override, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/OpenJobAction.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/OpenJobAction.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfig.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/OpenJobAction.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfig.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/AnalysisConfig.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/OpenJobAction.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfig.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/AnalysisConfig.java, +++ b/x-pack/plugin/ml/qa/basic-multi-node/src/test/java/org/elasticsearch/xpack/ml/integration/MlBasicMultiNodeIT.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/OpenJobAction.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfig.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/AnalysisConfig.java, +++ b/x-pack/plugin/ml/qa/basic-multi-node/src/test/java/org/elasticsearch/xpack/ml/integration/MlBasicMultiNodeIT.java, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, + // This is not used in v7 and higher, but users are still prevented from setting it directly to avoid confusion, + private static final String PRE_V7_ML_ENABLED_NODE_ATTR = "ml.enabled";, + public static boolean isMlNode(DiscoveryNode node) {, + Map<String, String> nodeAttributes = node.getAttributes();, + try {, + return Integer.parseInt(nodeAttributes.get(MAX_OPEN_JOBS_NODE_ATTR)) > 0;, + } catch (NumberFormatException e) {, + return false;, + }, + }, + String mlEnabledNodeAttrName
[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/UpdateJobAction.java, + JobUpdate update = JobUpdate.EXTERNAL_PARSER.apply(parser, null).setJobId(jobId).build();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/UpdateJobAction.java, + JobUpdate update = JobUpdate.EXTERNAL_PARSER.apply(parser, null).setJobId(jobId).build();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/JobUpdate.java, + // For internal updates, + static final ConstructingObjectParser<Builder, Void> INTERNAL_PARSER = new ConstructingObjectParser<>(, + "job_update", args -> new Builder((String) args[0]));, +, + // For parsing REST requests, + public static final ConstructingObjectParser<Builder, Void> EXTERNAL_PARSER = new ConstructingObjectParser<>(, + for (ConstructingObjectParser<Builder, Void> parser : Arrays.asList(INTERNAL_PARSER, EXTERNAL_PARSER)) {, + parser.declareString(ConstructingObjectParser.optionalConstructorArg(), Job.ID);, + parser.declareStringArray(Builder::setGroups, Job.GROUPS);, + parser.declareStringOrNull(Builder::setDescription, Job.DESCRIPTION);, + parser.declareObjectArray(Builder::setDetectorUpdates, DetectorUpdate.PARSER, DETECTORS);, + parser.declareObject(Builder::setModelPlotConfig, ModelPlotConfig.CONFIG_PARSER, Job.MODEL_PLOT_CONFIG);, + parser.declareObject(Builder::setAnalysisLimits, AnalysisLimits.CONFIG_PARSER, Job.ANALYSIS_LIMITS);, + parser.declareString((builder, val) -> builder.setBackgroundPersistInterval(, + parser.declareLong(Builder::setRenormalizationWindowDays, Job.RENORMALIZATION_WINDOW_DAYS);, + parser.declareLong(Builder::setResultsRetentionDays, Job.RESULTS_RETENTION_DAYS);, + parser.declareLong(Builder::setModelSnapshotRetentionDays,
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/buildSrc/src/test/java/org/elasticsearch/gradle/BuildExamplePluginsIT.java, +import org.junit.Ignore;, +@Ignore // https://github.com/elastic/elasticsearch/issues/38784]
[+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, + * Finds the specific index aliases that point to the requested concrete indices directly, + * or that match with the indices via wildcards., + * @param concreteIndices The concrete indices that the aliases must point to in order to be returned., + * @return A map of index name to the list of aliases metadata. If a concrete index does not have matching, + * aliases then the result will <b>not</b> include the index's key., + public ImmutableOpenMap<String, List<AliasMetaData>> findAllAliases(final String[] concreteIndices) {, + return findAliases(Strings.EMPTY_ARRAY, concreteIndices);, + * Finds the specific index aliases that
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatus.java, +import java.util.Collections;, + Map<String, String> headers = Collections.emptyMap();, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatus.java, +import java.util.Collections;, + Map<String, String> headers = Collections.emptyMap();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/watch/WatchStatus.java, + } else {, + headers = Collections.emptyMap();, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatus.java, +import java.util.Collections;, + Map<String, String> headers = Collections.emptyMap();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/watch/WatchStatus.java, + } else {, + headers = Collections.emptyMap();, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/protocol/xpack/watcher/GetWatchResponseTests.java, + Map<String, String> headers = new HashMap<>();, + int headerSize = randomIntBetween(0, 5);]
[+++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, + if (in.getVersion().onOrAfter(Version.V_6_5_0)) {, + if (out.getVersion().onOrAfter(Version.V_6_5_0)) {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, + if (in.getVersion().onOrAfter(Version.V_6_5_0)) {, + if (out.getVersion().onOrAfter(Version.V_6_5_0)) {, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, + assert config().getIndexSettings().getIndexVersionCreated().before(Version.V_6_5_0);, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, + if (in.getVersion().onOrAfter(Version.V_6_5_0)) {, + if (out.getVersion().onOrAfter(Version.V_6_5_0)) {, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, + assert config().getIndexSettings().getIndexVersionCreated().before(Version.V_6_5_0);, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, + assert indexSettings.getIndexVersionCreated().before(Version.V_6_5_0);, + assert indexSettings.getIndexVersionCreated().before(Version.V_6_5_0);, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, + if (in.getVersion().onOrAfter(Version.V_6_5_0)) {, + if (out.getVersion().onOrAfter(Version.V_6_5_0)) {, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, + assert config().getIndexSettings().getIndexVersionCreated().before(Version.V_6_5_0);, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, + assert indexSettings.getIndexVersionCreated().before(Version.V_6_5_0);, + assert indexSettings.getIndexVersionCreated().before(Version.V_6_5_0);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTranslogOperationsRequest.java, + if (in.getVersion().onOrAfter(Version.V_6_5_0)) {, + if (out.getVersion().onOrAfter(Version.V_6_5_0)) {]
[+++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +import org.apache.logging.log4j.LogManager;, +import org.elasticsearch.action.bulk.BulkItemResponse;, +import org.elasticsearch.action.bulk.BulkProcessor;, +import org.elasticsearch.action.bulk.BulkRequest;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.xpack.core.ClientHelper;, +import java.util.concurrent.TimeUnit;, +import java.util.stream.Collectors;, +import static org.elasticsearch.common.settings.Setting.Property.NodeScope;, +import static org.elasticsearch.xpack.core.ClientHelper.WATCHER_ORIGIN;, + private static final Setting<Integer> SETTING_BULK_ACTIONS =, + Setting.intSetting("xpack.watcher.bulk.actions", 1, 1, 10000, NodeScope);, + private static final Setting<Integer> SETTING_BULK_CONCURRENT_REQUESTS =, + Setting.intSetting("xpack.watcher.bulk.concurrent_requests", 0, 0, 20, NodeScope);, + private static final Setting<TimeValue> SETTING_BULK_FLUSH_INTERVAL =, + Setting.timeSetting("xpack.watcher.bulk.flush_interval", TimeValue.timeValueSeconds(1), NodeScope);, + private static final Setting<ByteSizeValue> SETTING_BULK_SIZE =, + Setting.byteSizeSetting("xpack.watcher.bulk.size", new ByteSizeValue(1, ByteSizeUnit.MB),, + new ByteSizeValue(1, ByteSizeUnit.MB), new ByteSizeValue(10, ByteSizeUnit.MB), NodeScope);, +, + private static final Logger logger = LogManager.getLogger(Watcher.class);, + private BulkProcessor bulkProcessor;, +
[+++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ b/dev-tools/checkstyle_suppressions.xml, + <!-- These files are generated by ANTLR so its silly to hold them to our rules. -->, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]parser[/\\]SqlBase(Base(Listener|Visitor)|Lexer|Listener|Parser|Visitor).java" checks="." />, +, + <suppress files="sql[/\\]server[/\\].*.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\].*.java" checks="EqualsHashCode" />, +, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ b/dev-tools/checkstyle_suppressions.xml, + <!-- These files are generated by ANTLR so its silly to hold them to our rules. -->, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]parser[/\\]SqlBase(Base(Listener|Visitor)|Lexer|Listener|Parser|Visitor).java" checks="." />, +, + <suppress files="sql[/\\]server[/\\].*.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\].*.java" checks="EqualsHashCode" />, +, +++
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/docs/reference/sql/language/data-types.asciidoc, +| <<number, `half_float`>> | half_float | FLOAT | 3, +| <<number, `scaled_float`>> | scaled_float | DOUBLE | 15, +| <<keyword, `keyword`>> | keyword | VARCHAR | 32,766, +++ b/docs/reference/sql/language/data-types.asciidoc, +| <<number, `half_float`>> | half_float | FLOAT | 3, +| <<number, `scaled_float`>> | scaled_float | DOUBLE | 15, +| <<keyword, `keyword`>> | keyword | VARCHAR | 32,766, +++ b/x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/RestSqlSecurityIT.java, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.SQL_QUERY_REST_ENDPOINT;, + columnInfo(mode, "column", "keyword", JDBCType.VARCHAR, 32766),, + columnInfo(mode, "type", "keyword", JDBCType.VARCHAR, 32766),, + columnInfo(mode, "mapping", "keyword", JDBCType.VARCHAR, 32766)));, + columns.add(columnInfo(mode, "name", "keyword", JDBCType.VARCHAR, 32766));, + columns.add(columnInfo(mode, "type", "keyword", JDBCType.VARCHAR, 32766));, +++ b/docs/reference/sql/language/data-types.asciidoc, +| <<number, `half_float`>> |
[+++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/docs/en/security/authentication/active-directory-realm.asciidoc, + should be trusted. `ssl.certificate_authorities` and `ssl.truststore.path` may not be used at, + `ssl.certificate_authorities` and `ssl.truststore.path` may not be used at the same time., +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/docs/en/security/authentication/active-directory-realm.asciidoc, + should be trusted. `ssl.certificate_authorities` and `ssl.truststore.path` may not be used at, + `ssl.certificate_authorities` and `ssl.truststore.path` may not be used at the same time., +++ b/docs/en/security/authentication/ldap-realm.asciidoc, + should be trusted. `ssl.certificate_authorities` and `ssl.truststore.path` may not be used,
[+++ b/x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/indexlifecycle/TimeSeriesLifecycleActionsIT.java, +import org.elasticsearch.xpack.core.indexlifecycle.ShrinkStep;, + public void testRetryFailedShrinkAction() throws Exception {, + int numShards = 6;, + int divisor = randomFrom(2, 3, 6);, + int expectedFinalShards = numShards / divisor;, + String shrunkenIndex = ShrinkAction.SHRUNKEN_INDEX_PREFIX + index;, + createIndexWithSettings(index, Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numShards), + .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0));, + createNewSingletonPolicy("warm", new ShrinkAction(numShards + randomIntBetween(1, numShards)));, + updatePolicy(index, policy);, + assertBusy(() -> {, + String failedStep = getFailedStepForIndex(index);, + assertThat(failedStep, equalTo(ShrinkStep.NAME));, + });, +, + // update policy to be correct, + createNewSingletonPolicy("warm", new ShrinkAction(expectedFinalShards));, + updatePolicy(index, policy);, +, + // retry step, + Request retryRequest = new Request("POST", index + "/_ilm/retry");, + assertOK(client().performRequest(retryRequest));,
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +++ b/core/src/main/java/org/elasticsearch/node/InternalSettingsPreparer.java, + if (Files.exists(environment.configFile().resolve("elasticsearch.yaml"))) {, + throw new SettingsException("elasticsearch.yaml was deprecated in 5.5.0 and must be renamed to elasticsearch.yml");, + }, +, + if (Files.exists(environment.configFile().resolve("elasticsearch.json"))) {, + throw new SettingsException("elasticsearch.json was deprecated in 5.5.0 and must be converted to elasticsearch.yml");, + }, +, + Path path = environment.configFile().resolve("elasticsearch.yml");, + return new Environment(output.build());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +++ b/core/src/main/java/org/elasticsearch/node/InternalSettingsPreparer.java, + if (Files.exists(environment.configFile().resolve("elasticsearch.yaml"))) {, + throw new SettingsException("elasticsearch.yaml was deprecated in 5.5.0 and must be renamed to elasticsearch.yml");, + }, +, + if (Files.exists(environment.configFile().resolve("elasticsearch.json"))) {, + throw new SettingsException("elasticsearch.json was
[+++ b/.ci/matrix-build-javas.yml, +# This file is used as part of a matrix build in Jenkins where the, +# values below are included as an axis of the matrix., +, +# This axis of the build matrix represents the versions of Java with, +# which Elasticsearch will be built. Valid Java versions are 'java', +# or 'openjdk' followed by the major release number., +, +++ b/.ci/matrix-build-javas.yml, +# This file is used as part of a matrix build in Jenkins where the, +# values below are included as an axis of the matrix., +, +# This axis of the build matrix
[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, + for (Map.Entry<String, Object> setting : node.config.settings) {, + if (setting.value == null) {, + esConfig.remove(setting.key), + } else {, + esConfig.put(setting.key, setting.value), + }, + }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, + for (Map.Entry<String, Object> setting : node.config.settings) {, + if (setting.value == null) {, + esConfig.remove(setting.key), + } else {, + esConfig.put(setting.key, setting.value), + }, + }, +++ b/distribution/archives/integ-test-zip/build.gradle, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/server/src/main/java/org/elasticsearch/common/time/CompoundDateTimeFormatter.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/x-pack/plugin/ccr/qa/restart/build.gradle, +import org.elasticsearch.gradle.test.RestIntegTestTask, +, +apply plugin: 'elasticsearch.standalone-test', +, +dependencies {, + testCompile project(':x-pack:plugin:ccr:qa'), +}, +, +task leaderClusterTest(type: RestIntegTestTask) {, + mustRunAfter(precommit), +}, +, +leaderClusterTestCluster {, + numNodes = 1, + clusterName = 'leader-cluster', + setting 'xpack.license.self_generated.type', 'trial', + setting 'node.name', 'leader', +}, +, +leaderClusterTestRunner {, + systemProperty 'tests.target_cluster', 'leader', +}, +, +task followClusterTest(type: RestIntegTestTask) {}, +, +followClusterTestCluster {, + dependsOn leaderClusterTestRunner, + numNodes = 1, + clusterName = 'follow-cluster', + setting 'xpack.monitoring.collection.enabled', 'true', + setting 'xpack.license.self_generated.type', 'trial', + setting 'cluster.remote.leader_cluster.seeds', "\"${-> leaderClusterTest.nodes.get(0).transportUri()}\"", + setting 'node.name', 'follow', +}, +, +followClusterTestRunner {, + systemProperty 'tests.target_cluster', 'follow', + systemProperty 'tests.leader_host', "${->
[+++ b/docs/reference/modules/transport.asciidoc, +|`transport.tcp.compress` |Set to `true` to enable compression (LZF), +++ b/docs/reference/modules/transport.asciidoc, +|`transport.tcp.compress` |Set to `true` to enable compression (LZF), +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/docs/reference/modules/transport.asciidoc, +|`transport.tcp.compress` |Set to `true` to enable compression (LZF), +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/docs/reference/modules/transport.asciidoc, +|`transport.tcp.compress` |Set to `true` to enable compression (LZF), +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++ b/docs/reference/modules/transport.asciidoc, +|`transport.tcp.compress` |Set to `true` to enable compression (LZF), +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/put-policy.asciidoc, +++
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/server/src/main/java/org/elasticsearch/ingest/IngestService.java, + private final Map<String, Processor.Factory> processorFactories;, + // Ideally this should be in IngestMetadata class, but we don't have the processor factories around there., + // We know of all the processor factories when a node with all its plugin have been initialized. Also some, + // processor factories rely on other node services. Custom metadata is statically registered when classes, + // are loaded, so in the cluster state we just save the pipeline config and here we keep the actual pipelines around., + private volatile Map<String, Pipeline> pipelines = new HashMap<>();, + private final ThreadPool
[+++ b/build.gradle, + configurations.all {, +++ b/build.gradle, + configurations.all {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java, + * Updates cluster wide specific settings using the Cluster Update Settings API, + * Asynchronously updates cluster wide specific settings using the Cluster Update Settings API, +++ b/build.gradle, + configurations.all {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java, + * Updates cluster wide specific settings using the Cluster Update Settings API, + * Asynchronously updates cluster wide specific settings using the Cluster Update Settings API, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.admin.indices.rollover.RolloverRequest;, +import org.elasticsearch.action.admin.indices.rollover.RolloverResponse;, + * Deletes an index using the Delete Index API, + * Asynchronously deletes an index using the
[+++ b/server/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import static org.elasticsearch.index.seqno.SequenceNumbers.UNASSIGNED_PRIMARY_TERM;, +import static org.elasticsearch.index.seqno.SequenceNumbers.UNASSIGNED_SEQ_NO;, + seqNo = UNASSIGNED_SEQ_NO;, + primaryTerm = UNASSIGNED_PRIMARY_TERM;, + protected Long seqNo = UNASSIGNED_SEQ_NO;, + protected Long primaryTerm = UNASSIGNED_PRIMARY_TERM;, +++ b/server/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import static org.elasticsearch.index.seqno.SequenceNumbers.UNASSIGNED_PRIMARY_TERM;, +import static org.elasticsearch.index.seqno.SequenceNumbers.UNASSIGNED_SEQ_NO;, + seqNo = UNASSIGNED_SEQ_NO;, + primaryTerm = UNASSIGNED_PRIMARY_TERM;, + protected Long seqNo = UNASSIGNED_SEQ_NO;, + protected Long primaryTerm = UNASSIGNED_PRIMARY_TERM;, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +import static org.elasticsearch.index.seqno.SequenceNumbers.UNASSIGNED_PRIMARY_TERM;, + long ifPrimaryTerm = UNASSIGNED_PRIMARY_TERM;, +++ b/server/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import static org.elasticsearch.index.seqno.SequenceNumbers.UNASSIGNED_PRIMARY_TERM;, +import static org.elasticsearch.index.seqno.SequenceNumbers.UNASSIGNED_SEQ_NO;, + seqNo = UNASSIGNED_SEQ_NO;, + primaryTerm = UNASSIGNED_PRIMARY_TERM;, + protected Long seqNo = UNASSIGNED_SEQ_NO;, + protected Long primaryTerm = UNASSIGNED_PRIMARY_TERM;, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +import static org.elasticsearch.index.seqno.SequenceNumbers.UNASSIGNED_PRIMARY_TERM;,
[+++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/20_empty_bucket.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/20_empty_bucket.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/30_single_value_field.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/20_empty_bucket.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/30_single_value_field.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/40_multi_value_field.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/20_empty_bucket.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/30_single_value_field.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/40_multi_value_field.yml, + include_type_name: false, +++ b/modules/analysis-common/src/test/resources/rest-api-spec/test/indices.analyze/10_analyze.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/20_empty_bucket.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/30_single_value_field.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/40_multi_value_field.yml, + include_type_name: false, +++ b/modules/analysis-common/src/test/resources/rest-api-spec/test/indices.analyze/10_analyze.yml, + include_type_name: false, +++ b/modules/analysis-common/src/test/resources/rest-api-spec/test/indices/validate_query/10_synonyms.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/20_empty_bucket.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/30_single_value_field.yml, + include_type_name: false, +++ b/modules/aggs-matrix-stats/src/test/resources/rest-api-spec/test/stats/40_multi_value_field.yml, + include_type_name: false, +++ b/modules/analysis-common/src/test/resources/rest-api-spec/test/indices.analyze/10_analyze.yml, + include_type_name: false, +++ b/modules/analysis-common/src/test/resources/rest-api-spec/test/indices/validate_query/10_synonyms.yml, + include_type_name:
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasChildQueryBuilderTests.java, + protected Settings createTestIndexSettings() {, + .put(super.createTestIndexSettings()), +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasChildQueryBuilderTests.java, + protected Settings createTestIndexSettings() {, + .put(super.createTestIndexSettings()), +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasParentQueryBuilderTests.java, + protected Settings createTestIndexSettings() {, + .put(super.createTestIndexSettings()), +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasChildQueryBuilderTests.java, + protected Settings createTestIndexSettings() {, + .put(super.createTestIndexSettings()), +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasParentQueryBuilderTests.java, + protected Settings createTestIndexSettings() {, + .put(super.createTestIndexSettings()), +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/ParentIdQueryBuilderTests.java, + protected Settings createTestIndexSettings() {, + .put(super.createTestIndexSettings()), +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasChildQueryBuilderTests.java, + protected Settings createTestIndexSettings() {, + .put(super.createTestIndexSettings()), +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasParentQueryBuilderTests.java, + protected Settings createTestIndexSettings() {, + .put(super.createTestIndexSettings()), +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/ParentIdQueryBuilderTests.java, + protected Settings createTestIndexSettings() {, + .put(super.createTestIndexSettings()), +++ b/server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java, + indexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_0_0_alpha1));, +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasChildQueryBuilderTests.java, + protected Settings createTestIndexSettings() {, + .put(super.createTestIndexSettings()), +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasParentQueryBuilderTests.java, + protected Settings
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/docs/reference/rest-api/info.asciidoc, +++ b/docs/reference/rest-api/info.asciidoc, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java, +import org.apache.logging.log4j.core.Appender;, +import org.apache.logging.log4j.core.LogEvent;, +import org.apache.logging.log4j.core.appender.AbstractAppender;, +import org.apache.logging.log4j.core.layout.PatternLayout;, + private static final Collection<String> nettyLoggedLeaks = new ArrayList<>();, +, + // Enable Netty leak detection and monitor logger for logged leak errors, + System.setProperty("io.netty.leakDetection.level", "advanced");, + String leakLoggerName = "io.netty.util.ResourceLeakDetector";, + Logger leakLogger = LogManager.getLogger(leakLoggerName);, + Appender leakAppender = new AbstractAppender(leakLoggerName, null,, + PatternLayout.newBuilder().withPattern("%m").build()) {, + @Override, + public void append(LogEvent event) {, + String message = event.getMessage().getFormattedMessage();, + if (Level.ERROR.equals(event.getLevel()) && message.contains("LEAK:")) {, + synchronized (nettyLoggedLeaks) {, + nettyLoggedLeaks.add(message);, + }, + }, + }, + };, + leakAppender.start();, + Loggers.addAppender(leakLogger, leakAppender);, +,
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RollupClient.java, +import org.elasticsearch.client.core.AcknowledgedResponse;, + public AcknowledgedResponse putRollupJob(PutRollupJobRequest request, RequestOptions options) throws IOException {, + AcknowledgedResponse::fromXContent,, + public void putRollupJobAsync(PutRollupJobRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, + AcknowledgedResponse::fromXContent,, + public AcknowledgedResponse deleteRollupJob(DeleteRollupJobRequest request, RequestOptions options) throws IOException {, + AcknowledgedResponse::fromXContent,, + ActionListener<AcknowledgedResponse> listener) {, + AcknowledgedResponse::fromXContent,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RollupClient.java, +import org.elasticsearch.client.core.AcknowledgedResponse;, + public AcknowledgedResponse putRollupJob(PutRollupJobRequest request, RequestOptions options) throws IOException {, + AcknowledgedResponse::fromXContent,, + public void putRollupJobAsync(PutRollupJobRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, + AcknowledgedResponse::fromXContent,, + public AcknowledgedResponse deleteRollupJob(DeleteRollupJobRequest request, RequestOptions options) throws IOException {, + AcknowledgedResponse::fromXContent,, + ActionListener<AcknowledgedResponse> listener) {, + AcknowledgedResponse::fromXContent,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/AcknowledgedResponse.java, +public class AcknowledgedResponse {, +++
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/server/src/main/java/org/elasticsearch/action/search/ExpandSearchPhase.java, + if (options.getFetchSourceContext().includes().length == 0 &&, + options.getFetchSourceContext().excludes().length == 0) {, +++ b/server/src/main/java/org/elasticsearch/action/search/ExpandSearchPhase.java, + if (options.getFetchSourceContext().includes().length == 0 &&, + options.getFetchSourceContext().excludes().length == 0) {, +++ b/server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java, + assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().fetchSource() == false));, + assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().includes().length == 0));, + assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().excludes().length == 0));, + .fetchSource(false)]
[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsAggregator.java, + double variance = (sumOfSqrs.get(owningBucketOrd) - ((sum * sum) / count)) / count;, + return variance < 0 ? 0 : variance;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsAggregator.java, + double variance = (sumOfSqrs.get(owningBucketOrd) - ((sum * sum) / count)) / count;, + return variance < 0 ? 0 : variance;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java, + double variance = (sumOfSqrs - ((sum * sum) / count)) / count;, + return variance < 0 ? 0 : variance;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsAggregator.java, + double variance = (sumOfSqrs.get(owningBucketOrd) - ((sum * sum) / count)) / count;, + return variance < 0 ? 0 : variance;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java, +
[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, + if (indexMd.requireFilters().match(node.node()) == false) {, + if (indexMd.includeFilters().match(node.node()) == false) {, + if (clusterRequireFilters.match(node.node()) == false) {, + if (clusterIncludeFilters.match(node.node()) == false) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, + if (indexMd.requireFilters().match(node.node()) == false) {, + if (indexMd.includeFilters().match(node.node()) == false) {, + if (clusterRequireFilters.match(node.node()) == false) {, + if (clusterIncludeFilters.match(node.node()) == false) {, +++ b/server/src/test/java/org/elasticsearch/cluster/routing/allocation/FilterRoutingTests.java, +import org.elasticsearch.cluster.node.DiscoveryNodes.Builder;, +import java.util.HashMap;, +import java.util.Map;, +import static java.util.Collections.emptyMap;, +import static org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_EXCLUDE_GROUP_SETTING;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;, +import static org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider.CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING;, +import static org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider.CLUSTER_ROUTING_INCLUDE_GROUP_SETTING;, +import static org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider.CLUSTER_ROUTING_REQUIRE_GROUP_SETTING;, +import static org.elasticsearch.cluster.routing.allocation.decider.ThrottlingAllocationDecider.CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES_SETTING;, + public void testClusterIncludeFiltersSingleAttribute() {, +
[+++ b/.ci/matrix-build-javas.yml, +# This file is used as part of a matrix build in Jenkins where the, +# values below are included as an axis of the matrix., +, +# This axis of the build matrix represents the versions of Java with, +# which Elasticsearch will be built. Valid Java versions are 'java', +# or 'openjdk' followed by the major release number., +, +++ b/.ci/matrix-build-javas.yml, +# This file is used as part of a matrix build in Jenkins where the, +# values below are included as an axis of the matrix., +, +# This axis of the build matrix
[+++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/IndexFollowingIT.java, + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/38949")]
[+++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuTokenizerFactory.java, + final BreakIterator breakers[] = new BreakIterator[UScript.CODE_LIMIT];, + private BreakIterator parseRules(String filename, Environment env) throws IOException {, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuTokenizerFactory.java, + final BreakIterator breakers[] = new BreakIterator[UScript.CODE_LIMIT];, + private BreakIterator parseRules(String filename, Environment env) throws IOException {, +++ b/server/src/main/java/org/elasticsearch/Version.java, + // The below version is missing from the 7.3 JAR, + private static final org.apache.lucene.util.Version LUCENE_7_2_1 = org.apache.lucene.util.Version.fromBits(7, 2, 1);, + public static final Version V_6_2_0 = new Version(V_6_2_0_ID, LUCENE_7_2_1);, + public static final Version V_6_2_1 = new Version(V_6_2_1_ID, LUCENE_7_2_1);, + public static final Version V_6_2_2 = new Version(V_6_2_2_ID, LUCENE_7_2_1);, + public static final Version V_6_2_3 = new
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/IndexFollowingIT.java, + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/39308")]
[+++ b/modules/repository-url/src/main/java/org/elasticsearch/common/blobstore/url/URLBlobContainer.java, + public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +++ b/modules/repository-url/src/main/java/org/elasticsearch/common/blobstore/url/URLBlobContainer.java, + public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageFixture.java, + final String ifNoneMatch = request.getHeader("If-None-Match");, + if ("*".equals(ifNoneMatch)) {, + } else {, + destContainer.objects.put(destBlobName, request.getBody());, + }, +++ b/modules/repository-url/src/main/java/org/elasticsearch/common/blobstore/url/URLBlobContainer.java, + public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageFixture.java, + final String ifNoneMatch = request.getHeader("If-None-Match");, + if ("*".equals(ifNoneMatch)) {, + } else {, + destContainer.objects.put(destBlobName, request.getBody());, + }, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, + public void writeBlob(String blobName, InputStream inputStream,
[+++ b/docs/CHANGELOG.asciidoc, +<<remove-suggest-metric, Removed `suggest` metric on stats APIs>> ({pull}29635[#29635]), +, +++ b/docs/CHANGELOG.asciidoc, +<<remove-suggest-metric, Removed `suggest` metric on stats APIs>> ({pull}29635[#29635]), +, +++ b/docs/reference/migration/migrate_7_0/api.asciidoc, +, +[[remove-suggest-metric]], +==== Remove support for `suggest` metric/index metric in indices stats and nodes stats APIs, +, +Previously, `suggest` stats were folded into `search` stats. Support for the, +`suggest` metric on the indices stats and nodes stats APIs remained for, +backwards compatibility. Backwards support for the `suggest` metric was, +deprecated in 6.3.0 and now removed in 7.0.0., +++ b/docs/CHANGELOG.asciidoc, +<<remove-suggest-metric, Removed `suggest` metric on stats APIs>> ({pull}29635[#29635]), +, +++ b/docs/reference/migration/migrate_7_0/api.asciidoc, +, +[[remove-suggest-metric]], +==== Remove support
[+++ b/.ci/java-versions.properties, +++ b/.ci/java-versions.properties, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, + <suppress files="modules[/\\]lang-painless[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]painless[/\\]antlr[/\\]PainlessLexer\.java" checks="." />, + <suppress files="modules[/\\]lang-painless[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]painless[/\\]antlr[/\\]PainlessParser(|BaseVisitor|Visitor)\.java" checks="." />, + <suppress files="modules[/\\]reindex[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]client[/\\]documentation[/\\]ReindexDocumentationIT.java" id="SnippetLength" />, +++ b/.ci/java-versions.properties, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, + <suppress files="modules[/\\]lang-painless[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]painless[/\\]antlr[/\\]PainlessLexer\.java" checks="." />, + <suppress files="modules[/\\]lang-painless[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]painless[/\\]antlr[/\\]PainlessParser(|BaseVisitor|Visitor)\.java" checks="." />, + <suppress files="modules[/\\]reindex[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]client[/\\]documentation[/\\]ReindexDocumentationIT.java" id="SnippetLength" />, +++ b/client/rest-high-level/build.gradle, +File nodeCert = file("./testnode.crt"), +File nodeTrustStore = file("./testnode.jks"), + systemProperty 'es.scripting.update.ctx_in_params', 'false', + // Truststore settings are not used since TLS is not enabled. Included for testing the get certificates API, + setting 'xpack.ssl.certificate_authorities', 'testnode.crt', + setting 'xpack.security.transport.ssl.truststore.path', 'testnode.jks', + setting 'xpack.security.transport.ssl.truststore.password', 'testnode', + extraConfigFile nodeCert.name, nodeCert, + extraConfigFile nodeTrustStore.name, nodeTrustStore, +++ b/.ci/java-versions.properties, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, + <suppress
[+++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ /dev/null, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/docs/java-api/docs/update-by-query.asciidoc, +You can also perform these operations on multiple indices at once, similar to the search API:, +++ b/docs/java-api/docs/update-by-query.asciidoc, +You can also perform these operations on multiple indices at once, similar to the search API:, +++ b/modules/reindex/src/test/java/org/elasticsearch/client/documentation/ReindexDocumentationIT.java, + updateByQuery.source("foo", "bar");, +++ b/docs/java-api/docs/update-by-query.asciidoc, +You can also perform these operations on multiple indices at once, similar to the search API:, +++ b/modules/reindex/src/test/java/org/elasticsearch/client/documentation/ReindexDocumentationIT.java, + updateByQuery.source("foo", "bar");, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RestDeleteByQueryActionTests.java, +import org.elasticsearch.rest.RestRequest;, +import org.elasticsearch.rest.action.search.RestSearchAction;, +import org.elasticsearch.test.rest.RestActionTestCase;, +import org.junit.Before;, +public class RestDeleteByQueryActionTests extends RestActionTestCase {, + private RestDeleteByQueryAction action;, +, + @Before, + public void setUpAction() {, + action = new RestDeleteByQueryAction(Settings.EMPTY, controller());, +
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java, + this.splitQueriesOnWhitespace = ref.splitQueriesOnWhitespace;, +++ b/server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java, + this.splitQueriesOnWhitespace = ref.splitQueriesOnWhitespace;, +++ b/server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldTypeTests.java, + public void modify(MappedFieldType type) {, + ((KeywordFieldType) type).setNormalizer(Lucene.KEYWORD_ANALYZER);, + }, + });, + addModifier(new Modifier("split_queries_on_whitespace", true) {, + @Override, + public void modify(MappedFieldType type) {, + KeywordFieldType keywordType = (KeywordFieldType) type;, + keywordType.setSplitQueriesOnWhitespace(!keywordType.splitQueriesOnWhitespace());]
[+++ b/plugin/src/main/java/org/elasticsearch/xpack/sql/analysis/catalog/EsCatalog.java, + // NOCOMMIT verify that this works if the index isn't on the node, +++ b/plugin/src/main/java/org/elasticsearch/xpack/sql/analysis/catalog/EsCatalog.java, + // NOCOMMIT verify that this works if the index isn't on the node, +++ b/plugin/src/main/java/org/elasticsearch/xpack/sql/plugin/jdbc/server/JdbcServerProtoUtils.java, +import org.joda.time.ReadableInstant;, +, +import java.io.DataOutput;, +import java.io.DataOutputStream;, +import java.io.IOException;, +import java.io.PrintWriter;, +import java.io.StringWriter;, +import java.sql.Types;, +import java.util.concurrent.TimeoutException;, + if (jdbcTypes[i] == Types.TIMESTAMP && value instanceof ReadableInstant) {, + // NOCOMMIT feels like a hack that'd be better cleaned up another way., + value = ((ReadableInstant) value).getMillis();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/sql/analysis/catalog/EsCatalog.java, + // NOCOMMIT verify that this works if the index isn't on the node, +++ b/plugin/src/main/java/org/elasticsearch/xpack/sql/plugin/jdbc/server/JdbcServerProtoUtils.java, +import
[+++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, + // Delete temporary index files first, as we might otherwise fail in the next step creating the new index file if an earlier, + // attempt to write an index file with this generation failed mid-way after creating the temporary file., + for (final String blobName : blobs.keySet()) {, + if (indexShardSnapshotsFormat.isTempBlobName(blobName)) {, + try {, + blobContainer.deleteBlobIgnoringIfNotExists(blobName);, + } catch (IOException e) {, + logger.warn(() -> new ParameterizedMessage("[{}][{}] failed to delete index blob [{}] during finalization",, + snapshotId, shardId, blobName), e);, + throw e;, + }, + }, + }, +, + if (blobName.startsWith(SNAPSHOT_INDEX_PREFIX)) {,
[+++ b/docs/java-rest/high-level/licensing/put-license.asciidoc, +<5> Otherwise we can see the acknowledge messages in `acknowledgeHeader()` and check, +component-specific messages in `acknowledgeMessages()`., +++ b/docs/java-rest/high-level/licensing/put-license.asciidoc, +<5> Otherwise we can see the acknowledge messages in `acknowledgeHeader()` and check, +component-specific messages in `acknowledgeMessages()`., +++ b/docs/reference/rest-api/info.asciidoc, +++ b/docs/java-rest/high-level/licensing/put-license.asciidoc, +<5> Otherwise we can see the acknowledge messages in `acknowledgeHeader()` and check, +component-specific messages in `acknowledgeMessages()`., +++ b/docs/reference/rest-api/info.asciidoc, +++ /dev/null, +++ b/docs/java-rest/high-level/licensing/put-license.asciidoc, +<5> Otherwise we can see the acknowledge messages in `acknowledgeHeader()` and check, +component-specific messages in `acknowledgeMessages()`., +++ b/docs/reference/rest-api/info.asciidoc, +++ /dev/null, +++ /dev/null, +++ b/docs/java-rest/high-level/licensing/put-license.asciidoc, +<5> Otherwise we can see the acknowledge messages in `acknowledgeHeader()` and check, +component-specific
[+++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, + public static IndexingStrategy skipDueToVersionConflict(, + public static DeletionStrategy skipDueToVersionConflict(, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, + public static IndexingStrategy skipDueToVersionConflict(, + public static DeletionStrategy skipDueToVersionConflict(, +++ b/test/framework/src/main/java/org/elasticsearch/index/engine/EngineTestCase.java, + if (primaryTermDocValues.advanceExact(i) == false) {, + // We have to skip non-root docs because its _id field is not stored (indexed only)., + continue;, + }, + final long primaryTerm = primaryTermDocValues.longValue();, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, + public static IndexingStrategy skipDueToVersionConflict(, + public static DeletionStrategy skipDueToVersionConflict(, +++ b/test/framework/src/main/java/org/elasticsearch/index/engine/EngineTestCase.java, + if (primaryTermDocValues.advanceExact(i) == false) {, + // We have to skip non-root docs because its _id field is not stored (indexed only)., + continue;, +
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, + this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, + this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java, + public RecoveriesCollection(Logger logger, ThreadPool threadPool) {, + RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, + this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java, + public RecoveriesCollection(Logger logger, ThreadPool threadPool) {, + RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, + public RecoveryTarget(IndexShard indexShard, DiscoveryNode sourceNode, PeerRecoveryTargetService.RecoveryListener listener) {, + return new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, + this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java, + public RecoveriesCollection(Logger logger, ThreadPool threadPool) {, + RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode,
[+++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/TokenServiceTests.java, + final int fastForwardAmount = randomIntBetween(1, Math.toIntExact(defaultExpiration.getSeconds()) - 5);]
[+++ b/core/src/main/java/org/apache/lucene/search/grouping/CollapsingDocValuesSource.java, + CollapsingDocValuesSource(String field) {, + Numeric(String field) {, + Keyword(String field) {, +++ b/core/src/main/java/org/apache/lucene/search/grouping/CollapsingDocValuesSource.java, + CollapsingDocValuesSource(String field) {, + Numeric(String field) {, + Keyword(String field) {, +++ b/core/src/main/java/org/apache/lucene/search/grouping/CollapsingTopDocsCollector.java, + int topN, boolean trackMaxScore) {, + * {@link CollapseTopFieldDocs}. The collapsing needs only one pass so we can get the final top docs at the end, + int topN, boolean trackMaxScore) {, + int topN, boolean trackMaxScore) {, +++ b/core/src/main/java/org/apache/lucene/search/grouping/CollapsingDocValuesSource.java, + CollapsingDocValuesSource(String field) {, + Numeric(String field) {, + Keyword(String field) {, +++ b/core/src/main/java/org/apache/lucene/search/grouping/CollapsingTopDocsCollector.java, + int topN, boolean trackMaxScore) {, + * {@link CollapseTopFieldDocs}. The collapsing needs only
[+++ b/.gitignore, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/docs/en/index.asciidoc, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/docs/en/index.asciidoc, +++ b/docs/en/ml/getting-started-multi.asciidoc, +.. For the **Key Fields
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IngestClient.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,,
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/.ci/java-versions.properties, +# This file is used with all of the non-matrix tests in Jenkins., +, +# This .properties file defines the versions of Java with which to, +# build and test Elasticsearch for this branch. Valid Java versions, +# are 'java' or 'openjdk' followed by the major release number., +, +ES_BUILD_JAVA=java10, +ES_RUNTIME_JAVA=java8, +++ b/.ci/java-versions.properties, +# This file is used with all of the non-matrix tests in Jenkins., +, +# This .properties file defines the versions of Java with which to, +# build and test Elasticsearch for this branch. Valid Java versions, +# are 'java' or 'openjdk' followed by
[+++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.core.internal.io.IOUtils;, + private static final Predicate<DiscoveryNode> DEFAULT_NODE_PREDICATE = (node) -> Version.CURRENT.isCompatible(node.getVersion()), + && (node.isMasterNode() == false || node.isDataNode() || node.isIngestNode());, +, + getNodePredicate(settings));, + static Predicate<DiscoveryNode> getNodePredicate(Settings settings) {, + if (REMOTE_NODE_ATTRIBUTE.exists(settings)) {, + // nodes can be tagged with node.attr.remote_gateway: true to allow a node to be a gateway node for cross cluster search, + String attribute = REMOTE_NODE_ATTRIBUTE.get(settings);, + return DEFAULT_NODE_PREDICATE.and((node) -> Booleans.parseBoolean(node.getAttributes().getOrDefault(attribute, "false")));, + }, + return DEFAULT_NODE_PREDICATE;, + }, +, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.core.internal.io.IOUtils;, + private static final Predicate<DiscoveryNode> DEFAULT_NODE_PREDICATE = (node) -> Version.CURRENT.isCompatible(node.getVersion()), + && (node.isMasterNode() ==
[+++ b/buildSrc/version.properties, +bundled_jdk = 12+33, +++ b/buildSrc/version.properties, +bundled_jdk = 12+33, +++ b/distribution/build.gradle, +Pattern JDK_VERSION = Pattern.compile("(\\d+)(\\.\\d+\\.\\d+)?\\+(\\d+)"), +String jdkVersion = jdkVersionMatcher.group(1) + (jdkVersionMatcher.group(2) != null ? (jdkVersionMatcher.group(2)) : ""), +String jdkBuild = jdkVersionMatcher.group(3), +++ b/buildSrc/version.properties, +bundled_jdk = 12+33, +++ b/distribution/build.gradle, +Pattern JDK_VERSION = Pattern.compile("(\\d+)(\\.\\d+\\.\\d+)?\\+(\\d+)"), +String jdkVersion = jdkVersionMatcher.group(1) + (jdkVersionMatcher.group(2) != null ? (jdkVersionMatcher.group(2)) : ""), +String jdkBuild = jdkVersionMatcher.group(3), +++ b/distribution/docker/build.gradle, + 'jdkUrl' : 'https://download.java.net/java/GA/jdk12/GPL/openjdk-12_linux-x64_bin.tar.gz',, + 'jdkVersion' : '12',]
[+++ b/docs/reference/cat/thread_pool.asciidoc, +// TESTRESPONSE[s/\.\.\./(node-0 .+ 0 0 0\n)+/], +++ b/docs/reference/cat/thread_pool.asciidoc, +// TESTRESPONSE[s/\.\.\./(node-0 .+ 0 0 0\n)+/], +++ b/docs/reference/indices/flush.asciidoc, + "max_unsafe_auto_id_timestamp" : "-1", +++ b/docs/reference/cat/thread_pool.asciidoc, +// TESTRESPONSE[s/\.\.\./(node-0 .+ 0 0 0\n)+/], +++ b/docs/reference/indices/flush.asciidoc, + "max_unsafe_auto_id_timestamp" : "-1", +++ b/docs/reference/ingest/ingest-node.asciidoc, +[[dot-expand-processor]], +=== Dot Expander Processor, +, +Expands a field with dots into an object field. This processor allows fields, +with dots in the name to be accessible by other processors in the pipeline., +Otherwise these <<accessing-data-in-pipelines,fields>> can't be accessed by any processor., +, +[[dot-expender-options]], +.Dot Expand Options, +[options="header"], +|======, +| Name | Required | Default | Description, +| `field` | yes
[+++ b/docs/painless/painless-contexts.asciidoc, +:es_version: https://www.elastic.co/guide/en/elasticsearch/reference/master, +:xp_version: https://www.elastic.co/guide/en/x-pack/current, +, + | {es_version}/docs-update.html[Elasticsearch Documentation], + | {es_version}/docs-update-by-query.html[Elasticsearch Documentation], + | {es_version}/docs-reindex.html[Elasticsearch Documentation], + | {es_version}/search-request-sort.html[Elasticsearch Documentation], + | {es_version}/index-modules-similarity.html[Elasticsearch Documentation], +| Weight | <<painless-similarity-context, Painless Documentation>>, + | {es_version}/index-modules-similarity.html[Elasticsearch Documentation], + | {es_version}/query-dsl-function-score-query.html[Elasticsearch Documentation], + | {es_version}/search-request-script-fields.html[Elasticsearch Documentation], + | {es_version}/query-dsl-script-query.html[Elasticsearch Documentation], + | {es_version}/query-dsl-terms-set-query.html[Elasticsearch Documentation], + | {es_version}/search-aggregations-metrics-scripted-metric-aggregation.html[Elasticsearch Documentation], + | {es_version}/search-aggregations-metrics-scripted-metric-aggregation.html[Elasticsearch Documentation], + | {es_version}/search-aggregations-metrics-scripted-metric-aggregation.html[Elasticsearch Documentation], + | {es_version}/search-aggregations-metrics-scripted-metric-aggregation.html[Elasticsearch Documentation], + | {es_version}/search-aggregations-pipeline-bucket-script-aggregation.html[Elasticsearch Documentation], + | {es_version}/script-processor.html[Elasticsearch Documentation], + | {xp_version}/condition-script.html[Elasticsearch Documentation], + | {xp_version}/transform-script.html[Elasticsearch Documentation], +++ b/docs/painless/painless-contexts.asciidoc, +:es_version: https://www.elastic.co/guide/en/elasticsearch/reference/master, +:xp_version: https://www.elastic.co/guide/en/x-pack/current, +, + | {es_version}/docs-update.html[Elasticsearch Documentation], + | {es_version}/docs-update-by-query.html[Elasticsearch
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed
[+++ b/docs/reference/query-dsl/range-query.asciidoc, +Note that if the date misses some of the year, month and day coordinates, the, +missing parts are filled with the start of, +https://en.wikipedia.org/wiki/Unix_time[unix time], which is January 1st, 1970., +This means, that when e.g. specifying `dd` as the format, a value like `"gte" : 10`, +will translate to `1970-01-10T00:00:00.000Z`., +, +++ b/docs/reference/query-dsl/range-query.asciidoc, +Note that if the date misses some of the year, month and day coordinates, the, +missing parts are filled with the start of, +https://en.wikipedia.org/wiki/Unix_time[unix time], which is January 1st, 1970., +This means, that when e.g. specifying `dd` as the format, a value like `"gte"
[+++ b/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/XContentParserTests.java, + numberOfTokens += generateRandomObject(builder, 0);, + int tokensToSkip = randomInt(numberOfTokens);]
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/TESTING.asciidoc, +, +, +, +, +, +, +++ b/TESTING.asciidoc, +, +, +, +, +, +, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/TESTING.asciidoc, +, +, +, +, +, +, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/buildSrc/src/main/resources/checkstyle.xml, +++ b/TESTING.asciidoc, +, +, +, +, +, +, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/buildSrc/src/main/resources/checkstyle.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/TESTING.asciidoc, +, +,
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.protocol.xpack.ml.CloseJobRequest;, +import org.elasticsearch.protocol.xpack.ml.DeleteJobRequest;, +import org.elasticsearch.protocol.xpack.ml.GetJobRequest;, +import org.elasticsearch.protocol.xpack.ml.GetBucketsRequest;, +import org.elasticsearch.protocol.xpack.ml.OpenJobRequest;, +import org.elasticsearch.protocol.xpack.ml.PutJobRequest;, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.protocol.xpack.ml.CloseJobRequest;, +import org.elasticsearch.protocol.xpack.ml.DeleteJobRequest;, +import org.elasticsearch.protocol.xpack.ml.GetJobRequest;, +import org.elasticsearch.protocol.xpack.ml.GetBucketsRequest;, +import org.elasticsearch.protocol.xpack.ml.OpenJobRequest;, +import org.elasticsearch.protocol.xpack.ml.PutJobRequest;, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MachineLearningClient.java, +import org.elasticsearch.protocol.xpack.ml.CloseJobRequest;, +import org.elasticsearch.protocol.xpack.ml.CloseJobResponse;, +import org.elasticsearch.protocol.xpack.ml.DeleteJobRequest;, +import org.elasticsearch.protocol.xpack.ml.DeleteJobResponse;, +import org.elasticsearch.protocol.xpack.ml.GetBucketsRequest;, +import org.elasticsearch.protocol.xpack.ml.GetBucketsResponse;, +import org.elasticsearch.protocol.xpack.ml.GetJobRequest;, +import org.elasticsearch.protocol.xpack.ml.GetJobResponse;, +import org.elasticsearch.protocol.xpack.ml.OpenJobRequest;, +import org.elasticsearch.protocol.xpack.ml.OpenJobResponse;, +import org.elasticsearch.protocol.xpack.ml.PutJobRequest;, +import org.elasticsearch.protocol.xpack.ml.PutJobResponse;, + * @param request The PutJobRequest containing the {@link org.elasticsearch.protocol.xpack.ml.job.config.Job} settings, + * @return PutJobResponse with enclosed {@link org.elasticsearch.protocol.xpack.ml.job.config.Job} object, + * @param request The request containing the {@link org.elasticsearch.protocol.xpack.ml.job.config.Job} settings, + * the {@link org.elasticsearch.protocol.xpack.ml.job.config.Job} objects and the number of jobs found, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java,
[+++ b/qa/saml-idp-tests/build.gradle, +apply plugin: 'elasticsearch.standalone-rest-test', +apply plugin: 'elasticsearch.rest-test', +String outputDir = "generated-resources/${project.name}", +task copyIdpCertificate(type: Copy) {, + dependsOn idpFixture, + from idpFixtureProject.file('src/main/resources/provision/generated/ca_server.pem');, + into outputDir, +}, + project.sourceSets.test.output.dir(outputDir, builtBy: copyIdpCertificate), + integTestCluster.dependsOn idpFixture, copyIdpCertificate, + integTest.finalizedBy idpFixtureProject.halt, + integTest.enabled = false, +integTestCluster {, + plugin ':x-pack-elasticsearch:plugin', +, + setting 'xpack.security.http.ssl.enabled', 'false', + setting 'xpack.security.authc.token.enabled', 'true', + setting 'xpack.security.authc.realms.file.type', 'file', + setting 'xpack.security.authc.realms.file.order', '0', + setting 'xpack.security.authc.realms.shibboleth.type', 'saml', + setting 'xpack.security.authc.realms.shibboleth.order', '1', + setting 'xpack.security.authc.realms.shibboleth.idp.entity_id', 'https://test.shibboleth.elastic.local/', + setting 'xpack.security.authc.realms.shibboleth.idp.metadata.path', 'idp-metadata.xml', + setting 'xpack.security.authc.realms.shibboleth.sp.entity_id', 'http://mock.http.elastic.local/', + // The port in the ACS URL is fake - the test will bind the
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/build.gradle, +, +import org.apache.tools.ant.taskdefs.condition.Os, +, + // work arround https://github.com/gradle/gradle/issues/6582 , + tasks.eclipseProject.mustRunAfter tasks.cleanEclipseProject, + tasks.matching { it.name == 'eclipseClasspath' }.all {, + it.mustRunAfter { tasks.cleanEclipseClasspath }, + }, + tasks.matching { it.name == 'eclipseJdt' }.all {, + it.mustRunAfter { tasks.cleanEclipseJdt }, + }, + tasks.copyEclipseSettings.mustRunAfter tasks.wipeEclipseSettings, +++ b/build.gradle, +, +import org.apache.tools.ant.taskdefs.condition.Os, +, + // work arround https://github.com/gradle/gradle/issues/6582 , + tasks.eclipseProject.mustRunAfter tasks.cleanEclipseProject, + tasks.matching { it.name == 'eclipseClasspath' }.all {, + it.mustRunAfter { tasks.cleanEclipseClasspath }, + }, + tasks.matching { it.name == 'eclipseJdt' }.all {, + it.mustRunAfter { tasks.cleanEclipseJdt }, + }, + tasks.copyEclipseSettings.mustRunAfter tasks.wipeEclipseSettings, +++ b/buildSrc/build.gradle, +++
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ccr/AutoFollowStats.java, + static final ConstructingObjectParser<AutoFollowStats, Void> STATS_PARSER = new ConstructingObjectParser<>(, + "auto_follow_stats",, + true,, + true,, + true,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ccr/AutoFollowStats.java, + static final ConstructingObjectParser<AutoFollowStats, Void> STATS_PARSER = new ConstructingObjectParser<>(, + "auto_follow_stats",, + true,, + true,, + true,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ccr/CcrStatsResponse.java, + private static final ConstructingObjectParser<CcrStatsResponse, Void> PARSER = new ConstructingObjectParser<>(, + "indices",, + true,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ccr/AutoFollowStats.java, + static final ConstructingObjectParser<AutoFollowStats, Void> STATS_PARSER = new ConstructingObjectParser<>(, + "auto_follow_stats",, + true,, + true,, + true,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ccr/CcrStatsResponse.java, + private static final ConstructingObjectParser<CcrStatsResponse, Void> PARSER = new ConstructingObjectParser<>(, + "indices",, + true,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ccr/GetAutoFollowPatternResponse.java, + "get_auto_follow_pattern_response", true, args -> new AbstractMap.SimpleEntry<>((String) args[0],
[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, + DoubleArray compensations;, + compensations = bigArrays.newDoubleArray(1, true);, + compensations = bigArrays.grow(compensations, bucket + 1);, + // Compute the sum of double values with Kahan summation algorithm which is more, + // accurate than naive summation., + double sum = sums.get(bucket);, + double compensation = compensations.get(bucket);, +, + double value = values.nextValue();, + if (Double.isFinite(value) == false) {, + sum += value;, + } else if (Double.isFinite(sum)) {, + double corrected = value - compensation;, + double newSum = sum + corrected;, + compensation = (newSum - sum) - corrected;, + sum = newSum;, + }, +
[+++ b/dev-tools/checkstyle_suppressions.xml, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]analysis[/\\]analyzer[/\\]Analyzer.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]analysis[/\\]analyzer[/\\]Verifier.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]execution[/\\]search[/\\]AggValues.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]execution[/\\]search[/\\]Scroller.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]execution[/\\]search[/\\]SourceGenerator.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]Attribute.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]ExpressionIdGenerator.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]FieldAttribute.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]LiteralAttribute.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]TypedAttribute.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]UnresolvedAttribute.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]function[/\\]UnresolvedFunction.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]function[/\\]aggregate[/\\]AggregateFunctionAttribute.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]function[/\\]aggregate[/\\]InnerAggregate.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]function[/\\]scalar[/\\]Cast.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]function[/\\]scalar[/\\]ScalarFunctionAttribute.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]function[/\\]scalar[/\\]arithmetic[/\\]ArithmeticFunction.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]function[/\\]scalar[/\\]arithmetic[/\\]BinaryArithmeticProcessorDefinition.java" checks="LineLength" />, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\]function[/\\]scalar[/\\]arithmetic[/\\]Neg.java" checks="LineLength" />, + <suppress
[+++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageTestServer.java, +, + byte[] existingBytes = destContainer.objects.putIfAbsent(destBlobName, body);, + if (existingBytes != null) {, + return newBlobAlreadyExistsError(requestId);, + }, +, + private static Response newBlobAlreadyExistsError(final long requestId) {, + return newError(requestId, RestStatus.CONFLICT, "BlobAlreadyExists", "The specified blob already exists");, + }, +, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageTestServer.java, +, + byte[] existingBytes = destContainer.objects.putIfAbsent(destBlobName, body);, + if (existingBytes != null) {, + return newBlobAlreadyExistsError(requestId);, + }, +, + private static Response newBlobAlreadyExistsError(final long requestId) {, + return newError(requestId, RestStatus.CONFLICT, "BlobAlreadyExists", "The specified blob already exists");, + }, +, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageTestServer.java, +, + byte[] existingBytes = destContainer.objects.putIfAbsent(destBlobName, body);, + if (existingBytes
[+++ b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestClusterUpdateSettingsAction.java, +++ b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestClusterUpdateSettingsAction.java, +++ b/server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestClearIndicesCacheAction.java, +, + clearIndicesCacheRequest.queryCache(request.paramAsBoolean("query", clearIndicesCacheRequest.queryCache()));, + clearIndicesCacheRequest.requestCache(request.paramAsBoolean("request", clearIndicesCacheRequest.requestCache()));, + clearIndicesCacheRequest.fieldDataCache(request.paramAsBoolean("fielddata", clearIndicesCacheRequest.fieldDataCache()));, + clearIndicesCacheRequest.fields(request.paramAsStringArray("fields", clearIndicesCacheRequest.fields()));]
[+++ b/TESTING.asciidoc, +By default the tests run on up to 4 JVMs based on the number of cores. If you, +want to explicitly specify the number of JVMs you can do so on the command, +++ b/TESTING.asciidoc, +By default the tests run on up to 4 JVMs based on the number of cores. If you, +want to explicitly specify the number of JVMs you can do so on the command, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/TESTING.asciidoc, +By default the tests run on up to
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, + Iterable<Node> hosts = selectNodes(nodeTuple, blacklist, lastNodeIndex, nodeSelector);, + * Select nodes to try and sorts them so that the first one will be tried initially, then the following ones, + * if the previous attempt failed and so on. Package private for testing., + static Iterable<Node> selectNodes(NodeTuple<List<Node>> nodeTuple, Map<HttpHost, DeadHostState> blacklist,, + AtomicInteger lastNodeIndex, NodeSelector nodeSelector) throws IOException {, + * Rotate the list using a global counter as the distance so subsequent, + * requests will try the nodes in a different order., + * Last resort: there are no good nodes to use, either
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/docs/reference/sql/functions/operators.asciidoc, +Boolean operator for comparing against one or multiple expressions., +* `IN (<value1>, <value2>, ...)`, +, +["source","sql",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{sql-specs}/filter.sql-spec[whereWithInAndMultipleValues], +--------------------------------------------------, +, +++ b/docs/reference/sql/functions/operators.asciidoc, +Boolean operator for comparing against one or multiple expressions., +* `IN (<value1>, <value2>, ...)`, +, +["source","sql",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{sql-specs}/filter.sql-spec[whereWithInAndMultipleValues], +--------------------------------------------------, +, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +, + public boolean isCompatibleWith(DataType other) {, + if (this == other) {, + return true;, + } else if (isString() && other.isString()) {, + return true;, + } else if (isNumeric() && other.isNumeric()) {, + return true;, + } else {, + return false;, + }, + }, +++ b/docs/reference/sql/functions/operators.asciidoc, +Boolean operator
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, + * If the specified throwable contains a fatal error in the throwable graph, such a fatal error will be thrown. Callers should ensure, + * that there are no catch statements that would catch an error in the stack as the fatal error here should go uncaught and be handled, + * by the uncaught exception handler that we install during bootstrap. If the specified throwable does indeed contain a fatal error, the, + * specified message will attempt to be logged before throwing the fatal error. If the specified throwable does not contain a fatal,
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, + * Synchronously execute the specified replica operation. This is done under a permit from, + * {@link IndexShard#acquireReplicaOperationPermit(long, ActionListener, String)}., + replica.acquireReplicaOperationPermit(request.primaryTerm, this, executor);, + indexShard.acquirePrimaryOperationPermit(onAcquired, executor);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, + * Synchronously execute the specified replica operation. This is done under a permit from, + * {@link IndexShard#acquireReplicaOperationPermit(long, ActionListener, String)}., + replica.acquireReplicaOperationPermit(request.primaryTerm, this, executor);, + indexShard.acquirePrimaryOperationPermit(onAcquired, executor);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, + * Synchronously execute the specified replica operation. This is done under a permit from, + * {@link IndexShard#acquireReplicaOperationPermit(long, ActionListener, String)}., + replica.acquireReplicaOperationPermit(request.primaryTerm, this, executor);, + indexShard.acquirePrimaryOperationPermit(onAcquired, executor);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import java.util.Locale;, +
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/server/src/main/java/org/elasticsearch/index/engine/LuceneChangesSnapshot.java, + throw new MissingHistoryOperationsException("Not all operations between from_seqno [" + fromSeqNo + "] " +, + throw new MissingHistoryOperationsException("Not all operations between from_seqno [" + fromSeqNo + "] " +, +++ b/server/src/main/java/org/elasticsearch/index/engine/LuceneChangesSnapshot.java, + throw new MissingHistoryOperationsException("Not all operations between from_seqno [" + fromSeqNo + "] " +, + throw new MissingHistoryOperationsException("Not all operations between from_seqno [" + fromSeqNo + "] " +, +++ b/server/src/main/java/org/elasticsearch/index/engine/MissingHistoryOperationsException.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership.
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed
[+++ b/x-pack/docs/en/rest-api/ml/get-category.asciidoc, +`esxi_log` job:, +GET _xpack/ml/anomaly_detectors/esxi_log/results/categories, + "job_id" : "esxi_log",, + "terms" : "Vpxa verbose vpxavpxaInvtVm opID VpxaInvtVmChangeListener Guest DiskInfo Changed",, + "regex" : ".*?Vpxa.+?verbose.+?vpxavpxaInvtVm.+?opID.+?VpxaInvtVmChangeListener.+?Guest.+?DiskInfo.+?Changed.*",, + "max_matching_length": 154,, + "Oct 19 17:04:44 esxi1.acme.com Vpxa: [3CB3FB90 verbose 'vpxavpxaInvtVm' opID=WFU-33d82c31] [VpxaInvtVmChangeListener] Guest DiskInfo Changed",, + "Oct 19 17:04:45 esxi2.acme.com Vpxa: [3CA66B90 verbose 'vpxavpxaInvtVm' opID=WFU-33927856] [VpxaInvtVmChangeListener] Guest DiskInfo Changed",, + "Oct 19 17:04:51 esxi1.acme.com Vpxa: [FFDBAB90 verbose 'vpxavpxaInvtVm' opID=WFU-25e0d447] [VpxaInvtVmChangeListener] Guest DiskInfo Changed",, + "Oct 19 17:04:58 esxi2.acme.com Vpxa: [FFDDBB90 verbose 'vpxavpxaInvtVm' opID=WFU-bbff0134] [VpxaInvtVmChangeListener] Guest DiskInfo Changed", + ],, + "grok_pattern" : ".*?%{SYSLOGTIMESTAMP:timestamp}.+?Vpxa.+?%{BASE16NUM:field}.+?verbose.+?vpxavpxaInvtVm.+?opID.+?VpxaInvtVmChangeListener.+?Guest.+?DiskInfo.+?Changed.*", +++ b/x-pack/docs/en/rest-api/ml/get-category.asciidoc, +`esxi_log` job:, +GET _xpack/ml/anomaly_detectors/esxi_log/results/categories, + "job_id" :
[+++ b/.ci/java-versions.properties, +GRADLE_EXTRA_ARGS=-Dtests.bwc.refspec=elastic/index-lifecycle-6.x, +++ b/.ci/java-versions.properties, +GRADLE_EXTRA_ARGS=-Dtests.bwc.refspec=elastic/index-lifecycle-6.x, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]CompletionFieldMapper.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]DocumentFieldMappers.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]DocumentMapper.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]DocumentParser.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]DynamicTemplate.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]FieldMapper.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]FieldNamesFieldMapper.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]FieldTypeLookup.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]GeoShapeFieldMapper.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]IdFieldMapper.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]IndexFieldMapper.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]MappedFieldType.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]MapperService.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]Mapping.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]MetadataFieldMapper.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]ObjectMapper.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]RootObjectMapper.java" checks="LineLength" />, + <suppress files="server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]mapper[/\\]RoutingFieldMapper.java" checks="LineLength" />, +
[+++ b/qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java, + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37920"), + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37920"), + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37920"), + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37920"), +++ b/qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java, + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37920"), + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37920"), + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37920"), + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37920"), +++ b/qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/QueryBuilderBWCIT.java, + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37920")]
[+++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, + @Override, + filter, indexBoost, timeProvider.getAbsoluteStartMillis(), shardIt.getClusterAlias(), routings);, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, + @Override, + filter, indexBoost, timeProvider.getAbsoluteStartMillis(), shardIt.getClusterAlias(), routings);, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, + SearchShardTarget shardTarget = shardIt.newSearchShardTarget(nodeId);, + executePhaseOnShard(shardIt, shard, new SearchActionListener<FirstResult>(, + shardIt.newSearchShardTarget(shard.currentNodeId()), shardIndex) {, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, + @Override, + filter, indexBoost, timeProvider.getAbsoluteStartMillis(), shardIt.getClusterAlias(), routings);, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, + SearchShardTarget shardTarget = shardIt.newSearchShardTarget(nodeId);, + executePhaseOnShard(shardIt, shard, new SearchActionListener<FirstResult>(, + shardIt.newSearchShardTarget(shard.currentNodeId()), shardIndex) {, +++ b/server/src/main/java/org/elasticsearch/action/search/ScrollIdForNode.java, + @Nullable, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, + @Override, + filter, indexBoost, timeProvider.getAbsoluteStartMillis(), shardIt.getClusterAlias(), routings);, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, + SearchShardTarget shardTarget = shardIt.newSearchShardTarget(nodeId);, + executePhaseOnShard(shardIt, shard, new SearchActionListener<FirstResult>(, + shardIt.newSearchShardTarget(shard.currentNodeId()), shardIndex) {, +++ b/server/src/main/java/org/elasticsearch/action/search/ScrollIdForNode.java, + @Nullable, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +
[+++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuTokenizerFactory.java, + final RuleBasedBreakIterator breakers[] = new RuleBasedBreakIterator[UScript.CODE_LIMIT];, + private RuleBasedBreakIterator parseRules(String filename, Environment env) throws IOException {, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuTokenizerFactory.java, + final RuleBasedBreakIterator breakers[] = new RuleBasedBreakIterator[UScript.CODE_LIMIT];, + private RuleBasedBreakIterator parseRules(String filename, Environment env) throws IOException {, +++ b/server/src/main/java/org/elasticsearch/Version.java, + public static final Version V_6_2_0 = new Version(V_6_2_0_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);, + public static final Version V_6_2_1 = new Version(V_6_2_1_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);, + public static final Version V_6_2_2 = new Version(V_6_2_2_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);, + public static final Version V_6_2_3 = new Version(V_6_2_3_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);, + public static final Version V_6_2_4 = new Version(V_6_2_4_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);, + public static final Version V_6_2_5 = new Version(V_6_2_5_ID,
[+++ b/buildSrc/src/main/java/org/elasticsearch/GradleServicesAdapter.java, +import java.nio.file.Path;, +, + public void delete(Path path) {, + project.delete(path.toFile());, + }, +++ b/buildSrc/src/main/java/org/elasticsearch/GradleServicesAdapter.java, +import java.nio.file.Path;, +, + public void delete(Path path) {, + project.delete(path.toFile());, + }, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java, + public static final int CLEAN_WORKDIR_RETRIES = 3;, + syncWithLinks(distroExtractDir, workingDir);, + /**, + * Does the equivalent of `cp -lr` and `chmod -r a-w` to save space and improve speed., + * We remove write permissions to make sure files are note mistakenly edited ( e.x. the config file ) and changes, + * reflected across all copies. Permissions are retained to be able to replace
[+++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-608f0277b0, +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-608f0277b0, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-608f0277b0, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ /dev/null, +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-608f0277b0, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ /dev/null, +++ b/modules/lang-expression/licenses/lucene-expressions-7.5.0-snapshot-608f0277b0.jar.sha1, +bd7d8078a2d0ad11a24f54156cc015630c96858a, +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-608f0277b0, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ /dev/null, +++ b/modules/lang-expression/licenses/lucene-expressions-7.5.0-snapshot-608f0277b0.jar.sha1, +bd7d8078a2d0ad11a24f54156cc015630c96858a, +++ b/plugins/analysis-icu/build.gradle, + compile 'com.ibm.icu:icu4j:62.1', +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-608f0277b0, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ /dev/null, +++ b/modules/lang-expression/licenses/lucene-expressions-7.5.0-snapshot-608f0277b0.jar.sha1, +bd7d8078a2d0ad11a24f54156cc015630c96858a, +++ b/plugins/analysis-icu/build.gradle, + compile 'com.ibm.icu:icu4j:62.1', +++ /dev/null, +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-608f0277b0, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path:
[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/extractor/FieldHitExtractor.java, + if (i < path.length - 1) {, + } else {, + // We exhausted the path and got a map, + // If it is an object - it will be handled in the value extractor, + value = node;, + }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/extractor/FieldHitExtractor.java, + if (i < path.length - 1) {, + } else {, + // We exhausted the path and got a map, + // If it is an object - it will be handled in the value extractor, + value = node;, + }, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/execution/search/extractor/FieldHitExtractorTests.java, + public void testObjectsForSourceValue() throws
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ /dev/null, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/dev-tools/checkstyle_suppressions.xml, + <!-- These files are generated by ANTLR so its silly to hold them to our rules. -->, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]parser[/\\]SqlBase(Base(Listener|Visitor)|Lexer|Listener|Parser|Visitor).java"
[+++ b/docs/reference/migration/migrate_7_0/settings.asciidoc, +, +[[include-realm-type-in-setting]], +==== Security realms settings, +, +The settings for all security realms must now include the realm type as part, +of the setting name, and the explicit `type` setting has been removed., +, +A realm that was previous configured as:, +[source,yaml], +--------------------------------------------------, +xpack.security.authc.realms:, + ldap1:, + type: ldap, + order: 1, + url: "ldaps://ldap.example.com/", +--------------------------------------------------, +, +Must be migrated to: , +[source,yaml], +--------------------------------------------------, +xpack.security.authc.realms:, + ldap.ldap1:, + order: 1, + url: "ldaps://ldap.example.com/", +--------------------------------------------------, +, +Any realm specific secure settings that have been stored in the elasticsearch, +keystore (such as ldap bind passwords, or passwords for ssl
[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/Job.java, + * A good starting name for the index storing the job's results., + * This defaults to the shared results index if a specific index name is not set., + * This method must <em>only</em> be used during initial job creation., + * After that the read/write aliases must always be used to access the job's, + * results index, as the underlying index may roll or be reindexed., + * @return The job's initial results index name, + public String getInitialResultsIndexName() {, + * Get the unmodified <code>results_index_name</code> field from the job., + * This
[+++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, + assert currentRouting.isRelocationTarget() == false || currentRouting.primary() == false ||, + replicationTracker.isPrimaryMode() :, + "a primary relocation is completed by the master, but primary mode is not active " + currentRouting;, + if (newPrimaryTerm == primaryTerm) {, + if (currentRouting.initializing() && currentRouting.isRelocationTarget() == false && newRouting.active()) {, + // the master started a recovering primary, activate primary mode., + replicationTracker.activatePrimaryMode(getLocalCheckpoint());, + }, + } else {, +, + assert this.shardRouting.primary() == false ||, + this.shardRouting.started() == false || // note that we use started and not active to avoid relocating shards, + this.replicationTracker.isPrimaryMode(), + : "an started
[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPutFollowAction.java, +import org.elasticsearch.index.IndexSettings;, + settingsBuilder.put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPutFollowAction.java, +import org.elasticsearch.index.IndexSettings;, + settingsBuilder.put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportResumeFollowAction.java, + if (followIndex.getSettings().getAsBoolean(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), false) == false) {, + throw new IllegalArgumentException("follower index [" + request.getFollowerIndex() + "] does not have soft deletes enabled");, + }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPutFollowAction.java, +import org.elasticsearch.index.IndexSettings;, + settingsBuilder.put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportResumeFollowAction.java, + if (followIndex.getSettings().getAsBoolean(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), false) == false) {, + throw new IllegalArgumentException("follower index [" + request.getFollowerIndex() + "] does not have soft deletes enabled");, + }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/index/engine/FollowingEngine.java, + if (engineConfig.getIndexSettings().isSoftDeleteEnabled() == false) {, + throw new IllegalArgumentException("a following engine requires soft deletes to be enabled");, + }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPutFollowAction.java,
[+++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/docs/en/index.asciidoc, +, +:edit_url!:, +:edit_url!:, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/docs/en/index.asciidoc, +, +:edit_url!:, +:edit_url!:, +++ b/docs/en/settings/monitoring-settings.asciidoc, +Logstash, configure, +{logstash-ref}/configuring-logstash.html#monitoring-settings[`xpack.monitoring` settings], +in `logstash.yml`., +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'],
[+++ b/server/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +import org.elasticsearch.Version;, +import java.util.LinkedList;, + if (indexSettings.getIndexVersionCreated().onOrAfter(Version.V_7_0_0_alpha1)) {, + /**, + * For indices created on or after {@link Version#V_7_0_0_alpha1} we preserve the order, + * of the children while ensuring that parents appear after them., + */, + List<Document> newDocs = reorderParent(documents);, + documents.clear();, + documents.addAll(newDocs);, + } else {, + // reverse the order of docs for nested docs support, parent should be last, + }, +, + /**, + * Returns a copy of the provided {@link List} where parent documents appear, + * after their children., + */, + private List<Document> reorderParent(List<Document> docs)
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/put-policy.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/put-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/info.asciidoc, + "index_lifecycle" : {, + "description" : "Index lifecycle management for the Elastic Stack",, + "available" : true,, + "enabled" : true, + },, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/TestClustersPlugin.java, + // When the daemon is used, but does not work correctly and eventually dies off (e.x. due to non interruptible, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/TestClustersPlugin.java, + // When the daemon is used, but does not work correctly and eventually dies off (e.x. due to non interruptible, +++ b/server/src/main/java/org/elasticsearch/common/util/CancellableThreads.java, + * executed via {@link #execute(Interruptible)}, which will capture the executing thread and make sure it is interrupted in the case, + * run the Interruptible, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread, + * @param interruptible code to run, + public void execute(Interruptible interruptible)
[+++ b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, + Setting.memorySizeSetting("indices.breaker.accounting.limit", "100%", Property.Dynamic, Property.NodeScope);, + Setting.doubleSetting("indices.breaker.accounting.overhead", 1.0d, 0.0d, Property.Dynamic, Property.NodeScope);, + clusterSettings.addSettingsUpdateConsumer(ACCOUNTING_CIRCUIT_BREAKER_LIMIT_SETTING, ACCOUNTING_CIRCUIT_BREAKER_OVERHEAD_SETTING, this::setAccountingBreakerLimit);, + private void setAccountingBreakerLimit(ByteSizeValue newAccountingMax, Double newAccountingOverhead) {, + BreakerSettings newAccountingSettings = new BreakerSettings(CircuitBreaker.ACCOUNTING, newAccountingMax.getBytes(),, + newAccountingOverhead, HierarchyCircuitBreakerService.this.inFlightRequestsSettings.getType());, + registerBreaker(newAccountingSettings);, + HierarchyCircuitBreakerService.this.accountingSettings = newAccountingSettings;, + logger.info("Updated breaker settings for accounting requests: {}", newAccountingSettings);, + }, +, +++ b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, + Setting.memorySizeSetting("indices.breaker.accounting.limit", "100%", Property.Dynamic, Property.NodeScope);, + Setting.doubleSetting("indices.breaker.accounting.overhead", 1.0d, 0.0d, Property.Dynamic, Property.NodeScope);, + clusterSettings.addSettingsUpdateConsumer(ACCOUNTING_CIRCUIT_BREAKER_LIMIT_SETTING, ACCOUNTING_CIRCUIT_BREAKER_OVERHEAD_SETTING, this::setAccountingBreakerLimit);, + private void setAccountingBreakerLimit(ByteSizeValue newAccountingMax, Double newAccountingOverhead) {, + BreakerSettings newAccountingSettings = new BreakerSettings(CircuitBreaker.ACCOUNTING, newAccountingMax.getBytes(),, + newAccountingOverhead, HierarchyCircuitBreakerService.this.inFlightRequestsSettings.getType());, + registerBreaker(newAccountingSettings);, + HierarchyCircuitBreakerService.this.accountingSettings = newAccountingSettings;, + logger.info("Updated breaker settings for
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, + assertEquals("Elasticsearch exception [type=index_not_found_exception, reason=no such index [index]]", exception.getMessage());, + assertEquals("Elasticsearch exception [type=index_not_found_exception, reason=no such index [index]]",, + assertEquals("Elasticsearch exception [type=index_not_found_exception, reason=no such index [index]]",, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, + assertEquals("Elasticsearch exception [type=index_not_found_exception, reason=no such index [index]]", exception.getMessage());, + assertEquals("Elasticsearch exception [type=index_not_found_exception, reason=no such index [index]]",, + assertEquals("Elasticsearch exception [type=index_not_found_exception, reason=no such index [index]]",, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/GetAliasesResponseTests.java, + " \"reason\": \"no such index [index]\"," +, + " \"reason\": \"no such index [index]\"," +, + equalTo("Elasticsearch exception [type=index_not_found_exception, reason=no such index [index]]"));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, + assertEquals("Elasticsearch exception [type=index_not_found_exception, reason=no such index [index]]", exception.getMessage());, + assertEquals("Elasticsearch exception [type=index_not_found_exception, reason=no such index [index]]",,
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/MachineLearningGetResultsIT.java, + new MlTestStateCleaner(logger, highLevelClient().machineLearning()).clearMlMetadata();, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/MachineLearningGetResultsIT.java, + new MlTestStateCleaner(logger, highLevelClient().machineLearning()).clearMlMetadata();, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/MachineLearningIT.java, + new MlTestStateCleaner(logger, highLevelClient().machineLearning()).clearMlMetadata();, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/MachineLearningGetResultsIT.java, + new MlTestStateCleaner(logger, highLevelClient().machineLearning()).clearMlMetadata();, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/MachineLearningIT.java, + new MlTestStateCleaner(logger, highLevelClient().machineLearning()).clearMlMetadata();, +++ /dev/null, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/MachineLearningGetResultsIT.java, + new MlTestStateCleaner(logger, highLevelClient().machineLearning()).clearMlMetadata();, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/MachineLearningIT.java, + new MlTestStateCleaner(logger, highLevelClient().machineLearning()).clearMlMetadata();, +++ /dev/null, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/MlTestStateCleaner.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may,
[+++ b/modules/lang-expression/src/test/java/org/elasticsearch/script/expression/MoreExpressionTests.java, + assertThat(message, equalTo("Failed to compile inline script [0] using lang [expression]"));, +++ b/modules/lang-expression/src/test/java/org/elasticsearch/script/expression/MoreExpressionTests.java, + assertThat(message, equalTo("Failed to compile inline script [0] using lang [expression]"));, +++ b/modules/lang-expression/src/test/java/org/elasticsearch/script/expression/StoredExpressionTests.java, + assertThat(e.getCause().getMessage(), containsString("Failed to compile stored script [script1] using lang [expression]"));, +++ b/modules/lang-expression/src/test/java/org/elasticsearch/script/expression/MoreExpressionTests.java, + assertThat(message, equalTo("Failed to compile inline script [0] using lang [expression]"));, +++ b/modules/lang-expression/src/test/java/org/elasticsearch/script/expression/StoredExpressionTests.java, + assertThat(e.getCause().getMessage(), containsString("Failed to compile stored script [script1] using lang [expression]"));, +++ b/server/src/main/java/org/elasticsearch/script/ScriptService.java]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/docs/en/index.asciidoc, +, +:edit_url!:, +:edit_url!:, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/docs/en/index.asciidoc, +, +:edit_url!:, +:edit_url!:, +++ b/docs/en/settings/configuring-xes.asciidoc, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target,
[+++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ b/dev-tools/checkstyle_suppressions.xml, + <!-- These files are generated by ANTLR so its silly to hold them to our rules. -->, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]parser[/\\]SqlBase(Base(Listener|Visitor)|Lexer|Listener|Parser|Visitor).java" checks="." />, +, + <suppress files="sql[/\\]server[/\\].*.java" checks="LineLength" />, +, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ b/dev-tools/checkstyle_suppressions.xml, + <!-- These files are generated by ANTLR so its silly to hold them to our rules. -->, + <suppress files="sql[/\\]server[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]parser[/\\]SqlBase(Base(Listener|Visitor)|Lexer|Listener|Parser|Visitor).java" checks="." />, +, + <suppress files="sql[/\\]server[/\\].*.java" checks="LineLength" />, +, +++ b/dev-tools/ci, + smokeTestSql) # TODO remove this once we are
[+++ b/docs/reference/migration/migrate_6_0/settings.asciidoc, +The previously unused settings `transport.netty.max_cumulation_buffer_capacity`,, +`transport.netty.max_composite_buffer_components` and, +`http.netty.max_cumulation_buffer_capacity` have been removed., +, +++ b/docs/reference/migration/migrate_6_0/settings.asciidoc, +The previously unused settings `transport.netty.max_cumulation_buffer_capacity`,, +`transport.netty.max_composite_buffer_components` and, +`http.netty.max_cumulation_buffer_capacity` have been removed., +, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +++ b/docs/reference/migration/migrate_6_0/settings.asciidoc, +The previously unused settings `transport.netty.max_cumulation_buffer_capacity`,, +`transport.netty.max_composite_buffer_components` and, +`http.netty.max_cumulation_buffer_capacity` have been removed., +, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/Netty4Plugin.java, +++ b/docs/reference/migration/migrate_6_0/settings.asciidoc, +The previously unused settings `transport.netty.max_cumulation_buffer_capacity`,, +`transport.netty.max_composite_buffer_components` and, +`http.netty.max_cumulation_buffer_capacity` have been removed., +, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/Netty4Plugin.java, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/server/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, + .setMasterNodeTimeout(timeout).setTimeout(TimeValue.ZERO);, + updateMappingRequest(index, type, mappingUpdate, timeout).get();, +++ b/server/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, + .setMasterNodeTimeout(timeout).setTimeout(TimeValue.ZERO);, + updateMappingRequest(index, type, mappingUpdate, timeout).get();, +++ b/server/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, + .put(TestZenDiscovery.USE_ZEN2.getKey(), false), +++ b/server/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, + .setMasterNodeTimeout(timeout).setTimeout(TimeValue.ZERO);, + updateMappingRequest(index, type, mappingUpdate, timeout).get();, +++ b/server/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, + .put(TestZenDiscovery.USE_ZEN2.getKey(), false), +++ b/server/src/test/java/org/elasticsearch/cluster/routing/PrimaryAllocationIT.java, +import org.elasticsearch.action.DocWriteResponse;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.common.Strings;, + public void testBulkWeirdScenario() throws Exception {, + String master = internalCluster().startMasterOnlyNode(Settings.EMPTY);, + internalCluster().startDataOnlyNodes(2);, +, + assertAcked(client().admin().indices().prepareCreate("test").setSettings(Settings.builder(), + .put("index.number_of_shards", 1).put("index.number_of_replicas", 1)).get());, + ensureGreen();, +, + BulkResponse bulkResponse = client().prepareBulk(), + .add(client().prepareIndex().setIndex("test").setType("_doc").setId("1").setSource("field1", "value1")), + .add(client().prepareUpdate().setIndex("test").setType("_doc").setId("1").setDoc("field2", "value2")), + .execute().actionGet();, +, + assertThat(bulkResponse.hasFailures(), equalTo(false));, + assertThat(bulkResponse.getItems().length, equalTo(2));, +, + logger.info(Strings.toString(bulkResponse, true, true));, +, + internalCluster().assertSeqNos();, +, +
[+++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/en/index.asciidoc, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/en/index.asciidoc, +++ /dev/null, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/en/index.asciidoc, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/en/index.asciidoc, +++ /dev/null, +++ /dev/null,
[+++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuTokenizerFactory.java, + final BreakIterator breakers[] = new BreakIterator[UScript.CODE_LIMIT];, + private BreakIterator parseRules(String filename, Environment env) throws IOException {, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuTokenizerFactory.java, + final BreakIterator breakers[] = new BreakIterator[UScript.CODE_LIMIT];, + private BreakIterator parseRules(String filename, Environment env) throws IOException {, +++ b/server/src/main/java/org/elasticsearch/Version.java, + // The below version is missing from the 7.3 JAR, + private static final org.apache.lucene.util.Version LUCENE_7_2_1 = org.apache.lucene.util.Version.fromBits(7, 2, 1);, + public static final Version V_6_2_0 = new Version(V_6_2_0_ID, LUCENE_7_2_1);, + public static final Version V_6_2_1 = new Version(V_6_2_1_ID, LUCENE_7_2_1);, + public static final Version V_6_2_2 = new Version(V_6_2_2_ID, LUCENE_7_2_1);, + public static final Version V_6_2_3 = new
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/qa/ccs-unavailable-clusters/src/test/java/org/elasticsearch/search/CrossClusterSearchUnavailableClusterIT.java, +import org.elasticsearch.client.Request;, + Response refreshResponse = client().performRequest(new Request("POST", "/index/_refresh"));, + Request request = new Request("PUT", "/_cluster/settings");, + request.setEntity(buildUpdateSettingsRequestBody(, + Collections.singletonMap("skip_unavailable", randomBoolean())));, + () -> client().performRequest(request));, + Request request = new Request("PUT", "/_cluster/settings");, + request.setEntity(buildUpdateSettingsRequestBody(Collections.singletonMap("seeds", null)));, + () -> client().performRequest(request));, + Request request = new Request("PUT", "/_cluster/settings");, + request.setEntity(buildUpdateSettingsRequestBody(settings));, + Response response = client().performRequest(request);, +++ b/qa/ccs-unavailable-clusters/src/test/java/org/elasticsearch/search/CrossClusterSearchUnavailableClusterIT.java, +import org.elasticsearch.client.Request;, + Response refreshResponse = client().performRequest(new Request("POST", "/index/_refresh"));, + Request request = new Request("PUT", "/_cluster/settings");, + request.setEntity(buildUpdateSettingsRequestBody(, + Collections.singletonMap("skip_unavailable", randomBoolean())));, + () -> client().performRequest(request));, + Request request = new Request("PUT", "/_cluster/settings");, + request.setEntity(buildUpdateSettingsRequestBody(Collections.singletonMap("seeds", null)));, + () -> client().performRequest(request));, + Request request
[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Spawner.java, +import org.elasticsearch.common.io.FileSystemUtils;, + if (FileSystemUtils.isDesktopServicesStore(plugin)) {, + continue;, + }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Spawner.java, +import org.elasticsearch.common.io.FileSystemUtils;, + if (FileSystemUtils.isDesktopServicesStore(plugin)) {, + continue;, + }, +++ b/core/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +import org.apache.lucene.util.Constants;, + * Check whether the file denoted by the given path is a desktop services store created by Finder on macOS., + *, + * @param path the path, + * @return true if the current system is macOS and the specified file appears to be a desktop services store file, + */, + public static boolean isDesktopServicesStore(final Path path) {, + return Constants.MAC_OS_X && Files.isRegularFile(path) && ".DS_Store".equals(path.getFileName().toString());, + }, +,
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/docs/reference/ccr/apis/ccr-apis.asciidoc, +* <<ccr-get-follow-info,Get info about follower indices>>, +include::follow/get-follow-info.asciidoc[], +++ b/docs/reference/ccr/apis/ccr-apis.asciidoc, +* <<ccr-get-follow-info,Get info about follower indices>>, +include::follow/get-follow-info.asciidoc[], +++ b/docs/reference/ccr/apis/follow/get-follow-info.asciidoc, +[role="xpack"], +[testenv="platinum"], +[[ccr-get-follow-info]], +=== Get follower info API, +++++, +<titleabbrev>Get follower info</titleabbrev>, +++++, +, +beta[], +, +Retrieves information about all follower indices., +, +==== Description, +, +This API lists the parameters and the status for each follower index., +For example, the results include follower index names, leader index names,, +replication options and whether the follower indices are active or paused., +, +==== Request, +, +//////////////////////////, +, +[source,js], +--------------------------------------------------, +PUT /follower_index/_ccr/follow, +{, + "remote_cluster" : "remote_cluster",, + "leader_index" : "leader_index",
[+++ b/docs/reference/migration/apis/assistance.asciidoc, +[role="xpack"], +[testenv="basic"], +[[migration-api-assistance]], +=== Migration Assistance API, +, +The Migration Assistance API analyzes existing indices in the cluster and, +returns the information about indices that require some changes before the, +cluster can be upgraded to the next major version., +, +[float], +==== Request, +, +`GET /_xpack/migration/assistance` +, +, +`GET /_xpack/migration/assistance/<index_name>`, +, +//==== Description, +, +[float], +==== Path Parameters, +, +`index_name`::, + (string) Identifier for the index. It can be an index name or a wildcard, + expression., +, +//==== Query Parameters, +, +//==== Authorization, +, +[float], +==== Examples, +, +To see a list of indices that needs
[+++ b/server/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, + // A regular or ChildMemoryCircuitBreaker, +++ b/server/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, + // A regular or ChildMemoryCircuitBreaker, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, + // A regular or ChildMemoryCircuitBreaker, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/index/fielddata/RamAccountingTermsEnum.java, + * {@link TermsEnum} that takes a CircuitBreaker, increasing the breaker, +++ b/server/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, + // A regular or ChildMemoryCircuitBreaker, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/index/fielddata/RamAccountingTermsEnum.java, + * {@link TermsEnum} that takes a CircuitBreaker, increasing the breaker, +++ b/server/src/main/java/org/elasticsearch/index/fielddata/plain/AbstractIndexFieldData.java, + * intends to take advantage of the CircuitBreaker., +++ b/server/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, + // A regular or ChildMemoryCircuitBreaker, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/index/fielddata/RamAccountingTermsEnum.java, + * {@link TermsEnum} that takes a CircuitBreaker, increasing the breaker, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/IngestRestartIT.java, +import org.elasticsearch.test.discovery.TestZenDiscovery;, + protected Settings nodeSettings(int nodeOrdinal) {, + return Settings.builder().put(super.nodeSettings(nodeOrdinal)), + .put(TestZenDiscovery.USE_ZEN2.getKey(), false) // no state persistence yet, + .build();, + }, +, + @Override, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/IngestRestartIT.java, +import org.elasticsearch.test.discovery.TestZenDiscovery;, + protected Settings nodeSettings(int nodeOrdinal) {, + return Settings.builder().put(super.nodeSettings(nodeOrdinal)), +
[+++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/Debug.java, + if (statement instanceof CallableStatement) {, + else if (statement instanceof PreparedStatement) {, + i = PreparedStatement.class;, + }]
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, + public String getTemplateBytes(Script template) {, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, + public String getTemplateBytes(Script template) {, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, + public final String getTemplateBytes(Script template) {, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, + public String getTemplateBytes(Script template) {, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, + public final String getTemplateBytes(Script template) {, +++ b/core/src/main/java/org/elasticsearch/ingest/InternalTemplateService.java, + return compiledTemplate.run(model);, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, + public String getTemplateBytes(Script template) {, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, + public final String getTemplateBytes(Script template) {, +++ b/core/src/main/java/org/elasticsearch/ingest/InternalTemplateService.java, + return compiledTemplate.run(model);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, + return params -> (String)executable(compiledScript, params).run();, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, + public String getTemplateBytes(Script template) {, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, + public final String getTemplateBytes(Script template) {, +++ b/core/src/main/java/org/elasticsearch/ingest/InternalTemplateService.java, + return compiledTemplate.run(model);,
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.client.http.Header;, +import org.elasticsearch.client.http.HttpEntity;, +import org.elasticsearch.common.CheckedConsumer;, +import java.io.Closeable;, + * The {@link RestClient} instance is internally built based on the provided {@link RestClientBuilder} and it gets closed automatically, + * when closing the {@link RestHighLevelClient} instance that wraps it., + * In case an already existing instance of a low-level REST client needs to be provided, this class can be subclassed and the, + * {@link #RestHighLevelClient(RestClient, CheckedConsumer, List)} constructor can be used., + * This class can also be sub-classed to expose additional client methods that make use of endpoints added to Elasticsearch through, + *
[+++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuTokenizerFactory.java, + final RuleBasedBreakIterator breakers[] = new RuleBasedBreakIterator[UScript.CODE_LIMIT];, + private RuleBasedBreakIterator parseRules(String filename, Environment env) throws IOException {, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuTokenizerFactory.java, + final RuleBasedBreakIterator breakers[] = new RuleBasedBreakIterator[UScript.CODE_LIMIT];, + private RuleBasedBreakIterator parseRules(String filename, Environment env) throws IOException {, +++ b/server/src/main/java/org/elasticsearch/Version.java, + public static final Version V_6_2_0 = new Version(V_6_2_0_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);, + public static final Version V_6_2_1 = new Version(V_6_2_1_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);, + public static final Version V_6_2_2 = new Version(V_6_2_2_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);, + public static final Version V_6_2_3 = new Version(V_6_2_3_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);, + public static final Version V_6_2_4 = new Version(V_6_2_4_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);, + public static final Version V_6_2_5 = new Version(V_6_2_5_ID,
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/distribution/src/bin/elasticsearch-keystore.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-keystore.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-plugin.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-keystore.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-plugin.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-translog.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-keystore.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-plugin.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-translog.bat, + %%* ^, +++ /dev/null, +++ b/distribution/src/bin/elasticsearch-keystore.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-plugin.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-translog.bat, + %%* ^, +++ /dev/null, +++ /dev/null, +++ b/distribution/src/bin/elasticsearch-keystore.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-plugin.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-translog.bat, + %%* ^, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/distribution/src/bin/elasticsearch-keystore.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-plugin.bat, + %%* ^, +++ b/distribution/src/bin/elasticsearch-translog.bat,
[+++ b/server/src/main/java/org/elasticsearch/search/SearchPhase.java, +import org.elasticsearch.tasks.Task;, +, + class SearchContextSourcePrinter {, + private final SearchContext searchContext;, +, + public SearchContextSourcePrinter(SearchContext searchContext) {, + this.searchContext = searchContext;, + }, +, + @Override, + public String toString() {, + StringBuilder builder = new StringBuilder();, + builder.append(searchContext.indexShard().shardId());, + builder.append(" ");, + if (searchContext.request() != null &&, + searchContext.request().source() != null) {, + builder.append("source[").append(searchContext.request().source().toString()).append("], ");, + } else {, + builder.append("source[], ");, + }, + if (searchContext.getTask() != null &&, + searchContext.getTask().getHeader(Task.X_OPAQUE_ID) != null) {, + builder.append("id[").append(searchContext.getTask().getHeader(Task.X_OPAQUE_ID)).append("], ");, + } else {, + builder.append("id[], ");, + }, + return builder.toString();, + }, + }, +++
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java, +import org.elasticsearch.rest.action.document.RestGetAction;, +import org.elasticsearch.rest.action.search.RestExplainAction;, + mappingsAndSettings.startObject("doc");, + mappingsAndSettings.startObject("doc");, + mappingsAndSettings.startObject("doc");, + mappingsAndSettings.startObject("doc");, + mappingsAndSettings.startObject("doc");, + Request bulkRequest = new Request("POST", "/" + index + "_write/doc/_bulk");, + Request explainRequest = new Request("GET", "/" + index + "/" + type + "/" + id + "/_explain");, + explainRequest.setJsonEntity("{ \"query\": { \"match_all\" : {} }}");, + explainRequest.setOptions(expectWarnings(RestExplainAction.TYPES_DEPRECATION_MESSAGE));, + String explanation = toStr(client().performRequest(explainRequest));, + searchRequest.setEntity(explainRequest.getEntity());, + Request updateRequest = new Request("POST", "/" + index + "/doc/" + docId + "/_update");, + Request getRequest = new Request("GET", "/" + index + "/doc/" + docId);, + getRequest.setOptions(expectWarnings(RestGetAction.TYPES_DEPRECATION_MESSAGE));, + Map<String, Object> getRsp = entityAsMap(client().performRequest(getRequest));,
[+++ b/server/src/test/java/org/elasticsearch/common/time/DateFormattersTests.java, + DateFormatter f1 = DateFormatters.forPattern("YYYY").withLocale(Locale.CANADA);, + DateFormatter f2 = f1.withLocale(Locale.FRENCH);, + assertThat(f1, not(equalTo(f2)));]
[+++ b/docs/CHANGELOG.asciidoc, +[float], +=== New Features, +, +The new <<mapping-ignored-field,`_ignored`>> field allows to know which fields, +got ignored at index time because of the <<ignore-malformed,`ignore_malformed`>>, +option. ({pull}30140[#29658]), +++ b/docs/CHANGELOG.asciidoc, +[float], +=== New Features, +, +The new <<mapping-ignored-field,`_ignored`>> field allows to know which fields, +got ignored at index time because of the <<ignore-malformed,`ignore_malformed`>>, +option. ({pull}30140[#29658]), +++ b/docs/reference/mapping/fields.asciidoc, +=== Indexing meta-fields, +, +<<mapping-ignored-field,`_ignored`>>::, +, + All fields in the document that have been ignored at index time because of, + <<ignore-malformed,`ignore_malformed`>>., +, +[float], +include::fields/ignored-field.asciidoc[], +, +++ b/docs/CHANGELOG.asciidoc, +[float], +=== New Features, +, +The new <<mapping-ignored-field,`_ignored`>> field allows to know which fields,
[+++ b/server/src/test/java/org/elasticsearch/action/admin/indices/create/ShrinkIndexIT.java, +import org.apache.lucene.util.LuceneTestCase.AwaitsFix;, +@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/30416")]
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/server/src/main/java/org/elasticsearch/search/internal/ShardSearchLocalRequest.java, + if (in.getVersion().onOrAfter(Version.V_6_4_0)) {, + if (out.getVersion().onOrAfter(Version.V_6_4_0)) {, +++ b/server/src/main/java/org/elasticsearch/search/internal/ShardSearchLocalRequest.java, + if (in.getVersion().onOrAfter(Version.V_6_4_0)) {, + if (out.getVersion().onOrAfter(Version.V_6_4_0)) {, +++ b/server/src/main/java/org/elasticsearch/search/slice/SliceBuilder.java, + if (minNodeVersion.onOrAfter(Version.V_6_4_0) &&, + * This behavior has been added in {@link Version#V_6_4_0} so if there is another node in the cluster]
[+++ b/server/src/test/java/org/elasticsearch/indices/state/CloseIndexIT.java, +import static org.elasticsearch.search.internal.SearchContext.TRACK_TOTAL_HITS_ACCURATE;, + assertHitCount(client().prepareSearch(indexName).setSize(0).setTrackTotalHitsUpTo(TRACK_TOTAL_HITS_ACCURATE).get(), nbDocs);, + assertHitCount(client().prepareSearch(indexName).setSize(0).setTrackTotalHitsUpTo(TRACK_TOTAL_HITS_ACCURATE).get(),]
[+++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, + request.setJsonEntity("{\"remote_cluster\": \"leader_cluster\", \"leader_index\": \"leader\"}");, + request.setJsonEntity("{\"leader_index_patterns\":[\"*\"], \"remote_cluster\": \"leader_cluster\"}");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, + request.setJsonEntity("{\"remote_cluster\": \"leader_cluster\", \"leader_index\": \"leader\"}");, + request.setJsonEntity("{\"leader_index_patterns\":[\"*\"], \"remote_cluster\": \"leader_cluster\"}");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, + request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"], \"remote_cluster\": \"leader_cluster\"}");, + request.setJsonEntity("{\"leader_index_patterns\": [\"logs-eu-*\"], \"remote_cluster\": \"leader_cluster\"}");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, + request.setJsonEntity("{\"remote_cluster\": \"leader_cluster\", \"leader_index\": \"leader\"}");, + request.setJsonEntity("{\"leader_index_patterns\":[\"*\"], \"remote_cluster\": \"leader_cluster\"}");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, + request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"], \"remote_cluster\": \"leader_cluster\"}");, + request.setJsonEntity("{\"leader_index_patterns\": [\"logs-eu-*\"], \"remote_cluster\": \"leader_cluster\"}");, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, + request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"], \"remote_cluster\": \"leader_cluster\"}");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, + request.setJsonEntity("{\"remote_cluster\": \"leader_cluster\", \"leader_index\": \"leader\"}");, + request.setJsonEntity("{\"leader_index_patterns\":[\"*\"], \"remote_cluster\": \"leader_cluster\"}");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, + request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"], \"remote_cluster\": \"leader_cluster\"}");, + request.setJsonEntity("{\"leader_index_patterns\": [\"logs-eu-*\"], \"remote_cluster\": \"leader_cluster\"}");, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, + request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"], \"remote_cluster\": \"leader_cluster\"}");, +++ b/x-pack/plugin/ccr/qa/rest/src/test/resources/rest-api-spec/test/ccr/auto_follow.yml, + remote_cluster: local,
[+++ b/server/src/test/java/org/elasticsearch/discovery/DiscoveryDisruptionIT.java, + String masterNode = internalCluster().startMasterOnlyNode();, + String nonMasterNode = internalCluster().startDataOnlyNode();]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/server/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestion.java, +import org.elasticsearch.common.xcontent.ContextParser;, + public static class Entry extends Suggestion.Entry<PhraseSuggestion.Entry.Option> {, + protected void merge(Suggestion.Entry<Option> other) {, + public void addOption(Option option) {, + PARSER.declareObjectArray(Entry::addOptions, (ContextParser<Void, Option>) (p, c) -> Option.fromXContent(p),, + new ParseField(OPTIONS));, +++ b/server/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestion.java, +import org.elasticsearch.common.xcontent.ContextParser;, + public static class Entry extends Suggestion.Entry<PhraseSuggestion.Entry.Option> {, + protected void merge(Suggestion.Entry<Option> other) {, + public void addOption(Option option) {, + PARSER.declareObjectArray(Entry::addOptions, (ContextParser<Void, Option>) (p, c) -> Option.fromXContent(p),, + new ParseField(OPTIONS));, +++ b/server/src/test/java/org/elasticsearch/search/suggest/SuggestionEntryTests.java, + PhraseSuggestion.Entry.Option phraseOption = new PhraseSuggestion.Entry.Option(new Text("someText"),, + new Text("somethingHighlighted"),, + PhraseSuggestion.Entry phraseEntry = new PhraseSuggestion.Entry(new Text("entryText"), 42, 313);, + phraseEntry.addOption(phraseOption);, + BytesReference xContent = toXContent(phraseEntry, XContentType.JSON,
[+++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/FeatureVectorFieldMapper.java, + public void parse(ParseContext context) throws IOException {, +++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/FeatureVectorFieldMapper.java, + public void parse(ParseContext context) throws IOException {, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentJoinFieldMapper.java, + public void parse(ParseContext context) throws IOException {, +++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/FeatureVectorFieldMapper.java, + public void parse(ParseContext context) throws IOException {, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentJoinFieldMapper.java, + public void parse(ParseContext context) throws IOException {, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolatorFieldMapper.java, + public void parse(ParseContext context) throws IOException {, +++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/FeatureVectorFieldMapper.java, + public void parse(ParseContext context) throws IOException {, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentJoinFieldMapper.java, + public void parse(ParseContext context) throws IOException {, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolatorFieldMapper.java, + public void parse(ParseContext context) throws IOException {, +++ b/plugins/mapper-size/src/main/java/org/elasticsearch/index/mapper/size/SizeFieldMapper.java, + public void parse(ParseContext context) throws IOException
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ /dev/null, +++ /dev/null, +++ b/test/framework/src/main/java/org/elasticsearch/test/disruption/SingleNodeDisruption.java]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/buildSrc/build.gradle, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, + namingConventionsTask.javaHome = project.runtimeJavaHome, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, + namingConventionsTask.javaHome = project.runtimeJavaHome, +++ b/buildSrc/src/main/java/org/elasticsearch/GradleServicesAdapter.java, + public final Project project;, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, + namingConventionsTask.javaHome = project.runtimeJavaHome, +++ b/buildSrc/src/main/java/org/elasticsearch/GradleServicesAdapter.java, + public final Project project;, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/Distribution.java, + INTEG_TEST("integ-test"),, + ZIP("elasticsearch"),, + ZIP_OSS("elasticsearch-oss");, + Distribution(String name) {, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, + namingConventionsTask.javaHome = project.runtimeJavaHome, +++ b/buildSrc/src/main/java/org/elasticsearch/GradleServicesAdapter.java, + public final Project project;, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/Distribution.java, + INTEG_TEST("integ-test"),, + ZIP("elasticsearch"),, + ZIP_OSS("elasticsearch-oss");, + Distribution(String name) {, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java, + private final Logger logger = Logging.getLogger(ElasticsearchNode.class);, + public ElasticsearchNode(String name, GradleServicesAdapter services) {, + void start() {,
[+++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/CcrRepositoryIT.java, + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37887")]
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchConfiguration.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0,
[+++ b/test/framework/src/main/java/org/elasticsearch/ingest/RandomDocumentPicks.java, + for (int i = 0; i < numLevels-1; i++) {, + if (numLevels > 1) {, + fieldName.append('.');, + }, + fieldName.append(randomLeafFieldName(random));]
[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, + return Collections.singletonList(new ShardFollowTasksExecutor(settings, client, threadPool, clusterService));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, + return Collections.singletonList(new ShardFollowTasksExecutor(settings, client, threadPool, clusterService));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, + private String followerHistoryUUID;, + final String followerHistoryUUID,, + this.followerHistoryUUID = followerHistoryUUID;, + innerSendBulkShardOperationsRequest(followerHistoryUUID, operations, leaderMaxSeqNoOfUpdatesOrDeletes,, + protected abstract void innerSendBulkShardOperationsRequest(String followerHistoryUUID,, + List<Translog.Operation> operations,, + long leaderMaxSeqNoOfUpdatesOrDeletes,, + Consumer<BulkShardOperationsResponse> handler,, + Consumer<Exception> errorHandler);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, + return Collections.singletonList(new ShardFollowTasksExecutor(settings, client, threadPool, clusterService));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, + private String followerHistoryUUID;, + final String followerHistoryUUID,, + this.followerHistoryUUID = followerHistoryUUID;, + innerSendBulkShardOperationsRequest(followerHistoryUUID, operations, leaderMaxSeqNoOfUpdatesOrDeletes,, + protected abstract void innerSendBulkShardOperationsRequest(String followerHistoryUUID,, + List<Translog.Operation> operations,, + long leaderMaxSeqNoOfUpdatesOrDeletes,, + Consumer<BulkShardOperationsResponse> handler,, + Consumer<Exception> errorHandler);,
[+++ b/docs/plugins/repository-gcs.asciidoc, + "client_id": "...", +`project_id`::, +, + The Google Cloud project id. This will be automatically infered from the credentials file but, + can be specified explicitly. For example, it can be used to switch between projects when the, + same credentials are usable for both the production and the development projects., +, +++ b/docs/plugins/repository-gcs.asciidoc, + "client_id": "...", +`project_id`::, +, + The Google Cloud project id. This will be automatically infered from the credentials file but, + can be specified explicitly. For example, it can be used to switch between projects when the, + same credentials are usable
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java, +import org.elasticsearch.action.ingest.GetPipelineRequest;, +import org.elasticsearch.action.ingest.GetPipelineResponse;, +, + /**, + * Get an existing pipeline, + * <p>, + * See, + * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/get-pipeline-api.html"> Get Pipeline API on elastic.co</a>, + */, + public GetPipelineResponse getPipeline(GetPipelineRequest request, Header... headers) throws IOException {, + return restHighLevelClient.performRequestAndParseEntity( request, RequestConverters::getPipeline,, + GetPipelineResponse::fromXContent, emptySet(), headers);, + }, +, + /**, + * Asynchronously get an existing pipeline, + * <p>, + * See, + * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-pipeline-api.html"> Get Pipeline API on elastic.co</a>, + */, + public void getPipelineAsync(GetPipelineRequest request, ActionListener<GetPipelineResponse> listener, Header... headers) {, + restHighLevelClient.performRequestAsyncAndParseEntity( request, RequestConverters::getPipeline,, + GetPipelineResponse::fromXContent, listener, emptySet(), headers);,
[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, + // winrm commands run as administrator, + javaPackagingTest.args = ['--command', 'powershell -File "$Env:PACKAGING_TESTS/run-tests.ps1"'], +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, + // winrm commands run as administrator, + javaPackagingTest.args = ['--command', 'powershell -File "$Env:PACKAGING_TESTS/run-tests.ps1"'], +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-b9e064b935, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, + // winrm commands run as administrator, + javaPackagingTest.args = ['--command', 'powershell -File "$Env:PACKAGING_TESTS/run-tests.ps1"'], +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-b9e064b935, +++ b/client/rest-high-level/build.gradle, +import org.elasticsearch.gradle.precommit.PrecommitTasks, +, + nebula {, + compile "org.elasticsearch:elasticsearch:${version}", + compile "org.elasticsearch.client:elasticsearch-rest-client:${version}", + compile "org.elasticsearch.plugin:parent-join-client:${version}", + compile "org.elasticsearch.plugin:aggs-matrix-stats-client:${version}", + compile "org.elasticsearch.plugin:rank-eval-client:${version}", + compile "org.elasticsearch.plugin:lang-mustache-client:${version}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, + // winrm
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/server/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +++ b/server/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +++ b/server/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepository.java]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, + private final Logger logger = Loggers.getLogger(AzureBlobContainer.class);, + private final AzureBlobStore blobStore;, + private final String keyPath;, + public AzureBlobContainer(BlobPath path, AzureBlobStore blobStore) {, + return blobStore.blobExists(buildKey(blobName));, + logger.warn("can not access [{}] in container {{}}: {}", blobName, blobStore, e.getMessage());, + return blobStore.getInputStream(buildKey(blobName));, + blobStore.deleteBlob(buildKey(blobName));, + logger.warn("can not access [{}] in container {{}}: {}", blobName, blobStore, e.getMessage());, + return blobStore.listBlobsByPrefix(keyPath, prefix);, + logger.warn("can not access [{}] in container {{}}: {}", prefix, blobStore, e.getMessage());, + logger.debug("moving blob [{}] to [{}] in container {{}}", source, target, blobStore);, + blobStore.moveBlob(source, target);, + logger.warn("can not move blob [{}] to [{}] in container
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/server/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, + public ClusterService(Settings settings, ClusterSettings clusterSettings, ThreadPool threadPool,, + MasterService masterService) {, + this.masterService = masterService;, + public ClusterService(Settings settings, ClusterSettings clusterSettings, ThreadPool threadPool) {, + this(settings, clusterSettings, threadPool, new MasterService(Node.NODE_NAME_SETTING.get(settings), settings, threadPool));, + }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, + public ClusterService(Settings settings, ClusterSettings clusterSettings, ThreadPool threadPool,, + MasterService masterService) {, + this.masterService = masterService;, + public ClusterService(Settings settings, ClusterSettings clusterSettings, ThreadPool threadPool) {, + this(settings, clusterSettings, threadPool, new MasterService(Node.NODE_NAME_SETTING.get(settings), settings, threadPool));, + }, +, +++ b/server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java, + public static Runnable onNode(DiscoveryNode node, Runnable runnable) {, +++ b/server/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, + public ClusterService(Settings settings, ClusterSettings clusterSettings, ThreadPool threadPool,, + MasterService
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/PutWatchResponse.java, +public class PutWatchResponse {, + = new ObjectParser<>("x_pack_put_watch_response", true, PutWatchResponse::new);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/PutWatchResponse.java, +public class PutWatchResponse {, + = new ObjectParser<>("x_pack_put_watch_response", true, PutWatchResponse::new);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/watcher/PutWatchResponseTests.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.test.ESTestCase;, +import static org.elasticsearch.test.AbstractXContentTestCase.xContentTester;, +public class PutWatchResponseTests extends ESTestCase {, +, + public void testFromXContent() throws IOException {, + xContentTester(this::createParser,, + PutWatchResponseTests::createTestInstance,, + PutWatchResponseTests::toXContent,, + PutWatchResponse::fromXContent), + .supportsUnknownFields(true), + .assertToXContentEquivalence(false), + .test();, + }, +, + private static XContentBuilder toXContent(PutWatchResponse response, XContentBuilder builder) throws IOException {, + return builder.startObject(), + .field("_id", response.getId()), + .field("_version", response.getVersion()), + .field("created", response.isCreated()), + .endObject();, + }, +, + private static PutWatchResponse createTestInstance() {]
[+++ b/server/src/test/java/org/elasticsearch/indices/recovery/RecoveryTests.java, + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32089")]
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, + String endpoint = explainRequest.isTypeless(), + ? endpoint(explainRequest.index(), "_explain", explainRequest.id()), + : endpoint(explainRequest.index(), explainRequest.type(), explainRequest.id(), "_explain");, + Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, + String endpoint = explainRequest.isTypeless(), + ? endpoint(explainRequest.index(), "_explain", explainRequest.id()), + : endpoint(explainRequest.index(), explainRequest.type(), explainRequest.id(), "_explain");, + Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, + ExplainRequest explainRequest = new ExplainRequest(index, id);, + assertEquals("/" + index + "/_explain/" + id, request.getEndpoint());, +, + public void testExplainWithType() throws IOException {, + String index = randomAlphaOfLengthBetween(3, 10);, + String type = randomAlphaOfLengthBetween(3, 10);, + String id = randomAlphaOfLengthBetween(3, 10);, +, + ExplainRequest explainRequest =
[+++ b/x-pack/plugin/data-frame/src/main/java/org/elasticsearch/xpack/dataframe/persistence/DataFrameTransformsConfigManager.java, +import org.elasticsearch.search.sort.SortOrder;, + .addSort(DataFrameField.ID.getPreferredName(), SortOrder.ASC)]
[+++ b/TESTING.asciidoc, +== Testing packaging, +The packaging tests use Vagrant virtual machines to verify that installing, +and running elasticsearch distributions works correctly on supported operating systems., +These tests should really only be run in vagrant vms because they're destructive., +. (Optional) Install https://github.com/fgrehm/vagrant-cachier[vagrant-cachier] to squeeze, +a bit more performance out of the process:, +download the base images and provision the boxes and immediately quit. Downloading all, +the images may take a long time. After the images are already on your machine, they won't, +be downloaded again unless they have been updated to a new version., +You can choose which
[+++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-b9e064b935, +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0 0 0\n)+/], +ccr (default distro only), + 0 0 0, +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0 0 0\n)+/], +ccr (default distro only), + 0 0 0, +++ b/docs/reference/indices/flush.asciidoc, + "max_unsafe_auto_id_timestamp" : "-1",, + "min_retained_seq_no": "0", +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0
[+++ b/Vagrantfile, +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantPropertiesExtension.groovy, +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, + vagrantSetUpTask.dependsOn copyPackagingArchives, createVersionFile, createUpgradeFromFile, createUpgradeIsOssFile, + // This task doesn't do anything yet. In the future it will execute a jar containing tests on the vm, + Task groovyPackagingTest = project.tasks.create("vagrant${boxTask}#groovyPackagingTest"), + groovyPackagingTest.dependsOn(up), + groovyPackagingTest.finalizedBy(halt), + TaskExecutionAdapter groovyPackagingReproListener = createReproListener(project, groovyPackagingTest.path), + groovyPackagingTest.doFirst {, + project.gradle.addListener(groovyPackagingReproListener), + groovyPackagingTest.doLast {, + project.gradle.removeListener(groovyPackagingReproListener), + packagingTest.dependsOn(groovyPackagingTest), +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, + vagrantSetUpTask.dependsOn copyPackagingArchives, createVersionFile, createUpgradeFromFile, createUpgradeIsOssFile, + // This task doesn't do anything yet. In the future
[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, + // end::update-request-cas]
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/docs/reference/analysis/tokenfilters.asciidoc, +, +include::tokenfilters/remove-duplicates-tokenfilter.asciidoc[], +++ b/docs/reference/analysis/tokenfilters.asciidoc, +, +include::tokenfilters/remove-duplicates-tokenfilter.asciidoc[], +++ b/docs/reference/analysis/tokenfilters/remove-duplicates-tokenfilter.asciidoc, +[[analysis-remove-duplicates-tokenfilter]], +=== Remove Duplicates Token Filter, +, +A token filter of type `remove_duplicates` that drops identical tokens at the, +same position., +++ b/docs/reference/analysis/tokenfilters.asciidoc, +, +include::tokenfilters/remove-duplicates-tokenfilter.asciidoc[], +++ b/docs/reference/analysis/tokenfilters/remove-duplicates-tokenfilter.asciidoc, +[[analysis-remove-duplicates-tokenfilter]], +=== Remove Duplicates Token Filter, +, +A token filter of type `remove_duplicates` that drops identical tokens at the, +same position., +++ b/modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/CommonAnalysisPlugin.java, + filters.put("remove_duplicates", RemoveDuplicatesTokenFilterFactory::new);, +++ b/docs/reference/analysis/tokenfilters.asciidoc, +, +include::tokenfilters/remove-duplicates-tokenfilter.asciidoc[], +++ b/docs/reference/analysis/tokenfilters/remove-duplicates-tokenfilter.asciidoc, +[[analysis-remove-duplicates-tokenfilter]], +=== Remove Duplicates Token Filter, +, +A token filter of type `remove_duplicates` that drops identical tokens at the, +same position., +++ b/modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/CommonAnalysisPlugin.java, + filters.put("remove_duplicates", RemoveDuplicatesTokenFilterFactory::new);, +++ b/modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/RemoveDuplicatesTokenFilterFactory.java, +/*, +
[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/AnalysisConfig.java, + Boolean multivariateByFields) {, + // BWC for removed per-partition normalization, + // Version check is temporarily against the latest to satisfy CI tests, + // TODO change to V_6_5_0 after successful backport to 6.x, + if (in.getVersion().before(Version.V_7_0_0_alpha1)) {, + in.readBoolean();, + }, + // BWC for removed per-partition normalization, + // Version check is temporarily against the latest to satisfy CI tests, + // TODO change to V_6_5_0 after successful backport to 6.x, + if (out.getVersion().before(Version.V_7_0_0_alpha1)) {, + out.writeBoolean(false);, + }, + multivariateByFields, + resultFinalizationWindow, multivariateByFields);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/AnalysisConfig.java, + Boolean multivariateByFields) {, + // BWC for
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolatorFieldMapper.java, +, + QueryBuilder queryBuilderForProcessing = queryBuilder.rewrite(new QueryShardContext(queryShardContext) {, +, + @Override, + public boolean convertNowRangeToMatchAll() {, + return true;, + }, + });, + Query query = toQuery(queryShardContext, isMapUnmappedFieldAsText(), queryBuilderForProcessing);, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolatorFieldMapper.java, +, + QueryBuilder queryBuilderForProcessing = queryBuilder.rewrite(new QueryShardContext(queryShardContext) {, +, + @Override, + public boolean convertNowRangeToMatchAll() {, + return true;, + }, + });, + Query query = toQuery(queryShardContext, isMapUnmappedFieldAsText(), queryBuilderForProcessing);, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorQuerySearchTests.java, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.Query;, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.index.engine.Engine;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.index.query.QueryShardContext;, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +import static org.elasticsearch.index.query.QueryBuilders.rangeQuery;, +import static org.elasticsearch.index.query.QueryBuilders.scriptQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +import static org.hamcrest.Matchers.equalTo;, + public void testRangeQueriesWithNow() throws Exception
[+++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/MultiSearchTemplateResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.unit.TimeValue;, + private long tookInMillis; , + public MultiSearchTemplateResponse(Item[] items, long tookInMillis) {, + this.tookInMillis = tookInMillis;, + /**, + * How long the msearch_template took., + */, + public TimeValue getTook() {, + return new TimeValue(tookInMillis);, + }, +, + if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, + tookInMillis = in.readVLong();, + }, + if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, + out.writeVLong(tookInMillis);, + }, + builder.field("took", tookInMillis); , +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/MultiSearchTemplateResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.unit.TimeValue;, + private long tookInMillis; , + public MultiSearchTemplateResponse(Item[] items, long tookInMillis) {, + this.tookInMillis = tookInMillis;, + /**, + * How long the msearch_template took., +
[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Max.java, +import static org.elasticsearch.xpack.sql.expression.TypeResolutions.isExact;, + return isExact(field(), sourceText(), ParamOrdinal.DEFAULT);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Max.java, +import static org.elasticsearch.xpack.sql.expression.TypeResolutions.isExact;, + return isExact(field(), sourceText(), ParamOrdinal.DEFAULT);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Min.java, +import static org.elasticsearch.xpack.sql.expression.TypeResolutions.isExact;, + return isExact(field(), sourceText(), ParamOrdinal.DEFAULT);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Max.java, +import static org.elasticsearch.xpack.sql.expression.TypeResolutions.isExact;, + return isExact(field(), sourceText(), ParamOrdinal.DEFAULT);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Min.java, +import static org.elasticsearch.xpack.sql.expression.TypeResolutions.isExact;, + return isExact(field(), sourceText(), ParamOrdinal.DEFAULT);, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java, + public void testMinOnInexactUnsupported() {, + assertEquals("1:8: [MIN(text)] cannot operate on field of data type [text]: " +, + "No keyword/multi-field defined exact matches for [text]; define one or use MATCH/QUERY instead",, + error("SELECT MIN(text) FROM test"));, + }, +, + public void testMaxOnInexactUnsupported() {, + assertEquals("1:8:
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.storedscripts.PutStoredScriptRequest;, + static Request putScript(PutStoredScriptRequest putStoredScriptRequest) throws IOException {, + String endpoint = new EndpointBuilder().addPathPartAsIs("_scripts").addPathPart(putStoredScriptRequest.id()).build();, + Request request = new Request(HttpPost.METHOD_NAME, endpoint);, + Params params = new Params(request);, + params.withTimeout(putStoredScriptRequest.timeout());, + params.withMasterTimeout(putStoredScriptRequest.masterNodeTimeout());, + if (Strings.hasText(putStoredScriptRequest.context())) {, + params.putParam("context", putStoredScriptRequest.context());, + }, + request.setEntity(createEntity(putStoredScriptRequest, REQUEST_BODY_CONTENT_TYPE));, + return request;, + }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.storedscripts.PutStoredScriptRequest;, + static Request putScript(PutStoredScriptRequest putStoredScriptRequest) throws IOException {, + String endpoint = new EndpointBuilder().addPathPartAsIs("_scripts").addPathPart(putStoredScriptRequest.id()).build();, + Request request = new Request(HttpPost.METHOD_NAME, endpoint);, + Params params = new Params(request);, + params.withTimeout(putStoredScriptRequest.timeout());, + params.withMasterTimeout(putStoredScriptRequest.masterNodeTimeout());, + if (Strings.hasText(putStoredScriptRequest.context())) {, + params.putParam("context", putStoredScriptRequest.context());, + }, + request.setEntity(createEntity(putStoredScriptRequest,
[+++ b/server/src/main/java/org/elasticsearch/index/seqno/LocalCheckpointTracker.java, + final int bitSetOffset = seqNoToBitSetOffset(seqNo);, + final CountedBitSet bitSet = processedSeqNo.get(bitSetKey);, + return bitSet != null && bitSet.get(bitSetOffset);]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ /dev/null, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/TimedRequest.java, + private TimeValue timeout;, + private TimeValue masterTimeout;, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/TimedRequest.java, + private TimeValue timeout;, + private TimeValue masterTimeout;, +++ /dev/null, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/TimedRequest.java, + private TimeValue timeout;, + private TimeValue masterTimeout;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/TimedRequest.java, + private TimeValue timeout;, + private TimeValue masterTimeout;, +++ /dev/null, +++ /dev/null, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/TimedRequest.java, + private TimeValue
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RollupClient.java, +import org.elasticsearch.client.rollup.DeleteRollupJobRequest;, +import org.elasticsearch.client.rollup.DeleteRollupJobResponse;, + * Delete a rollup job from the cluster, + * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-delete-job.html">, + * the docs</a> for more., + * @param request the request, + * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, + * @return the response, + * @throws IOException in case there is a problem sending the request or parsing back the response, + */, + public DeleteRollupJobResponse deleteRollupJob(DeleteRollupJobRequest request, RequestOptions options) throws IOException {, + return restHighLevelClient.performRequestAndParseEntity(request,, + RollupRequestConverters::deleteJob,, + options,, + DeleteRollupJobResponse::fromXContent,, + Collections.emptySet());, + }, +
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, + //TODO: remove this once the cname is prepended to the address by default in 7.0, + systemProperty 'es.http.cname_in_publish_address', 'true', +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, + //TODO: remove this once the cname is prepended to the address by default in 7.0, + systemProperty 'es.http.cname_in_publish_address', 'true', +, +++ b/docs/build.gradle, + //TODO: remove this once the cname is prepended to the address by default in 7.0, + systemProperty 'es.http.cname_in_publish_address', 'true', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, + //TODO: remove this once the cname is prepended to the address by default in 7.0, + systemProperty 'es.http.cname_in_publish_address', 'true', +, +++ b/docs/build.gradle, + //TODO: remove this once the
[+++ b/.ci/matrix-build-javas.yml, +# This file is used as part of a matrix build in Jenkins where the, +# values below are included as an axis of the matrix., +, +# This axis of the build matrix represents the versions of Java with, +# which Elasticsearch will be built. Valid Java versions are 'java', +# or 'openjdk' followed by the major release number., +, +++ b/.ci/matrix-build-javas.yml, +# This file is used as part of a matrix build in Jenkins where the, +# values below are included as an axis of the matrix., +, +# This axis of the build matrix
[+++ b/server/src/main/java/org/elasticsearch/index/engine/SoftDeletesPolicy.java, + * below the global checkpoint to retain (index.soft_deletes.retention.operations). The additional increments on the global, + * checkpoint and the local checkpoint of the safe commit are due to the fact that we want to retain all operations above, + * those checkpoints., + Math.min(1 + globalCheckpointSupplier.getAsLong() - retentionOperations, minimumRetainingSequenceNumber);, + final long minSeqNoToRetain = Math.min(minSeqNoForQueryingChanges, 1 + localCheckpointOfSafeCommit);, +++ b/server/src/main/java/org/elasticsearch/index/engine/SoftDeletesPolicy.java, + * below the global checkpoint to retain (index.soft_deletes.retention.operations). The additional increments on the global, + * checkpoint and the local checkpoint of the safe commit are due to the fact that we want to retain
[+++ b/x-pack/plugin/data-frame/src/main/java/org/elasticsearch/xpack/dataframe/action/TransportGetDataFrameTransformsAction.java, +import java.util.Comparator;, + List<DataFrameTransformConfig> configs = tasks.stream(), + .flatMap(r -> r.getTransformConfigurations().stream()), + .sorted(Comparator.comparing(DataFrameTransformConfig::getId)), + .collect(Collectors.toList());, +++ b/x-pack/plugin/data-frame/src/main/java/org/elasticsearch/xpack/dataframe/action/TransportGetDataFrameTransformsAction.java, +import java.util.Comparator;, + List<DataFrameTransformConfig> configs = tasks.stream(), + .flatMap(r -> r.getTransformConfigurations().stream()), + .sorted(Comparator.comparing(DataFrameTransformConfig::getId)), + .collect(Collectors.toList());, +++ b/x-pack/plugin/data-frame/src/main/java/org/elasticsearch/xpack/dataframe/action/TransportGetDataFrameTransformsStatsAction.java, +import java.util.Comparator;, + .flatMap(r -> r.getTransformsStateAndStats().stream()), + .sorted(Comparator.comparing(DataFrameTransformStateAndStats::getId)), +++ b/x-pack/plugin/data-frame/src/main/java/org/elasticsearch/xpack/dataframe/action/TransportGetDataFrameTransformsAction.java, +import java.util.Comparator;, + List<DataFrameTransformConfig> configs = tasks.stream(), + .flatMap(r -> r.getTransformConfigurations().stream()), + .sorted(Comparator.comparing(DataFrameTransformConfig::getId)), + .collect(Collectors.toList());, +++ b/x-pack/plugin/data-frame/src/main/java/org/elasticsearch/xpack/dataframe/action/TransportGetDataFrameTransformsStatsAction.java, +import java.util.Comparator;, + .flatMap(r -> r.getTransformsStateAndStats().stream()), + .sorted(Comparator.comparing(DataFrameTransformStateAndStats::getId)), +++ b/x-pack/plugin/src/test/resources/rest-api-spec/test/data_frame/transforms_crud.yml, + - match: { transforms.0.id: "airline-transform" }, + - match: { transforms.1.id: "airline-transform-dos" }, + - match: { transforms.0.id: "airline-transform" }, + - match: { transforms.1.id:
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.document.FieldType;, + PrefixFieldMapper prefixMapper = null;, + if (prefixFieldType != null) {, + if (fieldType().isSearchable() == false) {, + if (fieldType.indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {, + prefixFieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);, + }, + if (fieldType.storeTermVectorOffsets()) {, + prefixFieldType.setStoreTermVectorOffsets(true);, + }, + prefixFieldType.setAnalyzer(fieldType.indexAnalyzer());, + prefixMapper = new PrefixFieldMapper(prefixFieldType, context.indexSettings());, + }, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.document.FieldType;, + PrefixFieldMapper prefixMapper = null;, + if (prefixFieldType != null) {, + if (fieldType().isSearchable() == false) {, + if (fieldType.indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {, + prefixFieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);, + }, + if (fieldType.storeTermVectorOffsets()) {, + prefixFieldType.setStoreTermVectorOffsets(true);, + }, + prefixFieldType.setAnalyzer(fieldType.indexAnalyzer());, + prefixMapper = new PrefixFieldMapper(prefixFieldType, context.indexSettings());, + }, +++
[+++ /dev/null, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;, +import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +import org.elasticsearch.protocol.xpack.XPackUsageRequest;, +import org.elasticsearch.protocol.xpack.license.PutLicenseRequest;, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;, +import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +import org.elasticsearch.protocol.xpack.XPackUsageRequest;, +import org.elasticsearch.protocol.xpack.license.PutLicenseRequest;, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;, +import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +import org.elasticsearch.protocol.xpack.XPackUsageRequest;, +import org.elasticsearch.protocol.xpack.license.PutLicenseRequest;, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;, +import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +import org.elasticsearch.protocol.xpack.XPackUsageRequest;, +import org.elasticsearch.protocol.xpack.license.PutLicenseRequest;, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;, +import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +import org.elasticsearch.protocol.xpack.XPackUsageRequest;, +import org.elasticsearch.protocol.xpack.license.PutLicenseRequest;, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, + apiName.startsWith("watcher.") == false) {, +++ /dev/null,
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesRequest;, +import org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesResponse;, +, + /**, + * Gets index templates using the Index Templates API, + * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API, + * on elastic.co</a>, + * @param getIndexTemplatesRequest the request, + * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, + * @return the response, + * @throws IOException in case there is a problem sending the request or parsing back the response, + */, + public GetIndexTemplatesResponse getTemplate(GetIndexTemplatesRequest getIndexTemplatesRequest,, + RequestOptions options) throws IOException {, + return restHighLevelClient.performRequestAndParseEntity(getIndexTemplatesRequest, RequestConverters::getTemplates,, + options, GetIndexTemplatesResponse::fromXContent, emptySet());,
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/x-pack/plugin/sql/build.gradle, +ext {, + // SQL dependency versions, + jlineVersion="3.10.0", + antlrVersion="4.5.3", +}, +, + regenerate "org.antlr:antlr4:${antlrVersion}", +++ b/x-pack/plugin/sql/build.gradle, +ext {, + // SQL dependency versions, + jlineVersion="3.10.0", + antlrVersion="4.5.3", +}, +, + regenerate "org.antlr:antlr4:${antlrVersion}", +++ b/x-pack/plugin/sql/qa/build.gradle, + , + // select just the parts of JLine that are needed, + compile("org.jline:jline-terminal-jna:${jlineVersion}") {, + exclude group: "net.java.dev.jna", + }, + compile "org.jline:jline-terminal:${jlineVersion}", + compile "org.jline:jline-reader:${jlineVersion}", + compile "org.jline:jline-style:${jlineVersion}", +, + testRuntime "org.elasticsearch:jna:${versions.jna}", + testRuntime("org.antlr:antlr4-runtime:${antlrVersion}") {, +, + testRuntime("org.jline:jline-terminal-jna:${jlineVersion}") {, + exclude group: "net.java.dev.jna", + }, + testRuntime "org.jline:jline-terminal:${jlineVersion}", + testRuntime "org.jline:jline-reader:${jlineVersion}", + testRuntime "org.jline:jline-style:${jlineVersion}", +, + testRuntime "org.elasticsearch:jna:${versions.jna}",
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/server/src/main/java/org/elasticsearch/index/cache/query/DisabledQueryCache.java, +++ b/server/src/main/java/org/elasticsearch/index/cache/query/DisabledQueryCache.java, +++ b/server/src/main/java/org/elasticsearch/index/cache/query/IndexQueryCache.java, +++ b/server/src/main/java/org/elasticsearch/index/cache/query/DisabledQueryCache.java, +++ b/server/src/main/java/org/elasticsearch/index/cache/query/IndexQueryCache.java, +++ b/server/src/main/java/org/elasticsearch/index/cache/query/QueryCache.java]
[+++ b/Vagrantfile, +, + # https://github.com/elastic/elasticsearch/issues/30295, + config.vm.provider 'virtualbox' do |vbox|, + vbox.customize ['storagectl', :id, '--name', 'SATA Controller', '--hostiocache', 'on'], + end, +++ b/Vagrantfile, +, + # https://github.com/elastic/elasticsearch/issues/30295, + config.vm.provider 'virtualbox' do |vbox|, + vbox.customize ['storagectl', :id, '--name', 'SATA Controller', '--hostiocache', 'on'], + end, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, + gradleVersion = gradle.getGradleVersion(), +++ b/Vagrantfile, +, + # https://github.com/elastic/elasticsearch/issues/30295, + config.vm.provider 'virtualbox' do |vbox|, + vbox.customize ['storagectl', :id, '--name', 'SATA Controller', '--hostiocache', 'on'], + end, +++ b/build.gradle, +final boolean bwc_tests_enabled =
[+++ b/.gitignore, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/docs/en/index.asciidoc, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/docs/en/index.asciidoc, +++ b/docs/en/ml/buckets.asciidoc, +++++, +<titleabbrev>Buckets</titleabbrev>, +++++, +The {xpackml}
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, + checkDockerVersionRecent(dockerVersion), + protected static void checkDockerVersionRecent(String dockerVersion) {, + final Matcher matcher = dockerVersion =~ /Docker version (\d+\.\d+)\.\d+(?:-ce)?, build [0-9a-f]{7,40}/, + assert matcher.matches(): dockerVersion, + final dockerMajorMinorVersion = matcher.group(1), + final String[] majorMinor = dockerMajorMinorVersion.split("\\."), + if (Integer.parseInt(majorMinor[0]) < 17, + || (Integer.parseInt(majorMinor[0]) == 17 && Integer.parseInt(majorMinor[1]) < 5)) {, + final String message = String.format(, + Locale.ROOT,, + "building Docker images requires Docker version 17.05+ due to use of multi-stage builds yet was [%s]",, + dockerVersion), + throwDockerRequiredException(message), + }, + }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, + checkDockerVersionRecent(dockerVersion), + protected static void checkDockerVersionRecent(String dockerVersion) {, +
[+++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +protected abstract boolean isType(String name);, +TYPE: ID ( DOT ID )* { isType(getText()) }?;, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +protected abstract boolean isType(String name);, +TYPE: ID ( DOT ID )* { isType(getText()) }?;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, + Struct struct = definition.getPainlessStructFromJavaClass(clazz);, + struct = definition.getPainlessStructFromJavaClass(iface);, + Class<?> interfaceType = method.arguments.get(i - 1 - replaced);, + MethodType nestedType = MethodType.methodType(interfaceType, captures);, + Definition.ClassToName(interfaceType));, + Class<?> interfaceType = definition.getJavaClassFromPainlessType(interfaceClass);, + Method interfaceMethod = definition.getPainlessStructFromJavaClass(interfaceType).functionalMethod;, + Class<?> clazz, String type, String call, Class<?>... captures), + Method interfaceMethod = definition.getPainlessStructFromJavaClass(clazz).functionalMethod;, + "to [" + Definition.ClassToName(clazz) + "], not a functional interface");, + "] in ["
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/TermVectorsRequest.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/TermVectorsRequest.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, + TermVectorsRequest tvRequestTemplate = new TermVectorsRequest(sourceIndex, "_doc", "fake_id");, +, + TermVectorsRequest tvRequest2 = new TermVectorsRequest(sourceIndex, "_doc", docBuilder);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/TermVectorsRequest.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, + TermVectorsRequest tvRequestTemplate = new TermVectorsRequest(sourceIndex, "_doc", "fake_id");, +, + TermVectorsRequest tvRequest2 = new TermVectorsRequest(sourceIndex, "_doc", docBuilder);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +, + TermVectorsRequest tvrequest2 =, + new TermVectorsRequest("authors", "_doc", docBuilder);, + new TermVectorsRequest("authors", "_doc", "fake_id"); // <1>]
[+++ b/.ci/java-versions.properties, +++ b/.ci/java-versions.properties, +++ /dev/null, +++ b/.ci/java-versions.properties, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, + static Request rethrottleReindex(RethrottleRequest rethrottleRequest) {, + return rethrottle(rethrottleRequest, "_reindex");, + }, +, + static Request rethrottleUpdateByQuery(RethrottleRequest rethrottleRequest) {, + return rethrottle(rethrottleRequest, "_update_by_query");, + }, +, + static Request rethrottleDeleteByQuery(RethrottleRequest rethrottleRequest) {, + return rethrottle(rethrottleRequest, "_delete_by_query");, + }, +, + private static Request rethrottle(RethrottleRequest rethrottleRequest, String firstPathPart) {, + String endpoint = new EndpointBuilder().addPathPart(firstPathPart).addPathPart(rethrottleRequest.getTaskId().toString()), +++ b/.ci/java-versions.properties, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, + static Request rethrottleReindex(RethrottleRequest rethrottleRequest) {, + return rethrottle(rethrottleRequest, "_reindex");, + }, +, + static Request rethrottleUpdateByQuery(RethrottleRequest rethrottleRequest) {, + return rethrottle(rethrottleRequest, "_update_by_query");, + }, +, +
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed
[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/action/TransportFreezeIndexAction.java, + imdBuilder.settingsVersion(meta.getSettingsVersion() + 1);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/action/TransportFreezeIndexAction.java, + imdBuilder.settingsVersion(meta.getSettingsVersion() + 1);, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/index/engine/FrozenIndexTests.java, +import static org.hamcrest.Matchers.equalTo;, +, + public void testFreezeIndexIncreasesIndexSettingsVersion() throws ExecutionException, InterruptedException {, + final String index = "test";, + createIndex(index, Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0).build());, + client().prepareIndex(index, "_doc").setSource("field", "value").execute().actionGet();, +, + final long settingsVersion = client().admin().cluster().prepareState().get(), + .getState().metaData().index(index).getSettingsVersion();, +, + XPackClient xPackClient = new XPackClient(client());, + assertAcked(xPackClient.freeze(new TransportFreezeIndexAction.FreezeRequest(index)));, + assertIndexFrozen(index);, + assertThat(client().admin().cluster().prepareState().get().getState().metaData().index(index).getSettingsVersion(),, + equalTo(settingsVersion + 1));, + }]
[+++ b/server/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.common.Strings;, + if (Strings.isEmpty(type)) {, + if (Strings.isEmpty(id)) {, + if (versionType.validateVersionForWrites(version) == false) {, +++ b/server/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.common.Strings;, + if (Strings.isEmpty(type)) {, + if (Strings.isEmpty(id)) {, + if (versionType.validateVersionForWrites(version) == false) {, +++ b/server/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, + if (Strings.isEmpty(type)) {, + validationException = addValidationError("type is missing", validationException);, + if (Strings.isEmpty(id)) {, + validationException = addValidationError("id is missing", validationException);, +++ b/server/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.common.Strings;, + if (Strings.isEmpty(type)) {, + if (Strings.isEmpty(id)) {, + if (versionType.validateVersionForWrites(version) == false) {, +++ b/server/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, + if (Strings.isEmpty(type)) {, + validationException = addValidationError("type is missing", validationException);,
[+++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, + if (delete.origin().isFromTranslog() == false && deleteResult.getResultType() == Result.Type.SUCCESS) {, + final Translog.Location location = translog.add(new Translog.Delete(delete, deleteResult));, + maybeFailEngine("delete", e);, + throw new AssertionError("delete operation should never fail at document level", ex);, + throw ex;, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, + if (delete.origin().isFromTranslog() == false && deleteResult.getResultType() == Result.Type.SUCCESS) {, + final Translog.Location location = translog.add(new Translog.Delete(delete, deleteResult));, + maybeFailEngine("delete", e);, + throw new AssertionError("delete operation should never fail at document level", ex);, + throw ex;, +++ b/server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, + public void testDeleteWithFatalError() throws Exception {, + final IllegalStateException tragicException = new IllegalStateException("fail to store tombstone");, + try (Store store
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrIntegTestCase.java, +import org.elasticsearch.license.LicensesMetaData;, + assertBusy(() -> {, + ClusterService clusterService = leaderCluster.getMasterNodeInstance(ClusterService.class);, + assertNotNull(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, + });, + assertBusy(() -> {, + ClusterService clusterService = followerCluster.getMasterNodeInstance(ClusterService.class);, + assertNotNull(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, + });, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrIntegTestCase.java, +import org.elasticsearch.license.LicensesMetaData;, + assertBusy(() -> {, + ClusterService clusterService = leaderCluster.getMasterNodeInstance(ClusterService.class);, + assertNotNull(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, + });, + assertBusy(() -> {, + ClusterService clusterService = followerCluster.getMasterNodeInstance(ClusterService.class);, + assertNotNull(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, + });, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrSingleNodeTestCase.java, +import org.elasticsearch.license.LicensesMetaData;, + @Before, + public void waitForTrialLicenseToBeGenerated() throws Exception {, + assertBusy(() -> assertNotNull(getInstanceFromNode(ClusterService.class).state().metaData().custom(LicensesMetaData.TYPE)));, + }, +]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/docs/reference/ingest/ingest-node.asciidoc, +| `target_field` | no | `field` | The field to assign the converted value to, by default `field` is updated in-place, +| `ignore_missing` | no | `false` | If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document, +| `target_field` | no | `field` | The field to assign the joined value to, by default `field` is updated in-place, +| `target_field` | no | `field` | The field to assign the converted value to, by default `field` is updated in-place, +| `target_field` | no | `field` | The field
[+++ b/build.gradle, +boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/pull/40177" /* place a PR link here when committing bwc changes */, +++ b/build.gradle, +boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/pull/40177" /* place a PR link here when committing bwc changes */, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/InternalAggregations.java, +++ b/build.gradle, +boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/pull/40177" /* place a PR link here when committing bwc changes */, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/InternalAggregations.java, +++ b/server/src/test/java/org/elasticsearch/search/aggregations/InternalAggregationsTests.java]
[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, + String cookieString = nettyRequest.headers().get(HttpHeaderNames.COOKIE);]
[+++ b/server/src/test/java/org/elasticsearch/action/admin/indices/rollover/RolloverIT.java, + assumeTrue("only works on the same day", now.plusMinutes(5).getDayOfYear() == now.getDayOfYear());]
[+++ b/buildSrc/build.gradle, +if (GradleVersion.current() < GradleVersion.version('4.9')) {, + throw new GradleException('Gradle 4.9+ is required to build elasticsearch'), +++ b/buildSrc/build.gradle, +if (GradleVersion.current() < GradleVersion.version('4.9')) {, + throw new GradleException('Gradle 4.9+ is required to build elasticsearch'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, + if (GradleVersion.current() < GradleVersion.version('4.9')) {, + throw new GradleException('Gradle 4.9+ is required to use elasticsearch.build plugin'), + }, +++ b/buildSrc/build.gradle, +if (GradleVersion.current() < GradleVersion.version('4.9')) {, + throw new GradleException('Gradle 4.9+ is required to build elasticsearch'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, + if (GradleVersion.current() < GradleVersion.version('4.9')) {, + throw new GradleException('Gradle 4.9+ is required to use elasticsearch.build plugin'), + }, +++ b/buildSrc/version.properties, +lucene = 7.4.0, +++
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.client.core.MultiTermVectorsRequest;, + static Request mtermVectors(MultiTermVectorsRequest mtvrequest) throws IOException {, + String endpoint = "_mtermvectors";, + Request request = new Request(HttpGet.METHOD_NAME, endpoint);, + request.setEntity(createEntity(mtvrequest, REQUEST_BODY_CONTENT_TYPE));, + return request;, + }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.client.core.MultiTermVectorsRequest;, + static Request mtermVectors(MultiTermVectorsRequest mtvrequest) throws IOException {, + String endpoint = "_mtermvectors";, + Request request = new Request(HttpGet.METHOD_NAME, endpoint);, + request.setEntity(createEntity(mtvrequest, REQUEST_BODY_CONTENT_TYPE));, + return request;, + }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.client.core.MultiTermVectorsRequest;, +import org.elasticsearch.client.core.MultiTermVectorsResponse;, + * Calls the Multi Term Vectors API, + *, + * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-termvectors.html">Multi Term Vectors API, + * on elastic.co</a>, + *, + * @param
[+++ b/x-pack/plugin/sql/src/main/antlr/SqlBase.g4, + : (PLUS | MINUS)? DECIMAL_VALUE #decimalLiteral, + | (PLUS | MINUS)? INTEGER_VALUE #integerLiteral, +++ b/x-pack/plugin/sql/src/main/antlr/SqlBase.g4, + : (PLUS | MINUS)? DECIMAL_VALUE #decimalLiteral, + | (PLUS | MINUS)? INTEGER_VALUE #integerLiteral, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java, + _errHandler.sync(this);, + switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {, + case 1:, + case 2:, + case PLUS:, + case MINUS:, + public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }, + public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }, + public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }, + public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }, + int _la;, + setState(723);, + _errHandler.sync(this);, + switch
[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ResponseHandler.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ccr.action;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReferenceArray;, +, +final class ResponseHandler {, +, + private final AtomicInteger counter;, + private final AtomicReferenceArray<Object> responses;, + private final ActionListener<AcknowledgedResponse> listener;, +, + ResponseHandler(int numRequests, ActionListener<AcknowledgedResponse> listener) {, + this.counter = new AtomicInteger(numRequests);, + this.responses = new AtomicReferenceArray<>(numRequests);, + this.listener = listener;, +
[+++ /dev/null, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, + /**, + * Get Java home for the project for the specified version. If the specified version is not configured, an exception with the specified, + * message is thrown., + *, + * @param project the project, + * @param version the version of Java home to obtain, + * @param message the exception message if Java home for the specified version is not configured, + * @return Java home for the specified version, + * @throws GradleException if Java home for the specified version is not configured, + */, +
[+++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, + private final Map<Setting<?>, SettingUpgrader<?>> settingUpgraders;, + settingUpgraders.stream().collect(Collectors.toMap(SettingUpgrader::getSetting, Function.identity())));, +, + final SettingUpgrader<?> upgrader = settingUpgraders.get(setting);, + if (setting.isListSetting()) {, + final List<String> value = settings.getAsList(key);, + final String upgradedKey = upgrader.getKey(key);, + final List<String> upgradedValue = upgrader.getListValue(value);, + builder.putList(upgradedKey, upgradedValue);, + } else {, + final String value = settings.get(key);, + final String upgradedKey = upgrader.getKey(key);, + final String upgradedValue = upgrader.getValue(value);, + builder.put(upgradedKey, upgradedValue);, + }, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, + private final Map<Setting<?>, SettingUpgrader<?>> settingUpgraders;, + settingUpgraders.stream().collect(Collectors.toMap(SettingUpgrader::getSetting, Function.identity())));, +, + final SettingUpgrader<?> upgrader = settingUpgraders.get(setting);, + if (setting.isListSetting()) {, + final List<String> value = settings.getAsList(key);, +
[+++ b/gradle.properties, +org.gradle.daemon=true]
[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrRetentionLeases.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.support.PlainActionFuture;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.seqno.RetentionLeaseActions;, +import org.elasticsearch.index.seqno.RetentionLeaseAlreadyExistsException;, +import org.elasticsearch.index.seqno.RetentionLeaseNotFoundException;, +import org.elasticsearch.index.shard.ShardId;, +import java.util.Optional;, +, +import static org.elasticsearch.index.seqno.RetentionLeaseActions.RETAIN_ALL;, + /**, + * Synchronously requests to add a retention lease with the specified retention lease ID on the specified leader shard using the given, + * remote client. Note that this method will block up to the specified timeout., + *, + * @param leaderShardId the leader shard ID, + * @param retentionLeaseId the retention lease ID, + * @param remoteClient the remote client on which to execute this request, + * @param timeout
[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineRequestBuilder.java, +public class GetPipelineRequestBuilder, + extends MasterNodeReadOperationRequestBuilder<GetPipelineRequest, GetPipelineResponse, GetPipelineRequestBuilder> {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineRequestBuilder.java, +public class GetPipelineRequestBuilder, + extends MasterNodeReadOperationRequestBuilder<GetPipelineRequest, GetPipelineResponse, GetPipelineRequestBuilder> {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineTransportAction.java, + super(settings, GetPipelineAction.NAME, transportService, clusterService, threadPool, actionFilters, GetPipelineRequest::new,, + indexNameExpressionResolver);, + protected void masterOperation(GetPipelineRequest request, ClusterState state, ActionListener<GetPipelineResponse> listener), + throws Exception {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineRequestBuilder.java, +public class GetPipelineRequestBuilder, + extends MasterNodeReadOperationRequestBuilder<GetPipelineRequest, GetPipelineResponse, GetPipelineRequestBuilder> {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineTransportAction.java, + super(settings, GetPipelineAction.NAME, transportService, clusterService, threadPool, actionFilters, GetPipelineRequest::new,, + indexNameExpressionResolver);, + protected void masterOperation(GetPipelineRequest request, ClusterState state, ActionListener<GetPipelineResponse> listener), + throws Exception {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/PutPipelineTransportAction.java, + protected void masterOperation(PutPipelineRequest request, ClusterState
[+++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, + IndexMetaData build = IndexMetaData.builder(""), + .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), + .numberOfShards(1).numberOfReplicas(0).build();, + IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, + ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, + IndexMetaData build = IndexMetaData.builder(""), + .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), + .numberOfShards(1).numberOfReplicas(0).build();, + IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, + ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, + IndexMetaData build = IndexMetaData.builder(""), + .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), + .numberOfShards(1).numberOfReplicas(0).build();, + IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, + ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, + parseContext = new ParseContext.InternalParseContext(settings, mapperService.documentMapperParser(),, + IndexMetaData build = IndexMetaData.builder(""), +
[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4InternalESLogger.java, +import org.apache.logging.log4j.LogManager;, + this.logger = LogManager.getLogger(name);, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4InternalESLogger.java, +import org.apache.logging.log4j.LogManager;, + this.logger = LogManager.getLogger(name);, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4InternalESLogger.java, +import org.apache.logging.log4j.LogManager;, + this.logger = LogManager.getLogger(name);, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java, +import org.apache.logging.log4j.LogManager;, + Logger clusterLogger = LogManager.getLogger("org.elasticsearch.cluster.service");, + Logger clusterLogger = LogManager.getLogger("org.elasticsearch.cluster.service");, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4InternalESLogger.java, +import org.apache.logging.log4j.LogManager;, + this.logger = LogManager.getLogger(name);, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java, +import org.apache.logging.log4j.LogManager;, + Logger clusterLogger = LogManager.getLogger("org.elasticsearch.cluster.service");, + Logger clusterLogger = LogManager.getLogger("org.elasticsearch.cluster.service");, +++ b/server/src/test/java/org/elasticsearch/cluster/service/MasterServiceTests.java, +import org.apache.logging.log4j.LogManager;, + Logger clusterLogger = LogManager.getLogger(masterService.getClass().getPackage().getName());, + Logger clusterLogger = LogManager.getLogger(masterService.getClass().getPackage().getName());, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4InternalESLogger.java, +import org.apache.logging.log4j.LogManager;, + this.logger = LogManager.getLogger(name);, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java, +import org.apache.logging.log4j.LogManager;, + Logger clusterLogger = LogManager.getLogger("org.elasticsearch.cluster.service");,
[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +++ /dev/null]
[+++ b/buildSrc/build.gradle, +, + /*, + * We alread configure publication and we don't need or want this one that, + * comes from the java-gradle-plugin., + */, + afterEvaluate {, + generatePomFileForPluginMavenPublication.enabled = false, + }, +++ b/buildSrc/build.gradle, +, + /*, + * We alread configure publication and we don't need or want this one that, + * comes from the java-gradle-plugin., + */, + afterEvaluate {, + generatePomFileForPluginMavenPublication.enabled = false, + }, +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-608f0277b0, +++ b/buildSrc/build.gradle, +, + /*, + * We alread configure publication and we don't need or want this one that,
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/gradle.properties, +org.gradle.jvmargs=-Xmx1792m]
[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +import java.util.Locale;, + patternsForTheSameRemoteCluster, remoteClusterState.metaData(), resultHandler);, + MetaData remoteMetadata,, + final Settings leaderIndexSettings = remoteMetadata.getIndexSafe(indexToFollow).getSettings();, + if (leaderIndexSettings.getAsBoolean(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(),, + IndexMetaData.SETTING_INDEX_VERSION_CREATED.get(leaderIndexSettings).onOrAfter(Version.V_7_0_0)) == false) {, +, + String message = String.format(Locale.ROOT, "index [%s] cannot be followed, because soft deletes are not enabled",, + indexToFollow.getName());, + LOGGER.warn(message);, + updateAutoFollowMetadata(recordLeaderIndexAsFollowFunction(autoFollowPattenName, indexToFollow), error -> {, + ElasticsearchException failure = new ElasticsearchException(message);, + if (error != null) {, + failure.addSuppressed(error);, + }, + results.set(slot, new Tuple<>(indexToFollow, failure));, + if (leaderIndicesCountDown.countDown()) {, + resultHandler.accept(new AutoFollowResult(autoFollowPattenName, results.asList()));, + }, + });, + continue;, + }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +import java.util.Locale;, + patternsForTheSameRemoteCluster, remoteClusterState.metaData(), resultHandler);, + MetaData
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/MultiTermVectorsRequest.java, + public MultiTermVectorsRequest() {}, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/MultiTermVectorsRequest.java, + public MultiTermVectorsRequest() {}, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/job/config/DetectionRule.java, + new ObjectParser<>(DETECTION_RULE_FIELD.getPreferredName(), true, Builder::new);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/MultiTermVectorsRequest.java, + public MultiTermVectorsRequest() {}, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/job/config/DetectionRule.java, + new ObjectParser<>(DETECTION_RULE_FIELD.getPreferredName(), true, Builder::new);, +++ b/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/ObjectParserTests.java, + }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/MultiTermVectorsRequest.java, + public MultiTermVectorsRequest() {}, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/job/config/DetectionRule.java, + new ObjectParser<>(DETECTION_RULE_FIELD.getPreferredName(), true, Builder::new);, +++ b/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/ObjectParserTests.java, + }, +++ b/modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/KeepTypesFilterFactory.java, + }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/MultiTermVectorsRequest.java, + public MultiTermVectorsRequest() {}, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/job/config/DetectionRule.java, + new ObjectParser<>(DETECTION_RULE_FIELD.getPreferredName(), true, Builder::new);, +++ b/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/ObjectParserTests.java, + }, +++ b/modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/KeepTypesFilterFactory.java, + }, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/MetricDetail.java, + }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/MultiTermVectorsRequest.java, + public MultiTermVectorsRequest() {}, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/job/config/DetectionRule.java, + new ObjectParser<>(DETECTION_RULE_FIELD.getPreferredName(), true, Builder::new);, +++ b/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/ObjectParserTests.java, + },
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/docs/reference/migration/migrate_7_0/java.asciidoc, +, +[float], +==== Deprecated constructor `AbstractLifecycleComponent(Settings settings)` removed, +, +The constructor `AbstractLifecycleComponent(Settings settings)`, deprecated in 6.7, +has been removed. The parameterless constructor should be used instead., +++ b/docs/reference/migration/migrate_7_0/java.asciidoc, +, +[float], +==== Deprecated constructor `AbstractLifecycleComponent(Settings settings)` removed, +, +The constructor `AbstractLifecycleComponent(Settings settings)`, deprecated in 6.7, +has been removed. The parameterless constructor should be used instead., +++ b/server/src/main/java/org/elasticsearch/common/component/AbstractLifecycleComponent.java]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.metrics.MedianAbsoluteDeviationAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.ParsedMedianAbsoluteDeviation;, + map.put(MedianAbsoluteDeviationAggregationBuilder.NAME, (p, c) -> ParsedMedianAbsoluteDeviation.fromXContent(p, (String) c));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.metrics.MedianAbsoluteDeviationAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.ParsedMedianAbsoluteDeviation;, + map.put(MedianAbsoluteDeviationAggregationBuilder.NAME, (p, c) -> ParsedMedianAbsoluteDeviation.fromXContent(p, (String) c));, +++ b/docs/build.gradle, +// used by median absolute deviation aggregation, +buildRestTests.setups['reviews'] = ''', + - do:, + indices.create:, + index: reviews, + body:, + settings:, + number_of_shards: 1, + number_of_replicas: 0, + mappings:, + _doc:, + properties:, + product:, + type: keyword, + rating:, + type: long, + - do:, + bulk:, + index: reviews, + type: _doc, + refresh: true, + body: |, + {"index": {"_id": "1"}}, + {"product": "widget-foo", "rating":
[+++ b/server/src/test/java/org/elasticsearch/indices/mapping/SimpleGetFieldMappingsIT.java, + client().admin().indices().preparePutMapping("test").setType("type").setSource("num", "type=long").get();]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.GetFiltersRequest;, +import org.elasticsearch.client.ml.job.util.PageParams;, +, + static Request getFilter(GetFiltersRequest getFiltersRequest) {, + String endpoint = new EndpointBuilder(), + .addPathPartAsIs("_xpack"), + .addPathPartAsIs("ml"), + .addPathPartAsIs("filters"), + .addPathPart(getFiltersRequest.getFilterId()), + .build();, + Request request = new Request(HttpGet.METHOD_NAME, endpoint);, + RequestConverters.Params params = new RequestConverters.Params(request);, + if (getFiltersRequest.getSize() != null) {, + params.putParam(PageParams.SIZE.getPreferredName(), getFiltersRequest.getSize().toString());, + }, + if (getFiltersRequest.getFrom() != null) {, + params.putParam(PageParams.FROM.getPreferredName(), getFiltersRequest.getFrom().toString());, + }, + return request;, + }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.GetFiltersRequest;, +import org.elasticsearch.client.ml.job.util.PageParams;, +, + static Request getFilter(GetFiltersRequest getFiltersRequest) {, + String endpoint = new EndpointBuilder(), + .addPathPartAsIs("_xpack"), + .addPathPartAsIs("ml"), + .addPathPartAsIs("filters"), + .addPathPart(getFiltersRequest.getFilterId()), + .build();, +
[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, + localCheckpoint = SequenceNumbersService.PRE_60_NODE_LOCAL_CHECKPOINT;, + } else {, + globalCheckpoint = SequenceNumbersService.UNASSIGNED_SEQ_NO;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, + localCheckpoint = SequenceNumbersService.PRE_60_NODE_LOCAL_CHECKPOINT;, + } else {, + globalCheckpoint = SequenceNumbersService.UNASSIGNED_SEQ_NO;, +++ b/core/src/main/java/org/elasticsearch/index/seqno/GlobalCheckpointTracker.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +import java.io.IOException;, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.Map;, + /**, + * The global checkpoint tracker can operate in two modes:, + * - primary: this shard is in charge of collecting local checkpoint information from all shard copies and computing the global, + * checkpoint based on the local checkpoints of all in-sync shard copies., + * - replica: this shard receives
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, + * Retrieve one or more lifecycle policy definition. See, + * <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-get-lifecycle-policy.html">, + * Asynchronously retrieve one or more lifecycle policy definition. See, + * <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-get-lifecycle-policy.html">, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, + * Retrieve one or more lifecycle policy definition. See, + * <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-get-lifecycle-policy.html">, + * Asynchronously retrieve one or more lifecycle policy definition. See, + * <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-get-lifecycle-policy.html">, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/ILMDocumentationIT.java, +import org.elasticsearch.client.indexlifecycle.GetLifecyclePolicyRequest;, +import org.elasticsearch.client.indexlifecycle.GetLifecyclePolicyResponse;, +import org.elasticsearch.client.indexlifecycle.LifecyclePolicyMetadata;, +import org.elasticsearch.client.indexlifecycle.ShrinkAction;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, + public void testGetLifecyclePolicy() throws IOException, InterruptedException {, + RestHighLevelClient client = highLevelClient();, +, + LifecyclePolicy myPolicyAsPut;, + LifecyclePolicy otherPolicyAsPut;, + // Set up some
[+++ b/server/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +import org.elasticsearch.ElasticsearchException;, + public void testSnapshotFileFailureDuringSnapshot() {, +, + final Throwable cause = ex.getCause();, + assertThat(cause, notNullValue());, + final Throwable rootCause = new ElasticsearchException(cause).getRootCause();, + assertThat(rootCause, notNullValue());, + assertThat(rootCause.getMessage(), containsString("Random IOException"));]
[+++ b/.dir-locals.el, +((java-mode, + ., + ((eval, + ., + (progn, + (defun my/point-in-defun-declaration-p (), + (let ((bod (save-excursion (c-beginning-of-defun), + (point)))), + (<= bod, + (point), + (save-excursion (goto-char bod), + (re-search-forward "{"), + (point))))), +, + (defun my/is-string-concatenation-p (), + "Returns true if the previous line is a string concatenation", + (save-excursion, + (let ((start (point))), + (forward-line -1), + (if (re-search-forward " \\\+$" start t) t nil)))), +, + (defun my/inside-java-lambda-p (), + "Returns true if point is the first statement inside of a lambda", + (save-excursion, + (c-beginning-of-statement-1), + (let ((start (point))), + (forward-line -1),
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/deprecation/DeprecationInfoAction.java, +import org.elasticsearch.Version;, +import org.elasticsearch.xpack.core.ml.datafeed.DatafeedConfig;, +import java.util.ArrayList;, +import java.util.Collections;, + private List<DeprecationIssue> mlSettingsIssues;, + Map<String, List<DeprecationIssue>> indexSettingsIssues,, + List<DeprecationIssue> mlSettingsIssues) {, + this.mlSettingsIssues = mlSettingsIssues;, + public List<DeprecationIssue> getMlSettingsIssues() {, + return mlSettingsIssues;, + }, +, + if (in.getVersion().onOrAfter(Version.V_6_7_0)) {, + mlSettingsIssues = in.readList(DeprecationIssue::new);, + } else {, + mlSettingsIssues = Collections.emptyList();, + }, + if (out.getVersion().onOrAfter(Version.V_6_7_0)) {, + out.writeList(mlSettingsIssues);, + }, + .array("ml_settings", mlSettingsIssues.toArray()), + Objects.equals(indexSettingsIssues, response.indexSettingsIssues) &&, + Objects.equals(mlSettingsIssues, response.mlSettingsIssues);, + return Objects.hash(clusterSettingsIssues, nodeSettingsIssues, indexSettingsIssues, mlSettingsIssues);, + * @param datafeeds The ml datafeed configurations, + * @param mlSettingsCheck The list of ml checks, + List<DatafeedConfig> datafeeds,,
[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, + * Create or modify a lifecycle definition. See <a href=, + * Asynchronously create or modify a lifecycle definition. See <a href=, + * "https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-put-lifecycle-policy.html">]
[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregationBuilder.java, + CompositeValuesSourceParserHelper.toXContent(source, builder, params);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregationBuilder.java, + CompositeValuesSourceParserHelper.toXContent(source, builder, params);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeValuesSourceParserHelper.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.ToXContent.Params;, +public class CompositeValuesSourceParserHelper {, + public static void writeTo(CompositeValuesSourceBuilder<?> builder, StreamOutput out) throws IOException {, + public static CompositeValuesSourceBuilder<?> readFrom(StreamInput in) throws IOException {, + public static CompositeValuesSourceBuilder<?> fromXContent(XContentParser parser) throws IOException {, +, + public static XContentBuilder toXContent(CompositeValuesSourceBuilder<?> source, XContentBuilder builder, Params params), + throws IOException {, + builder.startObject();, + builder.startObject(source.name());, + source.toXContent(builder, params);, + builder.endObject();, + builder.endObject();, + return builder;, + }]
[+++ b/docs/reference/migration/migrate_7_0/settings.asciidoc, +, +==== Cross-cluster search settings renamed, +, +The cross-cluster search remote cluster connection infrastructure is also used, +in cross-cluster replication. This means that the setting names, +`search.remote.*` used for configuring cross-cluster search belie the fact that, +they also apply to other situations where a connection to a remote cluster as, +used. Therefore, these settings have been renamed from `search.remote.*` to, +`cluster.remote.*`. For backwards compatibility purposes, we will fallback to, +`search.remote.*` if `cluster.remote.*` is not set. For any such settings stored, +in the cluster state, or set on dynamic settings updates, we will automatically, +upgrade the setting from
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/server/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, + .put("cluster.join.timeout", "10s") // still long to induce failures but not too long so test won't time out, + internalCluster().setBootstrapMasterNodeIndex(2);, +]
[+++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/LocalIndexFollowingIT.java, + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37014")]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/docs/reference/ml/apis/find-file-structure.asciidoc, + (string) The high level structure of the file. Valid values are `ndjson`, `xml`,, + "format" : "ndjson", <6>, + For NDJSON, this value is the same as `num_lines_analyzed`. For other file, +<6> `format` is one of `ndjson`, `xml`, `delimited` or `semi_structured_text`., +++ b/docs/reference/ml/apis/find-file-structure.asciidoc, + (string) The high level structure of the file. Valid values are `ndjson`, `xml`,, + "format" : "ndjson", <6>, + For NDJSON, this value is the same as `num_lines_analyzed`. For other file, +<6> `format` is one of `ndjson`, `xml`, `delimited` or `semi_structured_text`., +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/filestructurefinder/FileStructure.java, + NDJSON, XML, DELIMITED, SEMI_STRUCTURED_TEXT;, + case NDJSON:, +
[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, + private SearchResponseSections internalResponse;, + public SearchResponse(SearchResponseSections internalResponse, String scrollId, int totalShards, int successfulShards,, + internalResponse = new InternalSearchResponse(in);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, + private SearchResponseSections internalResponse;, + public SearchResponse(SearchResponseSections internalResponse, String scrollId, int totalShards, int successfulShards,, + internalResponse = new InternalSearchResponse(in);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponseSections.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License");
[+++ b/docs/reference/rest-api/info.asciidoc, + "index_lifecycle" : {, + "description" : "Index lifecycle management for the Elastic Stack",, + "available" : true,, + "enabled" : true, + },, +++ b/docs/reference/rest-api/info.asciidoc, + "index_lifecycle" : {, + "description" : "Index lifecycle management for the Elastic Stack",, + "available" : true,, + "enabled" : true, + },, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/docs/reference/rest-api/info.asciidoc, + "index_lifecycle" : {, + "description" : "Index lifecycle management for the Elastic Stack",, + "available" : true,, + "enabled" : true, + },, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/NamedDateTimeProcessorTests.java, +import org.elasticsearch.bootstrap.JavaVersion;, +import org.elasticsearch.common.Strings;, +import org.junit.Assume;, + , + assumeJava9PlusAndCompatLocaleProviderSetting();, + assumeJava9PlusAndCompatLocaleProviderSetting();, + assumeJava9PlusAndCompatLocaleProviderSetting();, + assumeJava9PlusAndCompatLocaleProviderSetting();, + , + /*, + * This method checks the existence of a jvm parameter that should exist in ES jvm.options for Java 9+. If the parameter is, + * missing, the tests will be skipped. Not doing this, the tests will fail because the day and month names will be in the narrow, + * format (Mon, Tue, Jan, Feb etc) instead of full format (Monday, Tuesday, January, February etc)., + * , + * Related infra issue: https://github.com/elastic/elasticsearch/issues/33796, +
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/server/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java, + return;, +++ b/server/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java, + return;, +++ b/server/src/test/java/org/elasticsearch/index/query/GeoShapeQueryBuilderTests.java, + builder.field(randomAlphaOfLengthBetween(10, 20), "something");, + GeoShapeQueryBuilder query = doCreateTestQueryBuilder(true);, + public void testMultipleRewrite() throws IOException {, + GeoShapeQueryBuilder shape = doCreateTestQueryBuilder(true);, + QueryBuilder builder = new BoolQueryBuilder(), + .should(shape), + .should(shape);, +, + builder = rewriteAndFetch(builder, createShardContext());, +, + GeoShapeQueryBuilder expectedShape = new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, indexedShapeToReturn);, + expectedShape.strategy(shape.strategy());, + expectedShape.relation(shape.relation());, + QueryBuilder expected = new BoolQueryBuilder(), + .should(expectedShape), + .should(expectedShape);, + assertEquals(expected, builder);, + }, +]
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregationBuilder.java, + static Rounding createRounding(DateTimeUnit interval, DateTimeZone timeZone) {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregationBuilder.java, + static Rounding createRounding(DateTimeUnit interval, DateTimeZone timeZone) {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalAutoDateHistogram.java, + bucketInfo.roundingInfos, targetBuckets);, + static int getAppropriateRounding(long minKey, long maxKey, int roundingIdx,, + RoundingInfo[] roundings, int targetBuckets) {, + } while (requiredBuckets > (targetBuckets * roundings[currentRoundingIdx - 1].getMaximumInnerInterval()), +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregationBuilder.java, + static Rounding createRounding(DateTimeUnit interval, DateTimeZone timeZone) {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalAutoDateHistogram.java, + bucketInfo.roundingInfos, targetBuckets);, + static int getAppropriateRounding(long minKey, long maxKey, int roundingIdx,, + RoundingInfo[] roundings, int targetBuckets) {, + } while (requiredBuckets > (targetBuckets * roundings[currentRoundingIdx - 1].getMaximumInnerInterval()), +++ b/server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalAutoDateHistogramTests.java, +import org.elasticsearch.common.rounding.DateTimeUnit;, +import org.joda.time.DateTimeZone;, +import java.time.Instant;, +import
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, + // pkg private so tests can mock, + final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, + public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, + shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, + // pkg private so tests can mock, + final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, + public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, + shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, + @Nullable EngineFactory engineFactory,, + this.engineFactory = engineFactory;, + final EngineFactory getEngineFactory() {, + } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, + // pkg private so
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/consoleFull, +, +, +, +, +, + , + <!DOCTYPE html><html><head resURL="/static/9cd1c6e4" data-rooturl="" data-resurl="/static/9cd1c6e4">, + , +, + <title>elastic / elasticsearch # master - intake #2952 Console [Jenkins]</title><link rel="stylesheet" href="/static/9cd1c6e4/css/layout-common.css" type="text/css" /><link rel="stylesheet" href="/static/9cd1c6e4/css/style.css" type="text/css" /><link rel="stylesheet" href="/static/9cd1c6e4/css/color.css" type="text/css" /><link rel="stylesheet" href="/static/9cd1c6e4/css/responsive-grid.css" type="text/css" /><link rel="shortcut icon" href="/static/9cd1c6e4/favicon.ico" type="image/vnd.microsoft.icon" /><link color="black" rel="mask-icon" href="/images/mask-icon.svg" /><script>var isRunAsTest=false; var rootURL=""; var resURL="/static/9cd1c6e4";</script><script src="/static/9cd1c6e4/scripts/prototype.js" type="text/javascript"></script><script src="/static/9cd1c6e4/scripts/behavior.js" type="text/javascript"></script><script src='/adjuncts/9cd1c6e4/org/kohsuke/stapler/bind.js' type='text/javascript'></script><script src="/static/9cd1c6e4/scripts/yui/yahoo/yahoo-min.js"></script><script src="/static/9cd1c6e4/scripts/yui/dom/dom-min.js"></script><script src="/static/9cd1c6e4/scripts/yui/event/event-min.js"></script><script src="/static/9cd1c6e4/scripts/yui/animation/animation-min.js"></script><script src="/static/9cd1c6e4/scripts/yui/dragdrop/dragdrop-min.js"></script><script src="/static/9cd1c6e4/scripts/yui/container/container-min.js"></script><script src="/static/9cd1c6e4/scripts/yui/connection/connection-min.js"></script><script src="/static/9cd1c6e4/scripts/yui/datasource/datasource-min.js"></script><script src="/static/9cd1c6e4/scripts/yui/autocomplete/autocomplete-min.js"></script><script src="/static/9cd1c6e4/scripts/yui/menu/menu-min.js"></script><script src="/static/9cd1c6e4/scripts/yui/element/element-min.js"></script><script src="/static/9cd1c6e4/scripts/yui/button/button-min.js"></script><script src="/static/9cd1c6e4/scripts/yui/storage/storage-min.js"></script><script src="/static/9cd1c6e4/scripts/hudson-behavior.js" type="text/javascript"></script><script src="/static/9cd1c6e4/scripts/sortable.js" type="text/javascript"></script><script>crumb.init("Jenkins-Crumb", "8729e39cc12b8dbfa5436275cf14c7f1");</script><link rel="stylesheet" href="/static/9cd1c6e4/scripts/yui/container/assets/container.css" type="text/css" /><link rel="stylesheet" href="/static/9cd1c6e4/scripts/yui/assets/skins/sam/skin.css" type="text/css" /><link rel="stylesheet" href="/static/9cd1c6e4/scripts/yui/container/assets/skins/sam/container.css" type="text/css" /><link rel="stylesheet" href="/static/9cd1c6e4/scripts/yui/button/assets/skins/sam/button.css" type="text/css" /><link
[+++ b/.gitignore, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/docs/en/index.asciidoc, +++ b/.gitignore, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/build.gradle, +++ b/docs/en/index.asciidoc, +++ b/docs/en/ml/functions/rare.asciidoc, +* `over_field_name` (required), +++ b/.gitignore,
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/modules/parent-join/src/test/java/org/elasticsearch/join/mapper/ParentJoinFieldMapperTests.java, + assertThat(exc.getMessage(), containsString("Field [_parent_join] is defined twice."));, + assertThat(exc.getMessage(), containsString("Field [_parent_join] is defined twice."));, +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/mapper/ParentJoinFieldMapperTests.java, + assertThat(exc.getMessage(), containsString("Field [_parent_join] is defined twice."));, + assertThat(exc.getMessage(), containsString("Field [_parent_join] is defined twice."));, +++ b/server/src/main/java/org/elasticsearch/index/mapper/MapperMergeValidator.java, + public static void validateMapperStructure(Collection<ObjectMapper> objectMappers,, + Collection<FieldAliasMapper> fieldAliasMappers) {, + throw new IllegalArgumentException("Object mapper [" + fullPath + "] is defined twice.");, + throw new IllegalArgumentException("Field [" + name + "] is defined both as an object and a field.");, + throw new IllegalArgumentException("Field [" + name + "] is defined twice.");, +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/mapper/ParentJoinFieldMapperTests.java, + assertThat(exc.getMessage(), containsString("Field [_parent_join] is defined twice."));, + assertThat(exc.getMessage(), containsString("Field
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-b9e064b935, +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0 0 0\n)+/], +ccr (default distro only), + 0 0 0, +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0 0 0\n)+/], +ccr (default distro only), + 0 0 0, +++ b/docs/reference/indices/flush.asciidoc, + "max_unsafe_auto_id_timestamp" : "-1",, + "min_retained_seq_no": "0", +++ b/buildSrc/version.properties, +lucene = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.5.0, +:lucene_version_path: 7_5_0, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0
[+++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/put-policy.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/put-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/info.asciidoc, + "index_lifecycle" : {, + "description" : "Index lifecycle management for the Elastic Stack",, + "available" : true,, + "enabled" : true, + },, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++
[+++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, + final Request request = new Request("PUT", "/_ccr/auto_follow/leader_cluster");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, + final Request request = new Request("PUT", "/_ccr/auto_follow/leader_cluster");, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, + Request request = new Request("PUT", "/_ccr/auto_follow/leader_cluster");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, + final Request request = new Request("PUT", "/_ccr/auto_follow/leader_cluster");, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, + Request request = new Request("PUT", "/_ccr/auto_follow/leader_cluster");, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestDeleteAutoFollowPatternAction.java, + controller.registerHandler(RestRequest.Method.DELETE, "/_ccr/auto_follow/{leader_cluster_alias}", this);, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, + final Request request = new Request("PUT", "/_ccr/auto_follow/leader_cluster");, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, + Request request = new Request("PUT", "/_ccr/auto_follow/leader_cluster");, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestDeleteAutoFollowPatternAction.java, + controller.registerHandler(RestRequest.Method.DELETE, "/_ccr/auto_follow/{leader_cluster_alias}", this);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestPutAutoFollowPatternAction.java, + controller.registerHandler(RestRequest.Method.PUT, "/_ccr/auto_follow/{leader_cluster_alias}", this);, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, + final Request request = new Request("PUT", "/_ccr/auto_follow/leader_cluster");, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, + Request
[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportOpenJobAction.java, + throw makeNoSuitableNodesException(logger, params.getJobId(), assignment.getExplanation());, + OpenJobAction.JobParams params = (OpenJobAction.JobParams) persistentTask.getParams();, + exception = makeNoSuitableNodesException(logger, params.getJobId(), assignment.getExplanation());, +, + static ElasticsearchException makeNoSuitableNodesException(Logger logger, String jobId, String explanation) {, + String msg = "Could not open job because no suitable nodes were found, allocation explanation [" + explanation + "]";, + logger.warn("[{}] {}", jobId, msg);, + Exception detail = new IllegalStateException(msg);, + return new ElasticsearchStatusException("Could not open job because no ML nodes with sufficient capacity were found",, + RestStatus.TOO_MANY_REQUESTS, detail);, + }, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportOpenJobAction.java, + throw makeNoSuitableNodesException(logger, params.getJobId(), assignment.getExplanation());, + OpenJobAction.JobParams params = (OpenJobAction.JobParams) persistentTask.getParams();, + exception =
[+++ b/server/src/main/java/org/elasticsearch/action/search/ExpandSearchPhase.java, + SearchRequest groupRequest = new SearchRequest(searchRequest);, + groupRequest.source(sourceBuilder);]
[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, + assertEquals(17, namedXContents.size());, + assertEquals("Had: " + categories, 4, categories.size());, + assertEquals(Integer.valueOf(3), categories.get(Aggregation.class));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, + assertEquals(17, namedXContents.size());, + assertEquals("Had: " + categories, 4, categories.size());, + assertEquals(Integer.valueOf(3), categories.get(Aggregation.class));, +++ b/docs/reference/aggregations/bucket.asciidoc, +include::bucket/parent-aggregation.asciidoc[], +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, + assertEquals(17, namedXContents.size());, + assertEquals("Had: " + categories, 4, categories.size());, + assertEquals(Integer.valueOf(3), categories.get(Aggregation.class));, +++ b/docs/reference/aggregations/bucket.asciidoc, +include::bucket/parent-aggregation.asciidoc[], +, +++ b/docs/reference/aggregations/bucket/parent-aggregation.asciidoc, +[[search-aggregations-bucket-parent-aggregation]], +=== Parent Aggregation, +, +A special single bucket aggregation that selects parent documents that have the specified type, as defined in a <<parent-join,`join` field>>., +, +This aggregation has a single option:, +, +* `type` - The child type that should be selected., +,
[+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ssl/SSLConfigurationReloaderTests.java, + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32124"), + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32124")]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregatorFactory.java, + public HistogramAggregatorFactory(String name, ValuesSourceConfig<Numeric> config, double interval, double offset,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregatorFactory.java, + public HistogramAggregatorFactory(String name, ValuesSourceConfig<Numeric> config, double interval, double offset,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/AbstractPipelineAggregationBuilder.java, +import org.elasticsearch.search.aggregations.bucket.histogram.AutoDateHistogramAggregatorFactory;, +import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregatorFactory;, +import org.elasticsearch.search.aggregations.bucket.histogram.HistogramAggregatorFactory;, + /**, + * Validates pipeline aggregations that need sequentially ordered data., + */, + public static void validateSequentiallyOrderedParentAggs(AggregatorFactory<?> parent, String type, String name) {, + if ((parent instanceof HistogramAggregatorFactory || parent instanceof DateHistogramAggregatorFactory, + || parent instanceof AutoDateHistogramAggregatorFactory) == false) {, + throw new IllegalStateException(, + type + " aggregation [" + name + "] must have a histogram, date_histogram or auto_date_histogram as parent");, + },
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/BinaryValuesSource.java, +import org.elasticsearch.index.mapper.KeywordFieldMapper;, +import org.elasticsearch.index.mapper.StringFieldType;, +import org.elasticsearch.index.mapper.TextFieldMapper;, +import org.elasticsearch.search.DocValueFormat;, + DocValueFormat format, Object missing, int size, int reverseMul) {, + super(format, fieldType, missing, size, reverseMul);, + if (value.getClass() == String.class) {, + afterValue = format.parseBytesRef(value.toString());, + fieldType instanceof StringFieldType == false ||, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/BinaryValuesSource.java, +import org.elasticsearch.index.mapper.KeywordFieldMapper;, +import org.elasticsearch.index.mapper.StringFieldType;, +import org.elasticsearch.index.mapper.TextFieldMapper;, +import org.elasticsearch.search.DocValueFormat;, + DocValueFormat format, Object missing, int size, int reverseMul) {, + super(format, fieldType, missing, size, reverseMul);, + if (value.getClass() == String.class) {, + afterValue = format.parseBytesRef(value.toString());, + fieldType instanceof StringFieldType == false ||, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregator.java, + sources[i] = new GlobalOrdinalValuesSource(, + bigArrays,, + configs[i].fieldType(),, + vs::globalOrdinalsValues,,
[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, + "scripts_painless_context",, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, + "scripts_painless_context",, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessPlugin.java, +import org.apache.lucene.util.SetOnce;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.painless.action.PainlessContextAction;, + private final SetOnce<PainlessScriptEngine> painlessScriptEngine = new SetOnce<>();, +, + painlessScriptEngine.set(new PainlessScriptEngine(settings, contextsWithWhitelists));, + return painlessScriptEngine.get();, + }, +, + @Override, + public Collection<Module> createGuiceModules() {, + return Collections.singleton(b -> b.bind(PainlessScriptEngine.class).toInstance(painlessScriptEngine.get()));, + List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> actions = new ArrayList<>();, + actions.add(new ActionHandler<>(PainlessExecuteAction.INSTANCE, PainlessExecuteAction.TransportAction.class));, + actions.add(new ActionHandler<>(PainlessContextAction.INSTANCE, PainlessContextAction.TransportAction.class));, + return actions;, + List<RestHandler> handlers = new ArrayList<>();, + handlers.add(new PainlessExecuteAction.RestAction(settings, restController));, + handlers.add(new PainlessContextAction.RestAction(settings, restController));, + return handlers;, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, + "scripts_painless_context",, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessPlugin.java, +import org.apache.lucene.util.SetOnce;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.painless.action.PainlessContextAction;, +
[+++ b/x-pack/docs/en/commands/syskeygen.asciidoc, +== elasticsearch-syskeygen, +The `elasticsearch-syskeygen` command creates a system key file in the, +elasticsearch config directory., +bin/elasticsearch-syskeygen, +bin/elasticsearch-syskeygen, +++ b/x-pack/docs/en/commands/syskeygen.asciidoc, +== elasticsearch-syskeygen, +The `elasticsearch-syskeygen` command creates a system key file in the, +elasticsearch config directory., +bin/elasticsearch-syskeygen, +bin/elasticsearch-syskeygen, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/crypto/CryptoService.java, + throw new IllegalArgumentException(, + "key size did not match expected value; was the key generated with elasticsearch-syskeygen?");, +++ b/x-pack/docs/en/commands/syskeygen.asciidoc, +== elasticsearch-syskeygen, +The `elasticsearch-syskeygen` command creates a system key file in the, +elasticsearch config directory., +bin/elasticsearch-syskeygen, +bin/elasticsearch-syskeygen, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/crypto/CryptoService.java, + throw new IllegalArgumentException(, + "key size did not match expected value; was the key generated with elasticsearch-syskeygen?");, +++ b/x-pack/plugin/security/src/main/bin/elasticsearch-syskeygen,
[+++ b/.dir-locals.el, +((java-mode, + ., + ((eval, + ., + (progn, + (defun my/point-in-defun-declaration-p (), + (let ((bod (save-excursion (c-beginning-of-defun), + (point)))), + (<= bod, + (point), + (save-excursion (goto-char bod), + (re-search-forward "{"), + (point))))), +, + (defun my/is-string-concatenation-p (), + "Returns true if the previous line is a string concatenation", + (save-excursion, + (let ((start (point))), + (forward-line -1), + (if (re-search-forward " \\\+$" start t) t nil)))), +, + (defun my/inside-java-lambda-p (), + "Returns true if point is the first statement inside of a lambda", + (save-excursion, + (c-beginning-of-statement-1), + (let ((start (point))), + (forward-line -1),
[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/PingAndInfoIT.java, + assertEquals(versionMap.get("build_flavor"), info.getBuild().flavor().displayName());, + assertEquals(versionMap.get("build_type"), info.getBuild().type().displayName());, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/PingAndInfoIT.java, + assertEquals(versionMap.get("build_flavor"), info.getBuild().flavor().displayName());, + assertEquals(versionMap.get("build_type"), info.getBuild().type().displayName());, +++ b/distribution/archives/build.gradle, +CopySpec archiveFiles(CopySpec modulesFiles, String distributionType, boolean oss) {, + with configFiles(distributionType, oss), + with binFiles(distributionType, oss), + MavenFilteringHack.filter(it, expansionsForDistribution(distributionType, oss)), + with archiveFiles(transportModulesFiles, 'zip', false), + with archiveFiles(modulesFiles(false), 'zip', false), + with archiveFiles(modulesFiles(true), 'zip', true), + with archiveFiles(modulesFiles(false), 'tar', false), + with archiveFiles(modulesFiles(true), 'tar', true), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/PingAndInfoIT.java, + assertEquals(versionMap.get("build_flavor"), info.getBuild().flavor().displayName());, + assertEquals(versionMap.get("build_type"), info.getBuild().type().displayName());, +++ b/distribution/archives/build.gradle, +CopySpec archiveFiles(CopySpec modulesFiles, String distributionType, boolean oss) {, + with configFiles(distributionType, oss), + with binFiles(distributionType, oss), + MavenFilteringHack.filter(it, expansionsForDistribution(distributionType, oss)), + with archiveFiles(transportModulesFiles, 'zip', false), +
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/state/ClusterStateApiTests.java, + clusterStateRequest.waitForTimeout(TimeValue.timeValueMillis(500)); // Fail fast]
[+++ b/modules/lang-expression/licenses/lucene-expressions-7.4.0-snapshot-330fd18f20.jar.sha1, +e89319d505f0d338e596310375878c0b9c4c1350, +++ b/modules/lang-expression/licenses/lucene-expressions-7.4.0-snapshot-330fd18f20.jar.sha1, +e89319d505f0d338e596310375878c0b9c4c1350, +++ b/plugins/analysis-icu/licenses/lucene-analyzers-icu-7.4.0-snapshot-330fd18f20.jar.sha1, +823eda1d03c8a5ebbfbac2c7f835e31c5aa806da, +++ b/modules/lang-expression/licenses/lucene-expressions-7.4.0-snapshot-330fd18f20.jar.sha1, +e89319d505f0d338e596310375878c0b9c4c1350, +++ b/plugins/analysis-icu/licenses/lucene-analyzers-icu-7.4.0-snapshot-330fd18f20.jar.sha1, +823eda1d03c8a5ebbfbac2c7f835e31c5aa806da, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuTokenizerFactory.java, + final RuleBasedBreakIterator breakers[] = new RuleBasedBreakIterator[UScript.CODE_LIMIT];, + private RuleBasedBreakIterator parseRules(String filename, Environment env) throws IOException {, +++ b/modules/lang-expression/licenses/lucene-expressions-7.4.0-snapshot-330fd18f20.jar.sha1, +e89319d505f0d338e596310375878c0b9c4c1350, +++ b/plugins/analysis-icu/licenses/lucene-analyzers-icu-7.4.0-snapshot-330fd18f20.jar.sha1, +823eda1d03c8a5ebbfbac2c7f835e31c5aa806da, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuTokenizerFactory.java, + final RuleBasedBreakIterator breakers[] = new RuleBasedBreakIterator[UScript.CODE_LIMIT];, + private RuleBasedBreakIterator parseRules(String filename, Environment env) throws IOException {, +++ b/plugins/analysis-kuromoji/licenses/lucene-analyzers-kuromoji-7.4.0-snapshot-330fd18f20.jar.sha1, +15b5f08fc0e3a6cfe8f0a35b845d1a8ae38d5064, +++ b/modules/lang-expression/licenses/lucene-expressions-7.4.0-snapshot-330fd18f20.jar.sha1, +e89319d505f0d338e596310375878c0b9c4c1350, +++ b/plugins/analysis-icu/licenses/lucene-analyzers-icu-7.4.0-snapshot-330fd18f20.jar.sha1, +823eda1d03c8a5ebbfbac2c7f835e31c5aa806da, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuTokenizerFactory.java, + final RuleBasedBreakIterator breakers[] = new RuleBasedBreakIterator[UScript.CODE_LIMIT];, + private RuleBasedBreakIterator parseRules(String filename, Environment env) throws IOException {, +++ b/plugins/analysis-kuromoji/licenses/lucene-analyzers-kuromoji-7.4.0-snapshot-330fd18f20.jar.sha1, +15b5f08fc0e3a6cfe8f0a35b845d1a8ae38d5064, +++ b/plugins/analysis-phonetic/licenses/lucene-analyzers-phonetic-7.4.0-snapshot-330fd18f20.jar.sha1, +ac4d8f4f312bf80dbd0e7d178ca1085b439c03a1, +++ b/modules/lang-expression/licenses/lucene-expressions-7.4.0-snapshot-330fd18f20.jar.sha1, +e89319d505f0d338e596310375878c0b9c4c1350, +++ b/plugins/analysis-icu/licenses/lucene-analyzers-icu-7.4.0-snapshot-330fd18f20.jar.sha1, +823eda1d03c8a5ebbfbac2c7f835e31c5aa806da,
[+++ b/x-pack/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/actions/webhook/WebhookHttpsIntegrationTests.java, + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/35503")]
[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecycleSettings.java, + public static final Setting<TimeValue> LIFECYCLE_POLL_INTERVAL_SETTING = Setting.timeSetting(LIFECYCLE_POLL_INTERVAL,, + TimeValue.timeValueMinutes(10), TimeValue.timeValueSeconds(1), Setting.Property.Dynamic, Setting.Property.NodeScope);]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/docs/reference/rest-api/info.asciidoc, + "index_lifecycle" : {, + "description" : "Index lifecycle management for the Elastic Stack",, + "available" : true,, + "enabled" : true, + },, +++ b/docs/reference/rest-api/info.asciidoc, + "index_lifecycle" : {, + "description" : "Index lifecycle management for the Elastic Stack",, + "available" : true,, + "enabled" : true, + },, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/ChannelFactory.java, +++ b/docs/reference/rest-api/info.asciidoc, + "index_lifecycle" : {, + "description" : "Index lifecycle management for the Elastic Stack",, + "available" : true,, + "enabled" : true, + },, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/ChannelFactory.java, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/NioChannel.java, +import java.io.IOException;, + private final InetSocketAddress localAddress;, +, + NioChannel(NetworkChannel socketChannel) throws IOException {, +
[+++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/PainlessExtension.java, +import org.elasticsearch.script.ScriptContext;, +, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/PainlessExtension.java, +import org.elasticsearch.script.ScriptContext;, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, + MethodHandle handle = struct.getterMethodHandles.get(name);, + MethodHandle handle = struct.getterMethodHandles.get(name);, + MethodHandle handle = struct.setterMethodHandles.get(name);, + MethodHandle handle = struct.setterMethodHandles.get(name);, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/PainlessExtension.java, +import org.elasticsearch.script.ScriptContext;, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, + MethodHandle handle = struct.getterMethodHandles.get(name);, + MethodHandle handle = struct.getterMethodHandles.get(name);, + MethodHandle handle = struct.setterMethodHandles.get(name);, + MethodHandle handle = struct.setterMethodHandles.get(name);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessExplainError.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, + painlessClassName = PainlessLookupUtility.typeToCanonicalTypeName(objectToExplain.getClass());, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/PainlessExtension.java, +import org.elasticsearch.script.ScriptContext;, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, + MethodHandle handle = struct.getterMethodHandles.get(name);, + MethodHandle handle = struct.getterMethodHandles.get(name);, + MethodHandle handle = struct.setterMethodHandles.get(name);, + MethodHandle handle = struct.setterMethodHandles.get(name);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessExplainError.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/.dir-locals.el, +((java-mode, + ., + ((eval, + ., + (progn, + (defun my/point-in-defun-declaration-p (), + (let ((bod (save-excursion (c-beginning-of-defun), + (point)))), + (<= bod, + (point), + (save-excursion (goto-char bod), + (re-search-forward "{"), + (point))))), +, + (defun my/is-string-concatenation-p (), + "Returns true if the previous line is a string concatenation", + (save-excursion, + (let ((start (point))), + (forward-line -1), + (if (re-search-forward " \\\+$" start t) t nil)))), +, + (defun my/inside-java-lambda-p (), + "Returns true if point is the first statement inside of a lambda", + (save-excursion, + (c-beginning-of-statement-1), + (let ((start (point))), + (forward-line -1),
[+++ b/Vagrantfile, +, + # https://github.com/elastic/elasticsearch/issues/30295, + config.vm.provider 'virtualbox' do |vbox|, + vbox.customize ['storagectl', :id, '--name', 'SATA Controller', '--hostiocache', 'on'], + end, +++ b/Vagrantfile, +, + # https://github.com/elastic/elasticsearch/issues/30295, + config.vm.provider 'virtualbox' do |vbox|, + vbox.customize ['storagectl', :id, '--name', 'SATA Controller', '--hostiocache', 'on'], + end, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/Vagrantfile, +, + # https://github.com/elastic/elasticsearch/issues/30295, + config.vm.provider 'virtualbox' do |vbox|, + vbox.customize ['storagectl', :id, '--name', 'SATA Controller', '--hostiocache', 'on'], + end, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/TESTING.asciidoc, ++, ++, ++, ++, ++, ++, +++ b/TESTING.asciidoc, ++, ++, ++, ++, ++, ++, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/TESTING.asciidoc, ++, ++, ++, ++, ++, ++, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/src/main/resources/checkstyle.xml, + <!-- only one statement per line should be allowed -->, + <module name="OneStatementPerLine"/>, +++ b/TESTING.asciidoc, ++, ++, ++, ++, ++, ++, +++ b/build.gradle, +final boolean bwc_tests_enabled
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, + private InternalSearchResponse internalResponse;, + public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, + internalResponse = readInternalSearchResponse(in);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, + private InternalSearchResponse internalResponse;, + public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, + internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, + private InternalSearchResponse internalResponse;, + public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, + internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, + private InternalSearchResponse internalResponse;, + public SearchResponse(InternalSearchResponse internalResponse, String
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportResumeFollowAction.java, + throw new IllegalArgumentException("the leader index setting[" + leaderSettings + "] and follower index settings [" +, + followerSettings + "] must be identical");, + // Follower index may be upgraded, while the leader index hasn't been upgraded, so it is expected, + // that these settings are different:, + settings.remove(IndexMetaData.SETTING_VERSION_UPGRADED);, + settings.remove(IndexMetaData.SETTING_VERSION_UPGRADED_STRING);, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportResumeFollowAction.java, + throw new IllegalArgumentException("the leader index setting[" + leaderSettings + "] and follower index settings [" +, + followerSettings + "] must be identical");, + // Follower index may be upgraded, while the leader index hasn't been upgraded, so it is
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/distribution/build.gradle, + } else {, + it.mode = 0644, +++ b/distribution/build.gradle, + } else {, + it.mode = 0644, +++ b/distribution/packages/build.gradle, + fileMode 0644, + if (segments[-2] == 'bin') {, + fcp.mode = 0755, + } else {, + fcp.mode = 0644, + }, + fileMode 0644, + fileMode 0644, + fileMode 0644, + fileMode 0644, +++ b/distribution/build.gradle, + } else {, + it.mode = 0644, +++ b/distribution/packages/build.gradle, + fileMode 0644, + if (segments[-2] == 'bin') {, + fcp.mode = 0755, + } else {, + fcp.mode = 0644, + }, + fileMode 0644, + fileMode 0644, +
[+++ b/qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartSettingsUpgradeIT.java, +import org.apache.lucene.util.LuceneTestCase.AwaitsFix;, +@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/33697")]
[+++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/en/index.asciidoc, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/en/index.asciidoc, +++ b/docs/en/installing-xes.asciidoc, +{xpack-ref}/setting-up-authentication.html#set-built-in-user-passwords[Setting Built-in User Passwords]., +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, + pick_clone_target, +++ b/docs/en/index.asciidoc, +++ b/docs/en/installing-xes.asciidoc, +{xpack-ref}/setting-up-authentication.html#set-built-in-user-passwords[Setting Built-in User Passwords]., +++ /dev/null, +++ b/build.gradle, + approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci,
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ /dev/null, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/TimedRequest.java, +public class TimedRequest implements Validatable {, + private TimeValue timeout;, + private TimeValue masterTimeout;, +, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/TimedRequest.java, +public class TimedRequest implements Validatable {, + private TimeValue timeout;, + private TimeValue masterTimeout;, +, +++ /dev/null, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/TimedRequest.java, +public class TimedRequest implements Validatable {, + private TimeValue timeout;, + private TimeValue masterTimeout;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/TimedRequest.java, +public class TimedRequest implements
[+++ b/server/src/test/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridTests.java, + return randomIntBetween(4, 12);]
[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLConfigurationReloader.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +public class SSLConfigurationReloader {, +, + private static final Logger logger = LogManager.getLogger(SSLConfigurationReloader.class);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLConfigurationReloader.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +public class SSLConfigurationReloader {, +, + private static final Logger logger = LogManager.getLogger(SSLConfigurationReloader.class);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +public class SSLService {, +, + private static final Logger logger = LogManager.getLogger(SSLService.class);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLConfigurationReloader.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +public class SSLConfigurationReloader {, +, + private static final Logger logger = LogManager.getLogger(SSLConfigurationReloader.class);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +public class SSLService {, +, + private static final Logger logger = LogManager.getLogger(SSLService.class);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/crypto/CryptoService.java, +import org.apache.logging.log4j.LogManager;,
[+++ b/server/src/main/java/org/elasticsearch/plugins/Plugin.java]
[+++ b/buildSrc/version.properties, +lucene = 7.4.0-snapshot-bcf9f5c36b, +++ b/buildSrc/version.properties, +lucene = 7.4.0-snapshot-bcf9f5c36b, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.4.0, +:lucene_version_path: 7_4_0, +++ b/buildSrc/version.properties, +lucene = 7.4.0-snapshot-bcf9f5c36b, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.4.0, +:lucene_version_path: 7_4_0, +++ /dev/null, +++ b/buildSrc/version.properties, +lucene = 7.4.0-snapshot-bcf9f5c36b, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.4.0, +:lucene_version_path: 7_4_0, +++ /dev/null, +++ b/modules/lang-expression/licenses/lucene-expressions-7.4.0-snapshot-bcf9f5c36b.jar.sha1, +c78657977dd5ca44defbdd77155b87e199d607b7, +++ b/buildSrc/version.properties, +lucene = 7.4.0-snapshot-bcf9f5c36b, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.4.0, +:lucene_version_path: 7_4_0, +++ /dev/null, +++ b/modules/lang-expression/licenses/lucene-expressions-7.4.0-snapshot-bcf9f5c36b.jar.sha1, +c78657977dd5ca44defbdd77155b87e199d607b7, +++ b/plugins/analysis-icu/build.gradle, + compile 'com.ibm.icu:icu4j:61.1', +++ b/buildSrc/version.properties, +lucene = 7.4.0-snapshot-bcf9f5c36b, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.4.0, +:lucene_version_path: 7_4_0, +++ /dev/null, +++ b/modules/lang-expression/licenses/lucene-expressions-7.4.0-snapshot-bcf9f5c36b.jar.sha1, +c78657977dd5ca44defbdd77155b87e199d607b7, +++ b/plugins/analysis-icu/build.gradle, + compile 'com.ibm.icu:icu4j:61.1', +++ /dev/null, +++ b/buildSrc/version.properties, +lucene = 7.4.0-snapshot-bcf9f5c36b, +++ b/docs/Versions.asciidoc, +:lucene_version: 7.4.0, +:lucene_version_path:
[+++ b/sql/cli/src/main/java/org/elasticsearch/xpack/sql/cli/net/client/HttpClient.java, +import org.elasticsearch.xpack.sql.net.client.JreHttpUrlConnection;, +import org.elasticsearch.xpack.sql.net.client.util.CheckedConsumer;, +import java.io.DataOutput;, +import java.io.IOException;, + Bytes put(CheckedConsumer<DataOutput, IOException> os) {, + Bytes put(String path, CheckedConsumer<DataOutput, IOException> os) {, +++ b/sql/cli/src/main/java/org/elasticsearch/xpack/sql/cli/net/client/HttpClient.java, +import org.elasticsearch.xpack.sql.net.client.JreHttpUrlConnection;, +import org.elasticsearch.xpack.sql.net.client.util.CheckedConsumer;, +import java.io.DataOutput;, +import java.io.IOException;, + Bytes put(CheckedConsumer<DataOutput, IOException> os) {, + Bytes put(String path, CheckedConsumer<DataOutput, IOException> os) {, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/HttpClient.java, +import org.elasticsearch.xpack.sql.net.client.JreHttpUrlConnection;, +import org.elasticsearch.xpack.sql.net.client.util.CheckedConsumer;, +import java.io.DataOutput;, +import java.io.IOException;, + BytesArray put(CheckedConsumer<DataOutput, IOException> os) throws SQLException {, + BytesArray put(String path, CheckedConsumer<DataOutput, IOException> os) throws SQLException { // NOCOMMIT remove path?, +++ b/sql/cli/src/main/java/org/elasticsearch/xpack/sql/cli/net/client/HttpClient.java, +import org.elasticsearch.xpack.sql.net.client.JreHttpUrlConnection;, +import org.elasticsearch.xpack.sql.net.client.util.CheckedConsumer;, +import java.io.DataOutput;, +import java.io.IOException;, + Bytes put(CheckedConsumer<DataOutput, IOException> os) {, + Bytes put(String
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/110_field_collapsing.yml, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/110_field_collapsing.yml, +++ b/server/src/main/java/org/elasticsearch/search/collapse/CollapseBuilder.java, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/110_field_collapsing.yml, +++ b/server/src/main/java/org/elasticsearch/search/collapse/CollapseBuilder.java, +++ b/server/src/main/java/org/elasticsearch/search/query/TopDocsCollectorContext.java, + private final boolean rescore;, + boolean trackMaxScore, boolean rescore) {, + this.rescore = rescore;, +, + @Override, + boolean shouldRescore() {, + return rescore;, + }, + if (searchContext.collapse() != null) {, + boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores();, + return new CollapsingTopDocsCollectorContext(searchContext.collapse(),, + searchContext.sort(), numDocs, trackScores, rescore);, + }, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/110_field_collapsing.yml, +++ b/server/src/main/java/org/elasticsearch/search/collapse/CollapseBuilder.java, +++ b/server/src/main/java/org/elasticsearch/search/query/TopDocsCollectorContext.java, + private final boolean rescore;, + boolean trackMaxScore, boolean rescore) {, + this.rescore = rescore;, +, + @Override, + boolean shouldRescore() {, + return rescore;, +
[+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java, + throw new IllegalArgumentException("_reindex doesn't support [pipeline] as a query parameter. ", +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java, + throw new IllegalArgumentException("_reindex doesn't support [pipeline] as a query parameter. ", +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RestReindexActionTests.java, + assertEquals("_reindex doesn't support [pipeline] as a query parameter. Specify it in the [dest] object instead.", e.getMessage());]
[+++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/indices/breaker/MemoryStatsBenchmark.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed
[+++ b/server/src/main/java/org/elasticsearch/index/IndexModule.java, +import java.util.Objects;, + private final EngineFactory engineFactory;, + /**, + * Construct the index module for the index with the specified index settings. The index module contains extension points for plugins, + * via {@link org.elasticsearch.plugins.PluginsService#onIndexModule(IndexModule)}., + *, + * @param indexSettings the index settings, + * @param analysisRegistry the analysis registry, + * @param engineFactory the engine factory, + */, + public IndexModule(final IndexSettings indexSettings, final AnalysisRegistry analysisRegistry, final EngineFactory engineFactory) {, + this.engineFactory = Objects.requireNonNull(engineFactory);, + * The engine factory provided during construction of this index module., + *, + * @return the engine factory,
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/plugins/ingest-attachment/build.gradle, +++ b/plugins/ingest-attachment/build.gradle, +++ b/plugins/ingest-attachment/src/main/java/org/elasticsearch/ingest/attachment/AttachmentProcessor.java, + // TODO: stop using LanguageIdentifier..., +++ b/plugins/ingest-attachment/build.gradle, +++ b/plugins/ingest-attachment/src/main/java/org/elasticsearch/ingest/attachment/AttachmentProcessor.java, + // TODO: stop using LanguageIdentifier..., +++ b/plugins/mapper-size/build.gradle, +++ b/plugins/ingest-attachment/build.gradle, +++ b/plugins/ingest-attachment/src/main/java/org/elasticsearch/ingest/attachment/AttachmentProcessor.java, + // TODO: stop using LanguageIdentifier..., +++ b/plugins/mapper-size/build.gradle, +++ b/plugins/transport-nio/build.gradle, +++ b/plugins/ingest-attachment/build.gradle, +++ b/plugins/ingest-attachment/src/main/java/org/elasticsearch/ingest/attachment/AttachmentProcessor.java, + // TODO: stop using LanguageIdentifier..., +++ b/plugins/mapper-size/build.gradle, +++ b/plugins/transport-nio/build.gradle, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NettyAdaptor.java, +class NettyAdaptor {]
[+++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/docs/reference/index-modules/similarity.asciidoc, +WARNING: While scripted similarities provide a lot of flexibility, there is, +a set of rules that they need to satisfy. Failing to do so could make, +Elasticsearch silently return wrong top hits or fail with internal errors at, +search time:, +, + - Returned scores must be positive., + - All other variables remaining equal, scores must not decrease when, + `doc.freq` increases., + - All other variables remaining equal, scores must not increase when, + `doc.length` increases., +, +You might have noticed that a significant part of the above script depends on, +++ b/docs/reference/index-modules/similarity.asciidoc, +WARNING: While
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/docs/reference/settings/security-settings.asciidoc, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/docs/reference/settings/security-settings.asciidoc, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, + FAILED_TO_COMMIT_CLUSTER_STATE_EXCEPTION(org.elasticsearch.cluster.coordination.FailedToCommitClusterStateException.class,, + org.elasticsearch.cluster.coordination.FailedToCommitClusterStateException::new, 140, UNKNOWN_VERSION_ADDED),, + MultiBucketConsumerService.TooManyBucketsException::new, 149, Version.V_7_0_0_alpha1),, + COORDINATION_STATE_REJECTED_EXCEPTION(org.elasticsearch.cluster.coordination.CoordinationStateRejectedException.class,, + org.elasticsearch.cluster.coordination.CoordinationStateRejectedException::new, 150, Version.V_7_0_0_alpha1);, +, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time,
[+++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/update/35_if_seq_no.yml, + version: " - 6.6.99", + reason: if_seq_no was added in 6.7.0, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/update/35_if_seq_no.yml, + version: " - 6.6.99", + reason: if_seq_no was added in 6.7.0, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateRequest.java,
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/x-pack/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/WatcherRestartIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.upgrades;, +, +import org.apache.http.util.EntityUtils;, +import org.elasticsearch.client.Request;, +import org.elasticsearch.client.Response;, +, +import java.nio.charset.StandardCharsets;, +, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.not;, +, +public class WatcherRestartIT extends AbstractUpgradeTestCase {, +, + public void testWatcherRestart() throws Exception {, + client().performRequest(new Request("POST", "/_xpack/watcher/_stop"));, + ensureWatcherStopped();, +, + client().performRequest(new Request("POST", "/_xpack/watcher/_start"));, + ensureWatcherStarted();, + }, +, + private void ensureWatcherStopped() throws
[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Processors.java, +import org.elasticsearch.xpack.sql.expression.predicate.IsNotNullProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.logical.BinaryLogicProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.logical.NotProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.operator.comparison.InProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.regex.RegexProcessor;, + // logical, + entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new));, + entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new));, + // null, + entries.add(new Entry(Processor.class, IsNotNullProcessor.NAME, IsNotNullProcessor::new));, + // comparators, + entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new));, + entries.add(new Entry(Processor.class, InProcessor.NAME, InProcessor::new));, + // regex, + entries.add(new Entry(Processor.class, RegexProcessor.NAME, RegexProcessor::new));, +, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Processors.java, +import org.elasticsearch.xpack.sql.expression.predicate.IsNotNullProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.logical.BinaryLogicProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.logical.NotProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.operator.comparison.InProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.regex.RegexProcessor;, + // logical, + entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new));, + entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new));, + // null, + entries.add(new Entry(Processor.class, IsNotNullProcessor.NAME, IsNotNullProcessor::new));, + // comparators, + entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new));, + entries.add(new
[+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/TestingConventionsTasks.java, +import java.util.Collections;, + final Map<String, Set<File>> classFilesPerTask = classFilesPerTask(allTestClassFiles);, + Map<String, Set<Class<?>>> testClassesPerTask = classFilesPerTask.entrySet().stream(), + classFilesPerTask.keySet().stream(), + .collect(Collectors.joining(",")) + ")",, + classFilesPerTask.values().stream(), + public Map<String, Set<File>> classFilesPerTask(FileTree testClassFiles) {, + Map<String, Set<File>> collector = new HashMap<>();, + // RandomizedTestingTask, + collector.putAll(, + )), + );, + // Gradle Test, + collector.putAll(, + Stream.concat(, + )), + );, + return Collections.unmodifiableMap(collector);, + // Include the message to get more info to get more a more useful message when running Gradle without -s, + throw new IllegalStateException(, + "Failed to inspect class " + clazz.getName() + ". Missing
[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, + String badBody = /GET|PUT|POST|HEAD|OPTIONS|DELETE|startyaml|#/, + String rawRequest = /(?:$method\s+$pathAndQuery$body?)/, + String yamlRequest = /(?:startyaml(?s)(?<yaml>.+?)(?-s)endyaml)/, + String nonComment = /(?:$rawRequest|$yamlRequest)/, + String yamlRequest = matcher.group("yaml");, + if (yamlRequest != null) {, + current.println(yamlRequest), + return, + }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, + String badBody = /GET|PUT|POST|HEAD|OPTIONS|DELETE|startyaml|#/, + String rawRequest = /(?:$method\s+$pathAndQuery$body?)/, + String yamlRequest = /(?:startyaml(?s)(?<yaml>.+?)(?-s)endyaml)/, + String nonComment = /(?:$rawRequest|$yamlRequest)/, + String yamlRequest = matcher.group("yaml");, + if (yamlRequest != null) {, + current.println(yamlRequest), + return, + }, +++ b/docs/README.asciidoc, +In addition to the standard CONSOLE syntax these snippets can contain blocks, +of yaml surrounded by markers like this:,
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java, + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/39575")]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker. Instead, send an email to, +security@elastic.co. If you have any doubts, send an email to, +security@elastic.co., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Please do not submit any issues related to security vulnerabilities that, +could be exploited by an attacker.
[+++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java, + @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/36761")]
[+++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.editorconfig, +# EditorConfig: http://editorconfig.org/, +, +root = true, +, +[*.java], +charset = utf-8, +indent_style = space, +indent_size = 4, +trim_trailing_whitespace = true, +insert_final_newline = true, +++ b/.github/ISSUE_TEMPLATE.md, +, +** Please read the guidelines below. **, +, +Issues that do not follow these guidelines are likely to be closed., +, +1. GitHub is reserved for bug reports and feature requests. The best place to, + ask a general question is at the Elastic
[+++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/put-policy.asciidoc, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++ b/x-pack/docs/en/rest-api/index-lifecycle/delete-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/get-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/index-lifecycle/put-policy.asciidoc, +++ b/x-pack/docs/en/rest-api/info.asciidoc, + "index_lifecycle" : {, + "description" : "Index lifecycle management for the Elastic Stack",, + "available" : true,, + "enabled" : true, + },, +++ b/x-pack/docs/en/index-lifecycle/index.asciidoc, +[[xpack-index-lifecycle]], += Automating Index Properties Over Time, +++
[+++ b/library/findbugs-exclude.xml, + <!-- DecodeJob tasks are ordered, but equivalent ordering does not imply equality -->, + <Match>, + <Class name="com.bumptech.glide.load.engine.DecodeJob" />, + <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS" />, + </Match>, +, +++ b/library/findbugs-exclude.xml, + <!-- DecodeJob tasks are ordered, but equivalent ordering does not imply equality -->, + <Match>, + <Class name="com.bumptech.glide.load.engine.DecodeJob" />, + <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS" />, + </Match>, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.executor.GlideExecutor;, + GlideExecutor executor = mock(GlideExecutor.class);, + doAnswer(new Answer<Void>() {, + public Void answer(InvocationOnMock invocation) throws Throwable {, + return null;, + }).when(executor).execute(any(Runnable.class));, + .setResizeExecutor(executor).setDiskCacheExecutor(executor);, +++ b/library/findbugs-exclude.xml, + <!-- DecodeJob tasks are ordered, but equivalent ordering does not
[+++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + public InputStream loadData(Priority priority) throws IOException {, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + public InputStream loadData(Priority priority) throws IOException {, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +@Config(manifest = Config.NONE, emulateSdk = 18, shadows =, + VolleyStreamFetcherServerTest.FakeSystemClock.class), + public void testReturnsNullIfRedirectLocationIsEmpty() throws Exception {, + assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, + public void testReturnsNullIfStatusCodeIsNegativeOne() throws Exception {, + assertThat(getFetcher().loadData(Priority.LOW)).isNull();, + public void testReturnsNullAfterTooManyRedirects() throws Exception {, + assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, + public void testReturnsNullIfStatusCodeIs500() throws Exception {, + assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, + public void testReturnsNullIfStatusCodeIs400() throws Exception {, + assertThat(getFetcher().loadData(Priority.LOW)).isNull();, +++
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.data.DataRewinderRegistry;, +import com.bumptech.glide.load.data.InputStreamRewinder;, + private final DataRewinderRegistry dataRewinderRegistry;, + dataRewinderRegistry = new DataRewinderRegistry();, + dataRewinderRegistry.register(new InputStreamRewinder.Factory());, +, + return new RequestContext(loaderRegistry, encoderRegistry, decoderRegistry, resourceEncoderRegistry,, + dataRewinderRegistry);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.data.DataRewinderRegistry;, +import com.bumptech.glide.load.data.InputStreamRewinder;, + private final DataRewinderRegistry dataRewinderRegistry;, + dataRewinderRegistry = new DataRewinderRegistry();, + dataRewinderRegistry.register(new InputStreamRewinder.Factory());, +, + return new RequestContext(loaderRegistry, encoderRegistry, decoderRegistry, resourceEncoderRegistry,, + dataRewinderRegistry);, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java, + * Synchronously fetch data from which a resource can be decoded. This will always be called on, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.data.DataRewinderRegistry;, +import com.bumptech.glide.load.data.InputStreamRewinder;, + private final DataRewinderRegistry dataRewinderRegistry;, + dataRewinderRegistry = new DataRewinderRegistry();, + dataRewinderRegistry.register(new InputStreamRewinder.Factory());, +, +
[+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + *, + * @deprecated If you must disable hardware bitmaps, set, + * {@link com.bumptech.glide.load.resource.bitmap.Downsampler#ALLOW_HARDWARE_CONFIG} to false, + * instead., + @Deprecated, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + *, + * @deprecated If you must disable hardware bitmaps, set, + * {@link com.bumptech.glide.load.resource.bitmap.Downsampler#ALLOW_HARDWARE_CONFIG} to false, + * instead., + @Deprecated, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +import android.graphics.Bitmap;, + boolean isBitmapTransformationSet() {, + return transformations.get(Bitmap.class) != null;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + *, + * @deprecated If you must disable hardware bitmaps, set, + * {@link
[+++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java, + * the concrete data type returned by the AssetManager., +++ b/CONTRIBUTING.md, + * **wontfix**:
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CircleCrop.java]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java, + @Test, + public void loadWideGamutImage_withArgb888OfSufficientSizeInPool_usesArgb8888Bitmap() {, + Bitmap wideGamut = Bitmap.createBitmap(100, 50, Bitmap.Config.RGBA_F16);, + byte[] data = asPng(wideGamut);, +, + Bitmap argb8888 = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + Glide.init(context, new GlideBuilder(), + .setBitmapPool(new LruBitmapPool(wideGamut.getAllocationByteCount() * 5)));, + Glide.get(context).getBitmapPool().put(argb8888);, +, + Bitmap result =, + concurrency.get(, + Glide.with(context), + .asBitmap(), + .load(data), + .submit());, +, + assertThat(result).isSameAs(argb8888);, + }, +, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java, + @Test, + public void loadWideGamutImage_withArgb888OfSufficientSizeInPool_usesArgb8888Bitmap() {, + Bitmap wideGamut = Bitmap.createBitmap(100, 50, Bitmap.Config.RGBA_F16);, + byte[] data = asPng(wideGamut);, +, + Bitmap argb8888 = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + Glide.init(context, new GlideBuilder(), + .setBitmapPool(new LruBitmapPool(wideGamut.getAllocationByteCount() * 5)));,
[+++ b/annotation/compiler/test/build.gradle, +, +test.maxParallelForks = 2, +, +++ b/annotation/compiler/test/build.gradle, +, +test.maxParallelForks = 2, +, +++ b/build.gradle, + options.fork = true, +++ b/annotation/compiler/test/build.gradle, +, +test.maxParallelForks = 2, +, +++ b/build.gradle, + options.fork = true, +++ b/gradle.properties, +org.gradle.jvmargs=-Xmx4096M, +TEST_JVM_MEMORY_SIZE=4096M, +++ b/annotation/compiler/test/build.gradle, +, +test.maxParallelForks = 2, +, +++ b/build.gradle, + options.fork = true, +++ b/gradle.properties, +org.gradle.jvmargs=-Xmx4096M, +TEST_JVM_MEMORY_SIZE=4096M, +++ b/library/build.gradle, +, + // Initializing Robolectric is expensive, two threads seem to be around the only level where any, + // improvement is seen., + testTask.maxParallelForks = 2]
[+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + * <p>On Android O+, this format will will use ARGB_8888 only when it's not possible to use, + * {@link android.graphics.Bitmap.Config#HARDWARE}., + *, + * this setting is a preference, not a promise., + * Identical to {@link #PREFER_ARGB_8888} but prevents Glide from using {@link, + * android.graphics.Bitmap.Config#HARDWARE} on Android O+, + */, + PREFER_ARGB_8888_DISALLOW_HARDWARE,, +, + /**, + *, + * <p>On Android O+, this format will will use ARGB_8888 only when it's not possible to use, + * {@link android.graphics.Bitmap.Config#HARDWARE}., +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + * <p>On Android O+, this format will will use ARGB_8888 only
[+++ b/library/build.gradle, +++ b/library/build.gradle, +++ /dev/null, +++ b/library/build.gradle, +++ /dev/null, +++ b/scripts/upload.gradle, + : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/', + : 'https://oss.sonatype.org/content/repositories/snapshots/', + return hasProperty('USERNAME') ? USERNAME : (hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ''), + return hasProperty('PASSWORD') ? PASSWORD : (hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ''), + name = 'Simplified BSD License', + url = 'http://www.opensource.org/licenses/bsd-license', + distribution = 'repo', + name = 'The Apache Software License, Version 2.0', + url = 'http://www.apache.org/licenses/LICENSE-2.0.txt', + distribution = 'repo', + required { isReleaseBuild() && gradle.taskGraph.hasTask('uploadArchives') }, + def isAndroidProject = project.plugins.hasPlugin('com.android.application') || project.plugins.hasPlugin('com.android.library'), +, + if (isAndroidProject) {, + def releaseVariants = project.android.libraryVariants.findAll {, + it.buildType.name.equalsIgnoreCase('release'), +
[+++ b/glide/build.gradle, + } as Javadoc, + } as Task, + } as Task, + jar.dependsOn(project.tasks.build), +++ b/glide/build.gradle, + } as Javadoc, + } as Task, + } as Task, + jar.dependsOn(project.tasks.build), +++ b/gradle.properties, +# TODO: increase this to 2.0.+ when we compile with Java 7., +++ b/glide/build.gradle, + } as Javadoc, + } as Task, + } as Task, + jar.dependsOn(project.tasks.build), +++ b/gradle.properties, +# TODO: increase this to 2.0.+ when we compile with Java 7., +++ b/integration/build.gradle, +import com.android.build.gradle.api.BaseVariant, + android.libraryVariants.all { BaseVariant variant ->, +++ b/glide/build.gradle, + } as Javadoc, + } as Task, + } as
[+++ b/.gitmodules, +++ b/.gitmodules, +++ /dev/null]
[+++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java|AnimationOptions.java|BaseDecodeOptions.java|RequestOptions.java" checks="NoClone" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java|AnimationOptions.java|BaseDecodeOptions.java|RequestOptions.java" checks="NoClone" />, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java|AnimationOptions.java|BaseDecodeOptions.java|RequestOptions.java" checks="NoClone" />, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + Request request = new Request.Builder(), +, + @Override, + public Class<InputStream> getDataClass() {, + return InputStream.class;, + }, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java|AnimationOptions.java|BaseDecodeOptions.java|RequestOptions.java" checks="NoClone" />, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + Request request = new Request.Builder(), +, + @Override, + public Class<InputStream> getDataClass() {, + return InputStream.class;, + }, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +import com.bumptech.glide.load.model.MultiModelLoaderFactory;, + private final OkHttpClient
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.support.annotation.VisibleForTesting;, + @VisibleForTesting, + public static void tearDown() {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.support.annotation.VisibleForTesting;, + @VisibleForTesting, + public static void tearDown() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import com.bumptech.glide.Glide;, + this(, + new GifState(, + bitmapPool,, + new GifFrameLoader(, + // TODO(b/27524013): Factor out this call to Glide.get(), + Glide.get(context),, + gifDecoder,, + targetFrameWidth,, + targetFrameHeight,, + frameTransformation,, + firstFrame)));, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.support.annotation.VisibleForTesting;, + @VisibleForTesting, + public static void tearDown() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import com.bumptech.glide.Glide;, + this(, + new GifState(, + bitmapPool,, + new GifFrameLoader(, + // TODO(b/27524013): Factor out this call to Glide.get(), + Glide.get(context),, + gifDecoder,, +
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import javax.lang.model.element.AnnotationMirror;, + private static final ClassName CHECK_RESULT_CLASS_NAME =, + ClassName.get("android.support.annotation", "CheckResult");, + MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride), + .build());, +, + for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, + builder.addAnnotation(AnnotationSpec.get(mirror));, + }, +, + return builder.build();, + && !input.type.equals(TypeName.get(SafeVarargs.class)), + // @CheckResult isn't applicable for RequestBuilder because there is no, + // autoClone() in RequestBuilder., + && !input.type.equals(CHECK_RESULT_CLASS_NAME);, + .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import javax.lang.model.element.AnnotationMirror;, + private static final ClassName CHECK_RESULT_CLASS_NAME =, + ClassName.get("android.support.annotation", "CheckResult");, + MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride), + .build());, +, + for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, + builder.addAnnotation(AnnotationSpec.get(mirror));, + }, +, + return builder.build();, +
[+++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java, + if (animatable != null) {, + animatable.stop();, + }, +++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java, + if (animatable != null) {, + animatable.stop();, + }, +++ b/library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java, +import static org.mockito.Mockito.never;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, + @Mock private AnimatedDrawable animatedDrawable;, + MockitoAnnotations.initMocks(this);, +, + @Test, + public void onLoadCleared_withAnimatableDrawable_stopsDrawable() {, + target.onResourceReady(animatedDrawable, /*transition=*/ null);, + verify(animatedDrawable).start();, + verify(animatedDrawable, never()).stop();, +, + target.onLoadCleared(/*placeholder=*/ null);, +, + verify(animatedDrawable).stop();, + }, +]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + private static final String USER_AGENT_HEADER = "User-Agent";, + private static final String DEFAULT_USER_AGENT = System.getProperty("http.agent");, +, + boolean isUserAgentSet = false;, + String key = headerEntry.getKey();, + requestBuilder.addHeader(key, headerEntry.getValue());, + isUserAgentSet |= USER_AGENT_HEADER.equalsIgnoreCase(key);, + }, + if (!isUserAgentSet) {, + requestBuilder.addHeader(USER_AGENT_HEADER, DEFAULT_USER_AGENT);]
[+++ b/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +package com.bumptech.photos.loader.image;, +, +import android.graphics.Bitmap;, +, +import java.lang.ref.WeakReference;, +, +/**, + * Created with IntelliJ IDEA., + * User: sam, + * Date: 1/1/13, + * Time: 2:45 PM, + * To change this template use File | Settings | File Templates., + */, +public abstract class BaseImageLoader<T> implements ImageLoader<T> {, + @Override, + public final Object fetchImage(String path, T model, int width, int height, ImageReadyCallback cb) {, + doFetchImage(path, model, width, height, cb);, + return cb;, + }, +, + @Override, + public void clear() { }, +, + protected abstract void doFetchImage(String path, T model,
[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + if (target == null) {, + throw new IllegalArgumentException("You must pass in a non null Target");, + }, +, + if (view == null) {, + throw new IllegalArgumentException("You must pass in a non null View");, + }, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + if (target == null) {, + throw new IllegalArgumentException("You must pass in a non null Target");, + }, +, + if (view == null) {, + throw new IllegalArgumentException("You must pass in a non null View");, + }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, +import com.bumptech.glide.load.model.NullEncoder;, + private final NullEncoder<GifDecoder> sourceEncoder;, + sourceEncoder = NullEncoder.get();, + .sourceEncoder(sourceEncoder), + .transform(transformation),
[+++ b/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java, +package com.bumptech.glide.util;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.net.SocketTimeoutException;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyLong;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +public class ExceptionCatchingInputStreamTest {, +, + private InputStream wrapped;, + private ExceptionCatchingInputStream is;, +, + @Before, + public void setUp() throws Exception {, + wrapped = mock(InputStream.class);, + is = new ExceptionCatchingInputStream();, + is.setInputStream(wrapped);, + }, +, + @After, + public void tearDown() {, + ExceptionCatchingInputStream.clearQueue();, + }, +,
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + .addModifiers(Modifier.PUBLIC, Modifier.FINAL), + .varargs(requestOptionMethod.varargs), + .addAnnotations(, + FluentIterable.from(requestOptionMethod.annotations), + .filter(new Predicate<AnnotationSpec>() {, + @Override, + public boolean apply(AnnotationSpec input) {, + return !input.type.equals(TypeName.get(Override.class));, + }, + }), + .toList(), + ), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + .addModifiers(Modifier.PUBLIC, Modifier.FINAL), + .varargs(requestOptionMethod.varargs), + .addAnnotations(, + FluentIterable.from(requestOptionMethod.annotations), + .filter(new Predicate<AnnotationSpec>() {, + @Override, + public boolean apply(AnnotationSpec input) {, + return !input.type.equals(TypeName.get(Override.class));, + }, + }), + .toList(), + ), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, + MethodSpec.Builder result = MethodSpec.overriding(methodToOverride), + .addModifiers(Modifier.FINAL), + .build());, +, + if (methodToOverride.getSimpleName().toString().equals("transforms")) {, + result.addAnnotation(, + AnnotationSpec.builder(SafeVarargs.class), + .build());, + }, +, + return result.build();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +
[+++ b/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java, + // See https://errorprone.info/bugpattern/IntLongMath., + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java, + // See https://errorprone.info/bugpattern/IntLongMath., + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java, + // See https://errorprone.info/bugpattern/IntLongMath., + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, + if (!cacheKeys.contains(data.sourceKey)) {, + }, + for (int j = 0; j < data.alternateKeys.size(); j++) {, + if (!cacheKeys.contains(data.alternateKeys.get(j))) {, + cacheKeys.add(data.alternateKeys.get(j));, + }, + }]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +import com.bumptech.glide.GlideContext;, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.Transformation;, + harness.isMemoryCacheable = false;, + harness.isMemoryCacheable = false;, + .buildKey(eq(harness.model), eq(harness.signature), eq(harness.width), eq(harness.height),, + eq(harness.transformations), eq(Object.class), eq(Object.class), eq(harness.options));, + Object model = new Object();, + Key signature = mock(Key.class);, + Map<Class<?>, Transformation<?>> transformations = new HashMap<>();, + Options options = new Options();, + GlideContext glideContext = mock(GlideContext.class);, + boolean isMemoryCacheable = true;, + when(keyFactory.buildKey(eq(model), eq(signature), anyInt(), anyInt(), eq(transformations),, + eq(Object.class), eq(Object.class), eq(options))).thenReturn(cacheKey);, + return engine.load(glideContext,, + model,, + signature,, + width,, + height,, + Object.class,, + Object.class,, + Priority.HIGH,, + DiskCacheStrategy.ALL,, + transformations,, + false /*isTransformationRequired*/,, + options,, +
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + int averageColor;, + if (sampleSize == 1) {, + int currentColorIndex = ((int) mainPixels[sx]) & 0xff;, + averageColor = act[currentColorIndex];, + } else {, + // TODO: This is substantially slower (up to 50ms per frame) than just grabbing the, + // current color index above, even with a sample size of 1., + averageColor = averageColorsNear(sx, maxPositionInSource, currentFrame.iw);, + }]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + private static volatile boolean isInitializing;, + // In the thread running initGlide(), one or more classes may call Glide.get(context)., + // Without this check, those calls could trigger infinite recursion., + if (isInitializing) {, + throw new IllegalStateException("You cannot call Glide.get() in registerComponents(),", + + " use the provided Glide instance instead");, + }, + isInitializing = true;, + isInitializing = false;, + public static synchronized void init(Glide glide) {, + public static synchronized void tearDown() {, + Glide glide = builder.build(applicationContext);, + Glide.glide = glide;]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, + TypeSpec generate(, + String generatedCodePackageName, String glideName, TypeSpec generatedRequestManager) {, + .addMethods(, + generateOverridesForGlideMethods(generatedCodePackageName, generatedRequestManager)), + final String generatedCodePackageName, final TypeSpec generatedRequestManager) {, + return overrideGlideWithMethod(, + generatedCodePackageName, generatedRequestManager, input);, + String packageName, TypeSpec generatedRequestManager, ExecutableElement methodToOverride) {, + ClassName.get(packageName, generatedRequestManager.name);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, + TypeSpec generate(, + String generatedCodePackageName, String glideName, TypeSpec generatedRequestManager) {, + .addMethods(, + generateOverridesForGlideMethods(generatedCodePackageName, generatedRequestManager)), + final String generatedCodePackageName, final TypeSpec generatedRequestManager) {, + return overrideGlideWithMethod(, + generatedCodePackageName, generatedRequestManager, input);, + String packageName, TypeSpec generatedRequestManager, ExecutableElement methodToOverride) {, + ClassName.get(packageName, generatedRequestManager.name);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + private static final String REQUEST_BUILDER_PACKAGE_NAME = "com.bumptech.glide";, +
[+++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +, + @Override, + public void removeCallback(SizeReadyCallback cb) {, + // Do nothing because we don't retain references to SizeReadyCallbacks., + }, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +, + @Override, + public void removeCallback(SizeReadyCallback cb) {, + // Do nothing because we don't retain references to SizeReadyCallbacks., + }, +++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java, + @Override, + public void removeCallback(SizeReadyCallback cb) {, + // Do nothing because we do not retain references to SizeReadyCallbacks., + }, +, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +, + @Override, + public void removeCallback(SizeReadyCallback cb) {, + // Do nothing because we don't retain references to SizeReadyCallbacks., + }, +++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java,
[+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + registry = new Registry(), +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + registry = new Registry(), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, + public Registry() {, + this.modelLoaderRegistry = new ModelLoaderRegistry(exceptionListPool);, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + registry = new Registry(), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, + public Registry() {, + this.modelLoaderRegistry = new ModelLoaderRegistry(exceptionListPool);, +++ b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java, + * @param contentResolver Any {@link android.content.ContentResolver}., +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import com.bumptech.glide.manager.ConnectivityMonitor;, +import com.bumptech.glide.manager.ConnectivityMonitorFactory;, +import com.bumptech.glide.manager.RequestTracker;, +, +public class RequestManager {, +, + private final ConnectivityMonitor connectivityMonitor;, + private final RequestTracker requestTracker;, +, + public RequestManager(Context context) {, + this(context, new RequestTracker(), new ConnectivityMonitorFactory());, + }, +, + RequestManager(Context context, RequestTracker requestTracker, ConnectivityMonitorFactory factory) {, + this.requestTracker = requestTracker;, + this.connectivityMonitor = factory.build(context, new RequestManagerConnectivityListener());, + connectivityMonitor.register();, + }, +, + public RequestTracker getRequestTracker() {, + return requestTracker;, + }, +, + public void onStart() {, + // onStart might not be called because this object may be
[+++ b/.travis.yml, +sudo: false, +]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + BitmapEncoder bitmapEncoder = new BitmapEncoder(arrayPool);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + BitmapEncoder bitmapEncoder = new BitmapEncoder(arrayPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, +import android.support.annotation.Nullable;, +import com.bumptech.glide.load.data.BufferedOutputStream;, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, + @Nullable, + private final ArrayPool arrayPool;, +, + public BitmapEncoder(@NonNull ArrayPool arrayPool) {, + this.arrayPool = arrayPool;, + }, +, + /**, + * @deprecated Use {@link #BitmapEncoder(ArrayPool)} instead., + */, + @Deprecated, + public BitmapEncoder() {, + arrayPool = null;, + }, + if (arrayPool != null) {, + os = new BufferedOutputStream(os, arrayPool);, + }, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + BitmapEncoder bitmapEncoder = new BitmapEncoder(arrayPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, +import android.support.annotation.Nullable;, +import com.bumptech.glide.load.data.BufferedOutputStream;, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +
[+++ b/samples/flickr/res/layout/flickr_search_activity.xml, +++ b/samples/flickr/res/layout/flickr_search_activity.xml, +++ b/samples/flickr/res/values/strings.xml, +++ b/samples/flickr/res/layout/flickr_search_activity.xml, +++ b/samples/flickr/res/values/strings.xml, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrSearchActivity.java, +++ b/samples/flickr/res/layout/flickr_search_activity.xml, +++ b/samples/flickr/res/values/strings.xml, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrSearchActivity.java, +++ b/samples/flickr/src/com/bumptech/flickr/api/Api.java, + Log.d("API: searching");, + error.printStackTrace();]
[+++ b/README.md, +Then in your Activity or Application, register the Volley based model loader:, +```java, +public void onCreate() {, + Glide.get(this).register(GlideUrl.class, InputStream.class, new VolleyUrlLoader.Factory(yourRequestQueue));, + ..., +}, +```, +, +After the call to register any requests using http or https will go through Volley., +, +++ b/README.md, +Then in your Activity or Application, register the Volley based model loader:, +```java, +public void onCreate() {, + Glide.get(this).register(GlideUrl.class, InputStream.class, new VolleyUrlLoader.Factory(yourRequestQueue));, + ..., +}, +```, +, +After the call to register any requests using http or https will go through Volley., +, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.util.Util;, + Util.assertMainThread();, + request.begin();, +
[+++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +import com.bumptech.glide.resize.bitmap_recycle.LruBitmapPool;, + bitmapPool = new LruBitmapPool(getSafeMemoryCacheSize(context));, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +import com.bumptech.glide.resize.bitmap_recycle.LruBitmapPool;, + bitmapPool = new LruBitmapPool(getSafeMemoryCacheSize(context));, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java, +package com.bumptech.glide.resize.bitmap_recycle;, +, +import android.graphics.Bitmap;, +import com.bumptech.glide.util.Log;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Map;, +, +/**, + * Created with IntelliJ IDEA., + * User: sam, + * Date: 7/10/13, + * Time: 1:47 PM, + * To change this template use File | Settings | File Templates., + */, +public class LruBitmapPool implements BitmapPool {, + private final Map<Integer, ArrayList<Bitmap>> pool = new HashMap<Integer, ArrayList<Bitmap>>();, + //Typically there should only be a handful of
[+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java, + // openInputStream can throw NPEs., + } catch (IOException | NullPointerException e) {, + try {, + // openInputStream can throw NPEs., + } catch (NullPointerException e) {, + throw new FileNotFoundException("NPE opening uri: " + thumbnailUri);, + }]
[+++ b/samples/flickr/src/main/res/values/dimens.xml, +]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, + validateAnnotatedNonNull(executableElement);, + validateNewGlideTypeAnnotations(executableElement);, + private void validateNewGlideTypeAnnotations(ExecutableElement executableElement) {, + validateAnnotatedNonNull(executableElement);, + }, +, + private void validateAnnotatedNonNull(ExecutableElement executableElement) {, + Set<String> annotationNames =, + FluentIterable.from(executableElement.getAnnotationMirrors()), + .transform(new Function<AnnotationMirror, String>() {, + @Override, + public String apply(AnnotationMirror input) {, + return input.getAnnotationType().asElement().toString();, + }, + }), + .toSet();, + if (!annotationNames.contains("android.support.annotation.NonNull")) {, + processingEnvironment.getMessager().printMessage(, + Kind.WARNING,, + executableElement.getEnclosingElement() + "#" + executableElement.getSimpleName(), + + " is missing the @NonNull annotation,", + + " please add it to ensure that your extension methods are always returning non-null", + + " values");, + }, + }, +, +++
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +import com.squareup.javapoet.AnnotationSpec;, +import javax.lang.model.element.AnnotationMirror;, +, + for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, + builder.addAnnotation(AnnotationSpec.get(mirror));, + }, +]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java, + // Calling setDataSource is expensive so avoid doing so unless we're actually called., + // For non-videos this isn't any cheaper, but for videos it safes the redundant call and, + // 50-100ms., + } catch (RuntimeException e) {, + // MediaMetadataRetriever APIs throw generic runtime exceptions when given invalid data., + throw new IOException(e);]
[+++ b/samples/gallery/build.gradle, +apply plugin: 'com.android.application', +, +dependencies {, + compile project(':library'), + compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}", + compile "com.android.support:recyclerview-v7:21.0.3", +}, +, +android {, + compileSdkVersion 21, + buildToolsVersion "21.1.2", +, + defaultConfig {, + applicationId 'com.bumptech.glide.samples.gallery', + minSdkVersion 19, + targetSdkVersion 21, + versionCode 1, + versionName "1.0", + }, +, + compileOptions {, + sourceCompatibility JavaVersion.VERSION_1_7, + targetCompatibility JavaVersion.VERSION_1_7, + }, +}, +, +task run(type: Exec, dependsOn: 'installDebug') {, + description 'Installs the APK and runs the main activity: "gradlew :samples:???:run"', + commandLine "${android.sdkDirectory}/platform-tools/adb", 'shell', 'am', 'start', '-n', 'com.bumptech.glide.samples.flickr/.FlickrSearchActivity', +}, +++ b/samples/gallery/build.gradle, +apply plugin: 'com.android.application', +, +dependencies {, + compile
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java, +import org.junit.Before;, + private static final String URL = "https://imgs.xkcd.com/comics/mc_hammer_age.png";, + @Before, + public void setUp() {, + MockModelLoader.mock(URL, getData());, + }, +, + .load(URL), + .load(URL), + .load(URL), + .load(URL)]
[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + private int overrideHeight = -1;, + private int overrideWidth = -1;, + * Overrides the {@link Target}'s width and height with the given values. This is useful almost exclusively for, + * thumbnails, and should only be used when you both need a very specific sized image and when it is impossible or, + * impractical to return that size from {@link Target#getSize(Target.SizeReadyCallback)}., + *, + * @param width The width to use to load the resource., + * @param height The height to use to load the resource., + * @return This RequestBuilder., + */,
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, + DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);, + when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);, + transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, + DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);, + when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);, + transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, + engine = new Engine(cache, mock(DiskCache.Factory.class), mock(ExecutorService.class),, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, + DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);, + when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);, + transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, + engine = new Engine(cache, mock(DiskCache.Factory.class), mock(ExecutorService.class),, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.cache.InternalCacheDiskCacheFactory;, + private DiskCache.Factory diskCacheFactory;, + * @deprecated Creating a disk cache directory on the main thread causes strict mode violations, use, + * {@link #setDiskCache(com.bumptech.glide.load.engine.cache.DiskCache.Factory)} instead. Scheduled to be removed, + *
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/project.properties, +target=android-19, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/project.properties, +target=android-19, +++ b/library/tests/project.properties, +target=android-19]
[+++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java, + setResourceInternal(null);, + setResourceInternal(null);, + setResourceInternal(null);, + setResourceInternal(resource);, + maybeUpdateAnimatable(resource);, + private void setResourceInternal(@Nullable Z resource) {, + maybeUpdateAnimatable(resource);, + setResource(resource);, + }, +, + private void maybeUpdateAnimatable(@Nullable Z resource) {, + if (resource instanceof Animatable) {, + animatable = (Animatable) resource;, + animatable.start();, + } else {, + animatable = null;, + }, + }, +]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, + private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX =, + "androidx.annotation.VisibleForTesting";, +, + Elements elements = processingEnv.getElementUtils();, + TypeElement visibleForTestingTypeElement = elements, + .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX);, + if (visibleForTestingTypeElement == null) {, + // Fall back to looking for the Support library version., + visibleForTestingTypeElement = elements.getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);, + }, + String visibleForTestingTypeQualifiedName = visibleForTestingTypeElement.toString();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, + private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX =, + "androidx.annotation.VisibleForTesting";, +, + Elements elements = processingEnv.getElementUtils();, + TypeElement visibleForTestingTypeElement = elements, + .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX);, + if (visibleForTestingTypeElement == null) {, + // Fall back to looking for the Support library version., + visibleForTestingTypeElement = elements.getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);, + },
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java, + @Test, + public void loadFromBuilder_withDiskCacheStrategySetBeforeLoad_doesNotOverrideDiskCacheStrategy(), + throws IOException {, + byte[] data = getCanonicalBytes();, + concurrency.wait(, + GlideApp.with(context), + .asDrawable(), + .diskCacheStrategy(DiskCacheStrategy.RESOURCE), + .load(data), + .submit());, +, + concurrency.runOnMainThread(new Runnable() {, + @Override, + public void run() {, + GlideApp.get(context).clearMemory();, + }, + });, +, + concurrency.wait(, + GlideApp.with(context), + .asDrawable(), + .diskCacheStrategy(DiskCacheStrategy.RESOURCE), + .listener(requestListener), + .load(data), + .submit());, +, + verify(requestListener).onResourceReady(, + anyDrawable(), any(), anyTarget(), eq(DataSource.RESOURCE_DISK_CACHE), anyBoolean());, + }, +, + @Test, + public void loadFromBuilder_withSkipMemoryCacheSetBeforeLoad_doesNotOverrideSkipMemoryCache(), + throws IOException {, + byte[] data = getCanonicalBytes();, + concurrency.wait(, + GlideApp.with(context), + .asDrawable(), + .skipMemoryCache(false), + .load(data),
[+++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, + @Mock Transformation<Bitmap> frameTransformation;, + @Mock Resource<Bitmap> transformedResource;, + when(frameTransformation.transform(eq(frameResource), eq(expectedWidth), eq(expectedHeight))), + when(gifDrawable.getFrameTransformation()).thenReturn(frameTransformation);]
[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, + List<Class<Transcode>> registeredTranscodeClasses = transcoderRegistry, + .getTranscodeClasses(registeredResourceClass, transcodeClass);, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, + List<Class<Transcode>> registeredTranscodeClasses = transcoderRegistry, + .getTranscodeClasses(registeredResourceClass, transcodeClass);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java, + // throw new IllegalStateException(, + // "Failed to find any load path from " + helper.getModelClass() + " to ", + // + helper.getTranscodeClass());]
[+++ b/build.gradle, + classpath "se.bjurr.violations:violations-gradle-plugin:${VIOLATIONS_PLUGIN_VERSION}", +++ b/build.gradle, + classpath "se.bjurr.violations:violations-gradle-plugin:${VIOLATIONS_PLUGIN_VERSION}", +++ b/gradle.properties, +VIOLATIONS_PLUGIN_VERSION=1.3, +++ b/build.gradle, + classpath "se.bjurr.violations:violations-gradle-plugin:${VIOLATIONS_PLUGIN_VERSION}", +++ b/gradle.properties, +VIOLATIONS_PLUGIN_VERSION=1.3, +++ b/library/build.gradle, +import se.bjurr.violations.gradle.plugin.ViolationsTask, +, +apply plugin: "se.bjurr.violations.violations-gradle-plugin", + // Failures are caught and printed by the violations plugin below., + ignoreFailures = true, +, + xml.enabled = true, + html.enabled = false, + // Failures are caught and printed by the violations plugin below., + ignoreFailures = true, +, + xml.enabled = true, + html.enabled = false, +, + task violations(type: ViolationsTask) {, + minSeverity = 'INFO', + detailLevel = 'VERBOSE', + maxViolations = 0, +, +
[+++ b/annotation/compiler/build.gradle, +def packagingFolder = file("${buildDir}/intermediates"), +def repackagedJar = file("${packagingFolder}/repackaged.jar"), +def proguardedJar = file("${packagingFolder}/proguarded.jar"), + destinationDir = packagingFolder, + archiveName = 'compiled.jar', + zipfileset(src: tasks.compiledJar.archivePath), +// Create the standard jar artifact based on our compiled, repackaged and proguarded jar., +++ b/annotation/compiler/build.gradle, +def packagingFolder = file("${buildDir}/intermediates"), +def repackagedJar = file("${packagingFolder}/repackaged.jar"), +def proguardedJar = file("${packagingFolder}/proguarded.jar"), + destinationDir = packagingFolder, + archiveName = 'compiled.jar', + zipfileset(src: tasks.compiledJar.archivePath), +// Create the standard jar artifact based on our compiled, repackaged and proguarded jar., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@code AppGlideModule}, {@code com.bumptech.glide.Glide},, + * {@code com.bumptech.glide.RequestManager}, and, + * {@code com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/build.gradle, +def
[+++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.6.1, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.6.1, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java, +import android.annotation.TargetApi;, +import android.os.Build;, +import android.os.Build.VERSION_CODES;, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, + /** Matches the behavior of {@link MediaMetadataRetriever#getFrameAtTime(long)}. */, + @VisibleForTesting, + static final int DEFAULT_FRAME_OPTION = MediaMetadataRetriever.OPTION_CLOSEST_SYNC;, +, + /*defaultValue=*/ MediaMetadataRetriever.OPTION_CLOSEST_SYNC,, + public boolean handles(@NonNull T data, @NonNull Options options) {, + public Resource<Bitmap> decode(, + @NonNull T resource, int outWidth, int outHeight, @NonNull Options options), + throws IOException {, + if (frameOption == null) {, + frameOption = DEFAULT_FRAME_OPTION;, + }, + result =, + decodeFrame(mediaMetadataRetriever, frameTimeMicros, frameOption, outWidth, outHeight);, +, + @TargetApi(Build.VERSION_CODES.O_MR1), + @Nullable, + private static Bitmap
[+++ b/.gitignore, +.idea/libraries, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/gradle.xml, +.idea/dictionaries, +.idea/dataSources.ids, +.idea/datasources.xml, +library/.idea, +samples/**/.idea, +++ b/.gitignore, +.idea/libraries, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/gradle.xml, +.idea/dictionaries, +.idea/dataSources.ids, +.idea/datasources.xml, +library/.idea, +samples/**/.idea, +++ b/.idea/.name, +glide-parent, +++ b/.gitignore, +.idea/libraries, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/gradle.xml, +.idea/dictionaries, +.idea/dataSources.ids, +.idea/datasources.xml, +library/.idea, +samples/**/.idea, +++ b/.idea/.name, +glide-parent, +++ b/.idea/androidDexCompiler.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="AndroidDexCompilerConfiguration">, + <option name="MAX_HEAP_SIZE" value="1024" />, + </component>, +</project>, +++ b/.gitignore, +.idea/libraries, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/gradle.xml, +.idea/dictionaries, +.idea/dataSources.ids, +.idea/datasources.xml, +library/.idea, +samples/**/.idea, +++ b/.idea/.name, +glide-parent, +++ b/.idea/androidDexCompiler.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="AndroidDexCompilerConfiguration">, + <option name="MAX_HEAP_SIZE" value="1024" />, + </component>, +</project>, +++ b/.idea/checkstyle-idea.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="CheckStyle-IDEA">,
[+++ b/samples/giphy/build.gradle, + compile(project(':integration:recyclerview')) {, + transitive = false, + }, + compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}", +++ b/samples/giphy/build.gradle, + compile(project(':integration:recyclerview')) {, + transitive = false, + }, + compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}", +++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java, +import android.support.v7.widget.LinearLayoutManager;, +import android.support.v7.widget.RecyclerView;, +import com.bumptech.glide.integration.recyclerview.RecyclerViewPreloader;, +import java.util.Collections;, + RecyclerView gifList = (RecyclerView) findViewById(R.id.gif_list);, + LinearLayoutManager layoutManager = new LinearLayoutManager(this);, + gifList.setLayoutManager(layoutManager);, + new ViewPreloadSizeProvider<>();, + RecyclerViewPreloader<Api.GifResult> preloader =, + new RecyclerViewPreloader<>(Glide.with(this), adapter, preloadSizeProvider, 4);, + gifList.addOnScrollListener(preloader);, + if (adapter.getItemCount() == 0) {, + private static class GifAdapter extends RecyclerView.Adapter<GifViewHolder>, + implements ListPreloader.PreloadModelProvider<Api.GifResult> {, + public GifViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {, + View view = activity.getLayoutInflater().inflate(R.layout.gif_list_item, parent, false);,
[+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideExtension.java, + return requestOptions.centerCrop();]
[+++ b/library/AndroidManifest.xml]
[+++ b/checkstyle.xml, + <property name="max" value="100" />, +++ b/checkstyle.xml, + <property name="max" value="100" />, +++ b/integration/gifencoder/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="100" />, +++ b/integration/gifencoder/build.gradle, +++ b/integration/gifencoder/gifencoder.iml, + <excludeFolder url="file://$MODULE_DIR$/build/docs" />, +++ b/checkstyle.xml, + <property name="max" value="100" />, +++ b/integration/gifencoder/build.gradle, +++ b/integration/gifencoder/gifencoder.iml, + <excludeFolder url="file://$MODULE_DIR$/build/docs" />, +++ b/integration/gifencoder/lint.xml, +++ b/checkstyle.xml, + <property name="max" value="100" />, +++ b/integration/gifencoder/build.gradle, +++ b/integration/gifencoder/gifencoder.iml, + <excludeFolder url="file://$MODULE_DIR$/build/docs" />, +++ b/integration/gifencoder/lint.xml, +++ b/integration/gifencoder/src/androidTest/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, + @Mock, + Resource<GifDrawable> resource;, + @Mock, + GifDecoder decoder;, + @Mock, + GifHeaderParser parser;, + @Mock, + AnimatedGifEncoder gifEncoder;, + @Mock, + Resource<Bitmap> frameResource;, + @Mock, + Transformation frameTransformation;, + @Mock,
[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.image.ImageManagerLoader;, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.image.ImageManagerLoader;, +++ b/library/src/com/bumptech/glide/loader/image/ImageManagerLoader.java, +package com.bumptech.glide.loader.image;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import com.bumptech.glide.Glide;, +import com.bumptech.glide.loader.stream.StreamLoader;, +import com.bumptech.glide.resize.Downsampler;, +import com.bumptech.glide.resize.Transformation;, +import com.bumptech.glide.resize.ImageManager;, +import com.bumptech.glide.resize.LoadedCallback;, +, +import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;, +, +/**, + * A base class for loaders that user ImageManager. Primarily responsible for keeping track of bitmaps for recycling, + * purposes., + */, +public class ImageManagerLoader implements ImageLoader {, +, + protected final ImageManager imageManager;, + private final Downsampler downsampler;, + private Bitmap acquired;, + private Object loadToken;, +, + public ImageManagerLoader(Context context) {, + this(context, Downsampler.AT_LEAST);, + }, +, + public ImageManagerLoader(ImageManager
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + Arrays.fill(mainPixels, pi, npix, (byte) COLOR_TRANSPARENT_BLACK);]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java, +package com.bumptech.glide.load.data;, +, +import static com.google.common.truth.Truth.assertThat;, +, +import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;, +import com.bumptech.glide.testutil.TestResourceUtil;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +public class ExifOrientationStreamTest {, + private InputStream openOrientationExample(boolean isLandscape, int item) {, + String filePrefix = isLandscape ? "Landscape" : "Portrait";, + return TestResourceUtil.openResource(getClass(),, + "exif-orientation-examples/" + filePrefix + "_" + item + ".jpg");, + }, +, + @Test, + public void testIncludesGivenExifOrientation() throws IOException {, + for (int i = 0; i < 8; i++) {, + for (int j = 0; j
[+++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/OptionalTest.java, + ASSERT.that(Optional.presentInstances(optionals)).iteratesAs("a", "b", "c");, + ASSERT.that(Optional.presentInstances(optionals)).iteratesAs("a", "c");, + ASSERT.that(onlyPresent).iteratesAs("a", "c");, + ASSERT.that(onlyPresent).iteratesAs("a", "c");, + ASSERT.that(onlyPresent).iteratesAs(2);, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/OptionalTest.java, + ASSERT.that(Optional.presentInstances(optionals)).iteratesAs("a", "b", "c");, + ASSERT.that(Optional.presentInstances(optionals)).iteratesAs("a", "c");, + ASSERT.that(onlyPresent).iteratesAs("a", "c");, + ASSERT.that(onlyPresent).iteratesAs("a", "c");, + ASSERT.that(onlyPresent).iteratesAs(2);, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SplitterTest.java, + ASSERT.that(letters).iteratesAs("a", "b", "c");, + ASSERT.that(letters).iteratesAs("a", "b", "c");, + ASSERT.that(letters).iteratesAs("a,b,c");, + ASSERT.that(letters).iteratesAs("a", "", "b", "c");, + ASSERT.that(letters).iteratesAs("a", "", " b", "c");, + ASSERT.that(letters).iteratesAs("a", "b", "c", "");, + ASSERT.that(letters).iteratesAs("", "a", "b", "c");, + ASSERT.that(testCharacteringMotto).iteratesAs(, + ASSERT.that(testCharacteringMotto).iteratesAs(, + ASSERT.that(letters).iteratesAs("a", "b", "c");, + ASSERT.that(letters).iteratesAs("a", "", "c");, + ASSERT.that(letters).iteratesAs("a", "c");, + ASSERT.that(nothing).iteratesAs("");, + ASSERT.that(blankblank).iteratesAs("", "");, + ASSERT.that(family).iteratesAs(, + ASSERT.that(letters).iteratesAs("a", "b", "c");, + ASSERT.that(letters).iteratesAs("a,b,c");, + ASSERT.that(letters).iteratesAs("a", "", "b",
[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +++ b/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/UnsignedInteger.java, +/*, + * Copyright (C) 2011 The Guava Authors, + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or
[+++ b/build.xml, + linksource="true", + <pathelement location="${javasrc}"/>]
[+++ b/android/guava-tests/benchmark/com/google/common/collect/ConcurrentHashMultisetBenchmark.java, + @Override, + Iterator<E> elementIterator() {, + throw new AssertionError("should never be called");, + }, +, +++ b/android/guava-tests/benchmark/com/google/common/collect/ConcurrentHashMultisetBenchmark.java, + @Override, + Iterator<E> elementIterator() {, + throw new AssertionError("should never be called");, + }, +, +++ b/android/guava-tests/test/com/google/common/collect/SimpleAbstractMultisetTest.java, + Iterator<E> elementIterator() {, + return Multisets.elementIterator(entryIterator());, + }, +, + @Override, +++ b/android/guava-tests/benchmark/com/google/common/collect/ConcurrentHashMultisetBenchmark.java, + @Override, + Iterator<E> elementIterator() {, + throw new AssertionError("should never be called");, + }, +, +++ b/android/guava-tests/test/com/google/common/collect/SimpleAbstractMultisetTest.java, + Iterator<E> elementIterator() {, + return Multisets.elementIterator(entryIterator());, + }, +, + @Override, +++ b/android/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java, +import java.io.IOException;, +import java.io.ObjectInputStream;, +import java.io.ObjectOutputStream;, +import java.util.NoSuchElementException;, + transient ObjectCountHashMap<E> backingMap;, + transient long
[+++ b/guava/src/com/google/common/base/Throwables.java, + *, + * @deprecated Use {@link #throwIfInstanceOf}, which has the same behavior, + * but rejects {@code null}. This method is scheduled to be removed in July 2018., + @Deprecated, + * Propagates {@code throwable} exactly as-is, if and only if it is an instance of, + *, + * @deprecated Use {@link #throwIfUnchecked}, which has the same behavior but rejects, + * {@code null}. This method is scheduled to be removed in July 2018., + @Deprecated, + @GwtIncompatible]
[+++ b/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java, +import com.google.common.collect.MapMaker.ComputingMapAdapter;, +++ b/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java, +import com.google.common.collect.MapMaker.ComputingMapAdapter;, +++ b/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java, +++ b/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java, +import com.google.common.collect.MapMaker.ComputingMapAdapter;, +++ b/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java, +++ b/guava/src/com/google/common/collect/MapMaker.java, +import com.google.common.base.Throwables;, +import java.util.concurrent.ExecutionException;, + ? new MapMaker.ComputingMapAdapter<K, V>(this, computingFunction), + /**, + * Overrides get() to compute on demand. Also throws an exception when {@code null} is returned, + * from a computation., + */, + /*, + * This might make more sense in ComputingConcurrentHashMap, but it causes a javac crash in some, + * cases there: http://code.google.com/p/guava-libraries/issues/detail?id=950, + */, + static final class ComputingMapAdapter<K, V>, + extends ComputingConcurrentHashMap<K, V> implements Serializable {, + private static final long serialVersionUID
[+++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, + .put(Object.class, ""), +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, + .put(Object.class, ""), +++ b/guava-tests/test/com/google/common/base/EquivalenceTest.java, +import com.google.common.testing.NullPointerTester;, + public void testEquals() {, +, + @GwtIncompatible("NullPointerTester"), + public void testNulls() {, + new NullPointerTester().testAllPublicStaticMethods(Equivalence.class);, + new NullPointerTester().testAllPublicInstanceMethods(Equivalence.equals());, + new NullPointerTester().testAllPublicInstanceMethods(Equivalence.identity());, + }, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, + .put(Object.class, ""), +++ b/guava-tests/test/com/google/common/base/EquivalenceTest.java, +import com.google.common.testing.NullPointerTester;, + public void testEquals() {, +, + @GwtIncompatible("NullPointerTester"), + public void testNulls() {, + new NullPointerTester().testAllPublicStaticMethods(Equivalence.class);, + new NullPointerTester().testAllPublicInstanceMethods(Equivalence.equals());, + new NullPointerTester().testAllPublicInstanceMethods(Equivalence.identity());, + }, +++ b/guava-tests/test/com/google/common/base/PackageSanityTests.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may
[+++ b/android/guava-tests/test/com/google/common/graph/GraphsTest.java, + assertThat(transpose.edgeValueOrNull(N1, N2)).isNull();, + assertThat(transpose.edgeValueOrNull(N1, N2)).isEqualTo(E21);, +++ b/android/guava-tests/test/com/google/common/graph/GraphsTest.java, + assertThat(transpose.edgeValueOrNull(N1, N2)).isNull();, + assertThat(transpose.edgeValueOrNull(N1, N2)).isEqualTo(E21);, +++ b/android/guava-tests/test/com/google/common/graph/ValueGraphTest.java, + assertThat(graph.edgeValueOrNull(node, otherNode) != null).isEqualTo(hasEdge);, + assertThat(graph.edgeValueOrNull(1, 2)).isEqualTo("valueA");, + assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo("valueB");, + assertThat(graph.edgeValueOrNull(2, 3)).isEqualTo("valueC");, + assertThat(graph.edgeValueOrNull(4, 4)).isEqualTo("valueD");, + assertThat(graph.edgeValueOrNull(1, 2)).isEqualTo("valueB");, + assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo("valueB");, + assertThat(graph.edgeValueOrNull(2, 3)).isEqualTo("valueC");, + assertThat(graph.edgeValueOrNull(4, 4)).isEqualTo("valueD");, + public void edgeValue_missing() {, + assertThat(graph.edgeValueOrNull(1, 2)).isNull();, + assertThat(graph.edgeValueOrNull(2, 1)).isNull();, + assertThat(graph.edgeValueOrNull(1, 2)).isEqualTo("valueA");, + assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo("valueB");, + assertThat(graph.edgeValueOrNull(1, 2)).isNull();, + assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo("valueC");, +++ b/android/guava-tests/test/com/google/common/graph/GraphsTest.java, + assertThat(transpose.edgeValueOrNull(N1, N2)).isNull();, + assertThat(transpose.edgeValueOrNull(N1, N2)).isEqualTo(E21);, +++ b/android/guava-tests/test/com/google/common/graph/ValueGraphTest.java, + assertThat(graph.edgeValueOrNull(node, otherNode) != null).isEqualTo(hasEdge);, + assertThat(graph.edgeValueOrNull(1, 2)).isEqualTo("valueA");, + assertThat(graph.edgeValueOrNull(2, 1)).isEqualTo("valueB");, + assertThat(graph.edgeValueOrNull(2, 3)).isEqualTo("valueC");, + assertThat(graph.edgeValueOrNull(4, 4)).isEqualTo("valueD");, + assertThat(graph.edgeValueOrNull(1,
[+++ b/guava/src/com/google/common/cache/CacheBuilder.java, + * @param <K> the base key type for all caches created by this builder, + * @param <V> the base value type for all caches created by this builder, +public final class CacheBuilder<K, V> {, + RemovalListener<K, V> removalListener;, + CacheBuilder<K, V> keyEquivalence(Equivalence<Object> equivalence) {, + CacheBuilder<K, V> valueEquivalence(Equivalence<Object> equivalence) {, + public CacheBuilder<K, V> initialCapacity(int initialCapacity) {, + public CacheBuilder<K, V> concurrencyLevel(int concurrencyLevel) {, + public CacheBuilder<K, V> maximumSize(int size) {, + CacheBuilder<K, V> strongKeys() {, + public CacheBuilder<K, V> weakKeys() {, + public CacheBuilder<K, V> softKeys() {, + CacheBuilder<K, V> setKeyStrength(Strength strength) {, +
[+++ b/guava/src/com/google/common/collect/BstRangeOps.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific
[+++ b/guava-tests/test/com/google/common/cache/LocalCacheMapComputeTest.java, + public void testComputeIfAbsentEviction() {, + // b/80241237, +, + Cache<String, String> c = CacheBuilder.newBuilder().maximumSize(1).build();, +, + assertThat(c.asMap().computeIfAbsent("hash-1", k -> "")).isEqualTo("");, + assertThat(c.asMap().computeIfAbsent("hash-1", k -> "")).isEqualTo("");, + assertThat(c.asMap().computeIfAbsent("hash-1", k -> "")).isEqualTo("");, + assertThat(c.size()).isEqualTo(1);, + assertThat(c.asMap().computeIfAbsent("hash-2", k -> "")).isEqualTo("");, + }, +, + public void testComputeEviction() {, + // b/80241237, +, + Cache<String, String> c = CacheBuilder.newBuilder().maximumSize(1).build();, +, + assertThat(c.asMap().compute("hash-1", (k, v) -> "a")).isEqualTo("a");, + assertThat(c.asMap().compute("hash-1", (k, v) -> "b")).isEqualTo("b");, + assertThat(c.asMap().compute("hash-1", (k, v) -> "c")).isEqualTo("c");, + assertThat(c.size()).isEqualTo(1);, + assertThat(c.asMap().computeIfAbsent("hash-2", k -> "")).isEqualTo("");, + }, +, +++ b/guava-tests/test/com/google/common/cache/LocalCacheMapComputeTest.java, + public void testComputeIfAbsentEviction() {, + // b/80241237, +, +
[+++ b/guava-testlib/src/com/google/common/collect/testing/google/MultimapPutIterableTester.java, + public void testPutAllNullValueOnPresentKey_supported() {, + public void testPutAllNullValueOnAbsentKey_supported() {, + @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_VALUES), + public void testPutAllNullValueSingle_unsupported() {, + multimap().putAll(sampleKeys().e1, Lists.newArrayList((V) null));, + expectUnchanged();, + }, +, + // In principle, it would be nice to apply these two tests to keys with existing values, too., + , + @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_VALUES), + public void testPutAllNullValueNullLast_unsupported() {, + int size = getNumElements();, +, + try {, + multimap().putAll(sampleKeys().e3, Lists.newArrayList(sampleValues().e3, null));, + fail();, + } catch (NullPointerException expected) {, + }, +, + Collection<V> values = multimap().get(sampleKeys().e3);, + if (values.size() ==
[+++ b/guava-gwt/pom.xml, + <testTimeOut>600 <!-- seconds --></testTimeOut>, + <testMethodTimeout>10 <!-- minutes --></testMethodTimeout>]
[+++ b/android/guava/pom.xml, + <version>1.0.1</version>, +++ b/android/guava/pom.xml, + <version>1.0.1</version>, +++ b/guava-gwt/pom.xml, + <version>1.0.1</version>, + <version>1.0.1</version>, +++ b/android/guava/pom.xml, + <version>1.0.1</version>, +++ b/guava-gwt/pom.xml, + <version>1.0.1</version>, + <version>1.0.1</version>, +++ b/guava/pom.xml, + <version>1.0.1</version>]
[+++ b/guava/src/com/google/common/collect/Queues.java, + *, + * @since 11.0 (requires that {@code E} be {@code Comparable} since 15.0)., + public static <E extends Comparable> PriorityBlockingQueue<E> newPriorityBlockingQueue() {, + *, + * @since 11.0 (requires that {@code E} be {@code Comparable} since 15.0)., + public static <E extends Comparable> PriorityBlockingQueue<E> newPriorityBlockingQueue(, + *, + * @since 11.0 (requires that {@code E} be {@code Comparable} since 15.0)., + public static <E extends Comparable> PriorityQueue<E> newPriorityQueue() {, + *, + * @since 11.0 (requires that {@code E} be {@code Comparable} since 15.0)., + public static <E extends Comparable> PriorityQueue<E> newPriorityQueue(, + Iterable<? extends
[+++ b/android/guava/src/com/google/common/net/InternetDomainName.java, + * @throws IllegalArgumentException if {@code domain} is not syntactically valid according to, + * {@link #isValid}, +++ b/android/guava/src/com/google/common/net/InternetDomainName.java, + * @throws IllegalArgumentException if {@code domain} is not syntactically valid according to, + * {@link #isValid}, +++ b/guava/src/com/google/common/net/InternetDomainName.java, + * @throws IllegalArgumentException if {@code domain} is not syntactically valid according to, + * {@link #isValid}]
[+++ b/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java, + // identical to testPutTwoAndRemove,, + // verifies that putCoalescing() doesn't cause any mappings to change relative to put(), + public void testPutCoalescingTwoAndRemove() {, + for (Range<Integer> rangeToPut1 : RANGES) {, + for (Range<Integer> rangeToPut2 : RANGES) {, + for (Range<Integer> rangeToRemove : RANGES) {, + Map<Integer, Integer> model = Maps.newHashMap();, + putModel(model, rangeToPut1, 1);, + putModel(model, rangeToPut2, 2);, + removeModel(model, rangeToRemove);, + RangeMap<Integer, Integer> test = TreeRangeMap.create();, + test.putCoalescing(rangeToPut1, 1);, + test.putCoalescing(rangeToPut2, 2);, + test.remove(rangeToRemove);, + verify(model, test);, + }, + }, + }, + }, +, + public void testPutCoalescing() {, + // {[0..1): 1,
[+++ b/guava-testlib/src/com/google/common/collect/testing/testers/CollectionAddAllTester.java, +, + /**, + * Returns the {@link Method} instance for {@link, + * #testAddAll_unsupportedNonePresent()} so that tests can suppress it with, + * {@code FeatureSpecificTestSuiteBuilder.suppressing()} while we figure out, + * what to do with <a href="http://goo.gl/qJBruX">{@code ConcurrentHashMap}, + * support for {@code entrySet().add()}</a>., + */, + @GwtIncompatible("reflection"), + public static Method getAddAllUnsupportedNonePresentMethod() {, + return Helpers.getMethod(CollectionAddAllTester.class, "testAddAll_unsupportedNonePresent");, + }, +, + /**, + * Returns the {@link Method} instance for {@link, + * #testAddAll_unsupportedSomePresent()} so that tests can suppress it with, + * {@code FeatureSpecificTestSuiteBuilder.suppressing()} while we figure out, + * what to do with
[+++ b/guava-tests/benchmark/com/google/common/math/IntMathBenchmark.java, + , + @Benchmark int isPrime(int reps) {, + int tmp = 0;, + for (int i = 0; i < reps; i++) {, + int j = i & ARRAY_MASK;, + if (IntMath.isPrime(positive[j])) {, + tmp++;, + }, + }, + return tmp;, + }, +++ b/guava-tests/benchmark/com/google/common/math/IntMathBenchmark.java, + , + @Benchmark int isPrime(int reps) {, + int tmp = 0;, + for (int i = 0; i < reps; i++) {, + int j = i & ARRAY_MASK;, + if (IntMath.isPrime(positive[j])) {, + tmp++;, + }, + }, + return tmp;, + }, +++ b/guava-tests/benchmark/com/google/common/math/LongMathBenchmark.java, +
[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, + * class's counterparts {@link Sets}, {@link Maps} and {@link Queues}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, + * class's counterparts {@link Sets}, {@link Maps} and {@link Queues}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, + * class's counterparts {@link Lists}, {@link Maps} and {@link Queues}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, + * class's counterparts {@link Sets}, {@link Maps} and {@link Queues}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, + * class's counterparts {@link Lists}, {@link Maps} and {@link Queues}., +++ b/guava/src/com/google/common/collect/Lists.java, + * class's counterparts {@link Sets}, {@link Maps} and {@link Queues}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, + * class's counterparts {@link Sets}, {@link Maps} and {@link Queues}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, + * class's counterparts {@link Lists},
[+++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTransformAsyncTest.java, + * Unit tests for {@link Futures#transformAsync(ListenableFuture, AsyncFunction, Executor)}., +public class FuturesTransformAsyncTest extends AbstractChainedListenableFutureTest<String> {, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTransformAsyncTest.java, + * Unit tests for {@link Futures#transformAsync(ListenableFuture, AsyncFunction, Executor)}., +public class FuturesTransformAsyncTest extends AbstractChainedListenableFutureTest<String> {, +++ b/guava/src/com/google/common/util/concurrent/AsyncFunction.java, + * {@link Futures#transformAsync(ListenableFuture, AsyncFunction, Executor)}., +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTransformAsyncTest.java, + * Unit tests for {@link Futures#transformAsync(ListenableFuture, AsyncFunction, Executor)}., +public class FuturesTransformAsyncTest extends AbstractChainedListenableFutureTest<String> {, +++ b/guava/src/com/google/common/util/concurrent/AsyncFunction.java, + * {@link Futures#transformAsync(ListenableFuture, AsyncFunction, Executor)}., +++ b/guava/src/com/google/common/util/concurrent/Futures.java, + /** See {@link #addCallback(ListenableFuture, FutureCallback, Executor)} for behavioral notes. */]
[+++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +import static com.google.common.base.Throwables.throwIfUnchecked;, + throwIfUnchecked(e);, + throw new RuntimeException(e);, + throwIfUnchecked(e);, + throw new RuntimeException(e);, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +import static com.google.common.base.Throwables.throwIfUnchecked;, + throwIfUnchecked(e);, + throw new RuntimeException(e);, + throwIfUnchecked(e);, + throw new RuntimeException(e);, +++ b/guava-testlib/src/com/google/common/testing/ForwardingWrapperTester.java, +import static com.google.common.base.Throwables.throwIfUnchecked;, + throwIfUnchecked(e);, + throw new RuntimeException(e);, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +import static com.google.common.base.Throwables.throwIfUnchecked;, + throwIfUnchecked(e);, + throw new RuntimeException(e);, + throwIfUnchecked(e);, + throw new RuntimeException(e);, +++ b/guava-testlib/src/com/google/common/testing/ForwardingWrapperTester.java, +import static com.google.common.base.Throwables.throwIfUnchecked;, + throwIfUnchecked(e);, + throw new RuntimeException(e);, +++ b/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java, +import static com.google.common.base.Throwables.throwIfUnchecked;, + throwIfUnchecked(e.getCause());, + throw new RuntimeException(e.getCause());, + throwIfUnchecked(e);, + throw new RuntimeException(e);, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +import static com.google.common.base.Throwables.throwIfUnchecked;, + throwIfUnchecked(e);, + throw
[+++ b/guava/src/com/google/common/util/concurrent/Futures.java, + setFuture(fallback.create(t));, + ListenableFuture<? extends I> localInputFuture = inputFuture;, + if (localInputFuture != null) {, + inputFuture.cancel(mayInterruptIfRunning);, + }, + ListenableFuture<? extends O> outputFuture =, + setFuture(outputFuture);, + final ConcurrentLinkedQueue<SettableFuture<T>> delegates =, + SettableFuture<T> delegate = SettableFuture.create();, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, + setFuture(fallback.create(t));, + ListenableFuture<? extends I> localInputFuture = inputFuture;, + if (localInputFuture != null) {, + inputFuture.cancel(mayInterruptIfRunning);, + }, + ListenableFuture<? extends O> outputFuture =, + setFuture(outputFuture);, + final ConcurrentLinkedQueue<SettableFuture<T>> delegates =, + SettableFuture<T> delegate = SettableFuture.create();, +++ b/guava/src/com/google/common/util/concurrent/SettableFuture.java, +import com.google.common.annotations.Beta;, +, + * A {@link ListenableFuture} whose result may be set by a {@link #set(Object)},, + *
[+++ b/guava-tests/test/com/google/common/base/ThrowablesTest.java, +import static com.google.common.base.Throwables.throwIfInstanceOf;, +import static com.google.common.base.Throwables.throwIfUnchecked;, + public void testThrowIfUnchecked_Unchecked() {, + try {, + throwIfUnchecked(new SomeUncheckedException());, + fail();, + } catch (SomeUncheckedException expected) {, + }, + }, +, + public void testThrowIfUnchecked_Error() {, + try {, + throwIfUnchecked(new SomeError());, + fail();, + } catch (SomeError expected) {, + }, + }, +, + public void testThrowIfUnchecked_Checked() {, + throwIfUnchecked(new SomeCheckedException());, + }, +, + public void testThrowIfUnchecked_null() throws SomeCheckedException {, + try {, + throwIfUnchecked(null);, + fail();, + } catch (NullPointerException expected) {, + }, + }, +, + public void testThrowIfInstanceOf_Unchecked() throws SomeCheckedException {,
[+++ b/guava/src/com/google/common/escape/ArrayBasedCharEscaper.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + * A {@link CharEscaper} that uses an
[+++ b/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java, +++ b/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java, +++ b/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java, + MapMakerInternalMap<Object, Object> map = makeMap(createMapMaker().concurrencyLevel(1));, + MapMakerInternalMap<Object, Object> map = makeMap(createMapMaker().concurrencyLevel(1));, + MapMakerInternalMap<Object, Object> map = makeMap(createMapMaker().concurrencyLevel(1));, + MapMakerInternalMap<Object, Object> map = makeMap(createMapMaker().concurrencyLevel(1));, + MapMakerInternalMap<Object, Object> map = makeMap(createMapMaker().concurrencyLevel(1));, + if (map.expires()) {, + * Returns an iterable containing all combinations of expireAfterWrite,, + * Returns an iterable containing all combinations of expireAfterWrite., +++ b/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java, +++ b/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java, + MapMakerInternalMap<Object, Object> map = makeMap(createMapMaker().concurrencyLevel(1));, + MapMakerInternalMap<Object, Object> map = makeMap(createMapMaker().concurrencyLevel(1));, + MapMakerInternalMap<Object, Object> map = makeMap(createMapMaker().concurrencyLevel(1));, + MapMakerInternalMap<Object, Object> map = makeMap(createMapMaker().concurrencyLevel(1));, + MapMakerInternalMap<Object, Object> map = makeMap(createMapMaker().concurrencyLevel(1));, + if (map.expires()) {, +
[+++ b/android/guava-tests/test/com/google/common/eventbus/EventBusTest.java, + public void testToString() throws Exception {, + EventBus eventBus = new EventBus("a b ; - \" < > / \\ €");, + assertEquals("EventBus{a b ; - \" < > / \\ €}", eventBus.toString());, + }, +, +++ b/android/guava-tests/test/com/google/common/eventbus/EventBusTest.java, + public void testToString() throws Exception {, + EventBus eventBus = new EventBus("a b ; - \" < > / \\ €");, + assertEquals("EventBus{a b ; - \" < > / \\ €}", eventBus.toString());, + }, +, +++ b/android/guava-tests/test/com/google/common/primitives/UnsignedLongsTest.java, + public void testParseLongEmptyString() {, + try {, + UnsignedLongs.parseUnsignedLong("");, + fail("NumberFormatException should have been raised.");, + } catch
[+++ b/guava-gwt/test/com/google/common/util/concurrent/FuturesTest_gwt.java, +public void testNonCancellationPropagating_delegateCancelled() throws Exception {, + com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();, + testCase.setUp();, + Throwable failure = null;, + try {, + testCase.testNonCancellationPropagating_delegateCancelled();, + } catch (Throwable t) {, + failure = t;, + }, + try {, + testCase.tearDown();, + } catch (Throwable t) {, + if (failure == null) {, + failure = t;, + }, + }, + if (failure instanceof Exception) {, + throw (Exception) failure;, + }, + if (failure instanceof Error) {, + throw (Error) failure;, + }, + if (failure != null) {, + throw new RuntimeException(failure);, + },
[+++ b/android/guava-tests/test/com/google/common/net/HostAndPortTest.java, + HostAndPort hpNoPort1 = HostAndPort.fromString("foo::123");, + HostAndPort hpNoPort2 = HostAndPort.fromString("foo::123");, + HostAndPort hpNoPort3 = HostAndPort.fromString("[foo::123]");, + HostAndPort hpNoPort4 = HostAndPort.fromHost("[foo::123]");, + HostAndPort hpNoPort5 = HostAndPort.fromHost("foo::123");, +, + HostAndPort hpWithPort1 = HostAndPort.fromParts("[foo::123]", 80);, + HostAndPort hpWithPort2 = HostAndPort.fromParts("foo::123", 80);, + HostAndPort hpWithPort3 = HostAndPort.fromString("[foo::123]:80");, +, + .addEqualityGroup(hpNoPort1, hpNoPort2, hpNoPort3, hpNoPort4, hpNoPort5), + .addEqualityGroup(hpWithPort1, hpWithPort2, hpWithPort3), +++ b/android/guava-tests/test/com/google/common/net/HostAndPortTest.java, + HostAndPort hpNoPort1 = HostAndPort.fromString("foo::123");, + HostAndPort hpNoPort2 = HostAndPort.fromString("foo::123");, + HostAndPort hpNoPort3 = HostAndPort.fromString("[foo::123]");, + HostAndPort hpNoPort4 = HostAndPort.fromHost("[foo::123]");, + HostAndPort hpNoPort5 = HostAndPort.fromHost("foo::123");, +, + HostAndPort hpWithPort1 = HostAndPort.fromParts("[foo::123]", 80);, + HostAndPort hpWithPort2 = HostAndPort.fromParts("foo::123", 80);, + HostAndPort hpWithPort3
[+++ b/guava-testlib/src/com/google/common/collect/testing/google/AbstractMultimapTester.java, +, + protected final K k0() {, + return e0().getKey();, + }, +, + protected final V v0() {, + return e0().getValue();, + }, +, + protected final K k1() {, + return e1().getKey();, + }, +, + protected final V v1() {, + return e1().getValue();, + }, +, + protected final K k2() {, + return e2().getKey();, + }, +, + protected final V v2() {, + return e2().getValue();, + }, +, + protected final K k3() {, + return e3().getKey();, + }, +, + protected final V v3() {, + return e3().getValue();, + }, +,
[+++ b/guava-gwt/test/com/google/common/util/concurrent/FuturesGetDoneTest_gwt.java, +/*, + * Copyright (C) 2008 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the
[+++ b/guava/src/com/google/common/cache/LocalCache.java, +import static com.google.common.util.concurrent.Futures.transform;, + return transform(, + },, + directExecutor());]
[+++ b/guava/src/com/google/common/math/LongMath.java, + 684, 419, 287, 214, 169, 139, 119, 105, 95, 87, 81, 76, 73, 70, 68, 66, 64, 63, 62, 62,, + 61, 61, 61};]
[+++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/escape/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/escape/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/html/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/escape/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/html/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/io/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/escape/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/html/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/io/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/net/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/escape/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/html/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/io/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/net/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/primitives/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/escape/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/html/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/io/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/net/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/primitives/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/util/concurrent/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, +++ b/guava-gwt/test/com/google/common/escape/testModule.gwt.xml, +++
[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +import static com.google.common.util.concurrent.Platform.isInstanceOfThrowableClass;, +public final class Futures extends GwtFuturesCatchingSpecialization {, + * <b>To be deprecated:</b> Prefer {@link #catchingAsync(ListenableFuture,, + * Class, AsyncFunction) catchingAsync(input, Throwable.class,, + * fallbackImplementedAsAnAsyncFunction)}, usually replacing {@code, + * Throwable.class} with the specific type you want to handle., + *, + * <p>Returns a {@code Future} whose result is taken from the given primary, + * <p>Also note that, regardless of which thread executes {@code, + * <b>To be deprecated:</b> Prefer {@link #catchingAsync(ListenableFuture,, + * Class, AsyncFunction, Executor) catchingAsync(input, Throwable.class,, + * fallbackImplementedAsAnAsyncFunction, executor)}, usually replacing {@code, + * Throwable.class} with the specific type
[+++ b/android/guava-tests/test/com/google/common/net/InternetDomainNameTest.java, + private static final ImmutableSet<String> RS =, + ImmutableSet.of(, + "co.uk.", // Trailing dot, + "co\uFF61uk", // Alternate dot character, + "xn--jrpeland-54a.no"); // IDNA (punycode) encoding of above, +, + private static final ImmutableSet<String> PS_NOT_RS =, + ImmutableSet.of("blogspot.com", "blogspot.co.uk", "uk.com");, +, + private static final ImmutableSet<String> PS =, + ImmutableSet.<String>builder().addAll(RS).addAll(PS_NOT_RS).build();, + /**, + * Having a public suffix is equivalent to having a registry suffix, because all registry suffixes, + * are public suffixes, and all public suffixes have registry suffixes., + */, + private static final ImmutableSet<String> NO_RS = NO_PS;, + private static final ImmutableSet<String> NON_PS
[+++ b/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java, +import java.util.Collection;, + public void testRemoveAt_exhaustive() {, + int size = 8;, + List<Integer> expected = createOrderedList(size);, + for (Collection<Integer> perm : Collections2.permutations(expected)) {, + for (int i = 0; i < perm.size(); i++) {, + MinMaxPriorityQueue<Integer> q = MinMaxPriorityQueue.create(perm);, + q.removeAt(i);, + assertTrue("Remove at " + i + " perm " + perm, q.isIntact());, + }, + }, + }, +, + public void testExhaustive_pollAndPush() {, + int size = 8;, + List<Integer> expected = createOrderedList(size);, + for (Collection<Integer> perm : Collections2.permutations(expected)) {, + MinMaxPriorityQueue<Integer> q = MinMaxPriorityQueue.create(perm);, + List<Integer> elements = Lists.newArrayListWithCapacity(size);, + while (!q.isEmpty())
[+++ b/guava/src/com/google/common/graph/Graph.java, + * Returns {@code true} iff {@code object} is a {@link Graph} that has the same structural, + * relationships as those in this graph., + * <p>Graph properties are <b>not</b> respected by this method. For example, two graphs may, + * <p>A {@link Graph} cannot be equal to an instance of a subinterface of {@link Graph} that, + * redefines the definition of equality, such as {@link Network}, even if by this definition they, + * would otherwise be equal., +++ b/guava/src/com/google/common/graph/Graph.java, + * Returns {@code true} iff {@code object} is a {@link Graph} that has
[+++ b/guava-testlib/src/com/google/common/collect/testing/google/MultimapPutIterableTester.java, +import static com.google.common.base.Preconditions.checkState;, +import com.google.common.collect.Iterators;, + , + @MapFeature.Require(SUPPORTS_PUT), + public void testPutAllOnlyCallsIteratorOnce() {, + Iterable<V> iterable = new Iterable<V>() {, + private boolean calledIteratorAlready = false;, +, + @Override, + public Iterator<V> iterator() {, + checkState(!calledIteratorAlready);, + calledIteratorAlready = true;, + return Iterators.forArray(sampleValues().e3);, + }, + };, + , + multimap().putAll(sampleKeys().e3, iterable);, + }, +++ b/guava-testlib/src/com/google/common/collect/testing/google/MultimapPutIterableTester.java, +import static com.google.common.base.Preconditions.checkState;, +import com.google.common.collect.Iterators;, + , + @MapFeature.Require(SUPPORTS_PUT), + public void testPutAllOnlyCallsIteratorOnce() {, + Iterable<V> iterable = new Iterable<V>() {, + private boolean calledIteratorAlready = false;, +, + @Override, + public Iterator<V> iterator() {, + checkState(!calledIteratorAlready);, + calledIteratorAlready =
[+++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/collect/testing/Testing.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/collect/testing/Testing.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/collect/testing/google/Google.gwt.xml, +<inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/base/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/cache/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/collect/testing/Testing.gwt.xml, + <inherits name="com.google.common.truth.Truth"/>, +++ b/guava-gwt/test/com/google/common/collect/testing/google/Google.gwt.xml, +<inherits name="com.google.common.truth.Truth"/>, +++
[+++ b/guava-testlib/src/com/google/common/testing/ClusterException.java, + * throw ClusterException.create(exceptions);]
[+++ b/android/guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java, + private SimpleTimeLimiter(ExecutorService executor) {, +++ b/android/guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java, + private SimpleTimeLimiter(ExecutorService executor) {, +++ b/guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java, + private SimpleTimeLimiter(ExecutorService executor) {]
[+++ b/guava/src/com/google/common/graph/DirectedMultiNodeConnections.java, + return Collections.unmodifiableSet(predecessorsMultiset().elementSet());, + }, +, + private Multiset<N> predecessorsMultiset() {, + return predecessors;, + return Collections.unmodifiableSet(successorsMultiset().elementSet());, + }, +, + private Multiset<N> successorsMultiset() {, + return successors;, + return new MultiEdgesConnecting<E>(outEdgeMap, node) {, + public int size() {, + return successorsMultiset().count(node);, + };, +++ b/guava/src/com/google/common/graph/DirectedMultiNodeConnections.java, + return Collections.unmodifiableSet(predecessorsMultiset().elementSet());, + }, +, + private Multiset<N> predecessorsMultiset() {, + return predecessors;, + return Collections.unmodifiableSet(successorsMultiset().elementSet());, + }, +, + private Multiset<N> successorsMultiset() {, + return successors;, + return new MultiEdgesConnecting<E>(outEdgeMap, node) {, + public int size() {, + return successorsMultiset().count(node);, + };, +++ b/guava/src/com/google/common/graph/MultiEdgesConnecting.java, +/*, + * Copyright (C)
[+++ b/guava/src/com/google/common/reflect/Reflection.java, +import static com.google.common.base.Preconditions.checkArgument;, + * Returns the package name of {@code clazz} according to the Java Language Specification (section, + public static String getPackageName(Class<?> clazz) {, + return getPackageName(clazz.getName());, + return (lastDot < 0) ? "" : classFullName.substring(0, lastDot);, + checkArgument(interfaceType.isInterface(), "%s is not an interface", interfaceType);]
[+++ b/guava/src/com/google/common/collect/CollectPreconditions.java, + @CanIgnoreReturnValue, + static long checkNonnegative(long value, String name) {, + if (value < 0) {, + throw new IllegalArgumentException(name + " cannot be negative but was: " + value);, + }, + return value;, + }, +]
[+++ b/README.md, +The most recent release is [Guava 19.0][], released December 9, 2015., +- 19.0 API Docs: [guava][guava-release-api-docs], [guava-testlib][testlib-release-api-docs], +- 19.0 API Diffs from 18.0: [guava][guava-release-api-diffs], + <version>19.0</version>, + compile 'com.google.guava:guava:19.0', +using version `20.0-SNAPSHOT`. API documentation and diffs from version 19.0, +- Snapshot API Diffs from 19.0: [guava][guava-snapshot-api-diffs], +[guava-release-api-docs]: http://google.github.io/guava/releases/19.0/api/docs/, +[testlib-release-api-docs]: http://www.javadoc.io/doc/com.google.guava/guava-testlib/19.0, +[guava-release-api-diffs]: http://google.github.io/guava/releases/19.0/api/diffs/, +++ b/README.md, +The most recent release is [Guava 19.0][], released December 9, 2015., +- 19.0 API Docs: [guava][guava-release-api-docs], [guava-testlib][testlib-release-api-docs], +- 19.0 API Diffs from 18.0: [guava][guava-release-api-diffs], + <version>19.0</version>, + compile 'com.google.guava:guava:19.0', +using version `20.0-SNAPSHOT`. API documentation and diffs from version 19.0, +- Snapshot API Diffs
[+++ b/maven/pom.xml, + <developers>, + <developer>, + <id>kevinb9n</id>, + <name>Kevin Bourillion</name>, + <email>kevinb@google.com</email>, + <organization>Google</organization>, + <organizationUrl>http://www.google.com</organizationUrl>, + <roles>, + <role>owner</role>, + <role>developer</role>, + </roles>, + <timezone>-8</timezone>, + </developer>, + </developers>]
[+++ b/guava/src/com/google/common/collect/CacheLoader.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the
[+++ b/guava-testlib/src/com/google/common/collect/testing/ConcurrentMapTestSuiteBuilder.java, + TestMapGenerator<K, V> generator) {, +++ b/guava-testlib/src/com/google/common/collect/testing/ConcurrentMapTestSuiteBuilder.java, + TestMapGenerator<K, V> generator) {, +++ /dev/null, +++ b/guava-testlib/src/com/google/common/collect/testing/ConcurrentMapTestSuiteBuilder.java, + TestMapGenerator<K, V> generator) {, +++ /dev/null, +++ /dev/null, +++ b/guava-testlib/src/com/google/common/collect/testing/ConcurrentMapTestSuiteBuilder.java, + TestMapGenerator<K, V> generator) {, +++ /dev/null, +++ /dev/null, +++ b/guava-testlib/src/com/google/common/collect/testing/TestsForMapsInJavaUtil.java, + .using(new TestStringMapGenerator() {, + @Override protected Map<String, String> create(Entry<String, String>[] entries) {]
[+++ b/guava-tests/test/com/google/common/net/MediaTypeTest.java, + .addEqualityGroup(, + MediaType.create("text", "plain"),, + MediaType.create("text", "plain"), + .withParameters(ImmutableMultimap.of("charset", "utf-8")),, + MediaType.parse("text/plain; charset=UTF-8"),, + MediaType.parse("text/plain ; charset=utf-8")), + .addEqualityGroup(, + MediaType.create("text", "plain").withParameter("a", "value"),, + .addEqualityGroup(, + MediaType.create("text", "plain").withParameter("a", "VALUE"),, +++ b/guava-tests/test/com/google/common/net/MediaTypeTest.java, + .addEqualityGroup(, + MediaType.create("text", "plain"),, + MediaType.create("text", "plain"), + .withParameters(ImmutableMultimap.of("charset", "utf-8")),, + MediaType.parse("text/plain; charset=UTF-8"),, + MediaType.parse("text/plain ; charset=utf-8")), + .addEqualityGroup(, + MediaType.create("text", "plain").withParameter("a", "value"),, + .addEqualityGroup(, + MediaType.create("text", "plain").withParameter("a", "VALUE"),, +++ b/guava/src/com/google/common/net/MediaType.java, + tokenizer.consumeTokenIfPresent(LINEAR_WHITE_SPACE);]
[+++ b/guava/src/com/google/common/base/Objects.java, +import javax.annotation.CheckReturnValue;, + @CheckReturnValue]
[+++ b/guava-tests/test/com/google/common/net/InetAddressesTest.java, + , + public void testTeredoAddress_nullServer() {, + InetAddresses.TeredoInfo info = new InetAddresses.TeredoInfo(null, null, 80, 1000);, + assertEquals(InetAddresses.forString("0.0.0.0"), info.getServer());, + assertEquals(InetAddresses.forString("0.0.0.0"), info.getClient());, + assertEquals(80, info.getPort());, + assertEquals(1000, info.getFlags());, + }]
[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +/*, + * Copyright (C) 2014 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the
[+++ b/guava/src/com/google/common/collect/ImmutableCollection.java, + private static final Object[] EMPTY_ARRAY = {};, +, + return EMPTY_ARRAY;, +++ b/guava/src/com/google/common/collect/ImmutableCollection.java, + private static final Object[] EMPTY_ARRAY = {};, +, + return EMPTY_ARRAY;, +++ b/guava/src/com/google/common/collect/ObjectArrays.java, + return new Object[0];, +++ b/guava/src/com/google/common/collect/ImmutableCollection.java, + private static final Object[] EMPTY_ARRAY = {};, +, + return EMPTY_ARRAY;, +++ b/guava/src/com/google/common/collect/ObjectArrays.java, + return new Object[0];, +++ b/guava/src/com/google/common/collect/RegularImmutableList.java, + new RegularImmutableList<Object>(new Object[0]);, +++ b/guava/src/com/google/common/collect/ImmutableCollection.java, + private static final Object[] EMPTY_ARRAY = {};, +, + return EMPTY_ARRAY;, +++ b/guava/src/com/google/common/collect/ObjectArrays.java, + return new Object[0];, +++ b/guava/src/com/google/common/collect/RegularImmutableList.java, + new RegularImmutableList<Object>(new Object[0]);, +++ b/guava/src/com/google/common/collect/RegularImmutableSet.java, + new RegularImmutableSet<Object>(new Object[0], 0, null, 0);]
[+++ b/guava-tests/test/com/google/common/collect/EvictingQueueTest.java, + EvictingQueue<Object> unused = EvictingQueue.create(-1);, +++ b/guava-tests/test/com/google/common/collect/EvictingQueueTest.java, + EvictingQueue<Object> unused = EvictingQueue.create(-1);, +++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, + int unused = comparator.compare(1, null);, + int unused = comparator.compare(null, 2);, + int unused = comparator.compare(null, null);, + Ordering<Integer> unused = Ordering.explicit(1, 2, 3, 4, 2);, + List<Integer> unused = Ordering.natural().nullsFirst().immutableSortedCopy(listWithNull);, + List<Integer> unused = numberOrdering.leastOf(Arrays.asList(3, 4, 5, -1), -1);, + List<Integer> unused = numberOrdering.leastOf(Iterators.forArray(3, 4, 5, -1), -1);, +++ b/guava-tests/test/com/google/common/collect/EvictingQueueTest.java, + EvictingQueue<Object> unused = EvictingQueue.create(-1);, +++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, + int unused = comparator.compare(1, null);, + int unused = comparator.compare(null, 2);, + int unused = comparator.compare(null, null);, + Ordering<Integer> unused = Ordering.explicit(1, 2,
[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Charsets.java, +, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Charsets.java, +, +++ b/guava/src/com/google/common/base/Charsets.java, +]
[+++ b/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetRemoveTester.java, + int distinct = getMultiset().elementSet().size();, + assertEquals(distinct, getMultiset().elementSet().size());, +++ b/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetRemoveTester.java, + int distinct = getMultiset().elementSet().size();, + assertEquals(distinct, getMultiset().elementSet().size());, +++ b/android/guava/src/com/google/common/collect/EnumMultiset.java, + if (oldCount == 0) {, + return 0;, + } else if (oldCount <= occurrences) {, +++ b/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetRemoveTester.java, + int distinct = getMultiset().elementSet().size();, + assertEquals(distinct, getMultiset().elementSet().size());, +++ b/android/guava/src/com/google/common/collect/EnumMultiset.java, + if (oldCount == 0) {, + return 0;, + } else if (oldCount <= occurrences) {, +++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetRemoveTester.java, + int distinct = getMultiset().elementSet().size();, + assertEquals(distinct, getMultiset().elementSet().size());, +++ b/android/guava-testlib/src/com/google/common/collect/testing/google/MultisetRemoveTester.java, + int distinct = getMultiset().elementSet().size();, + assertEquals(distinct, getMultiset().elementSet().size());, +++ b/android/guava/src/com/google/common/collect/EnumMultiset.java, + if (oldCount == 0) {, + return 0;,
[+++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, + * <p>A builder of {@link Cache}, {@link LoadingCache} and {@link AsyncLoadingCache} instances, + * having any combination of the following features (note that {@code AsyncLoadingCache} does, + * not currently support the last four, marked with [*]):, + * <li>keys automatically wrapped in {@linkplain WeakReference weak} references [*], + * {@linkplain SoftReference soft} references [*], + * <li>notification of evicted (or otherwise removed) entries [*], + * <li>accumulation of cache access statistics [*], + * modification. Note that {@code AsyncLoadingCache} does not currently support weighers., + * visible to read or write operations. Note that {@code
[+++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, + private Class<?> returnTypeToTest = Object.class;, + * Specifies that only the methods that are declared to return {@code returnType} or its subtype, + * are tested., + *, + * @return this tester object, + */, + public FactoryMethodReturnValueTester thatReturn(Class<?> returnType) {, + this.returnTypeToTest = returnType;, + return this;, + }, +, + /**, + for (Invokable<?, ?> factory : getFactoriesToTest()) {, + for (Invokable<?, ?> factory : getFactoriesToTest()) {, + for (Invokable<?, ?> factory : getFactoriesToTest()) {, + for (Invokable<?, ?> factory : getFactoriesToTest()) {, +, + private ImmutableList<Invokable<?, ?>> getFactoriesToTest() {, + ImmutableList.Builder<Invokable<?, ?>>
[+++ b/android/guava-tests/test/com/google/common/graph/ImmutableNetworkTest.java, +, + @Test, + public void immutableNetworkBuilder_appliesNetworkBuilderConfig() {, + ImmutableNetwork<String, Integer> emptyNetwork =, + NetworkBuilder.directed(), + .allowsSelfLoops(true), + .nodeOrder(ElementOrder.<String>natural()), + .<String, Integer>immutable(), + .build();, +, + assertThat(emptyNetwork.isDirected()).isTrue();, + assertThat(emptyNetwork.allowsSelfLoops()).isTrue();, + assertThat(emptyNetwork.nodeOrder()).isEqualTo(ElementOrder.<String>natural());, + }, +, + /**, + * Tests that the ImmutableNetwork.Builder doesn't change when the creating NetworkBuilder, + * changes., + */, + @Test, + @SuppressWarnings("CheckReturnValue"), + public void immutableNetworkBuilder_copiesNetworkBuilder() {, + NetworkBuilder<String, Object> networkBuilder =, + NetworkBuilder.directed(), + .allowsSelfLoops(true), + .<String>nodeOrder(ElementOrder.<String>natural());, + ImmutableNetwork.Builder<String, Integer> immutableNetworkBuilder =, + networkBuilder.<String, Integer>immutable();, +, + // Update NetworkBuilder, but this shouldn't impact immutableNetworkBuilder, + networkBuilder.allowsSelfLoops(false).nodeOrder(ElementOrder.<String>unordered());, +, + ImmutableNetwork<String, Integer>
[+++ b/guava-tests/test/com/google/common/graph/GraphEqualsTest.java, + // Node/edge sets and node/edge connections are the same, but directedness differs., + new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();, +++ b/guava-tests/test/com/google/common/graph/GraphEqualsTest.java, + // Node/edge sets and node/edge connections are the same, but directedness differs., + new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();, +++ b/guava-tests/test/com/google/common/graph/NetworkEqualsTest.java, + // Node/edge sets and node/edge connections are the same, but directedness differs., + new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();, +++ b/guava-tests/test/com/google/common/graph/GraphEqualsTest.java, + // Node/edge sets and node/edge connections are the same, but directedness differs., + new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();, +++ b/guava-tests/test/com/google/common/graph/NetworkEqualsTest.java, + // Node/edge sets and node/edge connections are the same, but directedness differs., + new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();, +++ b/guava/src/com/google/common/graph/Graph.java, + * Returns {@code true} iff {@code
[+++ b/guava-tests/test/com/google/common/collect/TopKSelectorTest.java, +/*, + * Copyright (C) 2014 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the
[+++ b/guava-tests/test/com/google/common/io/LittleEndianDataOutputStreamTest.java, +import com.google.common.base.Charsets;, +import com.google.testing.util.MoreAsserts;, +, + private ByteArrayOutputStream baos = new ByteArrayOutputStream();, + private LittleEndianDataOutputStream out = new LittleEndianDataOutputStream(baos);, + public void testWriteLittleEndian() throws IOException {, + DataInput in = new DataInputStream(new ByteArrayInputStream(data));, + , + @SuppressWarnings("deprecation") // testing a deprecated method, + public void testWriteBytes() throws IOException {, + , + /* Write out various test values in LITTLE ENDIAN FORMAT */, + out.writeBytes("r\u00C9sum\u00C9");, +, + byte[] data = baos.toByteArray();, +, + /* Setup input streams */, + DataInput in = new DataInputStream(new ByteArrayInputStream(data));, +, + /* Read in various values NORMALLY */, + byte[] b
[+++ b/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java, +++ b/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java, +++ b/android/guava/src/com/google/common/collect/EmptyContiguousSet.java, +@SuppressWarnings("rawtypes") // allow ungenerified Comparable types, +++ b/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java, +++ b/android/guava/src/com/google/common/collect/EmptyContiguousSet.java, +@SuppressWarnings("rawtypes") // allow ungenerified Comparable types, +++ b/android/guava/src/com/google/common/collect/EnumMultiset.java, +++ b/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java, +++ b/android/guava/src/com/google/common/collect/EmptyContiguousSet.java, +@SuppressWarnings("rawtypes") // allow ungenerified Comparable types, +++ b/android/guava/src/com/google/common/collect/EnumMultiset.java, +++ b/android/guava/src/com/google/common/collect/LinkedHashMultiset.java, +++ b/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java, +++ b/android/guava/src/com/google/common/collect/EmptyContiguousSet.java, +@SuppressWarnings("rawtypes") // allow ungenerified Comparable types, +++ b/android/guava/src/com/google/common/collect/EnumMultiset.java, +++ b/android/guava/src/com/google/common/collect/LinkedHashMultiset.java, +++ b/android/guava/src/com/google/common/collect/NaturalOrdering.java, +@SuppressWarnings({"unchecked", "rawtypes"}) // TODO(kevinb): the right way to explain this??, +++ b/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java, +++ b/android/guava/src/com/google/common/collect/EmptyContiguousSet.java, +@SuppressWarnings("rawtypes") // allow ungenerified Comparable types, +++ b/android/guava/src/com/google/common/collect/EnumMultiset.java, +++ b/android/guava/src/com/google/common/collect/LinkedHashMultiset.java, +++ b/android/guava/src/com/google/common/collect/NaturalOrdering.java, +@SuppressWarnings({"unchecked", "rawtypes"}) // TODO(kevinb): the right way to explain this??, +++ b/android/guava/src/com/google/common/collect/RegularImmutableSortedSet.java, +@SuppressWarnings({"serial", "rawtypes"}), +++ b/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java, +++ b/android/guava/src/com/google/common/collect/EmptyContiguousSet.java, +@SuppressWarnings("rawtypes")
[+++ b/guava/src/com/google/common/cache/CacheStats.java, +import java.util.concurrent.Callable;, +, + * <li>No stats are modified on a query to {@link Cache#getIfPresent}., + * <p>A lookup is specifically defined as an invocation of one of the methods , + * {@link LoadingCache#get(Object)}, {@link LoadingCache#getUnchecked(Object)}, , + * {@link Cache#get(Object, Callable)}, or {@link LoadingCache#getAll(Iterable)}., + *]
[+++ b/guava/src/com/google/common/collect/EvictingQueue.java, +@GwtCompatible]
[+++ b/guava/src/com/google/common/base/Verify.java, + *, + * @throws VerifyException if {@code expression} is {@code false}, + * @throws VerifyException if {@code reference} is {@code null}, + * @throws VerifyException if {@code reference} is {@code null}]
[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, + return Platform.mapsAsMapSortedSet(set, function);, + }, +, + static <K, V> SortedMap<K, V> asMapSortedIgnoreNavigable(SortedSet<K> set,, + Function<? super K, V> function) {, + return removeOnlySet(backingSet());, + return backingSet().size();, + return backingSet().contains(key);, + if (backingSet().contains(key)) {, + if (backingSet().remove(key)) {, + backingSet().clear();, + }, +, + protected Entry<K, V> entry(K key) {, + return immutableEntry(key, function.apply(key));, + final Iterator<K> backingIterator = backingSet().iterator();, + return entry(backingIterator.next());, + private static class SortedAsMapView<K, V> extends AsMapView<K, V>, + SortedSet<K> backingSet() {, + return (SortedSet<K>) super.backingSet();, + }, +, + @Override, + public Set<K> keySet() {, + return removeOnlySortedSet(backingSet());, + }, +,
[+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import java.util.Set;, + // TODO(b/28087289): update if support for parallel edges added, + assertThat(graph.adjacentNodes(node)).hasSize(graph.degree(node));, + assertThat(graph.predecessors(node)).hasSize(graph.inDegree(node));, + assertThat(graph.successors(node)).hasSize(graph.outDegree(node));, +, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import java.util.Set;, + // TODO(b/28087289): update if support for parallel edges added, + assertThat(graph.adjacentNodes(node)).hasSize(graph.degree(node));, + assertThat(graph.predecessors(node)).hasSize(graph.inDegree(node));, + assertThat(graph.successors(node)).hasSize(graph.outDegree(node));, +, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +import com.google.common.collect.Sets;, +import java.util.Iterator;, +import java.util.Set;, + Iterator<Integer> endpointsIterator = graph.incidentNodes(edge).iterator();, + Integer nodeA = endpointsIterator.next();, + Integer nodeB = endpointsIterator.next();, + assertThat(graph.incidentEdges(node)).hasSize(graph.degree(node));, + assertThat(graph.degree(node)).isAtLeast(graph.adjacentNodes(node).size());, + assertThat(graph.inEdges(node)).hasSize(graph.inDegree(node));, + assertThat(graph.inDegree(node)).isAtLeast(graph.predecessors(node).size());, + assertThat(graph.outEdges(node)).hasSize(graph.outDegree(node));, + assertThat(graph.outDegree(node)).isAtLeast(graph.successors(node).size());, +, + for (Integer otherNode : graph.nodes()) {, + Set<String> edgesConnecting = graph.edgesConnecting(node, otherNode);, + boolean isSelfLoop = node.equals(otherNode);, + if (graph.isDirected()
[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, + afterDone();, + protected void afterDone() {}, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, + afterDone();, + protected void afterDone() {}, +++ b/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, + protected final void afterDone() {, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, + afterDone();, + protected void afterDone() {}, +++ b/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, + protected final void afterDone() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, + // We call this after the listeners on the theory that afterDone() will only be used for, + // 'cleanup' oriented tasks (e.g. clearing fields) and so can wait behind listeners which may be, + // executing more important work. A counter argument would be that done() is trusted code and, + //
[+++ b/guava/src/com/google/common/collect/AbstractListMultimap.java, + @Override, + List<V> createUnmodifiableEmptyCollection() {, + return ImmutableList.of();, + }, +, +++ b/guava/src/com/google/common/collect/AbstractListMultimap.java, + @Override, + List<V> createUnmodifiableEmptyCollection() {, + return ImmutableList.of();, + }, +, +++ b/guava/src/com/google/common/collect/AbstractMultimap.java, + * Creates an unmodifiable, empty collection of values., + *, + * <p>This is used in {@link #removeAll} on an empty key., + */, + Collection<V> createUnmodifiableEmptyCollection() {, + return unmodifiableCollectionSubclass(createCollection());, + }, +, + /**, + if (collection == null) {, + return createUnmodifiableEmptyCollection();, + }, +, + Collection<V> output = createCollection();, +++ b/guava/src/com/google/common/collect/AbstractListMultimap.java, + @Override, + List<V> createUnmodifiableEmptyCollection() {, + return ImmutableList.of();, + }, +, +++
[+++ /dev/null, +++ /dev/null, +++ b/guava-tests/benchmark/com/google/common/hash/HashFunctionBenchmark.java, + * <li>hashFunctionEnum: The {@link HashFunction} to use for hashing., + // Use a statically configured random instance for all of the benchmarks, + private static final Random random = new Random(42);, + @Param HashFunctionEnum hashFunctionEnum;, +, + random.nextBytes(testBytes);, + public int timeHashFunction(int reps) {, + HashFunction hashFunction = hashFunctionEnum.getHashFunction();, + result ^= hashFunction.hashBytes(testBytes).asBytes()[0];, +++ /dev/null, +++ b/guava-tests/benchmark/com/google/common/hash/HashFunctionBenchmark.java, + * <li>hashFunctionEnum: The {@link HashFunction} to use for hashing., + // Use a statically configured random instance for all of the benchmarks, + private static final Random random = new Random(42);, + @Param HashFunctionEnum
[+++ b/guava/src/com/google/common/collect/Queues.java, + * the queue's iterator: <pre> {@code, + * Queue<E> queue = Queues.synchronizedQueue(MinMaxPriorityQueue<E>.create());, + * synchronized (queue) { // Must synchronize on queue!, + * Iterator<E> i = queue.iterator(); // Must be in synchronized block]
[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/ExtraObjectsMethodsForWeb.java, +/*, + * Copyright (C) 2016 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific
[+++ b/android/guava-testlib/src/com/google/common/collect/testing/google/SetGenerators.java, + int tooHigh = set.isEmpty() ? 0 : set.last() + 1;, + int tooLow = set.isEmpty() ? 0 : set.first() - 1;, + elements.isEmpty() ? Range.closedOpen(0, 0) : Range.encloseAll(elements);, +++ b/android/guava-testlib/src/com/google/common/collect/testing/google/SetGenerators.java, + int tooHigh = set.isEmpty() ? 0 : set.last() + 1;, + int tooLow = set.isEmpty() ? 0 : set.first() - 1;, + elements.isEmpty() ? Range.closedOpen(0, 0) : Range.encloseAll(elements);, +++ b/android/guava-testlib/src/com/google/common/testing/TearDownStack.java, + if (!suppressThrows && (exceptions.size() > 0)) {, +++ b/android/guava-testlib/src/com/google/common/collect/testing/google/SetGenerators.java, + int tooHigh = set.isEmpty() ? 0 : set.last() + 1;, + int tooLow = set.isEmpty() ? 0 : set.first() - 1;, + elements.isEmpty() ?
[+++ b/guava-tests/test/com/google/common/reflect/MutableTypeToInstanceMapTest.java, + public void testEntrySetMutationThrows() {, + map.putInstance(String.class, "test");, + assertEquals(TypeToken.of(String.class), map.entrySet().iterator().next().getKey());, + assertEquals("test", map.entrySet().iterator().next().getValue());, + try {, + map.entrySet().iterator().next().setValue(1);, + fail();, + } catch (UnsupportedOperationException expected) {}, + }, +, + public void testEntrySetToArrayMutationThrows() {, + map.putInstance(String.class, "test");, + @SuppressWarnings("unchecked") // Should get a CCE later if cast is wrong, + Entry<Object, Object> entry = (Entry<Object, Object>) map.entrySet().toArray()[0];, + assertEquals(TypeToken.of(String.class), entry.getKey());, + assertEquals("test", entry.getValue());, + try {, + entry.setValue(1);, + fail();, + } catch (UnsupportedOperationException expected) {}, + }, +, + public void testEntrySetToTypedArrayMutationThrows() {, + map.putInstance(String.class, "test");, + @SuppressWarnings("unchecked") // Should get a CCE later if
[+++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.selfLoopPredicate;, +import com.google.common.base.Predicates;, + Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, + Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, + Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, + Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.selfLoopPredicate;, +import com.google.common.base.Predicates;, + Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, + Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, + Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, + Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, +++ b/guava-tests/test/com/google/common/graph/PackageSanityTests.java, +import static com.google.common.truth.Truth.assertThat;, +, +import junit.framework.AssertionFailedError;, +, +, + @Override, + public void testNulls() throws Exception {, + try {, + super.testNulls();, + } catch (AssertionFailedError e) {, + assertThat(e.getCause().getMessage()).contains(AbstractGraphTest.ERROR_ELEMENT_NOT_IN_GRAPH);, + }, + }, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.selfLoopPredicate;, +import com.google.common.base.Predicates;, + Predicate<String>
[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +import java.util.concurrent.TimeUnit;, + public void testNoOpServiceStartStop() throws Exception {, + RecordingListener listener = RecordingListener.record(service);, +, + RecordingListener listener = RecordingListener.record(service);, + public void testManualServiceStartStop() throws Exception {, + RecordingListener listener = RecordingListener.record(service);, + assertEquals(, + Arrays.asList(, + State.STARTING,, + State.RUNNING,, + State.STOPPING,, + State.TERMINATED),, + listener.getStateHistory());, +, + public void testManualServiceNotifyStoppedWhileRunning() throws Exception {, + RecordingListener listener = RecordingListener.record(service);, +, + service.start();, + service.notifyStarted();, + service.notifyStopped();, + assertEquals(State.TERMINATED, service.state());, + assertFalse(service.isRunning());, + assertFalse(service.doStopCalled);, +, + assertEquals(, + Arrays.asList(, + State.STARTING,, + State.RUNNING,, + State.TERMINATED),, + listener.getStateHistory());, + }, +, + public void testManualServiceStopWhileStarting() throws Exception {, +
[+++ b/android/guava/src/com/google/common/collect/CompoundOrdering.java, +import java.util.Arrays;, + final Comparator<? super T>[] comparators;, + this.comparators = (Comparator<? super T>[]) new Comparator[] {primary, secondary};, + this.comparators = Iterables.toArray(comparators, new Comparator[0]);, + for (int i = 0; i < comparators.length; i++) {, + int result = comparators[i].compare(left, right);, + return Arrays.equals(this.comparators, that.comparators);, + return Arrays.hashCode(comparators);, + return "Ordering.compound(" + Arrays.toString(comparators) + ")";, +++ b/android/guava/src/com/google/common/collect/CompoundOrdering.java, +import java.util.Arrays;, + final Comparator<? super T>[] comparators;, + this.comparators = (Comparator<? super T>[]) new Comparator[] {primary, secondary};, + this.comparators = Iterables.toArray(comparators, new Comparator[0]);, + for (int i = 0; i < comparators.length; i++) {, + int result = comparators[i].compare(left,
[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + checkArgument(limit > 0, "must be greater than zero: %s", limit);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + checkArgument(limit > 0, "must be greater than zero: %s", limit);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, + * @return this {@code Stopwatch} instance, + * @return this {@code Stopwatch} instance, + *, + * @return this {@code Stopwatch} instance, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + checkArgument(limit > 0, "must be greater than zero: %s", limit);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, + * @return this {@code Stopwatch} instance, + * @return this {@code Stopwatch} instance, + *, + * @return this {@code Stopwatch} instance, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, + * ImmutableSet#of()}., +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + checkArgument(limit >
[+++ b/build.xml, + <arg line="-strict"/>, + <arg line="-draftCompile"/>, + <arg line="-validateOnly"/>, +++ b/build.xml, + <arg line="-strict"/>, + <arg line="-draftCompile"/>, + <arg line="-validateOnly"/>, +++ b/guava-gwt/test/com/google/common/base/TestModuleEntryPoint.java, + * An empty entry point for testing GWT compatibility., + @Override public void onModuleLoad() {, +++ b/build.xml, + <arg line="-strict"/>, + <arg line="-draftCompile"/>, + <arg line="-validateOnly"/>, +++ b/guava-gwt/test/com/google/common/base/TestModuleEntryPoint.java, + * An empty entry point for testing GWT compatibility., + @Override public void onModuleLoad() {, +++ b/guava-gwt/test/com/google/common/net/TestModuleEntryPoint.java, + * An empty entry point for testing GWT compatibility., + *, + @Override public void onModuleLoad() {, +++ b/build.xml, + <arg line="-strict"/>, + <arg line="-draftCompile"/>, + <arg
[+++ b/guava/src/com/google/common/graph/Graph.java, + * relationships as those in this graph. Additionally, a {@link Graph} is defined to never be, + * equal to a {@link ValueGraph} (and vice versa)., + * <li>'A instanceof ValueGraph' and 'B instanceof ValueGraph' are equal.]
[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +, +++ b/guava/src/com/google/common/base/Stopwatch.java]
[+++ b/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java, + TrieParser.parseTrie("a&12oa08--nx?2eyh3la2ckx--nx?32wqq1--nx?6&1f4a3abgm--nx?lbgw--nx??883xnn--nx?b!.&asnu?gro?ibnu?lim?moc?oc?sr?ten?ude?vog???c!.&b&a?m?n??c&b?g?q??ep?fn?k&s?y??ln?no?oc,sn?t&n?opsgolb,?un??s??d&neit?om??g?hskihs?i&dem?sa??jnin?k&dov?usto??l!.&c,gro?moc?ofni?rep?t&en?ni??ude?vog???m!.&ca?gro?oc?sserp?ten?vog??ahokoy?e00sf7vqn--nx??n!.&ac?cc?eman?gro?ibom?loohcs?moc?ni?o&c?fni?rp??r&d?o??s&u?w??vt?xm???p!.&bog?ca?d&em?ls??g&ni?ro??mo&c?n??oba?ten?ude??g7hyabgm--nx?ra!.&461e?6pi?iru?nru?rdda-ni?siri????q!.&eman?gro?hcs?lim?moc?ten?ude?vog???r&emac?f4a3abgm--nx??s!.&bup?dem?gro?hcs?moc?ten?ude?vog??ac??u!.&a&cinniv?emirc?i&hzhziropaz?stynniv??s&edo?sedo??tlay?vatlop??bs?cinimod?d&argovorik?o!roghzu???e&hzhziropaz?nvir?t??fi?g&l?ro??hk?i&stvinrehc?ykstynlemhk??k&c?m?s&nagul?t&enod?ul??v&iknarf-onavi?orteporp&end?ind?????l&iponret?opotsa&bes?ves??p??m&k?oc?s?yrk??n&c?d?i?osrehk?v?ylov??o&c?nvor??p&d?p?z??r&c?imotihz?k?ymotyhz??sk?t&en?l?z??ude?v&c?e&alokin?ik??i&alokym?hinrehc?krahk?vl?yk??k?l?o&g!inrehc??krahk??r??y&ikstinlemhk?mus?s&akrehc?sakrehc?tvonrehc???zu???v?waniko?x&a?iacal??yogan??b&125qhx--nx?3jca1d--nx?4&6&1rfz--nx?qif--nx??96rzc--nx??a&0dc4xbgm--nx?c?her??b!.&erots?gro?moc?ofni?ten?ude?vog?zib???cs?dhesa08--nx?g?l!.&gro?moc?ten?ude?vog???s!.&gro?moc?ten?ude?vog???u&lc?p???c&1&1q54--nx?hbgw--nx??2e9c2czf--nx?4byj9q--nx?9jr&b&2h--nx?54--nx?9s--nx??ceg--nx??a!.&gro?lim?moc?ten?ude?vog??3a09--nx??bf76a0c7ylqbgm--nx?c!.&gnipparcs,revres-emag,s&otohpym,seccaptf,??0atf7b45--nx?a1l--nx??e!.&21k?bog?dem?gro?lim?moc?nif?o&fni?rp??ten?ude?vog??beuq??l!.&gro?moc?oc?ten?ude?vog???m!.&mt?ossa???n!.ossa??s!.&gro?moc?ten?ude?vog???t!w??v!.&gro?lim?moc?ten?ude?vog???yn??d&2urzc--nx?3&1wrpk--nx?c9jrcpf--nx??5xq55--nx?75yrpk--nx?a!.mon?d??b2babgm--nx?c!.vog?g9a2g2b0ae0chclc--nx??e&r!k??sopxe?timil?w??g?i!.&ased?bew?ca?hcs?lim?o&c?g??ro?ten?ym?zib??b??liub?m?nal!raas??orp?rk?s!.&dem?gro?moc?ofni?ten?ude?v&og?t????t!.topsgolb,?za5cbgn--nx??e&17a1hbbgm--nx?2a6a1b6b1i--nx?707b0e3--nx?a!.&ca?gro?hcs?lim?oc?ten?vog???b!.&ca?topsgolb,??c&nad?rofria??d!.&edaregtmueart,keegnietsi,moc,n&esgnutiel,iemtsi,?topsgolb,zten&mitbel,sadtretteuf,??art?iug?on--nx??e!.&bil?dem?eif?gro?irp?kiir?moc?pia?ude?vog??ffoc?gg?rged??fil?g!.&gro?lim?moc?t&en?vp??ude?vog??ayov?elloc?nahcxe??i!.&topsgolb,vog???j!.&gro?oc?ten???kib?luhcs?m!.&ca?gro?oc?sti?ten?ude?v&irp?og???an!.&reh.togrof,sih.togrof,??em?w??n!goloc?oz??om?p!.&bog?gro?lim?mo&c?n??ten?ude??irg??r!.&mo&c?n??ossa?topsgolb,?eh??s!.&a?b!ibnal?rofmok??c!a??d!b?n&arb?ubroflanummok???e?f?g!ro??h!f??i!trap??k!shf??l?m!t??n!mygskurbrutan??o?p!p??r?s!serp??t!opsgolb,?u?vhf?w?x!uvmok??y?z??ael?ier?roh?uoh??t&atse?ov?utitsni??u&lb?qituob??v!.&21e?bew?gro?lim?moc?o&c?fni??ten?ude?vog???xul??f&7vqn--nx?a!.&gro?moc?ten?ude?vog???b!.vog?wa9bgm--nx??c!.topsgolb,a1p--nx??g?n!.&bew?cer?erots?m&oc?rif??ofni?re&hto?p??stra?ten???p!.&gro?moc?ude???t!w??w??g&2&4wq55--nx?8zrf6--nx??3&44sd3--nx?91w6j--nx??455ses--nx?69vqhr--nx?78a4d5a4prebgm--nx?a!.&gro?mo&c?n??oc?ten???b!.&0?1?2?3?4?5?6?7?8?9?a?b?c?d?e?f?g?h?i?j?k?l?m?n?o?p?q?r?s?t?u?v?w?x?y?z???c!za9a0cbgm--nx??e!.&eman?gro?ics?lim?moc?nue?ten?ude?vog???g!.&gro?oc?ten???k!.&gro?lim?moc?ten?ude?vog???m!.&drp?gro?lim?m&o&c?n??t??ude?vog???n!.&eman?gro?hcs?ibom?lim?moc?ten?ude?vog??aw?i!bmulp?h&sif?tolc??kooc?n&aelc?iart??re&enigne?tac??t&ad?ekram?hgil?lusnoc?ov???o??r&o!.&az,d&ab-yrev-si,e&sufnocsim,vas-si,?nuof-si,oog-yrev-si,?e&a,cin-yrev-si,las-4-ffuts,m&-morf,agevres,ohruoyslles,?nozdop,rehwongniogyldlob,t&adidnac-a-si,is&-ybboh,golb,???fehc-a-si,golbymdaer,keeg-a&-si,si,?live-yrev-si,naf&s&citlec-a-si,niurb-a-si,tap-a-si,?xos-a-si,?ojodsnd,p&ifles,ohbew,tfe&moh,vres,??resu-xunil-a-si,s&aila&nyd,snd,?bbevres,nd&emoh,golb,mood,nyd:.&emoh,og,?,rvd,tog,?sa-skcik,u,?t&e&ews-yrev-si,nretni&ehtfodne,fodne,??hgink-a-si,s&ixetn&od,seod,?o&h-emag,l-si,???x&inuemoh,unilemoh,???ubmah??s!.&gro?moc?rep?t&en?opsgolb,?ude?vog???t?u!.&c&a?s??en?gro?moc?o&c?g??ro???v!a1c--nx??wsa08--nx??h&0ee5a3ld2ckx--nx?4wc3o--nx?8a7maabgm--nx?b!.&gro?moc?ten?ude?vog???c!.topsgolb,ir?ruhc?taw??d0sbgp--nx?g!.&gro?lim?moc?ude?vog???m!a1j--nx??p!.&gro?i?lim?moc?ogn?ten?ude?vog???s!.&gro?lim?moc?ten?vog??a&c?nom??if??t!.&ca?im?ni?o&c?g??ro?ten???vo?zb??i&3tupk--nx?7a0oi--nx?a!.&ffo?gro?moc?ten??1p--nx??b!.&gro?moc?oc?ro?ude??om??c!.&ayb-tropora--nx?ca?d&e?m??esserp?gro?moc?o&c?g?ssa??ro?t&en?ni?roporéa??ude?vuog???f!.&dnala?iki,topsgolb,??g!.&d&om?tl??gro?moc?ude?vog???hcra?k!.&gro?moc?ofni?ten?ude?vog?zib??b4gc--nx?iw?uzus??l?maim?nim?s!ed??v!.&21k?gro?moc?oc?ten???wik?xarp??j&8da1tabbgl--nx?b!.&ossa?topsgolb,uaerrab?vuog???d?s?t!.&bew?c&a?in??eman?gro?lim?moc?o&c?g??t&en?ni?set??ude?vog?zib????k&ca&bdeef?lb??d!.topsgolb,?h!.&a&4ya0cu--nx?5wqmg--nx??b3qa0do--nx?d&2&2svcw--nx?3rvcl--nx??5xq55--nx??g&a0nt--nx?la0do--nx?ro??i&050qmg--nx?7a0oi--nx?xa0km--nx??m&1qtxm--nx?oc??npqic--nx?t&en?opsgolb,?ude?v&di?og?ta0cu--nx??xva0fz--nx?人&个?個?箇??司公?府政?絡&網?网??織&組?组??织&組?组??络&網?网??育&敎?教???n??l!.&bew?cos?dtl?gro?hcs?letoh?moc?nssa?ogn?prg?t&en?ni??ude?vog???m!.&eman?fni?gro?moc?ten?ude?vog???ni!l?p??p!.&b&ew?og??gro?kog?m&af?oc??nog?ofni?pog?sog?ten?ude?vog?zib???row!ten??s!.topsgolb,?t?u.oc.topsgolb,?l&a!.&gro?lim?moc?ten?ude?vog??g?ic&nanif?os??noitanretni?ti&gid?pac???c!.&bog?lim?oc?vog???e&geips?t?vart??f8f&pbgo--nx?tbgm--nx??g?i&.oc.topsgolb,a&f?me??m??lihmailliw?m!.&esserp?gro?moc?ten?ude?v&og?uog????n!.&oc,topsgolb,vb??o??o&btuf?oc??p!.&a&cin&diws?gel??d&g?ortso?urawon??i&dem?mraw?nydg??k&elo&guld?rtso??slopolam?tsu?ytsyrut??l&ip?o&kzs?w&-awolats?oksnok????nimg?rog&-ai&bab?nelej??j?z??syn?tsaim?w&a&l&eib?i?o??zsraw??onamil??z&eiwolaib?mol???c&e&iw&alselob?o&nsos?rtso???le&im?zrogz???orw?p?ri??d&em?ia?ragrats??e&c&i&lrog?w&ilg?o&hc&arats?orp??klop?tak????ldeis?yzreibok??i&csjuoniws?ksromop?saldop??l&ahdop?opo??n&apokaz?ob&6?m???tatselaer?z&romop?swozam???g&alble?ezrbo&lok?nrat??ro??hcyzrblaw?i&csomohcurein?grat?klawus??k&e&rut?walcolw??inbyr?le?o&nas?tsylaib??rob&el?lam??s&als?jazel?nadg?puls?rowezrp???l&colw?e&r?vart??i&am?m???m&o&c?dar?n?tyb??s&g?iruot??t!a???n&a&gaz?nzop??i&bul?cezczs?molow?nok?zd&eb?obeiws???uleiw?y&tzslo?z&rtek?seic????o&c,fni?gn?k&celo?zdolk??lkan?n&leim?pek?t&uk?yzczs??z&copo?eing?rowaj???rga?tua?w&ejarg?ogarm???p&elks?klwwortso?ohs??romophcaz?sos?t&aiwop?en!esu??opos?ra?sezc??ude?v&irp?og!.&ap?gu?mu?o&p?s?wtsorats??rs?w&opu?u?????w&a&l&corw?sizdow??w??o&golg?k&ark?ul?zsurp??r&az?gew??tsugua?z&coks?sezr????xes?y&buzsak?d&azczseib?ikseb??hcyt?n&jes?lod-zreimizak??pal?r&ogt?uzam??walup?zutrak??z&am-awar?c&aprak?iwol?zsogdyb??dalezc?ib?s&i&lak?p??uklo?????s!.&gro?moc?ten?ude?vog???t!.vog??x3b689qq6--nx??m&00tsb3--nx?1qtxm--nx?a!cbew?rirhs??b!.&gro?moc?ten?ude?vog???c!.vog??d!.&gro?moc?ten?ude?vog???f!i??g?h?i!.&ca?gro?moc?oc!.&clp?dtl???t&en?t??vt??k?rbg4--nx??k!.&drp?e&rianiretev?sserp??gro?lim?m&o&c?n??t??nicedem?ossa?pooc?s&eriaton?neicamrahp?sa??ude?v&og?uog????o!.&dem?gro?m&oc?uesum??o&c?rp??ten?ude?vog??c!.&a&c&-morf,irfa,?g&-morf,oy-sehcaet,?i-morf,m&-morf,all&-a-si,amai,??p&-morf,c-a-si,?s,v-morf,w-morf,z,?b&ew-sndnyd,g,?c&d-morf,n-morf,q,s-morf,?d&e&ifitrec-&si,ton-si,?llortnocduolc,?i-morf,m-morf,n&-morf,abeht-htiw-si,?s-morf,uolc&hr,smetsystuo,??e&ciffo-sndnyd,d:-morf,ocelgoog,,erf-sndnyd,i&hcet-a-si,p-sekil,?lgooghtiw,m&ina-otni-si,oh-&sndnyd,ta-sndnyd,??n&-morf,og-si,?rihcec,s:run-a-si,,t&i&nuarepo,s-ybboh,?omer-sndnyd,?v&als-elcibuc-a-si,itavresnoc-a-si,??fehc-a-si,golb&-sndnyd,sihtsetirw,?h&n-morf,o-morf,?i&h-morf,kiw-sndnyd,m-morf,r-morf,w-morf,?jn-morf,k&a-morf,cils-si,eeg-a&-si,si,?latsnaebcitsale,o-morf,row-&sndnyd,ta-sndnyd,?u,?l&a&-morf,rebil-a-si,?f-morf,i&-morf,am-sndnyd,?ru-&elpmis,taen,?ssukoreh,?mn-morf,n&a&cilbuper-a-si,f&-sllub-a-si,racsan-a-si,?i&cisum-a-si,ratrebil-a-si,??c,eerg-a-si,i-morf,m-morf,o&isam-al-a-tse,rtap-el-tse,siam-al-a-tse,?pj,t-morf,?o&c,jodsnd,m-morf,n,r,?p&i&-sndnyd,fles,ymteg,?pa&lortnocduolc,ukoreh,??r&a:-morf,tskcor-a-si,,b,e&enigne-na-si,ggolb-a-si,h&caet-a-si,pargotohp-a-si,?krow-drah-a-si,n&gised-a-si,ia&rtlanosrep-a-si,tretne-na-si,??p&acsdnal-a-si,eekkoob-a-si,?retac-a-si,tn&iap-a-si,uh-a-si,?vres-sndnyd,y&alp-a-si,wal-a-si,??g,k,o&-morf,sivdalaicnanif-a-si,tc&a-na-si,od-a-si,??p-morf,u&as-o-nyd,eugolb-nom-tse,??s&aila&nyd,snd,?bbevres,cip-sndnyd,e&lahw-eht-sevas,mag-otni-si,?ipaelgoog,k-morf,m-morf,n&d&golb,mood,tog,?ootrac-otni-si,?r&ac-otni-si,etsohmaerd,?se&l-rof-slles,rtca-na-si,?u,wanozama.&1-&etupmoc:.&1-z,2-z,?,ts&ae&-&as-&3s,etisbew-3s,?su:-etisbew-3s,,?ht&ron-pa-&3s,etisbew-3s,?uos-pa-&3s,etisbew-3s,???ew-&su-&3s,etisbew-3s,?ue-&3s,etisbew-3s,?vog-su-&3s,etisbew-3s,spif-3s,????2-ts&aehtuos-pa-&3s,etisbew-3s,?ew-su-&3s,etisbew-3s,??3s,ble,etupmoc:.&1-ts&ae&-as,ht&ron-pa,uos-pa,??ew-&su,ue,vog-su,??2-ts&aehtuos-pa,ew-su,??,??t&arcomed-a-si,c-morf,eel&-si,rebu-si,?m-morf,n&atnuocca-na-si,e&duts-a-si,r-ot-ecaps,tnocresubuhtig,??ops&edoc,golb,ppa,?si&hcrana-&a-si,na-si,?laicos-a-si,pareht-a-si,tra-na-si,xetn&od,seod,??u&-morf,nyekcoh-asi,?v-morf,?u&-rof-slles,e,h,oynahtretramssi,r:ug-a-si,,?v&n-morf,w-morf,?x&em,inuemoh,obaniateb,t-morf,unilemoh,?y&dnacsekil,k-morf,u,w-morf,????p?raf?s?t!.&gro?lim?mo&c?n??oc?ten?ude?vog???uesum!.&a&92chg-seacinumocelet-e-soierroc--nx?atnav?c&i&aduj?rfatsae??rollam??d&anac?enomaledasac?irolf??e&raaihpledalihp?srednu??g&hannavas?oonattahc??hamo?i&auhsu?bmuloc!hsitirb??dem?groeg?hpledalihp?l&artsua?etalif??n&igriv?rofilac??ssur?tsonod??ksa&la?rben??l&lojal?q-snl--nx?uossim!trof???m&a&bala?nap??enic?o&m?r???n&a&cirema?idni??edasap?ilorachtuos?olecrab??r&abrabatnas?ezzivs??su?t&nalta?osennim??zalp??c&dnotgnihsaw?ebeuq?i&depolcycne?ficap?hpargonaeco?lbup?sum?t&carporihc?lec?naltadim??vu??yn??d&a&dhgab?etsmraf?m?orliar??i&rdam?ulegnedleeb??leif?n&a!l&gne?nif?ragyduj?t&ocs?rop??yram???u&brofsdgybmeh?osdnaegami???r&augria?ofxo???e&c&a&l&ap?phtrib??ps??n&a&lubma?tsiser??e&fedlatsaoc?gilletni?ics!foyrotsih????pein?rof??d&nukneklov?revasem??e&rt?tsurt??f&atnas?ildliw??g&a&lliv?tireh!lanoitan???dirbmac?rog??i&cnum?nollaw??koorbrehs?l&ab?bib?cycrotom?i&ssim?txet??oks?tsac??m&affollah?it!iram??utsoc??n&golos?ilno?recul??r&a&uqs?waled!foetats???i&hs&acnal?kroy?pmahwen??otsih??omitlab?ut&an?cetihcra?inruf?luc!irga?su???vuol??s&abatad?iacnarf?sius?uoh!lum???t&a&locohc?rak?ts!e!yrtnuoc!su?????imesoy?tevroc??u&qihpargonaeco?velleb??vit&caretni?omotua???f&iuj?ohgrub??g&n&i&dliub?ginerevmuesum?kiv?lahw?nim?peekemit?vil??ulmmastsnuk??orf?r&eb&merun?nr&ats?eun???u&b&ierf?le?m&ah?uan??ram?s&mailliw!lainoloc??naitsirhc?retepts??zlas??ob&irf?mexul?????h&atu?c&raeser?sirotsih?uot??g&ea1h--nx?rubsttip??si&tirb?wej??t&laeh?ro&n?wtrof??uo&mnom?y????i&d6glbhbd9--nx?iawah?k&nisleh?s??lad!rodavlas??sissa?tannicnic??k&c&nivleeg?olc!-dna-hctaw?dnahctaw???fj?inebis?l&is?ofron??na&rfenna?t??oorbnarc?r&am&ned?reiets??oy!wen????l&a&ci&dem?golo&eahcra?meg?oz??natob?rotsih??ertnom?iromem?noita&cude?n??oc?rutluc?trop?utriv?van??e&nurb?s&ab?surb??utriv??i&artnogero?sarb??l&a&besab?hsnoegrus??e&hs?rdnevle??i&b?m!dniw????o&bup?ohcs?tsirb???m&a&dretsma?ets?h&netlehc?rud???ct?elas!urej??l&if?ohkcots?u??raf?silanruoj?u&esumyrotsihlarutan?ira&tenalp?uqa??terobra???n&a&c!irema!evitan???gihcim?i&dni?tpyge??mfoelsi?wehctaksas??e&d&alokohcs?ews?rag!cinatob?lacinatob?s&nerdlihc?u????gahnepoc?hcneum?laftsew?ppahcsnetewruutan?r&dlihc?ednaalv?hu!dnutamieh???sseig??gised!dn&atra?utsnuk???h&ab!nesie??ojts??i&lreb?tsua??l&eok?ocnil??n&ob?urbneohcs??o&dnol?gero?i&s&iv&dnadnuos?elet??nam??t&a&c&inummoc?ude!tra???dnuof?erc?i&cossa?va??kinummokelet?nissassa?r&belectsevrah?oproc?tsulli??silivic?t&nalp?s??vres&erp?noclatnemnorivne??zilivic??c&elloc?if-ecneics??ibihxe???ri?s&dnah?imaj?reffej?sral??t&erbepac?nilc?sob???r&e&b?dom?tsew?uab?zul??obredap??vahnebeok?wot??o&2a6v-seacinumoc--nx?ablib?c&edtra?ixemwen?sicnarfnas??elap?g&a&cihc?to??eidnas??i&cadnuf?diserp?ratno??llecitnom?mitiram?nirot?r&htna?ienajedoir???pohskrow?qari?r&aw!dloc?livic??dd?e&b&ma?yc??irrac?llimsiwel?naksiznarf?papswen?t&aeht?exe?nec!ecneics?larutluc?muesum?tra??s&ehc&nam?or??neum??upmoc???ia!nepo??obal?u&asonid?obal?takirak???s&a&l&g?l&ad?eh???xet??di&k?pardnarg??e&cneics!larutan??dnal?hcsi&deuj?rotsih!nizidem?rutan??selhcs??itinamuh?l&aw?egnasol?l&e&rutansecneics?xurb??iasrev???r&e&em?ugif??tsac??suohcirotsih?u&en?q&adac?itna!nacirema?su????õçacinumoc!elet-e-soierroc???gnirpsmlap?htab?i&lopanaidni?rap?uoltnias?xa??l&essurb?lod??mraeriflanoitan?n&a&blats?l??erdlihc?oi&snam?tacinummoc!elet-dna-stsop???äl??re&dnalf?lttes?mraf?nim?tnececneics??s&alg?erp??t&farc!dnastra??nalp?olip?ra!e&nif?vitaroced!su???su?xuaeb???u&b!muloc??cric???t&agilltrop?cejorp?dats?e&esum?kramnaidni??iorted?ne&m&elttes?norivne?piuqemraf??vnoc??oped?r&a!drib?enif?gttuts?hsiwej?kcor?n&acirema?ootrac??tamsa?yraropmetnoc??op&aes?snart?wen??ufknarf??s&a&cdaorb?octsae??ewhtuos?ilayol?nuk?r&ohnemled?uhlyram??urt???u&a&bgreb?etalpodaroloc??rmyc??w&ocsom?rn??x&esse?ineohp?nam?tas??y&a&bekaepasehc?w&etag?liar???camrahp?doc?e&hsub?l&ekreb?l&av!eniwydnarb??ort???n&dys?om??rrus?s&nreug?rejwen???golo&e&ahcra?g??motne?nh&cet?te??oz?po&rhtna?t??roh??hpargotohp?l&etalihp?imaf??m&edaca?onortsa??n&atob?yn??ps?r&a&ropmetnoc?tilim??e&diorbme?llag!tra??vocsid??lewej?nosameerf?otsih!dnaecneics?ecneics?gnivil!su??la&col?rutan??retupmoc?su??tsudnidnaecneics??spelipe?t&eicos!lacirotsih??i&nummoc?srevinu??nuoc???z&arg?iewhcs?nil?ojadab?urcatnas??моки?םילשורי????n&a!.&gro?moc?ten?ude??f?varac??c!.&ah?bh?c&a?s??d&5xq55--nx?g?s??eh?g&la0do--nx?ro??h&a?q?s??i&7a0oi--nx?h??j&b?f?t?x?z??kh?l&h?im?j??m&n?oc??n&h?l?s?y??om?qc?s&g?j??ten?ude?vog?wt?x&g?j?n?s??z&g?x??司公?絡網?络网???e&fuak?hctik?i&libommi?w??r!ednaalv??sier??g!.&ca?gro?moc?ten?ude?vog???h!.&bog?gro?lim?moc?ten?ude???i!.&c&a?in??dni?gro?lim?mrif?neg?oc?ser?t&en?opsgolb,?ude?vog??lreb??k!.&gro?ten?ude?vog???leok?m!.&cyn,gro?ude?vog???o&dnol?i&siv?t&a&cude?dnuof??curtsnoc???mrom?pq?siam??p!.&gro?oc?ten?ude?vog???reyab?s!.&gro?moc?osrep?tra?ude?v&inu?uog????t!.&dni?esnefed?gro?ltni?m&oc!nim??siruot??n&erut?if??o&fni?srep??sn&e?r??t&an?en!irga?ude??rnr??unr?vog???v!.&ca?eman?gro?htlaeh?moc?o&fni?rp??t&en?ni??ude?vog?zib???wot??o&76i4orfy--nx?a!.&bp?de?go?oc?ti?vg???b!.&bog?gro?lim?moc?t&en?ni??ude?v&og?t???olg??c!.&bew?cer?gro?lim?m&o&c?n??rif??ofni?stra?t&en?ni??ude?vog???d!.&b&ew?og??dls?gro?lim?moc?t&en?ra??ude?vog???e&c?dor??f!ni!.&e&gdelwonk-fo-l&errab,lerrab,?ht-skorg,rom-rof-ereh,?llatiswonk,p&ifles,ohbew,?ruo-rof,s&iht-skorg,ndnyd,????gn!am??hwsohw?i!.&buhtig,moc??b?r??j!.&eman?gro?hcs?lim?moc?ten?ude?vog???m!.&gro?moc?ten?ude?vog??il??n!.&a&0&b-ekhgnark--nx?c-iehsrgev--nx?g-lksedlig--nx?k-negnanvk--nx??1&p-nedragy--nx?q-&asierrs--nx?grebsnt--nx?lado-rs--nx?n&egnidl--nx?orf-rs--nx??regnayh--nx?ssofenh--nx??r-datsgrt--nx?s-ladrjts--nx?v-y&senner--nx?vrejks--nx???3g-datsobegh--nx?4&5-&dnaleprj--nx?goksnerl--nx?tednalyh--nx??6-neladnjm--nx?s-&antouvachb--nx?impouvtalm--nx??y-&agrjnevvad--nx?ikhvlaraeb--nx???7k-antouvacchb--nx?8&k-rekie-erv--nx?l-ladrua-rs--nx?m-darehsdrk--nx??a!.sg??bct-eimeuvejsemn--nx?d&do?iisevvad?lov?narts?uas??f&1-&l--nx?s--nx??2-h--nx??g&10aq0-ineve--nx?av?ev?lot?r&ajn&evvad?u??ájn&evvad?u????h?iz-lf--nx?j&ddadab?sel??k&el?hoj&sarak?šárák??iiv&ag&na&el?g??ŋ&ael?ág???ran???l&f?lahrevo?o&ms?s??sennev?t-&ilm--nx?tom--nx??u&-edr--nx?s??øms??muar?n&0-tsr--nx?2-dob--nx?5-&asir--nx?tals--nx??a&r!-i-om?f?t??t??douvsatvid?kiv?m&os?øs??n&od?ød??ra?sen?t&aouvatheig?ouv&a&c&ch&ab?áb??h&ab?áb???n??i&ag?ág??sa&mo?ttvid??án???z-rey--nx?ær&f?t???o&p-&ladr--nx?sens--nx??q-nagv--nx?r-asns--nx?s-kjks--nx?v-murb--nx?w-&anr&f--nx?t--nx??ublk--nx???ppol?q&0-t&baol--nx?soum--nx?veib--nx??x-&ipphl--nx?r&embh--nx?imph--nx???y-tinks--nx??r&f-atsr--nx?g-&an&ms--nx?nd--nx??e&drf--nx?ngs--nx??murs--nx?netl--nx?olmb--nx?sorr--nx??h-&a&lms--nx?yrf--nx??emjt--nx??i&-&lboh--nx?rsir--nx?y&d&ar--nx?na--nx??ksa--nx?lem--nx?r&ul--nx?yd--nx????stu??j-&drav--nx?rolf--nx?sdav--nx??kua?l-&drojf--nx?lares--nx??m-tlohr--nx?n-esans--nx?olf?p-sdnil--nx?s-ladrl--nx?tih?v-rvsyt--nx??s&a&ns?ons??i&ar?er&dron?r&os?øs???ár??la&g?h??mor!t??sir?uf?åns??t&koulo&nka?ŋká??la?p-raddjb--nx?r-agrjnu--nx?s&aefr&ammah?ámmáh??orf?r&o?ø???u-vreiks--nx??u&h-dnusel--nx?i-&drojfk--nx?vleslm--nx??j-ekerom--nx?k-rekrem--nx?u-&dnalr--nx?goksr--nx?sensk--nx??v-nekyr--nx?w-&k&abrd--nx?ivjg--nx??oryso--nx??y-y&dnas--nx?mrak--nx?n&art--nx?nif--nx??reva--nx??z-smort--nx??v!.sg?ledatskork?reiks??wh-antouvn--nx?x&9-dlofts--nx.aoq-relv--nx?d-nmaherk--nx?f-dnalnks--nx?h-neltloh--nx?i-drgeppo--nx?j-gve&gnal--nx?lreb--nx??m-negnilr--nx?n-drojfvk--nx??y&7-ujdaehal--nx?8-antouvig--nx?b-&dlofrs--nx?goksmr--nx?kivryr--nx?retslj--nx??e-nejsom--nx?f-y&krajb--nx?re&dni--nx?tso--nx??stivk--nx??g-regark--nx?orf?ørf??z9-drojfstb--nx??b&25-akiivagael--nx?53ay7-olousech--nx?a&iy-gv--nx?le-tl&b--nx?s--nx??n0-ydr--nx??c&0-dnal-erdns--nx?z-netot-erts--nx??g&g-regnarav-rs--nx?o-nejssendnas--nx??ju-erdils-ertsy--nx?nj-dnalh-goksrua--nx?q&q-ladsmor-go-erm--nx.&ari-yreh--nx?ednas??s-neslahsladrjts--nx???ca&4s-atsaefrmmh--nx?8m-dnusynnrb--nx?il-tl--nx?le-slg--nx?n5-rdib--nx?op-drgl--nx?uw-ynnrb--nx??d&a&qx-tggrv--nx?reh!nnivk?sd&ork?ørk??uas??ts&e&bi?kkar?llyh?nnan??g&ort?ørt??k&alf?irderf??levev?mirg?obeg&ah?æh??r&ah?ejg????barm-jdddb--nx?ie!rah?s&etivk?ladman???lof&r&os?øs??ts&ev.ednas?o.relav?ø.relåv???n&a&l&-erd&n&os?øs??ron??adroh.so?dron.&a&g5-b--nx?ri-yreh--nx??ob?y&oreh?øreh??øb??e&m!lejh??pr&oj?øj??vi??gyb?n&aks?åks??o&h-goksrua?rf??r&o?ua?ø??tros?øh-goksrua??rts!e&devt?lab?mloh???s&ellil?naitsirk?rof???u&l!os??s!d&im?lejt??e&guah?l&a?å???kkoh?lavk?naitsirk?r&af?eg&e?ie???tef?y&onnorb?ønnørb?????r&a&blavs!.sg??g&eppo?la???o&j&f&a!dniv?k?vk??die?e&dnas?kkelf??llins?r&iel?ots??s&lab?t&ab?åb??yt??å!k??ævk??les??ts??åg&eppo?lå???ureksub.sen??e&ayb-yrettn--nx?d&ar?lom?r&of?øf??år??g&gyr?nats??i&meuv&ejsem&aan?åån??sekaal??rjea??j&d&ef?oks??les??k&er&aom?åom??hgna&ark?årk??iregnir?kot!s??s&ig?uaf???l&bmab?kyb?l&av?ehtats??oh??m&it?ojt?øjt??n&arg?g&os?øs??meh?reil?te?ummok?yrb??r&dils-erts&ev?y&o?ø???ua?vod??sa&ans?åns??t&robraa?spaav??urg??f&62ats-ugsrop--nx?a&10-ujvrekkhr--nx?7k-tajjrv-attm--nx??o!.sg?h??s!.sg??v!.sg???g&5aly-yr&n--nx?v--nx??a&llor?ve&gnal?lreb???n&av!snellu??org??oks&die?m&or?ør??ner&ol?øl??r&o?ø???r&eb!adnar?edyps?s&die?elf?gnok?n&ot?øt????obspras??uahatsla?åve&gnal?lreb???h&0alu-ysm--nx?7&4ay8-akiivagg--nx?5ay7-atkoulok--nx??a!.sg???i&e&hsr&agev?ågev??rf??k&h&avlaraeb?ávlaraeb??s??lm&a?å??mpouvtal&am?ám??pph&al?ál??rrounaddleid?ssaneve?ššáneve??j&0aoq-ysgv--nx?94bawh-akhojrk--nx??k&a&b&ord?ørd??jks?lleis??iv!aklejps?l&am?evs?u??mag?nel?ojg?r&a&l?n??epok?iel?y&or?ør???s&ah?kel?om??øjg??kabene?ojsarak?ram&deh.&aoq-relv--nx?rel&av?åv??so??e&let.&ag5-b--nx?ob?øb??ra???åjks??l&a!d&anrus?d&numurb?ron??e&gnard?nte?s&meh?sin??ttin??g&is?nyl??kro?l&em?l&ejfttah?of??u&ag-ertdim?s???n&am?era?gos?i&b?nroh?r??kos?nus?oj??o-&dron?r&os?øs???ppo?r&a!l?nram??e&gne?l?v??is?o&jts?ts??u&a-&dron?r&os?øs???h??å?æl?øjts??s&e&jg?nivk?ryf??kav?mor-go-er&om.&ednas?yoreh??øm.&ednas?yøreh???uag??t&las?rajh?suan??v&l&a?e-rots??u-go-eron??yt??ksedlig?res&a?å???bib&eklof?seklyf??es!dah??h!.sg??i&m?syrt??l&ejf?ov&etsua?gnit?ksa?sdie???n!.sg??o!.sg?boh?g?h??r!.sg??å!ksedlig??øboh??m&a&rah?vk??f!.sg??h!.sg??i&e&h&dnort?rtsua?ssej??rkrejb??ksa??ol?t!.sg??u&dom?esum?r&ab?drejg?evle?os?uh?æb?øs??ttals???n&a&g&av?okssman?åv??jlis?or?r&g?rev???e&d&do&sen?ton??lah?r&agy&o?ø??ojfsam???g&iets?n&a&l&as?lab??n&avk?ævk??t&arg?ddosen??v&al?essov???i&d&ol?øl??l&ar?ær???yl??reb??iks?k&srot?y&or?ør???l&a&d&gnos?n&er?ojm?øjm??om??tloh??ug?åtloh??mmard?ojs&om?sendnas??ppolg?s&lahsladr&ojts?øjts??o??t&o&l?t-erts&ev?o?ø???roh?øl??vly&kkys?nav??yam-naj!.sg??øjs&om?sendnas???g&orf?ujb??i&dnaort?vnarg??kob?ladendua?maherk&a?å??n&it?urgsrop??orf-&dron?r&os?øs???r&aieb?evats??sfev?uaks?yrts??o&6axi-ygvtsev--nx?c,d&ob?rav??ievs?kssouf?l&m&ob?øb??ous&adna?ech&ac?áč???so!.sg???msdeks?niekotuak?r&egark?olf?y&oso?øso???s&dav?mort???p&ed?p&akdron?elk???r&a&d&dj&ab?áb??iab??jtif?luag?mah?vsyt??e&gn&a&k&iel?ro??merb?n&at?mas??rav-r&os?øs??srop?talf?v&ats?el??y&oh?øh???ivsgnok??il?jkniets?k&a&nvej?rem?s&gnir?nellu???ie-er&den?v&o?ø???ram?sa?årem??la&jf?vh??m&b&ah?áh??mahellil??nnul?ts&l&oj?øj??ul??y&o?ø???imp&ah?áh??m!.sg??osir?t!.sg??ádiáb?ævsyt?øsir??s&adnil?en&dnas?e&dga?k&ri&b?k??som??ve??me&h?jg??nroh-go-ejve?s&a?ednil?k&o?ø??of?yt?å??tsev??gv?hf?igaval?o&r&or?ør??sman??so&fen&oh?øh??m?v??uh&lem?sreka.sen??å!dnil???t&a&baol?g&aov?grav??jjr&av-attam?áv-attám??l&a&b?s??ás??soum?ts?v&eib?our???e&dnaly&oh?øh??f?s&nyt?rokomsdeks?sen??vtpiks??in&aks?áks??loh&ar?år??n!.sg??o&m&a?å??psgolb,?s!.sg?efremmah?or?ør??terdi?á&baol?ggráv?lá&b?s??soum?veib???u&b!.sg?alk?e&dna?gnir?nner??les?ælk??dra&b?eb??g&nasrop?vi?ŋásrop??j&daehal&a?á??jedub?v&arekkhar?árekkhár???ksiouf?n&diaegadvoug?taed???v&irp?lesl&am?åm???y&b&essen?nart?sebel?tsev??o&d&ar?na!s??or??gavtsev?k&rajb?sa??lem?mrak?n&art?n&if?orb???r&a&mah?n?v??e&dni?t&so?ton??va??ul?yd??s&am?enner?gav?lrak?tivk??vrejks??ø&d&ar?na!s??ør??gåvtsev?k&rajb?sa??lem?mrak?n&art?n&if?ørb???r&e&dni?t&so?tøn??va??ul?yd?æ&n?v???s&enner?gåv?tivk?åm??vrejks???á&slág?tlá?vreiks??å&gåv?h?jddådåb?lf??ø&d&ob?rav??r&egark?olf??s&dav?mort????u??o&b?f?ttat??r!.&cer?erots?gro?m&o&c?n??rif?t??ofni?stra?t&n?opsgolb,?www??ea!.&a&ac?cgd?idem??bulc!orea??ci&ffartria?taborea??e&c&alptekram?n&a&l&lievrus-ria?ubma??netniam?rusni??erefnoc???gnahcxe?mordorea?ni&gne?lria?zagam??rawtfos??gni&d&art?ilg!arap?gnah???l&dnahdnuorg?ledom??noollab?retac?sael?t&lusnoc?uhcarap??vidyks??hcraeser?ixat?l&anruoj?euf?icnuoc?ortnoc!-ciffart-ria???n&gised?oi&nu?t&a&cifitrec?ercer?gi&tsevni-tnedicca?van??i&cossa!-regnessap??valivic??redef??cudorp?neverp-tnedicca????ograc?p&ihsnoipmahc?uorg!gnikrow???r&e&dart?enigne?korb?niart?trahc??o&htua?tacude???s&citsigol?e&civres?r??krow?serp!xe??tnega??t&farcr&ia?otor??hgi&erf?l&f?orcim???liubemoh?n&atlusnoc?e&duts?m&esuma?n&iatretne?revog??piuqe????olip?ropria?si&lanruoj?tneics???w&erc?ohs??y&cnegreme?dobper?tefas????p!.&a&ca?pc??dem?gne?r&ab?uj??wal????s!.&gro?moc?ten???t!.&gro?lim?moc?ten?ude?vog??o&hp?v???ykot??p&aehc?g!.&gro?ibom?moc?ossa?ten?ude???j!.&a&bihc!.&a&bihciakoy?don?ma&him?ye&ragan?tat???r&a&bom?gan?hihci??u&agedos?kas?ustak???s&os?ufomihs??t&amihcay?iran??w&a&g&im&anah?o??omak??kihci?zustum??ihsak??y&agamak?imonihci???e&akas?nagot??i&azni?esohc?h&asa?s&abanuf?ohc???ka&to?zok??musi?orihs?r&akihabihsokoy?o&dim?tak??ukujuk??usihs??nano&hc?yk??o&d&iakustoy?ustam??hsonhot?k&a&rihs?t??iba??nihsaran?sobimanim?tas&arihsimao?imot??uhc?yihcay??u&kujno?s&ayaru?t&imik?tuf???zarasik????g&as!.&a&gas?m&a&tamah?yik??ihsak??rat?t&a&gatik?hatik??ira!ihsin????e&kaira?nimimak??i&akneg?g&aruyk?o??h&c&amo?uo??siorihs??kaznak?modukuf?ra&gonihsoy?mi???nezih?u&k&at?ohuok??s&ot?tarak?????ihs!.&a&kok?m&a&hagan?yirom??ihsakat??rabiam?wagoton??e&miharot?nokih??houyr?i&azaihsin?esok?kustakat?moihsagih??na&mihcahimo?nok??o&hsia?mag?t&asoyot?ok?tir???us&ay?t&asuk?o??????k&aso!.&a&d&awihsik?eki??k&a&noyot?s&akaayahihc?oihsagih???oadat?uziak??m&ayas!akaso??odak??r&a&bustam?wihsak??ediijuf??t&akarih?i&k?us???wag&ayen?odoyihsagih???e&son?tawanojihs??honim?i&akas?h&cugirom?s&ayabadnot?i&a&kat?t??n??oyimusihsagih???k&a&rabi?sim??ustakat??muzi?r&ijat?otamuk???nan&ak?n&ah?es???o&ay?n&a&ganihcawak?simuzi?tak??eba?ikibah?oyot??t&anim?iad?omamihs??uhc??ust&oimuzi?tes????ou&kuf!.&a&d&amay?eos??g&no?ok?usak??hiku?k&awayim?uzii??ma&kan?y&asih?im???rawak?t&a&gon?ka&h?num?t???umo??wa&g&a&kan?nay?t??ias??ko!rih???y&ihsa?usak???e&m&ay?uruk??taruk?us??i&a&nohs?raihcat??goruk?h&cukuf?s&a&gih?hukuy??in???k&a&gako?muzim??iust?o?ustani??m&anim?otihsoynihs?u??r&ogo?ugasas??usu??ne&siek?zu&b?kihc???o&gukihc?h&ak?ot?ukihc??j&ono?ukihc??kayim?nihsukihc?to?uhc??u&fiazad?gnihs?stoyot????zihs!.&a&bmetog?d&amihs?eijuf?ihsoy?omihs??kouzihs?mihsim?ra&biah?honikam??tawi?wa&g&ekak?ukik??kijuf??yimonijuf??i&a&ra?sok??hcamirom?juf?kaz&eamo?ustam??ma&nnak?ta??nukonuzi?orukuf??nohenawak?o&nosus?ti??u&stamamah?z&a&mun?wak??i!ay?i&hs&agih?in??manim??mihs????????m&a&tias!.&a&d&ihsoy?ot?usah??k&a&dih?sa??o&arihs?s???m&a&tias?y&as?o&rom?tah??ustamihsagih???i&hsagurust?jawak??uri??ni?wa&g&e&ko?man??ikot?o??k&ara?i&hsoy?mak???ru?zorokot??y&a&g&amuk?ihsok?otah??kuf??imo??ziin??e&bakusak?ogawak?sogo?ttas?zokoy??i&baraw?h&cugawak?s&oyim?ubustam???iroy?k&ato?ihs?u&k?stawi???m&akoyr?i&hsoy?juf??uziimak???naznar?o&dakas?ihsay?jnoh?n&a&go?nim??imijuf?nah?oy??r&ihsayim?otagan??t&asim!ak??igus?omatik??zak??u&bihcihc!ihsagih??sonuok?ynah????y&ak&aw!.&a&d&ira?notimak??kadih?ma&h&arihs?im??y&a&kaw?tik??oduk???ru&ustakihcan?y??sauy?wa&g&a&dira?zok??orih??konik??yok?zok??e&banat?dawi??i&garustak?jiat?mani??naniak?o&bog?nimik?t&asim?omihs&ah?uk????ugnihs???o!.&a&jos?koasak?m&ay&ako?ust??ihsayah??r&abi?ukawaihsin??wi&aka?nam???e&gakay?kaw??i&gan?h&cu&kasa?otes??sahakat??k&asim?ihsaruk??miin??n&anemuk?ezib??o&hsotas?jnihs?n&amat?imagak??ohs?uhcibik?????ot!.&a&damay?got?koakat?may&etat?ot??nahoj?riat?waki&inakan?reman???eb&ayo?oruk??i&h&asa?ciimak?sahanuf??kuzanu?m&an&i?ot??ih???nezuyn?otnan?u&hcuf?stimukuf?z&imi?ou???????ihs&o&gak!.&a&m&ayuok?ihsogak??si?yonak??e&banawak?n&at&akan?imanim??uka??tomoonihsin??i&adnesamustas?k&azarukam?oih??m&ama?uzi??usuy??nesi?o&knik?os?tomustam??uzimurat???rih!.&a&ka&n?s??m&ayukuf?i&hsorihihsagih?j&ate?imakikaso????r&a&bohs?h&ekat?im???es??tiak?wiad??e&kato?ruk??i&h&ci&akustah?mono?nihs??s&inares?oyim???manimasa?uk??negokikesnij?o&gnoh?namuk??uhcuf????uk&ot!.&a&bihci?mi&hsu&kot?stamok??m??wagakan??egihsustam?i&gum?h&coganas?soyim??kijaw?m&anim?uzia??ukihsihs??nan&a?iak??o&nati?turan????uf!.&a&batuf?m&a&to?y&enak?irok???ihs&im?ukuf??os?uko??r&aboihsatik?uganat??ta&katik?mawak?rih??w&a&g&akus?emas?uy??k&a&mat?rihs?sa??ihsi??nah??ohs???e&gnabuzia?iman?ta&d?tii???i&adnab?enet?hs&agih?iimagak??k&a&wi?zimuzi??ubay??minuk?r&ook?ustamay???nihsiat?o&g&etomo?ihsin?nan?omihs??no!duruf?rih??rihsawani?ta&may?simuzia???u&rahim?stamakawuzia?zia&ihsin?nay???????nug!.&a&bawak?doyihc?k&anna?oi&hsoy?juf?mot???m&ayakat?ustagaihsagih??n&ihsatak?nak??r&ahonagan?nak?o?u&kati?mamat???t&amun?inomihs?o??w&akubihs?iem?ohs???i&hsa&beam?yabetat??kas&akat?esi??m&akanim?uzio??ogamust?rodim??o&jonakan?n&eu?oyikust??tnihs??u&komnan?stasuk?yrik?????ran!.&a&bihsak?d&akatotamay?u!o???guraki?m&ay&atik&imak?omihs??irokotamay??oki??ra&hihsak?n??wa&geson?knet???e&kayim?ozamay?sog?ustim??i&a&rukas?wak??garustak?h&ciomihs?sinawak??jo?ka&mnak?toruk??makawak?nos?r&net?otakat?ugeh???o&d&na?oyo??gnas?jnihs?nihsoy!ihsagih??tomarawat?yrok????t&ag&amay!.&a&dihsio?k&atarihs?ourust??may&a&kan?rum??enak?onimak??rukho?ta&ga&may?nuf??hakat?kas??wa&g&ekas?orumam??ki&hsin?m??z&anabo?enoy?ot???zuy??e&agas?bonamay?dii?nihsagih?o??i&a&gan?nohs??h&asa?sinawak??nugo??o&dnet?jnihs?ynan??ukohak???iin!.&a&ga?k&ium?oagan??munou!imanim??t&a&bihs?giin??ioy??w&a&gioti?kikes?zuy??irak??yijo??e&kustim?mabust??i&aniat?hcamakot?kaz&awihsak?omuzi??m&a&gat?karum??o???n&anust?esog??o&das?ihcot?jnas?k&ihay?oym??mak?naga?ries??u&ories?steoj?????i&ka!.&a&go?k&asok?oimak??t&ago!rihcah??ika!atik???w&aki?oyk???e&mojog?natim?suranihsagih?t&ado?okoy???i&hsoyirom?magatak?naokimak??nesiad?o&hakin?jnoh!iruy??nuzak?rihson?tasi&juf?m??yjnoh??u&kobmes?oppah????o!.&a&dakatognub?m&asah?ihsemih??su?t&ekat?i&h?o????e&onokok?ustimak??i&jih?k&asinuk?ias?usu??mukust??onoognub?u&fuy?juk?ppeb?suk??????wa&ga&k!.&a&mihsoan?rihotok?waga&kihsagih?ya???emaguram?i&j&nonak?ustnez??kunas?monihcu??o&hsonot?nnam?yotim??u&st&amakat?odat??zatu????nak!.&a&dustam?kus&okoy?tarih??maz?nibe?r&a&gihsaimanim?h&esi?imagas??wa&do?guy???u&im?kamak???tikamay?wa&k&ia?oyik?umas??sijuf??yimonin??e&nokah?saya??i&akan?esiak?gusta?hsuz?kasagihc?o?ukust??o&nadah?sio?tamay?????kihsi!.&a&danihcu?gak?kihs?mijaw?t&abust?ikawak??wazanak??i&gurust?hcionon?mon?ukah??nasukah?o&anan?ton!akan???u&kohak?stamok?z&imana?us?????niko!.&a&han?m&arat?ijemuk?uru??n&e&dak?zi??no??ra&hihsin?rih??wa&kihsi?niko??yehi?zonig??e&osaru?seay??i&hsagih?jomihs?k&a&gihsi?not??ihsakot??m&a&ginuk?kihsug?maz??igo?otekat??nuga!noy???n&a&moti?timoy?wonig??i&jikan?k???o&gan?jnan?tiad&atik?imanim???u&botom?kusug&akan!atik??imot??rab&anoy?eah???????ca?d&a?e??e&im!.&a&bot?k&asustam?uzus??m&a&him?y&emak?im???ihs??nawuk?wi&em?k???e&bani?ogawak?si!imanim???i&arataw?gusim?h&asa?ciakkoy??k&a&mat?sosik?t??iat??raban??o&dat?hik?n&amuk?ihseru?o&du?mok????ust???mihe!.&a&m&a&h&ataway?iin??yustam??ij&awu?imak???taki!man???ebot?i&anoh?kasam?rabami??n&ania?egokamuk?oot??o&jias?kihcu?nustam?uhcukokihs?yi!es???u&kohik?zo????n!amihs!.&a&d&amah?ho?usam??kustay?m&a?ihsoni&hsin?ko???wakih??e&namihs?ustam??i&g&aka?usay??konikak?mikih??nannu?o&mu&kay?zi!ihsagih?uko???nawust?tasim??u&stog?yamat?????tawi!.&a&bahay?d&amay?on??koirom?t&a&honat?katnezukir??imus??w&as&ijuf?uzim??ihs???e&hon&i&hci?n??uk??tawi??i&a&duf?murak?wak??h&custo?si&amak?ukuzihs???j&oboj?uk??k&a&m&anah?uzuk??sagenak??esonihci??m&akatik?uzia&rih?wi????o&kayim?no&rih?t??tanufo??uhso????gl?i&g&ayim!.&a&dukak?m&a&goihs?kihs??ihsustam!ihsagih??un&awi?nesek???r&awago?iho??ta&bihs?rum??w&a&gano?kuruf??iat??y&imot?ukaw???e&mot?nimes??i&hsiorihs?ka&monihsi?s&awak?o???mak?r&ataw?o&muram?tan????o&az?jagat?t&asim?omamay???u&fir?k&irnasimanim?uhsakihcihs?????ihcot!.&a&g&a&h?kihsa??ust??kom?m&ay&o?usarak??unak??r&a&boihsusan?watho??iho?ukas??t&akihsin?iay??wa&konimak?zenakat??y&imonustu?oihs???e&iiju?kustomihs?nufawi??i&akihci?g&etom?ihcot?on???o&k&ihsam?kin??nas?sioruk?tab??u&bim?san?????h&c&ia!.&a&dnah?m&a!h&akat?im??yuni??ihs&ibot?ust???r&a&hat?tihs??ik?u&ihsagih?kawi???t&ihc?o&k?yot???wa&koyot?zani??yi&monihci?rak???e&inak?k&aoyot?usa??manokot?noyot??i&a&gusak?kot?sia??eot?h&asairawo?cugo?s&ahoyot?oyim???k&a&mok?zako??ihssi??motay?rogamag??n&an&ikeh?ok??ihssin??o&got?ihsin?jna?rihsnihs?suf?tes??u&bo?raho?s&oyik?takihs??yrihc?zah????ok!.&a&dusay?kadih?mayotom?r&ah&im?usuy??umakan??sot!ihsin??wa&g&atik?odoyin??k&as?o????i&esieg?hco!k??jamu?k&a!sus??usto??ma&gak?k??rahan??o&mukus?n&i?ust!ihsagih???torum?yot!o???u&koknan?zimihsasot????ugamay!.&a&m&ayukot?ihso??toyot??e&bu?subat??i&gah?kesonomihs?nukawi?rakih??nanuhs?otagan?u&ba?foh?otim?stamaduk?uy?????sanamay!.&a&dihsoyijuf?mayabat?r&ahoneu?ustakihsin??w&a&k&ayah?ijuf??suran??ohs???egusok?i&ak?h&cimakan?s&anamay?od???k&asarin?u&feuf?sto????o&k&akanamay?ihcugawakijuf??nihso?t&asimawakihci?ukoh??uhc??spla-imanim?u&b&nan?onim??fok?hsok?rust?????ka&rabi!.&a&bukust?gok?kan!ihcatih??m&a&sak?timo?wi??ihsak?ustomihs??ni?r&a&hihcu?way??u&agimusak?ihcust???t&ag&amay?eman??oihcatih??w&ag&arukas?o??os??yi&moihcatih?rom???e&bomot?dirot?not?tadomihs??i&a&k&as?ot??rao??esukihc?gahakat?h&asa?catih??k&a&rabi?saguyr??ihsani?uy??ma?rukustamat??o&dnab?giad?him?kati?rihsijuf?soj?t&asorihs?im??yihcay??u&fius?kihsu?simak????sagan!.&a&m&abo?ihsust??natawak?r&abamihs?u&mo?ustam???wijihc?yahasi??i&akias?hies?k&asagan?i??masah??neznu?o&besas?darih?t&eso?og!imaknihs????ust&igot?onihcuk?uf????zayim!.&a&biihs?guyh?k&oebon?ustorom??mihsuk?r&emihsin?uatik??ta&katik?mim??wag&atik?odak??ya??e&banakat?sakog??i&hsayabok?kaza&kat?yim??m&animawak?ot&inuk?nihs????nanihcin?o&j&ik?onokayim??n&ibe?ust??tias??urahakat????ro&moa!.&a&dawot?turust?wasim??e&hon&ihc&ah?ihs??nas?og?ukor??sario??i&anarih?ganayati?hsioruk?jehon?kasorih?makihsah?nawo?r&amodakan?omoa???o&gnihs?kkat??u&ragust?stum????ttot!.&a&r&ahawak?uotok??sa&kaw?sim???egok?irottot?nanihcin?o&ganoy?nih?tanimiakas??u&bnan?z&ay?ihc??????ukuf!.&a&deki?gurust?ma&bo?h&akat?im??yustak??sakaw??eabas?i&akas?ho?jiehie?ukuf??nezihce!imanim??ono????o&c?diakkoh!.&a&deki?gakihset?hcebihs?k&adih?u&fib?narihs???m&ayiruk?hot?ihs&orihatik?ukuf??oras?usta??r&ib&a!ka??o?uruf??ozo?u&gakihsagih?oyot???sakim?ta&gikust?mun??w&a&ga&k&an?uf??nus!imak???k&aru?i&h&asa?sagih??kat?mak??omihs?um??zimawi??ine?oyk??yot??e&a&mustam?nan??b&a&kihs?yak??o&noroh?to???ian?k&ihsam?ufoto??nakami?ppoko!ihsin??sotihc?tad!okah??uonikat??i&a&bib?mokamot?n&a&k&kaw?oroh??wi??eomak?ihsatu?okik?usta&moruk?sakan????eib?h&c&ioy?u&bmek?irihs???s&ase?ekka?oknar?uesom???jufirihsir?k&amamihs?i&at?n???m&atik?otoyot??oa&kihs?rihs??r&a&hs?kihsi?mot??ihs&aba?ir??otarib???n&a&hctuk?rorum?se?tokahs??uber??o&kayot?m&ire?ukay??naruf!ima&k?nim???orih?r&ih&ibo?suk??o&bah?h&i&b?hsimak??sa??pnan?yan??umen??t&asoyik?eko?ukoh???u&bassa?kotnihs?m&assaw?uo??pp&akiin?en&ioto?nuk??ip??rato?s&akat?t&eb&e?i&a?hs!a??robon??m&e?o&m?takan???no&h?tamah??o&mik?s?t??u&kir?ppihc?st???onihsnihs?ufuras??uaru??yru!koh??zimihs!ok?????g!oyh!.&a&bmat?dnas?gusak?k&at?o&oyot?y??uzarakat??m&ayasas?irah??wa&g&ani?okak??k&i&hci?mak??oy???yi&hsa?monihsin???i&asak?hs&aka?i&at?nawak???j&awa!imanim??emih??k&a&goa?s&agama?ukuf??wihsin??i&hsog?m???mati?oia?rogimak??n&annas?esnonihs??o&gasa!kat??ka?n&ikat?o?ustat??rihsay?sihs?tomus?yas??u&bay?gnihs?????nagan!.&a&bukah?d&a&w?yim??e&ki?u??ii??k&a&s&ay?uki??zus??ihsoo?ousay??m&ay&akat?ii??i&hsukufosik?jii??ukihc??n&i!hsetat??uzii??r&ah?ugot??saim?t&agamay?oyim??w&a&g&a&kan?n??o??kustam?ziurak??onim!imanim??u&koo?s!omihs????ya&ko?rih???e&akas?nagamok?subo??i&gakat?h&asa?c&a!mo!nanihs???uonamay??sukagot??k&a&kas?mimanim?to??ia&atik?imanim??oa?uzihcom??m&akawak?ijuf?o!t???r&ato?ijoihs?omakat???n&ana?esnoawazon??o&hukas?n&a&gan?kan??i&hc?muza??ustat??romok?si&gan?k??tomustam??u&k&as?ohukihc??stamega????to&mamuk!.&a&gamay?mihsak?rahihsin?s&ok?ukama!imak???tamanim??enufim?i&h&cukik?soyotih??k&ihsam?u??nugo!imanim??romakat??o&ara?rihsustay?sa?t&amay?om&amuk?us??u!koyg???yohc??u&sagan?zo????yk!.&a&bmatoyk?k&ies?oemak?uzaw??mayi&h&cukuf?sagih??muk??nihsamay?rawatiju?t&away?ik???e&ba&nat!oyk??ya??di?ni??i&ju?kazamayo?manim??natnan?o&gnatoyk?kum?mak?rihsamayimanim?y&gakan?ka&koagan?s??oj???u&ruziam?z&ayim?ik??????ykot!.&a&d&i&hcam?mus??oyihc??k&atim?ihsustak??m&a&t!uko??yarumihsa&gih?sum???i&hs&agoa?ika?o!t??uzuok??ren???r&a&honih?wasago??iadok?umah??ssuf?t&ik?o??wa&g&anihs?ode??k&ara?ihcat???y&agates?ubihs???e&amok?donih?m&o?urukihsagih??soyik??i&enagok?gani?h&ca&da?tinuk??sabati??j&nubukok?oihcah??manigus??o&huzim?jihcah?n&akan?ih!sasum??urika??rugem?t&a&mayihsagih?nim??iat?ok??uhc?yknub??u&fohc?hcuf?kujnihs?????r&g?o??topsgolb,ufig!.&a&d&eki?ih??kimot?m&ayakat?ihsah??ne?raha&gi&kes?makak??sak??taga&may?tik??wa&g&ibi?ustakan??karihs!ihsagih????e&katim?uawak??i&gohakas?hc&apna?uonaw??k&ago?es?ot??m&anuzim?ijat??nak?urat??nanig?o&dog?jug?makonim?nim?roy?sihcih??u&fig?s&otom?t&amasak?oay????????k!.&art?gro?moc?per?ude?vog???m!ac??nd?o&g?hpih?oc??t??q&a?g?i!.&gro?lim?moc?ten?ude?vog???m??r&a!.&bog?gro?lim?moc!.topsgolb,?rut?t&en?ni??ude??4d5a4prebgm--nx?b?los?tsuen??b!.&21g?b!mi??c&er?sp?te??d&em?mb?n&f?i??rt??f&gg?ni??g&el?l&s?z??n&c?e??ol&b?f?v??pp?ro??i&kiw?sp?te?xat??l&el?im?sq??m&a?da?f?ic?o&c!.topsgolb,?n???nce?o&ce?do?et?i&b?dar??rp?ta??p&m!e?t??ooc?se??qra?r&af?ga?oj?tn?ut??su&j?m??t&am?e&n?v??nc?o&f?n??ra?sf??ude?v&da?og?rs?t????c!.&as?ca?de?if?o&c?g??ro???e&e&b?rac??t&nec?upmoc???f!.&aterg?cidessa?drp?e&citsuj-reissiuh?rianiretev?sserp??i&cc?rgabmahc??m&o&c?n??t??n&eicamrahp?icedem??ossa?se&lbatpmoc-strepxe?riaton?tsitned-sneigrurihc?uova??t&acova?opsgolb,r&epxe-ertemoeg?op!orea????vuog??avc7ylqbgm--nx??g!.&gro?moc?t&en?opsgolb,?ude?vog???h!.&eman?mo&c?rf??zi??ur??i!.&a&61f4a3abgm--nx?rf4a3abgm--nx??ca?di?gro?hcs?oc?ten?vog?نار&يا?یا???aper??k!.&c&a?s??e&n?p?r??gk?iggnoeyg?kub&gn&oeyg?uhc??noej??l&im?uoes??man&gn&oeyg?uhc??noej??n&as&lu?ub??o&e&hcni?jead??wgnag???o&c?g??ro?s&e?h?m??topsgolb,u&gead?j&ej?gnawg?????l!.&gro?moc?ten?ude?vog???m!.&topsgolb,vog???n!.&gro?moc?ofni?ten?ude?vog?zib???otca?p!.&alsi?ca?eman?forp?gro?moc?o&fni?rp??t&en?se??ude?vog?zib???s?t.cn.vog?ubad??s&8sqif--nx?9zqif--nx?a!.vog?gev?lliv?mtsirhc??b!.&gro?moc?ten?ude?vog??oj??ci&hparg?p??d&nomaid?rac??e!.&bog?gro?mo&c!.topsgolb,?n??ude??civres?d&d2bgm--nx?oc??i&lppus?rtsudni?treporp??jaiv?l&cycrotom?gnis??moh?ohs?picer?rut&cip?nev??si&rpretne?urc??taicossa?vig??g!nidloh??h5c822qif--nx?i!.&ekacpuc,gro?moc?t&en?ni??ude?vog??rap??k&cor?hxda08--nx?row??l!.&gro?oc??atner?essurb?oot??m!.&gro?moc?ten?ude?vog??etsys??n&agorf?ia&grab?mod??oit&acav?cudorp?ulos???o&dnoc?t&ohp?ua???p!.&ces?gro?moc?olp?ten?ude?vog??it??r!.&ca?gro?ni?oc?ude?vog??atiug?e&dliub?erac?ntrap??otcartnoc??s&alg?en&isub?tif???t&h&cay?gilf??neve?rap??u!.&a&c!.&21k?bil?cc???g!.&21k?bil?cc???i!.&21k?bil?cc???l!.&21k?bil?cc???m!.&21k!.&hcorap?rthc?tvp???bil?cc???p!.&21k?bil?cc???si?v!.&21k?bil?cc???w!.&21k?bil?cc????c&d!.&21k?bil?cc???n!.&21k?bil?cc???s!.&21k?bil?cc????d&ef?i!.&21k?bil?cc???m!.&21k?bil?cc???n!.&21k?bil?cc???s!.&bil?cc????e&d!.&21k?bil?cc???las-4-&dnal,ffuts,?m!.&21k?bil?cc???n!.&21k?bil?cc????h&n!.&21k?bil?cc???o!.&21k?bil?cc????i&h!.&bil?cc???m!.&21k?bil?cc???nd?r!.&21k?bil?cc???v!.&21k?bil?cc???w!.&21k?bil?cc????jn!.&21k?bil?cc???k&a!.&21k?bil?cc???o!.&21k?bil?cc????l&a!.&21k?bil?cc???f!.&21k?bil?cc???i!.&21k?bil?cc????mn!.&21k?bil?cc???n&i!.&21k?bil?cc???m!.&21k?bil?cc???sn?t!.&21k?bil?cc????o&c!.&21k?bil?cc???m!.&21k?bil?cc????r&a!.&21k?bil?cc???o!.&21k?bil?cc???p!.&21k?bil?cc????s&a!.&21k?bil?cc???dik?k!.&21k?bil?cc???m!.&21k?bil?cc????t&c!.&21k?bil?cc???m!.&21k?bil?cc???u!.&21k?bil?cc???v!.&21k?bil?cc????ug!.&21k?bil?cc???v&n!.&21k?bil?cc???w!.cc???xt!.&21k?bil?cc???y&b-si,k!.&21k?bil?cc???n!.&21k?bil?cc???w!.&21k?bil?cc????za!.&21k?bil?cc????ah?e??w!.&gro?moc?s&ndnyd,tepym,?ten?ude?vog??eiver??yot??t&0srzc--nx?a!.&ca?o&c!.topsgolb,?fni,?ro?v&g?irp,?zib,?c?e?rcomed??b!.&gro?moc?ten?ude?vog???e!em?kram?n!.&a&l-morf,z,?bg,dnab-eht-ni,e&ht-no-eciffo,libom-eruza,mohtanyd,nozdop,rehurht,s,tis-repparcs,?fehc-a-si,k&eeg-a&-si,si,?u,?ni,o&c-morf,jodsnd,?p&i&emoh,fles,?j,mac-dnab-ta,o&-oidar-mah,hbew,?paduolc,tfe&moh,vres,??s&aila&nyd,snd,?bbevres,e&suohsyub,tisbeweruza,?ndgolb,sa-skcik,?t&enretnifodne,i-&ekorb,s&eod,lles,teg,??norfduolc,sixetnod,?uh,x&inuemoh,unilemoh,?y&ltsaf.&dorp.&a,labolg,?lss.&a,b,labolg,??n-morf,?za-morf,??v??fig?g!.&bog?dni?gro?lim?moc?ten?ude???h!.&dem?gro?l&er?op??m&oc?rif??o&fni?rp?s&rep?sa???po&hs?oc??t&en?luda?ra??ude?vuog???i!.&a&at?b?c!cul??dv?i&blo&-oipmet?oipmet??cserb?drabmol?g&gof?urep??l&gup?i&cis?me&-oigger?oigger???uig&-&aizenev&-iluirf?iluirf??ev&-iluirf?iluirf??v&-iluirf?iluirf???aizenev&-iluirf?iluirf??ev&-iluirf?iluirf??v&-iluirf?iluirf????n&a&brev?cul?pmac?tac??idras?obrac&-saiselgi?saiselgi??resi??otsip?r&b&alac!-oigger?oigger??mu??dna&-&attelrab-inart?inart-attelrab??attelrabinart?inartattelrab?ssela??epmi?ugil??tnelav&-obiv?obiv??vap?z&e&nev?ps&-al?al???irog???l&iuqa!l??leib??m&or?rap??n!acsot?e&dom?is?sec&-ilrof?ilrof???g&amor&-ailime?ailime??edras?olob??i&ssem?tal??ne!var??o&cna?merc?rev?vas???oneg?p?r!a&csep?rr&ac&-assam?assam??ef??von??etam?tsailgo!-lled?lled???s!ip?sam&-ararrac?ararrac??u&caris?gar???t!a&cilisab?recam??resac?soa!-&d&-&ellav?lav??ellav?lav??ellav??d&-&ellav?lav??ellav?lav??ellav??te&lrab&-&airdna-inart?inart-airdna??airdnainart?inartairdna??ssinatlac???udap?v!o&dap?neg?tnam???zn&airb&-a&lled-e-aznom?znom??a&lledeaznom?znom??eaznom??e&c&aip?iv??soc?top??om???b&c?m!u??v??c&f?is?l?m?p?r?v??d&p?u??e&c!cel?inev?nerolf??f?g!ida&-&a&-onitnert?onitnert??otla!-onitnert?onitnert???a&-onitnert?onitnert??otla!-onitnert?onitnert????hcram?l?m!or??n&idu?o&n&edrop?isorf??torc???p?r?s&erav?ilom??t!nomeip?s&eirt?oa!-eellav?eellav????v?znerif??g&a?b?f?il?o?p?r?up?vf??hc?i&b?c?dol?f?l!lecrev?opan?rof&-anesec?anesec???m?n&a&part?rt&-attelrab-airdna?attelrabairdna???imir?ret??p?r!a&b?ilgac?ssas???s!idnirb??t&ei&hc?r??sa??v??l&a!c??b?c?o&m?rit&-&d&eus&-onitnert?onitnert??us&-onitnert?onitnert???s&-onitnert?onitnert???d&eus!-onitnert?onitnert??us&-onitnert?onitnert???s&-onitnert?onitnert?????m&ac?f?i?ol?r??n&a!lim?slab??b?c?e!v?zob??irut?m!p??p?r?t??o&a!v??b!retiv??c!cel??enuc?g!ivor??i&dem&-onadipmac?onadipmac??pmet&-aiblo?aiblo??rdnos?zal??l?m!a&greb?ret??oc?re&f?lap???n!a&dipmac&-oidem?oidem??lim?tsiro?zlob??ecip&-ilocsa?ilocsa??i&bru&-orasep?orasep??lleva?rot?tnert??r&elas?ovil??ulleb??p?r!a&sep&-onibru?onibru??znatac??oun??s!ivert?sabopmac??t!arp?e&nev?ssorg??n&arat?e&girga?rt?veneb????zz&era?urba???p&a?s?t??qa?r&a!m?s??b!a??c?f?g?k?me?o?p?s?t?v??s&a&b?iselgi&-ainobrac?ainobrac???b?c?elpan?i?m?ot?s?t?v??t&a?b?c?l?m?nomdeip?o!psgolb,?p?v??u&de?l?n?p??v&a?og?p?s?t?v??y&drabmol?ellav&-atsoa?atsoa??licis?nacsut??z&al?b?c?p????l!.vog??m!.&gro?moc?ten?ude???n&e&g?m&eganam?piuqe???i!.ue??uocsid??ocs?p!.&emon?gro?lbup?moc?t&en?ni?opsgolb,?ude?vog???r&epxe?op&er?pus???s!.&adaxiabme?e&motoas?picnirp?rots??gro?lim?moc?o&c?dalusnoc??ten?ude?vog??e&b?padub?r??irolf?op??t!.&eman?gro?ibom?levart?m&oc?uesum??o&c?fni?r&ea?p???pooc?sboj?t&en?ni??ude?vog?zib???y?ztej??u&a!.&a&s?w??civ?d&i?lq??fnoc?gro?moc!.topsgolb,?nsa?o&fni?risc??sat?t&ca?en?n??ude!.&a&s?w??civ?dlq?sat?t&ca?n??wsn???vog!.&a&s?w??civ?dlq?sat?tca???wsn?zo???c!.&fni?gro?moc?ten?ude?vog???de?e?h!.&0002?a&citore?idem?kitore??edszot?gro?ilus?letoh?m&alker?lif?t?urof??naltagni?o&c?ediv?fni?levynok?nisac??pohs?rarga?s&a&kal?zatu??emag?wen??t&lob?opsgolb,rops??virp?xe&s?zs??ytic?zsagoj??os??l?m!.&ca?gro?moc?oc?ro?ten?vog???n!.&eni&esrem,m,?tenkcahs,?em??r!.&a&dgolov?gulak?i&hsavuhc?kymlak?lerak?rikhsab?ssakahk?t&ayrub?rumdu?ukay??vodrom??k&dohkan?nidud?t&a&hcmak?yv??ingam?okuhc???l&o-rakhsoj?ut??mortsok?nalap?ramas?tihc?vut?yegyda?znep??bps?ca?d&arg&oglov?z??nr?orogleb??e&du-nalu?niram??g&bc?ersom?ineok?r&o?ub&-e?n&ero?iretakey?????hzenorov?i&a&natsuk?tla??mok?ram??k&ihclan?otsovidalv?s&l&aru-k?egnahkra?iron??m!o!t???n!a&mrum?yrb??eloms?i&baylehc?lahkas-onhzuy??odv??r&ayonsark?ib&isovon?mis??ogitayp?u&k?ma???t!epil?ukri??v&ehzi?o&rabahk?stbur?????l&a&kiab?ma&j?y???e&-iram?hc??im?o&kso?porvats?yro??valsoray??m&du?o&c?t??rep??n&a&buk?dagam?gruk?hkartsa?rzys?ts&egad?ratat??za&k?yr???emuyt?ilahkas?rv?ystirast??ovo&navi?remek??pp?r&aj?evt?hck?i&b?midalv??uma??s&itym?mk?sabzuk??t&en?ni?s&aeraf?et??ugrus??ude?v&hk?o&bmat?g?ksp?n!n??rik?taras??ts??wmc?ynzorg?z&akvakidalv?kn?ns?tp???ug??s?v?ykuyr??v&b?c!.topsgolb,?ih?l!.&di?fnoc?gro?lim?moc?nsa?ten?ude?vog???m!.&eman?gro?lim?m&oc?uesum??o&fni?r&ea?p???pooc?t&en?ni??ude?vog?zib???o&g?m??s!.&bog?der?gro?moc?ude???t!.&bew-eht-no,naht-&esrow,retteb,?sndnyd,??uqhv--nx??w&a!.moc??b!.&gro?oc???c!.&gro?moc?ten?ude???en?g?m!.&ca?gro?m&oc?uesum??oc?pooc?t&en?ni??ude?vog?zib???o&csom?h??p!.&de?en?o&c?g??ro?ualeb???r!.&ca?lim?moc?oc?t&en?ni??ude?v&og?uog???n??t!.&a46oa0fz--nx?b&82wrzc--nx?ulc??emag?gro?lim?moc?t&en?opsgolb,?ude?v&di?og?ta0cu--nx??zibe?業商?織組?路網????x&a?c!.&hta,vog???m!.&bog?gro?moc?t&en?opsgolb,?ude??ma2ibgy--nx??s!.vog??xx??y&4punu--nx?ad!i&loh?rfkcalb??ot??b!.&fo?lim?moc?vog???cnega?g!.&moc?oc?ten??olonhcet??hpargotohp?k!.&gro?moc?ten?ude?vog???l!.&clp?d&em?i??gro?hcs?moc?ten?ude?vog??ppus??m!.&eman?gro?lim?moc?ten?ude?vog??edaca?ra??napmoc?os?p!.&gro?lim?moc?pooc?ten?ude?vog???r&ellag?otcerid?tnuoc?uxul??s!.&gro?lim?moc?ten?ude?vog???ti&nummoc?srevinu??u!.&bug?gro?lim?moc?ten?ude???van?xes??z&a!.&eman?gro?lim?moc?o&fni?rp??pp?t&en?ni??ude?vog?zib???b!.&az,gro?moc?ten?ude?vog???c!.topsgolb,?d!.&gro?lop?moc?ossa?t&en?ra??ude?vog???ib!.&e&ht-rof,mos-rof,rom-rof,?p&ifles,ohbew,?retteb-rof,sndnyd,??k!.&gro?lim?moc?ten?ude?vog???n.oc.topsgolb,s!.&ca?gro?oc???t!.&c&a?s??e&m?n??ibom?l&etoh?im??o&c?fni?g??ro?vt???u!.&gro?moc?oc?ten???yx?zub??авксом?брс?гро?зақ?итед?н&йално?ом??рку?сур?тйас?фр?اي&روس?سيلم??برغملا?ة&كبش?ي&دوعسلا?روس??یدوعسلا??ت&اراما?راھب??ر&ئازجلا?ازاب?صم?طق??سنوت?عقوم?ن&ا&ر&يا?یا??مع??درالا?ميلا?يطسلف??هيدوعسلا?ۃیدوعسلا?तराभ?नठगंस?তরাভ?ালংাব?ਤਰਾਭ?તરાભ?ாயித்நஇ?ைக்ஙலஇ?்ரூப்பக்ஙிச?్తరాభ?ාකංල?ยทไ?ეგ?なんみ?业企?东广?你爱我?信中?务政?动移?卦八?司公?团集?国中?國中?址网?坡加新?城商?山佛?店商?府政?戏游?机手?构机!织组??标商?港香?湾台?灣&台?臺??界世?益公?线在?络网?网文中?국한?성삼??");]
[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, + * @since 11.0, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, + * @since 11.0, +++ b/guava-tests/test/com/google/common/reflect/ImmutableTypeToInstanceMapTest.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, + * @since 11.0, +++ b/guava-tests/test/com/google/common/reflect/ImmutableTypeToInstanceMapTest.java, +++ b/guava-tests/test/com/google/common/reflect/MutableTypeToInstanceMapTest.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, + * @since 11.0, +++ b/guava-tests/test/com/google/common/reflect/ImmutableTypeToInstanceMapTest.java, +++ b/guava-tests/test/com/google/common/reflect/MutableTypeToInstanceMapTest.java, +++ b/guava/src/com/google/common/collect/ImmutableListMultimap.java, + * @since 11.0]
[+++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, + if (allowsSelfLoops()) {, + // Remove any potential self-loop first so we won't get CME while removing incident edges., + }]
[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +import com.google.common.util.concurrent.testing.TestingExecutors;, +import java.util.concurrent.ScheduledExecutorService;, + public void testTimeout() {, + // Create a service whose executor will never run its commands, + Service service = new AbstractExecutionThreadService() {, + @Override protected void run() throws Exception {}, +, + @Override protected ScheduledExecutorService executor() {, + return TestingExecutors.noOpScheduledExecutor();, + }, +, + @Override protected String serviceName() {, + return "Foo";, + }, + };, + try {, + service.startAsync().awaitRunning(1, TimeUnit.MILLISECONDS);, + fail("Expected timeout");, + } catch (TimeoutException e) {, + assertThat(e.getMessage()), + .isEqualTo("Timed out waiting for Foo [STARTING] to reach the RUNNING state.");, + },
[+++ b/android/guava/src/com/google/common/reflect/Types.java, +import java.util.Map;, + if (ownerType != null && JavaVersion.CURRENT.jdkTypeDuplicatesOwnerName()) {, + // TODO(benyu): Once behavior is the same for all Java versions we support, delete this., + },, + JAVA9 {, + @Override, + Type newArrayType(Type componentType) {, + return JAVA8.newArrayType(componentType);, + }, +, + @Override, + Type usedInGenericType(Type type) {, + return JAVA8.usedInGenericType(type);, + }, +, + @Override, + String typeName(Type type) {, + return JAVA8.typeName(type);, + }, +, + @Override, + boolean jdkTypeDuplicatesOwnerName() {, + return false;, + }, + if (new TypeCapture<Map.Entry<String, int[][]>>() {}.capture(), + .toString(), + .contains("java.util.Map.java.util.Map")) {, + } else {, +
[+++ b/guava/src/com/google/common/reflect/AbstractInvocationHandler.java, + * {@link Object#hashCode} and {@link Object#toString}. For example: <pre>, + * class Unsupported extends AbstractInvocationHandler {, + * @Override protected Object handleInvocation(Object proxy, Method method, Object[] args) {, + * throw new UnsupportedOperationException();, + * }, + * }, + *, + * CharSequence unsupported = Reflection.newProxy(CharSequence.class, new Unsupported());, + * </pre>]
[+++ b/android/guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java, + private SimpleTimeLimiter(ExecutorService executor) {, +++ b/android/guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java, + private SimpleTimeLimiter(ExecutorService executor) {, +++ b/guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java, + private SimpleTimeLimiter(ExecutorService executor) {]
[+++ b/guava-tests/test/com/google/common/io/MoreFilesFileTraverserTest.java, +import com.google.common.jimfs.Configuration;, +import com.google.common.jimfs.Jimfs;, +import java.nio.file.Files;, + rootDir = Jimfs.newFileSystem(Configuration.unix()).getPath("/tmp");, + Files.createDirectory(rootDir);, + rootDir.getFileSystem().close();, + private Path newDir(String name) throws IOException {, + Files.createDirectory(dir);, + MoreFiles.touch(file);]
[+++ b/guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java, + TestContainerGenerator<Map<K, V>, Entry<K, V>> generator = mapGenerator.getInnerGenerator();, + if (generator instanceof TestSortedMapGenerator, + && ((TestSortedMapGenerator<K, V>) generator).create().keySet() instanceof SortedSet) {, +++ b/guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java, + TestContainerGenerator<Map<K, V>, Entry<K, V>> generator = mapGenerator.getInnerGenerator();, + if (generator instanceof TestSortedMapGenerator, + && ((TestSortedMapGenerator<K, V>) generator).create().keySet() instanceof SortedSet) {, +++ b/guava-testlib/src/com/google/common/collect/testing/SortedMapTestSuiteBuilder.java, + @Override protected SetTestSuiteBuilder<K> createDerivedKeySetSuite(, + return keySetGenerator instanceof TestSortedSetGenerator, + ? SortedSetTestSuiteBuilder.using((TestSortedSetGenerator<K>) keySetGenerator), + : SetTestSuiteBuilder.using(keySetGenerator);]
[+++ b/android/guava-tests/test/com/google/common/collect/RangeTest.java, + public void testGap_overlapping() {, + Range<Integer> range = Range.closedOpen(3, 5);, +, + try {, + range.gap(Range.closed(4, 6));, + fail();, + } catch (IllegalArgumentException expected) {, + }, + try {, + range.gap(Range.closed(2, 4));, + fail();, + } catch (IllegalArgumentException expected) {, + }, + try {, + range.gap(Range.closed(2, 3));, + fail();, + } catch (IllegalArgumentException expected) {, + }, + }, +, + public void testGap_connectedAdjacentYieldsEmpty() {, + Range<Integer> range = Range.open(3, 4);, +, + assertEquals(Range.closedOpen(4, 4), range.gap(Range.atLeast(4)));, + assertEquals(Range.openClosed(3, 3), range.gap(Range.atMost(3)));, + }, +, + public void testGap_general() {, + Range<Integer> openRange = Range.open(4, 8);,
[+++ b/guava-gwt/test-super/com/google/common/net/super/com/google/common/net/MediaTypeTest.java, +++ b/guava-gwt/test-super/com/google/common/net/super/com/google/common/net/MediaTypeTest.java, +++ b/guava-tests/test/com/google/common/net/MediaTypeTest.java]
[+++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +++ b/android/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, + return HashCode.fromBytes(Arrays.copyOfRange(input, off, off + len));, +++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +++ b/android/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, + return HashCode.fromBytes(Arrays.copyOfRange(input, off, off + len));, +++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java, +import java.nio.ByteBuffer;, + sink.putBytes(value, off, len);, + }, + }, + },, + PUT_BYTE_BUFFER() {, + @Override, + void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, + byte[] value = new byte[random.nextInt(128)];, + random.nextBytes(value);, + int pos = random.nextInt(value.length + 1);, + int limit = pos + random.nextInt(value.length - pos + 1);, + for (PrimitiveSink sink : sinks) {, + ByteBuffer buffer = ByteBuffer.wrap(value);, + buffer.position(pos);, + buffer.limit(limit);, + sink.putBytes(buffer);, + assertEquals(limit, buffer.limit());,
[+++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, + *, + * BaseEncoding.base32().encode("foo".getBytes(Charsets.US_ASCII))}</pre>, + * byte[] decoded = BaseEncoding.base32().decode("MZXW6===");}</pre>, + * <p>...returns the ASCII bytes of the string {@code "foo"}., + * with modified behavior:, + * <pre> {@code, + * BaseEncoding.base16().lowerCase().decode("deadbeef");}</pre>, + * <pre> {@code, + * return hex.decode("deadbeef"); // throws an IllegalArgumentException}</pre>, +++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, + *, + * BaseEncoding.base32().encode("foo".getBytes(Charsets.US_ASCII))}</pre>, + * byte[] decoded = BaseEncoding.base32().decode("MZXW6===");}</pre>, + * <p>...returns the ASCII bytes of the string {@code "foo"}., + * with modified behavior:, + * <pre> {@code, + * BaseEncoding.base16().lowerCase().decode("deadbeef");}</pre>, + * <pre> {@code, + * return hex.decode("deadbeef"); // throws an IllegalArgumentException}</pre>, +++ b/guava-testlib/src/com/google/common/testing/GcFinalization.java, +
[+++ /dev/null, +++ /dev/null, +++ b/guava-tests/test/com/google/common/eventbus/EventSubscriberTest.java, +/*, + * Copyright (C) 2007 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.,
[+++ b/guava-tests/test/com/google/common/io/FilesSimplifyPathTest.java, + public void testSimplifyEmptyString() {, + assertEquals(".", simplifyPath(""));, + public void testSimplifyDot() {, + assertEquals(".", simplifyPath("."));, + }, + , + public void testSimplifyWhiteSpace() {, +++ b/guava-tests/test/com/google/common/io/FilesSimplifyPathTest.java, + public void testSimplifyEmptyString() {, + assertEquals(".", simplifyPath(""));, + public void testSimplifyDot() {, + assertEquals(".", simplifyPath("."));, + }, + , + public void testSimplifyWhiteSpace() {, +++ b/guava/src/com/google/common/io/Files.java, + } else if ("".equals(result)) {, + result = ".";]
[+++ /dev/null, +++ /dev/null, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, + static final ImmutableList<Object> EMPTY = , + new RegularImmutableList<Object>(Collections.emptyList());, + , + return (ImmutableList<E>) EMPTY;, +++ /dev/null, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, + static final ImmutableList<Object> EMPTY = , + new RegularImmutableList<Object>(Collections.emptyList());, + , + return (ImmutableList<E>) EMPTY;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, + Preconditions.checkPositionIndex(index, length);, + if (length == 0) {, + return emptyListIterator();, + }, +++ /dev/null, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, + static final ImmutableList<Object> EMPTY = , + new RegularImmutableList<Object>(Collections.emptyList());, + , + return (ImmutableList<E>) EMPTY;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, + Preconditions.checkPositionIndex(index, length);, + if (length == 0) {, + return emptyListIterator();, + }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, + // TODO(user):
[+++ b/guava-testlib/src/com/google/common/util/concurrent/testing/SameThreadScheduledExecutorService.java, +/*, + * Copyright (C) 2009 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the
[+++ b/android/guava/src/com/google/common/base/Throwables.java, + return getStackTraceElementMethod != null && getStackTraceDepthMethod != null;, +++ b/android/guava/src/com/google/common/base/Throwables.java, + return getStackTraceElementMethod != null && getStackTraceDepthMethod != null;, +++ b/guava/src/com/google/common/base/Throwables.java, + return getStackTraceElementMethod != null && getStackTraceDepthMethod != null;]
[+++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTestSuiteBuilder.java, +import com.google.common.collect.testing.testers.CollectionSerializationTester;, + CollectionSerializationTester.class,, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTestSuiteBuilder.java, +import com.google.common.collect.testing.testers.CollectionSerializationTester;, + CollectionSerializationTester.class,, +++ b/guava-testlib/src/com/google/common/collect/testing/CollectionTestSuiteBuilder.java, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.collect.testing.features.Feature;, +import com.google.common.testing.SerializableTester;, +, +import junit.framework.TestSuite;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, + * @author Louis Wasserman, +, + @Override, + protected, + List<TestSuite>, + createDerivedSuites(, + FeatureSpecificTestSuiteBuilder<, + ?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>> parentBuilder) {, + List<TestSuite> derivedSuites = new ArrayList<TestSuite>(, + super.createDerivedSuites(parentBuilder));, +, + if (parentBuilder.getFeatures().contains(CollectionFeature.SERIALIZABLE)) {, + derivedSuites.add(CollectionTestSuiteBuilder, + .using(new ReserializedCollectionGenerator<E>(parentBuilder.getSubjectGenerator())), + .named(getName() + " reserialized"), + .withFeatures(computeReserializedCollectionFeatures(parentBuilder.getFeatures())), + .createTestSuite());, + }, + return derivedSuites;, + }, +, + static class ReserializedCollectionGenerator<E> implements
[+++ b/guava-tests/benchmark/com/google/common/collect/ComparatorDelegationOverheadBenchmark.java, +/*, + * Copyright (C) 2013 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific
[+++ b/android/guava-tests/test/com/google/common/collect/CompactHashMapTest.java, +, + public void testAllocArraysDefault() {, + CompactHashMap<Integer, String> map = CompactHashMap.create();, + assertThat(map.needsAllocArrays()).isTrue();, + assertThat(map.entries).isNull();, + assertThat(map.keys).isNull();, + assertThat(map.values).isNull();, +, + map.put(1, "1");, + assertThat(map.needsAllocArrays()).isFalse();, + assertThat(map.entries).hasLength(CompactHashMap.DEFAULT_SIZE);, + assertThat(map.keys).hasLength(CompactHashMap.DEFAULT_SIZE);, + assertThat(map.values).hasLength(CompactHashMap.DEFAULT_SIZE);, + }, +, + public void testAllocArraysExpectedSize() {, + for (int i = 0; i <= CompactHashMap.DEFAULT_SIZE; i++) {, + CompactHashMap<Integer, String> map = CompactHashMap.createWithExpectedSize(i);, + assertThat(map.needsAllocArrays()).isTrue();, + assertThat(map.entries).isNull();, + assertThat(map.keys).isNull();, + assertThat(map.values).isNull();, +, + map.put(1, "1");, + assertThat(map.needsAllocArrays()).isFalse();, + int expectedSize = Math.max(1, i);, + assertThat(map.entries).hasLength(expectedSize);, + assertThat(map.keys).hasLength(expectedSize);, + assertThat(map.values).hasLength(expectedSize);, + }, + }, +++ b/android/guava-tests/test/com/google/common/collect/CompactHashMapTest.java, +, + public void testAllocArraysDefault() {, + CompactHashMap<Integer,
[+++ b/.travis.yml, + - oraclejdk10]
[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, + @Beta, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, + @Beta, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, + @Beta, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, + @Beta, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, + @Beta, +++ b/guava/src/com/google/common/base/Equivalences.java, + * scheduled for deletion from Guava in Guava release 11.0.</b>, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, + @Beta, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, + @Beta, +++ b/guava/src/com/google/common/base/Equivalences.java, + * scheduled for deletion from Guava in Guava release 11.0.</b>, +++ b/guava/src/com/google/common/base/Throwables.java, + * Class)}. This method will be removed from Guava in Guava release 11.0., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, + @Beta, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, + @Beta, +++ b/guava/src/com/google/common/base/Equivalences.java, + * scheduled for deletion from Guava in Guava release 11.0.</b>, +++ b/guava/src/com/google/common/base/Throwables.java, + * Class)}. This method will
[+++ b/guava/pom.xml, + <link>http://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/</link>, + <link>http://static.javadoc.io/com.google.j2objc/j2objc-annotations/1.1/</link>]
[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + putEdge(N1, N2);, + putEdge(N1, N2);, + putEdge(N1, N2);, + putEdge(N1, N2);, + assertThat(putEdge(N1, N2)).isTrue();, + putEdge(N1, N2);, + assertThat(putEdge(N1, N2)).isFalse();, + putEdge(N1, N2);, + putEdge(N2, N1);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + putEdge(N1, N2);, + putEdge(N1, N2);, + putEdge(N1, N2);, + putEdge(N1, N2);, + assertThat(putEdge(N1, N2)).isTrue();, + putEdge(N1, N2);, + assertThat(putEdge(N1, N2)).isFalse();, + putEdge(N1, N2);, + putEdge(N2, N1);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, + addEdge(N1, N2, E12);, + addEdge(N1, N2, E12);, + addEdge(N1, N2, E12);, + addEdge(N1, N2, E12);, + addEdge(N1, N2, E12);, + addEdge(N1, N2, E12);, + addEdge(N1, N2, E12);, + addEdge(N1, N2, E12);, + addEdge(N1, N2, E12);, + addEdge(N1, N2,
[+++ b/guava/src/com/google/common/collect/DenseImmutableTable.java, + @Override, + public ImmutableMap<R, Map<C, V>> rowMap() {, + return rowMap;, +++ b/guava/src/com/google/common/collect/DenseImmutableTable.java, + @Override, + public ImmutableMap<R, Map<C, V>> rowMap() {, + return rowMap;, +++ b/guava/src/com/google/common/collect/EmptyImmutableTable.java, +++ b/guava/src/com/google/common/collect/DenseImmutableTable.java, + @Override, + public ImmutableMap<R, Map<C, V>> rowMap() {, + return rowMap;, +++ b/guava/src/com/google/common/collect/EmptyImmutableTable.java, +++ b/guava/src/com/google/common/collect/ImmutableTable.java, +import com.google.common.base.Objects;, + @Override public ImmutableMap<R, V> column(C columnKey) {, + checkNotNull(columnKey);, + return Objects.firstNonNull(, + (ImmutableMap<R, V>) columnMap().get(columnKey),, + ImmutableMap.<R, V>of());, + }, + @Override public ImmutableSet<C> columnKeySet() {, + return columnMap().keySet();, + }, + @Override public ImmutableMap<C, V> row(R rowKey) {, + checkNotNull(rowKey);, + return Objects.firstNonNull(, + (ImmutableMap<C, V>)
[+++ b/guava/src/com/google/common/base/Ticker.java, +public abstract class Ticker {, + public abstract long read();, +, + /**, + * A ticker that reads the current time using {@link System#nanoTime}., + */, + public static Ticker systemTicker() {, + return SYSTEM_TICKER;, + }, + , + private static final Ticker SYSTEM_TICKER = new Ticker() {, + @Override, + public long read() {, + return System.nanoTime();, + }, + };, +++ b/guava/src/com/google/common/base/Ticker.java, +public abstract class Ticker {, + public abstract long read();, +, + /**, + * A ticker that reads the current time using {@link System#nanoTime}., + */, + public static Ticker
[+++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, + public void testBitSize() {, + BloomFilter.create(Funnels.stringFunnel(), i, fpp).bitSize());, + public void testPutAll() {, + assertTrue(bf1.isCompatible(bf2));, + bf1.putAll(bf2);, + public void testPutAllDifferentSizes() {, + assertFalse(bf1.isCompatible(bf2));, + bf1.putAll(bf2);, + assertFalse(bf2.isCompatible(bf1));, + bf2.putAll(bf1);, + public void testPutAllWithSelf() {, + assertFalse(bf1.isCompatible(bf1));, + bf1.putAll(bf1);, +++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, + public void testBitSize() {, + BloomFilter.create(Funnels.stringFunnel(), i, fpp).bitSize());, + public void testPutAll() {, + assertTrue(bf1.isCompatible(bf2));, + bf1.putAll(bf2);, + public void testPutAllDifferentSizes() {, + assertFalse(bf1.isCompatible(bf2));, + bf1.putAll(bf2);, + assertFalse(bf2.isCompatible(bf1));, + bf2.putAll(bf1);, + public void testPutAllWithSelf() {, + assertFalse(bf1.isCompatible(bf1));, + bf1.putAll(bf1);, +++ b/guava/src/com/google/common/hash/BloomFilter.java, + return Math.pow((double) bits.bitCount() / bitSize(), numHashFunctions);, + @VisibleForTesting long bitSize() {, +
[+++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +import static com.google.common.base.Charsets.UTF_8;, + func.hashString(input, UTF_8).toString());, + .setDefault(byte[].class, "secret key".getBytes(UTF_8)), + && !method.getName().equals("goodFastHash") // tested in testGoodFastHashEquals, + && !method.getName().startsWith("hmac")) { // skip hmac functions]
[+++ b/guava-gwt/test/com/google/common/collect/TablesTest_gwt.java, +, +public void testToTable() throws Exception {, + com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, + testCase.testToTable();, +}, +, +public void testToTableConflict() throws Exception {, + com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, + testCase.testToTableConflict();, +}, +, +public void testToTableMerging() throws Exception {, + com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, + testCase.testToTableMerging();, +}, +, +public void testToTableNullMerge() throws Exception {, + com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, + testCase.testToTableNullMerge();, +}, +, +public void testToTableNullValues() throws Exception {, + com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, + testCase.testToTableNullValues();, +}, +++ b/guava-gwt/test/com/google/common/collect/TablesTest_gwt.java, +, +public void testToTable() throws Exception {, + com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, + testCase.testToTable();,
[+++ b/guava-tests/test/com/google/common/base/AbstractIteratorTest.java, + Iterator<Integer> iter =, + new AbstractIterator<Integer>() {, + @Override, + public Integer computeNext() {, + Integer unused = endOfData();, + boolean unused = iter.hasNext();, + Iterator<Integer> iter =, + new AbstractIterator<Integer>() {, +, + @Override, + public Integer computeNext() {, + Integer unused = endOfData();, + Iterator<Integer> iter =, + new AbstractIterator<Integer>() {, + @Override, + protected Integer computeNext() {, + boolean unused = hasNext();, +++ b/guava-tests/test/com/google/common/base/AbstractIteratorTest.java, + Iterator<Integer> iter =, + new AbstractIterator<Integer>() {, + @Override, + public Integer computeNext() {, + Integer unused = endOfData();, + boolean unused = iter.hasNext();, + Iterator<Integer> iter =,
[+++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimapTest.java, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimapTest.java, +++ b/guava-gwt/test/com/google/common/collect/ArrayListMultimapTest_gwt.java, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimapTest.java, +++ b/guava-gwt/test/com/google/common/collect/ArrayListMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ConstrainedSetMultimapTest_gwt.java, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimapTest.java, +++ b/guava-gwt/test/com/google/common/collect/ArrayListMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ConstrainedSetMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/HashMultimapTest_gwt.java, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimapTest.java, +++ b/guava-gwt/test/com/google/common/collect/ArrayListMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ConstrainedSetMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/HashMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/LinkedHashMultimapTest_gwt.java, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimapTest.java, +++ b/guava-gwt/test/com/google/common/collect/ArrayListMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ConstrainedSetMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/HashMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/LinkedHashMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/LinkedListMultimapTest_gwt.java, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimapTest.java, +++ b/guava-gwt/test/com/google/common/collect/ArrayListMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ConstrainedSetMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/HashMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/LinkedHashMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/LinkedListMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/MultimapsTest_gwt.java, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimapTest.java, +++ b/guava-gwt/test/com/google/common/collect/ArrayListMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ConstrainedSetMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/HashMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/LinkedHashMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/LinkedListMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/MultimapsTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/TreeMultimapExplicitTest_gwt.java, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimapTest.java, +++ b/guava-gwt/test/com/google/common/collect/ArrayListMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ConstrainedSetMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/HashMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/LinkedHashMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/LinkedListMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/MultimapsTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/TreeMultimapExplicitTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/TreeMultimapNaturalTest_gwt.java, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimapTest.java, +++ b/guava-gwt/test/com/google/common/collect/ArrayListMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ConstrainedSetMultimapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/HashMultimapTest_gwt.java, +++
[+++ b/android/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, + .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent()), +++ b/android/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, + .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent()), +++ b/android/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java, + @Empty, + private <T> com.google.common.base.Optional<T> generateGoogleOptional() {, + return com.google.common.base.Optional.absent();, + @Generates, + private <T> com.google.common.base.Optional<T> generateGoogleOptional(T value) {, + return com.google.common.base.Optional.of(value);, +++ b/android/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, + .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent()), +++ b/android/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java, + @Empty, + private <T> com.google.common.base.Optional<T> generateGoogleOptional() {, + return com.google.common.base.Optional.absent();, + @Generates, + private <T> com.google.common.base.Optional<T> generateGoogleOptional(T value) {, + return com.google.common.base.Optional.of(value);, +++ b/android/guava-testlib/test/com/google/common/testing/ArbitraryInstancesTest.java, + assertThat(ArbitraryInstances.get(com.google.common.base.Optional.class)).isAbsent();, +++ b/android/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, + .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent()), +++ b/android/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java, + @Empty, + private <T> com.google.common.base.Optional<T> generateGoogleOptional() {, + return com.google.common.base.Optional.absent();, + @Generates, + private <T> com.google.common.base.Optional<T> generateGoogleOptional(T value) {, + return com.google.common.base.Optional.of(value);,
[+++ b/android/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java, + // https://github.com/aappleby/smhasher/blob/master/src/main.cpp, + // https://github.com/aappleby/smhasher/blob/master/src/main.cpp, +++ b/android/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java, + // https://github.com/aappleby/smhasher/blob/master/src/main.cpp, + // https://github.com/aappleby/smhasher/blob/master/src/main.cpp, +++ b/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java, + // https://github.com/aappleby/smhasher/blob/master/src/main.cpp, + // https://github.com/aappleby/smhasher/blob/master/src/main.cpp]
[+++ b/guava/src/com/google/common/collect/MapMaker.java, + * by {@link com.google.common.cache.CacheBuilder#build}. See the, + * <a href="http://code.google.com/p/guava-libraries/wiki/MapMakerMigration">MapMaker, + * Migration Guide</a> for more details.]
[+++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LongAddables.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the
[+++ b/guava-tests/test/com/google/common/io/testdata/alice_in_wonderland.txt, + ALICE'S ADVENTURES IN WONDERLAND, +, + by Lewis Carroll, +, +First published in 1865., +, +This text was produced by Project Gutenberg www.gutenberg.org,, +an organization that produces free electronic books, mostly of, +works old enough that they have passed into the public domain., +, +, + CHAPTER I, +, + Down the Rabbit-Hole, +, +, + Alice was beginning to get very tired of sitting by her sister, +on the bank, and of having nothing to do: once or twice she had, +peeped into the book her sister was reading, but it had no, +pictures or
[+++ b/guava/src/com/google/common/graph/Graph.java, + * <ul>, + * <li>the mutable state must not be reflected in the {@code equals/hashCode} methods, + * <li>don't construct multiple elements that are equal to each other and expect them to be, + * </ul>, + * <pre><code>, + * graph.nodes().contains(node), + * </code></pre>, + * <pre><code>, + * <pre><code>, + * </code></pre>]
[+++ b/guava-tests/test/com/google/common/util/concurrent/SimpleTimeLimiterTest.java, +import static com.google.common.truth.Truth.assertThat;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +, +import com.google.common.base.Stopwatch;, +import com.google.common.collect.Range;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeoutException;, + * @author Jens Nyman, +, + private static final long DELAY_MS = 50;, + private static final long ENOUGH_MS = 500;, + private static final long NOT_ENOUGH_MS = 5;, +, + private static final String GOOD_CALLABLE_RESULT = "good callable result";, + private static final Callable<String> GOOD_CALLABLE =, + new Callable<String>() {, + @Override, + public String call() throws InterruptedException {, + MILLISECONDS.sleep(DELAY_MS);, + return GOOD_CALLABLE_RESULT;, + }, + };, + private static final Callable<String> BAD_CALLABLE =, + new Callable<String>() {, +
[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, + public void testFailureCause_throwsIfNotFailed() {, + StopFailingService service = new StopFailingService();, + try {, + service.failureCause();, + fail();, + } catch (IllegalStateException e) {, + // expected, + }, + service.startAndWait();, + try {, + service.failureCause();, + fail();, + } catch (IllegalStateException e) {, + // expected, + }, + try {, + service.stopAndWait();, + fail();, + } catch (UncheckedExecutionException e) {, + assertEquals(EXCEPTION, service.failureCause());, + assertEquals(EXCEPTION, e.getCause());, + }, + }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, + public void testFailureCause_throwsIfNotFailed() {, + StopFailingService service = new StopFailingService();, + try {, + service.failureCause();, + fail();, + } catch (IllegalStateException
[+++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +import java.lang.reflect.Field;, +import java.util.Arrays;, + * <p>Covers arrays, enums and common types defined in {@code java.lang}, {@code java.lang.reflect},, + * {@code java.io}, {@code java.nio}, {@code java.math}, {@code java.util}, {@code, + * java.util.concurrent}, {@code java.util.regex}, {@code com.google.common.base}, {@code, + * com.google.common.collect} and {@code com.google.common.primitives}. In addition, if the type, + * exposes at least one public static final constant of the same type, one of the constants will be, + * used; or if the class exposes a public parameter-less constructor then it will be "new"d and, + * returned., + private static final Ordering<Field> BY_FIELD_NAME = new
[+++ b/guava-testlib/src/com/google/common/collect/testing/Helpers.java, + *, + * <li><i>reflexivity</i>: {@code comparator.compare(t, t) = 0} for all {@code t} in {@code, + * valuesInExpectedOrder}; and, + * <li><i>consistency</i>: {@code comparator.compare(ti, tj) < 0} and {@code, + * comparator.compare(tj, ti) > 0} for {@code i < j}, where {@code ti =, + * valuesInExpectedOrder.get(i)} and {@code tj = valuesInExpectedOrder.get(j)}., + * </ul>, +++ b/guava-testlib/src/com/google/common/collect/testing/Helpers.java, + *, + * <li><i>reflexivity</i>: {@code comparator.compare(t, t) = 0} for all {@code t} in {@code, + * valuesInExpectedOrder}; and, + * <li><i>consistency</i>: {@code comparator.compare(ti, tj) < 0} and {@code, + * comparator.compare(tj, ti) > 0} for {@code i
[+++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/Utf8Test.java, +, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/Utf8Test.java, +, +++ /dev/null, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/Utf8Test.java, +, +++ /dev/null, +++ b/guava-tests/test/com/google/common/base/Utf8Test.java, +]
[+++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/EnumsTest.java, + // Create a second ClassLoader and use it to get a second version of the TestEnum class., + // Run Enums.getIfPresent on that other TestEnum and then return a WeakReference containing the, + // new ClassLoader. If Enums.getIfPresent does caching that prevents the shadow TestEnum, + // (and therefore its ClassLoader) from being unloaded, then this WeakReference will never be, + // cleared., +, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/EnumsTest.java, + // Create a second ClassLoader and use it to get a second version of the TestEnum class., + // Run Enums.getIfPresent on that other TestEnum and then return a
[+++ b/guava-tests/pom.xml, + <!-- Set max heap for tests. -->, + <argLine>-Xmx1536M -Duser.language=hi -Duser.country=IN</argLine>]
[+++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +import static com.google.common.hash.Hashing.ConcatenatedHashFunction;, +, +import com.google.common.testing.NullPointerTester;, +import java.nio.ByteBuffer;, +, + public void testConcatenatedHashFunction_bits() {, + assertEquals(Hashing.md5().bits(),, + new ConcatenatedHashFunction(Hashing.md5()).bits());, + assertEquals(Hashing.md5().bits() + Hashing.murmur3_32().bits(),, + new ConcatenatedHashFunction(Hashing.md5(), Hashing.murmur3_32()).bits());, + assertEquals(Hashing.md5().bits() + Hashing.murmur3_32().bits() + Hashing.murmur3_128().bits(),, + new ConcatenatedHashFunction(, + Hashing.md5(), Hashing.murmur3_32(), Hashing.murmur3_128()).bits());, + }, +, + public void testConcatenatedHashFunction_makeHash() {, + byte[] md5Hash = Hashing.md5().hashLong(42L).asBytes();, + byte[] murmur3Hash = Hashing.murmur3_32().hashLong(42L).asBytes();, + byte[] combined = new byte[md5Hash.length + murmur3Hash.length];, + ByteBuffer buffer = ByteBuffer.wrap(combined);, + buffer.put(md5Hash);, + buffer.put(murmur3Hash);, +, + assertEquals(HashCodes.fromBytes(combined),, + new ConcatenatedHashFunction(Hashing.md5(), Hashing.murmur3_32()).hashLong(42L));, + }, +, + public void testNullPointers() {, + NullPointerTester tester = new NullPointerTester();, +
[+++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +import static com.google.common.hash.Hashing.goodFastHash;, + /**, + * Tests equality of {@link Hashing#goodFastHash} instances. This test must be separate from, + * {@link #testSeededHashFunctionEquals} because the parameter to {@code goodFastHash} is a size,, + * not a seed, and because that size is rounded up. Thus, {@code goodFastHash} instances with, + * different parameters can be equal. That fact is a problem for {@code, + * testSeededHashFunctionEquals}., + */, + public void testGoodFastHashEquals() throws Exception {, + HashFunction hashFunction1a = goodFastHash(1);, + HashFunction hashFunction1b = goodFastHash(32);, + HashFunction hashFunction2a = goodFastHash(33);, + HashFunction hashFunction2b = goodFastHash(128);, + HashFunction
[+++ b/guava/src/com/google/common/graph/Network.java, + * <p>If this network {@link #allowsParallelEdges() allows parallel edges}, parallel edges will be, + * treated as if collapsed into a single edge. For example, the {@link #degree(Object)} of a node, + * in the {@link Graph} view may be less than the degree of the same node in this {@link Network}., + * Returns the set of edges connecting {@code nodeU} to {@code nodeV}., + * <p>The resulting set of edges will be parallel (i.e. have equal {@link #incidentNodes(Object)}., + * If this network does not {@link #allowsParallelEdges() allow parallel edges}, the resulting set, +
[+++ b/guava/src/com/google/common/collect/SortedLists.java, +import javax.annotation.CheckReturnValue;, +@CheckReturnValue]
[+++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +import static com.google.common.base.Preconditions.checkArgument;, + Class<?> declaringClass = ctor.getDeclaringClass();, + checkArgument(Modifier.isStatic(declaringClass.getModifiers()), + || declaringClass.getEnclosingClass() == null,, + "Cannot test constructor of non-static inner class: %s", declaringClass.getName());, +++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +import static com.google.common.base.Preconditions.checkArgument;, + Class<?> declaringClass = ctor.getDeclaringClass();, + checkArgument(Modifier.isStatic(declaringClass.getModifiers()), + || declaringClass.getEnclosingClass() == null,, + "Cannot test constructor of non-static inner class: %s", declaringClass.getName());, +++ b/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java, +import static org.junit.contrib.truth.Truth.ASSERT;, + private class Inner {, + public Inner(String s) {, + checkNotNull(s);, + }, + }, +, + public void testNonStaticInnerClass() {, + try {, + new NullPointerTester().testAllPublicConstructors(Inner.class);, + fail();, + } catch (IllegalArgumentException expected) {, + ASSERT.that(expected.getMessage()).contains("inner class");, +
[+++ b/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, + public void testExhaustive() {, + public void testPutStringWithLowSurrogate() {, + // we pad because the dummy hash function we use to test this, merely copies the input into, + // the output, so the input must be at least 32 bits, since the output has to be that long, + assertPutString(new char[] { 'p', HashTestUtils.randomLowSurrogate(new Random()) });, + }, +, + public void testPutStringWithHighSurrogate() {, + // we pad because the dummy hash function we use to test this, merely copies the input into, + // the output, so the input must be at least 32
[+++ b/guava-gwt/src/com/google/common/ForceGuavaCompilation.gwt.xml, +++ b/guava-gwt/src/com/google/common/ForceGuavaCompilation.gwt.xml, +++ b/guava-gwt/src/com/google/common/annotations/Annotations.gwt.xml, +<inherits name="com.google.gwt.core.Core"/>, +++ b/guava-gwt/src/com/google/common/ForceGuavaCompilation.gwt.xml, +++ b/guava-gwt/src/com/google/common/annotations/Annotations.gwt.xml, +<inherits name="com.google.gwt.core.Core"/>, +++ b/guava-gwt/src/com/google/common/base/Base.gwt.xml, + <inherits name="com.google.gwt.rpc.RPC"/>, + , + <inherits name="com.google.gwt.core.Core"/>, + , +++ b/guava-gwt/src/com/google/common/ForceGuavaCompilation.gwt.xml, +++ b/guava-gwt/src/com/google/common/annotations/Annotations.gwt.xml, +<inherits name="com.google.gwt.core.Core"/>, +++ b/guava-gwt/src/com/google/common/base/Base.gwt.xml, + <inherits name="com.google.gwt.rpc.RPC"/>, + , + <inherits name="com.google.gwt.core.Core"/>, + , +++ b/guava-gwt/src/com/google/common/cache/Cache.gwt.xml, + <inherits name="com.google.gwt.core.Core"/>, + , +++ b/guava-gwt/src/com/google/common/ForceGuavaCompilation.gwt.xml, +++ b/guava-gwt/src/com/google/common/annotations/Annotations.gwt.xml, +<inherits name="com.google.gwt.core.Core"/>, +++ b/guava-gwt/src/com/google/common/base/Base.gwt.xml, + <inherits name="com.google.gwt.rpc.RPC"/>, + , + <inherits name="com.google.gwt.core.Core"/>, + , +++ b/guava-gwt/src/com/google/common/cache/Cache.gwt.xml, + <inherits name="com.google.gwt.core.Core"/>, + , +++ b/guava-gwt/src/com/google/common/collect/Collect.gwt.xml, + <inherits name="com.google.gwt.rpc.RPC"/>, + , + <inherits name="com.google.gwt.core.Core"/>, + , +++ b/guava-gwt/src/com/google/common/ForceGuavaCompilation.gwt.xml, +++ b/guava-gwt/src/com/google/common/annotations/Annotations.gwt.xml, +<inherits name="com.google.gwt.core.Core"/>, +++ b/guava-gwt/src/com/google/common/base/Base.gwt.xml, + <inherits name="com.google.gwt.rpc.RPC"/>,
[+++ b/guava/src/com/google/common/base/Objects.java, + private boolean needsSeparator = false;, + this.builder = new StringBuilder(32).append(className).append('{');, + maybeAppendSeparator().append(name).append('=').append(value);, + maybeAppendSeparator().append(value);, + try {, + return builder.append('}').toString();, + } finally {, + // Slice off the closing brace in case there are additional calls to, + // #add or #addValue., + builder.setLength(builder.length() - 1);, + }, +, + private StringBuilder maybeAppendSeparator() {, + if (needsSeparator) {, + return builder.append(", ");, + } else {, + needsSeparator = true;, + return builder;, + }]
[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, + *, + * @since 14.0 (since 10.0 as {@code elapsedTime()}), + public long elapsed(TimeUnit desiredUnit) {, + * in the desired time unit, with any fraction rounded down., + *, + * <p>Note that the overhead of measurement can be more than a microsecond, so, + * it is generally not useful to specify {@link TimeUnit#NANOSECONDS}, + * precision here., + // TODO(user): @deprecated Use {@link Stopwatch#elapsed(TimeUnit)} instead., + public long elapsedTime(TimeUnit desiredUnit) {, + return elapsed(desiredUnit);, + }, +, + /**, + * Returns the current elapsed time shown on this stopwatch, expressed, + *
[+++ b/android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java, +import com.google.common.primitives.ImmutableLongArray;, + ImmutableLongArray.Builder builder = ImmutableLongArray.builder();, + builder.add(doubleToRawLongBits(s.readDouble()));, + this.longs = new AtomicLongArray(builder.build().toArray());, +++ b/android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java, +import com.google.common.primitives.ImmutableLongArray;, + ImmutableLongArray.Builder builder = ImmutableLongArray.builder();, + builder.add(doubleToRawLongBits(s.readDouble()));, + this.longs = new AtomicLongArray(builder.build().toArray());, +++ b/guava-gwt/src/com/google/common/collect/CompoundOrdering_CustomFieldSerializer.java, + List<Comparator<Object>> comparators = new ArrayList<>();, +++ b/android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java, +import com.google.common.primitives.ImmutableLongArray;, + ImmutableLongArray.Builder builder = ImmutableLongArray.builder();, + builder.add(doubleToRawLongBits(s.readDouble()));, + this.longs = new AtomicLongArray(builder.build().toArray());, +++ b/guava-gwt/src/com/google/common/collect/CompoundOrdering_CustomFieldSerializer.java, + List<Comparator<Object>> comparators = new ArrayList<>();, +++ b/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java, +import com.google.common.primitives.ImmutableLongArray;, + ImmutableLongArray.Builder builder = ImmutableLongArray.builder();, + builder.add(doubleToRawLongBits(s.readDouble()));, + this.longs = new AtomicLongArray(builder.build().toArray());]
[+++ b/guava/src/com/google/common/base/CaseFormat.java, + @Override String convert(CaseFormat format, String s) {, + if (format == LOWER_UNDERSCORE) {, + return s.replace('-', '_');, + }, + if (format == UPPER_UNDERSCORE) {, + return Ascii.toUpperCase(s.replace('-', '_'));, + }, + return super.convert(format, s);, + }, + @Override String convert(CaseFormat format, String s) {, + if (format == LOWER_HYPHEN) {, + return s.replace('_', '-');, + }, + if (format == UPPER_UNDERSCORE) {, + return Ascii.toUpperCase(s);, + }, + return super.convert(format, s);, + }, + @Override String convert(CaseFormat format, String s) {, + if (format == LOWER_HYPHEN) {, + return Ascii.toLowerCase(s.replace('_', '-'));, + }, + if
[+++ b/android/guava/src/com/google/common/cache/Cache.java, +import com.google.errorprone.annotations.CompatibleWith;, + V getIfPresent(@CompatibleWith("K") Object key);, + void invalidate(@CompatibleWith("K") Object key);, +++ b/android/guava/src/com/google/common/cache/Cache.java, +import com.google.errorprone.annotations.CompatibleWith;, + V getIfPresent(@CompatibleWith("K") Object key);, + void invalidate(@CompatibleWith("K") Object key);, +++ b/guava-gwt/src/com/google/common/cache/Cache.gwt.xml, +++ b/android/guava/src/com/google/common/cache/Cache.java, +import com.google.errorprone.annotations.CompatibleWith;, + V getIfPresent(@CompatibleWith("K") Object key);, + void invalidate(@CompatibleWith("K") Object key);, +++ b/guava-gwt/src/com/google/common/cache/Cache.gwt.xml, +++ b/guava/src/com/google/common/cache/Cache.java, +import com.google.errorprone.annotations.CompatibleWith;, + V getIfPresent(@CompatibleWith("K") Object key);, + void invalidate(@CompatibleWith("K") Object key);]
[+++ b/guava-tests/test/com/google/common/net/InternetDomainNameTest.java, + "foo-.com",, +++ b/guava-tests/test/com/google/common/net/InternetDomainNameTest.java, + "foo-.com",, +++ b/guava/src/com/google/common/net/InternetDomainName.java, + * <li>Underscores ('_') are permitted wherever dashes ('-') are permitted., + private static final CharMatcher DASH_MATCHER = CharMatcher.anyOf("-_");, + CharMatcher.JAVA_LETTER_OR_DIGIT.or(DASH_MATCHER);, + // No initial or final dashes or underscores., + if (DASH_MATCHER.matches(part.charAt(0)), + || DASH_MATCHER.matches(part.charAt(part.length() - 1))) {]
[+++ b/jadx-core/src/test/java/jadx/api/InternalJadxTest.java, + protected boolean outputCFG = false;, + protected String outDir = "test-out-tmp";, +, + List<IDexTreeVisitor> passes = Jadx.getPassesList(new DefaultJadxArgs() {, + @Override, + public boolean isCFGOutput() {, + return outputCFG;, + }, +, + @Override, + public boolean isRawCFGOutput() {, + return outputCFG;, + }, + }, new File(outDir));, + fail("Class file not found: " + path);, + fail("Class is not stored in a file.");, + if (in != null) {, +}, +++ b/jadx-core/src/test/java/jadx/api/InternalJadxTest.java, + protected boolean outputCFG = false;, + protected String outDir = "test-out-tmp";, +, + List<IDexTreeVisitor> passes = Jadx.getPassesList(new DefaultJadxArgs() {, + @Override, +
[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, + DepthRegionTraversal.traverse(mth, new AbstractRegionVisitor() {, + DepthRegionTraversal.traverse(mth, new TracedRegionVisitor() {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, + DepthRegionTraversal.traverse(mth, new AbstractRegionVisitor() {, + DepthRegionTraversal.traverse(mth, new TracedRegionVisitor() {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CleanRegions.java, + DepthRegionTraversal.traverse(mth, removeEmptyBlocks);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, + DepthRegionTraversal.traverse(mth, new AbstractRegionVisitor() {, + DepthRegionTraversal.traverse(mth, new TracedRegionVisitor() {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CleanRegions.java, + DepthRegionTraversal.traverse(mth, removeEmptyBlocks);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/DepthRegionTraversal.java, + public static void traverseIncludingExcHandlers(MethodNode mth, IRegionVisitor visitor) {, + public static void traverseIterative(MethodNode mth, IRegionIterativeVisitor visitor) {, + repeat = traverseIterativeInternal(mth, visitor, mth.getRegion());, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, + DepthRegionTraversal.traverse(mth, new AbstractRegionVisitor() {, + DepthRegionTraversal.traverse(mth, new TracedRegionVisitor() {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CleanRegions.java, + DepthRegionTraversal.traverse(mth, removeEmptyBlocks);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/DepthRegionTraversal.java, + public static void traverseIncludingExcHandlers(MethodNode mth, IRegionVisitor visitor)
[+++ b/jadx-core/src/main/java/jadx/core/utils/files/InputFile.java, + }, + if (j2d.isError()) {, +++ b/jadx-core/src/main/java/jadx/core/utils/files/InputFile.java, + }, + if (j2d.isError()) {, +++ b/jadx-core/src/main/java/jadx/core/utils/files/JavaToDex.java, +import java.lang.reflect.Field;, +, + debug = true;, + resetOutDexVar();, + private void resetOutDexVar() throws JadxException {, + try {, + Field outputDex = Main.class.getDeclaredField("outputDex");, + outputDex.setAccessible(true);, + outputDex.set(null, null);, + } catch (Exception e) {, + throw new JadxException("Failed to reset outputDex field", e);, + }, + }, +, + return dxErrors != null && !dxErrors.isEmpty();]
[+++ b/jadx-core/build.gradle, + compile files('lib/dx-1.8.jar'), +++ b/jadx-core/build.gradle, + compile files('lib/dx-1.8.jar'), +++ b/jadx-core/lib/dx-1.8.jar, +++ b/jadx-core/build.gradle, + compile files('lib/dx-1.8.jar'), +++ b/jadx-core/lib/dx-1.8.jar, +++ b/jadx-core/src/main/java/jadx/core/dex/info/FieldInfo.java, +import com.android.dex.FieldId;, +++ b/jadx-core/build.gradle, + compile files('lib/dx-1.8.jar'), +++ b/jadx-core/lib/dx-1.8.jar, +++ b/jadx-core/src/main/java/jadx/core/dex/info/FieldInfo.java, +import com.android.dex.FieldId;, +++ b/jadx-core/src/main/java/jadx/core/dex/info/MethodInfo.java, +import com.android.dex.MethodId;, +import com.android.dex.ProtoId;, +++ b/jadx-core/build.gradle, + compile files('lib/dx-1.8.jar'), +++ b/jadx-core/lib/dx-1.8.jar, +++ b/jadx-core/src/main/java/jadx/core/dex/info/FieldInfo.java, +import com.android.dex.FieldId;, +++ b/jadx-core/src/main/java/jadx/core/dex/info/MethodInfo.java, +import com.android.dex.MethodId;, +import com.android.dex.ProtoId;, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +import com.android.dex.Code;, +++ b/jadx-core/build.gradle, + compile files('lib/dx-1.8.jar'), +++ b/jadx-core/lib/dx-1.8.jar, +++ b/jadx-core/src/main/java/jadx/core/dex/info/FieldInfo.java, +import com.android.dex.FieldId;, +++ b/jadx-core/src/main/java/jadx/core/dex/info/MethodInfo.java, +import com.android.dex.MethodId;, +import com.android.dex.ProtoId;, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +import com.android.dex.Code;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +import com.android.dex.ClassData;, +import com.android.dex.ClassData.Field;, +import com.android.dex.ClassData.Method;, +import com.android.dex.ClassDef;, +++ b/jadx-core/build.gradle, + compile files('lib/dx-1.8.jar'), +++ b/jadx-core/lib/dx-1.8.jar,
[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, + List<ClassNode> classes = root.getClasses(true);, + for (ClassNode cls : classes) {, + }, + Set<String> clsFullPaths = new HashSet<>(classes.size());, + for (ClassNode cls : classes) {, + ClassInfo clsInfo = cls.getClassInfo();, + ClassInfo aliasClsInfo = clsInfo.getAlias();, + if (!clsFullPaths.add(aliasClsInfo.getFullPath().toLowerCase())) {, + String newFullName = aliasClsInfo.makeFullClsName(newShortName, true);, +, + clsInfo.rename(root, newFullName);, + clsFullPaths.add(clsInfo.getAlias().getFullPath().toLowerCase());]
[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinish.java, + * For every exception handler must be only one splitter block,, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinish.java, + * For every exception handler must be only one splitter block,, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/debuginfo/DebugInfoParser.java, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinish.java, + * For every exception handler must be only one splitter block,, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/debuginfo/DebugInfoParser.java, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +@SuppressWarnings("unused"), +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinish.java, + * For every exception handler must be only one splitter block,, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/debuginfo/DebugInfoParser.java, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +@SuppressWarnings("unused"), +++ b/jadx-core/src/main/java/jadx/core/xmlgen/CommonBinaryParser.java, + @SuppressWarnings("unused"), +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinish.java, + * For every exception handler must be only one splitter block,, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/debuginfo/DebugInfoParser.java, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +@SuppressWarnings("unused"), +++ b/jadx-core/src/main/java/jadx/core/xmlgen/CommonBinaryParser.java, + @SuppressWarnings("unused"), +++ b/jadx-core/src/main/java/jadx/core/xmlgen/ResTableParser.java, + @SuppressWarnings("unused"),
[+++ b/jadx-gui/src/main/java/jadx/gui/ui/MainWindow.java, + if (recentFiles.getItemCount() == 0) {, + recentFiles.add(new JMenuItem(NLS.str("menu.no_recent_files")));, + }, +++ b/jadx-gui/src/main/java/jadx/gui/ui/MainWindow.java, + if (recentFiles.getItemCount() == 0) {, + recentFiles.add(new JMenuItem(NLS.str("menu.no_recent_files")));, + }, +++ b/jadx-gui/src/main/resources/i18n/Messages_en_US.properties, +menu.no_recent_files=No recent files]
[+++ b/.travis.yml, + edge:, + branch: v1.8.47, + key: $BINTRAY_KEY]
[+++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, + if (!this.getFullName().contains(fileName.replace(".java", "")), + && !fileName.equals("SourceFile")) {, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, + if (!this.getFullName().contains(fileName.replace(".java", "")), + && !fileName.equals("SourceFile")) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, + BlockNode loopExit = BlockUtils.selectOtherSafe(loopBody, condBlock.getCleanSuccessors());, + if (loopExit != null) {, + }, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, + if (!this.getFullName().contains(fileName.replace(".java", "")), + && !fileName.equals("SourceFile")) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, + BlockNode loopExit = BlockUtils.selectOtherSafe(loopBody, condBlock.getCleanSuccessors());, + if (loopExit != null) {, + }, +++ b/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java, + public static BlockNode selectOtherSafe(BlockNode node, List<BlockNode> blocks) {, + int size = blocks.size();, + if (size == 1) {, + BlockNode first = blocks.get(0);, + return
[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ReSugarCode;, + passes.add(new ReSugarCode());, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ReSugarCode;, + passes.add(new ReSugarCode());, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, + addArg(code, insn.getArg(i), false);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ReSugarCode;, + passes.add(new ReSugarCode());, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, + addArg(code, insn.getArg(i), false);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ReSugarCode.java, +package jadx.core.dex.visitors;, +, +import jadx.core.dex.instructions.InsnType;, +import jadx.core.dex.instructions.args.InsnArg;, +import jadx.core.dex.instructions.args.LiteralArg;, +import jadx.core.dex.nodes.BlockNode;, +import jadx.core.dex.nodes.InsnNode;, +import jadx.core.dex.nodes.MethodNode;, +import jadx.core.utils.InstructionRemover;, +import jadx.core.utils.exceptions.JadxException;, +, +import java.util.List;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +public class ReSugarCode extends AbstractVisitor {, + private static final Logger LOG = LoggerFactory.getLogger(ReSugarCode.class);, +, + @Override, + public void visit(MethodNode mth) throws JadxException {, + if (mth.isNoCode()) {, + return;, + }, + InstructionRemover remover
[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, + insertSourceFileInfo(clsCode, cls);, + if (mthGen.addDefinition(code)) {, + code.add(' ');, + }, + code.startLine("// compiled from: ");, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, + insertSourceFileInfo(clsCode, cls);, + if (mthGen.addDefinition(code)) {, + code.add(' ');, + }, + code.startLine("// compiled from: ");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, + public boolean addDefinition(CodeWriter code) {, + return true;, + return false;, + return true;, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, + insertSourceFileInfo(clsCode, cls);, + if (mthGen.addDefinition(code)) {, + code.add(' ');, + }, + code.startLine("// compiled from: ");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, + public boolean addDefinition(CodeWriter code) {, + return true;, + return false;, + return true;, +++ b/jadx-core/src/test/java/jadx/tests/internal/TestAnnotations.java, +, + assertThat(code, containsString("int a();"));, +
[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.core.utils.ErrorsCounter;, + processAndSave(jadxArgs);, + } catch (JadxException e) {, + private static void processAndSave(JadxCLIArgs jadxArgs) {, + try {, + Decompiler jadx = new Decompiler(jadxArgs);, + jadx.loadFiles(jadxArgs.getInput());, + jadx.setOutputDir(jadxArgs.getOutDir());, + jadx.save();, + LOG.info("done");, + } catch (Throwable e) {, + LOG.error("jadx error:", e);, + }, + int errorsCount = ErrorsCounter.getErrorCount();, + if (errorsCount != 0) {, + ErrorsCounter.printReport();, + }, + System.exit(errorsCount);, + }, +, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.core.utils.ErrorsCounter;, + processAndSave(jadxArgs);, + } catch (JadxException e) {, + private static void processAndSave(JadxCLIArgs jadxArgs) {, + try {, + Decompiler jadx = new Decompiler(jadxArgs);, + jadx.loadFiles(jadxArgs.getInput());, +
[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, + && stack.peekRegion() instanceof LoopRegion) {, + LoopRegion outerLoop = (LoopRegion) stack.peekRegion();, + if (outerLoop.getBody() == null /* processing not yet finished */, + || RegionUtils.isRegionContainsBlock(outerLoop, out)) {, + }]
[+++ b/jadx-core/src/main/java/jadx/core/xmlgen/ResourcesSaver.java]
[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +import jadx.core.utils.exceptions.DecodeException;, + public JadxDecompiler() {, + public JadxDecompiler(IJadxArgs jadxArgs) {, + public void setOutputDir(File outDir) {, + void init() {, + sourcesOutDir = outDir;, + resOutDir = outDir;, + void parse() throws DecodeException {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +import jadx.core.utils.exceptions.DecodeException;, + public JadxDecompiler() {, + public JadxDecompiler(IJadxArgs jadxArgs) {, + public void setOutputDir(File outDir) {, + void init() {, + sourcesOutDir = outDir;, + resOutDir = outDir;, + void parse() throws DecodeException {, +++
[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, + } catch (Exception e) {, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, + } catch (Exception e) {, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, + if (catchBlocks.length == 0 && tries.length == 0) {, + return;, + }, + InsnNode insn = insnByOffset[offset];, + insn.add(AFlag.TRY_ENTER);, + insn = insnByOffset[offset];, + catchBlock.addInsn(insn);, + } else {, + insn.add(AFlag.TRY_LEAVE);, + if (parentClass.getClassInfo().isInner(), + && !parentClass.getAccessFlags().isStatic()) {, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, + } catch (Exception e) {, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, + if (catchBlocks.length == 0 && tries.length == 0) {, + return;, + }, + InsnNode insn = insnByOffset[offset];, + insn.add(AFlag.TRY_ENTER);, + insn = insnByOffset[offset];, + catchBlock.addInsn(insn);, + } else {,
[+++ b/jadx-core/src/main/java/jadx/core/xmlgen/ResContainer.java, + LOG.error("Failed to decode 9-patch png image, path: {}", name, e);, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/ResContainer.java, + LOG.error("Failed to decode 9-patch png image, path: {}", name, e);, +++ b/jadx-gui/src/main/java/jadx/gui/treemodel/JClass.java, +public class JClass extends JLoadableNode {, + @Override, + public void loadNode() {, + getRootClass().load();, + }, +, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/ResContainer.java, + LOG.error("Failed to decode 9-patch png image, path: {}", name, e);, +++ b/jadx-gui/src/main/java/jadx/gui/treemodel/JClass.java, +public class JClass extends JLoadableNode {, + @Override, + public void loadNode() {, + getRootClass().load();, + }, +, +++ b/jadx-gui/src/main/java/jadx/gui/treemodel/JLoadableNode.java, +package jadx.gui.treemodel;, +, +public abstract class JLoadableNode extends JNode {, + public abstract void loadNode();, +}, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/ResContainer.java,
[+++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + if (!classNode.contains(AFlag.DONT_GENERATE)) {, + }, + ProcessClass.process(cls, passes, true);, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + if (!classNode.contains(AFlag.DONT_GENERATE)) {, + }, + ProcessClass.process(cls, passes, true);, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, + public static void process(ClassNode cls, List<IDexTreeVisitor> passes, boolean generateCode) {, + if (!generateCode && cls.getState() == PROCESSED) {, + if (cls.getState() == PROCESSED && generateCode) {, + CodeGen.generate(cls);, + cls.getDependencies().forEach(depCls -> process(depCls, passes, false));, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + if (!classNode.contains(AFlag.DONT_GENERATE)) {, + }, + ProcessClass.process(cls, passes, true);, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, + public static void process(ClassNode cls, List<IDexTreeVisitor> passes, boolean generateCode) {, + if (!generateCode && cls.getState() == PROCESSED) {, + if (cls.getState() == PROCESSED
[+++ b/.gitignore, +*.orig, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, + }, + setFromOut(args);, + checkDir(args.getOutDir());, + checkDir(args.getOutDirSrc());, + checkDir(args.getOutDirRes());, + private static void setFromOut(JadxArgs args) {, + if (args.getOutDirSrc() == null) {, + args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, + }, + if (args.getOutDirRes() == null) {, + args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, + }, + }, +, + private static void checkDir(File dir) {, + throw new JadxArgsValidateException("Output directory exists as file " + dir);, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, + }, + setFromOut(args);, + checkDir(args.getOutDir());, + checkDir(args.getOutDirSrc());, + checkDir(args.getOutDirRes());, + private static void setFromOut(JadxArgs
[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +//import jadx.core.xmlgen.BinaryXMLParser;, + //BinaryXMLParser bxp = new BinaryXMLParser(args[0],args[1]);, + //bxp.parse();, + //System.exit(4);]
[+++ b/.gitignore, +*.orig, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + List<IDexTreeVisitor> getPasses() {, + return passes;, + }, +, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + List<IDexTreeVisitor> getPasses() {, + return passes;, + }, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ConstructorVisitor;, +import jadx.core.dex.visitors.InitCodeVariables;, +import jadx.core.dex.visitors.MarkFinallyVisitor;, +import jadx.core.dex.visitors.debuginfo.DebugInfoApplyVisitor;, +import jadx.core.dex.visitors.debuginfo.DebugInfoParseVisitor;, +import jadx.core.dex.visitors.regions.CleanRegions;, +import jadx.core.dex.visitors.regions.variables.ProcessVariables;, +import jadx.core.dex.visitors.typeinference.TypeInferenceVisitor;, + passes.add(new DebugInfoParseVisitor());, + passes.add(new BlockProcessor());, + passes.add(new BlockExceptionHandler());, + passes.add(new BlockFinish());, +, + passes.add(new SSATransform());, + passes.add(new ConstructorVisitor());, + passes.add(new InitCodeVariables());, + passes.add(new MarkFinallyVisitor());, + passes.add(new TypeInferenceVisitor());, + passes.add(new DebugInfoApplyVisitor());, + passes.add(new CleanRegions());, + passes.add(new ProcessVariables());, + passes.add(new
[+++ b/jadx-gui/src/main/java/jadx/gui/settings/JadxSettings.java, + private boolean checkForUpdates = false;, +++ b/jadx-gui/src/main/java/jadx/gui/settings/JadxSettings.java, + private boolean checkForUpdates = false;, +++ b/version, +0.6.1]
[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, + passes.add(new ProcessVariables());, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, + passes.add(new ProcessVariables());, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessVariables.java, +import jadx.core.dex.regions.loops.ForLoop;, +import jadx.core.dex.regions.loops.LoopRegion;, +import jadx.core.dex.regions.loops.LoopType;, + private static class CollectUsageRegionVisitor extends TracedRegionVisitor {, + private final List<RegisterArg> args;, + private final Map<Variable, Usage> usageMap;, +, + public CollectUsageRegionVisitor(Map<Variable, Usage> usageMap) {, + this.usageMap = usageMap;, + args = new ArrayList<RegisterArg>();, + regionProcess(mth, curRegion);, + if (insn.contains(AFlag.SKIP)) {, + continue;, + }, + args.clear();, + processInsn(insn, curRegion);, + }, + }, +, + private void regionProcess(MethodNode mth, IRegion region) {, + if (region instanceof LoopRegion) {, + LoopRegion loopRegion = (LoopRegion) region;, + LoopType loopType = loopRegion.getType();,
[+++ b/jadx-gui/src/main/java/jadx/gui/ui/TabbedPane.java, + if (getNodeFullName() != null) {, + menu.addSeparator();, + }, + String name = getNodeFullName();, + if (name != null) {, + Utils.setClipboardString(name);, + }, + }, +, + @Nullable, + private String getNodeFullName() {, + return jClass.getFullName();, + } else {, + return node.getName();, + return null;, +++ b/jadx-gui/src/main/java/jadx/gui/ui/TabbedPane.java, + if (getNodeFullName() != null) {, + menu.addSeparator();, + }, + String name = getNodeFullName();, + if (name != null) {, + Utils.setClipboardString(name);, + }, + }, +, + @Nullable, + private String getNodeFullName() {, + return jClass.getFullName();, + } else {, + return node.getName();, + return
[+++ b/jadx-core/src/main/java/jadx/core/utils/android/AndroidResourcesUtils.java, + final String resTypeName = resource.getTypeName();, + resTypeName,, + final String resName;, + if ("style".equals(resTypeName)) {, + resName = resource.getKeyName().replace('.', '_');, + } else {, + resName = resource.getKeyName();, + }]
[+++ b/.editorconfig, +# EditorConfig is awesome: https://EditorConfig.org, +root = true, +, +[*], +end_of_line = lf, +insert_final_newline = true, +, +indent_style = tab, +tab_width = 4, +, +charset = utf-8, +trim_trailing_whitespace = true, +, +[*.xml], +indent_size = 1, +, +[*.yml], +indent_style = space, +indent_size = 2, +, +[*.bat], +end_of_line = crlf, +++ b/.editorconfig, +# EditorConfig is awesome: https://EditorConfig.org, +root = true, +, +[*], +end_of_line = lf, +insert_final_newline = true, +, +indent_style = tab, +tab_width = 4, +, +charset = utf-8, +trim_trailing_whitespace = true, +, +[*.xml], +indent_size = 1, +, +[*.yml], +indent_style = space, +indent_size = 2, +, +[*.bat], +end_of_line =
[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + private static final Logger LOG = LoggerFactory.getLogger(ClassGen.class);, +, + if (mth.getAttributes().contains(AttributeFlag.INCONSISTENT_CODE)) {, + code.startLine("/* JADX WARNING: inconsistent code */");, + LOG.error(ErrorsCounter.formatErrorMsg(mth, " Inconsistent code"));, + mthGen.makeMethodDump(code);, + }, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + private static final Logger LOG = LoggerFactory.getLogger(ClassGen.class);, +, + if (mth.getAttributes().contains(AttributeFlag.INCONSISTENT_CODE)) {, + code.startLine("/* JADX WARNING: inconsistent code */");, + LOG.error(ErrorsCounter.formatErrorMsg(mth, " Inconsistent code"));, + mthGen.makeMethodDump(code);, + }, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, + makeMethodDump(code);, + public void makeMethodDump(CodeWriter code) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + private static final Logger LOG = LoggerFactory.getLogger(ClassGen.class);, +, +
[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, + if (domFrontier == null) {, + throw new JadxRuntimeException("Dominance frontier not set for block: " + this);, + }, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, + if (domFrontier == null) {, + throw new JadxRuntimeException("Dominance frontier not set for block: " + this);, + }, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinallyExtract.java, +import java.util.stream.Collectors;, + int removeApplied = 0;, + if (applyRemove(mth, removeInfo)) {, + removeApplied++;, + removeInfo.setApplied(true);, + }, + }, + if (removeApplied == 0) {, + if (removeApplied != removes.size()) {, + throw new JadxRuntimeException("Some finally instructions failed to remove: ", + + removes.stream().filter(n -> !n.isApplied()).map(BlocksRemoveInfo::toString).collect(Collectors.joining(",")), + );,
[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/FillArrayNode.java, +import jadx.core.dex.nodes.DexNode;, + public void mergeElementType(DexNode dex, ArgType foundElemType) {, + ArgType r = ArgType.merge(dex, elemType, foundElemType);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/FillArrayNode.java, +import jadx.core.dex.nodes.DexNode;, + public void mergeElementType(DexNode dex, ArgType foundElemType) {, + ArgType r = ArgType.merge(dex, elemType, foundElemType);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +import jadx.core.dex.nodes.DexNode;, + public static ArgType merge(@Nullable DexNode dex, ArgType a, ArgType b) {, + ArgType res = mergeInternal(dex, a, b);, + res = mergeInternal(dex, b, a); // swap, + private static ArgType mergeInternal(@Nullable DexNode dex, ArgType a, ArgType b) {, + return mergeArrays(dex, (ArrayArg) a, b);, + return mergeArrays(dex, (ArrayArg) b, a);, + if (dex == null) {,
[+++ /dev/null, +++ /dev/null, +++ b/.gitignore, +**/.DS_Store, +]
[+++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + InputFile inputFile = new InputFile(file);, + inputFiles.add(inputFile);, + while (inputFile.nextDexIndex != -1) {, + inputFile = new InputFile(file, inputFile.nextDexIndex);, + inputFiles.add(inputFile);, + }, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + InputFile inputFile = new InputFile(file);, + inputFiles.add(inputFile);, + while (inputFile.nextDexIndex != -1) {, + inputFile = new InputFile(file, inputFile.nextDexIndex);, + inputFiles.add(inputFile);, + }, +++ b/jadx-core/src/main/java/jadx/core/clsp/ConvertToClsSet.java, + InputFile inputFile = new InputFile(f);, + inputFiles.add(inputFile);, + while (inputFile.nextDexIndex != -1) {, + inputFile = new InputFile(f, inputFile.nextDexIndex);, + inputFiles.add(inputFile);, + }, + InputFile inputFile = new InputFile(file);, + inputFiles.add(inputFile);, + while (inputFile.nextDexIndex != -1) {, + inputFile = new InputFile(file, inputFile.nextDexIndex);, +
[+++ b/jadx-gui/src/main/java/jadx/gui/utils/Link.java, + new ProcessBuilder(), + .command(new String[] {"rundll32", "url.dll,FileProtocolHandler", url}), + .start();, + new ProcessBuilder(), + .command(new String[] {"open", url}), + .start();, + new ProcessBuilder(), + .command(new String[] {env.get("BROWSER"), url}), + .start();]
[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java, +import jadx.core.dex.instructions.args.RegisterArg;, +import org.jetbrains.annotations.Nullable;, + return castConstructorInsn(((InsnWrapArg) arg).getWrapInsn());, + if (arg.isRegister()) {, + return castConstructorInsn(((RegisterArg) arg).getAssignInsn());, + }, + return null;, + }, +, + @Nullable, + private ConstructorInsn castConstructorInsn(InsnNode coCandidate) {, + if (coCandidate != null && coCandidate.getType() == InsnType.CONSTRUCTOR) {, + return (ConstructorInsn) coCandidate;]
[+++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + * JadxDecompiler jadx = new JadxDecompiler();, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + * JadxDecompiler jadx = new JadxDecompiler();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, + instanceField(code, f.getField(), f.getInstanceArg());, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + * JadxDecompiler jadx = new JadxDecompiler();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, + instanceField(code, f.getField(), f.getInstanceArg());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/FieldArg.java, + // instArg equal 'null' for static fields, + private final InsnArg instArg;, + public FieldArg(FieldInfo field, InsnArg reg) {, + this.instArg = reg;, + public InsnArg getInstanceArg() {, + return instArg;, + return instArg == null;, + if (instArg != null ? !instArg.equals(fieldArg.instArg) : fieldArg.instArg != null) {, + result = 31 * result + (instArg !=
[+++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, + public String getTestName() {, + return this.getClass().getSimpleName();, + }, +, + public String getTestPkg() {, + return this.getClass().getPackage().getName().replace("jadx.tests.integration.", "");, + }, +, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, + public String getTestName() {, + return this.getClass().getSimpleName();, + }, +, + public String getTestPkg() {, + return this.getClass().getPackage().getName().replace("jadx.tests.integration.", "");, + }, +, +++ b/jadx-core/src/test/java/jadx/tests/api/SmaliTest.java, +import jadx.api.JadxInternalAccess;, +import jadx.core.dex.nodes.RootNode;, + protected List<ClassNode> loadFromSmaliFiles() {, + compileSmali(outDex, collectSmaliFiles(getTestPkg(), getTestName()));, + JadxDecompiler d = loadFiles(Collections.singletonList(outDex));, + RootNode root = JadxInternalAccess.getRoot(d);, + List<ClassNode> classes = root.getClasses(false);, + for (ClassNode cls : classes) {, + decompileAndCheckCls(d, cls);, + }, + return classes;, + assertThat("Smali files not
[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java, + && parentClass.equals(fieldsCls.getClassInfo()), + && field.getName().startsWith("this$") /* TODO: don't check name */) {, + if (args.isEmpty() || mth.contains(AFlag.SKIP_FIRST_ARG)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java, + && parentClass.equals(fieldsCls.getClassInfo()), + && field.getName().startsWith("this$") /* TODO: don't check name */) {, + if (args.isEmpty() || mth.contains(AFlag.SKIP_FIRST_ARG)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/MethodInlineVisitor.java, +import jadx.core.dex.instructions.InsnType;, +import jadx.core.dex.instructions.args.ArgType;, +import jadx.core.dex.instructions.args.InsnArg;, +import jadx.core.dex.instructions.args.RegisterArg;, +import java.util.List;, +, + BlockNode returnBlock = mth.getBasicBlocks().get(1);, + if (returnBlock.contains(AFlag.RETURN) || returnBlock.getInstructions().isEmpty()) {, + BlockNode firstBlock = mth.getBasicBlocks().get(0);, + inlineMth(mth, firstBlock, returnBlock);, + private static void inlineMth(MethodNode mth, BlockNode firstBlock, BlockNode returnBlock) {, + List<InsnNode> insnList = firstBlock.getInstructions();, + if (insnList.isEmpty()) {, + return;, + },
[+++ b/.gitignore, +++ b/.gitignore, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +, +++ b/.gitignore, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, + }, + if (srcDir == null) {, + args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, + }, + if (resDir == null) {, + args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, + }, + checkDir(args.getOutDir(), "Output");, + checkDir(args.getOutDirSrc(), "Source output");, + checkDir(args.getOutDirRes(), "Resources output");, + private static void checkDir(File dir, String desc) {, + throw new JadxArgsValidateException(desc + " directory exists as file " + dir);, +++ b/.gitignore, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, + }, + if (srcDir == null) {, + args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, + }, + if (resDir == null)
[+++ b/jadx-core/clsp-data/android-5.1.jar, +++ b/jadx-core/clsp-data/android-5.1.jar, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.nio.file.StandardCopyOption;, +import jadx.core.dex.instructions.args.RegisterArg;, +import jadx.core.dex.nodes.MethodNode;, + private static final int VERSION = 2;, + private enum ARG_TYPE {WILDCARD, GENERIC, GENERIC_TYPE, OBJECT, ARRAY, PRIMITIVE}, +, + cls.load();, + nClass.setMethods(loadMethods(cls, nClass));, + private NMethod[] loadMethods(ClassNode cls, NClass nClass) {, + List<NMethod> methods = new ArrayList<>();, + for (MethodNode m : cls.getMethods()) {, + if (!m.getAccessFlags().isPublic(), + && !m.getAccessFlags().isProtected()) {, + continue;, + }, +, + List<ArgType> args = new ArrayList<>();, +, + boolean genericArg = false;, + for (RegisterArg r: m.getArguments(false)) {, + ArgType argType = r.getType();, + if (argType.isGeneric())
[+++ b/README.md, +++ b/README.md, +++ b/callback/src/main/java/com/iluwatar/App.java, + * Callback pattern is more native for dynamic languages where function are first-class citizen., +++ b/README.md, +++ b/callback/src/main/java/com/iluwatar/App.java, + * Callback pattern is more native for dynamic languages where function are first-class citizen., +++ b/execute-around/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, + <artifactId>execute-around</artifactId>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/README.md, +++ b/callback/src/main/java/com/iluwatar/App.java, + * Callback pattern is more native for dynamic languages where function are first-class citizen., +++
[+++ b/facade/README.md, +![alt text](./etc/facade_1.png "Facade"), +++ b/facade/README.md, +![alt text](./etc/facade_1.png "Facade"), +++ b/facade/etc/facade.png, +++ b/facade/README.md, +![alt text](./etc/facade_1.png "Facade"), +++ b/facade/etc/facade.png, +++ b/facade/etc/facade.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <class id="1" language="java" name="com.iluwatar.facade.DwarvenGoldmineFacade" project="facade" , + file="/facade/src/main/java/com/iluwatar/facade/DwarvenGoldmineFacade.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="160" width="376" x="50" y="263"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </class> , + <class id="2" language="java" name="com.iluwatar.facade.DwarvenMineWorker" project="facade" , +
[+++ b/data-mapper/README.md, +---
[+++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.15.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/retry/src/main/java/com/iluwatar/retry/App.java, + errorWithRetryExponentialBackoff();, + , + private static void errorWithRetryExponentialBackoff() throws Exception {, + final RetryExponentialBackoff<String> retry = new RetryExponentialBackoff<>(, + new FindCustomer("123", new CustomerNotFoundException("not found")),, + 6, //6 attempts, + 30000, //30 s max delay between attempts, + e -> CustomerNotFoundException.class.isAssignableFrom(e.getClass()), + );, + op = retry;, + final String customerId = op.perform();, + LOG.info(String.format(, + "However, retrying the operation while ignoring a recoverable error will eventually yield ", + + "the result %s after a number of attempts %s", customerId, retry.attempts(), + ));, + }, +++ b/retry/src/main/java/com/iluwatar/retry/App.java, + errorWithRetryExponentialBackoff();, + , + private static void errorWithRetryExponentialBackoff()
[+++ b/ambassador/src/main/java/com/iluwatar/ambassador/util/RandomProvider.java, +/**, + * The MIT License, + * Copyright (c) 2014 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ModemVisitor.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/pom.xml, + <module>service-locator</module>, +++ b/pom.xml, + <module>service-locator</module>, +++ b/service-locator/etc/model.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.7" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , + realizations="true" associations="true" dependencies="false" nesting-relationships="true"> , + <interface id="1" language="java" name="com.iluwater.Service" project="service-locator" , + file="/service-locator/src/main/java/com/iluwater/Service.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="110" y="182"/> , + <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , + sort-features="false" accessors="true" visibility="true"> , + <attributes public="true" package="true" protected="true" private="true" static="true"/> , + <operations public="true" package="true" protected="true" private="true" static="true"/> , + </display> , + </interface> , + <class id="2" language="java" name="com.iluwater.ServiceImpl" project="service-locator" , + file="/service-locator/src/main/java/com/iluwater/ServiceImpl.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="342" y="374"/> ,
[+++ b/strategy/src/main/java/com/iluwatar/strategy/MeleeStrategy.java, + System.out.println("With your Excalibur you sever the dragon's head!");
[+++ b/checkstyle.xml, +<?xml version="1.0"?>, +<!DOCTYPE module PUBLIC, + "-//Puppy Crawl//DTD Check Configuration 1.3//EN", + "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +, +<!--, +, + Source = https://github.com/checkstyle/checkstyle/tree/master/src/main/resources, +, + Checkstyle configurartion that checks the Google coding conventions from:, + , + - Google Java Style, + https://google-styleguide.googlecode.com/svn-history/r130/trunk/javaguide.html, + , + Checkstyle is very configurable. Be sure to read the documentation at, + http://checkstyle.sf.net (or in your downloaded distribution)., +, + Most Checks are configurable, be sure to consult the documentation., +, + To completely disable a check, just comment it out or delete it from the file., +, + Authors: Max Vetrenko, Ruslan Diachenko,
[+++ b/.travis.yml, +sudo: false, +++ b/.travis.yml, +sudo: false, +++ /dev/null, +++ b/.travis.yml, +sudo: false, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented,
[+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/AbstractHolderTest.java, +package com.iluwatar.lazy.loading;, +, +import org.junit.Test;, +, +import static junit.framework.Assert.assertNotNull;, +import static junit.framework.Assert.assertSame;, +import static junit.framework.TestCase.assertNull;, +, +/**, + * Date: 12/19/15 - 11:58 AM, + *, + * @author Jeroen Meulemeester, + */, +public abstract class AbstractHolderTest {, +, + /**, + * Get the internal state of the holder value, + *, + * @return The internal value, + */, + abstract Heavy getInternalHeavyValue() throws Exception;, +, + /**, + * Request a lazy loaded {@link Heavy} object from the holder., + *, + * @return The lazy loaded {@link Heavy} object, + */, + abstract
[+++ b/data-bus/.gitignore, +/target, +++ b/data-bus/.gitignore, +/target, +++ b/data-bus/README.md, +--- # this is so called 'Yaml Front Matter', read up on it here: http://jekyllrb.com/docs/frontmatter/, +layout: pattern # layout must allways be pattern, +title: Data Bus # the properly formatted title, +folder: data-bus # the folder name in which this pattern lies, +permalink: /patterns/data-bus/ # the permalink to the pattern, to keep this uniform please stick to /patterns/FOLDER/, +, +# both categories and tags are Yaml Lists, +# you can either just pick one or write a list with '-'s, +# usable categories and tags are listed here: https://github.com/iluwatar/java-design-patterns/blob/gh-pages/_config.yml, +categories: Architectural
[+++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +++ b/README.md, +If you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki)., +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, +, + * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that, + * have a common theme without specifying their concrete classes. In normal usage, the client, + * software creates a concrete implementation of the abstract factory and then uses the generic, + * interface of the
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + public static class FactoryMaker {, +, + private FactoryMaker() {, + }, +, + public enum KingdomType {, + ELF, ORC, + }, +, + * Program entry point., +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + public static class FactoryMaker {, +, + private FactoryMaker() {, + }, +, + public enum KingdomType {, + ELF, ORC, + }, +, + * Program entry point., +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +import org.junit.Before;, +import org.junit.Test;, +]
[+++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/index.md, +layout: pattern, +title: Event Driven Architecture, +folder: event-driven-architecture, +permalink: /patterns/event-driven-architecture, +, +, +**Intent:** Send and notify state changes of your objects to other applications using an Event-driven Architecture., +, +![alt text](./etc/class_diagram.png "Event Driven Architecture"), +, +**Applicability:** Use an Event-driven architecture when, +, +* you want to create a loosely coupled system, +* you want to build a more responsive system, +* you want a system that is easier to extend, +, +**Real world examples:**, +, +* SendGrid, an email API, sends events whenever an email is processed, delivered, opened etc... (https://sendgrid.com/docs/API_Reference/Webhooks/event.html), +* Chargify,
[+++ b/pom.xml, + <module>retry</module>, +++ b/pom.xml, + <module>retry</module>, +++ b/retry/README.md, +---, +layout: pattern, +title: Retry, +folder: retry, +permalink: /patterns/retry/, +categories: other, +tags:, + - java, + - difficulty-expert, + - performance, +---, +, +## Retry / resiliency, +Enables an application to handle transient failures from external resources., +, +## Intent, +Transparently retry certain operations that involve communication with external, +resources, particularly over the network, isolating calling code from the , +retry implementation details., +, +![alt text](./etc/retry.png "Retry"), +, +## Explanation, +The `Retry` pattern consists retrying operations on remote resources over the , +network a set number of times. It
[+++ b/property/src/main/java/com/iluwatar/property/App.java, + * The Property pattern is also known as Prototype inheritance., + * <p>, + * In this example we demonstrate {@link Character} instantiation using the Property pattern.]
[+++ b/observer/src/test/java/com/iluwatar/observer/AppTest.java]
[+++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java, +import static org.junit.jupiter.api.Assertions.assertEquals;, + // In order to assure that throttling limits will not be reset, we use an empty throttling implementation, + Throttler timer = () -> {};, + assertEquals(2, counter, "Counter limit must be reached");]
[+++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ /dev/null, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ /dev/null, +++ /dev/null, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId, doc.getString("userName"), doc.getString("additionalInfo"));, +++ b/dao/src/main/java/com/iluwatar/dao/Customer.java, + return getId();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, + return new UserAccount(userId,
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, + <img alt="Coverity Scan Build Status", + src="https://scan.coverity.com/projects/5634/badge.svg"/>, +</a>, +, +, +<a name="top"/>, +, +# <a name="toc">Table of Contents</a>, + - <a href="#introduction">Introduction</a>, + - <a href="#contribute">How to contribute</a>, + - <a href="#faq">Frequently Asked Questions</a>, + - <a href="#credits">Credits</a>, + - <a href="#license">License</a>, +, +, +# <a name="introduction">Introduction</a> [&#8593;](#top), +# <a name="contribute">How to contribute</a> [&#8593;](#top), +, +# <a name="faq">Frequently asked questions</a> [&#8593;](#top), +, +**<a id="Q1">Q: What is the difference between State and Strategy patterns?</a>**, +, +While the implementation is similar they solve different problems. The State, +pattern
[+++ b/twin/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/twin/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/twin/src/main/java/com/iluwatar/twin/App.java, + Thread.sleep(750);, +++ b/twin/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/twin/src/main/java/com/iluwatar/twin/App.java, + Thread.sleep(750);, +++ b/twin/src/main/java/com/iluwatar/twin/BallThread.java, + if (!isSuspended) {, + }, + Thread.sleep(250);, +++ b/twin/pom.xml, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/twin/src/main/java/com/iluwatar/twin/App.java, + Thread.sleep(750);, +++ b/twin/src/main/java/com/iluwatar/twin/BallThread.java, + if (!isSuspended) {, + }, + Thread.sleep(250);, +++ b/twin/src/test/java/com/iluwatar/twin/BallItemTest.java, +package com.iluwatar.twin;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;,
[+++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + troll = new ClubbedTroll(troll);, + troll.attack();, + troll.fleeBattle();, + LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at
[+++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/information-microservice/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/inventory-microservice/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-document/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/abstract-factory/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/adapter/pom.xml, + <version>1.13.0-SNAPSHOT</version>, +++ b/aggregator-microservices/aggregator-service/pom.xml, +
[+++ b/pom.xml, + <module>unit-of-work</module>, + </goals>, +++ b/pom.xml, + <module>unit-of-work</module>, + </goals>, +++ b/unit-of-work/etc/unit-of-work.urm.puml, +@startuml, +package com.iluwatar.unitofwork {, + class Student {, + - address : String, + - id : Integer, + - name : String, + + Student(id : Integer, name : String, address : String), + }, +}, +@enduml, +++ b/pom.xml, + <module>unit-of-work</module>, + </goals>, +++ b/unit-of-work/etc/unit-of-work.urm.puml, +@startuml, +package com.iluwatar.unitofwork {, + class Student {, + - address : String, + - id : Integer, + - name : String, + + Student(id : Integer, name : String, address : String), + }, +}, +@enduml, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.travis.yml, + , +# Parameter to run on container based infrastructure, +sudo: false, +++ b/.travis.yml, + , +# Parameter to run on container based infrastructure, +sudo: false, +++ b/README.md, +++ b/.travis.yml, + , +# Parameter to run on container based infrastructure, +sudo: false, +++ b/README.md, +++ /dev/null, +++ b/.travis.yml, + , +# Parameter to run on container based infrastructure, +sudo: false, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, + , +# Parameter to run on container based infrastructure, +sudo: false, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, + , +# Parameter to run on
[+++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/hexagonal/README.md, +## Tutorials, +* [Build Maintainable Systems With Hexagonal Architecture](http://java-design-patterns.com/blog/build-maintainable-systems-with-hexagonal-architecture/), +]
[+++ b/execute-around/index.md, +++ b/execute-around/index.md, +++ b/pom.xml, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/execute-around/index.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java]
[+++ b/singleton/README.md, +, +## Explanation, +Real world example, +> There can only be one ivory tower where the wizards study their magic. The same enchanted ivory tower is always used by the wizards. Ivory tower here is singleton., +, +In plain words, +> Ensures that only one object of a particular class is ever created., +, +Wikipedia says, +> In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system., +, +**Programmatic Example**, +,
[+++ b/pom.xml, + <aws-lambda-core.version>1.1.0</aws-lambda-core.version>, + <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, + <aws-lambda-log4j.version>1.0.0</aws-lambda-log4j.version>, + <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, + <jackson.version>2.8.5</jackson.version>, + <module>serverless</module>, +++ b/pom.xml, + <aws-lambda-core.version>1.1.0</aws-lambda-core.version>, + <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, + <aws-lambda-log4j.version>1.0.0</aws-lambda-log4j.version>, + <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, + <jackson.version>2.8.5</jackson.version>, + <module>serverless</module>, +++ b/serverless/README.md, +---, +layout: pattern, +title: serverless, +folder: serverless, +permalink: /patterns/serverless/, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermittent, +---, +, +## Serverless, +, +Serverless eliminates the need to plan for infrastructure and let's you focus on your , +application. , +, +Following are optimization katas you should be aware of while building a serverless , +applications, +, +* The Lean function, + * Concise logic - Use functions to
[+++ b/bridge/etc/bridge.png, +++ b/bridge/etc/bridge.png, +++ b/bridge/etc/bridge.ucls, + <class id="1" language="java" name="com.iluwatar.bridge.FlyingMagicWeaponImpl" project="bridge" , + file="/bridge/src/main/java/com/iluwatar/bridge/FlyingMagicWeaponImpl.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="515" y="591"/> , + <class id="2" language="java" name="com.iluwatar.bridge.SoulEatingMagicWeaponImpl" project="bridge" , + file="/bridge/src/main/java/com/iluwatar/bridge/SoulEatingMagicWeaponImpl.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="791" y="605"/> , + <position height="-1" width="-1" x="791" y="788"/> , + <class id="4" language="java" name="com.iluwatar.bridge.MagicWeaponImpl" project="bridge" , + file="/bridge/src/main/java/com/iluwatar/bridge/MagicWeaponImpl.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="791" y="433"/> , + <class id="5" language="java" name="com.iluwatar.bridge.BlindingMagicWeaponImpl" project="bridge" , + file="/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeaponImpl.java" binary="false" corner="BOTTOM_RIGHT"> , + <position height="-1" width="-1" x="1105" y="593"/> , + <position height="-1" width="-1" x="380" y="21"/> , + <position height="-1"
[+++ b/data-mapper/src/main/java/com/iluwatar/datamapper/App.java, + private static final String DB_TYPE_FIRST = "first";
[+++ b/.travis.yml, +sudo: false, +++ b/.travis.yml, +sudo: false, +++ /dev/null, +++ b/.travis.yml, +sudo: false, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml]
[+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java, + Zoom zoom = new Zoom();, + conDos.visit(zoom);, + Hayes hayes = new Hayes();, + conDos.visit(hayes);, +++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java, + Zoom zoom = new Zoom();, + conDos.visit(zoom);, + Hayes hayes = new Hayes();, + conDos.visit(hayes);, +++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java, + Zoom zoom = new Zoom();, + conUnix.visit(zoom);]
[+++ b/layers/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, + <groupId>com.iluwatar.layers</groupId>, + <artifactId>layers</artifactId>, + <dependencies>, + <dependency>, + <groupId>org.springframework.data</groupId>, + <artifactId>spring-data-jpa</artifactId>, + </dependency>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-entitymanager</artifactId>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + </dependency> , + <dependency>, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + </dependency>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/layers/pom.xml, +<?xml version="1.0"?>, +<project, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd", + xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>com.iluwatar</groupId>, + <artifactId>java-design-patterns</artifactId>, + <version>1.5.0</version>, + </parent>, +
[+++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, + System.out.println("Constructing parts and car");, + System.out.println("Here is our car:");, + System.out.println("-> model: " + car.getModel().get());, + System.out.println("-> price: " + car.getPrice().get());, + System.out.println("-> parts: ");, + car.getParts().forEach(p -> System.out, + .println("\t" + p.getType().get() + "/" + p.getModel().get() + "/" + p.getPrice().get()));, +++ b/.travis.yml, + - secure: "eoWlW9GyTJY04P8K3pxayXwU9/hmptQg/LfirispQkV9YvmziCfSzXnatnBhNfud98sCzY8BScXnb+OWLTnjLKpId4rtEqb0aJ40Jc32cUKzgzFAUn7cNcDAbUIfyPAGVqyQqfj/11wYSADwWMMOPlW97ExUtoyiH2WenXuRHso=", +- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.host.url=https://sonarqube.com -Dsonar.login=$SONAR_TOKEN, +++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java, + System.out.println("Constructing parts and car");, + System.out.println("Here is our car:");, +
[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/HayesVisitor.java, +/**, + * The MIT License, + * Copyright (c) 2014-2016 Ilkka Seppälä, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/prototype/src/main/java/com/iluwatar/prototype/App.java, + * The Prototype pattern is a creational design pattern in software development. It is , + * used when the type of objects to create is determined by a prototypical instance, , + * which is cloned to produce new objects. This pattern is used to:, + * - avoid subclasses of an object creator in the client application, like the abstract factory pattern does., + * - avoid the inherent cost of creating a new object in the standard way (e.g., using the 'new' keyword), + * <p>, + * In this example we have
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/adapter/pom.xml, + <version>1.2.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/adapter/pom.xml, + <version>1.2.0</version>, +++ b/bridge/pom.xml, + <version>1.2.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/adapter/pom.xml, + <version>1.2.0</version>, +++ b/bridge/pom.xml, + <version>1.2.0</version>, +++ b/builder/pom.xml, + <version>1.2.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/adapter/pom.xml, + <version>1.2.0</version>, +++ b/bridge/pom.xml, + <version>1.2.0</version>, +++ b/builder/pom.xml, + <version>1.2.0</version>, +++ b/callback/pom.xml, + <version>1.2.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/adapter/pom.xml, + <version>1.2.0</version>, +++ b/bridge/pom.xml, + <version>1.2.0</version>, +++ b/builder/pom.xml, + <version>1.2.0</version>, +++ b/callback/pom.xml, + <version>1.2.0</version>, +++ b/chain/pom.xml, + <version>1.2.0</version>, +++ b/abstract-factory/pom.xml, + <version>1.2.0</version>, +++ b/adapter/pom.xml, + <version>1.2.0</version>, +++ b/bridge/pom.xml, + <version>1.2.0</version>, +++ b/builder/pom.xml, +
[+++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/caching/etc/caching.png, +++ b/caching/README.md, +* [Cache-Aside](https://msdn.microsoft.com/en-us/library/dn589799.aspx), +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, +<class-diagram version="1.1.11" icons="true" automaticImage="PNG" always-add-relationships="false", + generalizations="true" realizations="true" associations="true" dependencies="false" nesting-relationships="true", + router="FAN">, + <class id="1" language="java" name="com.iluwatar.caching.CacheStore" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/CacheStore.java" binary="false" corner="BOTTOM_RIGHT">, + <position height="-1" width="-1" x="322" y="444"/>, + <class id="2" language="java" name="com.iluwatar.caching.LruCache" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/LruCache.java" binary="false" corner="BOTTOM_RIGHT">, + <position height="-1" width="-1" x="700" y="446"/>, + <enumeration id="3" language="java" name="com.iluwatar.caching.CachingPolicy" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/CachingPolicy.java" binary="false" corner="BOTTOM_RIGHT">, + <position height="-1" width="-1" x="943" y="122"/>, + <class id="4" language="java" name="com.iluwatar.caching.DbManager" project="caching", + file="/caching/src/main/java/com/iluwatar/caching/DbManager.java" binary="false" corner="BOTTOM_RIGHT">, + <position height="-1" width="-1" x="1011" y="426"/>, + <class id="5" language="java"
[+++ b/converter/src/main/java/com/iluwatar/converter/Converter.java, + * @param dto DTO entity, + public final U convertFromDto(final T dto) {, + return fromDto.apply(dto);, + * @param entity domain entity, + public final T convertFromEntity(final U entity) {, + return fromEntity.apply(entity);, + * @param dtos collection of DTO entities, + public final List<U> createFromDtos(final Collection<T> dtos) {, + return dtos.stream().map(this::convertFromDto).collect(Collectors.toList());, + * @param entities collection of domain entities, + public final List<T> createFromEntities(final Collection<U> entities) {, + return entities.stream().map(this::convertFromEntity).collect(Collectors.toList());]
[+++ b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/resource/acquisition/is/initialization/App.java, + * <p>, + * <p>, + * interfaces {@link Closeable} and {@link AutoCloseable}. The try-with-resources , + * statement. Any object that implements {@link java.lang.AutoCloseable}, which , + * includes all objects which implement {@link java.io.Closeable}, can be used , + * In this example, {@link SlidingDoor} implements {@link AutoCloseable} and , + * {@link TreasureChest} implements {@link Closeable}. Running the example, we can, + * <p>, + /**, + * Program entry point, + * @param args command line args, + * @throws Exception, + */, +++ b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/resource/acquisition/is/initialization/App.java, + * <p>, + * <p>, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/aggregator-microservices/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/aggregator-microservices/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/aggregator-microservices/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/aggregator-microservices/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java, + app.createKingdom(new ElfKingdomFactory());, + app.createKingdom(new OrcKingdomFactory());, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, + elfFactory = new ElfKingdomFactory();, + orcFactory = new OrcKingdomFactory();]
[+++ b/api-gateway/image-microservice/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/api-gateway/image-microservice/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/api-gateway/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/api-gateway/image-microservice/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/api-gateway/pom.xml, + <version>1.12.0-SNAPSHOT</version>, +++ b/api-gateway/price-microservice/pom.xml, + <version>1.12.0-SNAPSHOT</version>]
[+++ b/abstract-factory/README.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family
[+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.when;, +, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.when;, +, +++ b/aggregator-microservices/information-microservice/src/main/java/com/iluwatar/information/microservice/InformationController.java, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.when;, +, +++ b/aggregator-microservices/information-microservice/src/main/java/com/iluwatar/information/microservice/InformationController.java, +++ b/aggregator-microservices/information-microservice/src/test/java/com/iluwatar/information/microservice/InformationControllerTest.java, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.when;, +, +++ b/aggregator-microservices/information-microservice/src/main/java/com/iluwatar/information/microservice/InformationController.java, +++ b/aggregator-microservices/information-microservice/src/test/java/com/iluwatar/information/microservice/InformationControllerTest.java, +++ b/aggregator-microservices/inventory-microservice/src/main/java/com/iluwatar/inventory/microservice/InventoryController.java, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.when;, +, +++ b/aggregator-microservices/information-microservice/src/main/java/com/iluwatar/information/microservice/InformationController.java, +++ b/aggregator-microservices/information-microservice/src/test/java/com/iluwatar/information/microservice/InformationControllerTest.java, +++ b/aggregator-microservices/inventory-microservice/src/main/java/com/iluwatar/inventory/microservice/InventoryController.java, +++ b/aggregator-microservices/inventory-microservice/src/test/java/com/iluwatar/inventory/microservice/InventoryControllerTest.java, +, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java, +++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/App.java, +++ b/aggregator-microservices/aggregator-service/src/test/java/com/iluwatar/aggregator/microservices/AggregatorTest.java, +import
[+++ b/_scripts/postPumlsToServer.firstrun.output, +parent: half-sync-half-async; artifact: half-sync-half-async, +Puml Server ID: RScv3SCm3030LU819FRPXg5fIm552tnYPFiyjRi3RkbAaYkdoQr5JBy369vrxz7oaSv6XmPhL3e6TCaJ0msU-CAoilTToyG8DdKOw5z0GzcAlvNAN_WZSD1brBHHPmxv0000, +parent: abstract-document; artifact: abstract-document, +Puml Server ID: PSjB3eCm34NHhPG599vtDyQn85L-ifzX-p3lxEf8Twj3MXGDQvyJMFubChxpKN767gucSq07iinEjSNDOACVNvoAUZr6MWoe3QVE_WRnxZ0Mf38b-hkIGlurX_MyehS7, +parent: tolerant-reader; artifact: tolerant-reader, +Puml Server ID: NSZ14SCm20NHLf829ExfXaYChGn26lZ4xSVdtFRjSrZJx9AkZnFOyI9olkenSEOxGxmjWnXgMvE6viLWfmz_kNI9SLZP38XRqEIuWx1Kd0t5XVjjGVj_DNtMdLD_, +parent: event-driven-architecture; artifact: event-driven-architecture, +Puml Server ID: TOhH3SCW30LNQGS0_tSRnrZ15H1adfFromBzkfFktZQaHT7mzgh0N1yYvoUVXXf7B7Mv1dGWozN9MZmCTlhopQdeidEaoO3wMDHvRI6zzvwAssPYbsfGGRYIGlxN7DxpZDv-, +parent: publish-subscribe; artifact: publish-subscribe, +Puml Server ID: PSZB3SCm203GLTe1RExT1XCKKs5YyMdMR--zFRsd66aTNAwFcRdZ1U1uzrDorgXWfykIBJjT2qJhnaI7Dtwm7HnoMjkOoMu12-C7s3LKOhQe4UGo63ZfVtlvwhkMVW40, +parent: facade; artifact: facade, +Puml Server ID: BSP15eCm20N0gxG7CEoz3ILKqvTW7dpq-hhehERTJ7fMJU-l7PYn4ZbVPMlOyvEXBeT13KMEGQtdnM2d7v-yL8sssJ8PKBUWmV64lYnSbHJoRqaVPUReDm00, +parent: service-locator; artifact: service-locator, +Puml Server ID: NSjB3iCm203HgxG7iDdtDeIWX0fZYqzo_MRTtUX9ynOZhPtBzNLchlW0EDxza3nhgs2dQScMdUO0qRenqU6B5xQTGmvh2pFPBM1WF07FSmbnqqcOqu6J_gsNZxvgw0y0, +parent: dao; artifact: dao, +Puml Server ID: 5SR14OKW30N0LhG0oVrt4o6ZE12Ov4NR_thQNQlc5aN2sd82qtz4naywAixOmyNoK8WYvT6fjdWOR7JnpLiHhuTkam4nTUhiRwZm847-J64zpUZj3m00, +parent: model-view-presenter; artifact: model-view-presenter, +Puml Server ID: ROlR3SGW3C1MkGu0-RzjKeXQJWcWFChwPO3xispvQBrmL0hbp-q-xGkWkFBL_8upZBICxjGzbo7GE1OwAlpmmLJ9sjNJH7VIRY1e6q169KvFevMcakrtI_BoD-HGoJE4Nm00, +parent: observer; artifact: observer, +Puml Server ID: FSkn4OGm30NHLg00hFow4KO3PcpP8tr1-pYwx6smQz5Suv2mkbp0y1-HyPlEWYlsSB7S5Q98kJSgDLu66ztyy7Q8brEtmO2OEZNs2Uhxl9u9GVv72cjfHAiV, +parent: intercepting-filter; artifact: intercepting-filter, +Puml Server ID: RSfB3i8m303Hgy014k-vZN5DQkIuaJ_q-fGzkz7JtCL8Q-DolUsPAnu0ZcSVadizAzZfi6JBJiS4qJenqU6D7smRXmnh2pFPBM1YN05o_KwyKcoqb-ZFEEcVz_BPLqtz0W00, +parent: factory-method; artifact: factory-method, +Puml Server ID: NSZB3G8n30N0Lg20n7UwCOxPP9MVx6TMT0zdRgEvjoazYeRrMmMsFuYChtmqr7Y6gycQq8aiQr3hSJ7OwEGtfwBUZfas0shJQR3_G2yMBFkaeQYha4B-AeUDl6FqBm00, +parent:
[+++ b/.travis.yml, +, + - "export DISPLAY=:99.0", + - "sh -e /etc/init.d/xvfb start", +# Migration to container-based infrastructure , +++ b/.travis.yml, +, + - "export DISPLAY=:99.0", + - "sh -e /etc/init.d/xvfb start", +# Migration to container-based infrastructure , +++ b/README.md, +* [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612), +* [Pattern Oriented Software Architecture Vol I-V](http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Patterns/dp/0471958697), +++ b/.travis.yml, +, + - "export DISPLAY=:99.0", + - "sh -e /etc/init.d/xvfb start", +# Migration to container-based infrastructure , +++ b/README.md, +* [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612), +* [Pattern Oriented Software Architecture Vol I-V](http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Patterns/dp/0471958697), +++ b/abstract-factory/index.md, +tags: Java, +++ b/.travis.yml, +, +
[+++ b/hexagonal/README.md, +---, +layout: pattern, +title: Hexagonal Architecture, +folder: hexagonal, +permalink: /patterns/hexagonal/, +categories: Architectural, +tags:, + - Java, + - Difficulty-Expert, +---, +, +## Intent, +Allow an application to equally be driven by users, programs, automated test or batch scripts, and to be developed and tested in isolation from its eventual run-time devices and databases., +, +![Hexagonal Architecture class diagram](./etc/hexagonal.png), +, +## Applicability, +Use Hexagonal Architecture pattern when, +, +* it is important that the application is fully testable, +* you use Domain Driven Design methodology and/or Microservices architectural style, +, +## Real world examples, +, +* [Apache Isis](https://isis.apache.org/),
[+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head = null;, + Node end = null;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head = null;, + Node end = null;, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, + private boolean handled = false;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head = null;, + Node end = null;, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, + private boolean handled = false;, +++ b/factory-kit/etc/factory-kit.png, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache = null;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head
[+++ b/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/README.md, +* [Poison Pill](#poison-pill), +## <a name="poison-pill">Poison Pill</a> [&#8593;](#list-of-design-patterns), +**Intent:** Poison Pill is known predefined data item that allows to provide graceful shutdown for separate distributed consumption process., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/poison-pill/etc/poison-pill.png "Poison Pill"), +, +**Applicability:** Use the Poison Pill idiom when, +* need to send signal from one thread/process to another to terminate, +++ b/README.md, +* [Poison Pill](#poison-pill), +## <a name="poison-pill">Poison Pill</a> [&#8593;](#list-of-design-patterns), +**Intent:** Poison Pill is known predefined data item that allows to provide graceful shutdown for separate distributed consumption process., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/poison-pill/etc/poison-pill.png "Poison Pill"), +, +**Applicability:** Use the Poison Pill idiom when, +* need to
[+++ b/tls/src/test/java/com/iluwatar/tls/DateFormatCallableTest.java, +/**, + * The MIT License, + * Copyright (c) 2016 Thomas Bauer, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + *
[+++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import org.junit.jupiter.api.TestInstance;, +@TestInstance(TestInstance.Lifecycle.PER_CLASS), + * Create a new set of test entries with the expected result, + *, + * @return The list of parameters used during this test, + */, + public abstract Stream<Arguments> expressionProvider();, +, + /**, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import org.junit.jupiter.api.TestInstance;, +@TestInstance(TestInstance.Lifecycle.PER_CLASS), + * Create a new set of test entries with the expected result, + *, + * @return The list of parameters used during this test, + */, + public abstract Stream<Arguments> expressionProvider();, +, + /**, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/MinusExpressionTest.java, + @Override, + public Stream<Arguments> expressionProvider() {, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import org.junit.jupiter.api.TestInstance;, +@TestInstance(TestInstance.Lifecycle.PER_CLASS), + * Create
[+++ b/data-transfer-object/README.md, +---, +layout: pattern, +title: Data Transfer Object, +folder: data-transfer-object, +permalink: /patterns/data-transfer-object/, +categories: Architectural, +tags:, + - Java, + - KISS, + - YAGNI, + - Difficulty-Beginner, +---, +, +## Intent, +Pass data with multiple attributes in one shot from client to server,, +to avoid multiple calls to remote server. , +, +![alt text](./etc/data-transfer-object.urm.png "data-transfer-object"), +, +## Applicability, +Use the Data Transfer Object pattern when, +, +* The client is asking for multiple information. And the information is related., +* When you want to boost the performance to get resources., +* You want reduced number of remote calls.,
[+++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: "LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=", +, + - bash update-ghpages.sh, +++ b/.travis.yml, +env:, + global:, + - GH_REF: github.com/iluwatar/java-design-patterns.git, + - secure: "LxTDuNS/rBWIvKkaEqr79ImZAe48mCdoYCF41coxNXgNoippo4GIBArknqtv+XvdkiuRZ1yGyj6pn8GU33c/yn+krddTUkVCwTbVatbalW5jhQjDbHYym/JcxaK9ZS/3JTeGcWrBgiPqHEEDhCf26vPZsXoMSeVCEORVKTp1BSg=", +, + - bash update-ghpages.sh, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns), +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +[![Coverity Scan Build Status](https://scan.coverity.com/projects/5634/badge.svg)](https://scan.coverity.com/projects/5634), +# Introduction, +# Getting started, +Before you dive into the material, you should be familiar with various , +[Programming/Software Design Principles](http://webpro.github.io/programming-principles/). , +, +Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches, +, + - Using difficulty tags, `Difficulty-Beginner`, `Difficulty-Intermediate` & `Difficulty-Expert`.,
[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Message.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Message.java, +++ /dev/null, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Message.java, +++ /dev/null, +++ /dev/null, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Message.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java, +++
[+++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/App.java, + * <p>, + , + /**, + * Program entry point, + * @param args command line args, + */, +++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/App.java, + * <p>, + , + /**, + * Program entry point, + * @param args command line args, + */, +++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/CharacterStepBuilder.java, +++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/App.java, + * <p>, + , + /**, + * Program entry point, + * @param args command line args, + */, +++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/CharacterStepBuilder.java, +++ b/step-builder/src/test/java/com/iluwatar/stepbuilder/AppTest.java, +/**, + * , + * Application test, + *, + */]
[+++ b/abstract-document/etc/abstract-document.urm.puml, + interface HasParts {, + + PROPERTY : String {static}, + + getParts() : Stream<Part>, + }, + interface HasType {, + + PROPERTY : String {static}, + + getType() : Optional<String>, + }, + interface HasPrice {, + + PROPERTY : String {static}, + + getPrice() : Optional<Number>, + }, + interface Document {, + + children(String, Function<Map<String, Object>, T>) : Stream<T> {abstract}, + + get(String) : Object {abstract}, + + put(String, Object) {abstract}, + class App {, + + App(), + + main(args : String[]) {static}, +HasParts --|> Document , +AbstractDocument ..|> Document , +HasType
[+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head;, + Node end;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head;, + Node end;, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, + private boolean handled;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head;, + Node end;, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, + private boolean handled;, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, + private TYPE next;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, + static LruCache cache;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, + Node head;, + Node end;, +++ b/chain/src/main/java/com/iluwatar/chain/Request.java, + private boolean handled;, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, + private TYPE next;, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, + int currentIndex;, + private
[+++ b/tls/src/main/java/com/iluwatar/tls/App.java, + System.out.println("Abnormal end of program. Program throws exception: " + e); ]
[+++ b/.gitignore, +target
[+++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceInterface.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceInterface.java, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/ServiceAmbassador.java]
[+++ b/src/main/java/org/jfree/chart/text/TextBox.java, +/* ===========================================================, + * JFreeChart : a free chart library for the Java(tm) platform, + * ===========================================================, + *, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + *, + * Project Info: http://www.jfree.org/jfreechart/index.html, + *, + * This library is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as published by, + * the Free Software Foundation; either version 2.1 of the License, or, + * (at your option) any later version., + *, + * This library is distributed
[+++ b/src/main/java/org/jfree/chart/annotations/CategoryPointerAnnotation.java, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + * (C) Copyright 2006-2017, by Object Refinery Limited., + this.arrowPaint = Color.BLACK;]
[+++ b/.gitignore, +/nbproject/private/, +/target/]
[+++ b/src/main/java/org/jfree/chart/util/SerialUtils.java, + * Returns {@code true} if a class implements {@code Serializable}, + * and {@code false} otherwise., + public static boolean isSerializable(Class c) {, + * @param stream the input stream ({@code null} not permitted)., + * @return The paint object (possibly {@code null})., + public static Paint readPaint(ObjectInputStream stream), + boolean isNull = stream.readBoolean();, + float x1 = stream.readFloat();, + float y1 = stream.readFloat();, + Color c1 = (Color) stream.readObject();, + float x2 = stream.readFloat();, + float y2 = stream.readFloat();, + Color c2 = (Color) stream.readObject();, + boolean isCyclic = stream.readBoolean();, + * Serialises a {@code
[+++ b/ChangeLog, +2014-07-29 David Gilbert <david.gilbert@object-refinery.com>, +, + * org/jfree/chart/axis/Axis.java, + (drawAxisLine): Add rendering hint,, + * org/jfree/chart/axis/CategoryAxis.java, + (drawTickMarks): Add rendering hint,, + * org/jfree/chart/axis/ValueAxis.java, + (drawAxisLine): Add rendering hint,, + (drawTickMarksAndLabels): Likewise,, + * org/jfree/chart/block/LineBorder.java, + (draw): Add rendering hint,, + * org/jfree/chart/plot/FastScatterPlot.java, + (drawDomainGridlines): Add rendering hint,, + (drawRangeGridlines): Likewise,, + * org/jfree/chart/plot/Plot.java, + (drawOutline): Add rendering hint,, + * org/jfree/chart/plot/XYPlot.java, + (drawDomainCrosshair): Add rendering hint,, + (drawRangeCrosshair): Likewise,, + * org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java, + (drawRangeLine): Add rendering hint,, + * org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java, + (drawDomainLine): Add rendering hint,, + (drawRangeLine): Likewise., +, +++ b/ChangeLog, +2014-07-29 David Gilbert <david.gilbert@object-refinery.com>, +,
[+++ b/src/main/java/org/jfree/chart/block/AbstractBlock.java, +++ b/src/main/java/org/jfree/chart/block/AbstractBlock.java, +++ /dev/null, +++ b/src/main/java/org/jfree/chart/block/AbstractBlock.java, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jfree/chart/block/AbstractBlock.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jfree/chart/block/AbstractBlock.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jfree/chart/block/AbstractBlock.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jfree/chart/block/AbstractBlock.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jfree/chart/block/AbstractBlock.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jfree/chart/block/AbstractBlock.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jfree/chart/block/AbstractBlock.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/ChangeLog, +2012-02-08 Martin Hoeller <martin.hoeller@xss.co.at>, +, + Bug 3484408, + * ant/build.xml: fixed maven-bundle task., +, +++ b/ChangeLog, +2012-02-08 Martin Hoeller <martin.hoeller@xss.co.at>, +, + Bug 3484408, + * ant/build.xml: fixed maven-bundle task., +, +++ b/ant/build.xml, + <copy file="pom.xml" tofile="distribution/pom.xml">]
[+++ b/src/main/java/org/jfree/chart/ChartPanel.java]
[+++ b/src/main/java/org/jfree/chart/date/SerialDate.java, + if (yy < MINIMUM_YEAR_SUPPORTED || yy > MAXIMUM_YEAR_SUPPORTED) {, + throw new IllegalArgumentException("Call to addMonths resulted in unsupported year");, + }, + if (targetY < MINIMUM_YEAR_SUPPORTED || targetY > MAXIMUM_YEAR_SUPPORTED) {, + throw new IllegalArgumentException("Call to addYears resulted in unsupported year");, + }]
[+++ b/src/main/java/org/jfree/chart/util/PaintAlpha.java, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., +++ b/src/main/java/org/jfree/chart/util/PaintAlpha.java, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., +++ b/src/main/java/org/jfree/chart/util/SerialUtils.java, + * Reads a {@code Paint} object that has been serialised by the, + * {@link #writePaint(Paint, ObjectOutputStream)} method., + * Reads a {@code Stroke} object that has been serialised by the, + * {@link #writeStroke(Stroke, ObjectOutputStream)} method., + * @param stream the input stream ({@code null} not permitted)., + * @return The stroke object (possibly {@code null})., + * Reads a {@code Composite} object that has been serialised by the,
[+++ b/src/main/java/org/jfree/chart/plot/dial/StandardDialFrame.java, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + * (C) Copyright 2006-2017, by Object Refinery Limited., + this.backgroundPaint = Color.GRAY;, + this.foregroundPaint = Color.BLACK;, +++ b/src/main/java/org/jfree/chart/plot/dial/StandardDialFrame.java, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + * (C) Copyright 2006-2017, by Object Refinery Limited., + this.backgroundPaint = Color.GRAY;, + this.foregroundPaint = Color.BLACK;, +++ b/src/main/java/org/jfree/chart/plot/dial/StandardDialScale.java, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + * (C) Copyright 2006-2017, by Object Refinery Limited., + this.tickLabelPaint = Color.BLUE;, + this.majorTickPaint = Color.BLACK;, + this.minorTickPaint = Color.BLACK;, +++ b/src/main/java/org/jfree/chart/plot/dial/StandardDialFrame.java, + * (C)
[+++ b/src/main/java/org/jfree/chart/JFreeChart.java, + * (C) Copyright 2000-2018, by Object Refinery Limited and Contributors.
[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/main/java/org/jfree/chart/ChartFactory.java, +import org.jfree.chart.ui.Layer;
[+++ b/src/main/java/org/jfree/chart/plot/CategoryPlot.java, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + public static final Paint DEFAULT_GRIDLINE_PAINT = Color.LIGHT_GRAY;, + public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.BLUE;, + this.rangeZeroBaselinePaint = Color.BLACK;, + this.rangeMinorGridlinePaint = Color.WHITE;, +++ b/src/main/java/org/jfree/chart/plot/CategoryPlot.java, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + public static final Paint DEFAULT_GRIDLINE_PAINT = Color.LIGHT_GRAY;, + public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.BLUE;, + this.rangeZeroBaselinePaint = Color.BLACK;, + this.rangeMinorGridlinePaint = Color.WHITE;, +++ b/src/main/java/org/jfree/chart/plot/CompassPlot.java, +
[+++ b/ant/build.xml, + <manifest>, + <attribute name="Specification-Title" value="JFreeChart" />, + <attribute name="Specification-Version" value="${jfreechart.version}" />, + <attribute name="Specification-Vendor" value="jfree.org" />, + <attribute name="Implementation-Title" value="JFreeChart" />, + <attribute name="Implementation-Version" value="${jfreechart.version}" />, + <attribute name="Implementation-Vendor" value="jfree.org" />, + </manifest>]
[+++ b/src/main/java/org/jfree/chart/axis/ValueAxis.java, +++ b/src/main/java/org/jfree/chart/axis/ValueAxis.java, +++ b/src/main/java/org/jfree/chart/fx/interaction/ZoomHandlerFX.java, +, +, +import javafx.scene.input.MouseEvent;, + /** X axis and Y axis zoom indicators */, + private boolean hZoom, vZoom;, +, + , + this.startPoint = new Point2D.Double(e.getX(), e.getY());, + , + // if the user clicked started dragging from an axis, let's zoom , + // only that axis , + if (y >= dataArea.getHeight()) , + vZoom = false;, + if (x <= dataArea.getX()) , + hZoom = false;, + , + if (hZoom) , + p.setNotify(saved);, + p.setNotify(false);, + if (vZoom) , +++ b/src/main/java/org/jfree/chart/axis/ValueAxis.java, +++ b/src/main/java/org/jfree/chart/fx/interaction/ZoomHandlerFX.java, +, +, +import javafx.scene.input.MouseEvent;, +
[+++ b/maven/README.txt, +pom-nb.xml - a pom file for use in NetBeans. Defines the dependencies required, + by the demo files, and includes the demo source files in the build., + This build includes JavaFX support, and so requires JDK 1.8.0_40 , + or later., +++ b/maven/README.txt, +pom-nb.xml - a pom file for use in NetBeans. Defines the dependencies required, + by the demo files, and includes the demo source files in the build., + This build includes JavaFX support, and so requires JDK 1.8.0_40 , + or later., +++ /dev/null, +++ b/maven/README.txt, +pom-nb.xml - a pom file for use
[+++ b/ChangeLog, +2016-02-19 David Gilbert <david.gilbert@object-refinery.com>, +, + * org/jfree/chart/fx/ChartCanvas.java, + (ChartCanvas): Change default font smoothing., +, +2016-02-15 David Gilbert <david.gilbert@object-refinery.com>, +, + * org/jfree/chart/fx/ChartViewer.java, + (getCanvas): New method,, + (setCanvas): Likewise,, + * org/jfree/chart/fx/ChartViewerSkin.java, + (createNode): Set reference to canvas., +, +2016-01-25 David Gilbert <david.gilbert@object-refinery.com>, +, + * org/jfree/chart/fx/FXGraphics2D.java: Deleted,, + * org/jfree/chart/fx/FXGraphicsConfiguration.java: Likewise,, + * org/jfree/chart/fx/FXGraphicsDevice.java: Likewise., +, +2015-11-23 David Gilbert <david.gilbert@object-refinery.com>, +, + * org/jfree/chart/util/ParamChecks.java, + (requireInRange): New method,, + * org/jfree/data/time/Second.java, + (Second(int, Minute)) : Check argument is in range., +, +2015-09-22 David Gilbert <david.gilbert@object-refinery.com>, +, + * org/jfree/data/general/DatasetUtilities.java, + (iterateToFindDomainBounds): Check for x-value outside
[+++ b/src/main/java/org/jfree/data/category/SlidingCategoryDataset.java, + if (c == -1) {
[+++ b/src/test/java/org/jfree/chart/axis/PeriodAxisLabelInfoTest.java, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + * (C) Copyright 2004-2017, by Object Refinery Limited and Contributors., + Paint lp1 = Color.BLACK;, + Paint lp2 = Color.BLUE;, + Paint dp1 = Color.RED;, + Paint dp2 = Color.GREEN;, +++ b/src/test/java/org/jfree/chart/axis/PeriodAxisLabelInfoTest.java, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + * (C) Copyright 2004-2017, by Object Refinery Limited and Contributors., + Paint lp1 = Color.BLACK;, + Paint lp2 = Color.BLUE;, + Paint dp1 = Color.RED;, + Paint dp2 = Color.GREEN;, +++ b/src/test/java/org/jfree/chart/axis/SymbolAxisTest.java, + * (C) Copyright 2000-2017, by Object Refinery Limited
[+++ b/NEWS, +This release contains support for multiple axes with PolarPlot, fitting, +polynomial functions to a data series, some performance improvements in the, +TimeSeriesCollection class, mouse wheel rotation of pie charts, and numerous, +bug fixes., +2902842 : HistogramDataset.addSeries() fires change change event (by, + Thomas A Caswell);, +++ b/NEWS, +This release contains support for multiple axes with PolarPlot, fitting, +polynomial functions to a data series, some performance improvements in the, +TimeSeriesCollection class, mouse wheel rotation of pie charts, and numerous, +bug fixes., +2902842 : HistogramDataset.addSeries() fires change change event (by, + Thomas A Caswell);, +++ b/README.txt, + - Thomas
[+++ b/src/main/java/org/jfree/chart/util/ObjectList.java, + * Returns the object at the specified index, if there is one, or {@code null}. , + * @return The object or {@code null}. , + * @param object the object ({@code null} permitted). ]
[+++ b/LotteSample/src/main/assets/rearrange.json, +{"assets":[],"v":"4.3.0","ddd":0,"layers":[{"ddd":0,"ind":0,"ty":4,"nm":"Shape Layer 1","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[208,300,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","closed":true,"ks":{"k":{"i":[[49,-1],[9,-51],[-6,-35],[32,-28],[-34,-51],[-92,10],[53,12],[-16,58]],"o":[[-49,1],[-9,51],[6,35],[-32,28],[34,51],[92,-10],[-53,-12],[16,-58]],"v":[[-72,-94],[-151,-10],[-107,4],[-163,94],[-67,194],[128,199],[90,126],[50,-10]]}},"nm":"Path 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[1,0,0.74,1]},"o":{"k":100},"nm":"Fill 2"},{"ind":2,"ty":"sh","closed":true,"ks":{"k":{"i":[[47,-12],[-11,-72],[-7,-31],[-41,18],[2,26]],"o":[[-47,12],[11,72],[7,31],[41,-18],[-2,-26]],"v":[[-9,424.857],[-41,534.143],[-69,554.857],[69,560.857],[84,478.857]]}},"nm":"Path 2"},{"ty":"st","fillEnabled":true,"c":{"k":[0.38,0.04,0.04,1]},"o":{"k":100},"w":{"k":48},"lc":1,"lj":1,"ml":1,"nm":"Stroke 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[0,0.23,1,1]},"o":{"k":100},"nm":"Fill 1"},{"ty":"tr","p":{"k":[-26,-252],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,35],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1"}],"bounds":{"l":-220,"t":-309,"b":-2,"r":169},"ip":0,"op":900.000036657751,"st":0,"bm":0,"sr":1}],"ip":0,"op":900.000036657751,"fr":29.9700012207031,"w":600,"h":600}, +++ b/LotteSample/src/main/assets/rearrange.json, +{"assets":[],"v":"4.3.0","ddd":0,"layers":[{"ddd":0,"ind":0,"ty":4,"nm":"Shape Layer 1","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[208,300,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","closed":true,"ks":{"k":{"i":[[49,-1],[9,-51],[-6,-35],[32,-28],[-34,-51],[-92,10],[53,12],[-16,58]],"o":[[-49,1],[-9,51],[6,35],[-32,28],[34,51],[92,-10],[-53,-12],[16,-58]],"v":[[-72,-94],[-151,-10],[-107,4],[-163,94],[-67,194],[128,199],[90,126],[50,-10]]}},"nm":"Path 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[1,0,0.74,1]},"o":{"k":100},"nm":"Fill 2"},{"ind":2,"ty":"sh","closed":true,"ks":{"k":{"i":[[47,-12],[-11,-72],[-7,-31],[-41,18],[2,26]],"o":[[-47,12],[11,72],[7,31],[41,-18],[-2,-26]],"v":[[-9,424.857],[-41,534.143],[-69,554.857],[69,560.857],[84,478.857]]}},"nm":"Path 2"},{"ty":"st","fillEnabled":true,"c":{"k":[0.38,0.04,0.04,1]},"o":{"k":100},"w":{"k":48},"lc":1,"lj":1,"ml":1,"nm":"Stroke 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[0,0.23,1,1]},"o":{"k":100},"nm":"Fill 1"},{"ty":"tr","p":{"k":[-26,-252],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,35],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1"}],"bounds":{"l":-220,"t":-309,"b":-2,"r":169},"ip":0,"op":900.000036657751,"st":0,"bm":0,"sr":1}],"ip":0,"op":900.000036657751,"fr":29.9700012207031,"w":600,"h":600}, +++ b/LotteSample/src/main/assets/squishy.json, +{"assets":[],"v":"4.3.0","ddd":0,"layers":[{"ddd":0,"ind":0,"ty":4,"nm":"Shape Layer 1","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[208,300,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","closed":false,"ks":{"k":{"i":[[0,0]],"o":[[0,0]],"v":[[547,-171]]}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.38,0.04,0.04,1]},"o":{"k":100},"w":{"k":50},"lc":1,"lj":1,"ml":4,"nm":"Stroke 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[0,0.23,1,1]},"o":{"k":100},"nm":"Fill 1"},{"ty":"tr","p":{"k":[0,0],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 2"},{"ty":"gr","it":[{"ind":0,"ty":"sh","closed":true,"ks":{"k":{"i":[[49,-1],[9,-51],[-6,-35],[32,-28],[-34,-51],[-92,10],[53,12],[-16,58]],"o":[[-49,1],[-9,51],[6,35],[-32,28],[34,51],[92,-10],[-53,-12],[16,-58]],"v":[[-72,-94],[-151,-10],[-107,4],[-163,94],[-67,194],[128,199],[90,126],[50,-10]]}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.38,0.04,0.04,1]},"o":{"k":100},"w":{"k":48},"lc":1,"lj":1,"ml":1,"nm":"Stroke 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[0,0.23,1,1]},"o":{"k":100},"nm":"Fill 1"},{"ty":"tr","p":{"k":[-26,-252],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,35],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1"}],"bounds":{"l":-245,"t":-334,"b":-125,"r":572},"ip":0,"op":900.000036657751,"st":0,"bm":0,"sr":1}],"ip":0,"op":900.000036657751,"fr":29.9700012207031,"w":600,"h":600}, +++ b/LotteSample/src/main/assets/rearrange.json, +{"assets":[],"v":"4.3.0","ddd":0,"layers":[{"ddd":0,"ind":0,"ty":4,"nm":"Shape Layer 1","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[208,300,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","closed":true,"ks":{"k":{"i":[[49,-1],[9,-51],[-6,-35],[32,-28],[-34,-51],[-92,10],[53,12],[-16,58]],"o":[[-49,1],[-9,51],[6,35],[-32,28],[34,51],[92,-10],[-53,-12],[16,-58]],"v":[[-72,-94],[-151,-10],[-107,4],[-163,94],[-67,194],[128,199],[90,126],[50,-10]]}},"nm":"Path 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[1,0,0.74,1]},"o":{"k":100},"nm":"Fill 2"},{"ind":2,"ty":"sh","closed":true,"ks":{"k":{"i":[[47,-12],[-11,-72],[-7,-31],[-41,18],[2,26]],"o":[[-47,12],[11,72],[7,31],[41,-18],[-2,-26]],"v":[[-9,424.857],[-41,534.143],[-69,554.857],[69,560.857],[84,478.857]]}},"nm":"Path 2"},{"ty":"st","fillEnabled":true,"c":{"k":[0.38,0.04,0.04,1]},"o":{"k":100},"w":{"k":48},"lc":1,"lj":1,"ml":1,"nm":"Stroke 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[0,0.23,1,1]},"o":{"k":100},"nm":"Fill 1"},{"ty":"tr","p":{"k":[-26,-252],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,35],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1"}],"bounds":{"l":-220,"t":-309,"b":-2,"r":169},"ip":0,"op":900.000036657751,"st":0,"bm":0,"sr":1}],"ip":0,"op":900.000036657751,"fr":29.9700012207031,"w":600,"h":600}, +++ b/LotteSample/src/main/assets/squishy.json, +{"assets":[],"v":"4.3.0","ddd":0,"layers":[{"ddd":0,"ind":0,"ty":4,"nm":"Shape Layer 1","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[208,300,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","closed":false,"ks":{"k":{"i":[[0,0]],"o":[[0,0]],"v":[[547,-171]]}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.38,0.04,0.04,1]},"o":{"k":100},"w":{"k":50},"lc":1,"lj":1,"ml":4,"nm":"Stroke 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[0,0.23,1,1]},"o":{"k":100},"nm":"Fill 1"},{"ty":"tr","p":{"k":[0,0],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 2"},{"ty":"gr","it":[{"ind":0,"ty":"sh","closed":true,"ks":{"k":{"i":[[49,-1],[9,-51],[-6,-35],[32,-28],[-34,-51],[-92,10],[53,12],[-16,58]],"o":[[-49,1],[-9,51],[6,35],[-32,28],[34,51],[92,-10],[-53,-12],[16,-58]],"v":[[-72,-94],[-151,-10],[-107,4],[-163,94],[-67,194],[128,199],[90,126],[50,-10]]}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.38,0.04,0.04,1]},"o":{"k":100},"w":{"k":48},"lc":1,"lj":1,"ml":1,"nm":"Stroke 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[0,0.23,1,1]},"o":{"k":100},"nm":"Fill 1"},{"ty":"tr","p":{"k":[-26,-252],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,35],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1"}],"bounds":{"l":-245,"t":-334,"b":-125,"r":572},"ip":0,"op":900.000036657751,"st":0,"bm":0,"sr":1}],"ip":0,"op":900.000036657751,"fr":29.9700012207031,"w":600,"h":600}, +++ b/LotteSample/src/main/assets/twoShapes.json, +{"assets":[],"v":"4.3.0","ddd":0,"layers":[{"ddd":0,"ind":0,"ty":4,"nm":"Shape Layer 1","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[208,300,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","closed":true,"ks":{"k":{"i":[[47,-12],[-11,-72],[-7,-31],[-41,18],[2,26]],"o":[[-47,12],[11,72],[7,31],[41,-18],[-2,-26]],"v":[[-9,424.857],[-41,534.143],[-69,554.857],[69,560.857],[84,478.857]]}},"nm":"Path 2"},{"ty":"fl","fillEnabled":true,"c":{"k":[1,0,0.74,1]},"o":{"k":100},"nm":"Fill 2"},{"ind":2,"ty":"sh","closed":true,"ks":{"k":{"i":[[49,-1],[9,-51],[-6,-35],[32,-28],[-34,-51],[-92,10],[53,12],[-16,58]],"o":[[-49,1],[-9,51],[6,35],[-32,28],[34,51],[92,-10],[-53,-12],[16,-58]],"v":[[-72,-94],[-151,-10],[-107,4],[-163,94],[-67,194],[128,199],[90,126],[50,-10]]}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.38,0.04,0.04,1]},"o":{"k":100},"w":{"k":48},"lc":1,"lj":1,"ml":1,"nm":"Stroke 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[0,0.23,1,1]},"o":{"k":100},"nm":"Fill 1"},{"ty":"tr","p":{"k":[-26,-252],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,35],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1"}],"bounds":{"l":-244,"t":-333,"b":-26,"r":193},"ip":0,"op":900.000036657751,"st":0,"bm":0,"sr":1}],"ip":0,"op":900.000036657751,"fr":29.9700012207031,"w":600,"h":600}, +++ b/LotteSample/src/main/assets/rearrange.json, +{"assets":[],"v":"4.3.0","ddd":0,"layers":[{"ddd":0,"ind":0,"ty":4,"nm":"Shape Layer 1","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[208,300,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","closed":true,"ks":{"k":{"i":[[49,-1],[9,-51],[-6,-35],[32,-28],[-34,-51],[-92,10],[53,12],[-16,58]],"o":[[-49,1],[-9,51],[6,35],[-32,28],[34,51],[92,-10],[-53,-12],[16,-58]],"v":[[-72,-94],[-151,-10],[-107,4],[-163,94],[-67,194],[128,199],[90,126],[50,-10]]}},"nm":"Path 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[1,0,0.74,1]},"o":{"k":100},"nm":"Fill 2"},{"ind":2,"ty":"sh","closed":true,"ks":{"k":{"i":[[47,-12],[-11,-72],[-7,-31],[-41,18],[2,26]],"o":[[-47,12],[11,72],[7,31],[41,-18],[-2,-26]],"v":[[-9,424.857],[-41,534.143],[-69,554.857],[69,560.857],[84,478.857]]}},"nm":"Path 2"},{"ty":"st","fillEnabled":true,"c":{"k":[0.38,0.04,0.04,1]},"o":{"k":100},"w":{"k":48},"lc":1,"lj":1,"ml":1,"nm":"Stroke 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[0,0.23,1,1]},"o":{"k":100},"nm":"Fill 1"},{"ty":"tr","p":{"k":[-26,-252],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,35],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1"}],"bounds":{"l":-220,"t":-309,"b":-2,"r":169},"ip":0,"op":900.000036657751,"st":0,"bm":0,"sr":1}],"ip":0,"op":900.000036657751,"fr":29.9700012207031,"w":600,"h":600}, +++ b/LotteSample/src/main/assets/squishy.json, +{"assets":[],"v":"4.3.0","ddd":0,"layers":[{"ddd":0,"ind":0,"ty":4,"nm":"Shape Layer 1","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[208,300,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","closed":false,"ks":{"k":{"i":[[0,0]],"o":[[0,0]],"v":[[547,-171]]}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.38,0.04,0.04,1]},"o":{"k":100},"w":{"k":50},"lc":1,"lj":1,"ml":4,"nm":"Stroke 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[0,0.23,1,1]},"o":{"k":100},"nm":"Fill 1"},{"ty":"tr","p":{"k":[0,0],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 2"},{"ty":"gr","it":[{"ind":0,"ty":"sh","closed":true,"ks":{"k":{"i":[[49,-1],[9,-51],[-6,-35],[32,-28],[-34,-51],[-92,10],[53,12],[-16,58]],"o":[[-49,1],[-9,51],[6,35],[-32,28],[34,51],[92,-10],[-53,-12],[16,-58]],"v":[[-72,-94],[-151,-10],[-107,4],[-163,94],[-67,194],[128,199],[90,126],[50,-10]]}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.38,0.04,0.04,1]},"o":{"k":100},"w":{"k":48},"lc":1,"lj":1,"ml":1,"nm":"Stroke 1"},{"ty":"fl","fillEnabled":true,"c":{"k":[0,0.23,1,1]},"o":{"k":100},"nm":"Fill 1"},{"ty":"tr","p":{"k":[-26,-252],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,35],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1"}],"bounds":{"l":-245,"t":-334,"b":-125,"r":572},"ip":0,"op":900.000036657751,"st":0,"bm":0,"sr":1}],"ip":0,"op":900.000036657751,"fr":29.9700012207031,"w":600,"h":600}, +++ b/LotteSample/src/main/assets/twoShapes.json, +{"assets":[],"v":"4.3.0","ddd":0,"layers":[{"ddd":0,"ind":0,"ty":4,"nm":"Shape Layer 1","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[208,300,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","closed":true,"ks":{"k":{"i":[[47,-12],[-11,-72],[-7,-31],[-41,18],[2,26]],"o":[[-47,12],[11,72],[7,31],[41,-18],[-2,-26]],"v":[[-9,424.857],[-41,534.143],[-69,554.857],[69,560.857],[84,478.857]]}},"nm":"Path
[+++ b/gradle.properties, +VERSION_NAME=0.9.10]
[+++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/PlayerFragment.kt, +import com.airbnb.lottie.LottieAnimationView, +, + currentFrameView.text = updateFramesAndDurationLabel(animationView), +, +, + private fun updateFramesAndDurationLabel(animation: LottieAnimationView): String {, + val currentFrame = animation.frame.toString(), + val totalFrames = ("%.0f").format(animation.maxFrame), +, + val animationSpeed: Float = Math.abs(animation.speed), +, + val totalTime = ((animation.duration / animationSpeed) / 1000.0), + val totalTimeFormatted = ("%.1f").format(totalTime), +, + val progress = (totalTime / 100.0) * (Math.round(animation.progress * 100.0)), + val progressFormatted = ("%.1f").format(progress), +, + return "$currentFrame/$totalFrames\n$progressFormatted/$totalTimeFormatted", + }, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/PlayerFragment.kt, +import com.airbnb.lottie.LottieAnimationView, +, + currentFrameView.text = updateFramesAndDurationLabel(animationView), +, +, + private fun updateFramesAndDurationLabel(animation: LottieAnimationView): String {, + val currentFrame = animation.frame.toString(), + val totalFrames
[+++ b/.travis.yml, + - yes | sdkmanager "platforms;android-27", + - build-tools-27.0.2, + - android-27, + - export FIREBASE_EXIT_CODE=$?, +++ b/.travis.yml, + - yes | sdkmanager "platforms;android-27", + - build-tools-27.0.2, + - android-27, + - export FIREBASE_EXIT_CODE=$?, +++ b/LottieSample/build.gradle, + compileSdkVersion 27, + buildToolsVersion "27.0.2", + targetSdkVersion 27, + baseline file("lint-baseline.xml"), +++ b/.travis.yml, + - yes | sdkmanager "platforms;android-27", + - build-tools-27.0.2, + - android-27, + - export FIREBASE_EXIT_CODE=$?, +++ b/LottieSample/build.gradle, + compileSdkVersion 27, + buildToolsVersion "27.0.2", + targetSdkVersion 27, + baseline file("lint-baseline.xml"), +++ b/LottieSample/lint-baseline.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<issues format="4" by="lint 3.0.1">, +, + <issue, + id="ObsoleteLintCustomCheck", + severity="Warning", +
[+++ b/LottieSample/src/main/assets/9squares-AlBoardman.json, +{"assets":[],"layers":[{"ddd":0,"ind":0,"ty":3,"nm":"NULL CONTROL 2","parent":20,"ks":{"o":{"k":0},"r":{"k":[{"i":{"x":[0.38],"y":[1]},"o":{"x":[0.194],"y":[0]},"n":["0p38_1_0p194_0"],"t":127.2,"s":[0],"e":[180]},{"t":158.4001953125}]},"p":{"k":[{"i":{"x":0,"y":1},"o":{"x":0.013,"y":0},"n":"0_1_0p013_0","t":24,"s":[417.9,540,0],"e":[340.2,540,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.2,"y":0.2},"o":{"x":0.1,"y":0.1},"n":"0p2_0p2_0p1_0p1","t":60,"s":[340.2,540,0],"e":[340.2,540,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0,"y":1},"o":{"x":0.05,"y":0},"n":"0_1_0p05_0","t":127.2,"s":[340.2,540,0],"e":[538.514,540,0],"to":[0,0,0],"ti":[0,0,0]},{"t":158.4001953125}]},"a":{"k":[60,60,0]},"s":{"k":[74,74,100]}},"ao":0,"ip":0,"op":178,"st":-22.8,"bm":0,"sr":1},{"ddd":0,"ind":1,"ty":4,"nm":"Group 10","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.833,"y":1},"o":{"x":0.167,"y":0},"n":"0p833_1_0p167_0","t":3,"s":[223.64,60,0],"e":[224.992,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.611,"y":0.611},"o":{"x":0.167,"y":0.167},"n":"0p611_0p611_0p167_0p167","t":22.8,"s":[224.992,60,0],"e":[224.992,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.061,"y":1},"o":{"x":0.167,"y":0},"n":"0p061_1_0p167_0","t":127.2,"s":[224.992,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.200390625}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-34,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-16.6,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":1,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":18.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":36,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":53.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":71,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":88.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":106,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":123.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":141,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":158.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":176,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":193.4,"s":[100,100,100],"e":[90,90,100]},{"t":211.0001953125}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-246.859],[246.859,0],[0,246.859],[-246.859,0]],"o":[[0,246.859],[-246.859,0],[0,-246.859],[246.859,0]],"v":[[446.978,0],[0,446.978],[-446.977,0],[0,-446.978]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.97,0.49,0.37,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 10"}],"ip":0,"op":178,"st":-13.2,"bm":0,"sr":1},{"ddd":0,"ind":2,"ty":4,"nm":"Group 11","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":21.6,"s":[224.991,60,0],"e":[181.494,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":68.4,"s":[181.494,60,0],"e":[181.494,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[181.494,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.199609375}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":0,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":17.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":35,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":52.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":70,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":87.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":105,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":122.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":140,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":157.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":175,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":192.4,"s":[100,100,100],"e":[90,90,100]},{"t":210.000390625}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-222.836],[222.836,0],[0,222.836],[-222.836,0]],"o":[[0,222.836],[-222.836,0],[0,-222.836],[222.836,0]],"v":[[403.48,0],[0,403.48],[-403.48,0],[0,-403.48]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.97,0.49,0.37,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 11"}],"ip":0,"op":178,"st":-14.4,"bm":0,"sr":1},{"ddd":0,"ind":3,"ty":4,"nm":"Group 12","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":20.4,"s":[224.992,60,0],"e":[139.496,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":67.2,"s":[139.496,60,0],"e":[139.496,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[139.496,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.1998046875}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-1,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":16.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":34,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":51.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":69,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":86.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":104,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":121.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":139,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":156.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":174,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":191.399,"s":[100,100,100],"e":[90,90,100]},{"t":208.999609375}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-199.641],[199.641,0],[0,199.641],[-199.641,0]],"o":[[0,199.641],[-199.641,0],[0,-199.641],[199.641,0]],"v":[[361.482,0],[0,361.482],[-361.482,0],[0,-361.482]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.97,0.49,0.37,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 12"}],"ip":0,"op":178,"st":-15.6,"bm":0,"sr":1},{"ddd":0,"ind":4,"ty":4,"nm":"Group 13","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":19.2,"s":[224.992,60,0],"e":[97.498,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":66,"s":[97.498,60,0],"e":[97.498,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[97.498,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.2}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":-2,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":15.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":33,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":50.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":68,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":85.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":103,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":120.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":138,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":155.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":173,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":190.399,"s":[100,100,100],"e":[90,90,100]},{"t":207.9998046875}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-176.446],[176.446,0],[0,176.446],[-176.446,0]],"o":[[0,176.446],[-176.446,0],[0,-176.446],[176.446,0]],"v":[[319.484,0],[0,319.484],[-319.484,0],[0,-319.484]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.97,0.49,0.37,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 13"}],"ip":0,"op":178,"st":-16.8,"bm":0,"sr":1},{"ddd":0,"ind":5,"ty":4,"nm":"Group 14","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":18,"s":[224.992,60,0],"e":[55.5,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":64.8,"s":[55.5,60,0],"e":[55.5,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[55.5,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.2001953125}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-3,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":14.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":32,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":49.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":67,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":84.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":102,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":119.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":137,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":154.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":172,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":189.399,"s":[100,100,100],"e":[90,90,100]},{"t":207}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-153.251],[153.251,0],[0,153.251],[-153.251,0]],"o":[[0,153.251],[-153.251,0],[0,-153.251],[153.251,0]],"v":[[277.486,0],[0,277.486],[-277.486,0],[0,-277.486]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.97,0.49,0.37,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 14"}],"ip":0,"op":178,"st":-18,"bm":0,"sr":1},{"ddd":0,"ind":6,"ty":4,"nm":"Group 15","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":16.8,"s":[224.992,60,0],"e":[16.502,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":63.6,"s":[16.502,60,0],"e":[16.502,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[16.502,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.200390625}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-4,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":13.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":31,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":48.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":66,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":83.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":101,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":118.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":136,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":153.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":171,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":188.4,"s":[100,100,100],"e":[90,90,100]},{"t":206.0001953125}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-131.713],[131.713,0],[0,131.713],[-131.713,0]],"o":[[0,131.713],[-131.713,0],[0,-131.713],[131.713,0]],"v":[[238.488,0],[0,238.488],[-238.488,0],[0,-238.488]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.97,0.49,0.37,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 15"}],"ip":0,"op":178,"st":-19.2,"bm":0,"sr":1},{"ddd":0,"ind":7,"ty":4,"nm":"Group 16","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":15.6,"s":[224.992,60,0],"e":[-22.496,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":62.4,"s":[-22.496,60,0],"e":[-22.496,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[-22.496,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.199609375}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-5,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":12.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":30,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":47.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":65,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":82.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":100,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":117.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":135,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":152.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":170,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":187.4,"s":[100,100,100],"e":[90,90,100]},{"t":205.000390625}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-110.175],[110.175,0],[0,110.175],[-110.175,0]],"o":[[0,110.175],[-110.175,0],[0,-110.175],[110.175,0]],"v":[[199.49,0],[0,199.49],[-199.49,0],[0,-199.49]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.97,0.49,0.37,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 16"}],"ip":0,"op":178,"st":-20.4,"bm":0,"sr":1},{"ddd":0,"ind":8,"ty":4,"nm":"Group 17","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":14.4,"s":[224.992,60,0],"e":[-65.994,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":61.2,"s":[-65.994,60,0],"e":[-65.994,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[-65.994,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.1998046875}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-6,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":11.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":29,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":46.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":64,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":81.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":99,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":116.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":134,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":151.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":169,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":186.399,"s":[100,100,100],"e":[90,90,100]},{"t":203.999609375}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-86.152],[86.152,0],[0,86.152],[-86.152,0]],"o":[[0,86.152],[-86.152,0],[0,-86.152],[86.152,0]],"v":[[155.992,0],[0,155.992],[-155.992,0],[0,-155.992]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.97,0.49,0.37,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 17"}],"ip":0,"op":178,"st":-21.6,"bm":0,"sr":1},{"ddd":0,"ind":9,"ty":4,"nm":"Group 18","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":13.2,"s":[224.992,60,0],"e":[-104.992,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":60,"s":[-104.992,60,0],"e":[-104.992,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[-104.992,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.2}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-7,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":10.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":28,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":45.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":63,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":80.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":98,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":115.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":133,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":150.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":168,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":185.399,"s":[100,100,100],"e":[90,90,100]},{"t":202.9998046875}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-64.614],[64.614,0],[0,64.614],[-64.614,0]],"o":[[0,64.614],[-64.614,0],[0,-64.614],[64.614,0]],"v":[[116.994,0],[0,116.994],[-116.994,0],[0,-116.994]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.97,0.49,0.37,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 18"}],"ip":0,"op":178,"st":-22.8,"bm":0,"sr":1},{"ddd":0,"ind":10,"ty":3,"nm":"NULL CONTROL","parent":20,"ks":{"o":{"k":0},"r":{"k":[{"i":{"x":[0.38],"y":[1]},"o":{"x":[0.189],"y":[0]},"n":["0p38_1_0p189_0"],"t":127.2,"s":[180],"e":[0]},{"t":158.4001953125}]},"p":{"k":[{"i":{"x":0,"y":1},"o":{"x":0.013,"y":0},"n":"0_1_0p013_0","t":24,"s":[662.1,540,0],"e":[736.1,540,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.2,"y":0.2},"o":{"x":0.1,"y":0.1},"n":"0p2_0p2_0p1_0p1","t":60,"s":[736.1,540,0],"e":[736.1,540,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0,"y":1},"o":{"x":0.05,"y":0},"n":"0_1_0p05_0","t":127.2,"s":[736.1,540,0],"e":[538.514,540,0],"to":[0,0,0],"ti":[0,0,0]},{"t":158.4001953125}]},"a":{"k":[60,60,0]},"s":{"k":[74,74,100]}},"ao":0,"ip":0,"op":178,"st":-22.8,"bm":0,"sr":1},{"ddd":0,"ind":11,"ty":4,"nm":"Group 27","parent":10,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.609,"y":0.609},"o":{"x":0.167,"y":0.167},"n":"0p609_0p609_0p167_0p167","t":22.8,"s":[224.992,60,0],"e":[224.992,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.051,"y":1},"o":{"x":0.167,"y":0},"n":"0p051_1_0p167_0","t":127.2,"s":[224.992,60,0],"e":[62,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.200390625}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":-34,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-16.6,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":1,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":18.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":36,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":53.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":71,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":88.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":106,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":123.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":141,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":158.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":176,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":193.4,"s":[100,100,100],"e":[90,90,100]},{"t":211.0001953125}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-246.859],[246.859,0],[0,246.859],[-246.859,0]],"o":[[0,246.859],[-246.859,0],[0,-246.859],[246.859,0]],"v":[[446.978,0],[0,446.978],[-446.977,0],[0,-446.978]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.24,0.74,0.36,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 10"}],"ip":0,"op":178,"st":-13.2,"bm":0,"sr":1},{"ddd":0,"ind":12,"ty":4,"nm":"Group 26","parent":10,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":21.6,"s":[224.991,60,0],"e":[181.494,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":68.4,"s":[181.494,60,0],"e":[181.494,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[181.494,60,0],"e":[62,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.199609375}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":0,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":17.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":35,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":52.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":70,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":87.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":105,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":122.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":140,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":157.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":175,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":192.4,"s":[100,100,100],"e":[90,90,100]},{"t":210.000390625}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-222.836],[222.836,0],[0,222.836],[-222.836,0]],"o":[[0,222.836],[-222.836,0],[0,-222.836],[222.836,0]],"v":[[403.48,0],[0,403.48],[-403.48,0],[0,-403.48]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.24,0.74,0.36,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 11"}],"ip":0,"op":178,"st":-14.4,"bm":0,"sr":1},{"ddd":0,"ind":13,"ty":4,"nm":"Group 25","parent":10,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":20.4,"s":[224.992,60,0],"e":[139.496,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":67.2,"s":[139.496,60,0],"e":[139.496,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[139.496,60,0],"e":[62,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.1998046875}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-1,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":16.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":34,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":51.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":69,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":86.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":104,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":121.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":139,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":156.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":174,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":191.399,"s":[100,100,100],"e":[90,90,100]},{"t":208.999609375}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-199.641],[199.641,0],[0,199.641],[-199.641,0]],"o":[[0,199.641],[-199.641,0],[0,-199.641],[199.641,0]],"v":[[361.482,0],[0,361.482],[-361.482,0],[0,-361.482]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.24,0.74,0.36,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 12"}],"ip":0,"op":178,"st":-15.6,"bm":0,"sr":1},{"ddd":0,"ind":14,"ty":4,"nm":"Group 24","parent":10,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":19.2,"s":[224.992,60,0],"e":[97.498,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":66,"s":[97.498,60,0],"e":[97.498,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[97.498,60,0],"e":[62,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.2}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":-2,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":15.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":33,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":50.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":68,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":85.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":103,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":120.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":138,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":155.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":173,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":190.399,"s":[100,100,100],"e":[90,90,100]},{"t":207.9998046875}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-176.446],[176.446,0],[0,176.446],[-176.446,0]],"o":[[0,176.446],[-176.446,0],[0,-176.446],[176.446,0]],"v":[[319.484,0],[0,319.484],[-319.484,0],[0,-319.484]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.24,0.74,0.36,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 13"}],"ip":0,"op":178,"st":-16.8,"bm":0,"sr":1},{"ddd":0,"ind":15,"ty":4,"nm":"Group 23","parent":10,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":18,"s":[224.992,60,0],"e":[55.5,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":64.8,"s":[55.5,60,0],"e":[55.5,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[55.5,60,0],"e":[62,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.2001953125}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-3,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":14.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":32,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":49.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":67,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":84.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":102,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":119.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":137,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":154.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":172,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":189.399,"s":[100,100,100],"e":[90,90,100]},{"t":207}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-153.251],[153.251,0],[0,153.251],[-153.251,0]],"o":[[0,153.251],[-153.251,0],[0,-153.251],[153.251,0]],"v":[[277.486,0],[0,277.486],[-277.486,0],[0,-277.486]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.24,0.74,0.36,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 14"}],"ip":0,"op":178,"st":-18,"bm":0,"sr":1},{"ddd":0,"ind":16,"ty":4,"nm":"Group 22","parent":10,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":16.8,"s":[224.992,60,0],"e":[16.502,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":63.6,"s":[16.502,60,0],"e":[16.502,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[16.502,60,0],"e":[62,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.200390625}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":-4,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":13.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":31,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":48.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":66,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":83.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":101,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":118.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":136,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":153.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":171,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":188.4,"s":[100,100,100],"e":[90,90,100]},{"t":206.0001953125}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-131.713],[131.713,0],[0,131.713],[-131.713,0]],"o":[[0,131.713],[-131.713,0],[0,-131.713],[131.713,0]],"v":[[238.488,0],[0,238.488],[-238.488,0],[0,-238.488]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.24,0.74,0.36,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 15"}],"ip":0,"op":178,"st":-19.2,"bm":0,"sr":1},{"ddd":0,"ind":17,"ty":4,"nm":"Group 21","parent":10,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":15.6,"s":[224.992,60,0],"e":[-22.496,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":62.4,"s":[-22.496,60,0],"e":[-22.496,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[-22.496,60,0],"e":[62,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.199609375}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":-5,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":12.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":30,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":47.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":65,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":82.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":100,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":117.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":135,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":152.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":170,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":187.4,"s":[100,100,100],"e":[90,90,100]},{"t":205.000390625}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-110.175],[110.175,0],[0,110.175],[-110.175,0]],"o":[[0,110.175],[-110.175,0],[0,-110.175],[110.175,0]],"v":[[199.49,0],[0,199.49],[-199.49,0],[0,-199.49]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.24,0.74,0.36,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 16"}],"ip":0,"op":178,"st":-20.4,"bm":0,"sr":1},{"ddd":0,"ind":18,"ty":4,"nm":"Group 20","parent":10,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":14.4,"s":[224.992,60,0],"e":[-65.994,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":61.2,"s":[-65.994,60,0],"e":[-65.994,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[-65.994,60,0],"e":[62,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.1998046875}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":-6,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":11.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":29,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":46.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":64,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":81.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":99,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":116.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":134,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":151.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":169,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":186.399,"s":[100,100,100],"e":[90,90,100]},{"t":203.999609375}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-86.152],[86.152,0],[0,86.152],[-86.152,0]],"o":[[0,86.152],[-86.152,0],[0,-86.152],[86.152,0]],"v":[[155.992,0],[0,155.992],[-155.992,0],[0,-155.992]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.24,0.74,0.36,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 17"}],"ip":0,"op":178,"st":-21.6,"bm":0,"sr":1},{"ddd":0,"ind":19,"ty":4,"nm":"Group 19","parent":10,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":13.2,"s":[224.992,60,0],"e":[-104.992,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":60,"s":[-104.992,60,0],"e":[-104.992,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[-104.992,60,0],"e":[62,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.2}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":-7,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":10.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":28,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":45.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":63,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":80.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":98,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":115.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":133,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":150.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":168,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":185.399,"s":[100,100,100],"e":[90,90,100]},{"t":202.9998046875}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-64.614],[64.614,0],[0,64.614],[-64.614,0]],"o":[[0,64.614],[-64.614,0],[0,-64.614],[64.614,0]],"v":[[116.994,0],[0,116.994],[-116.994,0],[0,-116.994]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.24,0.74,0.36,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 18"}],"ip":0,"op":178,"st":-22.8,"bm":0,"sr":1},{"ddd":0,"ind":20,"ty":1,"nm":"Dark Gray Solid 1","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[90,90,0]},"a":{"k":[540,540,0]},"s":{"k":[16.667,16.667,100]}},"ao":0,"sw":1080,"sh":1080,"sc":"#303030","ip":0,"op":178,"st":-22.8,"bm":0,"sr":1}],"v":"4.4.26","ddd":0,"ip":0,"op":176,"fr":30,"w":180,"h":180}, +++ b/LottieSample/src/main/assets/9squares-AlBoardman.json, +{"assets":[],"layers":[{"ddd":0,"ind":0,"ty":3,"nm":"NULL CONTROL 2","parent":20,"ks":{"o":{"k":0},"r":{"k":[{"i":{"x":[0.38],"y":[1]},"o":{"x":[0.194],"y":[0]},"n":["0p38_1_0p194_0"],"t":127.2,"s":[0],"e":[180]},{"t":158.4001953125}]},"p":{"k":[{"i":{"x":0,"y":1},"o":{"x":0.013,"y":0},"n":"0_1_0p013_0","t":24,"s":[417.9,540,0],"e":[340.2,540,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.2,"y":0.2},"o":{"x":0.1,"y":0.1},"n":"0p2_0p2_0p1_0p1","t":60,"s":[340.2,540,0],"e":[340.2,540,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0,"y":1},"o":{"x":0.05,"y":0},"n":"0_1_0p05_0","t":127.2,"s":[340.2,540,0],"e":[538.514,540,0],"to":[0,0,0],"ti":[0,0,0]},{"t":158.4001953125}]},"a":{"k":[60,60,0]},"s":{"k":[74,74,100]}},"ao":0,"ip":0,"op":178,"st":-22.8,"bm":0,"sr":1},{"ddd":0,"ind":1,"ty":4,"nm":"Group 10","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.833,"y":1},"o":{"x":0.167,"y":0},"n":"0p833_1_0p167_0","t":3,"s":[223.64,60,0],"e":[224.992,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.611,"y":0.611},"o":{"x":0.167,"y":0.167},"n":"0p611_0p611_0p167_0p167","t":22.8,"s":[224.992,60,0],"e":[224.992,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.061,"y":1},"o":{"x":0.167,"y":0},"n":"0p061_1_0p167_0","t":127.2,"s":[224.992,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.200390625}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-34,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-16.6,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":1,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":18.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":36,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":53.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":71,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":88.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":106,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":123.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":141,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":158.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":176,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":193.4,"s":[100,100,100],"e":[90,90,100]},{"t":211.0001953125}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-246.859],[246.859,0],[0,246.859],[-246.859,0]],"o":[[0,246.859],[-246.859,0],[0,-246.859],[246.859,0]],"v":[[446.978,0],[0,446.978],[-446.977,0],[0,-446.978]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.97,0.49,0.37,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 10"}],"ip":0,"op":178,"st":-13.2,"bm":0,"sr":1},{"ddd":0,"ind":2,"ty":4,"nm":"Group 11","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":21.6,"s":[224.991,60,0],"e":[181.494,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":68.4,"s":[181.494,60,0],"e":[181.494,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[181.494,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.199609375}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":0,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":17.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":35,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":52.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":70,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":87.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":105,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":122.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":140,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":157.4,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":175,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":192.4,"s":[100,100,100],"e":[90,90,100]},{"t":210.000390625}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-222.836],[222.836,0],[0,222.836],[-222.836,0]],"o":[[0,222.836],[-222.836,0],[0,-222.836],[222.836,0]],"v":[[403.48,0],[0,403.48],[-403.48,0],[0,-403.48]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.97,0.49,0.37,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 11"}],"ip":0,"op":178,"st":-14.4,"bm":0,"sr":1},{"ddd":0,"ind":3,"ty":4,"nm":"Group 12","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":20.4,"s":[224.992,60,0],"e":[139.496,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":67.2,"s":[139.496,60,0],"e":[139.496,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[139.496,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.1998046875}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":-1,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":16.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":34,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":51.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":69,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":86.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":104,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":121.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":139,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":156.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":174,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":191.399,"s":[100,100,100],"e":[90,90,100]},{"t":208.999609375}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-199.641],[199.641,0],[0,199.641],[-199.641,0]],"o":[[0,199.641],[-199.641,0],[0,-199.641],[199.641,0]],"v":[[361.482,0],[0,361.482],[-361.482,0],[0,-361.482]],"c":true}},"nm":"Path 1"},{"ty":"st","fillEnabled":true,"c":{"k":[0.97,0.49,0.37,1]},"o":{"k":100},"w":{"k":8},"lc":2,"lj":2,"nm":"Stroke 1"},{"ty":"tr","p":{"k":[960,540],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 12"}],"ip":0,"op":178,"st":-15.6,"bm":0,"sr":1},{"ddd":0,"ind":4,"ty":4,"nm":"Group 13","parent":0,"ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[{"i":{"x":0.036,"y":1},"o":{"x":0.333,"y":0},"n":"0p036_1_0p333_0","t":19.2,"s":[224.992,60,0],"e":[97.498,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":0.036},"o":{"x":0.167,"y":0.167},"n":"0p036_0p036_0p167_0p167","t":66,"s":[97.498,60,0],"e":[97.498,60,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.036,"y":1},"o":{"x":0.167,"y":0},"n":"0p036_1_0p167_0","t":127.2,"s":[97.498,60,0],"e":[58.1,60,0],"to":[0,0,0],"ti":[0,0,0]},{"t":157.2}]},"a":{"k":[960,540,0]},"s":{"k":[{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":-2,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":15.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":33,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":50.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":68,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":85.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":103,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":120.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0.167]},"n":["0p2_1_0p167_0","0p2_1_0p167_0","0p2_0p2_0p167_0p167"],"t":138,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":155.399,"s":[100,100,100],"e":[90,90,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":173,"s":[90,90,100],"e":[100,100,100]},{"i":{"x":[0.2,0.2,0.2],"y":[1,1,0.2]},"o":{"x":[0.1,0.1,0.1],"y":[0,0,0.1]},"n":["0p2_1_0p1_0","0p2_1_0p1_0","0p2_0p2_0p1_0p1"],"t":190.399,"s":[100,100,100],"e":[90,90,100]},{"t":207.9998046875}]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ks":{"k":{"i":[[0,-176.446],[176.446,0],[0,176.446],[-176.446,0]],"o":[[0,176.446],[-176.446,0],[0,-176.446],[176.446,0]],"v":[[319.484,0],[0,319.484],[-319.484,0],[0,-319.484]],"c":true}},"nm":"Path
[+++ b/After Effects Samples/DynamicGradient.aep, +++ b/After Effects Samples/DynamicGradient.aep, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.kt, +, + withDrawable("Tests/DynamicGradient.json", "Gradient Colors", "Linear Gradient Fill") { drawable ->, + val value = object : LottieValueCallback<Array<Int>>() {, + override fun getValue(frameInfo: LottieFrameInfo<Array<Int>>?): Array<Int>? {, + return arrayOf(Color.YELLOW, Color.GREEN), + }, + }, + drawable.addValueCallback(KeyPath("Linear", "Rectangle", "Gradient Fill"), LottieProperty.GRADIENT_COLOR, value), + }, +, + withDrawable("Tests/DynamicGradient.json", "Gradient Colors", "Radial Gradient Fill") { drawable ->, + val value = object : LottieValueCallback<Array<Int>>() {, + override fun getValue(frameInfo: LottieFrameInfo<Array<Int>>?): Array<Int>? {, + return arrayOf(Color.YELLOW, Color.GREEN), + }, + }, + drawable.addValueCallback(KeyPath("Radial", "Rectangle", "Gradient Fill"), LottieProperty.GRADIENT_COLOR, value), + }, +, + withDrawable("Tests/DynamicGradient.json",
[+++ b/LottieSample/build.gradle, + versionCode 66, + versionName "2.7.0", +++ b/LottieSample/build.gradle, + versionCode 66, + versionName "2.7.0", +++ b/gradle.properties, +VERSION_NAME=2.7.0, +++ b/LottieSample/build.gradle, + versionCode 66, + versionName "2.7.0", +++ b/gradle.properties, +VERSION_NAME=2.7.0, +++ b/lottie/build.gradle, + versionName "2.7.0"]
[+++ b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java, +package com.airbnb.lottie;, +, +import android.graphics.drawable.Drawable;, +import android.support.annotation.Nullable;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +, +class ContentGroup extends AnimatableLayer {, + private final ShapeGroup shapeGroup;, + @Nullable private final AnimatableTransform transform;, +, + ContentGroup(ShapeGroup shapeGroup, @Nullable ShapeFill previousFill,, + @Nullable ShapeStroke previousStroke, @Nullable ShapeTrimPath previousTrimPath,, + @Nullable AnimatableTransform transform, Drawable.Callback callback) {, + super(callback);, + this.shapeGroup = shapeGroup;, + this.transform = transform;, + setupShapeGroupWithFill(previousFill, previousStroke, previousTrimPath);, + }, +, + private void setupShapeGroupWithFill(ShapeFill previousFill,, + ShapeStroke previousStroke, ShapeTrimPath previousTrimPath) {, + if (transform != null) {, + setTransform(transform.createAnimation());, + }, +, + List<Object> reversedItems = new ArrayList<>(shapeGroup.getItems());,
[+++ b/LottieSample/build.gradle, + androidTestImplementation 'com.android.support.test:runner:1.0.1', + implementation 'com.android.support:design:27.1.0', +++ b/LottieSample/build.gradle, + androidTestImplementation 'com.android.support.test:runner:1.0.1', + implementation 'com.android.support:design:27.1.0', +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/ListFragment.kt, + .replace(R.id.content, fragment), +++ b/LottieSample/build.gradle, + androidTestImplementation 'com.android.support.test:runner:1.0.1', + implementation 'com.android.support:design:27.1.0', +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/ListFragment.kt, + .replace(R.id.content, fragment), +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/MainActivity.kt, +import android.support.design.widget.BottomNavigationView, +import android.support.v4.app.Fragment, +import android.view.MenuItem, +import kotlinx.android.synthetic.main.activity_main.*, +class MainActivity : AppCompatActivity(), BottomNavigationView.OnNavigationItemSelectedListener {, + bottomNavigation.setOnNavigationItemSelectedListener(this), + savedInstanceState ?: showFragment(ListFragment.newInstance()), +, + override fun onNavigationItemSelected(item: MenuItem): Boolean {, + when (item.itemId) {, + R.id.showcase -> showFragment(ListFragment.newInstance()), + R.id.preview -> showFragment(TodoFragment()), + R.id.lottiefiles -> showFragment(TodoFragment()), + R.id.learn -> showFragment(TodoFragment()), + else -> return false, + }, + return true, + }, +, + private
[+++ b/LottieSample/build.gradle, + applicationId "com.airbnb.lottie", +++ b/LottieSample/build.gradle, + applicationId "com.airbnb.lottie", +++ b/LottieSample/screenshots/Alarm 0.png, +++ b/LottieSample/build.gradle, + applicationId "com.airbnb.lottie", +++ b/LottieSample/screenshots/Alarm 0.png, +++ b/LottieSample/screenshots/Alarm 10.png, +++ b/LottieSample/build.gradle, + applicationId "com.airbnb.lottie", +++ b/LottieSample/screenshots/Alarm 0.png, +++ b/LottieSample/screenshots/Alarm 10.png, +++ b/LottieSample/screenshots/Alarm 100.png, +++ b/LottieSample/build.gradle, + applicationId "com.airbnb.lottie", +++ b/LottieSample/screenshots/Alarm 0.png, +++ b/LottieSample/screenshots/Alarm 10.png, +++ b/LottieSample/screenshots/Alarm 100.png, +++ b/LottieSample/screenshots/Alarm 15.png, +++ b/LottieSample/build.gradle, + applicationId "com.airbnb.lottie", +++ b/LottieSample/screenshots/Alarm 0.png, +++ b/LottieSample/screenshots/Alarm 10.png, +++ b/LottieSample/screenshots/Alarm 100.png, +++ b/LottieSample/screenshots/Alarm 15.png, +++ b/LottieSample/screenshots/Alarm 20.png, +++ b/LottieSample/build.gradle, + applicationId "com.airbnb.lottie", +++ b/LottieSample/screenshots/Alarm 0.png, +++ b/LottieSample/screenshots/Alarm 10.png, +++ b/LottieSample/screenshots/Alarm 100.png, +++ b/LottieSample/screenshots/Alarm 15.png, +++ b/LottieSample/screenshots/Alarm 20.png, +++ b/LottieSample/screenshots/Alarm 25.png, +++
[+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java, + setMinAndMaxFrames((int) composition.getStartFrame(), (int) composition.getEndFrame());]
[+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java, +package com.airbnb.lotte.samples;, +, +import android.os.Bundle;, +import android.support.annotation.Nullable;, +import android.support.v4.app.Fragment;, +import android.support.v7.widget.GridLayoutManager;, +import android.support.v7.widget.RecyclerView;, +import android.view.LayoutInflater;, +import android.view.View;, +import android.view.ViewGroup;, +, +import com.airbnb.lotte.LotteAnimationView;, +, +import butterknife.BindView;, +import butterknife.ButterKnife;, +, +public class GridFragment extends Fragment {, +, + public static GridFragment newInstance() {, + return new GridFragment();, + }, +, + @BindView(R.id.grid) RecyclerView recyclerView;, +, + @Nullable, + @Override, + public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {, + View view = inflater.inflate(R.layout.fragment_grid, container, false);, + ButterKnife.bind(this, view);, +, + recyclerView.setLayoutManager(new GridLayoutManager(getContext(), 2));, + recyclerView.setAdapter(new Adapter());, + return view;, + }, +, + private static final
[+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java, + int alpha = transform.getOpacity().getValue() * 255 / 100;, + fillPaint.setAlpha(alpha);, + strokePaint.setAlpha(alpha);, + if (paint.getColor() == Color.TRANSPARENT) {, + return;, + }, + if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0) {, + return;, + }]
[+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java, + end();]
[+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java, + if (curves.size() < points) {, + for (int i = curves.size(); i < points; i++) {, + } else if (curves.size() > points) {, + for (int i = points; i < curves.size(); i++) {, + curves.remove(curves.size() - 1);, + }]
[+++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 20.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 20.png, +++ b/LotteSample/screenshots/CheckSwitch 25.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 20.png, +++ b/LotteSample/screenshots/CheckSwitch 25.png, +++ b/LotteSample/screenshots/CheckSwitch 75.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 20.png, +++ b/LotteSample/screenshots/CheckSwitch 25.png, +++ b/LotteSample/screenshots/CheckSwitch 75.png, +++ b/LotteSample/src/main/assets/CheckCircle.json, +{, + "assets":[, +, + ],, + "v":"4.3.1",, + "ddd":0,, + "layers":[, + {, + "ddd":0,, + "ind":3,, + "ty":4,, + "nm":"White BG Outlines",, + "ks":{, + "o":{, + "k":100, + },, + "r":{, + "k":0, + },, + "p":{, + "k":[, + {, + "i":{, + "x":0,, + "y":1, + },, + "o":{, +
[+++ b/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java, + return x - y * floorDiv(x, y);, + boolean sameSign = (x ^ y) >= 0;, + int mod = x % y;, + if (!sameSign && mod != 0) {]
[+++ b/LottieSample/screenshots/lottiefiles.com_-_Loading_2.png, +++ b/LottieSample/screenshots/lottiefiles.com_-_Loading_2.png, +++ b/LottieSample/screenshots/lottiefiles.com_-_Postcard.png, +++ b/LottieSample/screenshots/lottiefiles.com_-_Loading_2.png, +++ b/LottieSample/screenshots/lottiefiles.com_-_Postcard.png, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java, + private final BaseKeyframeAnimation<Integer, Integer> colorAnimation;, + private final BaseKeyframeAnimation<Integer, Integer> opacityAnimation;, +++ b/LottieSample/screenshots/lottiefiles.com_-_Loading_2.png, +++ b/LottieSample/screenshots/lottiefiles.com_-_Postcard.png, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java, + private final BaseKeyframeAnimation<Integer, Integer> colorAnimation;, + private final BaseKeyframeAnimation<Integer, Integer> opacityAnimation;, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java, + private final BaseKeyframeAnimation<GradientColor, GradientColor> colorAnimation;, + private final BaseKeyframeAnimation<Integer, Integer> opacityAnimation;, + private final BaseKeyframeAnimation<PointF, PointF> startPointAnimation;, + private final BaseKeyframeAnimation<PointF, PointF> endPointAnimation;, +++ b/LottieSample/screenshots/lottiefiles.com_-_Loading_2.png, +++ b/LottieSample/screenshots/lottiefiles.com_-_Postcard.png, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java, + private final BaseKeyframeAnimation<Integer, Integer> colorAnimation;, + private final BaseKeyframeAnimation<Integer, Integer> opacityAnimation;, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java, + private final BaseKeyframeAnimation<GradientColor, GradientColor> colorAnimation;, + private final BaseKeyframeAnimation<Integer, Integer>
[+++ b/build.gradle, + ext.kotlinVersion = '1.2.51', + classpath 'com.android.tools.build:gradle:3.1.3', +++ b/build.gradle, + ext.kotlinVersion = '1.2.51', + classpath 'com.android.tools.build:gradle:3.1.3', +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.8-all.zip]
[+++ b/LottieSample/src/main/assets/Images/WeAccept/img_0.png, +++ b/LottieSample/src/main/assets/Images/WeAccept/img_0.png, +++ /dev/null, +++ b/LottieSample/src/main/assets/Images/WeAccept/img_0.png, +++ /dev/null, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java, + return getAlphaInternal();, + }, +, + /**, + * getAlpha was added in 19. This internal getAlpha allows us to call it, + * without having to avoid suppressing the NewApi lint rule., + */, + int getAlphaInternal() {, +++ b/LottieSample/src/main/assets/Images/WeAccept/img_0.png, +++ /dev/null, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java, + return getAlphaInternal();, + }, +, + /**, + * getAlpha was added in 19. This internal getAlpha allows us to call it, + * without having to avoid suppressing the NewApi lint rule., + */, + int getAlphaInternal() {, +++
[+++ b/LottieSample/screenshots/MotionCorpse-Jrcanest.png, +++ b/LottieSample/screenshots/MotionCorpse-Jrcanest.png, +++ b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java, +import android.support.annotation.CallSuper;, + private final RectF maskBoundsRect = new RectF();, + private final RectF matteBoundsRect = new RectF();, + private final RectF tempMaskBoundsRect = new RectF();, + final Matrix boundsMatrix = new Matrix();, + @CallSuper @Override public void getBounds(RectF outBounds, Matrix parentMatrix) {, + boundsMatrix.set(parentMatrix);, + boundsMatrix.preConcat(transform.getMatrix());, + }, +, + matrix.preConcat(transform.getMatrix());, + rect.set(0, 0, 0, 0);, + getBounds(rect, matrix);, + intersectBoundsWithMatte(rect, matrix);, +, + matrix.preConcat(transform.getMatrix());, + intersectBoundsWithMask(rect, matrix);, +, + rect.set(0, 0, canvas.getWidth(), canvas.getHeight());, +, + clearCanvas(canvas);, + clearCanvas(canvas);, + private void clearCanvas(Canvas canvas) {, + // If we don't pad the
[+++ b/LotteSample/src/main/res/layout/fragment_animation.xml]
[+++ b/codec-socks/src/main/java/io/netty/codec/socks/SocksMessage.java, + return b;, + return b;, + return b;, + return b;, + return b;, + return b;, +++ b/codec-socks/src/main/java/io/netty/codec/socks/SocksMessage.java, + return b;, + return b;, + return b;, + return b;, + return b;, + return b;, +++ b/codec-socks/src/test/java/io/netty/codec/socks/SocksAuthRequestDecoderTest.java, +import org.slf4j.Logger;, + private static final Logger logger = LoggerFactory.getLogger(SocksAuthRequestDecoderTest.class);, +++ b/codec-socks/src/main/java/io/netty/codec/socks/SocksMessage.java, + return b;, + return b;, + return b;, + return b;, + return b;, + return b;, +++ b/codec-socks/src/test/java/io/netty/codec/socks/SocksAuthRequestDecoderTest.java, +import org.slf4j.Logger;, + private static final Logger logger = LoggerFactory.getLogger(SocksAuthRequestDecoderTest.class);, +++ b/codec-socks/src/test/java/io/netty/codec/socks/SocksAuthResponseDecoderTest.java, +import org.slf4j.Logger;, + private static final Logger logger = LoggerFactory.getLogger(SocksAuthResponseDecoderTest.class);, +++ b/codec-socks/src/main/java/io/netty/codec/socks/SocksMessage.java, +
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java, +import java.util.Date;, +, + HttpHeaders.setContentLength(response, 0);, + HttpHeaders.setDate(response, new Date());]
[+++ b/transport/src/main/java/io/netty/channel/ChannelFuture.java, + * Adds the specified listeners to this future. The, + * specified listeners are notified when this future is, + * {@linkplain #isDone() done}. If this future is already, + * completed, the specified listeners are notified immediately., + */, + ChannelFuture addListeners(ChannelFutureListener... listeners);, +, + /**, + * Removes the specified listeners from this future., + * The specified listeners are no longer notified when this, + * future is {@linkplain #isDone() done}. If the specified, + * listeners are not associated with this future, this method, + * does nothing and returns silently., +
[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, + @Override, + public ByteBuf discardSomeReadBytes() {, + if (readerIndex == 0) {, + return this;, + }, +, + if (readerIndex == writerIndex) {, + adjustMarkers(readerIndex);, + writerIndex = readerIndex = 0;, + return this;, + }, +, + if (readerIndex >= capacity() >>> 1) {, + setBytes(0, this, readerIndex, writerIndex - readerIndex);, + writerIndex -= readerIndex;, + adjustMarkers(readerIndex);, + readerIndex = 0;, + }, + return this;, + }, +, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, + @Override, + public ByteBuf discardSomeReadBytes() {, + if (readerIndex == 0) {, + return this;, + }, +, + if (readerIndex ==
[+++ b/microbench/pom.xml, + <jmh.version>1.21</jmh.version>]
[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, + @Override, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, + @Override, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, + protected abstract class AbstractNioUnsafe extends AbstractUnsafe implements NioUnsafe {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, + @Override, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, + protected abstract class AbstractNioUnsafe extends AbstractUnsafe implements NioUnsafe {, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioMessageChannel.java, +package io.netty.channel.socket.nio;, +, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelBufferHolder;, +import io.netty.channel.ChannelBufferHolders;, +import io.netty.channel.ChannelPipeline;, +, +import java.io.IOException;, +import java.nio.channels.SelectableChannel;, +import java.util.Queue;, +, +abstract class AbstractNioMessageChannel extends AbstractNioChannel {, +, + private final ChannelBufferHolder<Object> firstOut = ChannelBufferHolders.messageBuffer();, +, + protected AbstractNioMessageChannel(, + Channel parent, Integer id, SelectableChannel ch, int defaultInterestOps) {, + super(parent, id, ch, defaultInterestOps);, + }, +, + @Override, + protected ChannelBufferHolder<Object> firstOut()
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/worldclock/WorldClockClient.java, +/*, + * Copyright 2012 The Netty Project, +
[+++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/channel/ChannelFactory.java, +import java.util.concurrent.Executor;, +, + * <h3>Graceful shutdown</h3>, + * <p>, + * To shut down a network application service which is managed by a factory., + * you should follow the following steps:, + * <ol>, +
[+++ b/pom.xml, + <repositories>, + <repository>, + <id>JBoss-Public</id>, + <url>http://repository.jboss.org/nexus/content/groups/public-jboss/</url>, + </repository>, + </repositories>, +, + <pluginRepositories>, + <pluginRepository>, + <id>JBoss-Public</id>, + <url>http://repository.jboss.org/nexus/content/groups/public-jboss/</url>, + </pluginRepository>, + </pluginRepositories>, +, +++ b/pom.xml, + <repositories>, + <repository>, + <id>JBoss-Public</id>, + <url>http://repository.jboss.org/nexus/content/groups/public-jboss/</url>, + </repository>, + </repositories>, +, + <pluginRepositories>, + <pluginRepository>, + <id>JBoss-Public</id>, + <url>http://repository.jboss.org/nexus/content/groups/public-jboss/</url>, + </pluginRepository>, + </pluginRepositories>, +, +++ b/src/docbook/en-US/module/start.xml, + time.writeInt(System.currentTimeMillis() / 1000);, +++ b/pom.xml, + <repositories>, + <repository>, + <id>JBoss-Public</id>, + <url>http://repository.jboss.org/nexus/content/groups/public-jboss/</url>, + </repository>, + </repositories>, +, + <pluginRepositories>, + <pluginRepository>, + <id>JBoss-Public</id>, + <url>http://repository.jboss.org/nexus/content/groups/public-jboss/</url>, + </pluginRepository>, + </pluginRepositories>, +, +++ b/src/docbook/en-US/module/start.xml, + time.writeInt(System.currentTimeMillis() / 1000);, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java, +
[+++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtProvider.java, + if (channel instanceof NioUdtByteConnectorChannel) {, + return ((NioUdtByteConnectorChannel) channel).javaChannel();, + }, +, + if (channel instanceof NioUdtMessageConnectorChannel) {, + return ((NioUdtMessageConnectorChannel) channel).javaChannel();, + }, +, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtProvider.java, + if (channel instanceof NioUdtByteConnectorChannel) {, + return ((NioUdtByteConnectorChannel) channel).javaChannel();, + }, +, + if (channel instanceof NioUdtMessageConnectorChannel) {, + return ((NioUdtMessageConnectorChannel) channel).javaChannel();, + }, +, +++ b/transport-udt/src/test/java/io/netty/test/udt/nio/NioUdtProviderTest.java, +import io.netty.channel.udt.nio.NioUdtByteAcceptorChannel;, +import io.netty.channel.udt.nio.NioUdtByteConnectorChannel;, +import io.netty.channel.udt.nio.NioUdtByteRendezvousChannel;, +import io.netty.channel.udt.nio.NioUdtMessageAcceptorChannel;, +import io.netty.channel.udt.nio.NioUdtMessageConnectorChannel;, +import io.netty.channel.udt.nio.NioUdtMessageRendezvousChannel;, +, + NioUdtByteAcceptorChannel nioUdtByteAcceptorChannel, + = (NioUdtByteAcceptorChannel) NioUdtProvider.BYTE_ACCEPTOR.newChannel();, + NioUdtByteConnectorChannel nioUdtByteConnectorChannel, + = (NioUdtByteConnectorChannel) NioUdtProvider.BYTE_CONNECTOR.newChannel();, + NioUdtByteRendezvousChannel nioUdtByteRendezvousChannel, + = (NioUdtByteRendezvousChannel) NioUdtProvider.BYTE_RENDEZVOUS.newChannel();, + NioUdtMessageAcceptorChannel nioUdtMessageAcceptorChannel, + = (NioUdtMessageAcceptorChannel) NioUdtProvider.MESSAGE_ACCEPTOR.newChannel();,
[+++ b/transport-sctp/pom.xml, +, + <build>, + <plugins>, + <plugin>, + <artifactId>maven-surefire-plugin</artifactId>, + <version>2.7.2</version>, + <executions>, + <execution>, + <id>default-test</id>, + <configuration>, + <!--, + Ignore SCTP Test cases by default, + Note: Java SCTP only available for Linux and Solaris, + -->, + <skipTests>true</skipTests>, + </configuration>, + </execution>, + </executions>, + </plugin>, + </plugins>, + </build>]
[+++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +, + if (packetLength == SslUtils.NOT_ENCRYPTED) {, + throw new NotSslRecordException("not an SSL/TLS record");, + }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +, + if (packetLength == SslUtils.NOT_ENCRYPTED) {, + throw new NotSslRecordException("not an SSL/TLS record");, + }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/SniHandler.java, + if (len == SslUtils.NOT_ENCRYPTED) {, + if (len == SslUtils.NOT_ENOUGH_DATA ||, + writerIndex - readerIndex - SslUtils.SSL_RECORD_HEADER_LENGTH < len) {, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +, + if (packetLength == SslUtils.NOT_ENCRYPTED) {, + throw new NotSslRecordException("not an SSL/TLS record");, + }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/SniHandler.java, + if (len == SslUtils.NOT_ENCRYPTED) {, + if (len == SslUtils.NOT_ENOUGH_DATA ||, + writerIndex - readerIndex -
[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyCodecUtil.java, + * Copyright 2013 The Netty Project, + static final int SPDY_DATA_FRAME = 0;, + static final int SPDY_PUSH_PROMISE_FRAME = 5;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyCodecUtil.java, + * Copyright 2013 The Netty Project, + static final int SPDY_DATA_FRAME = 0;, + static final int SPDY_PUSH_PROMISE_FRAME = 5;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameDecoder.java, + private static final SpdyProtocolException INVALID_FRAME =, + new SpdyProtocolException("Received invalid frame");, +, + private final SpdyHeaderBlockDecoder headerBlockDecoder;, + private int streamId;, + this(version, maxChunkSize, SpdyHeaderBlockDecoder.newInstance(version, maxHeaderSize));, + }, +, + protected SpdyFrameDecoder(, + int version, int maxChunkSize, SpdyHeaderBlockDecoder headerBlockDecoder) {, + this.headerBlockDecoder = headerBlockDecoder;, + headerBlockDecoder.end();, + fireInvalidFrameException(ctx);, + SpdyDataFrame
[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CleartextHttp2ServerUpgradeHandler.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express
[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, + public short getShortLE(int index) {, + checkIndex(index, 2);, + return _getShortLE(index);, + }, +, + protected abstract short _getShortLE(int index);, +, + @Override, + public int getUnsignedShortLE(int index) {, + return getShortLE(index) & 0xFFFF;, + }, +, + @Override, + public int getUnsignedMediumLE(int index) {, + checkIndex(index, 3);, + return _getUnsignedMediumLE(index);, + }, +, + protected abstract int _getUnsignedMediumLE(int index);, +, + @Override, + public int getMediumLE(int index) {, + int value = getUnsignedMediumLE(index);, + if ((value & 0x800000) != 0) {, + value |= 0xff000000;, + }, + return value;, + }, +, + @Override,
[+++ b/src/docbook/master.xml, + &security;]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, + if (!read) {, + if (!ctx.channel().config().isAutoRead()) {, + ctx.read();, + }, + }, + super.channelReadComplete(ctx);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, + if (!read) {, + if (!ctx.channel().config().isAutoRead()) {, + ctx.read();, + }, + }, + super.channelReadComplete(ctx);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + if (decodeWasNull) {, + if (!ctx.channel().config().isAutoRead()) {, + ctx.fireChannelReadComplete();, + }, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, + if (!read) {, + if (!ctx.channel().config().isAutoRead()) {, + ctx.read();, + }, + }, + super.channelReadComplete(ctx);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + if (decodeWasNull) {, + if (!ctx.channel().config().isAutoRead()) {, + ctx.fireChannelReadComplete();, + }, +++ b/codec/src/test/java/io/netty/handler/codec/ByteToMessageDecoderTest.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, + if (!read) {, + if (!ctx.channel().config().isAutoRead()) {, + ctx.read();, + }, +
[+++ b/buffer/src/main/java/io/netty/buffer/AbstractMessageBuf.java, +import io.netty.util.internal.PlatformDependent;, +, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, + @SuppressWarnings("rawtypes"), + private static final AtomicIntegerFieldUpdater<AbstractMessageBuf> refCntUpdater =, + AtomicIntegerFieldUpdater.newUpdater(AbstractMessageBuf.class, "refCnt");, +, + private static final long REFCNT_FIELD_OFFSET;, +, + static {, + long refCntFieldOffset = -1;, + try {, + if (PlatformDependent.hasUnsafe()) {, + refCntFieldOffset = PlatformDependent.objectFieldOffset(AbstractMessageBuf.class.getDeclaredField("refCnt"));, + }, + } catch (Throwable ignored) { }, +, + REFCNT_FIELD_OFFSET = refCntFieldOffset;, + }, +, +, + @SuppressWarnings("FieldMayBeFinal"), + private volatile int refCnt = 1;, + if (REFCNT_FIELD_OFFSET >= 0) {, + // Try to do non-volatile read for performance., + return PlatformDependent.getInt(this, REFCNT_FIELD_OFFSET);, + } else {, + }, +
[+++ b/example/pom.xml, + <groupId>${conscrypt.groupId}</groupId>, + <artifactId>${conscrypt.artifactId}</artifactId>, + <classifier>${conscrypt.classifier}</classifier>, + </dependency>, + <dependency>, +++ b/example/pom.xml, + <groupId>${conscrypt.groupId}</groupId>, + <artifactId>${conscrypt.artifactId}</artifactId>, + <classifier>${conscrypt.classifier}</classifier>, + </dependency>, + <dependency>, +++ b/handler/pom.xml, + <groupId>${conscrypt.groupId}</groupId>, + <artifactId>${conscrypt.artifactId}</artifactId>, + <classifier>${conscrypt.classifier}</classifier>, + </dependency>, + <dependency>, +++ b/example/pom.xml, + <groupId>${conscrypt.groupId}</groupId>, + <artifactId>${conscrypt.artifactId}</artifactId>, + <classifier>${conscrypt.classifier}</classifier>, + </dependency>, + <dependency>, +++ b/handler/pom.xml, + <groupId>${conscrypt.groupId}</groupId>, + <artifactId>${conscrypt.artifactId}</artifactId>, + <classifier>${conscrypt.classifier}</classifier>, + </dependency>, + <dependency>, +++ b/handler/src/main/java/io/netty/handler/ssl/ConscryptAlpnSslEngine.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except
[+++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + * public void decode(.., {@link ByteBuf} in, {@link MessageList} out) throws Exception {, + * out.add(values.poll() + values.poll());, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + * public void decode(.., {@link ByteBuf} buffer, {@link MessageList} out) throws Exception {, + * out.add(values.poll() + values.poll());, + * protected void decode({@link ChannelHandlerContext} ctx,, + * {@link ByteBuf} in, {@link MessageList} out) throws Exception {, + * out.add(frame);, + * protected void decode({@link ChannelHandlerContext} ctx,, + * {@link ByteBuf} in, {@link MessageList} out) throws
[+++ b/buffer/src/main/java/io/netty/buffer/PoolChunk.java, +, +++ b/buffer/src/main/java/io/netty/buffer/PoolChunk.java, +, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java, + tmpNioBuf = null;, +++ b/buffer/src/main/java/io/netty/buffer/PoolChunk.java, +, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java, + tmpNioBuf = null;, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java]
[+++ b/codec/src/main/java/io/netty/handler/codec/DelimiterBasedFrameDecoder.java, + fail(tooLongFrameLength);, + fail(minFrameLength);, + fail(tooLongFrameLength);, + private void fail(long frameLength) {, + throw new TooLongFrameException(, + ": " + frameLength + " - discarded");, + throw new TooLongFrameException(, + " - discarding");, +++ b/codec/src/main/java/io/netty/handler/codec/DelimiterBasedFrameDecoder.java, + fail(tooLongFrameLength);, + fail(minFrameLength);, + fail(tooLongFrameLength);, + private void fail(long frameLength) {, + throw new TooLongFrameException(, + ": " + frameLength + " - discarded");, + throw new TooLongFrameException(, + " - discarding");, +++ b/codec/src/main/java/io/netty/handler/codec/json/JsonObjectDecoder.java, + throw new TooLongFrameException(, + "object length exceeds " + maxObjectLength + ": " + wrtIdx + " bytes discarded");, +, +++ b/codec/src/main/java/io/netty/handler/codec/DelimiterBasedFrameDecoder.java, + fail(tooLongFrameLength);, + fail(minFrameLength);,
[+++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, + ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, + ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, + ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, + ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, + ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledUnsafeDirectByteBuf.java, + ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, + ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, + ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledUnsafeDirectByteBuf.java, + ensureAccessible();, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, + @Test, + public void testArrayAfterRelease() {, + ByteBuf buf = releasedBuffer();, + if (buf.hasArray()) {, + try {, + buf.array();, + fail();, + } catch (IllegalReferenceCountException e) {, + // expected, + }, + }, + }, +, + @Test, + public void testMemoryAddressAfterRelease() {, + ByteBuf buf = releasedBuffer();, + if (buf.hasMemoryAddress()) {, + try {, + buf.memoryAddress();, +
[+++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +import io.netty.util.internal.PlatformDependent;, + String allocType = SystemPropertyUtil.get(, + "io.netty.allocator.type", PlatformDependent.isAndroid() ? "unpooled" : "pooled");, + allocType = allocType.toLowerCase(Locale.US).trim();, +, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +import io.netty.util.internal.PlatformDependent;, + String allocType = SystemPropertyUtil.get(, + "io.netty.allocator.type", PlatformDependent.isAndroid() ? "unpooled" : "pooled");, + allocType = allocType.toLowerCase(Locale.US).trim();, +, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +import io.netty.util.internal.PlatformDependent;, + String allocType = SystemPropertyUtil.get(, + "io.netty.allocator.type", PlatformDependent.isAndroid() ? "unpooled" : "pooled");, + allocType = allocType.toLowerCase(Locale.US).trim();, +, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, + boolean directBufferFreeable = false;, + Class<?> cls = Class.forName("sun.nio.ch.DirectBuffer", false, PlatformDependent0.class.getClassLoader());, + Method method = cls.getMethod("cleaner");, + if ("sun.misc.Cleaner".equals(method.getReturnType().getName())) {, + directBufferFreeable = true;, + } catch (Throwable t)
[+++ b/example/src/main/java/io/netty/example/discard/DiscardClient.java, + private final String host;, + private final int port;, + private final int firstMessageSize;, +, + public DiscardClient(String host, int port, int firstMessageSize) {, + this.host = host;, + this.port = port;, + this.firstMessageSize = firstMessageSize;, + }, +, + public void run() {, + // Configure the client., + ClientBootstrap bootstrap = new ClientBootstrap(, + new NioClientSocketChannelFactory(, + Executors.newCachedThreadPool(),, + Executors.newCachedThreadPool()));, +, + // Set up the pipeline factory., + bootstrap.setPipelineFactory(new ChannelPipelineFactory() {, + public ChannelPipeline getPipeline() throws Exception {, + return Channels.pipeline(, + new DiscardClientHandler(firstMessageSize));, + }, + });, +, + // Start the
[+++ b/pom.xml, + JBoss, Home of Professional Open Source, + Copyright 2008, Red Hat Middleware LLC, and individual contributors, + by the @author tags. See the COPYRIGHT.txt in the distribution for a, + full listing of individual contributors., + This is free software; you can redistribute it and/or modify it, + under the terms of the GNU Lesser General Public License as, + published by the Free Software Foundation; either version 2.1 of, + the License, or (at your option) any later version., + , + This software is distributed in the hope that it will be useful,, +
[+++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksAuthRequest.java, + throw new IllegalArgumentException(, + "username: " + username + " or password: **** values should be in pure ascii");, + throw new IllegalArgumentException("username: " + username + " exceeds 255 char limit");, + throw new IllegalArgumentException("password: **** exceeds 255 char limit");]
[+++ b/pom.xml, + <!--, + <allowTimestampedSnapshots>true</allowTimestampedSnapshots>]
[+++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, + private final Collection<EventExecutor> selfCollection = Collections.<EventExecutor>singleton(this);, + return selfCollection.iterator();, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, + private final Collection<EventExecutor> selfCollection = Collections.<EventExecutor>singleton(this);, + return selfCollection.iterator();, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, + private final Collection<EventExecutor> selfCollection = Collections.<EventExecutor>singleton(this);, + return selfCollection.iterator();, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutorGroup.java, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, + private final Collection<EventExecutor> selfCollection = Collections.<EventExecutor>singleton(this);, + return selfCollection.iterator();, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutorGroup.java, +++ b/common/src/main/java/io/netty/util/concurrent/MultithreadEventExecutorGroup.java, + return readonlyChildren.iterator();, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, + private final Collection<EventExecutor> selfCollection = Collections.<EventExecutor>singleton(this);, + return selfCollection.iterator();, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutorGroup.java, +++ b/common/src/main/java/io/netty/util/concurrent/MultithreadEventExecutorGroup.java, + return readonlyChildren.iterator();, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoopGroup.java, + for (EventExecutor e: this) {, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, + private final Collection<EventExecutor> selfCollection
[+++ b/microbench/pom.xml, + <version>1.14.1</version>, + <version>1.14.1</version>]
[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java, +import io.netty.handler.codec.http2.Http2Exception;, +import static io.netty.handler.codec.http2.Http2Error.COMPRESSION_ERROR;, +import static io.netty.handler.codec.http2.Http2Error.ENHANCE_YOUR_CALM;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.util.internal.ThrowableUtil.unknownStackTrace;, + private static final Http2Exception DECODE_DECOMPRESSION_EXCEPTION = unknownStackTrace(, + connectionError(COMPRESSION_ERROR, "HPACK - decompression failure"), Decoder.class, "decode(...)");, + private static final Http2Exception DECODE_ULE_128_DECOMPRESSION_EXCEPTION = unknownStackTrace(, + connectionError(COMPRESSION_ERROR, "HPACK - decompression failure"), Decoder.class, "decodeULE128(...)");, + private static final Http2Exception DECODE_ILLEGAL_INDEX_VALUE = unknownStackTrace(, + connectionError(COMPRESSION_ERROR, "HPACK - illegal index value"), Decoder.class, "decode(...)");, + private static final Http2Exception INDEX_HEADER_ILLEGAL_INDEX_VALUE = unknownStackTrace(, + connectionError(COMPRESSION_ERROR, "HPACK - illegal index value"), Decoder.class, "indexHeader(...)");, + private static final Http2Exception READ_NAME_ILLEGAL_INDEX_VALUE = unknownStackTrace(, + connectionError(COMPRESSION_ERROR, "HPACK - illegal
[+++ b/codec/src/main/java/io/netty/handler/codec/json/JsonObjectDecoder.java, + private int lastReaderIndex;, +, + if (this.idx > in.readerIndex() && lastReaderIndex != in.readerIndex()) {, + this.idx = in.readerIndex();, + reset();, + }, +, + this.lastReaderIndex = in.readerIndex();, +++ b/codec/src/main/java/io/netty/handler/codec/json/JsonObjectDecoder.java, + private int lastReaderIndex;, +, + if (this.idx > in.readerIndex() && lastReaderIndex != in.readerIndex()) {, + this.idx = in.readerIndex();, + reset();, + }, +, + this.lastReaderIndex = in.readerIndex();, +++ b/codec/src/test/java/io/netty/handler/codec/json/JsonObjectDecoderTest.java, +, + @Test, + public void testCorruptedFrameException() {, + final String part1 = "{\"a\":{\"b\":{\"c\":{ \"d\":\"27301\", \"med\":\"d\", \"path\":\"27310\"} }," +, + " \"status\":\"OK\" } }{\"";, + final String part2 = "a\":{\"b\":{\"c\":{\"ory\":[{\"competi\":[{\"event\":[{" + "\"externalI\":{\"external\"" +, + ":[{\"id\":\"O\"} ]";, +,
[+++ b/pom.xml, + <url>http://fisheye.jboss.org/browse/Netty</url>, + <connection>scm:svn:http://anonsvn.jboss.org/repos/netty/trunk</connection>, + <developerConnection>scm:svn:https://svn.jboss.org/repos/netty/trunk</developerConnection>, + <tagBase>https://svn.jboss.org/repos/netty/tags</tagBase>, +++ b/pom.xml, + <url>http://fisheye.jboss.org/browse/Netty</url>, + <connection>scm:svn:http://anonsvn.jboss.org/repos/netty/trunk</connection>, + <developerConnection>scm:svn:https://svn.jboss.org/repos/netty/trunk</developerConnection>, + <tagBase>https://svn.jboss.org/repos/netty/tags</tagBase>, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannelConfig.java, + * will start to return {@code false}., + * will start to return {@code false}., + * {@code true} again., + * {@code true} again.]
[+++ b/transport/src/main/java/io/netty/channel/ChannelHandler.java, + * Gets called if a {@link Throwable} was thrown., + */, + void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;, +, + /**, +++ b/transport/src/main/java/io/netty/channel/ChannelHandler.java, + * Gets called if a {@link Throwable} was thrown., + */, + void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;, +, + /**, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerAdapter.java, +, + /**, + * Calls {@link ChannelHandlerContext#fireExceptionCaught(Throwable)} to forward, + * to the next {@link ChannelHandler} in the {@link ChannelPipeline}., + *, + * Sub-classes may override this method to change behavior., + */, + @Override, + public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause), + throws Exception
[+++ b/transport/src/main/java/io/netty/channel/ChannelInitializer.java, +import io.netty.util.internal.PlatformDependent;, +import java.util.concurrent.ConcurrentMap;, +, + // We use a ConcurrentMap as a ChannelInitializer is usually shared between all Channels in a Bootstrap /, + // ServerBootstrap. This way we can reduce the memory usage compared to use Attributes., + private final ConcurrentMap<ChannelHandlerContext, Boolean> initMap = PlatformDependent.newConcurrentHashMap();, + // Normally this method will never be called as handlerAdded(...) should call initChannel(...) and remove, + // the handler., + if (initChannel(ctx)) {, + // we called initChannel(...) so we need to call now pipeline.fireChannelRegistered() to ensure we not, + // miss an event., + } else {, +
[+++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, + try {, + } catch (IOException e) {, + // If we receive an IOException here its because the Selector is messed up. Let's rebuild, + // the selector and retry. https://github.com/netty/netty/issues/8566, + rebuildSelector0();, + handleLoopException(e);, + continue;, + }, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, + try {, + } catch (IOException e) {, + // If we receive an IOException here its because the Selector is messed up. Let's rebuild, + // the selector and retry. https://github.com/netty/netty/issues/8566, + rebuildSelector0();, + handleLoopException(e);, + continue;, + }, +++ b/transport/src/test/java/io/netty/channel/nio/NioEventLoopTest.java, +import io.netty.channel.SelectStrategy;, +import io.netty.channel.SelectStrategyFactory;, +import io.netty.util.IntSupplier;, +import io.netty.util.concurrent.DefaultThreadFactory;, +import java.io.IOException;, +import
[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/oio/OioSctpChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/oio/OioSctpChannel.java, + RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();, +++
[+++ b/pom.xml, + <mkdir dir="${basedir}/target" />]
[+++ b/lib/apiviz-1.3.1.GA.jar, +++ b/lib/apiviz-1.3.1.GA.jar, +++ b/pom.xml, + <docletPath>${basedir}/lib/apiviz-1.3.1.GA.jar</docletPath>]
[+++ b/src/main/java/org/jboss/netty/example/http/HttpClient.java, +/*, + * JBoss, Home of Professional Open Source, + * Copyright 2005-2008, Red Hat Middleware LLC, and individual contributors, + * by the @authors tag. See the copyright.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This
[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +, + // Test if netty-tcnative is in the classpath first., + try {, + Class.forName("org.apache.tomcat.jni.SSL", false, OpenSsl.class.getClassLoader());, + } catch (ClassNotFoundException t) {, + cause = t;, + logger.debug(, + "netty-tcnative not in the classpath; " +, + OpenSslEngine.class.getSimpleName() + " will be unavailable.");, + }, +, + // If in the classpath, try to load the native library and initialize netty-tcnative., + if (cause == null) {, + }, +]
[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollServerDomainSocketChannel.java, + active = true;]
[+++ b/COPYRIGHT.txt, +contributors, and is licensed under the GNU LGPL (Lesser General Public License), +as published by the Free Software Foundation; either version 2.1 of the License,, +or (at your option) any later version.]
[+++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, + } else if (dst.hasArray()) {]
[+++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldBasedFrameDecoder.java, + ByteBuf frame = extractFrame(ctx, in, readerIndex, actualFrameLength);, + protected ByteBuf extractFrame(ChannelHandlerContext ctx, ByteBuf buffer, int index, int length) {, + ByteBuf frame = ctx.alloc().buffer(length);, +++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldBasedFrameDecoder.java, + ByteBuf frame = extractFrame(ctx, in, readerIndex, actualFrameLength);, + protected ByteBuf extractFrame(ChannelHandlerContext ctx, ByteBuf buffer, int index, int length) {, + ByteBuf frame = ctx.alloc().buffer(length);, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibEncoder.java, + ByteBuf footer = ctx.alloc().buffer();, +++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldBasedFrameDecoder.java, + ByteBuf frame = extractFrame(ctx, in, readerIndex, actualFrameLength);, + protected ByteBuf extractFrame(ChannelHandlerContext ctx, ByteBuf buffer, int index, int length) {, + ByteBuf frame = ctx.alloc().buffer(length);, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibEncoder.java, + ByteBuf footer = ctx.alloc().buffer();, +++ b/codec/src/main/java/io/netty/handler/codec/marshalling/MarshallingDecoder.java, + protected
[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, + } finally {, + headerBlock.release();]
[+++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java, + assert memory != null;, +]
[+++ b/buffer/src/main/java/io/netty/buffer/PooledDirectByteBuf.java, + return copy;, +++ b/buffer/src/main/java/io/netty/buffer/PooledDirectByteBuf.java, + return copy;, +++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, + return copy;]
[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +, + @Test, + public void testSimpleSendWithoutBind() throws Throwable {, + //run();, + }, +, + public void testSimpleSendWithoutBind(Bootstrap sb, Bootstrap cb) throws Throwable {, + final CountDownLatch latch = new CountDownLatch(1);, +, + sb.handler(new SimpleChannelInboundHandler<DatagramPacket>() {, + @Override, + public void channelRead0(ChannelHandlerContext ctx, DatagramPacket msg) throws Exception {, + assertEquals(1, msg.content().readInt());, + latch.countDown();, + }, + });, +, + cb.handler(new SimpleChannelInboundHandler<Object>() {, + @Override, + public void channelRead0(ChannelHandlerContext ctx, Object msgs) throws Exception {, + // Nothing will be sent., + }, + });, +, + Channel sc = sb.bind().sync().channel();, + Channel cc = cb.register().sync().channel();, +,
[+++ b/all/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/codec-socks/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/codec-socks/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/codec/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/codec-socks/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/codec/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/common/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.9.Final-SNAPSHOT</version>, +++ b/codec-socks/pom.xml, +
[+++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, + static final byte[] ARGS_PREFIX = "*".getBytes();, + static final byte[] CRLF = "\r\n".getBytes();, + static final byte[] BYTES_PREFIX = "$".getBytes();, + static final byte[] EMPTY_BYTES = new byte[0];, + static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, + static final byte[] ARGS_PREFIX = "*".getBytes();, + static final byte[] CRLF = "\r\n".getBytes();, + static final byte[] BYTES_PREFIX = "$".getBytes();, + static final byte[] EMPTY_BYTES = new byte[0];, + static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisDecoder.java, +++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, + static final byte[] ARGS_PREFIX = "*".getBytes();, + static final byte[] CRLF = "\r\n".getBytes();, + static final byte[] BYTES_PREFIX
[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, + return PooledHeapByteBuf.newInstance(maxCapacity);, + return PooledUnsafeDirectByteBuf.newInstance(maxCapacity);, + return PooledDirectByteBuf.newInstance(maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, + return PooledHeapByteBuf.newInstance(maxCapacity);, + return PooledUnsafeDirectByteBuf.newInstance(maxCapacity);, + return PooledDirectByteBuf.newInstance(maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java, +import io.netty.util.Recycler;, +import io.netty.util.ResourceLeakDetector;, + private final Recycler.Handle recyclerHandle;, + protected PooledByteBuf(Recycler.Handle recyclerHandle, int maxCapacity) {, + this.recyclerHandle = recyclerHandle;, + if (ResourceLeakDetector.ENABLED) {, + } else {, + recycle();, + }, +, + @SuppressWarnings("unchecked"), + private void recycle() {, + Recycler.Handle recyclerHandle = this.recyclerHandle;, + if (recyclerHandle != null) {, + setRefCnt(1);, + ((Recycler<Object>) recycler()).recycle(this, recyclerHandle);, + }, + }, +, + protected abstract Recycler<?> recycler();, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, + return PooledHeapByteBuf.newInstance(maxCapacity);, + return PooledUnsafeDirectByteBuf.newInstance(maxCapacity);,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelWorker.java, + private final HttpTunnelingClientSocketChannel channel;, + HttpTunnelWorker(HttpTunnelingClientSocketChannel channel) {, + HttpTunnelingClientSocketChannel channel, ChannelFuture future,, + HttpTunnelingClientSocketChannel channel, ChannelFuture future, int interestOps) {, + static void close(HttpTunnelingClientSocketChannel channel, ChannelFuture future) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelWorker.java, + private final HttpTunnelingClientSocketChannel channel;, + HttpTunnelWorker(HttpTunnelingClientSocketChannel channel) {, + HttpTunnelingClientSocketChannel channel, ChannelFuture future,, + HttpTunnelingClientSocketChannel channel, ChannelFuture future, int interestOps) {, + static void close(HttpTunnelingClientSocketChannel channel, ChannelFuture future)
[+++ b/testsuite-osgi/testsuite-osgi-deps/pom.xml, + <!-- feature doesn't invoke maven-compile-plugin unless specified explicitly. -->, + <plugin>, + <artifactId>maven-compiler-plugin</artifactId>, + <executions>, + <execution>, + <id>compile</id>, + <phase>compile</phase>, + <goals>, + <goal>compile</goal>, + </goals>, + </execution>, + <execution>, + <id>test-compile</id>, + <phase>test-compile</phase>, + <goals>, + <goal>testCompile</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, +++ b/testsuite-osgi/testsuite-osgi-deps/pom.xml, + <!-- feature doesn't invoke maven-compile-plugin unless specified explicitly. -->, + <plugin>, + <artifactId>maven-compiler-plugin</artifactId>, + <executions>, + <execution>, + <id>compile</id>, + <phase>compile</phase>, + <goals>, + <goal>compile</goal>, + </goals>, + </execution>, + <execution>, + <id>test-compile</id>, + <phase>test-compile</phase>, + <goals>, + <goal>testCompile</goal>, + </goals>, + </execution>, + </executions>, +
[+++ b/all/pom.xml, + <version>4.1.12.Final</version>, +++ b/all/pom.xml, + <version>4.1.12.Final</version>, +++ b/bom/pom.xml, + <version>4.1.12.Final</version>, + <tag>netty-4.1.12.Final</tag>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, +++ b/all/pom.xml, + <version>4.1.12.Final</version>, +++ b/bom/pom.xml, + <version>4.1.12.Final</version>, + <tag>netty-4.1.12.Final</tag>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, + <version>4.1.12.Final</version>, +
[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + if (ctx.isRemoved()) {, + if (ctx.isRemoved()) {, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + if (ctx.isRemoved()) {, + if (ctx.isRemoved()) {, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, + if (!ctx.isRemoved() && acceptOutboundMessage(m)) {, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + if (ctx.isRemoved()) {, + if (ctx.isRemoved()) {, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, + if (!ctx.isRemoved() && acceptOutboundMessage(m)) {, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageDecoder.java, + if (!ctx.isRemoved() && acceptInboundMessage(m)) {, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + if (ctx.isRemoved()) {, + if (ctx.isRemoved()) {, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, + if (!ctx.isRemoved() && acceptOutboundMessage(m)) {, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageDecoder.java, + if (!ctx.isRemoved() && acceptInboundMessage(m)) {, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageEncoder.java, + if (!ctx.isRemoved() && acceptOutboundMessage(m)) {, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + if (ctx.isRemoved()) {, + if (ctx.isRemoved()) {, +++
[+++ b/testsuite/src/main/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, + serverBootstrap.localAddress(new InetSocketAddress(NetUtil.LOCALHOST, 0));, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, + serverBootstrap.localAddress(new InetSocketAddress(NetUtil.LOCALHOST, 0));, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/sctp/SctpEchoTest.java, + Channel cc = cb.connect(sc.localAddress()).sync().channel();, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, + serverBootstrap.localAddress(new InetSocketAddress(NetUtil.LOCALHOST, 0));, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/sctp/SctpEchoTest.java, + Channel cc = cb.connect(sc.localAddress()).sync().channel();, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, + return new InetSocketAddress(NetUtil.LOCALHOST, 0);, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, + serverBootstrap.localAddress(new InetSocketAddress(NetUtil.LOCALHOST, 0));, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/sctp/SctpEchoTest.java, + Channel cc = cb.connect(sc.localAddress()).sync().channel();, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, + return new InetSocketAddress(NetUtil.LOCALHOST, 0);, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +import java.net.SocketAddress;, + protected SocketAddress newSocketAddress() {, + // We use LOCALHOST4 as we use InternetProtocolFamily.IPv4 when creating the DatagramChannel and its, + // not supported to bind to and IPV6 address in this case., + //, +
[+++ b/pom.xml, + <outputDirectory>${basedir}/src/target/classes/META-INF</outputDirectory>]
[+++ b/buffer/src/main/java/io/netty/buffer/CompositeChannelBuffer.java, +import io.netty.util.internal.DetectionUtil;, +, + if (DetectionUtil.javaVersion() >= 7) {, + return (int) out.write(toByteBuffers(index, length));, + }, +++ b/buffer/src/main/java/io/netty/buffer/CompositeChannelBuffer.java, +import io.netty.util.internal.DetectionUtil;, +, + if (DetectionUtil.javaVersion() >= 7) {, + return (int) out.write(toByteBuffers(index, length));, + }, +++ b/buffer/src/main/java/io/netty/buffer/DynamicChannelBuffer.java, + , + , + // Check if we exceeded the maximum size of 2gb if this is the case then , + // newCapacity == 0, + //, + // https://github.com/netty/netty/issues/258, + if (newCapacity == 0) {, + throw new IllegalStateException("Maximum size of 2gb exceeded");, + }, +++ b/buffer/src/main/java/io/netty/buffer/CompositeChannelBuffer.java, +import io.netty.util.internal.DetectionUtil;, +, + if (DetectionUtil.javaVersion() >= 7) {, + return
[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, + protected final PropertyKey streamKey;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, + protected final PropertyKey streamKey;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.HTTP_UPGRADE_STREAM_ID;, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +, + private final ChannelHandler upgradeStreamHandler;, + ChannelHandler inboundStreamHandler,, + ChannelHandler upgradeStreamHandler) {, + this.upgradeStreamHandler = upgradeStreamHandler;, + }, +, + @Override, + public void onHttpClientUpgrade() throws Http2Exception {, + // We must have an upgrade handler or else we can't handle the stream, + if (upgradeStreamHandler == null) {, + throw connectionError(INTERNAL_ERROR, "Client is misconfigured for upgrade requests");, + }, + // Creates the Http2Stream in the Connection., + super.onHttpClientUpgrade();, + // Now
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, + private final long maxFrameSize;, + /**, + * Creates a new instance of {@code WebSocketFrameDecoder} with the specified {@code maxFrameSize}. If the client, + * sends a frame size larger than {@code maxFrameSize}, the channel will be closed., + * , + * @param maxFrameSize, + * the maximum frame size to decode, + */, + public WebSocket00FrameDecoder(long maxFrameSize) {, + this.maxFrameSize = maxFrameSize;, + }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, + private final long maxFrameSize;, + /**, + * Creates a new instance of {@code WebSocketFrameDecoder} with the specified {@code maxFrameSize}. If the client, + * sends
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpChunk.java, +, + @Override, + public String toString() {, + StringBuilder buf = new StringBuilder();, + buf.append(getClass().getSimpleName());, +, + final boolean last = isLast();, + buf.append("(last: ");, + buf.append(last);, + if (!last) {, + buf.append(", size: ");, + buf.append(getContent().readableBytes());, + }, +, + buf.append(", decodeResult: ");, + buf.append(getDecodeResult());, + buf.append(')');, +, + return buf.toString();, + }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpChunk.java, +, + @Override, + public String toString() {, + StringBuilder buf = new StringBuilder();, + buf.append(getClass().getSimpleName());, +, + final boolean last = isLast();, + buf.append("(last: ");, + buf.append(last);, + if (!last) {, + buf.append(", size: ");, + buf.append(getContent().readableBytes());, + },
[+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, + , + /**, + * Gets the {@link ByteBuf} used at the specified index., + * <p>, + * Please note that since a {@link CompositeByteBuf} is made up of, + * multiple {@link ByteBuf}s, this does <em>not</em> return the full buffer., + * Instead, it only returns a portion of the composite buffer where the, + * index is located, + * </p>, + * , + * <p>, + * This is a method meant for use by <em>experts</em> - Please be careful, + * when using it., + * </p>, + * ,
[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, + private Runnable invokeFlush0Task;, + Runnable task = invokeFlush0Task;, + if (task == null) {, + invokeFlush0Task = task = new Runnable() {, + };, + }, + executor.execute(task);]
[+++ b/buffer/src/main/java/io/netty/buffer/AbstractMessageBuf.java, + @SuppressWarnings("unchecked"), + public boolean unfoldAndAdd(Object o) {, + if (o == null) {, + return false;, + }, +, + if (o instanceof Object[]) {, + Object[] a = (Object[]) o;, + int i;, + for (i = 0; i < a.length; i ++) {, + Object m = a[i];, + if (m == null) {, + break;, + }, + add((T) m);, + }, + return i != 0;, + }, +, + return add((T) o);, + }, +, + @Override, +++ b/buffer/src/main/java/io/netty/buffer/AbstractMessageBuf.java, + @SuppressWarnings("unchecked"), + public boolean unfoldAndAdd(Object o) {, + if (o ==
[+++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/AbstractBinaryMemcacheDecoder.java, + resetDecoder();, + resetDecoder();, + out.add(currentMessage.retain());, + resetDecoder();, + resetDecoder();, + resetDecoder();, + if (currentMessage != null) {, + currentMessage.release();, + }, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/AbstractBinaryMemcacheDecoder.java, + resetDecoder();, + resetDecoder();, + out.add(currentMessage.retain());, + resetDecoder();, + resetDecoder();, + resetDecoder();, + if (currentMessage != null) {, + currentMessage.release();, + }, +++ b/codec-memcache/src/test/java/io/netty/handler/codec/memcache/binary/BinaryMemcacheDecoderTest.java, +import static org.junit.Assert.assertTrue;, +, + @Test, + public void shouldRetainCurrentMessageWhenSendingItOut() {, + channel = new EmbeddedChannel(, + new BinaryMemcacheRequestEncoder(),, + new BinaryMemcacheRequestDecoder());, +, + String key = "Netty";, + ByteBuf extras = Unpooled.copiedBuffer("extras", CharsetUtil.UTF_8);, + BinaryMemcacheRequest request = new DefaultBinaryMemcacheRequest(key, extras);, + request.setKeyLength((short) key.length());, + request.setExtrasLength((byte) extras.readableBytes());, +, +
[+++ b/codec/src/test/java/io/netty/handler/codec/compression/SnappyIntegrationTest.java, +import java.util.Random;, +, +import static io.netty.buffer.Unpooled.*;, + public void testText() throws Exception {, + testIdentity(copiedBuffer(, + CharsetUtil.US_ASCII));, + public void test1002() throws Exception {, + testIdentity(wrappedBuffer(new byte[] {, + }));, + @Test, + @Ignore // FIXME: Make it pass., + public void testRandom() throws Exception {, + byte[] data = new byte[16 * 1048576];, + new Random().nextBytes(data);, + testIdentity(wrappedBuffer(data));, + }, +, + private static void testIdentity(ByteBuf in) {, + assertThat(compressed, is(notNullValue()));]
[+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpResponseDecoderTest.java, + content.release();]
[+++ b/src/docbook/module/preface.xml, + event-driven network application framework and tooling for the rapid, + development of maintainable high-performance &middot; high-scalability, + protocol servers and clients., + In other words, Netty is a NIO client server framework which enables, + quick and easy development of network applications such as protocol, + servers and clients. It greatly simplifies and streamlines network, + programming such as TCP/IP socket server development., + </para>, + <para>, + 'Quick and easy' doesn't mean that a resulting application will suffer, + from a maintainability or a performance issue. Netty has been designed, + carefully with the experiences
[+++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, + public static final ChannelOption<Integer> UDP_RECEIVE_PACKET_SIZE =, + new ChannelOption<Integer>("UDP_RECEIVE_PACKET_SIZE", Integer.class);, +, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, + public static final ChannelOption<Integer> UDP_RECEIVE_PACKET_SIZE =, + new ChannelOption<Integer>("UDP_RECEIVE_PACKET_SIZE", Integer.class);, +, +++ b/transport/src/main/java/io/netty/channel/socket/DatagramChannelConfig.java, + int getReceivePacketSize();, +, + void setReceivePacketSize(int receivePacketSize);, +, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, + public static final ChannelOption<Integer> UDP_RECEIVE_PACKET_SIZE =, + new ChannelOption<Integer>("UDP_RECEIVE_PACKET_SIZE", Integer.class);, +, +++ b/transport/src/main/java/io/netty/channel/socket/DatagramChannelConfig.java, + int getReceivePacketSize();, +, + void setReceivePacketSize(int receivePacketSize);, +, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java, + private static int DEFAULT_RECEIVE_PACKET_SIZE = 2048;, +, + private volatile int receivePacketSize = DEFAULT_RECEIVE_PACKET_SIZE;, + IP_MULTICAST_ADDR, IP_MULTICAST_IF, IP_MULTICAST_TTL, IP_TOS, UDP_RECEIVE_PACKET_SIZE);, + if (option == UDP_RECEIVE_PACKET_SIZE) {, + return (T) Integer.valueOf(getReceivePacketSize());, + },
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DefaultHttpDataFactory.java, +, + @Override, + public void cleanRequestHttpDatas(HttpRequest request) {, + cleanRequestHttpData(request);, + }, +, + @Override, + public void cleanAllHttpDatas() {, + cleanAllHttpData();, + }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DefaultHttpDataFactory.java, +, + @Override, + public void cleanRequestHttpDatas(HttpRequest request) {, + cleanRequestHttpData(request);, + }, +, + @Override, + public void cleanAllHttpDatas() {, + cleanAllHttpData();, + }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpDataFactory.java, +, + /**, + * @deprecated Use {@link #cleanRequestHttpData(HttpRequest)} instead., + */, + @Deprecated, + void cleanRequestHttpDatas(HttpRequest request);, +, + /**, + * @deprecated Use {@link #cleanAllHttpData()} instead., + */, + @Deprecated, + void cleanAllHttpDatas();]
[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, + boolean release = false;, + release = true;, + if (release) {, + }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, + boolean release = false;, + release = true;, + if (release) {, + }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2ConnectionHandlerTest.java, + try {, + assertEquals(1, data.refCnt());, + } finally {, + data.release();, + }]
[+++ b/all/pom.xml, + <version>4.1.0.CR7</version>, +++ b/all/pom.xml, + <version>4.1.0.CR7</version>, +++ b/buffer/pom.xml, + <version>4.1.0.CR7</version>, +++ b/all/pom.xml, + <version>4.1.0.CR7</version>, +++ b/buffer/pom.xml, + <version>4.1.0.CR7</version>, +++ b/codec-dns/pom.xml, + <version>4.1.0.CR7</version>, +++ b/all/pom.xml, + <version>4.1.0.CR7</version>, +++ b/buffer/pom.xml, + <version>4.1.0.CR7</version>, +++ b/codec-dns/pom.xml, + <version>4.1.0.CR7</version>, +++ b/codec-haproxy/pom.xml, + <version>4.1.0.CR7</version>, +++ b/all/pom.xml, + <version>4.1.0.CR7</version>, +++ b/buffer/pom.xml, + <version>4.1.0.CR7</version>, +++ b/codec-dns/pom.xml, + <version>4.1.0.CR7</version>, +++ b/codec-haproxy/pom.xml, + <version>4.1.0.CR7</version>, +++ b/codec-http/pom.xml, + <version>4.1.0.CR7</version>, +++ b/all/pom.xml, + <version>4.1.0.CR7</version>, +++ b/buffer/pom.xml, + <version>4.1.0.CR7</version>, +++ b/codec-dns/pom.xml, + <version>4.1.0.CR7</version>, +++ b/codec-haproxy/pom.xml, + <version>4.1.0.CR7</version>, +++ b/codec-http/pom.xml, + <version>4.1.0.CR7</version>, +++ b/codec-http2/pom.xml, + <version>4.1.0.CR7</version>, +++ b/all/pom.xml, + <version>4.1.0.CR7</version>, +++ b/buffer/pom.xml, + <version>4.1.0.CR7</version>, +++ b/codec-dns/pom.xml, + <version>4.1.0.CR7</version>, +++ b/codec-haproxy/pom.xml, +
[+++ b/.fbfilter.xml, + <Match>, + <Class name="~.*Channel"/>, + <Or>, + <Method name="setClosed"/>, + <Method name="setInterestOpsNow"/>, + </Or>, + <Bug pattern="USM_USELESS_SUBCLASS_METHOD"/>, + </Match>, +++ b/.fbfilter.xml, + <Match>, + <Class name="~.*Channel"/>, + <Or>, + <Method name="setClosed"/>, + <Method name="setInterestOpsNow"/>, + </Or>, + <Bug pattern="USM_USELESS_SUBCLASS_METHOD"/>, + </Match>, +++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java]
[+++ b/src/docbook/en-US/module/architecture.xml, + Traditional I/O APIs in Java provide different types and methods for, + another tedious and difficult. The lack of portability between, + transports becomes a problem when you need to support additional, + transports, as this often entails rewriting the network layer of the, + application. Logically, many protocols can run on more than one, + transport such as TCP/IP, UDP/IP, SCTP, and serial port communication., + To make matters worse, Java's New I/O (NIO) API introduced, + incompatibilities with the old blocking I/O (OIO) API and will continue, + to do so in the next
[+++ b/handler/src/main/java/io/netty/handler/ipfilter/IpFilterRule.java, + * @return This method should return {@link IpFilterRuleType#Accept} if all, + * {@link IpFilterRuleType#Reject} should be returned., +++ b/handler/src/main/java/io/netty/handler/ipfilter/IpFilterRule.java, + * @return This method should return {@link IpFilterRuleType#Accept} if all, + * {@link IpFilterRuleType#Reject} should be returned., +++ b/handler/src/main/java/io/netty/handler/ipfilter/IpFilterRuleType.java, + Accept,, + Reject, +++ b/handler/src/main/java/io/netty/handler/ipfilter/IpFilterRule.java, + * @return This method should return {@link IpFilterRuleType#Accept} if all, + * {@link IpFilterRuleType#Reject} should be returned., +++ b/handler/src/main/java/io/netty/handler/ipfilter/IpFilterRuleType.java, + Accept,, + Reject, +++ b/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java, + return rule.ruleType() == IpFilterRuleType.Accept;, +++ b/handler/src/main/java/io/netty/handler/ipfilter/IpFilterRule.java, + * @return This method should return {@link IpFilterRuleType#Accept} if all, + * {@link IpFilterRuleType#Reject} should be returned.,
[+++ b/example/src/main/java/io/netty/example/securechat/SecureChatClientHandler.java, +++ b/example/src/main/java/io/netty/example/securechat/SecureChatClientHandler.java, +++ b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java, + // Once session is secured, send a greeting., + ctx.write(, + "Welcome to " + InetAddress.getLocalHost().getHostName() +, + " secure chat service!\n");, + ctx.write(, + "Your session is protected by " +, + ctx.pipeline().get(SslHandler.class).getEngine().getSession().getCipherSuite() +, + " cipher suite.\n");, + // Register the channel to the global channel list, + // so the channel received the messages from others., + channels.add(ctx.channel());, +++ b/example/src/main/java/io/netty/example/securechat/SecureChatClientHandler.java, +++ b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java, + // Once session is secured, send a greeting., + ctx.write(, + "Welcome to " + InetAddress.getLocalHost().getHostName() +, + " secure chat service!\n");, + ctx.write(, + "Your
[+++ b/example/src/main/java/io/netty/example/http/file/HttpStaticFileServerHandler.java, + private FullHttpRequest request;, +, + this.request = request;, + this.sendError(ctx, METHOD_NOT_ALLOWED);, + this.sendError(ctx, FORBIDDEN);, + this.sendError(ctx, NOT_FOUND);, + this.sendListing(ctx, file, uri);, + this.sendRedirect(ctx, uri + '/');, + this.sendNotModified(ctx);, + } else if (request.protocolVersion().equals(HTTP_1_0)) {, + response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);, + private void sendListing(ChannelHandlerContext ctx, File dir, String dirPath) {, + this.sendAndCleanupConnection(ctx, response);, + private void sendRedirect(ChannelHandlerContext ctx, String newUri) {, + this.sendAndCleanupConnection(ctx, response);, + private void sendError(ChannelHandlerContext ctx, HttpResponseStatus status) {, + this.sendAndCleanupConnection(ctx, response);, + private void sendNotModified(ChannelHandlerContext ctx) {, + this.sendAndCleanupConnection(ctx, response);, + private void sendAndCleanupConnection(ChannelHandlerContext ctx, FullHttpResponse response) {, + final FullHttpRequest request = this.request;, +
[+++ b/pom.xml, + <version>7</version>]
[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramMulticastTest.java, +, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramMulticastTest.java, +, +++ b/transport-sctp/src/test/java/io/netty/testsuite/transport/AbstractSocketServerBootstrapTest.java, + } catch (Exception e) {, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramMulticastTest.java, +, +++ b/transport-sctp/src/test/java/io/netty/testsuite/transport/AbstractSocketServerBootstrapTest.java, + } catch (Exception e) {, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +import java.io.IOException;, +import java.net.InetSocketAddress;, +import java.net.SocketAddress;, +import java.nio.channels.NotYetConnectedException;, +import java.nio.channels.SelectionKey;, +, + EventLoop eventLoop();, +, +, + ChannelFuture deregister();, + void deregister(ChannelFuture future);, +, + Unsafe unsafe();, +, + public interface Unsafe {, + void setEventLoop(EventLoop eventLoop);, + void clearEventLoop();, + java.nio.channels.Channel ch();, +, + void bind(SocketAddress local) throws IOException;, + void connect(SocketAddress remote) throws IOException;, + boolean finishConnect() throws IOException;, + boolean read() throws IOException;, + boolean write() throws IOException;, +
[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Exception.java, + private static final long serialVersionUID = -8807603212183882637L;, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Exception.java, + private static final long serialVersionUID = -8807603212183882637L;, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2StreamChannelId.java, + private static final long serialVersionUID = -6642338822166867585L;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Exception.java, + private static final long serialVersionUID = -8807603212183882637L;, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2StreamChannelId.java, + private static final long serialVersionUID = -6642338822166867585L;, +++ b/codec/src/test/java/io/netty/handler/codec/serialization/CompatibleObjectEncoderTest.java, + private static final long serialVersionUID = 2235771472534930360L;, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Exception.java, + private static final long serialVersionUID = -8807603212183882637L;, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2StreamChannelId.java, + private static final long serialVersionUID = -6642338822166867585L;, +++ b/codec/src/test/java/io/netty/handler/codec/serialization/CompatibleObjectEncoderTest.java, + private static final long serialVersionUID = 2235771472534930360L;, +, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +
[+++ b/codec/src/test/java/io/netty/handler/codec/compression/Bzip2DecoderTest.java, + msg.release();, + uncompressed.release();]
[+++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelConfig.java, +import io.netty.channel.ChannelConfig;, + *, + * <h3>Available options</h3>, + *, + * In addition to the options provided by {@link ChannelConfig},, + * {@link RxtxChannelConfig} allows the following options in the option map:, + *, + * <table border="1" cellspacing="0" cellpadding="6">, + * <tr>, + * <th>Name</th><th>Associated setter method</th>, + * </tr><tr>, + * <td>{@link io.netty.channel.rxtx.RxtxChannelOption#BAUD_RATE}</td><td>{@link #setBaudrate(int)}</td>, + * </tr><tr>, + * <td>{@link io.netty.channel.rxtx.RxtxChannelOption#DTR}</td><td>{@link #setDtr(boolean)}</td>, + * </tr><tr>, + * <td>{@link io.netty.channel.rxtx.RxtxChannelOption#RTS}</td><td>{@link #setRts(boolean)}</td>, + * </tr><tr>, + * <td>{@link io.netty.channel.rxtx.RxtxChannelOption#STOP_BITS}</td><td>{@link #setStopbits(Stopbits)}</td>, + * </tr><tr>, + * <td>{@link io.netty.channel.rxtx.RxtxChannelOption#DATA_BITS}</td><td>{@link #setDatabits(Databits)}</td>, + * </tr><tr>, + * <td>{@link io.netty.channel.rxtx.RxtxChannelOption#PARITY_BIT}</td><td>{@link #setParitybit(Paritybit)}</td>,
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker00.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker00.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker08.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker00.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker08.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker13.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker00.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker08.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker13.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyDataFrame.java, +/*, + * Copyright 2012 Twitter, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License. You may obtain, + * a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, +
[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpResponseStreamIdHandler.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express
[+++ b/handler/src/test/java/io/netty/handler/ssl/CipherSuiteCanaryTest.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version, + * 2.0 (the "License"); you may not use this file except in compliance with the, + * License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express
[+++ b/src/docbook/module/start.xml, +public class TimeEncoder extends &SimpleChannelHandler; {]
[+++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import java.util.Arrays;, + Arrays.asList(SelectedProtocol.SPDY_3_1.protocolName(), SelectedProtocol.HTTP_1_1.protocolName()),, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import java.util.Arrays;, + Arrays.asList(SelectedProtocol.SPDY_3_1.protocolName(), SelectedProtocol.HTTP_1_1.protocolName()),, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import java.util.Arrays;, + Arrays.asList(SelectedProtocol.SPDY_3_1.protocolName(), SelectedProtocol.HTTP_1_1.protocolName()),, +++ /dev/null, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +import java.util.ArrayList;, + private final List<String> nextProtocols;, + * @param nextProtocols the application layer protocols to accept, in the order of preference., + Iterable<String> ciphers, Iterable<String> nextProtocols,, + if (nextProtocols != null && nextProtocols.iterator().hasNext() && !JettyNpnSslEngine.isAvailable()) {, + throw new SSLException("NPN/ALPN unsupported: " + nextProtocols);, + List<String> nextProtoList = new ArrayList<String>();, + for (String p: nextProtocols) {, + if (p == null) {, + break;, + }, + nextProtoList.add(p);, + }, +
[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, + libNames.add("netty_tcnative-" + os + '-' + arch);, + libNames.add("netty_tcnative-" + os + '-' + arch + "-fedora");, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, + libNames.add("netty_tcnative-" + os + '-' + arch);, + libNames.add("netty_tcnative-" + os + '-' + arch + "-fedora");, +++ b/pom.xml, + <tcnative.version>2.0.6.Final</tcnative.version>]
[+++ b/pom.xml, + <version>3.0.0.M8-SNAPSHOT</version>]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, + private final long maxFrameSize;, + public WebSocket00FrameDecoder(long maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, + private final long maxFrameSize;, + public WebSocket00FrameDecoder(long maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, + private long maxFramePayloadLength;, + * @param maxFramePayloadLength, + * Maximum length of a frame's payload. Setting this to an appropriate value for you application, + * helps check for denial of services attacks., + public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions, long maxFramePayloadLength) {, + this.maxFramePayloadLength = maxFramePayloadLength;, + if (framePayloadLength > this.maxFramePayloadLength) {, + protocolViolation(channel, "Max frame length of " + this.maxFramePayloadLength + " has been exceeded.");, + return null;, + }, +
[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + channelInputClosed(ctx, out);, + * Called when the input of the channel was closed which may be because it changed to inactive or because of, + * {@link ChannelInputShutdownEvent}., + */, + void channelInputClosed(ChannelHandlerContext ctx, List<Object> out) throws Exception {, + if (cumulation != null) {, + callDecode(ctx, cumulation, out);, + decodeLast(ctx, cumulation, out);, + } else {, + decodeLast(ctx, Unpooled.EMPTY_BUFFER, out);, + }, + }, +, + /**, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + channelInputClosed(ctx, out);, + * Called when the input of the channel was closed which may be because it changed to inactive or because of, +
[+++ b/handler/src/main/java/io/netty/handler/ssl/PemReader.java, +import java.io.FileNotFoundException;, + try {, + InputStream in = new FileInputStream(file);, +, + try {, + return readCertificates(in);, + } finally {, + safeClose(in);, + }, + } catch (FileNotFoundException e) {, + throw new CertificateException("could not find certificate file: " + file);, + }, + }, +, + static ByteBuf[] readCertificates(InputStream in) throws CertificateException {, + content = readContent(in);, + throw new CertificateException("failed to read certificate input stream", e);, + throw new CertificateException("found no certificates in input stream");, + try {, + InputStream in = new FileInputStream(file);, +, + try {, + return readPrivateKey(in);, + }
[+++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, + * Decode a 2-digit hex byte from within a string., + */, + public static byte decodeHexByte(CharSequence s, int pos) {, + return HexUtil.decodeHexByte(s, pos);, + }, +, + /**, + * Decodes part of a string generated by {@link #hexDump(byte[])}, + */, + public static byte[] decodeHexDump(CharSequence hexDump, int fromIndex, int length) {, + return HexUtil.decodeHexDump(hexDump, fromIndex, length);, + }, +, + /**, + /**, + * Helper to decode half of a hexadecimal number from a string., + * @param c The ASCII character of the hexadecimal number to decode., + * Must be
[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyCodecUtil.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyCodecUtil.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyCodecUtil.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockZlibDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyCodecUtil.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockZlibDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockZlibEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyCodecUtil.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockZlibDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockZlibEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaders.java, + String status = frame.headers().get(HttpNames.STATUS);, +]
[+++ b/buffer/src/main/java/io/netty/buffer/CompositeChannelBuffer.java, +import io.netty.util.internal.DetectionUtil;, +, + if (DetectionUtil.javaVersion() >= 7) {, + return (int) out.write(toByteBuffers(index, length));, + }, +++ b/buffer/src/main/java/io/netty/buffer/CompositeChannelBuffer.java, +import io.netty.util.internal.DetectionUtil;, +, + if (DetectionUtil.javaVersion() >= 7) {, + return (int) out.write(toByteBuffers(index, length));, + }, +++ b/buffer/src/main/java/io/netty/buffer/DynamicChannelBuffer.java, + , + , + // Check if we exceeded the maximum size of 2gb if this is the case then , + // newCapacity == 0, + //, + // https://github.com/netty/netty/issues/258, + if (newCapacity == 0) {, + throw new IllegalStateException("Maximum size of 2gb exceeded");, + }, +++ b/buffer/src/main/java/io/netty/buffer/CompositeChannelBuffer.java, +import io.netty.util.internal.DetectionUtil;, +, + if (DetectionUtil.javaVersion() >= 7) {, + return
[+++ b/pom.xml, + <version>1.2.2.Final</version>]
[+++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldBasedFrameDecoder.java, +import java.nio.ByteOrder;, +import java.util.List;, +, + private void discardingTooLongFrame(ByteBuf in) {, + private static void failOnNegativeLengthField(ByteBuf in, long frameLength, int lengthFieldEndOffset) {, + private static void failOnFrameLengthLessThanLengthFieldEndOffset(ByteBuf in,, + long frameLength,, + int lengthFieldEndOffset) {, + private void exceededFrameLength(ByteBuf in, long frameLength) {, + }, +, + private static void failOnFrameLengthLessThanInitialBytesToStrip(ByteBuf in,, + long frameLength,, + int initialBytesToStrip) {, + in.skipBytes((int) frameLength);, + throw new CorruptedFrameException(, + "Adjusted frame length (" + frameLength + ") is less " +, + "than initialBytesToStrip: " + initialBytesToStrip);, + }, +, + /**, + * Create a frame out of
[+++ b/buffer/src/main/java/io/netty/buffer/PooledDirectByteBuf.java, + return ((ByteBuffer) memory.duplicate().position(index).limit(index + length)).slice();, +++ b/buffer/src/main/java/io/netty/buffer/PooledDirectByteBuf.java, + return ((ByteBuffer) memory.duplicate().position(index).limit(index + length)).slice();, +++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, + ByteBuffer buf = ByteBuffer.wrap(memory, index, length);, + return buf.slice();, +++ b/buffer/src/main/java/io/netty/buffer/PooledDirectByteBuf.java, + return ((ByteBuffer) memory.duplicate().position(index).limit(index + length)).slice();, +++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, + ByteBuffer buf = ByteBuffer.wrap(memory, index, length);, + return buf.slice();, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, + return ((ByteBuffer) memory.duplicate().position(index).limit(index + length)).slice();, +++ b/buffer/src/main/java/io/netty/buffer/PooledDirectByteBuf.java, + return ((ByteBuffer) memory.duplicate().position(index).limit(index + length)).slice();, +++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, + ByteBuffer buf = ByteBuffer.wrap(memory, index, length);, + return buf.slice();, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, + return ((ByteBuffer) memory.duplicate().position(index).limit(index + length)).slice();, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, + return ((ByteBuffer) buffer.duplicate().position(index).limit(index + length)).slice();, +++ b/buffer/src/main/java/io/netty/buffer/PooledDirectByteBuf.java, + return ((ByteBuffer) memory.duplicate().position(index).limit(index +
[+++ b/src/main/java/org/jboss/netty/handler/timeout/HashedWheelTimer.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2009, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, +
[+++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibEncoder.java, + ByteBuf footer = Unpooled.dynamicBuffer();, + while (!deflater.finished()) {, + int numBytes = deflater.deflate(encodeBuf, 0, encodeBuf.length);, + }]
[+++ b/.fbfilter.xml, + <Match>, + <Class name="~.*HttpTunnelingChannelHandler"/>, + <Method name="~await.*"/>, + <Bug pattern="RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,RV_RETURN_VALUE_IGNORED2"/>, + </Match>]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, + out.add(invalidMessage(buffer, e));, + out.add(invalidMessage(buffer, e));, + out.add(invalidChunk(buffer, e));, + out.add(invalidChunk(buffer, e));, + private HttpMessage invalidMessage(ByteBuf in, Exception cause) {, +, + // Advance the readerIndex so that ByteToMessageDecoder does not complain, + // when we produced an invalid message without consuming anything., + in.skipBytes(in.readableBytes());, +, + private HttpContent invalidChunk(ByteBuf in, Exception cause) {, +, + // Advance the readerIndex so that ByteToMessageDecoder does not complain, + // when we produced an invalid message without consuming anything., + in.skipBytes(in.readableBytes());, +, + final int oldSize = size;, + size = oldSize;, +, + if (++ size > maxLength)
[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, + // If we are currently in the channelReadComplete(...) call we should just ignore the flush., + // We will ensure we trigger ctx.flush() after we processed all Channels later on and, + if (!inFireChannelReadComplete) {]
[+++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, + * <p>, + * Also be aware that obtaining derived buffers will NOT call {@link #retain()} and so the, + * reference count will NOT be increased., + * <p>, + * Also be aware that this method will NOT call {@link #retain()} and so the, + * reference count will NOT be increased., + * <p>, + * Also be aware that this method will NOT call {@link #retain()} and so the, + * reference count will NOT be increased., + * <p>, + * Also be aware that this method will NOT call {@link
[+++ b/transport/src/main/java/io/netty/channel/ChannelInboundInvoker.java, +interface ChannelInboundInvoker {, +++ b/transport/src/main/java/io/netty/channel/ChannelInboundInvoker.java, +interface ChannelInboundInvoker {, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundInvoker.java, +interface ChannelOutboundInvoker {]
[+++ b/pom.xml, + <version>3.0.0.CR2</version>, + <connection>scm:svn:http://anonsvn.jboss.org/repos/netty/tags/netty-3.0.0.CR2</connection>, + <developerConnection>scm:svn:https://svn.jboss.org/repos/netty/tags/netty-3.0.0.CR2</developerConnection>]
[+++ b/all/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/all/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/buffer/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/all/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/buffer/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/codec-http/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/all/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/buffer/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/codec-http/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/codec/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/all/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/buffer/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/codec-http/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/codec/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/common/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/all/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/buffer/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/codec-http/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/codec/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/common/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/example/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/all/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/buffer/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/codec-http/pom.xml, + <version>4.0.0.Alpha2</version>, +++ b/codec/pom.xml, +
[+++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannel.java, + super(null);, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannel.java, + super(null);, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java, + this(null, sctpChannel);, + public NioSctpChannel(Channel parent, SctpChannel sctpChannel) {, + super(parent, sctpChannel, SelectionKey.OP_READ);, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannel.java, + super(null);, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java, + this(null, sctpChannel);, + public NioSctpChannel(Channel parent, SctpChannel sctpChannel) {, + super(parent, sctpChannel, SelectionKey.OP_READ);, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpServerChannel.java, + super(null, newSocket(), SelectionKey.OP_ACCEPT);, + buf.add(new NioSctpChannel(this, ch));, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannel.java, + super(null);, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java, + this(null, sctpChannel);, + public NioSctpChannel(Channel parent, SctpChannel sctpChannel) {, + super(parent, sctpChannel, SelectionKey.OP_READ);, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpServerChannel.java, + super(null, newSocket(), SelectionKey.OP_ACCEPT);, + buf.add(new NioSctpChannel(this, ch));, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/oio/OioSctpChannel.java, + this(null, ch);, + public OioSctpChannel(Channel parent, SctpChannel ch) {, + super(parent);, +++
[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, + if (PlatformDependent.isUnaligned() && PlatformDependent.unsafeHasCopyMethods()) {, + if (PlatformDependent.isUnaligned() && PlatformDependent.unsafeHasCopyMethods()) {, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, + if (PlatformDependent.isUnaligned() && PlatformDependent.unsafeHasCopyMethods()) {, + if (PlatformDependent.isUnaligned() && PlatformDependent.unsafeHasCopyMethods()) {, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, + if (PlatformDependent.isUnaligned() && PlatformDependent.unsafeHasCopyMethods()) {, + if (PlatformDependent.isUnaligned() && PlatformDependent.unsafeHasCopyMethods()) {, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, + private static final boolean UNSAFE_HASE_COPY_METHODS = unsafeHasCopyMethods0();, + * Returns {@code true} if unsafe has all needed copy methods which is not the case on latest openjdk6 atm., + */, + public static boolean unsafeHasCopyMethods() {, + return UNSAFE_HASE_COPY_METHODS;, + }, +, + /**, + private static boolean unsafeHasCopyMethods0() {,
[+++ b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java, + return DateFormatter.format(new Date(value));, +++ b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java, + return DateFormatter.format(new Date(value));, +++ b/codec/src/test/java/io/netty/handler/codec/CharSequenceValueConverterTest.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS"
[+++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBufferInputStream.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBufferInputStream.java, +++ b/buffer/src/main/java/io/netty/buffer/CompositeChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBufferInputStream.java, +++ b/buffer/src/main/java/io/netty/buffer/CompositeChannelBuffer.java, +++ b/buffer/src/test/java/io/netty/buffer/AbstractChannelBufferTest.java, +import io.netty.util.CharsetUtil;, +++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBufferInputStream.java, +++ b/buffer/src/main/java/io/netty/buffer/CompositeChannelBuffer.java, +++ b/buffer/src/test/java/io/netty/buffer/AbstractChannelBufferTest.java, +import io.netty.util.CharsetUtil;, +++ b/buffer/src/test/java/io/netty/buffer/ChannelBufferIndexFinderTest.java, +, +++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBufferInputStream.java, +++ b/buffer/src/main/java/io/netty/buffer/CompositeChannelBuffer.java, +++ b/buffer/src/test/java/io/netty/buffer/AbstractChannelBufferTest.java, +import io.netty.util.CharsetUtil;, +++ b/buffer/src/test/java/io/netty/buffer/ChannelBufferIndexFinderTest.java, +, +++ b/buffer/src/test/java/io/netty/buffer/ReadOnlyChannelBufferTest.java, +import static org.easymock.EasyMock.*;, +++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBufferInputStream.java, +++ b/buffer/src/main/java/io/netty/buffer/CompositeChannelBuffer.java, +++ b/buffer/src/test/java/io/netty/buffer/AbstractChannelBufferTest.java, +import io.netty.util.CharsetUtil;, +++ b/buffer/src/test/java/io/netty/buffer/ChannelBufferIndexFinderTest.java, +, +++ b/buffer/src/test/java/io/netty/buffer/ReadOnlyChannelBufferTest.java, +import static org.easymock.EasyMock.*;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpChunkTrailer.java, +import io.netty.buffer.ChannelBuffer;, +import io.netty.buffer.ChannelBuffers;, +, +++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffer.java, +++
[+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2CodecTest.java, +import io.netty.channel.ChannelInitializer;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +, + private volatile Channel serverConnectedChannel;, + final CountDownLatch serverChannelLatch = new CountDownLatch(1);, + .childHandler(new ChannelInitializer<Channel>() {, + @Override, + protected void initChannel(Channel ch) throws Exception {, + serverConnectedChannel = ch;, + ch.pipeline().addLast(new Http2Codec(true, serverLastInboundHandler));, + serverChannelLatch.countDown();, + }, + });, + assertTrue(serverChannelLatch.await(2, TimeUnit.SECONDS));, + if (serverConnectedChannel != null) {, + serverConnectedChannel.close().sync();, + serverConnectedChannel = null;, + }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2CodecTest.java, +import io.netty.channel.ChannelInitializer;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +, + private volatile Channel serverConnectedChannel;, + final CountDownLatch serverChannelLatch = new CountDownLatch(1);, + .childHandler(new ChannelInitializer<Channel>() {, + @Override, + protected void initChannel(Channel ch) throws
[+++ b/pom.xml, + <jetty.alpnAgent.path>"${settings.localRepository}"/org/mortbay/jetty/alpn/jetty-alpn-agent/${jetty.alpnAgent.version}/jetty-alpn-agent-${jetty.alpnAgent.version}.jar</jetty.alpnAgent.path>]
[+++ b/pom.xml, + <version>3.0.0.CR6-SNAPSHOT</version>, + <connection>scm:svn:http://anonsvn.jboss.org/repos/netty/trunk</connection>, + <developerConnection>scm:svn:https://svn.jboss.org/repos/netty/trunk</developerConnection>]
[+++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioChannel.java, + protected abstract class AbstractOioUnsafe extends AbstractUnsafe implements OioUnsafe {, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioChannel.java, + protected abstract class AbstractOioUnsafe extends AbstractUnsafe implements OioUnsafe {, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioMessageChannel.java, +package io.netty.channel.socket.oio;, +, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelBufferHolder;, +import io.netty.channel.ChannelBufferHolders;, +import io.netty.channel.ChannelPipeline;, +, +import java.io.IOException;, +import java.util.Queue;, +, +abstract class AbstractOioMessageChannel extends AbstractOioChannel {, +, + private final ChannelBufferHolder<Object> firstOut = ChannelBufferHolders.messageBuffer();, +, + protected AbstractOioMessageChannel(Channel parent, Integer id) {, + super(parent, id);, + }, +, + @Override, + protected ChannelBufferHolder<Object> firstOut() {, + return firstOut;, + }, +, + @Override, + protected Unsafe newUnsafe() {, + return new OioMessageUnsafe();, + }, +, +
[+++ b/common/src/main/java/io/netty/util/DomainMappingBuilder.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express
[+++ b/microbench/pom.xml, + <version>0.4.1</version>, +++ b/microbench/pom.xml, + <version>0.4.1</version>, +++ b/microbench/src/test/java/io/netty/microbench/buffer/ByteBufAllocatorBenchmark.java, +import org.openjdk.jmh.annotations.Param;, + @Param({ "00000", "00256", "01024", "04096", "16384", "65536" }), + public int size;, +, + public void unpooledHeapAllocAndFree() {, + ByteBuf buffer = unpooledHeapAllocator.buffer(size);, + public void unpooledDirectAllocAndFree() {, + ByteBuf buffer = unpooledDirectAllocator.buffer(size);, + public void pooledHeapAllocAndFree() {, + ByteBuf buffer = pooledHeapAllocator.buffer(size);, + public void pooledDirectAllocAndFree() {, + ByteBuf buffer = pooledDirectAllocator.buffer(size);, +++ b/microbench/pom.xml, + <version>0.4.1</version>, +++ b/microbench/src/test/java/io/netty/microbench/buffer/ByteBufAllocatorBenchmark.java, +import org.openjdk.jmh.annotations.Param;, + @Param({ "00000", "00256", "01024", "04096", "16384", "65536" }), + public int size;, +, + public void unpooledHeapAllocAndFree() {, + ByteBuf buffer = unpooledHeapAllocator.buffer(size);, +
[+++ b/pom.xml, + ${project.groupId}.*;version=${project.version}, +, + -link http://code.google.com/apis/protocolbuffers/docs/reference/java/, + -link http://www.osgi.org/javadoc/r4v41/, + -link http://google-guice.googlecode.com/svn/trunk/javadoc/, + -link http://static.springframework.org/spring/docs/2.5.x/api/, + -link http://www.slf4j.org/apidocs/, + -link http://commons.apache.org/logging/commons-logging-1.1.1/apidocs/, + -link http://logging.apache.org/log4j/1.2/apidocs/, +, +]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +import io.netty.util.internal.StringUtil;, + * Returns {@code true} if a header with the {@code name} and {@code value} exists, {@code false} otherwise., + * This also handles multiple values that are seperated with a {@code ,}., + * <p>, + * If {@code ignoreCase} is {@code true} then a case insensitive compare is done on the value., + * @param name the name of the header to find, + * @param value the value of the header to find, + * @param ignoreCase {@code true} then a case insensitive compare is run to compare values., + * otherwise
[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsAddressResolverGroup.java, + DnsServerAddresses nameServerAddresses) {, + this(new ReflectiveChannelFactory<DatagramChannel>(channelType), nameServerAddresses);, + DnsServerAddresses nameServerAddresses) {, + return newResolver((EventLoop) executor, channelFactory, nameServerAddresses);, + * @deprecated Override {@link #newNameResolver(EventLoop, ChannelFactory, DnsServerAddresses)}., + DnsServerAddresses nameServerAddresses) throws Exception {, + newNameResolver(eventLoop, channelFactory, nameServerAddresses),, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsAddressResolverGroup.java, + DnsServerAddresses nameServerAddresses) {, + this(new ReflectiveChannelFactory<DatagramChannel>(channelType), nameServerAddresses);, + DnsServerAddresses nameServerAddresses) {, + return newResolver((EventLoop) executor, channelFactory, nameServerAddresses);, + * @deprecated Override {@link #newNameResolver(EventLoop, ChannelFactory, DnsServerAddresses)}., + DnsServerAddresses nameServerAddresses) throws Exception {, + newNameResolver(eventLoop, channelFactory, nameServerAddresses),, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelOption;, + final Future<Channel> channelFuture;, + final DnsCache resolveCache,, + b.option(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);, + final DnsResponseHandler responseHandler = new
[+++ b/all/pom.xml, + <version>4.1.17.Final</version>, +++ b/all/pom.xml, + <version>4.1.17.Final</version>, +++ b/bom/pom.xml, + <version>4.1.17.Final</version>, + <tag>netty-4.1.17.Final</tag>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, +++ b/all/pom.xml, + <version>4.1.17.Final</version>, +++ b/bom/pom.xml, + <version>4.1.17.Final</version>, + <tag>netty-4.1.17.Final</tag>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, + <version>4.1.17.Final</version>, +
[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.resolver.ResolvedAddressTypes;, + private static final DnsRecord[] EMPTY_ADDITIONALS = new DnsRecord[0];, + private static final DnsRecordType[] IPV4_ONLY_RESOLVED_RECORD_TYPES =, + new DnsRecordType[] {DnsRecordType.A};, + private static final InternetProtocolFamily[] IPV4_ONLY_RESOLVED_PROTOCOL_FAMILIES =, + new InternetProtocolFamily[] {InternetProtocolFamily.IPv4};, + private static final DnsRecordType[] IPV4_PREFERRED_RESOLVED_RECORD_TYPES =, + new DnsRecordType[] {DnsRecordType.A, DnsRecordType.AAAA};, + private static final InternetProtocolFamily[] IPV4_PREFERRED_RESOLVED_PROTOCOL_FAMILIES =, + new InternetProtocolFamily[] {InternetProtocolFamily.IPv4, InternetProtocolFamily.IPv6};, + private static final DnsRecordType[] IPV6_ONLY_RESOLVED_RECORD_TYPES =, + new DnsRecordType[] {DnsRecordType.AAAA};, + private static final InternetProtocolFamily[] IPV6_ONLY_RESOLVED_PROTOCOL_FAMILIES =, + new InternetProtocolFamily[] {InternetProtocolFamily.IPv6};, + private static final DnsRecordType[] IPV6_PREFERRED_RESOLVED_RECORD_TYPES =, + new DnsRecordType[] {DnsRecordType.AAAA, DnsRecordType.A};, + private static final InternetProtocolFamily[] IPV6_PREFERRED_RESOLVED_PROTOCOL_FAMILIES
[+++ b/example/src/main/java/io/netty/example/udt/echo/bytes/ByteEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + boot.group(connectGroup).localAddress(0), +++ b/example/src/main/java/io/netty/example/udt/echo/bytes/ByteEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + boot.group(connectGroup).localAddress(0), +++ b/example/src/main/java/io/netty/example/udt/echo/message/MsgEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + boot.group(connectGroup).localAddress(0), +++ b/example/src/main/java/io/netty/example/udt/echo/bytes/ByteEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + boot.group(connectGroup).localAddress(0), +++ b/example/src/main/java/io/netty/example/udt/echo/message/MsgEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + boot.group(connectGroup).localAddress(0), +++ b/transport-udt/src/main/java/io/netty/channel/udt/DefaultUdtChannelConfig.java, + SO_LINGER);, +++ b/example/src/main/java/io/netty/example/udt/echo/bytes/ByteEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + boot.group(connectGroup).localAddress(0), +++ b/example/src/main/java/io/netty/example/udt/echo/message/MsgEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, + boot.group(connectGroup).localAddress(0), +++ b/transport-udt/src/main/java/io/netty/channel/udt/DefaultUdtChannelConfig.java, + SO_LINGER);, +++ b/transport-udt/src/main/java/io/netty/channel/udt/DefaultUdtServerChannelConfig.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + *
[+++ b/buffer/src/main/java/io/netty/buffer/UnpooledUnsafeNoCleanerDirectByteBuf.java, + if (newCapacity == oldCapacity) {, + return this;, +, + ByteBuffer newBuffer = reallocateDirect(buffer, newCapacity);, +, + if (newCapacity < oldCapacity) {, + if (readerIndex() < newCapacity) {, + if (writerIndex() > newCapacity) {, + writerIndex(newCapacity);, + }, + setByteBuffer(newBuffer, false);]
[+++ b/.gitignore, +.idea/]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/ReadOnlyHttpHeaders.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express
[+++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, + public int pendingTasks() {, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, + public int pendingTasks() {, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoop.java, +import java.util.concurrent.Callable;, + private final Callable<Integer> pendingTasksCallable = new Callable<Integer>() {, + @Override, + public Integer call() throws Exception {, + return EpollEventLoop.super.pendingTasks();, + }, + };, + @Override, + public int pendingTasks() {, + // As we use a MpscQueue we need to ensure pendingTasks() is only executed from within the EventLoop as, + // otherwise we may see unexpected behavior (as size() is only allowed to be called by a single consumer)., + // See https://github.com/netty/netty/issues/5297, + if (inEventLoop()) {, +
[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToByteDecoder.java, + public void inboundBufferUpdated(ChannelHandlerContext ctx, ChannelBuffer in) throws Exception {, + callDecode(ctx, in, ctx.nextOutboundByteBuffer());, + ChannelBuffer out = ctx.nextInboundByteBuffer();, + callDecode(ctx, in, out);, + private void callDecode(ChannelHandlerContext ctx, ChannelBuffer in, ChannelBuffer out) {, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToByteDecoder.java, + public void inboundBufferUpdated(ChannelHandlerContext ctx, ChannelBuffer in) throws Exception {, + callDecode(ctx, in, ctx.nextOutboundByteBuffer());, + ChannelBuffer out = ctx.nextInboundByteBuffer();, + callDecode(ctx, in, out);, + private void callDecode(ChannelHandlerContext ctx, ChannelBuffer in, ChannelBuffer out) {, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +import io.netty.channel.ChannelBufferHolder;, +import io.netty.channel.ChannelBufferHolders;, +import io.netty.channel.ChannelInboundHandlerAdapter;, +public abstract class ByteToMessageDecoder<O> extends ChannelInboundHandlerAdapter<Byte> {, + public ChannelBufferHolder<Byte> newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, + return ChannelBufferHolders.byteBuffer();, + }, +,
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/ClientCookieEncoder.java]
[+++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, + final ByteBuf buf;, + buf = PlatformDependent.hasUnsafe() ?, + new UnpooledUnsafeHeapByteBuf(this, initialCapacity, maxCapacity) :, + new UnpooledHeapByteBuf(this, initialCapacity, maxCapacity);, + final ByteBuf buf;, + buf = PlatformDependent.hasUnsafe() ?, + UnsafeByteBufUtil.newUnsafeDirectByteBuf(this, initialCapacity, maxCapacity) :, + new UnpooledDirectByteBuf(this, initialCapacity, maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, + final ByteBuf buf;, + buf = PlatformDependent.hasUnsafe() ?, + new UnpooledUnsafeHeapByteBuf(this, initialCapacity, maxCapacity) :, + new UnpooledHeapByteBuf(this, initialCapacity, maxCapacity);, + final ByteBuf buf;, + buf = PlatformDependent.hasUnsafe() ?, + UnsafeByteBufUtil.newUnsafeDirectByteBuf(this, initialCapacity, maxCapacity) :, + new UnpooledDirectByteBuf(this, initialCapacity, maxCapacity);, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufAllocatorTest.java, +import static org.junit.Assert.assertTrue;, + protected abstract AbstractByteBufAllocator newUnpooledAllocator();, +, +, + @Test, + public void
[+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +, + if (unsafe != null) {, + // There are assumptions made where ever BYTE_ARRAY_BASE_OFFSET is used (equals, hashCodeAscii, and, + // primitive accessors) that arrayIndexScale == 1, and results are undefined if this is not the case., + long byteArrayIndexScale = unsafe.arrayIndexScale(byte[].class);, + if (byteArrayIndexScale != 1) {, + logger.debug("unsafe.arrayIndexScale is {} (expected: 1). Not using unsafe.", byteArrayIndexScale);, + unsafe = null;, + }, + }]
[+++ b/transport/src/main/java/io/netty/channel/ChannelTaskScheduler.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express
[+++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java, + String asciiHost = IDN.toASCII(host);, + if (asciiHost.length() > 255) {, + throw new IllegalArgumentException(host + " IDN: " + asciiHost + " exceeds 255 char limit");, + host = asciiHost;, + this.host = host;, + return addressType == SocksAddressType.DOMAIN ? IDN.toUnicode(host) : host;, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java, + String asciiHost = IDN.toASCII(host);, + if (asciiHost.length() > 255) {, + throw new IllegalArgumentException(host + " IDN: " + asciiHost + " exceeds 255 char limit");, + host = asciiHost;, + this.host = host;, + return addressType == SocksAddressType.DOMAIN ? IDN.toUnicode(host) : host;, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdResponse.java, + String asciiHost = IDN.toASCII(host);,
[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either
[+++ b/src/docbook/en-US/module/start.xml, + time.writeInt((int) (System.currentTimeMillis() / 1000));, +++ b/src/docbook/en-US/module/start.xml, + time.writeInt((int) (System.currentTimeMillis() / 1000));, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java, + short va = bufferA.getUnsignedByte(aIndex);, + short vb = bufferB.getUnsignedByte(bIndex);, +++ b/src/docbook/en-US/module/start.xml, + time.writeInt((int) (System.currentTimeMillis() / 1000));, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java, + short va = bufferA.getUnsignedByte(aIndex);, + short vb = bufferB.getUnsignedByte(bIndex);, +++ b/src/main/java/org/jboss/netty/channel/AbstractChannel.java, + // Deallocate the current channel's ID from allChannels so that other, + // new channels can use it., + allChannels.remove(id);, +, +++ b/src/docbook/en-US/module/start.xml, + time.writeInt((int) (System.currentTimeMillis() / 1000));, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java, + short va = bufferA.getUnsignedByte(aIndex);, + short vb = bufferB.getUnsignedByte(bIndex);, +++ b/src/main/java/org/jboss/netty/channel/AbstractChannel.java, + // Deallocate the current channel's ID from allChannels
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +import io.netty.buffer.DefaultByteBufHolder;, +import io.netty.handler.codec.DecoderResult;, + AggregatedFullHttpMessage ret;, + ret = new AggregatedFullHttpRequest((HttpRequest) start, content, null);, + ret = new AggregatedFullHttpResponse((HttpResponse) start, content, null);, + ((AggregatedFullHttpMessage) aggregated).setTrailingHeaders(((LastHttpContent) content).trailingHeaders());, +, + private abstract static class AggregatedFullHttpMessage extends DefaultByteBufHolder implements FullHttpMessage {, + protected final HttpMessage message;, + private HttpHeaders trailingHeaders;, +, + private AggregatedFullHttpMessage(HttpMessage message, ByteBuf content, HttpHeaders trailingHeaders) {, + super(content);, + this.message = message;, + this.trailingHeaders = trailingHeaders;, + }, + @Override, + public HttpHeaders trailingHeaders() {, + return trailingHeaders;, + }, +, + public void setTrailingHeaders(HttpHeaders trailingHeaders) {, + this.trailingHeaders = trailingHeaders;, + }, +, +
[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, + if (readerIndex != writerIndex) {, + } else {, + markedReaderIndex = Math.max(markedReaderIndex - readerIndex, 0);, + markedWriterIndex = Math.max(markedWriterIndex - readerIndex, 0);, + writerIndex = readerIndex = 0;, + }]
[+++ b/src/docbook/module/start.xml, + this chapter are only two; the latest version of Netty and JDK 1.5 or, + <ulink url="&Downloads;">the project download page</ulink>. To download, + the right version of JDK, please refer to your preferred JDK vendor's web, + To implement the DISCARD protocol, you only need to log the received data., + Let us start straight from the handler implementation, which handles I/O, + events generated by Netty., + <classname>DiscardServerHandler</classname> does not manage any, + stateful information, and therefore it is annotated with the value, + handler methods that you can override. For now, it is just
[+++ b/transport/src/main/java/io/netty/channel/ChannelInitializer.java, + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/ChannelInitializer.java, + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/ChannelInitializer.java, + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/ChannelInitializer.java, + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java, + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/ChannelInitializer.java, + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java, + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/socket/DefaultSctpChannelConfig.java, + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/ChannelInitializer.java, + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java, + @SuppressWarnings("unchecked"), +++ b/transport/src/main/java/io/netty/channel/socket/DefaultSctpChannelConfig.java, + @SuppressWarnings("unchecked"), +++
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpResponseStatus.java, + return new HttpResponseStatus(code);, + private HttpStatusClass codeClass;, + * Creates a new instance with the specified {@code code} and the auto-generated default reason phrase., + */, + private HttpResponseStatus(int code) {, + this(code, HttpStatusClass.valueOf(code).defaultReasonPhrase() + " (" + code + ')', false);, + }, +, + /**, + * Creates a new instance with the specified {@code code} and its {@code reasonPhrase}., + /**, + * Returns the class of this {@link HttpResponseStatus}, + */, + public HttpStatusClass codeClass() {, + HttpStatusClass type = this.codeClass;, + if (type == null) {, + this.codeClass = type =
[+++ b/transport-native-epoll/pom.xml, + <configureArgs>, + <arg>${jni.compiler.args}</arg>, + </configureArgs>, +, + <plugin>, + <artifactId>maven-antrun-plugin</artifactId>, + <version>1.7</version>, + <executions>, + <execution>, + <!-- Phase must be before regex-glibc-sendmmsg and regex-linux-sendmmsg -->, + <phase>validate</phase>, + <goals>, + <goal>run</goal>, + </goals>, + <id>ant-get-systeminfo</id>, + <configuration>, + <exportAntProperties>true</exportAntProperties>, + <tasks>, + <exec executable="sh" outputproperty="ldd_version">, + <arg value="-c"/>, + <arg value="ldd --version | head -1"/>, + </exec>, + <exec executable="uname" outputproperty="uname_os_version">, + <arg value="-r"/>, + </exec>, + </tasks>, + </configuration>, + </execution>, + </executions>, + </plugin>, + <plugin>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>build-helper-maven-plugin</artifactId>, + <version>1.7</version>, + <executions>, + <execution>, + <!-- Phase must be before regex-combined-sendmmsg
[+++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +import java.io.IOException;, +import java.io.OutputStream;, + static final int WRITE_CHUNK_SIZE = 8192;, + /**, + * Read bytes from the given {@link ByteBuffer} into the given {@link OutputStream} using the {@code position} and, + * {@code length}. The position and limit of the given {@link ByteBuffer} may be adjusted., + */, + static void readBytes(ByteBufAllocator allocator, ByteBuffer buffer, int position, int length, OutputStream out), + throws IOException {, + if (buffer.hasArray()) {, + out.write(buffer.array(), position + buffer.arrayOffset(), length);, + } else {, + int chunkLen = Math.min(length, WRITE_CHUNK_SIZE);, + buffer.clear().position(position);, +, + if (allocator.isDirectBufferPooled()) {, + // if
[+++ b/example/src/main/java/io/netty/example/proxy/HexDumpProxyFrontendHandler.java, + // As we use inboundChannel.eventLoop() when buildling the Bootstrap this does not need to be volatile as, + // the outboundChannel will use the same EventLoop (and therefore Thread) as the inboundChannel., + private Channel outboundChannel;]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameDecoder.java]
[+++ b/buffer/src/main/java/io/netty/buffer/DefaultByteBufHolder.java, + /**, + * Return {@link ByteBuf#toString()} without checking the reference count first. This is useful to implemement, + * {@link #toString()}., + */, + protected final String contentToString() {, + return data.toString();, + }, +, + return StringUtil.simpleClassName(this) + '(' + contentToString() + ')';, +++ b/buffer/src/main/java/io/netty/buffer/DefaultByteBufHolder.java, + /**, + * Return {@link ByteBuf#toString()} without checking the reference count first. This is useful to implemement, + * {@link #toString()}., + */, + protected final String contentToString() {, + return data.toString();, + }, +, + return StringUtil.simpleClassName(this) + '(' + contentToString() + ')';, +++ b/buffer/src/test/java/io/netty/buffer/DefaultByteBufHolderTest.java, +/*, + *
[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, + public int windowSize() {, + public int pendingBytes() {, + public int windowSize() {, + public int pendingBytes() {, + private final Writer writer;, + protected WritabilityMonitor(Writer writer) {, + this.writer = writer;, + }, + protected final void writePendingBytes() throws Http2Exception {, + protected void initialWindowSize(int newWindowSize) throws Http2Exception {, + writePendingBytes();, + DefaultWritabilityMonitor() {, + super(new StreamByteDistributor.Writer() {, + });, +, + ListenerWritabilityMonitor(final Listener listener) {, + super(new StreamByteDistributor.Writer() {, + int written = state.writeAllocatedBytes(numBytes);, + if (written != -1) {, + listener.streamWritten(state.stream(), written);, + });, + protected void initialWindowSize(int newWindowSize) throws Http2Exception {,
[+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, + components = newList(0, maxNumComponents);, + components = newList(len, maxNumComponents);, + int len = buffers instanceof Collection ? ((Collection<ByteBuf>) buffers).size() : 0;, +, + components = newList(len, maxNumComponents);, + private static ComponentList newList(int initComponents, int maxNumComponents) {, + int capacityGuess = Math.min(AbstractByteBufAllocator.DEFAULT_MAX_COMPONENTS, maxNumComponents);, + return new ComponentList(Math.max(initComponents, capacityGuess));, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, + components = newList(0, maxNumComponents);, + components = newList(len, maxNumComponents);, + int len = buffers instanceof Collection ? ((Collection<ByteBuf>) buffers).size() : 0;, +, + components = newList(len, maxNumComponents);, + private static ComponentList newList(int initComponents, int maxNumComponents) {, + int capacityGuess = Math.min(AbstractByteBufAllocator.DEFAULT_MAX_COMPONENTS, maxNumComponents);, + return new ComponentList(Math.max(initComponents,
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker.java, + logger.debug(String.format("Channel %s WS Version %s server handshake", version(), channel.hashCode()));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker.java, + logger.debug(String.format("Channel %s WS Version %s server handshake", version(), channel.hashCode()));, +++ b/common/src/main/java/io/netty/util/internal/ConcurrentSet.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software,
[+++ b/transport-native-epoll/pom.xml, + <content>release 6.9</content>]
[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, + * @param trustCertCollectionFile an X.509 certificate collection file in PEM format., + * {@code null} to use the default or the results of parsing, + * {@code trustCertCollectionFile}, + public JdkSslClientContext(File trustCertCollectionFile, TrustManagerFactory trustManagerFactory,, + this(trustCertCollectionFile, trustManagerFactory, keyCertChainFile, keyFile, keyPassword, keyManagerFactory,, + * @param trustCertCollectionFile an X.509 certificate collection file in PEM format., + * {@code null} to use the default or the results of parsing, + * {@code trustCertCollectionFile}, + public JdkSslClientContext(File trustCertCollectionFile, TrustManagerFactory trustManagerFactory,, + ctx = newSSLContext(toX509Certificates(trustCertCollectionFile), trustManagerFactory,, + JdkSslClientContext(X509Certificate[] trustCertCollection, TrustManagerFactory trustManagerFactory,, + ctx = newSSLContext(trustCertCollection, trustManagerFactory, keyCertChain, key, keyPassword,, + private
[+++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibDecoder.java, + private Inflater inflater;, + private boolean decideZlibOrNone;, +, + case ZLIB_OR_NONE:, + // Postpone the decision until decode(...) is called., + decideZlibOrNone = true;, + crc = null;, + break;, + if (decideZlibOrNone) {, + // First two bytes are needed to decide if it's a ZLIB stream., + if (in.readableBytes() < 2) {, + return;, + }, +, + boolean nowrap = !looksLikeZlib(in.getShort(0));, + inflater = new Inflater(nowrap);, + decideZlibOrNone = false;, + }, +, + if (inflater != null) {, + }, +, + /*, + * Returns true if the cmf_flg parameter (think:
[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import org.jboss.netty.util.WriteMessageQueue;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import org.jboss.netty.util.WriteMessageQueue;, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import org.jboss.netty.util.WriteMessageQueue;, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/util/WriteMessageQueue.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version
[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, + pipeline.remove0(this, true);, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, + pipeline.remove0(this, true);, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, + remove0(ctx, false);, + remove0(ctx, false);, + void remove0(DefaultChannelHandlerContext ctx, boolean tearDown) {, + callHandlerRemoved(ctx, tearDown);, + callHandlerRemoved(oldCtx, false);, + private void callHandlerRemoved(final DefaultChannelHandlerContext ctx, final boolean tearDown) {, + callHandlerRemoved0(ctx, tearDown);, + callHandlerRemoved0(ctx, tearDown);, + private void callHandlerRemoved0(final DefaultChannelHandlerContext ctx, boolean tearDown) {, + if (!tearDown) {, + }]
[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, + handler().userEventTriggered(this, event);]
[+++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +static void netty_epoll_linuxsocket_setTimeToLive(JNIEnv* env, jclass clazz, jint fd, jint optval) {, + netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_TTL, &optval, sizeof(optval));, +}, +, +static void netty_epoll_linuxsocket_setInterface(JNIEnv* env, jclass clazz, jint fd, jbyteArray interfaceAddress, jint scopeId) {, + struct sockaddr_storage interfaceAddr;, + socklen_t interfaceAddrSize;, + struct sockaddr_in* interfaceIpAddr;, + struct sockaddr_in6* interfaceIp6Addr;, +, + if (netty_unix_socket_initSockaddr(env, interfaceAddress, scopeId, 0, &interfaceAddr, &interfaceAddrSize) == -1) {, + return;, + }, +, + switch (interfaceAddr.ss_family) {, + case AF_INET:, + interfaceIpAddr = (struct sockaddr_in*) &interfaceAddr;, + netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_MULTICAST_IF, &interfaceIpAddr->sin_addr, sizeof(interfaceIpAddr->sin_addr));, + break;, + case AF_INET6:, + interfaceIp6Addr = (struct sockaddr_in6*) &interfaceAddr;, +
[+++ b/src/main/resources/META-INF/jboss-beans.xml, + <bean name="org.jboss.netty.internal.ResourceFactory", + <depends>org.jboss.netty.internal.ResourceFactory</depends>, + <factory bean="org.jboss.netty.internal.ResourceFactory"/>]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibEncoder.java, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibEncoder.java, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibEncoder.java, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, + private static final ChannelMetadata METADATA = new ChannelMetadata(ChannelBufType.MESSAGE, false);, +, + public ChannelMetadata metadata() {, + return METADATA;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibEncoder.java, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibEncoder.java, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, + private static final ChannelMetadata METADATA = new ChannelMetadata(ChannelBufType.MESSAGE, false);, +, + public ChannelMetadata metadata() {, + return METADATA;, +++ b/transport/src/main/java/io/netty/channel/Channel.java, + ChannelMetadata metadata();, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibEncoder.java, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibEncoder.java, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, + private static final ChannelMetadata METADATA = new ChannelMetadata(ChannelBufType.MESSAGE, false);, +, + public ChannelMetadata metadata() {, + return METADATA;, +++
[+++ b/common/src/main/java/io/netty/util/internal/AppendableCharSequence.java, + if (start == end) {, + // If start and end index is the same we need to return an empty sequence to conform to the interface., + // As our expanding logic depends on the fact that we have a char[] with length > 0 we need to construct, + // an instance for which this is true., + return new AppendableCharSequence(Math.min(16, chars.length));, + }, +++ b/common/src/main/java/io/netty/util/internal/AppendableCharSequence.java, + if (start == end) {, + // If start and end index is the same we need to return an empty sequence to conform to the interface.,
[+++ b/microbench/src/main/java/io/netty/microbench/buffer/ByteBufBenchmark.java, +/*, +* Copyright 2015 The Netty Project, +*, +* The Netty Project licenses this file to you under the Apache License,, +* version 2.0 (the "License"); you may not use this file except in compliance, +* with the License. You may obtain a copy of the License at:, +*, +* http://www.apache.org/licenses/LICENSE-2.0, +*, +* Unless required by applicable law or agreed to in writing, software, +* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, +* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, +* License for the specific language governing
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/cors/CorsHandlerTest.java, + final FullHttpRequest request = optionsRequest("http://localhost:8888", "content-type, xheader1");, + channel.writeInbound(optionsRequest(origin, requestHeaders));, + private static FullHttpRequest optionsRequest(final String origin, final String requestHeaders) {]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyOrHttpChooser.java, + return ctx.alloc().ioBuffer();, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyOrHttpChooser.java, + return ctx.alloc().ioBuffer();, +++ b/codec/src/main/java/io/netty/handler/codec/FixedLengthFrameDecoder.java, + return ctx.alloc().ioBuffer(frameLength);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyOrHttpChooser.java, + return ctx.alloc().ioBuffer();, +++ b/codec/src/main/java/io/netty/handler/codec/FixedLengthFrameDecoder.java, + return ctx.alloc().ioBuffer(frameLength);, +++ b/example/src/main/java/io/netty/example/discard/DiscardServerHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyOrHttpChooser.java, + return ctx.alloc().ioBuffer();, +++ b/codec/src/main/java/io/netty/handler/codec/FixedLengthFrameDecoder.java, + return ctx.alloc().ioBuffer(frameLength);, +++ b/example/src/main/java/io/netty/example/discard/DiscardServerHandler.java, +++ b/example/src/main/java/io/netty/example/echo/EchoClientHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyOrHttpChooser.java, + return ctx.alloc().ioBuffer();, +++ b/codec/src/main/java/io/netty/handler/codec/FixedLengthFrameDecoder.java, + return ctx.alloc().ioBuffer(frameLength);, +++ b/example/src/main/java/io/netty/example/discard/DiscardServerHandler.java, +++ b/example/src/main/java/io/netty/example/echo/EchoClientHandler.java, +++ b/example/src/main/java/io/netty/example/echo/EchoServerHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyOrHttpChooser.java, + return ctx.alloc().ioBuffer();, +++ b/codec/src/main/java/io/netty/handler/codec/FixedLengthFrameDecoder.java, + return ctx.alloc().ioBuffer(frameLength);, +++ b/example/src/main/java/io/netty/example/discard/DiscardServerHandler.java, +++ b/example/src/main/java/io/netty/example/echo/EchoClientHandler.java, +++ b/example/src/main/java/io/netty/example/echo/EchoServerHandler.java, +++ b/example/src/main/java/io/netty/example/udt/echo/bytes/ByteEchoClientHandler.java, + return ctx.alloc().ioBuffer(, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyOrHttpChooser.java, + return ctx.alloc().ioBuffer();, +++ b/codec/src/main/java/io/netty/handler/codec/FixedLengthFrameDecoder.java, + return ctx.alloc().ioBuffer(frameLength);, +++ b/example/src/main/java/io/netty/example/discard/DiscardServerHandler.java, +++ b/example/src/main/java/io/netty/example/echo/EchoClientHandler.java, +++ b/example/src/main/java/io/netty/example/echo/EchoServerHandler.java, +++ b/example/src/main/java/io/netty/example/udt/echo/bytes/ByteEchoClientHandler.java, + return ctx.alloc().ioBuffer(,
[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, + "minWritableBytes: %d (expected: >= 0)", minWritableBytes));, + "writerIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d)",, + writerIndex, minWritableBytes, maxCapacity));]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07.java, + logger.debug(, + "WebSocket version 07 client handshake key: {}, expected response: {}",, + key, expectedChallengeResponseString);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07.java, + logger.debug(, + "WebSocket version 07 client handshake key: {}, expected response: {}",, + key, expectedChallengeResponseString);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, + logger.debug(, + "WebSocket version 08 client handshake key: {}, expected response: {}",, + key, expectedChallengeResponseString);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07.java, + logger.debug(, + "WebSocket version 07 client handshake key: {}, expected response: {}",, + key, expectedChallengeResponseString);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, + logger.debug(, + "WebSocket version 08 client handshake key: {}, expected response: {}",, + key, expectedChallengeResponseString);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java, + logger.debug(, + "WebSocket version 13 client
[+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, + public boolean isSessionPresent() {, + return sessionPresent;, + }, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, + public boolean isSessionPresent() {, + return sessionPresent;, + }, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectReturnCode.java, + private static final Map<Byte, MqttConnectReturnCode> VALUE_TO_CODE_MAP;, + VALUE_TO_CODE_MAP = Collections.unmodifiableMap(valueMap);, + if (VALUE_TO_CODE_MAP.containsKey(b)) {, + return VALUE_TO_CODE_MAP.get(b);]
[+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, + final boolean unaligned;, + int version = javaVersion();, + if (version >= 9) {, + // Java9/10 use all lowercase and later versions all uppercase., + String fieldName = version >= 11 ? "UNALIGNED" : "unaligned";, + // On Java9 and later we try to directly access the field as we can do this without, + // adjust the accessible levels., + try {, + Field unalignedField = bitsClass.getDeclaredField(fieldName);, + if (unalignedField.getType() == boolean.class) {, + long offset = UNSAFE.staticFieldOffset(unalignedField);, + Object object = UNSAFE.staticFieldBase(unalignedField);, + return UNSAFE.getBoolean(object, offset);, + }, + // There is something
[+++ b/pom.xml, + <version>2.3.2</version>]
[+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, + int offset = first.offset;, + setIndex(readerIndex - offset, writerIndex - offset);, + adjustMarkers(offset);, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, + int offset = first.offset;, + setIndex(readerIndex - offset, writerIndex - offset);, + adjustMarkers(offset);, +++ b/buffer/src/test/java/io/netty/buffer/AbstractCompositeByteBufTest.java, +, + // See https://github.com/netty/netty/issues/1976, + @Test, + public void testDiscardSomeReadBytes() {, + CompositeByteBuf cbuf = freeLater(compositeBuffer());, + int len = 8 * 4;, + for (int i = 0; i < len; i += 4) {, + ByteBuf buf = Unpooled.buffer().writeInt(i);, + cbuf.capacity(cbuf.writerIndex()).addComponent(buf).writerIndex(i + 4);, + }, + cbuf.writeByte(1);, +, + byte[] me = new byte[len];, + cbuf.readBytes(me);, + cbuf.readByte();, +, + cbuf.discardSomeReadBytes();, + }]
[+++ b/codec/src/main/java/io/netty/handler/codec/compression/Bzip2Decoder.java, + // fall through, + // fall through, + // fall through, + // fall through, + // fall through, + // fall through, + // fall through, + // fall through, +++ b/codec/src/main/java/io/netty/handler/codec/compression/Bzip2Decoder.java, + // fall through, + // fall through, + // fall through, + // fall through, + // fall through, + // fall through, + // fall through, + // fall through, +++ b/codec/src/main/java/io/netty/handler/codec/compression/Bzip2Encoder.java, + // fall through, + // fall through, + // fall through, +++ b/codec/src/main/java/io/netty/handler/codec/compression/Bzip2Decoder.java, + // fall through, + // fall through, + // fall through, + // fall
[+++ b/buffer/src/test/java/io/netty/buffer/UnpooledTest.java, + try {, + } finally {, + buf.release();, + }]
[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, + zerooutAndRelease(encodedBuf);, + zerooutAndRelease(wrappedBuf);, + // Zero out the buffer and so the private key it held., + zerooutAndRelease(buffer);, + private static void zerooutAndRelease(ByteBuf buffer) {, + buffer.setZero(0, buffer.capacity());, + buffer.release();, + }, +]
[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CharSequenceMap.java, +import io.netty.util.internal.UnstableApi;, +/**, + * Internal use only!, + */, +@UnstableApi, +public final class CharSequenceMap<V> extends DefaultHeaders<CharSequence, V, CharSequenceMap<V>> {, +, + @SuppressWarnings("unchecked"), + public CharSequenceMap(boolean caseSensitive, ValueConverter<V> valueConverter, int arraySizeHint) {, + super(caseSensitive ? CASE_SENSITIVE_HASHER : CASE_INSENSITIVE_HASHER, valueConverter,, + NameValidator.NOT_NULL, arraySizeHint);, + }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CharSequenceMap.java, +import io.netty.util.internal.UnstableApi;, +/**, + * Internal use only!, + */, +@UnstableApi, +public final class CharSequenceMap<V> extends DefaultHeaders<CharSequence, V, CharSequenceMap<V>> {, +, + @SuppressWarnings("unchecked"), + public CharSequenceMap(boolean caseSensitive, ValueConverter<V> valueConverter, int arraySizeHint) {, + super(caseSensitive ? CASE_SENSITIVE_HASHER : CASE_INSENSITIVE_HASHER, valueConverter,, + NameValidator.NOT_NULL, arraySizeHint);, + }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, + this(DEFAULT_MAX_HEADER_SIZE, DEFAULT_HEADER_TABLE_SIZE, validateHeaders, 32);,
[+++ b/common/src/main/java/io/netty/util/internal/ConcurrentSet.java, +/**, + * @deprecated For removal in Netty 4.2. Please use {@link ConcurrentHashMap#newKeySet()} instead, + */, +@Deprecated]
[+++ b/pom.xml, + <version>v1.0.1</version>]
[+++ b/all/pom.xml, + <version>4.1.25.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.1.25.Final-SNAPSHOT</version>, +++ b/bom/pom.xml, + <version>4.1.25.Final-SNAPSHOT</version>, + <tag>HEAD</tag>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.1.25.Final-SNAPSHOT</version>, +++ b/bom/pom.xml, + <version>4.1.25.Final-SNAPSHOT</version>, + <tag>HEAD</tag>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, + <version>4.1.25.Final-SNAPSHOT</version>, +
[+++ b/microbench/pom.xml, + <!-- This only be set when run on mac as on other platforms we just want to include the jar without native, + code -->, + <kqueue.classifier />, + <id>mac</id>, + <activation>, + <os>, + <family>mac</family>, + </os>, + </activation>, + <properties>, + <kqueue.classifier>${jni.classifier}</kqueue.classifier>, + </properties>, + <build>, + <plugins>, + <plugin>, + <artifactId>maven-compiler-plugin</artifactId>, + <configuration>, + <includes>, + <include>**/*.java</include>, + </includes>, + </configuration>, + </plugin>, + </plugins>, + </build>, + </profile>, + <profile>, + <groupId>${project.groupId}</groupId>, + <artifactId>netty-transport-native-kqueue</artifactId>, + <version>${project.version}</version>, + <classifier>${kqueue.classifier}</classifier>, + </dependency>, + <dependency>, +++ b/microbench/pom.xml, + <!-- This only be set when run
[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, + uint32_t events = (flags & EPOLL_EDGE) ? EPOLLET : 0;, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, + uint32_t events = (flags & EPOLL_EDGE) ? EPOLLET : 0;, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +#define EPOLL_RDHUP 0x04, +#define EPOLL_EDGE 0x08, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, + uint32_t events = (flags & EPOLL_EDGE) ? EPOLLET : 0;, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +#define EPOLL_RDHUP 0x04, +#define EPOLL_EDGE 0x08, +, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, + protected int flags = Native.EPOLLET;, +, + void setFlag(int flag) {, + if (!isFlagSet(flag)) {, + flags |= flag;, + modifyEvents();, + }, + }, +, + void clearFlag(int flag) {, + if (isFlagSet(flag)) {, + flags &= ~flag;,
[+++ b/all/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/all/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/buffer/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/all/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/buffer/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/codec-dns/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/all/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/buffer/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/codec-dns/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/codec-haproxy/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/all/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/buffer/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/codec-dns/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/codec-haproxy/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/codec-http/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/all/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/buffer/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/codec-dns/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/codec-haproxy/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/codec-http/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/codec-memcache/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/all/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/buffer/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/codec-dns/pom.xml, + <version>4.1.0.Beta1</version>, +++ b/codec-haproxy/pom.xml, +
[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/AuthoritativeDnsServerCache.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express
[+++ b/codec/src/main/java/io/netty/handler/codec/compression/Snappy.java, + if (inIndex >= maxIndex - 4) {, +++ b/codec/src/main/java/io/netty/handler/codec/compression/Snappy.java, + if (inIndex >= maxIndex - 4) {, +++ b/codec/src/test/java/io/netty/handler/codec/compression/SnappyFramedEncoderTest.java, + , + /**, + * This test asserts that if we have a remainder after emitting a copy that, + * is less than 4 bytes (ie. the minimum required for a copy), we should, + * emit a literal rather than trying to see if we can emit another copy., + */, + @Test, + public void testInputBufferOverseek() throws Exception {, + ByteBuf in = Unpooled.wrappedBuffer(new byte[] {, + 11, 0, // literal, + 0,
[+++ b/common/src/main/java/io/netty/util/internal/AppendableCharSequence.java, + if (length < 1) {, + throw new IllegalArgumentException("length: " + length + " (length: >= 1)");, + }]
[+++ b/buffer/src/main/java/io/netty/buffer/UnpooledUnsafeDirectByteBuf.java, + // We never try to free the buffer if it was provided by the end-user as we not know if this is an duplicate or, + // an slice. This is done to prevent an IllegalArgumentException when using Java9 as Unsafe.invokeCleaner(...), + // will check if the given buffer is either an duplicate or slice and in this case throw an, + // IllegalArgumentException., + //, + // See http://hg.openjdk.java.net/jdk9/hs-demo/jdk/file/0d2ab72ba600/src/jdk.unsupported/share/classes/, + // sun/misc/Unsafe.java#l1250, + //, + // We also call slice() explicitly here to preserve behaviour with previous netty releases., + this(alloc, initialBuffer.slice(), maxCapacity, false);, +
[+++ b/example/src/main/java/io/netty/example/filetransfer/FileServer.java, + ctx.writeAndFlush("Not a file: " + file + '\n');, + ctx.writeAndFlush("\n");, + ctx.writeAndFlush("File not found: " + file + '\n');, +++ b/example/src/main/java/io/netty/example/filetransfer/FileServer.java, + ctx.writeAndFlush("Not a file: " + file + '\n');, + ctx.writeAndFlush("\n");, + ctx.writeAndFlush("File not found: " + file + '\n');, +++ b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java, + ch.writeAndFlush(request);, +++ b/example/src/main/java/io/netty/example/filetransfer/FileServer.java, + ctx.writeAndFlush("Not a file: " + file + '\n');, + ctx.writeAndFlush("\n");, + ctx.writeAndFlush("File not found: " + file + '\n');, +++ b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java, + ch.writeAndFlush(request);, +++ b/example/src/main/java/io/netty/example/http/upload/HttpUploadClient.java, + } else {, + channel.flush();, + } else {, + channel.flush();, +++ b/example/src/main/java/io/netty/example/filetransfer/FileServer.java, + ctx.writeAndFlush("Not a file: " + file + '\n');,
[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsCache.java, + * Be aware this <strong>won't</strong> be called with timeout / cancel / transport exceptions., + *, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsCache.java, + * Be aware this <strong>won't</strong> be called with timeout / cancel / transport exceptions., + *, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, + /**, + * Returns {@code true} if the {@link Throwable} was caused by an timeout or transport error., + * These methods can be used on the {@link Future#cause()} that is returned by the various methods exposed by this, + * {@link DnsNameResolver}., + */, + public static boolean isTransportOrTimeoutError(Throwable cause) {, + return cause != null &&
[+++ b/.fbfilter.xml, + ~ Copyright 2012 The Netty Project, +++ b/.fbfilter.xml, + ~ Copyright 2012 The Netty Project, +++ b/all/assembly.xml, +<!--, + ~ Copyright 2012 The Netty Project, + ~, + ~ The Netty Project licenses this file to you under the Apache License,, + ~ version 2.0 (the "License"); you may not use this file except in compliance, + ~ with the License. You may obtain a copy of the License at:, + ~, + ~ http://www.apache.org/licenses/LICENSE-2.0, + ~, + ~ Unless required by applicable law or agreed to in writing, software, + ~ distributed under the License
[+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, + // Calling malloc with capacity of 0 may return a null ptr or a memory address that can be used., + // Just use 1 to make it safe to use in all cases:, + // See: http://pubs.opengroup.org/onlinepubs/009695399/functions/malloc.html, + return newDirectBuffer(UNSAFE.allocateMemory(Math.max(1, capacity)), capacity);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, + // Calling malloc with capacity of 0 may return a null ptr or a memory address that can be used., + // Just use 1 to make it safe to use in all cases:, + // See: http://pubs.opengroup.org/onlinepubs/009695399/functions/malloc.html, + return newDirectBuffer(UNSAFE.allocateMemory(Math.max(1, capacity)), capacity);, +++ b/common/src/test/java/io/netty/util/internal/PlatformDependentTest.java, +import java.nio.ByteBuffer;, +import static org.junit.Assert.*;,
[+++ b/pom.xml, + <version>1.2.3.Final</version>]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpResponseEncoder.java, + } else if (status.code() == HttpResponseStatus.RESET_CONTENT.code()) {, +, + // Stripping Transfer-Encoding:, + msg.headers().remove(HttpHeaderNames.TRANSFER_ENCODING);, +, + // Set Content-Length: 0, + // https://httpstatuses.com/205, + msg.headers().setInt(HttpHeaderNames.CONTENT_LENGTH, 0);, + status.code() == HttpResponseStatus.NOT_MODIFIED.code() ||, + status.code() == HttpResponseStatus.RESET_CONTENT.code();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpResponseEncoder.java, + } else if (status.code() == HttpResponseStatus.RESET_CONTENT.code()) {, +, + // Stripping Transfer-Encoding:, + msg.headers().remove(HttpHeaderNames.TRANSFER_ENCODING);, +, + // Set Content-Length: 0, + // https://httpstatuses.com/205, + msg.headers().setInt(HttpHeaderNames.CONTENT_LENGTH, 0);, + status.code() == HttpResponseStatus.NOT_MODIFIED.code() ||, + status.code() == HttpResponseStatus.RESET_CONTENT.code();, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpResponseEncoderTest.java, +, + @Test, + public void testStatusResetContentTransferContentLength() {, + testStatusResetContentTransferContentLength0(HttpHeaderNames.CONTENT_LENGTH, Unpooled.buffer().writeLong(8));, + }, +, + @Test, + public void testStatusResetContentTransferEncoding() {,
[+++ b/example/pom.xml, + <scope>runtime</scope>, + </dependency>, + <dependency>, + <groupId>org.javassist</groupId>, + <artifactId>javassist</artifactId>, + <scope>runtime</scope>]
[+++ b/example/src/main/java/io/netty/example/qotm/QuoteOfTheMomentClient.java, +import io.netty.buffer.ChannelBuffers;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelBootstrap;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.socket.DatagramPacket;, +import io.netty.channel.socket.nio.NioDatagramChannel;, +import io.netty.channel.socket.nio.SelectorEventLoop;, +import java.net.InetSocketAddress;, +, + public void run() throws Exception {, + ChannelBootstrap b = new ChannelBootstrap();, + try {, + b.eventLoop(new SelectorEventLoop()), + .channel(new NioDatagramChannel()), + .localAddress(new InetSocketAddress(0)), + .option(ChannelOption.SO_BROADCAST, true), + .initializer(new ChannelInitializer() {, + @Override, + public void initChannel(Channel ch) throws Exception {, + ch.pipeline().addLast(new QuoteOfTheMomentClientHandler());, + Channel ch = b.bind().sync().channel();, + ch.write(new DatagramPacket(, + ChannelBuffers.copiedBuffer("QOTM?", CharsetUtil.UTF_8),, + new InetSocketAddress("255.255.255.255", port)));, + if (!ch.closeFuture().await(5000)) {, + } finally {, + b.shutdown();, + }, +++ b/example/src/main/java/io/netty/example/qotm/QuoteOfTheMomentClient.java, +import io.netty.buffer.ChannelBuffers;, +import io.netty.channel.Channel;,
[+++ b/pom.xml, + <version>3.0.0.CR5-SNAPSHOT</version>, + <connection>scm:svn:http://anonsvn.jboss.org/repos/netty/trunk</connection>, + <developerConnection>scm:svn:https://svn.jboss.org/repos/netty/trunk</developerConnection>]
[+++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, + @Deprecated, + @Deprecated]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, + private static final int ST_CONTENT_ALWAYS_EMPTY = 3;, + state = isContentAlwaysEmpty(m) ? ST_CONTENT_ALWAYS_EMPTY :, + HttpUtil.isTransferEncodingChunked(m) ? ST_CONTENT_CHUNK : ST_CONTENT_NON_CHUNK;, + switch (state) {, + case ST_INIT:, + case ST_CONTENT_ALWAYS_EMPTY:, + out.add(EMPTY_BUFFER);, + if (msg instanceof LastHttpContent) {, + state = ST_INIT;, + return;, + case ST_CONTENT_NON_CHUNK:, + return;, + case ST_CONTENT_CHUNK:, + encodeChunkedContent(ctx, msg, contentLength(msg), out);, + return;, + default:, + boolean isContentAlwaysEmpty(@SuppressWarnings("unused") H msg) {, + return false;, + }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, + private static final int ST_CONTENT_ALWAYS_EMPTY = 3;, + state = isContentAlwaysEmpty(m) ? ST_CONTENT_ALWAYS_EMPTY :, + HttpUtil.isTransferEncodingChunked(m) ? ST_CONTENT_CHUNK : ST_CONTENT_NON_CHUNK;,
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +, + cookies.add(c);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +, + cookies.add(c);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java, + if (getPath() == null) {, + if (that.getPath() != null) {, + } else if (that.getPath() == null) {, + return false;, + } else if (!getPath().equals(that.getPath())) {, + if (getDomain() == null) {, + if (that.getDomain() != null) {, + } else if (that.getDomain() == null) {, + return false;, + } else {, + return true;, + }, +, + if (getPath() == null) {, + if (c.getPath() != null) {, + } else if (c.getPath() == null) {, + return 1;, + }
[+++ b/codec-http/src/main/java/io/netty/handler/codec/rtsp/RtspRequestEncoder.java, +import static io.netty.handler.codec.http.HttpConstants.*;, +, + private static final byte[] CRLF = { CR, LF };, + encodeAscii(request.getMethod().toString(), buf);, + buf.writeByte(SP);, + buf.writeByte(SP);, + encodeAscii(request.getProtocolVersion().toString(), buf);, + buf.writeBytes(CRLF);, +++ b/codec-http/src/main/java/io/netty/handler/codec/rtsp/RtspRequestEncoder.java, +import static io.netty.handler.codec.http.HttpConstants.*;, +, + private static final byte[] CRLF = { CR, LF };, + encodeAscii(request.getMethod().toString(), buf);, + buf.writeByte(SP);, + buf.writeByte(SP);, + encodeAscii(request.getProtocolVersion().toString(), buf);, + buf.writeBytes(CRLF);, +++ b/codec-http/src/main/java/io/netty/handler/codec/rtsp/RtspResponseEncoder.java, +import static io.netty.handler.codec.http.HttpConstants.*;, +, + private static final byte[] CRLF = { CR, LF };, + encodeAscii(response.getProtocolVersion().toString(), buf);, + buf.writeByte(SP);, + buf.writeByte(SP);, + encodeAscii(String.valueOf(response.getStatus().reasonPhrase()), buf);, + buf.writeBytes(CRLF);]
[+++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketConditionalWritabilityTest.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express
[+++ b/all/pom.xml, + <version>4.1.34.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.1.34.Final-SNAPSHOT</version>, +++ b/bom/pom.xml, + <version>4.1.34.Final-SNAPSHOT</version>, + <tag>HEAD</tag>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.1.34.Final-SNAPSHOT</version>, +++ b/bom/pom.xml, + <version>4.1.34.Final-SNAPSHOT</version>, + <tag>HEAD</tag>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, + <version>4.1.34.Final-SNAPSHOT</version>, +
[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, + closeFuture.setClosed();, + closeFuture.setClosed();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, + closeFuture.setClosed();, + closeFuture.setClosed();, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, + protected void doClose() throws Exception {, + if (state <= 2) {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, + closeFuture.setClosed();, + closeFuture.setClosed();, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, + protected void doClose() throws Exception {, + if (state <= 2) {, +++ b/transport/src/main/java/io/netty/channel/local/LocalServerChannel.java, + protected void doClose() throws Exception {, + if (state <= 1) {]
[+++ /dev/null, +++ /dev/null, +++ b/all/pom.xml, + <id>clean-first</id>, + <includeGroupIds>${project.groupId}</includeGroupIds>, + <outputDirectory>${project.build.directory}/src</outputDirectory>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>build-helper-maven-plugin</artifactId>, + <version>1.7</version>, + <id>add-source</id>, + <phase>generate-sources</phase>, + <goal>add-source</goal>, + <sources>, + <source>target/src</source>, + </sources>, +, + <profiles>, + <profile>, + <id>full</id>, + <build>, + <plugins>, + <plugin>, + <artifactId>maven-jxr-plugin</artifactId>, + <version>2.2</version>, + <executions>, + <execution>, + <id>generate-xref</id>, + <phase>package</phase>, + <goals>, + <goal>jxr</goal>, + </goals>, + </execution>, + </executions>, + <configuration>, + <inputEncoding>UTF-8</inputEncoding>, + <outputEncoding>UTF-8</outputEncoding>, + <linkJavadoc>true</linkJavadoc>, + <destDir>${project.build.directory}/xref</destDir>, + <javadocDir>${project.build.directory}/api</javadocDir>, + <docTitle>Netty Source Xref (${project.version})</docTitle>, + <windowTitle>Netty Source Xref (${project.version})</windowTitle>, + </configuration>, + </plugin>, + <plugin>, + <artifactId>maven-javadoc-plugin</artifactId>, + <version>2.8.1</version>, + <executions>,
[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelId.java, +import io.netty.util.internal.MacAddressUtil;, + final ClassLoader loader = PlatformDependent.getClassLoader(DefaultChannelId.class);, + Method getName = runtimeMxBeanType.getMethod("getName", EmptyArrays.EMPTY_CLASSES);]
[+++ b/pom.xml, + <releases>, + <updatePolicy>interval:10080</updatePolicy>, + </releases>, +++ b/pom.xml, + <releases>, + <updatePolicy>interval:10080</updatePolicy>, + </releases>, +++ b/src/docbook/custom.dtd, +<!ENTITY ChannelEvent "<ulink url='&API;channel/ChannelEvent.html'><interfacename>ChannelEvent</interfacename></ulink>">, +<!-- Types in the channel.socket package -->, +, +<!ENTITY ServerSocketChannel "<ulink url='&API;channel/socket/ServerSocketChannel.html'><classname>ServerSocketChannel</classname></ulink>">, +, +++ b/pom.xml, + <releases>, + <updatePolicy>interval:10080</updatePolicy>, + </releases>, +++ b/src/docbook/custom.dtd, +<!ENTITY ChannelEvent "<ulink url='&API;channel/ChannelEvent.html'><interfacename>ChannelEvent</interfacename></ulink>">, +<!-- Types in the channel.socket package -->, +, +<!ENTITY ServerSocketChannel "<ulink url='&API;channel/socket/ServerSocketChannel.html'><classname>ServerSocketChannel</classname></ulink>">, +, +++ b/src/docbook/module/start.xml, + <literal>"all"</literal>., + &ChannelFactory; factory =, + new &NioServerSocketChannelFactory;<co id="example.discard2.co1" />(, + &ServerBootstrap; bootstrap = new &ServerBootstrap;<co id="example.discard2.co2" />(factory);, + pipeline.addLast("handler", handler);<co id="example.discard2.co3" />, + bootstrap.setOption("child.tcpNoDelay", true);<co id="example.discard2.co4" />, + bootstrap.bind(new InetSocketAddress(8080));<co id="example.discard2.co5" />, +
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, + if (contentEncoding != null) {, + // Content-Encoding was set, either as something specific or as the IDENTITY encoding, + // Therefore, we should NOT encode here, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, + if (contentEncoding != null) {, + // Content-Encoding was set, either as something specific or as the IDENTITY encoding, + // Therefore, we should NOT encode here, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentCompressorTest.java, + @Test, + public void testCustomEncoding() throws Exception {, + EmbeddedChannel ch = new EmbeddedChannel(new HttpContentCompressor());, + assertTrue(ch.writeInbound(newRequest()));, +, + FullHttpResponse res = new DefaultFullHttpResponse(, + HttpVersion.HTTP_1_1, HttpResponseStatus.OK,, + Unpooled.copiedBuffer("Hello, World", CharsetUtil.US_ASCII));, + int len = res.content().readableBytes();,
[+++ b/all/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/codec-socks/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/codec-socks/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/codec/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/codec-socks/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/codec/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/common/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.16.Final-SNAPSHOT</version>, +++ b/codec-socks/pom.xml, +
[+++ b/example/src/main/java/io/netty/example/http2/helloworld/client/Http2Client.java, +import static io.netty.buffer.Unpooled.wrappedBuffer;, + responseHandler.put(streamId, channel.write(request), channel.newPromise());, + wrappedBuffer(URL2DATA.getBytes(CharsetUtil.UTF_8)));, + responseHandler.put(streamId, channel.write(request), channel.newPromise());, + channel.flush();, +++ b/example/src/main/java/io/netty/example/http2/helloworld/client/Http2Client.java, +import static io.netty.buffer.Unpooled.wrappedBuffer;, + responseHandler.put(streamId, channel.write(request), channel.newPromise());, + wrappedBuffer(URL2DATA.getBytes(CharsetUtil.UTF_8)));, + responseHandler.put(streamId, channel.write(request), channel.newPromise());, + channel.flush();, +++ b/example/src/main/java/io/netty/example/http2/helloworld/client/HttpResponseHandler.java, +import io.netty.util.internal.PlatformDependent;, +import java.util.Map;, + private Map<Integer, Entry<ChannelFuture, ChannelPromise>> streamidPromiseMap;, + // Use a concurrent map because we add and iterate from the main thread (just for the purposes of the example),, + // but Netty also does a get on the map when messages are received in a EventLoop thread., + streamidPromiseMap = PlatformDependent.newConcurrentHashMap();]
[+++ b/buffer/src/test/java/io/netty/buffer/ReadOnlyByteBufTest.java, + @Test, + @Test]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequest.java, + * Gets the {@link HttpMethod} of this {@link HttpRequest}., + *, + * @return The {@link HttpMethod} of this {@link HttpRequest}, + * Sets the {@link HttpMethod} of this {@link HttpRequest}., + *, + * @param The {@link HttpMethod} to set, + * Gets the requested URI (or alternatively, path), + *, + * @return The URI being requested, + * Sets the URI (or alternatively, path) being requested., + *, + * @param uri The URI being requested]
[+++ b/README.md, +[The 'master' branch](https://github.com/netty/netty/tree/master) is where the development of the latest major version lives on. The development of all other versions takes place in each branch whose name is identical to `<majorVersion>.<minorVersion>`. For example, the development of 3.9 and 4.0 resides in [the branch '3.9'](https://github.com/netty/netty/tree/3.9) and [the branch '4.0'](https://github.com/netty/netty/tree/4.0) respectively., +, +++ b/README.md, +[The 'master' branch](https://github.com/netty/netty/tree/master) is where the development of the latest major version lives on. The development of all other versions takes place in each branch whose name is identical to `<majorVersion>.<minorVersion>`. For example, the development of 3.9 and 4.0 resides in [the branch '3.9'](https://github.com/netty/netty/tree/3.9) and
[+++ b/example/pom.xml, +, + <!-- Needed on Java11 and later -->, + <dependency>, + <groupId>com.sun.activation</groupId>, + <artifactId>javax.activation</artifactId>, + </dependency>, +++ b/example/pom.xml, +, + <!-- Needed on Java11 and later -->, + <dependency>, + <groupId>com.sun.activation</groupId>, + <artifactId>javax.activation</artifactId>, + </dependency>, +++ b/pom.xml, + <!-- JDK11 -->, + <profile>, + <id>java11</id>, + <activation>, + <jdk>11</jdk>, + </activation>, + <properties>, + <!-- Not use alpn agent as Java11 supports alpn out of the box -->, + <argLine.alpnAgent />, + <forbiddenapis.skip>true</forbiddenapis.skip>, + <!-- Needed because of https://issues.apache.org/jira/browse/MENFORCER-275 -->, + <enforcer.plugin.version>3.0.0-M1</enforcer.plugin.version>, + <!-- 1.4.x does not work in Java10+ -->, + <jboss.marshalling.version>2.0.5.Final</jboss.marshalling.version>, + </properties>, +
[+++ b/common/src/main/java/io/netty/util/NetUtil.java, + // The known defaults:, + // - Windows NT Server 4.0+: 200, + // - Linux and Mac OS X: 128, + int somaxconn = PlatformDependent.isWindows() ? 200 : 128;]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, + int readableBytes = actualReadableBytes();, + if (readableBytes > 0) {, + // Keep on consuming as otherwise we may trigger an DecoderException,, + // other handler will replace this codec with the upgraded protocol codec to, + // take the traffic over at some point then., + // See https://github.com/netty/netty/issues/2173, + out.add(buffer.readBytes(actualReadableBytes()));, + }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, + int readableBytes = actualReadableBytes();, + if (readableBytes > 0) {, + // Keep on consuming as otherwise we may trigger an DecoderException,, + // other handler will replace this codec with the upgraded protocol codec to, + // take
[+++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java]
[+++ /dev/null, +++ /dev/null, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2StreamFrameToHttpObjectCodec.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +public class WebSocket00FrameDecoder extends ReplayingDecoder<WebSocketFrame, Void> {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +public class WebSocket00FrameDecoder extends ReplayingDecoder<WebSocketFrame, Void> {, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + * extends {@link ReplayingDecoder}&lt;<strong>{@link Void}</strong>&gt; {, + * {@link Void} state) throws Exception {, + * public class FirstDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + * {@link Void} state) {, + * the state type which is usually an {@link Enum}; use {@link Void} if state management is, + * unused, +public abstract class ReplayingDecoder<O, S>
[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +, + // Use SNI if peerHost was specified, + // See https://github.com/netty/netty/issues/4746, + if (clientMode && peerHost != null) {, + SSL.setTlsExtHostName(ssl, peerHost);, + }, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +, + // Use SNI if peerHost was specified, + // See https://github.com/netty/netty/issues/4746, + if (clientMode && peerHost != null) {, + SSL.setTlsExtHostName(ssl, peerHost);, + }, +++ b/handler/src/test/java/io/netty/handler/ssl/SniClientTest.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + *
[+++ b/codec/src/main/java/io/netty/handler/codec/LineBasedFrameDecoder.java, + * <p>, + * The byte stream is expected to be in UTF-8 character encoding or ASCII. The current implementation, + * uses direct {@code byte} to {@code char} cast and then compares that {@code char} to a few low range, + * ASCII characters like {@code '\n'} or {@code '\r'}. UTF-8 is not using low range [0..0x7F], + * byte values for multibyte codepoint representations therefore fully supported by this implementation., + * <p>, +++ b/codec/src/main/java/io/netty/handler/codec/LineBasedFrameDecoder.java, + * <p>, + * The byte stream is expected to be in UTF-8 character encoding or ASCII. The
[+++ b/NOTICE.txt, +This product optionally depends on 'XNIO', a simplified low-level I/O layer,, +which can be obtained at:, +, + * LICENSE:, + * license/LICENSE.xnio.txt (GNU LGPL 2.1), + * HOMEPAGE:, + * http://www.jboss.org/xnio/, +, +++ b/NOTICE.txt, +This product optionally depends on 'XNIO', a simplified low-level I/O layer,, +which can be obtained at:, +, + * LICENSE:, + * license/LICENSE.xnio.txt (GNU LGPL 2.1), + * HOMEPAGE:, + * http://www.jboss.org/xnio/, +, +++ b/license/LICENSE.xnio.txt, +, + GNU LESSER GENERAL PUBLIC LICENSE, + Version 2.1, February 1999, +, + Copyright (C) 1991, 1999 Free Software Foundation, Inc., + 51 Franklin Street, Fifth
[+++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +import static io.netty.util.ReferenceCountUtil.*;, + ByteBuf value = releaseLater(directBuffer(BLOCK_SIZE * 2));, + ByteBuf expectedValue = releaseLater(directBuffer(BLOCK_SIZE * 2));, + ByteBuf value = releaseLater(directBuffer(BLOCK_SIZE * 2));, + ByteBuf expectedValue = releaseLater(wrappedBuffer(expectedValueContent));, + ByteBuf value = releaseLater(directBuffer(BLOCK_SIZE * 2));, + ByteBuf expectedValue = releaseLater(wrappedBuffer(expectedValueContent));, + ByteBuf copy = releaseLater(copiedBuffer(buffer));, + ByteBuf copy = releaseLater(copiedBuffer(buffer));, + ByteBuf copy = releaseLater(buffer.copy());, + ByteBuf elemA = releaseLater(buffer(15));, + ByteBuf elemB = releaseLater(directBuffer(15));, + assertTrue(set.contains(releaseLater(elemA.copy())));, + ByteBuf elemBCopy = releaseLater(elemB.copy());, + ByteBuf buffer = releaseLater(newBuffer(2));, + final ByteBuf buffer = releaseLater(newBuffer(8));, + final ByteBuf buffer = releaseLater(newBuffer(8));, + final ByteBuf buffer = releaseLater(newBuffer(8));, +
[+++ /dev/null]
[+++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, + * Creates a new buffer which wraps the specified memory address. If {@code doFree} is true the, + * memoryAddress will automatically be freed once the reference count of the {@link ByteBuf} reaches {@code 0}., + */, + public static ByteBuf wrappedBuffer(long memoryAddress, int size, boolean doFree) {, + return new WrappedUnpooledUnsafeDirectByteBuf(ALLOC, memoryAddress, size, doFree);, + }, +, + /**, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, + * Creates a new buffer which wraps the specified memory address. If {@code doFree} is true the, + * memoryAddress will automatically be freed once the reference count of the {@link ByteBuf} reaches
[+++ b/all/pom.xml, +++ b/all/pom.xml, +++ b/buffer/src/main/java/io/netty/array/ObjectArray.java, +package io.netty.array;, +, +, +public class ObjectArray<E> extends AbstractArray<E> {, +, + public ObjectArray(E[] array, int offset, int length) {, + super(array, offset, length);, + }, +, + @Override, + public E[] array() {, + return (E[]) super.array();, + }, +}, +++ b/all/pom.xml, +++ b/buffer/src/main/java/io/netty/array/ObjectArray.java, +package io.netty.array;, +, +, +public class ObjectArray<E> extends AbstractArray<E> {, +, + public ObjectArray(E[] array, int offset, int length) {, + super(array, offset, length);, + }, +, + @Override, + public E[] array() {, + return (E[]) super.array();, + }, +}, +++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, + return writerIndex > readerIndex;,
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java, + if (buf.writableBytes() >= data.readableBytes()) {, + // merge buffers as this is cheaper then a gathering write if the payload is small enough, + buf.writeBytes(data);, + out.add(buf);, + } else {, + }]
[+++ b/testsuite-shading/pom.xml, + <shadingPrefix2>shaded2</shadingPrefix2>, +, + <id>shade</id>, + <execution>, + <id>shade-1</id>, + <phase>package</phase>, + <goals>, + <goal>shade</goal>, + </goals>, + <configuration>, + <artifactSet>, + <includes>, + <include>${project.groupId}</include>, + </includes>, + </artifactSet>, + <relocations>, + <relocation>, + <pattern>${shadedPackagePrefix}</pattern>, + <shadedPattern>${shadingPrefix2}.${shadedPackagePrefix}</shadedPattern>, + </relocation>, + </relocations>, + </configuration>, + </execution>, + <copy file="${classesShadedNativeDir}/lib${nativeTransportLib}" tofile="${classesShadedNativeDir}/lib${shadingPrefix}_${nativeTransportLib}" />, + <copy file="${classesShadedNativeDir}/lib${nativeTransportLib}" tofile="${classesShadedNativeDir}/lib${shadingPrefix2}_${nativeTransportLib}" />, + <exec executable="install_name_tool" failonerror="true" dir="${project.build.directory}/" resolveexecutable="true">, + <arg value="-id" />, + <arg value="lib${shadingPrefix}_${nativeTransportLib}" />, + <arg value="${classesShadedNativeDir}/lib${shadingPrefix}_${nativeTransportLib}" />, + </exec>, + <!-- We need to adjust the ID used on MacOS so we are sure the correct lib is loaded later on
[+++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutor.java, +import java.util.concurrent.Executor;, + DefaultEventExecutor(DefaultEventExecutorGroup parent, Executor executor) {, + super(parent, executor, true);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutor.java, +import java.util.concurrent.Executor;, + DefaultEventExecutor(DefaultEventExecutorGroup parent, Executor executor) {, + super(parent, executor, true);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutorGroup.java, +import java.util.concurrent.Executor;, + protected EventExecutor newChild(Executor executor, Object... args) throws Exception {, + return new DefaultEventExecutor(this, executor);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutor.java, +import java.util.concurrent.Executor;, + DefaultEventExecutor(DefaultEventExecutorGroup parent, Executor executor) {, + super(parent, executor, true);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutorGroup.java, +import java.util.concurrent.Executor;, + protected EventExecutor newChild(Executor executor, Object... args) throws Exception {, + return new DefaultEventExecutor(this, executor);, +++ b/common/src/main/java/io/netty/util/concurrent/MultithreadEventExecutorGroup.java, +import java.util.concurrent.Executor;, + * @param args arguments which will passed to each {@link #newChild(Executor, Object...)} call, +
[+++ b/all/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/codec-socks/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/codec-socks/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/codec/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/codec-socks/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/codec/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/common/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/all/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/buffer/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/codec-http/pom.xml, + <version>4.0.0.CR10-SNAPSHOT</version>, +++ b/codec-socks/pom.xml, +
[+++ b/NOTICE.txt, +This product contains a modified portion of 'libdivsufsort', a C API library to construct, +the suffix array and the Burrows-Wheeler transformed string for any input string of, +a constant-size alphabet written by Yuta Mori. It can be obtained at:, +, + * LICENSE:, + * license/LICENSE.libdivsufsort.txt (MIT License), + * HOMEPAGE:, + * https://code.google.com/p/libdivsufsort/, +, +++ b/NOTICE.txt, +This product contains a modified portion of 'libdivsufsort', a C API library to construct, +the suffix array and the Burrows-Wheeler transformed string for any input string of, +a constant-size alphabet written by Yuta Mori. It can be obtained at:, +,
[+++ b/codec/src/main/java/io/netty/handler/codec/xml/XmlFrameDecoder.java, + boolean inCDATASection = false;, + } else if (!inCDATASection && readByte == '<') {, + } else if (peekAheadByte == '!') {, + if (isCommentBlockStart(in, i)) {, + } else if (isCDATABlockStart(in, i)) {, + // <![CDATA[ start found, + openBracketsCount++;, + inCDATASection = true;, + }, + } else if (!inCDATASection && readByte == '/') {, + if (!inCDATASection) {, + } else if (peekBehindByte == ']' && i - 2 > -1 && in.getByte(i - 2) == ']') {, + // a <![CDATA[...]]> block was closed, + openBracketsCount--;, + inCDATASection = false;, + },
[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyGoAwayFrame.java, + @Override, + @Override, + @Override, + @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyGoAwayFrame.java, + @Override, + @Override, + @Override, + @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeadersFrame.java, + @Override, + @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyGoAwayFrame.java, + @Override, + @Override, + @Override, + @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeadersFrame.java, + @Override, + @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyPingFrame.java, + @Override, + @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyGoAwayFrame.java, + @Override, + @Override, + @Override, + @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeadersFrame.java, + @Override, + @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyPingFrame.java, + @Override, + @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyRstStreamFrame.java, + @Override, + @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyGoAwayFrame.java, + @Override, + @Override, + @Override, + @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeadersFrame.java, + @Override, + @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyPingFrame.java, + @Override, + @Override, +++
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, + encodeHeaders(m.headers(), buf);, + /**, + * Encode the {@link HttpHeaders} into a {@link ByteBuf}., + */, + protected void encodeHeaders(HttpHeaders headers, ByteBuf buf) throws Exception {, + HttpHeaders.encode(headers, buf);, + }, +, + encodeHeaders(headers, buf);]
[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DefaultDnsCache.java, +import io.netty.util.internal.StringUtil;, + Entries entries = resolveCache.remove(appendDot(hostname));, + Entries entries = resolveCache.get(appendDot(hostname));, + cache0(appendDot(hostname), e,, + Math.max(minTtl, Math.min(MAX_SUPPORTED_TTL_SECS, (int) Math.min(maxTtl, originalTtl))), loop);, + cache0(appendDot(hostname), e, Math.min(MAX_SUPPORTED_TTL_SECS, negativeTtl), loop);, + private void cache0(String hostname, DefaultDnsCacheEntry e, int ttl, EventLoop loop) {, + Entries entries = resolveCache.get(hostname);, + Entries oldEntries = resolveCache.putIfAbsent(hostname, entries);, + scheduleCacheExpiration(hostname, e, ttl, loop);, + private void scheduleCacheExpiration(final String hostname, final DefaultDnsCacheEntry e,, + Entries entries = resolveCache.remove(hostname);, +, + private static String appendDot(String hostname) {, + return StringUtil.endsWith(hostname, '.') ? hostname : hostname + '.';, + }, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DefaultDnsCache.java, +import io.netty.util.internal.StringUtil;, + Entries entries
[+++ b/all/pom.xml, + <version>4.1.10.Final</version>, +++ b/all/pom.xml, + <version>4.1.10.Final</version>, +++ b/bom/pom.xml, + <version>4.1.10.Final</version>, + <tag>netty-4.1.10.Final</tag>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, +++ b/all/pom.xml, + <version>4.1.10.Final</version>, +++ b/bom/pom.xml, + <version>4.1.10.Final</version>, + <tag>netty-4.1.10.Final</tag>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, + <version>4.1.10.Final</version>, +
[+++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareByteBuf.java]
[+++ b/pom.xml, + -link http://java.sun.com/products/servlet/2.5/docs/servlet-2_5-mr2/]
[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockZlibDecoder.java, +import io.netty.buffer.ByteBufAllocator;, + numBytes = decompress(encoded.alloc(), frame);, + private int decompress(ByteBufAllocator alloc, SpdyHeadersFrame frame) throws Exception {, + ensureBuffer(alloc);, + private void ensureBuffer(ByteBufAllocator alloc) {, + decompressed = alloc.heapBuffer(DEFAULT_BUFFER_CAPACITY);, + releaseBuffer();, + releaseBuffer();, +, + private void releaseBuffer() {, + if (decompressed != null) {, + decompressed.release();, + decompressed = null;, + }, + }]
[+++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +import java.net.SocketAddress;, + protected volatile SocketAddress addr;, + addr = newSocketAddress();, +, + protected SocketAddress newSocketAddress() {, + return new InetSocketAddress(, + NetUtil.LOCALHOST, TestUtils.getFreePort());, + }, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +import java.net.SocketAddress;, + protected volatile SocketAddress addr;, + addr = newSocketAddress();, +, + protected SocketAddress newSocketAddress() {, + return new InetSocketAddress(, + NetUtil.LOCALHOST, TestUtils.getFreePort());, + }, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/AbstractServerSocketTest.java, +import java.net.SocketAddress;, + protected volatile SocketAddress addr;, + addr = newSocketAddress();, +, + protected SocketAddress newSocketAddress() {, + return new InetSocketAddress(, + NetUtil.LOCALHOST, TestUtils.getFreePort());, + }, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +import java.net.SocketAddress;, + protected volatile SocketAddress addr;, + addr = newSocketAddress();, +, +
[+++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, + try {, + } catch (Throwable cause) {, + promise.tryFailure(cause);, + }]
[+++ b/common/src/main/java/io/netty/util/internal/SystemPropertyUtil.java, + return def;, +++ b/common/src/main/java/io/netty/util/internal/SystemPropertyUtil.java, + return def;, +++ b/common/src/test/java/io/netty/util/internal/SystemPropertyUtilTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT,
[+++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +import io.netty.util.internal.logging.InternalLogger;, + static void setChannelOptions(, + Channel channel, Map<ChannelOption<?>, Object> options, InternalLogger logger) {, + for (Map.Entry<ChannelOption<?>, Object> e: options.entrySet()) {, + setChannelOption(channel, e.getKey(), e.getValue(), logger);, + }, + }, +, + static void setChannelOptions(, + Channel channel, Map.Entry<ChannelOption<?>, Object>[] options, InternalLogger logger) {, + for (Map.Entry<ChannelOption<?>, Object> e: options) {, + setChannelOption(channel, e.getKey(), e.getValue(), logger);, + }, + }, +, + @SuppressWarnings("unchecked"), + private static void setChannelOption(, + Channel channel, ChannelOption<?> option, Object value, InternalLogger logger) {, + try {, + if (!channel.config().setOption((ChannelOption<Object>) option, value)) {, + logger.warn("Unknown channel option '{}' for channel '{}'", option,
[+++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java, + if (!isActive()) {, + // If the channel is not active anymore for whatever reason we should not try to continue reading., + return true;, + }, + if (cause instanceof PortUnreachableException) {, + return false;, + }, + if (cause instanceof IOException) {, + return !(this instanceof ServerChannel);, + }, + return true;, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java, + if (!isActive()) {, + // If the channel is not active anymore for whatever reason we should not try to continue reading., + return true;, + }, + if (cause instanceof PortUnreachableException) {, + return false;, + }, +
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultFullHttpRequest.java, + private final boolean validateHeaders;, + this.validateHeaders = validateHeaders;, + getProtocolVersion(), getMethod(), getUri(), content().copy(), validateHeaders);, + getProtocolVersion(), getMethod(), getUri(), content().duplicate(), validateHeaders);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultFullHttpRequest.java, + private final boolean validateHeaders;, + this.validateHeaders = validateHeaders;, + getProtocolVersion(), getMethod(), getUri(), content().copy(), validateHeaders);, + getProtocolVersion(), getMethod(), getUri(), content().duplicate(), validateHeaders);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultFullHttpResponse.java, + private final boolean validateHeaders;, + this.validateHeaders = validateHeaders;, + DefaultFullHttpResponse copy = new DefaultFullHttpResponse(, + getProtocolVersion(), getStatus(), content().copy(), validateHeaders);, + content().duplicate(), validateHeaders);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultFullHttpRequest.java, + private final boolean validateHeaders;, + this.validateHeaders = validateHeaders;, + getProtocolVersion(), getMethod(), getUri(), content().copy(), validateHeaders);, + getProtocolVersion(), getMethod(), getUri(), content().duplicate(), validateHeaders);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultFullHttpResponse.java, + private final
[+++ b/example/src/main/java/io/netty/example/sctp/SctpClientHandler.java, +import io.netty.channel.sctp.SctpFrame;, + stateEvent.getChannel().write(new SctpFrame(0, 0, ChannelBuffers.wrappedBuffer("SCTP ECHO".getBytes())));, +++ b/example/src/main/java/io/netty/example/sctp/SctpClientHandler.java, +import io.netty.channel.sctp.SctpFrame;, + stateEvent.getChannel().write(new SctpFrame(0, 0, ChannelBuffers.wrappedBuffer("SCTP ECHO".getBytes())));, +++ b/transport-sctp/pom.xml, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>netty-codec</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/example/src/main/java/io/netty/example/sctp/SctpClientHandler.java, +import io.netty.channel.sctp.SctpFrame;, + stateEvent.getChannel().write(new SctpFrame(0, 0, ChannelBuffers.wrappedBuffer("SCTP ECHO".getBytes())));, +++ b/transport-sctp/pom.xml, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>netty-codec</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpChannelImpl.java, + if (m instanceof SctpFrame) {, + return ((SctpFrame) m).getPayloadBuffer().readableBytes();, +++ b/example/src/main/java/io/netty/example/sctp/SctpClientHandler.java, +import io.netty.channel.sctp.SctpFrame;, + stateEvent.getChannel().write(new SctpFrame(0, 0, ChannelBuffers.wrappedBuffer("SCTP ECHO".getBytes())));, +++ b/transport-sctp/pom.xml, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>netty-codec</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpChannelImpl.java, + if (m instanceof SctpFrame) {, + return ((SctpFrame)
[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, + HttpMethod method = msg.method();, + if (HttpMethod.HEAD.equals(method)) {, + } else if (HttpMethod.CONNECT.equals(method)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, + HttpMethod method = msg.method();, + if (HttpMethod.HEAD.equals(method)) {, + } else if (HttpMethod.CONNECT.equals(method)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMethod.java, + if (this == o) {, + return true;, + }, + if (o == this) {, + return 0;, + }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, + HttpMethod method = msg.method();, + if (HttpMethod.HEAD.equals(method)) {, + } else if (HttpMethod.CONNECT.equals(method)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMethod.java, + if (this == o) {, + return true;, + }, + if (o == this) {, + return 0;, + },
[+++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestRule;, + @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();, + private OkHttpClient client = clientTestRule.client;, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestRule;, + @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();, + private OkHttpClient client = clientTestRule.client;, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertNull(client.getResponseCache());, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertNull(client.getResponseCache());, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertNull(client.getResponseCache());, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertNull(client.getResponseCache());, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertNull(client.getResponseCache());, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, +
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import java.util.ArrayList;, +import java.util.concurrent.CountDownLatch;, +import okhttp3.Call;, +import okhttp3.Callback;, +import okhttp3.internal.Util;, + List<Call> networkRequests = new ArrayList<>(2);, + List<Exception> failures = new ArrayList<>(2);, + List<InetAddress> results = new ArrayList<>(5);, +, + buildRequest(hostname, networkRequests, results, failures, DnsRecordCodec.TYPE_A);, +, + if (includeIPv6) {, + buildRequest(hostname, networkRequests, results, failures, DnsRecordCodec.TYPE_AAAA);, + }, +, + executeRequests(hostname, networkRequests, results, failures);, +, + if (!results.isEmpty()) {, + return results;, + }, +, + return throwBestFailure(hostname, failures);, + }, +, + private void buildRequest(String hostname, List<Call> networkRequests, List<InetAddress> results,, + List<Exception> failures, int type) {, + Request request = buildRequest(hostname, type);, + Response response =
[+++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + // Ensure that the (shared) connection pool is in a consistent state., + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().idleConnectionCount());, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + // Ensure that the (shared) connection pool is in a consistent state., + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().idleConnectionCount());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // Ensure the test has released all connections., + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().connectionCount());, + @Test public void canRetryNormalRequestBody() throws Exception {, + server.enqueue(new MockResponse(), + .setResponseCode(503), + .setHeader("Retry-After", "0"), + .setBody("please retry"));, + server.enqueue(new MockResponse(), + .setBody("thank you for retrying"));, +, + Request request = new Request.Builder(), + .url(server.url("/")), +
[+++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, + 1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., + 2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, + 1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., + 2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, + <build>, + <plugins>, +
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +
[+++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, + client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, + client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, + client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + this(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, + client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java,
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, + @Test public void pingsTransmitted() throws Exception {, + // Ping every 500 ms, starting at 500 ms., + client = client.newBuilder(), + .pingInterval(500, TimeUnit.MILLISECONDS), + .build();, +, + // Delay the response to give 1 ping enough time to be sent and replied to., + server.enqueue(new MockResponse(), + .setBodyDelay(750, TimeUnit.MILLISECONDS), + .setBody("ABC"));, +, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + Response response = call.execute();, + assertEquals("ABC", response.body().string());, +, + assertEquals(Protocol.HTTP_2, response.protocol());, +, + // Confirm a single ping was sent and received, and its reply was sent and
[+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketRecorder.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + assertEquals(512f, i, 20f); // Halfway +/- 2%, +++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Headers okHeaders = extractOkResponseHeaders(httpUrlConnection);, + Headers okHeaders = extractOkHeaders(javaResponse);, + Headers headers = extractOkHeaders(requestHeaders);, + final Headers headers = response.headers();, + private static Headers extractOkHeaders(CacheResponse javaResponse) throws IOException {, + return extractOkHeaders(javaResponseHeaders);, + private static
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, + @Test public void readSettingsFrameExperimentalId() throws IOException {, + writeMedium(frame, 6); // 2 for the code and 4 for the value, + frame.writeByte(Http2.TYPE_SETTINGS);, + frame.writeByte(Http2.FLAG_NONE);, + frame.writeInt(0); // Settings are always on the connection stream 0., + frame.write(ByteString.decodeHex("f000")); // Id reserved for experimental use., + frame.writeInt(1);, +, + reader.nextFrame(false, new BaseTestHandler() {, + @Override public void settings(boolean clearPrevious, Settings settings) {, + // no-op, + }, + });, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, + @Test public void readSettingsFrameExperimentalId() throws IOException {, + writeMedium(frame, 6); // 2 for the code and 4
[+++ /dev/null, +++ /dev/null, +++ b/pom.xml]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + private static final int CLIENT_AUTH_NONE = 0;, + private static final int CLIENT_AUTH_REQUESTED = 1;, + private static final int CLIENT_AUTH_REQUIRED = 2;, +, + private int clientAuth = CLIENT_AUTH_NONE;, + * Configure the server to not perform SSL authentication of the client. This leaves, + * authentication to another layer such as in an HTTP cookie or header. This is the default and, + * most common configuration., + */, + public void noClientAuth() {, + this.clientAuth = CLIENT_AUTH_NONE;, + }, +, + /**, + * Configure the server to {@linkplain SSLSocket#setWantClientAuth want client auth}.
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.net.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.net.http.HttpsURLConnectionImpl;, + return new HttpURLConnectionImpl(url, 80, proxy);, + return new HttpsURLConnectionImpl(url, 443, proxy);, +++ b/pom.xml, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.net.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.net.http.HttpsURLConnectionImpl;, + return new HttpURLConnectionImpl(url, 80, proxy);, + return new HttpsURLConnectionImpl(url, 443, proxy);, +++ b/src/main/java/com/squareup/okhttp/internal/Platform.java, +/*, + * Copyright (C) 2012 Square, Inc., + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import org.junit.Rule;, +import org.junit.rules.Timeout;, + @Rule public MockWebServer mockWebServer = new MockWebServer();, + @Rule public Timeout globalTimeout = Timeout.seconds(30);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import org.junit.Rule;, +import org.junit.rules.Timeout;, + @Rule public MockWebServer mockWebServer = new MockWebServer();, + @Rule public Timeout globalTimeout = Timeout.seconds(30);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.rules.Timeout;, + @Rule public Timeout globalTimeout = Timeout.seconds(30);, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import org.junit.Rule;, +import org.junit.rules.Timeout;, + @Rule public MockWebServer mockWebServer = new MockWebServer();, + @Rule public Timeout globalTimeout = Timeout.seconds(30);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.rules.Timeout;, + @Rule public Timeout globalTimeout = Timeout.seconds(30);, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import org.junit.Rule;, +import org.junit.rules.Timeout;, + @Rule public Timeout globalTimeout =
[+++ b/build.gradle, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java, +++ b/okhttp/src/test/java/okhttp3/MediaTypeTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java, + synchronized (connection) { // Multiple application threads may hit this section., + connection.unacknowledgedBytesRead += read;, + if (connection.unacknowledgedBytesRead, + >= connection.okHttpSettings.getInitialWindowSize() / 2) {, + connection.writeWindowUpdateLater(0, connection.unacknowledgedBytesRead);, + connection.unacknowledgedBytesRead = 0;, + }, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java, + synchronized (connection) { // Multiple application threads may hit this section., + connection.unacknowledgedBytesRead += read;, + if (connection.unacknowledgedBytesRead, + >= connection.okHttpSettings.getInitialWindowSize() / 2) {, + connection.writeWindowUpdateLater(0, connection.unacknowledgedBytesRead);, + connection.unacknowledgedBytesRead = 0;, + },
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, + private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, + private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, + private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, + try {, + call.execute();, + fail();, + } catch (IllegalStateException expected) {, + assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, + try {, + call.execute();, + fail();, + } catch (IllegalStateException expected) {, + assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, + try {, + call.execute();, + fail();, + } catch (IllegalStateException expected) {, + assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, + try {, + call.execute();, + fail();, + }
[+++ b/build.gradle, + id 'me.champeau.gradle.japicmp' version '0.2.6', +, +/**, + * Returns a .jar file for the golden version of this project., + * https://github.com/Visistema/Groovy1/blob/ba5eb9b2f19ca0cc8927359ce414c4e1974b7016/gradle/binarycompatibility.gradle#L48, + */, +ext.baselineJar = { project, version ->, + def group = project.property("GROUP"), + def artifactId = project.property("POM_ARTIFACT_ID"), + try {, + String jarFile = "$artifactId-${version}.jar", + project.group = 'virtual_group_for_japicmp' // Prevent it from resolving the current version., + def dependency = project.dependencies.create("$group:$artifactId:$version@jar"), + return project.configurations.detachedConfiguration(dependency).files, + .find { (it.name == jarFile) }, + } finally {, + project.group = group, + }, +}, +ext.baselineVersion = "3.14.0", +++ b/build.gradle, + id 'me.champeau.gradle.japicmp' version '0.2.6',
[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import java.net.HttpCookie;, +import java.util.ArrayList;, +import java.util.Arrays;, + public void assertCookies(HttpUrl url, String... expectedCookies) throws Exception {, + List<String> actualCookies = new ArrayList<>();, + for (HttpCookie cookie : cookieManager.getCookieStore().get(url.uri())) {, + actualCookies.add(cookie.toString());, + }, + assertEquals(Arrays.asList(expectedCookies), actualCookies);, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import java.net.HttpCookie;, +import java.util.ArrayList;, +import java.util.Arrays;, + public void assertCookies(HttpUrl url, String... expectedCookies) throws Exception {, + List<String> actualCookies = new ArrayList<>();, + for (HttpCookie cookie : cookieManager.getCookieStore().get(url.uri())) {, + actualCookies.add(cookie.toString());, + }, + assertEquals(Arrays.asList(expectedCookies), actualCookies);, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + executeSynchronously("/").assertFailure(IOException.class);, + @Test public void requestHeaderNameWithSpaceForbidden() throws Exception
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(String path, AtomicInteger responseCode) {, + return new Thread(() -> {, + URL url = mockWebServer.url(path).url();, + HttpURLConnection conn;, + } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(String path, AtomicInteger responseCode) {, + return new Thread(() -> {, + URL url = mockWebServer.url(path).url();, + HttpURLConnection conn;, + } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + new Thread(() -> {, + }).start();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(String path, AtomicInteger responseCode) {, + return new Thread(() -> {, + URL url = mockWebServer.url(path).url();, + HttpURLConnection conn;, + } catch (IOException ignored) {,
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, + return new Thread(new Runnable() {, + @Override public void run() {, + final URL url = mockWebServer.url(path).url();, + final HttpURLConnection conn;, + } catch (IOException e) {, + }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, + return new Thread(new Runnable() {, + @Override public void run() {, + final URL url = mockWebServer.url(path).url();, + final HttpURLConnection conn;, + } catch (IOException e) {, + }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + new Thread() {, + @Override public void run() {, + }, +
[+++ b/okhttp-apache/pom.xml, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.google.mockwebserver</groupId>, + <artifactId>mockwebserver</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-apache/pom.xml, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.google.mockwebserver</groupId>, + <artifactId>mockwebserver</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +package com.squareup.okhttp.apache;, +, +import com.google.mockwebserver.MockResponse;, +import com.google.mockwebserver.MockWebServer;, +import java.io.IOException;, +import org.apache.http.Header;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.util.EntityUtils;, +import org.junit.After;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class OkApacheClientTest {, + private MockWebServer server = new MockWebServer();, + private OkApacheClient client = new OkApacheClient();, +, + @After public void tearDown() throws
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, + ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, + ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, + HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, + ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, + HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, + ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, + HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, + UrlConnectionRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, + ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, + HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, + UrlConnectionRequest(HttpUrl url) {, +++ b/checkstyle.xml, + "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + framedConnection.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + return null;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + framedConnection.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + return null;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Ignore("currently broken"), +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + framedConnection.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + return null;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Ignore("currently broken"), +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, + .pushObserver(observer), + .build();, + connection.start(false);, + connection.start(false);, + FramedConnection connection = connectionBuilder(peer, HTTP_2), + .pushObserver(PushObserver.CANCEL), + .build();, + connection.start(false);, + connection.start(false);, + FramedConnection connection = connectionBuilder(peer, variant).build();, + connection.start(false);, + return connection;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Buffer buffer = source.getBuffer();, + try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Buffer buffer = source.getBuffer();, + try
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, + private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, + private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, + private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, + private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, + private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, + private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + * The sockets and streams of an HTTP, HTTPS, or HTTPS+SPDY connection. May be, + * used for multiple HTTP
[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Base64.java, +/*, + * Licensed to the Apache Software Foundation (ASF) under one or more, + * contributor license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright ownership., + * The ASF licenses this file to You under the Apache License, Version 2.0, + * (the "License"); you may not use this file except in compliance with, + * the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software,
[+++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java, +import okhttp3.internal.http2.Header;, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java, +import okhttp3.internal.http2.Header;, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static okhttp3.internal.Util.indexOf;, + if (isFallback && indexOf(sslSocket.getSupportedCipherSuites(), "TLS_FALLBACK_SCSV") != -1) {, + if (indexOf(b, toFind) != -1) {, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java, +import okhttp3.internal.http2.Header;, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static okhttp3.internal.Util.indexOf;, + if (isFallback && indexOf(sslSocket.getSupportedCipherSuites(), "TLS_FALLBACK_SCSV") != -1) {, + if (indexOf(b, toFind) != -1) {, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +
[+++ b/pom.xml, + <mockwebserver.version>20130505</mockwebserver.version>]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + static
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, + @Test public void pingsTransmitted() throws Exception {, + // Ping every 500 ms, starting at 500 ms., + client = client.newBuilder(), + .pingInterval(500, TimeUnit.MILLISECONDS), + .build();, +, + // Delay the response to give 1 ping enough time to be sent and replied to., + server.enqueue(new MockResponse(), + .setBodyDelay(750, TimeUnit.MILLISECONDS), + .setBody("ABC"));, +, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + Response response = call.execute();, + assertEquals("ABC", response.body().string());, +, + assertEquals(Protocol.HTTP_2, response.protocol());, +, + // Confirm a single ping was sent and received, and its reply was sent and
[+++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, + assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, + assertEquals(-1, in.read());, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, + assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, + assertEquals(-1, in.read());, +++ /dev/null, +++ b/mockwebserver/README.md, + URL baseUrl =
[+++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, + HTTP to HTTPS., +, +, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, + HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, + HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that
[+++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/samples/guide/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, + // Wait until the server has completely filled the stream and connection flow-control windows., + int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, + int dataFrameCount = 0;, + while (dataFrameCount < expectedFrameCount) {, + String log = http2Handler.take();, + if (log.equals("FINE: << 0x00000003 16384 DATA ")) {, + dataFrameCount++;, + }, + }, + // Wait until the server has completely filled the stream and connection flow-control windows., + int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, + int dataFrameCount = 0;, + while (dataFrameCount < expectedFrameCount) {, + String log = http2Handler.take();, + if (log.equals("FINE: << 0x00000003 16384
[+++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, + call.get().cancel();, + call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, + call.get().cancel();, + call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + return ((RealCall) call).streamAllocation();, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, + call.get().cancel();, + call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + return ((RealCall) call).streamAllocation();, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.CallServerInterceptor;, +import okhttp3.internal.http.RetryAndFollowUpInterceptor;, + private final RetryAndFollowUpInterceptor retryAndFollowUpInterceptor;, + this.retryAndFollowUpInterceptor = new RetryAndFollowUpInterceptor(client);, + this.retryAndFollowUpInterceptor.setForWebSocket(true);, + retryAndFollowUpInterceptor.cancel();, + return retryAndFollowUpInterceptor.isCanceled();, + }, +, + StreamAllocation streamAllocation() {, + return retryAndFollowUpInterceptor.streamAllocation();, + if (retryAndFollowUpInterceptor.isCanceled()) {, + String string = retryAndFollowUpInterceptor.isCanceled() ? "canceled call" : "call";, + interceptors.add(retryAndFollowUpInterceptor);, + if (!retryAndFollowUpInterceptor.isForWebSocket()) {, + interceptors.add(new CallServerInterceptor(, + retryAndFollowUpInterceptor.isForWebSocket()));, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, + call.get().cancel();, + call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + return ((RealCall)
[+++ b/okhttp-android-support/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>2.3.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp-android-support</artifactId>, + <name>OkHttp Android Platform Support</name>, + <description>Classes to support the Android platform's use of OkHttp (not required for most developers).</description>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${project.version}</version>, + </dependency>, + , + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-javadoc-plugin</artifactId>, + <configuration>,
[+++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, + // While MockWebServer waits to read the client's HEADERS frame before sending the response, it, + // doesn't wait to read the client's DATA frame and may send a DATA frame before the client, + // does. So we can't assume the client's empty DATA will be logged first., + assertThat(countFrames(logs, "FINE: >> 0x00000003 0 DATA END_STREAM")), + .isEqualTo((long) 2);, + assertThat(countFrames(logs, "FINE: >> 0x00000003 3 DATA ")), + .isEqualTo((long) 1);, +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, + // While MockWebServer waits to read the client's
[+++ b/okhttp-apache/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp-apache</artifactId>, + <name>OkHttp Apache HttpClient</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>org.apache.httpcomponents</groupId>, + <artifactId>httpclient</artifactId>, + <scope>provided</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/okhttp-apache/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp-apache</artifactId>, + <name>OkHttp Apache HttpClient</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <version>${project.version}</version>,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE) && protocols.size() > 1) {, + // when using h2_prior_knowledge, no other protocol should be supported., + throw new IllegalArgumentException(, + "protocols containing h2_prior_knowledge cannot use other protocols: " + protocols);, + } else if (!protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE), + && !protocols.contains(Protocol.HTTP_1_1)) {, + } else if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE)) {, + protocol = Protocol.H2_PRIOR_KNOWLEDGE;, + if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, + } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE) && protocols.size() > 1) {, + // when using h2_prior_knowledge, no other protocol should be supported., +
[+++ b/okhttp/build.gradle, + 'okhttp3.ConnectionSpec#cipherSuites()',, + 'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, + 'okhttp3.ConnectionSpec#isTls()',, + 'okhttp3.ConnectionSpec#supportsTlsExtensions()',, + 'okhttp3.ConnectionSpec#tlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#build()',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ b/okhttp/build.gradle, + 'okhttp3.ConnectionSpec#cipherSuites()',, + 'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, + 'okhttp3.ConnectionSpec#isTls()',, + 'okhttp3.ConnectionSpec#supportsTlsExtensions()',, + 'okhttp3.ConnectionSpec#tlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#build()',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.kt, +++ b/okhttp/build.gradle, + 'okhttp3.ConnectionSpec#cipherSuites()',, + 'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, + 'okhttp3.ConnectionSpec#isTls()',, + 'okhttp3.ConnectionSpec#supportsTlsExtensions()',, + 'okhttp3.ConnectionSpec#tlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#build()',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.kt, +++ /dev/null, +++ b/okhttp/build.gradle, + 'okhttp3.ConnectionSpec#cipherSuites()',, + 'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, + 'okhttp3.ConnectionSpec#isTls()',, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + boolean expectContinue = false;, + expectContinue = true;, + if (expectContinue && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, + if (contentLength != -1) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + boolean expectContinue = false;, + expectContinue = true;, + if (expectContinue && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, + if (contentLength != -1) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.nio.charset.StandardCharsets;, +, + @Test public void http100Continue() throws Exception {, + server.enqueue(new MockResponse().setBody("response"));, +, + URL url = server.url("/").url();, + HttpURLConnection connection = (HttpURLConnection) url.openConnection();, + connection.setDoOutput(true);, + connection.setRequestProperty("Expect", "100-Continue");, + connection.getOutputStream().write("request".getBytes(StandardCharsets.UTF_8));, +, + InputStream in = connection.getInputStream();, + BufferedReader reader = new BufferedReader(new InputStreamReader(in));, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/HeldCertificate.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, + throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, + throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, + throw new AssertionError("Invalid IPv6 address: '" + percentDecoded + "'");, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, + throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, + throw new AssertionError("Invalid IPv6 address: '" + percentDecoded + "'");, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import static okhttp3.internal.Util.assertionError;, + throw assertionError("No System TLS", e); // The system has no TLS. Just give up., + throw assertionError("No System TLS", e); // The system has no TLS. Just give up., +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, + throw new AssertionError("unsupported hashAlgorithm: "
[+++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull]
[+++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/samples/guide/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +
[+++ b/retrofit/src/test/java/retrofit2/ResponseTest.java, + @Test public void successWithNullHeadersThrows() {]
[+++ b/pom.xml, + <version>1.6.0</version>, + <tag>parent-1.6.0</tag>, +++ b/pom.xml, + <version>1.6.0</version>, + <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.0</version>, +++ b/pom.xml, + <version>1.6.0</version>, + <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.0</version>, +++ b/pom.xml, + <version>1.6.0</version>, + <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.0</version>, +++ b/pom.xml, + <version>1.6.0</version>, + <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.6.0</version>, +++ b/pom.xml, + <version>1.6.0</version>, + <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.6.0</version>, +++ b/pom.xml, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.7.0-SNAPSHOT</version>, + <name>HTTP</name>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.7.0-SNAPSHOT</version>, + <name>HTTP</name>, +++ b/http/src/main/java/retrofit/http/Fetcher.java, +import static retrofit.internal.Objects.nonNull;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.7.0-SNAPSHOT</version>, + <name>HTTP</name>, +++ b/http/src/main/java/retrofit/http/Fetcher.java, +import static retrofit.internal.Objects.nonNull;, +++ b/io/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.7.0-SNAPSHOT</version>, + <name>I/O</name>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance",
[+++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import java.util.concurrent.Executor;, + private final Executor httpExecutor;, + httpExecutor = restAdapter.httpExecutor;, + @Override public void call(final Subscriber<? super Object> subscriber) {, + if (subscriber.isUnsubscribed()) return;, + httpExecutor.execute(new Runnable() {, + @Override public void run() {, + if (subscriber.isUnsubscribed()) return;, + });, + }, + });, +++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import java.util.concurrent.Executor;, + private final Executor httpExecutor;, + httpExecutor = restAdapter.httpExecutor;, + @Override public void call(final Subscriber<? super Object> subscriber) {, + if (subscriber.isUnsubscribed()) return;, + httpExecutor.execute(new Runnable() {, + @Override public void run() {, + if (subscriber.isUnsubscribed())
[+++ b/pom.xml, + <consoleOutput>true</consoleOutput>]
[+++ b/retrofit-adapters/guava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit2</groupId>, + <artifactId>retrofit-adapters</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>adapter-guava</artifactId>, + <name>Adapter: Guava</name>, +, + <dependencies>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>mockwebserver</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/retrofit-adapters/guava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +
[+++ b/retrofit-adapters/scala/pom.xml, + <Automatic-Module-Name>retrofit2.adapter.scala</Automatic-Module-Name>, +++ b/retrofit-adapters/scala/pom.xml, + <Automatic-Module-Name>retrofit2.adapter.scala</Automatic-Module-Name>, +++ b/retrofit-adapters/scala/src/main/java/retrofit2/adapter/scala/BodyCallAdapter.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + @Override, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + @Override, + public
[+++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android/pom.xml, + <version>0.6.0-rc3</version>, +++ b/core/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android/pom.xml, + <version>0.6.0-rc3</version>, +++ b/core/pom.xml, + <version>0.6.0-rc3</version>, +++ b/http/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android/pom.xml, + <version>0.6.0-rc3</version>, +++ b/core/pom.xml, + <version>0.6.0-rc3</version>, +++ b/http/pom.xml, + <version>0.6.0-rc3</version>, +++ b/io/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android/pom.xml, + <version>0.6.0-rc3</version>, +++ b/core/pom.xml, + <version>0.6.0-rc3</version>, +++ b/http/pom.xml, + <version>0.6.0-rc3</version>, +++ b/io/pom.xml, + <version>0.6.0-rc3</version>, +++ b/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android/pom.xml, + <version>0.6.0-rc3</version>, +++ b/core/pom.xml, + <version>0.6.0-rc3</version>, +++ b/http/pom.xml, +
[+++ b/pom.xml, + <version>1.6.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>1.6.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.6.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.6.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.6.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.6.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <exclusions>, + <exclusion>, + <groupId>commons-logging</groupId>, + <artifactId>commons-logging</artifactId>, + </exclusion>, + </exclusions>]
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + if (Utils.hasUnresolvableType(returnType)) {, + throw methodError(method,, + "Method return type must not include a type variable or wildcard: %s", returnType);, + }, + if (returnType == void.class) {, + throw methodError(method, "Service methods cannot return void.");, + }, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + if (Utils.hasUnresolvableType(returnType)) {, + throw methodError(method,, + "Method return type must not include a type variable or wildcard: %s", returnType);, + }, + if (returnType == void.class) {, + throw methodError(method, "Service methods cannot return void.");, + }, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + ExceptionCatchingResponseBody catchingBody = new ExceptionCatchingResponseBody(rawBody);, + static final class ExceptionCatchingResponseBody extends ResponseBody {, +
[+++ b/pom.xml, + <jackson.version>2.8.0</jackson.version>]
[+++ b/README.md, +++ b/README.md, +++ b/android/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>retrofit-http</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/README.md, +++ b/android/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>retrofit-http</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ b/README.md, +++ b/android/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>retrofit-http</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ /dev/null, +++ b/README.md, +++ b/android/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>retrofit-http</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ b/android/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>retrofit-http</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ /dev/null, +++ /dev/null, +++
[+++ b/pom.xml, + <okhttp.version>3.2.0</okhttp.version>, + <protobuf.version>2.6.1</protobuf.version>, + <jackson.version>2.7.2</jackson.version>, + <wire.version>2.1.1</wire.version>, + <guava.version>19.0</guava.version>]
[+++ b/pom.xml, + <scala.version>2.12.4</scala.version>, +++ b/pom.xml, + <scala.version>2.12.4</scala.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, + return adapter.read(jsonReader);, +++ b/pom.xml, + <scala.version>2.12.4</scala.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, + return adapter.read(jsonReader);, +++ b/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java]
[+++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="ProjectCodeStyleSettingsManager">, + <option name="PER_PROJECT_SETTINGS">, + <value />, + </option>, + </component>, +</project>, +, +++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="ProjectCodeStyleSettingsManager">, + <option name="PER_PROJECT_SETTINGS">, + <value />, + </option>, + </component>, +</project>, +, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="ProjectCodeStyleSettingsManager">, + <option name="PER_PROJECT_SETTINGS">, + <value />, + </option>, + </component>, +</project>, +, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +import static org.easymock.EasyMock.capture;, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.expect;, +import static org.easymock.EasyMock.expectLastCall;, +import static org.easymock.EasyMock.isA;, +import static org.easymock.EasyMock.replay;, +import static org.easymock.EasyMock.verify;]
[+++ b/pom.xml, + <jaxb.version>2.2.12</jaxb.version><!-- 2.3.0 breaks due to https://github.com/mojohaus/animal-sniffer/issues/29 -->, + <groupId>javax.xml.bind</groupId>, + <artifactId>jaxb-api</artifactId>, + <version>${jaxb.version}</version>, + </dependency>, + <dependency>, +++ b/pom.xml, + <jaxb.version>2.2.12</jaxb.version><!-- 2.3.0 breaks due to https://github.com/mojohaus/animal-sniffer/issues/29 -->, + <groupId>javax.xml.bind</groupId>, + <artifactId>jaxb-api</artifactId>, + <version>${jaxb.version}</version>, + </dependency>, + <dependency>, +++ b/retrofit-converters/jaxb/README.md, +JAXB Converter, +==============, +, +A `Converter` which uses [JAXB][1] for serialization to and from XML., +, +A default `JAXBContext` instance will be created or one can be configured and passed, +to `JaxbConverterFactory.create()` to further control the serialization., +, +, +Download, +--------, +, +Download [the latest JAR][2] or grab via [Maven][3]:, +```xml, +<dependency>, + <groupId>com.squareup.retrofit2</groupId>, + <artifactId>converter-jaxb</artifactId>, +
[+++ b/.idea/vcs.xml, + <mapping directory="" vcs="Git" />, +++ b/.idea/vcs.xml, + <mapping directory="" vcs="Git" />, +++ b/modules/io/src/retrofit/io/Files.java, +, + /**, + * Create the indicated directory, if it doesn't already exist., + *, + * @throws IllegalStateException if there is an error creating the directory., + * @throws IllegalArgumentException if param represents a file instead, + * of a directory., + */, + public static void makeDirectory(File directory) {, + if (!directory.exists()) {, + if (!directory.mkdirs()) {, + throw new IllegalStateException("Error creating " + directory + ".");, + }, + } else {, + if (!directory.isDirectory()) {, + throw new
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ b/retrofit-adapters/java8/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit2</groupId>, + <artifactId>retrofit-adapters</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>adapter-java8</artifactId>, + <name>Adapter: Java 8</name>, +, + <properties>, + <java.version>1.8</java.version>, + </properties>, +, + <dependencies>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +
[+++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, + private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, + if (objectMapper == null) throw new NullPointerException("objectMapper == null");, + @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, + InputStream is = body.byteStream();, + return objectMapper.readValue(is, javaType);, + is.close();, + @Override public RequestBody toBody(Object object, Type type) {, + return RequestBody.create(MEDIA_TYPE, json);, + throw new RuntimeException(e);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, + private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, + if (objectMapper == null) throw new NullPointerException("objectMapper == null");, + @Override public Object fromBody(ResponseBody body,
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/OperatorMapResponseToBodyOrError.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/pom.xml, + <wire.version>1.2.0</wire.version>, + <guava.version>15.0</guava.version>, +++ b/pom.xml, + <wire.version>1.2.0</wire.version>, + <guava.version>15.0</guava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, + * public class UserService {]
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, + @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, + @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final @Nullable Object[] args;, + OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, + @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final @Nullable Object[] args;, + OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, + okhttp3.Request create(@Nullable Object[] args) throws IOException {, + int argumentCount = args != null ? args.length : 0;, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, + @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final @Nullable
[+++ b/retrofit/src/main/java/retrofit2/HttpException.java, +public class HttpException extends RuntimeException {]
[+++ b/pom.xml, + <okhttp.version>3.8.1</okhttp.version>, + <gson.version>2.8.0</gson.version>, + <moshi.version>1.5.0</moshi.version>]
[+++ b/pom.xml, + <appengine.version>1.8.9</appengine.version>, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + <version>${appengine.version}</version>, + </dependency>, +++ b/pom.xml, + <appengine.version>1.8.9</appengine.version>, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + <version>${appengine.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, +, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + <optional>true</optional>, + </dependency>, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-compiler-plugin</artifactId>, + <configuration>, + <!-- The AppEngine dependency has an annotation processor we don't want to run. -->, + <compilerArgument>-proc:none</compilerArgument>, + </configuration>, + </plugin>, + </plugins>, + </build>, +++ b/pom.xml, + <appengine.version>1.8.9</appengine.version>, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + <version>${appengine.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, +, + <dependency>, +
[+++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android/pom.xml, + <version>0.6.0-rc6</version>, +++ b/core/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android/pom.xml, + <version>0.6.0-rc6</version>, +++ b/core/pom.xml, + <version>0.6.0-rc6</version>, +++ b/http/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android/pom.xml, + <version>0.6.0-rc6</version>, +++ b/core/pom.xml, + <version>0.6.0-rc6</version>, +++ b/http/pom.xml, + <version>0.6.0-rc6</version>, +++ b/io/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android/pom.xml, + <version>0.6.0-rc6</version>, +++ b/core/pom.xml, + <version>0.6.0-rc6</version>, +++ b/http/pom.xml, + <version>0.6.0-rc6</version>, +++ b/io/pom.xml, + <version>0.6.0-rc6</version>, +++ b/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android/pom.xml, + <version>0.6.0-rc6</version>, +++ b/core/pom.xml, + <version>0.6.0-rc6</version>, +++ b/http/pom.xml, +
[+++ b/spring-boot-dependencies/pom.xml, + <spring-batch.version>4.0.0.M2</spring-batch.version>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, +
[+++ b/spring-boot-dependencies/pom.xml, + <gson.version>2.6.2</gson.version>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/SpringBootHypermediaApplication.java, +import org.springframework.lang.UsesJava8;, + @UsesJava8, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/SpringBootHypermediaApplication.java, +import org.springframework.lang.UsesJava8;, + @UsesJava8, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <artifactId>HikariCP-java6</artifactId>, + <groupId>org.crashub</groupId>, +
[+++ b/.bomr/bomr.yaml, + policy: same-major-version, + - project: maven-invoker-plugin, + # NPE in InstallMojo.installProjectPom (InstallMojo.java:387), + - '[3.2.0]', + # Spring Data GemFire's GemFire dependencies, + - 'https://repo.spring.io/gemstone-release-pivotal-cache', +++ b/.bomr/bomr.yaml, + policy: same-major-version, + - project: maven-invoker-plugin, + # NPE in InstallMojo.installProjectPom (InstallMojo.java:387), + - '[3.2.0]', + # Spring Data GemFire's GemFire dependencies, + - 'https://repo.spring.io/gemstone-release-pivotal-cache', +++ b/CONTRIBUTING.adoc, +=== Importing into IntelliJ IDEA, +To open the project in IntelliJ IDEA, select "`File`" -> "`Open`" and then click on the, +root `pom.xml`., +, +, +, +==== Install the Spring Formatter plugin, +If you haven't done so, install the formatter plugin
[+++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, + spring.main.banner-mode=console # the mode used to display the banner (console, off, or log), +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, + spring.main.banner-mode=console # the mode used to display the banner (console, off, or log), +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, + spring.main.banner_mode=off, + .bannerMode(Banner.Mode.OFF), + spring.main.banner_mode=console, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, + spring.main.banner-mode=console # the mode used to display the banner (console, off, or log), +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, + spring.main.banner_mode=off, + .bannerMode(Banner.Mode.OFF), + spring.main.banner_mode=console, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, + app.setBannerMode(Banner.Mode.OFF);, + .bannerMode(Banner.Mode.OFF), +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, + spring.main.banner-mode=console # the mode used to display the banner (console, off, or log), +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, + spring.main.banner_mode=off, + .bannerMode(Banner.Mode.OFF), + spring.main.banner_mode=console, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, + app.setBannerMode(Banner.Mode.OFF);, +
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <mariadb.version>2.2.2</mariadb.version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +🎁 Enhancement, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilterTests.java, + .getSlaBoundaries()).isNullOrEmpty();, + .getSlaBoundaries()).isNullOrEmpty();, + .getSlaBoundaries()).isNullOrEmpty();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilterTests.java, + .getSlaBoundaries()).isNullOrEmpty();, + .getSlaBoundaries()).isNullOrEmpty();, + .getSlaBoundaries()).isNullOrEmpty();, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <micrometer.version>1.0.3</micrometer.version>]
[+++ b/CODE_OF_CONDUCT.adoc, += Contributor Code of Conduct, +, +As contributors and maintainers of this project, and in the interest of fostering an open, +and welcoming community, we pledge to respect all people who contribute through reporting, +issues, posting feature requests, updating documentation, submitting pull requests or, +patches, and other activities., +, +We are committed to making participation in this project a harassment-free experience for, +everyone, regardless of level of experience, gender, gender identity and expression,, +sexual orientation, disability, personal appearance, body size, race, ethnicity, age,, +religion, or nationality., +, +Examples of unacceptable behavior by participants include:, +, +* The
[+++ b/spring-boot-dependencies/pom.xml, + <neo4j-ogm.version>3.0.0-RC1</neo4j-ogm.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <artemis.version>1.5.1</artemis.version>]
[+++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java, +++ /dev/null, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +
[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringBootJoranConfigurator.java, +import org.springframework.core.env.Environment;, + Environment environment = this.initializationContext.getEnvironment();, + rs.addRule(new ElementSelector("configuration/springProperty"),, + new SpringPropertyAction(environment));, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringBootJoranConfigurator.java, +import org.springframework.core.env.Environment;, + Environment environment = this.initializationContext.getEnvironment();, + rs.addRule(new ElementSelector("configuration/springProperty"),, + new SpringPropertyAction(environment));, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/README.adoc, += Spring Boot image:https://build.spring.io/plugins/servlet/buildStatusImage/BOOT-PUB["Build Status", link="https://build.spring.io/browse/BOOT-PUB"], +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q
[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + context.getBeanFactory().registerSingleton("springApplicationArguments",, + applicationArguments);, + context.getBeanFactory().registerSingleton("springBootBanner", printedBanner);, +, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + context.getBeanFactory().registerSingleton("springApplicationArguments",, + applicationArguments);, + context.getBeanFactory().registerSingleton("springBootBanner", printedBanner);, +, +++ /dev/null, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + context.getBeanFactory().registerSingleton("springApplicationArguments",, + applicationArguments);, + context.getBeanFactory().registerSingleton("springBootBanner", printedBanner);, +, +++ /dev/null, +++ b/spring-boot-project/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + context.getBeanFactory().registerSingleton("springApplicationArguments",, + applicationArguments);, + context.getBeanFactory().registerSingleton("springBootBanner", printedBanner);, +, +++ /dev/null, +++ b/spring-boot-project/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +++ b/spring-boot-project/spring-boot/src/main/resources/META-INF/spring.factories, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + context.getBeanFactory().registerSingleton("springApplicationArguments",, + applicationArguments);, + context.getBeanFactory().registerSingleton("springBootBanner", printedBanner);, +, +++ /dev/null, +++ b/spring-boot-project/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +++ b/spring-boot-project/spring-boot/src/main/resources/META-INF/spring.factories, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/OverrideSourcesTests.java, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + context.getBeanFactory().registerSingleton("springApplicationArguments",, + applicationArguments);, + context.getBeanFactory().registerSingleton("springBootBanner", printedBanner);, +, +++ /dev/null, +++ b/spring-boot-project/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +++
[+++ b/spring-boot-dependencies/pom.xml, + <version>2.6</version>]
[+++ b/spring-boot-samples/spring-boot-sample-reactive-oauth2-client/pom.xml, + <artifactId>spring-boot-starter-oauth2-client</artifactId>]
[+++ b/spring-boot-dependencies/pom.xml, + <spring-data-releasetrain.version>Dijkstra-SR1</spring-data-releasetrain.version>, + <spring-hateoas.version>0.14.0.RELEASE</spring-hateoas.version>]
[+++ b/.gitignore, +.factorypath, +++ b/.gitignore, +.factorypath, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +services:, + - mongodb, + - redis, +++ b/.gitignore, +.factorypath, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +services:, + - mongodb, + - redis, +++ b/CONTRIBUTING.adoc, +== Using GitHub issues, +, +We use GitHub issues to track bugs and enhancements. If you have a general usage question, +please ask on http://stackoverflow.com[Stack Overflow]. The Spring Boot team and the, +broader community monitor the http://stackoverflow.com/tags/spring-boot[`spring-boot`], +tag., +, +If you are reporting a bug, please help to speed up problem diagnosis by providing as much, +information as possible. Ideally, that would
[+++ b/spring-boot-samples/pom.xml]
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <lettuce.version>5.1.4.RELEASE</lettuce.version>]
[+++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>,
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, +
[+++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.VanillaPublicMetrics;, + private MetricReader metricRepository = new InMemoryMetricRepository();, + private PublicMetrics metrics;, + if (this.metrics == null) {, + this.metrics = new VanillaPublicMetrics(this.metricRepository);, + return new MetricsEndpoint(this.metrics);, + @Bean, + @ConditionalOnMissingBean, + public ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint() {, + ConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();, + endpoint.setConfigurationBeanFactoryMetaData(this.beanFactoryMetaData);, + return endpoint;, + }, +, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.VanillaPublicMetrics;, + private MetricReader metricRepository = new InMemoryMetricRepository();, + private PublicMetrics metrics;, + if (this.metrics
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <spring-kafka.version>2.1.6.BUILD-SNAPSHOT</spring-kafka.version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to
[+++ b/spring-boot-project/spring-boot-docs/pom.xml, + <groupId>com.googlecode.maven-download-plugin</groupId>, + <artifactId>download-maven-plugin</artifactId>, + <executions>, + <execution>, + <id>unpack-doc-resources</id>, + <phase>generate-resources</phase>, + <goals>, + <goal>wget</goal>, + </goals>, + <configuration>, + <url>https://repo.spring.io/release/io/spring/docresources/spring-doc-resources/${spring-doc-resources.version}/spring-doc-resources-${spring-doc-resources.version}.zip</url>, + <unpack>true</unpack>, + <outputDirectory>${refdocs.build.directory}</outputDirectory>, + </configuration>, + </execution>, + </executions>, + </plugin>, + <plugin>, +++ b/spring-boot-project/spring-boot-docs/pom.xml, + <groupId>com.googlecode.maven-download-plugin</groupId>, + <artifactId>download-maven-plugin</artifactId>, + <executions>, + <execution>, + <id>unpack-doc-resources</id>, + <phase>generate-resources</phase>, + <goals>, + <goal>wget</goal>, + </goals>, + <configuration>, + <url>https://repo.spring.io/release/io/spring/docresources/spring-doc-resources/${spring-doc-resources.version}/spring-doc-resources-${spring-doc-resources.version}.zip</url>, + <unpack>true</unpack>, + <outputDirectory>${refdocs.build.directory}</outputDirectory>, + </configuration>, + </execution>, + </executions>, + </plugin>, + <plugin>, +++ b/spring-boot-project/spring-boot-parent/pom.xml, + <spring-doc-resources.version>0.1.0.RELEASE</spring-doc-resources.version>, + <groupId>com.googlecode.maven-download-plugin</groupId>, + <artifactId>download-maven-plugin</artifactId>, + <version>1.4.1</version>, + </plugin>, + <plugin>]
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <micrometer.version>1.0.2</micrometer.version>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, +
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/spring-boot-dependencies/pom.xml, + <reactor.version>1.1.4.RELEASE</reactor.version>, + <reactor-spring.version>1.1.3.RELEASE</reactor-spring.version>, + <version>${reactor-spring.version}</version>, + <version>${reactor-spring.version}</version>, + <version>${reactor-spring.version}</version>, + <version>${reactor-spring.version}</version>]
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j spring-boot/stage-release, +$ fly -t spring trigger-job -j spring-boot/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <spring-data-releasetrain.version>Lovelace-RELEASE</spring-data-releasetrain.version>]
[+++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/README.adoc, +* If you are upgrading, read the https://github.com/spring-projects/spring-boot/wiki[release notes], + for upgrade instructions and "new and
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/,
[+++ b/.gitignore, +.factorypath, +++ b/.gitignore, +.factorypath, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +services:, + - mongodb, + - redis, +++ b/.gitignore, +.factorypath, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +services:, + - mongodb, + - redis, +++ b/CONTRIBUTING.adoc, +== Using GitHub issues, +, +We use GitHub issues to track bugs and enhancements. If you have a general usage question, +please ask on http://stackoverflow.com[Stack Overflow]. The Spring Boot team and the, +broader community monitor the http://stackoverflow.com/tags/spring-boot[`spring-boot`], +tag., +, +If you are reporting a bug, please help to speed up problem diagnosis by providing as much, +information as possible. Ideally, that would
[+++ b/CONTRIBUTING.adoc, +=== Importing into IntelliJ IDEA, +To open the project in IntelliJ IDEA, select "`File`" -> "`Open`" and then click on the, +root `pom.xml`., +, +, +, +==== Install the Spring Formatter plugin, +If you haven't done so, install the formatter plugin so that proper formatting rules are, +applied automatically when you reformat code in the IDE., +, +* Download the latest https://search.maven.org/search?q=g:io.spring.javaformat%20AND%20a:spring-javaformat-intellij-plugin[IntelliJ IDEA plugin]., +* Select "`IntelliJ IDEA`" -> "`Preferences`"., +* Select "`Plugins`"., +* Select the wheel and "`Install Plugin from Disk...`"., +* Select the jar file you've downloaded., +, +, +, +==== Import additional code style,
[+++ b/spring-boot-dependencies/pom.xml, + <jmustache.version>1.10</jmustache.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <version>2.19.1</version>, +++ b/spring-boot-dependencies/pom.xml, + <version>2.19.1</version>, +++ b/spring-boot-starters/spring-boot-starter-parent/pom.xml, + <artifactId>maven-failsafe-plugin</artifactId>, + <executions>, + <execution>, + <goals>, + <goal>integration-test</goal>, + <goal>verify</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, +++ b/spring-boot-dependencies/pom.xml, + <version>2.19.1</version>, +++ b/spring-boot-starters/spring-boot-starter-parent/pom.xml, + <artifactId>maven-failsafe-plugin</artifactId>, + <executions>, + <execution>, + <goals>, + <goal>integration-test</goal>, + <goal>verify</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/site/apt/usage.apt.vm, + You could also configure a more advanced setup to skip the integration tests when a specific property has, + been set:, +, +---, +<properties>, + <it.skip>false</it.skip>, +</properties>, +<build>, + <plugins>, + <plugin>,
[+++ b/spring-boot-dependencies/pom.xml, + <hikaricp.version>1.4.0</hikaricp.version>]
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <spring-integration.version>5.0.11.BUILD-SNAPSHOT</spring-integration.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <gson.version>2.8.1</gson.version>]
[+++ b/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-cli/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-cli/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-dependencies/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-cli/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-dependencies/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-docs/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-cli/pom.xml, +
[+++ b/README.md, +### Spring Bootstrap Actuator, +Spring Bootstrap Actuator uses auto-configuration features to decorate, +### Spring Bootstrap Starters, +Spring Bootstrap Starters are a set of convenient dependency, +++ b/README.md, +### Spring Bootstrap Actuator, +Spring Bootstrap Actuator uses auto-configuration features to decorate, +### Spring Bootstrap Starters, +Spring Bootstrap Starters are a set of convenient dependency, +++ b/spring-bootstrap-actuator/pom.xml, +++ b/README.md, +### Spring Bootstrap Actuator, +Spring Bootstrap Actuator uses auto-configuration features to decorate, +### Spring Bootstrap Starters, +Spring Bootstrap Starters are a set of convenient dependency, +++ b/spring-bootstrap-actuator/pom.xml, +++ b/spring-bootstrap-samples/pom.xml, + <module>spring-bootstrap-actuator-sample</module>, + <module>spring-bootstrap-batch-sample</module>, + <dependencyManagement>, + <dependencies>, + <dependency>, + <groupId>org.springframework</groupId>,
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, + <groupId>io.micrometer</groupId>, + <artifactId>micrometer-registry-wavefront</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, + <groupId>io.micrometer</groupId>, + <artifactId>micrometer-registry-wavefront</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/wavefront/WavefrontMetricsExportAutoConfiguration.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +🎁 Enhancement, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j spring-boot/stage-release, +$ fly -t spring trigger-job -j spring-boot/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t
[+++ b/spring-boot-dependencies/pom.xml, + <spring-ws.version>2.3.0.RELEASE</spring-ws.version>, + <artifactId>spring-boot-starter-ws</artifactId>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, +++ b/spring-boot-dependencies/pom.xml, + <spring-ws.version>2.3.0.RELEASE</spring-ws.version>, + <artifactId>spring-boot-starter-ws</artifactId>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, +++ b/spring-boot-docs/pom.xml, + <spring-webservices-docs-version>${spring-ws.version}</spring-webservices-docs-version>, +++ b/spring-boot-dependencies/pom.xml, + <spring-ws.version>2.3.0.RELEASE</spring-ws.version>, + <artifactId>spring-boot-starter-ws</artifactId>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, +++ b/spring-boot-docs/pom.xml, + <spring-webservices-docs-version>${spring-ws.version}</spring-webservices-docs-version>, +++ b/spring-boot-samples/spring-boot-sample-webservices/pom.xml, + <artifactId>spring-boot-starter-ws</artifactId>, +++ b/spring-boot-dependencies/pom.xml, + <spring-ws.version>2.3.0.RELEASE</spring-ws.version>, + <artifactId>spring-boot-starter-ws</artifactId>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, +++ b/spring-boot-docs/pom.xml, + <spring-webservices-docs-version>${spring-ws.version}</spring-webservices-docs-version>, +++ b/spring-boot-samples/spring-boot-sample-webservices/pom.xml, + <artifactId>spring-boot-starter-ws</artifactId>, +++ b/spring-boot-starters/pom.xml, + <module>spring-boot-starter-ws</module>, +++ b/spring-boot-dependencies/pom.xml, + <spring-ws.version>2.3.0.RELEASE</spring-ws.version>, + <artifactId>spring-boot-starter-ws</artifactId>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, + <version>${spring-ws.version}</version>, +++ b/spring-boot-docs/pom.xml, + <spring-webservices-docs-version>${spring-ws.version}</spring-webservices-docs-version>, +++
[+++ b/spring-boot-dependencies/pom.xml, + <spring.version>4.2.1.BUILD-SNAPSHOT</spring.version>]
[+++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, + private PublicMetrics metrics;, + if (this.metrics == null) {, + this.metrics = new VanillaPublicMetrics(this.metricRepository);, + }, + return new MetricsEndpoint(this.metrics);, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, + private PublicMetrics metrics;, + if (this.metrics == null) {, + this.metrics = new VanillaPublicMetrics(this.metricRepository);, + }, + return new MetricsEndpoint(this.metrics);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + healthMvcEndpoint.setStatusMapping(this.healthMvcEndpointProperties, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, + private PublicMetrics metrics;, + if (this.metrics == null) {, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +http://www.springsource.com/developer/sts[Spring Tools Suite] or, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +http://www.springsource.com/developer/sts[Spring Tools Suite] or, +++ b/README.adoc, +* Ask a questions - we monitor http://stackoverflow.com[stackoverflow.com] for questions, +before your first change however trivial. (Or if you filed such an agreement already for, +The reference documentation requires the documentation
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests until you are ready, +to submit a pull request:, + $ ./mvnw clean install -DskipTests, +++ b/.settings-template.xml, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests until you are ready, +to submit a pull request:, + $ ./mvnw clean install -DskipTests, +++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param
[+++ b/spring-boot-tools/spring-boot-loader-tools/pom.xml, +++ b/spring-boot-tools/spring-boot-loader-tools/pom.xml, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j
[+++ b/.github/ISSUE_TEMPLATE.md, +<!--, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +, +Question, +, +Please ask questions about how to use something, or to understand why something isn't, +working as you expect it to, on Stack Overflow using the spring-boot tag., +, +Bug report, +, +Please provide details of the problem, including the version of Spring Boot that you, +are using. If possible, please provide a test case or sample application that reproduces, +the problem. This makes it much easier for us to diagnose the problem and to verify that, +we have fixed
[+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java, + * Copyright 2012-2018 the original author or authors.]
[+++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java, + * Copyright 2013-2015 the original author or authors., + logger.info("\n\nUsing default password for shell access: ", + + this.user.getPassword() + "\n\n");, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidatorTests.java, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidatorTests.java, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfigurationTests.java, + assertThat(bean).hasFieldOrPropertyWithValue("basePath", "/test/actuator");, + assertThat(bean).hasFieldOrPropertyWithValue("basePath", "/actuator");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidatorTests.java, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfigurationTests.java, + assertThat(bean).hasFieldOrPropertyWithValue("basePath", "/test/actuator");, + assertThat(bean).hasFieldOrPropertyWithValue("basePath", "/actuator");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java, + assertThat(rabbitTemplate).hasFieldOrPropertyWithValue("queue",, + "default-queue");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidatorTests.java, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, + assertThat(this.tokenValidator).hasFieldOrPropertyWithValue("cachedTokenKeys",, + VALID_KEYS);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfigurationTests.java, + assertThat(bean).hasFieldOrPropertyWithValue("basePath", "/test/actuator");,
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target,
[+++ b/.gitignore, +.factorypath, +++ b/.gitignore, +.factorypath, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.factorypath, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.mvn/wrapper/maven-wrapper.jar, +++ b/.gitignore, +.factorypath, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.mvn/wrapper/maven-wrapper.jar, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.gitignore, +.factorypath, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.mvn/wrapper/maven-wrapper.jar, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.travis.yml, +services:, + - mongodb, + - redis, +++ b/.gitignore, +.factorypath, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.mvn/wrapper/maven-wrapper.jar, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.travis.yml, +services:, + - mongodb, + - redis, +++ b/CONTRIBUTING.adoc, +== Using GitHub issues, +We use GitHub issues to track bugs and enhancements. If you have a general usage question, +please ask on http://stackoverflow.com[Stack Overflow]. The Spring Boot team
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +
[+++ b/spring-boot-cli/src/main/assembly/descriptor.xml, + <include>org.springframework.boot:spring-boot-cli:jar:*</include>]
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationMetadata.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>,
[+++ b/spring-boot-samples/spring-boot-sample-web-secure/pom.xml, + <groupId>org.apache.httpcomponents</groupId>, + <artifactId>httpclient</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/spring-boot-samples/spring-boot-sample-web-secure/pom.xml, + <groupId>org.apache.httpcomponents</groupId>, + <artifactId>httpclient</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleWebSecureApplication.java, +++ b/spring-boot-samples/spring-boot-sample-web-secure/pom.xml, + <groupId>org.apache.httpcomponents</groupId>, + <artifactId>httpclient</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleWebSecureApplication.java, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/resources/templates/login.html, + th:name="${_csrf.parameterName}" th:value="${_csrf.token}"/>, +++ b/spring-boot-samples/spring-boot-sample-web-secure/pom.xml, + <groupId>org.apache.httpcomponents</groupId>, + <artifactId>httpclient</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleWebSecureApplication.java, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/resources/templates/login.html, + th:name="${_csrf.parameterName}" th:value="${_csrf.token}"/>, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/test/java/sample/ui/secure/SampleSecureApplicationTests.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +@IntegrationTest("server.port:0"), + assertEquals(HttpStatus.FOUND, entity.getStatusCode());, + assertTrue("Wrong location:\n" + entity.getHeaders(),, + entity.getHeaders().getLocation().toString().endsWith(port + "/login"));, + HttpHeaders headers = getHeaders();, + private HttpHeaders getHeaders() {, + HttpHeaders headers = new HttpHeaders();,
[+++ b/spring-boot-dependencies/pom.xml, + <artifactId>selenium-chrome-driver</artifactId>, + <version>${selenium.version}</version>, + </dependency>, + <dependency>, + <groupId>org.seleniumhq.selenium</groupId>, + <artifactId>selenium-firefox-driver</artifactId>, + <version>${selenium.version}</version>, + </dependency>, + <dependency>, + <groupId>org.seleniumhq.selenium</groupId>, + <artifactId>selenium-ie-driver</artifactId>, + <version>${selenium.version}</version>, + </dependency>, + <dependency>, + <groupId>org.seleniumhq.selenium</groupId>, + <artifactId>selenium-safari-driver</artifactId>, + <version>${selenium.version}</version>, + </dependency>, + <dependency>, + <groupId>org.seleniumhq.selenium</groupId>]
[+++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;, +import org.springframework.boot.actuate.endpoint.SystemPublicMetrics;, + * @author Stephane Nicoll, + private MetricReader metricReader = new InMemoryMetricRepository();, + private Collection<PublicMetrics> publicMetrics;, + List<PublicMetrics> publicMetrics = new ArrayList<PublicMetrics>();, + publicMetrics.add(new SystemPublicMetrics());, + publicMetrics.add(new MetricReaderPublicMetrics(this.metricReader));, + if (this.publicMetrics != null) {, + publicMetrics.addAll(this.publicMetrics);, + return new MetricsEndpoint(publicMetrics);, + @Bean, + @ConditionalOnMissingBean, + public ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint() {, + ConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();, + endpoint.setConfigurationBeanFactoryMetaData(this.beanFactoryMetaData);, + return endpoint;, + }, +, +++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>,
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>neo4j-snapshots</id>, + <url>http://m2.neo4j.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>neo4j-snapshots</id>, + <url>http://m2.neo4j.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, +
[+++ b/spring-boot-samples/spring-boot-sample-actuator/pom.xml, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter-jetty</artifactId>, +++ b/spring-boot-samples/spring-boot-sample-actuator/pom.xml, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter-jetty</artifactId>, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +import org.apache.catalina.startup.TldConfig;, + private static String DEFAULT_NO_TLD_JARS = "tomcat-*.jar,tools.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,", + + "commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,", + + "commons-logging*.jar,commons-math*.jar,commons-pool*.jar,jstl-*.jar,geronimo-spec-jaxrpc*.jar,wsdl4j*.jar,ant-*.jar,", + + "aspectj*.jar,jmx.jar,h2*.jar,hibernate*.jar,httpclient*.jar,jmx-tools-*.jar,jta*.jar,log4j-*.jar,mail*.jar,slf4j*.jar,", + + "xercesImpl-*.jar,xmlParserAPIs-*.jar,xml-apis-*.jar,junit-*.jar,hamcrest*.jar,org.hamcrest*.jar";, +, + private String noTldJars = DEFAULT_NO_TLD_JARS;, +, + TldConfig.setNoTldJars(this.noTldJars);, + * A comma-separated list of jars to ignore for TLD scanning. See Tomcat's, + * catalina.properties for typical values. Defaults to a list drawn from that source., + * , + * @param noTldJars the noTldJars to set, + */, + public void setNoTldJars(String noTldJars) {, + this.noTldJars = noTldJars;, + }, +,
[+++ b/eclipse/eclipse-code-formatter.xml, +<profiles version="13">, + <setting id="org.eclipse.jdt.core.formatter.parentheses_positions_in_for_statment" value="common_lines"/>, + <setting id="org.eclipse.jdt.core.formatter.parentheses_positions_in_method_invocation" value="common_lines"/>, + <setting id="org.eclipse.jdt.core.formatter.parentheses_positions_in_switch_statement" value="common_lines"/>, + <setting id="org.eclipse.jdt.core.formatter.parentheses_positions_in_enum_constant_declaration" value="common_lines"/>, + <setting id="org.eclipse.jdt.core.formatter.parentheses_positions_in_if_while_statement" value="common_lines"/>, + <setting id="org.eclipse.jdt.core.formatter.comment.count_line_length_from_starting_position" value="false"/>, + <setting id="org.eclipse.jdt.core.formatter.alignment_for_parameterized_type_references" value="0"/>, + <setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_enum_constant" value="insert"/>, + <setting id="org.eclipse.jdt.core.formatter.parentheses_positions_in_catch_clause" value="common_lines"/>, + <setting id="org.eclipse.jdt.core.formatter.alignment_for_type_parameters" value="0"/>, + <setting id="org.eclipse.jdt.core.formatter.parentheses_positions_in_annotation" value="common_lines"/>, + <setting id="org.eclipse.jdt.core.formatter.alignment_for_module_statements" value="16"/>, + <setting id="org.eclipse.jdt.core.formatter.alignment_for_conditional_expression" value="16"/>, + <setting id="org.eclipse.jdt.core.formatter.wrap_before_conditional_operator" value="true"/>, + <setting id="org.eclipse.jdt.core.formatter.align_fields_grouping_blank_lines" value="2147483647"/>, + <setting id="org.eclipse.jdt.core.formatter.parentheses_positions_in_try_clause" value="common_lines"/>, + <setting id="org.eclipse.jdt.core.compiler.source" value="9"/>, + <setting id="org.eclipse.jdt.core.formatter.comment.format_source_code" value="false"/>, + <setting id="org.eclipse.jdt.core.formatter.wrap_before_assignment_operator" value="false"/>, + <setting id="org.eclipse.jdt.core.compiler.codegen.targetPlatform" value="9"/>, + <setting id="org.eclipse.jdt.core.formatter.parentheses_positions_in_method_delcaration" value="common_lines"/>, + <setting id="org.eclipse.jdt.core.formatter.alignment_for_type_arguments" value="0"/>, + <setting id="org.eclipse.jdt.core.compiler.compliance" value="9"/>, + <setting id="org.eclipse.jdt.core.formatter.parentheses_positions_in_lambda_declaration"
[+++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java, + public void testMetrics() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java, + public void testMetrics() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ManagementPortSampleActuatorApplicationTests.java, + public void testMetrics() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java, + public void testMetrics() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ManagementPortSampleActuatorApplicationTests.java, + public void testMetrics() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/NoManagementSampleActuatorApplicationTests.java, + public void testMetricsNotAvailable() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java, + public void testMetrics() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ManagementPortSampleActuatorApplicationTests.java, + public void testMetrics() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/NoManagementSampleActuatorApplicationTests.java, + public void testMetricsNotAvailable() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/SampleActuatorApplicationTests.java, + public void testMetrics() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java, + public void testMetrics() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ManagementPortSampleActuatorApplicationTests.java, + public void testMetrics() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/NoManagementSampleActuatorApplicationTests.java, + public void testMetricsNotAvailable() {, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/SampleActuatorApplicationTests.java, + public void testMetrics() {, +++
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <byte-buddy.version>1.7.9</byte-buddy.version>]
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/,
[+++ b/.gitignore, +data, +++ b/.gitignore, +data, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/.gitignore, +data, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-devtools</module>, +++ b/.gitignore, +data, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-devtools</module>, +++ b/spring-boot-actuator/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.hazelcast</groupId>, + <artifactId>hazelcast</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.hazelcast</groupId>, + <artifactId>hazelcast-spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.sun.mail</groupId>, + <artifactId>javax.mail</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.timgroup</groupId>, + <artifactId>java-statsd-client</artifactId>, + <optional>true</optional>, +
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <spring-amqp.version>2.0.5.BUILD-SNAPSHOT</spring-amqp.version>, + <spring-integration.version>5.0.7.BUILD-SNAPSHOT</spring-integration.version>, + <spring-kafka.version>2.1.8.BUILD-SNAPSHOT</spring-kafka.version>, + <spring-session-bom.version>Apple-BUILD-SNAPSHOT</spring-session-bom.version>]
[+++ b/spring-boot-samples/spring-boot-sample-actuator-ui/pom.xml]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/README.adoc, += Spring Boot image:https://build.spring.io/plugins/servlet/buildStatusImage/BOOT-PUB["Build Status", link="https://build.spring.io/browse/BOOT-PUB"], +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/,
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +import java.util.Collection;, +, + private DataSourcePoolMetadataProvider poolMetadataProvider;, + this.poolMetadataProvider = new CompositeDataSourcePoolMetadataProvider(, + metadataProviders.getIfAvailable());, + if (isDataSourceAutoCommitDisabled() && !isJta()) {, + private boolean isDataSourceAutoCommitDisabled() {, + DataSourcePoolMetadata poolMetadata = this.poolMetadataProvider, + .getDataSourcePoolMetadata(getDataSource());, + return poolMetadata != null, + && Boolean.FALSE.equals(poolMetadata.getDefaultAutoCommit());, + }, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +import java.util.Collection;, +, + private DataSourcePoolMetadataProvider poolMetadataProvider;, + this.poolMetadataProvider = new CompositeDataSourcePoolMetadataProvider(, + metadataProviders.getIfAvailable());, + if (isDataSourceAutoCommitDisabled() && !isJta()) {, + private boolean isDataSourceAutoCommitDisabled() {, + DataSourcePoolMetadata poolMetadata = this.poolMetadataProvider, + .getDataSourcePoolMetadata(getDataSource());, + return poolMetadata != null, + && Boolean.FALSE.equals(poolMetadata.getDefaultAutoCommit());, + }, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import com.zaxxer.hikari.HikariDataSource;, +import static org.assertj.core.api.Assertions.entry;, + @Test,
[+++ b/spring-boot-dependencies/pom.xml, + <webjars-hal-browser.version>3325375</webjars-hal-browser.version>]
[+++ b/.bomr/bomr.yaml, + - project: couchbase-client, + versions:, + # Jar contains dependencies' classes resulting in duplicates, + - '[2.7.3]', + # Old versions that use yyyymmdd format, + - '[20040101,)', + - project: glassfish-jaxb, + versions:, + # Switches to Jarkarta EE API dependencies resulting in duplicate classes, + - '[2.3.2,2.4)', + - project: saaj-impl, + versions:, + # Switches to Jarkarta EE API dependencies resulting in duplicate classes, + - '[1.5.1,1.6)', + - project: selenium-htmlunit, + versions:, + # Requires a new minor of Selenium which contains breaking API changes, + - '[2.33.1,2.34)', + ignored-dependencies:, + #
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.travis.yml, +services: mongodb, +++ b/.gitignore, +++ b/.travis.yml, +services: mongodb, +++ b/CONTRIBUTING.adoc, +given the ability to merge pull requests. Use ``Phillip Webb'' or ``Dave Syer'' in the, + the ``Importing into eclipse'' instructions below you should get project specific, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +http://maven.apache.org/run-maven/index.html[Apache Maven] v3.0.6 or above and JDK 1.7., +a `MAVEN_OPTS` environment variable with the value `-Xmx512m -XX:MaxPermSize=128m`, +`-Xmx512m -XX:MaxPermSize=128m`. We generate more artifacts when running the full build, +++ b/.gitignore, +++ b/.travis.yml, +services: mongodb, +++ b/CONTRIBUTING.adoc, +given
[+++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-cli/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-cli/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-dependencies/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <spring-boot.version>1.2.0.BUILD-SNAPSHOT</spring-boot.version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + <version>1.2.0.BUILD-SNAPSHOT</version>, +
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/README.adoc, + tagged with https://stackoverflow.com/tags/spring-boot[`spring-boot`]., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <netty-tcnative.version>2.0.22.Final</netty-tcnative.version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/README.adoc, + tagged with https://stackoverflow.com/tags/spring-boot[`spring-boot`]., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/README.adoc, +
[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListener.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.util.ClassUtils;, + private static final boolean MOCKITO_IS_PRESENT = ClassUtils.isPresent(, + "org.mockito.MockSettings",, + ResetMocksTestExecutionListener.class.getClassLoader());, +, + if (MOCKITO_IS_PRESENT) {, + }, + if (MOCKITO_IS_PRESENT) {, + }, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListener.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.util.ClassUtils;, + private static final boolean MOCKITO_IS_PRESENT = ClassUtils.isPresent(, + "org.mockito.MockSettings",, + ResetMocksTestExecutionListener.class.getClassLoader());, +, + if (MOCKITO_IS_PRESENT) {, + }, + if (MOCKITO_IS_PRESENT) {, + }, +++ /dev/null, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListener.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.util.ClassUtils;, + private static final boolean MOCKITO_IS_PRESENT = ClassUtils.isPresent(,
[+++ b/CONTRIBUTING.adoc, +++ b/CONTRIBUTING.adoc, +++ b/README.adoc, +The {docs}/htmlsingle/[reference documentation] includes detailed, +{docs}/htmlsingle/#getting-started-installing-spring-boot[installation instructions], +as well as a comprehensive {docs}/htmlsingle/#getting-started-first-application[``getting, +started``] guide. Documentation is published in {docs}/htmlsingle/[HTML],, +{docs}/pdf/spring-boot-reference.pdf[PDF] and {docs}/epub/spring-boot-reference.epub[EPUB], +formats., +* Check the {docs}/htmlsingle/[reference documentation], especially the, + {docs}/htmlsingle/#howto[How-to's] -- they provide solutions to the most common, +* If you are upgrading, read the https://github.com/spring-projects/spring-boot/wiki[release notes], + for upgrade instructions and "new and noteworthy" features., +* Report bugs with Spring Boot at https://github.com/spring-projects/spring-boot/issues[github.com/spring-projects/spring-boot/issues]., +* Before you log a bug, please https://github.com/spring-projects/spring-boot/search?type=Issues[search the issue tracker], + to see if someone has already reported the problem., +* If the issue doesn't
[+++ b/spring-boot-docs/pom.xml, + <var name="github-tag" value="v${project.version}" />]
[+++ b/spring-boot-dependencies/pom.xml, + <artifactId>querydsl-apt</artifactId>, + <version>${querydsl.version}</version>, + </dependency>, + <dependency>, + <groupId>com.querydsl</groupId>, + <artifactId>querydsl-core</artifactId>, + <version>${querydsl.version}</version>, + </dependency>, + <dependency>, + <groupId>com.querydsl</groupId>]
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +++ b/.mvn/jvm.config, +-Xmx512m,
[+++ b/CONTRIBUTING.adoc, +++ b/CONTRIBUTING.adoc, +++ b/README.adoc, +The {docs}/htmlsingle/[reference documentation] includes detailed, +{docs}/htmlsingle/#getting-started-installing-spring-boot[installation instructions], +as well as a comprehensive {docs}/htmlsingle/#getting-started-first-application[``getting, +started``] guide. Documentation is published in {docs}/htmlsingle/[HTML],, +{docs}/pdf/spring-boot-reference.pdf[PDF] and {docs}/epub/spring-boot-reference.epub[EPUB], +formats., +* Check the {docs}/htmlsingle/[reference documentation], especially the, + {docs}/htmlsingle/#howto[How-to's] -- they provide solutions to the most common, +* If you are upgrading, read the https://github.com/spring-projects/spring-boot/wiki[release notes], + for upgrade instructions and "new and noteworthy" features., +* Report bugs with Spring Boot at https://github.com/spring-projects/spring-boot/issues[github.com/spring-projects/spring-boot/issues]., +* Before you log a bug, please https://github.com/spring-projects/spring-boot/search?type=Issues[search the issue tracker], + to see if someone has already reported the problem., +* If the issue doesn't
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.VanillaPublicMetrics;, + private MetricReader
[+++ b/spring-boot-dependencies/pom.xml, + <spring-data-releasetrain.version>Ingalls-BUILD-SNAPSHOT</spring-data-releasetrain.version>]
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings,
[+++ b/spring-boot-autoconfigure/pom.xml, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.slf4j</groupId>, + <artifactId>slf4j-jdk14</artifactId>, + <scope>test</scope>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-test</artifactId>, + <dependency>, + <groupId>org.yaml</groupId>, + <artifactId>snakeyaml</artifactId>, + </dependency>, +++ b/spring-boot-autoconfigure/pom.xml, + <groupId>com.h2database</groupId>, + <artifactId>h2</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.slf4j</groupId>, + <artifactId>slf4j-jdk14</artifactId>, + <scope>test</scope>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-test</artifactId>, + <dependency>, + <groupId>org.yaml</groupId>, + <artifactId>snakeyaml</artifactId>, + </dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleAutoConfiguration.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.,
[+++ b/spring-boot-dependencies/pom.xml, + <spring-integration.version>4.3.13.RELEASE</spring-integration.version>]
[+++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/loggers.adoc, +=== /loggers, +This endpoint allows you to view and modify the log levels for the loggers in your, +application. It builds on top of the `LoggingSystem` abstraction and supports the same, +logging frameworks. The logging levels are defined by the `LogLevel` enumeration and, +consist of the following values (although not all logging systems support the full set):, +, +* `TRACE`, +* `DEBUG`, +* `INFO`, +* `WARN`, +* `ERROR`, +* `FATAL`, +*
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/AbstractDataSourceConfiguration.java, +import org.springframework.beans.factory.BeanClassLoaderAware;, +@ConfigurationProperties(path = "spring.datasource"), +public abstract class AbstractDataSourceConfiguration implements BeanClassLoaderAware {, + private ClassLoader classLoader;, +, + @Override, + public void setBeanClassLoader(ClassLoader classLoader) {, + this.classLoader = classLoader;, + }, +, + EmbeddedDatabaseConnection embeddedDatabaseConnection = EmbeddedDatabaseConnection, + .get(this.classLoader);, + this.driverClassName = embeddedDatabaseConnection.getDriverClassName();, + + embeddedDatabaseConnection + ". If you want an embedded ", + + "database please put a supoprted one on the classpath.");, + EmbeddedDatabaseConnection embeddedDatabaseConnection = EmbeddedDatabaseConnection, + .get(this.classLoader);, + this.url = embeddedDatabaseConnection.getUrl();, + + embeddedDatabaseConnection + ". If you want an embedded ", + + "database please put a supported on on the
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings,
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/mappings.adoc, +[cols="3,1,3"], +[[mappings-retrieving-response-structure-dispatcher-handlers]], +[cols="3,1,3"], +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/mappings.adoc, +[cols="3,1,3"], +[[mappings-retrieving-response-structure-dispatcher-handlers]], +[cols="3,1,3"], +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointReactiveDocumentationTests.java, +import org.springframework.restdocs.payload.JsonFieldType;, +import org.springframework.web.reactive.function.server.RequestPredicates;, +import org.springframework.web.reactive.function.server.RouterFunction;, +import org.springframework.web.reactive.function.server.RouterFunctions;, +import org.springframework.web.reactive.function.server.ServerResponse;, + .description("Predicate for the mapping."),, + fieldWithPath("*.[].details").optional(), + .type(JsonFieldType.OBJECT), + .description("Additional implementation-specific ", + + "details about the mapping. Optional."),, + fieldWithPath("*.[].details.handlerMethod").optional(), + .type(JsonFieldType.OBJECT), + .description("Details of the method, if any, ", + + "that will handle requests to ", + + "this mapping."),, + fieldWithPath("*.[].details.handlerMethod.className"), + .type(JsonFieldType.STRING), + .description("Fully qualified name of the class", + + " of the method."),, + fieldWithPath("*.[].details.handlerMethod.name"), + .type(JsonFieldType.STRING), + .description("Name of the method."),, + fieldWithPath("*.[].details.handlerMethod.descriptor"), + .type(JsonFieldType.STRING), + .description("Descriptor of
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <maven-help-plugin.version>3.1.0</maven-help-plugin.version>]
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.config.BeanPostProcessor;, +import org.springframework.context.annotation.DependsOn;, + public static class FlywayConfiguration {, + @Bean, + @DependsOn("flyway"), + protected BeanPostProcessor forceFlywayToInitialize() {, +, + return new BeanPostProcessor() {, +, + @Override, + public Object postProcessAfterInitialization(Object bean, String beanName), + throws BeansException {, + return bean;, + }, +, + @Override, + public Object postProcessBeforeInitialization(Object bean, String beanName), + throws BeansException {, + return bean;, + }, +, + };, + }, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.config.BeanPostProcessor;, +import org.springframework.context.annotation.DependsOn;, + public static class FlywayConfiguration {, + @Bean, + @DependsOn("flyway"), + protected BeanPostProcessor forceFlywayToInitialize() {, +, + return new
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + .<String>unmodifiableSet(new HashSet<String>(, + this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), + .perform(get("/logfile").accept(MediaType.TEXT_PLAIN), + .perform(get("/loggers/org.springframework.boot"), + .perform(post("/loggers/org.springframework.boot"), + .contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), + .andExpect(status().isOk()).andDo(document("set-logger"));, + .perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + final Map<String, Object> model = new LinkedHashMap<String, Object>();, + final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, + .perform(get(endpointPath), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + PrintWriter writer = new PrintWriter(file, "UTF-8");, + try {, + finally {, + writer.close();, + }, + List<?
[+++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j spring-boot/stage-release, +$ fly -t spring trigger-job -j spring-boot/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +🎁 Enhancement, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <javax-websocket.version>1.1</javax-websocket.version>, + <groupId>javax.websocket</groupId>, + <artifactId>javax.websocket-api</artifactId>, + <version>${javax-websocket.version}</version>, + </dependency>, + <dependency>, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <javax-websocket.version>1.1</javax-websocket.version>, + <groupId>javax.websocket</groupId>, + <artifactId>javax.websocket-api</artifactId>, + <version>${javax-websocket.version}</version>, + </dependency>, + <dependency>, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +for MVC web applications that can be easily accessed through the, +`spring-boot-starter-websocket` module., +, +WebSocket support is also available for, +{spring-reference}web-reactive.html#webflux-websocket[reactive web applications] and, +requires to include the WebSocket API alongside `spring-boot-starter-webflux`:, +, +[source,xml,indent=0,subs="verbatim,quotes,attributes"], +----, + <dependency>, + <groupId>javax.websocket</groupId>, + <artifactId>javax.websocket-api</artifactId>, + </dependency>, +----]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, +
[+++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java, +++ /dev/null, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +
[+++ b/spring-boot-dependencies/pom.xml, + <spring-social-twitter.version>2.0.0.M2</spring-social-twitter.version>]
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +import org.springframework.boot.orm.jpa.SpringNamingStrategy;, + "naming-strategy", SpringNamingStrategy.class.getName()));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +import org.springframework.boot.orm.jpa.SpringNamingStrategy;, + "naming-strategy", SpringNamingStrategy.class.getName()));, +++ b/spring-boot-samples/spring-boot-sample-data-jpa/src/main/resources/import.sql, +insert into hotel(city_id, name, address, zip) values (1, 'Conrad Treasury Place', 'William & George Streets', '4001'), +insert into hotel(city_id, name, address, zip) values (2, 'The Langham', '1 Southgate Ave, Southbank', '3006'), +insert into review(hotel_id, index, check_in_date, rating, trip_type, title, details) values (2, 0, '2005-05-10', 2, 4, 'Pretty average', 'I stayed in 2005, the hotel was nice enough but nothing special.'), +insert into review(hotel_id, index, check_in_date, rating, trip_type, title, details) values (2, 1, '2006-01-12', 4, 2, 'Bright hotel with big rooms', 'This hotel has
[+++ b/spring-boot-samples/spring-boot-sample-tomcat-jsp/pom.xml, + <groupId>javax.servlet</groupId>, + <artifactId>jstl</artifactId>, + </dependency>, + <dependency>, +++ b/spring-boot-samples/spring-boot-sample-tomcat-jsp/pom.xml, + <groupId>javax.servlet</groupId>, + <artifactId>jstl</artifactId>, + </dependency>, + <dependency>, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java, + this.loggingSystem.initialize(this.initializationContext, null, null);]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + .<String>unmodifiableSet(new HashSet<String>(, + this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), + .perform(get("/logfile").accept(MediaType.TEXT_PLAIN), + .perform(get("/loggers/org.springframework.boot"), + .perform(post("/loggers/org.springframework.boot"), + .contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), + .perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + final Map<String, Object> model = new LinkedHashMap<String, Object>();, + final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, + .perform(get(endpointPath), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + List<? extends MvcEndpoint> endpoints = new ArrayList<MvcEndpoint>(, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +
[+++ b/spring-boot-dependencies/pom.xml, + <mockito.version>2.7.22</mockito.version>]
[+++ b/pom.xml, + <maven>3.2.1</maven>, +++ b/pom.xml, + <maven>3.2.1</maven>, +++ b/spring-boot-dependencies/pom.xml, + <maven>3.2.1</maven>, +++ b/pom.xml, + <maven>3.2.1</maven>, +++ b/spring-boot-dependencies/pom.xml, + <maven>3.2.1</maven>, +++ b/spring-boot-parent/pom.xml]
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <jna.version>4.5.1</jna.version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to
[+++ b/spring-boot-dependencies/pom.xml, + <spring.version>5.0.0.RC2</spring.version>]
[+++ b/CONTRIBUTING.adoc, +=== Importing into IntelliJ IDEA, +To open the project in IntelliJ IDEA, select "`File`" -> "`Open`" and then click on the, +root `pom.xml`., +, +, +, +==== Install the Spring Formatter plugin, +If you haven't done so, install the formatter plugin so that proper formatting rules are, +applied automatically when you reformat code in the IDE., +, +* Download the latest https://search.maven.org/search?q=g:io.spring.javaformat%20AND%20a:spring-javaformat-intellij-plugin[Intellij IDEA plugin], +* Select "`IntelliJ IDEA`" -> "`Preferences`"., +* Select "`Plugins`", +* Select the wheel and "`Install Plugin from Disk...`", +* Select the jar file you've downloaded, +, +, +, +==== Import additional code style,
[+++ b/spring-boot-dependencies/pom.xml, + <jaybird.version>2.2.13</jaybird.version>]
[+++ b/spring-boot-test-autoconfigure/pom.xml, + <dependency>, + <groupId>org.springframework.plugin</groupId>, + <artifactId>spring-plugin-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/spring-boot-test-autoconfigure/pom.xml, + <dependency>, + <groupId>org.springframework.plugin</groupId>, + <artifactId>spring-plugin-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/AutoConfigureWebMvc.java, +import org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration;, + MustacheAutoConfiguration.class, ThymeleafAutoConfiguration.class,, + HypermediaAutoConfiguration.class }), +++ b/spring-boot-test-autoconfigure/pom.xml, + <dependency>, + <groupId>org.springframework.plugin</groupId>, + <artifactId>spring-plugin-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/AutoConfigureWebMvc.java, +import org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration;, + MustacheAutoConfiguration.class, ThymeleafAutoConfiguration.class,, + HypermediaAutoConfiguration.class }), +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/HateoasController.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;, +@AutoConfigureAfter({ MetricsAutoConfiguration.class, RabbitAutoConfiguration.class,, + SimpleMetricsExportAutoConfiguration.class }), +@ConditionalOnBean({ AbstractConnectionFactory.class, MeterRegistry.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;, +@AutoConfigureAfter({ MetricsAutoConfiguration.class, RabbitAutoConfiguration.class,, + SimpleMetricsExportAutoConfiguration.class }), +@ConditionalOnBean({ AbstractConnectionFactory.class, MeterRegistry.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java, +@ConditionalOnBean({ CacheMeterBinderProvider.class, MeterRegistry.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;, +@AutoConfigureAfter({ MetricsAutoConfiguration.class, RabbitAutoConfiguration.class,, + SimpleMetricsExportAutoConfiguration.class }), +@ConditionalOnBean({ AbstractConnectionFactory.class, MeterRegistry.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java, +@ConditionalOnBean({ CacheMeterBinderProvider.class, MeterRegistry.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasMetricsExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +@AutoConfigureBefore(SimpleMetricsExportAutoConfiguration.class), +@AutoConfigureAfter(MetricsAutoConfiguration.class), +@ConditionalOnBean(Clock.class), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;, +@AutoConfigureAfter({ MetricsAutoConfiguration.class, RabbitAutoConfiguration.class,, + SimpleMetricsExportAutoConfiguration.class }), +@ConditionalOnBean({ AbstractConnectionFactory.class, MeterRegistry.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java, +@ConditionalOnBean({ CacheMeterBinderProvider.class, MeterRegistry.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasMetricsExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +@AutoConfigureBefore(SimpleMetricsExportAutoConfiguration.class), +@AutoConfigureAfter(MetricsAutoConfiguration.class), +@ConditionalOnBean(Clock.class), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +@AutoConfigureBefore(SimpleMetricsExportAutoConfiguration.class), +@AutoConfigureAfter(MetricsAutoConfiguration.class), +@ConditionalOnClass(DatadogMeterRegistry.class),
[+++ b/spring-boot-dependencies/pom.xml, + <lombok.version>1.16.14</lombok.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <spring.version>4.2.4.RELEASE</spring.version>]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings,
[+++ b/.bomr/bomr.yaml, + policy: same-major-version, + - project: maven-invoker-plugin, + # NPE in InstallMojo.installProjectPom (InstallMojo.java:387), + - '[3.2.0]', + # Spring Data GemFire's GemFire dependencies, + - 'https://repo.spring.io/gemstone-release-pivotal-cache', +++ b/.bomr/bomr.yaml, + policy: same-major-version, + - project: maven-invoker-plugin, + # NPE in InstallMojo.installProjectPom (InstallMojo.java:387), + - '[3.2.0]', + # Spring Data GemFire's GemFire dependencies, + - 'https://repo.spring.io/gemstone-release-pivotal-cache', +++ b/.settings-template.xml, + xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">, +++ b/.bomr/bomr.yaml, + policy: same-major-version, + - project: maven-invoker-plugin, + # NPE in InstallMojo.installProjectPom (InstallMojo.java:387), + - '[3.2.0]', + # Spring Data GemFire's GemFire dependencies, + - 'https://repo.spring.io/gemstone-release-pivotal-cache', +++ b/.settings-template.xml, + xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">, +++ b/CONTRIBUTING.adoc, +=== Importing into
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target,
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapterTests.java, + "{scheme}://{serverName}:{serverPort}{contextPath}/login/oauth2/code/{registrationId}");, + "{scheme}://{serverName}:{serverPort}{contextPath}/login/oauth2/code/{registrationId}");]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +🎁 Enhancement, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +given the ability to merge pull requests., +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +given the ability to merge pull requests., +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/README.adoc, += Spring
[+++ b/spring-boot-dependencies/pom.xml, + <mysql.version>5.1.45</mysql.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <javax-annotation.version>1.3.1</javax-annotation.version>]
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j spring-boot/stage-release, +$ fly -t spring trigger-job -j spring-boot/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t
[+++ b/spring-boot-dependencies/pom.xml, + <artifactId>jackson-dataformat-csv</artifactId>, + <version>${jackson.version}</version>, + </dependency>, + <dependency>, + <groupId>com.fasterxml.jackson.dataformat</groupId>]
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.boot.autoconfigure.jdbc.EmbeddedDatabaseConnection;, +public class HibernateJpaAutoConfiguration extends JpaBaseConfiguration implements, + BeanClassLoaderAware {, + private ClassLoader classLoader;, +, + @Override, + public void setBeanClassLoader(ClassLoader classLoader) {, + this.classLoader = classLoader;, + }, +, + String ddlAuto = this.environment.getProperty("ddl-auto", getDefaultDdlAuto());, +, + private String getDefaultDdlAuto() {, + EmbeddedDatabaseConnection embeddedDatabaseConnection = EmbeddedDatabaseConnection, + .get(this.classLoader);, + if (embeddedDatabaseConnection == EmbeddedDatabaseConnection.NONE) {, + return "none";, + }, + return "create-drop";, + }, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.boot.autoconfigure.jdbc.EmbeddedDatabaseConnection;, +public class HibernateJpaAutoConfiguration extends JpaBaseConfiguration implements, + BeanClassLoaderAware {, + private ClassLoader classLoader;, +, + @Override, + public void setBeanClassLoader(ClassLoader classLoader) {, +
[+++ b/spring-boot-dependencies/pom.xml, + <spring-integration.version>4.2.0.M1</spring-integration.version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-dependencies/pom.xml, + <jaybird.version>2.2.8</jaybird.version>, + <groupId>org.firebirdsql.jdbc</groupId>, + <artifactId>jaybird-jdk16</artifactId>, + <version>${jaybird.version}</version>, + </dependency>, + <dependency>, + <groupId>org.firebirdsql.jdbc</groupId>, + <artifactId>jaybird-jdk17</artifactId>, + <version>${jaybird.version}</version>, + </dependency>, + <dependency>, + <groupId>org.firebirdsql.jdbc</groupId>, + <artifactId>jaybird-jdk18</artifactId>, + <version>${jaybird.version}</version>, + </dependency>, + <dependency>]
[+++ b/CONTRIBUTING.adoc, +=== Importing into IntelliJ IDEA, +To open the project in IntelliJ IDEA, select "`File`" -> "`Open`" and then click on the, +root `pom.xml`., +, +, +, +==== Install the Spring Formatter plugin, +If you haven't done so, install the formatter plugin so that proper formatting rules are, +applied automatically when you reformat code in the IDE., +, +* Download the latest https://search.maven.org/search?q=g:io.spring.javaformat%20AND%20a:spring-javaformat-intellij-plugin[IntelliJ IDEA plugin]., +* Select "`IntelliJ IDEA`" -> "`Preferences`"., +* Select "`Plugins`"., +* Select the wheel and "`Install Plugin from Disk...`"., +* Select the jar file you've downloaded., +, +, +, +==== Import additional code style,
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + .<String>unmodifiableSet(new HashSet<String>(, + this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), + .perform(get("/logfile").accept(MediaType.TEXT_PLAIN), + .perform(get("/loggers/org.springframework.boot"), + .perform(post("/loggers/org.springframework.boot"), + .contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), + .perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + final Map<String, Object> model = new LinkedHashMap<String, Object>();, + final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, + .perform(get(endpointPath), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + List<? extends MvcEndpoint> endpoints = new ArrayList<MvcEndpoint>(, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="false" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n
[+++ b/spring-boot-dependencies/pom.xml, + <postgresql.version>9.4.1208.jre7</postgresql.version>]
[+++ b/spring-boot-parent/pom.xml, +++ b/spring-boot-parent/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-web-jsp/pom.xml, + <dependency>, + <groupId>javax.servlet</groupId>, + <artifactId>jstl</artifactId>, + </dependency>, +++ b/spring-boot-parent/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-web-jsp/pom.xml, + <dependency>, + <groupId>javax.servlet</groupId>, + <artifactId>jstl</artifactId>, + </dependency>, +++ b/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/WelcomeController.java, +import java.util.Date;, +import java.util.Map;, +, + public String welcome(Map<String,Object> model) {, + model.put("time", new Date());, +++ b/spring-boot-parent/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-web-jsp/pom.xml, + <dependency>, + <groupId>javax.servlet</groupId>, + <artifactId>jstl</artifactId>, + </dependency>, +++ b/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/WelcomeController.java, +import java.util.Date;, +import java.util.Map;, +, + public String welcome(Map<String,Object> model) {, + model.put("time", new Date());, +++ b/spring-boot-samples/spring-boot-sample-web-jsp/src/main/webapp/WEB-INF/jsp/welcome.jsp, +<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>, + <c:url value="/resources/text.txt" var="url"/>, + Spring URL: ${springUrl} at ${time}, + <br>, + JSTL URL: ${url}, +++ b/spring-boot-parent/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-web-jsp/pom.xml, +
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +, +🙅 Managed dependency upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. But pull requests for upgrades that are more involved than just a version property change are still most welcome., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some
[+++ b/spring-boot-docs/pom.xml, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-jar-plugin</artifactId>, + <configuration>, + <excludes>, + <exclude>**</exclude>, + </excludes>, + </configuration>, + </plugin>, + </plugins>, + </build>]
[+++ b/.gitignore, +*.ipr, +*.iws, +.DS_Store, +++ b/.gitignore, +*.ipr, +*.iws, +.DS_Store, +++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>,
[+++ b/spring-boot-autoconfigure/pom.xml, + <groupId>org.flywaydb</groupId>, +++ b/spring-boot-autoconfigure/pom.xml, + <groupId>org.flywaydb</groupId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.flywaydb.core.Flyway;, +++ b/spring-boot-autoconfigure/pom.xml, + <groupId>org.flywaydb</groupId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.flywaydb.core.Flyway;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +import org.flywaydb.core.Flyway;, +++ b/spring-boot-autoconfigure/pom.xml, + <groupId>org.flywaydb</groupId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.flywaydb.core.Flyway;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +import org.flywaydb.core.Flyway;, +++ b/spring-boot-dependencies/pom.xml, + <flyway.version>3.0</flyway.version>, + <groupId>org.flywaydb</groupId>, +++ b/spring-boot-autoconfigure/pom.xml, + <groupId>org.flywaydb</groupId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.flywaydb.core.Flyway;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +import org.flywaydb.core.Flyway;, +++ b/spring-boot-dependencies/pom.xml, + <flyway.version>3.0</flyway.version>, + <groupId>org.flywaydb</groupId>, +++ b/spring-boot-samples/spring-boot-sample-flyway/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <groupId>org.flywaydb</groupId>]
[+++ b/.bomr/bomr.yaml, + policy: same-major-version, + - project: maven-invoker-plugin, + # NPE in InstallMojo.installProjectPom (InstallMojo.java:387), + - '[3.2.0]', + # Spring Data GemFire's GemFire dependencies, + - 'https://repo.spring.io/gemstone-release-pivotal-cache', +++ b/.bomr/bomr.yaml, + policy: same-major-version, + - project: maven-invoker-plugin, + # NPE in InstallMojo.installProjectPom (InstallMojo.java:387), + - '[3.2.0]', + # Spring Data GemFire's GemFire dependencies, + - 'https://repo.spring.io/gemstone-release-pivotal-cache', +++ b/.settings-template.xml, + xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">, +++ b/.bomr/bomr.yaml, + policy: same-major-version, + - project: maven-invoker-plugin, + # NPE in InstallMojo.installProjectPom (InstallMojo.java:387), + - '[3.2.0]', + # Spring Data GemFire's GemFire dependencies, + - 'https://repo.spring.io/gemstone-release-pivotal-cache', +++ b/.settings-template.xml, + xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">, +++ b/CONTRIBUTING.adoc, +=== Importing into
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.mvn/jvm.config, +-Xmx1024m,
[+++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/GuavaCacheStatisticsProvider.java, + * @deprecated as of 1.5 following the removal of Guava support in Spring Framework 5, +@Deprecated, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/GuavaCacheStatisticsProvider.java, + * @deprecated as of 1.5 following the removal of Guava support
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +STOP!! Please ask questions about how to use something, or to understand why something isn't, +, +🙅 Managed dependency upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. But pull requests for upgrades that are more involved than just a version property change are still most welcome., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising
[+++ b/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/pom.xml, + http://mirrors.sonic.net/apache/tomcat/tomcat-8/v${tomcat.version}/bin/apache-tomcat-${tomcat.version}.zip, +++ b/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/pom.xml, + http://mirrors.sonic.net/apache/tomcat/tomcat-8/v${tomcat.version}/bin/apache-tomcat-${tomcat.version}.zip, +++ b/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/pom.xml, + http://archive.apache.org/dist/tomee/tomee-${tomee.version}/apache-tomee-${tomee.version}-webprofile.zip, +++ b/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/pom.xml, + http://mirrors.sonic.net/apache/tomcat/tomcat-8/v${tomcat.version}/bin/apache-tomcat-${tomcat.version}.zip, +++ b/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/pom.xml, + http://archive.apache.org/dist/tomee/tomee-${tomee.version}/apache-tomee-${tomee.version}-webprofile.zip, +++ b/spring-boot-parent/pom.xml, + <version>1.4.15</version>]
[+++ b/.gitignore, +.factorypath, +++ b/.gitignore, +.factorypath, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +services:, + - mongodb, + - redis, +++ b/.gitignore, +.factorypath, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +services:, + - mongodb, + - redis, +++ b/CONTRIBUTING.adoc, +== Using GitHub issues, +, +We use GitHub issues to track bugs and enhancements. If you have a general usage question, +please ask on http://stackoverflow.com[Stack Overflow]. The Spring Boot team and the, +broader community monitor the http://stackoverflow.com/tags/spring-boot[`spring-boot`], +tag., +, +If you are reporting a bug, please help to speed up problem diagnosis by providing as much, +information as possible. Ideally, that would
[+++ b/spring-boot-dependencies/pom.xml, + <spring-integration.version>4.1.0.RC1</spring-integration.version>]
[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/Buffer.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/audit/AuditEventsEndpointAutoConfigurationTests.java, + .doesNotHaveBean(AuditEventsJmxEndpointExtension.class), + .doesNotHaveBean(AuditEventsWebEndpointExtension.class));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/audit/AuditEventsEndpointAutoConfigurationTests.java, + .doesNotHaveBean(AuditEventsJmxEndpointExtension.class), + .doesNotHaveBean(AuditEventsWebEndpointExtension.class));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/session/SessionsEndpointAutoConfigurationTests.java, + this.contextRunner.withPropertyValues("endpoints.sessions.enabled:false"), + .run((context) -> assertThat(context), + .doesNotHaveBean(SessionsEndpoint.class), + .doesNotHaveBean(SessionsWebEndpointExtension.class));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/audit/AuditEventsEndpointAutoConfigurationTests.java, + .doesNotHaveBean(AuditEventsJmxEndpointExtension.class), + .doesNotHaveBean(AuditEventsWebEndpointExtension.class));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/session/SessionsEndpointAutoConfigurationTests.java, + this.contextRunner.withPropertyValues("endpoints.sessions.enabled:false"), + .run((context) -> assertThat(context), + .doesNotHaveBean(SessionsEndpoint.class), + .doesNotHaveBean(SessionsWebEndpointExtension.class));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Couchbase., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/audit/AuditEventsEndpointAutoConfigurationTests.java, + .doesNotHaveBean(AuditEventsJmxEndpointExtension.class), + .doesNotHaveBean(AuditEventsWebEndpointExtension.class));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/session/SessionsEndpointAutoConfigurationTests.java, + this.contextRunner.withPropertyValues("endpoints.sessions.enabled:false"), + .run((context) -> assertThat(context), + .doesNotHaveBean(SessionsEndpoint.class), + .doesNotHaveBean(SessionsWebEndpointExtension.class));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Couchbase., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java, + LettuceClientConfiguration clientConfig = getLettuceClientConfiguration(clientResources,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/audit/AuditEventsEndpointAutoConfigurationTests.java, + .doesNotHaveBean(AuditEventsJmxEndpointExtension.class), + .doesNotHaveBean(AuditEventsWebEndpointExtension.class));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/session/SessionsEndpointAutoConfigurationTests.java, + this.contextRunner.withPropertyValues("endpoints.sessions.enabled:false"), + .run((context) -> assertThat(context),
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/,
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to
[+++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java, +++ /dev/null, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +
[+++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, +
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <kotlin.version>1.2.51</kotlin.version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/README.adoc, + tagged with https://stackoverflow.com/tags/spring-boot[`spring-boot`]., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/README.adoc, +
[+++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, +
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.VanillaPublicMetrics;, + private MetricReader
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.travis.yml, +++ b/.gitignore, +++ b/.travis.yml, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/.gitignore, +++ b/.travis.yml, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, + <version>1.2.5.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/.gitignore, +++ b/.travis.yml, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, + <version>1.2.5.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/spring-boot-actuator/pom.xml,
[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-project/spring-boot-dependencies/.eclipse/eclipse.properties, +copyright-year=2012-2018]
[+++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, +
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j spring-boot/stage-release, +$ fly -t spring trigger-job -j spring-boot/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t
[+++ b/spring-boot-parent/pom.xml, + <id>enforce-java-8</id>]
[+++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint;, +@AutoConfigureMockMvc(print = MockMvcPrint.NONE), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint;, +@AutoConfigureMockMvc(print = MockMvcPrint.NONE), +++ b/spring-boot-samples/spring-boot-sample-test/src/test/resources/application.properties, +spring.test.mockmvc.print=none, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint;, +@AutoConfigureMockMvc(print = MockMvcPrint.NONE), +++ b/spring-boot-samples/spring-boot-sample-test/src/test/resources/application.properties, +spring.test.mockmvc.print=none, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/AutoConfigureMockMvc.java, + * How {@link MvcResult} information should be printed after each MockMVC invocation., + * @return how information is printed, + MockMvcPrint print() default MockMvcPrint.DEFAULT;, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrint;, +@AutoConfigureMockMvc(print = MockMvcPrint.NONE), +++ b/spring-boot-samples/spring-boot-sample-test/src/test/resources/application.properties, +spring.test.mockmvc.print=none, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/AutoConfigureMockMvc.java, + * How {@link MvcResult} information should be printed after each MockMVC invocation., + * @return how information is printed, + MockMvcPrint print() default MockMvcPrint.DEFAULT;, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcPrint.java, +/*, + * Copyright 2012-2016 the
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + .<String>unmodifiableSet(new HashSet<String>(, + this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), + .perform(get("/logfile").accept(MediaType.TEXT_PLAIN), + .perform(get("/loggers/org.springframework.boot"), + .perform(post("/loggers/org.springframework.boot"), + .contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), + .perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + final Map<String, Object> model = new LinkedHashMap<String, Object>();, + final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, + .perform(get(endpointPath), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + List<? extends MvcEndpoint> endpoints = new ArrayList<MvcEndpoint>(, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests until you are ready, +to submit a pull request:, + $ ./mvnw clean install -DskipTests, +++ b/.settings-template.xml, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests until you are ready, +to submit a pull request:, + $ ./mvnw clean install -DskipTests, +++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.travis.yml, +++ b/.gitignore, +++ b/.travis.yml, +++ b/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/.gitignore, +++ b/.travis.yml, +++ b/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/spring-boot-actuator/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <groupId>org.hsqldb</groupId>, + <artifactId>hsqldb</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot</artifactId>, + <type>test-jar</type>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.apache.tomcat.embed</groupId>, + <artifactId>tomcat-embed-logging-juli</artifactId>, +++ b/.gitignore, +++ b/.travis.yml, +++ b/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/spring-boot-actuator/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <groupId>org.hsqldb</groupId>, + <artifactId>hsqldb</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +before_script: travis_wait 30 ./mvnw install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +before_script: travis_wait 30 ./mvnw install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +before_script: travis_wait 30 ./mvnw install -q -U -DskipTests=true
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/README.adoc, +* If you are upgrading, read the https://github.com/spring-projects/spring-boot/wiki[release notes], + for upgrade instructions and "new and noteworthy" features., +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, +
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <mimepull.version>1.9.11</mimepull.version>]
[+++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.boot.test.context.SpringApplicationContextLoader;, +import org.springframework.test.context.ContextConfiguration;, +@ContextConfiguration(classes = SpringBootHypermediaApplication.class, loader = SpringApplicationContextLoader.class), +, +, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.boot.test.context.SpringApplicationContextLoader;, +import org.springframework.test.context.ContextConfiguration;, +@ContextConfiguration(classes = SpringBootHypermediaApplication.class, loader = SpringApplicationContextLoader.class), +, +, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, +import org.springframework.boot.test.context.SpringApplicationContextLoader;, +import org.springframework.test.context.ContextConfiguration;, +@ContextConfiguration(classes = SpringBootHypermediaApplication.class, loader = SpringApplicationContextLoader.class), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.boot.test.context.SpringApplicationContextLoader;, +import org.springframework.test.context.ContextConfiguration;, +@ContextConfiguration(classes = SpringBootHypermediaApplication.class, loader = SpringApplicationContextLoader.class), +, +, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, +import org.springframework.boot.test.context.SpringApplicationContextLoader;, +import org.springframework.test.context.ContextConfiguration;, +@ContextConfiguration(classes = SpringBootHypermediaApplication.class, loader = SpringApplicationContextLoader.class), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +import org.springframework.boot.test.context.SpringApplicationContextLoader;, +import org.springframework.test.context.ContextConfiguration;, +@ContextConfiguration(classes = SpringBootHypermediaApplication.class, loader = SpringApplicationContextLoader.class), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.boot.test.context.SpringApplicationContextLoader;, +import org.springframework.test.context.ContextConfiguration;, +@ContextConfiguration(classes = SpringBootHypermediaApplication.class, loader = SpringApplicationContextLoader.class), +, +, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, +import org.springframework.boot.test.context.SpringApplicationContextLoader;, +import org.springframework.test.context.ContextConfiguration;, +@ContextConfiguration(classes
[+++ b/spring-boot-dependencies/pom.xml, + <spring.version>4.2.0.BUILD-SNAPSHOT</spring.version>]
[+++ b/spring-boot-autoconfigure/src/test/resources/ehcache3.xml, + http://www.ehcache.org/v3 https://www.ehcache.org/schema/ehcache-core-3.1.xsd, + http://www.ehcache.org/v3/jsr107 https://www.ehcache.org/schema/ehcache-107-ext-3.1.xsd">, +++ b/spring-boot-autoconfigure/src/test/resources/ehcache3.xml, + http://www.ehcache.org/v3 https://www.ehcache.org/schema/ehcache-core-3.1.xsd, + http://www.ehcache.org/v3/jsr107 https://www.ehcache.org/schema/ehcache-107-ext-3.1.xsd">, +++ b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/resources/pom-template.xml, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">, +++ b/spring-boot-autoconfigure/src/test/resources/ehcache3.xml, + http://www.ehcache.org/v3 https://www.ehcache.org/schema/ehcache-core-3.1.xsd, + http://www.ehcache.org/v3/jsr107 https://www.ehcache.org/schema/ehcache-107-ext-3.1.xsd">, +++ b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/resources/pom-template.xml, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">, +++ b/spring-boot-samples/spring-boot-sample-cache/src/main/resources/ehcache3.xml, + xsi:schemaLocation="http://www.ehcache.org/v3 https://www.ehcache.org/schema/ehcache-core-3.0.xsd, + http://www.ehcache.org/v3/jsr107 https://www.ehcache.org/schema/ehcache-107-ext-3.0.xsd">, +++ b/spring-boot-autoconfigure/src/test/resources/ehcache3.xml, + http://www.ehcache.org/v3 https://www.ehcache.org/schema/ehcache-core-3.1.xsd, + http://www.ehcache.org/v3/jsr107 https://www.ehcache.org/schema/ehcache-107-ext-3.1.xsd">, +++ b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/resources/pom-template.xml, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">, +++ b/spring-boot-samples/spring-boot-sample-cache/src/main/resources/ehcache3.xml, + xsi:schemaLocation="http://www.ehcache.org/v3 https://www.ehcache.org/schema/ehcache-core-3.0.xsd, + http://www.ehcache.org/v3/jsr107 https://www.ehcache.org/schema/ehcache-107-ext-3.0.xsd">, +++ b/spring-boot-starters/src/main/assembly/starter-poms-assembly.xml, + xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 https://maven.apache.org/xsd/assembly-1.1.3.xsd">, +++ b/spring-boot-autoconfigure/src/test/resources/ehcache3.xml, + http://www.ehcache.org/v3 https://www.ehcache.org/schema/ehcache-core-3.1.xsd, + http://www.ehcache.org/v3/jsr107 https://www.ehcache.org/schema/ehcache-107-ext-3.1.xsd">, +++ b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/resources/pom-template.xml, + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">, +++ b/spring-boot-samples/spring-boot-sample-cache/src/main/resources/ehcache3.xml, + xsi:schemaLocation="http://www.ehcache.org/v3 https://www.ehcache.org/schema/ehcache-core-3.0.xsd, + http://www.ehcache.org/v3/jsr107 https://www.ehcache.org/schema/ehcache-107-ext-3.0.xsd">, +++ b/spring-boot-starters/src/main/assembly/starter-poms-assembly.xml, + xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 https://maven.apache.org/xsd/assembly-1.1.3.xsd">, +++ b/spring-boot-test/src/test/resources/org/springframework/boot/test/context/SpringBootTestXmlConventionConfigurationTests-context.xml, + xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd,
[+++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/loggers.adoc, +=== /loggers, +This endpoint allows you to view and modify the log levels for the loggers in your, +application. It builds on top of the `LoggingSystem` abstraction and supports the same, +logging frameworks. The logging levels are defined by the `LogLevel` enumeration and, +consist of the following values (although not all logging systems support the full set):, +, +* `TRACE`, +* `DEBUG`, +* `INFO`, +* `WARN`, +* `ERROR`, +* `FATAL`, +*
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-dependencies/pom.xml, + <artifactId>hibernate-java8</artifactId>, + <version>${hibernate.version}</version>, + </dependency>, + <dependency>, + <groupId>org.hibernate</groupId>]
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <jaybird.version>3.0.5</jaybird.version>]
[+++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <groupId>com.sun.mail</groupId>, + <artifactId>javax.mail</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.apache.activemq</groupId>, + <artifactId>activemq-broker</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <groupId>com.sun.mail</groupId>, + <artifactId>javax.mail</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.apache.activemq</groupId>, + <artifactId>activemq-broker</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +import com.fasterxml.jackson.databind.ObjectMapper;, +, +
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j spring-boot/stage-release, +$ fly -t spring trigger-job -j spring-boot/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <spring-integration.version>5.0.12.RELEASE</spring-integration.version>]
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.mvn/jvm.config, +-Xmx1024m,
[+++ b/spring-boot-samples/pom.xml, + <module>spring-boot-sample-web-groovy-template</module>, +++ b/spring-boot-samples/pom.xml, + <module>spring-boot-sample-web-groovy-template</module>, +++ b/spring-boot-samples/spring-boot-sample-web-groovy-templates/README.md, +This sample application uses Spring Boot and, +[Groovy templates](http://beta.groovy-lang.org/docs/groovy-2.3.0/html/documentation/markup-template-engine.html), +in the View layer. The templates for this app live in, +`classpath:/templates/`, which is the conventional location for Spring, +Boot. External configuration is available via, +"spring.groovy.template.*"., +, +The templates all use a fixed "layout" implemented anticipating, +changes in Groovy 2.3.1 using a custom `BaseTemplate` class, +(`LayoutAwareTemplate`)., +++ b/spring-boot-samples/pom.xml, + <module>spring-boot-sample-web-groovy-template</module>, +++ b/spring-boot-samples/spring-boot-sample-web-groovy-templates/README.md, +This sample application uses Spring Boot and, +[Groovy templates](http://beta.groovy-lang.org/docs/groovy-2.3.0/html/documentation/markup-template-engine.html), +in the View layer. The templates for this app live in, +`classpath:/templates/`, which is the conventional location for Spring,
[+++ b/spring-boot-autoconfigure/pom.xml, + <groupId>com.atomikos</groupId>, + <artifactId>transactions-jms</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/spring-boot-autoconfigure/pom.xml, + <groupId>com.atomikos</groupId>, + <artifactId>transactions-jms</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jta/JtaAutoConfigurationTests.java, + * Copyright 2012-2015 the original author or authors., +import javax.jms.ConnectionFactory;, +import javax.jms.TemporaryQueue;, +import javax.jms.XAConnection;, +import javax.jms.XAConnectionFactory;, +import javax.jms.XASession;, +import javax.sql.DataSource;, +import javax.sql.XADataSource;, +import javax.transaction.xa.XAResource;, +import org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;, +import org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean;, +import org.springframework.boot.jta.bitronix.PoolingDataSourceBean;, +import com.atomikos.jms.AtomikosConnectionFactoryBean;, +import static org.mockito.Mockito.when;, + @Test, + public void atomikosConnectionFactoryPoolConfiguration() {, + this.context = new AnnotationConfigApplicationContext();, + EnvironmentTestUtils.addEnvironment(this.context,, + "spring.jta.atomikos.connectionfactory.minPoolSize:5",, + "spring.jta.atomikos.connectionfactory.maxPoolSize:10");, + this.context.register(JtaPropertiesConfiguration.class,, + AtomikosJtaConfiguration.class, PoolConfiguration.class);, + this.context.refresh();, + AtomikosConnectionFactoryBean connectionFactory = this.context, + .getBean(AtomikosConnectionFactoryBean.class);, + assertThat(connectionFactory.getMinPoolSize(), is(equalTo(5)));, + assertThat(connectionFactory.getMaxPoolSize(),
[+++ b/spring-boot-dependencies/pom.xml, + <jooq.version>3.8.2</jooq.version>]
[+++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests and the execution of, +checkstyle until you are ready to submit a pull request:, + $ ./mvnw clean install -DskipTests -Pfast, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests and the execution of, +checkstyle until you are ready to submit a pull request:, + $ ./mvnw clean install -DskipTests -Pfast, +++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter
[+++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import java.util.Collection;, +import org.springframework.boot.actuate.endpoint.SystemPublicMetrics;, + * @author Stephane Nicoll, + private Collection<PublicMetrics> allMetrics;, + PublicMetrics metrics = new VanillaPublicMetrics(this.metricRepository, this.allMetrics);, + return new MetricsEndpoint(metrics);, + protected static class CorePublicMetrics {, +, + @Bean, + SystemPublicMetrics systemPublicMetrics() {, + return new SystemPublicMetrics();, + }, +, + }, +, + @Configuration, +++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import java.util.Collection;, +import org.springframework.boot.actuate.endpoint.SystemPublicMetrics;, + * @author Stephane Nicoll, + private Collection<PublicMetrics> allMetrics;, + PublicMetrics metrics = new
[+++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/README.adoc, + tagged with https://stackoverflow.com/tags/spring-boot[`spring-boot`]., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/README.adoc, +
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/.travis.yml, +++ b/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/.travis.yml, +++ b/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.core.type.AnnotatedTypeMetadata;, + EndpointMBeanExportProperties properties = new EndpointMBeanExportProperties();, + EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();, + static class JmxCondition extends SpringBootCondition {, +, + @Override, + public ConditionOutcome getMatchOutcome(ConditionContext context,, + AnnotatedTypeMetadata metadata) {, + String endpointEnabled = context.getEnvironment().getProperty(, + "endpoints.jmx.enabled", "true");, + String jmxEnabled = context.getEnvironment().getProperty(, + "spring.jmx.enabled", "true");, + return new ConditionOutcome("true".equalsIgnoreCase(endpointEnabled), +
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j spring-boot/stage-release, +$ fly -t spring trigger-job -j spring-boot/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j
[+++ b/spring-boot-dependencies/pom.xml, +<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <spring-boot.version>1.3.4.BUILD-SNAPSHOT</spring-boot.version>, +++ b/spring-boot-dependencies/pom.xml, +<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <spring-boot.version>1.3.4.BUILD-SNAPSHOT</spring-boot.version>, +++ b/spring-boot-samples/spring-boot-sample-actuator/build.gradle, + springBootVersion = '1.3.4.BUILD-SNAPSHOT', +++ b/spring-boot-dependencies/pom.xml, +<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <spring-boot.version>1.3.4.BUILD-SNAPSHOT</spring-boot.version>, +++ b/spring-boot-samples/spring-boot-sample-actuator/build.gradle, + springBootVersion = '1.3.4.BUILD-SNAPSHOT', +++ b/spring-boot-samples/spring-boot-sample-ant/build.xml, + <property name="spring-boot.version" value="1.3.4.BUILD-SNAPSHOT" />, +++ b/spring-boot-dependencies/pom.xml, +<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <spring-boot.version>1.3.4.BUILD-SNAPSHOT</spring-boot.version>, +++ b/spring-boot-samples/spring-boot-sample-actuator/build.gradle, + springBootVersion = '1.3.4.BUILD-SNAPSHOT', +++ b/spring-boot-samples/spring-boot-sample-ant/build.xml, + <property name="spring-boot.version" value="1.3.4.BUILD-SNAPSHOT" />, +++ b/spring-boot-samples/spring-boot-sample-logback/build.gradle, + springBootVersion = '1.3.4.BUILD-SNAPSHOT', +++ b/spring-boot-dependencies/pom.xml, +<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <spring-boot.version>1.3.4.BUILD-SNAPSHOT</spring-boot.version>, +++ b/spring-boot-samples/spring-boot-sample-actuator/build.gradle, + springBootVersion = '1.3.4.BUILD-SNAPSHOT',
[+++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.settings-template.xml, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.settings-template.xml, +++ b/README.adoc, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/eclipse/org.eclipse.jdt.core.prefs, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/eclipse/org.eclipse.jdt.core.prefs, +++ b/pom.xml, + <version>1.5.7.BUILD-SNAPSHOT</version>, + <module>spring-boot-actuator-docs</module>, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/eclipse/org.eclipse.jdt.core.prefs, +++ b/pom.xml, + <version>1.5.7.BUILD-SNAPSHOT</version>, + <module>spring-boot-actuator-docs</module>, +++ b/spring-boot-actuator-docs/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-parent</artifactId>, + <version>1.5.7.BUILD-SNAPSHOT</version>, + <relativePath>../spring-boot-parent</relativePath>, + </parent>, + <artifactId>spring-boot-actuator-docs</artifactId>, + <name>Spring Boot Actuator
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <influxdb-java.version>2.9</influxdb-java.version>]
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>neo4j-snapshots</id>, + <url>http://m2.neo4j.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>neo4j-snapshots</id>, + <url>http://m2.neo4j.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, +
[+++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +sudo: false, +before_script: travis_wait 30 ./mvnw install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +sudo: false, +before_script: travis_wait 30 ./mvnw install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +sudo: false, +before_script: travis_wait
[+++ b/spring-boot-actuator/pom.xml, + <groupId>org.springframework.data</groupId>, + <artifactId>spring-data-elasticsearch</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-actuator/pom.xml, + <groupId>org.springframework.data</groupId>, + <artifactId>spring-data-elasticsearch</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ElasticsearchHealthIndicatorConfiguration.java, +/*, + * Copyright 2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +++ b/.mvn/jvm.config, +-Xmx512m,
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/pom.xml, + <id>junit-snapshot</id>, + <name>Junit Snapshot</name>, + <url>https://oss.sonatype.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, +++ b/pom.xml, + <id>junit-snapshot</id>, + <name>Junit Snapshot</name>, + <url>https://oss.sonatype.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +import org.junit.jupiter.api.AfterEach;, +import org.junit.jupiter.api.Test;, + @AfterEach, +++ b/pom.xml, + <id>junit-snapshot</id>, + <name>Junit Snapshot</name>, + <url>https://oss.sonatype.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +import org.junit.jupiter.api.AfterEach;, +import org.junit.jupiter.api.Test;, + @AfterEach, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/amqp/RabbitHealthIndicatorAutoConfigurationTests.java, +import org.junit.jupiter.api.Test;, +++ b/pom.xml, + <id>junit-snapshot</id>, + <name>Junit Snapshot</name>, + <url>https://oss.sonatype.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +import
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, +
[+++ b/.gitignore, +.factorypath, +++ b/.gitignore, +.factorypath, +++ b/.travis.yml, +services:, + - mongodb, + - redis, +++ b/.gitignore, +.factorypath, +++ b/.travis.yml, +services:, + - mongodb, + - redis, +++ b/CONTRIBUTING.adoc, +== Using GitHub issues, +We use GitHub issues to track bugs and enhancements. If you have a general usage question, +please ask on http://stackoverflow.com[Stack Overflow]. The Spring Boot team and the, +broader community monitor the http://stackoverflow.com/tags/spring-boot[`spring-boot`], +tag., +, +If you are reporting a bug, please help to speed up problem diagnosis by providing as much, +information as possible. Ideally, that would include a small, +https://github.com/spring-projects/spring-boot-issues[sample project] that reproduces the, +problem.,
[+++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.9/apache-maven-3.3.9-bin.zip, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.9/apache-maven-3.3.9-bin.zip, +++ b/.settings-template.xml, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.9/apache-maven-3.3.9-bin.zip, +++ b/.settings-template.xml, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests until you are ready, +to submit a pull request:, + $ ./mvnw clean install -DskipTests, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.9/apache-maven-3.3.9-bin.zip, +++ b/.settings-template.xml, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests until you are ready, +to submit a pull request:, + $ ./mvnw clean install -DskipTests, +++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/,
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/SpringBootHypermediaApplication.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.lang.UsesJava8;, + @UsesJava8, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/SpringBootHypermediaApplication.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.lang.UsesJava8;, + @UsesJava8, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, +
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/README.adoc, += Spring Boot image:https://build.spring.io/plugins/servlet/buildStatusImage/BOOT-PUB["Build Status", link="https://build.spring.io/browse/BOOT-PUB"], +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/README.adoc, + tagged with https://stackoverflow.com/tags/spring-boot[`spring-boot`]., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/README.adoc, +
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, +
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, +
[+++ b/spring-boot-project/spring-boot-docs/pom.xml, + <goal>unpack</goal>, + <artifactItems>, + <artifactItem>, + <groupId>io.spring.docresources</groupId>, + <artifactId>spring-doc-resources</artifactId>, + <version>${spring-doc-resources.version}</version>, + <type>zip</type>, + </artifactItem>, + </artifactItems>, +++ b/spring-boot-project/spring-boot-docs/pom.xml, + <goal>unpack</goal>, + <artifactItems>, + <artifactItem>, + <groupId>io.spring.docresources</groupId>, + <artifactId>spring-doc-resources</artifactId>, + <version>${spring-doc-resources.version}</version>, + <type>zip</type>, + </artifactItem>, + </artifactItems>, +++ b/spring-boot-project/spring-boot-parent/pom.xml, + <spring-doc-resources.version>0.1.0.BUILD-SNAPSHOT</spring-doc-resources.version>]
[+++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/eclipse/spring-boot-project.setup, + value="org.hamcrest.Matchers.*;org.junit.Assert.*;org.mockito.BDDMockito.*;org.mockito.Matchers.*;org.mockito.Mockito.*;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;org.springframework.test.web.servlet.result.MockMvcResultMatchers.*"/>, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/eclipse/spring-boot-project.setup, + value="org.hamcrest.Matchers.*;org.junit.Assert.*;org.mockito.BDDMockito.*;org.mockito.Matchers.*;org.mockito.Mockito.*;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;org.springframework.test.web.servlet.result.MockMvcResultMatchers.*"/>, +++ b/pom.xml, + <version>1.3.4.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/eclipse/spring-boot-project.setup, + value="org.hamcrest.Matchers.*;org.junit.Assert.*;org.mockito.BDDMockito.*;org.mockito.Matchers.*;org.mockito.Mockito.*;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;org.springframework.test.web.servlet.result.MockMvcResultMatchers.*"/>, +++ b/pom.xml, + <version>1.3.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.4.BUILD-SNAPSHOT</version>, + <artifactId>spring-boot-starter-web</artifactId>, + <artifactId>spring-boot-actuator</artifactId>, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/eclipse/spring-boot-project.setup, + value="org.hamcrest.Matchers.*;org.junit.Assert.*;org.mockito.BDDMockito.*;org.mockito.Matchers.*;org.mockito.Mockito.*;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;org.springframework.test.web.servlet.result.MockMvcResultMatchers.*"/>, +++ b/pom.xml, + <version>1.3.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.4.BUILD-SNAPSHOT</version>, + <artifactId>spring-boot-starter-web</artifactId>, + <artifactId>spring-boot-actuator</artifactId>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/configprops.adoc, +`<prefix>.CONFIGURATION_PROPERTIES`, where `<prefix>` is the environment key prefix, +specified in the `@ConfigurationProperties` annotation., +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/eclipse/spring-boot-project.setup, + value="org.hamcrest.Matchers.*;org.junit.Assert.*;org.mockito.BDDMockito.*;org.mockito.Matchers.*;org.mockito.Mockito.*;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;org.springframework.test.web.servlet.result.MockMvcResultMatchers.*"/>, +++ b/pom.xml, + <version>1.3.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.4.BUILD-SNAPSHOT</version>, + <artifactId>spring-boot-starter-web</artifactId>,
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.travis.yml, +++ b/.gitignore, +++ b/.travis.yml, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/.gitignore, +++ b/.travis.yml, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, + <version>1.2.5.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/.gitignore, +++ b/.travis.yml, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, + <version>1.2.5.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/spring-boot-actuator/pom.xml,
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.travis.yml, +services: mongodb, +++ b/.gitignore, +++ b/.travis.yml, +services: mongodb, +++ b/CONTRIBUTING.adoc, +given the ability to merge pull requests. Use ``Phillip Webb'' or ``Dave Syer'' in the, + the ``Importing into eclipse'' instructions below you should get project specific, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +http://maven.apache.org/run-maven/index.html[Apache Maven] v3.0.6 or above and JDK 1.7., +a `MAVEN_OPTS` environment variable with the value `-Xmx512m -XX:MaxPermSize=128m`, +`-Xmx512m -XX:MaxPermSize=128m`. We generate more artifacts when running the full build, +++ b/.gitignore, +++ b/.travis.yml, +services: mongodb, +++ b/CONTRIBUTING.adoc, +given
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, + * Copyright 2012-2018 the original author or authors., + String factoryName = BeanFactory.FACTORY_BEAN_PREFIX + name;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, + * Copyright 2012-2018 the original author or authors., + String factoryName = BeanFactory.FACTORY_BEAN_PREFIX + name;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, + * Copyright 2012-2018 the original author or authors., + List<String> candidates = new ArrayList<>();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, + * Copyright 2012-2018 the original author or authors., + String factoryName = BeanFactory.FACTORY_BEAN_PREFIX + name;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, + * Copyright 2012-2018 the original author or authors., + List<String> candidates = new ArrayList<>();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanner.java, + * Copyright 2012-2018 the original author or authors.,
[+++ b/spring-boot-dependencies/pom.xml, + <neo4j-ogm.version>3.0.0-M02</neo4j-ogm.version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target,
[+++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, + <artifactId>spring-security-oauth2-jose</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.springframework.security</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-web</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>]
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +++ b/.mvn/jvm.config, +-Xmx512m,
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java, + "spring.data.neo4j.uri=file:relative/path/to/my.db");, + "file:relative/path/to/my.db");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java, + "spring.data.neo4j.uri=file:relative/path/to/my.db");, + "file:relative/path/to/my.db");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationTests.java, +import org.springframework.boot.testsupport.BuildOutput;, + private final BuildOutput buildOutput = new BuildOutput(getClass());, +, + File emptyDirectory = new File(this.buildOutput.getTestResourcesLocation(),, + "empty-templates/empty-directory");, + emptyDirectory.mkdirs();, + this.contextRunner, + .withPropertyValues("spring.freemarker.templateLoaderPath:", + + "classpath:/empty-templates/empty-directory/"), + .run((context) -> assertThat(this.output.toString()), + .doesNotContain("Cannot find template location"));, + new File(this.buildOutput.getTestResourcesLocation(),, + "empty-templates/empty-directory").mkdirs();, + + "classpath:/does-not-exist/,classpath:/empty-templates/empty-directory/"), + .run((context) -> assertThat(this.output.toString()), + .doesNotContain("Cannot find template location"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java, + "spring.data.neo4j.uri=file:relative/path/to/my.db");, + "file:relative/path/to/my.db");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationTests.java, +import org.springframework.boot.testsupport.BuildOutput;, + private final BuildOutput buildOutput = new BuildOutput(getClass());, +, + File emptyDirectory = new File(this.buildOutput.getTestResourcesLocation(),, + "empty-templates/empty-directory");, + emptyDirectory.mkdirs();, + this.contextRunner,
[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/data/ByteArrayRandomAccessData.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, +
[+++ b/spring-boot-dependencies/pom.xml, + <activemq.version>5.13.3</activemq.version>]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings,
[+++ b/.github/ISSUE_TEMPLATE.md, +<!--, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +, +Question, +, +Please ask questions about how to use something, or to understand why something isn't, +working as you expect it to, on Stack Overflow using the spring-boot tag., +, +Bug report, +, +Please provide details of the problem, including the version of Spring Boot that you, +are using. If possible, please provide a test case or sample application that reproduces, +the problem. This makes it much easier for us to diagnose the problem and to verify that, +we have fixed
[+++ b/CODE_OF_CONDUCT.adoc, += Contributor Code of Conduct, +, +As contributors and maintainers of this project, and in the interest of fostering an open, +and welcoming community, we pledge to respect all people who contribute through reporting, +issues, posting feature requests, updating documentation, submitting pull requests or, +patches, and other activities., +, +We are committed to making participation in this project a harassment-free experience for, +everyone, regardless of level of experience, gender, gender identity and expression,, +sexual orientation, disability, personal appearance, body size, race, ethnicity, age,, +religion, or nationality., +, +Examples of unacceptable behavior by participants include:, +, +* The
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/SessionsEndpointDocumentationTests.java, + given(this.sessionRepository.findByPrincipalName("alice")).willReturn(sessions);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/SessionsEndpointDocumentationTests.java, + given(this.sessionRepository.findByPrincipalName("alice")).willReturn(sessions);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/session/SessionsEndpoint.java, + .findByPrincipalName(username);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/SessionsEndpointDocumentationTests.java, + given(this.sessionRepository.findByPrincipalName("alice")).willReturn(sessions);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/session/SessionsEndpoint.java, + .findByPrincipalName(username);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/session/SessionsEndpointTests.java, + given(this.repository.findByPrincipalName("user")), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/SessionsEndpointDocumentationTests.java, + given(this.sessionRepository.findByPrincipalName("alice")).willReturn(sessions);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/session/SessionsEndpoint.java, + .findByPrincipalName(username);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/session/SessionsEndpointTests.java, + given(this.repository.findByPrincipalName("user")), +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/session/SessionsEndpointWebIntegrationTests.java, + * Copyright 2012-2018 the original author or authors., + given(repository.findByPrincipalName("user")).willReturn(Collections.emptyMap());, + given(repository.findByPrincipalName("user"))]
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.data.couchbase.core.CouchbaseTemplate;, +import org.springframework.data.couchbase.repository.support.IndexManager;, +@ConditionalOnClass({CouchbaseBucket.class, AbstractCouchbaseConfiguration.class}), +, + @Override, + @ConditionalOnMissingBean(name = "couchbaseTemplate"), + @Bean(name = "couchbaseTemplate"), + public CouchbaseTemplate couchbaseTemplate() throws Exception {, + return super.couchbaseTemplate();, + }, +, + @Override, + @ConditionalOnMissingBean(name = "couchbaseIndexManager"), + @Bean(name = "couchbaseIndexManager"), + public IndexManager indexManager() {, + if (this.properties.isAutoIndex()) {, + return new IndexManager(true, true, true);, + }, + else {, + return new IndexManager(false, false, false);, + }, + }, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.data.couchbase.core.CouchbaseTemplate;, +import org.springframework.data.couchbase.repository.support.IndexManager;, +@ConditionalOnClass({CouchbaseBucket.class, AbstractCouchbaseConfiguration.class}), +, + @Override, + @ConditionalOnMissingBean(name = "couchbaseTemplate"), + @Bean(name = "couchbaseTemplate"), + public CouchbaseTemplate couchbaseTemplate() throws Exception {,
[+++ b/spring-boot-dependencies/pom.xml, + <mongodb.version>2.13.3</mongodb.version>]
[+++ b/spring-boot-actuator/pom.xml, + <artifactId>HikariCP</artifactId>, +++ b/spring-boot-actuator/pom.xml, + <artifactId>HikariCP</artifactId>, +++ b/spring-boot-autoconfigure/pom.xml, + <artifactId>HikariCP</artifactId>, +++ b/spring-boot-actuator/pom.xml, + <artifactId>HikariCP</artifactId>, +++ b/spring-boot-autoconfigure/pom.xml, + <artifactId>HikariCP</artifactId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariDriverConfigurationFailureAnalyzer.java, + private static final String EXPECTED_MESSAGE = "cannot use driverClassName and ", + + "dataSourceClassName together.";, +++ b/spring-boot-actuator/pom.xml, + <artifactId>HikariCP</artifactId>, +++ b/spring-boot-autoconfigure/pom.xml, + <artifactId>HikariCP</artifactId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariDriverConfigurationFailureAnalyzer.java, + private static final String EXPECTED_MESSAGE = "cannot use driverClassName and ", + + "dataSourceClassName together.";, +++ b/spring-boot-dependencies/pom.xml]
[+++ b/spring-boot-javadoc/pom.xml, + <packaging>jar</packaging>, + <groupId>org.jfrog.buildinfo</groupId>, + <artifactId>artifactory-maven-plugin</artifactId>, + <configuration>, + <deployProperties>, + <zip.type>docs</zip.type>, + <zip.deployed>false</zip.deployed>, + </deployProperties>, + </configuration>, + </plugin>, + <plugin>, + <id>attach-javadocs</id>, + <goal>jar</goal>, +++ b/spring-boot-javadoc/pom.xml, + <packaging>jar</packaging>, + <groupId>org.jfrog.buildinfo</groupId>, + <artifactId>artifactory-maven-plugin</artifactId>, + <configuration>, + <deployProperties>, + <zip.type>docs</zip.type>, + <zip.deployed>false</zip.deployed>, + </deployProperties>, + </configuration>, + </plugin>, + <plugin>, + <id>attach-javadocs</id>, + <goal>jar</goal>, +++ b/spring-boot-parent/pom.xml, + <pluginManagement>, + <plugins>, + <plugin>, + <groupId>org.jfrog.buildinfo</groupId>, + <artifactId>artifactory-maven-plugin</artifactId>, + <version>2.2.2</version>, + </plugin>, + </plugins>, + </pluginManagement>, + <pluginRepository>, + <id>jfrog</id>, + <name>JFrog Repository</name>, + <url>http://dl.bintray.com/jfrog/jfrog-jars/</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java, +import io.netty.handler.ssl.SslContextBuilder;, + HttpClient client = HttpClient.create().secure((sslContextSpec) -> sslContextSpec, + .forClient().sslContext(this::configureSsl));, + private SslContextBuilder configureSsl(SslContextBuilder builder) {, + return builder.sslProvider(SslProvider.JDK), + .trustManager(InsecureTrustManagerFactory.INSTANCE);, + }, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java, +import io.netty.handler.ssl.SslContextBuilder;, + HttpClient client = HttpClient.create().secure((sslContextSpec) -> sslContextSpec, + .forClient().sslContext(this::configureSsl));, + private SslContextBuilder configureSsl(SslContextBuilder builder) {, + return builder.sslProvider(SslProvider.JDK), + .trustManager(InsecureTrustManagerFactory.INSTANCE);, + }, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java, + @SuppressWarnings("unused"), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java, +import io.netty.handler.ssl.SslContextBuilder;, + HttpClient client = HttpClient.create().secure((sslContextSpec) -> sslContextSpec, + .forClient().sslContext(this::configureSsl));, + private SslContextBuilder configureSsl(SslContextBuilder builder) {, + return builder.sslProvider(SslProvider.JDK), + .trustManager(InsecureTrustManagerFactory.INSTANCE);, + }, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java, + @SuppressWarnings("unused"), +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/client/RestTemplateBuilderTests.java]
[+++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Value;, + @Value("${spring.batch.job.names:}"), + private String jobNames;, + if (StringUtils.hasText(this.jobNames)) {, + runner.setJobNames(this.jobNames);, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Value;, + @Value("${spring.batch.job.names:}"), + private String jobNames;, + if (StringUtils.hasText(this.jobNames)) {, + runner.setJobNames(this.jobNames);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +public class BatchDatabaseInitializer implements EnvironmentAware {, + private static
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <spring-security.version>5.1.1.RELEASE</spring-security.version>]
[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + this.profiles.removeAll(this.processedProfiles);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + this.profiles.removeAll(this.processedProfiles);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, + @Test, + public void includeLoop() {, + // gh-13361, + SpringApplication application = new SpringApplication(Config.class);, + application.setWebApplicationType(WebApplicationType.NONE);, + this.context = application.run("--spring.config.name=applicationloop");, + ConfigurableEnvironment environment = this.context.getEnvironment();, + assertThat(environment.acceptsProfiles("loop")).isTrue();, +, + }, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + this.profiles.removeAll(this.processedProfiles);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, + @Test, + public void includeLoop() {, + // gh-13361, + SpringApplication application = new SpringApplication(Config.class);, + application.setWebApplicationType(WebApplicationType.NONE);, + this.context = application.run("--spring.config.name=applicationloop");, + ConfigurableEnvironment environment = this.context.getEnvironment();, + assertThat(environment.acceptsProfiles("loop")).isTrue();, +, + }, +, +++ b/spring-boot-project/spring-boot/src/test/resources/applicationloop-loop.properties, +spring.profiles.include=loop, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + this.profiles.removeAll(this.processedProfiles);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, + @Test, + public void includeLoop() {, +
[+++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, + private PublicMetrics metrics;, + if (this.metrics == null) {, + this.metrics = new VanillaPublicMetrics(this.metricRepository);, + }, + return new MetricsEndpoint(this.metrics);, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, + private PublicMetrics metrics;, + if (this.metrics == null) {, + this.metrics = new VanillaPublicMetrics(this.metricRepository);, + }, + return new MetricsEndpoint(this.metrics);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/PublicMetrics.java, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, + private PublicMetrics metrics;, + if (this.metrics == null) {, + this.metrics =
[+++ b/spring-boot-dependencies/pom.xml, + <hazelcast.version>3.6.3</hazelcast.version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/README.adoc, + tagged with https://stackoverflow.com/tags/spring-boot[`spring-boot`]., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/README.adoc, + tagged with https://stackoverflow.com/tags/spring-boot[`spring-boot`]., +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job
[+++ b/.editorconfig, +root=true, +, +[*.java], +indent_style = tab, +indent_size = 4, +continuation_indent_size = 8, +, +[*.xml], +indent_style = tab, +indent_size = 4, +continuation_indent_size = 8, +++ b/.editorconfig, +root=true, +, +[*.java], +indent_style = tab, +indent_size = 4, +continuation_indent_size = 8, +, +[*.xml], +indent_style = tab, +indent_size = 4, +continuation_indent_size = 8, +++ b/.github/ISSUE_TEMPLATE.md, +<!--, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +, +Question, +, +Please ask questions about how to use something, or to understand why something isn't, +working as you expect it to, on Stack Overflow using the spring-boot tag., +, +Bug
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.3.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.3.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + .<String>unmodifiableSet(new HashSet<String>(, + this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), + .perform(get("/logfile").accept(MediaType.TEXT_PLAIN), + .perform(get("/loggers/org.springframework.boot"), + .perform(post("/loggers/org.springframework.boot"), + .contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), + .perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + final Map<String, Object> model = new LinkedHashMap<String, Object>();, + final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, + .perform(get(endpointPath), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + List<? extends MvcEndpoint> endpoints = new ArrayList<MvcEndpoint>(, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, +
[+++ b/pom.xml, + <module>spring-boot</module>, + <module>spring-boot-autoconfigure</module>, + <module>spring-boot-actuator</module>, +++ b/pom.xml, + <module>spring-boot</module>, + <module>spring-boot-autoconfigure</module>, + <module>spring-boot-actuator</module>, +++ b/spring-boot-dependencies/pom.xml, +<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">]
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscoverer.java, +import java.util.List;, + * @param endpointPathMappers the endpoint path mappers, + EndpointMediaTypes endpointMediaTypes, List<PathMapper> endpointPathMappers,, + endpointPathMappers, invokerAdvisors, filters);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscoverer.java, +import java.util.List;, + * @param endpointPathMappers the endpoint path mappers, + EndpointMediaTypes endpointMediaTypes, List<PathMapper> endpointPathMappers,, + endpointPathMappers, invokerAdvisors, filters);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java, + this.applicationContext, parameterMapper, endpointMediaTypes, null,, + Collections.emptyList(), Collections.emptyList());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscoverer.java, +import java.util.List;, + * @param endpointPathMappers the endpoint path mappers, + EndpointMediaTypes endpointMediaTypes, List<PathMapper> endpointPathMappers,, + endpointPathMappers, invokerAdvisors, filters);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java, + this.applicationContext, parameterMapper, endpointMediaTypes, null,, + Collections.emptyList(), Collections.emptyList());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java, + this.applicationContext, parameterMapper, endpointMediaTypes, null,, + Collections.emptyList(), Collections.emptyList());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscoverer.java, +import java.util.List;, + *
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + .<String>unmodifiableSet(new HashSet<String>(, + this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), + .perform(get("/logfile").accept(MediaType.TEXT_PLAIN), + .perform(get("/loggers/org.springframework.boot"), + .perform(post("/loggers/org.springframework.boot"), + .contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), + .andExpect(status().isOk()).andDo(document("set-logger"));, + .perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + final Map<String, Object> model = new LinkedHashMap<String, Object>();, + final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, + .perform(get(endpointPath), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + PrintWriter writer = new PrintWriter(file, "UTF-8");, + try {, + finally {, + writer.close();, + }, + List<?
[+++ b/spring-boot-test-autoconfigure/pom.xml]
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, +import org.apache.commons.pool.impl.GenericObjectPool;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;, +import org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration.RedisProperties.Pool;, +import org.springframework.data.redis.connection.PoolConfig;, +import org.springframework.data.redis.connection.lettuce.DefaultLettucePool;, +import org.springframework.data.redis.connection.lettuce.LettucePool;, + @ConditionalOnMissingClass(name = "org.apache.commons.pool.impl.GenericObjectPool"), + protected static class RedisConnectionConfiguration {, + @ConditionalOnMissingBean, + }, +, + @Configuration, + @ConditionalOnClass(GenericObjectPool.class), + protected static class RedisPooledConnectionConfiguration {, +, + @Autowired, + private RedisProperties config;, +, + @Bean, + @ConditionalOnMissingBean, + RedisConnectionFactory redisConnectionFactory() throws UnknownHostException {, + if (this.config.getPool() != null) {, + LettuceConnectionFactory factory = new LettuceConnectionFactory(, + lettucePool());, + return factory;, + }, + LettuceConnectionFactory factory = new LettuceConnectionFactory(, + this.config.getHost(), this.config.getPort());, + if (this.config.getPassword() != null) {, + factory.setPassword(this.config.getPassword());, + }, + return factory;, +
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +import java.util.Optional;, +, +import org.springframework.core.env.Environment;, +import org.springframework.util.ConcurrentReferenceHashMap;, + private static final ConcurrentReferenceHashMap<Environment, Optional<Boolean>> enabledByDefaultCache = new ConcurrentReferenceHashMap<>();, +, + Environment environment = context.getEnvironment();, + Boolean userDefinedEnabled = environment.getProperty(key, Boolean.class);, + Boolean userDefinedDefault = isEnabledByDefault(environment);, + private Boolean isEnabledByDefault(Environment environment) {, + Optional<Boolean> enabledByDefault = enabledByDefaultCache.get(environment);, + if (enabledByDefault == null) {, + enabledByDefault = Optional.ofNullable(, + environment.getProperty(ENABLED_BY_DEFAULT_KEY, Boolean.class));, + enabledByDefaultCache.put(environment, enabledByDefault);, + }, + return enabledByDefault.orElse(null);, + }, +]
[+++ b/pom.xml, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-validator</artifactId>, + <version>4.3.1.Final</version>, + </dependency>, +++ b/pom.xml, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-validator</artifactId>, + <version>4.3.1.Final</version>, + </dependency>, +++ b/spring-bootstrap-actuator/pom.xml, +++ b/pom.xml, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-validator</artifactId>, + <version>4.3.1.Final</version>, + </dependency>, +++ b/spring-bootstrap-actuator/pom.xml, +++ b/spring-bootstrap-samples/pom.xml, + <module>spring-bootstrap-ui-sample</module>, +++ b/pom.xml, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-validator</artifactId>, + <version>4.3.1.Final</version>, + </dependency>, +++ b/spring-bootstrap-actuator/pom.xml, +++ b/spring-bootstrap-samples/pom.xml, + <module>spring-bootstrap-ui-sample</module>, +++ b/spring-bootstrap-samples/spring-bootstrap-ui-sample/pom.xml]
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <appengine-sdk.version>1.9.60</appengine-sdk.version>, + <httpclient.version>4.5.4</httpclient.version>, + <mysql.version>5.1.45</mysql.version>, + <spring-retry.version>1.2.2.RELEASE</spring-retry.version>, + <tomcat.version>8.5.24</tomcat.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <rxjava.version>1.3.0</rxjava.version>]
[+++ b/CODE_OF_CONDUCT.adoc, += Contributor Code of Conduct, +, +As contributors and maintainers of this project, and in the interest of fostering an open, +and welcoming community, we pledge to respect all people who contribute through reporting, +issues, posting feature requests, updating documentation, submitting pull requests or, +patches, and other activities., +, +We are committed to making participation in this project a harassment-free experience for, +everyone, regardless of level of experience, gender, gender identity and expression,, +sexual orientation, disability, personal appearance, body size, race, ethnicity, age,, +religion, or nationality., +, +Examples of unacceptable behavior by participants include:, +, +* The
[+++ b/.gitignore, +*.ipr, +*.iws, +.DS_Store, +++ b/.gitignore, +*.ipr, +*.iws, +.DS_Store, +++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>,
[+++ b/CONTRIBUTING.adoc, +=== Importing into IntelliJ IDEA, +To open the project in IntelliJ IDEA, select "`File`" -> "`Open`" and then click on the, +root `pom.xml`., +, +, +, +==== Install the Spring Formatter plugin, +If you haven't done so, install the formatter plugin so that proper formatting rules are, +applied automatically when you reformat code in the IDE., +, +* Download the latest https://search.maven.org/search?q=g:io.spring.javaformat%20AND%20a:spring-javaformat-intellij-plugin[IntelliJ IDEA plugin]., +* Select "`IntelliJ IDEA`" -> "`Preferences`"., +* Select "`Plugins`"., +* Select the wheel and "`Install Plugin from Disk...`"., +* Select the jar file you've downloaded., +, +, +, +==== Import additional code style,
[+++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.VanillaPublicMetrics;, + private MetricReader metricRepository = new InMemoryMetricRepository();, + private PublicMetrics metrics;, + if (this.metrics == null) {, + this.metrics = new VanillaPublicMetrics(this.metricRepository);, + return new MetricsEndpoint(this.metrics);, + @Bean, + @ConditionalOnMissingBean, + public ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint() {, + ConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();, + endpoint.setConfigurationBeanFactoryMetaData(this.beanFactoryMetaData);, + return endpoint;, + }, +, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.VanillaPublicMetrics;, + private MetricReader metricRepository = new InMemoryMetricRepository();, + private PublicMetrics metrics;, + if (this.metrics
[+++ b/.github/ISSUE_TEMPLATE.md, +<!--, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +, +Question, +, +Please ask questions about how to use something, or to understand why something isn't, +working as you expect it to, on Stack Overflow using the spring-boot tag., +, +Bug report, +, +Please provide details of the problem, including the version of Spring Boot that you, +are using. If possible, please provide a test case or sample application that reproduces, +the problem. This makes it much easier for us to diagnose the problem and to verify that, +we have fixed
[+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/PomCondition.java, +import org.assertj.core.api.Condition;, +import org.assertj.core.description.Description;]
[+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/AbstractBootArchiveTests.java, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/AbstractBootArchiveTests.java, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/BootWarTests.java, + assertThat(getTask().getArchivePath()).exists();, + assertThat(getTask().getArchivePath()).exists();, + assertThat(getTask().getArchivePath()).exists();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/AbstractBootArchiveTests.java, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, + assertThat(this.task.getArchivePath()).exists();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/BootWarTests.java, + assertThat(getTask().getArchivePath()).exists();, + assertThat(getTask().getArchivePath()).exists();, + assertThat(getTask().getArchivePath()).exists();, +++ b/spring-boot-samples/spring-boot-sample-test/src/test/java/sample/test/web/UserVehicleControllerTests.java, + this.applicationContext.getBean(WelcomeCommandLineRunner.class);]
[+++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +++ b/spring-boot-starters/spring-boot-starter-parent/pom.xml]
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j spring-boot/stage-release, +$ fly -t spring trigger-job -j spring-boot/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ /dev/null, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +http://www.springsource.com/developer/sts[Spring Tools Suite] or, +++ /dev/null, +++ /dev/null, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +http://www.springsource.com/developer/sts[Spring Tools Suite] or, +++ b/README.adoc, +* Ask a questions - we monitor http://stackoverflow.com[stackoverflow.com] for questions, +before your first change however trivial. (Or if you filed such an agreement already for, +The reference documentation requires the documentation of the maven plugin to be, + $ ./mvnw clean install -pl spring-boot-docs -Pdefault,full,
[+++ b/spring-boot-dependencies/pom.xml, + <undertow.version>1.3.0.CR2</undertow.version>]
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java, + return new ReactorClientHttpConnector((options) -> options.sslSupport(, + (sslContextBuilder) -> sslContextBuilder.sslProvider(SslProvider.JDK), + .trustManager(InsecureTrustManagerFactory.INSTANCE)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java, + return new ReactorClientHttpConnector((options) -> options.sslSupport(, + (sslContextBuilder) -> sslContextBuilder.sslProvider(SslProvider.JDK), + .trustManager(InsecureTrustManagerFactory.INSTANCE)));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java, + this.contextRunner.run((context) -> this.contextRunner.withParent(context), + .run((child) -> assertThat(child), + .hasSingleBean(HeaderChannelRegistry.class)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java, + return new ReactorClientHttpConnector((options) -> options.sslSupport(, + (sslContextBuilder) -> sslContextBuilder.sslProvider(SslProvider.JDK), + .trustManager(InsecureTrustManagerFactory.INSTANCE)));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java, + this.contextRunner.run((context) -> this.contextRunner.withParent(context), + .run((child) -> assertThat(child), + .hasSingleBean(HeaderChannelRegistry.class)));, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java, + return new ReactorClientHttpConnector((options) -> options.sslSupport(, + (sslContextBuilder) -> sslContextBuilder.sslProvider(SslProvider.JDK), + .trustManager(InsecureTrustManagerFactory.INSTANCE)));, + return new ReactorClientHttpConnector((options) -> options.sslSupport(, + (sslContextBuilder) -> sslContextBuilder.sslProvider(SslProvider.JDK), + .keyManager(clientKeyManagerFactory)));]
[+++ b/spring-boot-dependencies/pom.xml, + <tomcat.version>8.5.37</tomcat.version>]
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +, +[[boot-features-testing-spring-boot-application-arguments]], +==== Using Application Arguments, +have `@SpringBootTest` inject them using the `args` attribute., +include::{code-examples}/test/context/ApplicationArgumentsExampleTests.java[tag=example], +, +, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +, +[[boot-features-testing-spring-boot-application-arguments]], +==== Using Application Arguments, +have `@SpringBootTest` inject them using the `args` attribute., +include::{code-examples}/test/context/ApplicationArgumentsExampleTests.java[tag=example], +, +, +++ b/spring-boot-project/spring-boot-docs/src/main/java/org/springframework/boot/docs/test/context/ApplicationArgumentsExampleTests.java, +/*, + * Copyright 2012-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j
[+++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, +
[+++ b/spring-boot-dependencies/pom.xml, + <h2.version>1.3.176</h2.version>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests until you are ready, +to submit a pull request:, + $ ./mvnw clean install -DskipTests, +++ b/.settings-template.xml, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests until you are ready, +to submit a pull request:, + $ ./mvnw clean install -DskipTests, +++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param
[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoProviderAutoConfiguration.java, + return new EnvironmentInfoProvider(this.environment);, + return new ScmGitPropertiesInfoProvider(this.gitProperties);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoProviderAutoConfiguration.java, + return new EnvironmentInfoProvider(this.environment);, + return new ScmGitPropertiesInfoProvider(this.gitProperties);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/InfoEndpoint.java, + * The information, which the {@link InfoEndpoint} can provide can be customized to, + * display any information, however initially the info endpoint will provide git version, + * information (if available) and environment information,whose entries are prefixed with, + * info., + * In order to add additional information to the endpoint, one has to implement a class,, + * which implements the {@link org.springframework.boot.actuate.info.InfoProvider}, + * interface and
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java, + public ConditionEvaluationReport getDelta(ConditionEvaluationReport previousReport) {, + ConditionEvaluationReport delta = new ConditionEvaluationReport();, + for (Entry<String, ConditionAndOutcomes> entry : this.outcomes.entrySet()) {, + ConditionAndOutcomes previous = previousReport.outcomes.get(entry.getKey());, + if (previous == null, + || previous.isFullMatch() != entry.getValue().isFullMatch()) {, + entry.getValue(), + .forEach((conditionAndOutcome) -> delta.recordConditionEvaluation(, + entry.getKey(), conditionAndOutcome.getCondition(),, + conditionAndOutcome.getOutcome()));, + }, + }, + List<String> newExclusions = new ArrayList<>(this.exclusions);, + newExclusions.removeAll(previousReport.getExclusions());, + delta.recordExclusions(newExclusions);, + List<String> newUnconditionalClasses = new ArrayList<>(this.unconditionalClasses);, + newUnconditionalClasses.removeAll(previousReport.unconditionalClasses);, + delta.unconditionalClasses.addAll(newUnconditionalClasses);, + return delta;, + }, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java, + public ConditionEvaluationReport getDelta(ConditionEvaluationReport previousReport) {, + ConditionEvaluationReport delta = new ConditionEvaluationReport();, + for (Entry<String, ConditionAndOutcomes> entry :
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>neo4j-snapshots</id>, + <url>http://m2.neo4j.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>neo4j-snapshots</id>, + <url>http://m2.neo4j.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, +
[+++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +Properties are discovered via the presence of standard getters and setters with special, +handling for collection types (that will be detected even if only a getter is present). The, +annotation processor also supports the use of the `@Data`, `@Getter` and `@Setter` lombok, +annotations., +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +Properties are discovered via the presence of standard getters and setters with special, +handling for collection types (that will be detected even if only a getter is present). The, +annotation processor also supports the use of the `@Data`, `@Getter` and `@Setter` lombok, +annotations., +++ b/spring-boot-parent/pom.xml, + <groupId>org.projectlombok</groupId>, + <artifactId>lombok</artifactId>, + <version>1.12.6</version>, +
[+++ b/spring-boot-dependencies/pom.xml, + <version>2.7</version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +http://www.springsource.com/developer/sts[Spring Tools Suite] or, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +http://www.springsource.com/developer/sts[Spring
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t
[+++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>org.apache.commons</groupId>, + <artifactId>commons-dbcp2</artifactId>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>org.apache.commons</groupId>, + <artifactId>commons-dbcp2</artifactId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, + @Deprecated, + public org.springframework.boot.actuate.cache.GuavaCacheStatisticsProvider guavaCacheStatisticsProvider() {, + return new org.springframework.boot.actuate.cache.GuavaCacheStatisticsProvider();, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>org.apache.commons</groupId>, + <artifactId>commons-dbcp2</artifactId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, + @Deprecated, + public org.springframework.boot.actuate.cache.GuavaCacheStatisticsProvider guavaCacheStatisticsProvider() {, + return new org.springframework.boot.actuate.cache.GuavaCacheStatisticsProvider();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * @deprecated as of 1.5, +@Deprecated, + @Deprecated, + @Deprecated,
[+++ b/.bomr/bomr.yaml, +bomr:, + bom: spring-boot-dependencies/pom.xml, + upgrade:, + github:, + organization: spring-projects, + repository: spring-boot, + issue-labels:, + - 'type: dependency-upgrade', + policy: same-minor-version, + prohibited:, + - project: commons-collections, + versions:, + - '[20030101,)' # Old versions that use yyyymmdd format, + - project: dom4j, + versions:, + - '[20040101,)' # Old versions that use yyyymmdd format, + - project: ehcache, + versions:, + - '[2.10.6,2.11)' # 2.10.6 raised the Java baseline to Java 8, + verify:, + repositories:, + # Spring Data GemFire's GemFire dependencies, + - https://repo.spring.io/gemstone-release-pivotal-cache, +++ b/.bomr/bomr.yaml, +bomr:, + bom: spring-boot-dependencies/pom.xml, + upgrade:,
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <commons-pool2.version>2.6.0</commons-pool2.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <mongodb.version>2.12.2</mongodb.version>]
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/README.adoc, +* If you are upgrading, read the https://github.com/spring-projects/spring-boot/wiki[release notes], + for upgrade instructions and "new and noteworthy" features., +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, +
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/,
[+++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/loggers.adoc, +=== /loggers, +This endpoint allows you to view and modify the log levels for the loggers in your, +application. It builds on top of the `LoggingSystem` abstraction and supports the same, +logging frameworks. The logging levels are defined by the `LogLevel` enumeration and, +consist of the following values (although not all logging systems support the full set):, +, +* `TRACE`, +* `DEBUG`, +* `INFO`, +* `WARN`, +* `ERROR`, +* `FATAL`, +*
[+++ b/spring-boot-dependencies/pom.xml, + <undertow.version>1.3.14.Final</undertow.version>]
[+++ b/.gitignore, +++ b/.gitignore, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +services: mongodb, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +services: mongodb, +++ b/CONTRIBUTING.adoc, +given the ability to merge pull requests. Use ``Phillip Webb'' or ``Dave Syer'' in the, + the ``Importing into eclipse'' instructions below you should get project specific, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +* Add yourself as an `@author` to
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +🎁 Enhancement, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise
[+++ b/spring-boot-dependencies/pom.xml, + <htmlunit.version>2.23</htmlunit.version>, + <selenium-htmlunit.version>2.23.2</selenium-htmlunit.version>, + <version>${selenium-htmlunit.version}</version>, +++ b/spring-boot-dependencies/pom.xml, + <htmlunit.version>2.23</htmlunit.version>, + <selenium-htmlunit.version>2.23.2</selenium-htmlunit.version>, + <version>${selenium-htmlunit.version}</version>, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java, + Capabilities capabilities = mock(Capabilities.class);, + given(capabilities.getBrowserName()).willReturn("chrome");, + new LocalHostWebConnectionHtmlUnitDriver(null, capabilities);]
[+++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/AuditEvent.java, +, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/AuditEvent.java, +, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/AuditEventRepository.java, +, + * Repository for {@link AuditEvent}s., + * @author Dave Syer, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/AuditEvent.java, +, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/AuditEventRepository.java, +, + * Repository for {@link AuditEvent}s., + * @author Dave Syer, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/InMemoryAuditEventRepository.java, + * In-memory {@link AuditEventRepository} implementation., + * @author Dave Syer, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/AuditEvent.java, +, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/AuditEventRepository.java, +, + * Repository for {@link AuditEvent}s., + * @author Dave Syer, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/InMemoryAuditEventRepository.java, + * In-memory {@link AuditEventRepository} implementation., + * @author Dave Syer, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/listener/AuditApplicationEvent.java, +, + * {@link ApplicationEvent} to encapsulate {@link AuditEvent}s., + * @author Dave Syer, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/AuditEvent.java, +,
[+++ b/spring-boot-dependencies/pom.xml, + <mongodb.version>3.4.3</mongodb.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <rxjava.version>1.2.10</rxjava.version>]
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor;, + public SchedulerFactoryBeanCustomizer dataSourceCustomizer(, + QuartzProperties properties, DataSource dataSource,, + ObjectProvider<PlatformTransactionManager> transactionManager) {, + return schedulerFactoryBean -> {, + if (properties.getJobStoreType() == JobStoreType.JDBC) {, + schedulerFactoryBean.setDataSource(dataSource);, + PlatformTransactionManager txManager = transactionManager, + .getIfUnique();, + if (txManager != null) {, + schedulerFactoryBean.setTransactionManager(txManager);, + }, + }, + };, + public static DatabaseInitializerSchedulerDependencyPostProcessor databaseInitializerSchedulerDependencyPostProcessor() {, + return new DatabaseInitializerSchedulerDependencyPostProcessor();, + private static class DatabaseInitializerSchedulerDependencyPostProcessor, + extends AbstractDependsOnBeanFactoryPostProcessor {, + DatabaseInitializerSchedulerDependencyPostProcessor() {, + super(Scheduler.class, SchedulerFactoryBean.class,, + "quartzDatabaseInitializer");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AbstractDependsOnBeanFactoryPostProcessor;, + public SchedulerFactoryBeanCustomizer dataSourceCustomizer(, + QuartzProperties properties, DataSource dataSource,, + ObjectProvider<PlatformTransactionManager> transactionManager) {, + return schedulerFactoryBean ->
[+++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="false" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain
[+++ b/spring-boot-docs/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-parent</artifactId>, + <version>0.5.0.BUILD-SNAPSHOT</version>, + <relativePath>../spring-boot-parent</relativePath>, + </parent>, + <artifactId>spring-boot-docs</artifactId>, + <dependencies>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>spring-boot</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>spring-boot-autoconfigure</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>spring-boot-actuator</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>spring-boot-loader</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>spring-boot-loader-tools</artifactId>, + <version>${project.version}</version>, + </dependency>, + </dependencies>, + <profiles>, + <profile>, + <id>full</id>, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-javadoc-plugin</artifactId>, + <executions>,
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, +
[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AbstractBindHandler.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <micrometer.version>1.1.1</micrometer.version>]
[+++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, +
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurer.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-boot-dependencies/pom.xml, + <undertow.version>1.4.12.Final</undertow.version>]
[+++ b/.bomr/bomr.yaml, + bom: spring-boot-project/spring-boot-dependencies/pom.xml, + # Solr's Restlet dependencies, + - 'https://maven.restlet.com', + # Caffeine Simulator's dependencies, + - 'https://maven.imagej.net/content/repositories/public/', +++ b/.bomr/bomr.yaml, + bom: spring-boot-project/spring-boot-dependencies/pom.xml, + # Solr's Restlet dependencies, + - 'https://maven.restlet.com', + # Caffeine Simulator's dependencies, + - 'https://maven.imagej.net/content/repositories/public/', +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.bomr/bomr.yaml, + bom: spring-boot-project/spring-boot-dependencies/pom.xml, + # Solr's Restlet dependencies, + - 'https://maven.restlet.com', + # Caffeine Simulator's dependencies, + - 'https://maven.imagej.net/content/repositories/public/', +++ b/.gitignore, +*.sw?,
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +🎁 Enhancement, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise
[+++ b/.gitignore, +.factorypath, +++ b/.gitignore, +.factorypath, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.factorypath, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.mvn/wrapper/maven-wrapper.jar, +++ b/.gitignore, +.factorypath, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.mvn/wrapper/maven-wrapper.jar, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.gitignore, +.factorypath, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.mvn/wrapper/maven-wrapper.jar, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.travis.yml, +services:, + - mongodb, + - redis, +++ b/.gitignore, +.factorypath, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.mvn/wrapper/maven-wrapper.jar, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.travis.yml, +services:, + - mongodb, + - redis, +++ b/CONTRIBUTING.adoc, +== Using GitHub issues, +We use GitHub issues to track bugs and enhancements. If you have a general usage question, +please ask on http://stackoverflow.com[Stack Overflow]. The Spring Boot team
[+++ b/.gitignore, +interpolated*.xml, +++ b/.gitignore, +interpolated*.xml, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, + // If successful, leave it to run in case it's a server app, +++ b/.gitignore, +interpolated*.xml, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, + // If successful, leave it to run in case it's a server app, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/test/TestCommand.java, +import joptsimple.OptionSpec;, + protected void doOptions() {, + option("nohup",, + "Flag to indicate that the JVM should not exit when tests are finished");, + }, +, + @Override, + if (!options.has("nohup")) {, + System.exit(0); // TODO: non-zero if test fails?, + }, +++ b/.gitignore, +interpolated*.xml, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, + // If successful, leave it to run in
[+++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-junit-runners</module>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-junit-runners</module>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-junit-runners</module>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/loggers.adoc, +=== /loggers, +This endpoint allows you to view and modify the log levels for the loggers in your, +application. It builds on top of the `LoggingSystem` abstraction and supports the same, +logging frameworks. The logging levels are defined by the `LogLevel` enumeration and, +consists of the following values (although not all logging systems support the full set):, +, +* `TRACE`, +* `DEBUG`, +* `INFO`, +* `WARN`, +* `ERROR`, +* `FATAL`, +*
[+++ b/.github/ISSUE_TEMPLATE.md, +<!--, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +, +Question, +, +Please ask questions about how to use something, or to understand why something isn't, +working as you expect it to, on Stack Overflow using the spring-boot tag., +, +Bug report, +, +Please provide details of the problem, including the version of Spring Boot that you, +are using. If possible, please provide a test case or sample application that reproduces, +the problem. This makes it much easier for us to diagnose the problem and to verify that, +we have fixed
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/DatabaseLookup.java, + map.put(DatabaseDriver.HANA, Database.HANA);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/DatabaseLookup.java, + map.put(DatabaseDriver.HANA, Database.HANA);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/DatabaseLookupTests.java, + @Test, + public void getDatabaseWhenSapShouldReturnHana() throws Exception {, + testGetDatabase("jdbc:sap:", Database.HANA);, + }]
[+++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java, + * Copyright 2012-2018 the original author or authors., + parent.getParent().getParent());, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java, + * Copyright 2012-2018 the original author or authors., + parent.getParent().getParent());, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <groovy.version>2.4.13</groovy.version>]
[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + .getEmbeddedWebServer() != null) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + .getEmbeddedWebServer() != null) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.boot.context.embedded.EmbeddedWebServer;, + * {@link EmbeddedWebServer} running on a different port is required., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + .getEmbeddedWebServer() != null) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.boot.context.embedded.EmbeddedWebServer;, + * {@link EmbeddedWebServer} running on a different port is required., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/TomcatPublicMetrics.java, +import org.springframework.boot.context.embedded.EmbeddedWebServer;, + EmbeddedWebServer embeddedWebServer = applicationContext, + .getEmbeddedWebServer();, + if (embeddedWebServer instanceof TomcatEmbeddedServletContainer) {, + return getManager((TomcatEmbeddedServletContainer) embeddedWebServer);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + .getEmbeddedWebServer() != null) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.boot.context.embedded.EmbeddedWebServer;, + * {@link EmbeddedWebServer} running on a different port is required., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/TomcatPublicMetrics.java, +import org.springframework.boot.context.embedded.EmbeddedWebServer;, +
[+++ b/spring-boot-dependencies/pom.xml, + <spring-mobile.version>2.0.0.M1</spring-mobile.version>]
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsProperties.java, + private String metricName = "cache";, + public String getMetricName() {, + return this.metricName;, + public void setMetricName(String metricName) {, + this.metricName = metricName;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsProperties.java, + private String metricName = "cache";, + public String getMetricName() {, + return this.metricName;, + public void setMetricName(String metricName) {, + this.metricName = metricName;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java, + this.properties.getMetricName(), this.binderProviders);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsProperties.java, + private String metricName = "cache";, + public String getMetricName() {, + return this.metricName;, + public void setMetricName(String metricName) {, + this.metricName = metricName;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java, + this.properties.getMetricName(), this.binderProviders);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsConfiguration.java, + this.metricName = jdbcMetricsProperties.getMetricName();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsProperties.java, + private String
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.4.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.4.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + "endpoints.health.sensitive=true", "endpoints.actuator.enabled=false" }), +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.4.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + "endpoints.health.sensitive=true", "endpoints.actuator.enabled=false" }), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, + "endpoints.health.sensitive=false" }), +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.4.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + "endpoints.health.sensitive=true", "endpoints.actuator.enabled=false" }), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, + "endpoints.health.sensitive=false" }), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, + "endpoints.hypermedia.enabled=true" }),
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, + new DateTimeSerializer(jacksonJodaFormat, 0));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, + new DateTimeSerializer(jacksonJodaFormat, 0));, +++ b/spring-boot-dependencies/pom.xml, + <jackson.version>2.9.0</jackson.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <lombok.version>1.16.22</lombok.version>]
[+++ b/spring-boot-samples/spring-boot-sample-batch/pom.xml, + <scope>runtime</scope>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, +
[+++ b/CONTRIBUTING.adoc, +=== Importing into IntelliJ IDEA, +To open the project in IntelliJ IDEA, select "`File`" -> "`Open`" and then click on the, +root `pom.xml`., +, +, +, +==== Install the Spring Formatter plugin, +If you haven't done so, install the formatter plugin so that proper formatting rules are, +applied automatically when you reformat code in the IDE., +, +* Download the latest https://search.maven.org/search?q=g:io.spring.javaformat%20AND%20a:spring-javaformat-intellij-plugin[IntelliJ IDEA plugin]., +* Select "`IntelliJ IDEA`" -> "`Preferences`"., +* Select "`Plugins`"., +* Select the wheel and "`Install Plugin from Disk...`"., +* Select the jar file you've downloaded., +, +, +, +==== Import additional code style,
[+++ b/spring-boot-dependencies/pom.xml, + <selenium.version>3.1.0</selenium.version>]
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerAutoConfiguration.java, + ReactiveWebServerConfiguration.UndertowAutoConfiguration.class,, + ReactiveWebServerConfiguration.ReactorNettyAutoConfiguration.class}), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerAutoConfiguration.java, + ReactiveWebServerConfiguration.UndertowAutoConfiguration.class,, + ReactiveWebServerConfiguration.ReactorNettyAutoConfiguration.class}), +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerAutoConfiguration.java, + ReactiveWebServerConfiguration.UndertowAutoConfiguration.class,, + ReactiveWebServerConfiguration.ReactorNettyAutoConfiguration.class}), +++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerAutoConfiguration.java, + ReactiveWebServerConfiguration.UndertowAutoConfiguration.class,, + ReactiveWebServerConfiguration.ReactorNettyAutoConfiguration.class}), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerAutoConfiguration.java, + ReactiveWebServerConfiguration.UndertowAutoConfiguration.class,, + ReactiveWebServerConfiguration.ReactorNettyAutoConfiguration.class}), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerAutoConfiguration.java, + ReactiveWebServerConfiguration.UndertowAutoConfiguration.class,, + ReactiveWebServerConfiguration.ReactorNettyAutoConfiguration.class}), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerAutoConfiguration.java, + ReactiveWebServerConfiguration.UndertowAutoConfiguration.class,, + ReactiveWebServerConfiguration.ReactorNettyAutoConfiguration.class}), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerAutoConfiguration.java, + ReactiveWebServerConfiguration.UndertowAutoConfiguration.class,, + ReactiveWebServerConfiguration.ReactorNettyAutoConfiguration.class}), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ b/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java, +++ /dev/null, +++ b/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java, +++ b/spring-boot/src/test/java/org/springframework/boot/test/ApplicationContextTestUtils.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS
[+++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-samples/pom.xml, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-samples/pom.xml, +++ /dev/null, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-samples/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-samples/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-samples/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-samples/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-samples/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-samples/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-samples/pom.xml, +++ /dev/null, +++ /dev/null, +++
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to
[+++ b/spring-boot-dependencies/pom.xml, + <spring.version>4.3.0.RC2</spring.version>]
[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/VanillaPublicMetrics.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/VanillaPublicMetrics.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleDataSourceHealthIndicator.java, +public class SimpleDataSourceHealthIndicator implements, + HealthIndicator<Map<String, Object>> {, + * Create a new {@link SimpleDataSourceHealthIndicator} using the specified, + * datasource., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/VanillaPublicMetrics.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleDataSourceHealthIndicator.java, +public class SimpleDataSourceHealthIndicator implements, + HealthIndicator<Map<String, Object>> {, + * Create a new {@link SimpleDataSourceHealthIndicator} using the specified, + * datasource., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/VanillaPublicMetrics.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleDataSourceHealthIndicator.java, +public class SimpleDataSourceHealthIndicator implements, +
[+++ b/spring-boot-dependencies/pom.xml, + <spring-security.version>4.1.1.RELEASE</spring-security.version>]
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, + <zipfileset, + dir="${project.build.directory}/generated-docs/reference/html", + prefix="html" />, + <mappedresources>, + <fileset, + dir="${project.build.directory}/generated-docs/reference/pdf", + includes="index.pdf" />, + <globmapper from="index.pdf", + to="pdf/spring-boot-actuator-web-api.pdf" />, + </mappedresources>, + <sourceDocumentName>index.adoc</sourceDocumentName>]
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-actuator/pom.xml, + <scope>test</scope>]
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j spring-boot/stage-release, +$ fly -t spring trigger-job -j spring-boot/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +🎁 Enhancement, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <mariadb.version>2.2.6</mariadb.version>]
[+++ b/spring-boot-project/spring-boot-cli/src/it/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java, +import java.util.stream.Collectors;, + return reader.lines(), + .filter((line) -> !line.startsWith("Picked up ")), + .collect(Collectors.toList());, +++ b/spring-boot-project/spring-boot-cli/src/it/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java, +import java.util.stream.Collectors;, + return reader.lines(), + .filter((line) -> !line.startsWith("Picked up ")), + .collect(Collectors.toList());, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/maven/MavenSettings.java, + reader.lines().forEach((line) -> writer.println(indent + line));, +++ b/spring-boot-project/spring-boot-cli/src/it/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java, +import java.util.stream.Collectors;, + return reader.lines(), + .filter((line) -> !line.startsWith("Picked up ")), + .collect(Collectors.toList());, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/maven/MavenSettings.java, + reader.lines().forEach((line) -> writer.println(indent + line));, +++ b/spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java, +import java.util.stream.Collectors;, + return reader.lines().collect(Collectors.joining());, +++ b/spring-boot-project/spring-boot-cli/src/it/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java, +import java.util.stream.Collectors;, + return reader.lines(), + .filter((line) -> !line.startsWith("Picked up ")), + .collect(Collectors.toList());, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/maven/MavenSettings.java, + reader.lines().forEach((line) -> writer.println(indent + line));, +++ b/spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java, +import java.util.stream.Collectors;, + return reader.lines().collect(Collectors.joining());, +++
[+++ b/spring-boot-samples/spring-boot-sample-actuator-log4j/src/main/resources/application.properties, +#logging.file: /tmp/logs/app.log, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j/src/main/resources/application.properties, +#logging.file: /tmp/logs/app.log, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/resources/application.properties, +#logging.file: /tmp/logs/app.log, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j/src/main/resources/application.properties, +#logging.file: /tmp/logs/app.log, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/resources/application.properties, +#logging.file: /tmp/logs/app.log, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/main/resources/application.properties, +# logging.file: /tmp/logs/app.log, +# logging.level.org.springframework.security: INFO, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j/src/main/resources/application.properties, +#logging.file: /tmp/logs/app.log, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/resources/application.properties, +#logging.file: /tmp/logs/app.log, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/main/resources/application.properties, +# logging.file: /tmp/logs/app.log, +# logging.level.org.springframework.security: INFO, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/main/resources/logback.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<configuration>, + <include resource="org/springframework/boot/logging/logback/base.xml" />, + <include resource="org/springframework/boot/logging/logback/console-appender.xml" />, + <root level="INFO">, + <appender-ref ref="CONSOLE" />, + </root>, +</configuration>]
[+++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P spring-snapshot, +script: mvn install -q -nsu -Dmaven.test.redirectTestOutputToFile=true -P '!integration', +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P spring-snapshot, +script: mvn install -q -nsu -Dmaven.test.redirectTestOutputToFile=true -P '!integration', +++ /dev/null]
[+++ b/spring-boot-autoconfigure/pom.xml, + <groupId>org.eclipse.jetty.websocket</groupId>, + <artifactId>javax-websocket-server-impl</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.apache.tomcat.embed</groupId>, + <artifactId>tomcat-embed-websocket</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/spring-boot-autoconfigure/pom.xml, + <groupId>org.eclipse.jetty.websocket</groupId>, + <artifactId>javax-websocket-server-impl</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.apache.tomcat.embed</groupId>, + <artifactId>tomcat-embed-websocket</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, +import org.eclipse.jetty.webapp.AbstractConfiguration;, +import org.eclipse.jetty.webapp.WebAppContext;, +import org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer;, +import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;, + * Auto configuration for websocket server in embedded Tomcat or Jetty. Requires, + * <code>spring-websocket</code> and either Tomcat or Jetty with their WebSocket modules, + * to be on the classpath., + * <p/>, + * If Tomcat's WebSocket support is detected on the
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, +
[+++ b/spring-boot-dependencies/pom.xml, + <reactor-bom.version>Aluminium-BUILD-SNAPSHOT</reactor-bom.version>]
[+++ b/.travis.yml, +before_script:, +- mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true || true, +- mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/,
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +🎁 Enhancement, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests until you are ready, +to submit a pull request:, + $ ./mvnw clean install -DskipTests, +++ b/.settings-template.xml, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests until you are ready, +to submit a pull request:, + $ ./mvnw clean install -DskipTests, +++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param
[+++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java, + * Copyright 2013-2015 the original author or authors., + logger.info("\n\nUsing default password for shell access: ", + + this.user.getPassword() + "\n\n");, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java, + * Copyright 2013-2015 the original author or authors., + logger.info("\n\nUsing default password for shell access: ", + + this.user.getPassword() + "\n\n");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/DataEndpointMBean.java, +
[+++ b/spring-boot-samples/spring-boot-sample-data-elasticsearch/src/main/resources/application.properties, +spring.data.elasticsearch.properties.transport.tcp.connect_timeout=120s]
[+++ b/CONTRIBUTING.adoc, +++ b/CONTRIBUTING.adoc, +++ b/README.adoc, +The {docs}/htmlsingle/[reference documentation] includes detailed, +{docs}/htmlsingle/#getting-started-installing-spring-boot[installation instructions], +as well as a comprehensive {docs}/htmlsingle/#getting-started-first-application[``getting, +started``] guide. Documentation is published in {docs}/htmlsingle/[HTML],, +{docs}/pdf/spring-boot-reference.pdf[PDF] and {docs}/epub/spring-boot-reference.epub[EPUB], +formats., +* Check the {docs}/htmlsingle/[reference documentation], especially the, + {docs}/htmlsingle/#howto[How-to's] -- they provide solutions to the most common, +* If you are upgrading, read the https://github.com/spring-projects/spring-boot/wiki[release notes], + for upgrade instructions and "new and noteworthy" features., +* Report bugs with Spring Boot at https://github.com/spring-projects/spring-boot/issues[github.com/spring-projects/spring-boot/issues]., +* Before you log a bug, please https://github.com/spring-projects/spring-boot/search?type=Issues[search the issue tracker], + to see if someone has already reported the problem., +* If the issue doesn't
[+++ b/spring-cli/src/main/java/org/springframework/cli/compiler/autoconfigure/SpringCompilerAutoConfiguration.java, + // FIXME currently broken on CI + decide how relates to logging, + // dependencies.ifAnyResourcesPresent("logback.xml").add("ch.qos.logback",, + // "logback-classic", "1.0.7");, + // dependencies.ifNotAdded("cg.qos.logback", "logback-classic"), + // .ifAnyResourcesPresent("log4j.properties", "log4j.xml"), + // .add("org.slf4j", "slf4j-log4j12", "1.7.5"), + // .add("log4j", "log4j", "1.2.16"), + // .add("org.slf4j", "jcl-over-slf4j", "1.7.5");, + // dependencies.ifNotAdded("ch.qos.logback", "logback-classic"), + // .ifNotAdded("org.slf4j", "slf4j-log4j12"), + // .add("org.slf4j", "slf4j-jdk14", "1.7.5"), + // .add("org.slf4j", "jcl-over-slf4j", "1.7.5");, +++ b/spring-cli/src/main/java/org/springframework/cli/compiler/autoconfigure/SpringCompilerAutoConfiguration.java, + // FIXME currently broken on CI + decide how relates to logging, + // dependencies.ifAnyResourcesPresent("logback.xml").add("ch.qos.logback",, + // "logback-classic", "1.0.7");, + // dependencies.ifNotAdded("cg.qos.logback", "logback-classic"), + // .ifAnyResourcesPresent("log4j.properties", "log4j.xml"), + // .add("org.slf4j", "slf4j-log4j12", "1.7.5"), +
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target,
[+++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/loggers.adoc, +=== /loggers, +This endpoint allows you to view and modify the log levels for the loggers in your, +application. It builds on top of the `LoggingSystem` abstraction and supports the same, +logging frameworks. The logging levels are defined by the `LogLevel` enumeration and, +consists of the following values (although not all logging systems support the full set):, +, +* `TRACE`, +* `DEBUG`, +* `INFO`, +* `WARN`, +* `ERROR`, +* `FATAL`, +*
[+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfoProperties.java, + if (this.group == null) {, + this.group = this.project.getGroup().toString();, + }, + return this.group;, + if (this.version == null) {, + this.version = this.project.getVersion().toString();, + }, + return this.version;, + if (this.name == null) {, + this.name = this.project.getName();, + }, + return this.name;, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfoProperties.java, + if (this.group == null) {, + this.group = this.project.getGroup().toString();, + }, + return this.group;, + if (this.version == null) {, + this.version = this.project.getVersion().toString();, + }, + return this.version;, + if (this.name == null) {, + this.name = this.project.getName();, + }, + return this.name;, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfoIntegrationTests.java, +import org.gradle.testkit.runner.BuildResult;, +
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, + <groupId>org.apache.kafka</groupId>, + <artifactId>kafka-clients</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, + <groupId>org.apache.kafka</groupId>, + <artifactId>kafka-clients</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/KafkaMetricsAutoConfiguration.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the
[+++ b/spring-boot-autoconfigure/pom.xml, + <groupId>mysql</groupId>, + <artifactId>mysql-connector-java</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/spring-boot-autoconfigure/pom.xml, + <groupId>mysql</groupId>, + <artifactId>mysql-connector-java</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/AbstractDataSourceConfiguration.java, +import org.springframework.beans.factory.InitializingBean;, +public abstract class AbstractDataSourceConfiguration implements BeanClassLoaderAware,, + InitializingBean {, + private String username;, + private String password;, + private EmbeddedDatabaseConnection embeddedDatabaseConnection = EmbeddedDatabaseConnection.NONE;, +, + @Override, + public void afterPropertiesSet() throws Exception {, + this.embeddedDatabaseConnection = EmbeddedDatabaseConnection, + .get(this.classLoader);, + }, +, + String driverClassName = this.embeddedDatabaseConnection.getDriverClassName();, + if (!StringUtils.hasText(driverClassName)) {, + + this.embeddedDatabaseConnection, + + ". If you want an embedded ", + + "database please put a supported one
[+++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +import org.springframework.boot.actuate.cache.GuavaCacheStatisticsProvider;, +import org.springframework.cache.guava.GuavaCache;, + @ConditionalOnClass({ com.google.common.cache.Cache.class, GuavaCache.class }), + static class GuavaCacheStatisticsConfiguration {, +, + @Bean, + public GuavaCacheStatisticsProvider guavaCacheStatisticsProvider() {, + return new GuavaCacheStatisticsProvider();, + }, +, + }, +, +
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/,
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/ganglia/GangliaMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/ganglia/GangliaMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/ganglia/GangliaMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/influx/InfluxMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/ganglia/GangliaMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/influx/InfluxMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/jmx/JmxMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/ganglia/GangliaMetricsExportAutoConfiguration.java, + @Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteMetricsExportAutoConfiguration.java, +
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target,
[+++ b/CONTRIBUTING.adoc, +NOTE: As for the standard build, you may need to increase the amount of memory available, +to Maven by setting a `MAVEN_OPTS` environment variable with the value, +`-Xmx512m -XX:MaxPermSize=128m`. We generate more artifacts when running the full build, +(such as Javadoc jars), so you may find the process a little slower than the standard build., +changes just won't be automatically formatted., +++ b/CONTRIBUTING.adoc, +NOTE: As for the standard build, you may need to increase the amount of memory available, +to Maven by setting a `MAVEN_OPTS` environment variable with the value, +`-Xmx512m -XX:MaxPermSize=128m`. We generate more artifacts when
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <neo4j-ogm.version>3.0.2</neo4j-ogm.version>]
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfigurationIntegrationTests.java, +import org.junit.Before;, +import org.testcontainers.containers.GenericContainer;, +import org.springframework.boot.testsupport.testcontainers.TestContainers;, + public static DockerTestContainer<GenericContainer<?>> cassandra = new DockerTestContainer<>(, + TestContainers::cassandra);, + @Before, + public void setUp() {, + this.context = new AnnotationConfigApplicationContext();, + TestPropertyValues, + .of("spring.data.cassandra.port=" + cassandra.getMappedPort(9042)), + .applyTo(this.context.getEnvironment());, + }, +, + Cluster cluster = Cluster.builder().withPort(cassandra.getMappedPort(9042)), + .addContactPoint("localhost").build();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfigurationIntegrationTests.java, +import org.junit.Before;, +import org.testcontainers.containers.GenericContainer;, +import org.springframework.boot.testsupport.testcontainers.TestContainers;, + public static DockerTestContainer<GenericContainer<?>> cassandra = new DockerTestContainer<>(, + TestContainers::cassandra);, + @Before, + public void setUp() {, + this.context = new AnnotationConfigApplicationContext();, + TestPropertyValues, + .of("spring.data.cassandra.port=" + cassandra.getMappedPort(9042)), + .applyTo(this.context.getEnvironment());, + }, +, + Cluster cluster = Cluster.builder().withPort(cassandra.getMappedPort(9042)), + .addContactPoint("localhost").build();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisRepositoriesAutoConfigurationTests.java, +import
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <hibernate-validator.version>6.0.16.Final</hibernate-validator.version>]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/README.adoc, += Spring Boot image:https://build.spring.io/plugins/servlet/buildStatusImage/BOOT-PUB["Build Status", link="https://build.spring.io/browse/BOOT-PUB"], +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q
[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrabMetadataTransformation.java, +import org.springframework.boot.dependency.tools.Dependencies;, +import org.springframework.boot.dependency.tools.PropertiesFileDependencies;, + List<Dependencies> managedDependencies = new ArrayList<Dependencies>(uris.length);, + managedDependencies.add(new PropertiesFileDependencies(uri.toURL(), + this.resolutionContext.setManagedDependencies(ManagedDependencies, + .get(managedDependencies));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrabMetadataTransformation.java, +import org.springframework.boot.dependency.tools.Dependencies;, +import org.springframework.boot.dependency.tools.PropertiesFileDependencies;, + List<Dependencies> managedDependencies = new ArrayList<Dependencies>(uris.length);, + managedDependencies.add(new PropertiesFileDependencies(uri.toURL(), + this.resolutionContext.setManagedDependencies(ManagedDependencies, + .get(managedDependencies));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolver.java, +import org.springframework.boot.dependency.tools.Dependencies;, + * {@link ArtifactCoordinatesResolver} backed by {@link Dependencies}., + this(ManagedDependencies.get());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrabMetadataTransformation.java, +import org.springframework.boot.dependency.tools.Dependencies;, +import org.springframework.boot.dependency.tools.PropertiesFileDependencies;, + List<Dependencies> managedDependencies = new ArrayList<Dependencies>(uris.length);, + managedDependencies.add(new PropertiesFileDependencies(uri.toURL(), + this.resolutionContext.setManagedDependencies(ManagedDependencies, + .get(managedDependencies));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolver.java, +import org.springframework.boot.dependency.tools.Dependencies;, + * {@link ArtifactCoordinatesResolver} backed by {@link Dependencies}., + this(ManagedDependencies.get());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/ManagedDependenciesFactory.java, +import org.springframework.boot.dependency.tools.PomDependencies;, + * {@link PomDependencies}., + this(ManagedDependencies.get());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrabMetadataTransformation.java, +import org.springframework.boot.dependency.tools.Dependencies;,
[+++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, +
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/spring-boot-dependencies/pom.xml, + <mockito.version>2.8.9</mockito.version>]
[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java, + * Accept header to use to retrieve the json meta-data., + */, + public static final String ACCEPT_META_DATA =, + "application/vnd.initializr.v2.1+json,application/vnd.initializr.v2+json";, +, + /**, + * Accept header to use to retrieve the service capabilities of the service. If the, + * service does not offer such feature, the json meta-data are retrieved instead., + */, + public static final String ACCEPT_SERVICE_CAPABILITIES =, + "text/plain," + ACCEPT_META_DATA;, +, + /**, + validateResponse(httpResponse, request.getServiceUrl());, + validateResponse(httpResponse, serviceUrl);, + return parseJsonMetadata(httpResponse.getEntity());, + }, +, + /**, + * Loads the service capabilities of the service at the specified
[+++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to
[+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, +import org.springframework.boot.jdbc.DatabaseDriver;, + assertThat(health.getDetails().get("validationQuery")), + .isEqualTo(DatabaseDriver.HSQLDB.getValidationQuery());, + String customValidationQuery = "SELECT COUNT(*) from FOO";, + this.indicator.setQuery(customValidationQuery);, + .isEqualTo(customValidationQuery);]
[+++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>,
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, + registration.setFilter(new ServletContainer(this.config));, + new ServletContainer(this.config), this.path);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, + registration.setFilter(new ServletContainer(this.config));, + new ServletContainer(this.config), this.path);, +++ b/spring-boot-samples/spring-boot-sample-jersey/pom.xml, + <java.version>1.7</java.version>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, + registration.setFilter(new ServletContainer(this.config));, + new ServletContainer(this.config), this.path);, +++ b/spring-boot-samples/spring-boot-sample-jersey/pom.xml, + <java.version>1.7</java.version>, +++ b/spring-boot-samples/spring-boot-sample-jersey/src/main/java/sample/jersey/Endpoint.java, +import org.springframework.beans.factory.annotation.Autowired;, + @Autowired, + private Service service;, + return "Hello " + this.service.message();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, + registration.setFilter(new ServletContainer(this.config));, + new ServletContainer(this.config), this.path);, +++ b/spring-boot-samples/spring-boot-sample-jersey/pom.xml, + <java.version>1.7</java.version>, +++ b/spring-boot-samples/spring-boot-sample-jersey/src/main/java/sample/jersey/Endpoint.java, +import org.springframework.beans.factory.annotation.Autowired;, + @Autowired, + private Service service;, + return "Hello " + this.service.message();, +++ b/spring-boot-samples/spring-boot-sample-jersey/src/main/java/sample/jersey/Service.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <spring-ws.version>3.0.1.RELEASE</spring-ws.version>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + .<String>unmodifiableSet(new HashSet<String>(, + this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), + .perform(get("/logfile").accept(MediaType.TEXT_PLAIN), + .perform(get("/loggers/org.springframework.boot"), + .perform(post("/loggers/org.springframework.boot"), + .contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), + .andExpect(status().isOk()).andDo(document("set-logger"));, + .perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + final Map<String, Object> model = new LinkedHashMap<String, Object>();, + final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, + .perform(get(endpointPath), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + PrintWriter writer = new PrintWriter(file, "UTF-8");, + try {, + finally {, + writer.close();, + }, + List<?
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t
[+++ b/spring-boot-samples/spring-boot-sample-hypermedia-gson/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-hypermedia-gson/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-hypermedia-jpa/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-hypermedia-gson/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-hypermedia-jpa/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-hypermedia-ui/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-hypermedia-gson/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-hypermedia-jpa/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-hypermedia-ui/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-hypermedia/pom.xml]
[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/SslServerCustomizer.java, + * Copyright 2012-2019 the original author or authors., + catch (Exception ex) {, + "Could not load key store '" + ssl.getKeyStore() + "'", ex);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/SslServerCustomizer.java, + * Copyright 2012-2019 the original author or authors., + catch (Exception ex) {, + "Could not load key store '" + ssl.getKeyStore() + "'", ex);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java, + * Copyright 2012-2019 the original author or authors., + catch (Exception ex) {, + throw new WebServerException("Could not load key store '" + resource + "'",, + ex);, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/SslServerCustomizer.java, + * Copyright 2012-2019 the original author or authors.,
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.1.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.1.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.1.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.1.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.1.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.1.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.1.x/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.1.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.1.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.1.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.1.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.1.x/promote-rc, +$ fly -t
[+++ b/spring-boot-dependencies/pom.xml, + <jetty.version>9.4.0.v20161208</jetty.version>, +++ b/spring-boot-dependencies/pom.xml, + <jetty.version>9.4.0.v20161208</jetty.version>, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java, + "jetty-util-", "javax.servlet-", "jetty-client", "jetty-io-",, + "jetty-http-", "jetty-server-", "jetty-security-", "jetty-servlet-",, +++ b/spring-boot-dependencies/pom.xml, + <jetty.version>9.4.0.v20161208</jetty.version>, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java, + "jetty-util-", "javax.servlet-", "jetty-client", "jetty-io-",, + "jetty-http-", "jetty-server-", "jetty-security-", "jetty-servlet-",, +++ b/spring-boot-samples/pom.xml, + <module>spring-boot-sample-jetty93</module>, + <module>spring-boot-sample-websocket-jetty93</module>, +++ b/spring-boot-dependencies/pom.xml, + <jetty.version>9.4.0.v20161208</jetty.version>, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java, + "jetty-util-", "javax.servlet-", "jetty-client", "jetty-io-",, + "jetty-http-", "jetty-server-", "jetty-security-", "jetty-servlet-",, +++ b/spring-boot-samples/pom.xml, + <module>spring-boot-sample-jetty93</module>, + <module>spring-boot-sample-websocket-jetty93</module>, +++ b/spring-boot-samples/spring-boot-sample-jetty93/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <!-- Your own application should inherit from spring-boot-starter-parent -->, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-samples</artifactId>, + <version>1.5.0.BUILD-SNAPSHOT</version>, + </parent>, + <artifactId>spring-boot-sample-jetty93</artifactId>,
[+++ b/spring-boot-autoconfigure/pom.xml, + <dependency>, + <groupId>org.jboss.narayana.jta</groupId>, + <artifactId>jta</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.jboss.narayana.jts</groupId>, + <artifactId>narayana-jts-integration</artifactId>, + <optional>true</optional>, + </dependency>, +++ b/spring-boot-autoconfigure/pom.xml, + <dependency>, + <groupId>org.jboss.narayana.jta</groupId>, + <artifactId>jta</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.jboss.narayana.jts</groupId>, + <artifactId>narayana-jts-integration</artifactId>, + <optional>true</optional>, + </dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/JtaAutoConfiguration.java, + AtomikosJtaConfiguration.class, NarayanaJtaConfiguration.class }), +++ b/spring-boot-autoconfigure/pom.xml, + <dependency>, + <groupId>org.jboss.narayana.jta</groupId>, + <artifactId>jta</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.jboss.narayana.jts</groupId>, + <artifactId>narayana-jts-integration</artifactId>, + <optional>true</optional>, + </dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/JtaAutoConfiguration.java, + AtomikosJtaConfiguration.class, NarayanaJtaConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License,
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to
[+++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, +
[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthMvcEndpointAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthMvcEndpointAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthMvcEndpointAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthMvcEndpointAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MinimalActuatorHypermediaApplication.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthMvcEndpointAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MinimalActuatorHypermediaApplication.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MvcEndpointPathConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthMvcEndpointAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MinimalActuatorHypermediaApplication.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MvcEndpointPathConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/InfoMvcEndpointTests.java, +import org.springframework.boot.test.context.SpringApplicationConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthMvcEndpointAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ImportAutoConfiguration;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MinimalActuatorHypermediaApplication.java, +import
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + .<String>unmodifiableSet(new HashSet<String>(, + this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), + .perform(get("/logfile").accept(MediaType.TEXT_PLAIN), + .perform(get("/loggers/org.springframework.boot"), + .perform(post("/loggers/org.springframework.boot"), + .contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), + .andExpect(status().isOk()).andDo(document("set-logger"));, + .perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + final Map<String, Object> model = new LinkedHashMap<String, Object>();, + final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, + .perform(get(endpointPath), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + PrintWriter writer = new PrintWriter(file, "UTF-8");, + try {, + finally {, + writer.close();, + }, + List<?
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +http://www.springsource.com/developer/sts[Spring Tools Suite] or, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +http://www.springsource.com/developer/sts[Spring
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <spring-kafka.version>2.1.2.RELEASE</spring-kafka.version>]
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <spring-amqp.version>2.0.11.BUILD-SNAPSHOT</spring-amqp.version>]
[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java, + if (digit >= '0' && digit <= '9') {, + else if (digit >= 'a' && digit <= 'f') {, + else if (digit >= 'A' && digit <= 'F') {, + throw new IllegalStateException("Malformed \\uxxxx encoding.");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java, + if (digit >= '0' && digit <= '9') {, + else if (digit >= 'a' && digit <= 'f') {, + else if (digit >= 'A' && digit <= 'F') {, + throw new IllegalStateException("Malformed \\uxxxx encoding.");, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedPropertiesLoaderTests.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, + @Rule, + public ExpectedException thrown = ExpectedException.none();, +, + public void getMalformedUnicodeProperty()
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/.bomr/bomr.yaml, + - project: couchbase-client, + versions:, + # Jar contains dependencies' classes resulting in duplicates, + - '[2.7.3]', + # Old versions that use yyyymmdd format, + - '[20040101,)', + - project: glassfish-jaxb, + versions:, + # Switches to Jarkarta EE API dependencies resulting in duplicate classes, + - '[2.3.2,2.4)', + - project: saaj-impl, + versions:, + # Switches to Jarkarta EE API dependencies resulting in duplicate classes, + - '[1.5.1,1.6)', + - project: selenium-htmlunit, + versions:, + # Requires a new minor of Selenium which contains breaking API changes, + - '[2.33.1,2.34)', + ignored-dependencies:, + #
[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrabCommandIntegrationTests.java, + public CliTester cli = new CliTester("src/test/resources/grab-samples/");, +++ /dev/null, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrabCommandIntegrationTests.java, + public CliTester cli = new CliTester("src/test/resources/grab-samples/");, +++ b/spring-boot-cli/src/test/resources/grab-samples/grab.groovy, +@Grab('spring-jdbc'), +class GrabTest {, + , +}]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, +
[+++ b/CONTRIBUTING.adoc, +=== Importing into IntelliJ IDEA, +To open the project in IntelliJ IDEA, select "`File`" -> "`Open`" and then click on the, +root `pom.xml`., +, +, +, +==== Install the Spring Formatter plugin, +If you haven't done so, install the formatter plugin so that proper formatting rules are, +applied automatically when you reformat code in the IDE., +, +* Download the latest https://search.maven.org/search?q=g:io.spring.javaformat%20AND%20a:spring-javaformat-intellij-plugin[IntelliJ IDEA plugin]., +* Select "`IntelliJ IDEA`" -> "`Preferences`"., +* Select "`Plugins`"., +* Select the wheel and "`Install Plugin from Disk...`"., +* Select the jar file you've downloaded., +, +, +, +==== Import additional code style,
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests until you are ready, +to submit a pull request:, + $ ./mvnw clean install -DskipTests, +++ b/.settings-template.xml, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests until you are ready, +to submit a pull request:, + $ ./mvnw clean install -DskipTests, +++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories, +++ /dev/null, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/RunProcessCommand.java, + * Copyright 2012-2014 the original author or authors., + int code = this.process.run(args.toArray(new String[args.size()]));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories, +++ /dev/null, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/RunProcessCommand.java, + * Copyright 2012-2014 the original author or authors., + int code = this.process.run(args.toArray(new String[args.size()]));, +++ b/spring-boot-integration-tests/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories, +++ /dev/null, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/RunProcessCommand.java, +
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, + return !"false".equalsIgnoreCase(parameter);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, + return !"false".equalsIgnoreCase(parameter);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/AbstractErrorController.java, + return !"false".equalsIgnoreCase(parameter);]
[+++ b/spring-boot-dependencies/pom.xml, + <spring.version>4.0.1.RELEASE</spring.version>]
[+++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/loggers.adoc, +=== /loggers, +This endpoint allows you to view and modify the log levels for the loggers in your, +application. It builds on top of the `LoggingSystem` abstraction and supports the same, +logging frameworks. The logging levels are defined by the `LogLevel` enumeration and, +consists of the following values (although not all logging systems support the full set):, +, +* `TRACE`, +* `DEBUG`, +* `INFO`, +* `WARN`, +* `ERROR`, +* `FATAL`, +*
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/eclipse/spring-boot-project.setup, + value="org.hamcrest.Matchers.*;org.junit.Assert.*;org.mockito.BDDMockito.*;org.mockito.Matchers.*;org.mockito.Mockito.*;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;org.springframework.test.web.servlet.result.MockMvcResultMatchers.*"/>, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/eclipse/spring-boot-project.setup, + value="org.hamcrest.Matchers.*;org.junit.Assert.*;org.mockito.BDDMockito.*;org.mockito.Matchers.*;org.mockito.Mockito.*;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;org.springframework.test.web.servlet.result.MockMvcResultMatchers.*"/>, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/eclipse/spring-boot-project.setup, + value="org.hamcrest.Matchers.*;org.junit.Assert.*;org.mockito.BDDMockito.*;org.mockito.Matchers.*;org.mockito.Mockito.*;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;org.springframework.test.web.servlet.result.MockMvcResultMatchers.*"/>, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/eclipse/spring-boot-project.setup, + value="org.hamcrest.Matchers.*;org.junit.Assert.*;org.mockito.BDDMockito.*;org.mockito.Matchers.*;org.mockito.Mockito.*;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;org.springframework.test.web.servlet.result.MockMvcResultMatchers.*"/>, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/configprops.adoc, +`<prefix>.CONFIGURATION_PROPERTIES`, where `<prefix>` is the environment key prefix, +specified in the `@ConfigurationProperties` annotation., +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/eclipse/spring-boot-project.setup, + value="org.hamcrest.Matchers.*;org.junit.Assert.*;org.mockito.BDDMockito.*;org.mockito.Matchers.*;org.mockito.Mockito.*;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;org.springframework.test.web.servlet.result.MockMvcResultMatchers.*"/>, +++ b/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.3.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/configprops.adoc, +`<prefix>.CONFIGURATION_PROPERTIES`, where `<prefix>` is the environment key prefix,
[+++ b/.gitignore, +data, +++ b/.gitignore, +data, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/.gitignore, +data, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ IDEA, you, + can use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/.gitignore, +data, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ IDEA, you, + can use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-devtools</module>, +++ b/.gitignore, +data, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If
[+++ b/spring-boot-dependencies/pom.xml, + <cassandra-driver.version>3.2.0</cassandra-driver.version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to
[+++ b/.github/ISSUE_TEMPLATE.md, +<!--, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +, +Question, +, +Please ask questions about how to use something, or to understand why something isn't, +working as you expect it to, on Stack Overflow using the spring-boot tag., +, +Bug report, +, +Please provide details of the problem, including the version of Spring Boot that you, +are using. If possible, please provide a test case or sample application that reproduces, +the problem. This makes it much easier for us to diagnose the problem and to verify that, +we have fixed
[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EndpointId.java, +import java.util.HashSet;, +import java.util.Set;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, + private static final Log logger = LogFactory.getLog(EndpointId.class);, +, + private static Set<String> loggedWarnings = new HashSet<>();, +, + private static final Pattern VALID_PATTERN = Pattern.compile("[a-zA-Z0-9\\.\\-]+");, +, + private static final Pattern WARNING_PATTERN = Pattern.compile("[\\.\\-]+");, + Assert.isTrue(VALID_PATTERN.matcher(value).matches(),, + if (WARNING_PATTERN.matcher(value).find()) {, + logWarning(value);, + }, + static void resetLoggedWarnings() {, + loggedWarnings.clear();, + }, +, + private static void logWarning(String value) {, + if (logger.isWarnEnabled() && loggedWarnings.add(value)) {, + logger.warn("Endpoint ID '" + value, + + "' contains invalid characters, please migrate to a valid format.");, + },
[+++ b/spring-boot-dependencies/pom.xml, + <spring-amqp.version>1.6.3.RELEASE</spring-amqp.version>, + <spring-integration.version>4.3.4.RELEASE</spring-integration.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <spring.version>5.0.0.RC3</spring.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <logback.version>1.1.3</logback.version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +, +🙅 Managed dependency upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. But pull requests for upgrades that are more involved than just a version property change are still most welcome., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some
[+++ b/.settings-template.xml, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +, +🙅 Managed dependency upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. But pull requests for upgrades that are more involved than just a version property change are still most welcome., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some
[+++ b/pom.xml, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-surefire-plugin</artifactId>, + <version>2.17</version>, + </plugin>, +++ b/pom.xml, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-surefire-plugin</artifactId>, + <version>2.17</version>, + </plugin>, +++ b/spring-boot-dependencies/pom.xml, + <version>2.17</version>, + <version>2.17</version>]
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + @Bean, + public FlywaySchemaManagementProvider flywayDefaultDdlModeProvider(, + ObjectProvider<List<Flyway>> flyways) {, + return new FlywaySchemaManagementProvider(, + flyways.getIfAvailable(Collections::emptyList));, + }, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + @Bean, + public FlywaySchemaManagementProvider flywayDefaultDdlModeProvider(, + ObjectProvider<List<Flyway>> flyways) {, + return new FlywaySchemaManagementProvider(, + flyways.getIfAvailable(Collections::emptyList));, + }, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywaySchemaManagementProvider.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *,
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.settings-template.xml, +
[+++ b/spring-boot/src/main/resources/org/springframework/boot/logging/java/logging.properties, +, +org.hibernate.validator.internal.util.Version.level = WARN, +org.apache.coyote.http11.Http11NioProtocol.level = WARN, +org.crsh.plugin.level = WARN, +org.apache.tomcat.util.net.NioSelectorPool.level = WARN, +org.apache.catalina.startup.DigesterFactory.level = ERROR, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/java/logging.properties, +, +org.hibernate.validator.internal.util.Version.level = WARN, +org.apache.coyote.http11.Http11NioProtocol.level = WARN, +org.crsh.plugin.level = WARN, +org.apache.tomcat.util.net.NioSelectorPool.level = WARN, +org.apache.catalina.startup.DigesterFactory.level = ERROR, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j/log4j.properties, +, +log4j.category.org.hibernate.validator.internal.util.Version=WARN, +log4j.category.org.apache.coyote.http11.Http11NioProtocol=WARN, +log4j.category.org.crsh.plugin=WARN, +log4j.category.org.apache.tomcat.util.net.NioSelectorPool=WARN, +log4j.category.org.apache.catalina.startup.DigesterFactory=ERROR, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/java/logging.properties, +, +org.hibernate.validator.internal.util.Version.level = WARN, +org.apache.coyote.http11.Http11NioProtocol.level = WARN, +org.crsh.plugin.level = WARN, +org.apache.tomcat.util.net.NioSelectorPool.level = WARN, +org.apache.catalina.startup.DigesterFactory.level = ERROR, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j/log4j.properties, +, +log4j.category.org.hibernate.validator.internal.util.Version=WARN, +log4j.category.org.apache.coyote.http11.Http11NioProtocol=WARN, +log4j.category.org.crsh.plugin=WARN, +log4j.category.org.apache.tomcat.util.net.NioSelectorPool=WARN, +log4j.category.org.apache.catalina.startup.DigesterFactory=ERROR, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/logback/base.xml, + <logger name="org.crsh.plugin" level="WARN"/>]
[+++ b/spring-boot-dependencies/pom.xml, + <spring-amqp.version>1.6.2.RELEASE</spring-amqp.version>]
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j spring-boot/stage-release, +$ fly -t spring trigger-job -j spring-boot/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t
[+++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/resources/boot-run-resources/build.gradle, +apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/resources/boot-run-resources/build.gradle, +apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/resources/classifier-extension.gradle, +apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, + apply plugin: 'org.springframework.boot.spring-boot', +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, + apply plugin: 'org.springframework.boot.spring-boot',
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="false" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n
[+++ b/spring-boot-dependencies/pom.xml, + <mysql.version>5.1.35</mysql.version>]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings,
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>neo4j-snapshots</id>, + <url>http://m2.neo4j.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>neo4j-snapshots</id>, + <url>http://m2.neo4j.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, +
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml]
[+++ b/spring-boot-dependencies/pom.xml, + <logback.version>1.1.6</logback.version>, +++ b/spring-boot-dependencies/pom.xml, + <logback.version>1.1.6</logback.version>, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, + * Copyright 2012-2016 the original author or authors., + new BasicConfigurator().configure(loggerContext);, +++ b/spring-boot-dependencies/pom.xml, + <logback.version>1.1.6</logback.version>, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, + * Copyright 2012-2016 the original author or authors., + new BasicConfigurator().configure(loggerContext);, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/logback/SpringBootJoranConfiguratorTests.java, + * Copyright 2012-2016 the original author or authors., +import org.slf4j.LoggerFactory;, + new BasicConfigurator().configure((LoggerContext) LoggerFactory.getILoggerFactory());]
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/health.adoc, +== Retrieving the Health of the application, +, +, +, +[[health-retrieving-component]], +== Retrieving the Health of a component, +To retrieve the health of a particular component of the application, make a `GET` request, +to `/actuator/health/{component}`, as shown in the following curl-based example:, +, +include::{snippets}health/component/curl-request.adoc[], +, +The resulting response is similar to the following:, +, +include::{snippets}health/component/http-response.adoc[], +, +, +, +[[health-retrieving-component-response-structure]], +=== Response Structure, +The response contains details of the health of a particular component of the application., +The following table describes the structure of the response:, +, +[cols="2,1,3"], +include::{snippets}health/component/response-fields.adoc[], +, +, +, +[[health-retrieving-component-instance]], +== Retrieving the Health of
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/SpringBootHypermediaApplication.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.lang.UsesJava8;, + @UsesJava8, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/SpringBootHypermediaApplication.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.lang.UsesJava8;, + @UsesJava8, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, +
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <selenium-htmlunit.version>2.29.0</selenium-htmlunit.version>]
[+++ b/buildhelper/all/pom.xml, + <version>0.5.0.M2</version>, +++ b/buildhelper/all/pom.xml, + <version>0.5.0.M2</version>, +++ b/pom.xml, + <version>0.5.0.M2</version>, +++ b/buildhelper/all/pom.xml, + <version>0.5.0.M2</version>, +++ b/pom.xml, + <version>0.5.0.M2</version>, +++ b/spring-boot-actuator/pom.xml, + <version>0.5.0.M2</version>, +++ b/buildhelper/all/pom.xml, + <version>0.5.0.M2</version>, +++ b/pom.xml, + <version>0.5.0.M2</version>, +++ b/spring-boot-actuator/pom.xml, + <version>0.5.0.M2</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>0.5.0.M2</version>, +++ b/buildhelper/all/pom.xml, + <version>0.5.0.M2</version>, +++ b/pom.xml, + <version>0.5.0.M2</version>, +++ b/spring-boot-actuator/pom.xml, + <version>0.5.0.M2</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>0.5.0.M2</version>, +++ b/spring-boot-cli/pom.xml, + <version>0.5.0.M2</version>, +++ b/buildhelper/all/pom.xml, + <version>0.5.0.M2</version>, +++ b/pom.xml, + <version>0.5.0.M2</version>, +++ b/spring-boot-actuator/pom.xml, + <version>0.5.0.M2</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>0.5.0.M2</version>, +++ b/spring-boot-cli/pom.xml, + <version>0.5.0.M2</version>, +++ b/spring-boot-dependencies/pom.xml, + <version>0.5.0.M2</version>, + <profile>, + <id>milestone</id>, + <distributionManagement>, + <repository>, + <id>spring-repo-milestone</id>, + <name>Spring Milestone Repository</name>, +
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/spring-boot/src/main/resources/org/springframework/boot/logging/logback/base.xml, + <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>]
[+++ b/spring-bootstrap-cli/src/main/scripts/spring, +for f in "${TARGETDIR}" "${SPRING_HOME}"/classes "${SPRING_BIN}" "${SPRING_HOME}"/*.jar "${SPRING_HOME}"/lib/*.jar; do, + if [ -f $f -o -d $f ]; then, + CLASSPATH="${f}", + CLASSPATH="${CLASSPATH}":"${f}", + fi, +++ b/spring-bootstrap-cli/src/main/scripts/spring, +for f in "${TARGETDIR}" "${SPRING_HOME}"/classes "${SPRING_BIN}" "${SPRING_HOME}"/*.jar "${SPRING_HOME}"/lib/*.jar; do, + if [ -f $f -o -d $f ]; then, + CLASSPATH="${f}", + CLASSPATH="${CLASSPATH}":"${f}", + fi, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/start.groovy, +@Grab("org.springframework.bootstrap:spring-bootstrap-actuator:0.5.0.BUILD-SNAPSHOT"), +@Grab("org.springframework.bootstrap:spring-bootstrap-web-starter:0.5.0.BUILD-SNAPSHOT"), +@ComponentScan("org.springframework.bootstrap.sample.service"), +++ b/spring-bootstrap-cli/src/main/scripts/spring, +for f in "${TARGETDIR}" "${SPRING_HOME}"/classes "${SPRING_BIN}" "${SPRING_HOME}"/*.jar "${SPRING_HOME}"/lib/*.jar; do, + if [ -f $f -o -d $f ]; then, + CLASSPATH="${f}", + CLASSPATH="${CLASSPATH}":"${f}", + fi, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/start.groovy, +@Grab("org.springframework.bootstrap:spring-bootstrap-actuator:0.5.0.BUILD-SNAPSHOT"), +@Grab("org.springframework.bootstrap:spring-bootstrap-web-starter:0.5.0.BUILD-SNAPSHOT"), +@ComponentScan("org.springframework.bootstrap.sample.service"), +++ b/spring-bootstrap-starters/pom.xml, + <module>spring-bootstrap-tomcat-starter</module>, + <artifactId>spring-bootstrap-tomcat-starter</artifactId>, + <version>${spring.bootstrap.version}</version>,
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.mvn/jvm.config, +-Xmx1024m,
[+++ b/.bomr/bomr.yaml, + policy: same-major-version, + - project: maven-invoker-plugin, + # NPE in InstallMojo.installProjectPom (InstallMojo.java:387), + - '[3.2.0]', + # Spring Data GemFire's GemFire dependencies, + - 'https://repo.spring.io/gemstone-release-pivotal-cache', +++ b/.bomr/bomr.yaml, + policy: same-major-version, + - project: maven-invoker-plugin, + # NPE in InstallMojo.installProjectPom (InstallMojo.java:387), + - '[3.2.0]', + # Spring Data GemFire's GemFire dependencies, + - 'https://repo.spring.io/gemstone-release-pivotal-cache', +++ b/CONTRIBUTING.adoc, +=== Importing into IntelliJ IDEA, +To open the project in IntelliJ IDEA, select "`File`" -> "`Open`" and then click on the, +root `pom.xml`., +, +, +, +==== Install the Spring Formatter plugin, +If you haven't done so, install the formatter plugin
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +before_script: travis_wait 30 ./mvnw install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +before_script: travis_wait 30 ./mvnw install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +before_script: travis_wait 30 ./mvnw install -q -U -DskipTests=true
[+++ b/spring-boot-dependencies/pom.xml, + <artemis.version>2.3.0</artemis.version>]
[+++ b/pom.xml, + <dependency>, + <groupId>org.apache.tomcat</groupId>, + <artifactId>tomcat-jdbc</artifactId>, + <version>${tomcat.version}</version>, + </dependency>]
[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointServlet.java, + * Copyright 2012-2019 the original author or authors., + private final int loadOnStartup;, +, + this.loadOnStartup = -1;, +, + this.loadOnStartup = -1;, + private EndpointServlet(Servlet servlet, Map<String, String> initParameters,, + int loadOnStartup) {, + this.loadOnStartup = loadOnStartup;, +, + return new EndpointServlet(this.servlet, mergedInitParameters,, + this.loadOnStartup);, + }, +, + /**, + * Sets the <code>loadOnStartup</code> priority that will be set on Servlet, + * registration, + * <p>, + * The default value for <tt>loadOnStartup</tt> is <code>-1</code>., + * @param loadOnStartup the initialization priority of the Servlet, + * @return a new instance of {@link
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +before_script: travis_wait 30 ./mvnw install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +before_script: travis_wait 30 ./mvnw install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ b/.settings-template.xml, +++ b/.travis.yml, +before_script: travis_wait 30 ./mvnw install -q -U -DskipTests=true
[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, + char ch2 = Character.toLowerCase(e2.charAt(i, i2++));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, + char ch2 = Character.toLowerCase(e2.charAt(i, i2++));, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java, + public void equalsWhenStartsWithOfAdaptedName() {, + // gh-15152, + ConfigurationPropertyName n1 = ConfigurationPropertyName, + .adapt("example.mymap.ALPHA", '.');, + ConfigurationPropertyName n2 = ConfigurationPropertyName, + .adapt("example.mymap.ALPHA_BRAVO", '.');, + assertThat(n1).isNotEqualTo(n2);, + }, +, + @Test, + public void equalsWhenStartsWithOfAdaptedNameOfIllegalChars() {, + // gh-15152, + ConfigurationPropertyName n1 = ConfigurationPropertyName, + .adapt("example.mymap.ALPH!", '.');, + ConfigurationPropertyName n2 = ConfigurationPropertyName, + .adapt("example.mymap.ALPHA!BRAVO", '.');, + assertThat(n1).isNotEqualTo(n2);, + }, +, + @Test]
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target,
[+++ b/spring-boot-dependencies/pom.xml, + <spring-batch.version>3.0.4.RELEASE</spring-batch.version>]
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <reactor-bom.version>Bismuth-SR10</reactor-bom.version>]
[+++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>,
[+++ /dev/null, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/AnsiOutputApplicationListener.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/.bomr/bomr.yaml, + policy: same-minor-version, + - project: dom4j, + versions:, + # Old versions that use yyyymmdd format, + - '[20040101,)', + - project: glassfish-jaxb, + versions:, + # Switches to Jarkarta EE API dependencies resulting in duplicate classes, + - '[2.3.2,2.4)', + - project: saaj-impl, + versions:, + # Switches to Jarkarta EE API dependencies resulting in duplicate classes, + - '[1.5.1,1.6)', + - project: selenium-htmlunit, + versions:, + # Requires a new minor of Selenium which contains breaking API changes, + - '[2.33.1,2.34)', + # Solr's Restlet dependencies, + - 'https://maven.restlet.com', +++ b/.bomr/bomr.yaml, + policy: same-minor-version,
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to
[+++ b/spring-boot-dependencies/pom.xml, + <solr.version>5.5.4</solr.version>]
[+++ b/spring-boot-parent/pom.xml, + <exclusions>, + <exclusion>, + <groupId>commons-logging</groupId>, + <artifactId>commons-logging</artifactId>, + </exclusion>, + </exclusions>, +++ b/spring-boot-parent/pom.xml, + <exclusions>, + <exclusion>, + <groupId>commons-logging</groupId>, + <artifactId>commons-logging</artifactId>, + </exclusion>, + </exclusions>, +++ b/spring-boot-starters/spring-boot-starter-parent/pom.xml, + <exclusions>, + <exclusion>, + <groupId>commons-logging</groupId>, + <artifactId>commons-logging</artifactId>, + </exclusion>, + </exclusions>, +++ b/spring-boot-parent/pom.xml, + <exclusions>, + <exclusion>, + <groupId>commons-logging</groupId>, + <artifactId>commons-logging</artifactId>, + </exclusion>, + </exclusions>, +++ b/spring-boot-starters/spring-boot-starter-parent/pom.xml, + <exclusions>, + <exclusion>, + <groupId>commons-logging</groupId>, + <artifactId>commons-logging</artifactId>, + </exclusion>, + </exclusions>, +++ b/spring-boot-starters/src/main/parent/pom.xml, + <exclusions>, + <exclusion>, + <groupId>commons-logging</groupId>, + <artifactId>commons-logging</artifactId>, + </exclusion>, + </exclusions>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +++ b/pom.xml, + <version>1.1.7.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +++ b/pom.xml, + <version>1.1.7.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.7.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc,
[+++ b/spring-boot-samples/spring-boot-sample-web-secure/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-web-secure/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleWebSecureApplication.java, +import org.springframework.context.annotation.Configuration;, + @Configuration, + public void configure(AuthenticationManagerBuilder auth) throws Exception {, + auth.inMemoryAuthentication().withUser("admin").password("admin"), + .roles("ADMIN", "USER").and().withUser("user").password("user"), + .roles("USER");]
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HashMapSessionConfiguration.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/ConfigurationPropertiesAutoConfiguration.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-boot-dependencies/pom.xml, + <joda-time.version>2.8.2</joda-time.version>]
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-dependencies/pom.xml, + <jooq.version>3.9.6</jooq.version>]
[+++ b/.travis.yml, +jdk:, + - oraclejdk8, +services:, + - mongodb, + - redis, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +services:, + - mongodb, + - redis, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ IDEA, you, + can use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +http://maven.apache.org/run-maven/index.html[Apache Maven] v3.0.6 or above and JDK 1.8., +a `MAVEN_OPTS` environment variable with the value `-Xmx512m`, +`-Xmx512m`. We generate more artifacts when running the full build, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +services:, + - mongodb, + - redis, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, + * @author Alexander Abramov, + /**, + * The minimum value that this distribution summary is expected to observe., + * Controls the number of buckets shipped by percentilesHistogram. Can be, + * specified as a long or as a Duration value (for timer meters, defaulting to ms, + * if no unit specified)., + */, + private final Map<String, ServiceLevelAgreementBoundary> minimumExpectedValue = new LinkedHashMap<>();, +, + /**, + * The maximum value that this distribution summary is expected to observe., + * Controls the number of buckets shipped by percentilesHistogram. Can be, + * specified
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, + private static final Log logger = LogFactory.getLog(SpelView.class);, +, + if (response.isCommitted()) {, + String message = getMessage(model);, + logger.error(message);, + return;, + }, + PlaceholderResolver resolver = new ExpressionResolver(getExpressions(), model);, + private String getMessage(Map<String, ?> model) {, + StringBuilder builder = new StringBuilder();, + builder.append("Cannot render error page for request ["), + .append(model.get("path")).append("]");, + if (model.get("message") != null) {, + builder.append(" and exception [").append(model.get("message")), + .append("]");, + }, + return builder.append("] as the response has already been committed."), + .append("As a result,
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/README.adoc, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + .<String>unmodifiableSet(new HashSet<String>(, + this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), + .perform(get("/logfile").accept(MediaType.TEXT_PLAIN), + .perform(get("/loggers/org.springframework.boot"), + .perform(post("/loggers/org.springframework.boot"), + .contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), + .andExpect(status().isOk()).andDo(document("set-logger"));, + .perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + final Map<String, Object> model = new LinkedHashMap<String, Object>();, + final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, +
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <spring-plugin.version>2.0.0.M1</spring-plugin.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <groupId>com.fasterxml.jackson.datatype</groupId>, + <artifactId>jackson-datatype-jdk8</artifactId>, + <version>${jackson.version}</version>, + </dependency>, + <dependency>]
[+++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.core.type.AnnotatedTypeMetadata;, + static class JmxCondition extends SpringBootCondition {, +, + @Override, + public ConditionOutcome getMatchOutcome(ConditionContext context,, + AnnotatedTypeMetadata metadata) {, + String endpointEnabled = context.getEnvironment().getProperty(, + "endpoints.jmx.enabled", "true");, + String jmxEnabled = context.getEnvironment().getProperty(, + "spring.jmx.enabled", "true");, + return new ConditionOutcome("true".equalsIgnoreCase(endpointEnabled), + && "true".equalsIgnoreCase(jmxEnabled),, + "JMX endpoint and JMX enabled");, +, + }, +, + }, +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml,
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <byte-buddy.version>1.7.8</byte-buddy.version>]
[+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/couchbase/CouchbaseHealthIndicatorTests.java, + given(couchbaseOperations.getCouchbaseClusterInfo()).willThrow(, + new IllegalStateException("test, expected"));, + assertThat((String) health.getDetails().get("error")).contains("test, expected");, +]
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <undertow.version>2.0.15.Final</undertow.version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <groupId>com.sun.mail</groupId>, + <artifactId>javax.mail</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.apache.activemq</groupId>, + <artifactId>activemq-broker</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <groupId>com.sun.mail</groupId>, + <artifactId>javax.mail</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.apache.activemq</groupId>, + <artifactId>activemq-broker</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <groupId>com.sun.mail</groupId>, + <artifactId>javax.mail</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.apache.activemq</groupId>, + <artifactId>activemq-broker</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>,
[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/OAuth2AutoConfiguration.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/.github/ISSUE_TEMPLATE.md, +<!--, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +, +Question, +, +Please ask questions about how to use something, or to understand why something isn't, +working as you expect it to, on Stack Overflow using the spring-boot tag., +, +Bug report, +, +Please provide details of the problem, including the version of Spring Boot that you, +are using. If possible, please provide a test case or sample application that reproduces, +the problem. This makes it much easier for us to diagnose the problem and to verify that, +we have fixed
[+++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.VanillaPublicMetrics;, + private MetricReader metricRepository = new InMemoryMetricRepository();, + private PublicMetrics metrics;, + if (this.metrics == null) {, + this.metrics = new VanillaPublicMetrics(this.metricRepository);, + return new MetricsEndpoint(this.metrics);, + @Bean, + @ConditionalOnMissingBean, + public ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint() {, + ConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();, + endpoint.setConfigurationBeanFactoryMetaData(this.beanFactoryMetaData);, + return endpoint;, + }, +, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.VanillaPublicMetrics;, + private MetricReader metricRepository = new InMemoryMetricRepository();, + private PublicMetrics metrics;, + if (this.metrics
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <jooq.version>3.10.7</jooq.version>]
[+++ b/CONTRIBUTING.adoc, +* Install "Spring Java Format", +* Download the latest https://search.maven.org/search?q=g:io.spring.javaformat%20AND%20a:spring-javaformat-intellij-plugin[Intellij IDEA plugin], +* Select "`Plugins`", +* Select the wheel and "`Install Plugin from Disk...`", +* Select the jar file you've downloaded, +* Select `idea/codeStyleConfig.xml` from this repository, +++ b/CONTRIBUTING.adoc, +* Install "Spring Java Format", +* Download the latest https://search.maven.org/search?q=g:io.spring.javaformat%20AND%20a:spring-javaformat-intellij-plugin[Intellij IDEA plugin], +* Select "`Plugins`", +* Select the wheel and "`Install Plugin from Disk...`", +* Select the jar file you've downloaded, +* Select `idea/codeStyleConfig.xml` from this repository, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/jersey/JerseyWebEndpointManagementContextConfiguration.java, + @ConditionalOnMissingBean(ResourceConfig.class), + @Bean, + public ResourceConfig resourceConfig() {, + return new ResourceConfig();, + }, +, +++ b/CONTRIBUTING.adoc, +*
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <ehcache3.version>3.5.3</ehcache3.version>]
[+++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>,
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <hibernate.version>5.3.1.Final</hibernate.version>, + <javax-persistence.version>2.2</javax-persistence.version>, + <groupId>javax.persistence</groupId>, + <artifactId>javax.persistence-api</artifactId>, + <version>${javax-persistence.version}</version>, + </dependency>, + <dependency>]
[+++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>,
[+++ b/.bomr/bomr.yaml, + bom: spring-boot-project/spring-boot-dependencies/pom.xml, + # Solr's Restlet dependencies, + - 'https://maven.restlet.com', + # Caffeine Simulator's dependencies, + - 'https://maven.imagej.net/content/repositories/public/', +++ b/.bomr/bomr.yaml, + bom: spring-boot-project/spring-boot-dependencies/pom.xml, + # Solr's Restlet dependencies, + - 'https://maven.restlet.com', + # Caffeine Simulator's dependencies, + - 'https://maven.imagej.net/content/repositories/public/', +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.bomr/bomr.yaml, + bom: spring-boot-project/spring-boot-dependencies/pom.xml, + # Solr's Restlet dependencies, + - 'https://maven.restlet.com', + # Caffeine Simulator's dependencies, + - 'https://maven.imagej.net/content/repositories/public/', +++ b/.gitignore, +*.sw?,
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, + private PublicMetrics metrics;, + if (this.metrics == null) {, + this.metrics = new VanillaPublicMetrics(this.metricRepository);, + }, + return new MetricsEndpoint(this.metrics);, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, + private PublicMetrics metrics;, + if (this.metrics == null) {, + this.metrics = new VanillaPublicMetrics(this.metricRepository);, + }, + return new MetricsEndpoint(this.metrics);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/PublicMetrics.java, +++ b/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, + private PublicMetrics metrics;, + if (this.metrics == null) {, + this.metrics =
[+++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, +
[+++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests and the execution of, +checkstyle until you are ready to submit a pull request:, + $ ./mvnw clean install -DskipTests -Pfast, +++ b/CONTRIBUTING.adoc, +If you are rebuilding often, you might also want to skip the tests and the execution of, +checkstyle until you are ready to submit a pull request:, + $ ./mvnw clean install -DskipTests -Pfast, +++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/README.adoc, += Spring Boot image:https://build.spring.io/plugins/servlet/buildStatusImage/BOOT-PUB["Build Status", link="https://build.spring.io/browse/BOOT-PUB"], +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q
[+++ b/spring-starters/spring-starter-parent/pom.xml, + <configuration>, + <mainClass>${start-class}</mainClass>, + </configuration>, +++ b/spring-starters/spring-starter-parent/pom.xml, + <configuration>, + <mainClass>${start-class}</mainClass>, + </configuration>, +++ b/spring-starters/src/main/parent/pom.xml, + <configuration>, + <mainClass>${start-class}</mainClass>, + </configuration>]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.travis.yml, +++ b/.gitignore, +++ b/.travis.yml, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/.gitignore, +++ b/.travis.yml, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, + <version>1.2.5.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/.gitignore, +++ b/.travis.yml, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, + <version>1.2.5.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/spring-boot-actuator/pom.xml,
[+++ b/spring-boot-dependencies/pom.xml, + <jetty.version>9.3.11.v20160721</jetty.version>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +🎁 Enhancement, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🐞 Bug report, +🚨 Security Vulnerability, +STOP!! Please don't raise
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/.travis.yml, +install: true, +before_script:, +- mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true || true, +- mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true, +++ b/.travis.yml, +install: true, +before_script:, +- mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true || true, +- mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true, +++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/.travis.yml, +install: true, +before_script:, +- mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true || true, +- mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true, +++ b/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/.travis.yml, +install: true, +before_script:, +- mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true || true, +- mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true, +++ b/pom.xml, +
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot/stage-milestone, +$ fly -t spring trigger-job -j spring-boot/promote-milestone, +$ fly -t spring trigger-job -j spring-boot/stage-rc, +$ fly -t spring trigger-job -j spring-boot/promote-rc, +$ fly -t spring trigger-job -j
[+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/UnresolvedDependenciesAnalyzer.java, +import java.util.Set;]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, + BeanDefinitionRegistry registry = (BeanDefinitionRegistry) this.applicationContext, + .getAutowireCapableBeanFactory();, + if (registry.containsBeanDefinition(beanName)) {, + BeanDefinition beanDefinition = registry.getBeanDefinition(beanName);, + return false;, + }, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, + BeanDefinitionRegistry registry = (BeanDefinitionRegistry) this.applicationContext, + .getAutowireCapableBeanFactory();, + if (registry.containsBeanDefinition(beanName)) {, + BeanDefinition beanDefinition = registry.getBeanDefinition(beanName);, + return false;, + }, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesTests.java, + @Test, + public void loadWhenBindingOnBeanWithoutBeanDefinitionShouldBind() {, + load(BasicConfiguration.class, "name=test");, + BasicProperties bean = this.context.getBean(BasicProperties.class);, + assertThat(bean.name).isEqualTo("test");, + bean.name = "override";, + this.context.getBean(ConfigurationPropertiesBindingPostProcessor.class), + .postProcessBeforeInitialization(bean, "does-not-exist");, + assertThat(bean.name).isEqualTo("test");, + }, +]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.VanillaPublicMetrics;, + private MetricReader
[+++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>,
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <artifactId>kotlin-stdlib-jdk7</artifactId>, + <version>${kotlin.version}</version>, + </dependency>, + <dependency>, + <groupId>org.jetbrains.kotlin</groupId>, + <artifactId>kotlin-stdlib-jdk8</artifactId>, + <version>${kotlin.version}</version>, + </dependency>, + <dependency>, + <groupId>org.jetbrains.kotlin</groupId>]
[+++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <exclusions>, + <exclusion>, + <artifactId>geronimo-jms_1.1_spec</artifactId>, + <groupId>org.apache.geronimo.specs</groupId>, + </exclusion>, + </exclusions>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, + <groupId>javax.jms</groupId>, + <artifactId>javax.jms-api</artifactId>, +
[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.hazelcast</groupId>, + <artifactId>hazelcast</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.hazelcast</groupId>, + <artifactId>hazelcast-spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.sun.mail</groupId>, + <artifactId>javax.mail</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>javax.cache</groupId>, + <artifactId>cache-api</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>net.sf.ehcache</groupId>, + <artifactId>ehcache</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.apache.activemq</groupId>, + <artifactId>activemq-broker</artifactId>, + <optional>true</optional>, + </dependency>, +
[+++ b/eclipse/eclipse-code-formatter.xml, +<profile kind="CodeFormatterProfile" name="Spring Java Conventions" version="12">, +<setting id="org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags" value="do not insert"/>, +<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation" value="do not insert"/>, +<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_field" value="0"/>, +<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement" value="insert"/>, +<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration" value="insert"/>, +<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement" value="insert"/>, +<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement" value="insert"/>, +<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_package" value="0"/>, +<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments" value="insert"/>, +<setting id="org.eclipse.jdt.core.formatter.comment.format_line_comments" value="true"/>, +<setting id="org.eclipse.jdt.core.formatter.align_type_members_on_columns" value="false"/>, +<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_member_type" value="1"/>, +<setting id="org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation" value="16"/>, +<setting id="org.eclipse.jdt.core.formatter.comment.indent_parameter_description" value="true"/>, +<setting id="org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment" value="false"/>, +<setting id="org.eclipse.jdt.core.formatter.lineSplit" value="90"/>, +<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration" value="0"/>, +<setting id="org.eclipse.jdt.core.formatter.indentation.size" value="8"/>, +<setting id="org.eclipse.jdt.core.formatter.enabling_tag" value="@formatter:on"/>, +<setting id="org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration" value="16"/>, +<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters" value="insert"/>, +<setting id="org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line" value="false"/>, +<setting id="org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch" value="false"/>, +<setting id="org.eclipse.jdt.core.formatter.comment.indent_root_tags" value="false"/>, +<setting id="org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer" value="2"/>, +<setting id="org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line" value="true"/>, +<setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant" value="16"/>, +<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement" value="insert"/>, +<setting id="org.eclipse.jdt.core.formatter.insert_space_before_semicolon" value="do
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +import org.springframework.orm.jpa.EntityManagerFactoryInfo;, + * @author Oliver Gierke, + @ConditionalOnMissingBean(PlatformTransactionManager.class), + return new JpaTransactionManager();, + @ConditionalOnMissingBean(EntityManagerFactoryInfo.class), + public LocalContainerEntityManagerFactoryBean entityManagerFactory(JpaVendorAdapter jpaVendorAdapter) {, + entityManagerFactoryBean.setJpaVendorAdapter(jpaVendorAdapter);, + @ConditionalOnMissingBean(JpaVendorAdapter.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +import org.springframework.orm.jpa.EntityManagerFactoryInfo;, + * @author Oliver Gierke, + @ConditionalOnMissingBean(PlatformTransactionManager.class), + return new JpaTransactionManager();, + @ConditionalOnMissingBean(EntityManagerFactoryInfo.class), + public LocalContainerEntityManagerFactoryBean entityManagerFactory(JpaVendorAdapter jpaVendorAdapter) {, + entityManagerFactoryBean.setJpaVendorAdapter(jpaVendorAdapter);, + @ConditionalOnMissingBean(JpaVendorAdapter.class), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +import java.util.Collections;, +import org.springframework.boot.autoconfigure.orm.jpa.AbstractJpaAutoConfigurationTests.TestConfigurationWithTransactionManager.CustomJpaTransactionManager;, +import org.springframework.orm.jpa.JpaVendorAdapter;, +import org.springframework.transaction.PlatformTransactionManager;, +import static org.hamcrest.CoreMatchers.*;, + @Test, + public void usesManuallyDefinedEntityManagerFactoryBeanIfAvailable() {, + , + setupTestConfiguration(TestConfigurationWithEntityManagerFactory.class);, + this.context.refresh();, + , + LocalContainerEntityManagerFactoryBean factoryBean = this.context.getBean(LocalContainerEntityManagerFactoryBean.class);, + Map<String, Object> map = factoryBean.getJpaPropertyMap();, + assertThat(map.get("configured"), is((Object) "manually"));, + },
[+++ b/spring-boot-dependencies/pom.xml, + <spring-plugin.version>1.1.0.RELEASE</spring-plugin.version>, + <groupId>org.springframework.plugin</groupId>, + <artifactId>spring-plugin-metadata</artifactId>, + <version>${spring-plugin.version}</version>, + </dependency>, + <dependency>]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +, +🙅 Managed dependency upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. But pull requests for upgrades that are more involved than just a version property change are still most welcome., +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <influxdb-java.version>2.15</influxdb-java.version>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + .<String>unmodifiableSet(new HashSet<String>(, + this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), + .perform(get("/logfile").accept(MediaType.TEXT_PLAIN), + .perform(get("/loggers/org.springframework.boot"), + .perform(post("/loggers/org.springframework.boot"), + .contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), + .andExpect(status().isOk()).andDo(document("set-logger"));, + .perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + final Map<String, Object> model = new LinkedHashMap<String, Object>();, + final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, + .perform(get(endpointPath), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + PrintWriter writer = new PrintWriter(file, "UTF-8");, + try {, + finally {, + writer.close();, + }, + List<?
[+++ b/spring-boot-dependencies/pom.xml, + <spring.version>4.1.3.RELEASE</spring.version>]
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java, + map.from(properties::getScope).as(StringUtils::toStringArray).to(builder::scope);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java, + map.from(properties::getScope).as(StringUtils::toStringArray).to(builder::scope);, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/context/assertj/ApplicationContextAssertProviderTests.java, + assertThatIllegalStateException().isThrownBy(context::getSourceApplicationContext), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java, + map.from(properties::getScope).as(StringUtils::toStringArray).to(builder::scope);, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/context/assertj/ApplicationContextAssertProviderTests.java, + assertThatIllegalStateException().isThrownBy(context::getSourceApplicationContext), +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BindResultTests.java, + assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(result::get), + .withMessageContaining("No value bound");]
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import java.util.function.Supplier;, + protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, + paths.addAll(pathMappedEndpoints.get().getAllPaths());, + Supplier<PathMappedEndpoints> pathMappedEndpoints) {, + .map(pathMappedEndpoints.get()::getPath);, + Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import java.util.function.Supplier;, + protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, + paths.addAll(pathMappedEndpoints.get().getAllPaths());, + Supplier<PathMappedEndpoints> pathMappedEndpoints) {, + .map(pathMappedEndpoints.get()::getPath);, + Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +import java.util.function.Supplier;, + protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, + paths.addAll(pathMappedEndpoints.get().getAllPaths());, + streamPaths(this.includes, pathMappedEndpoints.get()).forEach(paths::add);, + streamPaths(this.excludes, pathMappedEndpoints.get()).forEach(paths::remove);, + Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import java.util.function.Supplier;, + protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, + paths.addAll(pathMappedEndpoints.get().getAllPaths());, + Supplier<PathMappedEndpoints> pathMappedEndpoints) {, + .map(pathMappedEndpoints.get()::getPath);, + Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +import java.util.function.Supplier;, + protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +
[+++ b/spring-boot-dependencies/pom.xml, + <jackson.version>2.8.0</jackson.version>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/SpringBootHypermediaApplication.java, +import org.springframework.lang.UsesJava8;, + @UsesJava8, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/SpringBootHypermediaApplication.java, +import org.springframework.lang.UsesJava8;, + @UsesJava8, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <artifactId>HikariCP-java6</artifactId>, + <groupId>org.crashub</groupId>, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/TestCommandIntegrationTests.java, + command.run("test-samples/book.groovy");, + command.run("test-samples/empty.groovy");, + command.run("test-samples/nothing.groovy");, + assertEquals("Can't find test-samples/nothing.groovy", ex.getMessage());, + command.run("test-samples/book_and_tests.groovy");, + command.run("test-samples/book.groovy", "test-samples/test.groovy");, + command.run("test-samples/spock.groovy");, + command.run("test-samples/spock.groovy", "test-samples/book_and_tests.groovy");, + command.run("test-samples/failures.groovy");, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/TestCommandIntegrationTests.java, + command.run("test-samples/book.groovy");, + command.run("test-samples/empty.groovy");, + command.run("test-samples/nothing.groovy");,
[+++ b/spring-boot-dependencies/pom.xml, + <jooq.version>3.9.0</jooq.version>]
[+++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.gitignore, +.metadata, +.factorypath, +*.ipr, +*.iws, +.DS_Store, +++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>,
[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import java.util.Collections;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, + Collections.sort(publicMetrics, AnnotationAwareOrderComparator.INSTANCE);, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import java.util.Collections;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, + Collections.sort(publicMetrics, AnnotationAwareOrderComparator.INSTANCE);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, + MetricRegistryMetricReader reader = new MetricRegistryMetricReader(, + metricRegistry);, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import java.util.Collections;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, + Collections.sort(publicMetrics, AnnotationAwareOrderComparator.INSTANCE);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, + MetricRegistryMetricReader reader = new MetricRegistryMetricReader(, + metricRegistry);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain
[+++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++ b/.mvn/jvm.config, +-Xmx512m, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/,
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/README.adoc, +* If you are upgrading, read the https://github.com/spring-projects/spring-boot/wiki[release notes], + for upgrade instructions and "new and noteworthy" features., +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, +
[+++ b/.github/ISSUE_TEMPLATE.md, +<!--, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +, +Question, +, +Please ask questions about how to use something, or to understand why something isn't, +working as you expect it to, on Stack Overflow using the spring-boot tag., +, +Bug report, +, +Please provide details of the problem, including the version of Spring Boot that you, +are using. If possible, please provide a test case or sample application that reproduces, +the problem. This makes it much easier for us to diagnose the problem and to verify that, +we have fixed
[+++ b/spring-boot-dependencies/pom.xml, + <jersey.version>2.17</jersey.version>]
[+++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +http://www.springsource.com/developer/sts[Spring Tools Suite] or, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/.mvn/wrapper/maven-wrapper.properties, +distributionUrl=https://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.3.3/apache-maven-3.3.3-bin.zip, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +http://www.springsource.com/developer/sts[Spring Tools Suite] or, +++ b/README.adoc, +* Ask a questions - we monitor http://stackoverflow.com[stackoverflow.com] for questions, +before your first change however trivial. (Or if you filed such an agreement already for, +The reference documentation requires the documentation
[+++ b/spring-boot-dependencies/pom.xml, + <hikaricp-java6.version>2.3.12</hikaricp-java6.version>]
[+++ b/.travis.yml, +jdk:, + - oraclejdk8, +services:, + - mongodb, + - redis, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +services:, + - mongodb, + - redis, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ IDEA, you, + can use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +http://maven.apache.org/run-maven/index.html[Apache Maven] v3.0.6 or above and JDK 1.8., +a `MAVEN_OPTS` environment variable with the value `-Xmx512m`, +`-Xmx512m`. We generate more artifacts when running the full build, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +services:, + - mongodb, + - redis, +++ b/CONTRIBUTING.adoc, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. Please take the time to review the following, +categories as some of them do not apply here., +🙅 "Please DO NOT Raise an Issue" Cases, +- Question, +STOP!! Please ask questions about how to use something, or to understand why something isn't, +- Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +- Managed Dependency Upgrade, +You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies
[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + if (this.profiles.isEmpty()) {, + for (String defaultProfile : this.environment.getDefaultProfiles()) {, + if (!this.profiles.contains(defaultProfile)) {, + this.profiles.add(defaultProfile);, + }, + }, + }, +, + if (resource != null && resource.exists()) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + if (this.profiles.isEmpty()) {, + for (String defaultProfile : this.environment.getDefaultProfiles()) {, + if (!this.profiles.contains(defaultProfile)) {, + this.profiles.add(defaultProfile);, + }, + }, + }, +, + if (resource != null && resource.exists()) {, +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/ArrayDocumentMatcher.java, +import java.util.Collections;, + if (values.isEmpty()) {, + values = Collections.singleton("");, + }, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + if (this.profiles.isEmpty()) {, + for (String defaultProfile : this.environment.getDefaultProfiles()) {, + if (!this.profiles.contains(defaultProfile)) {,
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <embedded-mongo.version>2.2.0</embedded-mongo.version>]
[+++ b/.gitignore, +data, +++ b/.gitignore, +data, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/.gitignore, +data, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-devtools</module>, +++ b/.gitignore, +data, +++ b/.travis.yml, +jdk:, + - oraclejdk8, +++ b/pom.xml, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <module>spring-boot-devtools</module>, +++ b/spring-boot-actuator/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <version>1.3.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.hazelcast</groupId>, + <artifactId>hazelcast</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.hazelcast</groupId>, + <artifactId>hazelcast-spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.sun.mail</groupId>, + <artifactId>javax.mail</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.timgroup</groupId>, + <artifactId>java-statsd-client</artifactId>, + <optional>true</optional>, +
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="false" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/amqp/RabbitHealthIndicatorAutoConfiguration.java, + * Copyright 2012-2019 the original author or authors., + public HealthIndicator rabbitHealthIndicator(, + Map<String, RabbitTemplate> rabbitTemplates) {, + return createHealthIndicator(rabbitTemplates);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/amqp/RabbitHealthIndicatorAutoConfiguration.java, + * Copyright 2012-2019 the original author or authors., + public HealthIndicator rabbitHealthIndicator(, + Map<String, RabbitTemplate> rabbitTemplates) {, + return createHealthIndicator(rabbitTemplates);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/audit/AuditAutoConfiguration.java, + * Copyright 2012-2019 the original author or authors., + public AuditListener auditListener(, + ObjectProvider<AuditEventRepository> auditEventRepository) throws Exception {, + return new AuditListener(auditEventRepository.getIfAvailable());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/amqp/RabbitHealthIndicatorAutoConfiguration.java, + * Copyright 2012-2019 the original author or authors., + public HealthIndicator rabbitHealthIndicator(, + Map<String, RabbitTemplate> rabbitTemplates) {, + return createHealthIndicator(rabbitTemplates);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/audit/AuditAutoConfiguration.java, + * Copyright
[+++ b/spring-boot-dependencies/pom.xml, + <tomcat.version>8.5.27</tomcat.version>]
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.mvn/jvm.config, +-Xmx1024m,
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.travis.yml, +++ b/.gitignore, +++ b/.travis.yml, +++ b/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/.gitignore, +++ b/.travis.yml, +++ b/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/spring-boot-actuator/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <groupId>org.hsqldb</groupId>, + <artifactId>hsqldb</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot</artifactId>, + <type>test-jar</type>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.apache.tomcat.embed</groupId>, + <artifactId>tomcat-embed-logging-juli</artifactId>, +++ b/.gitignore, +++ b/.travis.yml, +++ b/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/spring-boot-actuator/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <groupId>org.hsqldb</groupId>, + <artifactId>hsqldb</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, +
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.travis.yml, +++ b/.gitignore, +++ b/.travis.yml, +++ b/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/.gitignore, +++ b/.travis.yml, +++ b/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/spring-boot-actuator/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <groupId>org.hsqldb</groupId>, + <artifactId>hsqldb</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot</artifactId>, + <type>test-jar</type>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.apache.tomcat.embed</groupId>, + <artifactId>tomcat-embed-logging-juli</artifactId>, +++ b/.gitignore, +++ b/.travis.yml, +++ b/pom.xml, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <module>spring-boot-versions</module>, + <module>spring-boot-versions</module>, +++ b/spring-boot-actuator/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <version>1.2.4.BUILD-SNAPSHOT</version>, + <groupId>org.hsqldb</groupId>, + <artifactId>hsqldb</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, +
[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java, + system.setLogLevel(name, coerceLogLevel(level.trim()));]
[+++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly., +, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +❓Question, +Please ask questions about how to use something, or to understand why something isn't, +🚨 Security Vulnerability, +STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2ClientRegistrationRepositoryConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2ClientRegistrationRepositoryConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2WebSecurityConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2ClientRegistrationRepositoryConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2WebSecurityConfiguration.java, + * Copyright 2012-2018 the original author or authors.,
[+++ b/spring-boot-dependencies/pom.xml, + <artifactId>spring-boot-starter-jta-atomikos</artifactId>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter-jta-bitronix</artifactId>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter-jta-arjuna</artifactId>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, +++ b/spring-boot-dependencies/pom.xml, + <artifactId>spring-boot-starter-jta-atomikos</artifactId>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter-jta-bitronix</artifactId>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter-jta-arjuna</artifactId>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, +++ b/spring-boot-starters/pom.xml, + <module>spring-boot-starter-jta-atomikos</module>, + <module>spring-boot-starter-jta-bitronix</module>, +++ b/spring-boot-dependencies/pom.xml, + <artifactId>spring-boot-starter-jta-atomikos</artifactId>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter-jta-bitronix</artifactId>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter-jta-arjuna</artifactId>, + <version>1.2.0.BUILD-SNAPSHOT</version>, + </dependency>, +
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <mssql-jdbc.version>6.2.2.jre8</mssql-jdbc.version>]
[+++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +import org.springframework.boot.actuate.cache.GuavaCacheStatisticsProvider;, +import org.springframework.cache.guava.GuavaCache;, + @ConditionalOnClass({ com.google.common.cache.Cache.class, GuavaCache.class }), + static class GuavaCacheStatisticsConfiguration {, +, + @Bean, + public GuavaCacheStatisticsProvider guavaCacheStatisticsProvider() {, + return new GuavaCacheStatisticsProvider();, + }, +, + }, +, + @Configuration, +++ b/pom.xml, + <version>1.4.2.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <jackson.version>2.9.8</jackson.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <jaxen.version>1.1.6</jaxen.version>, + <jdom.version>2.0.1</jdom.version>, + <spring-ws.version>2.1.4.RELEASE</spring-ws.version>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter-ws</artifactId>, + <version>1.1.0.BUILD-SNAPSHOT</version>, + </dependency>, + <groupId>jaxen</groupId>, + <artifactId>jaxen</artifactId>, + <version>${jaxen.version}</version>, + </dependency>, + <dependency>, + <groupId>org.jdom</groupId>, + <artifactId>jdom</artifactId>, + <version>${jdom.version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.mobile</groupId>, + <artifactId>spring-mobile-device</artifactId>, + <version>${spring-mobile.version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.ws</groupId>, + <artifactId>spring-ws-core</artifactId>, + <version>${spring-ws.version}</version>, + <exclusions>, + <exclusion>, + <groupId>commons-logging</groupId>, + <artifactId>commons-logging</artifactId>, + </exclusion>, + </exclusions>, + </dependency>, + <dependency>, + <groupId>org.springframework.ws</groupId>, + <artifactId>spring-ws-support</artifactId>, + <version>${spring-ws.version}</version>, + <exclusions>, + <exclusion>, + <groupId>commons-logging</groupId>, + <artifactId>commons-logging</artifactId>, + </exclusion>, + </exclusions>, + </dependency>, + <dependency>, + <groupId>org.springframework.ws</groupId>, + <artifactId>spring-ws-security</artifactId>, + <version>${spring-ws.version}</version>, +
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <elasticsearch.version>5.6.11</elasticsearch.version>]
[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + * @see org.springframework.boot.context.config.ConfigFileEnvironmentPostProcessor, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + * @see org.springframework.boot.context.config.ConfigFileEnvironmentPostProcessor, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + * @see org.springframework.boot.context.config.ConfigFileEnvironmentPostProcessor, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/cloudfoundry/VcapEnvironmentPostProcessor.java, +/*, + * Copyright 2010-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <rest-assured.version>3.0.5</rest-assured.version>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, +++ /dev/null, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +++ b/spring-boot-actuator/pom.xml, + <version>1.4.3.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, +
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.travis.yml, +services: mongodb, +++ b/.gitignore, +++ b/.travis.yml, +services: mongodb, +++ b/CONTRIBUTING.adoc, +given the ability to merge pull requests. Use ``Phillip Webb'' or ``Dave Syer'' in the, + the ``Importing into eclipse'' instructions below you should get project specific, + `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, + use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +* Add yourself as an `@author` to the .java files that you modify substantially (more, +* Add some Javadocs and, if you change the namespace, some XSD doc elements., + message (where XXXX is the issue number).,
[+++ b/spring-boot-tools/spring-boot-gradle-plugin/pom.xml, + <gradle.task>build</gradle.task>, + <argument>${gradle.task}</argument>, + <id>skipTests</id>, + <activation>, + <property>, + <name>skipTests</name>, + <value>true</value>, + </property>, + </activation>, + <properties>, + <gradle.task>assemble</gradle.task>, + </properties>, + </profile>, + <profile>]
[+++ b/CONTRIBUTING.adoc, +++ b/CONTRIBUTING.adoc, +++ b/README.adoc, +The {docs}/htmlsingle/[reference documentation] includes detailed, +{docs}/htmlsingle/#getting-started-installing-spring-boot[installation instructions], +as well as a comprehensive {docs}/htmlsingle/#getting-started-first-application[``getting, +started``] guide. Documentation is published in {docs}/htmlsingle/[HTML],, +{docs}/pdf/spring-boot-reference.pdf[PDF] and {docs}/epub/spring-boot-reference.epub[EPUB], +formats., +* Check the {docs}/htmlsingle/[reference documentation], especially the, + {docs}/htmlsingle/#howto[How-to's] -- they provide solutions to the most common, +* If you are upgrading, read the https://github.com/spring-projects/spring-boot/wiki[release notes], + for upgrade instructions and "new and noteworthy" features., +* Report bugs with Spring Boot at https://github.com/spring-projects/spring-boot/issues[github.com/spring-projects/spring-boot/issues]., +* Before you log a bug, please https://github.com/spring-projects/spring-boot/search?type=Issues[search the issue tracker], + to see if someone has already reported the problem., +* If the issue doesn't
[+++ b/spring-boot-dependencies/pom.xml, + <artemis.version>1.5.3</artemis.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <undertow.version>1.1.1.Final</undertow.version>]
[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-parent/pom.xml, + <directory>${main.basedir}/spring-boot-parent/src/checkstyle</directory>, + <configLocation>src/checkstyle/checkstyle.xml</configLocation>, + <suppressionsLocation>src/checkstyle/checkstyle-suppressions.xml</suppressionsLocation>, + <headerLocation>src/checkstyle/checkstyle-header.txt</headerLocation>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-parent/pom.xml, + <directory>${main.basedir}/spring-boot-parent/src/checkstyle</directory>, + <configLocation>src/checkstyle/checkstyle.xml</configLocation>, + <suppressionsLocation>src/checkstyle/checkstyle-suppressions.xml</suppressionsLocation>, + <headerLocation>src/checkstyle/checkstyle-header.txt</headerLocation>, +++ b/spring-boot-parent/src/checkstyle/checkstyle-header.txt, +^\Q/*\E$, +^\Q * Copyright \E20\d\d\-20\d\d\Q the original author or authors.\E$, +^\Q *\E$, +^\Q * Licensed under the Apache License, Version 2.0 (the "License");\E$, +^\Q * you may not use this file except in compliance with the License.\E$, +^\Q * You may
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java, + .contains("<div>Expected!</div>").contains(, + "<div style='white-space:pre-wrap;'>java.lang.IllegalStateException");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java, + .contains("<div>Expected!</div>").contains(, + "<div style='white-space:pre-wrap;'>java.lang.IllegalStateException");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfigurationTests.java, + .contains("<div>Exception message</div>").contains(, + "<div style='white-space:pre-wrap;'>java.lang.IllegalStateException");]
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/README.adoc, +* If you are upgrading, read the https://github.com/spring-projects/spring-boot/wiki[release notes], + for upgrade instructions and "new and noteworthy" features., +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, +
[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;, +import org.springframework.boot.context.embedded.MultipartConfigFactory;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.util.StringUtils;, +import org.springframework.web.multipart.support.StandardServletMultipartResolver;, +, + * {@link StandardServletMultipartResolver} if none is present, and adds a, + * {@link javax.servlet.MultipartConfigElement multipartConfigElement} if none is otherwise defined., + * The {@link EmbeddedWebApplicationContext} will associate the, + * <p/>, + * The {@link javax.servlet.MultipartConfigElement} is a Servlet API that's used to configure how the container handles, + * file uploads. By default, + * @author Josh Long, +@EnableConfigurationProperties(MultipartProperties.class), + @Autowired, + private MultipartProperties multipartProperties = new MultipartProperties();, +, + @ConditionalOnMissingBean, +
[+++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-cli/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-cli/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-dependencies/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <spring-boot.version>1.2.3.BUILD-SNAPSHOT</spring-boot.version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, + <version>1.2.3.BUILD-SNAPSHOT</version>, +
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <unboundid-ldapsdk.version>4.0.1</unboundid-ldapsdk.version>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, + .<String>unmodifiableSet(new HashSet<String>(, + this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), + .perform(get("/logfile").accept(MediaType.TEXT_PLAIN), + .perform(get("/loggers/org.springframework.boot"), + .perform(post("/loggers/org.springframework.boot"), + .contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), + .perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + final Map<String, Object> model = new LinkedHashMap<String, Object>();, + final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, + .perform(get(endpointPath), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + List<? extends MvcEndpoint> endpoints = new ArrayList<MvcEndpoint>(, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +
[+++ b/spring-boot-dependencies/pom.xml, + <hazelcast.version>3.6.2</hazelcast.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <hazelcast.version>3.6.1</hazelcast.version>]
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * Maximum size of the HTTP post content., + private DataSize maxHttpPostSize = DataSize.ofMegabytes(2);, + private DataSize maxHttpHeaderSize = DataSize.ofBytes(0);, + public DataSize getMaxHttpPostSize() {, + public void setMaxHttpPostSize(DataSize maxHttpPostSize) {, + public DataSize getMaxHttpHeaderSize() {, + public void setMaxHttpHeaderSize(DataSize maxHttpHeaderSize) {, + * Maximum size of the HTTP post or put content., + private DataSize maxHttpPostSize = DataSize.ofBytes(200000);, + public DataSize getMaxHttpPostSize() {, + public void setMaxHttpPostSize(DataSize maxHttpPostSize) {, + * Maximum size of the HTTP post content. When the value is -1, the default, the, + * size is unlimited., + private DataSize maxHttpPostSize
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +.gradletasknamecache, +.sts4-cache, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target,
[+++ b/spring-boot-autoconfigure/pom.xml, +++ b/spring-boot-autoconfigure/pom.xml, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, + @SuppressWarnings("deprecation"), +++ b/spring-boot-autoconfigure/pom.xml, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, + @SuppressWarnings("deprecation"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java, + /**, + * Tomcat Pool DataSource configuration., + */, + /**, + * Hikari DataSource configuration., + */, + /**, + * DBCP DataSource configuration., + * @deprecated as of Spring Boot 1.5 in favor of DBCP2, + */, + /**, + * DBCP DataSource configuration., + */, + /**, + * Generic DataSource configuration., + */]
[+++ b/spring-boot-dependencies/pom.xml, + <javax-mail.version>1.6.0</javax-mail.version>]
[+++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/remote/client/HttpHeaderInterceptor.java, + Assert.hasLength(value, "Value must not be empty");]
[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/export/MetricCopyExporterTests.java, + private final MetricCopyExporter exporter = new MetricCopyExporter(this.reader,, + this.writer);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/export/MetricCopyExporterTests.java, + private final MetricCopyExporter exporter = new MetricCopyExporter(this.reader,, + this.writer);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/export/RichGaugeExporterTests.java, + private final RichGaugeExporter exporter = new RichGaugeExporter(this.reader,, + this.writer);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/export/MetricCopyExporterTests.java, + private final MetricCopyExporter exporter = new MetricCopyExporter(this.reader,, + this.writer);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/export/RichGaugeExporterTests.java, + private final RichGaugeExporter exporter = new RichGaugeExporter(this.reader,, + this.writer);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/writer/DefaultCounterServiceTests.java, + private final DefaultCounterService service = new DefaultCounterService(, + this.repository);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/export/MetricCopyExporterTests.java, + private final MetricCopyExporter exporter
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/spring-boot-autoconfigure/pom.xml, + <groupId>com.github.mxab.thymeleaf.extras</groupId>, + <artifactId>thymeleaf-extras-data-attribute</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-autoconfigure/pom.xml, + <groupId>com.github.mxab.thymeleaf.extras</groupId>, + <artifactId>thymeleaf-extras-data-attribute</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect;, +, + Resource resource = this.resourceLoader.getResource(this.properties, + .getPrefix());, + return this.checkTemplateLocation;, + return this.prefix;, + return this.suffix;, + return this.mode;, + return this.encoding;, + return this.contentType;, + return this.cache;, + return this.excludedViewNames;, + return this.viewNames;, + @ConditionalOnClass(DataAttributeDialect.class), + protected static class DataAttributeDialectConfiguration {, +, + @Bean, + public DataAttributeDialect dialect() {, + return new DataAttributeDialect();, + }, +, + }, +, + @Configuration, + @ConditionalOnClass({ SpringSecurityDialect.class }), + protected static class
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/NamedParameterJdbcOperationsDependsOnPostProcessor.java, + * @since 2.1.4, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/NamedParameterJdbcOperationsDependsOnPostProcessor.java, + * @since 2.1.4, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/NamedParameterJdbcOperationsDependsOnPostProcessor.java, + * @since 2.1.4, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfigurationTests.java, + * Copyright 2012-2019 the original author or authors., +import java.util.Collections;, + .withPropertyValues("spring.flyway.locations:classpath:db/city"),
[+++ b/.bomr/bomr.yaml, + policy: same-minor-version, + - project: dom4j, + - '[20040101,)' # Old versions that use yyyymmdd format, + # Solr's Restlet dependencies, + - 'https://maven.restlet.com', +++ b/.bomr/bomr.yaml, + policy: same-minor-version, + - project: dom4j, + - '[20040101,)' # Old versions that use yyyymmdd format, + # Solr's Restlet dependencies, + - 'https://maven.restlet.com', +++ b/.editorconfig, +[*.java], +indent_style = tab, +indent_size = 4, +continuation_indent_size = 8, +, +[*.xml], +++ b/.bomr/bomr.yaml, + policy: same-minor-version, + - project: dom4j, + - '[20040101,)' # Old versions that use yyyymmdd format, + # Solr's Restlet dependencies, + - 'https://maven.restlet.com', +++ b/.editorconfig, +[*.java], +indent_style
[+++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + <groupId>com.sun.xml.messaging.saaj</groupId>, + <artifactId>saaj-impl</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>javax.xml.ws</groupId>, + <artifactId>jaxws-api</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + <groupId>com.sun.xml.messaging.saaj</groupId>, + <artifactId>saaj-impl</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>javax.xml.ws</groupId>, + <artifactId>jaxws-api</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + <javax-jaxws.version>2.3.0</javax-jaxws.version>, + <saaj-impl.version>1.4.0</saaj-impl.version>, + <groupId>com.sun.xml.messaging.saaj</groupId>, + <artifactId>saaj-impl</artifactId>, + <version>${saaj-impl.version}</version>, + </dependency>, + <dependency>, + <groupId>javax.xml.ws</groupId>, + <artifactId>jaxws-api</artifactId>, + <version>${javax-jaxws.version}</version>, + </dependency>, + <dependency>, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + <groupId>com.sun.xml.messaging.saaj</groupId>, + <artifactId>saaj-impl</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +
[+++ b/.bomr/bomr.yaml, + bom: spring-boot-dependencies/pom.xml, + policy: same-minor-version, + - project: commons-collections, + - '[20030101,)' # Old versions that use yyyymmdd format, + - project: dom4j, + - '[20040101,)' # Old versions that use yyyymmdd format, + - project: ehcache, + versions:, + - '[2.10.6,2.11)' # 2.10.6 raised the Java baseline to Java 8, + - https://repo.spring.io/gemstone-release-pivotal-cache, +++ b/.bomr/bomr.yaml, + bom: spring-boot-dependencies/pom.xml, + policy: same-minor-version, + - project: commons-collections, + - '[20030101,)' # Old versions that use yyyymmdd format, + - project: dom4j, + - '[20040101,)' # Old versions that use yyyymmdd format, + - project: ehcache, + versions:,
[+++ b/spring-bootstrap-maven-plugin/pom.xml, + <groupId>org.codehaus.plexus</groupId>, + <artifactId>plexus-utils</artifactId>, + <version>3.0.10</version>, + </dependency>, + <dependency>]
[+++ b/spring-boot-dependencies/pom.xml, + <caffeine.version>2.2.2</caffeine.version>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, +
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +given the ability to merge pull requests., +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/.gitignore, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +given the ability to merge pull requests., +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/README.adoc, += Spring
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <flatten-maven-plugin.version>1.0.1</flatten-maven-plugin.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <jackson.version>2.8.3</jackson.version>]
[+++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>org.apache.commons</groupId>, + <artifactId>commons-dbcp2</artifactId>, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>org.apache.commons</groupId>, + <artifactId>commons-dbcp2</artifactId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * @deprecated as of 1.5, +@Deprecated, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>org.apache.commons</groupId>, + <artifactId>commons-dbcp2</artifactId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * @deprecated as of 1.5, +@Deprecated, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>org.apache.commons</groupId>, + <artifactId>commons-dbcp2</artifactId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +
[+++ b/spring-boot-autoconfigure/pom.xml, + <groupId>de.flapdoodle.embed</groupId>, + <artifactId>de.flapdoodle.embed.mongo</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-autoconfigure/pom.xml, + <groupId>de.flapdoodle.embed</groupId>, + <artifactId>de.flapdoodle.embed.mongo</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/EmbedMongoAutoConfiguration.java, +package org.springframework.boot.autoconfigure.mongo;, +, +import com.mongodb.Mongo;, +import de.flapdoodle.embed.mongo.MongodExecutable;, +import de.flapdoodle.embed.mongo.MongodStarter;, +import de.flapdoodle.embed.mongo.config.IMongodConfig;, +import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;, +import de.flapdoodle.embed.mongo.config.Net;, +import de.flapdoodle.embed.mongo.distribution.Version;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +, +import java.io.IOException;, +, +import static de.flapdoodle.embed.process.runtime.Network.localhostIsIPv6;, +, +@Configuration, +@ConditionalOnClass({ Mongo.class, MongodStarter.class}), +public class EmbedMongoAutoConfiguration {, +, + @Autowired, + private MongoProperties properties;, +, + @Bean(initMethod = "start", destroyMethod = "stop"), + public MongodExecutable embedMongoServer() throws IOException {, + IMongodConfig mongodConfig = new MongodConfigBuilder(), + .version(Version.Main.PRODUCTION), + .net(new
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>neo4j-snapshots</id>, + <url>http://m2.neo4j.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>neo4j-snapshots</id>, + <url>http://m2.neo4j.org/content/repositories/snapshots</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, +
[+++ b/spring-boot-samples/spring-boot-sample-logback/src/main/resources/logback-spring.xml, + <springProfile name="staging">, + <logger name="sample.logback" level="TRACE" />, + </springProfile>, +++ b/spring-boot-samples/spring-boot-sample-logback/src/main/resources/logback-spring.xml, + <springProfile name="staging">, + <logger name="sample.logback" level="TRACE" />, + </springProfile>, +++ b/spring-boot-samples/spring-boot-sample-logback/src/test/java/sample/logback/SampleLogbackApplicationTests.java, + @Test, + public void testProfile() throws Exception {, + SampleLogbackApplication, + .main(new String[] { "--spring.profiles.active=staging" });, + this.outputCapture.expect(containsString("Sample Debug Message"));, + this.outputCapture.expect(containsString("Sample Trace Message"));, + }, +, +++ b/spring-boot-samples/spring-boot-sample-logback/src/main/resources/logback-spring.xml, + <springProfile name="staging">, + <logger name="sample.logback" level="TRACE" />, + </springProfile>, +++ b/spring-boot-samples/spring-boot-sample-logback/src/test/java/sample/logback/SampleLogbackApplicationTests.java, + @Test, + public void testProfile() throws Exception {, + SampleLogbackApplication, + .main(new String[] { "--spring.profiles.active=staging" });, + this.outputCapture.expect(containsString("Sample Debug Message"));, + this.outputCapture.expect(containsString("Sample Trace Message"));, + }, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j/src/main/java/sample/actuator/log4j/HelloWorldService.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, +
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +++ b/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.6.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc,
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <reactor-bom.version>Californium-BUILD-SNAPSHOT</reactor-bom.version>]
[+++ b/spring-boot-dependencies/pom.xml, + <spring.version>4.2.2.RELEASE</spring.version>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by most Java IDEs. Refer to you vendor documentation., +++ b/README.adoc, += Spring Boot image:https://build.spring.io/plugins/servlet/buildStatusImage/BOOT-PUB["Build Status", link="https://build.spring.io/browse/BOOT-PUB"], +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +Maven is well supported by
[+++ b/CODE_OF_CONDUCT.adoc, += Contributor Code of Conduct, +, +As contributors and maintainers of this project, and in the interest of fostering an open, +and welcoming community, we pledge to respect all people who contribute through reporting, +issues, posting feature requests, updating documentation, submitting pull requests or, +patches, and other activities., +, +We are committed to making participation in this project a harassment-free experience for, +everyone, regardless of level of experience, gender, gender identity and expression,, +sexual orientation, disability, personal appearance, body size, race, ethnicity, age,, +religion, or nationality., +, +Examples of unacceptable behavior by participants include:, +, +* The
[+++ b/spring-boot-docs/pom.xml, + <groupId>com.fasterxml.jackson.datatype</groupId>, + <artifactId>jackson-datatype-joda</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.fasterxml.jackson.dataformat</groupId>, + <artifactId>jackson-dataformat-xml</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.hazelcast</groupId>, + <artifactId>hazelcast</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.hazelcast</groupId>, + <artifactId>hazelcast-spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.sendgrid</groupId>, + <artifactId>sendgrid-java</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.timgroup</groupId>, + <artifactId>java-statsd-client</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>com.zaxxer</groupId>, + <artifactId>HikariCP</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>commons-dbcp</groupId>, + <artifactId>commons-dbcp</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.apache.commons</groupId>, + <artifactId>commons-pool2</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>io.projectreactor.spring</groupId>, + <artifactId>reactor-spring-context</artifactId>, + <optional>true</optional>, +
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/eclipse/org.eclipse.jdt.ui.prefs, +org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="false" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n
[+++ b/CONTRIBUTING.adoc, +NOTE: As for the standard build, you may need to increase the amount of memory available, +to Maven by setting a `MAVEN_OPTS` environment variable with the value, +`-Xmx512m -XX:MaxPermSize=128m`. We generate more artifacts when running the full build, +(such as Javadoc jars), so you may find the process a little slower than the standard build., +changes just won't be automatically formatted., +++ b/CONTRIBUTING.adoc, +NOTE: As for the standard build, you may need to increase the amount of memory available, +to Maven by setting a `MAVEN_OPTS` environment variable with the value, +`-Xmx512m -XX:MaxPermSize=128m`. We generate more artifacts when
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +++ b/pom.xml, + <version>1.1.8.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc, +++ b/pom.xml, + <version>1.1.8.BUILD-SNAPSHOT</version>, + <module>spring-boot-parent</module>, + <module>spring-boot-dependencies</module>, + <id>full</id>, +++ b/spring-boot-actuator/pom.xml, + <version>1.1.8.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/.travis.yml, +install: mvn install -q -U -DskipTests=true -Dmaven.test.redirectTestOutputToFile=true -P snapshot, +++ b/CONTRIBUTING.adoc,
[+++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.mvn/jvm.config, +-Xmx1024m, +++ b/.gitignore, +*.sw?, +*~, +.#*, +.*.md.html, +.classpath, +.factorypath, +.gradle, +.idea, +.metadata, +.project, +.recommenders, +.settings, +.springBeans, +/build, +/code, +MANIFEST.MF, +_site/, +activemq-data, +bin, +build, +build.log, +dependency-reduced-pom.xml, +interpolated*.xml, +lib/, +manifest.yml, +overridedb.*, +settings.xml, +target, +secrets.yml, +++ b/.mvn/jvm.config, +-Xmx1024m,
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <groovy.version>2.5.3</groovy.version>, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <groovy.version>2.5.3</groovy.version>, +++ b/spring-boot-project/spring-boot-docs/pom.xml, + <groupId>org.codehaus.gmavenplus</groupId>, + <artifactId>gmavenplus-plugin</artifactId>, + <executions>, + <execution>, + <goals>, + <goal>execute</goal>, + </goals>, + <phase>generate-resources</phase>, + </execution>, + </executions>, + <configuration>, + <scripts>, + <script>file:///${project.basedir}/src/main/groovy/generateAutoConfigurationClassTables.groovy</script>, + <script>file:///${project.basedir}/src/main/groovy/generateStarterTables.groovy</script>, + <script>file:///${project.basedir}/src/main/groovy/generateTestSlicesTable.groovy</script>, + </scripts>, + </configuration>, + <dependencies>, + <dependency>, + <groupId>org.codehaus.groovy</groupId>, + <artifactId>groovy</artifactId>, + <version>${groovy.version}</version>, + </dependency>, + <dependency>, + <groupId>org.codehaus.groovy</groupId>, + <artifactId>groovy-ant</artifactId>, + <version>${groovy.version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework</groupId>, + <artifactId>spring-core</artifactId>, + <version>${spring-framework.version}</version>, + </dependency>, + </dependencies>, + </plugin>, + <plugin>]
[+++ b/CONTRIBUTING.adoc, +We generate more artifacts when running the full build (such as Javadoc jars), so you, +may find the process a little slower than the standard build., +++ b/CONTRIBUTING.adoc, +We generate more artifacts when running the full build (such as Javadoc jars), so you, +may find the process a little slower than the standard build., +++ b/pom.xml, + <version>1.0.3.BUILD-SNAPSHOT</version>, + <id>fixup-starter-parent</id>, + <property name="sourceFile" value="spring-boot-starters/spring-boot-starter-parent/pom.xml" />, + <xsl:value-of select="/m:project/m:parent/m:version/text()"/>, +, + <xsl:template, + match="m:dependency[m:groupId='org.springframework.boot']/m:version/text()">, + <xsl:text>${spring-boot.version}</xsl:text>, + </xsl:template>, +, + <xsl:template, + match="m:plugin[m:groupId='org.springframework.boot']/m:version/text()">, + <xsl:text>${spring-boot.version}</xsl:text>, + </xsl:template>, +, +++ b/CONTRIBUTING.adoc, +We generate more artifacts when running the full
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <junit-jupiter.version>5.3.0</junit-jupiter.version>]
[+++ b/spring-boot-samples/pom.xml, + <module>spring-boot-sample-data-ldap</module>, +++ b/spring-boot-samples/pom.xml, + <module>spring-boot-sample-data-ldap</module>, +++ b/spring-boot-samples/spring-boot-sample-data-ldap/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <!-- Your own application should inherit from spring-boot-starter-parent -->, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-samples</artifactId>, + <version>1.5.0.BUILD-SNAPSHOT</version>, + </parent>, + <artifactId>spring-boot-sample-data-ldap</artifactId>, + <name>Spring Boot Data LDAP Sample</name>, + <description>Spring Boot Data LDAP Sample</description>, + <url>http://projects.spring.io/spring-boot/</url>, + <organization>, + <name>Pivotal Software, Inc.</name>, + <url>http://www.spring.io</url>, + </organization>, + <properties>, + <main.basedir>${basedir}/../..</main.basedir>, + </properties>, + <dependencies>, + <!-- Compile -->, + <dependency>, + <groupId>com.unboundid</groupId>, + <artifactId>unboundid-ldapsdk</artifactId>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, + <artifactId>spring-boot-starter</artifactId>, + </dependency>, + <dependency>, + <groupId>org.springframework.boot</groupId>, +
[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpoint.java, +import org.springframework.boot.endpoint.EndpointDelivery;, + * specific {@link EndpointDelivery}, if any. If any property are set, they are evaluated, + * with a sensible order of precedence., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpoint.java, +import org.springframework.boot.endpoint.EndpointDelivery;, + * specific {@link EndpointDelivery}, if any. If any property are set, they are evaluated, + * with a sensible order of precedence., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/OnEnabledEndpointCondition.java, +import org.springframework.boot.endpoint.EndpointDelivery;, +import org.springframework.util.Assert;, + EndpointAttributes attributes = getEndpointAttributes(context, metadata);, + EndpointEnablement endpointEnablement = attributes, + .getEnablement(new EndpointEnablementProvider(context.getEnvironment()));, + Assert.state(, + metadata instanceof MethodMetadata, + && metadata.isAnnotated(Bean.class.getName()),, + "OnEnabledEndpointCondition may only be used on @Bean methods");, + return getEndpointAttributes(context, (MethodMetadata) metadata);, + },
[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java, + * Copyright 2012-2019 the original author or authors., +import org.springframework.boot.autoconfigure.task.TaskSchedulingProperties.Shutdown;, + Shutdown shutdown = properties.getShutdown();, + builder = builder.awaitTermination(shutdown.isAwaitTermination());, + builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java, + * Copyright 2012-2019 the original author or authors., +import org.springframework.boot.autoconfigure.task.TaskSchedulingProperties.Shutdown;, + Shutdown shutdown = properties.getShutdown();, + builder = builder.awaitTermination(shutdown.isAwaitTermination());, + builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingProperties.java, + * Copyright 2012-2019 the original author or authors., +import java.time.Duration;, +, + private final Shutdown shutdown = new Shutdown();, +, + public Shutdown getShutdown() {, + return this.shutdown;, + }, +, + public static class Shutdown {, +, + /**, + * Whether the
[+++ b/.settings-template.xml, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + <repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </pluginRepository>, + <pluginRepository>, + <id>spring-snapshots</id>, + <name>Spring Snapshots</name>, + <url>http://repo.spring.io/snapshot</url>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </pluginRepository>, + </pluginRepositories>, + <repository>, + <id>spring-milestones</id>, + <name>Spring Milestones</name>, + <url>http://repo.spring.io/milestone</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <pluginRepositories>, + <pluginRepository>, + <id>spring-milestones</id>, + <name>Spring
[+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java, + if (getLog().isWarnEnabled()) {, + }, + StringBuilder stringBuilder = new StringBuilder();, + if (getLog().isInfoEnabled()) {, + }, + if (getLog().isDebugEnabled()) {, + }, + if (getLog().isDebugEnabled()) {, + getLog().debug(Arrays.stream(args).collect(Collectors.joining(" ", message, "")));, + public static String format(String key, String value) {, + if (value == null || value.isEmpty()) {, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java, + if (getLog().isWarnEnabled()) {, + }, + StringBuilder stringBuilder = new StringBuilder();, + if (getLog().isInfoEnabled()) {, + }, + if (getLog().isDebugEnabled()) {, + }, + if (getLog().isDebugEnabled()) {, + getLog().debug(Arrays.stream(args).collect(Collectors.joining(" ", message, "")));, + public static String format(String key, String value) {, + if (value
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +Thanks for raising a Spring Boot issue. What sort of issue are you raising?, +Please ask questions about how to use something, or to understand why something isn't, +++ b/.gitignore, +.gradle, +*.sw?, +.#*, +*~, +/build, +/code, +.classpath, +.project, +.settings, +.metadata, +.factorypath, +.recommenders, +bin, +build, +lib/, +target, +.springBeans, +interpolated*.xml, +dependency-reduced-pom.xml, +build.log, +_site/, +.*.md.html, +manifest.yml, +MANIFEST.MF, +settings.xml, +activemq-data, +overridedb.*, +*.jar, +.DS_Store, +spring-boot-tests/, +++
[+++ b/spring-boot-starters/pom.xml, +++ b/spring-boot-starters/pom.xml, +++ /dev/null, +++ b/spring-boot-starters/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-starters/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-starters/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, + RabbitAutoConfiguration.class, SolrAutoConfiguration.class }), +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, + RabbitAutoConfiguration.class, SolrAutoConfiguration.class }), +++ /dev/null, +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, + RabbitAutoConfiguration.class, SolrAutoConfiguration.class }), +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, + RabbitAutoConfiguration.class, SolrAutoConfiguration.class }), +++ /dev/null, +++ /dev/null, +++ b/spring-boot-actuator/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +++ b/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, + RabbitAutoConfiguration.class, SolrAutoConfiguration.class }),
[+++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, +++ b/pom.xml, + <version>2.0.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, + <repository>, + <id>rabbit-milestones</id>, + <name>Rabbit Milestones</name>, + <url>https://dl.bintray.com/rabbitmq/maven-milestones</url>, + <snapshots>, + <enabled>false</enabled>, + </snapshots>, + </repository>, + <repository>, + <id>rabbit-milestones</id>,
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.shell</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.cli</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.embed.spring</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.crashub</groupId>, + <artifactId>crash.connectors.telnet</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/.settings-template.xml, +++ b/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, + <version>1.5.0.BUILD-SNAPSHOT</version>, + <groupId>com.google.guava</groupId>, +
[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +import org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration;, + Neo4jAutoConfiguration.class,, + Neo4jAutoConfiguration.class,, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +import org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration;, + Neo4jAutoConfiguration.class,, + Neo4jAutoConfiguration.class,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoRepositoriesAutoConfiguration.java, +@ConditionalOnMissingBean({ MongoRepositoryFactoryBean.class,, + MongoRepositoryConfigurationExtension.class }), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +import org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration;, + Neo4jAutoConfiguration.class,, + Neo4jAutoConfiguration.class,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoRepositoriesAutoConfiguration.java, +@ConditionalOnMissingBean({ MongoRepositoryFactoryBean.class,, + MongoRepositoryConfigurationExtension.class }), +++ /dev/null, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +import org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration;, + Neo4jAutoConfiguration.class,, + Neo4jAutoConfiguration.class,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoRepositoriesAutoConfiguration.java, +@ConditionalOnMissingBean({ MongoRepositoryFactoryBean.class,, + MongoRepositoryConfigurationExtension.class }), +++ /dev/null, +++ /dev/null, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +import org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration;, + Neo4jAutoConfiguration.class,, + Neo4jAutoConfiguration.class,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoRepositoriesAutoConfiguration.java, +@ConditionalOnMissingBean({ MongoRepositoryFactoryBean.class,, + MongoRepositoryConfigurationExtension.class }), +++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jRepositoriesAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration;, + * @since 1.4.0, +@Import(Neo4jRepositoriesAutoConfigureRegistrar.class), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +import
[+++ b/spring-boot-dependencies/pom.xml, + <jedis.version>2.4.2</jedis.version>]
[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/README.adoc, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/pom.xml, + <version>1.5.6.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/pom.xml, + <version>1.5.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.6.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/pom.xml, + <version>1.5.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, + <version>1.5.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.test.web.servlet.MvcResult;, +import org.springframework.test.web.servlet.ResultHandler;, + .<String>unmodifiableSet(new HashSet<String>(, + this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), + .perform(get("/logfile").accept(MediaType.TEXT_PLAIN), + .perform(get("/loggers/org.springframework.boot"), + .perform(post("/loggers/org.springframework.boot"), + .contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), + .andExpect(status().isOk()).andDo(document("set-logger"));, + .perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + .perform(get("/auditevents").param("principal", "admin"), + .accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), + final File docs = new File("src/main/asciidoc");, + final Map<String, Object> model =
[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, + <artifactId>micrometer-registry-dynatrace</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>io.micrometer</groupId>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, + <artifactId>micrometer-registry-dynatrace</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>io.micrometer</groupId>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/dynatrace/DynatraceMetricsExportAutoConfiguration.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the
[+++ b/CONTRIBUTING.adoc, +NOTE: As for the standard build, you may need to increase the amount of memory available, +to Maven by setting a `MAVEN_OPTS` environment variable with the value, +`-Xmx512m -XX:MaxPermSize=128m`. We generate more artifacts when running the full build, +(such as Javadoc jars), so you may find the process a little slower than the standard build., +++ b/CONTRIBUTING.adoc, +NOTE: As for the standard build, you may need to increase the amount of memory available, +to Maven by setting a `MAVEN_OPTS` environment variable with the value, +`-Xmx512m -XX:MaxPermSize=128m`. We generate more artifacts when running the full build, +(such as
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <jetty-el.version>8.5.33.1</jetty-el.version>]
[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, + <hazelcast.version>3.9.4</hazelcast.version>]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/README.adoc, +* Ask a questions - we monitor http://stackoverflow.com[stackoverflow.com] for questions, +before your first change however trivial. (Or if you filed such an agreement already for, +The reference documentation requires the documentation of the maven plugin to be, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +++ b/README.adoc, +* Ask a questions - we monitor http://stackoverflow.com[stackoverflow.com] for questions, +before your first change however trivial. (Or if you filed such an
[+++ b/org.springframework.testsuite/src/test/java/org/springframework/aop/aspectj/autoproxy/perthis.xml, + <bean class="example.aspects.PerThisAspect" scope="prototype"/>]
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, + * <li>{@link Rendering} -- use case driven API for view resolution</li>, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, + * <li>{@link Rendering} -- use case driven API for view resolution</li>, +++ b/src/docs/asciidoc/web/webflux.adoc, +, +, +[[webflux-web-handler-api-special-beans]], +==== Special bean types, +, +==== Form data, +==== Multipart data, +appropriate responses. By "special beans" we mean Spring-managed, Object instances that, +implement WebFlux framework contracts. Those usually come with built-in contracts but, +you can customize their properties, extend then, or replaced., +, +The table below lists the special beans detected by the `DispatcherHandler`. Note that, +there are also some other beans detected at a lower
[+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, + * Abstract {@linkplain Transactional transactional} extension of, + * {@linkplain ApplicationContext application context}., + * <p>This class exposes a {@link JdbcTemplate} and provides an easy way to, + * {@linkplain #countRowsInTable count the number of rows in a table}, + * (potentially {@linkplain #countRowsInTableWhere with a WHERE clause}),, + * {@linkplain #deleteFromTables delete from tables},, + * {@linkplain #dropTables drop tables}, and, + * {@linkplain #executeSqlScript execute SQL scripts} within a transaction., + * @since 3.2, + * Count the rows in the given table, using the provided {@code WHERE} clause., + * <p>See the Javadoc
[+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.LinkedBlockingQueue;, + private TestMessageHandler responseHandler;, + private TestEventPublisher eventPublisher;, + this.responseHandler = new TestMessageHandler();, + this.eventPublisher = new TestEventPublisher();, + this.eventPublisher.expectBrokerAvailabilityEvent(true);, + MessageExchange conn1 = MessageExchangeBuilder.connect(sess1).build();, + MessageExchange conn2 = MessageExchangeBuilder.connect(sess2).build();, + this.relay.handleMessage(conn1.message);, + this.relay.handleMessage(conn2.message);, + this.responseHandler.expectMessages(conn1, conn2);, + MessageExchange subscribe = MessageExchangeBuilder.subscribeWithReceipt(sess1, subs1, destination, "r1").build();, + this.responseHandler.expectMessages(subscribe);, + this.responseHandler.expectMessages(send);, + public void messageDeliveryExceptionIfSystemSessionForwardFails() throws Exception {, + this.responseHandler.expectMessages(connect);, + MessageExchange error = MessageExchangeBuilder.error(sess1).build();, + this.responseHandler.expectMessages(error);, + this.eventPublisher.expectBrokerAvailabilityEvent(false);, + this.responseHandler.expectMessages(conn1);, + MessageExchange subscribe = MessageExchangeBuilder.subscribeWithReceipt(sess1, subs1, destination, "r1").build();, + this.responseHandler.expectMessages(subscribe);, + MessageExchange error = MessageExchangeBuilder.error(sess1).build();, + this.responseHandler.expectMessages(error);, + this.eventPublisher.expectBrokerAvailabilityEvent(false);, + this.eventPublisher.expectBrokerAvailabilityEvent(true);, + this.responseHandler.expectMessages(connect);, +
[+++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a ticket in the [Github issue tracker](https://github.com/spring-projects/spring-framework/issues)., +++ /dev/null, +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a ticket in the [Github issue tracker](https://github.com/spring-projects/spring-framework/issues)., +++ b/build.gradle, + id "org.jetbrains.kotlin.jvm" version "1.2.71" apply false, + junit5Version = "5.3.2", + kotlinVersion = "1.2.71", + apiVersion = "1.1", + languageVersion = "1.1", + testCompile("com.nhaarman:mockito-kotlin:1.6.0") {, + exclude module: "kotlin-stdlib", + exclude module: "kotlin-reflect", + exclude module: "mockito-core", + }, +++ /dev/null, +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different
[+++ b/spring-context/src/main/java/org/springframework/context/i18n/LocaleContextHolder.java, + * Copyright 2002-2017 the original author or authors., + * @see #getLocaleContext(), + return getLocale(getLocaleContext());, + }, +, + /**, + * Return the Locale associated with the given user context, if any,, + * or the system default Locale otherwise. This is effectively a, + * replacement for {@link java.util.Locale#getDefault()},, + * able to optionally respect a user-level Locale setting., + * @param localeContext the user-level locale context to check, + * @return the current Locale, or the system default Locale if no, + * specific Locale has been associated with the current thread, +
[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * Copyright 2002-2018 the original author or authors., + public void register(Class<?>... annotatedClasses) {, + public void scan(String... basePackages) {, + public <T> void registerBean(Class<T> annotatedClass, Object... constructorArguments) {, + public <T> void registerBean(@Nullable String beanName, Class<T> annotatedClass, Object... constructorArguments) {, + public <T> void registerBean(@Nullable String beanName, Class<T> beanClass, @Nullable Supplier<T> supplier,, + BeanDefinitionCustomizer... customizers) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * Copyright 2002-2018
[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + public void setDefaultContentType(MediaType contentType) {, + this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType);, + }, +, + /**, + * Set the default content types to use when no content type is requested., + * <p>By default this is not set., + * @see #setDefaultContentTypeStrategy, + * @since 5.0, + */, + public void setDefaultContentTypes(List<MediaType> contentTypes) {, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + public void setDefaultContentType(MediaType contentType) {, + this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType);, + }, +, + /**, + * Set the default content types to use when no content type is requested., + * <p>By default this is not set., +
[+++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.jboss.integration/com.springsource.org.jboss.classloading.spi/5.0.3.GA/com.springsource.org.jboss.classloading.spi-5.0.3.GA.jar"/>, + <classpathentry kind="var" path="IVY_CACHE/org.jboss.util/com.springsource.org.jboss.util/2.2.13.GA/com.springsource.org.jboss.util-2.2.13.GA.jar"/>, +++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.jboss.integration/com.springsource.org.jboss.classloading.spi/5.0.3.GA/com.springsource.org.jboss.classloading.spi-5.0.3.GA.jar"/>, + <classpathentry kind="var" path="IVY_CACHE/org.jboss.util/com.springsource.org.jboss.util/2.2.13.GA/com.springsource.org.jboss.util-2.2.13.GA.jar"/>, +++ b/org.springframework.context/ivy.xml, + <dependency org="org.jboss.util" name="com.springsource.org.jboss.util" rev="2.2.13.GA" conf="provided, runtime->compile"/>]
[+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, + * Copyright 2002-2017 the original author or authors., + * <p>The {@link #close()} method is the native way to shut down, + * an ApplicationContext, which this method simply delegates to., +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, + * Copyright 2002-2017 the original author or authors., + * <p>The {@link #close()} method is the native way to shut down, + * an ApplicationContext, which this method simply delegates to., +++ b/spring-web/src/main/java/org/springframework/web/context/ContextLoader.java, + * Close Spring's web application context for the given servlet context., +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, + * Copyright 2002-2017 the original author or authors., + * <p>The {@link #close()} method
[+++ b/spring-context/src/main/java/org/springframework/scripting/bsh/BshScriptFactory.java, + * Copyright 2002-2016 the original author or authors., + try {, + }, + catch (EvalError ex) {, + this.scriptClass = null;, + throw new ScriptCompilationException(scriptSource, ex);, + }, + try {, + }, + try {, + this.scriptClass = null;, + }, +++ b/spring-context/src/main/java/org/springframework/scripting/bsh/BshScriptFactory.java, + * Copyright 2002-2016 the original author or authors., + try {, + }, + catch (EvalError ex) {, + this.scriptClass = null;, + throw new ScriptCompilationException(scriptSource, ex);, + }, + try {, + }, + try {, + this.scriptClass = null;, + }, +++ b/spring-context/src/main/java/org/springframework/scripting/groovy/GroovyScriptFactory.java, + * Copyright 2002-2016 the
[+++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/DateTimeFormatterFactory.java, + * @since 3.2, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/DateTimeFormatterFactory.java, + * @since 3.2, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/DateTimeFormatterFactoryBean.java, +, + * @since 3.2, +public class DateTimeFormatterFactoryBean extends DateTimeFormatterFactory, + implements FactoryBean<DateTimeFormatter>, InitializingBean {, + public void afterPropertiesSet() {, + public DateTimeFormatter getObject() {, +, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/DateTimeFormatterFactory.java, + * @since 3.2, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/DateTimeFormatterFactoryBean.java, +, + * @since 3.2, +public class DateTimeFormatterFactoryBean extends DateTimeFormatterFactory, + implements FactoryBean<DateTimeFormatter>, InitializingBean {, + public void afterPropertiesSet() {, + public DateTimeFormatter getObject() {, +, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaDateTimeFormatAnnotationFormatterFactory.java, + * Formats fields annotated with the {@link DateTimeFormat} annotation using Joda-Time., +]
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractCachingViewResolver.java, + * Copyright 2002-2013 the original author or authors., +import java.util.concurrent.ConcurrentHashMap;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, + /** Dummy marker object for unresolved views in the cache Maps */, + private static final View UNRESOLVED_VIEW = new View() {, + public String getContentType() {, + return null;, + }, + public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) {, + }, + };, +, + /** The maximum number of entries in the cache */, + /** Fast access cache for Views, returning already cached instances without a global lock */, + private final Map<Object, View> viewAccessCache
[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * Flag to indicate that a failed SQL {@code DROP} statement can be ignored., + * {@code IF EXISTS} clause in a {@code DROP}. The default is false so that if the, + * populator runs accidentally, it will fail fast when the script starts with a {@code DROP}., + * @param ignoreFailedDrops whether of not to continue in the event of specifically an error on a {@code DROP}, + * @return {@code String} containing the script lines]
[+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/Part.java, + * <p>The origin of a multipart request may be a browser form in which case each]
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + /**, + * A flag indicating whether the message is to be sent to a particular user session., + *, + */, + boolean singleSession() default false;, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + /**, + * A flag indicating whether the message is to be sent to a particular user session., + *, + */, + boolean singleSession() default false;, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, + if (sendToUser.singleSession()) {, + this.messagingTemplate.convertAndSendToUser(userName, destination, returnValue, createHeaders(sessionId));, + }, + else } , + this.messagingTemplate.convertAndSendToUser(userName, destination, returnValue);, + }, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + /**, + * A flag indicating whether the message
[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2016 the original author or authors., + @SuppressWarnings("unchecked"), + public void registerBean(Class<?> annotatedClass, Class<? extends Annotation>... qualifiers) {, + @SuppressWarnings("unchecked"), + public void registerBean(Class<?> annotatedClass, String name, Class<? extends Annotation>... qualifiers) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2016 the original author or authors., + @SuppressWarnings("unchecked"), + public void registerBean(Class<?> annotatedClass, Class<? extends Annotation>... qualifiers) {, + @SuppressWarnings("unchecked"), + public void registerBean(Class<?> annotatedClass, String name, Class<? extends Annotation>... qualifiers) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java, + * Copyright 2002-2016 the original author or authors., + @SuppressWarnings("unchecked"), +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2016 the original author or authors., +
[+++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws, +.idea, +out, +test-output, +atlassian-ide-plugin.xml, +.gradletasknamecache, +++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws,
[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, + * {@link LinkedHashMap} subclass representing annotation attribute, + * <em>key-value</em> pairs as read by Spring's reflection- or ASM-based, + * {@code AnnotationAttributes} instance; never {@code null}, + Assert.notNull(annotationType, "annotationType must not be null");, + this.displayName = annotationType.getName();, + * Create a new, empty {@link AnnotationAttributes} instance with the, + * given initial capacity to optimize performance., + * Create a new {@link AnnotationAttributes} instance, wrapping the, + * provided map and all its <em>key-value</em> pairs., + * @param map original source of annotation attribute <em>key-value</em>, + * pairs, + * Get the type of annotation represented
[+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/profile/annotation/ProfileAnnotationConfigTestSuite.java, + * Copyright 2002-2012 the original author or authors., + * Spring TestContext Framework with annotation-based configuration.]
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, + int suffixIndex = getQueryParamsIndex(url);, + String suffix = url.substring(suffixIndex);, + String lookupPath = url.substring(this.indexLookupPath, suffixIndex);, + return super.encodeURL(prefix + lookupPath + suffix);, +, + private int getQueryParamsIndex(String url) {, + int index = url.indexOf("?");, + return index > 0 ? index : url.length();, + }, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, + int suffixIndex = getQueryParamsIndex(url);, + String suffix = url.substring(suffixIndex);, + String lookupPath = url.substring(this.indexLookupPath, suffixIndex);, + return super.encodeURL(prefix + lookupPath + suffix);, +, + private int getQueryParamsIndex(String url) {, + int index = url.indexOf("?");, + return index > 0 ? index : url.length();, + }, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java, +
[+++ b/spring-core/src/main/java/org/springframework/asm/MethodWriter.java, + if (code.length > 65535) {]
[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +import java.net.InetSocketAddress;, + URI uri = new URI(this.channel.uri());, + InetSocketAddress remoteAddress = this.channel.remoteAddress();, + return new URI(, + uri.getScheme(),, + uri.getUserInfo(),, + (remoteAddress != null ? remoteAddress.getHostString() : null),, + (remoteAddress != null ? remoteAddress.getPort() : -1),, + uri.getPath(),, + uri.getQuery(),, + uri.getFragment());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +import java.net.InetSocketAddress;, + URI uri = new URI(this.channel.uri());, + InetSocketAddress remoteAddress = this.channel.remoteAddress();, + return new URI(, + uri.getScheme(),, + uri.getUserInfo(),, + (remoteAddress != null ? remoteAddress.getHostString() : null),, + (remoteAddress != null ? remoteAddress.getPort() : -1),, + uri.getPath(),, + uri.getQuery(),, + uri.getFragment());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java, +import java.net.InetSocketAddress;, + URI uri = new
[+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractJUnit4SpringContextTests.java, + * Framework</em> with explicit {@link ApplicationContext} testing support, + * in a JUnit environment., + * <p><strong>NOTE:</strong> As of Spring Framework 4.1, this class requires JUnit 4.9 or higher., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractJUnit4SpringContextTests.java, + * Framework</em> with explicit {@link ApplicationContext} testing support, + * in a JUnit environment., + * <p><strong>NOTE:</strong> As of Spring Framework 4.1, this class requires JUnit 4.9 or higher., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, + * <p><strong>NOTE:</strong> As of Spring Framework 4.1, this class requires JUnit 4.9 or higher., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractJUnit4SpringContextTests.java, + * Framework</em> with explicit {@link ApplicationContext} testing support, +
[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +import org.springframework.jdbc.datasource.init.DatabasePopulator;, +import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +import org.springframework.jdbc.datasource.init.DatabasePopulator;, +import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/InitializeDatabaseBeanDefinitionParser.java, +/*
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, + String decodedPath = URLDecoder.decode(path, "UTF-8");, + if (isInvalidPath(decodedPath)) {, + if (logger.isTraceEnabled()) {, + logger.trace("Ignoring invalid resource path with escape sequences [" + path + "].");, + }, + return Mono.empty();, + }, + decodedPath = processPath(decodedPath);, + if (isInvalidPath(decodedPath)) {, + * Process the given resource path., + * <p>The default implementation replaces:, + * <ul>, + * <li>Backslash with forward slash., + * <li>Duplicate occurrences of slash with a single slash., + * <li>Any combination of leading slash and control characters (00-1F and 7F), + * with a single "/" or "". For example
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java, + * Copyright 2002-2014 the original author or authors., + public MessageHandlingException(Message<?> failedMessage) {, + super(failedMessage);, + }, +, + public MessageHandlingException(Message<?> failedMessage, Throwable cause) {, + super(failedMessage, cause);, + }, +]
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java, + response.setStatus(statusCode);]
[+++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + @SuppressWarnings("unchecked"), +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + @SuppressWarnings("unchecked"), +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, + @SuppressWarnings("unchecked"), +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + @SuppressWarnings("unchecked"), +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, + @SuppressWarnings("unchecked"), +++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + @SuppressWarnings("unchecked"), +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, + @SuppressWarnings("unchecked"), +++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + @SuppressWarnings("unchecked"), +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, + @SuppressWarnings("unchecked"), +++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, + * <p>Can be used for tools that support substitution with {@code System.getProperty}, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + @SuppressWarnings("unchecked"), +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, + @SuppressWarnings("unchecked"),
[+++ b/spring-web/src/main/java/org/springframework/web/multipart/MultipartResolver.java, + * <p>There are two concrete implementations included in Spring, as of Spring 3.1:, + * <li>{@link org.springframework.web.multipart.support.StandardServletMultipartResolver} for Servlet 3.0 Part API]
[+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationInterceptor.java, +import javax.validation.executable.ExecutableValidator;, + ExecutableValidator execVal = this.validator.forExecutables();, + Set<ConstraintViolation<Object>> result;, + result = execVal.validateParameters(, + invocation.getThis(), methodToValidate, invocation.getArguments(), groups);, + result = execVal.validateParameters(, + invocation.getThis(), methodToValidate, invocation.getArguments(), groups);, + result = execVal.validateReturnValue(invocation.getThis(), methodToValidate, returnValue, groups);]
[+++ b/src/reference/docbook/testing.xml, + JUnit 4.5 – 4.10). By annotating test classes with, + <para><ulink url="http://grinder.sourceforge.net/">The Grinder</ulink>:]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, + * Copyright 2002-2014 the original author or authors., + if (pathInfo != null) {, + // Use path info if available. Indicates index page within a servlet mapping?, + // e.g. with index page: URI="/", servletPath="/index.html", + return pathInfo;, + }, + if (this.urlDecode == false) {, + // No path info... (not mapped by prefix, nor by extension, nor "/*"), + // For the default servlet mapping (i.e. "/"), urlDecode=false can, + // cause issues since getServletPath() returns a decoded path., + // If decoding pathWithinApp yields a match just use pathWithinApp, + path =
[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + if (annotations.length > 0) {, + }, + result = searchOnInterfaces(method, annotationType, annotationName,, + containerType, processor, visited, metaDepth, ifcs);, + Set<Method> annotatedMethods = AnnotationUtils.getAnnotatedMethodsInBaseType(clazz);, + if (!annotatedMethods.isEmpty()) {, + for (Method annotatedMethod : annotatedMethods) {, + if (annotatedMethod.getName().equals(method.getName()) &&, + Arrays.equals(annotatedMethod.getParameterTypes(), method.getParameterTypes())) {, + Method resolvedSuperMethod = BridgeMethodResolver.findBridgedMethod(annotatedMethod);, + result = searchWithFindSemantics(resolvedSuperMethod, annotationType, annotationName,, + }, + result = searchOnInterfaces(method, annotationType, annotationName,, + containerType, processor, visited, metaDepth, clazz.getInterfaces());, + T result = searchWithFindSemantics(ifc, annotationType, annotationName,, + containerType, processor, visited, metaDepth);, + T result = searchWithFindSemantics(superclass, annotationType, annotationName,, + containerType, processor, visited, metaDepth);, + Set<Method> annotatedMethods =
[+++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2018 the original author or authors., + /**, + * Set the name of the aspect (bean) in which the advice was declared., + */, + * Set the declaration order of this advice within the aspect., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2018 the original author or authors., + /**, + * Set the name of the aspect (bean) in which the advice was declared., + */, + * Set the declaration order of this advice within the aspect., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPointcutAdvisor.java, + public int getOrder() {, + if (this.order != null) {, + return
[+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java, + * Copyright 2002-2016 the original author or authors., +import java.io.ByteArrayInputStream;, +import java.io.InputStream;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpInputMessage;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.util.MultiValueMap;, +, + * Parse the body as form data and compare to the given {@code MultiValueMap}., + */, + public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {, + return new RequestMatcher() {, + @Override, + public void match(ClientHttpRequest request) throws IOException, AssertionError {, + HttpInputMessage inputMessage = new HttpInputMessage() {, + @Override, + public InputStream getBody() throws IOException {, + MockClientHttpRequest mockRequest = (MockClientHttpRequest) request;, + return new ByteArrayInputStream(mockRequest.getBodyAsBytes());, + }, + @Override, + public HttpHeaders getHeaders()
[+++ b/build.gradle, + testCompile project(":spring-web").sourceSets.test.output, + testCompile project(":spring-web").sourceSets.test.output, +++ b/build.gradle, + testCompile project(":spring-web").sourceSets.test.output, + testCompile project(":spring-web").sourceSets.test.output, +++ /dev/null, +++ b/build.gradle, + testCompile project(":spring-web").sourceSets.test.output, + testCompile project(":spring-web").sourceSets.test.output, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + testCompile project(":spring-web").sourceSets.test.output, + testCompile project(":spring-web").sourceSets.test.output, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + testCompile project(":spring-web").sourceSets.test.output, + testCompile project(":spring-web").sourceSets.test.output, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + testCompile project(":spring-web").sourceSets.test.output, + testCompile project(":spring-web").sourceSets.test.output, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + testCompile project(":spring-web").sourceSets.test.output, + testCompile project(":spring-web").sourceSets.test.output, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/gradle.properties, +version=5.0.4.BUILD-SNAPSHOT]
[+++ b/spring-core/src/main/java/org/springframework/util/ResourceUtils.java, + * Copyright 2002-2015 the original author or authors., + /** URL protocol for an entry from a Tomcat war file: "war" */, + public static final String URL_PROTOCOL_WAR = "war";, +, + URL_PROTOCOL_WAR.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol) ||, + URL_PROTOCOL_VFSZIP.equals(protocol));, + int startIndex = (urlFile.startsWith(JAR_URL_PREFIX) ? JAR_URL_PREFIX.length() : 0);, + int endIndex = urlFile.indexOf(JAR_URL_SEPARATOR);, + if (endIndex != -1) {, + String jarFile = urlFile.substring(startIndex, endIndex);, +++ b/spring-core/src/main/java/org/springframework/util/ResourceUtils.java, + * Copyright 2002-2015 the original author or authors., + /** URL protocol for an entry from a Tomcat war file: "war" */, + public static final String URL_PROTOCOL_WAR =
[+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, + // TODO: implement extractPathWithinPattern natively for PathContainer, +, + public PathContainer extractPathWithinPattern(PathContainer path) {, + String result = extractPathWithinPattern(path.value());, + return PathContainer.parse(result, StandardCharsets.UTF_8);, + }, +, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, + // TODO: implement extractPathWithinPattern natively for PathContainer, +, + public PathContainer extractPathWithinPattern(PathContainer path) {, + String result = extractPathWithinPattern(path.value());, + return PathContainer.parse(result, StandardCharsets.UTF_8);, + }, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractUrlHandlerMapping.java, +import org.springframework.http.server.reactive.PathContainer;, + PathContainer lookupPath = exchange.getRequest().getPath().pathWithinApplication();, + protected Object lookupHandler(PathContainer lookupPath, ServerWebExchange exchange) throws Exception {, + PathContainer pathWithinMapping = bestMatch.getPattern().extractPathWithinPattern(lookupPath);, + private Object handleMatch(Object handler, PathPattern bestMatch, PathContainer pathWithinMapping,, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, + // TODO: implement extractPathWithinPattern natively
[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, +import org.springframework.util.Assert;, + Assert.notNull(beanFactory, "BeanFactory must not be null");, + Assert.notNull(name, "Bean name must not be null");, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, +import org.springframework.util.Assert;, + Assert.notNull(beanFactory, "BeanFactory must not be null");, + Assert.notNull(name, "Bean name must not be null");, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/TriggerTask.java, + * Copyright 2002-2016 the original author or authors., + * {@link Task} implementation defining a {@code Runnable} to be executed, + * according to a given {@link Trigger}., + return this.trigger;, +, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, +import org.springframework.util.Assert;, + Assert.notNull(beanFactory, "BeanFactory must not be null");, + Assert.notNull(name, "Bean name must not be null");, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/TriggerTask.java, + * Copyright 2002-2016 the
[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.codec.ServerSentEventHttpMessageWriter;, + writers.add(new ServerSentEventHttpMessageWriter(sseDataEncoders));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.codec.ServerSentEventHttpMessageWriter;, + writers.add(new ServerSentEventHttpMessageWriter(sseDataEncoders));, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java, +import org.springframework.http.codec.ServerSentEvent;, + Flux<ServerSentEvent<String>> sse() {, + return Flux.interval(Duration.ofMillis(100)).map(l -> ServerSentEvent.builder("foo"), + .id(Long.toString(l)), + .comment("bar"), + .build()).take(2);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.codec.ServerSentEventHttpMessageWriter;, + writers.add(new ServerSentEventHttpMessageWriter(sseDataEncoders));, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java, +import org.springframework.http.codec.ServerSentEvent;, + Flux<ServerSentEvent<String>> sse() {, + return Flux.interval(Duration.ofMillis(100)).map(l -> ServerSentEvent.builder("foo"), + .id(Long.toString(l)), + .comment("bar"), + .build()).take(2);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEvent.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., +
[+++ b/gradle/jdiff/Null.java, +++ b/gradle/jdiff/Null.java, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, +++ b/gradle/jdiff/Null.java, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/DynamicIntroductionAdvice.java, +++ b/gradle/jdiff/Null.java, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/DynamicIntroductionAdvice.java, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAdvisor.java, +++ b/gradle/jdiff/Null.java, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/DynamicIntroductionAdvice.java, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAdvisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionInfo.java, +++ b/gradle/jdiff/Null.java, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/DynamicIntroductionAdvice.java, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAdvisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionInfo.java, +++ b/spring-aop/src/main/java/org/springframework/aop/MethodBeforeAdvice.java, +++ b/gradle/jdiff/Null.java, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/DynamicIntroductionAdvice.java, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAdvisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionInfo.java, +++ b/spring-aop/src/main/java/org/springframework/aop/MethodBeforeAdvice.java, +++ b/spring-aop/src/main/java/org/springframework/aop/PointcutAdvisor.java, +++ b/gradle/jdiff/Null.java, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/DynamicIntroductionAdvice.java, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAdvisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionInfo.java, +++ b/spring-aop/src/main/java/org/springframework/aop/MethodBeforeAdvice.java, +++ b/spring-aop/src/main/java/org/springframework/aop/PointcutAdvisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueClassFilter.java, +++ b/gradle/jdiff/Null.java, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/DynamicIntroductionAdvice.java, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAdvisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionInfo.java, +++ b/spring-aop/src/main/java/org/springframework/aop/MethodBeforeAdvice.java, +++ b/spring-aop/src/main/java/org/springframework/aop/PointcutAdvisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueClassFilter.java, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueMethodMatcher.java, +++ b/gradle/jdiff/Null.java, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/DynamicIntroductionAdvice.java, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAdvisor.java, +++
[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * <li>An {@link org.springframework.http.HttpHeaders HttpHeaders} object to, + * return a response with no body.</li>, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * <li>An {@link org.springframework.http.HttpHeaders HttpHeaders} object to, + * return a response with no body.</li>, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpHeadersReturnValueHandler.java, +, + HttpServletResponse servletResponse = webRequest.getNativeResponse(HttpServletResponse.class);, + ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(servletResponse);, +}, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * <li>An {@link org.springframework.http.HttpHeaders HttpHeaders} object to, + * return a response with no body.</li>, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpHeadersReturnValueHandler.java, +, + HttpServletResponse servletResponse = webRequest.getNativeResponse(HttpServletResponse.class);, + ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(servletResponse);, +}, +++ b/src/asciidoc/index.adoc, +* An `HttpEntity<?>` or `ResponseEntity<?>` object to provide access to the Servlet, +*
[+++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapContext.java, + * Copyright 2002-2015 the original author or authors., + * Get the {@linkplain Class test class} for this bootstrap context., +++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapContext.java, + * Copyright 2002-2015 the original author or authors., + * Get the {@linkplain Class test class} for this bootstrap context., +++ /dev/null, +++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapContext.java, + * Copyright 2002-2015 the original author or authors., + * Get the {@linkplain Class test class} for this bootstrap context., +++ /dev/null, +++ b/spring-test/src/main/java/org/springframework/test/context/TestContextBootstrapper.java, + * Copyright 2002-2015 the original author or authors., + * current test and to {@linkplain #buildTestContext build the TestContext} that, + * <p><strong>WARNING</strong>:
[+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, + Expression parseExpression = parser.parseExpression("#bridgeExample.bridgeMethod()");, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, + Expression parseExpression = parser.parseExpression("#bridgeExample.bridgeMethod()");, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java, + public void bridgeMethod() {]
[+++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, + * Build a new {@link Document} from this marshaller's {@link DocumentBuilderFactory},, + * as a placeholder for a DOM node., + throw new UnmarshallingFailureException("Could not create document placeholder: " + ex.getMessage(), ex);]
[+++ b/org.springframework.context/pom.xml, + <optional>true</optional>, + <optional>true</optional>, + <optional>true</optional>, + <optional>true</optional>, + <artifactId>slf4j-log4j12</artifactId>, +++ b/org.springframework.context/pom.xml, + <optional>true</optional>, + <optional>true</optional>, + <optional>true</optional>, + <optional>true</optional>, + <artifactId>slf4j-log4j12</artifactId>, +++ b/org.springframework.core/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <scope>compile</scope>, + <scope>compile</scope>, +++ b/org.springframework.context/pom.xml, + <optional>true</optional>, + <optional>true</optional>, + <optional>true</optional>, + <optional>true</optional>, + <artifactId>slf4j-log4j12</artifactId>, +++ b/org.springframework.core/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <scope>compile</scope>, + <scope>compile</scope>, +++ b/org.springframework.orm/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, + <optional>true</optional>, + <optional>true</optional>, + <artifactId>slf4j-log4j12</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>log4j</groupId>, + <artifactId>log4j</artifactId>, + <scope>test</scope>, + <optional>true</optional>, + <resources>, + <resource>, + <directory>src/main/java</directory>, + <include>**/*.xml</include>,
[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ServiceLocatorFactoryBean.java, + * Copyright 2002-2013 the original author or authors., + // Service locator for a specific bean name, + // Service locator for a bean type, + return beanFactory.getBean(serviceLocatorMethodReturnType);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ServiceLocatorFactoryBean.java, + * Copyright 2002-2013 the original author or authors., + // Service locator for a specific bean name, + // Service locator for a bean type, + return beanFactory.getBean(serviceLocatorMethodReturnType);, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java, + * Copyright 2002-2013 the original author or authors., + * persistence unit, provided that a discovered EntityManagerFactory, + * <p>If no unit name has been given, this method will search for a default, +
[+++ b/gradle.properties, +version=4.0.2.BUILD-SNAPSHOT]
[+++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriTemplateHandler.java, +import java.net.URISyntaxException;, +import org.springframework.util.Assert;, +, + private String baseUrl;, +, + * Configure a base URL to prepend URI templates with. The base URL should, + * have a scheme and host but may also contain a port and a partial path., + * Individual URI templates then may provide the remaining part of the URL, + * including additional path, query and fragment., + *, + * <p><strong>Note: </strong>Individual URI templates are expanded and, + * encoded before being appended to the base URL. Therefore the base URL is, + * expected to be fully expanded
[+++ b/src/dist/readme.txt, +http://projects.spring.io/spring-framework/, +See https://github.com/spring-projects/spring-framework#readme for additional]
[+++ b/org.springframework.jdbc/src/test/resources/org/springframework/jdbc/config/jdbc-config-multiple-datasources.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<beans xmlns="http://www.springframework.org/schema/beans", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xmlns:jdbc="http://www.springframework.org/schema/jdbc", + xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd, + http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">, +, + <jdbc:embedded-database id="firstDataSource" />, + <jdbc:embedded-database id="secondDataSource" />, +, +</beans>]
[+++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AbstractTransactionManagementConfiguration.java, + * Copyright 2002-2015 the original author or authors., + * Default transaction manager, as configured through a {@link TransactionManagementConfigurer}., +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AbstractTransactionManagementConfiguration.java, + * Copyright 2002-2015 the original author or authors., + * Default transaction manager, as configured through a {@link TransactionManagementConfigurer}., +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionManagementConfigurer.java, + * Copyright 2002-2015 the original author or authors., + * or need to explicitly specify the default {@link PlatformTransactionManager} bean to be, + * used for annotation-driven transaction management, as opposed to the default approach, + * of a by-type lookup. One reason this might be necessary is if there are two,
[+++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws, +.idea, +out, +test-output, +atlassian-ide-plugin.xml, +.gradletasknamecache, +++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws,
[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/SubProtocolCapable.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, + * Copyright 2002-2017 the original author or authors., + return Flux.from(decodeToMono(inputStream, elementType, mimeType, hints));, + }, +, + @Override, + public Mono<Resource> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,, + MimeType mimeType, Map<String, Object> hints) {, +, + return Mono.from(byteArray.map(ByteArrayInputStream::new).map(InputStreamResource::new));, + return Mono.from(byteArray.map(ByteArrayResource::new));, + return Mono.error(new IllegalStateException("Unsupported resource class: " + clazz));, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, + * Copyright 2002-2017 the original author or authors., + return Flux.from(decodeToMono(inputStream, elementType, mimeType, hints));, + }, +, + @Override, + public Mono<Resource> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,, + MimeType mimeType, Map<String, Object> hints) {, +, + return Mono.from(byteArray.map(ByteArrayInputStream::new).map(InputStreamResource::new));, + return Mono.from(byteArray.map(ByteArrayResource::new));, + return Mono.error(new IllegalStateException("Unsupported
[+++ b/spring-framework-reference/src/expressions.xml, + <para>Relational operators</para>, + <para>Ternary operator</para>, + </listitem>, +, + <listitem>, + <programlisting language="java">ExpressionParser parser = new SpelAntlrExpressionParser();, +, +// Inventions Array, +StandardEvaluationContext teslaContext = new StandardEvaluationContext();, +teslaContext.setRootObject(tesla);, +, +// evaluates to "Induction motor", +String invention = parser.parseExpression("inventions[3]").getValue(teslaContext, String.class); , +, +, +// Members List, +StandardEvaluationContext societyContext = new StandardEvaluationContext();, +societyContext.setRootObject(ieee);, +, +// evaluates to "Nikola Tesla", +String name = parser.parseExpression("Members[0].Name").getValue(societyContext, String.class);, +, +// List and Array navigation, +// evaluates to "Wireless communication", +String invention = parser.parseExpression("Members[0].Inventions[6]").getValue(societyContext, String.class);, +</programlisting>, +, + <para>The contents of dictionaries are obtained by specifying the, + literal key value within the brackets.
[+++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, + * Copyright 2002-2014 the original author or authors., +, +, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, + * Copyright 2002-2014 the original author or authors., +, +, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +, +++ b/spring-aop/src/test/java/org/springframework/aop/support/AbstractRegexpMethodPointcutTests.java, + * Copyright 2002-2014 the original author or authors., +import static org.junit.Assert.*;, +, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, + * Copyright 2002-2014 the original author or authors., +, +, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +, +++ b/spring-aop/src/test/java/org/springframework/aop/support/AbstractRegexpMethodPointcutTests.java, + * Copyright 2002-2014 the original author or authors., +import static org.junit.Assert.*;, +, +++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, + * Copyright 2002-2014 the original author
[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/NoSuchBeanDefinitionException.java, + * Copyright 2002-2012 the original author or authors., + * Exception thrown when a {@code BeanFactory} is asked for a bean, + * instance for which it cannot find a definition., +@SuppressWarnings("serial"), + /** Name of the missing bean. */, + /** Required type of the missing bean. */, + private Class<?> beanType;, + * Create a new {@code NoSuchBeanDefinitionException}., + * Create a new {@code NoSuchBeanDefinitionException}., + * Create a new {@code NoSuchBeanDefinitionException}., + * @param type required type of the missing bean, + public NoSuchBeanDefinitionException(Class<?> type) {, + * Create a new {@code NoSuchBeanDefinitionException}.,
[+++ b/org.springframework.context/src/main/java/org/springframework/context/config/PropertyPlaceholderBeanDefinitionParser.java, + * Copyright 2002-2011 the original author or authors., + * Parser for the {@code <context:property-placeholder/>} element., + private static final String SYSTEM_PROPERTIES_MODE_ATTRIB = "system-properties-mode";, + private static final String SYSTEM_PROPERTIES_MODE_DEFAULT = "ENVIRONMENT";, +, + // As of Spring 3.1, the default value of system-properties-mode has changed from, + // 'FALLBACK' to 'ENVIRONMENT'. This latter value indicates that resolution of, + // placeholders against system properties is a function of the Environment and, + // its current set of PropertySources, + if (element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIB).equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) {, + return PropertySourcesPlaceholderConfigurer.class;, + // the user has explicitly specified a value for
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Mar 14 14:42:52 CET 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-bin.zip, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Mar 14 14:42:52 CET 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-bin.zip, +++ b/gradlew.bat, +@rem Get command-line arguments, handling Windows variants
[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/AbstractNamedValueMethodArgumentResolver.java, + else if ("".equals(arg) && (namedValueInfo.defaultValue != null)) {, + arg = resolveDefaultValue(namedValueInfo.defaultValue);, + }, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/AbstractNamedValueMethodArgumentResolver.java, + else if ("".equals(arg) && (namedValueInfo.defaultValue != null)) {, + arg = resolveDefaultValue(namedValueInfo.defaultValue);, + }, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java, + private MethodParameter paramRequired;, + Map.class, String.class, MultipartFile.class, List.class, Part.class, MultipartFile.class, String.class);, + paramRequired = new MethodParameter(method, 10);, + // SPR-10180, +, + @Test, + public void resolveEmptyValueToDefault() throws Exception {, + this.request.addParameter("name", "");, + Object result = resolver.resolveArgument(paramNamedDefaultValueString, null, webRequest, null);, + assertEquals("bar", result);, + }, +, + @Test, + public void resolveEmptyValueWithoutDefault() throws Exception {, + this.request.addParameter("stringNotAnnot", "");, + Object result
[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/StreamConverter.java, + * Converts a {@link Stream} to and from a collection or array, converting the, + * the type of the stream elements., +++ b/spring-core/src/main/java/org/springframework/core/convert/support/StreamConverter.java, + * Converts a {@link Stream} to and from a collection or array, converting the, + * the type of the stream elements., +++ b/spring-core/src/test/java/org/springframework/core/convert/support/StreamConverterTests.java, +/**, + * Tests for {@link StreamConverter}., + *, + * @author Stephane Nicoll, + * @since 4.2, + */, + private final GenericConversionService conversionService = new GenericConversionService();, + private final StreamConverter streamConverter = new StreamConverter(this.conversionService);, + @SuppressWarnings("resource"), + @SuppressWarnings("resource"), + @SuppressWarnings("resource"), + @SuppressWarnings({ "rawtypes" })]
[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcCall.java, + * the JDBC driver. Since we rely on the JDBC driver, this "auto-detection", + * parameters will take precedence. You can also turn off any meta data processing, + * to provide the ability to chain multiple ones together in a "fluent" interface style., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcCall.java, + * the JDBC driver. Since we rely on the JDBC driver, this "auto-detection", + * parameters will take precedence. You can also turn off any meta data processing, + * to provide the ability to chain multiple ones together in a "fluent" interface style., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcInsert.java, + * to
[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.java, + * the n<sup>th</sup> statement present in the resource), + * @param encodedResource the resource from which the SQL statement was read, + public ScriptStatementFailedException(String stmt, int stmtNumber, EncodedResource encodedResource, Throwable cause) {, + super(buildErrorMessage(stmt, stmtNumber, encodedResource), cause);]
[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, + return new DefaultWebTestClientBuilder(builder.build());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, + return new DefaultWebTestClientBuilder(builder.build());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, + DefaultWebTestClient(WebClient.Builder clientBuilder, ClientHttpConnector connector, Duration timeout) {, + Assert.notNull(clientBuilder, "WebClient.Builder is required");, + this.webClient = clientBuilder.clientConnector(this.wiretapConnector).build();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, + return new DefaultWebTestClientBuilder(builder.build());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, + DefaultWebTestClient(WebClient.Builder clientBuilder, ClientHttpConnector connector, Duration timeout) {, + Assert.notNull(clientBuilder, "WebClient.Builder is required");, + this.webClient = clientBuilder.clientConnector(this.wiretapConnector).build();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java, + DefaultWebTestClientBuilder(HttpHandler httpHandler) {, + return new DefaultWebTestClient(this.webClientBuilder, this.connector, this.responseTimeout);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, + return new DefaultWebTestClientBuilder(builder.build());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, + DefaultWebTestClient(WebClient.Builder clientBuilder, ClientHttpConnector connector, Duration timeout) {, + Assert.notNull(clientBuilder, "WebClient.Builder is required");, + this.webClient = clientBuilder.clientConnector(this.wiretapConnector).build();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java, + DefaultWebTestClientBuilder(HttpHandler httpHandler) {,
[+++ b/org.springframework.spring-library/ivy.xml, + <dependency org="org.springframework" name="org.springframework.web.portlet" rev="latest.integration" conf="compile->compile"/>, +++ b/org.springframework.spring-library/ivy.xml, + <dependency org="org.springframework" name="org.springframework.web.portlet" rev="latest.integration" conf="compile->compile"/>, +++ b/org.springframework.spring-library/org.springframework.spring-library.libd, + org.springframework.web.portlet;version="[@bundle.version@, @bundle.version@]",]
[+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java, + return Mono.defer(() ->, + Mono.just(bufferFactory.allocateBuffer(bytes.length).write(bytes)));, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java, + return Mono.defer(() ->, + Mono.just(bufferFactory.allocateBuffer(bytes.length).write(bytes)));, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerSentEventHttpMessageWriterTests.java, +import static org.springframework.core.ResolvableType.forClass;, + @SuppressWarnings("rawtypes"), + public void writeServerSentEventError() {, + ServerSentEvent<?> event = ServerSentEvent.builder().data("bar").id("c42").event("foo"), + .comment("bla\nbla bla\nbla bla bla").retry(Duration.ofMillis(123L)).build();, +, + Flux<ServerSentEvent> source = Flux.concat(, + Flux.just(event),, + Flux.error(new RuntimeException()));, + MockServerHttpResponse outputMessage = new MockServerHttpResponse();, +, + Mono<Void> result = this.messageWriter.write(source, forClass(ServerSentEvent.class),, + MediaType.TEXT_EVENT_STREAM, outputMessage, HINTS);, +, + StepVerifier.create(result), + .verifyError(RuntimeException.class);, + }, +, + @Test, + Mono<Void> result =, + this.messageWriter.write(source, forClass(clazz), mediaType, response, HINTS);, +, + StepVerifier.create(result), + .verifyComplete();]
[+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + // Same lenient fallback checking as in Property..., + pd = this.propertyDescriptorCache.get(StringUtils.uncapitalize(name));, + pd = this.propertyDescriptorCache.get(StringUtils.capitalize(name));, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + // Same lenient fallback checking as in Property..., + pd = this.propertyDescriptorCache.get(StringUtils.uncapitalize(name));, + pd = this.propertyDescriptorCache.get(StringUtils.capitalize(name));, +++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, + field = ReflectionUtils.findField(declaringClass, StringUtils.uncapitalize(name));, + field = ReflectionUtils.findField(declaringClass, StringUtils.capitalize(name));, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + // Same lenient fallback checking as in Property..., + pd = this.propertyDescriptorCache.get(StringUtils.uncapitalize(name));, + pd = this.propertyDescriptorCache.get(StringUtils.capitalize(name));, +++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, + field = ReflectionUtils.findField(declaringClass, StringUtils.uncapitalize(name));, + field = ReflectionUtils.findField(declaringClass, StringUtils.capitalize(name));, +++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, + filePath = StringUtils.capitalize(filePath);, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + // Same lenient fallback checking as in Property..., +
[+++ b/build-spring-framework/resources/changelog.txt, +Changes in version 3.0.0.RC1 (2009-06-10), +-----------------------------------------, +, +* Servlet/Portlet ApplicationContexts use a specific id based on servlet/portlet name, +* DefaultListableBeanFactory references are serializable now when initialized with an id, +* scoped proxies are serializable now, for web scopes as well as for singleton beans, +* injected request/session references are serializable proxies for the current request now, +* ReloadableResourceBundleMessageSource correctly calculates filenames for all locales now, +, +, +++ b/build-spring-framework/resources/changelog.txt, +Changes in version 3.0.0.RC1 (2009-06-10), +-----------------------------------------, +, +* Servlet/Portlet ApplicationContexts use a specific id based on servlet/portlet name, +* DefaultListableBeanFactory references are serializable now when initialized with an
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, +, + String[] include = toArray(this.includePatterns);, + String[] exclude = toArray(this.excludePatterns);, + MappedInterceptor mappedInterceptor = new MappedInterceptor(include, exclude, this.interceptor);, +, +, + return (CollectionUtils.isEmpty(list) ? null : list.toArray(new String[list.size()]));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, +, + String[] include = toArray(this.includePatterns);, + String[] exclude = toArray(this.excludePatterns);, + MappedInterceptor mappedInterceptor = new MappedInterceptor(include, exclude, this.interceptor);, +, +, + return (CollectionUtils.isEmpty(list) ? null : list.toArray(new String[list.size()]));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/InterceptorRegistryTests.java, + private TestWebRequestInterceptor webInterceptor1;, + private TestWebRequestInterceptor webInterceptor2;, +, + this.registry = new InterceptorRegistry();, + this.webInterceptor1 = new TestWebRequestInterceptor();, + this.webInterceptor2 = new TestWebRequestInterceptor();, + this.registry.addInterceptor(this.interceptor1);, + assertEquals(Arrays.asList(this.interceptor1), interceptors);, + this.registry.addInterceptor(this.interceptor1);, + this.registry.addInterceptor(this.interceptor2);, + assertEquals(Arrays.asList(this.interceptor1,
[+++ b/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java, + original.forEach((attrName, attrValue) -> this.propertyValueList.add(, + new PropertyValue(attrName.toString(), attrValue)));, + other.forEach((attrName, attrValue) -> addPropertyValue(, + new PropertyValue(attrName.toString(), attrValue)));, +++ b/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java, + original.forEach((attrName, attrValue) -> this.propertyValueList.add(, + new PropertyValue(attrName.toString(), attrValue)));, + other.forEach((attrName, attrValue) -> addPropertyValue(, + new PropertyValue(attrName.toString(), attrValue)));, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, + this.customEditors.forEach(target::registerCustomEditor);, +++ b/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java, + original.forEach((attrName, attrValue) -> this.propertyValueList.add(, + new PropertyValue(attrName.toString(), attrValue)));, + other.forEach((attrName, attrValue) -> addPropertyValue(, + new PropertyValue(attrName.toString(), attrValue)));, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, + this.customEditors.forEach(target::registerCustomEditor);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ConstructorArgumentValues.java, + .forEach(valueHolder -> addOrMergeGenericArgumentValue(valueHolder.copy()));, +++ b/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java, + original.forEach((attrName, attrValue) -> this.propertyValueList.add(, + new PropertyValue(attrName.toString(), attrValue)));, + other.forEach((attrName, attrValue) -> addPropertyValue(, + new PropertyValue(attrName.toString(), attrValue)));, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, + this.customEditors.forEach(target::registerCustomEditor);, +++
[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessageListenerAdapter.java, + * Copyright 2002-2016 the original author or authors., +public class MessageListenerAdapter extends AbstractAdaptableMessageListener implements SubscriptionNameProvider {, +]
[+++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, + * the decoder if it is an instance of {@link HttpDecoder}., + if (this.decoder instanceof HttpDecoder) {, + HttpDecoder<?> httpDecoder = (HttpDecoder<?>) this.decoder;, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, + * the decoder if it is an instance of {@link HttpDecoder}., + if (this.decoder instanceof HttpDecoder) {, + HttpDecoder<?> httpDecoder = (HttpDecoder<?>) this.decoder;, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + return this.encoder instanceof HttpEncoder &&, + ((HttpEncoder<?>) this.encoder).getStreamingMediaTypes().stream(), + .anyMatch(contentType::isCompatibleWith);, + * the encoder if it is an instance of {@link HttpEncoder}., + if (this.encoder instanceof HttpEncoder) {, + HttpEncoder<?> httpEncoder = (HttpEncoder<?>) this.encoder;, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, + * the decoder if it is an
[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, + if (transportElem.hasAttribute("time-to-first-message")) {, + handlerDef.getPropertyValues().add("timeToFirstMessage", transportElem.getAttribute("time-to-first-message"));, + }, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, + if (transportElem.hasAttribute("time-to-first-message")) {, + handlerDef.getPropertyValues().add("timeToFirstMessage", transportElem.getAttribute("time-to-first-message"));, + }, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, + * Copyright 2002-2018 the original author or authors., + if (transportRegistration.getTimeToFirstMessage() != null) {, + this.subProtocolWebSocketHandler.setTimeToFirstMessage(transportRegistration.getTimeToFirstMessage());, + }, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, + if (transportElem.hasAttribute("time-to-first-message")) {, + handlerDef.getPropertyValues().add("timeToFirstMessage", transportElem.getAttribute("time-to-first-message"));, + }, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, + * Copyright 2002-2018 the original author or authors., + if (transportRegistration.getTimeToFirstMessage() != null) {, + this.subProtocolWebSocketHandler.setTimeToFirstMessage(transportRegistration.getTimeToFirstMessage());, + }, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketTransportRegistration.java, + * Copyright 2002-2018 the original author or authors., + @Nullable, + private Integer timeToFirstMessage;, +, + * Set the maximum time
[+++ b/spring-framework-reference/src/new-in-3.xml, + <para>Object to XML mapping functionality (OXM) moved from Spring Web Services project</para>, + </listitem>, +, + <listitem>, + <section id="new-feature-oxm">, + <title>The Data Tier</title>, +, + <para>Object to XML mapping functionality (OXM) from the Spring Web Services project have, + been moved to the core Spring Framework now. The functionality is found in the, + <literal>org.springframework.oxm</literal> package. More information on, + the use of the <literal>OXM</literal> can be found, + in the <link linkend="oxm">Marshalling XML using O/X Mappers</link> chapter.</para>, +, + </section>, +, + <para>The most exciting new feature for the Web Tier is the support
[+++ b/build.gradle, + compile("org.apache.tomcat:tomcat-servlet-api:7.0.32", provided) // servlet-api 3.0, + compile("org.apache.tomcat:tomcat-servlet-api:7.0.32", provided) // servlet-api 3.0, +project('spring-webmvc-tiles3') {, + description = 'Spring Framework Tiles3 Integration', + apply from: 'tiles3.gradle', + dependencies {, + compile project(":spring-context"), + compile project(":spring-webmvc").sourceSets.main.output, + compile("javax.el:el-api:1.0", provided), + compile("javax.servlet:jstl:1.1.2", provided), + compile("javax.servlet.jsp:jsp-api:2.1", provided), + compile("org.apache.tiles:tiles-request-api:1.0.1", optional), + compile("org.apache.tiles:tiles-request-servlet-wildcard:1.0.1", optional), + compile("org.apache.tiles:tiles-api:3.0.1", optional), + compile("org.apache.tiles:tiles-core:3.0.1", optional), + compile("org.apache.tiles:tiles-servlet:3.0.1", optional), + compile("org.apache.tiles:tiles-jsp:3.0.1", optional), + compile("org.apache.tiles:tiles-el:3.0.1", optional), + compile("org.apache.tomcat:tomcat-servlet-api:7.0.32", provided) // servlet-api 3.0, + testCompile project(":spring-web").sourceSets*.output // mock request & response, + }, +}, +, + compile("org.apache.tomcat:tomcat-servlet-api:7.0.32", provided), +++ b/build.gradle, + compile("org.apache.tomcat:tomcat-servlet-api:7.0.32", provided) // servlet-api 3.0, + compile("org.apache.tomcat:tomcat-servlet-api:7.0.32", provided) //
[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + @Nullable, +, + // Only use method proxy for public methods not derived from java.lang.Object, + this.methodProxy = (Modifier.isPublic(method.getModifiers()) &&, + method.getDeclaringClass() != Object.class && !AopUtils.isEqualsMethod(method) &&, + !AopUtils.isHashCodeMethod(method) && !AopUtils.isToStringMethod(method) ?, + methodProxy : null);, + if (this.methodProxy != null) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + @Nullable, +, + // Only use method proxy for public methods not derived from java.lang.Object, + this.methodProxy = (Modifier.isPublic(method.getModifiers()) &&, + method.getDeclaringClass() != Object.class && !AopUtils.isEqualsMethod(method) &&, + !AopUtils.isHashCodeMethod(method) && !AopUtils.isToStringMethod(method) ?, + methodProxy : null);, + if (this.methodProxy != null) {, +++ b/spring-context/src/test/java/org/springframework/aop/framework/CglibProxyTests.java, +, + public void testToStringInvocation() {, +
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MessageMethodArgumentResolver.java, +import org.springframework.core.ResolvableType;, + * A {@link HandlerMethodArgumentResolver} for {@link Message} parameters. Validates, + * that the generic type of the payload matches with the message value., + * @author Stephane Nicoll, + return Message.class.isAssignableFrom(parameter.getParameterType());, + // Validate the message type is assignable, + if (!parameter.getParameterType().isAssignableFrom(message.getClass())) {, + throw new MethodArgumentTypeMismatchException(message,, + "Could not resolve Message parameter: invalid message type:", + + "expected [" + message.getClass().getName() + "] but got [", + + parameter.getParameterType().getName() + "]");, + }, +, + // validate that the payload type matches, + Class<?> effectivePayloadType = getPayloadType(parameter);, + if (effectivePayloadType != null &&
[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + // Array-based vars rely on the below order.., +, + String fragmentTo = expandUriComponent(getFragment(), uriVariables, this.variableEncoder);, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + // Array-based vars rely on the below order.., +, + String fragmentTo = expandUriComponent(getFragment(), uriVariables, this.variableEncoder);, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsTests.java, + @Test // gh-22447, + public void expandWithFragmentOrder() {, + UriComponents uriComponents = UriComponentsBuilder, + .fromUriString("http://{host}/{path}#{fragment}").build(), + .expand("example.com", "foo", "bar");, +, + assertEquals("http://example.com/foo#bar", uriComponents.toUriString());, + }, +]
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/AppCacheManifestTransformer.java, + * Copyright 2002-2017 the original author or authors., + String link = toAbsolutePath(info.getLine(), exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/AppCacheManifestTransformer.java, + * Copyright 2002-2017 the original author or authors., + String link = toAbsolutePath(info.getLine(), exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, + * Copyright 2002-2017 the original author or authors., + String link = toAbsolutePath(segmentContent, exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/AppCacheManifestTransformer.java, + * Copyright 2002-2017 the original author or authors., + String link = toAbsolutePath(info.getLine(), exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, + * Copyright 2002-2017 the original author or authors., + String link = toAbsolutePath(segmentContent, exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceTransformerSupport.java, + * Copyright 2002-2017 the original author or authors., + * @param
[+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java, +import org.quartz.impl.jdbcjobstore.SimpleSemaphore;, +import org.springframework.jdbc.support.JdbcUtils;, +import org.springframework.jdbc.support.MetaDataAccessException;, + // No, if HSQL is the platform, we really don't want to use locks, + try {, + String productName = JdbcUtils.extractDatabaseMetaData(dataSource,, + "getDatabaseProductName").toString();, + productName = JdbcUtils.commonDatabaseName(productName);, + if (productName != null, + && productName.toLowerCase().contains("hsql")) {, + setUseDBLocks(false);, + setLockHandler(new SimpleSemaphore());, + }, + } catch (MetaDataAccessException e) {, + logWarnIfNonZero(1, "Could not detect database type. Assuming locks can be taken.");, + }, +, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java, +import org.quartz.impl.jdbcjobstore.SimpleSemaphore;, +import org.springframework.jdbc.support.JdbcUtils;, +import org.springframework.jdbc.support.MetaDataAccessException;, + // No, if HSQL is the platform, we really don't want to use locks, +
[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java, + * Class to manage context meta-data used for the configuration, + // Should we access insert parameter meta-data info or not, + // Should we override default for including synonyms for meta-data lookups, + // The provider of table meta-data, + * Specify whether we should access table column meta-data., + * Are we accessing table meta-data?, + * Process the current meta-data with the provided configuration options., + * Compare columns created from meta-data with declared columns and return a reconciled list., + // database meta-data is not necessarily providing case-sensitive column names, + *
[+++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java, + if (!GraalDetector.inImageCode()) {, +++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java, + if (!GraalDetector.inImageCode()) {, +++ b/spring-core/src/main/java/org/springframework/core/GraalDetector.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES
[+++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws, +.idea, +out, +test-output, +atlassian-ide-plugin.xml, +.gradletasknamecache, +++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws,
[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvcBuilderSupport.java, + List<ResultMatcher> globalResultMatchers, List<ResultHandler> globalResultHandlers,, + Boolean dispatchOptions) {, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvcBuilderSupport.java, + List<ResultMatcher> globalResultMatchers, List<ResultHandler> globalResultHandlers,, + Boolean dispatchOptions) {, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/AbstractMockMvcBuilder.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is
[+++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/HasMap.java, +/*, + * Copyright 2002-2005 the original author or authors., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.,
[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java, + priority = OrderUtils.getPriority(((DecoratingProxy) obj).getDecoratedClass());]
[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import com.fasterxml.jackson.databind.KeyDeserializer;, +import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;, +import javafx.application.Application;, +import org.springframework.context.ApplicationContext;, + private HandlerInstantiator handlerInstantiator;, +, + private ApplicationContext applicationContext;, +, + /**, + * Customize the construction of Jackson handlers ({@link JsonSerializer}, {@link JsonDeserializer},, + * {@link KeyDeserializer}, {@code TypeResolverBuilder} and {@code TypeIdResolver})., + * @since 4.1.3, + * @see Jackson2ObjectMapperBuilder#applicationContext(ApplicationContext), + */, + public Jackson2ObjectMapperBuilder handlerInstantiator(HandlerInstantiator handlerInstantiator) {, + this.handlerInstantiator = handlerInstantiator;, + return this;, + }, +, + /**, + * Set the Spring {@link ApplicationContext} in order to autowire Jackson handlers ({@link JsonSerializer},, + * {@link JsonDeserializer}, {@link KeyDeserializer}, {@code TypeResolverBuilder} and {@code TypeIdResolver})., + *
[+++ b/spring-framework-reference/src/beans.xml, + <para>This class is a Spring component and has application specific code, + also contributes a bean definition that has a factory method referring, + to the method <methodname>publicInstance</methodname>. The]
[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java, + * Copyright 2002-2016 the original author or authors., + output = output.replace("\r\n", "\n");]
[+++ b/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java]
[+++ b/spring-core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, + * Copyright 2002-2015 the original author or authors., + super("Failed to convert from type [" + sourceType + "] to type [" + targetType +, + "] for value '" + ObjectUtils.nullSafeToString(value) + "'", cause);, +++ b/spring-core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, + * Copyright 2002-2015 the original author or authors., + super("Failed to convert from type [" + sourceType + "] to type [" + targetType +, + "] for value '" + ObjectUtils.nullSafeToString(value) + "'", cause);, +++ b/spring-core/src/main/java/org/springframework/core/convert/ConverterNotFoundException.java, + * Copyright 2002-2015 the original author or authors., + super("No converter found capable of converting from type [" + sourceType
[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(ao, type);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(ao, type);, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, + EventListener eventListener = AnnotatedElementUtils.findMergedAnnotation(this.method, EventListener.class);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(ao, type);, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, + EventListener eventListener = AnnotatedElementUtils.findMergedAnnotation(this.method, EventListener.class);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + * {@code getMergedAnnotationAttributes()}, {@code getMergedAnnotation()},, + * {@code findMergedAnnotationAttributes()}, and {@code findMergedAnnotation()}, + * methods., + * or declared within the annotation hierarchy <em>above</em> the, + * @since 4.2, + public static Set<String> getMetaAnnotationTypes(AnnotatedElement element, Class<? extends Annotation> annotationType) {, + * {@code annotationName}) on the supplied {@link AnnotatedElement}., + * @param annotationName the fully qualified
[+++ b/src/dist/changelog.txt, +* parameterize DeferredResult type]
[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, + public <T extends S> T consumeWith(Consumer<EntityExchangeResult<B>> consumer) {, + this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, + return new JsonPathAssertions(this, getBodyAsString(), expression, args);, + public BodyContentSpec consumeWith(Consumer<EntityExchangeResult<byte[]>> consumer) {, + this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, + public <T extends S> T consumeWith(Consumer<EntityExchangeResult<B>> consumer) {, + this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, + return new JsonPathAssertions(this, getBodyAsString(), expression, args);, + public BodyContentSpec consumeWith(Consumer<EntityExchangeResult<byte[]>> consumer) {, + this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java, + private final String content;, +, + JsonPathAssertions(WebTestClient.BodyContentSpec spec, String content, String expression, Object... args) {, + this.content = content;, + this.pathHelper.assertValue(this.content, expectedValue);, + this.pathHelper.exists(this.content);, + this.pathHelper.doesNotExist(this.content);, + this.pathHelper.assertValueIsEmpty(this.content);, + this.pathHelper.assertValueIsNotEmpty(this.content);, + this.pathHelper.assertValueIsBoolean(this.content);,
[+++ b/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java, + * Copyright 2002-2012 the original author or authors., + if (propertySource.containsProperty(key)) {]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/build.gradle, + ext.xmlunitVersion = "2.2.1", + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + optional("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), +++ b/build.gradle, + ext.xmlunitVersion = "2.2.1", + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + optional("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), +++ b/spring-core/src/test/java/org/springframework/util/xml/AbstractStaxHandlerTestCase.java, +import org.junit.Assume;, +import org.junit.Before;, +import org.junit.Test;, +import org.w3c.dom.Document;, +import org.xml.sax.InputSource;, +import org.xml.sax.XMLReader;, +import org.xml.sax.helpers.XMLReaderFactory;, +import java.io.StringReader;, +import java.io.StringWriter;, +import java.net.Socket;, +import static org.junit.Assert.assertThat;, +import static org.xmlunit.matchers.CompareMatcher.isSimilarTo;, + assertThat(stringWriter.toString(), isSimilarTo(COMPLEX_XML));, + assertThat(stringWriter.toString(), isSimilarTo(COMPLEX_XML));, + assertThat(result, isSimilarTo(expected));, + assertThat(expected, isSimilarTo(result));, +++ b/build.gradle, + ext.xmlunitVersion = "2.2.1", + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), + testCompile("org.xmlunit:xmlunit-matchers:${xmlunitVersion}"), +
[+++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ExtensionRegistryInitializer.java, + * @author Sebastien Deleuze, + * @deprecated as of Spring Framework 5.1, use {@link ExtensionRegistry} based contructors instead, +@Deprecated, +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ExtensionRegistryInitializer.java, + * @author Sebastien Deleuze, + * @deprecated as of Spring Framework 5.1, use {@link ExtensionRegistry} based contructors instead, +@Deprecated, +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, + * @author Sebastien Deleuze, + final ExtensionRegistry extensionRegistry;, + this(null, null);, + * @deprecated as of Spring Framework 5.1, use {@link #ProtobufHttpMessageConverter(ExtensionRegistry)} instead, + @Deprecated, + this(null, null);, + if (registryInitializer != null) {, + registryInitializer.initializeExtensionRegistry(this.extensionRegistry);, + }, + }, +, + /**, + * Construct a new {@code ProtobufHttpMessageConverter} with a
[+++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/net.sourceforge.ehcache/com.springsource.net.sf.ehcache/2.0.0/com.springsource.net.sf.ehcache-2.0.0.jar"/>, +++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/net.sourceforge.ehcache/com.springsource.net.sf.ehcache/2.0.0/com.springsource.net.sf.ehcache-2.0.0.jar"/>, +++ b/org.springframework.context/context.iml, + <root url="jar://$IVY_CACHE$/net.sourceforge.ehcache/com.springsource.net.sf.ehcache/2.0.0/com.springsource.net.sf.ehcache-2.0.0.jar!/" />
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClient.java, + @Override, + public String toString() {, + return "ReactorNettyTcpStompClient[" + this.tcpClient + "]";, + }, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClient.java, + @Override, + public String toString() {, + return "ReactorNettyTcpStompClient[" + this.tcpClient + "]";, + }, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, + /** STOMP recommended error of margin for receiving heartbeats */, + * Heartbeat starts once CONNECTED frame with heartbeat settings is received., + * If CONNECTED doesn't arrive within a minute, we'll close the connection., + logger.info("Starting \"system\" session, " + toString());, + return "StompBrokerRelay[" + getTcpClientInfo() + "]";, + }, +, + private String getTcpClientInfo() {, + return this.tcpClient
[+++ b/spring-context/src/main/java/org/springframework/context/support/LiveBeansView.java, + if (resourceDescription == null) {, + return null;, + }]
[+++ b/.gitignore, +org.springframework.jdbc/derby.log, +org.springframework.spring-parent/.classpath, +org.springframework.spring-parent/.project, +org.springframework.test/test-output/, +target, +spring-build/lib/docbook, +# ignore files and directories related to gradle build, +/.classpath, +/.project, +/.gradle, +/build, +/spring-*, +!/spring-framework-reference, +++ b/.gitignore, +org.springframework.jdbc/derby.log, +org.springframework.spring-parent/.classpath, +org.springframework.spring-parent/.project, +org.springframework.test/test-output/, +target, +spring-build/lib/docbook, +# ignore files and directories related to gradle build, +/.classpath, +/.project, +/.gradle, +/build, +/spring-*, +!/spring-framework-reference, +++ /dev/null, +++ b/.gitignore, +org.springframework.jdbc/derby.log, +org.springframework.spring-parent/.classpath, +org.springframework.spring-parent/.project, +org.springframework.test/test-output/, +target, +spring-build/lib/docbook, +# ignore files and directories related to gradle build, +/.classpath, +/.project, +/.gradle, +/build, +/spring-*, +!/spring-framework-reference, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +org.springframework.jdbc/derby.log, +org.springframework.spring-parent/.classpath, +org.springframework.spring-parent/.project, +org.springframework.test/test-output/, +target, +spring-build/lib/docbook, +# ignore files and directories related to gradle build, +/.classpath, +/.project, +/.gradle, +/build, +/spring-*, +!/spring-framework-reference, +++
[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, + public DispatcherHandler() {, + }, +, + public DispatcherHandler(ApplicationContext applicationContext) {, + initStrategies(applicationContext);, + }, +, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, + public DispatcherHandler() {, + }, +, + public DispatcherHandler(ApplicationContext applicationContext) {, + initStrategies(applicationContext);, + }, +, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java, + this.dispatcherHandler = new DispatcherHandler(appContext);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, + public DispatcherHandler() {, + }, +, + public DispatcherHandler(ApplicationContext applicationContext) {, + initStrategies(applicationContext);, + }, +, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java, + this.dispatcherHandler = new DispatcherHandler(appContext);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/SimpleUrlHandlerMappingIntegrationTests.java, + return WebHttpHandlerBuilder.webHandler(new DispatcherHandler(wac)), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, + public DispatcherHandler() {, + }, +, + public DispatcherHandler(ApplicationContext applicationContext) {, + initStrategies(applicationContext);, + }, +,
[+++ b/src/reference/docbook/new-in-3.2.xml, + writing the response with HTTP message converters. This serves as an]
[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, + protected Collection<CacheOperation> parseCacheAnnotations(DefaultCacheConfig cachingConfig, AnnotatedElement ae) {, + for (CacheEvict evict : evicts) {, + ops.add(parseEvictAnnotation(ae, cachingConfig, evict));, + Collection<CachePut> puts = getAnnotations(ae, CachePut.class);, + if (puts != null) {, + for (CachePut put : puts) {, + ops.add(parsePutAnnotation(ae, cachingConfig, put));, + Collection<Caching> cachings = getAnnotations(ae, Caching.class);, + if (cachings != null) {, + for (Caching caching : cachings) {, + ops.addAll(parseCachingAnnotation(ae, cachingConfig, caching));, +, + CacheableOperation parseCacheableAnnotation(AnnotatedElement ae, DefaultCacheConfig defaultConfig, Cacheable caching) {, + CacheableOperation op = new CacheableOperation();, + op.setCacheNames(caching.value());, + op.setCondition(caching.condition());, + op.setUnless(caching.unless());, + op.setKey(caching.key());, + op.setKeyGenerator(caching.keyGenerator());, + op.setCacheManager(caching.cacheManager());, + op.setCacheResolver(caching.cacheResolver());, + op.setName(ae.toString());,
[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +++ b/spring-websocket/src/main/resources/org/springframework/web/socket/config/spring-websocket-4.0.xsd, + <xsd:annotation>, + <xsd:documentation><![CDATA[, + An entry in the registered HandlerMapping that matches a path with a handler., + ]]></xsd:documentation>, + </xsd:annotation>, + <xsd:annotation>, + <xsd:documentation><![CDATA[, + A path that maps a particular request to a handler., + Exact path mapping URIs (such as "/myPath") are supported as well as Ant-stype path patterns (such as /myPath/**)., + ]]></xsd:documentation>, + </xsd:annotation>, + <xsd:annotation>, + <xsd:documentation source="java:org.springframework.web.socket.WebSocketHandler"><![CDATA[, + The bean name of a WebSocketHandler to use for requests that match the path configuration., + ]]></xsd:documentation>, + </xsd:annotation>, + <xsd:annotation>,
[+++ b/spring-core/src/main/java/org/springframework/util/Base64Utils.java, + * Copyright 2002-2015 the original author or authors., + interface Base64Delegate {, + static class JdkBase64Delegate implements Base64Delegate {, + static class CommonsCodecBase64Delegate implements Base64Delegate {, +++ b/spring-core/src/main/java/org/springframework/util/Base64Utils.java, + * Copyright 2002-2015 the original author or authors., + interface Base64Delegate {, + static class JdkBase64Delegate implements Base64Delegate {, + static class CommonsCodecBase64Delegate implements Base64Delegate {, +++ b/spring-core/src/test/java/org/springframework/util/Base64UtilsTests.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + *
[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2Tokenizer.java, + * Tokenize the given {@code Flux<DataBuffer>} into {@code Flux<TokenBuffer>}., +, + JsonParser parser = jsonFactory.createNonBlockingByteArrayParser();, + Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(parser, tokenizeArrayElements);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2Tokenizer.java, + * Tokenize the given {@code Flux<DataBuffer>} into {@code Flux<TokenBuffer>}., +, + JsonParser parser = jsonFactory.createNonBlockingByteArrayParser();, + Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(parser, tokenizeArrayElements);, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2TokenizerTests.java, + * @author Rossen Stoyanchev, +, + public void createParser() {, + this.jsonFactory = new JsonFactory();, + this.objectMapper = new ObjectMapper(this.jsonFactory);, + singletonList("[" +, + "{\"foo\": \"foofoo\", \"bar\": \"barbar\"}," +, + "{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"),, + singletonList("[" +, + "{\"foo\": \"foofoo\", \"bar\": \"barbar\"}," +, + "{\"foo\": \"foofoofoo\",
[+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, + private boolean trimTokens = false;, + if (!this.trimTokens) {, + }, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, + private boolean trimTokens = false;, + if (!this.trimTokens) {, + }, +++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java, + // SPR-14247, + @Test, + public void matchWithTrimTokensEnabled() throws Exception {, + pathMatcher.setTrimTokens(true);, +, + assertTrue(pathMatcher.match("/foo/bar", "/foo /bar"));, + }, +]
[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +import java.util.Map.Entry;, +import org.springframework.util.Assert;, + private Map<String, MediaType> mediaTypes = new HashMap<String, MediaType>();, + private String parameterName = "format";, + * Add mappings from file extensions to media types represented as strings., + * <p>When this mapping is not set or when an extension is not found, the Java, + * Action Framework, if available, may be used if enabled via, + * {@link #setFavorPathExtension(boolean)}., + *, + * @see #addMediaType(String, MediaType), + * @see #addMediaTypes(Map), + for (Entry<Object, Object> entry : mediaTypes.entrySet()) {, + /**, + * Add a mapping from a file extension to a
[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/WebRequestMatcher.java, + * @see org.springframework.test.web.servlet.htmlunit.HostRequestMatcher, + * @see org.springframework.test.web.servlet.htmlunit.UrlRegexRequestMatcher, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/WebRequestMatcher.java, + * @see org.springframework.test.web.servlet.htmlunit.HostRequestMatcher, + * @see org.springframework.test.web.servlet.htmlunit.UrlRegexRequestMatcher, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/DelegatingWebConnectionTests.java, + * Unit and integration tests for {@link DelegatingWebConnection}., + *]
[+++ b/org.springframework.samples.petclinic/ivy.xml, + <dependency org="com.sun.xml" name="com.springsource.com.sun.xml.bind" rev="2.1.7" />, + <dependency org="org.jdom" name="com.springsource.org.jdom" rev="1.0.0" />]
[+++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-2.7.6.jar" sourcepath="/IVY_CACHE/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-sources-2.7.6.jar"/>, +++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-2.7.6.jar" sourcepath="/IVY_CACHE/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-sources-2.7.6.jar"/>, +++ b/org.springframework.context/.classpath.swp, +++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-2.7.6.jar" sourcepath="/IVY_CACHE/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-sources-2.7.6.jar"/>, +++ b/org.springframework.context/.classpath.swp, +++ b/org.springframework.context/.ivy.xml.swp, +++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-2.7.6.jar" sourcepath="/IVY_CACHE/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-sources-2.7.6.jar"/>, +++ b/org.springframework.context/.classpath.swp, +++ b/org.springframework.context/.ivy.xml.swp, +++ b/org.springframework.context/ivy.xml, + <dependency org="org.antlr" name="com.springsource.antlr" rev="2.7.6" conf="test->compile"/>, +++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-2.7.6.jar" sourcepath="/IVY_CACHE/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-sources-2.7.6.jar"/>, +++ b/org.springframework.context/.classpath.swp, +++ b/org.springframework.context/.ivy.xml.swp, +++ b/org.springframework.context/ivy.xml, + <dependency org="org.antlr" name="com.springsource.antlr" rev="2.7.6" conf="test->compile"/>, +++ b/org.springframework.context/src/test/java/org/springframework/aop/framework/CountingBeforeAdvice.java, +/*, + * Copyright 2002-2005 the original author or authors., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, +import java.util.stream.Collectors;, +import java.util.stream.IntStream;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, + // Support methods for use in "InvocableHandlerMethod" sub-class variants.., +, + @Nullable, + protected static Object findProvidedArgument(MethodParameter parameter, @Nullable Object... providedArgs) {, + if (!ObjectUtils.isEmpty(providedArgs)) {, + for (Object providedArg : providedArgs) {, + if (parameter.getParameterType().isInstance(providedArg)) {, + return providedArg;, + }, + }, + }, + return null;, + }, +, + protected static String formatArgumentError(MethodParameter param, String message) {, + return "Could not resolve parameter [" + param.getParameterIndex() + "] in " +, + param.getExecutable().toGenericString() + (StringUtils.hasText(message) ? ": " + message : "");, + },
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-jms/src/test/java/org/springframework/jms/annotation/AnnotationDrivenNamespaceTests.java, + private JmsListenerContainerFactory<?> containerFactory;, + public void setContainerFactory(JmsListenerContainerFactory<?> containerFactory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/AnnotationDrivenNamespaceTests.java, + private JmsListenerContainerFactory<?> containerFactory;, + public void setContainerFactory(JmsListenerContainerFactory<?> containerFactory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/config/JmsListenerContainerFactoryTests.java, + private void setDefaultJmsConfig(AbstractJmsListenerContainerFactory<?> factory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/AnnotationDrivenNamespaceTests.java, + private JmsListenerContainerFactory<?> containerFactory;, + public void setContainerFactory(JmsListenerContainerFactory<?> containerFactory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/config/JmsListenerContainerFactoryTests.java, + private void setDefaultJmsConfig(AbstractJmsListenerContainerFactory<?> factory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java, + Map<String, ?> containers = context.getBeansOfType(DefaultMessageListenerContainer.class);, + Iterator<ComponentDefinition> iterator = context.getRegisteredComponents();, + ComponentDefinition compDef = iterator.next();, + public ToolingTestApplicationContext(String path, Class<?> clazz) {, +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/AnnotationDrivenNamespaceTests.java, + private JmsListenerContainerFactory<?> containerFactory;, + public void setContainerFactory(JmsListenerContainerFactory<?> containerFactory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/config/JmsListenerContainerFactoryTests.java, + private void setDefaultJmsConfig(AbstractJmsListenerContainerFactory<?> factory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java,
[+++ b/spring-core/src/test/java/org/springframework/core/CollectionFactoryTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.hamcrest.Matchers.empty;, + assertThat(set, is(empty()));, + assertThat(set, is(empty()));, + assertThat(colors, is(empty()));, + assertThat(colors, is(empty()));]
[+++ b/build-spring-framework/build.iml, +++ b/build-spring-framework/build.iml, +++ b/build-spring-framework/build.xml, +++ b/build-spring-framework/build.iml, +++ b/build-spring-framework/build.xml, +++ b/build.properties, +version=3.1.1, +build.stamp=BUILD-SNAPSHOT, +++ b/build-spring-framework/build.iml, +++ b/build-spring-framework/build.xml, +++ b/build.properties, +version=3.1.1, +build.stamp=BUILD-SNAPSHOT, +++ b/org.springframework.aop/.classpath, +++ b/build-spring-framework/build.iml, +++ b/build-spring-framework/build.xml, +++ b/build.properties, +version=3.1.1, +build.stamp=BUILD-SNAPSHOT, +++ b/org.springframework.aop/.classpath, +++ b/org.springframework.aop/aop.iml, +++ b/build-spring-framework/build.iml, +++ b/build-spring-framework/build.xml, +++ b/build.properties, +version=3.1.1, +build.stamp=BUILD-SNAPSHOT, +++ b/org.springframework.aop/.classpath, +++ b/org.springframework.aop/aop.iml, +++ b/org.springframework.aop/pom.xml, + <version>3.1.1.BUILD-SNAPSHOT</version>, + <version>3.1.1.BUILD-SNAPSHOT</version>, +++ b/build-spring-framework/build.iml, +++ b/build-spring-framework/build.xml, +++ b/build.properties, +version=3.1.1, +build.stamp=BUILD-SNAPSHOT, +++ b/org.springframework.aop/.classpath, +++ b/org.springframework.aop/aop.iml, +++ b/org.springframework.aop/pom.xml, + <version>3.1.1.BUILD-SNAPSHOT</version>, + <version>3.1.1.BUILD-SNAPSHOT</version>, +++ b/org.springframework.aop/src/main/java/overview.html, +++ b/build-spring-framework/build.iml, +++ b/build-spring-framework/build.xml, +++ b/build.properties, +version=3.1.1, +build.stamp=BUILD-SNAPSHOT, +++ b/org.springframework.aop/.classpath, +++ b/org.springframework.aop/aop.iml, +++ b/org.springframework.aop/pom.xml, + <version>3.1.1.BUILD-SNAPSHOT</version>, + <version>3.1.1.BUILD-SNAPSHOT</version>, +++ b/org.springframework.aop/src/main/java/overview.html, +++ b/org.springframework.asm/pom.xml, + <version>3.1.1.BUILD-SNAPSHOT</version>, +
[+++ b/org.springframework.context/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd", + <groupId>org.apache.geronimo.specs</groupId>, + <artifactId>geronimo-ejb_3.0_spec</artifactId>, + <version>1.0.1</version>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.apache.geronimo.specs</groupId>, + <artifactId>geronimo-interceptor_3.0_spec</artifactId>, + <version>1.0.1</version>, + <artifactId>javax.inject-tck</artifactId>, + <version>1</version>, + <artifactId>ehcache-core</artifactId>, + <version>2.0.0</version>, +++ b/org.springframework.context/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd", + <groupId>org.apache.geronimo.specs</groupId>, + <artifactId>geronimo-ejb_3.0_spec</artifactId>, + <version>1.0.1</version>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.apache.geronimo.specs</groupId>, + <artifactId>geronimo-interceptor_3.0_spec</artifactId>, + <version>1.0.1</version>, + <artifactId>javax.inject-tck</artifactId>, + <version>1</version>, + <artifactId>ehcache-core</artifactId>, + <version>2.0.0</version>, +++ b/org.springframework.jms/pom.xml]
[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +++ b/spring-core/src/test/java/org/springframework/core/ConstantsTests.java, + * Copyright 2002-2018 the original author or authors., + assertTrue(values.contains(Integer.valueOf(0)));, + assertTrue(values.contains(Integer.valueOf(66)));, + assertTrue(values.contains(Integer.valueOf(0)));, + assertTrue(values.contains(Integer.valueOf(1)));, + assertTrue(values.contains(Integer.valueOf(2)));, + assertTrue(values.contains(Integer.valueOf(1)));, + assertTrue(values.contains(Integer.valueOf(2)));, + assertTrue(values.contains(Integer.valueOf(0)));, + assertTrue(values.contains(Integer.valueOf(66)));, + assertTrue(values.contains(Integer.valueOf(0)));, + assertTrue(values.contains(Integer.valueOf(1)));, + assertTrue(values.contains(Integer.valueOf(2)));, + assertTrue(values.contains(Integer.valueOf(1)));, + assertTrue(values.contains(Integer.valueOf(2)));, + assertTrue(values.contains(Integer.valueOf(3)));, + assertTrue(values.contains(Integer.valueOf(4)));, + assertEquals("DOG", c.toCode(Integer.valueOf(0), ""));, + assertEquals("DOG", c.toCode(Integer.valueOf(0), "D"));, + assertEquals("DOG", c.toCode(Integer.valueOf(0),
[+++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/DateTimeFormatterFactory.java, + * Factory that creates a Joda {@link DateTimeFormatter}. Formatters will be, + * @see #createDateTimeFormatter(), + * @see #createDateTimeFormatter(DateTimeFormatter), + * @see #setPattern(String), + * @see #setIso(org.springframework.format.annotation.DateTimeFormat.ISO), + * @see #setStyle(String), + * @see DateTimeFormatterFactoryBean, +public class DateTimeFormatterFactory {, + * Create a new {@code DateTimeFormatter} using this factory. If no specific, + * @see #createDateTimeFormatter(DateTimeFormatter), + public DateTimeFormatter createDateTimeFormatter() {, + return createDateTimeFormatter(DateTimeFormat.mediumDateTime());, + * Create a new {@code DateTimeFormatter} using this factory. If no specific, + public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {, + DateTimeFormatter dateTimeFormatter = null;, + if (StringUtils.hasLength(pattern)) {, + dateTimeFormatter = DateTimeFormat.forPattern(pattern);,
[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, + // Add these so that static methods are invocable on the type: e.g. Float.valueOf(..), + // Also expose methods from java.lang.Class itself, + result.addAll(Arrays.asList(getMethods(Class.class)));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, + // Add these so that static methods are invocable on the type: e.g. Float.valueOf(..), + // Also expose methods from java.lang.Class itself, + result.addAll(Arrays.asList(getMethods(Class.class)));, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +import java.nio.charset.Charset;, +, + @Test, + public void SPR13918() {, + EvaluationContext context = new StandardEvaluationContext();, + context.setVariable("encoding", "UTF-8");, +, + Expression ex = parser.parseExpression("T(java.nio.charset.Charset).forName(#encoding)");, + Object result = ex.getValue(context);, + assertEquals(Charset.forName("UTF-8"), result);, + }, +, +, +]
[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java, + else {, + return this.streamingMediaTypes.stream(), + .filter(mediaType -> mediaType.isCompatibleWith(mimeType)), + .findFirst(), + .map(mediaType -> {, + byte[] separator =, + STREAM_SEPARATORS.getOrDefault(mediaType, NEWLINE_SEPARATOR);, + DataBuffer buffer =, + encodeValue(value, mimeType, bufferFactory, elementType, hints,, + encoding);, + }), + .orElseGet(() -> {, + ResolvableType listType =, + ResolvableType.forClassWithGenerics(List.class, elementType);, + encodeValue(list, mimeType, bufferFactory, listType, hints,, + encoding)).flux();, + });, + }]
[+++ b/spring-webflux/src/test/resources/log4j2-test.xml, + <Logger name="org.springframework.web.reactive.socket.adapter" level="trace" />]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java, + @Test // SPR-15719, + public void repeatedRequestsInSequentialOrder() throws Exception {, + this.manager.expectRequest(times(2), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess());, + this.manager.expectRequest(times(2), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess());, +, + this.manager.validateRequest(createRequest(GET, "/foo"));, + this.manager.validateRequest(createRequest(GET, "/foo"));, + this.manager.validateRequest(createRequest(GET, "/bar"));, + this.manager.validateRequest(createRequest(GET, "/bar"));, + }, +]
[+++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import test.aop.DefaultLockable;, +import test.aop.Lockable;, +import test.aop.PerTargetAspect;, +import test.aop.TwoAdviceAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import test.aop.DefaultLockable;, +import test.aop.Lockable;, +import test.aop.PerTargetAspect;, +import test.aop.TwoAdviceAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectJPointcutAdvisorTests.java, +import test.aop.PerTargetAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import test.aop.DefaultLockable;, +import test.aop.Lockable;, +import test.aop.PerTargetAspect;, +import test.aop.TwoAdviceAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectJPointcutAdvisorTests.java, +import test.aop.PerTargetAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectMetadataTests.java, +import test.aop.PerTargetAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import test.aop.DefaultLockable;, +import test.aop.Lockable;, +import test.aop.PerTargetAspect;, +import test.aop.TwoAdviceAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectJPointcutAdvisorTests.java, +import test.aop.PerTargetAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectMetadataTests.java, +import test.aop.PerTargetAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java, +import test.aop.PerThisAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import test.aop.DefaultLockable;, +import test.aop.Lockable;, +import test.aop.PerTargetAspect;, +import test.aop.TwoAdviceAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectJPointcutAdvisorTests.java, +import test.aop.PerTargetAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectMetadataTests.java, +import test.aop.PerTargetAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java, +import test.aop.PerThisAspect;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/framework/ProxyFactoryTests.java, +import test.aop.MethodCounter;, +import test.aop.NopInterceptor;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import test.aop.DefaultLockable;, +import test.aop.Lockable;, +import
[+++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, + * @author Juergen Hoeller, + * Common placeholder for an empty {@code Advice} to be returned from, + * {@link #getAdvice()} if no proper advice has been configured (yet)., + * @since 5.0, + */, + Advice EMPTY_ADVICE = new Advice() {};, +, +, + /**, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, + * @author Juergen Hoeller, + * Common placeholder for an empty {@code Advice} to be returned from, + * {@link #getAdvice()} if no proper advice has been configured (yet)., + * @since 5.0, + */, + Advice EMPTY_ADVICE = new Advice() {};, +, +, + /**, +++
[+++ b/spring-framework-reference/src/beans-dependencies.xml, + <para>The <literal>c:</literal> namespace uses the same conventions as the <literal>p:</literal> one (trailing <literal>-ref</literal> for bean references)]
[+++ b/spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpResponse.java, + * Copyright 2002-2016 the original author or authors., +, + Assert.notNull(statusCode, "HttpStatus is required");, + Assert.notNull(statusCode, "HttpStatus is required");, +, + try {, + InputStream body = getBody();, + if (body != null) {, + body.close();, + }, + }, + catch (IOException ex) {, + // ignore, + }]
[+++ b/build.gradle, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // currently needed for SockJS support, + optional("reactor:reactor-core:1.0.0.BUILD-SNAPSHOT") // STOMP message processing, + optional("reactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT") // STOMP relay to message broker, + mavenLocal() // temporary workaround for locally installed (latest) reactor, + maven { url 'http://repo.springsource.org/snapshot' } // reactor, + optional("org.testng:testng:6.5.2"), + def gradleOpts = "-XX:MaxPermSize=1024m -Xmx1024m", +++ b/build.gradle, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // currently needed for SockJS support, + optional("reactor:reactor-core:1.0.0.BUILD-SNAPSHOT") // STOMP message processing, + optional("reactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT") // STOMP relay to message broker, + mavenLocal() // temporary workaround for locally installed (latest) reactor, + maven { url 'http://repo.springsource.org/snapshot' } // reactor, + optional("org.testng:testng:6.5.2"), + def gradleOpts = "-XX:MaxPermSize=1024m
[+++ b/.github/ISSUE_TEMPLATE.md, +<!--, +!!! For Security Vulnerabilities, please go to https://pivotal.io/security !!!, +-->, +**Affects:** \<Spring Framework version>, +, +---, +<!--, +Thanks for taking the time to create an issue. Please read the following:, +, +- Questions should be asked on Stack Overflow., +- For bugs, specify affected versions and explain what you are trying to do., +- For enhancements, provide context and describe the problem., +, +Issue or Pull Request? Create only one, not both. GitHub treats them as the same., +If unsure, start with an issue, and if you submit a pull request later, the, +issue will be
[+++ b/build.gradle, + maven { url 'http://repo.springsource.org/libs-snapshot' } // reactor, + optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), + optional("org.projectreactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT"), +++ b/build.gradle, + maven { url 'http://repo.springsource.org/libs-snapshot' } // reactor, + optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), + optional("org.projectreactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, +import org.springframework.messaging.simp.SimpMessageType;, + headers.setMessageTypeIfNotSet(SimpMessageType.MESSAGE);, +++ b/build.gradle, + maven { url 'http://repo.springsource.org/libs-snapshot' } // reactor, + optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), + optional("org.projectreactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, +import org.springframework.messaging.simp.SimpMessageType;, + headers.setMessageTypeIfNotSet(SimpMessageType.MESSAGE);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +, + if (command != null && command.requiresDestination() && !checkDestinationPrefix(destination)) {, + connected(headers, this.stompConnection);, + protected void connected(StompHeaderAccessor headers, StompConnection stompConnection) {, + this.stompConnection.setReady();, + publishBrokerAvailableEvent();, + }, +, + disconnected(message);, + }, +, + protected void disconnected(String errorMessage) {, + sendError(errorMessage);, +
[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java, + * Copyright 2002-2018 the original author or authors., + * Assert that the named response header does exist., + * @since 5.0.3, + */, + public ResultMatcher doesExist(final String name) {, + return result -> assertTrue("Response should contain header '" + name + "'",, + result.getResponse().containsHeader(name));, + }, +, + /**, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java, + * Copyright 2002-2018 the original author or authors., + * Assert that the named response header does exist., + * @since 5.0.3, + */, + public ResultMatcher doesExist(final String name) {, + return result -> assertTrue("Response should contain header '" + name
[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, + * Copyright 2002-2019 the original author or authors., + /** Name of hint with a filename for the resource(e.g. from "Content-Disposition" HTTP header). */, + public static String FILENAME_HINT = ResourceDecoder.class.getName() + ".filename";, +, +, + String filename = hints != null ? (String) hints.get(FILENAME_HINT) : null;, + return new InputStreamResource(new ByteArrayInputStream(bytes)) {, + @Override, + public String getFilename() {, + return filename;, + }, + };, + return new ByteArrayResource(bytes) {, + @Override, + public String getFilename() {, + return filename;, + }, + };, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, + * Copyright 2002-2019 the original author or
[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java, + * in the context prior to the expression being evaluated. Functions may also be static, + * Java methods, registered in the context prior to invocation of the expression., + * <p>Functions are very simplistic. The arguments are not part of the definition, + // Possibly a static Java method registered as a function]
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestDataValueProcessor.java, + * Copyright 2002-2013 the original author or authors., + * @param httpMethod the form HTTP method, + String processAction(HttpServletRequest request, String action, String httpMethod);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestDataValueProcessor.java, + * Copyright 2002-2013 the original author or authors., + * @param httpMethod the form HTTP method, + String processAction(HttpServletRequest request, String action, String httpMethod);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java, + writeOptionalAttribute(tagWriter, METHOD_ATTRIBUTE, getHttpMethod());, + private String getHttpMethod() {, + return isMethodBrowserSupported(getMethod()) ? getMethod() : DEFAULT_METHOD;, + }, +, + action = processor.processAction((HttpServletRequest) request, action, getHttpMethod());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestDataValueProcessor.java, + * Copyright 2002-2013 the original author or authors., + * @param httpMethod the form
[+++ b/src/reference/docbook/testing.xml, +<chapter version="5.0", + xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd", + xml:id="testing" xmlns="http://docbook.org/ns/docbook", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xmlns:xs="http://www.w3.org/2001/XMLSchema", + xmlns:ns="http://docbook.org/ns/docbook">, + xl:href="http://www.easymock.org">EasyMock</link> or existing Servlet, + API mock objects such as <link, + xl:href="http://www.mockobjects.com/">MockObjects.com</link>: Web site, + dedicated to mock objects, a technique for improving the design of, + code within test-driven development.</para>, + <para><link xl:href="http://en.wikipedia.org/wiki/Mock_Object">"Mock, + <para><link xl:href="http://www.easymock.org/">EasyMock</link>: Java, + library <quote> <emphasis>that provides Mock Objects for interfaces, + (and objects through the class extension) by generating them on the, + fly using Java's proxy mechanism.</emphasis> </quote> Used by the, + Spring Framework in its test suite.</para>, + <para><link xl:href="http://www.jmock.org/">JMock</link>:
[+++ b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java, +@SuppressWarnings({"serial" }), +++ b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java, +@SuppressWarnings({"serial" }), +++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, +++ b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java, +@SuppressWarnings({"serial" }), +++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +, +, +, + primitiveTypes.addAll(Arrays.asList(new Class<?>[] {, + float[].class, int[].class, long[].class, short[].class}));, +++ b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java, +@SuppressWarnings({"serial" }), +++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +, +, +, + primitiveTypes.addAll(Arrays.asList(new Class<?>[] {, + float[].class, int[].class, long[].class, short[].class}));, +++ b/spring-core/src/main/java/org/springframework/util/comparator/NullSafeComparator.java, + @SuppressWarnings({ "unchecked"}), +++ b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java, +@SuppressWarnings({"serial" }), +++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +, +, +, + primitiveTypes.addAll(Arrays.asList(new Class<?>[] {, + float[].class, int[].class, long[].class, short[].class}));, +++ b/spring-core/src/main/java/org/springframework/util/comparator/NullSafeComparator.java, + @SuppressWarnings({ "unchecked"}), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java, +++ b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java, +@SuppressWarnings({"serial" }), +++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +, +, +, + primitiveTypes.addAll(Arrays.asList(new Class<?>[] {, + float[].class,
[+++ b/spring-web-reactive/build.gradle, +jar {, + baseName = 'spring-reactive', +}, +, +group = 'org.springframework.reactive', +++ b/spring-web-reactive/build.gradle, +jar {, + baseName = 'spring-reactive', +}, +, +group = 'org.springframework.reactive', +++ b/spring-web-reactive/gradle.properties, +, +++ b/spring-web-reactive/build.gradle, +jar {, + baseName = 'spring-reactive', +}, +, +group = 'org.springframework.reactive', +++ b/spring-web-reactive/gradle.properties, +, +++ b/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/EchoHandlerIntegrationTests.java]
[+++ b/spring-test/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java, + * Copyright 2002-2017 the original author or authors., +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.request;, +, + * <p>As of 5.0 this class also implements, + * {@link org.springframework.http.client.AsyncClientHttpRequestFactory, + * AsyncClientHttpRequestFactory}. However note that, + * {@link org.springframework.web.client.AsyncRestTemplate} and related classes, + * have been deprecated at the same time., + *, +@SuppressWarnings("deprecation"), +public class MockMvcClientHttpRequestFactory, + implements ClientHttpRequestFactory, org.springframework.http.client.AsyncClientHttpRequestFactory {, + public ClientHttpRequest createRequest(final URI uri, final HttpMethod httpMethod) {, + return getClientHttpResponse(httpMethod, uri, getHeaders(), getBodyAsBytes());, + }, + };, + }, +, + @Override, + public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod method) {, + return new org.springframework.mock.http.client.MockAsyncClientHttpRequest(method, uri)
[+++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, + * Copyright 2002-2015 the original author or authors., + @CacheEvict(cacheNames = "testCache", allEntries = true), + @CacheEvict(cacheNames = "testCache", beforeInvocation = true), + @CacheEvict(cacheNames = "testCache", key = "#p0"), + @CacheEvict(cacheNames = "testCache", key = "#p0", beforeInvocation = true), + @Cacheable(cacheNames = "testCache", key = "#p0"), + @Cacheable("testCache"), + @Cacheable(cacheNames = "testCache", key = "#root.methodName + #root.caches[0].name"), + @Cacheable(cacheNames = "testCache", key = "#root.methodName + #root.method.name + #root.targetClass + #root.target"), + @Cacheable(cacheNames = "testCache", keyGenerator = "customKyeGenerator"), + @Cacheable(cacheNames = "testCache", keyGenerator = "unknownBeanName"), + @Cacheable(cacheNames = "testCache", cacheManager = "customCacheManager"), + @Cacheable(cacheNames = "testCache", cacheManager
[+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/concurrency/SpringJUnit4ConcurrencyTests.java, + * Copyright 2002-2017 the original author or authors., +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import java.util.List;, +import java.util.stream.IntStream;, +, +import org.junit.BeforeClass;, +import org.junit.Ignore;, +import org.springframework.util.ReflectionUtils;, +import static java.util.stream.Collectors.*;, +import static org.springframework.core.annotation.AnnotatedElementUtils.*;, +import static org.springframework.test.context.junit4.JUnitTestingUtils.*;, + private final Class<?>[] testClasses = new Class[] {, + SpringJUnit4ClassRunnerAppCtxTests.class,, + InheritedConfigSpringJUnit4ClassRunnerAppCtxTests.class,, + SpringJUnit47ClassRunnerRuleTests.class,, + ParameterizedSpringRuleTests.class,, + MethodLevelTransactionalSpringRunnerTests.class,, + TimedTransactionalSpringRunnerTests.class,, + DispatcherWacRootWacEarTests.class,, + BasicAnnotationConfigWacSpringRuleTests.class,, + RequestAndSessionScopedBeansWacTests.class,, + WebSocketServletServerContainerFactoryBeanTests.class,, + JavaConfigTests.class,, + WebAppResourceTests.class,, + SampleTests.class, + @BeforeClass, + public static void abortIfLongRunningTestGroupIsNotEnabled() {, + Assume.group(TestGroup.LONG_RUNNING);, + }, + final int FAILED = 0;, + final int ABORTED = 0;, + final int
[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerAdvice.java, +import java.lang.annotation.Annotation;, + * {@code @ControllerAdvice("org.my.pkg")} is equivalent to, + *, + * Controllers that belong to those base packages will be included, e.g.:, + * {@code @ControllerAdvice(basePackages="org.my.pkg")} or, + * <p>Also consider using {@link #basePackageClasses()} as a type-safe, + * alternative to String-based package names., + *, + * Type-safe alternative to {@link #value()} for specifying the packages, + * to select Controllers to be assisted by the {@code @ControllerAdvice}, + * annotated class., + *, + * <p>Consider creating a special no-op marker class or interface in each package, + * that serves no purpose
[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, + Set<String> result = new LinkedHashSet<String>();, + result.addAll(resolver.resolveFileExtensions(mediaType));, + return new ArrayList<String>(result);, + }, +, + /**, + * Delegate to all configured MediaTypeFileExtensionResolver instances and aggregate, + * the list of all known file extensions., + */, + public List<String> getAllFileExtensions() {, + Set<String> result = new LinkedHashSet<String>();, + for (MediaTypeFileExtensionResolver resolver : this.fileExtensionResolvers) {, + result.addAll(resolver.getAllFileExtensions());, + }, + return new ArrayList<String>(result);, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, + Set<String> result = new LinkedHashSet<String>();, + result.addAll(resolver.resolveFileExtensions(mediaType));, + return new ArrayList<String>(result);, + }, +, + /**, + * Delegate to all configured MediaTypeFileExtensionResolver instances and aggregate, + * the list
[+++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspect.aj, +import org.springframework.core.annotation.AnnotatedElementUtils;, + Async async = AnnotatedElementUtils.findMergedAnnotation(method, Async.class);, + async = AnnotatedElementUtils.findMergedAnnotation(method.getDeclaringClass(), Async.class);, +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspect.aj, +import org.springframework.core.annotation.AnnotatedElementUtils;, + Async async = AnnotatedElementUtils.findMergedAnnotation(method, Async.class);, + async = AnnotatedElementUtils.findMergedAnnotation(method.getDeclaringClass(), Async.class);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/BeanAnnotationHelper.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, + * @author Juergen Hoeller, + return AnnotatedElementUtils.hasAnnotation(method, Bean.class);, + Bean bean = AnnotatedElementUtils.findMergedAnnotation(beanMethod, Bean.class);, +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspect.aj, +import org.springframework.core.annotation.AnnotatedElementUtils;, + Async async = AnnotatedElementUtils.findMergedAnnotation(method, Async.class);, + async = AnnotatedElementUtils.findMergedAnnotation(method.getDeclaringClass(), Async.class);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/BeanAnnotationHelper.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, + * @author Juergen Hoeller, + return AnnotatedElementUtils.hasAnnotation(method, Bean.class);, + Bean bean =
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/ParamTag.java, + * Copyright 2002-2013 the original author or authors., + * @author Nicholas Williams, + private boolean valueSet;, + Param param = new Param();, + param.setName(this.name);, + if (this.valueSet) {, + param.setValue(this.value);, + this.valueSet = true;, + }, +, + @Override, + public void release() {, + super.release();, + this.name = null;, + this.value = null;, + this.valueSet = false;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/ParamTag.java, + * Copyright 2002-2013 the original author or authors., + * @author Nicholas Williams, + private boolean valueSet;, + Param param = new Param();, + param.setName(this.name);, + if (this.valueSet) {, + param.setValue(this.value);, + this.valueSet =
[+++ b/org.springframework.web/src/main/java/org/springframework/web/context/request/AbstractRequestAttributesScope.java, + RequestAttributes attributes = RequestContextHolder.currentRequestAttributes();, + return attributes.resolveReference(key);, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/request/AbstractRequestAttributesScope.java, + RequestAttributes attributes = RequestContextHolder.currentRequestAttributes();, + return attributes.resolveReference(key);, +++ b/org.springframework.web/src/test/java/org/springframework/web/context/request/RequestScopeTests.java, + * Copyright 2002-2008 the original author or authors., +import org.springframework.context.expression.StandardBeanExpressionResolver;, + this.beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver());, + request.setContextPath("/path");, + assertEquals("/path", bean.getName());, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/request/AbstractRequestAttributesScope.java, + RequestAttributes attributes = RequestContextHolder.currentRequestAttributes();, + return attributes.resolveReference(key);, +++ b/org.springframework.web/src/test/java/org/springframework/web/context/request/RequestScopeTests.java, + * Copyright 2002-2008 the original author or authors., +import org.springframework.context.expression.StandardBeanExpressionResolver;, + this.beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver());, + request.setContextPath("/path");, + assertEquals("/path", bean.getName());, +++ b/org.springframework.web/src/test/resources/org/springframework/web/context/request/requestScopeTests.xml, + <bean id="requestScopedObject" class="org.springframework.beans.TestBean" scope="request">, + <property name="name" value="#{request.contextPath}"/>, + </bean>]
[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import java.util.List;, +import reactor.core.publisher.Flux;, +import org.springframework.core.ResolvableType;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.test.util.AssertionErrors;, +import static org.springframework.web.reactive.function.BodyExtractors.toDataBuffers;, +import static org.springframework.web.reactive.function.BodyExtractors.toFlux;, +import static org.springframework.web.reactive.function.BodyExtractors.toMono;, +, + public ResponseSpec exchange() {, + return new DefaultResponseSpec(this.requestId, this.headerSpec.exchange());, + public <T> ResponseSpec exchange(BodyInserter<T, ? super ClientHttpRequest> inserter) {, + return new DefaultResponseSpec(this.requestId, this.headerSpec.exchange(inserter));, + public <T, S extends Publisher<T>> ResponseSpec exchange(S publisher, Class<T> elementClass) {, + return new DefaultResponseSpec(this.requestId, this.headerSpec.exchange(publisher, elementClass));, + }, + private class DefaultResponseSpec implements ResponseSpec {, +, + private final String requestId;, +, + private final Mono<ClientResponse> responseMono;, +, +, + public DefaultResponseSpec(String requestId, Mono<ClientResponse> responseMono) {, + this.requestId = requestId;,
[+++ b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-context/src/main/java/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.java, + * or mutator of an attribute that is included in the management interface, then]
[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +import java.io.Serializable;, + interface PathComponent extends Serializable {, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +import java.io.Serializable;, + interface PathComponent extends Serializable {, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsTests.java, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.ObjectInputStream;, +import java.io.ObjectOutputStream;, +import static org.hamcrest.Matchers.equalTo;, + @Test, + public void serializable() throws Exception {, + UriComponents uriComponents = UriComponentsBuilder.fromUriString(, + "http://example.com").path("/{foo}").query("bar={baz}").build();, + ByteArrayOutputStream bos = new ByteArrayOutputStream();, + ObjectOutputStream oos = new ObjectOutputStream(bos);, + oos.writeObject(uriComponents);, + ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));, + UriComponents readObject = (UriComponents) ois.readObject();, + assertThat(uriComponents.toString(), equalTo(readObject.toString()));, + }, +]
[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import org.springframework.web.server.WebFilter;, + private final List<WebFilter> filters = new ArrayList<>(4);, +, +, + AbstractMockServerSpec() {, + this.filters.add(this.exchangeMutatorFilter);, + }, +, + @Override, + public <T extends B> T webFilter(WebFilter... filter) {, + this.filters.addAll(Arrays.asList(filter));, + return self();, + }, +, + WebHttpHandlerBuilder builder = initHttpHandlerBuilder();, + filtersInReverse().forEach(builder::prependFilter);, + return new DefaultWebTestClientBuilder(builder.build(), this.exchangeMutatorFilter);, + /**, + * Sub-classes to create the {@code WebHttpHandlerBuilder} to use., + */, + /**, + * Return the filters in reverse order for pre-pending., + */, + private List<WebFilter> filtersInReverse() {, + List<WebFilter> result = new
[+++ b/spring-framework-reference/src/beans-extension-points.xml, + <title>Container Extension Points</title>, + <para>Typically, an application developer does not need to subclass, + Instead, the Spring IoC container can be extended by plugging in, + <title>Customizing beans using a, + <interfacename>BeanPostProcessor</interfacename></title>, + configuring, and initializing a bean, you can plug in one or, + instances, and you can control the order in which these, + <literal>BeanPostProcessor</literal>s execute by setting the, + further details, consult the Javadoc for the, + <literal>BeanPostProcessor</literal>s do their work.</para>, + <para><literal>BeanPostProcessor</literal>s are scoped, + will <emphasis>only</emphasis> post-process the beans in that, + container. In other words, beans that are defined in
[+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestOperations.java, + * Create a new resource by POSTing the given object to the URI template, and returns the representation, + * Create a new resource by POSTing the given object to the URI template, and returns the representation, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestOperations.java, + * Create a new resource by POSTing the given object to the URI template, and returns the representation, + * Create a new resource by POSTing the given object to the URI template, and returns the representation, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java, + * <p>The main entry points of this template are the methods named after the six main
[+++ b/spring-framework-reference/images/overview-ejb.graffle, +<?xml version="1.0" encoding="UTF-8"?>, +<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">, +<plist version="1.0">, +<dict>, + <key>ActiveLayerIndex</key>, + <integer>0</integer>, + <key>ApplicationVersion</key>, + <array>, + <string>com.omnigroup.OmniGraffle</string>, + <string>137.11.0.108132</string>, + </array>, + <key>AutoAdjust</key>, + <true/>, + <key>BackgroundGraphic</key>, + <dict>, + <key>Bounds</key>, + <string>{{0, 0}, {756, 553}}</string>, + <key>Class</key>, + <string>SolidGraphic</string>, + <key>ID</key>, + <integer>2</integer>, + <key>Style</key>, + <dict>, + <key>fill</key>, + <dict>, + <key>GradientColor</key>, + <dict>, + <key>w</key>, + <string>0.666667</string>, + </dict>, + </dict>, + <key>shadow</key>, + <dict>, + <key>Draws</key>, + <string>NO</string>, + </dict>, + <key>stroke</key>, + <dict>, + <key>Draws</key>, + <string>NO</string>, + </dict>, + </dict>, + </dict>, + <key>CanvasOrigin</key>, +
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + private final List<MimeType> supportedMimeTypes;, + private boolean strictContentTypeMatch = false;, +, + private Class<?> serializedPayloadClass = byte[].class;, +, + * Construct an {@code AbstractMessageConverter} supporting a single MIME type., + Assert.notNull(supportedMimeType, "supportedMimeType is required");, + * Construct an {@code AbstractMessageConverter} supporting multiple MIME types., + * Return the supported MIME types., + * Configure the {@link ContentTypeResolver} to use to resolve the content, + * type of an input message., + * <p>, + * By default, no {@code ContentTypeResolver} is configured. When a resolver, + * is not configured, then {@link #setStrictContentTypeMatch(boolean)} should, + *
[+++ b/spring-web/src/main/java/org/springframework/http/client/AbstractBufferingAsyncClientHttpRequest.java, + * Copyright 2002-2016 the original author or authors., + if (headers.getContentLength() < 0) {, +++ b/spring-web/src/main/java/org/springframework/http/client/AbstractBufferingAsyncClientHttpRequest.java, + * Copyright 2002-2016 the original author or authors., + if (headers.getContentLength() < 0) {, +++ b/spring-web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java, + * Copyright 2002-2016 the original author or authors., + if (headers.getContentLength() < 0) {, +++ b/spring-web/src/main/java/org/springframework/http/client/AbstractBufferingAsyncClientHttpRequest.java, + * Copyright 2002-2016 the original author or authors., + if (headers.getContentLength() < 0) {, +++ b/spring-web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java, + * Copyright 2002-2016 the original author or authors., + if (headers.getContentLength() < 0) {, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, + if (this.headers.getContentLength() < 0) {, +++ b/spring-web/src/main/java/org/springframework/http/client/AbstractBufferingAsyncClientHttpRequest.java, + * Copyright 2002-2016
[+++ b/build.gradle, + ext.tiles2Version = "2.2.2", +project("spring-webmvc-tiles2") {, + description = "Spring Framework Tiles2 Integration", + merge.into = project(":spring-webmvc"), +, + dependencies {, + provided(project(":spring-context")), + provided(project(":spring-web")), + provided("javax.servlet:javax.servlet-api:3.0.1"), + optional("javax.servlet.jsp:javax.servlet.jsp-api:2.2.1"), + optional("javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api:1.2.1"), + optional("org.apache.tiles:tiles-api:${tiles2Version}"), + optional("org.apache.tiles:tiles-core:${tiles2Version}") {, + exclude group: "org.slf4j", module: "jcl-over-slf4j", + }, + optional("org.apache.tiles:tiles-servlet:${tiles2Version}") {, + exclude group: "org.slf4j", module: "jcl-over-slf4j", + }, + optional("org.apache.tiles:tiles-jsp:${tiles2Version}") {, + exclude group: "org.slf4j", module: "jcl-over-slf4j", + }, + optional("org.apache.tiles:tiles-el:${tiles2Version}") {, + exclude group: "org.slf4j", module: "jcl-over-slf4j", + }, + optional("org.apache.tiles:tiles-extras:${tiles2Version}") {, + exclude group: "org.slf4j", module: "jcl-over-slf4j", + exclude group: "org.apache.velocity", module: "velocity-tools", + exclude group: "org.springframework", module:
[+++ b/spring-web/src/main/java/org/springframework/web/server/adapter/AbstractReactiveWebInitializer.java, + * Copyright 2002-2018 the original author or authors., + Assert.hasLength(servletName, "getServletName() must not return null or empty");, + Assert.notNull(applicationContext, "createApplicationContext() must not return null");, + if (registration == null) {, + throw new IllegalStateException("Failed to register servlet with name '" + servletName + "'. " +, + "Check if there is another servlet registered under the same name.");, + }, + Assert.notEmpty(configClasses, "No Spring configuration provided through getConfigClasses()");, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/AbstractReactiveWebInitializer.java, + * Copyright 2002-2018 the original author or authors., + Assert.hasLength(servletName, "getServletName() must not return null or empty");, + Assert.notNull(applicationContext, "createApplicationContext() must not return null");, +
[+++ b/spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, + * Copyright 2002-2012 the original author or authors., + * When an {@link Environment} is being used by an {@code ApplicationContext}, it is, + * important that any such {@code PropertySource} manipulations be performed, + * <em>before</em> the context's {@link, + * org.springframework.context.support.AbstractApplicationContext#refresh() refresh()}, + * method is called. This ensures that all property sources are available during the, + * container bootstrap process, including use by {@linkplain, + * org.springframework.context.support.PropertySourcesPlaceholderConfigurer property, + * placeholder configurers}., +++ b/spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, + * Copyright 2002-2012 the original author or authors., + * When an {@link Environment} is being used
[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, + attrValue = sockJsElement.getAttribute("suppress-cors");, + if (!attrValue.isEmpty()) {, + sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue));, + }, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, + attrValue = sockJsElement.getAttribute("suppress-cors");, + if (!attrValue.isEmpty()) {, + sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue));, + }, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/SockJsServiceRegistration.java, + private Boolean suppressCors;, +, + * This option can be used to disable automatic addition of CORS headers for, + * SockJS requests., + * <p>The default value is "false"., + * @since 4.1.2, + */, + public SockJsServiceRegistration setSupressCors(boolean suppressCors) {, + this.suppressCors = suppressCors;, + return this;, + }, +, + /**, + if (this.suppressCors != null) {, + service.setSuppressCors(this.suppressCors);, + }, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java,
[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;, + private TypeResolverBuilder<?> defaultTyping;, +, + * Specify a {@link TypeResolverBuilder} to use for Jackson's default typing., + * @since 4.2.2, + */, + public Jackson2ObjectMapperBuilder defaultTyping(TypeResolverBuilder<?> typeResolverBuilder) {, + this.defaultTyping = typeResolverBuilder;, + return this;, + }, +, + /**, +, + if (this.defaultTyping != null) {, + objectMapper.setDefaultTyping(this.defaultTyping);, + }, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;, + private TypeResolverBuilder<?> defaultTyping;, +, + * Specify a {@link TypeResolverBuilder} to use for Jackson's default typing., + * @since 4.2.2, + */, + public Jackson2ObjectMapperBuilder defaultTyping(TypeResolverBuilder<?> typeResolverBuilder) {, + this.defaultTyping = typeResolverBuilder;, + return this;, + },
[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJWeaverMessageHandler.java, + private static final Log logger = LogFactory.getLog("AspectJ Weaver");, + if (logger.isDebugEnabled()) {, + logger.debug(makeMessageFor(message));, + else if (messageKind == IMessage.INFO || messageKind == IMessage.WEAVEINFO) {, + if (logger.isInfoEnabled()) {, + logger.info(makeMessageFor(message));, + if (logger.isWarnEnabled()) {, + logger.warn(makeMessageFor(message));, + if (logger.isErrorEnabled()) {, + logger.error(makeMessageFor(message));, + if (logger.isFatalEnabled()) {, + logger.fatal(makeMessageFor(message));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJWeaverMessageHandler.java, + private static final Log logger = LogFactory.getLog("AspectJ Weaver");, + if (logger.isDebugEnabled()) {, + logger.debug(makeMessageFor(message));, + else if (messageKind == IMessage.INFO || messageKind == IMessage.WEAVEINFO) {, + if (logger.isInfoEnabled()) {, + logger.info(makeMessageFor(message));, + if (logger.isWarnEnabled()) {, + logger.warn(makeMessageFor(message));, + if (logger.isErrorEnabled()) {, + logger.error(makeMessageFor(message));, +
[+++ b/spring-core/src/main/java/org/springframework/core/io/ResourceRegion.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, + * Return the configured {@link JmsTemplate}., + */, + public JmsTemplate getJmsTemplate() {, + return jmsTemplate;, + }, +, + /**, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, + * Return the configured {@link JmsTemplate}., + */, + public JmsTemplate getJmsTemplate() {, + return jmsTemplate;, + }, +, + /**, +++ b/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java, + public void validateJmsTemplate() {, + assertSame(this.jmsTemplate, messagingTemplate.getJmsTemplate());, + }, +, + @Test]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/gradle.properties, +version=5.0.1.BUILD-SNAPSHOT]
[+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2017 the original author or authors., + return clazz.getTypeName();, + return clazz.getTypeName();, + (typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2017 the original author or authors., + return clazz.getTypeName();, + return clazz.getTypeName();, + (typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FormatHelper.java, + * Copyright 2002-2017 the original author or authors., + return clazz.getTypeName();, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2017 the original author or authors., + return clazz.getTypeName();, + return clazz.getTypeName();, + (typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FormatHelper.java, + * Copyright 2002-2017 the original author or authors., + return clazz.getTypeName();, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/support/ReflectionHelperTests.java, + * Copyright 2002-2017 the original
[+++ b/src/reference/docbook/oxm.xml, + <para><link linkend="oxm-castor-xsd"><literal>castor-marshaller</literal></link></para>, + </listitem>, + <listitem>, + <section xml:id="oxm-castor-xsd">, + <title>XML Schema-based Configuration</title>, + <para>, + The <literal>castor-marshaller</literal> tag configures a, + <classname>org.springframework.oxm.castor.CastorMarshaller</classname>., + Here is an example:, + </para>, +, + <programlisting language="xml">, + <![CDATA[<oxm:castor-marshaller id="marshaller" mapping-location="classpath:org/springframework/oxm/castor/mapping.xml"/>]]></programlisting>, +, + <para>, + The marshaller instance can be configured in two ways, by specifying either the location of, + a mapping file (through the <property>mapping-location</property> property), or by, + identifying Java POJOs (through the <property>target-class</property> or, + <property>target-package</property> properties) for which there exist corresponding, + XML descriptor classes. The latter way is usually used in conjunction with
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.web.method.annotation.InitBinderDataBinderFactory;, + * Template method to create a new InitBinderDataBinderFactory instance., + * @return the InitBinderDataBinderFactory instance to use, + protected InitBinderDataBinderFactory createDataBinderFactory(List<InvocableHandlerMethod> binderMethods)]
[+++ b/spring-framework-reference/src/beans.xml, + class. If a default no-arg constructor is found, the, +++ b/spring-framework-reference/src/beans.xml, + class. If a default no-arg constructor is found, the, +++ b/spring-framework-reference/src/dtd.xml, + If a default no-arg constructor is found, "byType" gets applied., +++ b/spring-framework-reference/src/beans.xml, + class. If a default no-arg constructor is found, the, +++ b/spring-framework-reference/src/dtd.xml, + If a default no-arg constructor is found, "byType" gets applied., +++ b/spring-framework-reference/src/remoting.xml, + <para>To create an instance of <classname>RestTemplate</classname> you can, + simply call the default no-arg constructor. This will use standard Java]
[+++ b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, + BeanDefinitionParserDelegate delegate = new BeanDefinitionParserDelegate(readerContext);, +++ b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, + BeanDefinitionParserDelegate delegate = new BeanDefinitionParserDelegate(readerContext);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionDocumentReader.java, + * Copyright 2002-2014 the original author or authors., + * @deprecated in favor of {@link XmlReaderContext#getEnvironment()}, + @Deprecated, +++ b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, + BeanDefinitionParserDelegate delegate = new BeanDefinitionParserDelegate(readerContext);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionDocumentReader.java, + * Copyright 2002-2014 the original author or authors., + * @deprecated in favor of {@link XmlReaderContext#getEnvironment()}, + @Deprecated, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, + * Create a new BeanDefinitionParserDelegate associated with the supplied, + * {@link XmlReaderContext}., + public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {, + * Create a new BeanDefinitionParserDelegate associated with the supplied, + *
[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/JsonPathResultMatchers.java, + return result -> jsonPathHelper.assertValue(getContent(result), matcher);, + return result -> jsonPathHelper.assertValue(getContent(result), matcher, targetType);, + return result -> jsonPathHelper.exists(getContent(result));, + return result -> jsonPathHelper.doesNotExist(getContent(result));, + return result -> jsonPathHelper.assertValueIsEmpty(getContent(result));, + return result -> jsonPathHelper.assertValueIsNotEmpty(getContent(result));, + return result -> jsonPathHelper.hasJsonPath(getContent(result));, + return result -> jsonPathHelper.doesNotHaveJsonPath(getContent(result));, + return result -> jsonPathHelper.assertValueIsString(getContent(result));, + return result -> jsonPathHelper.assertValueIsBoolean(getContent(result));, + return result -> jsonPathHelper.assertValueIsNumber(getContent(result));, + return result -> jsonPathHelper.assertValueIsArray(getContent(result));, + return result -> jsonPathHelper.assertValueIsMap(getContent(result));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/JsonPathResultMatchers.java, + return result -> jsonPathHelper.assertValue(getContent(result), matcher);, + return result -> jsonPathHelper.assertValue(getContent(result), matcher, targetType);, + return result -> jsonPathHelper.exists(getContent(result));, + return result -> jsonPathHelper.doesNotExist(getContent(result));, + return result ->
[+++ b/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java, + Assert.state(props.size() == 1, () -> "Failed to load exactly one test environment property from [" + pair + "]");]
[+++ b/build.gradle, + // pick up RmiInvocationWrapperRTD.xml in src/main, + sourceSets.main.resources.srcDirs += "src/main/java", +, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support currently, + optional("org.testng:testng:6.8.5"), + def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m", +++ b/build.gradle, + // pick up RmiInvocationWrapperRTD.xml in src/main, + sourceSets.main.resources.srcDirs += "src/main/java", +, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support currently, + optional("org.testng:testng:6.8.5"), + def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m", +++ b/gradlew, +GRADLE_OPTS="-XX:MaxMetaspaceSize=1024m -Xmx1024m $GRADLE_OPTS", +++ b/build.gradle, + // pick up RmiInvocationWrapperRTD.xml in src/main, + sourceSets.main.resources.srcDirs += "src/main/java", +, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support currently, + optional("org.testng:testng:6.8.5"), + def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m", +++ b/gradlew, +GRADLE_OPTS="-XX:MaxMetaspaceSize=1024m -Xmx1024m
[+++ b/build-spring-framework/resources/changelog.txt, +Changes in version 3.0.5 (2010-10-20), +* AbstractJasperReportsView only sets locale model attributes if not present already]
[+++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletRequestAttributes.java, + if (oldValue == newValue && !isImmutableSessionAttribute(name, newValue)) {, + * Determine whether the given value is to be considered as an immutable session, + * attribute, that is, doesn't have to be re-set via {@code session.setAttribute}, + * since its value cannot meaningfully change internally., + * <p>The default implementation returns {@code true} for {@code String},, + * {@code Character}, {@code Boolean} and {@code Number} values., + * @param name the name of the attribute, + * @param value the corresponding value to check, + * @return {@code true} if the value is to be considered
[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.java, + * Copyright 2002-2013 the original author or authors., + if (isEligibleBean(name)) {, + if (this.beanFactory.isCurrentlyInCreation(name)) {, + if (logger.isDebugEnabled()) {, + logger.debug("Skipping currently created advisor '" + name + "'");, + }, + }, + else {, + logger.debug("Skipping advisor '" + name +, + "' with dependency on currently created bean: " + ex.getMessage());, + }]
[+++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/MergedSqlConfig.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/LazyInitTargetSourceCreator.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/LazyInitTargetSourceCreator.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/QuickTargetSourceCreator.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/LazyInitTargetSourceCreator.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/QuickTargetSourceCreator.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/LazyInitTargetSourceCreator.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/QuickTargetSourceCreator.java, + * https://www.apache.org/licenses/LICENSE-2.0, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, + *
[+++ b/build.gradle, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support currently, +++ b/build.gradle, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support currently, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultDocumentLoader.java, +++ b/build.gradle, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support currently, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultDocumentLoader.java, +++ /dev/null, +++ b/build.gradle, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support currently, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultDocumentLoader.java, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support currently, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultDocumentLoader.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support currently, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultDocumentLoader.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support
[+++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws, +.idea, +out, +test-output, +atlassian-ide-plugin.xml, +.gradletasknamecache, +++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws,
[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, + return getAutowireCandidateResolver().isRequired(descriptor);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, + return getAutowireCandidateResolver().isRequired(descriptor);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * value cannot be retrieved due to an {@link AnnotationConfigurationException},, + * in which case such an exception will be rethrown, + * value cannot be retrieved due to an {@link AnnotationConfigurationException},, + * in which case such an exception will be rethrown, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, + return getAutowireCandidateResolver().isRequired(descriptor);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * value cannot be retrieved due to an {@link AnnotationConfigurationException},, + * in which case such an exception will be rethrown, + * value cannot be retrieved due to an {@link AnnotationConfigurationException},, + * in
[+++ b/spring-jms/src/main/java/org/springframework/jms/remoting/JmsInvokerClientInterceptor.java, + return new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex);]
[+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + private static final boolean shouldIntrospectorIgnoreBeaninfoClasses =, + SpringProperties.getFlag(IGNORE_BEANINFO_PROPERTY_NAME);, + private static final Log logger = LogFactory.getLog(CachedIntrospectionResults.class);, +, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + private static final boolean shouldIntrospectorIgnoreBeaninfoClasses =, + SpringProperties.getFlag(IGNORE_BEANINFO_PROPERTY_NAME);, + private static final Log logger = LogFactory.getLog(CachedIntrospectionResults.class);, +, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, + "Initialized %s with PropertySources %s", getClass().getSimpleName(), this.propertySources));]
[+++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, + private DateFormatter dateFormatter;, + registry.addFormatterForFieldAnnotation(new DateTimeFormatAnnotationFormatterFactory());, +, + // In order to retain back compatibility we only register Date/Calendar, + // types when a user defined formatter is specified (see SPR-10105), + if(this.dateFormatter != null) {, + }, + * Set the date formatter to register. If not specified no formatter is registered., + * This method can be used if global formatter configuration is required., +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, + private DateFormatter dateFormatter;, + registry.addFormatterForFieldAnnotation(new DateTimeFormatAnnotationFormatterFactory());, +, + // In order to retain back compatibility we only register Date/Calendar, + // types when a user defined formatter
[+++ b/src/test/java/com/foo/Component.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/webdriver/WebConnectionHtmlUnitDriver.java, + * Modify the supplied {@link WebClient} and retain a reference to it, + * so that its {@link WebConnection} is {@linkplain #getWebConnection, + * accessible} for later use., + * <p>Delegates to {@link HtmlUnitDriver#modifyWebClient(WebClient)}, + * for default behavior and to {@link #modifyWebClientInternal(WebClient)}, + * for further customization., + * @see HtmlUnitDriver#modifyWebClient(WebClient), + * @see #modifyWebClientInternal(WebClient), + this.webClient = modifyWebClientInternal(this.webClient);, + * Modify the supplied {@link WebClient}., + * that the {@link HtmlUnitDriver} uses., + * @param webClient the client to modify, + * @return the modified client, + protected WebClient modifyWebClientInternal(WebClient webClient) {, + return webClient;]
[+++ b/org.springframework.integration-tests/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.apache.commons/com.springsource.org.apache.commons.pool/1.5.3/com.springsource.org.apache.commons.pool-1.5.3.jar" sourcepath="/IVY_CACHE/org.apache.commons/com.springsource.org.apache.commons.pool/1.5.3/com.springsource.org.apache.commons.pool-sources-1.5.3.jar"/>
[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketExtension.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ /dev/null, +++ /dev/null, +++ b/CODE_OF_CONDUCT.adoc, +http://contributor-covenant.org[Contributor Covenant], version 1.3.0, available at, +http://contributor-covenant.org/version/1/3/0/[contributor-covenant.org/version/1/3/0/], +++ /dev/null, +++ b/CODE_OF_CONDUCT.adoc, +http://contributor-covenant.org[Contributor Covenant], version 1.3.0, available at, +http://contributor-covenant.org/version/1/3/0/[contributor-covenant.org/version/1/3/0/], +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a ticket in the [Github issue tracker](https://github.com/spring-projects/spring-framework/issues)., +[Rewriting History section of Pro Git](http://git-scm.com/book/en/Git-Tools-Rewriting-History), +[Commit Guidelines section of Pro Git](http://git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project#Commit-Guidelines), +[Asciidoctor](http://asciidoctor.org/) format. For trivial changes, you may be able to browse,, +[Editing AsciiDoc with Live Preview](http://asciidoctor.org/docs/editing-asciidoc-with-live-preview/)., +[System Monitor](http://asciidoctor.org/docs/editing-asciidoc-with-live-preview/#using-a-system-monitor), +++ /dev/null, +++ b/CODE_OF_CONDUCT.adoc, +http://contributor-covenant.org[Contributor Covenant], version 1.3.0, available at, +http://contributor-covenant.org/version/1/3/0/[contributor-covenant.org/version/1/3/0/], +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a
[+++ b/spring-context/src/main/java/org/springframework/scripting/groovy/GroovyScriptEvaluator.java, + * Copyright 2002-2016 the original author or authors., +import org.codehaus.groovy.control.CompilerConfiguration;, +import org.codehaus.groovy.control.customizers.CompilationCustomizer;, + private CompilerConfiguration compilerConfiguration = new CompilerConfiguration();, +, + /**, + * Set a custom compiler configuration for this evaluator., + * @since 4.3.3, + * @see #setCompilationCustomizers, + */, + public void setCompilerConfiguration(CompilerConfiguration compilerConfiguration) {, + this.compilerConfiguration =, + (compilerConfiguration != null ? compilerConfiguration : new CompilerConfiguration());, + }, +, + /**, + * Return this evaluator's compiler configuration (never {@code null})., + * @since 4.3.3, + * @see #setCompilerConfiguration, + */, + public CompilerConfiguration getCompilerConfiguration() {, + return this.compilerConfiguration;, + }, +,
[+++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, + * Copyright 2002-2013 the original author or authors., +, + Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses =, + mergedConfig.getContextInitializerClasses();, + if (initializerClasses.isEmpty()) {, + AnnotationAwareOrderComparator.sort(initializerInstances);]
[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +, + private static final String CONFIGURATION_CLASS_FULL = "full";, + private static final String CONFIGURATION_CLASS_LITE = "lite";, + private static final String CONFIGURATION_CLASS_ATTRIBUTE =, +, + }, + else {, + }, + catch (IOException ex) {, + // has this already been overridden (e.g. via XML)?, +, + public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {, + * Determine whether the given bean definition indicates a full @Configuration class., + */, + public static boolean isFullConfigurationClass(BeanDefinition beanDef) {, + return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE));, + }, +, +, + /**, + private static class ConfigurationClassBeanDefinition extends RootBeanDefinition implements AnnotatedBeanDefinition
[+++ b/gradle.properties, +version=3.2.1.BUILD-SNAPSHOT]
[+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectUtils.java, +import java.lang.reflect.Method;
[+++ b/spring-core/src/main/java/org/springframework/core/env/MutablePropertySources.java, + * Copyright 2002-2014 the original author or authors., + * Create a new {@link MutablePropertySources} object and inherit the given logger,, + * Add the given property source object with precedence immediately lower, + * Remove the given property source if it is present.]
[+++ b/spring-aop/src/main/java/org/springframework/aop/config/SimpleBeanFactoryAwareAspectInstanceFactory.java, +++ b/spring-aop/src/main/java/org/springframework/aop/config/SimpleBeanFactoryAwareAspectInstanceFactory.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java, + private String insertString = "";, + private int[] insertTypes = new int[0];, +++ b/spring-aop/src/main/java/org/springframework/aop/config/SimpleBeanFactoryAwareAspectInstanceFactory.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java, + private String insertString = "";, + private int[] insertTypes = new int[0];, +++ b/spring-web/src/main/java/org/springframework/http/client/support/AsyncHttpAccessor.java, + * such as the {@link org.springframework.http.client.AsyncClientHttpRequestFactory}, + * to operate on., +++ b/spring-aop/src/main/java/org/springframework/aop/config/SimpleBeanFactoryAwareAspectInstanceFactory.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java, + private String insertString = "";, + private int[] insertTypes = new int[0];, +++ b/spring-web/src/main/java/org/springframework/http/client/support/AsyncHttpAccessor.java, + * such as the {@link org.springframework.http.client.AsyncClientHttpRequestFactory}, + * to operate on., +++ b/spring-web/src/main/java/org/springframework/web/context/support/LiveBeansViewServlet.java, + Assert.state(this.liveBeansView != null, "No LiveBeansView available");, +++ b/spring-aop/src/main/java/org/springframework/aop/config/SimpleBeanFactoryAwareAspectInstanceFactory.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java, + private String insertString =
[+++ b/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java, +import java.nio.file.AccessDeniedException;, + try {, + catch (AccessDeniedException ex) {, + // on Windows, + }, + }, +++ b/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java, +import java.nio.file.AccessDeniedException;, + try {, + catch (AccessDeniedException ex) {, + // on Windows, + }, + }, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/resource/ResourceWebHandlerTests.java, +, + // The following tests fail with a MalformedURLException on Windows, + // testInvalidPath(location, "/" + secretPath);, + // testInvalidPath(location, "/ " + secretPath);]
[+++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a ticket in the [Github issue tracker](https://github.com/spring-projects/spring-framework/issues)., +++ /dev/null, +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a ticket in the [Github issue tracker](https://github.com/spring-projects/spring-framework/issues)., +++ b/build.gradle, + id "org.jetbrains.kotlin.jvm" version "1.2.71" apply false, + junit5Version = "5.3.2", + kotlinVersion = "1.2.71", + apiVersion = "1.1", + languageVersion = "1.1", + testCompile("com.nhaarman:mockito-kotlin:1.6.0") {, + exclude module: "kotlin-stdlib", + exclude module: "kotlin-reflect", + exclude module: "mockito-core", + }, +++ /dev/null, +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractMessageChannel.java, +public abstract class AbstractMessageChannel implements MessageChannel, BeanNameAware, InterceptableChannel {, + @Override, + @Override, + @Override, + * {@inheritDoc}, + * <p>The returned list is read-only., + @Override, + @Override, + @Override, + public ChannelInterceptor removeInterceptor(int index) {, + return this.interceptors.remove(index);, + }, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractMessageChannel.java, +public abstract class AbstractMessageChannel implements MessageChannel, BeanNameAware, InterceptableChannel {, + @Override, + @Override, + @Override, + * {@inheritDoc}, + * <p>The returned list is read-only., + @Override, + @Override, + @Override, + public ChannelInterceptor removeInterceptor(int index) {, + return this.interceptors.remove(index);, + }, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/InterceptableChannel.java, +/*, + * Copyright 2002-2014 the original author or
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-framework-reference/src/new-in-3.xml, + <para>Refer to the section on <link linkend="mvc">MVC</link> and, + <link linkend="rest-resttemplate">the RestTemplate</link>]
[+++ b/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java]
[+++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, + IGNORED_INTERFACES = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(, + Serializable.class, Externalizable.class, Cloneable.class, Comparable.class)));, + * Determine the conventional variable name for the supplied {@code Object}, + * based on its concrete type. The convention used is to return the, + * un-capitalized short name of the {@code Class}, according to JavaBeans, + * property naming rules., + *, + * <p>For example:<br>, + * {@code com.myapp.Product} becomes {@code "product"}<br>, + * {@code com.myapp.MyProduct} becomes {@code "myProduct"}<br>, + * {@code com.myapp.UKProduct} becomes {@code "UKProduct"}<br>, + *, + * <p>For arrays the pluralized version of the array component type is used., +
[+++ b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.jdbc.core.SqlParameterValue;, + * Delete rows from the given table, using the provided {@code WHERE} clause., + * <p>If the provided {@code WHERE} clause contains text, it will be prefixed, + * with {@code " WHERE "} and then appended to the generated {@code DELETE}, + * statement. For example, if the provided table name is {@code "person"} and, + * the provided where clause is {@code "name = 'Bob' and age > 25"}, the, + * resulting SQL statement to execute will be, + * {@code "DELETE
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/org.springframework.agent/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, + <classpathentry kind="src" path="src/main/java"/>, + <classpathentry kind="src" path="src/main/resources"/>, + <classpathentry kind="src" output="target/test-classes" path="src/test/java"/>, + <classpathentry kind="src" output="target/test-classes" path="src/test/resources"/>, + <classpathentry kind="lib" path="target/artifacts/org.springframework.agent-sources.jar"/>, + <classpathentry kind="lib" path="target/artifacts/org.springframework.agent.jar"/>, + <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>, + <classpathentry kind="output" path="target/classes"/>, +</classpath>, +++ b/org.springframework.agent/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, + <classpathentry kind="src" path="src/main/java"/>, + <classpathentry kind="src" path="src/main/resources"/>, + <classpathentry kind="src" output="target/test-classes" path="src/test/java"/>, + <classpathentry kind="src" output="target/test-classes" path="src/test/resources"/>, + <classpathentry kind="lib" path="target/artifacts/org.springframework.agent-sources.jar"/>, + <classpathentry kind="lib" path="target/artifacts/org.springframework.agent.jar"/>, + <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>, + <classpathentry kind="output" path="target/classes"/>, +</classpath>, +++ b/org.springframework.agent/.project, +<?xml version="1.0" encoding="UTF-8"?>, +<projectDescription>, + <name>org.springframework.agent</name>, + <comment></comment>, + <projects>, + </projects>, + <buildSpec>, +
[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/HttpSessionHandshakeInterceptor.java, + private boolean createSession;, +, + /**, + * Whether to allow the HTTP session to be created while accessing it., + * <p>By default set to {@code false}., + * @see javax.servlet.http.HttpServletRequest#getSession(boolean), + */, + public void setCreateSession(boolean createSession) {, + this.createSession = createSession;, + }, +, + /**, + * Whether the HTTP session is allowed to be created., + */, + public boolean isCreateSession() {, + return this.createSession;, + }, +, + return serverRequest.getServletRequest().getSession(isCreateSession());]
[+++ b/build-spring-framework/build.xml, + <pathelement location="../org.springframework.web.struts"/>
[+++ b/spring-jdbc/src/main/resources/org/springframework/jdbc/support/sql-error-codes.xml, + <value>156,170,207,208,209</value>, +++ b/spring-jdbc/src/main/resources/org/springframework/jdbc/support/sql-error-codes.xml, + <value>156,170,207,208,209</value>, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodesFactoryTests.java, +import org.easymock.MockControl;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, + private void assertIsSQLServer(SQLErrorCodes sec) {, + assertThat(sec.getDatabaseProductName(), equalTo("Microsoft SQL Server"));, +, + assertTrue(sec.getBadSqlGrammarCodes().length > 0);, +, + assertTrue(Arrays.binarySearch(sec.getBadSqlGrammarCodes(), "156") >= 0);, + assertTrue(Arrays.binarySearch(sec.getBadSqlGrammarCodes(), "170") >= 0);, + assertTrue(Arrays.binarySearch(sec.getBadSqlGrammarCodes(), "207") >= 0);, + assertTrue(Arrays.binarySearch(sec.getBadSqlGrammarCodes(), "208") >= 0);, + assertTrue(Arrays.binarySearch(sec.getBadSqlGrammarCodes(), "209") >= 0);, + assertFalse(Arrays.binarySearch(sec.getBadSqlGrammarCodes(), "9xx42") >= 0);, +, + assertTrue(sec.getPermissionDeniedCodes().length > 0);, + assertTrue(Arrays.binarySearch(sec.getPermissionDeniedCodes(), "229") >= 0);, +, + assertTrue(sec.getDuplicateKeyCodes().length > 0);, + assertTrue(Arrays.binarySearch(sec.getDuplicateKeyCodes(), "2601") >= 0);, + assertTrue(Arrays.binarySearch(sec.getDuplicateKeyCodes(), "2627") >= 0);, +, + assertTrue(sec.getDataIntegrityViolationCodes().length > 0);, + assertTrue(Arrays.binarySearch(sec.getDataIntegrityViolationCodes(), "544")
[+++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, + uri = getSanitizedPath(uri);, +++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, + uri = getSanitizedPath(uri);, +++ b/spring-web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java, +, + // SPR-13455, +, + request.setServletPath("/foo/1");, + request.setRequestURI("/foo/;test/1");, +, + assertEquals("/foo/1", helper.getRequestUri(request));, + //SPR-12372 & SPR-13455, + public void removeDuplicateSlashesInPath() throws Exception {, + assertEquals("/foo/bar/", helper.getLookupPathForRequest(request));, + assertEquals("/foo/bar/", helper.getLookupPathForRequest(request));]
[+++ b/spring-context/src/main/java/org/springframework/context/annotation/PropertySource.java, + * Copyright 2002-2015 the original author or authors., + * the "Working with externalized values" section of @{@link Configuration}'s javadoc and, + * "a note on BeanFactoryPostProcessor-returning @Bean methods" of @{@link Bean}'s javadoc, + * javadocs for details., + * <p>Resource location wildcards (e.g. *&#42;/*.properties) are not permitted;, + * each location must evaluate to exactly one {@code .properties} resource., + * registered with the {@code Environment}. See {@linkplain PropertySource above}, + * for examples., +++ b/spring-context/src/main/java/org/springframework/context/annotation/PropertySource.java, + * Copyright 2002-2015 the original author or authors., + * the "Working with externalized values" section of @{@link
[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2015 the original author or authors., + protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException {, + RootBeanDefinition mbdToUse = mbd;, +, + // Make sure bean class is actually resolved at this point, and, + // clone the bean definition in case of a dynamically resolved Class, + // which cannot be stored in the shared merged bean definition., + Class<?> resolvedClass = resolveBeanClass(mbd, beanName);, + if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {, + mbdToUse = new RootBeanDefinition(mbd);, + mbdToUse.setBeanClass(resolvedClass);, + }, + mbdToUse.prepareMethodOverrides();, + throw new
[+++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, + Assert.hasLength(type, "'type' must not be empty");, + Assert.hasLength(subtype, "'subtype' must not be empty");, + Assert.hasLength(attribute, "'attribute' must not be empty");, + Assert.hasLength(value, "'value' must not be empty");, + String charset = getParameter(PARAM_CHARSET);, + return (charset != null ? Charset.forName(unquote(charset)) : null);, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, + Assert.hasLength(type, "'type' must not be empty");, + Assert.hasLength(subtype, "'subtype' must not be empty");, + Assert.hasLength(attribute, "'attribute' must not be empty");, + Assert.hasLength(value, "'value' must not be empty");, + String charset = getParameter(PARAM_CHARSET);, + return (charset != null ? Charset.forName(unquote(charset)) : null);, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, + * Comparator used by {@link #sortBySpecificity(List)}., + */,
[+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/BeanValidationPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.framework.AopProxyUtils;, + Object objectToValidate = AopProxyUtils.getSingletonTarget(bean);, + if (objectToValidate == null) {, + objectToValidate = bean;, + }, + Set<ConstraintViolation<Object>> result = this.validator.validate(objectToValidate);, +, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/BeanValidationPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.framework.AopProxyUtils;, + Object objectToValidate = AopProxyUtils.getSingletonTarget(bean);, + if (objectToValidate == null) {, + objectToValidate = bean;, + }, + Set<ConstraintViolation<Object>> result = this.validator.validate(objectToValidate);, +, +++ b/spring-context/src/test/java/org/springframework/validation/beanvalidation/BeanValidationPostProcessorTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;, +import org.springframework.scheduling.annotation.Async;, +import org.springframework.scheduling.annotation.AsyncAnnotationAdvisor;, + public void testNotNullConstraintAfterInitializationWithProxy() {, + GenericApplicationContext ac = new
[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import org.springframework.util.StringUtils;, + private boolean createXmlMapper = false;, + private boolean findModulesViaServiceLoader = false;, + * Override the default {@link Locale} to use for formatting., + * Default value used is {@link Locale#getDefault()}., + * @param localeString the locale ID as a String representation, + * @since 4.1.5, + */, + public Jackson2ObjectMapperBuilder locale(String localeString) {, + this.locale = StringUtils.parseLocaleString(localeString);, + return this;, + }, +, + /**, + * @param timeZoneString the zone ID as a String representation, + public Jackson2ObjectMapperBuilder timeZone(String timeZoneString) {, + this.timeZone = StringUtils.parseTimeZoneString(timeZoneString);, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import org.springframework.util.StringUtils;, + private boolean
[+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + /** Stores the BeanInfoFactory instances */, + private static List<BeanInfoFactory> beanInfoFactories =, + SpringFactoriesLoader.loadFactories(BeanInfoFactory.class, CachedIntrospectionResults.class.getClassLoader());, +, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + /** Stores the BeanInfoFactory instances */, + private static List<BeanInfoFactory> beanInfoFactories =, + SpringFactoriesLoader.loadFactories(BeanInfoFactory.class, CachedIntrospectionResults.class.getClassLoader());, +, +++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, +import org.springframework.core.OrderComparator;, + * General purpose factory loading mechanism for internal use within the framework., + * from "META-INF/spring.factories" files. The file should be in {@link Properties} format,, + * where the key is the fully qualified interface or abstract class name, and the value, + * is a comma-separated list of implementation class names. For instance:, + *
[+++ b/spring-framework-reference/src/transaction.xml, + reasons to use the Spring Framework. The Spring Framework provides a, + consistent abstraction for transaction management that delivers the, + following benefits:</para>, + <para>The following sections describe the Spring Framework's transaction, + <para><link linkend="transaction-motivation">Advantages of the Spring, + <emphasis>why</emphasis> you would use the Spring Framework's, + transaction abstraction instead of EJB Container-Managed Transactions, + (CMT) or choosing to drive transactions through a proprietary API such, + as Hibernate.</para>, + <title>Advantages of the Spring Framework's transaction support model<!--Renamed section to make it more to the point.--></title>, + next two sections, followed by a discussion of how
[+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import reactor.io.netty.http.HttpException;, +import reactor.io.netty.http.HttpInbound;, + * @see reactor.io.netty.http.HttpClient, + httpClientRequest -> requestCallback, + .apply(new ReactorClientHttpRequest(method, uri, httpClientRequest))), + .cast(HttpInbound.class), + .otherwise(HttpException.class, exc -> Mono.just(exc.getChannel())), +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import reactor.io.netty.http.HttpException;, +import reactor.io.netty.http.HttpInbound;, + * @see reactor.io.netty.http.HttpClient, + httpClientRequest -> requestCallback, + .apply(new ReactorClientHttpRequest(method, uri, httpClientRequest))), + .cast(HttpInbound.class), + .otherwise(HttpException.class, exc -> Mono.just(exc.getChannel())), +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, +import reactor.io.netty.http.HttpInbound;, + * @since 5.0, + private final HttpInbound response;, + public ReactorClientHttpResponse(HttpInbound response) {, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import reactor.io.netty.http.HttpException;, +import reactor.io.netty.http.HttpInbound;, + * @see reactor.io.netty.http.HttpClient, + httpClientRequest -> requestCallback, + .apply(new ReactorClientHttpRequest(method, uri, httpClientRequest))), + .cast(HttpInbound.class), + .otherwise(HttpException.class, exc -> Mono.just(exc.getChannel())), +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, +import
[+++ b/spring-context/src/test/java/org/springframework/jmx/AbstractMBeanServerTests.java, + * run only if {@link TestGroup#JMXMP} is enabled., + *, + * <p>If you wish to run these tests, follow the instructions in the TestGroup class to, + * enable JMXMP tests (i.e., set the following Java system property:, + * {@code -DtestGroups=jmxmp})., + *, + * <p>If you run into the <em>"Unsupported protocol: jmxmp"</em> error, you will need to, + * download the <a href="http://www.oracle.com/technetwork/java/javase/tech/download-jsp-141676.html">JMX, + * Remote API 1.0.1_04 Reference Implementation</a> from Oracle and extract, + *, + * <p>See also:, + * <ul>, + * <li>, + * <li><a href="https://jira.spring.io/browse/SPR-8093">SPR-8093</a></li>, + * <li><a
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, + * Copyright 2002-2019 the original author or authors., + * messages to and from remote clients to several message handlers such as the, + * following., + *, + * <p>{@link #brokerChannel()} delivers messages from within the application to the, + * <p>Subclasses are responsible for the parts of the configuration that feed messages, + * {@code false} if no more converters should be added, + * Return an {@link org.springframework.validation.Validator} instance for, + * validating {@code @Payload} method arguments., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, + * Copyright 2002-2019 the original author or authors., + * messages to and
[+++ b/spring-context/src/main/java/org/springframework/context/i18n/LocaleContextHolder.java, + * @author Nicholas Williams, + * @param localeContext the current LocaleContext,, + * or {@code null} to reset the thread-bound context, + * Associate the given Locale with the current thread,, + * preserving any TimeZone that may have been set already., + * the locale part of thread-bound context, + * @see #setTimeZone(TimeZone), + * @see SimpleLocaleContext#SimpleLocaleContext(Locale), + * Associate the given Locale with the current thread,, + * preserving any TimeZone that may have been set already., + * the locale part of thread-bound context, + * @see #setTimeZone(TimeZone, boolean), + * @see SimpleLocaleContext#SimpleLocaleContext(Locale),
[+++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java, + * <p>As of Spring Framework 5, this class supports JMS 2.0 {@code JMSContext}, + * calls and therefore requires the JMS 2.0 API to be present at runtime., + * It may nevertheless run against a JMS 1.1 driver (bound to the JMS 2.0 API), + * as long as no actual JMS 2.0 calls are triggered by the application's setup., + *, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java, + * <p>As of Spring Framework 5, this class supports JMS 2.0 {@code JMSContext}, + * calls and therefore requires the JMS 2.0 API to be present at runtime., + *
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java, + Collections.addAll(this.argumentResolvers, resolvers);, + * Whether the given {@linkplain MethodParameter method parameter} is, + * supported by any registered {@link HandlerMethodArgumentResolver}., + * Iterate over registered, + * {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}, + * and invoke the one that supports it., + * @throws IllegalStateException if no suitable, + * {@link HandlerMethodArgumentResolver} is found., + throw new IllegalStateException(, + "Unsupported parameter type [" + parameter.getParameterType().getName() + "]." +, + " supportsParameter should be called first.");, + * Find a registered {@link HandlerMethodArgumentResolver} that supports, + * the given method parameter., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java, + Collections.addAll(this.argumentResolvers, resolvers);, + * Whether
[+++ b/org.springframework.test/.classpath, + <classpathentry kind="var" path="IVY_CACHE/javax.portlet/com.springsource.javax.portlet/2.0.0/com.springsource.javax.portlet-2.0.0.jar"/>, +++ b/org.springframework.test/.classpath, + <classpathentry kind="var" path="IVY_CACHE/javax.portlet/com.springsource.javax.portlet/2.0.0/com.springsource.javax.portlet-2.0.0.jar"/>, +++ b/org.springframework.test/ivy.xml, + <dependency org="javax.portlet" name="com.springsource.javax.portlet" rev="2.0.0" conf="provided->compile"/>, +++ b/org.springframework.test/.classpath, + <classpathentry kind="var" path="IVY_CACHE/javax.portlet/com.springsource.javax.portlet/2.0.0/com.springsource.javax.portlet-2.0.0.jar"/>, +++ b/org.springframework.test/ivy.xml, + <dependency org="javax.portlet" name="com.springsource.javax.portlet" rev="2.0.0" conf="provided->compile"/>, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/package.html, +A comprehensive set of Servlet API 2.5 mock objects,, +++ b/org.springframework.test/.classpath, + <classpathentry kind="var" path="IVY_CACHE/javax.portlet/com.springsource.javax.portlet/2.0.0/com.springsource.javax.portlet-2.0.0.jar"/>, +++ b/org.springframework.test/ivy.xml, + <dependency org="javax.portlet" name="com.springsource.javax.portlet" rev="2.0.0" conf="provided->compile"/>, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/package.html, +A comprehensive set of Servlet API 2.5 mock objects,, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/portlet/MockActionRequest.java, + * Copyright 2002-2008 the original author or authors., +public class MockActionRequest extends MockClientDataRequest implements ActionRequest {, + * @see org.springframework.mock.web.portlet.MockPortalContext, + * @see org.springframework.mock.web.portlet.MockPortletContext, + *
[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java, + * Copyright 2002-2012 the original author or authors., +, + /**, + * Provide an {@link ErrorHandler} strategy., + */, +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java, + * Copyright 2002-2012 the original author or authors., +, + /**, + * Provide an {@link ErrorHandler} strategy., + */, +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, + * Copyright 2002-2012 the original author or authors., +++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java, + * Copyright 2002-2012 the original author or authors., +, + /**, + * Provide an {@link ErrorHandler} strategy., + */, +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, + * Copyright 2002-2012 the original author or authors., +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessorBean.java, + * Copyright
[+++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws, +.idea, +out, +test-output, +atlassian-ide-plugin.xml, +.gradletasknamecache, +++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws,
[+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java, + * Copyright 2002-2012 the original author or authors., + // To be on the safe side: explicitly delete the parts,, + // but only actual file parts (for Resin compatibility), + if (request.getFile(part.getName()) != null) {, + }]
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/ServletUriComponentsBuilder.java, + * A UriComponentsBuilder that extracts information from the HttpServletRequest., + String path = request.getContextPath();, + path = prependForwardedPrefix(request, path);, + builder.replacePath(path);, + String path = request.getRequestURI();, + path = prependForwardedPrefix(request, path);, + private static String prependForwardedPrefix(HttpServletRequest request, String path) {, + String prefix = request.getHeader("X-Forwarded-Prefix");, + if (StringUtils.hasText(prefix)) {, + path = prefix + path;, + }, + return path;, + }, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/ServletUriComponentsBuilder.java, + * A UriComponentsBuilder that extracts information from the HttpServletRequest., + String path = request.getContextPath();, + path = prependForwardedPrefix(request, path);, + builder.replacePath(path);, + String path = request.getRequestURI();, + path = prependForwardedPrefix(request,
[+++ b/spring-context/src/main/java/org/springframework/validation/MessageCodeFormatter.java, + * Copyright 2002-2018 the original author or authors., + * Build and return a message code consisting of the given fields,, + * usually delimited by {@link DefaultMessageCodesResolver#CODE_SEPARATOR}., +, +++ b/spring-context/src/main/java/org/springframework/validation/MessageCodeFormatter.java, + * Copyright 2002-2018 the original author or authors., + * Build and return a message code consisting of the given fields,, + * usually delimited by {@link DefaultMessageCodesResolver#CODE_SEPARATOR}., +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/BindStatus.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, + private final String[] errorCodes;, + private String[] errorMessages;, +, + @Nullable, + private List<? extends ObjectError> objectErrors;, +
[+++ b/org.springframework.jdbc/src/main/resources/org/springframework/jdbc/support/sql-error-codes.xml, + <value>-1035,-1218,-30080,-30081</value>]
[+++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws, +.idea, +out, +test-output, +atlassian-ide-plugin.xml, +.gradletasknamecache, +++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws,
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/GroovyMarkupBeanDefinitionParser.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/RouterFunctionMapping.java, + * Return the configured {@link RouterFunction}., + * <p><strong>Note:</strong> When router functions are detected from the, + * ApplicationContext, this method may return {@code null} if invoked, + * prior to {@link #afterPropertiesSet()}., + * @return the router function or {@code null}, + */, + @Nullable, + public RouterFunction<?> getRouterFunction() {, + return this.routerFunction;, + }, +, + /**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/RouterFunctionMapping.java, + * Return the configured {@link RouterFunction}., + * <p><strong>Note:</strong> When router functions are detected from the, + * ApplicationContext, this method may return {@code null} if invoked, + * prior to {@link #afterPropertiesSet()}., +
[+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + resource = (query != null ? resource.substring(0, resource.indexOf('?')) : resource);, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + resource = (query != null ? resource.substring(0, resource.indexOf('?')) : resource);, +++ b/spring-web/src/test/java/org/springframework/web/client/RestTemplateTests.java, + , + @Test, + public void ioExceptionWithEmptyQueryString() throws Exception {, + , + String scheme = "http"; , + String authority = "example.com";, + String path = "/resource";, + URI uri = new URI(scheme, authority, path, "", null); // http://example.com/resource?, + , + given(converter.canRead(String.class, null)).willReturn(true);, + MediaType mediaType = new MediaType("foo", "bar");, + given(converter.getSupportedMediaTypes()).willReturn(Collections.singletonList(mediaType));, + given(requestFactory.createRequest(uri, HttpMethod.GET)).willReturn(request);, + given(request.getHeaders()).willReturn(new HttpHeaders());, + given(request.execute()).willThrow(new IOException("Socket failure"));, +, + try {, + template.getForObject(uri,
[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + if (ConfigurationClassUtils.isConfigurationCandidate(memberClass.getMetadata()) &&, + !memberClass.getMetadata().getClassName().equals(configClass.getMetadata().getClassName())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + if (ConfigurationClassUtils.isConfigurationCandidate(memberClass.getMetadata()) &&, + !memberClass.getMetadata().getClassName().equals(configClass.getMetadata().getClassName())) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, +import org.springframework.context.annotation.componentscan.simple.ClassWithNestedComponents;, + ctx.getBean(ClassWithNestedComponents.NestedComponent.class);, + ctx.getBean(ClassWithNestedComponents.OtherNestedComponent.class);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + if (ConfigurationClassUtils.isConfigurationCandidate(memberClass.getMetadata()) &&, + !memberClass.getMetadata().getClassName().equals(configClass.getMetadata().getClassName())) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, +import org.springframework.context.annotation.componentscan.simple.ClassWithNestedComponents;, + ctx.getBean(ClassWithNestedComponents.NestedComponent.class);, + ctx.getBean(ClassWithNestedComponents.OtherNestedComponent.class);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/componentscan/simple/ClassWithNestedComponents.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, +
[+++ /dev/null, +++ /dev/null, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/statements/SpringFailOnTimeoutTests.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/AbstractClientHttpRequest.java, +import org.reactivestreams.Publisher;, + private final List<Supplier<? extends Publisher<Void>>> commitActions = new ArrayList<>(4);, + protected Mono<Void> doCommit(@Nullable Supplier<? extends Publisher<Void>> writeAction) {, + List<? extends Publisher<Void>> actions = this.commitActions.stream(), + return Mono.fromDirect(Flux.concat(actions));]
[+++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, + if (part instanceof PublisherEntity<?,?>) {, + PublisherPartBuilder<?, ?> builder = new PublisherPartBuilder<>((PublisherEntity<?, ?>) part);, + this.parts.add(name, builder);, + return builder;, + }, +, + PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, typeReference);, + public PublisherPartBuilder(HttpHeaders headers, P body, ParameterizedTypeReference<S> typeReference) {, + public PublisherPartBuilder(PublisherEntity<S, P> other) {, + super(other.getHeaders(), other.getBody());, + this.resolvableType = other.getResolvableType();, + }, +, +, +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, + if (part instanceof PublisherEntity<?,?>) {, + PublisherPartBuilder<?, ?> builder = new PublisherPartBuilder<>((PublisherEntity<?, ?>) part);, + this.parts.add(name, builder);, + return builder;, + }, +, + PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, typeReference);, + public PublisherPartBuilder(HttpHeaders
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java, + * Configure exception resolvers., + * <p>The given list starts out empty. If it is left empty, the framework, + * configures a default set of resolvers, see, + * {@link WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(List)}., + * Or if any exception resolvers are added to the list, then the application, + * effectively takes over and must provide, fully initialized, exception, + * resolvers., + * <p>Alternatively you can use, + * {@link #extendHandlerExceptionResolvers(List)} which allows you to extend, + * or modify the list of exception resolvers configured by default., + * @see #extendHandlerExceptionResolvers(List), + * @see WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(List),
[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, + * Copyright 2002-2018 the original author or authors., + private static final ThreadLocal<ResourceLoader> configTimeResourceLoaderHolder = new ThreadLocal<>();, + private static final ThreadLocal<Executor> configTimeTaskExecutorHolder = new ThreadLocal<>();, + private static final ThreadLocal<DataSource> configTimeDataSourceHolder = new ThreadLocal<>();, + private static final ThreadLocal<DataSource> configTimeNonTransactionalDataSourceHolder = new ThreadLocal<>();, + private SchedulerFactory schedulerFactory;, +, + @Nullable, + * Set the Quartz {@link SchedulerFactory} implementation to use., + * Set an external Quartz {@link SchedulerFactory} instance to use., + * <p>Default is an internal {@link StdSchedulerFactory} instance., + * If this method is being called, it overrides any class specified, + *
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/DelegatingServletInputStream.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + *
[+++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/PopulatedSchemaDatabaseConfig.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.jdbc.core.JdbcTemplate;, + @Bean, + public JdbcTemplate jdbcTemplate(DataSource dataSource) {, + return new JdbcTemplate(dataSource);, + }, +, +++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/PopulatedSchemaDatabaseConfig.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.jdbc.core.JdbcTemplate;, + @Bean, + public JdbcTemplate jdbcTemplate(DataSource dataSource) {, + return new JdbcTemplate(dataSource);, + }, +, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/nested/NestedTestsWithSqlScriptsAndJUnitJupiterTests.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may
[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + private ContentNegotiationStrategy defaultNegotiationStrategy;, +, + /**, + * Set the {@link ContentNegotiationStrategy} to be used to resolving the default content type., + * <p>This content type will be used when neither the request path extension,, + * nor a request parameter, nor the {@code Accept} header could help determine, + * the requested content type., + * @since 4.1.2, + */, + public void setDefaultContentType(ContentNegotiationStrategy defaultStrategy) {, + this.defaultNegotiationStrategy = defaultStrategy;, + }, +, + if(this.defaultNegotiationStrategy != null) {, + strategies.add(defaultNegotiationStrategy);, + }, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + private ContentNegotiationStrategy defaultNegotiationStrategy;, +, + /**, + * Set
[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, + protected Executor getDefaultExecutor(@Nullable BeanFactory beanFactory) {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, + protected Executor getDefaultExecutor(@Nullable BeanFactory beanFactory) {, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncResult.java, + * Copyright 2002-2017 the original author or authors., +import java.util.concurrent.CompletableFuture;, + private final Throwable executionException;, + private AsyncResult(@Nullable V value, @Nullable Throwable ex) {, + throw (this.executionException instanceof ExecutionException ?, + (ExecutionException) this.executionException :, + new ExecutionException(this.executionException));, + failureCallback.onFailure(exposedException(this.executionException));, + @Override, + public CompletableFuture<V> completable() {, + if (this.executionException != null) {, + CompletableFuture<V> completable = new CompletableFuture<>();, + completable.completeExceptionally(exposedException(this.executionException));, + return completable;, + }, + else {, + return CompletableFuture.completedFuture(this.value);, + }, + }, +, + return
[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandler.java, + * Copyright 2002-2016 the original author or authors., + * Whether the type of the given session matches the transport type of this, + * {@code TransportHandler} where session id and the transport type are, + * extracted from the SockJS URL., + * @since 4.3.3, + */, + boolean checkSessionType(SockJsSession session);, +, + /**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandler.java, + * Copyright 2002-2016 the original author or authors., + * Whether the type of the given session matches the transport type of this, + * {@code TransportHandler} where session id and the transport type are, + * extracted
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, + if (inputMessage.getMethod().equals(HttpMethod.GET) &&, + if (!ifNoneMatch.isEmpty() && (inputMessage.getHeaders().containsKey(HttpHeaders.IF_UNMODIFIED_SINCE), + || inputMessage.getHeaders().containsKey(HttpHeaders.IF_MATCH))) {, + // invalid conditional request, do not process, + }, + else if (lastModified != -1 && StringUtils.hasLength(eTag)) {, + (clientETag.replaceFirst("^W/", "").equals(etag.replaceFirst("^W/", "")))) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, + if (inputMessage.getMethod().equals(HttpMethod.GET) &&, + if (!ifNoneMatch.isEmpty() && (inputMessage.getHeaders().containsKey(HttpHeaders.IF_UNMODIFIED_SINCE), + || inputMessage.getHeaders().containsKey(HttpHeaders.IF_MATCH))) {, + // invalid conditional request, do not process, + }, + else if (lastModified != -1 && StringUtils.hasLength(eTag)) {, + (clientETag.replaceFirst("^W/", "").equals(etag.replaceFirst("^W/", "")))) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, + assertResponseNotModified();, + assertResponseNotModified();, + assertResponseNotModified();, + assertResponseNotModified();, + }, +, + private void assertResponseNotModified() {, + assertTrue(mavContainer.isRequestHandled());, +
[+++ b/org.springframework.web.servlet/ivy.xml, + <dependency org="javax.validation" name="com.springsource.javax.validation" rev="1.0.0.CR3" conf="test->compile"/>, + <dependency org="org.hibernate" name="com.springsource.org.hibernate.validator" rev="4.0.0.Beta2" conf="test->runtime"/>]
[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, + * Copyright 2002-2013 the original author or authors., +import java.util.concurrent.ConcurrentHashMap;, + private final Map<Method, AsyncTaskExecutor> executors = new ConcurrentHashMap<Method, AsyncTaskExecutor>(16);, + this.defaultExecutor = defaultExecutor;, + AsyncTaskExecutor executor = this.executors.get(method);, + if (executor == null) {, + Executor executorToUse = this.defaultExecutor;, + Assert.notNull(this.beanFactory, "BeanFactory must be set on " + getClass().getSimpleName() +, + " to access qualified executor '" + qualifier + "'");, + executorToUse = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, + else if (executorToUse == null) {, + throw new IllegalStateException("No executor qualifier specified and no default executor set on " +, + getClass().getSimpleName() + " either");, + executor =
[+++ b/gradle.properties, +version=4.0.0.RC2]
[+++ b/spring-test/src/main/java/org/springframework/test/web/client/DefaultRequestExpectation.java, + Assert.notNull(expectedCount, "ExpectedCount is required");, + Assert.notNull(requestMatcher, "RequestMatcher is required");, +++ b/spring-test/src/main/java/org/springframework/test/web/client/DefaultRequestExpectation.java, + Assert.notNull(expectedCount, "ExpectedCount is required");, + Assert.notNull(requestMatcher, "RequestMatcher is required");, +++ b/spring-test/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java, +import org.springframework.util.Assert;, + Assert.notNull(mockMvc, "MockMvc must not be null");, +++ b/spring-test/src/main/java/org/springframework/test/web/client/DefaultRequestExpectation.java, + Assert.notNull(expectedCount, "ExpectedCount is required");, + Assert.notNull(requestMatcher, "RequestMatcher is required");, +++ b/spring-test/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java, +import org.springframework.util.Assert;, + Assert.notNull(mockMvc, "MockMvc must not be null");, +++ b/spring-test/src/main/java/org/springframework/test/web/client/RequestMatcher.java, + * Match the given request against specific expectations., +++ b/spring-test/src/main/java/org/springframework/test/web/client/DefaultRequestExpectation.java, + Assert.notNull(expectedCount, "ExpectedCount is required");, + Assert.notNull(requestMatcher, "RequestMatcher is required");, +++ b/spring-test/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java, +import org.springframework.util.Assert;, + Assert.notNull(mockMvc, "MockMvc must not be null");, +++ b/spring-test/src/main/java/org/springframework/test/web/client/RequestMatcher.java, + * Match the given
[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, +import java.util.concurrent.Future;, + private volatile Future<?> taskFuture;, +, +, + public void setTaskFuture(Future<?> taskFuture) {, + this.taskFuture = taskFuture;, + }, +, +, + cancelTask();, + private void cancelTask() {, + Future<?> future = this.taskFuture;, + if (future != null) {, + try {, + future.cancel(true);, + }, + catch (Throwable ex) {, + // Ignore, + }, + }, + }, +, + cancelTask();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, +import java.util.concurrent.Future;, + private volatile Future<?> taskFuture;, +, +, + public void setTaskFuture(Future<?> taskFuture) {, + this.taskFuture = taskFuture;, + }, +, +, + cancelTask();, + private void cancelTask() {,
[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +import java.util.Collection;, +import javax.servlet.ServletRegistration;, + @Nullable, + private String servletPath;, + /**, + * Return the Servlet path under which the Servlet is deployed by checking, + * the Servlet registration from {@link #init(ServletConfig)}., + * @return the path, or an empty string if the Servlet is deployed without, + * a prefix (i.e. "/" or "/*"), or {@code null} if this method is invoked, + * before the {@link #init(ServletConfig)} Servlet container callback., + */, + @Nullable, + public String getServletPath() {, + return this.servletPath;, + }, +, + // Servlet methods..., +, + @Override, +
[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, + assertSame(manager, this.appContext.getBean("mvcContentNegotiationManager"));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, + assertSame(manager, this.appContext.getBean("mvcContentNegotiationManager"));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, + * Copyright 2002-2016 the original author or authors., + private static final boolean javaxValidationPresent =, + ClassUtils.isPresent("javax.validation.Validator", MessageBrokerBeanDefinitionParser.class.getClassLoader());, +, + RuntimeBeanReference validatorRef = getValidator(messageBrokerElement, source, context);, + if (validatorRef != null) {, + beanDef.getPropertyValues().add("validator", validatorRef);, + }, +, + private RuntimeBeanReference getValidator(Element messageBrokerElement, Object source, ParserContext parserContext) {, + if (messageBrokerElement.hasAttribute("validator")) {, + return new RuntimeBeanReference(messageBrokerElement.getAttribute("validator"));, + }, + else if (javaxValidationPresent) {, + RootBeanDefinition validatorDef = new RootBeanDefinition(, + "org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean");, + validatorDef.setSource(source);, + validatorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, + String validatorName = parserContext.getReaderContext().registerWithGeneratedName(validatorDef);, + parserContext.registerComponent(new BeanComponentDefinition(validatorDef, validatorName));, + return
[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, + * @see #bind(String), +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, + * @see #bind(String), +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +import org.springframework.ui.alert.Alert;, +, + * A binding between a source element and a model property., + * The bound value to display in the UI., + * Is the formatted model value if not dirty., + * Is the buffered value if dirty., + Object getValue();, + * If this Binding is read-only., + * A read-only Binding cannot have source values applied and cannot be committed., + boolean isReadOnly();, + * Apply the source value to this binding., + * The source value is
[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, + * Copyright 2002-2016 the original author or authors., +, + return this.mockRequest;, + public MockHttpServletResponse getResponse() {, + return this.mockResponse;, + public Object getHandler() {, + return this.handler;, + public void setInterceptors(HandlerInterceptor... interceptors) {, + public HandlerInterceptor[] getInterceptors() {, + return this.interceptors;, + public Exception getResolvedException() {, + return this.resolvedException;, + public ModelAndView getModelAndView() {, + return this.modelAndView;, + }, +, + @Override, + return RequestContextUtils.getOutputFlashMap(this.mockRequest);, + Thread.sleep(100);, + Object result = this.asyncResult.get();, + if (result == RESULT_NONE) {, + throw new IllegalStateException("Async result for handler [" + this.handler + "] " +, + }, +
[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheAnnotationParser.java, + * {@link AnnotationCacheOperationSource} delegates to such parsers, + * for supporting specific annotation types such as Spring's own, + * {@link Cacheable}, {@link CachePut} and{@link CacheEvict}., + * @see AnnotationCacheOperationSource, + * @see SpringCacheAnnotationParser, + * Parse the cache definition for the given class,, + * based on an annotation type understood by this parser., + * <p>This essentially parses a known cache annotation into Spring's metadata, + * attribute class. Returns {@code null} if the class is not cacheable., + * @return the configured caching operation, or {@code null} if none found, + * Parse
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/org.springframework.aop/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.aop/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.asm/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.aop/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.asm/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.aspects/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.aop/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.asm/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.aspects/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.beans/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.aop/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.asm/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.aspects/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.beans/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.context.support/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.aop/pom.xml, + <version>3.0.0.M3</version>, + <version>3.0.0.M3</version>, +++ b/org.springframework.asm/pom.xml, +
[+++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, + <classpathentry kind="var" path="IVY_CACHE/org.hamcrest/com.springsource.org.hamcrest.core/1.1.0/com.springsource.org.hamcrest.core-1.1.0.jar" sourcepath="/IVY_CACHE/org.hamcrest/com.springsource.org.hamcrest.core/1.1.0/com.springsource.org.hamcrest.core-sources-1.1.0.jar"/>, +++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, + <classpathentry kind="var" path="IVY_CACHE/org.hamcrest/com.springsource.org.hamcrest.core/1.1.0/com.springsource.org.hamcrest.core-1.1.0.jar" sourcepath="/IVY_CACHE/org.hamcrest/com.springsource.org.hamcrest.core/1.1.0/com.springsource.org.hamcrest.core-sources-1.1.0.jar"/>, +++ b/org.springframework.jdbc/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, +++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, + <classpathentry kind="var" path="IVY_CACHE/org.hamcrest/com.springsource.org.hamcrest.core/1.1.0/com.springsource.org.hamcrest.core-1.1.0.jar" sourcepath="/IVY_CACHE/org.hamcrest/com.springsource.org.hamcrest.core/1.1.0/com.springsource.org.hamcrest.core-sources-1.1.0.jar"/>, +++ b/org.springframework.jdbc/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, +++ b/org.springframework.orm/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, + <classpathentry kind="var" path="IVY_CACHE/org.dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-1.6.1.jar" sourcepath="/IVY_CACHE/org.dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-sources-1.6.1.jar"/>]
[+++ b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java, +, +, + public void schedulerFactoryBeanWithApplicationContext() throws Exception {, + public void schedulerWithTaskExecutor() throws Exception {, + jobDetail.setDurability(true);, + @Test(expected = IllegalArgumentException.class), + @SuppressWarnings({ "unchecked", "rawtypes" }), + public void jobDetailWithRunnableInsteadOfJob() {, + public void schedulerWithQuartzJobBean() throws Exception {, + jobDetail.setDurability(true);, + public void schedulerWithSpringBeanJobFactory() throws Exception {, + jobDetail.setDurability(true);, + public void schedulerWithSpringBeanJobFactoryAndParamMismatchNotIgnored() throws Exception {, + jobDetail.setDurability(true);, + public void schedulerWithSpringBeanJobFactoryAndQuartzJobBean() throws Exception {, + jobDetail.setDurability(true);, + public void schedulerWithSpringBeanJobFactoryAndJobSchedulingData() throws Exception {, + public void multipleSchedulers() throws Exception {, + ClassPathXmlApplicationContext ctx = context("multipleSchedulers.xml");, + public void twoAnonymousMethodInvokingJobDetailFactoryBeans() throws Exception {, + ClassPathXmlApplicationContext ctx
[+++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, + if (logger.isWarnEnabled()) {, + logger.warn("Failed to parse Origin header value [" + origin + "]");, + }, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, + if (logger.isWarnEnabled()) {, + logger.warn("Failed to parse Origin header value [" + origin + "]");, + }, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, + if (logger.isWarnEnabled()) {, + logger.warn("Expected SockJS path. Failing request: " + request.getURI());, + }, + if (logger.isDebugEnabled()) {, + logger.debug("Iframe support is disabled when an origin check is required, ignoring " +, + requestInfo);, + }, + if (logger.isWarnEnabled()) {, + logger.warn("Ignoring invalid transport request " + requestInfo);, + }, + if (logger.isDebugEnabled()) {, + },
[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.core.OrderComparator;, +import org.springframework.core.Ordered;, + Collection<SourceClass> memberClasses = sourceClass.getMemberClasses();, + if (!memberClasses.isEmpty()) {, + List<SourceClass> candidates = new ArrayList<>(memberClasses.size());, + for (SourceClass memberClass : memberClasses) {, + candidates.add(memberClass);, + }, + }, + OrderComparator.sort(candidates);, + for (SourceClass candidate : candidates) {, + processConfigurationClass(candidate.asConfigClass(configClass));, + private class SourceClass implements Ordered {, + @Override, + public int getOrder() {, + Integer order = ConfigurationClassUtils.getOrder(this.metadata);, + return (order != null ? order : Ordered.LOWEST_PRECEDENCE);, + }, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.core.OrderComparator;, +import org.springframework.core.Ordered;, + Collection<SourceClass> memberClasses = sourceClass.getMemberClasses();, + if (!memberClasses.isEmpty()) {, + List<SourceClass> candidates = new ArrayList<>(memberClasses.size());, + for
[+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.nio.file.Files;, +import java.util.zip.CRC32;, +import org.junit.Ignore;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, + @Test // SPR-16246, + @Ignore, + public void shouldSendLargeTextFile() throws Exception {, + prepareResponse(response -> {});, +, + Resource resource = new ClassPathResource("largeTextFile.txt", getClass());, + byte[] expected = Files.readAllBytes(resource.getFile().toPath());, + Flux<DataBuffer> body = DataBufferUtils.read(resource, new DefaultDataBufferFactory(), 4096);, +, + this.webClient.post(), + .uri("/"), + .body(body, DataBuffer.class), + .retrieve(), + .bodyToMono(Void.class), + .block(Duration.ofSeconds(5));, +, + expectRequest(request -> {, + ByteArrayOutputStream actual = new ByteArrayOutputStream();, + try {, + request.getBody().copyTo(actual);,
[+++ b/build.gradle, + // As of Spring 3.2 spring-core repackages both asm 4.0 and cglib 3.0 and inlines both, + // into the spring-core jar. cglib 3.0 itself depends on asm 4.0, and is therefore, + // further transformed by the JarJar task to depend on org.springframework.asm; this, + // avoids including two different copies of asm unnecessarily. If however future cglib, + // versions drift from the version of asm used by Spring internally, this duplication, + // will become necessary., + def cglibVersion = '3.0', + cglib, + task cglibRepackJar(type: Jar) { repackJar ->, + repackJar.baseName =
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, + /**, + * Create the user registry that provides access to the local users., + */, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, + /**, + * Create the user registry that provides access to the local users., + */, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, + @SuppressWarnings("deprecation"), + org.springframework.messaging.simp.user.UserSessionRegistry userSessionRegistry,, + this.stompHandler.setUserSessionRegistry(userSessionRegistry);, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, + /**, + * Create the user registry that provides access to the local users., + */, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, + @SuppressWarnings("deprecation"), + org.springframework.messaging.simp.user.UserSessionRegistry userSessionRegistry,, + this.stompHandler.setUserSessionRegistry(userSessionRegistry);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupport.java, + @Override, + @SuppressWarnings("deprecation"), + protected SimpUserRegistry createLocalUserRegistry() {, + org.springframework.messaging.simp.user.UserSessionRegistry sessionRegistry = userSessionRegistry();, + if (sessionRegistry != null) {,
[+++ b/src/reference/docbook/mvc.xml, +@RequestMapping("/spring-web/{symbolicName:[a-z-]+}-{version:\\d\\.\\d\\.\\d}.{extension:\\.[a-z]}")]
[+++ b/spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java, + * Copyright 2002-2015 the original author or authors., + * Holder that combines a {@link Resource} descriptor with a specific encoding, + * or {@code Charset} to be used for reading from the resource., + * <p>Used as an argument for operations that support reading content with, + * a specific encoding, typically via a {@code java.io.Reader}., + * @author Sam Brannen, + * @see java.nio.charset.Charset, + private final String encoding;, + private final Charset charset;, + * Create a new {@code EncodedResource} for the given {@code Resource},, + * not specifying an explicit encoding or
[+++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueClassFilter.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueClassFilter.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueMethodMatcher.java, + @Override, + @Override, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueClassFilter.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueMethodMatcher.java, + @Override, + @Override, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TruePointcut.java, + @Override, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueClassFilter.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueMethodMatcher.java, + @Override, + @Override, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TruePointcut.java, + @Override, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + @Override, + @Override, + @Override, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueClassFilter.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueMethodMatcher.java, + @Override, + @Override, + @Override, +++
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelArgumentResolver.java, +import java.util.Map;, +, + * Resolver for a controller method argument of type {@link Model} that can, + * also be resolved as a {@link java.util.Map}., + return checkParameterTypeNoReactiveWrapper(parameter,, + type -> Model.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type));, + public Object resolveArgumentValue(MethodParameter parameter, BindingContext context,, + Class<?> type = parameter.getParameterType();, + if (Model.class.isAssignableFrom(type)) {, + else if (Map.class.isAssignableFrom(type)) {, + return context.getModel().asMap();, + }, + else {, + // Should never happen.., + throw new IllegalStateException("Unexpected method parameter type: " + type);, + }, + }, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelArgumentResolver.java, +import java.util.Map;, +, + * Resolver for a controller method argument of
[+++ b/build-spring-framework/resources/changelog.txt, +* official support for Hibernate 4.0 GA (as released in the meantime), +* added "getConfiguration" accessor to Hibernate 4 LocalSessionFactoryBean, +* JMS CachingConnectionFactory never caches consumers for temporary queues and topics, +* JMS SimpleMessageListenerContainer silently falls back to lazy registration of consumers, +]
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, + * Copyright 2002-2018 the original author or authors., + * <p>{@code DispatcherHandler} is also designed to be a Spring bean itself and]
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + if(element.hasAttribute("use-suffix-pattern-match")) {, + handlerMappingDef.getPropertyValues().add("useSuffixPatternMatch",, + Boolean.valueOf(element.getAttribute("use-suffix-pattern-match")));, + }, + if(element.hasAttribute("use-trailing-slash-match")) {, + handlerMappingDef.getPropertyValues().add("useTrailingSlashMatch",, + Boolean.valueOf(element.getAttribute("use-trailing-slash-match")));, + }, + if(element.hasAttribute("use-registered-suffix-pattern-match")) {, + handlerMappingDef.getPropertyValues().add("useRegisteredSuffixPatternMatch",, + Boolean.valueOf(element.getAttribute("use-registered-suffix-pattern-match")));, + }, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + if(element.hasAttribute("use-suffix-pattern-match")) {, + handlerMappingDef.getPropertyValues().add("useSuffixPatternMatch",, + Boolean.valueOf(element.getAttribute("use-suffix-pattern-match")));, + }, + if(element.hasAttribute("use-trailing-slash-match")) {, + handlerMappingDef.getPropertyValues().add("useTrailingSlashMatch",, + Boolean.valueOf(element.getAttribute("use-trailing-slash-match")));, + }, + if(element.hasAttribute("use-registered-suffix-pattern-match")) {, + handlerMappingDef.getPropertyValues().add("useRegisteredSuffixPatternMatch",, + Boolean.valueOf(element.getAttribute("use-registered-suffix-pattern-match")));, + }, +, +++ b/spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-4.0.xsd, + <xsd:attribute name="use-suffix-pattern-match" type="xsd:boolean">, + <xsd:annotation>, + <xsd:documentation><![CDATA[, + Whether to use suffix pattern match (".*") when matching patterns to requests. If enabled, + a method mapped to "/users" also matches to "/users.*". The default value is
[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.text.DecimalFormat;, +import java.text.DecimalFormatSymbols;, +import java.util.stream.Collectors;, + private static final DecimalFormatSymbols DECIMAL_FORMAT_SYMBOLS = new DecimalFormatSymbols(Locale.ENGLISH);, +, + * Set the acceptable language ranges,, + * as specified by the {@literal Accept-Language} header., + * @see Locale.LanguageRange, + */, + public void setAcceptLanguage(List<Locale.LanguageRange> languages) {, + Assert.notNull(languages, "'languages' must not be null");, + DecimalFormat df = new DecimalFormat("0.0", DECIMAL_FORMAT_SYMBOLS);, + List<String> values = languages, + .stream(), + .map(r -> (r.getWeight() == Locale.LanguageRange.MAX_WEIGHT ? r.getRange() : r.getRange() + ";q=" + df.format(r.getWeight()))), + .collect(Collectors.toList());, + set(ACCEPT_LANGUAGE, toCommaDelimitedString(values));, + }, +, + /**, + * Return the acceptable language ranges,, +
[+++ b/org.springframework.aop/pom.xml, + <version>4.6</version>, +++ b/org.springframework.aop/pom.xml, + <version>4.6</version>, +++ b/org.springframework.aspects/pom.xml, + <dependency>, + <groupId>org.springframework</groupId>, + <artifactId>spring-context</artifactId>, + <version>${project.version}</version>, + <scope>compile</scope>, + </dependency>, + <dependency>, + <groupId>org.springframework</groupId>, + <artifactId>spring-context-support</artifactId>, + <version>${project.version}</version>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>org.springframework</groupId>, + <artifactId>spring-test</artifactId>, + <version>${project.version}</version>, + <scope>compile</scope>, + </dependency>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>4.6</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>javax.mail</groupId>, + <artifactId>mail</artifactId>, + <version>1.4</version>, + <optional>true</optional>, + </dependency>, +++ b/org.springframework.aop/pom.xml, + <version>4.6</version>, +++ b/org.springframework.aspects/pom.xml, + <dependency>, + <groupId>org.springframework</groupId>, + <artifactId>spring-context</artifactId>, + <version>${project.version}</version>, + <scope>compile</scope>, + </dependency>, + <dependency>, + <groupId>org.springframework</groupId>, + <artifactId>spring-context-support</artifactId>, + <version>${project.version}</version>, + <optional>true</optional>, +
[+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2014 the original author or authors., + return true;]
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import java.util.concurrent.atomic.AtomicBoolean;, + public void handleFailure(Throwable ex) {, + if (this.tcpConnection == null) {, + return;, + }, + handleTcpConnectionFailure("Closing connection after TCP failure", ex);, + }, +, + @Override, + /**, + * Forward the given message to the STOMP broker., + *, + * <p>The method checks whether we have an active TCP connection and have, + * received the STOMP CONNECTED frame. For client messages this should be, + * false only if we lose the TCP connection around the same time when a, + * client message is being forwarded, so we simply
[+++ b/spring-framework-reference/src/mvc.xml, + annotated with <classname>@Valid</classname>, in which case it will be, + available on the classpath.</para>, + <para>Unlike <classname>@ModelAttribute</classname> parameters, for which, + a <classname>BindingResult</classname> can be used to examine the errors,, + <classname>@RequestBody</classname> validation errors always result in a, + <classname>MethodArgumentNotValidException</classname> being raised., + The exception is handled in the, + <classname>DefaultHandlerExceptionResolver</classname>, which sends, + a <literal>400</literal> error back to the client.</para>]
[+++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a ticket in the [Github issue tracker](https://github.com/spring-projects/spring-framework/issues)., +++ /dev/null, +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a ticket in the [Github issue tracker](https://github.com/spring-projects/spring-framework/issues)., +++ b/README.md, +See the [Build from Source](https://github.com/spring-projects/spring-framework/wiki/Build-from-Source) Wikipedia page and the [CONTRIBUTING.md](CONTRIBUTING.md) file., +++ /dev/null, +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a ticket in the [Github issue tracker](https://github.com/spring-projects/spring-framework/issues)., +++ b/README.md, +See the [Build from Source](https://github.com/spring-projects/spring-framework/wiki/Build-from-Source) Wikipedia page and the [CONTRIBUTING.md](CONTRIBUTING.md) file., +++ b/build.gradle, + id "org.jetbrains.kotlin.jvm"
[+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageReader.java, + * Copyright 2002-2017 the original author or authors., +import static java.util.stream.Collectors.joining;, +, + * @author Rossen Stoyanchev, +, + public List<MediaType> getReadableMediaTypes() {, + return Collections.singletonList(MediaType.TEXT_EVENT_STREAM);, + }, +, +, + @Override, + public Flux<Object> read(ResolvableType elementType, ReactiveHttpInputMessage inputMessage,, + Map<String, Object> hints) {, +, + boolean hasSseWrapper = ServerSentEvent.class.isAssignableFrom(elementType.getRawClass());, + ResolvableType dataType = (hasSseWrapper ? elementType.getGeneric(0) : elementType);, +, + .map(buffer -> {, + CharBuffer charBuffer = StandardCharsets.UTF_8.decode(buffer.asByteBuffer());, + DataBufferUtils.release(buffer);, + return Tuples.of(charBuffer.toString(), buffer.factory());, + }), + .concatMap(tuples -> {, + String[] lines = tuples.stream().map(t -> t.getT1()).collect(joining()).split("\\r?\\n");, + DataBufferFactory factory = tuples.stream().findAny().get().getT2();, + ServerSentEvent<Object> event
[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncUtils.java, + private static Constructor<?> standardAsyncRequestConstructor;, +, +, + if (standardAsyncRequestConstructor == null) {, + standardAsyncRequestConstructor = clazz.getConstructor(HttpServletRequest.class, HttpServletResponse.class);, + }, + return (AsyncWebRequest) BeanUtils.instantiateClass(standardAsyncRequestConstructor, request, response);]
[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, + * @author Josh Long, + * @see <a href="http://www.w3.org/TR/cors/">CORS W3C recommendation</a>, + * @see <a href="http://www.w3.org/TR/cors/">CORS W3C recommendation</a>, + * @see <a href="http://www.w3.org/TR/cors/">CORS W3C recommendation</a>, + * @see <a href="http://www.w3.org/TR/cors/">CORS W3C recommendation</a>, + * @see <a href="http://www.w3.org/TR/cors/">CORS W3C recommendation</a>, + * @see <a href="http://www.w3.org/TR/cors/">CORS W3C recommendation</a>, + * @see <a href="http://www.w3.org/TR/cors/">CORS W3C recommendation</a>, + * @see <a href="http://www.w3.org/TR/cors/">CORS W3C recommendation</a>]
[+++ b/spring-core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.junit.Assert.assertTrue;, + * @author Phillip Webb, + @Test, + public void convertPrimitiveArray() throws Exception {, + GenericConversionService conversionService = new DefaultConversionService();, + byte[] byteArray = new byte[] { 1, 2, 3 };, + Byte[] converted = conversionService.convert(byteArray, Byte[].class);, + assertTrue(Arrays.equals(converted, new Byte[] { 1, 2, 3 }));, + }, +, + @Test, + public void canConvertIllegalArgumentNullTargetTypeFromClass() {, + try {, + conversionService.canConvert(String.class, null);, + fail("Did not thow IllegalArgumentException");, + } catch(IllegalArgumentException e) {, + }, + }, +, + @Test, + public void canConvertIllegalArgumentNullTargetTypeFromTypeDescriptor() {, +
[+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, + private final List<BeanFactoryPostProcessor> beanFactoryPostProcessors = new ArrayList<>();, + // Clear context-level resource caches (such as ASM metadata from scanning).]
[+++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, + * Supports resolution as a {@code File} and also as a {@code URL}., +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, + * Supports resolution as a {@code File} and also as a {@code URL}., +++ b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java, + * Supports resolution as a {@code URL} and also as a {@code File} in, +, +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, + * Supports resolution as a {@code File} and also as a {@code URL}., +++ b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java, + * Supports resolution as a {@code URL} and also as a {@code File} in, +, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + /** The package separator character: '.' */, + /** The path separator
[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, + if (!this.earlyProxyReferences.contains(cacheKey)) {, + }, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, + if (!this.earlyProxyReferences.contains(cacheKey)) {, + }, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + return (isSingletonCurrentlyInCreation(beanName) || isPrototypeCurrentlyInCreation(beanName));, + if (!this.alreadyCreated.contains(beanName)) {, + }]
[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +, + if (this.environment instanceof ConfigurableEnvironment) {, + else {, + logger.warn("Ignoring @PropertySource annotation on [" + sourceClass.getMetadata().getClassName() +, + "]. Reason: Environment must implement ConfigurableEnvironment");, + }, + String resolvedLocation = this.environment.resolveRequiredPlaceholders(location);, + Resource resource = this.resourceLoader.getResource(resolvedLocation);, + ResourcePropertySource rps = (StringUtils.hasText(name) ?, + new ResourcePropertySource(name, resource) : new ResourcePropertySource(resource));, + addPropertySource(rps);, + private void addPropertySource(ResourcePropertySource propertySource) {, + ((CompositePropertySource) existing).addFirstPropertySource(propertySource.withResourceName());, + if (existing instanceof ResourcePropertySource) {, + existing = ((ResourcePropertySource) existing).withResourceName();, + composite.addPropertySource(propertySource.withResourceName());, + }, + else {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +, + if (this.environment instanceof ConfigurableEnvironment) {, + else {, + logger.warn("Ignoring @PropertySource annotation on
[+++ b/spring-test/src/main/java/org/springframework/test/context/TestExecutionListener.java, + * <li>{@link org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, + * DirtiesContextBeforeModesTestExecutionListener}</li>]
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/ServletUriComponentsBuilder.java, + * Copyright 2002-2014 the original author or authors., + int port = request.getServerPort();, + String hostHeader = request.getHeader("X-Forwarded-Host");, + if (StringUtils.hasText(hostHeader)) {, + String[] hosts = StringUtils.commaDelimitedListToStringArray(hostHeader);, + String portHeader = request.getHeader("X-Forwarded-Port");, + if (StringUtils.hasText(portHeader)) {, + port = Integer.parseInt(portHeader);, + }, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/ServletUriComponentsBuilder.java, + * Copyright 2002-2014 the original author or authors., + int port = request.getServerPort();, + String hostHeader = request.getHeader("X-Forwarded-Host");, + if (StringUtils.hasText(hostHeader)) {, + String[] hosts = StringUtils.commaDelimitedListToStringArray(hostHeader);, + String portHeader = request.getHeader("X-Forwarded-Port");, + if (StringUtils.hasText(portHeader)) {, + port = Integer.parseInt(portHeader);, + }, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/ServletUriComponentsBuilderTests.java, + * Copyright 2002-2014 the
[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.java, + * Copyright 2002-2012 the original author or authors., +, + * Resolve the given lookup key object, as specified in the, + * {@link #setTargetDataSources targetDataSources} map, into, + * the actual lookup key to be used for matching with the, + * {@link #determineCurrentLookupKey() current lookup key}., + * <p>The default implementation simply returns the given key as-is., + * @param lookupKey the lookup key object as specified by the user, + * @return the lookup key as needed for matching, + */, + protected Object resolveSpecifiedLookupKey(Object lookupKey) {, + return lookupKey;, + }, +,
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.web.context.support.ContextExposingHttpServletRequest;, + private boolean exposeContextBeansAsAttributes = false;, +, + private Set<String> exposedContextBeanNames;, +, + /**, + * Set whether to make all Spring beans in the application context accessible, + * as request attributes, through lazy checking once an attribute gets accessed., + * <p>This will make all such beans accessible in plain {@code ${...}}, + * expressions in a JSP 2.0 page, as well as in JSTL's {@code c:out}, + * value expressions., + * <p>Default is "false". Switch this flag on to transparently expose all, + * Spring
[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java, + * @return the value object (possibly not of the specified required type,, + * with further conversion steps necessary), + * @see #getResultSetValue(ResultSet, int), +, +, + // Corresponding SQL types for JSR-310 / Joda-Time types, left up, + // to the caller to convert them (e.g. through a ConversionService)., + String typeName = requiredType.getSimpleName();, + if ("LocalDate".equals(typeName)) {, + return rs.getDate(index);, + }, + else if ("LocalTime".equals(typeName)) {, + return rs.getTime(index);, + }, + else if ("LocalDateTime".equals(typeName)) {, + return rs.getTimestamp(index);, + }, +, + // Fall back to getObject without type specification, again, +
[+++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/AnnotatedJCacheableService.java, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/AnnotatedJCacheableService.java, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/AnnotationCacheOperationSourceTests.java, +import javax.cache.annotation.CacheRemove;, +import javax.cache.annotation.CacheRemoveAll;, + getCacheOperation(InvalidCases.class, name.getMethodName());, + static class InvalidCases {, +, + @CacheRemove, + @CacheRemoveAll, + public void multiAnnotations() {, + }, + }, +]
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, + private final boolean useDefaultResolution;, +, + this(messageConverter, validator, true);, + }, +, + /**, + * Create a new {@code PayloadArgumentResolver} with the given, + * {@link MessageConverter} and {@link Validator}., + * @param messageConverter the MessageConverter to use (required), + * @param validator the Validator to use (optional), + * @param useDefaultResolution if "true" (the default) this resolver supports, + * all parameters; if "false" then only arguments with the {@code @Payload}, + * annotation are supported., + */, + public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator,, + boolean useDefaultResolution) {, +, + this.useDefaultResolution = useDefaultResolution;, +
[+++ b/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java, + * @author Dave Syer, +, +, + String fileEncoding = element.getAttribute("file-encoding");, + if (StringUtils.hasLength(fileEncoding)) {, + builder.addPropertyReference("fileEncoding", fileEncoding);, + }, +, + String order = element.getAttribute("order");, + if (StringUtils.hasLength(order)) {, + builder.addPropertyValue("order", Integer.valueOf(order));, + }, +, + builder.addPropertyValue("ignoreResourceNotFound",, + Boolean.valueOf(element.getAttribute("ignore-resource-not-found")));, +, + builder.addPropertyValue("localOverride",, + Boolean.valueOf(element.getAttribute("local-override")));, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java, + * @author Dave Syer, +, +, + String fileEncoding = element.getAttribute("file-encoding");, + if (StringUtils.hasLength(fileEncoding)) {, + builder.addPropertyReference("fileEncoding", fileEncoding);, + }, +, + String order = element.getAttribute("order");, + if (StringUtils.hasLength(order)) {, + builder.addPropertyValue("order", Integer.valueOf(order));, + }, +, + builder.addPropertyValue("ignoreResourceNotFound",, + Boolean.valueOf(element.getAttribute("ignore-resource-not-found")));, +, + builder.addPropertyValue("localOverride",, + Boolean.valueOf(element.getAttribute("local-override")));, +, +++
[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/DefaultMockMvcBuilder.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/DefaultMockMvcBuilder.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilderTests.java, + * Copyright 2002-2014 the original author or authors.]
[+++ b/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java, + try {, + catch (Throwable ex) {, + throw new IllegalStateException("Failed to introspect annotated methods on " + getIntrospectedClass(), ex);, + }, + }, + try {, + catch (Throwable ex) {, + throw new IllegalStateException("Failed to introspect annotated methods on " + getIntrospectedClass(), ex);, + }, + }]
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, + @Nullable, + return null;, + @Nullable, + return null;, + @Nullable, + return null;, + * Return a {@link org.springframework.validation.Validator, + * org.springframework.validation.Validators} instance for validating, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, + @Nullable, + return null;, + @Nullable, + return null;, + @Nullable, + return null;, + * Return a {@link org.springframework.validation.Validator, + * org.springframework.validation.Validators} instance for validating, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, + Object nullBean = context.getBean("userRegistryMessageHandler");, + assertTrue(nullBean.equals(null));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, + @Nullable, + return null;, + @Nullable, + return null;, + @Nullable, + return null;, + * Return a {@link org.springframework.validation.Validator, + * org.springframework.validation.Validators} instance for validating, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, +
[+++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/ArgumentBindingTests.java, + * Copyright 2002-2016 the original author or authors., +public class ArgumentBindingTests {, + ITestBean proxiedTestBean = proxyFactory.getProxy();, + proxiedTestBean.setName("Supercalifragalisticexpialidocious");, + ITransactionalBean proxiedTestBean = proxyFactory.getProxy();, + proxiedTestBean.doInTransaction();, +, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/ArgumentBindingTests.java, + * Copyright 2002-2016 the original author or authors., +public class ArgumentBindingTests {, + ITestBean proxiedTestBean = proxyFactory.getProxy();, + proxiedTestBean.setName("Supercalifragalisticexpialidocious");, + ITransactionalBean proxiedTestBean = proxyFactory.getProxy();, + proxiedTestBean.doInTransaction();, +, +++ b/spring-beans/src/test/resources/org/springframework/beans/factory/xml/import.xml, +<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/ArgumentBindingTests.java, + * Copyright 2002-2016 the original author or authors., +public class ArgumentBindingTests {, + ITestBean proxiedTestBean = proxyFactory.getProxy();, + proxiedTestBean.setName("Supercalifragalisticexpialidocious");, + ITransactionalBean proxiedTestBean = proxyFactory.getProxy();, + proxiedTestBean.doInTransaction();, +,
[+++ b/spring-core/src/main/java/org/springframework/util/Base64Utils.java, +import javax.xml.bind.DatatypeConverter;, + * <p>Adapts to either Java 8's {@link java.util.Base64} class or Apache Commons Codec's, + * {@link org.apache.commons.codec.binary.Base64} class. With neither Java 8 nor Commons, + * Codec present, {@link #encode}/{@link #decode} calls will throw an IllegalStateException., + * However, as of Spring 4.2, {@link #encodeToString} and {@link #decodeFromString} will, + * nevertheless work since they can delegate to the JAXB DatatypeConverter as a fallback., + * @see javax.xml.bind.DatatypeConverter#printBase64Binary, + * @see javax.xml.bind.DatatypeConverter#parseBase64Binary, + * Assert that Byte64 encoding between byte arrays is actually supported., + private static void assertDelegateAvailable() {, + Assert.state(delegate != null,,
[+++ b/.mailmap, +Juergen Hoeller <jhoeller@vmware.com> jhoeller <jhoeller@vmware.com>, +<rstoyanchev@gopivotal.com> <rstoyanchev@vmware.com>, +<pwebb@gopivotal.com> <pwebb@vmware.com>, +<cbeams@gopivotal.com> <cbeams@vmware.com>, +<cbeams@gopivotal.com> <cbeams@gmail.com>, +<apoutsma@gopivotal.com> <apoutsma@vmware.com>, +<apoutsma@gopivotal.com> <poutsma@mac.com>, +<ogierke@gopivotal.com> <ogierke@vmware.com>, +<aclement@gopivotal.com> <david_syer@hotmail.com>, +<aclement@gopivotal.com> <andrew.clement@gmail.com>, +<aclement@gopivotal.com> <aclement@vmware.com>, +<dmitry.katsubo@gmail.com> <dmitry.katsubo@gmai.com>, +Nick Williams <nicholas@nicholaswilliams.net> Nicholas Williams <nicholas@nicholaswilliams.net> ]
[+++ b/build-spring-framework/resources/changelog.txt, +* DataBinder now accepts var-args to set allowed, disallowed, and required fields, +* ClassUtils is now parametrized with Class<?> and Class<T> where appropriate]
[+++ b/build.gradle, + ext.jackson2Version = "2.7.0", +++ b/build.gradle, + ext.jackson2Version = "2.7.0", +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.TypeVariable;, +import com.fasterxml.jackson.databind.type.TypeFactory;, +import org.springframework.core.ResolvableType;, + TypeFactory typeFactory = this.objectMapper.getTypeFactory();, + if (type instanceof TypeVariable && contextClass != null) {, + ResolvableType resolvedType = resolveVariable((TypeVariable<?>)type, ResolvableType.forClass(contextClass));, + if (resolvedType != ResolvableType.NONE) {, + return typeFactory.constructType(resolvedType.resolve());, + }, + }, + return typeFactory.constructType(type);, + }, +, + private ResolvableType resolveVariable(TypeVariable<?> typeVariable, ResolvableType contextType) {, + ResolvableType resolvedType;, + if (contextType.hasGenerics()) {, + resolvedType = ResolvableType.forType(typeVariable, contextType);, + if (resolvedType.resolve() != null) {, + return resolvedType;, +
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueArgumentResolver.java, + .flatMap(arg -> {, + return Mono.justOrEmpty(arg);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueArgumentResolver.java, + .flatMap(arg -> {, + return Mono.justOrEmpty(arg);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java, + * Copyright 2002-2018 the original author or authors., + public void resolveWithQueryString() {, + public void resolveStringArray() {, + public void resolveDefaultValue() {, + @Test // SPR-17050, + public void resolveAndConvertNullValue() {, + MethodParameter param = this.testMethod, + .annot(requestParam().notRequired()), + .arg(Integer.class);, + assertNull(resolve(param, MockServerWebExchange.from(MockServerHttpRequest.get("/?nullParam="))));, + }, +, + public void missingRequestParam() {, + public void resolveSimpleTypeParam() {, + public void resolveSimpleTypeParamToNull() {, + public void resolveEmptyValueToDefault() {, + public void resolveEmptyValueWithoutDefault() {, + public void resolveEmptyValueRequiredWithoutDefault() {, +
[+++ b/spring-aop/src/test/java/org/springframework/aop/framework/ClassWithConstructor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aop/src/test/java/org/springframework/aop/framework/ClassWithConstructor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aop/src/test/java/org/springframework/aop/framework/ProxyFactoryTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aop/src/test/java/org/springframework/aop/framework/ClassWithConstructor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aop/src/test/java/org/springframework/aop/framework/ProxyFactoryTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aspects/src/test/java/org/springframework/cache/config/SomeCustomKeyGenerator.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aop/src/test/java/org/springframework/aop/framework/ClassWithConstructor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aop/src/test/java/org/springframework/aop/framework/ProxyFactoryTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aspects/src/test/java/org/springframework/cache/config/SomeCustomKeyGenerator.java, + * Copyright 2002-2018 the original author or authors.,
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/MultiServerUserRegistry.java, + public int getUserCount() {, + int userCount = 0;, + for (UserRegistrySnapshot registry : this.remoteRegistries.values()) {, + userCount += registry.getUserMap().size();, + }, + userCount += this.localRegistry.getUserCount();, + return userCount;, + }, +, + @Override, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/MultiServerUserRegistry.java, + public int getUserCount() {, + int userCount = 0;, + for (UserRegistrySnapshot registry : this.remoteRegistries.values()) {, + userCount += registry.getUserMap().size();, + }, + userCount += this.localRegistry.getUserCount();, + return userCount;, + }, +, + @Override, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpUserRegistry.java, + * Return the count of all connected users., + * @return the connected user count., + * @since 4.3.5, + */, +
[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/AdvisorChainFactory.java, + * Copyright 2002-2014 the original author or authors., + * @param targetClass the target class (may be {@code null} to indicate a proxy without, + * target object, in which case the method's declaring class is the next best option), + List<Object> getInterceptorsAndDynamicInterceptionAdvice(Advised config, Method method, Class<?> targetClass);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AdvisorChainFactory.java, + * Copyright 2002-2014 the original author or authors., + * @param targetClass the target class (may be {@code null} to indicate a proxy without, + * target object, in which case the method's declaring class is the next best option), + List<Object> getInterceptorsAndDynamicInterceptionAdvice(Advised config, Method
[+++ b/spring-web/src/main/java/org/springframework/web/util/CookieGenerator.java, + * Copyright 2002-2012 the original author or authors., + private boolean cookieHttpOnly = false;, +, + * @see javax.servlet.http.Cookie#getName(), + * @see javax.servlet.http.Cookie#setDomain, + * @see javax.servlet.http.Cookie#setPath, + * @see javax.servlet.http.Cookie#setMaxAge, + * @see javax.servlet.http.Cookie#setSecure, + /**, + * Set whether the cookie is supposed to be marked with the "HttpOnly" attribute., + * <p>Note that this feature is only available on Servlet 3.0 and higher., + * @see javax.servlet.http.Cookie#setHttpOnly, + */, + public void setCookieHttpOnly(boolean cookieHttpOnly) {, + this.cookieHttpOnly = cookieHttpOnly;, + }, +, + /**, + * Return whether the cookie is supposed to
[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +import java.lang.reflect.Member;, + * @param member the method or constructor for which arguments are being setup, + public static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) {, + String[] paramDescriptors = null;, + boolean isVarargs = false;, + if (member instanceof Constructor) {, + Constructor<?> ctor = (Constructor<?>)member;, + paramDescriptors = toDescriptors(ctor.getParameterTypes());, + isVarargs = ctor.isVarArgs();, + }, + else { // Method, + Method method = (Method)member;, + paramDescriptors = toDescriptors(method.getParameterTypes());, + isVarargs = method.isVarArgs();, + }, + if (isVarargs) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +import java.lang.reflect.Member;, + * @param member the method or constructor for
[+++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, + return hasError(getStatusCode(response));, + }, +, + private HttpStatus getStatusCode(ClientHttpResponse response) throws IOException {, + HttpStatus statusCode;, + try {, + statusCode = response.getStatusCode();, + }, + catch (IllegalArgumentException ex) {, + throw new RestClientException("Unknown status code [" + response.getRawStatusCode() + "]");, + }, + return statusCode;, + HttpStatus statusCode = getStatusCode(response);, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, + return hasError(getStatusCode(response));, + }, +, + private HttpStatus getStatusCode(ClientHttpResponse response) throws IOException {, + HttpStatus statusCode;, + try {, + statusCode = response.getStatusCode();, + }, + catch (IllegalArgumentException ex) {, + throw new RestClientException("Unknown status code [" + response.getRawStatusCode() + "]");, +
[+++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a ticket in the [Github issue tracker](https://github.com/spring-projects/spring-framework/issues)., +++ /dev/null, +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a ticket in the [Github issue tracker](https://github.com/spring-projects/spring-framework/issues)., +++ b/build.gradle, + id "org.jetbrains.kotlin.jvm" version "1.2.71" apply false, + junit5Version = "5.3.2", + kotlinVersion = "1.2.71", + apiVersion = "1.1", + languageVersion = "1.1", + testCompile("com.nhaarman:mockito-kotlin:1.6.0") {, + exclude module: "kotlin-stdlib", + exclude module: "kotlin-reflect", + exclude module: "mockito-core", + }, + "http://docs.oracle.com/javase/8/docs/api/",, + "http://docs.oracle.com/javaee/7/api/",, + "http://docs.oracle.com/cd/E13222_01/wls/docs90/javadocs/", // CommonJ, + "http://pic.dhe.ibm.com/infocenter/wasinfo/v7r0/topic/com.ibm.websphere.javadoc.doc/web/apidocs/",, +
[+++ b/build-spring-framework/build.xml, + <pathelement location="../org.springframework.web"/>
[+++ b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/transactionalTests-context.xml, + p:dataSource-ref="dataSource"/>]
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/TomcatWebSocketClient.java, +import javax.websocket.WebSocketContainer;, + public TomcatWebSocketClient() {, + }, +, + public TomcatWebSocketClient(WebSocketContainer webSocketContainer) {, + super(webSocketContainer);, + }, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/TomcatWebSocketClient.java, +import javax.websocket.WebSocketContainer;, + public TomcatWebSocketClient() {, + }, +, + public TomcatWebSocketClient(WebSocketContainer webSocketContainer) {, + super(webSocketContainer);, + }, +, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java, +import org.apache.tomcat.websocket.WsContainerProvider;, +import org.apache.tomcat.websocket.WsWebSocketContainer;, + Flux.just(new TomcatWebSocketClient(new WsWebSocketContainer())).repeat(5),]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/WebSocketHandler.java, + * <p>A server {@code WebSocketHandler} is mapped to requests with, + * {@link org.springframework.web.reactive.handler.SimpleUrlHandlerMapping, + * SimpleUrlHandlerMapping} and, + * {@link org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter, + * WebSocketHandlerAdapter}. A client {@code WebSocketHandler} is passed to the, + * {@link org.springframework.web.reactive.socket.client.WebSocketClient, + * WebSocketClient} execute method., + * <p>Use {@link WebSocketSession#receive() session.receive()} to compose on, + * the inbound message stream, and {@link WebSocketSession#send(Publisher), + * session.send(publisher)} for the outbound message stream. Below is an, + * example, combined flow to process inbound and to send outbound messages:, + *, + * <pre class="code">, + * class ExampleHandler implements WebSocketHandler
[+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/RollbackOverrideDefaultRollbackFalseTransactionalTests.java, + @Override, + @Rollback]
[+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +, +, +, + @Override, + public boolean supportsEventType(ResolvableType eventType) {, + for (ResolvableType declaredEventType : this.declaredEventTypes) {, + if (declaredEventType.isAssignableFrom(eventType)) {, + return true;, + }, + else if (PayloadApplicationEvent.class.isAssignableFrom(eventType.getRawClass())) {, + ResolvableType payloadType = eventType.as(PayloadApplicationEvent.class).getGeneric();, + if (declaredEventType.isAssignableFrom(payloadType)) {, + return true;, + }, + }, + }, + return eventType.hasUnresolvableGenerics();, + }, +, + @Override, + public boolean supportsSourceType(Class<?> sourceType) {, + return true;, + }, +, + @Override, + public int getOrder() {, + Order order = getMethodAnnotation(Order.class);, + return (order != null ? order.value() : 0);, + }, +, +, + Assert.notNull(this.applicationContext,
[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, + * Copyright 2002-2019 the original author or authors., + Flux<Void> commit = Flux.empty();, + for (Supplier<? extends Mono<Void>> actions : this.commitActions) {, + commit = commit.concatWith(actions.get());, + }, + return commit.then();]
[+++ b/gradle/publish-maven.gradle, + email = "jhoeller@gopivotal.com", +++ b/gradle/publish-maven.gradle, + email = "jhoeller@gopivotal.com", +++ b/src/dist/license.txt, + Pivotal, Inc., 875 Howard St,, + San Francisco, CA 94103, +or email info@gopivotal.com. All such requests should clearly specify:, +Pivotal shall mail a copy of the Source Files to you on a CD or equivalent, +++ b/gradle/publish-maven.gradle, + email = "jhoeller@gopivotal.com", +++ b/src/dist/license.txt, + Pivotal, Inc., 875 Howard St,, + San Francisco, CA 94103, +or email info@gopivotal.com. All such requests should clearly specify:, +Pivotal shall mail a copy of the Source Files to you on a CD or equivalent, +++ b/src/dist/notice.txt, +Copyright (c) 2002-${copyright}
[+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java, + private static final Map<Class<?>, TestContextManager> testContextManagerCache = new ConcurrentHashMap<>(64);, + Assert.notNull(testClass, "Test Class must not be null");, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java, + private static final Map<Class<?>, TestContextManager> testContextManagerCache = new ConcurrentHashMap<>(64);, + Assert.notNull(testClass, "Test Class must not be null");, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringMethodRule.java, + * Copyright 2002-2018 the original author or authors., + private Statement withTestInstancePreparation(, + Statement next, Object testInstance, TestContextManager testContextManager) {]
[+++ b/spring-framework-reference/src/beans.xml, + annotation supports some of the attributes offered by, + <code><link linkend="beans-factory-autowire">autowiring</link></code>, + linkend="beans-factory-scopes">name</link></code>.</para>, + <interfacename>@Bean</interfacename> annotation. Such a method, + will be used to register a bean definition within a <code>BeanFactory</code> , + of the type specified as the methods return value. By default,, + a dependency on a prototype-scoped bean. Using Java for this type, + of configuration provides a natural means for implementing this pattern. , + <emphasis>Note that the example below is adapted from the example , + classes and configuration in the core documentation linked above.</emphasis>, + <programlisting language="java"><![CDATA[public abstract class CommandManager
[+++ b/build.properties, +test.vm.args=-XX:MaxPermSize=128M]
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java, + .map(value -> write(value, contentType, exchange)), + @SuppressWarnings("unchecked"), + private <T> Mono<Void> write(T value, MediaType contentType, ServerWebExchange exchange) {, + Publisher<T> input = Mono.justOrEmpty(value);, + ResolvableType elementType = ResolvableType.forClass(value.getClass());, + return ((HttpMessageWriter<T>) this.writer).write(, + input, elementType, contentType, exchange.getResponse(), Collections.emptyMap());, + }, +]
[+++ b/build-spring-framework/resources/changelog.txt, +Changes in version 3.1 RC1 (2011-07-xx), +---------------------------------------, +, +* prepared Spring's DataSource and RowSet adapters for forward compatibility with JDBC 4.1, +* revised JMS CachedConnectionFactory to avoid unnecessary rollback calls on Session return, +* fixed JMS CachedConnectionFactory to fully synchronize its Session list, +, +, +++ b/build-spring-framework/resources/changelog.txt, +Changes in version 3.1 RC1 (2011-07-xx), +---------------------------------------, +, +* prepared Spring's DataSource and RowSet adapters for forward compatibility with JDBC 4.1, +* revised JMS CachedConnectionFactory to avoid unnecessary rollback calls on Session return, +* fixed JMS CachedConnectionFactory to fully synchronize its Session list, +, +, +++ b/build-spring-framework/resources/readme.txt, +SPRING FRAMEWORK 3.1
[+++ b/CONTRIBUTING.md, +[JIRA issue tracker]: https://jira.spring.io/browse/SPR, +++ b/CONTRIBUTING.md, +[JIRA issue tracker]: https://jira.spring.io/browse/SPR, +++ b/README.md, +[Spring Framework JIRA]: https://jira.spring.io/browse/SPR, +++ b/CONTRIBUTING.md, +[JIRA issue tracker]: https://jira.spring.io/browse/SPR, +++ b/README.md, +[Spring Framework JIRA]: https://jira.spring.io/browse/SPR, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/DefinitionMetadataEqualsHashCodeTests.java, + * @see <a href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>, +++ b/CONTRIBUTING.md, +[JIRA issue tracker]: https://jira.spring.io/browse/SPR, +++ b/README.md, +[Spring Framework JIRA]: https://jira.spring.io/browse/SPR, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/DefinitionMetadataEqualsHashCodeTests.java, + * @see <a href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>, +++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java, + * @see <a href="https://jira.spring.io/browse/SPR-10785">SPR-10785</a> and <a, + * href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>, +++ b/CONTRIBUTING.md, +[JIRA issue tracker]: https://jira.spring.io/browse/SPR, +++ b/README.md, +[Spring Framework JIRA]: https://jira.spring.io/browse/SPR, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/DefinitionMetadataEqualsHashCodeTests.java, + * @see <a href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>, +++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java, + * @see <a href="https://jira.spring.io/browse/SPR-10785">SPR-10785</a> and <a, + * href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>,
[+++ b/spring-framework-reference/src/testing.xml, +, + <note>, + <title>Avoid false positives when testing ORM code</title>, + <para>When testing code involving an ORM framework such as JPA, + or Hibernate, it is a good practice to, + <emphasis>flush</emphasis> the underlying session within test, + methods which update the state of the session. Failing to flush, + the ORM framework's underlying session can lead to, + <emphasis>false positives</emphasis>: your test may pass, but, + the same code will throw an exception in a live, production, + environment. In the following Hibernate-based example test case,, + we have two methods: one which demonstrates a
[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigBeanDefinitionParser.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +import org.springframework.lang.NonNullApi;, +@NonNullApi, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigBeanDefinitionParser.java, +import org.springframework.lang.NonNullApi;,
[+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/config/InitializeDatabaseIntegrationTests.java, + assertEquals(1, t.queryForObject("select count(*) from T_TEST", Integer.class).intValue());, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/config/InitializeDatabaseIntegrationTests.java, + assertEquals(1, t.queryForObject("select count(*) from T_TEST", Integer.class).intValue());, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateQueryTests.java, + int i = this.template.queryForObject(sql,Integer.class).intValue();, + long l = this.template.queryForObject(sql, Long.class).longValue();, + int i = this.template.queryForObject(sql, new Object[] {3}, Integer.class).intValue();, + long l = this.template.queryForObject(sql, new Object[] {3}, Long.class).longValue();, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/config/InitializeDatabaseIntegrationTests.java, + assertEquals(1, t.queryForObject("select count(*) from T_TEST", Integer.class).intValue());, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateQueryTests.java, + int i = this.template.queryForObject(sql,Integer.class).intValue();, + long l = this.template.queryForObject(sql, Long.class).longValue();, + int i = this.template.queryForObject(sql, new Object[] {3}, Integer.class).intValue();, + long l = this.template.queryForObject(sql, new Object[] {3}, Long.class).longValue();, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/namedparam/NamedParameterQueryTests.java, + int i = template.queryForObject("SELECT AGE FROM CUSTMR
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestBodyAdvice.java, +import java.io.IOException;, + Type targetType, Class<? extends HttpMessageConverter<?>> converterType) throws IOException;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestBodyAdvice.java, +import java.io.IOException;, + Type targetType, Class<? extends HttpMessageConverter<?>> converterType) throws IOException;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestBodyAdviceAdapter.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed
[+++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessageOperations.java, +import org.springframework.messaging.core.MessageRequestReplyOperations;, +public interface JmsMessageOperations extends MessageSendingOperations<Destination>,, + MessageReceivingOperations<Destination>, MessageRequestReplyOperations<Destination> {, + /**, + * Send a request message and receive the reply from the given destination., + * @param destinationName the name of the target destination, + * @param requestMessage the message to send, + * @return the reply, possibly {@code null} if the message could not be received,, + * for example due to a timeout, + */, + Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException;, +, + /**, + * Convert the given request Object to serialized form, possibly using a, + * {@link
[+++ b/spring-context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, + Set<ManagedOperationParameter> anns = AnnotatedElementUtils.getMergedRepeatableAnnotations(, + Set<ManagedNotification> anns = AnnotatedElementUtils.getMergedRepeatableAnnotations(]
[+++ b/org.springframework.orm/src/test/java/org/springframework/beans/Colour.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, + * Class to manage context meta-data used for the configuration, + * and execution of a stored procedure call., + // Should we access call parameter meta-data info or not, + // The provider of call meta-data, + * Specify whether call parameter meta-data should be accessed., + * Check whether call parameter meta-data should be accessed., + * Initialize this class with meta-data from the database., + * @param dataSource the DataSource used to retrieve meta-data, + * Process the list of parameters provided, and if procedure column meta-data is used,, + * the parameters
[+++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.http.converter.HttpMessageNotReadableException;, + try {, + GenericHttpMessageConverter<?> genericMessageConverter =, + (GenericHttpMessageConverter<?>) messageConverter;, + }, + catch(IOException | HttpMessageNotReadableException exc) {, + throw new RestClientException("Error while extracting response for type [", + + this.responseType + "] and content type [" + contentType + "]", exc);, + }, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.http.converter.HttpMessageNotReadableException;, + try {, + GenericHttpMessageConverter<?> genericMessageConverter =, + (GenericHttpMessageConverter<?>) messageConverter;, + }, + catch(IOException | HttpMessageNotReadableException exc) {, + throw new RestClientException("Error while extracting response for type [", +
[+++ b/build.gradle, + optional(project(":spring-context")), +++ b/build.gradle, + optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, + configuration.dependencies.each {, + def intoCompile = project.merge.into.configurations.getByName("compile"), + // Protect against changing a compile scope dependency (SPR-10218), + if(!intoCompile.dependencies.contains(it)) {, + intoConfiguration.dependencies.add(it), + }, + }, +++ b/build.gradle, + optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, + configuration.dependencies.each {, + def intoCompile = project.merge.into.configurations.getByName("compile"), + // Protect against changing a compile scope dependency (SPR-10218), + if(!intoCompile.dependencies.contains(it)) {, + intoConfiguration.dependencies.add(it), + }, + }, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJExpressionPointcutTests.java, + private void assertDoesNotMatchStringClass(ClassFilter classFilter) {, + assertFalse("Expression should not match String class", classFilter.matches(String.class));, + }, +, +++ b/build.gradle, + optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, + configuration.dependencies.each {, +
[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectFactory.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectFactory.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectFactory.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + return beanFactory.getBean(this.shortcut, this.requiredType);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectFactory.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + return beanFactory.getBean(this.shortcut, this.requiredType);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectFactory.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + return beanFactory.getBean(this.shortcut, this.requiredType);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + return beanFactory.getBean(beanName);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectFactory.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + return beanFactory.getBean(this.shortcut, this.requiredType);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + return beanFactory.getBean(beanName);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/SmartInstantiationAwareBeanPostProcessor.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectFactory.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + return beanFactory.getBean(this.shortcut, this.requiredType);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + return beanFactory.getBean(beanName);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/SmartInstantiationAwareBeanPostProcessor.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + Object current = beanProcessor.postProcessBeforeInitialization(result, beanName);, + if (current == null) {, + return
[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, + public RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter) {, + public RequestHeadersSpec<?> syncBody(Object body) {, + this.bodySpec.syncBody(body);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, + public RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter) {, + public RequestHeadersSpec<?> syncBody(Object body) {, + this.bodySpec.syncBody(body);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, + RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter);, + * Set the body of the request to the given asynchronous {@code Publisher}., + * Set the body of the request to the given synchronous {@code Object} and, + RequestHeadersSpec<?> syncBody(Object body);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, + public RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter) {, + public RequestHeadersSpec<?> syncBody(Object body) {, + this.bodySpec.syncBody(body);,
[+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java, +import java.nio.charset.Charset;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.util.UriComponentsBuilder;, +import org.springframework.web.util.UriUtils;, +import static java.nio.charset.StandardCharsets.UTF_8;, + assertMultiValueMapCount("header", name, headers, expectedCount);, + }, +, +, + /**, + * Assert request query parameter values with the given Hamcrest matcher., + */, + @SafeVarargs, + public static RequestMatcher queryParameter(final String name, final Matcher<? super String>... matchers) {, + return queryParameter(name, UTF_8, matchers);, + }, +, + /**, + * Assert request query parameter values with the given Hamcrest matcher., + */, + @SafeVarargs, + public static RequestMatcher queryParameter(final String name, final Charset charset,, + final Matcher<? super String>... matchers) {, + return new
[+++ b/spring-core/src/test/java/org/springframework/util/xml/AbstractStaxHandlerTestCase.java, + * Copyright 2002-2015 the original author or authors., +import java.net.Socket;, +, +import org.junit.Assume;, +, +/**, + * @author Arjen Poutsma, + * @author Sam Brannen, + */, + Assume.assumeTrue(wwwSpringframeworkOrgIsAccessible());, +, + private static boolean wwwSpringframeworkOrgIsAccessible() {, + try {, + new Socket("www.springframework.org", 80);, + }, + catch (Exception e) {, + return false;, + }, + return true;, + }, +, + Assume.assumeTrue(wwwSpringframeworkOrgIsAccessible());, +]
[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.transaction.interceptor.TransactionAspectUtils;, +import org.springframework.util.StringUtils;, + private TransactionConfigurationAttributes configurationAttributes;, + String qualifier = transactionAttribute.getQualifier();, + PlatformTransactionManager tm;, + if (StringUtils.hasLength(qualifier)) {, + // Use autowire-capable factory in order to support extended qualifier matching, + // (only exposed on the internal BeanFactory, not on the ApplicationContext)., + BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory();, + tm = TransactionAspectUtils.getTransactionManager(bf, qualifier);, + }, + else {, + tm = getTransactionManager(testContext);, + }, + TransactionContext txContext = new TransactionContext(tm, transactionDefinition);, + String tmName = retrieveConfigurationAttributes(testContext).getTransactionManagerName();, + return testContext.getApplicationContext().getBean(tmName, PlatformTransactionManager.class);, + tmName + "] for
[+++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/DurationFormatter.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-core/src/main/java/org/springframework/core/MethodIntrospector.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + try {, + }, + catch (BeanDefinitionValidationException ex) {, + throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Invalid destruction signature", ex);, + }, + throw new BeanDefinitionValidationException("Couldn't find an init method named '" +, + initMethodName + "' on bean with name '" + beanName + "'");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + try {, + }, + catch (BeanDefinitionValidationException ex) {, + throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Invalid destruction signature", ex);, + }, + throw new BeanDefinitionValidationException("Couldn't find an init method named '" +, + initMethodName + "' on bean with name '" + beanName + "'");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, + * Copyright
[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + if (isDependent(beanName, dependsOnBean)) {, + throw new BeanCreationException("Circular depends-on relationship between '" +, + beanName + "' and '" + dependsOnBean + "'");, + }, + getBean(dependsOnBean);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + if (isDependent(beanName, dependsOnBean)) {, + throw new BeanCreationException("Circular depends-on relationship between '" +, + beanName + "' and '" + dependsOnBean + "'");, + }, + getBean(dependsOnBean);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, + * Determine whether the specified dependent bean has been registered as, + * dependent on the given bean or on any of its transitive dependencies., + * @param beanName the name of the bean to check,
[+++ b/spring-aop/src/main/java/org/springframework/aop/support/DynamicMethodMatcherPointcut.java, + * be overridden to customize ClassFilter behaviour as well., +++ b/spring-aop/src/main/java/org/springframework/aop/support/DynamicMethodMatcherPointcut.java, + * be overridden to customize ClassFilter behaviour as well., +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPointTests.java, + // we don't really care..., +++ b/spring-aop/src/main/java/org/springframework/aop/support/DynamicMethodMatcherPointcut.java, + * be overridden to customize ClassFilter behaviour as well., +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPointTests.java, + // we don't really care..., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/parsing/ComponentDefinition.java, + * validation or to the user view of the configuration and as such these may be omitted. A tool may wish to, +++ b/spring-aop/src/main/java/org/springframework/aop/support/DynamicMethodMatcherPointcut.java, + * be overridden to customize ClassFilter behaviour as well., +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPointTests.java, + // we don't really care..., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/parsing/ComponentDefinition.java,
[+++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriTemplateHandler.java, + * Copyright 2002-2016 the original author or authors., + UriComponentsBuilder builder = initUriComponentsBuilder(uriTemplate);, + UriComponents url = builder.build().expand(uriVariables).encode();, + return insertBaseUrl(url);, + public URI expand(String uriTemplate, Object... uriVariables) {, + UriComponentsBuilder builder = initUriComponentsBuilder(uriTemplate);, + UriComponents url = builder.build().expand(uriVariables).encode();, + return insertBaseUrl(url);, +++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriTemplateHandler.java, + * Copyright 2002-2016 the original author or authors., + UriComponentsBuilder builder = initUriComponentsBuilder(uriTemplate);, + UriComponents url = builder.build().expand(uriVariables).encode();, + return insertBaseUrl(url);, + public URI expand(String uriTemplate, Object... uriVariables) {, + UriComponentsBuilder builder = initUriComponentsBuilder(uriTemplate);, + UriComponents url = builder.build().expand(uriVariables).encode();, + return insertBaseUrl(url);, +++ b/spring-web/src/test/java/org/springframework/web/util/UriTemplateTests.java, + UriTemplate template = new UriTemplate("/hotels/{hotel}/bookings/{booking}");, +
[+++ b/spring-core/src/main/java/org/springframework/util/SocketUtils.java, + * Copyright 2002-2016 the original author or authors., + private enum SocketType {, + ServerSocket serverSocket = ServerSocketFactory.getDefault().createServerSocket(, + port, 1, InetAddress.getByName("localhost"));, + return minPort + random.nextInt(portRange + 1);, + Assert.isTrue(maxPort >= minPort, "'maxPort' must be greater than or equals 'minPort'");, + "Could not find an available %s port in the range [%d, %d] after %d attempts",, + name(), minPort, maxPort, searchCounter));, + SortedSet<Integer> availablePorts = new TreeSet<Integer>();, + while ((++attemptCount <= numRequested + 100) && availablePorts.size() < numRequested) {, + "Could not find %d available %s ports in the range [%d, %d]",, + numRequested, name(),
[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionWrapper.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionWrapper.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java, + private final ThreadLocal<TestContext> testContextHolder =, + ThreadLocal.withInitial(() -> copyTestContext(TestContextManager.this.testContext));, + public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception), + throws Exception {, +, +, +, + * @param exception the exception that was thrown during execution of the test, + * method or by a TestExecutionListener, or {@code null} if none was thrown, + public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception), + throws Exception {, +, +, +, +
[+++ b/spring-test/src/test/java/org/springframework/test/context/hierarchies/web/DispatcherWacRootWacEarTests.java, +import org.junit.Ignore;, + @Ignore("Superseded by verifyDispatcherWacConfig()"), + @Ignore("Superseded by verifyDispatcherWacConfig()"), +++ b/spring-test/src/test/java/org/springframework/test/context/hierarchies/web/DispatcherWacRootWacEarTests.java, +import org.junit.Ignore;, + @Ignore("Superseded by verifyDispatcherWacConfig()"), + @Ignore("Superseded by verifyDispatcherWacConfig()"), +++ b/spring-test/src/test/java/org/springframework/test/context/hierarchies/web/RootWacEarTests.java, +import org.junit.Ignore;, + @Ignore("Superseded by verifyRootWacConfig()")]
[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBean.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.util.ClassUtils;, + implements FactoryBean<SessionFactory>, ResourceLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean {, + private ConfigurableListableBeanFactory beanFactory;, +, + @Nullable, + /**, + * Accept the containing {@link BeanFactory}, registering corresponding Hibernate, + * {@link org.hibernate.resource.beans.container.spi.BeanContainer} integration for, + * it if possible. This requires a Spring {@link ConfigurableListableBeanFactory}, + * and Hibernate 5.3 or higher on the classpath., + * @since 5.1, + * @see LocalSessionFactoryBuilder#setBeanContainer, + */, + @Override, + public void setBeanFactory(BeanFactory beanFactory) {, + if (beanFactory instanceof ConfigurableListableBeanFactory &&, + ClassUtils.isPresent("org.hibernate.resource.beans.container.spi.BeanContainer",, + getClass().getClassLoader())) {, + this.beanFactory = (ConfigurableListableBeanFactory) beanFactory;, +
[+++ b/spring-framework-reference/src/mvc.xml, + id="mvc-HandlerExceptionResolver"><interfacename>HandlerExceptionResolver</interfacename></title>, +, + <para>By default, the <classname>DispatcherServlet</classname> registers, + the <classname>DefaultHandlerExceptionResolver</classname>. This resolver, + handles certain standard Spring MVC exceptions by setting a specific, + response status code:, + <informaltable>, + <tgroup cols="2">, + <thead>, + <row>, + <entry>Exception</entry>, + <entry>HTTP Status Code</entry>, + </row>, + </thead>, + <tbody>, + <row>, + <entry><classname>ConversionNotSupportedException</classname></entry>, + <entry>500 (Internal Server Error)</entry>, + </row>, + <row>, + <entry><classname>HttpMediaTypeNotAcceptableException</classname></entry>, + <entry>406 (Not Acceptable)</entry>, + </row>, + <row>, + <entry><classname>HttpMediaTypeNotSupportedException</classname></entry>, + <entry>415 (Unsupported Media Type)</entry>, + </row>, + <row>, + <entry><classname>HttpMessageNotReadableException</classname></entry>, + <entry>400 (Bad Request)</entry>, + </row>, + <row>, + <entry><classname>HttpMessageNotWritableException</classname></entry>, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +import org.springframework.lang.Nullable;, + @Nullable, + private List<HandlerMapping> handlerMappings;, + @Nullable, + private List<HandlerAdapter> handlerAdapters;, + @Nullable, + private List<HandlerResultHandler> resultHandlers;, + * <p><strong>Note:</strong> This method may return {@code null} if invoked, + * prior to {@link #setApplicationContext(ApplicationContext)}., + * @return immutable list with the configured mappings or {@code null}, + @Nullable, + if (this.handlerMappings == null) {, + return Mono.error(HANDLER_NOT_FOUND_EXCEPTION);, + }, + if (this.handlerAdapters != null) {, + }, + if (this.resultHandlers != null) {, + }]
[+++ b/org.springframework.orm/src/test/java/org/springframework/orm/jpa/memdb.xml, + <bean id="entityManager" class="org.springframework.orm.jpa.support.SharedEntityManagerBean"/>, + <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"/>]
[+++ b/org.springframework.aop/ivy.xml, + <dependency org="org.aspectj" name="com.springsource.org.aspectj.weaver" rev="1.6.2.RELEASE" conf="optional, aspectj->compile"/>, + <dependency org="org.junit" name="com.springsource.org.junit" rev="4.5.0" conf="test->runtime" />]
[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + * Copyright 2002-2016 the original author or authors., + * returned by {@link JsonSerializer#handledType()}, which must not be {@code null}., + * Configure custom deserializers. Each deserializer is registered for the type, + * returned by {@link JsonDeserializer#handledType()}, which must not be {@code null}., + * @since 4.3, + * @see #deserializersByType(Map), + */, + public Jackson2ObjectMapperBuilder deserializers(JsonDeserializer<?>... deserializers) {, + if (deserializers != null) {, + for (JsonDeserializer<?> deserializer : deserializers) {, + Class<?> handledType = deserializer.handledType();, + if (handledType == null || handledType == Object.class) {, + throw new IllegalArgumentException("Unknown handled type in "
[+++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.jruby/com.springsource.org.jruby/1.2.0/com.springsource.org.jruby-1.2.0.jar" sourcepath="/IVY_CACHE/org.jruby/com.springsource.org.jruby/1.2.0/com.springsource.org.jruby-sources-1.2.0.jar"/>, +++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.jruby/com.springsource.org.jruby/1.2.0/com.springsource.org.jruby-1.2.0.jar" sourcepath="/IVY_CACHE/org.jruby/com.springsource.org.jruby/1.2.0/com.springsource.org.jruby-sources-1.2.0.jar"/>, +++ b/org.springframework.integration-tests/.classpath, + <classpathentry kind="var" path="IVY_CACHE/com.caucho/com.springsource.com.caucho/3.2.1/com.springsource.com.caucho-3.2.1.jar" sourcepath="/IVY_CACHE/com.caucho/com.springsource.com.caucho/3.2.1/com.springsource.com.caucho-sources-3.2.1.jar"/>, +++ b/org.springframework.context/.classpath, + <classpathentry kind="var" path="IVY_CACHE/org.jruby/com.springsource.org.jruby/1.2.0/com.springsource.org.jruby-1.2.0.jar" sourcepath="/IVY_CACHE/org.jruby/com.springsource.org.jruby/1.2.0/com.springsource.org.jruby-sources-1.2.0.jar"/>, +++ b/org.springframework.integration-tests/.classpath, + <classpathentry kind="var" path="IVY_CACHE/com.caucho/com.springsource.com.caucho/3.2.1/com.springsource.com.caucho-3.2.1.jar" sourcepath="/IVY_CACHE/com.caucho/com.springsource.com.caucho/3.2.1/com.springsource.com.caucho-sources-3.2.1.jar"/>, +++ b/org.springframework.web/.classpath, + <classpathentry kind="var" path="IVY_CACHE/com.caucho/com.springsource.com.caucho/3.2.1/com.springsource.com.caucho-3.2.1.jar" sourcepath="/IVY_CACHE/com.caucho/com.springsource.com.caucho/3.2.1/com.springsource.com.caucho-sources-3.2.1.jar"/>]
[+++ b/spring-web/src/main/java/org/springframework/web/client/MessageBodyClientHttpResponseWrapper.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, + return this.exchange.<Map<String, String>>getAttribute(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE)., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, + return this.exchange.<Map<String, String>>getAttribute(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE)., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicate.java, + * @see RouterFunctions#route(RequestPredicate, HandlerFunction), + * @see RouterFunctions#subroute(RequestPredicate, RouterFunction), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, + return this.exchange.<Map<String, String>>getAttribute(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE)., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicate.java, + * @see RouterFunctions#route(RequestPredicate, HandlerFunction), + * @see RouterFunctions#subroute(RequestPredicate, RouterFunction), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicates.java, + defaultRequest.exchange().getAttributes().put(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, + return this.exchange.<Map<String, String>>getAttribute(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE)., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicate.java, + * @see RouterFunctions#route(RequestPredicate, HandlerFunction), + * @see RouterFunctions#subroute(RequestPredicate, RouterFunction), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicates.java, + defaultRequest.exchange().getAttributes().put(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RouterFunction.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may
[+++ b/spring-web/src/main/java/org/springframework/web/util/UriTemplate.java, + pattern.append("([^/]*)");, +++ b/spring-web/src/main/java/org/springframework/web/util/UriTemplate.java, + pattern.append("([^/]*)");, +++ b/spring-web/src/test/java/org/springframework/web/util/UriTemplateTests.java, + @Test // SPR-13627, + @Test // SPR-16169, + public void matchWithMultipleSegmentsAtTheEnd() {, + UriTemplate template = new UriTemplate("/account/{accountId}");, + assertFalse(template.matches("/account/15/alias/5"));, + }, +, + @Test // SPR-13705]
[+++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java, + * Copyright 2002-2019 the original author or authors., + Charset charset = mediaType.getCharset() != null ? mediaType.getCharset() : getDefaultCharset();, + protected MediaType getMediaType(@Nullable MediaType mediaType) {]
[+++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, + * Configure a contextPath override that will replace the contextPath of, + * proxy-forwarded requests. This is useful when external clients are not, + * aware of the application context path to which the proxy is configured, + * to forward to., + *, + * <p>For example, a client may connect to a proxy at:<br>, + * {@code https://example.com/}, + *, + * <p>In turn the proxy forwards to the application at:<br>, + * {@code 192.168.1.1:8080/example/}, + *, + public void setContextPathOverride(String contextPath) {, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, + * Configure a contextPath override that will replace
[+++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, + Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH);, + map.put(attribute, value);, + this.parameters = Collections.unmodifiableMap(map);, + * @return the character set, or {@code null} if not available, + * @return the parameter value, or {@code null} if not present, + * @return a read-only map (possibly empty, never {@code null}), + return this.parameters;, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, + Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH);, + map.put(attribute, value);, + this.parameters = Collections.unmodifiableMap(map);, + * @return the character set, or {@code null} if not available, + * @return the parameter value, or {@code null} if not present, + * @return
[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/SockJsFrame.java, + * Represents a SockJS frame. Provides factory methods to create SockJS frames on, + * the server side., + private static final SockJsFrame OPEN_FRAME = new SockJsFrame("o");, + private static final SockJsFrame HEARTBEAT_FRAME = new SockJsFrame("h");, + private static final SockJsFrame CLOSE_GO_AWAY_FRAME = closeFrame(3000, "Go away!");, + private static final SockJsFrame CLOSE_ANOTHER_CONNECTION_OPEN_FRAME = closeFrame(2010, "Another connection still open");, + public static SockJsFrame openFrame() {, + return OPEN_FRAME;, + }, +, + public static SockJsFrame heartbeatFrame() {, + return HEARTBEAT_FRAME;, + }, +, + public static SockJsFrame messageFrame(SockJsMessageCodec codec, String... messages) {, + String encoded = codec.encode(messages);,
[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + // Explicit alias for a different target meta-annotation?, + if (!searchWithinSameAnnotation && !targetAnnotationType.equals(aliasedAnnotationType)) {, + return null;, + }, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + // Explicit alias for a different target meta-annotation?, + if (!searchWithinSameAnnotation && !targetAnnotationType.equals(aliasedAnnotationType)) {, + return null;, + }, +, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, + public void findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames() {, + final String[] xmlLocations = new String[] { "test.xml" };, + final String[] propFiles = new String[] { "test.properties" };, +, + Class<?> element = AliasedComposedContextConfigAndTestPropSourceClass.class;, +, + ContextConfig contextConfig = findMergedAnnotation(element, ContextConfig.class);, + assertNotNull("@ContextConfig on " + element, contextConfig);, + assertArrayEquals("locations", xmlLocations, contextConfig.locations());, + assertArrayEquals("value",
[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, + * @see #handleMethodArgumentNotValidException, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, + * @see #handleMethodArgumentNotValidException, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/DefaultFlashMapManager.java, + FlashMap match = matches.remove(0);, + allMaps.remove(match);, + return match;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, + * @see #handleMethodArgumentNotValidException, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/DefaultFlashMapManager.java, + FlashMap match = matches.remove(0);, + allMaps.remove(match);, + return match;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/FlashMapTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *,
[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanInfoFactory.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/DestinationPatternsMessageCondition.java, + * Copyright 2002-2015 the original author or authors., + for (String pattern : this.patterns) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/DestinationPatternsMessageCondition.java, + * Copyright 2002-2015 the original author or authors., + for (String pattern : this.patterns) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, + bindingResult.addError(new ObjectError(paramName, "Payload value must not be empty"));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/DestinationPatternsMessageCondition.java, + * Copyright 2002-2015 the original author or authors., + for (String pattern : this.patterns) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, + bindingResult.addError(new ObjectError(paramName, "Payload value must not be empty"));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, + matches.add(new Match(match, this.handlerMethods.get(mapping)));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/DestinationPatternsMessageCondition.java, + * Copyright 2002-2015 the original author or authors., + for (String pattern : this.patterns)
[+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/AbstractHttpServer.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, + * Add URL patterns as list to which the registered interceptor should apply to., + */, + public InterceptorRegistration addPathPatterns(List<String> patterns) {, + this.includePatterns.addAll(patterns);, + return this;, + }, +, + /**, + * Add URL patterns as list to which the registered interceptor should not apply to., + */, + public InterceptorRegistration excludePathPatterns(List<String> patterns) {, + this.excludePatterns.addAll(patterns);, + return this;, + }, +, + /**]
[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.context.annotation.DeferredImportSelector.Group;, + * @author Stephane Nicoll, + Map<Object, DeferredImportSelectorGrouping> groupings = new LinkedHashMap<>();, + Map<AnnotationMetadata, ConfigurationClass> configurationClasses = new HashMap<>();, + Class<? extends Group> group = deferredImport.getImportSelector().getImportGroup();, + DeferredImportSelectorGrouping grouping = groupings.computeIfAbsent(, + (group == null ? deferredImport : group),, + (key) -> new DeferredImportSelectorGrouping(createGroup(group)));, + grouping.add(deferredImport);, + configurationClasses.put(deferredImport.getConfigurationClass().getMetadata(),, + deferredImport.getConfigurationClass());, + }, + for (DeferredImportSelectorGrouping grouping : groupings.values()) {, + grouping.getImports().forEach((entry) -> {, + ConfigurationClass configurationClass = configurationClasses.get(, + entry.getMetadata());, + processImports(configurationClass, asSourceClass(configurationClass),, + asSourceClasses(entry.getImportClassName()), false);, + configurationClass.getMetadata().getClassName() + "]", ex);, + }, + });, +, + private Group createGroup(@Nullable Class<? extends Group> type) {,
[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * @param annotatedElement the element to look for annotations on, + * @param annotationType the annotation type to look for, + * @return the annotations found or an empty set (never {@code null}), + * @param annotatedElement the element to look for annotations on, + * @param annotationType the annotation type to look for, + * @return the annotations found or an empty set (never {@code null}), + * @param annotatedElement the element to look for annotations on, + * @param annotationType the annotation type to look for, + * @return the annotations found or an
[+++ b/spring-core/src/main/java/org/springframework/lang/UsesJava7.java, + * Copyright 2002-2018 the original author or authors., + * @deprecated as of 5.0 since the framework is based on Java 8+ now, +++ b/spring-core/src/main/java/org/springframework/lang/UsesJava7.java, + * Copyright 2002-2018 the original author or authors., + * @deprecated as of 5.0 since the framework is based on Java 8+ now, +++ b/spring-core/src/main/java/org/springframework/lang/UsesJava8.java, + * Copyright 2002-2018 the original author or authors., + * @deprecated as of 5.0 since the framework is based on Java 8+ now, +++ b/spring-core/src/main/java/org/springframework/lang/UsesJava7.java, + * Copyright 2002-2018 the original author or authors., + * @deprecated as of 5.0 since the framework is
[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java, + * Copyright 2002-2015 the original author or authors., + * Factory used to create a {@link CallMetaDataProvider} implementation, + * based on the type of databse being used., +, + private static final Log logger = LogFactory.getLog(CallMetaDataProviderFactory.class);, +, +, + provider.initializeWithProcedureColumnMetaData(databaseMetaData,, + context.getCatalogName(), context.getSchemaName(), context.getProcedureName());, + throw new DataAccessResourceFailureException("Error retrieving database metadata", ex);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java, + * Copyright 2002-2015 the original author or authors., + * Factory used to create a {@link CallMetaDataProvider} implementation, + * based on the type of databse being used., +, + private static final Log logger = LogFactory.getLog(CallMetaDataProviderFactory.class);, +, +, +
[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.LinkedMultiValueMap;, + public static final HttpHeaders EMPTY =, + new ReadOnlyHttpHeaders(new HttpHeaders(new LinkedMultiValueMap<>(0)));, + final MultiValueMap<String, String> headers;, + * Construct a new, empty instance of the {@code HttpHeaders} object., + this(CollectionUtils.toMultiValueMap(, + new LinkedCaseInsensitiveMap<>(8, Locale.ENGLISH)));, + * Construct a new {@code HttpHeaders} instance backed by an existing map., + public HttpHeaders(MultiValueMap<String, String> headers) {, + Assert.notNull(headers, "headers must not be null");, + return this.headers.getFirst(headerName);, + this.headers.add(headerName, headerValue);, + this.headers.addAll(key, values);, + this.headers.addAll(values);, + this.headers.set(headerName, headerValue);, + this.headers.setAll(values);, + return this.headers.toSingleValueMap();, + if (headers instanceof ReadOnlyHttpHeaders) {, + return headers;, + }, + else
[+++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws, +.idea, +out, +test-output, +atlassian-ide-plugin.xml, +.gradletasknamecache, +++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws,
[+++ b/src/dist/changelog.txt, +* Java 5 Closeable and Java 7 AutoCloseable automatically detected as destroy methods (SPR-10034), +* @Bean destroy method inference not applying for DisposableBean implementers (avoiding double destruction), +* deprecated Oracle OC4J support (OC4JJtaTransactionManager, OC4JLoadTimeWeaver) in favor of Oracle WebLogic, +* Hibernate 4 support independently compiled against Hibernate 4.1, avoiding the use of reflection (SPR-10039)]
[+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, + * Copyright 2002-2019 the original author or authors., + this.order = resolveOrder(this.targetMethod);, + private static List<ResolvableType> resolveDeclaredEventTypes(Method method, @Nullable EventListener ann) {, + private static int resolveOrder(Method method) {, +]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.context/src/test/java/org/springframework/context/access/ContextBeanFactoryReferenceTests.java, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.assertNotNull;, +import org.junit.Test;, + * Unit test for {@link ContextBeanFactoryReference}, + * @author Chris Beams, +public class ContextBeanFactoryReferenceTests {, + @Test, +
[+++ /dev/null, +++ /dev/null, +++ b/CODE_OF_CONDUCT.adoc, +http://contributor-covenant.org[Contributor Covenant], version 1.3.0, available at, +http://contributor-covenant.org/version/1/3/0/[contributor-covenant.org/version/1/3/0/], +++ /dev/null, +++ b/CODE_OF_CONDUCT.adoc, +http://contributor-covenant.org[Contributor Covenant], version 1.3.0, available at, +http://contributor-covenant.org/version/1/3/0/[contributor-covenant.org/version/1/3/0/], +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a ticket in the [Github issue tracker](https://github.com/spring-projects/spring-framework/issues)., +[Rewriting History section of Pro Git](http://git-scm.com/book/en/Git-Tools-Rewriting-History), +[Commit Guidelines section of Pro Git](http://git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project#Commit-Guidelines), +[Asciidoctor](http://asciidoctor.org/) format. For trivial changes, you may be able to browse,, +[Editing AsciiDoc with Live Preview](http://asciidoctor.org/docs/editing-asciidoc-with-live-preview/)., +[System Monitor](http://asciidoctor.org/docs/editing-asciidoc-with-live-preview/#using-a-system-monitor), +++ /dev/null, +++ b/CODE_OF_CONDUCT.adoc, +http://contributor-covenant.org[Contributor Covenant], version 1.3.0, available at, +http://contributor-covenant.org/version/1/3/0/[contributor-covenant.org/version/1/3/0/], +++ b/CONTRIBUTING.md, +[Github issue tracker](https://github.com/spring-projects/spring-framework/issues), using a few different keywords., +When ready create a
[+++ b/spring-context/src/test/java/org/springframework/context/annotation/spr10546/ImportedConfig.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java, + List<EventListenerFactory> factories = new ArrayList<>(beans.values());, + AnnotationAwareOrderComparator.sort(factories);, + return factories;, + (MethodIntrospector.MetadataLookup<EventListener>) method ->, + AnnotatedElementUtils.findMergedAnnotation(method, EventListener.class));, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java, + List<EventListenerFactory> factories = new ArrayList<>(beans.values());, + AnnotationAwareOrderComparator.sort(factories);, + return factories;, + (MethodIntrospector.MetadataLookup<EventListener>) method ->, + AnnotatedElementUtils.findMergedAnnotation(method, EventListener.class));, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, + Map<String, SchedulingConfigurer> beans =, + List<SchedulingConfigurer> configurers = new ArrayList<>(beans.values());, + AnnotationAwareOrderComparator.sort(configurers);, + for (SchedulingConfigurer configurer : configurers) {, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java, + List<EventListenerFactory> factories = new ArrayList<>(beans.values());, + AnnotationAwareOrderComparator.sort(factories);, + return factories;, + (MethodIntrospector.MetadataLookup<EventListener>) method ->, + AnnotatedElementUtils.findMergedAnnotation(method, EventListener.class));, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, + Map<String, SchedulingConfigurer>
[+++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.web.util.pattern.ParsingPathMatcher;, + String lookupPath = LookupPath.getCurrent(exchange).getPath();, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.web.util.pattern.ParsingPathMatcher;, + String lookupPath = LookupPath.getCurrent(exchange).getPath();, +++ b/spring-web/src/main/java/org/springframework/web/server/support/LookupPath.java, +import org.springframework.web.server.ServerWebExchange;, + * @author Rossen Stoyanchev, + /**, + * Name of request attribute under which the LookupPath is stored via, + * {@link #getOrCreate} and accessed via {@link #getCurrent}., + */, + public static final String LOOKUP_PATH_ATTRIBUTE_NAME = LookupPath.class.getName();, +, + /**, + * Get the LookupPath for the current request from the request attribute, + * {@link #LOOKUP_PATH_ATTRIBUTE_NAME} or otherwise create and stored it, + * under that attribute for subsequent use., + * @param exchange
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, + private static PathPattern mergePatterns(@Nullable PathPattern oldPattern, PathPattern newPattern) {, + return oldPattern.combine(newPattern);, + traceMatch("Pattern", this.pattern.getPatternString(), request.path(), info != null);, + mergeAttributes(request, info.getUriVariables(), this.pattern);, + PathPattern pattern) {, + (PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, + .map(info -> new SubPathServerRequestWrapper(request, info, this.pattern));, + PathPattern.PathRemainingMatchInfo info, PathPattern pattern) {, + Map<String, String> pathVariables, PathPattern pattern) {, + (PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, + private static PathPattern mergePatterns(@Nullable PathPattern oldPattern, PathPattern newPattern) {, + return oldPattern.combine(newPattern);, + traceMatch("Pattern", this.pattern.getPatternString(), request.path(), info != null);, + mergeAttributes(request, info.getUriVariables(), this.pattern);, + PathPattern pattern) {, + (PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, + .map(info -> new SubPathServerRequestWrapper(request, info, this.pattern));, + PathPattern.PathRemainingMatchInfo info,
[+++ b/.github/ISSUE_TEMPLATE.md, +<!--, +!!! For Security Vulnerabilities, please go to https://pivotal.io/security !!!, +-->, +**Affects:** \<Spring Framework version>, +, +---, +<!--, +Thanks for taking the time to create an issue. Please read the following:, +, +- Questions should be asked on Stack Overflow., +- For bugs, specify affected versions and explain what you are trying to do., +- For enhancements, provide context and describe the problem., +, +Issue or Pull Request? Create only one, not both. GitHub treats them as the same., +If unsure, start with an issue, and if you submit a pull request later, the, +issue will be
[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJAfterReturningAdvice.java, + * Copyright 2002-2013 the original author or authors., + Class<?> type = getDiscoveredReturningType();, + return (matchesReturnValue(type, method, returnValue) &&, + /**, + * Following AspectJ semantics, if a return value is null (or return type is void),, + * then the return type of target method should be used to determine whether advice, + * is invoked or not. Also, even if the return type is void, if the type of argument, + * declared in the advice method is Object, then the advice must still get invoked., + * @param type the type of argument
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, + * Copyright 2002-2019 the original author or authors., + return Mono.defer(() -> exchangeFunction.exchange(request)), + .switchIfEmpty(NO_HTTP_CLIENT_RESPONSE_ERROR);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, + * Copyright 2002-2019 the original author or authors., + return Mono.defer(() -> exchangeFunction.exchange(request)), + .switchIfEmpty(NO_HTTP_CLIENT_RESPONSE_ERROR);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunction.java, + * Copyright 2002-2019 the original author or authors., + * <p>The filter is executed when a {@code Subscriber} subscribes to the, + * {@code Publisher} returned by the {@code WebClient}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, + * Copyright 2002-2019 the original author or authors., + return Mono.defer(() -> exchangeFunction.exchange(request)), + .switchIfEmpty(NO_HTTP_CLIENT_RESPONSE_ERROR);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunction.java, + * Copyright 2002-2019 the original author or authors., +
[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, + logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex);]
[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, + int startParen = signature.indexOf('(');, + int endParen = signature.indexOf(')');, + if (startParen > -1 && endParen == -1) {, + else if (startParen == -1 && endParen > -1) {, + else if (startParen == -1) {, + String methodName = signature.substring(0, startParen);, + StringUtils.commaDelimitedListToStringArray(signature.substring(startParen + 1, endParen));, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, + int startParen = signature.indexOf('(');, + int endParen = signature.indexOf(')');, + if (startParen > -1 && endParen == -1) {, + else if (startParen == -1 && endParen > -1) {, + else if (startParen == -1) {, + String methodName = signature.substring(0, startParen);, + StringUtils.commaDelimitedListToStringArray(signature.substring(startParen
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/WebSocketHandler.java, + * Flux&lt;WebSocketMessage&gt; output = session.receive(), + * stream receives a cancellation signal.]
[+++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + if(resource.getFilename() == null) {, + return null;, + }, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + if(resource.getFilename() == null) {, + return null;, + }, +++ b/spring-web/src/test/java/org/springframework/http/converter/ResourceHttpMessageConverterTests.java, +import java.util.Arrays;, +import org.springframework.core.io.ByteArrayResource;, +import static org.junit.Assert.*;, +, + // SPR-10848, +, + @Test, + public void writeByteArrayNullMediaType() throws IOException {, + MockHttpOutputMessage outputMessage = new MockHttpOutputMessage();, + byte[] byteArray = {1, 2, 3};, + Resource body = new ByteArrayResource(byteArray);, + converter.write(body, null, outputMessage);, + assertTrue(Arrays.equals(byteArray, outputMessage.getBodyAsBytes()));, + }, +]
[+++ b/spring-context/src/test/java/org/springframework/context/expression/FactoryBeanAccessTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/FactoryBeanAccessTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/FactoryBeanAccessTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/FactoryBeanAccessTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/FactoryBeanAccessTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelCompilationCoverageTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/FactoryBeanAccessTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelCompilationCoverageTests.java, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/FactoryBeanAccessTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelCompilationCoverageTests.java, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsTestNGTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/FactoryBeanAccessTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelCompilationCoverageTests.java, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsTestNGTests.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ExpressionValueMethodArgumentResolver.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/FactoryBeanAccessTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelCompilationCoverageTests.java, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsTestNGTests.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ExpressionValueMethodArgumentResolver.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/accept/CompositeContentTypeResolverBuilderTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/FactoryBeanAccessTests.java, +++ b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java, +++
[+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, + else if(!this.pattern.substring(pos - 1).equals(".*")) {, + else {, + pos++;, + }, + }, + else {, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, + else if(!this.pattern.substring(pos - 1).equals(".*")) {, + else {, + pos++;, + }, + }, + else {, +++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java, + assertEquals(2, comparator.compare("/hotels/{hotel}", "/hotels/{hotel}.*"));]
[+++ b/spring-core/src/main/java/org/springframework/util/ResourceUtils.java, + /** URL protocol for a JBoss file system resource: "vfsfile" */, + public static final String URL_PROTOCOL_VFSFILE = "vfsfile";, +, + /** URL protocol for a general JBoss VFS resource: "vfs" */, + * that is, has protocol "file", "vfsfile" or "vfs"., + return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||, + URL_PROTOCOL_VFS.equals(protocol));, + * that is, has protocol "jar", "zip", "vfszip" or "wsjar"., + URL_PROTOCOL_VFSZIP.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol));]
[+++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.Constructor;, +import org.springframework.util.ReflectionUtils;, + Constructor<?> constructor = instanceClass.getDeclaredConstructor();, + ReflectionUtils.makeAccessible(constructor);, + return (T) constructor.newInstance();, +++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.Constructor;, +import org.springframework.util.ReflectionUtils;, + Constructor<?> constructor = instanceClass.getDeclaredConstructor();, + ReflectionUtils.makeAccessible(constructor);, + return (T) constructor.newInstance();, +++ b/spring-core/src/test/java/org/springframework/core/io/support/DummyPackagePrivateFactory.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of
[+++ b/build-spring-framework/resources/changelog.txt, +* support for Hibernate Validator 4.1 and EclipseLink 2.1, +* ConversionService is able to deal with empty collections and nested collections (fixed regression), +* ConversionService properly handles nested Resource arrays in Map values (fixed regression), +* ConversionService does not accidentally use copy constructor for same type , +* BeanWrapper/DataBinder's "autoGrowNestedPaths" works for Maps as well, +* Spring's MessageEndpointFactory classes are now JCA 1.6 compliant as well, +* AbstractJaxWsServiceExporter supports "bindingType" bean property, overriding @BindingType, +* AbstractJaxWsServiceExporter supports "webServiceFeatures" bean property on JAX-WS 2.2, +* added "validationMessageSource" property to LocalValidatorFactoryBean, for Spring-based messages, +* DispatcherServlet applies default view
[+++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, + * Return a {@link DataBufferFactory} that can be used for creating the body., + * @return a buffer factory, + * @see #writeWith(Publisher), + */, + DataBufferFactory bufferFactory();, +, + /**, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, + * Return a {@link DataBufferFactory} that can be used for creating the body., + * @return a buffer factory, + * @see #writeWith(Publisher), + */, + DataBufferFactory bufferFactory();, +, + /**, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java, + private final AtomicReference<State> state = new AtomicReference<>(State.UNSUBSCRIBED);, +, + return (this.demand.get() > 0);, + private boolean changeState(State oldState, State newState) {, +, + private State state() {, +,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/LabelTag.java, + * Copyright 2002-2016 the original author or authors.]
[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java, + public void setVariable(@Nullable String name, @Nullable Object value) {, + // For backwards compatibility, we ignore null names here..., + // And since ConcurrentHashMap cannot store null values, we simply take null, + // as a remove from the Map (with the same result from lookupVariable below)., + if (name != null) {, + }]
[+++ b/spring-web/src/main/java/org/springframework/http/server/DefaultRequestPath.java, + validateContextPath(path.value(), contextPath);, + throw new IllegalStateException("Failed to initialize contextPath '" + contextPath + "'" +, + " for requestPath '" + path.value() + "'");, + }, +, + private static void validateContextPath(String fullPath, String contextPath) {, + int length = contextPath.length();, + if (contextPath.charAt(0) != '/' || contextPath.charAt(length - 1) == '/') {, + throw new IllegalArgumentException("Invalid contextPath: '" + contextPath + "': " +, + "must start with '/' and not end with '/'");, + }, + if (!fullPath.startsWith(contextPath)) {, + throw new IllegalArgumentException("Invalid contextPath '" + contextPath + "': " +, + "must match
[+++ b/spring-core/src/main/java/org/springframework/asm/SpringAsmInfo.java, + * of the ASM bytecode manipulation library (currently based on version 6.0)., +++ b/spring-core/src/main/java/org/springframework/asm/SpringAsmInfo.java, + * of the ASM bytecode manipulation library (currently based on version 6.0)., +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, + Type[] bounds = (boundsType == Kind.UPPER ? wildcardType.getUpperBounds() : wildcardType.getLowerBounds());]
[+++ b/src/reference/docbook/index.xml, + <year>2004-2013</year>]
[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.CompletableFuture;, +import java.util.concurrent.CompletionException;, +import java.util.function.Supplier;, +import org.springframework.lang.UsesJava8;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.concurrent.ListenableFuture;, + // Java 8's CompletableFuture type present?, + private static final boolean completableFuturePresent = ClassUtils.isPresent(, + "java.util.concurrent.CompletableFuture", AsyncExecutionInterceptor.class.getClassLoader());, +, +, + * Delegate for actually executing the given task with the chosen executor., + * @param task the task to execute, + * @param executor the chosen executor, + * @param returnType the declared return type (potentially a {@link Future} variant), + * @return the execution result (potentially a corresponding {@link Future} handle), + */, + protected Object doSubmit(Callable<Object> task, AsyncTaskExecutor executor, Class<?>
[+++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/security/CallbacksSecurityTests.java, + * Copyright 2002-2012 the original author or authors., +import org.junit.Ignore;, + @Ignore // TODO SPR-8116 passes under Eclipse, but fails under Gradle with https://gist.github.com/1664133, + public void testContainerPrivileges() throws Exception {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/security/CallbacksSecurityTests.java, + * Copyright 2002-2012 the original author or authors., +import org.junit.Ignore;, + @Ignore // TODO SPR-8116 passes under Eclipse, but fails under Gradle with https://gist.github.com/1664133, + public void testContainerPrivileges() throws Exception {, +++ b/spring-orm/src/test/java/org/springframework/orm/jpa/hibernate/HibernateMultiEntityManagerFactoryIntegrationTests.java, + * Copyright 2002-2012 the original author or authors., +@org.junit.Ignore // TODO SPR-8116 work out JPA 1 vs 2 classpath issues in spring-orm, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/security/CallbacksSecurityTests.java, + * Copyright 2002-2012
[+++ b/spring-oxm/src/test/java/org/springframework/oxm/xstream/XStreamMarshallerTests.java, +import java.io.ByteArrayOutputStream;, +import java.io.Reader;, +import java.io.StringReader;, +import java.io.StringWriter;, +import java.io.Writer;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicInteger;, +import com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter;, +import com.thoughtworks.xstream.io.HierarchicalStreamWriter;, +import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;, +import com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver;, +import com.thoughtworks.xstream.io.json.JsonWriter;, +import org.junit.Before;, +import org.junit.Ignore;, +import org.junit.Test;, +import org.mockito.InOrder;, +import org.w3c.dom.Document;, +import org.w3c.dom.Element;, +import org.w3c.dom.Node;, +import org.w3c.dom.Text;, +import org.xml.sax.Attributes;, +import org.xml.sax.ContentHandler;, +import org.xmlunit.builder.Input;, +import org.xmlunit.xpath.JAXPXPathEngine;, +, +import org.springframework.util.xml.StaxUtils;, +, +import static org.junit.Assert.*;, +import static org.mockito.BDDMockito.*;, +import static org.xmlunit.matchers.CompareMatcher.*;, +, + public void createMarshaller() {, +, + marshaller.setConverters(new EncodedByteArrayConverter());, + marshaller.setUseAttributeFor(Collections.singletonMap(Flight.class, Collections.singletonList("flightNumber")));, +, +++ b/spring-oxm/src/test/java/org/springframework/oxm/xstream/XStreamMarshallerTests.java, +import java.io.ByteArrayOutputStream;, +import java.io.Reader;, +import java.io.StringReader;, +import java.io.StringWriter;, +import java.io.Writer;, +import java.util.Arrays;, +import java.util.Collections;,
[+++ b/build-spring-framework/resources/changelog.txt, +* revised project layout and build system (module-based sources, bundle repository), +* updated entire codebase for Java 5 code style (generics, varargs, StringBuilder), +* removed WebLogic 8.1 and WebSphere 5.1 support, +* removed native TopLink API support (superseded by JPA), +* removed Commons Attributes support (superseded by Java 5 annotations), +* removed Jakarta JSTL support for JSP 1.2 (superseded by JSP 2.0), +* removed outdated Struts 1.x Action delegation support, +* deprecated form controller hierarchy in favor of @MVC form object handling, +* deprecated JUnit 3.8 test class hierarchy in favor of test context framework, +* introduced ShallowEtagHeaderFilter]
[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator.java, + * Copyright 2002-2017 the original author or authors., + if (logger.isErrorEnabled()) {, + logger.error("Closing session due to exception for " + session, exception);]
[+++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, + * <p>E.g.: servlet mapping = "/*"; request URI = "/test/a" -> "/test/a"., + * <p>E.g.: servlet mapping = "/"; request URI = "/test/a" -> "/test/a"., + String sanitizedPathWithinApp = getSanitizedPath(pathWithinApp);, + String path;, +, + // if the app container sanitized the servletPath, check against the sanitized version, + if(servletPath.indexOf(sanitizedPathWithinApp) != -1) {, + path = getRemainingPath(sanitizedPathWithinApp, servletPath, false);, + }, + else {, + path = getRemainingPath(pathWithinApp, servletPath, false);, + }, +, + else if (ignoreCase && (Character.toLowerCase(c1) == Character.toLowerCase(c2))) {, + else if (index1 == requestUri.length()) {, + * Sanitize the given path with
[+++ b/src/reference/docbook/aop.xml, + <imageobject>, + format="PNG" width="400"/>, + <imageobject>, + format="PNG" width="400" />, +++ b/src/reference/docbook/aop.xml, + <imageobject>, + format="PNG" width="400"/>, + <imageobject>, + format="PNG" width="400" />, +++ b/src/reference/docbook/beans-scopes.xml, + <imageobject>, + <imagedata align="center" fileref="images/singleton.png" format="PNG" width="400" />, + <imageobject>, + <imagedata align="center" fileref="images/prototype.png" format="PNG" width="400"/>, +++ b/src/reference/docbook/aop.xml, + <imageobject>, + format="PNG" width="400"/>, + <imageobject>, + format="PNG" width="400" />, +++ b/src/reference/docbook/beans-scopes.xml, + <imageobject>, + <imagedata align="center" fileref="images/singleton.png" format="PNG" width="400" />, + <imageobject>, + <imagedata align="center" fileref="images/prototype.png" format="PNG" width="400"/>, +++ b/src/reference/docbook/beans.xml, + <imagedata align="center" fileref="images/container-magic.png" format="PNG" width="250" />, +++ b/src/reference/docbook/aop.xml, + <imageobject>, + format="PNG" width="400"/>, + <imageobject>, + format="PNG" width="400" />,
[+++ b/build.gradle, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support currently, + optional("org.testng:testng:6.8.5"), + def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m", +++ b/build.gradle, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support currently, + optional("org.testng:testng:6.8.5"), + def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m", +++ b/gradlew, +GRADLE_OPTS="-XX:MaxMetaspaceSize=1024m -Xmx1024m $GRADLE_OPTS", +++ b/build.gradle, + optional("com.fasterxml.jackson.core:jackson-databind:2.2.0") // required for SockJS support currently, + optional("org.testng:testng:6.8.5"), + def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m", +++ b/gradlew, +GRADLE_OPTS="-XX:MaxMetaspaceSize=1024m -Xmx1024m $GRADLE_OPTS", +++ b/gradlew.bat, +set GRADLE_OPTS=-XX:MaxMetaspaceSize=1024m -Xmx1024m -XX:MaxHeapSize=256m %GRADLE_OPTS%
[+++ b/org.springframework.beans/.classpath, + <classpathentry kind="var" path="IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-0.9.0.PFD.jar" sourcepath="/IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-sources-0.9.0.PFD.jar"/>, +++ b/org.springframework.beans/.classpath, + <classpathentry kind="var" path="IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-0.9.0.PFD.jar" sourcepath="/IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-sources-0.9.0.PFD.jar"/>, +++ b/org.springframework.beans/beans.iml, + <orderEntry type="library" name="javax.inject" level="project" />
[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, + registry.addInterceptor(new ResourceUrlProviderExposingInterceptor(resourceUrlPathTranslator()));, + public ResourceUrlProvider resourceUrlPathTranslator() {, + ResourceUrlProvider translator = new ResourceUrlProvider();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, + registry.addInterceptor(new ResourceUrlProviderExposingInterceptor(resourceUrlPathTranslator()));, + public ResourceUrlProvider resourceUrlPathTranslator() {, + ResourceUrlProvider translator = new ResourceUrlProvider();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, + public String resolveUrlPath(String resourceUrlPath, List<? extends Resource> locations,, + return resolveUrlPathInternal(resourceUrlPath, locations, chain);, + protected abstract String resolveUrlPathInternal(String resourceUrlPath,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, + registry.addInterceptor(new ResourceUrlProviderExposingInterceptor(resourceUrlPathTranslator()));, + public ResourceUrlProvider resourceUrlPathTranslator() {, + ResourceUrlProvider translator = new ResourceUrlProvider();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, + public String resolveUrlPath(String resourceUrlPath, List<? extends Resource> locations,, + return resolveUrlPathInternal(resourceUrlPath, locations, chain);, +
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractSubscribableChannel.java, +import java.util.Collections;, +import java.util.List;, +import java.util.Set;, +import java.util.concurrent.CopyOnWriteArraySet;, +, + private final Set<MessageHandler> handlers = new CopyOnWriteArraySet<MessageHandler>();, +, +, + public Set<MessageHandler> getSubscribers() {, + return Collections.<MessageHandler>unmodifiableSet(this.handlers);, + }, +, + public boolean hasSubscription(MessageHandler handler) {, + return this.handlers.contains(handler);, + }, +, + public boolean subscribe(MessageHandler handler) {, + boolean result = this.handlers.add(handler);, + public boolean unsubscribe(MessageHandler handler) {, + boolean result = this.handlers.remove(handler);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractSubscribableChannel.java, +import java.util.Collections;, +import java.util.List;, +import java.util.Set;, +import java.util.concurrent.CopyOnWriteArraySet;, +, + private final Set<MessageHandler> handlers = new CopyOnWriteArraySet<MessageHandler>();, +, +, + public Set<MessageHandler> getSubscribers() {, + return Collections.<MessageHandler>unmodifiableSet(this.handlers);, + }, +, +
[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, + for (CallableProcessingInterceptor interceptor : this.interceptors) {, + Object result = interceptor.handleTimeout(request, task);, + if (result == CallableProcessingInterceptor.RESPONSE_HANDLED) {, + break;, + }, + else if (result != CallableProcessingInterceptor.RESULT_NONE) {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, + for (CallableProcessingInterceptor interceptor : this.interceptors) {, + Object result = interceptor.handleTimeout(request, task);, + if (result == CallableProcessingInterceptor.RESPONSE_HANDLED) {, + break;, + }, + else if (result != CallableProcessingInterceptor.RESULT_NONE) {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, + * <p>The {@link #handleTimeout(NativeWebRequest, Callable) afterTimeout} method, + static final Object RESULT_NONE = new Object();, +, + static final Object RESPONSE_HANDLED = new Object();, +, + * {@link #RESULT_NONE} or {@link #RESPONSE_HANDLED},
[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/ClassFilter.java, + boolean matches(Class<?> clazz);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/ClassFilter.java, + boolean matches(Class<?> clazz);, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/scope/DefaultScopedObjectTests.java, +/*, + * Copyright 2002-2006 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, + protected String getTargetDestination(String origDestination, String targetDestination,, + String sessionId, String user) {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, + protected String getTargetDestination(String origDestination, String targetDestination,, + String sessionId, String user) {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DestinationUserNameProvider.java, +package org.springframework.messaging.simp.user;, +, +/**, + * An interface to be implemented in addition to {@link java.security.Principal}, + * when {@link java.security.Principal#getName()} is not globally unique enough, + * for use in user destinations. For more on user destination see, + * {@link org.springframework.messaging.simp.user.UserDestinationResolver}., + *, + * @author Rossen Stoyanchev, + * @since 4.0.1, + */, +public interface DestinationUserNameProvider {, +, +, + /**, +
[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, + if (collection.isEmpty()) {, + result.put(key, "");, + } else {, + buildFlattenedMap(result, Collections.singletonMap(, + "[" + (count++) + "]", object), key);, + }, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, + if (collection.isEmpty()) {, + result.put(key, "");, + } else {, + buildFlattenedMap(result, Collections.singletonMap(, + "[" + (count++) + "]", object), key);, + }, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/config/YamlMapFactoryBeanTests.java, + * Copyright 2002-2018 the original author or authors., +import java.util.List;, + public void mapWithEmptyArrayValue() {, + this.factory.setResources(new ByteArrayResource("a: alpha\ntest: []".getBytes()));, + assertTrue(this.factory.getObject().containsKey("test"));, + assertEquals(((List<?>)this.factory.getObject().get("test")).size(), 0);, + }, +, + @Test, + public void mapWithEmptyValue() {, + this.factory.setResources(new ByteArrayResource("a: alpha\ntest:".getBytes()));, + assertTrue(this.factory.getObject().containsKey("test"));, + assertNull(this.factory.getObject().get("test"));, +
[+++ b/.github/ISSUE_TEMPLATE.md, +<!--, +!!! For Security Vulnerabilities, please go to https://pivotal.io/security !!!, +-->, +**Affects:** \<Spring Framework version>, +, +---, +<!--, +Thanks for taking the time to create an issue. Please read the following:, +, +- Questions should be asked on Stack Overflow., +- For bugs, specify affected versions and explain what you are trying to do., +- For enhancements, provide context and describe the problem., +, +Issue or Pull Request? Create only one, not both. GitHub treats them as the same., +If unsure, start with an issue, and if you submit a pull request later, the, +issue will be
[+++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, + String s = logPrefix + "Writing " + formatValue(charSequence, logger.isTraceEnabled());, + if (logger.isTraceEnabled()) {, + logger.trace(s);, + }, + else {, + logger.debug(s);, + }, + private String formatValue(@Nullable Object value, boolean logFullValue) {, + if (value == null) {, + return "";, + }, + String s = value instanceof CharSequence ? "\"" + value + "\"" : value.toString();, + return logFullValue || s.length() < 100 ? s : s.substring(0, 100) + " (truncated)...";, + }, +, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, + String s = logPrefix + "Writing " + formatValue(charSequence, logger.isTraceEnabled());, + if (logger.isTraceEnabled()) {,
[+++ b/build-spring-framework/build.xml, + <pathelement location="../org.springframework.jms"/>
[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + String encodedHost = encodeUriComponent(this.host, encoding, getHostType());, +, + private Type getHostType() {, + return ((this.host != null) && this.host.startsWith("[")) ? Type.HOST_IPV6 : Type.HOST_IPV4;, + }, + verifyUriComponent(host, getHostType());, + HOST_IPV4 {, + HOST_IPV6 {, + @Override, + public boolean isAllowed(int c) {, + return isUnreserved(c) || isSubDelimiter(c) || '[' == c || ']' == c || ':' == c;, + }, + },, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + String encodedHost = encodeUriComponent(this.host, encoding, getHostType());, +, + private Type getHostType() {, + return ((this.host != null) && this.host.startsWith("[")) ? Type.HOST_IPV6 : Type.HOST_IPV4;, + }, + verifyUriComponent(host, getHostType());, + HOST_IPV4
[+++ b/org.springframework.web/ivy.xml, + <dependency org="org.easymock" name="com.springsource.org.easymock" rev="2.3.0" conf="test->compile"/>]
[+++ b/build.gradle, + optional("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson2Version}"), + optional("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jackson2Version}"), + optional("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson2Version}"), + optional("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jackson2Version}"), +++ b/build.gradle, + optional("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson2Version}"), + optional("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jackson2Version}"), + optional("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson2Version}"), + optional("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jackson2Version}"), +++ b/spring-web/src/main/java/org/springframework/http/converter/cbor/MappingJackson2CborHttpMessageConverter.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on
[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/support/SqlLobValue.java, + * Copyright 2002-2017 the original author or authors., + public void setTypeValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/support/SqlLobValue.java, + * Copyright 2002-2017 the original author or authors., + public void setTypeValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/package-info.java, + * Provides a strategy interface for Large OBject handling,, + * as well as a customizable default implementation., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/support/SqlLobValue.java, + * Copyright 2002-2017 the original author or authors., + public void setTypeValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/package-info.java, +
[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2019 the original author or authors., + * @throws NoSuchBeanDefinitionException if there is no bean with the specified name, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2019 the original author or authors., + * @throws NoSuchBeanDefinitionException if there is no bean with the specified name, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/InjectionPoint.java, + * Copyright 2002-2019 the original author or authors., + * Also available as an argument for factory methods, reacting to the, + * requesting injection point for building a customized bean instance., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2019 the original author or authors., + * @throws NoSuchBeanDefinitionException if
[+++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, +/*, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, +/*, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +, +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, +/*, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +, +++ b/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, +/*, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +, +++ b/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageExceptionHandler.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, +/*, + * Copyright 2002-2018 the original
[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2014 the original author or authors., + /** Spring ConversionService to use instead of PropertyEditors */, + /** Names of beans that have already been created at least once */]
[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMultipartHttpServletRequestBuilder.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Collection;, +import javax.servlet.http.Part;, +import org.springframework.util.Assert;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.multipart.support.StandardMultipartHttpServletRequest;, + private final MultiValueMap<String, Part> parts = new LinkedMultiValueMap<>();, +, + /**, + * Add {@link Part} components to the request., + * @param parts one or more parts to add, + * @since 5.0, + */, + public MockMultipartHttpServletRequestBuilder part(Part... parts) {, + Assert.notEmpty(parts, "'parts' must not be empty");, + for (Part part : parts) {, + this.parts.add(part.getName(), part);, + }, + return this;, + }, +, + parentBuilder.parts.keySet().stream().forEach(name ->, + this.parts.putIfAbsent(name, parentBuilder.parts.get(name)));, +, +,
[+++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, + Object target, Class<?> targetClass) {
[+++ b/spring-context/src/main/java/org/springframework/scripting/support/StandardScriptUtils.java, + * @throws IllegalStateException if the desired engine failed to initialize, +++ b/spring-context/src/main/java/org/springframework/scripting/support/StandardScriptUtils.java, + * @throws IllegalStateException if the desired engine failed to initialize, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java, + * <p>As of 4.1.8, this method can be overridden., + * @since 4.1.8, +++ b/spring-context/src/main/java/org/springframework/scripting/support/StandardScriptUtils.java, + * @throws IllegalStateException if the desired engine failed to initialize, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java, + * <p>As of 4.1.8, this method can be overridden., + * @since 4.1.8, +++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, + * The default implementation of {@link CorsProcessor}, as defined by the, + * @author Rossen Stoyanchev]
[+++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, + * @author Brian Clozel, + String authority = this.uri.getRawAuthority();, + String path = this.uri.toString().substring(this.uri.toString().indexOf(authority) + authority.length());, + HttpVersion.HTTP_1_1, nettyMethod, path, this.body.buffer());, + if (this.body.buffer().readableBytes() > 0) {, + nettyRequest.headers().set(HttpHeaders.CONTENT_LENGTH, this.body.buffer().readableBytes());, + }, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, + * @author Brian Clozel, + String authority = this.uri.getRawAuthority();, + String path = this.uri.toString().substring(this.uri.toString().indexOf(authority) + authority.length());, + HttpVersion.HTTP_1_1, nettyMethod, path, this.body.buffer());, + if (this.body.buffer().readableBytes() > 0) {, + nettyRequest.headers().set(HttpHeaders.CONTENT_LENGTH, this.body.buffer().readableBytes());, + }, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractAsyncHttpRequestFactoryTestCase.java, +public abstract class AbstractAsyncHttpRequestFactoryTestCase extends AbstractMockWebServerTestCase {, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, + * @author Brian Clozel, + String authority = this.uri.getRawAuthority();, + String path = this.uri.toString().substring(this.uri.toString().indexOf(authority) + authority.length());, +
[+++ b/spring-aop/src/main/java/org/springframework/aop/support/ControlFlowPointcut.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, + private volatile int evaluations;, + * Construct a new pointcut that matches all calls below the given method, + * in the given class. If no method name is given, matches all control flows, + * below the given class., + * @param methodName the name of the method (may be {@code null}), +, + for (StackTraceElement element : new Throwable().getStackTrace()) {, + if (element.getClassName().equals(this.clazz.getName()) &&, + (this.methodName == null || element.getMethodName().equals(this.methodName))) {, + return true;, + }, + }, + return
[+++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/DurationFormatter.java, +class DurationFormatter implements Formatter<Duration> {, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/DurationFormatter.java, +class DurationFormatter implements Formatter<Duration> {, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeFormatterRegistrar.java, +import org.springframework.util.ClassUtils;, + * Strictly speaking, this should not be necessary since we formally require JodaTime 2.x., + * However, since Joda-Time formatters are being registered automatically, we defensively, + * adapt to Joda-Time 1.x when encountered on the classpath. To be removed in Spring 5.0., + */, + private static final boolean jodaTime2Available = ClassUtils.isPresent(, + "org.joda.time.YearMonth", JodaTimeFormatterRegistrar.class.getClassLoader());, +, + /**, + if (jodaTime2Available) {, + JodaTime2Delegate.registerAdditionalFormatters(registry);, + }, +, + /**, + * Inner class to avoid a hard dependency on
[+++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerClientInterceptor.java, +, + RemoteAccessException rae = convertHttpInvokerAccessException(ex);, + throw (rae != null ? rae : ex);, +, + * Execute the given remote invocation via the {@link HttpInvokerRequestExecutor}., + * Execute the given remote invocation via the {@link HttpInvokerRequestExecutor}., + * Spring {@link RemoteAccessException}., + * @return the RemoteAccessException to throw, or {@code null} to have the, + * original exception propagated to the caller, + if (ex instanceof Exception) {, + // For any other Throwable, e.g. OutOfMemoryError: let it get propagated as-is., + return null;, + }, +]
[+++ b/org.springframework.spring-parent/ivy.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<?xml-stylesheet type="text/xsl" href="http://ivyrep.jayasoft.org/ivy-doc.xsl"?>, +<ivy-module, + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:noNamespaceSchemaLocation="http://incubator.apache.org/ivy/schemas/ivy.xsd", + version="1.3">, +, + <info organisation="org.springframework" module="${ant.project.name}">, + <license name="Apache 2.0" url="http://www.apache.org/licenses/LICENSE-2.0"/>, + </info>, +, + <configurations>, + <include file="${spring.build.dir}/common/default-ivy-configurations.xml"/>, + </configurations>, +, + <publications>, + <artifact name="${ant.project.name}"/>, + <artifact name="${ant.project.name}-sources" type="src" ext="jar"/>, + </publications>, +, +</ivy-module>]
[+++ b/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java, + if (defaultDomain != null && this.environment != null) {, + if (StringUtils.hasText(defaultDomain)) {, + if (server != null && this.environment != null) {, + if (StringUtils.hasText(server)) {]
[+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceUnitReader.java, + URL rootUrl = determinePersistenceUnitRootUrl(resource);, +, + infos.add(parsePersistenceUnitInfo(unit, version, rootUrl));, + String urlToString = originalURL.toExternalForm();, + if (persistenceUnitRoot.endsWith("/")) {, + persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1);, + return new URL(persistenceUnitRoot);, + protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl), + throws IOException {, +, + // set persistence unit root URL, + unitInfo.setPersistenceUnitRootUrl(rootUrl);, +, + parseProperties(persistenceUnit, unitInfo);, + parseManagedClasses(persistenceUnit, unitInfo);, + protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {, + protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {, + /**, + * Parse the <code>jar-file</code> XML elements., + */, + @SuppressWarnings("unchecked"), + protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws
[+++ b/build.gradle, + testCompile project(":spring-context-support") // for JafMediaTypeFactory, +++ b/build.gradle, + testCompile project(":spring-context-support") // for JafMediaTypeFactory, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,,
[+++ b/build.gradle, + ext.jspVersion = "2.3.2-b02", + ext.servletVersion = "3.1.0", + ext.websocketVersion = "1.1", + testCompile("javax.servlet:javax.servlet-api:${servletVersion}"), + provided "javax.servlet:javax.servlet-api:${servletVersion}", + optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), + optional("javax.servlet:javax.servlet-api:${servletVersion}"), + provided("javax.servlet:javax.servlet-api:${servletVersion}"), + optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), + provided "javax.servlet:javax.servlet-api:${servletVersion}", + optional("javax.servlet:javax.servlet-api:${servletVersion}"), + optional("javax.websocket:javax.websocket-api:${websocketVersion}"), + optional("javax.servlet:javax.servlet-api:${servletVersion}"), + optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), + optional("javax.websocket:javax.websocket-api:${websocketVersion}"), + testCompile("javax.servlet:javax.servlet-api:${servletVersion}"), +++ b/build.gradle, + ext.jspVersion = "2.3.2-b02", + ext.servletVersion = "3.1.0", + ext.websocketVersion = "1.1", + testCompile("javax.servlet:javax.servlet-api:${servletVersion}"), + provided "javax.servlet:javax.servlet-api:${servletVersion}", + optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), + optional("javax.servlet:javax.servlet-api:${servletVersion}"), + provided("javax.servlet:javax.servlet-api:${servletVersion}"), + optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), + provided "javax.servlet:javax.servlet-api:${servletVersion}", + optional("javax.servlet:javax.servlet-api:${servletVersion}"), + optional("javax.websocket:javax.websocket-api:${websocketVersion}"), + optional("javax.servlet:javax.servlet-api:${servletVersion}"), + optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), + optional("javax.websocket:javax.websocket-api:${websocketVersion}"), + testCompile("javax.servlet:javax.servlet-api:${servletVersion}"), +++ b/spring-test/src/main/java/org/springframework/mock/web/DelegatingServletInputStream.java, + * Copyright 2002-2016 the original author or authors., +import javax.servlet.ReadListener;, + private
[+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, + * Copyright 2002-2012 the original author or authors., + int endIndexOfCountryCode = localeString.lastIndexOf(country) + country.length();, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, + * Copyright 2002-2012 the original author or authors., + int endIndexOfCountryCode = localeString.lastIndexOf(country) + country.length();, +++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java, + * Copyright 2002-2012 the original author or authors., + /**, + * See SPR-9420., + */, + public void testParseLocaleWithSameLowercaseTokenForLanguageAndCountry() {, + assertEquals("tr_TR", StringUtils.parseLocaleString("tr_tr").toString());, + assertEquals("bg_BG_vnt", StringUtils.parseLocaleString("bg_bg_vnt").toString());, + }]
[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, + final int idx;, + if (value.startsWith("[")) {, + idx = value.indexOf(':', value.indexOf(']'));, + } else {, + idx = value.lastIndexOf(':');, + }, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, + final int idx;, + if (value.startsWith("[")) {, + idx = value.indexOf(':', value.indexOf(']'));, + } else {, + idx = value.lastIndexOf(':');, + }, +++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java, + @Test, + public void ipv6Host() {, + InetSocketAddress host = InetSocketAddress.createUnresolved("[::1]", 0);, + headers.setHost(host);, + assertEquals("Invalid Host header", host, headers.getHost());, + assertEquals("Invalid Host header", "[::1]", headers.getFirst("Host"));, + }, +]
[+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, + if (ch != ' ' && ch != '_' && ch != '#' && !Character.isLetterOrDigit(ch)) {, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, + if (ch != ' ' && ch != '_' && ch != '#' && !Character.isLetterOrDigit(ch)) {, +++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java, + @Test // SPR-14718, + public void testParseJava7Variant() {, + assertEquals("sr_#LATN", StringUtils.parseLocaleString("sr_#LATN").toString());, + }, +]
[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + if ('=' == c || '&' == c) {, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + if ('=' == c || '&' == c) {, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, + * Copyright 2002-2017 the original author or authors., + @Test // SPR-14828, + public void fromUriStringQueryParamEncodedAndContainingPlus() throws Exception {, + String httpUrl = "http://localhost:8080/test/print?value=%EA%B0%80+%EB%82%98";, + URI uri = UriComponentsBuilder.fromHttpUrl(httpUrl).build(true).toUri();, +, + assertEquals(httpUrl, uri.toString());, + }, +]
[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncExecutionChainRunnable.java, + private static final Log logger = LogFactory.getLog(AsyncExecutionChainRunnable.class);, + this.callable.call();, + logger.debug("Completing async request processing");, + this.asyncWebRequest.complete();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncExecutionChainRunnable.java, + private static final Log logger = LogFactory.getLog(AsyncExecutionChainRunnable.class);, + this.callable.call();, + logger.debug("Completing async request processing");, + this.asyncWebRequest.complete();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncWebRequest.java, + * Extend {@link NativeWebRequest} with methods for async request processing., + * Set the timeout for asynchronous request processing in milliseconds., + * In Servlet 3 async request processing, the timeout begins when the, + * main processing thread has exited., + * Mark the start of async request processing for example ensuring the, + * request remains
[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/AbstractConditionalEnumConverter.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.web.bind.support.FlashStatus;, +import org.springframework.web.bind.support.SimpleFlashStatus;, +import org.springframework.web.method.annotation.FlashAttributesHandler;, + private final Map<Class<?>, FlashAttributesHandler> flashAttributesHandlerCache =, + new ConcurrentHashMap<Class<?>, FlashAttributesHandler>();, +, + * Whether the given handler type defines any handler-specific session attributes , + * via {@link SessionAttributes}., + SessionAttributesHandler sessionAttrsHandler = null;, + sessionAttrsHandler = this.sessionAttributesHandlerCache.get(handlerType);, + if (sessionAttrsHandler == null) {, + sessionAttrsHandler = new SessionAttributesHandler(handlerType, sessionAttributeStore);, + this.sessionAttributesHandlerCache.put(handlerType, sessionAttrsHandler);, + FlashAttributesHandler flashAttrsHandler = null;, + synchronized(this.flashAttributesHandlerCache) {, + flashAttrsHandler = this.flashAttributesHandlerCache.get(handlerType);, + if (flashAttrsHandler == null) {, + flashAttrsHandler = new FlashAttributesHandler(handlerType);, + this.flashAttributesHandlerCache.put(handlerType, flashAttrsHandler);, + }, + }, + return sessionAttrsHandler.hasSessionAttributes() || flashAttrsHandler.hasFlashAttributes();, + FlashStatus
[+++ b/spring-context/src/main/java/org/springframework/context/annotation/Configuration.java, + * <p>Externalized values may be injected into {@code @Configuration} classes using, + * the {@link Value @Value} annotation:, + * <p>This approach is often used in conjunction with Spring's, + * PropertySourcesPlaceholderConfigurer} that can be enabled <em>automatically</em>, + * in XML configuration via {@code <context:property-placeholder/>} or <em>explicitly</em>, + * in a {@code @Configuration} class via a dedicated {@code static} {@code @Bean} method, + * (see "a note on BeanFactoryPostProcessor-returning {@code @Bean} methods" of, + * {@link Bean @Bean}'s javadocs for details). Note, however, that explicit registration, + * of a {@code PropertySourcesPlaceholderConfigurer} via a {@code static}
[+++ b/org.springframework.web/.classpath, + <classpathentry kind="var" path="IVY_CACHE/com.sun.syndication/com.springsource.com.sun.syndication/1.0.0/com.springsource.com.sun.syndication-1.0.0.jar" sourcepath="/IVY_CACHE/com.sun.syndication/com.springsource.com.sun.syndication/1.0.0/com.springsource.com.sun.syndication-sources-1.0.0.jar"/>, + <classpathentry kind="var" path="IVY_CACHE/com.thoughtworks.xstream"/>, + <classpathentry kind="var" path="IVY_CACHE/org.apache.commons/com.springsource.org.apache.commons.codec/1.4.0/com.springsource.org.apache.commons.codec-1.4.0.jar" sourcepath="/IVY_CACHE/org.apache.commons/com.springsource.org.apache.commons.codec/1.4.0/com.springsource.org.apache.commons.codec-sources-1.4.0.jar"/>, + <classpathentry kind="var" path="IVY_CACHE/org.apache.commons/com.springsource.org.apache.commons.io/1.4.0/com.springsource.org.apache.commons.io-1.4.0.jar" sourcepath="/IVY_CACHE/org.apache.commons/com.springsource.org.apache.commons.io/1.4.0/com.springsource.org.apache.commons.io-sources-1.4.0.jar"/>, + <classpathentry kind="var" path="IVY_CACHE/org.jdom/com.springsource.org.jdom/1.1.0/com.springsource.org.jdom-1.1.0.jar"/>]
[+++ b/spring-framework-reference/src/expressions.xml, + expression language implementations to be integreated should the need, + independently. In order to be self contained, many of the examples in this, + chatper use SpEL as if it was an independent expression language. This, + requires creating a few boostrapping infrastructure classes such as the, + parser. Most Spring users will not need to deal with this infrastructure, + and will instead only author expression strings for evaluation. An example, + of this typical use is the integration of SpEL into creating XML or, + annotated based bean definitions as shown in the section
[+++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocationResult.java, +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocationResult.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocationResult.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSession.java, +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocationResult.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSession.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSubscription.java, +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocationResult.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSession.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSubscription.java, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocationResult.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSession.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSubscription.java, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocationResult.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSession.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSubscription.java, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2SmileEncoderTests.java, +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocationResult.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSession.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSubscription.java, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2SmileEncoderTests.java, +++ b/spring-web/src/test/java/org/springframework/web/client/ExtractingResponseErrorHandlerTests.java, +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocationResult.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSession.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSubscription.java, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2SmileEncoderTests.java, +++ b/spring-web/src/test/java/org/springframework/web/client/ExtractingResponseErrorHandlerTests.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncHandlerMethodArgumentResolver.java, +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocationResult.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSession.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/SimpSubscription.java, +++
[+++ b/.gitignore, +spring-jdbc/derby.log, +spring-test/test-output/, +.gradle, +build, +.classpath, +.project, +argfile*, +, +# IDEA metadata and output dirs, +*.iml, +*.ipr, +*.iws, +out, +++ b/.gitignore, +spring-jdbc/derby.log, +spring-test/test-output/, +.gradle, +build, +.classpath, +.project, +argfile*, +, +# IDEA metadata and output dirs, +*.iml, +*.ipr, +*.iws, +out, +++ b/.wrapper/gradle-wrapper.jar, +++ b/.gitignore, +spring-jdbc/derby.log, +spring-test/test-output/, +.gradle, +build, +.classpath, +.project, +argfile*, +, +# IDEA metadata and output dirs, +*.iml, +*.ipr, +*.iws, +out, +++ b/.wrapper/gradle-wrapper.jar, +++ b/.wrapper/gradle-wrapper.properties, +#Fri Jan 13 16:50:40 CET 2012, +distributionBase=GRADLE_USER_HOME, +distributionPath=wrapper/dists, +zipStoreBase=GRADLE_USER_HOME, +zipStorePath=wrapper/dists, +distributionUrl=http\://repo.gradle.org/gradle/distributions-snapshots/gradle-1.0-milestone-8-20120112000036+0100-bin.zip, +++ b/.gitignore, +spring-jdbc/derby.log, +spring-test/test-output/, +.gradle, +build, +.classpath, +.project, +argfile*, +, +# IDEA metadata and output dirs, +*.iml, +*.ipr, +*.iws, +out, +++ b/.wrapper/gradle-wrapper.jar,
[+++ b/.github/ISSUE_TEMPLATE.md, +<!--, +!!! For Security Vulnerabilities, please go to https://pivotal.io/security !!!, +-->, +**Affects:** \<Spring Framework version>, +, +---, +<!--, +Thanks for taking the time to create an issue. Please read the following:, +, +- Questions should be asked on Stack Overflow., +- For bugs, specify affected versions and explain what you are trying to do., +- For enhancements, provide context and describe the problem., +, +Issue or Pull Request? Create only one, not both. GitHub treats them as the same., +If unsure, start with an issue, and if you submit a pull request later, the, +issue will be
[+++ b/build.gradle, + sourceCompatibility=1.6, + targetCompatibility=1.6, +++ b/build.gradle, + sourceCompatibility=1.6, + targetCompatibility=1.6, +++ b/gradle.properties, +version=3.3.0.BUILD-SNAPSHOT, +++ b/build.gradle, + sourceCompatibility=1.6, + targetCompatibility=1.6, +++ b/gradle.properties, +version=3.3.0.BUILD-SNAPSHOT, +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + @Override, +++ b/build.gradle, + sourceCompatibility=1.6, + targetCompatibility=1.6, +++ b/gradle.properties, +version=3.3.0.BUILD-SNAPSHOT, +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueClassFilter.java, + @Override, +++ b/build.gradle, + sourceCompatibility=1.6, + targetCompatibility=1.6, +++ b/gradle.properties, +version=3.3.0.BUILD-SNAPSHOT, +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueClassFilter.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueMethodMatcher.java, + @Override, + @Override, + @Override, +++ b/build.gradle, + sourceCompatibility=1.6, + targetCompatibility=1.6, +++ b/gradle.properties, +version=3.3.0.BUILD-SNAPSHOT, +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueClassFilter.java, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueMethodMatcher.java, + @Override, + @Override, + @Override, +++ b/spring-aop/src/main/java/org/springframework/aop/TruePointcut.java, + @Override,
[+++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageReader.java, + * example, by implementing {@link #resolveReadHints(ResolvableType, ResolvableType, ServerHttpRequest)}., + mergedHints.putAll(resolveReadHints(streamType, elementType, request));, + mergedHints.putAll(resolveReadHints(streamType, elementType, request));, + * Invoked before reading the request to resolve hints by, + protected abstract Map<String, Object> resolveReadHints(ResolvableType streamType,, + ResolvableType elementType, ServerHttpRequest request);, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageReader.java, + * example, by implementing {@link #resolveReadHints(ResolvableType, ResolvableType, ServerHttpRequest)}., + mergedHints.putAll(resolveReadHints(streamType, elementType, request));, + mergedHints.putAll(resolveReadHints(streamType, elementType, request));, + * Invoked before reading the request to resolve hints by, + protected abstract Map<String, Object> resolveReadHints(ResolvableType streamType,, + ResolvableType elementType, ServerHttpRequest request);, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageWriter.java, + * example, by implementing {@link #resolveWriteHints(ResolvableType, ResolvableType, MediaType, ServerHttpRequest)}., + mergedHints.putAll(resolveWriteHints(streamType, elementType,
[+++ b/gradle.properties, +version=4.0.0.BUILD-SNAPSHOT]
[+++ b/org.springframework.spring-library/pom.xml, + <url>file:///${user.dir}/target/staging</url>
[+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java, + * Set the ThreadFactory to use for the ExecutorService's thread pool., + * Default is the underlying ExecutorService's default thread factory., + * Set the RejectedExecutionHandler to use for the ExecutorService., + * Default is the ExecutorService's default abort policy., + * Perform a shutdown on the underlying ExecutorService., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java, + * Set the ThreadFactory to use for the ExecutorService's thread pool., + * Default is the underlying ExecutorService's default thread factory., + * Set the RejectedExecutionHandler to use for the ExecutorService., + * Default is the ExecutorService's default abort policy., + * Perform a
[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, + this(payload, true);, + public BinaryMessage(ByteBuffer payload, boolean isLast) {, + super(payload, isLast);, + this.bytes = null;, + }, +, + /**, + * Create a new {@link BinaryMessage} instance., + * @param payload a non-null payload, + */, + this(payload, 0, (payload == null ? 0 : payload.length), true);, + }, +, + /**, + * Create a new {@link BinaryMessage} instance., + * @param payload a non-null payload, + * @param isLast if the message is the last of a series of partial messages, + */, + public BinaryMessage(byte[] payload, boolean isLast) {, + this(payload,
[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, + List<ViewResolver> resolvers = getViewResolverRegistry().getViewResolvers();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, + List<ViewResolver> resolvers = getViewResolverRegistry().getViewResolvers();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerResponseResultHandler.java, + * Copyright 2002-2018 the original author or authors., + private int order = 0;, + * <p>By default set to 0. It is generally safe to place it early in the, + * order as it looks for a concrete return type.]
[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, + * Copyright 2002-2017 the original author or authors., + matches.sort((m1, m2) -> m2.toString().compareTo(m1.toString()));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, + * Copyright 2002-2017 the original author or authors., + matches.sort((m1, m2) -> m2.toString().compareTo(m1.toString()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, + * Copyright 2002-2017 the original author or authors., + matches.sort((m1, m2) -> m2.toString().compareTo(m1.toString()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +
[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java, +, + @Override, + public boolean equals(Object obj) {, + throw new AssertionError("Object#equals is disabled " +, + "to avoid being used in error instead of JsonPathAssertions#isEqualTo(String).");, + }, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java, +, + @Override, + public boolean equals(Object obj) {, + throw new AssertionError("Object#equals is disabled " +, + "to avoid being used in error instead of JsonPathAssertions#isEqualTo(String).");, + }, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/XpathAssertions.java, + @Override, + public boolean equals(Object obj) {, + throw new AssertionError("Object#equals is disabled " +, + "to avoid being used in error instead of XPathAssertions#isEqualTo(String).");, + }, +, +]
[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2014 the original author or authors., + * Return an instance, which may be shared or independent, of the specified bean., + * <p>Allows for specifying explicit constructor arguments / factory method arguments,, + * overriding the specified default arguments (if any) in the bean definition., + * @param requiredType type the bean must match; can be an interface or superclass., + * {@code null} is disallowed., + * <p>This method goes into {@link ListableBeanFactory} by-type lookup territory, + * but may also be translated into a conventional by-name lookup based on the name,
[+++ b/src/reference/docbook/mvc.xml, + annotation.</para>]
[+++ b/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java, + * Copyright 2002-2015 the original author or authors., + * <p>Creates a {@link ByteArrayInputStream} for the given byte array., + * @author Sam Brannen, + * This implementation returns a description that includes the passed-in, + * {@code description}, if any., + return "Byte array resource [" + this.description + "]";, +++ b/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java, + * Copyright 2002-2015 the original author or authors., + * <p>Creates a {@link ByteArrayInputStream} for the given byte array., + * @author Sam Brannen, + * This implementation returns a description that includes the passed-in, + * {@code description}, if any., +
[+++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws, +.idea, +out, +test-output, +atlassian-ide-plugin.xml, +.gradletasknamecache, +++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +bin, +build.sh, +integration-repo, +ivy-cache, +jxl.log, +jmx.log, +derby.log, +spring-test/test-output/, +.gradle, +argfile*, +pom.xml, +activemq-data/, +, +/build, +buildSrc/build, +/spring-*/build, +/src/asciidoc/build, +target/, +, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +# IDEA artifacts and output dirs, +*.iml, +*.ipr, +*.iws,
[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, + private static final String UPGRADE = "Upgrade";, + set(UPGRADE, upgrade);, + return getFirst(UPGRADE);]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, + int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, + int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, + private final OAuth1Credentials credentials;, + credentials = null;, + credentials = new OAuth1Credentials(consumerKey, consumerSecret, accessToken, accessTokenSecret);, + restTemplate = ProtectedResourceClientFactory.create(credentials);, + this.restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, credentials));, + return credentials != null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, + private final OAuth1Credentials credentials;, + credentials = null;, + credentials = new OAuth1Credentials(consumerKey, consumerSecret, accessToken, accessTokenSecret);, + restTemplate = ProtectedResourceClientFactory.create(credentials);, + this.restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, credentials));, + return credentials != null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + public static RestTemplate create(OAuth1Credentials credentials) {, + client.setInterceptors(new ClientHttpRequestInterceptor[] { new OAuth1RequestInterceptor(credentials)});, + client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(), credentials));, + public static ClientHttpRequestFactory addOAuthSigning(ClientHttpRequestFactory requestFactory, OAuth1Credentials credentials) {, + return new Spring30OAuth1RequestFactory(requestFactory, credentials);]
[+++ b/build.gradle, + compile project(':spring-social-web'), +++ b/build.gradle, + compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, + @Override, + public void signIn(Serializable accountId) {, + SecurityContextHolder.getContext().setAuthentication(, + new UsernamePasswordAuthenticationToken(accountId, null, null));, + }, +, +}, +++ b/build.gradle, + compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, + @Override, + public void signIn(Serializable accountId) {, + SecurityContextHolder.getContext().setAuthentication(, + new UsernamePasswordAuthenticationToken(accountId, null, null));, + }, +, +}, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml,
[+++ b/docs/src/reference/docbook/connecting.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="connecting", + xmlns:xlink="http://www.w3.org/1999/xlink">, + <title>Connecting to Social Providers</title>, +, + <para>Most social connections are based on OAuth authorization. Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network that it's okay for the application to access and manipulate their social information. The outcome of the dance is an access token that the application can use
[+++ /dev/null, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, + primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, + primary key (member, provider, accessToken));, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, + primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="serviceProviderFactory" />, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, + primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="serviceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, + primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="serviceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <!-- Configure a connection repository through which account-to-provider connections will be stored --> ,
[+++ b/docs/src/info/changelog.txt, + * Now built against Spring Framework 3.1.0.RELEASE (still compatible with Spring Framework 3.0.6), + * Now built against Spring Security 3.1.0.RELEASE]
[+++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + addTextToMapMessageConverter();, + MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, + requestParameters.set("client_id", clientId);, + requestParameters.set("client_secret", clientSecret);, + requestParameters.set("code", authorizationCode);, + requestParameters.set("redirect_uri", redirectUri);, + requestParameters.set("grant_type", "authorization_code");, + Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, + return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, + , + // private helpers, + // TODO : Can probably tweak
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + public ApiException(String message) {, + public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + public ApiException(String message) {, + public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +import org.springframework.social.OperationNotPermittedException;, + public DuplicateStatusException(String message) {, + super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + public ApiException(String message) {, + public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +import org.springframework.social.OperationNotPermittedException;, + public DuplicateStatusException(String message) {, + super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + public ExpiredAuthorizationException() {, + super("The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + public ApiException(String message) {, + public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +import org.springframework.social.OperationNotPermittedException;, + public DuplicateStatusException(String message) {, +
[+++ b/.gitignore, +samples/**/target, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase-2/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, + <groupId>org.springframework.social.samples</groupId>, + <artifactId>facebook-showcase-2</artifactId>, + <name>Spring Social Facebook Showcase 2</name>, + <packaging>war</packaging>, + <version>1.0.0.BUILD-SNAPSHOT</version>, + <properties>, + <java-version>1.6</java-version>, + <org.springframework.social-version>1.0.0.BUILD-SNAPSHOT</org.springframework.social-version>, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, + <org.slf4j-version>1.5.10</org.slf4j-version>, +
[+++ b/samples/facebook-showcase-2/README, +Facebook Showcase, +=================, +with Facebook. This particular showcase example leverages Facebook's XFBML and JavaScript APIs to establish, +connections between the application user and their Facebook profile. (Another Facebook showcase sample,, +facebook-showcase-2, demonstrates how to use Spring Social to establish connections following OAuth 2's, +web server flow)., + - Connecting to Facebook via Facebook's <fb:login-button> tag., + - Using Spring Social's @FacebookAccessToken and @FacebookUserId annotations to extract a user's access token, + and user ID from the cookie that is written after authorization., +++ b/samples/facebook-showcase-2/README, +Facebook Showcase, +=================, +with Facebook. This particular showcase example leverages Facebook's XFBML and
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A link to a service provider user., + * Allows the client application to access or update user information using the provider's API., + * Exposes a set of operations that are common across all service providers, including, + * the ability to {@link #getUser() access user profile information} and {@link #updateStatus(String) update user status}. , + * @param <S> a strongly-typed binding to the service provider's API, + * The key that identifies this ServiceProviderConnection., + * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="serviceprovider" xmlns:xlink="http://www.w3.org/1999/xlink">, + <para>, + The <code>spring-social-core</code> module includes a <emphasis>Service Provider 'Connect' Framework</emphasis> for managing connections to Software-as-a-Service (SaaS) providers such as Facebook and Twitter., + This framework allows your application to establish connections between local user accounts and accounts those users have with external service providers. , + Once a connection is established, it can be be used to obtain a strongly-typed Java binding to the ServiceProvider's API, giving your application the ability to invoke the API on behalf of the user., + </para>, + <para>, + To illustrate, consider Facebook as
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.hamcrest.core.StringContains.*;, +import org.springframework.test.web.client.RequestMatcher;, + customOauth10 = new OAuth1Template("consumer_key", "consumer_secret", REQUEST_TOKEN_URL, AUTHORIZE_URL, null, ACCESS_TOKEN_URL, OAuth1Version.CORE_10) {, + , + .andExpect(headerContains("Authorization", "oauth_callback=\"http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback\"")), +, + // private helper, + @SuppressWarnings("unchecked"), + private RequestMatcher headerContains(String name, String substring) {, + return header(name, containsString(substring));, + }, +]
[+++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + addTextToMapMessageConverter();, + MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, + requestParameters.set("client_id", clientId);, + requestParameters.set("client_secret", clientSecret);, + requestParameters.set("code", authorizationCode);, + requestParameters.set("redirect_uri", redirectUri);, + requestParameters.set("grant_type", "authorization_code");, + Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, + return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, + , + // private helpers, + // TODO : Can probably tweak
[+++ b/build.gradle, + compile project(':spring-social-web'), +++ b/build.gradle, + compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, + @Override, + public void signIn(Serializable accountId) {, + SecurityContextHolder.getContext().setAuthentication(, + new UsernamePasswordAuthenticationToken(accountId, null, null));, + }, +, +}, +++ b/build.gradle, + compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, + @Override, + public void signIn(Serializable accountId) {, + SecurityContextHolder.getContext().setAuthentication(, + new UsernamePasswordAuthenticationToken(accountId, null, null));, + }, +, +}, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml,
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + The API can be used to access and update user data on the provider's system., + To put this framework into action, consider Twitter as an example ServiceProvider., + <section id="service-providers-establishing-connections">, + <para>, + So far we have discussed how existing connections are managed using the ServiceProvider framework, but we have not yet discussed how new connections are established., + The manner in which connections between local user accounts and external provider accounts are established varies based on the authorization protocol used by the ServiceProvider., + Some service providers use OAuth, others use Basic Auth, others
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , + * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, + * with the response_type=code parameter value, + * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, + * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is
[+++ b/src/dist/changelog.txt, +Spring Social 1.0.3 Release (June 6, 2013), +==========================================, +This release was pushed to support Spring Social Twitter 1.0.4 so that a, +TwitterTemplate can be created using application-only authorization (e.g.,, +OAuth 2's client credentials grant)., +, +Improvements:, + * Support OAuth 2's password grant and client credentials grant (SOCIAL-324)., +]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + return connectionStatusRedirect(providerId, request);, + return connectionStatusRedirect(providerId, request);, + public RedirectView removeConnections(@PathVariable String providerId, NativeWebRequest request) {, + return connectionStatusRedirect(providerId, request);, + public RedirectView removeConnection(@PathVariable String providerId, @PathVariable String providerUserId, NativeWebRequest request) {, + return connectionStatusRedirect(providerId, request);, + protected RedirectView connectionStatusRedirect(String providerId, NativeWebRequest request) {, + String servletPath = request.getNativeRequest(HttpServletRequest.class).getServletPath();, + String providerConnectPath = "/connect/" + providerId;, + // If DispatcherServlet is mapped to "/", the servlet path will start with "/connect/{providerId}"; , + // otherwise it will be whatever DispatcherServlet is mapped to., + if (!servletPath.startsWith(providerConnectPath)) {, + providerConnectPath = servletPath + providerConnectPath;, + }, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, + public InsufficientPermissionException() {, + super("Insufficent permission for this operation.");, + this.requiredPermission = null;, + }, +, + /**, + * The permission required to access the resource., + * May be null if the required permission is unknown., + */]
[+++ b/docs/src/info/notice.txt, + The names "Spring", "Spring Framework", and "Spring Social" must
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, + private final OAuth1Operations oauth1Operations;, + , + public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, + this.oauth1Operations = oauth1Operations;, + }, +, + public OAuth1Operations getOAuth1Operations() {, + return oauth1Operations;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, + private final OAuth1Operations oauth1Operations;, + , + public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, + this.oauth1Operations = oauth1Operations;,
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A display name or label for this connection., + * Should be suitable for display on a UI and distinguish this connection from others with the same provider., + * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., + * May be null if this information is not public or not provided., + * The value of this property may change
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import javax.servlet.http.HttpServletRequest;, +, + return request.getNativeRequest(HttpServletRequest.class).getRequestURL().toString();]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionValues.java, + * @see ApiAdapter#setConnectionValues(Object, ConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionValues.java, + * @see ApiAdapter#setConnectionValues(Object, ConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * @see ConnectionRepository#addConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionValues.java, + * @see ApiAdapter#setConnectionValues(Object, ConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * @see ConnectionRepository#addConnection(Connection), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInController.java, + * @param connectionFactoryLocatorProvider the provider of the locator of {@link ConnectionFactory connection factories} that can be used for sign-in;, + * @param connectionRepositoryProvider the provider of the current user's {@link ConnectionRepository} instance;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.social.UserIdSource;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/FakeConnectionFactoryBeanDefinitionParser.java, +import org.springframework.social.UserIdSource;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/FakeConnectionFactoryBeanDefinitionParser.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, + * @param additionalParameters any additional query parameters to be sent when fetching the request token. Should not be encoded., + * @return a temporary request token use for authorization and exchanged for an access token , + * @param additionalParameters any additional query parameters to be sent when fetching the access token. Should not be encoded. , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, + * @param additionalParameters any additional query parameters to be sent when fetching the request token. Should not be encoded., + * @return a temporary request token use for authorization and exchanged for an access token ,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1SigningRequestFactory.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 3 (Apr 27, 2011), + * New ProviderSignInController for signing into an application by first, + signing into a provider such as Twitter or Facebook, + * Now supports use in an Android environment and integrated with Spring , + Android project as of its 1.0.0.M3 release., + * The ability to test a connection and refresh an expired connection, + * The ability to update status across connections in a uniform way, + * The ability to access user profile data on a connection in a uniform way, + and use it
[+++ b/.gitignore, +exploration, +++ b/.gitignore, +exploration, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Version.java, + return "Bearer " + accessToken;, +++ b/.gitignore, +exploration, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Version.java, + return "Bearer " + accessToken;, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2RequestInterceptorTest.java, +import static org.junit.Assert.*;, + assertThatInterceptorWritesAuthorizationHeader(interceptor, "Bearer access_token");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import java.util.Collections;, +import org.springframework.social.support.ParameterMap;, +public final class OAuth1Parameters extends ParameterMap {, + * Shared instance for passing zero authorization parameters (common for OAuth 1.0a-based flows)., + * The underlying map is immutable., + * @see Collections#emptyMap(), + public static final OAuth1Parameters NONE = new OAuth1Parameters(Collections.<String, List<String>>emptyMap());, + /**, + * Creates a new OAuth1Parameters map that is initially empty., + * Use the setter methods to add parameters after construction., + * @see #setCallbackUrl(String), + * @see #set(String, String), + */, + public OAuth1Parameters() {, + super();, + }, + , + /**, + * Creates a
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + private String providerId;, +, + public ApiException(String providerId, String message) {, + this.providerId = providerId;, + public ApiException(String providerId, String message, Throwable cause) {, + /**, + * The ID of the provider for which the API exception occurred., + */, + public String getProviderId() {, + return providerId;, + }, +, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + private String providerId;, +, + public ApiException(String providerId, String message) {, + this.providerId = providerId;, + public ApiException(String providerId, String message, Throwable cause) {, + /**, + * The ID of the provider for which the API exception occurred., + */,
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest.java, +import org.junit.Ignore;, +@Ignore("TODO: Reinstate test with generic test provider configuration"), + // TODO: Test with fake provider, +// assertNotNull(cfl.getConnectionFactory(Twitter.class));, + // TODO: Replace with tests using fake provider, +// assertNull(connectionRepository.findPrimaryConnection(Twitter.class));, +// ConnectionFactory<Twitter> twitterCF = cfl.getConnectionFactory(Twitter.class);, +// Connection<Twitter> connection = twitterCF.createConnection(new ConnectionData("twitter", "bob", "Bob McBob", "http://www.twitter.com/mcbob", null, "someToken", "someSecret", null, null));, +// connectionRepository.addConnection(connection);, +// assertNotNull(connectionRepository.findPrimaryConnection(Twitter.class));, +// assertTrue(context.getBean(Twitter.class).isAuthorized());, +//
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + private static Method setInterceptorsMethod;, + , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + private static Method setInterceptorsMethod;, + , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, + private static Method setInterceptorsMethod;, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.LoggingErrorHandler;, + restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.LoggingErrorHandler;, + restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.LoggingErrorHandler;, + restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.LoggingErrorHandler;, + restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.LoggingErrorHandler;, + restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/support/BufferingClientHttpResponse.java, +/*, + * Copyright 2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law
[+++ b/build.gradle, + thymeleafVersion = '2.1.2.RELEASE', + mavenCentral(), + compile ("org.thymeleaf:thymeleaf:$thymeleafVersion", optional), + compile ("org.thymeleaf:thymeleaf-spring3:$thymeleafVersion", optional), + compile ("org.thymeleaf:thymeleaf-spring4:$thymeleafVersion", optional), +++ b/build.gradle, + thymeleafVersion = '2.1.2.RELEASE', + mavenCentral(), + compile ("org.thymeleaf:thymeleaf:$thymeleafVersion", optional), + compile ("org.thymeleaf:thymeleaf-spring3:$thymeleafVersion", optional), + compile ("org.thymeleaf:thymeleaf-spring4:$thymeleafVersion", optional), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, +import org.springframework.context.ApplicationContext;, +import org.springframework.util.ClassUtils;, + private final boolean thymeleaf3Present;, +, + private final boolean thymeleaf4Present;, +, + thymeleaf3Present = ClassUtils.isPresent("org.thymeleaf.spring3.context.SpringWebContext", ConnectedAttrProcessor.class.getClassLoader());, + thymeleaf4Present = ClassUtils.isPresent("org.thymeleaf.spring4.context.SpringWebContext", ConnectedAttrProcessor.class.getClassLoader());, + ConnectionRepository connectionRepository = getConnectionRepository(arguments.getContext());, + return connectionRepository.findConnections(providerId).size() > 0;, + }, + private ConnectionRepository getConnectionRepository(final IContext context) {, + ApplicationContext applicationContext = null;, + if (thymeleaf4Present) {, + applicationContext =
[+++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <!-- Configure a GitHub service provider -->, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <!-- Configure a GitHub service provider -->, +++ b/samples/gowalla-showcase/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <!-- Configure a GitHub service provider -->, +++ b/samples/gowalla-showcase/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/gowalla-showcase/src/main/java/org/springframework/social/samples/gowalla/GowallaSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <!-- Configure a GitHub service provider -->, +++ b/samples/gowalla-showcase/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++
[+++ b/docs/src/reference/docbook/signin.xml, + <constructor-arg ref="twitterProvider" />, + <classname>TwitterSigninController</classname> is constructed with four arguments:, + <listitem><para>A reference to a <classname>TwitterServiceProvider</classname> bean. <classname>TwitterSigninController</classname> will use this to negotiate the connection with Twitter.</para></listitem>, + <constructor-arg ref="facebookProvider" />, + It also needs a reference to a <classname>FacebookServiceProvider</classname> bean that it will use to negotiate the connection with Facebook.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors.,
[+++ b/docs/src/reference/docbook/connecting.xml, + <title>Connecting to Service Providers</title>, + <para>Most connections with social providers are based on OAuth <footnote><para><ulink url="http://oauth.net" /></para></footnote>. OAuth is an open protocol that makes it possible for a client to access a service on behalf of a user without the client being aware of the user's credentials.</para>, + , + <para>Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is
[+++ b/build.gradle, + testCompile ("com.h2database:h2:$h2Version"), + testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), + testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion"), + testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), + testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), + testCompile ("com.h2database:h2:$h2Version"), + testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), + testCompile ("org.springframework:spring-jdbc:$springVersion"), + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion", provided), + gradleVersion = '1.3', +++ b/build.gradle, + testCompile ("com.h2database:h2:$h2Version"), + testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), + testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion"), + testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), + testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), + testCompile ("com.h2database:h2:$h2Version"), + testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), + testCompile ("org.springframework:spring-jdbc:$springVersion"), + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion", provided), + gradleVersion = '1.3', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + testCompile ("com.h2database:h2:$h2Version"),
[+++ b/.gitignore, +samples/**/src/main/webapp/META-INF, +++ b/.gitignore, +samples/**/src/main/webapp/META-INF, +++ b/docs/src/reference/docbook/facebook.xml, + <para>Spring Social's <interfacename>FacebookOperations</interfacename> and its implementation, <classname>FacebookTemplate</classname> provider the operations needed to interact with Facebook on behalf of a user.</para>, + <para>Creating an instance of <classname>FacebookTemplate</classname> is as simple as constructing it by passing in an authorized access token to the constructor:</para>, + , + <programlisting><![CDATA[String accessToken = "f8FX29g..."; // access token received from Facebook after OAuth authorization, +FacebookOperations facebook = new FacebookTemplate(accessToken);]]></programlisting>, +, + <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling one of the
[+++ b/samples/twitter-connect/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/src/reference/docbook/implementing.xml, +public interface Twitter extends ApiBinding {, +public class TwitterTemplate extends AbstractOAuth1ApiBinding {, +public class FacebookTemplate extends AbstractOAuth2ApiBinding {, +++ b/docs/src/reference/docbook/implementing.xml, +public interface Twitter extends ApiBinding {, +public class TwitterTemplate extends AbstractOAuth1ApiBinding {, +public class FacebookTemplate extends AbstractOAuth2ApiBinding {, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + *
[+++ b/docs/src/reference/docbook/signin.xml, + <listitem>, + <para>, + If any error occurs while fetching the access token or while fetching the user's profile data, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL., + The request to the sign in URL will have an "error" query parameter set to "provider" to indicate an error occurred while communicating with the provider., + The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., + </para>, + </listitem>, + <listitem><para><code>POST /signin/{providerId}</code> - Initiates the sign in flow. This involves fetching a request
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +++ b/docs/src/reference/docbook/signin.xml, +, + , + <note>, + <para>, + Some providers offer client-side sign in widgets, such as Twitter @Anywhere's "Connect with Twitter" button and Facebook's <code>&lt;fb:login-button&gt;</code>., + Although these widgets offer a sign in experience similar to that of <code>ProviderSignInController</code>, they cannot be used to drive <code>ProviderSignInController</code>'s sign in flow., + The <code>ProviderSignInController</code> sign in flow should be initiated by submitting a POST request as described above., + </para>, + </note>, +, +++ b/docs/src/info/changelog.txt, +Spring
[+++ b/android/src/com/google/zxing/client/android/history/HistoryManager.java, + DateFormat format = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);, + format.format(new Date(timestamp)))).append("\",");]
[+++ b/core/src/main/java/com/google/zxing/ChecksumException.java, + static {, + INSTANCE.setStackTrace(NO_TRACE); // since it's meaningless, + }, +++ b/core/src/main/java/com/google/zxing/ChecksumException.java, + static {, + INSTANCE.setStackTrace(NO_TRACE); // since it's meaningless, + }, +++ b/core/src/main/java/com/google/zxing/FormatException.java, + static {, + INSTANCE.setStackTrace(NO_TRACE); // since it's meaningless, + }, +++ b/core/src/main/java/com/google/zxing/ChecksumException.java, + static {, + INSTANCE.setStackTrace(NO_TRACE); // since it's meaningless, + }, +++ b/core/src/main/java/com/google/zxing/FormatException.java, + static {, + INSTANCE.setStackTrace(NO_TRACE); // since it's meaningless, + }, +++ b/core/src/main/java/com/google/zxing/NotFoundException.java, + static {, + INSTANCE.setStackTrace(NO_TRACE); // since it's meaningless, + }, +++ b/core/src/main/java/com/google/zxing/ChecksumException.java, + static {, + INSTANCE.setStackTrace(NO_TRACE); // since it's meaningless, + }, +++ b/core/src/main/java/com/google/zxing/FormatException.java, + static {, + INSTANCE.setStackTrace(NO_TRACE); //
[+++ b/core/pom.xml, + <jdk>[,9)</jdk> <!-- Proguard won't work with JDK 9 -->, +++ b/core/pom.xml, + <jdk>[,9)</jdk> <!-- Proguard won't work with JDK 9 -->, +++ b/pom.xml, + <!-- appspot app activated by a profile below -->, + <jdk>[,9)</jdk> <!-- Android won't necessarily work with JDK 9 -->, + <profile>, + <id>appspot</id>, + <activation>, + <jdk>[,9)</jdk> <!-- Appspot won't work with JDK 9 -->, + </activation>, + <modules>, + <module>zxing.appspot.com</module>, + </modules>, + </profile>]
[+++ b/android-integration/src/main/java/com/google/zxing/integration/android/IntentIntegrator.java, + * Initiates a scan for all known barcode types with the default camera., + * if a prompt was needed, or null otherwise., + return initiateScan(ALL_CODE_TYPES, -1);, + * Initiates a scan for all known barcode types with the specified camera., + *, + * @param cameraId camera ID of the camera to use, + * @return the {@link AlertDialog} that was shown to the user prompting them to download the app, + * if a prompt was needed, or null otherwise., + */, + public final AlertDialog initiateScan(int cameraId) {, + return initiateScan(ALL_CODE_TYPES, cameraId);, +
[+++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, + drawLine(canvas, paint, points[0], points[1]);, + } else if (points.length == 4 &&, + (rawResult.getBarcodeFormat().equals(BarcodeFormat.UPC_A)) ||, + (rawResult.getBarcodeFormat().equals(BarcodeFormat.EAN_13))) {, + // Hacky special case -- draw two lines, for the barcode and metadata, + drawLine(canvas, paint, points[0], points[1]);, + drawLine(canvas, paint, points[2], points[3]);, + private static void drawLine(Canvas canvas, Paint paint, ResultPoint a, ResultPoint b) {, + canvas.drawLine(a.getX(), a.getY(), b.getX(), b.getY(), paint);, + }, +, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, + drawLine(canvas, paint, points[0], points[1]);, + } else if (points.length == 4 &&, + (rawResult.getBarcodeFormat().equals(BarcodeFormat.UPC_A)) ||, + (rawResult.getBarcodeFormat().equals(BarcodeFormat.EAN_13))) {, + // Hacky special case -- draw two lines, for the
[+++ b/symbian/ZXingBarcodeReader/.cproject, +<storageModule filesCache="C:\Carbide\ZXingWorkspace\ZXingBarcodeReader\group\ZXingBarcodeReader.mmp;C:\Carbide\ZXingWorkspace\ZXingBarcodeReader\group\bld.inf;" includesCache="C:/S60/devices/S60_5th_Edition_SDK_v1.0/epoc32/include;C:/S60/devices/S60_5th_Edition_SDK_v1.0/epoc32/include/stdapis;C:/S60/devices/S60_5th_Edition_SDK_v1.0/epoc32/include/stdapis/sys;C:/S60/devices/S60_5th_Edition_SDK_v1.0/epoc32/include/stdapis/stlport;C:/S60/devices/S60_5th_Edition_SDK_v1.0/epoc32/include/variant;C:/S60/devices/S60_5th_Edition_SDK_v1.0/epoc32/include/ecom;C:/S60/devices/S60_5th_Edition_SDK_v1.0/epoc32/include/stdapis/stlport/stl;C:/Carbide/ZXingWorkspace/ZXingBarcodeReader/group;C:/Carbide/ZXingWorkspace/ZXingBarcodeReader/inc;C:/Carbide/ZXingWorkspace/ZXingBarcodeReader/group/zxing/common/reedsolomon;C:/Carbide/ZXingWorkspace/ZXingBarcodeReader/group/zxing/oned;C:/Carbide/ZXingWorkspace/ZXingBarcodeReader/group/zxing/qrcode;C:/Carbide/ZXingWorkspace/ZXingBarcodeReader/group/zxing/qrcode/decoder;C:/Carbide/ZXingWorkspace/ZXingBarcodeReader/group/zxing/qrcode/detector;" macrosCache="_UNICODE;__SYMBIAN32__;__SUPPORT_CPP_EXCEPTIONS__;__EXE__;__S60_3X__;__SERIES60_3X__;__S60_5X__;__CW32__;__WINS__;__WINSCW__;__S60_50__;_DEBUG;" moduleId="configDataCache" sourcesCache="/ZXingBarcodeReader/data;/ZXingBarcodeReader/group;/ZXingBarcodeReader/group/zxing;/ZXingBarcodeReader/group/zxing/common;/ZXingBarcodeReader/group/zxing/common/reedsolomon;/ZXingBarcodeReader/group/zxing/oned;/ZXingBarcodeReader/group/zxing/qrcode;/ZXingBarcodeReader/group/zxing/qrcode/decoder;/ZXingBarcodeReader/group/zxing/qrcode/detector;/ZXingBarcodeReader/inc;/ZXingBarcodeReader/src;" timestampCache="1272964065464" useMmpMacrosCache="true"/>
[+++ b/core/src/test/java/com/google/zxing/RGBLuminanceSourceTestCase.java, + LuminanceSource croppedFullWidth = SOURCE.crop(0, 1, 3, 2);, + assertArrayEquals(new byte[] { 0x3F, 0x7F, 0x3F, 0x3F, 0x7F, 0x3F },, + croppedFullWidth.getMatrix());, + LuminanceSource croppedCorner = SOURCE.crop(1, 1, 2, 2);, + assertArrayEquals(new byte[] { 0x7F, 0x3F, 0x7F, 0x3F },, + croppedCorner.getMatrix());]
[+++ b/android/res/values-es/strings.xml, + <string name="msg_default_status">Coloque un código de barras en el interior del rectángulo del visor para escanear.</string>, + <string name="msg_share_subject_line">Aquí está el contenido del código de barras que ha escaneado</string>]
[+++ b/android/src/com/google/zxing/client/android/history/DBHelper.java, + private static final int DB_VERSION = 4;]
[+++ b/.travis.yml, +script: mvn -Pjacoco test, +++ b/.travis.yml, +script: mvn -Pjacoco test, +++ b/pom.xml, + <profile>, + <id>jacoco</id>, + <build>, + <plugins>, + <plugin>, + <groupId>org.jacoco</groupId>, + <artifactId>jacoco-maven-plugin</artifactId>, + </plugin>, + </plugins>, + </build>, + </profile>]
[+++ b/android-integration/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/glass-mirror/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/glass-mirror/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/javase/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/glass-mirror/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/javase/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <version>3.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>3.0.0-SNAPSHOT</version>, + <connection>scm:svn:http://zxing.googlecode.com/svn/trunk</connection>, + <developerConnection>scm:svn:https://zxing.googlecode.com/svn/trunk</developerConnection>, + <url>http://zxing.googlecode.com/svn/trunk</url>, +++ b/android-integration/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +
[+++ b/csharp/MultiFormatReader.cs, +using com.google.zxing.datamatrix;
[+++ b/android/src/com/google/zxing/client/android/encode/EncodeThread.java, +/*, + * Copyright (C) 2010 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/build.xml, + <classpath>, + <pathelement location="${WTK-home}/lib/cldcapi11.jar"/>, + <pathelement location="${WTK-home}/lib/midpapi20.jar"/>, + <pathelement location="${WTK-home}/lib/mmapi.jar"/>, + <pathelement location="${WTK-home}/lib/jsr234.jar"/> , + </classpath>]
[+++ b/CHANGES, +, +0.4 (15 Feb 2008), + - First release of Android client -- only guaranteed to work with "M3", + builds so far., + - Major reorganization of current test cases and data, + - Worked around ProGuard issue with paths with spaces on Windows, + - Phones that don't like FocusControl.AUTO_LOCK won't cause an error now, + - Fixed ArrayIndexOutOfBoundsException in 1D barcode decoders, + - Worked around "java.lang.Error 136" from Nokia N70 (?), + - Fixed bug in Shift_JIS detection and implemented basic UTF-8 detection, + for nonstandard QR Codes that don't use ISO-8859-1, +++
[+++ b/android-integration/pom.xml, + <version>3.1.1-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.1.1-SNAPSHOT</version>, +++ b/glass/pom.xml, + <version>0.2.2</version>, + <version>3.1.1-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.1.1-SNAPSHOT</version>, +++ b/glass/pom.xml, + <version>0.2.2</version>, + <version>3.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.9.1</version>]
[+++ b/android/src/com/google/zxing/client/android/camera/CameraConfigurationManager.java, + private static final int MIN_FPS = 5;, + setBestPreviewFPS(parameters);, + private static void setBestPreviewFPS(Camera.Parameters parameters) {, + // Required for Glass compatibility; also improves battery/CPU performance a tad, + List<int[]> supportedPreviewFpsRanges = parameters.getSupportedPreviewFpsRange();, + Log.i(TAG, "Supported FPS ranges: " + supportedPreviewFpsRanges);, + if (supportedPreviewFpsRanges != null && !supportedPreviewFpsRanges.isEmpty()) {, + int[] minimumSuitableFpsRange = null;, + for (int[] fpsRange : supportedPreviewFpsRanges) {, + if (fpsRange[Camera.Parameters.PREVIEW_FPS_MAX_INDEX] >= MIN_FPS * 1000) {, + minimumSuitableFpsRange = fpsRange;, + break;, + }, + }, + if (minimumSuitableFpsRange == null) {, + Log.i(TAG, "No suitable FPS range?");, + } else {, +
[+++ b/build.properties, +version=0.1.2, +, +# Set this to a location where Sun's Wireless Toolkit, version 2.5.2 or later, has been installed, +, +# Set this to a location where the platform classes included with Java SDK version 1.4 (not later), +# have been installed. This is typically the installation root of the JDK followed by, +# 'jre/lib/rt.jar', +JDK1.4-classes=/usr/lib/jvm/j2sdk1.4.2_16/jre/lib/rt.jar, +++ b/build.properties, +version=0.1.2, +, +# Set this to a location where Sun's Wireless Toolkit, version 2.5.2 or later, has been installed, +, +# Set this to a location where the platform classes included with Java SDK version 1.4 (not later), +#
[+++ b/android/AndroidManifest.xml, +++ b/android/AndroidManifest.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/AndroidManifest.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/AndroidManifest.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/AndroidManifest.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-cs/strings.xml, +++ b/android/AndroidManifest.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-cs/strings.xml, +++ b/android/res/values-da/strings.xml, +++ b/android/AndroidManifest.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-cs/strings.xml, +++ b/android/res/values-da/strings.xml, +++ b/android/res/values-de/strings.xml, +++ b/android/AndroidManifest.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-cs/strings.xml, +++ b/android/res/values-da/strings.xml, +++ b/android/res/values-de/strings.xml, +++ b/android/res/values-el/strings.xml, +++ b/android/AndroidManifest.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-cs/strings.xml, +++ b/android/res/values-da/strings.xml, +++ b/android/res/values-de/strings.xml, +++ b/android/res/values-el/strings.xml, +++ b/android/res/values-es/strings.xml, +++ b/android/AndroidManifest.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++
[+++ b/build.properties, +, +# Uncomment and set this variable if building the zxing.appspot.com subdirectory. It points to the, +# location of the Google Web Toolkit (GWT) which can be downloaded here:, +# http://code.google.com/webtoolkit/, +#GWT-home=/usr/local/gwt]
[+++ b/android/src/com/google/zxing/client/android/encode/ContactEncoder.java, + Iterable<String> urls,, + if (trimmed != null && trimmed.length() > 0 && !uniques.contains(trimmed)) {, +++ b/android/src/com/google/zxing/client/android/encode/ContactEncoder.java, + Iterable<String> urls,, + if (trimmed != null && trimmed.length() > 0 && !uniques.contains(trimmed)) {, +++ b/android/src/com/google/zxing/client/android/encode/MECARDContactEncoder.java, + Iterable<String> urls,, + appendUpToUnique(newContents, newDisplayContents, "URL", urls, Integer.MAX_VALUE, null);, +++ b/android/src/com/google/zxing/client/android/encode/ContactEncoder.java, + Iterable<String> urls,, + if (trimmed != null && trimmed.length() > 0 && !uniques.contains(trimmed)) {, +++ b/android/src/com/google/zxing/client/android/encode/MECARDContactEncoder.java, + Iterable<String> urls,, + appendUpToUnique(newContents, newDisplayContents, "URL", urls, Integer.MAX_VALUE, null);, +++ b/android/src/com/google/zxing/client/android/encode/QRCodeEncoder.java, + Collection<String> urls = url == null ? null : Collections.singletonList(url);, + urls,, + toIterable(contact.getURLs()),, +++ b/android/src/com/google/zxing/client/android/encode/ContactEncoder.java, + Iterable<String> urls,, + if
[+++ b/.travis.yml, +install: mvn -Ptravis -DskipTests=true -B -V install, + - mvn -Ptravis ${JACOCO} test]
[+++ b/android/src/com/google/zxing/client/android/camera/CameraConfigurationManager.java, + private static final int MAX_PREVIEW_PIXELS = 1280 * 720;]
[+++ b/android/src/com/google/zxing/client/android/camera/CameraManager.java, + private static final int MAX_FRAME_WIDTH = 1200; // = 5/8 * 1920, + private static final int MAX_FRAME_HEIGHT = 675; // = 5/8 * 1080, + int dim = 5 * resolution / 8; // Target 5/8 of each dimension]
[+++ b/android/src/com/google/zxing/client/android/camera/CameraManager.java, + if (cameraResolution == null || screenResolution == null) {, + // Called early, before init even finished, + return null;, + }]
[+++ b/core/src/main/java/com/google/zxing/pdf417/decoder/ec/ErrorCorrection.java, + if (erasures != null) {, + }]
[+++ b/androidtest/AndroidManifest.xml, + android:icon="@drawable/icon" , + android:allowBackup="true">, + android:label="@string/app_name">, + android:label="@string/benchmark_name"/>, +++ b/androidtest/AndroidManifest.xml, + android:icon="@drawable/icon" , + android:allowBackup="true">, + android:label="@string/app_name">, + android:label="@string/benchmark_name"/>, +++ b/androidtest/proguard.cfg, +# This is a configuration file for ProGuard., +# http://proguard.sourceforge.net/index.html#manual/usage.html, +, +# Optimizations: If you don't want to optimize, use the, +# proguard-android.txt configuration file instead of this one, which, +# turns off the optimization flags. Adding optimization introduces, +# certain risks, since for example not all optimizations performed by, +# ProGuard works on all versions of Dalvik. The following flags turn, +# off various optimizations known to have issues, but the list may not,
[+++ b/android-core/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <version>3.3.0-SNAPSHOT</version>, +++ b/android-core/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <version>3.3.0-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <version>3.3.0-SNAPSHOT</version>, +++ b/android-core/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <version>3.3.0-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <version>3.3.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/android-core/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <version>3.3.0-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <version>3.3.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/androidtest/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/android-core/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <version>3.3.0-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <version>3.3.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/androidtest/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <version>3.3.0-SNAPSHOT</version>, +++ b/android-core/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <version>3.3.0-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <version>3.3.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/androidtest/pom.xml, +
[+++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, + builder.setPositiveButton(R.string.button_ok, new FinishListener(this));, + builder.setOnCancelListener(new FinishListener(this));, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, + builder.setPositiveButton(R.string.button_ok, new FinishListener(this));, + builder.setOnCancelListener(new FinishListener(this));, +++ b/android/src/com/google/zxing/client/android/FinishListener.java, +/*, + * Copyright (C) 2010 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,,
[+++ b/android/src/com/google/zxing/client/android/camera/CameraManager.java, + private static final int MAX_FRAME_WIDTH = 960; // = 1920/2, + private static final int MAX_FRAME_HEIGHT = 540; // = 1080/2, +, + int width = findDesiredDimensionInRange(screenResolution.x, MIN_FRAME_WIDTH, MAX_FRAME_WIDTH);, + int height = findDesiredDimensionInRange(screenResolution.y, MIN_FRAME_HEIGHT, MAX_FRAME_HEIGHT);, +, + private static int findDesiredDimensionInRange(int resolution, int hardMin, int hardMax) {, + int dim = resolution / 2; // Target 50% of each dimension, + if (dim < hardMin) {, + return hardMin;, + }, + if (dim > hardMax) {, + return hardMax;, + }, + return dim;, + }, +]
[+++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, + , + inactivityTimer.onResume();, + inactivityTimer.onPause();, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, + , + inactivityTimer.onResume();, + inactivityTimer.onPause();, +++ b/android/src/com/google/zxing/client/android/InactivityTimer.java, +import android.content.BroadcastReceiver;, +import android.content.Context;, +import android.content.Intent;, +import android.content.IntentFilter;, + * Finishes an activity after a period of inactivity if the device is on battery power., + private final PowerStatusReceiver powerStatusReceiver = new PowerStatusReceiver();, + public void onPause(){, + activity.unregisterReceiver(powerStatusReceiver);, + }, + , + public void onResume(){, + activity.registerReceiver(powerStatusReceiver, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));, + }, +, + private final class PowerStatusReceiver extends BroadcastReceiver {, + @Override, + public void onReceive(Context context, Intent intent){, + if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {, + // 0 indicates that we're
[+++ b/android/res/values-sk/strings.xml, + <string name="preferences_custom_product_search_summary">Použitie %s ako zástupný symbol pre ID produktu, a %f pre formát</string>]
[+++ b/core/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <version>3.3.2-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <version>3.3.2-SNAPSHOT</version>, +++ b/javase/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <version>3.3.2-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <version>3.3.2-SNAPSHOT</version>, +++ b/javase/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <version>3.3.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <zxing.version>3.3.2-SNAPSHOT</zxing.version>, + <tag>HEAD</tag>, +++ b/core/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <version>3.3.2-SNAPSHOT</version>, +++ b/javase/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <version>3.3.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <zxing.version>3.3.2-SNAPSHOT</zxing.version>, + <tag>HEAD</tag>, +++ b/zxing.appspot.com/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <version>3.3.2-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <version>3.3.2-SNAPSHOT</version>, +++ b/javase/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <version>3.3.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <zxing.version>3.3.2-SNAPSHOT</zxing.version>, + <tag>HEAD</tag>, +++ b/zxing.appspot.com/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <version>3.3.2-SNAPSHOT</version>, +++ b/zxingorg/pom.xml, + <version>3.3.2-SNAPSHOT</version>, + <version>3.3.2-SNAPSHOT</version>]
[+++ b/android-core/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/android-core/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/android-core/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/android-core/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/javase/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/android-core/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/android-integration/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/javase/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <zxing.version>3.2.2-SNAPSHOT</zxing.version>, + <tag>HEAD</tag>, +++ b/android-core/pom.xml, + <version>3.2.2-SNAPSHOT</version>, + <version>3.2.2-SNAPSHOT</version>, +++
[+++ b/android/assets/html-de/whatsnew.html, + <li> Neue Option, um automatisch geöffneten Webseiten </li>, +++ b/android/assets/html-de/whatsnew.html, + <li> Neue Option, um automatisch geöffneten Webseiten </li>, +++ b/android/assets/html-en/whatsnew.html, + <li>New option to automatically open web pages</li>, +++ b/android/assets/html-de/whatsnew.html, + <li> Neue Option, um automatisch geöffneten Webseiten </li>, +++ b/android/assets/html-en/whatsnew.html, + <li>New option to automatically open web pages</li>, +++ b/android/assets/html-es/whatsnew.html, + <li> Nueva opción para abrir automáticamente las páginas web </li>, +++ b/android/assets/html-de/whatsnew.html, + <li> Neue Option, um automatisch geöffneten Webseiten </li>, +++ b/android/assets/html-en/whatsnew.html, + <li>New option to automatically open web pages</li>, +++ b/android/assets/html-es/whatsnew.html, + <li> Nueva opción para abrir automáticamente las páginas web
[+++ b/android/AndroidManifest.xml, + <activity android:name=".history.HistoryActivity", + android:label="@string/history_title", + android:stateNotNeeded="true">, + <intent-filter>, + <action android:name="android.intent.action.VIEW"/>, + <category android:name="android.intent.category.DEFAULT"/>, + </intent-filter>, + </activity>, +++ b/android/AndroidManifest.xml, + <activity android:name=".history.HistoryActivity", + android:label="@string/history_title", + android:stateNotNeeded="true">, + <intent-filter>, + <action android:name="android.intent.action.VIEW"/>, + <category android:name="android.intent.category.DEFAULT"/>, + </intent-filter>, + </activity>, +++ b/android/res/layout/history_list_item.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<LinearLayout, + xmlns:android="http://schemas.android.com/apk/res/android", + android:orientation="vertical", + android:layout_width="fill_parent", + android:layout_height="wrap_content", + android:padding="8dip">, +, + <TextView android:id="@+id/history_title", + android:layout_width="fill_parent", + android:layout_height="wrap_content", + android:textAppearance="?android:attr/textAppearanceLarge", + android:singleLine="true"/>, +, + <TextView android:id="@+id/history_detail", + android:layout_width="fill_parent", + android:layout_height="wrap_content", + android:textAppearance="?android:attr/textAppearanceSmall", + android:singleLine="false"/>, +, +</LinearLayout>, +++ b/android/AndroidManifest.xml, + <activity android:name=".history.HistoryActivity", + android:label="@string/history_title", + android:stateNotNeeded="true">, + <intent-filter>, + <action android:name="android.intent.action.VIEW"/>,
[+++ b/android-integration/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/android-integration/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/core/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/android-integration/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/core/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/glass-mirror/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/android-integration/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/core/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/glass-mirror/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/javase/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/android-integration/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/core/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/glass-mirror/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/javase/pom.xml, + <version>2.3.0</version>, + <version>2.3.0</version>, +++ b/pom.xml, + <version>2.3.0</version>, + <connection>scm:svn:http://zxing.googlecode.com/svn/tags/zxing-parent-2.3.0</connection>, + <developerConnection>scm:svn:https://zxing.googlecode.com/svn/tags/zxing-parent-2.3.0</developerConnection>, + <url>http://zxing.googlecode.com/svn/tags/zxing-parent-2.3.0</url>, +++ b/android-integration/pom.xml, + <version>2.3.0</version>, +
[+++ b/android-m3/src/com/google/zxing/client/android/BarcodeReaderCaptureActivity.java, + switch (keyCode) {, + case KeyEvent.KEYCODE_A:, + break;, + case KeyEvent.KEYCODE_C:, + break;, + case KeyEvent.KEYCODE_P:, + break;, + case KeyEvent.KEYCODE_Q:, + break;, + case KeyEvent.KEYCODE_S:, + break;, + case KeyEvent.KEYCODE_T:, + break;, + case KeyEvent.KEYCODE_U:, + break;, + default:, + void restartPreview() {, + TextView actionButton = (TextView) findViewById(R.id.status_action_button);, + View.OnClickListener handler = new ResultHandler(this, readerResult);, + View actionButton = findViewById(R.id.status_action_button);, +++ b/android-m3/src/com/google/zxing/client/android/BarcodeReaderCaptureActivity.java, + switch (keyCode) {, + case KeyEvent.KEYCODE_A:, + break;, + case KeyEvent.KEYCODE_C:, + break;, + case KeyEvent.KEYCODE_P:, + break;, + case KeyEvent.KEYCODE_Q:, + break;, + case KeyEvent.KEYCODE_S:, + break;, + case KeyEvent.KEYCODE_T:,
[+++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +++ b/android/src/com/google/zxing/client/android/HttpHelper.java, + Log.i(TAG, "Consuming " + uri);, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +++ b/android/src/com/google/zxing/client/android/HttpHelper.java, + Log.i(TAG, "Consuming " + uri);, +++ b/android/src/com/google/zxing/client/android/result/WifiResultHandler.java, + new WifiConfigManager(wifiManager).execute(wifiResult);, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +++ b/android/src/com/google/zxing/client/android/HttpHelper.java, + Log.i(TAG, "Consuming " + uri);, +++ b/android/src/com/google/zxing/client/android/result/WifiResultHandler.java, + new WifiConfigManager(wifiManager).execute(wifiResult);, +++ b/android/src/com/google/zxing/client/android/result/supplement/BookResultInfoRetriever.java, + BookResultInfoRetriever(TextView textView, String isbn, HistoryManager historyManager, Context context) {, + super(textView, historyManager);, + void retrieveSupplementalInfo() throws IOException {, + authors = new ArrayList<String>(authorsArray.length());, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +++ b/android/src/com/google/zxing/client/android/HttpHelper.java, + Log.i(TAG, "Consuming " + uri);, +++ b/android/src/com/google/zxing/client/android/result/WifiResultHandler.java, + new WifiConfigManager(wifiManager).execute(wifiResult);, +++ b/android/src/com/google/zxing/client/android/result/supplement/BookResultInfoRetriever.java, + BookResultInfoRetriever(TextView textView, String isbn, HistoryManager historyManager, Context context) {, + super(textView, historyManager);, +
[+++ b/android/res/layout-ldpi/capture.xml, + <LinearLayout, + android:orientation="vertical", + android:layout_width="wrap_content", + android:layout_height="wrap_content">, +, + <TextView android:id="@+id/contents_supplement_text_view", + android:layout_width="wrap_content", + android:layout_height="wrap_content", + android:textColor="@color/result_text", + android:textColorLink="@color/result_text", + android:textSize="14sp", + android:padding="24dip", + android:autoLink="web", + android:clickable="true"/>, +, + </LinearLayout>, +, +++ b/android/res/layout-ldpi/capture.xml, + <LinearLayout, + android:orientation="vertical", + android:layout_width="wrap_content", + android:layout_height="wrap_content">, +, + <TextView android:id="@+id/contents_supplement_text_view", + android:layout_width="wrap_content", + android:layout_height="wrap_content", + android:textColor="@color/result_text", + android:textColorLink="@color/result_text", + android:textSize="14sp", + android:padding="24dip", + android:autoLink="web", + android:clickable="true"/>, +, + </LinearLayout>, +, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java]
[+++ b/CHANGES, +, +3.4.0 (?), +, + - Removed Google Glass, ZXing Test apps, +++ b/CHANGES, +, +3.4.0 (?), +, + - Removed Google Glass, ZXing Test apps, +++ b/README.md, +++ b/CHANGES, +, +3.4.0 (?), +, + - Removed Google Glass, ZXing Test apps, +++ b/README.md, +++ /dev/null, +++ b/CHANGES, +, +3.4.0 (?), +, + - Removed Google Glass, ZXing Test apps, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ b/CHANGES, +, +3.4.0 (?), +, + - Removed Google Glass, ZXing Test apps, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CHANGES, +, +3.4.0 (?), +, + - Removed
[+++ b/android-integration/src/com/google/zxing/integration/android/IntentIntegrator.java, + byte[] rawBytes = intent.getByteArrayExtra("SCAN_RESULT_BYTES");, + return new IntentResult(contents, formatName, rawBytes);, + return new IntentResult();, +++ b/android-integration/src/com/google/zxing/integration/android/IntentIntegrator.java, + byte[] rawBytes = intent.getByteArrayExtra("SCAN_RESULT_BYTES");, + return new IntentResult(contents, formatName, rawBytes);, + return new IntentResult();, +++ b/android-integration/src/com/google/zxing/integration/android/IntentResult.java, + private final byte[] rawBytes;, + IntentResult() {, + this(null, null, null);, + }, +, + IntentResult(String contents, String formatName, byte[] rawBytes) {, + this.rawBytes = rawBytes;, + /**, + * @return raw bytes of the barcode content, if applicable, or null otherwise, + */, + public byte[] getRawBytes() {, + return rawBytes;, + }, +, +++ b/android-integration/src/com/google/zxing/integration/android/IntentIntegrator.java, + byte[] rawBytes = intent.getByteArrayExtra("SCAN_RESULT_BYTES");,
[+++ b/symbian/ZXingBarcodeReader/.cproject, +<cconfiguration id="Emulator Debug (WINSCW) [S60_3rd_FP2_SDK_v1.1]">
[+++ b/android/res/values-cs/strings.xml, + <string name="preferences_custom_product_search_summary">Použijte %s jako zástupný symbol pro ID produktu, a %f pro formát</string>, + <string name="preferences_front_light_summary">Zlepšuje skenování při slabém osvětlení na některých telefonech, ale může způsobit oslnění. Nefunguje na všech telefonech.</string>, +++ b/android/res/values-cs/strings.xml, + <string name="preferences_custom_product_search_summary">Použijte %s jako zástupný symbol pro ID produktu, a %f pro formát</string>, + <string name="preferences_front_light_summary">Zlepšuje skenování při slabém osvětlení na některých telefonech, ale může způsobit oslnění. Nefunguje na všech telefonech.</string>, +++ b/android/res/values-da/strings.xml, + <string name="preferences_custom_product_search_summary">Brug %s som en pladsholder for produkt-id, og %f for format</string>, + <string name="preferences_front_light_summary">Forbedrer scanning i svagt lys på nogle telefoner, men kan forårsage blænding. Virker ikke
[+++ b/android/AndroidManifest.xml, + android:versionName="3.51", + android:versionCode="64", +++ b/android/AndroidManifest.xml, + android:versionName="3.51", + android:versionCode="64", +++ b/android/assets/html/whatsnew.html, + <li>Fixed Danish and Turkish translations.</li>]
[+++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +language: java, +jdk:, + - oraclejdk7, + - openjdk6]
[+++ b/core/src/main/java/com/google/zxing/oned/Code128Writer.java, + if (oldCode == CODE_CODE_A) {, + return CODE_CODE_A;, + }, + if (c < ' ' || (oldCode == CODE_CODE_A && (c < '`' || (c >= ESCAPE_FNC_1 && c <= ESCAPE_FNC_4)))) {, + // can continue in code A, encodes ASCII 0 to 95 or FNC1 to FNC4, + if (oldCode == CODE_CODE_A && lookahead == CType.FNC_1) {, + return CODE_CODE_A;, + }, +++ b/core/src/main/java/com/google/zxing/oned/Code128Writer.java, + if (oldCode == CODE_CODE_A) {, + return CODE_CODE_A;, + }, + if (c < ' ' || (oldCode == CODE_CODE_A && (c < '`' || (c >= ESCAPE_FNC_1 &&
[+++ b/core/test/data/blackbox/aztec-1/tag.png, +++ b/core/test/data/blackbox/aztec-1/tag.png, +++ b/core/test/data/blackbox/aztec-1/tag.txt, +Ceci est un tag., +++ b/core/test/data/blackbox/aztec-1/tag.png, +++ b/core/test/data/blackbox/aztec-1/tag.txt, +Ceci est un tag., +++ b/core/test/data/blackbox/aztec-1/texte.png, +++ b/core/test/data/blackbox/aztec-1/tag.png, +++ b/core/test/data/blackbox/aztec-1/tag.txt, +Ceci est un tag., +++ b/core/test/data/blackbox/aztec-1/texte.png, +++ b/core/test/data/blackbox/aztec-1/texte.txt, +Ceci est un texte!, +++ b/core/test/data/blackbox/aztec-1/tag.png, +++ b/core/test/data/blackbox/aztec-1/tag.txt, +Ceci est un tag., +++ b/core/test/data/blackbox/aztec-1/texte.png, +++ b/core/test/data/blackbox/aztec-1/texte.txt, +Ceci est un texte!, +++ b/core/test/src/com/google/zxing/aztec/AztecBlackBox1TestCase.java, + addTest(11, 11, 0.0f);, + addTest(11, 11, 90.0f);, + addTest(11, 11, 180.0f);, + addTest(11, 11, 270.0f);]
[+++ b/zxingorg/src/main/java/com/google/zxing/web/DecodeServlet.java, + } catch (IOException ioe) {, + log.info(ioe.toString());, + response.sendRedirect("badurl.jspx");]
[+++ b/android/src/com/google/zxing/client/android/HttpHelper.java, +import java.io.InputStreamReader;, +import java.io.Reader;, + * Downloads the entire resource instead of part., + *, + * @see #downloadViaHttp(String, HttpHelper.ContentType, int), + */, + public static CharSequence downloadViaHttp(String uri, ContentType type) throws IOException {, + return downloadViaHttp(uri, type, Integer.MAX_VALUE);, + }, +, + /**, + * @param maxChars approximate maximum characters to read from the source, + public static CharSequence downloadViaHttp(String uri, ContentType type, int maxChars) throws IOException {, + return downloadViaHttp(uri, contentTypes, maxChars);, + private static CharSequence downloadViaHttp(String uri, String contentTypes, int maxChars) throws IOException {, + return consume(connection, maxChars);, + private static CharSequence consume(URLConnection connection,
[+++ b/core/src/main/java/com/google/zxing/pdf417/encoder/PDF417HighLevelEncoder.java, +import java.nio.charset.CharsetEncoder;, + byte[] bytes = msg.getBytes(encoding);, + int b = determineConsecutiveBinaryCount(msg, p, encoding);, + byte[] bytes = msg.substring(p, b).getBytes(encoding);, + if (bytes.length == 1 && encodingMode == TEXT_COMPACTION) {, + encodeBinary(bytes, 0, 1, TEXT_COMPACTION, sb);, + encodeBinary(bytes, 0, bytes.length, encodingMode, sb);, + * @param encoding the charset used to convert the message to a byte array, + private static int determineConsecutiveBinaryCount(String msg, int startpos, Charset encoding), + final CharsetEncoder encoder = encoding.newEncoder();, + if (!encoder.canEncode(ch)) {]
[+++ b/.github/CONTRIBUTING.md, +## Contributing, +, +The project is in maintenance mode, meaning, changes are driven by contributed patches., +There is otherwise no active development or roadmap for this project. It is "DIY"., +, +Only proposed changes in the form of a pull request are likely to be acted on, but,, +these will be acted on promptly., +, +### Questions, +, +Questions should be asked on the mailing list:, +https://groups.google.com/forum/#!forum/zxing, +, +### Feature Requests, +, +Feature requests are not accepted and will generally be closed., +Feature requests with a pull request may be accepted. When in doubt, discuss on the, +mailing
[+++ b/core/src/com/google/zxing/oned/ITFReader.java, + private static final int MAX_INDIVIDUAL_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.78f);
[+++ b/android/build.xml, +, + <copy file="strings.xml.template" tofile="res/values/strings.xml" overwrite="true">, + <filterset>, + <filter token="VERSION" value="${version}"/>, + </filterset>, + </copy>, +, +++ b/android/build.xml, +, + <copy file="strings.xml.template" tofile="res/values/strings.xml" overwrite="true">, + <filterset>, + <filter token="VERSION" value="${version}"/>, + </filterset>, + </copy>, +, +++ /dev/null]
[+++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-cs/strings.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-cs/strings.xml, +++ b/android/res/values-da/strings.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-cs/strings.xml, +++ b/android/res/values-da/strings.xml, +++ b/android/res/values-de/strings.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-cs/strings.xml, +++ b/android/res/values-da/strings.xml, +++ b/android/res/values-de/strings.xml, +++ b/android/res/values-el/strings.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-cs/strings.xml, +++ b/android/res/values-da/strings.xml, +++ b/android/res/values-de/strings.xml, +++ b/android/res/values-el/strings.xml, +++ b/android/res/values-es/strings.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-cs/strings.xml, +++ b/android/res/values-da/strings.xml, +++ b/android/res/values-de/strings.xml, +++ b/android/res/values-el/strings.xml, +++ b/android/res/values-es/strings.xml, +++ b/android/res/values-fi/strings.xml, +++ b/android/res/values-ar/strings.xml, +++ b/android/res/values-bg/strings.xml, +++ b/android/res/values-ca/strings.xml, +++ b/android/res/values-cs/strings.xml, +++
[+++ b/core/build.xml, + <param name="subdir" value="aztec"/>, + </antcall>, + <antcall target="test-blackbox-subset">, +++ b/core/build.xml, + <param name="subdir" value="aztec"/>, + </antcall>, + <antcall target="test-blackbox-subset">, +++ b/core/test/data/blackbox/aztec-2/01.png, +++ b/core/build.xml, + <param name="subdir" value="aztec"/>, + </antcall>, + <antcall target="test-blackbox-subset">, +++ b/core/test/data/blackbox/aztec-2/01.png, +++ b/core/test/data/blackbox/aztec-2/01.txt, +This is a real world Aztec barcode test., +++ b/core/build.xml, + <param name="subdir" value="aztec"/>, + </antcall>, + <antcall target="test-blackbox-subset">, +++ b/core/test/data/blackbox/aztec-2/01.png, +++ b/core/test/data/blackbox/aztec-2/01.txt, +This is a real world Aztec barcode test., +++ b/core/test/data/blackbox/aztec-2/02.png, +++ b/core/build.xml, + <param name="subdir" value="aztec"/>, + </antcall>, + <antcall target="test-blackbox-subset">, +++ b/core/test/data/blackbox/aztec-2/01.png, +++ b/core/test/data/blackbox/aztec-2/01.txt, +This is a real world Aztec barcode test., +++ b/core/test/data/blackbox/aztec-2/02.png, +++ b/core/test/data/blackbox/aztec-2/02.txt,
[+++ b/android/build.xml, + <!--<property name="external-libs-folder" value="../core" />-->, + <!-- yeah, want to not use this mechanism above -->, + <pathelement path="../core/core.jar"/>, +, + <!-- Optimize with ProGuard -->, + <unzip src="../core/core.jar" dest="${out-classes}" overwrite="true"/>, + <jar jarfile="temp.jar" basedir="${out-classes}"/>, + <delete dir="${out-classes}"/>, + <mkdir dir="${out-classes}"/>, + <property name="libraryjars.path" refid="android.target.classpath"/>, + <java jar="${WTK-home}/bin/proguard.jar" fork="true" failonerror="true">, + <jvmarg value="-Dmaximum.inlined.code.length=32"/>, + <arg value="-injars temp.jar"/>, + <arg value="-outjars temp-optimized.jar"/>, + <arg value="-libraryjars ${libraryjars.path}"/>, + <arg value="-keep class com.google.zxing.client.android.*Activity"/>, + <arg value="-keep class com.google.zxing.client.android.ViewfinderView { public * ; }"/>, + <arg value="-keep class com.google.zxing.client.android.SearchBookContents* { public * ; }"/>, + <arg value="-target 5"/>, + <arg value="-optimizationpasses
[+++ /dev/null, +++ /dev/null, +++ b/android/project.properties, +# To customize properties used by the Ant build system edit, +#, +# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):, +proguard.config=${sdk.dir}/tools/proguard/proguard-android-optimize.txt]
[+++ b/android/src/com/google/zxing/client/android/history/HistoryManager.java, +import java.text.DateFormat;, +import java.util.Date;, + private static final String[] EXPORT_COL_PROJECTION = {, + DBHelper.TEXT_COL,, + DBHelper.DISPLAY_COL,, + DBHelper.FORMAT_COL,, + DBHelper.TIMESTAMP_COL,, + };, + private static final DateFormat EXPORT_DATE_TIME_FORMAT = DateFormat.getDateTimeInstance();, + CharSequence history = buildHistory();, + intent.setType("text/csv");, + /**, + * <p>Builds a text representation of the scanning history. Each scan is encoded on one, + * line, terminated by a line break (\n). The values in each line are comma-separated,, + * and double-quoted. Double-quotes within values are escaped with a sequence of two, + * double-quotes. The fields output are:</p>, + *, + * <ul>,
[+++ b/pom.xml, + <version>2.5</version>, + <maven>3.1.1</maven>]
[+++ b/android/AndroidManifest.xml, + android:versionName="3.0 alpha1", + android:versionCode="24">, +++ b/android/AndroidManifest.xml, + android:versionName="3.0 alpha1", + android:versionCode="24">, +++ b/android/build.xml, + <property file="build.properties"/>, + <arg value="${application-package}" />, +++ b/android/AndroidManifest.xml, + android:versionName="3.0 alpha1", + android:versionCode="24">, +++ b/android/build.xml, + <property file="build.properties"/>, + <arg value="${application-package}" />, +++ b/android/src/com/google/zxing/client/android/CameraManager.java, +, + // Disables the built-in flash if present. Hopefully devices will honor this setting., + parameters.set("flash-mode", "off");, +++ b/android/AndroidManifest.xml, + android:versionName="3.0 alpha1", + android:versionCode="24">, +++ b/android/build.xml, + <property file="build.properties"/>, + <arg value="${application-package}" />, +++ b/android/src/com/google/zxing/client/android/CameraManager.java, +, + // Disables the built-in flash if present. Hopefully devices will honor this setting., + parameters.set("flash-mode", "off");, +++ b/androidtest/build.xml, + <property
[+++ b/pom.xml, + <version>3.5.1</version>, +++ b/pom.xml, + <version>3.5.1</version>, +++ b/zxingorg/pom.xml, + <version>9.3.9.M1</version>]
[+++ b/android/src/com/google/zxing/client/android/encode/QRCodeEncoder.java, +import java.io.ByteArrayOutputStream;, + ByteArrayOutputStream baos = new ByteArrayOutputStream();, + byte[] buffer = new byte[2048];, + int bytesRead;, + while ((bytesRead = stream.read(buffer)) > 0) {, + baos.write(buffer, 0, bytesRead);, + vcard = baos.toByteArray();, + vcardString = new String(vcard, 0, vcard.length, "UTF-8");]
[+++ b/androidtest/build.xml, + apkfilepath="${out-folder}/ZXingTest-unsigned.apk"]
[+++ b/build.xml]
[+++ b/pom.xml]
[+++ /dev/null, +++ /dev/null, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +import com.google.zxing.client.android.camera.CameraManager;, +++ /dev/null, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +import com.google.zxing.client.android.camera.CameraManager;, +++ b/android/src/com/google/zxing/client/android/CaptureActivityHandler.java, +import com.google.zxing.client.android.camera.CameraManager;, +, +, +++ /dev/null, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +import com.google.zxing.client.android.camera.CameraManager;, +++ b/android/src/com/google/zxing/client/android/CaptureActivityHandler.java, +import com.google.zxing.client.android.camera.CameraManager;, +, +, +++ b/android/src/com/google/zxing/client/android/DecodeThread.java, +import com.google.zxing.client.android.camera.CameraManager;, +, +++ /dev/null, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +import com.google.zxing.client.android.camera.CameraManager;, +++ b/android/src/com/google/zxing/client/android/CaptureActivityHandler.java, +import com.google.zxing.client.android.camera.CameraManager;, +, +, +++ b/android/src/com/google/zxing/client/android/DecodeThread.java, +import com.google.zxing.client.android.camera.CameraManager;, +, +++ /dev/null, +++ /dev/null, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +import com.google.zxing.client.android.camera.CameraManager;, +++ b/android/src/com/google/zxing/client/android/CaptureActivityHandler.java, +import com.google.zxing.client.android.camera.CameraManager;, +, +, +++ b/android/src/com/google/zxing/client/android/DecodeThread.java, +import com.google.zxing.client.android.camera.CameraManager;, +, +++ /dev/null, +++ b/android/src/com/google/zxing/client/android/PlanarYUVLuminanceSource.java, + public PlanarYUVLuminanceSource(byte[] yuvData, int dataWidth, int dataHeight, int left, int top,, +++ /dev/null, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +import com.google.zxing.client.android.camera.CameraManager;, +++ b/android/src/com/google/zxing/client/android/CaptureActivityHandler.java, +import com.google.zxing.client.android.camera.CameraManager;,
[+++ b/core/src/main/java/com/google/zxing/ChecksumException.java, + private ChecksumException(Throwable cause) {, + super(cause);, + public static ChecksumException getChecksumInstance() {, + if (isStackTrace) {, + return new ChecksumException();, + } else {, + return instance;, + }, + }, +, + public static ChecksumException getChecksumInstance(Throwable cause) {, + if (isStackTrace) {, + return new ChecksumException(cause);, + } else {, + return instance;, + }, + }, +++ b/core/src/main/java/com/google/zxing/ChecksumException.java, + private ChecksumException(Throwable cause) {, + super(cause);, + public static ChecksumException getChecksumInstance() {, + if (isStackTrace) {, + return new ChecksumException();, + } else {, + return instance;, + }, + }, +, + public static
[+++ b/android-integration/pom.xml, + <version>2.2</version>, + <version>2.2</version>, + <connection>scm:svn:http://zxing.googlecode.com/svn/tags/zxing-2.2/android-integration</connection>, + <developerConnection>scm:svn:https://zxing.googlecode.com/svn/tags/zxing-2.2/android-integration</developerConnection>, + <url>http://zxing.googlecode.com/svn/tags/zxing-2.2/android-integration</url>, +++ b/android-integration/pom.xml, + <version>2.2</version>, + <version>2.2</version>, + <connection>scm:svn:http://zxing.googlecode.com/svn/tags/zxing-2.2/android-integration</connection>, + <developerConnection>scm:svn:https://zxing.googlecode.com/svn/tags/zxing-2.2/android-integration</developerConnection>, + <url>http://zxing.googlecode.com/svn/tags/zxing-2.2/android-integration</url>, +++ b/core/pom.xml, + <version>2.2</version>, + <version>2.2</version>, + <connection>scm:svn:http://zxing.googlecode.com/svn/tags/zxing-2.2/core</connection>, + <developerConnection>scm:svn:https://zxing.googlecode.com/svn/tags/zxing-2.2/core</developerConnection>, + <url>http://zxing.googlecode.com/svn/tags/zxing-2.2/core</url>, +++ b/android-integration/pom.xml, + <version>2.2</version>, + <version>2.2</version>, + <connection>scm:svn:http://zxing.googlecode.com/svn/tags/zxing-2.2/android-integration</connection>, + <developerConnection>scm:svn:https://zxing.googlecode.com/svn/tags/zxing-2.2/android-integration</developerConnection>, + <url>http://zxing.googlecode.com/svn/tags/zxing-2.2/android-integration</url>, +++ b/core/pom.xml, + <version>2.2</version>, + <version>2.2</version>, + <connection>scm:svn:http://zxing.googlecode.com/svn/tags/zxing-2.2/core</connection>, + <developerConnection>scm:svn:https://zxing.googlecode.com/svn/tags/zxing-2.2/core</developerConnection>, + <url>http://zxing.googlecode.com/svn/tags/zxing-2.2/core</url>, +++ b/javase/pom.xml, + <version>2.2</version>, + <version>2.2</version>, + <connection>scm:svn:http://zxing.googlecode.com/svn/tags/zxing-2.2/javase</connection>, + <developerConnection>scm:svn:https://zxing.googlecode.com/svn/tags/zxing-2.2/javase</developerConnection>, + <url>http://zxing.googlecode.com/svn/tags/zxing-2.2/javase</url>, + <version>2.2</version>, +++ b/android-integration/pom.xml, + <version>2.2</version>, + <version>2.2</version>, + <connection>scm:svn:http://zxing.googlecode.com/svn/tags/zxing-2.2/android-integration</connection>, + <developerConnection>scm:svn:https://zxing.googlecode.com/svn/tags/zxing-2.2/android-integration</developerConnection>, + <url>http://zxing.googlecode.com/svn/tags/zxing-2.2/android-integration</url>, +++ b/core/pom.xml, + <version>2.2</version>, + <version>2.2</version>, + <connection>scm:svn:http://zxing.googlecode.com/svn/tags/zxing-2.2/core</connection>, + <developerConnection>scm:svn:https://zxing.googlecode.com/svn/tags/zxing-2.2/core</developerConnection>, + <url>http://zxing.googlecode.com/svn/tags/zxing-2.2/core</url>, +++
[+++ b/androidtest/AndroidManifest.xml, + android:versionCode="9", +++ b/androidtest/AndroidManifest.xml, + android:versionCode="9", +++ b/androidtest/res/layout/benchmark.xml, + style="@android:style/Widget.Holo.Button.Borderless", +++ b/androidtest/AndroidManifest.xml, + android:versionCode="9", +++ b/androidtest/res/layout/benchmark.xml, + style="@android:style/Widget.Holo.Button.Borderless", +++ b/androidtest/res/layout/test.xml, + android:layout_height="wrap_content", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", +++ b/androidtest/AndroidManifest.xml, + android:versionCode="9", +++ b/androidtest/res/layout/benchmark.xml, + style="@android:style/Widget.Holo.Button.Borderless", +++ b/androidtest/res/layout/test.xml, + android:layout_height="wrap_content", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", + style="@android:style/Widget.Holo.Button.Borderless", +++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkActivity.java, +import
[+++ b/.gitignore, +++ b/.gitignore, +++ b/android/src/com/google/zxing/client/android/PreferencesFragment.java, + // Before validating, remove custom placeholders, which will not, + // be considered valid parts of the URL in some locations:, + // Blank %d and %s:, + valueString = valueString.replaceAll("%[sd]", "");, + // Blank %f but not if followed by digit or a-f as it may be a hex sequence, + valueString = valueString.replaceAll("%f(?![0-9a-f])", "");, +++ b/.gitignore, +++ b/android/src/com/google/zxing/client/android/PreferencesFragment.java, + // Before validating, remove custom placeholders, which will not, + // be considered valid parts of the URL in some locations:, + // Blank %d and %s:, + valueString = valueString.replaceAll("%[sd]",
[+++ b/build.properties, +# Location on Linux varies but is typically under /usr/local or /usr/lib, +# On Windows the default install directory is C:\WTK2.5.2, +# Mac users: there is no WTK for Mac at the moment. The installer for Linux may work on Intel-based, +# Macs (haven't tried it) but I believe the preverify binary will not run., +#WTK-home=C:\\WTK2.5.2, +# Set this to a location where the platform classes included with Java version 1.4 (not later), +# have been installed. If you installed a full JDK, this is typically at 'jre/lib/rt.jar', +# under the JDK installation directory. If you just
[+++ b/pom.xml, + <include>**/classes/**</include>, + <include>**/gwt-unitCache/**</include>, + <include>**/webapp/generator/**</include>, + <include>**/WEB-INF/deploy/**</include>, + <include>**/pom.xml.*</include>]
[+++ b/AUTHORS, +++ b/AUTHORS, +++ b/android/res/values-ru/strings.xml, + <string name="app_picker_name">Приложения</string>, + <string name="button_search_book_contents">Поиск в содержании книги</string>, + <string name="button_share_app">Приложение</string>, + <string name="menu_encode_mecard">Использовать MECARD</string>, + <string name="menu_encode_vcard">Использовать vCard</string>, + <string name="msg_bulk_mode_scanned">Массовый режим: штрих-код распознан и сохранен</string>, + <string name="msg_camera_framework_bug">К сожалению, возникла ошибка камеры. Может потребоваться перезагрузить устройство.</string>, + <string name="msg_intent_failed">К сожалению, запрошенное приложение не может быть запущено. Возможно, штрих-код содержит неверные данные.</string>, + <string name="msg_sbc_book_not_searchable">К сожалению, поиск в этой книге невозможен.</string>, + <string name="msg_sbc_failed">К сожалению, при поиске произошла ошибка.</string>, + <string name="msg_share_explanation">Вы можете поделиться данными, отобразив на экране своего телефона штрих-код, который можно считать другим телефоном.</string>, + <string name="preferences_auto_open_web_title">Открывать веб-страницы автоматически</string>,
[+++ b/android/src/com/google/zxing/client/android/CaptureActivityHandler.java, +++ b/android/src/com/google/zxing/client/android/CaptureActivityHandler.java, +++ b/android/src/com/google/zxing/client/android/DecodeHandler.java, +++ b/android/src/com/google/zxing/client/android/CaptureActivityHandler.java, +++ b/android/src/com/google/zxing/client/android/DecodeHandler.java, +++ b/android/src/com/google/zxing/client/android/camera/CameraManager.java, +++ b/android/src/com/google/zxing/client/android/CaptureActivityHandler.java, +++ b/android/src/com/google/zxing/client/android/DecodeHandler.java, +++ b/android/src/com/google/zxing/client/android/camera/CameraManager.java, +++ b/android/src/com/google/zxing/client/android/camera/PreviewCallback.java]
[+++ b/android/res/values-fr/strings.xml, + <string name="app_name">Lecteur de code-barres</string>, + <string name="button_book_search">Recherche de livre</string>, + <string name="button_custom_product_search">Recherche personnalisée de produit</string>, + <string name="button_dial">Composer un numéro</string>, + <string name="button_email">Envoyer un courriel</string>, + <string name="button_get_directions">Obtenir un itinéraire</string>, + <string name="button_product_search">Recherche de produit</string>, + <string name="button_share_by_email">Partager par courriel</string>, + <string name="button_share_by_sms">Partager par texto</string>, + <string name="button_share_clipboard">Presse-papiers</string>, + <string name="button_sms">Envoyer un texto</string>, + <string name="contents_email">Adresse courriel</string>, + <string name="contents_text">Texte en clair</string>, + <string name="history_email_title">Historique du lecteur de code-barres</string>, + <string name="history_empty_detail">Aucun code-barre balayé n\'a encore été enregistré</string>, + <string name="menu_encode_mecard">Utiliser MECARD</string>, + <string name="menu_encode_vcard">Utiliser vCard</string>, + <string name="msg_bulk_mode_scanned">Balyage en rafale : code-barres balayés et enregistrés</string>,
[+++ b/android/src/com/google/zxing/client/android/camera/CameraManager.java, + try {, + } catch (RuntimeException re) {, + // Have heard RuntimeException reported in Android 4.0.x+; continue?, + Log.w(TAG, "Unexpected exception while focusing", re);, + }]
[+++ b/build.properties, +# It builds against GWT 2.4 at the moment., +++ b/build.properties, +# It builds against GWT 2.4 at the moment., +++ b/zxing.appspot.com/Generator.launch, +<?xml version="1.0" encoding="UTF-8"?>, +<launchConfiguration type="org.eclipse.jdt.launching.localJavaApplication">, +<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>, +<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="com.google.gwt.dev.DevMode"/>, +<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">, +<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER&quot; javaProject=&quot;Generator&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>, +<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/Generator/src&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;"/>, +<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.jdt.launching.classpathentry.defaultClasspath&quot;&gt;&#10;&lt;memento project=&quot;Generator&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>, +</listAttribute>, +<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Xmx256M"/>, +<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-war war -startupUrl Generator.html com.google.zxing.web.generator.Generator"/>, +<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="Generator"/>, +<booleanAttribute key="org.eclipse.debug.core.appendEnvironmentVariables" value="true"/>, +</launchConfiguration>, +++ b/build.properties, +# It builds against GWT 2.4 at the moment., +++ b/zxing.appspot.com/Generator.launch, +<?xml version="1.0" encoding="UTF-8"?>, +<launchConfiguration type="org.eclipse.jdt.launching.localJavaApplication">, +<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>, +<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE"
[+++ b/CHANGES, +2.3.0 (1 Dec 2013), + - Added skeleton Google Glass Mirror API app, +++ b/CHANGES, +2.3.0 (1 Dec 2013), + - Added skeleton Google Glass Mirror API app, +++ b/build.xml, + <include name="glass-mirror/**"/>, +++ b/CHANGES, +2.3.0 (1 Dec 2013), + - Added skeleton Google Glass Mirror API app, +++ b/build.xml, + <include name="glass-mirror/**"/>, +++ b/glass-mirror/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!--, + Copyright 2013 ZXing authors, +, + Licensed under the Apache License, Version 2.0 (the "License");, + you may not use this file except in compliance with the License., + You may obtain a copy of the License
[+++ b/android/src/com/google/zxing/client/android/history/HistoryActivity.java, +import android.content.ActivityNotFoundException;, +import android.util.Log;, + private static final String TAG = HistoryActivity.class.getSimpleName();, +, + try {, + } catch (ActivityNotFoundException anfe) {, + Log.w(TAG, anfe.toString());, + }]
[+++ b/build.properties, +version=0.8, +++ b/build.properties, +version=0.8, +++ b/build.xml]
[+++ b/android/proguard-android-optimize.txt, +# ADDED, +-dontobfuscate, +]
[+++ b/AUTHORS, +Androida Site, +++ b/AUTHORS, +Androida Site, +++ b/android/res/values-hu/strings.xml, +<?xml version="1.0" encoding="UTF-8"?>
[+++ b/android/src/com/google/zxing/client/android/encode/ContactEncoder.java, +import java.util.List;, + abstract String[] encode(List<String> names,, + List<String> addresses,, + List<String> phones,, + List<String> phoneTypes,, + List<String> emails,, + List<String> urls,, + static void append(StringBuilder newContents,, + newContents.append(prefix).append(fieldFormatter.format(trimmed, 0)).append(terminator);, + static void appendUpToUnique(StringBuilder newContents,, + List<String> values,, + Formatter displayFormatter,, + for (int i = 0; i < values.size(); i++) {, + String value = values.get(i);, + newContents.append(prefix).append(fieldFormatter.format(trimmed, i)).append(terminator);, + CharSequence display = displayFormatter == null ? trimmed : displayFormatter.format(trimmed, i);, +++ b/android/src/com/google/zxing/client/android/encode/ContactEncoder.java, +import java.util.List;, + abstract String[] encode(List<String> names,, + List<String> addresses,, + List<String> phones,, + List<String> phoneTypes,, + List<String> emails,, + List<String> urls,, +
[+++ b/android/src/com/google/zxing/client/android/camera/open/OpenCameraInterface.java]
[+++ b/core/pom.xml, +<project>, + <version>1.5-SNAPSHOT</version>]
[+++ b/core/src/main/java/com/google/zxing/EncodeHintType.java, +, + /**, + * Specifies whether the data should be encoded to the GS1 standard (type {@link Boolean}, or "true" or "false", + * {@link String } value)., + */, + GS1_FORMAT,, +++ b/core/src/main/java/com/google/zxing/EncodeHintType.java, +, + /**, + * Specifies whether the data should be encoded to the GS1 standard (type {@link Boolean}, or "true" or "false", + * {@link String } value)., + */, + GS1_FORMAT,, +++ b/core/src/main/java/com/google/zxing/qrcode/encoder/Encoder.java, + // Append the FNC1 mode header for GS1 formatted data if applicable, + boolean hasGS1FormatHint = hints != null && hints.containsKey(EncodeHintType.GS1_FORMAT);, + if (hasGS1FormatHint && Boolean.valueOf(hints.get(EncodeHintType.GS1_FORMAT).toString()))
[+++ b/AUTHORS, +Mateusz Jędrasik, +++ b/AUTHORS, +Mateusz Jędrasik, +++ b/android/res/values-pl/strings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!--, + Copyright (C) 2008 ZXing authors, +, + Licensed under the Apache License, Version 2.0 (the "License");, + you may not use this file except in compliance with the License., + You may obtain a copy of the License at, +, + http://www.apache.org/licenses/LICENSE-2.0, +, + Unless required by applicable law or agreed to in writing, software, + distributed under the License is distributed on an "AS IS" BASIS,, + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + See the License for
[+++ b/android/pom.xml, + <version>4.7.8</version>]
[+++ b/android/src/com/google/zxing/client/android/result/ResultHandler.java, + prefs.edit().putBoolean(PreferencesActivity.KEY_NOT_OUR_RESULTS_SHOWN, true).commit();]
[+++ b/core/test/data/blackbox/upca-2/01.jpg, +++ b/core/test/data/blackbox/upca-2/01.jpg, +++ b/core/test/data/blackbox/upca-2/01.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/01.jpg, +++ b/core/test/data/blackbox/upca-2/01.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/02.jpg, +++ b/core/test/data/blackbox/upca-2/01.jpg, +++ b/core/test/data/blackbox/upca-2/01.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/02.jpg, +++ b/core/test/data/blackbox/upca-2/02.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/01.jpg, +++ b/core/test/data/blackbox/upca-2/01.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/02.jpg, +++ b/core/test/data/blackbox/upca-2/02.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/03.jpg, +++ b/core/test/data/blackbox/upca-2/01.jpg, +++ b/core/test/data/blackbox/upca-2/01.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/02.jpg, +++ b/core/test/data/blackbox/upca-2/02.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/03.jpg, +++ b/core/test/data/blackbox/upca-2/03.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/01.jpg, +++ b/core/test/data/blackbox/upca-2/01.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/02.jpg, +++ b/core/test/data/blackbox/upca-2/02.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/03.jpg, +++ b/core/test/data/blackbox/upca-2/03.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/04.jpg, +++ b/core/test/data/blackbox/upca-2/01.jpg, +++ b/core/test/data/blackbox/upca-2/01.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/02.jpg, +++ b/core/test/data/blackbox/upca-2/02.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/03.jpg, +++ b/core/test/data/blackbox/upca-2/03.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/04.jpg, +++ b/core/test/data/blackbox/upca-2/04.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/01.jpg, +++ b/core/test/data/blackbox/upca-2/01.txt, +890444000335, +++ b/core/test/data/blackbox/upca-2/02.jpg, +++ b/core/test/data/blackbox/upca-2/02.txt, +890444000335, +++
[+++ b/javase/pom.xml, + <version>1.72</version>, +++ b/javase/pom.xml, + <version>1.72</version>, +++ b/pom.xml, + <artifactId>maven-dependency-plugin</artifactId>, + <version>3.0.1</version>, + </plugin>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <version>3.1.0</version>, +++ b/javase/pom.xml, + <version>1.72</version>, +++ b/pom.xml, + <artifactId>maven-dependency-plugin</artifactId>, + <version>3.0.1</version>, + </plugin>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <version>3.1.0</version>, +++ b/zxing.appspot.com/pom.xml, + <gwt.version>2.8.1</gwt.version>]
[+++ b/actionscript/core/build.xml, +<project name="ZXing" default="build" basedir="../">, + <property file="${basedir}/../build.properties"/>, + <property name="dist" location="${basedir}/core/bin" />, + <property name="src" location="${basedir}/core/src" />, + <property name="test" location="${basedir}/core/test" />, + <property name="assets" location="${basedir}/../core/test/data" />, + <property name="libs" location="${basedir}/core/libs" />, + <property name="output" location="${basedir}/core/bin/output" />, + <property name="report" location="${basedir}/core/bin/report" />, + <taskdef resource="flexUnitTasks.tasks", + classpath="${libs}/flexUnitTasks-4.1.0-8.jar" />, + <fileset id="srcFiles" dir="${src}">, + <globmapper from="${src}/*" to="*"></globmapper>, +, + <target name="compile.tests" depends="build">, + <mxmlc file="${test}/com/google/zxing/testrunner/ZXingTestsRunner.mxml", + output="${output}/ZXingTestsRunner.swf", + debug="true">, + <library-path dir="${dist}" append="true">, + <include name="*.swc"/>, + </library-path>, + <library-path dir="${libs}" append="true">, + <include name="*.swc"/>, + </library-path>, + <library-path dir="${FLEX_HOME}/frameworks/libs/air" append="true">, + <include name="*.swc"/>, + </library-path>, + <library-path
[+++ b/core/src/com/google/zxing/aztec/detector/Detector.java, + if (!isValid(bullsEyeCorners[0]) || !isValid(bullsEyeCorners[1]) || , + !isValid(bullsEyeCorners[2]) || !isValid(bullsEyeCorners[3])) {, + throw NotFoundException.getNotFoundInstance();, + }, +++ b/core/src/com/google/zxing/aztec/detector/Detector.java, + if (!isValid(bullsEyeCorners[0]) || !isValid(bullsEyeCorners[1]) || , + !isValid(bullsEyeCorners[2]) || !isValid(bullsEyeCorners[3])) {, + throw NotFoundException.getNotFoundInstance();, + }, +++ b/core/test/data/blackbox/aztec-1/hello.png, +++ b/core/src/com/google/zxing/aztec/detector/Detector.java, + if (!isValid(bullsEyeCorners[0]) || !isValid(bullsEyeCorners[1]) || , + !isValid(bullsEyeCorners[2]) || !isValid(bullsEyeCorners[3])) {, + throw NotFoundException.getNotFoundInstance();, + }, +++ b/core/test/data/blackbox/aztec-1/hello.png, +++ b/core/test/data/blackbox/aztec-1/hello.txt, +hello, +++ b/core/src/com/google/zxing/aztec/detector/Detector.java, + if (!isValid(bullsEyeCorners[0]) || !isValid(bullsEyeCorners[1]) || , + !isValid(bullsEyeCorners[2]) || !isValid(bullsEyeCorners[3])) {, + throw NotFoundException.getNotFoundInstance();, + }, +++ b/core/test/data/blackbox/aztec-1/hello.png, +++ b/core/test/data/blackbox/aztec-1/hello.txt, +hello, +++ b/core/test/src/com/google/zxing/aztec/AztecBlackBox1TestCase.java, + addTest(12, 12, 0.0f);, + addTest(12, 12, 90.0f);, +
[+++ b/android/res/values-cs/strings.xml, + <string name="preferences_front_light_title">Přední světla</string>
