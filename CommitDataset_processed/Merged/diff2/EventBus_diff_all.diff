[+++ b/.travis.yml, + - build-tools-21.1.2, +++ b/.travis.yml, + - build-tools-21.1.2, +++ b/CONTRIBUTING.md, +Before you create an Issue..., +=============================, +, +There are better Places for Support, +-----------------------------------, +Please be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests)., +Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greenrobot-eventbus?sort=frequent) and use the tag [greenrobot-eventbus](http://stackoverflow.com/tags/greenrobot-eventbus/info) for your question., +If you want professional support, you can contact the main author and maintainer [Markus Junginger via Google+](https://plus.google.com/+MarkusJunginger/posts)., +, +Examples for support questions better asked elsewhere:, +, +* Asking how something works, +* Asking
[+++ b/CHANGELOG.md, +### V3.0.0 (201?-??-??) Annotations, +* Breaking change: switch subscriber methods to annotations, +* Using annotations, each subscriber method can set sticky behavior and priority individually, +* Annotation processor indexes annotation information for efficient subscriber registration on Android, +* TODO: Renamed package and artifact id to allow co-existence with libs using EventBus 2 internally, +, +**Note:** This is a breaking change release: there is no inter-op between EventBus versions 2 and 3; they can run in parallel though., +, +++ b/CHANGELOG.md, +### V3.0.0 (201?-??-??) Annotations, +* Breaking change: switch subscriber methods to annotations, +* Using annotations, each subscriber
[+++ b/COMPARISON.md, + <th>Asynchronous event delivery</th>, +++ b/COMPARISON.md, + <th>Asynchronous event delivery</th>, +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/COMPARISON.md, + <th>Asynchronous event delivery</th>, +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., + public static String TAG = "Event";, +, + subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, + * Subscribers have event handling methods that are
[+++ /dev/null, +++ /dev/null, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import java.util.logging.Level;, + eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interruppted", e);, +++ /dev/null, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import java.util.logging.Level;, + eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import java.util.logging.Level;, + private final Logger logger;, + logger = builder.initLogger();, + logger.log(Level.WARNING, "Subscriber to unregister was not registered before: " + subscriber.getClass());, + logger.log(Level.FINE, "No subscribers registered for event " + eventClass);, + logger.log(Level.SEVERE, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), + logger.log(Level.SEVERE, "Initial event " + exEvent.causingEvent + " caused exception in ", + logger.log(Level.SEVERE, "Could not dispatch event: " + event.getClass() + " to subscribing class
[+++ b/EventBus/.gitignore, +/gradle.properties, +++ b/EventBus/.gitignore, +/gradle.properties, +++ b/EventBus/build.gradle, +apply plugin: 'maven', +apply plugin: 'signing', +group = 'de.greenrobot', +version = '2.1.0-beta-1', +def isSnapshot = version.endsWith('-SNAPSHOT'), +def sonatypeRepositoryUrl, +if(isSnapshot) {, + sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/", +} else {, + sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/", +}, +, + compile('com.google.android:android:4.1.1.4'), + compile('com.google.android:android-test:4.1.1.4'), +javadoc {, + title = "EventBus ${version} API", + options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2012-2013 <a href="http://greenrobot.de/">greenrobot.de</a>. All Rights Reserved.</i>', +}, +, +, +signing {, + sign configurations.archives, +}, +, +uploadArchives {, + repositories {, + mavenDeployer {, + // if(! isSnapshot) {, + beforeDeployment { MavenDeployment
[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, + subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +, + // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), + String name = subscriberClass.getName();, + int dollarIndex = name.lastIndexOf('$');, + boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, + Character.isDigit(name.charAt(dollarIndex + 1));, +, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +, + // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), + String name = subscriberClass.getName();, + int dollarIndex = name.lastIndexOf('$');, + boolean forceReflection = dollarIndex !=
[+++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java, + if (findState.subscriberInfo != null && findState.subscriberInfo.getSuperSubscriberInfo() != null) {, + SubscriberInfo superclassInfo = findState.subscriberInfo.getSuperSubscriberInfo();, + Class<?> methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);, +++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java, + if (findState.subscriberInfo != null && findState.subscriberInfo.getSuperSubscriberInfo() != null) {, + SubscriberInfo superclassInfo = findState.subscriberInfo.getSuperSubscriberInfo();, + Class<?> methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);, +++ b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java, + public SubscriberInfo getSuperSubscriberInfo() {, + if(superSubscriberInfoClass == null) {, + return null;, + }, + try {, + return superSubscriberInfoClass.newInstance();, + } catch (InstantiationException | IllegalAccessException e) {, + throw new RuntimeException(e);, + }, +++ b/EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java, + if (findState.subscriberInfo != null && findState.subscriberInfo.getSuperSubscriberInfo() != null) {, + SubscriberInfo superclassInfo =
[+++ b/EventBusPerformance/res/values/strings.xml, + <item>Register Subscribers (all, no unregister)</item>, +++ b/EventBusPerformance/res/values/strings.xml, + <item>Register Subscribers (all, no unregister)</item>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, + static final Class[] TEST_CLASSES_EVENTBUS = { TestEventBus.Post.class,//, + TestEventBus.RegisterOneByOne.class,//, + TestEventBus.RegisterAll.class //, + };, +++ b/EventBusPerformance/res/values/strings.xml, + <item>Register Subscribers (all, no unregister)</item>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, + static final Class[] TEST_CLASSES_EVENTBUS = { TestEventBus.Post.class,//, + TestEventBus.RegisterOneByOne.class,//, + TestEventBus.RegisterAll.class //, + };, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/TestEventBus.java, +import android.os.SystemClock;, + public static class RegisterAll extends TestEventBus {, + public RegisterAll(Context context, TestParams params) {, + primaryResultCount = params.getSubscriberCount();, + }, +, + @Override, + public String getDisplayName() {, + return "EventBus Register Subscribers";, + }, +
[+++ b/EventBusPerformance/res/values/strings.xml, + <item>MAIN_ORDERED</item>, +++ b/EventBusPerformance/res/values/strings.xml, + <item>MAIN_ORDERED</item>, +++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java, + textViewResult = findViewById(R.id.textViewResult);, +++ b/EventBusPerformance/res/values/strings.xml, + <item>MAIN_ORDERED</item>, +++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java, + textViewResult = findViewById(R.id.textViewResult);, +++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java, + Spinner spinnerRun = findViewById(R.id.spinnerTestToRun);, + Spinner spinnerThread = findViewById(R.id.spinnerThread);, + CheckBox checkBoxEventBus = findViewById(R.id.checkBoxEventBus);, + Spinner spinnerThread = findViewById(R.id.spinnerThread);, + EditText editTextEvent = findViewById(R.id.editTextEvent);, + EditText editTextSubscriber = findViewById(R.id.editTextSubscribe);, + Spinner spinnerTestToRun = findViewById(R.id.spinnerTestToRun);, + final CheckBox checkBoxEventBus = findViewById(R.id.checkBoxEventBus);, + final CheckBox checkBoxOtto = findViewById(R.id.checkBoxOtto);, + final CheckBox checkBoxBroadcast = findViewById(R.id.checkBoxBroadcast);, + final CheckBox checkBoxLocalBroadcast = findViewById(R.id.checkBoxLocalBroadcast);, +++ b/EventBusPerformance/res/values/strings.xml, + <item>MAIN_ORDERED</item>, +++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestRunnerActivity.java, + textViewResult = findViewById(R.id.textViewResult);, +++ b/EventBusPerformance/src/org/greenrobot/eventbusperf/TestSetupActivity.java, + Spinner
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.2.0', +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.2.0', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.2.0', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +,
[+++ b/.gitignore, +# Built application files, +*.apk, +*.ap_, +# Files for the Dalvik VM, +*.dex, +# Java class files, +*.class, +, +# Generated files, +gen/, +, +# Gradle files, +.gradle/, +# Local configuration file (sdk path, etc), +, +# IntelliJ project files, +*.iml, +.idea/, +, +# Eclipse project files, +.settings/, +, +# Misc, +.DS_Store, +++ b/.gitignore, +# Built application files, +*.apk, +*.ap_, +# Files for the Dalvik VM, +*.dex, +# Java class files, +*.class, +, +# Generated files, +gen/, +, +# Gradle files, +.gradle/, +# Local configuration file (sdk path, etc), +, +# IntelliJ project files, +*.iml, +.idea/, +,
[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, + private HandlerPoster mainThreadPoster;
[+++ b/.gitignore, +# Built application files, +*.apk, +*.ap_, +# Files for the Dalvik VM, +*.dex, +# Java class files, +*.class, +, +# Generated files, +gen/, +, +# Gradle files, +.gradle/, +# Local configuration file (sdk path, etc), +, +# IntelliJ project files, +*.iml, +.idea/, +, +# Eclipse project files, +.settings/, +, +# Misc, +.DS_Store, +++ b/.gitignore, +# Built application files, +*.apk, +*.ap_, +# Files for the Dalvik VM, +*.dex, +# Java class files, +*.class, +, +# Generated files, +gen/, +, +# Gradle files, +.gradle/, +# Local configuration file (sdk path, etc), +, +# IntelliJ project files, +*.iml, +.idea/, +,
[+++ b/EventBus/.gitignore, +/release, +++ b/EventBus/.gitignore, +/release, +++ b/EventBus/mybuild.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project name="greenrobot EventBus" default="build-jar">, +, + <target name="build-jar" description="Depends on Eclipse to have everything compiled into bin/">, + <mkdir dir="release" />, + <jar jarfile="release/eventbus.jar">, + <fileset dir="bin/classes">, + <include name="de/greenrobot/**" />, + </fileset>, + </jar>, + </target>, +, +</project>]
[+++ b/EventBusTest/AndroidManifest.xml, + xmlns:tools="http://schemas.android.com/tools"
[+++ b/.travis.yml, + - build-tools-23.0.1, +++ b/.travis.yml, + - build-tools-23.0.1, +++ b/EventBusPerformance/build.gradle, + buildToolsVersion '23.0.1', +++ b/.travis.yml, + - build-tools-23.0.1, +++ b/EventBusPerformance/build.gradle, + buildToolsVersion '23.0.1', +++ b/EventBusTest/build.gradle, + buildToolsVersion '23.0.1']
[+++ b/.travis.yml, + - build-tools-21.1.2, +++ b/.travis.yml, + - build-tools-21.1.2, +++ b/CONTRIBUTING.md, +Before you create an Issue..., +=============================, +, +There are better Places for Support, +-----------------------------------, +Please be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests)., +Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greenrobot-eventbus?sort=frequent) and use the tag [greenrobot-eventbus](http://stackoverflow.com/tags/greenrobot-eventbus/info) for your question., +If you want professional support, you can contact the main author and maintainer [Markus Junginger via Google+](https://plus.google.com/+MarkusJunginger/posts)., +, +Examples for support questions better asked elsewhere:, +, +* Asking how something works, +* Asking
[+++ b/EventBusTest/AndroidManifest.xml]
[+++ b/COMPARISON.md, + <td>Name conventions</td>, +++ b/COMPARISON.md, + <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, + pom.artifactId = 'eventbus', +++ b/COMPARISON.md, + <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, + pom.artifactId = 'eventbus', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de), + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., + public static String TAG =
[+++ b/EventBusTestJava/build.gradle, + compile(project(':EventBus')) {, + exclude group: "com.google.android" // Does not seem to work..., + }, +++ b/EventBusTestJava/build.gradle, + compile(project(':EventBus')) {, + exclude group: "com.google.android" // Does not seem to work..., + }, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/AbstractEventBusTest.java, +/*, + * Copyright (C) 2012-2017 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or
[+++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +import de.greenrobot.eventperf.testsubject.PerfTestEventBus;, + static final Class[] TEST_CLASSES_EVENTBUS = { PerfTestEventBus.Post.class,//, + PerfTestEventBus.RegisterOneByOne.class,//, + PerfTestEventBus.RegisterAll.class, //, + PerfTestEventBus.RegisterFirstTime.class };, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +import de.greenrobot.eventperf.testsubject.PerfTestEventBus;, + static final Class[] TEST_CLASSES_EVENTBUS = { PerfTestEventBus.Post.class,//, + PerfTestEventBus.RegisterOneByOne.class,//, + PerfTestEventBus.RegisterAll.class, //, + PerfTestEventBus.RegisterFirstTime.class };, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestEventBus.java, +package de.greenrobot.eventperf.testsubject;, +, +import java.lang.reflect.Constructor;, +import java.lang.reflect.Method;, +import java.util.ArrayList;, +, +import android.content.Context;, +import de.greenrobot.event.EventBus;, +import de.greenrobot.eventperf.Test;, +import de.greenrobot.eventperf.TestEvent;, +import de.greenrobot.eventperf.TestParams;, +, +public abstract class PerfTestEventBus extends Test {, +, + private final EventBus eventBus;, + private final ArrayList<Object> subscribers;, + private final Class<?> subscriberClass;, + private final int eventCount;, + private final int expectedEventCount;, +, + public
[+++ b/COMPARISON.md, + <td>Name conventions</td>, +++ b/COMPARISON.md, + <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, + pom.artifactId = 'eventbus', +++ b/COMPARISON.md, + <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, + pom.artifactId = 'eventbus', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., + public static String TAG = "Event";, +, + subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, + *
[+++ b/.travis.yml, +sudo: false]
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, + TypeMirror typeMirror = param.asType();, + String skipReason = null;, + if (!(typeMirror instanceof DeclaredType) ||, + !(((DeclaredType) typeMirror).asElement() instanceof TypeElement)) {, + skipReason = "event type is not a standard class e.g. generics";, + }, + if (skipReason == null) {, + TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();, + skipReason = "event type is not public";, + }, + }, + if (skipReason != null) {, + String msg = "Falling back to reflection because " + skipReason;, + if (!subscriberClass.equals(skipCandidate)) {, + msg += " (found in super class for " + skipCandidate + ")";,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java, +/*
[+++ b/.travis.yml, + - build-tools-21.1.2, +++ b/.travis.yml, + - build-tools-21.1.2, +++ b/EventBusPerformance/build.gradle, + buildToolsVersion '21.1.2', +++ b/.travis.yml, + - build-tools-21.1.2, +++ b/EventBusPerformance/build.gradle, + buildToolsVersion '21.1.2', +++ b/EventBusTest/build.gradle, + buildToolsVersion '21.1.2', +++ b/.travis.yml, + - build-tools-21.1.2, +++ b/EventBusPerformance/build.gradle, + buildToolsVersion '21.1.2', +++ b/EventBusTest/build.gradle, + buildToolsVersion '21.1.2', +++ b/gradle/wrapper/gradle-wrapper.jar]
[+++ b/EventBusPerformance/res/layout/activity_runtests.xml, + android:textSize="16sp" />, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, + android:textSize="16sp" />, +++ b/EventBusPerformance/res/layout/activity_setuptests.xml, + android:text="@string/test_broadcast"
[+++ b/EventBusPerformance/AndroidManifest.xml, + package="org.greenrobot.eventbusperf"
[+++ b/.gitignore, +.gradle, +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3', +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers receive events until the call of
[+++ b/EventBusPerformance/build.gradle, +buildscript {, + repositories {, + mavenCentral(), + }, +, + dependencies {, + classpath 'com.android.tools.build:gradle:0.13.3', + }, +}, +, +apply plugin: 'com.android.application', +, +repositories {, + mavenCentral(), +}, +, +dependencies {, + compile project(':EventBus'), + compile 'com.squareup:otto:1.3.5', +}, +, +android {, + buildToolsVersion '20.0.0', + compileSdkVersion 19, +, + sourceSets {, + main {, + manifest.srcFile 'AndroidManifest.xml', + java.srcDirs = ['src'], + res.srcDirs = ['res'], + }, +, + }, +, +}, +++ b/EventBusPerformance/build.gradle, +buildscript {, + repositories {, + mavenCentral(), + }, +, + dependencies {, + classpath 'com.android.tools.build:gradle:0.13.3', + }, +}, +, +apply plugin:
[+++ /dev/null, +++ /dev/null, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +import de.greenrobot.eventperf.testsubject.TestEventBus;, +++ /dev/null, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +import de.greenrobot.eventperf.testsubject.TestEventBus;, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/TestEventBus.java, +package de.greenrobot.eventperf.testsubject;, +, +import java.lang.reflect.Constructor;, +import java.util.ArrayList;, +, +import android.content.Context;, +import de.greenrobot.event.EventBus;, +import de.greenrobot.eventperf.Test;, +import de.greenrobot.eventperf.TestEvent;, +import de.greenrobot.eventperf.TestParams;, +, +public abstract class TestEventBus extends Test {, +, + private final EventBus eventBus;, + private final ArrayList<Object> subscribers;, + Class<?> subscriberClass;, + private final int iterations;, + private int expectedEventCount;, +, + public TestEventBus(Context context, TestParams params) {, + super(context, params);, + eventBus = new EventBus();, + subscribers = new ArrayList<Object>();, + iterations = params.getIterations();, + expectedEventCount = iterations * params.getSubscriberCount();, + }, +,
[+++ b/.travis.yml, + - build-tools-25.0.3, +++ b/.travis.yml, + - build-tools-25.0.3, +++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.3.2', + buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/.travis.yml, + - build-tools-25.0.3, +++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.3.2', + buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/EventBusTest/build.gradle, + classpath 'com.android.tools.build:gradle:2.3.2', + buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/.travis.yml, + - build-tools-25.0.3, +++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.3.2', + buildToolsVersion '25.0.3' // When updating, don't forget to adjust .travis.yml, +++ b/EventBusTest/build.gradle, + classpath 'com.android.tools.build:gradle:2.3.2', + buildToolsVersion '25.0.3' // When updating, don't forget to adjust
[+++ b/.travis.yml, + - extra-android-m2repository]
[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, + List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, + if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, + if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, + private static final String ON_EVENT_METHOD_NAME = "onEvent";, + /*, + * In newer class files, compilers may add methods. Those are called bridge or synthetic methods., + * EventBus must ignore both. There modifiers are not public but defined in the Java class file format:, + * http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1, + */, + private static final int BRIDGE = 0x40;, +
[+++ b/EventBus/src/org/greenrobot/eventbus/Logger.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/.travis.yml, + - android-25]
[+++ b/EventBusPerformance/res/layout/activity_runtests.xml, + android:background="#88666666", + android:padding="15dp", + android:text="@string/testIsRunningText", + android:textColor="#ffffff", + android:textSize="30sp", + android:textStyle="bold" />, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, + android:background="#88666666", + android:padding="15dp", + android:text="@string/testIsRunningText", + android:textColor="#ffffff", + android:textSize="30sp", + android:textStyle="bold" />, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestEventBus.java, + int deliveryRate = (int) (primaryResultCount / (deliveredMillis / 1000d));, + "Post and delivery rate: " + deliveryRate + "/s";, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, + android:background="#88666666", + android:padding="15dp", + android:text="@string/testIsRunningText", + android:textColor="#ffffff", + android:textSize="30sp", + android:textStyle="bold" />, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestEventBus.java, + int deliveryRate = (int) (primaryResultCount / (deliveredMillis / 1000d));, + "Post and delivery rate: " + deliveryRate + "/s";, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunner.java, + // Clean up and let the main
[+++ b/.travis.yml, + - oraclejdk7, +, +before_script:, + - chmod +x gradlew]
[+++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.3.3', +++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.3.3', +++ b/EventBusTest/AndroidManifest.xml, + <instrumentation
[+++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., + public static String TAG = "EventBus";, + subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, + * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., + * The {@link de.greenrobot.event.Subscribe} annotation also
[+++ b/.travis.yml, +language: java, +jdk:, + - openjdk6, +++ b/.travis.yml, +language: java, +jdk:, + - openjdk6, +++ b/EventBus/build.gradle, + if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&, + project.hasProperty('signing.secretKeyRingFile')) {, + } else {, + println "Signing information missing/incomplete for ${project.name}", + }, + // We must check if authentication info is available, + if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, + } else {, + println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}", + }, +++ b/.travis.yml, +language: java, +jdk:, + - openjdk6, +++ b/EventBus/build.gradle, + if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&, + project.hasProperty('signing.secretKeyRingFile')) {, + } else {, + println "Signing information missing/incomplete for ${project.name}", + }, +
[+++ b/COMPARISON.md, + <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/COMPARISON.md, + <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +version = '3.0.0-beta2', +++ b/COMPARISON.md, + <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster
[+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidActivityTest.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/.travis.yml, + - build-tools-23.0.2, +++ b/.travis.yml, + - build-tools-23.0.2, +++ b/EventBusPerformance/build.gradle, + buildToolsVersion '23.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/.travis.yml, + - build-tools-23.0.2, +++ b/EventBusPerformance/build.gradle, + buildToolsVersion '23.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/EventBusTest/build.gradle, + buildToolsVersion '23.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/.travis.yml, + - build-tools-23.0.2, +++ b/EventBusPerformance/build.gradle, + buildToolsVersion '23.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/EventBusTest/build.gradle, + buildToolsVersion '23.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/javadoc-style/stylesheet.css, +/* Javadoc style sheet */, +/*, +Overall document style, +*/, +, +@import
[+++ b/COMPARISON.md, + <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/COMPARISON.md, + <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +version = '3.0.0-beta2', +++ b/COMPARISON.md, + <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster
[+++ b/.travis.yml, +sudo: false, + - build-tools-21.1.2, +++ b/.travis.yml, +sudo: false, + - build-tools-21.1.2, +++ b/COMPARISON.md, + <th>Asynchronous event delivery</th>, +++ b/.travis.yml, +sudo: false, + - build-tools-21.1.2, +++ b/COMPARISON.md, + <th>Asynchronous event delivery</th>, +++ b/CONTRIBUTING.md, +Before you create an Issue..., +=============================, +, +There are better Places for Support, +-----------------------------------, +Please be aware that an issue tracker is not the best place to ask for support. An issue tracker is used to track issues (bugs or feature requests)., +Instead, please use [stackoverflow.com](http://stackoverflow.com/questions/tagged/greenrobot-eventbus?sort=frequent) and use the tag [greenrobot-eventbus](http://stackoverflow.com/tags/greenrobot-eventbus/info) for your question., +If you want professional support, you can contact the main
[+++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ /dev/null]
[+++ b/EventBusTest/build.gradle, + androidTestCompile project(':EventBusTestJava'), +++ b/EventBusTest/build.gradle, + androidTestCompile project(':EventBusTestJava'), +++ b/EventBusTest/src/org/greenrobot/eventbus/AbstractAndroidEventBusTest.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS
[+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadTest.java, + TestBackgroundPoster backgroundPoster = new TestBackgroundPoster(eventBus);, + backgroundPoster.start();, +, +, + backgroundPoster.shutdown();, + backgroundPoster.join();]
[+++ b/EventBusAnnotationProcessor/res/META-INF/services/javax.annotation.processing.Processor, +org.greenrobot.eventbus.annotationprocessor.EventBusAnnotationProcessor, +++ b/EventBusAnnotationProcessor/res/META-INF/services/javax.annotation.processing.Processor, +org.greenrobot.eventbus.annotationprocessor.EventBusAnnotationProcessor, +++ /dev/null, +++ b/EventBusAnnotationProcessor/res/META-INF/services/javax.annotation.processing.Processor, +org.greenrobot.eventbus.annotationprocessor.EventBusAnnotationProcessor, +++ /dev/null, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +package org.greenrobot.eventbus.annotationprocessor;, +, +import org.greenrobot.eventbus.Subscribe;, +import org.greenrobot.eventbus.ThreadMode;, +, +import java.io.BufferedWriter;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import javax.annotation.processing.AbstractProcessor;, +import javax.annotation.processing.Messager;, +import javax.annotation.processing.RoundEnvironment;, +import javax.annotation.processing.SupportedAnnotationTypes;, +import javax.lang.model.SourceVersion;, +import javax.lang.model.element.Element;, +import javax.lang.model.element.ExecutableElement;, +import javax.lang.model.element.Modifier;, +import javax.lang.model.element.PackageElement;, +import javax.lang.model.element.TypeElement;, +import javax.lang.model.element.VariableElement;, +import javax.lang.model.type.DeclaredType;, +import javax.lang.model.type.TypeKind;, +import javax.lang.model.type.TypeMirror;, +import javax.tools.Diagnostic;, +import javax.tools.JavaFileObject;, +, +@SupportedAnnotationTypes("org.greenrobot.eventbus.Subscribe"), +public class EventBusAnnotationProcessor extends AbstractProcessor {, + public static final String INFO_CLASS_POSTFIX = "_EventBusInfo";, +, + /** Found subscriber methods for a class (without superclasses).
[+++ b/EventBus/.gitignore, +/build, +/.gradle, +++ b/EventBus/.gitignore, +/build, +/.gradle, +++ b/EventBus/build.gradle, +apply plugin: 'java', +, +repositories {, + mavenCentral(), +}, +, +dependencies {, + compile('com.google.android:android:1.6_r2'), +}, +, +sourceSets {
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, + String index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);, + if (index == null) {, + messager.printMessage(Diagnostic.Kind.ERROR, "No option " + OPTION_EVENT_BUS_INDEX +, + " passed to annotation processor");, + return false;, + }, + int lastPeriod = index.lastIndexOf('.');, + String indexPackage = lastPeriod != -1 ? index.substring(0, lastPeriod) : null;, +, + checkForSubscribersToSkip(messager, indexPackage);, + private void checkForSubscribersToSkip(Messager messager, String myPackage) {, + if (!isVisible(myPackage, subscriberClass)) {, + TypeElement eventTypeElement = (TypeElement) ((DeclaredType) param.asType()).asElement();, + if (!isVisible(myPackage, eventTypeElement)) {]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sat Nov 08 10:08:52 CET 2014, +distributionBase=GRADLE_USER_HOME, +distributionPath=wrapper/dists, +zipStoreBase=GRADLE_USER_HOME, +zipStorePath=wrapper/dists, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-all.zip, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sat Nov 08 10:08:52 CET 2014, +distributionBase=GRADLE_USER_HOME, +distributionPath=wrapper/dists, +zipStoreBase=GRADLE_USER_HOME, +zipStorePath=wrapper/dists, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-all.zip, +++ b/gradlew, +#!/usr/bin/env bash, +, +##############################################################################, +##, +## Gradle start up script for UN*X, +##, +##############################################################################, +, +# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script., +DEFAULT_JVM_OPTS="", +, +APP_NAME="Gradle", +APP_BASE_NAME=`basename "$0"`, +, +# Use the maximum available, or set MAX_FD != -1 to use that value., +MAX_FD="maximum", +, +warn ( ) {, + echo "$*", +},
[+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusAndroidOrderTestWithIndex.java, +package org.greenrobot.eventbus.indexed;, +, +import org.greenrobot.eventbus.EventBusAndroidOrderTest;, +, +public class EventBusAndroidOrderTestWithIndex extends EventBusAndroidOrderTest {, +, + @Override, + public void setUp() throws Exception {, + eventBus = Indexed.build();, + super.setUp();, + }, +, +}]
[+++ b/EventBusPerformance/AndroidManifest.xml, + android:versionCode="3"
[+++ b/.travis.yml, +# - echo no | android create avd --force -n test -t android-10 --abi armeabi, +# - emulator -avd test -no-skin -no-audio -no-window &, +# - android-wait-for-emulator, +# - adb shell input keyevent 82 &, +, +# Currently connectedCheck fails, so don't run unit test on Emulator for now. Issue:, +# com.android.builder.testing.ConnectedDevice > hasTests[test(AVD) - 2.3.3] FAILED, +# No tests found., +, +script:, + - TERM=dumb ./gradlew check]
[+++ b/EventBus/.classpath, + <classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
[+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import android.os.Looper;, + // @Nullable, + private final MainThreadSupport mainThreadSupport;, + // @Nullable, + mainThreadSupport = builder.mainThreadSupport != null ? builder.mainThreadSupport :, + Logger.AndroidLogger.isAndroidLogAvailable() ?, + new MainThreadSupport.AndroidHandlerMainThreadSupport(Looper.getMainLooper()) : null;, + mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;, + postToSubscription(newSubscription, stickyEvent, isMainThread());, + /**, + * Checks if the current thread is running in the main thread., + * If there is no main thread support (e.g. non-Android), "true" is always returned. In that case MAIN thread, + * subscribers are always called in posting thread, and BACKGROUND subscribers are always called from a background,
[+++ b/EventBusTest/AndroidManifest.xml, + <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
[+++ b/.travis.yml, +language: android, +before_script: chmod +x gradlew #before_script, +before_install: chmod +x gradlew #before_install, +, +android:, + components:, + - build-tools-21.0.2, + - android-10]
[+++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.2.1', +++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.2.1', +++ b/EventBusTest/build.gradle, + classpath 'com.android.tools.build:gradle:2.2.1', +++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.2.1', +++ b/EventBusTest/build.gradle, + classpath 'com.android.tools.build:gradle:2.2.1', +++ b/build.gradle, + gradleVersion = '2.14.1', +++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.2.1', +++ b/EventBusTest/build.gradle, + classpath 'com.android.tools.build:gradle:2.2.1', +++ b/build.gradle, + gradleVersion = '2.14.1', +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Nov 04 17:33:28 SGT 2015, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-all.zip, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Nov 04 17:33:28 SGT 2015, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-all.zip, +++ b/gradlew, +cd "`dirname \"$PRG\"`/" >/dev/null, +cd "$SAVED" >/dev/null, + JAVACMD=`cygpath --unix "$JAVACMD"`, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Nov 04 17:33:28 SGT 2015, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-all.zip, +++ b/gradlew, +cd "`dirname \"$PRG\"`/" >/dev/null, +cd "$SAVED" >/dev/null, + JAVACMD=`cygpath --unix "$JAVACMD"`, +++ b/gradlew.bat]
[+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidMultithreadedTest.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import org.greenrobot.eventbus.log.EBLog;, +final class BackgroundPoster implements Runnable, Poster {, + EBLog.w(Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import org.greenrobot.eventbus.log.EBLog;, +final class BackgroundPoster implements Runnable, Poster {, + EBLog.w(Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import org.greenrobot.eventbus.log.AndroidLog;, +import org.greenrobot.eventbus.log.EBLog;, +import org.greenrobot.eventbus.log.SystemOutLog;, +import org.greenrobot.eventbus.util.AndroidMTCalculator;, +import org.greenrobot.eventbus.util.MainThreadCalculator;, +import org.greenrobot.eventbus.util.NonAndroidMTCalculator;, + private final Poster mainThreadPoster;, + private final MainThreadCalculator mtCalculator;, + if (builder.logTarget == null) {, + EBLog.setLogTarget(builder.nonAndroidEnvironment ? new SystemOutLog() : new AndroidLog(TAG));, +
[+++ /dev/null, +++ /dev/null, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java, +/*, + * Copyright (C) 2013 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/CHANGELOG.md, +### V2.3.0 (2014-11-??) Feature release: EventBusBuilder and performance fix, +* New EventBusBuilder to configure EventBus instances (including the getDefault() instance, #124), +* Added configuration to disable "No subscribers registered for event" logs (EventBusBuilder, #107, #117), +* Added configuration to disable sending SubscriberExceptionEvent and NoSubscriberEvent (EventBusBuilder), +* Added configuration to fail fast when subscribers throw a exception (EventBusBuilder, #55), +* Added configuration to use an existing thread pool (EventBusBuilder, #115), +* Fixed performance regression sneaked into V2.2.x affecting (first time) registration of subscribers, +* Improved README.md and extracted an extended HOWTO.md and CHANGELOG.md from it, +* Various small
[+++ b/EventBus/.classpath, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/.classpath, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3-SNAPSHOT', + deployerJars, + // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4', + deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2', + // exclude 'de/greenrobot/event/util/**', + if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') , + && project.hasProperty('preferedPassword')) {, + configuration = configurations.deployerJars, + repository(url: preferedRepo) {, + authentication(userName: preferedUsername, password: preferedPassword), + }, + } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +++ b/EventBus/.classpath, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3-SNAPSHOT', + deployerJars, + // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4', + deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2',
[+++ b/.travis.yml, + - build-tools-22.0.1, +++ b/.travis.yml, + - build-tools-22.0.1, +++ /dev/null, +++ b/.travis.yml, + - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +++ b/.travis.yml, + - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., + public static String TAG = "EventBus";, + subscriberMethodFinder = new
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.gitignore, +gradle.properties]
[+++ b/EventBusPerformance/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, + <classpathentry kind="src" path="src"/>, + <classpathentry kind="src" path="gen"/>, + <classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>, + <classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, + <classpathentry kind="output" path="bin/classes"/>, +</classpath>, +++ b/EventBusPerformance/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, + <classpathentry kind="src" path="src"/>, + <classpathentry kind="src" path="gen"/>, + <classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>, + <classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, + <classpathentry kind="output" path="bin/classes"/>, +</classpath>, +++ b/EventBusPerformance/.gitignore, +/bin, +/gen, +++ b/EventBusPerformance/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, + <classpathentry kind="src" path="src"/>, + <classpathentry kind="src" path="gen"/>, + <classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>, + <classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, + <classpathentry kind="output" path="bin/classes"/>, +</classpath>, +++ b/EventBusPerformance/.gitignore, +/bin, +/gen, +++ b/EventBusPerformance/.project, +<?xml version="1.0" encoding="UTF-8"?>, +<projectDescription>, + <name>EventBusPerformance</name>, + <comment></comment>,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.travis.yml, +# http://docs.travis-ci.com/user/languages/android/, +, +before_script:, + - chmod +x gradlew, + - echo no | android create avd --force -n test -t android-10 --abi armeabi-v7a, + - emulator -avd test -no-skin -no-audio -no-window &, + - android-wait-for-emulator, + - adb shell input keyevent 82 &]
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, + /**, + * Subscriber classes should be skipped if their class or any involved event class are not visible to the index., + */, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, + /**, + * Subscriber classes should be skipped if their class or any involved event class are not visible to the index., + */, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusFallbackToReflectionTest.java, + public class PublicClassWithPublicAndPrivateEvent {, + @Subscribe, + public void onEvent(String any) {, + trackEvent(any);, + }, +, + @Subscribe, + public void onEvent(PrivateEvent any) {, + trackEvent(any);, + }, + }, +, + public void testSubscriberClassWithPublicAndPrivateEvent() {, + eventBus.register(new PublicClassWithPublicAndPrivateEvent());, +, +
[+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java, + assertTrue(eventBus.toString().contains("indexCount=2"));, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java, + assertTrue(eventBus.toString().contains("indexCount=2"));, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBasicTestWithIndex.java, + assertTrue(eventBus.toString().contains("indexCount=2"));, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBackgroundThreadTestWithIndex.java, + assertTrue(eventBus.toString().contains("indexCount=2"));, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusBasicTestWithIndex.java, + assertTrue(eventBus.toString().contains("indexCount=2"));, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java]
[+++ b/.travis.yml, + - openjdk6, + - build-tools-22.0.1, +++ b/.travis.yml, + - openjdk6, + - build-tools-22.0.1, +++ /dev/null, +++ b/.travis.yml, + - openjdk6, + - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/.travis.yml, + - openjdk6, + - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have
[+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java, +import org.greenrobot.eventbus.EventBusJavaTestsIndex;, + // TODO ut: remove index of this module once all tests moved to Java module, + return EventBus.builder(), + .addIndex(new EventBusTestsIndex()), + .addIndex(new EventBusJavaTestsIndex()), + .build();, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/Indexed.java, +import org.greenrobot.eventbus.EventBusJavaTestsIndex;, + // TODO ut: remove index of this module once all tests moved to Java module, + return EventBus.builder(), + .addIndex(new EventBusTestsIndex()), + .addIndex(new EventBusJavaTestsIndex()), + .build();, +++ b/EventBusTestJava/build.gradle, +buildscript {, + repositories {, + maven { url "https://plugins.gradle.org/m2/" }, + }, +, + dependencies {, + classpath "net.ltgt.gradle:gradle-apt-plugin:0.12", + }, +}, +, +apply plugin: 'net.ltgt.apt-idea', + apt project(':EventBusAnnotationProcessor'), +tasks.withType(JavaCompile) {, + options.compilerArgs +=
[+++ b/EventBusAnnotationProcessor/build.gradle, +group = 'org.greenrobot', +version = '3.0.0-rc', + compile 'de.greenrobot:java-common:2.3.1', +++ b/EventBusAnnotationProcessor/build.gradle, +group = 'org.greenrobot', +version = '3.0.0-rc', + compile 'de.greenrobot:java-common:2.3.1', +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is
[+++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, + public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky) {, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, + public SubscriberMethod(Method method, Class<?> eventType, ThreadMode threadMode, int priority, boolean sticky) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import de.greenrobot.event.meta.SubscriberInfo;, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +import de.greenrobot.event.meta.SubscriberInfoIndex;, +, +++ /dev/null, +++ /dev/null,
[+++ b/EventBus/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17" />
[+++ b/EventBusPerformance/AndroidManifest.xml, + android:label="@string/app_name", + android:process="test.runner" >, +++ b/EventBusPerformance/AndroidManifest.xml, + android:label="@string/app_name", + android:process="test.runner" >, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, + android:background="#88333333", + android:text="@string/testIsRunning", + android:layout_height="wrap_content", + android:layout_above="@+id/buttonKillProcess", + android:layout_alignWithParentIfMissing="true", + android:text="@string/buttonCancel" />, +, + <Button, + android:id="@+id/buttonKillProcess", + android:layout_width="fill_parent", + android:layout_height="wrap_content", + android:layout_alignParentBottom="true", + android:layout_margin="16dp", + android:onClick="onClickKillProcess", + android:text="@string/buttonKillProcess", + android:visibility="gone" />, +++ b/EventBusPerformance/AndroidManifest.xml, + android:label="@string/app_name", + android:process="test.runner" >, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, + android:background="#88333333", + android:text="@string/testIsRunning", + android:layout_height="wrap_content", + android:layout_above="@+id/buttonKillProcess", + android:layout_alignWithParentIfMissing="true", + android:text="@string/buttonCancel" />, +, + <Button, + android:id="@+id/buttonKillProcess", + android:layout_width="fill_parent", + android:layout_height="wrap_content", + android:layout_alignParentBottom="true", + android:layout_margin="16dp", + android:onClick="onClickKillProcess", + android:text="@string/buttonKillProcess", + android:visibility="gone" />, +++ b/EventBusPerformance/res/values/strings.xml, + <string name="testIsRunning">Test Is \nRunning!</string>, +
[+++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, + logger = builder.getLogger();, + mainThreadSupport = builder.getMainThreadSupport();, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, + logger = builder.getLogger();, + mainThreadSupport = builder.getMainThreadSupport();, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +import android.os.Looper;, +, + Logger getLogger() {, + // also check main looper to see if we have "good" Android classes (not Stubs etc.), + return Logger.AndroidLogger.isAndroidLogAvailable() && getAndroidMainLooperOrNull() != null, + ? new Logger.AndroidLogger("EventBus") :, +, + MainThreadSupport getMainThreadSupport() {, + if (mainThreadSupport != null) {, + return mainThreadSupport;, + } else if (Logger.AndroidLogger.isAndroidLogAvailable()) {, + Object looperOrNull = getAndroidMainLooperOrNull();, + return looperOrNull == null ? null :, + new MainThreadSupport.AndroidHandlerMainThreadSupport((Looper) looperOrNull);, + } else {,
[+++ b/EventBusTest/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" />
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.travis.yml, + - oraclejdk8]
[+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/AbstractEventBusTest.java, + protected void log(String msg, Throwable e) {, + eventBus.getLogger().log(Level.FINE, msg, e);, + }, +]
[+++ b/build.gradle, + gradleVersion = '3.4.1', +++ b/build.gradle, + gradleVersion = '3.4.1', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + gradleVersion = '3.4.1', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Apr 10 10:49:50 CEST 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-all.zip, +++ b/build.gradle, + gradleVersion = '3.4.1', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Apr 10 10:49:50 CEST 2017, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-all.zip, +++ b/gradlew, +#!/usr/bin/env sh, +# Escape application args, +save ( ) {, + for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done, + echo " ", +APP_ARGS=$(save "$@"), +# Collect all arguments for the java command, following the shell quoting and substitution rules, +eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS
[+++ b/COMPARISON.md, + <td>Name conventions</td>, +++ b/COMPARISON.md, + <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, + pom.artifactId = 'eventbus', +++ b/COMPARISON.md, + <td>Name conventions</td>, +++ b/EventBus/build.gradle, +version = '2.4.2-SNAPSHOT', +, + pom.artifactId = 'eventbus', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., + public static String TAG = "Event";, +, + subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, + *
[+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java, +import org.junit.Ignore;, +, + @Override, + @Ignore, + public void testEventClassHierarchy() {, + // TODO fix test in super, then remove this, + }, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java, +import org.junit.Ignore;, +, + @Override, + @Ignore, + public void testEventClassHierarchy() {, + // TODO fix test in super, then remove this, + }, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceSubclassTest.java, +import org.junit.Ignore;, +, + @Override, + @Ignore, + public void testEventClassHierarchy() {, + // TODO fix test in super, then remove this, + }]
[+++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceDisabledSubclassNoMethod extends EventBusInheritanceDisabledTest {, +}, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassNoMethod.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceDisabledSubclassNoMethod extends EventBusInheritanceDisabledTest {, +}, +++ b/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusInheritanceDisabledSubclassTest.java, +package org.greenrobot.eventbus;, +, +// Need to use upper class or Android test runner does not pick it up, +public class EventBusInheritanceDisabledSubclassTest extends EventBusInheritanceDisabledTest {, +, + int countMyEventOverwritten;, +, + @Subscribe, + public void onEvent(MyEvent event) {, + countMyEventOverwritten++;, + }, +, +},
[+++ /dev/null, +++ /dev/null, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusSubscriberLegalTest.java, +/*, + * Copyright (C) 2013 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/EventBusTest/AndroidManifest.xml]
[+++ b/build.gradle, +, +task wrapper(type: Wrapper) {, + gradleVersion = '2.10', +}, +++ b/build.gradle, +, +task wrapper(type: Wrapper) {, + gradleVersion = '2.10', +}, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +, +task wrapper(type: Wrapper) {, + gradleVersion = '2.10', +}, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Feb 01 22:19:59 CET 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip]
[+++ b/.gitignore, +*.iml, +.idea, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +, +local.properties, +++ b/.gitignore, +*.iml, +.idea, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +, +local.properties, +++ b/.travis.yml, + - build-tools-21.1.2, +++ b/.gitignore, +*.iml, +.idea, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +, +local.properties, +++ b/.travis.yml, + - build-tools-21.1.2, +++ b/EventBusPerformance/build.gradle, + mavenCentral(), + classpath 'com.android.tools.build:gradle:1.1.0', + mavenCentral(), + buildToolsVersion '21.1.2', +++ b/.gitignore, +*.iml, +.idea, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +, +local.properties, +++ b/.travis.yml, + - build-tools-21.1.2, +++ b/EventBusPerformance/build.gradle, + mavenCentral(), + classpath 'com.android.tools.build:gradle:1.1.0', + mavenCentral(), + buildToolsVersion '21.1.2', +++ b/EventBusTest/build.gradle, + mavenCentral(),
[+++ b/EventBus/.classpath, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/.classpath, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBusPerformance/.classpath, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/.classpath, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBusPerformance/.classpath, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBusTest/.classpath, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, + <classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>]
[+++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +import org.greenrobot.eventbus.android.AndroidLogger;, + return AndroidLogger.isAndroidLogAvailable() && getAndroidMainLooperOrNull() != null, + ? new AndroidLogger("EventBus") :, + } else if (AndroidLogger.isAndroidLogAvailable()) {, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +import org.greenrobot.eventbus.android.AndroidLogger;, + return AndroidLogger.isAndroidLogAvailable() && getAndroidMainLooperOrNull() != null, + ? new AndroidLogger("EventBus") :, + } else if (AndroidLogger.isAndroidLogAvailable()) {, +++ b/EventBus/src/org/greenrobot/eventbus/Logger.java, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +import org.greenrobot.eventbus.android.AndroidLogger;, + return AndroidLogger.isAndroidLogAvailable() && getAndroidMainLooperOrNull() != null, + ? new AndroidLogger("EventBus") :, + } else if (AndroidLogger.isAndroidLogAvailable()) {, +++ b/EventBus/src/org/greenrobot/eventbus/Logger.java, +++ b/EventBus/src/org/greenrobot/eventbus/android/AndroidLogger.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may
[+++ b/.travis.yml, +before_script: chmod +x gradlew]
[+++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + private boolean subscribed;
[+++ b/EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java, +/*
[+++ b/EventBusTest/AndroidManifest.xml, + android:allowBackup="false"
[+++ b/EventBusPerformance/AndroidManifest.xml, + android:versionCode="2", + android:versionName="1.0.1" >, +++ b/EventBusPerformance/AndroidManifest.xml, + android:versionCode="2", + android:versionName="1.0.1" >, +++ b/EventBusPerformance/libs/eventbus.jar]
[+++ b/.travis.yml, +before_install: chmod +x gradlew]
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedOptions;, +@SupportedOptions("eventBusIndex"), +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedOptions;, +@SupportedOptions("eventBusIndex"), +++ /dev/null, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedOptions;, +@SupportedOptions("eventBusIndex"), +++ /dev/null, +++ b/EventBusTest/libs/EventBusTestSubscriberInJar-3.0.0-beta2.jar, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedOptions;, +@SupportedOptions("eventBusIndex"), +++ /dev/null, +++ b/EventBusTest/libs/EventBusTestSubscriberInJar-3.0.0-beta2.jar, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java, +import org.greenrobot.eventbus.SubscriberInJar;, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedOptions;, +@SupportedOptions("eventBusIndex"), +++ /dev/null, +++ b/EventBusTest/libs/EventBusTestSubscriberInJar-3.0.0-beta2.jar, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java, +import org.greenrobot.eventbus.SubscriberInJar;, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberInJarTestWithIndex.java, +import org.greenrobot.eventbus.EventBus;, +import org.greenrobot.eventbus.InJarIndex;, + eventBus = EventBus.builder().addIndex(new InJarIndex()).build();, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedOptions;, +@SupportedOptions("eventBusIndex"), +++ /dev/null, +++ b/EventBusTest/libs/EventBusTestSubscriberInJar-3.0.0-beta2.jar, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusSubscriberInJarTest.java, +import org.greenrobot.eventbus.SubscriberInJar;, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberInJarTestWithIndex.java, +import org.greenrobot.eventbus.EventBus;, +import org.greenrobot.eventbus.InJarIndex;, + eventBus = EventBus.builder().addIndex(new InJarIndex()).build();, +++ b/EventBusTestSubscriberInJar/build.gradle, +, +compileJava {, + options.compilerArgs << '-AeventBusIndex=org.greenrobot.eventbus.InJarIndex', + options.fork = true, +}]
[+++ b/.travis.yml, + - echo no | android create avd --force -n test -t android-10 --abi armeabi]
[+++ b/.travis.yml, + - openjdk6, + - build-tools-22.0.1, +++ b/.travis.yml, + - openjdk6, + - build-tools-22.0.1, +++ /dev/null, +++ b/.travis.yml, + - openjdk6, + - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/.travis.yml, + - openjdk6, + - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have
[+++ b/build.gradle, + gradleVersion = '2.14', +++ b/build.gradle, + gradleVersion = '2.14', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + gradleVersion = '2.14', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Tue Jul 12 16:09:12 SGT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.14-all.zip, +++ b/build.gradle, + gradleVersion = '2.14', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Tue Jul 12 16:09:12 SGT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.14-all.zip, +++ b/gradlew, +# Attempt to set APP_HOME, +# Resolve links: $0 may be a link, +PRG="$0", +# Need this for relative symlinks., +while [ -h "$PRG" ] ; do, + ls=`ls -ld "$PRG"`, + link=`expr "$ls" : '.*-> \(.*\)$'`, + if expr "$link" : '/.*' > /dev/null; then, + PRG="$link", +
[+++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org),
[+++ b/.travis.yml, + - build-tools-26.0.3, + - android-26, +++ b/.travis.yml, + - build-tools-26.0.3, + - android-26, +++ b/EventBusTest/build.gradle, + // Trying to repro bug:, +// androidTestAnnotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.1.0', + buildToolsVersion '26.0.3' // When updating, don't forget to adjust .travis.yml, + compileSdkVersion 26, + targetSdkVersion 26]
[+++ b/EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java, + } catch (InstantiationException e) {, + throw new RuntimeException(e);, + } catch (IllegalAccessException e) {]
[+++ b/.gitignore, +.gradle, +++ b/.gitignore, +.gradle, +++ b/EventBus/build.gradle, +version = '2.0.1', + exclude 'de/greenrobot/event/util/**', +++ b/.gitignore, +.gradle, +++ b/EventBus/build.gradle, +version = '2.0.1', + exclude 'de/greenrobot/event/util/**', +++ b/README.md, +Add EventBus to your project, +----------------------------, +Starting with version 2.0.1, EventBus is pushed to [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22eventbus%22) repository, so you can simply add a dependency (group ID "de.greenrobot" and arifact ID "eventbus"). If you do not use Maven or Gradle, download the jar from [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22eventbus%22) and copy it into the libs folder of your Android project., +, +### V2.0.1 (2013-02-25) Bug fix release, Gradle and Maven Central, +* Fixed #15: removeStickyEvent(...) does
[+++ b/EventBus/src/de/greenrobot/event/Subscribe.java, +package de.greenrobot.event;, +, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import de.greenrobot.event.ThreadMode;, +, +@Documented, +@Retention(RetentionPolicy.RUNTIME), +@Target({ElementType.METHOD}), +public @interface Subscribe {, + ThreadMode threadMode() default ThreadMode.PostThread;, +}, +, +++ b/EventBus/src/de/greenrobot/event/Subscribe.java, +package de.greenrobot.event;, +, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import de.greenrobot.event.ThreadMode;, +, +@Documented, +@Retention(RetentionPolicy.RUNTIME), +@Target({ElementType.METHOD}), +public @interface Subscribe {, + ThreadMode threadMode() default ThreadMode.PostThread;, +}, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +++ b/EventBus/src/de/greenrobot/event/Subscribe.java, +package de.greenrobot.event;, +, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import de.greenrobot.event.ThreadMode;, +, +@Documented, +@Retention(RetentionPolicy.RUNTIME), +@Target({ElementType.METHOD}), +public @interface Subscribe {, + ThreadMode
[+++ b/EventBusPerformance/res/values/strings.xml, + <item>Register Subscribers, no unregister</item>, + <item>Register Subscribers, 1. time</item>, +++ b/EventBusPerformance/res/values/strings.xml, + <item>Register Subscribers, no unregister</item>, + <item>Register Subscribers, 1. time</item>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunnerActivity.java, +++ b/EventBusPerformance/res/values/strings.xml, + <item>Register Subscribers, no unregister</item>, + <item>Register Subscribers, 1. time</item>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunnerActivity.java, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, + TestEventBus.RegisterAll.class, //, + TestEventBus.RegisterFirstTime.class, +++ b/EventBusPerformance/res/values/strings.xml, + <item>Register Subscribers, no unregister</item>, + <item>Register Subscribers, 1. time</item>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestRunnerActivity.java, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, + TestEventBus.RegisterAll.class, //, + TestEventBus.RegisterFirstTime.class, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/TestEventBus.java, +import java.lang.reflect.Method;, + protected Method clearCachesMethod;, +, + if (clearCachesMethod != null) {, + try {, + clearCachesMethod.invoke(null);, + } catch (Exception e) {, + throw new RuntimeException(e);, +
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.lang.model.type.TypeVariable;, +@SupportedOptions(value = {"eventBusIndex", "verbose"}), + public static final String OPTION_VERBOSE = "verbose";, + private boolean verbose;, + verbose = Boolean.parseBoolean(processingEnv.getOptions().get(OPTION_VERBOSE));, + if (verbose) {, + }, + VariableElement param = method.getParameters().get(0);, + TypeMirror typeMirror = getParamTypeMirror(param, messager);, + skipReason = "event type cannot be processed";, + messager.printMessage(Diagnostic.Kind.NOTE, msg, param);, + private TypeMirror getParamTypeMirror(VariableElement param, Messager messager) {, + TypeMirror typeMirror = param.asType();, + // Check for generic type, + if (typeMirror instanceof TypeVariable) {, + TypeMirror upperBound = ((TypeVariable) typeMirror).getUpperBound();, + if (upperBound instanceof DeclaredType) {, + if (messager != null) {, + messager.printMessage(Diagnostic.Kind.NOTE, "Using
[+++ b/.travis.yml, + - tools]
[+++ b/.travis.yml, + - build-tools-25.0.2, +++ b/.travis.yml, + - build-tools-25.0.2, +++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.3.1', + buildToolsVersion '25.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/.travis.yml, + - build-tools-25.0.2, +++ b/EventBusPerformance/build.gradle, + classpath 'com.android.tools.build:gradle:2.3.1', + buildToolsVersion '25.0.2' // When updating, don't forget to adjust .travis.yml, +++ b/EventBusTest/build.gradle, + classpath 'com.android.tools.build:gradle:2.3.1', + androidTestCompile 'com.android.support.test:runner:0.5', + androidTestCompile 'com.android.support.test:rules:0.5', + buildToolsVersion '25.0.0' // When updating, don't forget to adjust .travis.yml, + compileSdkVersion 25]
[+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidOrderTest.java, +package org.greenrobot.eventbus;, +, +import android.os.Handler;, +import android.os.Looper;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +, +import static org.junit.Assert.assertEquals;, +, +public class EventBusAndroidOrderTest extends AbstractAndroidEventBusTest {, +, + private TestBackgroundPoster backgroundPoster;, + private Handler handler;, +, + @Before, + public void setUp() throws Exception {, + handler = new Handler(Looper.getMainLooper());, + backgroundPoster = new TestBackgroundPoster(eventBus);, + backgroundPoster.start();, + }, +, + @After, + public void tearDown() throws Exception {, + backgroundPoster.shutdown();, + backgroundPoster.join();, + }, +, + @Test, + public void backgroundAndMainUnordered() {, + eventBus.register(this);, +, + handler.post(new Runnable() {, + @Override, + public void run() {,
[+++ b/build.gradle, + gradleVersion = '4.1', + distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL, +++ b/build.gradle, + gradleVersion = '4.1', + distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + gradleVersion = '4.1', + distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip, +++ b/build.gradle, + gradleVersion = '4.1', + distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip, +++ b/gradlew]
[+++ b/.gitignore, +*.iml, +.idea, +++ b/.gitignore, +*.iml, +.idea, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3']
[+++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusStickyEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusStickyEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberExceptionTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusNoSubscriberEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusOrderedSubscriptionsTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusRegistrationRacingTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusStickyEventTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberExceptionTestWithIndex.java, +++ b/EventBusTest/src/org/greenrobot/eventbus/indexed/EventBusSubscriberInJarTestWithIndex.java]
[+++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusAndroidCancelEventDeliveryTest.java, +/*, + * Copyright (C) 2012-2016 Markus Junginger, greenrobot (http://greenrobot.org), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java]
[+++ b/COMPARISON.md, + <th>Aynchronous event delivery</th>, +++ b/COMPARISON.md, + <th>Aynchronous event delivery</th>, +++ b/EventBus/build.gradle, +version = '3.0.0-beta1', +++ b/COMPARISON.md, + <th>Aynchronous event delivery</th>, +++ b/EventBus/build.gradle, +version = '3.0.0-beta1', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., + public static String TAG = "EventBus";, + subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, + * Subscribers
[+++ b/.gitignore, +, +local.properties]
[+++ b/EventBusPerformance/res/layout/activity_runtests.xml, + android:layout_height="wrap_content", + android:textSize="20sp" />, +, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, + android:layout_height="wrap_content", + android:textSize="20sp" />, +, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/Test.java, + protected String otherTestResults;, + public long getPrimaryResultMillis() {, + return primaryResultMillis;, + public double getPrimaryResultRate() {, + return primaryResultCount / (primaryResultMillis / 1000d);, + }, +, + public String getOtherTestResults() {, + return otherTestResults;, +++ b/EventBusPerformance/res/layout/activity_runtests.xml, + android:layout_height="wrap_content", + android:textSize="20sp" />, +, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/Test.java, + protected String otherTestResults;, + public long getPrimaryResultMillis() {, + return primaryResultMillis;, + public double getPrimaryResultRate() {, + return primaryResultCount / (primaryResultMillis / 1000d);, + }, +, + public String getOtherTestResults() {, + return otherTestResults;, +++
[+++ b/.travis.yml, + - build-tools-22.0.1]
[+++ b/EventBusPerformance/AndroidManifest.xml, + android:minSdkVersion="7", + <uses-feature, + android:name="android.hardware.touchscreen", + android:required="false" />, +, +++ b/EventBusPerformance/AndroidManifest.xml, + android:minSdkVersion="7", + <uses-feature, + android:name="android.hardware.touchscreen", + android:required="false" />, +, +++ b/EventBusPerformance/project.properties, +target=android-7, +++ b/EventBusPerformance/AndroidManifest.xml, + android:minSdkVersion="7", + <uses-feature, + android:name="android.hardware.touchscreen", + android:required="false" />, +, +++ b/EventBusPerformance/project.properties, +target=android-7, +++ b/EventBusPerformance/res/values/strings.xml, + <string name="app_name">Event Performance</string>]
[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, + public static final String OPTION_EVENT_BUS_INDEX = "eventBusIndex";, + // Nor now, we just use a single index and skip individual files: createInfoFiles();, +, + String index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);, + } else {, + messager.printMessage(Diagnostic.Kind.ERROR, "No option " + OPTION_EVENT_BUS_INDEX +, + " passed to annotation processor.");, + // Currently unused in favor of single index files, + for (Map.Entry<TypeElement, List<ExecutableElement>> entry : methodsByClass.entrySet()) {, + for (Map.Entry<TypeElement, List<ExecutableElement>> entry : methodsByClass.entrySet()) {, + if (classesToSkip.contains(subscriberTypeElement)) {, + continue;, + }, +]
