[+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, + urlBuilder = baseUrl.newBuilder(relativeUrl);, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, + urlBuilder = baseUrl.newBuilder(relativeUrl);, +++ b/retrofit/src/main/java/retrofit2/Response.java, + .request(new okhttp3.Request.Builder().url("http://localhost").build()), + .request(new okhttp3.Request.Builder().url("http://localhost").build())]
[+++ b/pom.xml, + <version>2.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.2-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/revision.properties, +retrofit.revision=0.3-SNAPSHOT]
[+++ b/pom.xml, + <okhttp.version>3.12.0</okhttp.version>, + <robolectric.version>3.2</robolectric.version>, +++ b/pom.xml, + <okhttp.version>3.12.0</okhttp.version>, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +@Config(sdk = NEWEST_SDK), +++ b/pom.xml, + <okhttp.version>3.12.0</okhttp.version>, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +@Config(sdk = NEWEST_SDK), +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +@Config(sdk = NEWEST_SDK), +++ b/pom.xml, + <okhttp.version>3.12.0</okhttp.version>, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +@Config(sdk = NEWEST_SDK), +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +@Config(sdk = NEWEST_SDK), +++ b/retrofit/src/test/java/retrofit2/RequestFactoryAndroidTest.java, +@Config(sdk = NEWEST_SDK)]
[+++ b/retrofit/src/test/java/retrofit2/ResponseTest.java, + @Test public void successWithNullHeadersThrows() {]
[+++ b/retrofit/src/main/java/retrofit2/Response.java, +import okhttp3.Request;, + .request(new Request.Builder().url("http://localhost").build()), + .request(new Request.Builder().url("http://localhost").build())]
[+++ b/pom.xml, + <gson.version>2.2.4</gson.version>, + <okhttp.version>1.0.2</okhttp.version>, + <guava.version>14.0.1</guava.version>, +++ b/pom.xml, + <gson.version>2.2.4</gson.version>, + <okhttp.version>1.0.2</okhttp.version>, + <guava.version>14.0.1</guava.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, + url.append(requestQuery);, +++ b/pom.xml, + <gson.version>2.2.4</gson.version>, + <okhttp.version>1.0.2</okhttp.version>, + <guava.version>14.0.1</guava.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, + url.append(requestQuery);, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, + .setQuery("?hi=mom") //]
[+++ b/.gitignore, +lib, +out, +build, +, +++ b/.gitignore, +lib, +out, +build, +, +++ b/.idea/.gitignore, +workspace.xml, +, +++ b/.gitignore, +lib, +out, +build, +, +++ b/.idea/.gitignore, +workspace.xml, +, +++ b/.idea/ant.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="AntConfiguration">, + <defaultAnt bundledAnt="true" />, + <buildFile url="file://$PROJECT_DIR$/build.xml">, + <additionalClassPath />, + <antReference projectDefault="true" />, + <customJdkName value="" />, + <maximumHeapSize value="128" />, + <maximumStackSize value="2" />, + <properties />, + </buildFile>, + </component>, +</project>, +, +++ b/.gitignore, +lib, +out, +build, +, +++ b/.idea/.gitignore, +workspace.xml, +, +++ b/.idea/ant.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="AntConfiguration">, + <defaultAnt bundledAnt="true" />, + <buildFile url="file://$PROJECT_DIR$/build.xml">, +
[+++ b/.idea/compiler.xml, + <directory url="file://$PROJECT_DIR$/sample-android/gen" includeSubdirectories="true" />, +++ b/.idea/compiler.xml, + <directory url="file://$PROJECT_DIR$/sample-android/gen" includeSubdirectories="true" />, +++ b/http/retrofit-http.iml, + <orderEntry type="library" name="Maven: com.google.inject:guice:no_aop:3.0" level="project" />, +++ b/.idea/compiler.xml, + <directory url="file://$PROJECT_DIR$/sample-android/gen" includeSubdirectories="true" />, +++ b/http/retrofit-http.iml, + <orderEntry type="library" name="Maven: com.google.inject:guice:no_aop:3.0" level="project" />, +++ b/sample-android/retrofit-sample-android.iml, + <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />, + <includeSystemProguardFile>true</includeSystemProguardFile>, + <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />]
[+++ b/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/pom.xml, + <rxjava.version>1.0.0-rc.4</rxjava.version>, + <groupId>io.reactivex</groupId>, + <artifactId>rxjava</artifactId>, +++ b/pom.xml, + <rxjava.version>1.0.0-rc.4</rxjava.version>, + <groupId>io.reactivex</groupId>, + <artifactId>rxjava</artifactId>, +++ /dev/null, +++ b/pom.xml, + <rxjava.version>1.0.0-rc.4</rxjava.version>, + <groupId>io.reactivex</groupId>, + <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <rxjava.version>1.0.0-rc.4</rxjava.version>, + <groupId>io.reactivex</groupId>, + <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <rxjava.version>1.0.0-rc.4</rxjava.version>, + <groupId>io.reactivex</groupId>, + <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <rxjava.version>1.0.0-rc.4</rxjava.version>, + <groupId>io.reactivex</groupId>, + <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <rxjava.version>1.0.0-rc.4</rxjava.version>, + <groupId>io.reactivex</groupId>, + <artifactId>rxjava</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/pom.xml, +
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, + @Override public @Nullable CallAdapter<?, ?> get(, + Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, + @Override public @Nullable CallAdapter<?, ?> get(, + Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, + @Override public @Nullable CallAdapter<?, ?> get(, + Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, + @Override public @Nullable CallAdapter<?, ?> get(, + Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, + @Override public @Nullable CallAdapter<?, ?> get(, + Type returnType, Annotation[] annotations, Retrofit
[+++ b/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java, +import java.io.IOException;, +import java.lang.reflect.ParameterizedType;, +import java.util.concurrent.Executor;, +import okhttp3.Request;, +import static retrofit2.Utils.checkNotNull;, +, + private final @Nullable Executor callbackExecutor;, +, + DefaultCallAdapterFactory(@Nullable Executor callbackExecutor) {, + this.callbackExecutor = callbackExecutor;, + }, + if (!(returnType instanceof ParameterizedType)) {, + throw new IllegalArgumentException(, + "Call return type must be parameterized as Call<Foo> or Call<? extends Foo>");, + }, + final Type responseType = Utils.getParameterUpperBound(0, (ParameterizedType) returnType);, + final Executor executor = Utils.isAnnotationPresent(annotations, SkipCallbackExecutor.class), + ? null, + : callbackExecutor;, +, + return executor == null, + ? call, + : new ExecutorCallbackCall<>(executor, call);, +, + static final class ExecutorCallbackCall<T> implements
[+++ b/pom.xml, + <version>2.4.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.4.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.4.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.4.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.4.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.4.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, + <version>2.4.1-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <version>2.5</version>]
[+++ b/io/src/main/java/retrofit/internal/Objects.java, +// Copyright 2010 Square, Inc., +package retrofit.internal;, +, +/**, + * Object utility methods., + *, + * @author Bob Lee (bob@squareup.com), + */, +public class Objects {, +, + /**, + * Returns t unless it's null., + *, + * @throws NullPointerException if t is null, + */, + public static <T> T nonNull(T t, String name) {, + if (t == null) throw new NullPointerException(name);, + return t;, + }, +}, +++ b/io/src/main/java/retrofit/internal/Objects.java, +// Copyright 2010 Square, Inc., +package retrofit.internal;, +, +/**, + * Object utility methods., + *, + * @author Bob Lee
[+++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/moshi/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <rxjava.version>0.20.5</rxjava.version>, +++ b/pom.xml, + <rxjava.version>0.20.5</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RetrofitError.java]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +Type-safe REST client for Android and Java by Square, Inc., +Usage, +-----, +License, +=======, + Copyright 2012 Square, Inc., + Licensed under the Apache License, Version 2.0 (the "License");, + you may not use this file except in compliance with the License., + You may obtain a copy of the License at, + http://www.apache.org/licenses/LICENSE-2.0, +, + Unless required by applicable law or agreed to in writing, software, + distributed under the License is distributed on an "AS IS" BASIS,, + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + See
[+++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.util.Collections;, + @Override List<? extends Converter.Factory> defaultConverterFactories() {, + return Build.VERSION.SDK_INT >= 24, + ? singletonList(OptionalConverterFactory.INSTANCE), + : Collections.<Converter.Factory>emptyList();, + }, +, + @Override int defaultConverterFactoriesSize() {, + return Build.VERSION.SDK_INT >= 24 ? 1 : 0;, + }, +, +++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is
[+++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoResponseBodyConverter.java, + return registry == null ? parser.parseFrom(value.byteStream()), + : parser.parseFrom(value.byteStream(), registry);]
[+++ b/pom.xml, + <module>retrofit-mock</module>, +++ b/pom.xml, + <module>retrofit-mock</module>, +++ b/retrofit-mock/pom.xml, +++ b/pom.xml, + <module>retrofit-mock</module>, +++ b/retrofit-mock/pom.xml, +++ b/retrofit-mock/src/main/java/retrofit/MockCall.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + *
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + if (callback == null) throw new NullPointerException("callback == null");, +, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + if (callback == null) throw new NullPointerException("callback == null");, +, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, + if (callback == null) throw new NullPointerException("callback == null");, +, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + if (callback == null) throw new NullPointerException("callback == null");, +, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, + if (callback == null) throw new NullPointerException("callback == null");, +, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + if (callback == null) throw new NullPointerException("callback == null");, +]
[+++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.lang.invoke.MethodHandles.Lookup;, +import java.lang.reflect.Constructor;, + // Because the service interface might not be public, we need to use a MethodHandle lookup, + // that ignores the visibility of the declaringClass., + Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor(Class.class, int.class);, + constructor.setAccessible(true);, + return constructor.newInstance(declaringClass, -1 /* trusted */), +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.lang.invoke.MethodHandles.Lookup;, +import java.lang.reflect.Constructor;, + // Because the service interface might not be public, we need to use a MethodHandle lookup, + // that ignores the visibility of the declaringClass., + Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor(Class.class, int.class);, + constructor.setAccessible(true);, + return constructor.newInstance(declaringClass, -1 /* trusted */), +++ b/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java, +package retrofit2;, +,
[+++ b/pom.xml, + <version>1.6.0</version>, + <tag>parent-1.6.0</tag>, +++ b/pom.xml, + <version>1.6.0</version>, + <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.0</version>, +++ b/pom.xml, + <version>1.6.0</version>, + <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.0</version>, +++ b/pom.xml, + <version>1.6.0</version>, + <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.0</version>, +++ b/pom.xml, + <version>1.6.0</version>, + <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.6.0</version>, +++ b/pom.xml, + <version>1.6.0</version>, + <tag>parent-1.6.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.6.0</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.6.0</version>, +++ b/pom.xml, +
[+++ b/retrofit/src/main/java/retrofit2/Call.java, +import com.squareup.okhttp.ResponseBody;, +, + /** Creates {@link Call} instances. */, + interface Factory {, + /**, + * Returns a {@link Call} which will send {@code request} when executed or enqueue and use, + * {@code converter} to parse the response. May not return null., + */, + <T> Call<T> create(DeferredRequest request, Converter<ResponseBody, T> converter);, + }, +++ b/retrofit/src/main/java/retrofit2/Call.java, +import com.squareup.okhttp.ResponseBody;, +, + /** Creates {@link Call} instances. */, + interface Factory {, + /**, + * Returns a {@link Call} which will send {@code request} when executed or enqueue and use, + * {@code converter} to
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +, + @Test public void subscribeTwice() {, + server.enqueue(new MockResponse().setBody("Hi"));, + server.enqueue(new MockResponse().setBody("Hey"));, +, + Completable observable = service.completable();, +, + RecordingSubscriber<String> subscriber1 = subscriberRule.create();, + observable.subscribe(subscriber1);, + subscriber1.assertCompleted();, +, + RecordingSubscriber<String> subscriber2 = subscriberRule.create();, + observable.subscribe(subscriber2);, + subscriber2.assertCompleted();, + }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +, + @Test public void subscribeTwice() {, + server.enqueue(new MockResponse().setBody("Hi"));, + server.enqueue(new MockResponse().setBody("Hey"));, +, + Completable observable = service.completable();, +, + RecordingSubscriber<String> subscriber1 = subscriberRule.create();, + observable.subscribe(subscriber1);, + subscriber1.assertCompleted();, +, + RecordingSubscriber<String> subscriber2 = subscriberRule.create();, + observable.subscribe(subscriber2);, + subscriber2.assertCompleted();, + }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java, +, + @Test public void subscribeTwice() {, + server.enqueue(new MockResponse().setBody("Hi"));, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,,
[+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final BufferedSource delegateSource;, + this.delegateSource = Okio.buffer(new ForwardingSource(delegate.source()) {, + @Override public long read(Buffer sink, long byteCount) throws IOException {, + try {, + return super.read(sink, byteCount);, + } catch (IOException e) {, + thrownException = e;, + throw e;, + }, + }, + });, + return delegateSource;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final BufferedSource delegateSource;, + this.delegateSource = Okio.buffer(new ForwardingSource(delegate.source()) {, + @Override public long read(Buffer sink, long byteCount) throws IOException {, + try {, + return super.read(sink, byteCount);, + } catch (IOException e) {, + thrownException = e;, + throw e;, + },
[+++ b/pom.xml, + <okhttp.version>3.4.0</okhttp.version>, +++ b/pom.xml, + <okhttp.version>3.4.0</okhttp.version>, +++ b/retrofit-converters/moshi/pom.xml, + <!-- TODO remove this dependency once Moshi ships with 1.9.0 or newer. -->]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, + <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, + <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, + <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +++ b/build.xml, + <target name="compile" depends="prepare">, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, + <component name="ProjectRootManager" version="2" languageLevel="JDK_1_5" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, +++ b/build.xml, + <target name="compile" depends="prepare">, +++ b/ivy.xml, + <dependency org="com.google.code.gson" name="gson" rev="1.4"/>, +++ b/.gitignore, +++ b/.idea/libraries/JARs.xml, +++ b/.idea/misc.xml, + <component
[+++ b/README.md, +[this file](https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/rules.pro)., +++ b/README.md, +[this file](https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/rules.pro)., +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
[+++ b/pom.xml, + <jackson.version>2.9.4</jackson.version>]
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, + * {@code Single}, {@link Completable} and {@code Maybe} type parameter:]
[+++ b/pom.xml, + <moshi.version>1.3.0</moshi.version>]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + } else if (behavior.calculateIsError()) {, + if (delaySleep()) {, + //noinspection unchecked An error response has no body., + callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, + }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + } else if (behavior.calculateIsError()) {, + if (delaySleep()) {, + //noinspection unchecked An error response has no body., + callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, + }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +import java.util.concurrent.Callable;, +import okhttp3.ResponseBody;, +import retrofit2.Response;, + private static final int DEFAULT_ERROR_PERCENT = 0; // 0% of network calls will return errors., +, + /** Applies {@link NetworkBehavior} to instances of {@code T}. */, + public interface Adapter<T> {, + /**, + *
[+++ b/checkstyle.xml, + <!--module name="NewlineAtEndOfFile"/-->
[+++ b/revision.properties, +retrofit.revision=0.2-SNAPSHOT]
[+++ b/modules/core/src/retrofit/core/Callback.java, + * @param response to show user, or null if no message was returned, + void clientError(ErrorResponse response);, +++ b/modules/core/src/retrofit/core/Callback.java, + * @param response to show user, or null if no message was returned, + void clientError(ErrorResponse response);, +++ /dev/null, +++ b/modules/core/src/retrofit/core/Callback.java, + * @param response to show user, or null if no message was returned, + void clientError(ErrorResponse response);, +++ /dev/null, +++ b/modules/core/src/retrofit/core/ErrorResponse.java, +// Copyright 2010 Square, Inc., +package retrofit.core;, +, +/**, + * Information for a client error screen or dialog, including the screen title, + * and message. Either field may be null., +
[+++ b/pom.xml, + <scala.version>2.12.3</scala.version>, + <groupId>org.scala-lang</groupId>, + <artifactId>scala-library</artifactId>, + <version>${scala.version}</version>, + </dependency>, + <dependency>, +++ b/pom.xml, + <scala.version>2.12.3</scala.version>, + <groupId>org.scala-lang</groupId>, + <artifactId>scala-library</artifactId>, + <version>${scala.version}</version>, + </dependency>, + <dependency>, +++ b/retrofit-adapters/pom.xml, + <module>scala</module>, +++ b/pom.xml, + <scala.version>2.12.3</scala.version>, + <groupId>org.scala-lang</groupId>, + <artifactId>scala-library</artifactId>, + <version>${scala.version}</version>, + </dependency>, + <dependency>, +++ b/retrofit-adapters/pom.xml, + <module>scala</module>, +++ b/retrofit-adapters/scala/README.md, +Scala Adapter, +=============, +, +An `Adapter` for adapting Scala `Future`., +, +, +Usage, +-----, +, +Add `ScalaCallAdapterFactory` as a `Call` adapter when building your `Retrofit` instance:, +```java, +Retrofit retrofit = new Retrofit.Builder(), + .baseUrl("https://example.com/"), + .addCallAdapterFactory(ScalaCallAdapterFactory.create()), + .build();, +```, +, +Your service methods can now use `Future`
[+++ b/checkstyle.xml, + <!--<module name="PackageName"/>-->
[+++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +
[+++ b/retrofit-adapters/pom.xml, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + BehaviorCall(NetworkBehavior behavior, ExecutorService backgroundExecutor, Call<T> delegate) {, + return new BehaviorCall<>(behavior, backgroundExecutor, delegate.clone());, + callback.onFailure(new InterruptedIOException("canceled"));, + callback.onFailure(new InterruptedIOException("canceled"));, + callback.onFailure(behavior.failureException());, + callback.onResponse(response);, + callback.onFailure(t);, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + BehaviorCall(NetworkBehavior behavior, ExecutorService backgroundExecutor, Call<T> delegate) {, + return new BehaviorCall<>(behavior, backgroundExecutor, delegate.clone());, + callback.onFailure(new InterruptedIOException("canceled"));, + callback.onFailure(new
[+++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you need to add the following options:, +```, +# Retain generic type information for use by reflection by converters and adapters., +-keepattributes Signature, +# Retain service method parameters., +-keepclassmembers,allowshrinking,allowobfuscation interface * {, + @retrofit2.http.* <methods>;, +}, +# Ignore annotation used for build tooling., +-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, +```, +You might also need rules for OkHttp and Okio which are dependencies., +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you need to add the following options:, +```, +# Retain generic type information for use by reflection by converters and adapters., +-keepattributes Signature,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.7.0-SNAPSHOT</version>, + <name>HTTP</name>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.7.0-SNAPSHOT</version>, + <name>HTTP</name>, +++ b/http/src/main/java/retrofit/http/Fetcher.java, +import static retrofit.internal.Objects.nonNull;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.7.0-SNAPSHOT</version>, + <name>HTTP</name>, +++ b/http/src/main/java/retrofit/http/Fetcher.java, +import static retrofit.internal.Objects.nonNull;, +++ b/io/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.7.0-SNAPSHOT</version>, + <name>I/O</name>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance",
[+++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/retrofit/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/retrofit/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/samples/github-client/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/retrofit/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/samples/github-client/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>, +++ b/samples/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>1.0.0</version>]
[+++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ /dev/null, +++ /dev/null, +++ b/samples/twitter-client/src/main/java/com/squareup/retrofit/sample/twitter/Client.java, +// Copyright 2012 Square, Inc., +package com.squareup.retrofit.sample.twitter;, +, +import com.google.gson.Gson;, +import org.apache.http.impl.client.DefaultHttpClient;, +import retrofit.http.GET;, +import retrofit.http.GsonConverter;, +import retrofit.http.RestAdapter;, +import retrofit.http.Server;, +, +import javax.inject.Named;, +import java.util.List;, +, +public class Client {, + private static final String API_URL = "https://api.twitter.com/1/";, +, + class Tweet {, + String text;, + }, +, + interface Twitter {, + @GET("statuses/user_timeline.json"), + List<Tweet> tweets(@Named("screen_name") String user);, + }, +, + public static void main(String... args) {, + // Create a very simple REST adapter which points the Twitter API endpoint., + RestAdapter restAdapter = new RestAdapter.Builder(), + .setServer(new Server(API_URL)),
[+++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, + * Change `setDebug` to `setLogLevel` on `RestAdapter` and `RestAdapter.Builder` and provide, + two levels of logging via `LogLevel`., + * Query parameters can now be added in a request interceptor., +, +, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, + request body., +, +, +++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, +
[+++ b/pom.xml, + <version>2.3.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.3.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.3.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.3.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.3.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.3.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/samples/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>converter-simplexml</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/samples/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>converter-simplexml</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/samples/src/main/java/com/example/retrofit/JsonAndXmlConverters.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is
[+++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, + @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, + Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, + @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, + Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, + @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, + Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, + @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, + Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, + @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, + Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, + Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, + @Override
[+++ b/pom.xml, + <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>, +++ b/pom.xml, + <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/http/Part.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/pom.xml, + <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/http/Part.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/retrofit/src/main/java/retrofit/http/PartMap.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/pom.xml, + <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/http/Part.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object,
[+++ b/README.md, +++ b/README.md, +++ b/pom.xml, + <android.version>4.1.1.4</android.version>, + <android.platform>16</android.platform>, + <version>2.5</version>, +++ b/README.md, +++ b/pom.xml, + <android.version>4.1.1.4</android.version>, + <android.platform>16</android.platform>, + <version>2.5</version>, +++ /dev/null, +++ b/README.md, +++ b/pom.xml, + <android.version>4.1.1.4</android.version>, + <android.platform>16</android.platform>, + <version>2.5</version>, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ b/pom.xml, + <android.version>4.1.1.4</android.version>, + <android.platform>16</android.platform>, + <version>2.5</version>, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + Response.fromError(404, ResponseBody.create(MediaType.parse("application/json"), "Hi")));, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + Response.fromError(404, ResponseBody.create(MediaType.parse("application/json"), "Hi")));, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java, +package retrofit.converter;, +, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStreamWriter;, +import java.lang.reflect.Type;, +import okio.Buffer;, +import org.simpleframework.xml.Serializer;, +import org.simpleframework.xml.core.Persister;, +, +/**, + * A {@link Converter} which uses SimpleXML for reading and writing entities., + *, + * @author Fabien Ric (fabien.ric@gmail.com), + */, +public class SimpleXMLConverter implements Converter {, + private static final boolean DEFAULT_STRICT = true;, + private static final String CHARSET = "UTF-8";, + private static final MediaType MEDIA_TYPE =, + MediaType.parse("application/xml; charset=" + CHARSET);, +, + private
[+++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, + @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, + public Observable<?> applyObservableBehavior(final NetworkBehavior behavior,, + final Observable<?> value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, + @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, + public Observable<?> applyObservableBehavior(final NetworkBehavior behavior,, + final Observable<?> value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/SingleHelper.java, + public static Object applySingleBehavior(final NetworkBehavior behavior, Object value) {, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, + @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, + public Observable<?> applyObservableBehavior(final NetworkBehavior behavior,, + final Observable<?> value) {,
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.atomic.AtomicBoolean;, + /**, + * Invokes {@code callable} once for the returned {@link Call} and once for each instance that is, + * obtained from {@linkplain Call#clone() cloning} the returned {@link Call}., + */, + public static <T> Call<T> defer(Callable<Call<T>> callable) {, + return new DeferredCall<>(callable);, + }, +, + return new FakeCall<>(Response.success(successValue), null);, + public static <T> Call<T> response(Response<T> response) {, + return new FakeCall<>(response, null);, + public static <T> Call<T> failure(IOException failure) {, + return new FakeCall<>(null, failure);, +, + static final class FakeCall<T> implements Call<T> {, +
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyCallable.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +package retrofit.http;, +, +import android.net.http.AndroidHttpClient;, +import android.os.Process;, +import com.google.gson.Gson;, +import java.util.concurrent.Executor;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ThreadFactory;, +import java.util.concurrent.atomic.AtomicInteger;, +import javax.inject.Provider;, +import org.apache.http.client.HttpClient;, +import org.apache.http.impl.client.DefaultHttpClient;, +import retrofit.android.MainThreadExecutor;, +, +import static android.os.Process.THREAD_PRIORITY_BACKGROUND;, +import static retrofit.http.RestAdapter.SynchronousExecutor;, +, +abstract class Platform {, + private static final Platform PLATFORM = findPlatform();, +, + static Platform get() {, + return PLATFORM;, + }, +, + private static Platform findPlatform() {, + try {, + Class.forName("android.os.Build");, + return new Android();, + } catch (ClassNotFoundException e) {, + return new Base();, + }, + }, +, + Converter defaultConverter() {, + return
[+++ b/retrofit-converters/simplexml/README.md, +Deprecated – Please switch to the JAXB Converter, +------------------------------------------------, +, +The Simple XML project is no longer maintained. We recommend switching to the, +[JAXB converter](https://github.com/square/retrofit/tree/master/retrofit-converters/jaxb)., +, +-----, +, +++ b/retrofit-converters/simplexml/README.md, +Deprecated – Please switch to the JAXB Converter, +------------------------------------------------, +, +The Simple XML project is no longer maintained. We recommend switching to the, +[JAXB converter](https://github.com/square/retrofit/tree/master/retrofit-converters/jaxb)., +, +-----, +, +++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlConverterFactory.java, + *, + * @deprecated we recommend switching to the JAXB converter., +@Deprecated]
[+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, + boolean gotQueryName;, + boolean gotQueryMap;, + throw parameterError(method, p, "A @Url parameter must not come after a @Query.");, + }, + if (gotQueryName) {, + throw parameterError(method, p, "A @Url parameter must not come after a @QueryName.");, + }, + if (gotQueryMap) {, + throw parameterError(method, p, "A @Url parameter must not come after a @QueryMap.");, + if (gotQueryName) {, + throw parameterError(method, p, "A @Path parameter must not come after a @QueryName.");, + }, + if (gotQueryMap) {, + throw parameterError(method, p, "A @Path parameter must not come after a @QueryMap.");, + }, + gotQueryName
[+++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, + } finally {, + value.close();]
[+++ b/http/pom.xml, + <classifier>no_aop</classifier>, +++ b/http/pom.xml, + <classifier>no_aop</classifier>, +++ b/pom.xml, + <classifier>no_aop</classifier>]
[+++ b/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import java.util.concurrent.Executor;, + private final Executor httpExecutor;, + httpExecutor = restAdapter.httpExecutor;, + @Override public void call(final Subscriber<? super Object> subscriber) {, + if (subscriber.isUnsubscribed()) return;, + httpExecutor.execute(new Runnable() {, + @Override public void run() {, + if (subscriber.isUnsubscribed()) return;, + });, + }, + });, +++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import java.util.concurrent.Executor;, + private final Executor httpExecutor;, + httpExecutor = restAdapter.httpExecutor;, + @Override public void call(final Subscriber<? super Object> subscriber) {, + if (subscriber.isUnsubscribed()) return;, + httpExecutor.execute(new Runnable() {, + @Override public void run() {, + if (subscriber.isUnsubscribed())
[+++ b/pom.xml, + <version>2.0.0-beta4</version>, + <tag>parent-2.0.0-beta4</tag>, +++ b/pom.xml, + <version>2.0.0-beta4</version>, + <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0-beta4</version>, +++ b/pom.xml, + <version>2.0.0-beta4</version>, + <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.0-beta4</version>, +++ b/pom.xml, + <version>2.0.0-beta4</version>, + <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta4</version>, +++ b/pom.xml, + <version>2.0.0-beta4</version>, + <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-beta4</version>, +++ b/pom.xml, + <version>2.0.0-beta4</version>, + <tag>parent-2.0.0-beta4</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta4</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-beta4</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-beta4</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, + super(message, url, response, null, null, false, null);, +++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, + super(message, url, response, null, null, false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, + @GET("/") void doStuff(Callback<Object> cb);, + @GET("/") Observable<Object> doStuff();, + @Override public void doStuff(Callback<Object> cb) {, + mockService.doStuff(new Callback<Object>() {, + @Override public void success(Object o, Response response) {, + final Object expected = new Object();, + @Override public void doStuff(Callback<Object> cb) {, + mockService.doStuff(new Callback<Object>() {, + @Override public void success(Object result, Response response) {, + final Object expected = new Object();, + @Override
[+++ b/pom.xml, + <appengine.version>1.9.6</appengine.version>, +++ b/pom.xml, + <appengine.version>1.9.6</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, + return parseResponse(fetchResponse, fetchRequest);, + static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, + // Response URL will be null if it is the same as the request URL., + URL responseUrl = response.getFinalUrl();, + String urlString = (responseUrl != null ? responseUrl : creatingRequest.getURL()).toString();, +, + return new Response(urlString, status, "", headers, body);, +++ b/pom.xml, + <appengine.version>1.9.6</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, + return parseResponse(fetchResponse, fetchRequest);, + static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, + // Response URL will be null if it is the same as the request URL., + URL
[+++ b/pom.xml, + <moshi.version>1.4.0</moshi.version>, +++ b/pom.xml, + <moshi.version>1.4.0</moshi.version>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, + if (serializeNulls) {, + adapter = adapter.serializeNulls();, + }, + if (serializeNulls) {, + adapter = adapter.serializeNulls();, + }, + return new MoshiRequestBodyConverter<>(adapter);, +++ b/pom.xml, + <moshi.version>1.4.0</moshi.version>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, + if (serializeNulls) {, + adapter = adapter.serializeNulls();, + }, + if (serializeNulls) {, + adapter = adapter.serializeNulls();, + }, + return new MoshiRequestBodyConverter<>(adapter);, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiRequestBodyConverter.java, + MoshiRequestBodyConverter(JsonAdapter<T> adapter) {]
[+++ b/.idea/vcs.xml, + <mapping directory="" vcs="Git" />, +++ b/.idea/vcs.xml, + <mapping directory="" vcs="Git" />, +++ b/modules/io/src/retrofit/io/Files.java, +, + /**, + * Create the indicated directory, if it doesn't already exist., + *, + * @throws IllegalStateException if there is an error creating the directory., + * @throws IllegalArgumentException if param represents a file instead, + * of a directory., + */, + public static void makeDirectory(File directory) {, + if (!directory.exists()) {, + if (!directory.mkdirs()) {, + throw new IllegalStateException("Error creating " + directory + ".");, + }, + } else {, + if (!directory.isDirectory()) {, + throw new
[+++ b/pom.xml, + <okhttp.version>3.10.0</okhttp.version>, +++ b/pom.xml, + <okhttp.version>3.10.0</okhttp.version>, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, + assertThat(request.url().toString()), + .isEqualTo("http://example.com/foo/bar/pong%3F/?kit=kat%3F");, + assertThat(request.url().toString()).isEqualTo("http://example.com/foo/bar/?hey=hey%21");]
[+++ b/pom.xml, + <gson.version>2.6.1</gson.version>, +++ b/pom.xml, + <gson.version>2.6.1</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, + return new GsonResponseBodyConverter<>(gson, adapter);, +++ b/pom.xml, + <gson.version>2.6.1</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, + return new GsonResponseBodyConverter<>(gson, adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.Gson;, +import com.google.gson.stream.JsonReader;, + private final Gson gson;, + GsonResponseBodyConverter(Gson gson, TypeAdapter<T> adapter) {, + this.gson = gson;, + JsonReader jsonReader = gson.newJsonReader(value.charStream());, + return adapter.read(jsonReader);, +++ b/pom.xml, + <gson.version>2.6.1</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, + return new GsonResponseBodyConverter<>(gson, adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.Gson;, +import com.google.gson.stream.JsonReader;, + private final Gson gson;, + GsonResponseBodyConverter(Gson gson, TypeAdapter<T> adapter) {, + this.gson = gson;, + JsonReader jsonReader = gson.newJsonReader(value.charStream());, + return adapter.read(jsonReader);, +++ b/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java, + .setLenient(),
[+++ b/android-native/pom.xml, +++ b/android-native/pom.xml, +++ b/android/pom.xml, +++ b/android-native/pom.xml, +++ b/android/pom.xml, +++ b/core/pom.xml, +++ b/android-native/pom.xml, +++ b/android/pom.xml, +++ b/core/pom.xml, +++ b/http/pom.xml, +++ b/android-native/pom.xml, +++ b/android/pom.xml, +++ b/core/pom.xml, +++ b/http/pom.xml, +++ b/io/pom.xml, +++ b/android-native/pom.xml, +++ b/android/pom.xml, +++ b/core/pom.xml, +++ b/http/pom.xml, +++ b/io/pom.xml, +++ b/pom.xml, + <parent>, + <groupId>org.sonatype.oss</groupId>, + <artifactId>oss-parent</artifactId>, + <version>7</version>, + </parent>, +, + <android-maven.version>3.3.0</android-maven.version>, +++ b/android-native/pom.xml, +++ b/android/pom.xml, +++ b/core/pom.xml, +++ b/http/pom.xml, +++ b/io/pom.xml, +++ b/pom.xml, + <parent>, + <groupId>org.sonatype.oss</groupId>, + <artifactId>oss-parent</artifactId>, + <version>7</version>, + </parent>, +, + <android-maven.version>3.3.0</android-maven.version>, +++ b/sample-android/pom.xml]
[+++ b/.gitignore, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/libraries, +++ b/.gitignore, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/libraries, +++ b/.idea/.name, +retrofit, +++ b/.gitignore, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/libraries, +++ b/.idea/.name, +retrofit, +++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="ProjectCodeStyleSettingsManager">, + <option name="PER_PROJECT_SETTINGS">, + <value>, + <XML>, + <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, + </XML>, + </value>, + </option>, + </component>, +</project>, +, +++ b/.gitignore, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/libraries, +++ b/.idea/.name, +retrofit, +++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="ProjectCodeStyleSettingsManager">, + <option name="PER_PROJECT_SETTINGS">, + <value>, + <XML>, + <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, + </XML>, + </value>, + </option>, + </component>, +</project>, +, +++ b/.idea/compiler.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project
[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import okhttp3.MultipartBody;, + static final class RawPart extends ParameterHandler<MultipartBody.Part> {, + static final RawPart INSTANCE = new RawPart();, +, + private RawPart() {, + }, +, + @Override void apply(RequestBuilder builder, MultipartBody.Part value) throws IOException {, + if (value != null) { // Skip null values., + builder.addPart(value);, + }, + }, + }, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import okhttp3.MultipartBody;, + static final class RawPart extends ParameterHandler<MultipartBody.Part> {, + static final RawPart INSTANCE = new RawPart();, +, + private RawPart() {, + }, +, + @Override void apply(RequestBuilder builder, MultipartBody.Part value) throws IOException {, + if (value !=
[+++ b/pom.xml, + <rxjava.version>0.19.0</rxjava.version>]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +import java.io.IOException;, +import okhttp3.MediaType;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Rule;, +import retrofit2.http.GET;, +import rx.observables.BlockingObservable;, +import rx.singles.BlockingSingle;, +import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;, + @Rule public final MockWebServer server = new MockWebServer();, +, + interface Service {, + @GET("/") Observable<String> observableBody();, + @GET("/") Observable<Response<String>> observableResponse();, + @GET("/") Observable<Result<String>> observableResult();, + @GET("/") Single<String> singleBody();, + @GET("/") Single<Response<String>> singleResponse();, + @GET("/") Single<Result<String>> singleResult();, + }, +, + private Service service;, + .baseUrl(server.url("/")), + .addCallAdapterFactory(RxJavaCallAdapterFactory.create()), + service = retrofit.create(Service.class);, + @Test public void bodySuccess200() {, + server.enqueue(new MockResponse().setBody("Hi"));, +, + BlockingObservable<String> o = service.observableBody().toBlocking();, + assertThat(o.first()).isEqualTo("Hi");,
[+++ b/android/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>retrofit-core</artifactId>, + <version>0.6.0-SNAPSHOT</version>, + </dependency>, +++ b/android/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>retrofit-core</artifactId>, + <version>0.6.0-SNAPSHOT</version>, + </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +// Copyright 2012 Square, Inc., +package retrofit.android;, +, +import android.os.Handler;, +import android.os.Looper;, +import android.os.SystemClock;, +import retrofit.core.MainThread;, +, +import java.util.concurrent.CountDownLatch;, +, +/** Executor that runs tasks on Android's main thread. */, +public class AndroidMainThread implements MainThread {, +, + private final Looper looper = Looper.getMainLooper();, + private final Handler handler = new Handler(looper);, +, + @Override public void execute(Runnable r) {, + handler.post(r);, + }, +, + @Override public void executeDelayed(Runnable r, long delay)
[+++ b/pom.xml, + <version>2.0.1</version>, + <tag>parent-2.0.1</tag>, +++ b/pom.xml, + <version>2.0.1</version>, + <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.1</version>, +++ b/pom.xml, + <version>2.0.1</version>, + <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.1</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.1</version>, +++ b/pom.xml, + <version>2.0.1</version>, + <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.1</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.1</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.1</version>, +++ b/pom.xml, + <version>2.0.1</version>, + <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.1</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.1</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.1</version>, +++ b/pom.xml, + <version>2.0.1</version>, + <tag>parent-2.0.1</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.1</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.1</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.1</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.1</version>, +++ b/pom.xml, +
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, + return new BodyCallAdapter<>(innerType);, + return new ResponseCallAdapter<>(responseType);, + private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, + @Override public ListenableFuture<R> adapt(final Call<R> call) {, + private static final class ResponseCallAdapter<R>, + implements CallAdapter<R, ListenableFuture<Response<R>>> {, + @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, + return new BodyCallAdapter<>(innerType);, + return new ResponseCallAdapter<>(responseType);, + private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, + @Override public ListenableFuture<R> adapt(final Call<R> call) {, + private
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * CompletableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * CompletableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * Observable&lt;User&gt; getUser(), +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * CompletableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * Observable&lt;User&gt; getUser(), +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, + * public &lt;R&gt; Async&lt;R&gt; adapt(final Call&lt;R&gt; call) {, + * return Async.create(new Callable&lt;Response&lt;R&gt;&gt;() {, + * public Response&lt;R&gt; call() throws Exception {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * ListenableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * CompletableFuture&lt;User&gt; getUser(), +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * Observable&lt;User&gt; getUser(), +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java,
[+++ b/pom.xml, + <okhttp.version>3.8.0</okhttp.version>, + <moshi.version>1.5.0</moshi.version>]
[+++ b/pom.xml, + <jackson.version>2.4.3</jackson.version>]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + return new Request.Builder(), + .url("http://localhost"), + .build();, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + return new Request.Builder(), + .url("http://localhost"), + .build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + return new Request.Builder(), + .url("http://localhost"), + .build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +++ b/retrofit/src/main/java/retrofit2/Invocation.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to
[+++ b/pom.xml, + <consoleOutput>true</consoleOutput>]
[+++ b/pom.xml, + <version>1.7.0</version>, + <tag>parent-1.7.0</tag>, +++ b/pom.xml, + <version>1.7.0</version>, + <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.0</version>, +++ b/pom.xml, + <version>1.7.0</version>, + <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.0</version>, +++ b/pom.xml, + <version>1.7.0</version>, + <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.7.0</version>, +++ b/pom.xml, + <version>1.7.0</version>, + <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.7.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.7.0</version>, +++ b/pom.xml, + <version>1.7.0</version>, + <tag>parent-1.7.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.7.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.7.0</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.7.0</version>, +++ b/pom.xml, +
[+++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, + request body., +, +, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-25)*, +----------------------------, +, + * Fix: Ensure `@Headers`-defined headers are correctly added to requests., + * Fix: Supply reasonable connection and read timeouts for default clients., + * Fix: Allow passing `null` for a `@Part`-annotated argument to remove it from the multipart, + request
[+++ b/checkstyle.xml, +++ b/checkstyle.xml, +++ b/pom.xml, + <module>retrofit-adapters</module>, + <!--<module>retrofit-mock</module>-->, + <java.version>1.7</java.version>, + <okhttp.version>2.4.0</okhttp.version>, + <rxjava.version>1.0.10</rxjava.version>, + <version>2.15</version>, +++ b/checkstyle.xml, +++ b/pom.xml, + <module>retrofit-adapters</module>, + <!--<module>retrofit-mock</module>-->, + <java.version>1.7</java.version>, + <okhttp.version>2.4.0</okhttp.version>, + <rxjava.version>1.0.10</rxjava.version>, + <version>2.15</version>, +++ b/retrofit-adapters/README.md, +Retrofit Adapters, +=================, +, +TODO, +++ b/checkstyle.xml, +++ b/pom.xml, + <module>retrofit-adapters</module>, + <!--<module>retrofit-mock</module>-->, + <java.version>1.7</java.version>, + <okhttp.version>2.4.0</okhttp.version>, + <rxjava.version>1.0.10</rxjava.version>, + <version>2.15</version>, +++ b/retrofit-adapters/README.md, +Retrofit Adapters, +=================, +, +TODO, +++ b/retrofit-adapters/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>parent</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>retrofit-adapters</artifactId>, + <name>Adapters</name>, + <packaging>pom</packaging>, +, +
[+++ b/http/pom.xml, + <optional>true</optional>]
[+++ b/pom.xml, + <okhttp.version>3.9.0</okhttp.version>, + <gson.version>2.8.0</gson.version>]
[+++ b/pom.xml, + <rxjava.version>1.0.0</rxjava.version>, +++ b/pom.xml, + <rxjava.version>1.0.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, + String bodyCharset = MimeUtil.parseCharset(body.mimeType());, + String bodyCharset = MimeUtil.parseCharset(bodyMime);, +++ b/pom.xml, + <rxjava.version>1.0.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, + String bodyCharset = MimeUtil.parseCharset(body.mimeType());, + String bodyCharset = MimeUtil.parseCharset(bodyMime);, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, + /** Loads {@link #responseObjectType}. Returns {@code true} if method is synchronous. */, +++ b/pom.xml, + <rxjava.version>1.0.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, + String bodyCharset = MimeUtil.parseCharset(body.mimeType());, + String bodyCharset = MimeUtil.parseCharset(bodyMime);, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, + /** Loads {@link #responseObjectType}. Returns {@code true} if method is synchronous. */, +++ b/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java]
[+++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlResponseBodyConverter.java, + T read = serializer.read(cls, value.charStream(), strict);, +++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlResponseBodyConverter.java, + T read = serializer.read(cls, value.charStream(), strict);, +++ b/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java, +import java.nio.charset.Charset;, +import okio.Buffer;, + @Test public void honorsCharacterEncoding() throws IOException {, + Buffer buffer = new Buffer().writeString(, + "<my-object><message>你好，世界</message><count>10</count></my-object>",, + Charset.forName("GBK"));, + server.enqueue(, + new MockResponse().setBody(buffer).addHeader("Content-Type", "text/xml;charset=GBK"));, +, + Call<MyObject> call = service.get();, + Response<MyObject> response = call.execute();, + MyObject body = response.body();, + assertThat(body.getMessage()).isEqualTo("你好，世界");, + }, +, +++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlResponseBodyConverter.java, + T read = serializer.read(cls, value.charStream(), strict);, +++ b/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java, +import java.nio.charset.Charset;, +import okio.Buffer;, + @Test public void honorsCharacterEncoding() throws IOException {, + Buffer buffer = new Buffer().writeString(, +
[+++ b/.gitignore, +.classpath, +.project, +++ b/.gitignore, +.classpath, +.project, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +++ b/.gitignore, +.classpath, +.project, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +++ b/modules/http/src/retrofit/http/DELETE.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Make a DELETE request to a REST path relative to base URL., + *, + * @author Rob Dickerson, + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public @interface DELETE {, + String value();, +}, +++ b/.gitignore, +.classpath, +.project, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +++ b/modules/http/src/retrofit/http/DELETE.java, +package
[+++ b/checkstyle.xml, + <!--module name="AvoidNestedBlocks"/-->
[+++ b/README.md, +each interface you create, calling `RestAdapter.create(MyInterface.class)` will create an, +++ b/README.md, +each interface you create, calling `RestAdapter.create(MyInterface.class)` will create an, +++ b/pom.xml]
[+++ b/pom.xml, + <moshi.version>1.2.0</moshi.version>, +++ b/pom.xml, + <moshi.version>1.2.0</moshi.version>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +import com.squareup.moshi.JsonQualifier;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import static java.util.Collections.unmodifiableSet;, +, + * <p>, + * Any {@link JsonQualifier @JsonQualifier}-annotated annotations on the parameter will be used, + * when looking up a request body converter and those on the method will be used when looking up a, + * response body converter., + JsonAdapter<?> adapter = moshi.adapter(type, jsonAnnotations(annotations));, + JsonAdapter<?> adapter = moshi.adapter(type, jsonAnnotations(parameterAnnotations));, +, + private static Set<? extends Annotation> jsonAnnotations(Annotation[] annotations) {, + Set<Annotation> result = null;, + for (Annotation annotation : annotations) {, +
[+++ b/pom.xml, + <gson.version>2.8.2</gson.version>]
[+++ b/pom.xml, +, + <!-- Adapter Dependencies -->, + <gson.version>2.3.1</gson.version>, + <moshi.version>0.9.0</moshi.version>, + <junit.version>4.12</junit.version>, + <dependency>, + <groupId>com.squareup.moshi</groupId>, + <artifactId>moshi</artifactId>, + <version>${moshi.version}</version>, + </dependency>, +++ b/pom.xml, +, + <!-- Adapter Dependencies -->, + <gson.version>2.3.1</gson.version>, + <moshi.version>0.9.0</moshi.version>, + <junit.version>4.12</junit.version>, + <dependency>, + <groupId>com.squareup.moshi</groupId>, + <artifactId>moshi</artifactId>, + <version>${moshi.version}</version>, + </dependency>, +++ b/retrofit-converters/moshi/README.md, +Moshi Converter, +===============, +, +A `Converter` which uses [Moshi][1] for serialization to and from JSON., +, +A default `Moshi` instance will be created or one can be configured and passed to the, +`MoshiConverter` construction to further control the serialization., +, +, + [1]: https://github.com/square/moshi, +++ b/pom.xml, +, + <!--
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, + } catch (OnCompletedFailedException, + | OnErrorFailedException, + | OnErrorNotImplementedException e) {, + RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, + } catch (OnCompletedFailedException, + | OnErrorFailedException, + | OnErrorNotImplementedException e) {, + RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, + } catch (OnCompletedFailedException, + | OnErrorFailedException, + | OnErrorNotImplementedException e) {, + RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, + return;, + } catch (OnCompletedFailedException, + | OnErrorFailedException, + | OnErrorNotImplementedException e) {, + RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, + } catch (OnCompletedFailedException, + | OnErrorFailedException, + | OnErrorNotImplementedException e) {, + RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, + } catch
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/src/test/java/retrofit/mock/MockRetrofitTest.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY
[+++ b/android-native/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>0.6.0-SNAPSHOT</version>,
[+++ b/.idea/inspectionProfiles/Project_Default.xml, + <option name="IGNORE_POINT_TO_ITSELF" value="false" />, +++ b/.idea/inspectionProfiles/Project_Default.xml, + <option name="IGNORE_POINT_TO_ITSELF" value="false" />, +++ b/.idea/misc.xml, + <component name="EntryPointsManager">, + <entry_points version="2.0" />, + </component>, +++ b/.idea/inspectionProfiles/Project_Default.xml, + <option name="IGNORE_POINT_TO_ITSELF" value="false" />, +++ b/.idea/misc.xml, + <component name="EntryPointsManager">, + <entry_points version="2.0" />, + </component>, +++ b/modules/io/src/retrofit/io/ByteSinks.java, + final FileOutputStream out = new FileOutputStream(file);, + out.getFD().sync();, +++ b/.idea/inspectionProfiles/Project_Default.xml, + <option name="IGNORE_POINT_TO_ITSELF" value="false" />, +++ b/.idea/misc.xml, + <component name="EntryPointsManager">, + <entry_points version="2.0" />, + </component>, +++ b/modules/io/src/retrofit/io/ByteSinks.java, + final FileOutputStream out = new FileOutputStream(file);, + out.getFD().sync();, +++ b/modules/io/src/retrofit/io/Files.java, + out.getFD().sync();]
[+++ b/.idea/libraries/JARs.xml, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/libraries/JARs.xml, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, + <component name="ProjectResources">, + <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>, + </component>, + <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/libraries/JARs.xml, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, + <component name="ProjectResources">, + <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>, + </component>, + <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/build.xml, + <target name="repackage-gson" depends="prepare">, + <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask">, + <classpath>, + <fileset dir="lib" includes="jarjar*.jar"/>, + </classpath>, + </taskdef>, + <jarjar jarfile="${build.dir}/retrofit-gson-1.6.jar">, + <zipfileset src="lib/gson-1.6.jar"/>, + <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>, + </jarjar>, + <jarjar jarfile="${build.dir}/retrofit-gson-1.6-sources.jar">, + <zipfileset src="lib/gson-1.6-sources.jar"/>, + <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>, + </jarjar>, +
[+++ b/retrofit/src/main/java/retrofit2/Response.java, + * Create a synthetic successful response with an HTTP status code of {@code code} and, + * {@code body} as the deserialized body., + */, + public static <T> Response<T> success(int code, @Nullable T body) {, + if (code < 200 || code >= 300) {, + throw new IllegalArgumentException("code < 200 or >= 300: " + code);, + }, + return success(body, new okhttp3.Response.Builder() //, + .code(code), + .message("Response.success()"), + .protocol(Protocol.HTTP_1_1), + .request(new Request.Builder().url("http://localhost/").build()), + .build());, + }, +, + /**, +++ b/retrofit/src/main/java/retrofit2/Response.java, + * Create a synthetic successful response with an HTTP status code
[+++ b/retrofit-adapters/guava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit2</groupId>, + <artifactId>retrofit-adapters</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>adapter-guava</artifactId>, + <name>Adapter: Guava</name>, +, + <dependencies>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>mockwebserver</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/retrofit-adapters/guava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +
[+++ b/pom.xml, + <rxjava.version>0.20.5</rxjava.version>, + <jackson.version>2.4.3</jackson.version>, + <wire.version>1.5.2</wire.version>, + <assertj.version>1.7.0</assertj.version>, + <guava.version>18.0</guava.version>, +++ b/pom.xml, + <rxjava.version>0.20.5</rxjava.version>, + <jackson.version>2.4.3</jackson.version>, + <wire.version>1.5.2</wire.version>, + <assertj.version>1.7.0</assertj.version>, + <guava.version>18.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RetrofitError.java, + *, + * @throws RuntimeException if unable to convert the body to the {@link #getSuccessType() success, + * type}., + *, + * @throws RuntimeException if unable to convert the body to the specified {@code type.}]
[+++ b/pom.xml, + <rxjava.version>1.0.14</rxjava.version>]
[+++ b/.idea/vcs.xml, + <mapping directory="" vcs="" />, +++ b/.idea/vcs.xml, + <mapping directory="" vcs="" />, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import org.apache.http.entity.BufferedHttpEntity;, + /** Construct BufferedHttpEntity so that we can read it multiple times. */, + HttpEntity bufferedEntity = new BufferedHttpEntity(entity);, + String body = new String(HttpClients.entityToBytes(bufferedEntity),, + "UTF-8");, + callback.clientError(parse(bufferedEntity));, +++ b/.idea/vcs.xml, + <mapping directory="" vcs="" />, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import org.apache.http.entity.BufferedHttpEntity;, + /** Construct BufferedHttpEntity so that we can read it multiple times. */, + HttpEntity bufferedEntity = new BufferedHttpEntity(entity);, + String body = new String(HttpClients.entityToBytes(bufferedEntity),, + "UTF-8");, + callback.clientError(parse(bufferedEntity));, +++ b/modules/http/src/retrofit/http/RestAdapter.java, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.OutputStream;, +import java.io.UnsupportedEncodingException;, +import java.lang.annotation.Annotation;,
[+++ b/retrofit/pom.xml, + <groupId>org.jetbrains.kotlin</groupId>, + <artifactId>kotlin-maven-plugin</artifactId>, + <executions>, + <execution>, + <id>compile</id>, + <phase>process-sources</phase>, + <goals>, + <goal>compile</goal>, + </goals>, + </execution>, + <execution>, + <id>test-compile</id>, + <phase>test-compile</phase>, + <goals>, + <goal>test-compile</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, + <plugin>, +++ b/retrofit/pom.xml, + <groupId>org.jetbrains.kotlin</groupId>, + <artifactId>kotlin-maven-plugin</artifactId>, + <executions>, + <execution>, + <id>compile</id>, + <phase>process-sources</phase>, + <goals>, + <goal>compile</goal>, + </goals>, + </execution>, + <execution>, + <id>test-compile</id>, + <phase>test-compile</phase>, + <goals>, + <goal>test-compile</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, + <plugin>, +++ b/retrofit/src/main/java/retrofit2/KotlinExtensions.kt, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed
[+++ b/README.md, +++ b/README.md, +++ b/pom.xml, +++ b/README.md, +++ b/pom.xml, +++ /dev/null, +++ b/README.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/pom.xml, + <android-maven.version>3.5.1</android-maven.version>, + <gson.version>2.2.2</gson.version>, + <httpmime.version>4.2.3</httpmime.version>, + <fest.version>2.0M10</fest.version>, + <guava.version>14.0</guava.version>, + <version>${httpmime.version}</version>, +++ b/pom.xml, + <android-maven.version>3.5.1</android-maven.version>, + <gson.version>2.2.2</gson.version>, + <httpmime.version>4.2.3</httpmime.version>, + <fest.version>2.0M10</fest.version>, + <guava.version>14.0</guava.version>, + <version>${httpmime.version}</version>, +++ b/retrofit/pom.xml, + <optional>true</optional>, +++ b/pom.xml, + <android-maven.version>3.5.1</android-maven.version>, + <gson.version>2.2.2</gson.version>, + <httpmime.version>4.2.3</httpmime.version>, + <fest.version>2.0M10</fest.version>, + <guava.version>14.0</guava.version>, + <version>${httpmime.version}</version>, +++ b/retrofit/pom.xml, + <optional>true</optional>, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import android.os.Build;, +import retrofit.http.client.UrlConnectionClient;, +import static java.lang.Thread.MIN_PRIORITY;, + final Client client = new UrlConnectionClient();, + Thread.currentThread().setPriority(MIN_PRIORITY);, + final Client client;, + if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {, + client = new AndroidApacheClient();, + } else {, + client = new UrlConnectionClient();, + }, +++ b/pom.xml, + <android-maven.version>3.5.1</android-maven.version>, +
[+++ b/ivy.xml, + <dependency org="org.apache.httpcomponents" name="httpmime" rev="4.1-alpha1"/>, + <dependency org="org.apache.httpcomponents" name="httpclient" rev="4.1-alpha1"/>, +++ b/ivy.xml, + <dependency org="org.apache.httpcomponents" name="httpmime" rev="4.1-alpha1"/>, + <dependency org="org.apache.httpcomponents" name="httpclient" rev="4.1-alpha1"/>, +++ b/modules/core/src-tests/retrofit/core/internal/ObjectsTest.java, +// Copyright 2010 Square, Inc., +package retrofit.core.internal;, +, +import junit.framework.TestCase;, +, +/** @author Eric Burke (eric@squareup.com) */, +public class ObjectsTest extends TestCase {, + public void testNonNull() {, + Objects.nonNull(10, "whatever");, + try {, + Objects.nonNull(null, "fail");, + fail("Expected NullPointerException");, + } catch (NullPointerException expected) {, + assertEquals("fail", expected.getMessage());, + }, + }, +}, +++ b/ivy.xml, + <dependency org="org.apache.httpcomponents" name="httpmime" rev="4.1-alpha1"/>, + <dependency org="org.apache.httpcomponents" name="httpclient" rev="4.1-alpha1"/>, +++ b/modules/core/src-tests/retrofit/core/internal/ObjectsTest.java, +// Copyright 2010 Square, Inc.,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/pom.xml, + <artifactId>samples</artifactId>, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit-mock</artifactId>, + <version>${project.version}</version>, + </dependency>, + </dependencies>, +, + <build>, + <plugins>, + <!-- Do not deploy this as an artifact to Maven central. -->, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-deploy-plugin</artifactId>, + <configuration>, + <skip>true</skip>, + </configuration>, + </plugin>, + </plugins>, + </build>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/pom.xml, + <jackson.version>2.9.8</jackson.version>]
[+++ b/retrofit-converters/pom.xml, + <module>scalars</module>, +++ b/retrofit-converters/pom.xml, + <module>scalars</module>, +++ b/retrofit-converters/scalars/README.md, +Java Scalars Converter, +======================, +, +A `Converter` which supports converting strings and both primitives and their boxed types to, +`text/plain` bodies., +++ b/retrofit-converters/pom.xml, + <module>scalars</module>, +++ b/retrofit-converters/scalars/README.md, +Java Scalars Converter, +======================, +, +A `Converter` which supports converting strings and both primitives and their boxed types to, +`text/plain` bodies., +++ b/retrofit-converters/scalars/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit-converters</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>converter-scalars</artifactId>, + <name>Converter: Java Scalars</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, +
[+++ b/pom.xml, + <version>1.2.2</version>, +++ b/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.2</version>, +++ b/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.2</version>, +++ b/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.2</version>, +++ b/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.2.2</version>, +++ b/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.2.2</version>, +++ b/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.2</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.1.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.1.0', +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.1.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.1.0', +++ b/checkstyle.xml, + "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import javax.annotation.Nullable;, + public T returningResponse(@Nullable Object response) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import javax.annotation.Nullable;, + public T returningResponse(@Nullable Object response) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + public static <T> Call<T> response(@Nullable T successValue) {]
[+++ b/pom.xml, + <assertj.version>1.7.0</assertj.version>]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * <pre><code>, + * </code></pre>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, + checkPercentageValidity(variancePercent, "Variance percentage must be between 0 and 100.");, + checkPercentageValidity(failurePercent, "Failure percentage must be between 0 and 100.");, + checkPercentageValidity(errorPercent, "Error percentage must be between 0 and 100.");, +, + private static void checkPercentageValidity(int percentage, String message) {, + if (percentage < 0 || percentage > 100) {, + throw new IllegalArgumentException(message);, + }, + }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, + checkPercentageValidity(variancePercent, "Variance percentage must be between 0 and 100.");, + checkPercentageValidity(failurePercent, "Failure percentage must be between 0 and 100.");, + checkPercentageValidity(errorPercent, "Error percentage must be between 0 and 100.");, +, + private static void checkPercentageValidity(int percentage,
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, + @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, + @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +import retrofit.Retrofit;, + private final Retrofit retrofit;, + BehaviorCall(Retrofit retrofit, NetworkBehavior behavior, ExecutorService backgroundExecutor,, + Call<T> delegate) {, + this.retrofit = retrofit;, + this.behavior = behavior;, + this.backgroundExecutor = backgroundExecutor;, + this.delegate = delegate;, +, + Executor callbackExecutor = retrofit.callbackExecutor();, + return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, delegate.clone());, + callback.onResponse(response, retrofit);, + @Override public void onResponse(final Response<T> response, Retrofit retrofit) {, + @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, + @Override public void
[+++ b/android/pom.xml, + <dependency>, + <groupId>org.easytesting</groupId>, + <artifactId>fest-assert</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/android/pom.xml, + <dependency>, + <groupId>org.easytesting</groupId>, + <artifactId>fest-assert</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/android/src/test/java/retrofit/android/ShakeDetectorTest.java, +import org.junit.Test;, +, +import static org.fest.assertions.Assertions.assertThat;, + @Test public void testInitialShaking() {, + assertThat(q.isShaking()).isFalse();, + @Test public void testShakingSampleCount3() {, + assertThat(q.isShaking()).isFalse();, + assertThat(q.isShaking()).isFalse();, + assertThat(q.isShaking()).isTrue();, + assertThat(q.isShaking()).isTrue();, + assertThat(q.isShaking()).isFalse();, + assertThat(samples.size()).isEqualTo(expected.length).as(sb.toString());, + assertThat(samples.get(i).accelerating).isEqualTo(expected[i]), + .as("sample[" + i + "] accelerating");, + @Test public void testClear() {, + assertThat(q.isShaking()).isTrue();, + assertThat(q.isShaking()).isFalse();, +++ b/android/pom.xml, + <dependency>, + <groupId>org.easytesting</groupId>, + <artifactId>fest-assert</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/android/src/test/java/retrofit/android/ShakeDetectorTest.java, +import org.junit.Test;, +, +import static org.fest.assertions.Assertions.assertThat;, + @Test
[+++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import com.squareup.moshi.JsonDataException;, +import com.squareup.moshi.JsonReader;, + JsonReader reader = JsonReader.of(source);, + T result = adapter.fromJson(reader);, + if (reader.peek() != JsonReader.Token.END_DOCUMENT) {, + throw new JsonDataException("JSON document was not fully consumed.");, + }, + return result;, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import com.squareup.moshi.JsonDataException;, +import com.squareup.moshi.JsonReader;, + JsonReader reader = JsonReader.of(source);, + T result = adapter.fromJson(reader);, + if (reader.peek() != JsonReader.Token.END_DOCUMENT) {, + throw new JsonDataException("JSON document was not fully consumed.");, + }, + return result;, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +import retrofit2.http.GET;, + static final class Value {, + final String theName;, +, + Value(String theName) {, + this.theName = theName;, + }, + },
[+++ b/retrofit-adapters/scala/pom.xml, + <Automatic-Module-Name>retrofit2.adapter.scala</Automatic-Module-Name>, +++ b/retrofit-adapters/scala/pom.xml, + <Automatic-Module-Name>retrofit2.adapter.scala</Automatic-Module-Name>, +++ b/retrofit-adapters/scala/src/main/java/retrofit2/adapter/scala/BodyCallAdapter.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
[+++ b/pom.xml, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <version>3.0.2</version>, + </dependency>, +++ b/pom.xml, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <version>3.0.2</version>, + </dependency>, +++ b/retrofit-adapters/guava/pom.xml, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/pom.xml, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <version>3.0.2</version>, + </dependency>, +++ b/retrofit-adapters/guava/pom.xml, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +package retrofit2.adapter.guava;, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/pom.xml, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <version>3.0.2</version>, + </dependency>, +++ b/retrofit-adapters/guava/pom.xml, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +package retrofit2.adapter.guava;, +, +import
[+++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.JsonIOException;, +import com.google.gson.stream.JsonToken;, + T result = adapter.read(jsonReader);, + if (jsonReader.peek() != JsonToken.END_DOCUMENT) {, + throw new JsonIOException("JSON document was not fully consumed.");, + }, + return result;, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.JsonIOException;, +import com.google.gson.stream.JsonToken;, + T result = adapter.read(jsonReader);, + if (jsonReader.peek() != JsonToken.END_DOCUMENT) {, + throw new JsonIOException("JSON document was not fully consumed.");, + }, + return result;, +++ b/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java, +import com.google.gson.JsonIOException;, +import retrofit2.http.GET;, +import static org.junit.Assert.fail;, + static final class Value {, + static final TypeAdapter<Value> BROKEN_ADAPTER = new TypeAdapter<Value>() {, + @Override public void write(JsonWriter out, Value value) {, + throw new AssertionError();,
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, + private volatile boolean unsubscribed;, + unsubscribed = true;, + return unsubscribed;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, + private volatile boolean unsubscribed;, + unsubscribed = true;, + return unsubscribed;, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CancelDisposeTest.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed
[+++ b/pom.xml, + <okhttp.version>3.1.2</okhttp.version>]
[+++ b/README.md, +[this file](https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro)., +++ b/README.md, +[this file](https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro)., +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final ServiceMethod<T, ?> serviceMethod;, + OkHttpCall(ServiceMethod<T, ?> serviceMethod, @Nullable Object[] args) {, + this.serviceMethod = serviceMethod;, + return new OkHttpCall<>(serviceMethod, args);, + okhttp3.Call call = serviceMethod.toCall(args);, + T body = serviceMethod.toResponse(catchingBody);, +++ b/README.md, +[this file](https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro)., +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final ServiceMethod<T, ?> serviceMethod;, + OkHttpCall(ServiceMethod<T, ?> serviceMethod, @Nullable Object[] args) {, + this.serviceMethod = serviceMethod;, + return new OkHttpCall<>(serviceMethod, args);, + okhttp3.Call call = serviceMethod.toCall(args);, + T body = serviceMethod.toResponse(catchingBody);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import java.io.IOException;, + /** Builds an HTTP request from method arguments. */, + okhttp3.Call toCall(@Nullable
[+++ b/pom.xml, + <version>2.5.0</version>, + <tag>parent-2.5.0</tag>, +++ b/pom.xml, + <version>2.5.0</version>, + <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.0</version>, +++ b/pom.xml, + <version>2.5.0</version>, + <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.0</version>, +++ b/pom.xml, + <version>2.5.0</version>, + <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.5.0</version>, +++ b/pom.xml, + <version>2.5.0</version>, + <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.5.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.5.0</version>, +++ b/pom.xml, + <version>2.5.0</version>, + <tag>parent-2.5.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.5.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.5.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, + <version>2.5.0</version>, +++ b/pom.xml, +
[+++ b/checkstyle.xml, + <module name="UnusedImports">
[+++ b/pom.xml, + <okhttp.version>1.2.1</okhttp.version>, +++ b/pom.xml, + <okhttp.version>1.2.1</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java, + HttpConnectionParams.setConnectionTimeout(params, Defaults.CONNECT_TIMEOUT_MILLIS);, + HttpConnectionParams.setSoTimeout(params, Defaults.READ_TIMEOUT_MILLIS);, +++ b/pom.xml, + <okhttp.version>1.2.1</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java, + HttpConnectionParams.setConnectionTimeout(params, Defaults.CONNECT_TIMEOUT_MILLIS);, + HttpConnectionParams.setSoTimeout(params, Defaults.READ_TIMEOUT_MILLIS);, +++ b/retrofit/src/main/java/retrofit/client/Defaults.java, + static final int CONNECT_TIMEOUT_MILLIS = 15 * 1000; // 15s, + static final int READ_TIMEOUT_MILLIS = 20 * 1000; // 20s, +++ b/pom.xml, + <okhttp.version>1.2.1</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java, + HttpConnectionParams.setConnectionTimeout(params, Defaults.CONNECT_TIMEOUT_MILLIS);, + HttpConnectionParams.setSoTimeout(params, Defaults.READ_TIMEOUT_MILLIS);, +++ b/retrofit/src/main/java/retrofit/client/Defaults.java, + static final int CONNECT_TIMEOUT_MILLIS = 15 * 1000; // 15s, + static final int READ_TIMEOUT_MILLIS = 20 * 1000; // 20s, +++ b/retrofit/src/main/java/retrofit/client/OkClient.java, +import java.util.concurrent.TimeUnit;, + this(generateDefaultOkHttp());, + return client.open(new URL(request.getUrl()));, +
[+++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, +++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, +++ b/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro, +, +# With R8 full mode, it sees no subtypes of Retrofit interfaces since they are created with a Proxy, +# and replaces all potential values with null. Explicitly keeping the interfaces prevents this., +-if interface * { @retrofit2.http.* <methods>; }, +-keep,allowobfuscation interface <1>]
[+++ b/retrofit-converters/protobuf/pom.xml, + <extensions>, + <extension>, + <groupId>kr.motd.maven</groupId>, + <artifactId>os-maven-plugin</artifactId>, + <version>1.6.2</version>, + </extension>, + </extensions>, + <groupId>org.xolstice.maven.plugins</groupId>, + <artifactId>protobuf-maven-plugin</artifactId>, + <version>0.6.1</version>, + <executions>, + <execution>, + <phase>generate-test-sources</phase>, + <goals>, + <goal>test-compile</goal>, + </goals>, + </execution>, + </executions>, + <configuration>, + <protoTestSourceRoot>src/test/protos</protoTestSourceRoot>, + <protocArtifact>com.google.protobuf:protoc:${protobuf.version}:exe:${os.detected.classifier}</protocArtifact>, + </configuration>, + </plugin>, + <plugin>, +++ b/retrofit-converters/protobuf/pom.xml, + <extensions>, + <extension>, + <groupId>kr.motd.maven</groupId>, + <artifactId>os-maven-plugin</artifactId>, + <version>1.6.2</version>, + </extension>, + </extensions>, + <groupId>org.xolstice.maven.plugins</groupId>, + <artifactId>protobuf-maven-plugin</artifactId>, + <version>0.6.1</version>, + <executions>, + <execution>, + <phase>generate-test-sources</phase>, + <goals>, + <goal>test-compile</goal>, + </goals>, + </execution>, + </executions>, + <configuration>, + <protoTestSourceRoot>src/test/protos</protoTestSourceRoot>, + <protocArtifact>com.google.protobuf:protoc:${protobuf.version}:exe:${os.detected.classifier}</protocArtifact>, + </configuration>, + </plugin>, +
[+++ b/pom.xml, + <wire.version>1.5.2</wire.version>]
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, + static class StringConverterFactory extends Converter.Factory {, + @Override, + public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, + return new Converter<ResponseBody, String>() {, + @Override public String convert(ResponseBody value) throws IOException {, + return value.string();, + }, + };, + @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, + return new Converter<String, RequestBody>() {, + @Override public RequestBody convert(String value) throws IOException {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, + static class StringConverterFactory extends Converter.Factory {, + @Override, + public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, + return new Converter<ResponseBody, String>() {, + @Override public String convert(ResponseBody value)
[+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + okhttp3.Call call = serviceMethod.toCall(args);, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + okhttp3.Call call = serviceMethod.toCall(args);, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + return serviceMethod.adapt(okHttpCall);, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + okhttp3.Call call = serviceMethod.toCall(args);, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + return serviceMethod.adapt(okHttpCall);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, + private final okhttp3.Call.Factory callFactory;, + private final CallAdapter<R, T> callAdapter;, + okhttp3.Call toCall(@Nullable Object... args) throws IOException {, + return callFactory.newCall(requestBuilder.build());, + }, +, + T adapt(Call<R> call) {, + return callAdapter.adapt(call);, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + okhttp3.Call call = serviceMethod.toCall(args);, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + return serviceMethod.adapt(okHttpCall);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, + private final okhttp3.Call.Factory callFactory;, + private final CallAdapter<R, T> callAdapter;, + okhttp3.Call toCall(@Nullable Object... args) throws IOException {,
[+++ b/pom.xml, + <gson.version>2.2.3-SNAPSHOT</gson.version>]
[+++ b/.idea/modules.xml, + <module fileurl="file://$PROJECT_DIR$/modules/android/android.iml" filepath="$PROJECT_DIR$/modules/android/android.iml" />, + <module fileurl="file://$PROJECT_DIR$/modules/core/core.iml" filepath="$PROJECT_DIR$/modules/core/core.iml" />, + <module fileurl="file://$PROJECT_DIR$/modules/http/http.iml" filepath="$PROJECT_DIR$/modules/http/http.iml" />, + <module fileurl="file://$PROJECT_DIR$/modules/io/io.iml" filepath="$PROJECT_DIR$/modules/io/io.iml" />, +++ b/.idea/modules.xml, + <module fileurl="file://$PROJECT_DIR$/modules/android/android.iml" filepath="$PROJECT_DIR$/modules/android/android.iml" />, + <module fileurl="file://$PROJECT_DIR$/modules/core/core.iml" filepath="$PROJECT_DIR$/modules/core/core.iml" />, + <module fileurl="file://$PROJECT_DIR$/modules/http/http.iml" filepath="$PROJECT_DIR$/modules/http/http.iml" />, + <module fileurl="file://$PROJECT_DIR$/modules/io/io.iml" filepath="$PROJECT_DIR$/modules/io/io.iml" />, +++ b/build.xml, + <!-- Build these in this particular order. -->, + <compile.module module="core"/>, +, + <compile.module module="io">, + <compile.main.classpath>, + <pathelement location="${build.dir}/core/main"/>, + </compile.main.classpath>, + </compile.module>, +, + <compile.module module="http">, + <compile.main.classpath>, + <pathelement location="${build.dir}/core/main"/>, + <pathelement location="${build.dir}/io/main"/>, + </compile.main.classpath>, + <compile.tests.classpath>, + <pathelement location="${build.dir}/core/main"/>, + <pathelement location="${build.dir}/io/main"/>, + </compile.tests.classpath>, + </compile.module>, +, +
[+++ b/pom.xml, + <okhttp.version>2.4.0-RC1</okhttp.version>, +++ b/pom.xml, + <okhttp.version>2.4.0-RC1</okhttp.version>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, + .endpoint("http://example.com"), +++ b/pom.xml, + <okhttp.version>2.4.0-RC1</okhttp.version>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, + .endpoint("http://example.com"), +++ /dev/null, +++ b/pom.xml, + <okhttp.version>2.4.0-RC1</okhttp.version>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, + .endpoint("http://example.com"), +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.FormEncodingBuilder;, + private void addFormField(String name, String value, boolean encode) {, + if (encode) {, + formEncodingBuilder.add(name, value);, + } else {, + formEncodingBuilder.addEncoded(name, value);, + }, + }, +, + boolean encode = field.encode();, + addFormField(name, iterableValue.toString(), encode);, + addFormField(name, arrayValue.toString(), encode);, + addFormField(name, value.toString(), encode);, + boolean encode = fieldMap.encode();, + addFormField(entryKey.toString(), entryValue.toString(), encode);, +++ b/pom.xml, + <okhttp.version>2.4.0-RC1</okhttp.version>, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, + .endpoint("http://example.com"),
[+++ b/pom.xml, + <version>1.0.2</version>, +++ b/pom.xml, + <version>1.0.2</version>, +++ b/retrofit/pom.xml, + <version>1.0.2</version>, +++ b/pom.xml, + <version>1.0.2</version>, +++ b/retrofit/pom.xml, + <version>1.0.2</version>, +++ b/samples/github-client/pom.xml, + <version>1.0.2</version>, +++ b/pom.xml, + <version>1.0.2</version>, +++ b/retrofit/pom.xml, + <version>1.0.2</version>, +++ b/samples/github-client/pom.xml, + <version>1.0.2</version>, +++ b/samples/pom.xml, + <version>1.0.2</version>]
[+++ b/pom.xml, + <okhttp.version>3.1.1</okhttp.version>]
[+++ b/pom.xml, + <appengine.version>1.8.9</appengine.version>, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + <version>${appengine.version}</version>, + </dependency>, +++ b/pom.xml, + <appengine.version>1.8.9</appengine.version>, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + <version>${appengine.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, +, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + <optional>true</optional>, + </dependency>, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-compiler-plugin</artifactId>, + <configuration>, + <!-- The AppEngine dependency has an annotation processor we don't want to run. -->, + <compilerArgument>-proc:none</compilerArgument>, + </configuration>, + </plugin>, + </plugins>, + </build>, +++ b/pom.xml, + <appengine.version>1.8.9</appengine.version>, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + <version>${appengine.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, +, + <dependency>, +
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + @Override, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@ParametersAreNonnullByDefault, +, +import javax.annotation.ParametersAreNonnullByDefault;, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + @Override, + public
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java, +/** @deprecated Use {@link retrofit2.HttpException}. */, +@Deprecated, +public final class HttpException extends retrofit2.HttpException {, + super(response);, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + * responses, sets {@link retrofit2.HttpException HttpException} errors for non-2XX responses, and, + * sets {@link IOException} for network errors.</li>, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java, +/** @deprecated Use {@link retrofit2.HttpException}. */, +@Deprecated, +public final class HttpException extends retrofit2.HttpException
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, + return new BodyCallAdapter<>(innerType);, + return new ResponseCallAdapter<>(responseType);, + private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, + @Override public ListenableFuture<R> adapt(final Call<R> call) {, + private static final class ResponseCallAdapter<R>, + implements CallAdapter<R, ListenableFuture<Response<R>>> {, + @Override public ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, + return new BodyCallAdapter<>(innerType);, + return new ResponseCallAdapter<>(responseType);, + private static final class BodyCallAdapter<R> implements CallAdapter<R, ListenableFuture<R>> {, + @Override public ListenableFuture<R> adapt(final Call<R> call) {, + private
[+++ b/pom.xml, + <module>retrofit-mock</module>, +++ b/pom.xml, + <module>retrofit-mock</module>, +++ b/retrofit-mock/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>parent</artifactId>, + <version>1.2.3-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>retrofit-mock</artifactId>, + <name>Retrofit Mock Adapter</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, +, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <optional>true</optional>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.easytesting</groupId>, + <artifactId>fest-assert-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +
[+++ b/pom.xml, + <rxjava.version>0.19.2</rxjava.version>, + <jackson.version>2.4.1</jackson.version>, + <wire.version>1.5.1</wire.version>, + <assertj.version>1.6.1</assertj.version>, + <guava.version>17.0</guava.version>, +++ b/pom.xml, + <rxjava.version>0.19.2</rxjava.version>, + <jackson.version>2.4.1</jackson.version>, + <wire.version>1.5.1</wire.version>, + <assertj.version>1.6.1</assertj.version>, + <guava.version>17.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import retrofit.http.Body;, +import retrofit.http.EncodedPath;, +import retrofit.http.EncodedQuery;, +import retrofit.http.EncodedQueryMap;, +import retrofit.http.Field;, +import retrofit.http.FieldMap;, +import retrofit.http.Path;, +import retrofit.http.Query;, +import retrofit.http.QueryMap;, + paramAnnotations = methodInfo.requestParamAnnotations;, + addQueryParam(name, value, false, true);, + addQueryParam(name, value, false, false);, + private void addQueryParam(String name, Object value, boolean encodeName, boolean encodeValue) {, + if (value instanceof Iterable) {, + for (Object iterableValue : (Iterable<?>) value) {, + if (iterableValue != null) { // Skip null values, + addQueryParam(name, iterableValue.toString(), encodeName, encodeValue);,
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/checkstyle.xml, + <!--module name="NewlineAtEndOfFile"/-->
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, + Exceptions.throwIfFatal(t);, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, + Exceptions.throwIfFatal(t);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ThreadFactory;, +import okhttp3.Dispatcher;, +import okhttp3.OkHttpClient;, +import org.junit.After;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, + private List<Throwable> uncaughtExceptions = new ArrayList<>();, +, + ExecutorService executorService = Executors.newCachedThreadPool(new ThreadFactory() {, + @Override public Thread newThread(Runnable r) {, + Thread thread = new Thread(r);, + thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {, + @Override public void uncaughtException(Thread t, Throwable e) {, + uncaughtExceptions.add(e);, + }, + });, + return thread;, + }, + });, +, + OkHttpClient client = new OkHttpClient.Builder(), + .dispatcher(new Dispatcher(executorService)),
[+++ b/pom.xml, + <okhttp.version>3.1.1</okhttp.version>, + <gson.version>2.6.1</gson.version>, +++ b/pom.xml, + <okhttp.version>3.1.1</okhttp.version>, + <gson.version>2.6.1</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, + return new GsonResponseBodyConverter<>(gson, adapter);, +++ b/pom.xml, + <okhttp.version>3.1.1</okhttp.version>, + <gson.version>2.6.1</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, + return new GsonResponseBodyConverter<>(gson, adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.Gson;, +import com.google.gson.stream.JsonReader;, + private final Gson gson;, + GsonResponseBodyConverter(Gson gson, TypeAdapter<T> adapter) {, + this.gson = gson;, + JsonReader jsonReader = gson.newJsonReader(value.charStream());, + return adapter.read(jsonReader);, +++ b/pom.xml, + <okhttp.version>3.1.1</okhttp.version>, + <gson.version>2.6.1</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, + return new GsonResponseBodyConverter<>(gson, adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.Gson;, +import com.google.gson.stream.JsonReader;, + private final Gson gson;, + GsonResponseBodyConverter(Gson gson, TypeAdapter<T> adapter) {, + this.gson = gson;, + JsonReader jsonReader =
[+++ b/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + boolean isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction;, +, + Annotation[] annotations = method.getAnnotations();, + Type adapterType;, + if (isKotlinSuspendFunction) {, + Type responseType = Utils.getParameterLowerBound(0,, + (ParameterizedType) parameterTypes[parameterTypes.length - 1]);, +, + adapterType = new Utils.ParameterizedTypeImpl(null, Call.class, responseType);, + annotations = SkipCallbackExecutorImpl.ensurePresent(annotations);, + adapterType = method.getGenericReturnType();, + CallAdapter<ResponseT, ReturnT> callAdapter =, + createCallAdapter(retrofit, method, adapterType, annotations);, + Type responseType = callAdapter.responseType();, + if (!isKotlinSuspendFunction) {, + return new CallAdapted<>(requestFactory, callFactory, responseConverter, callAdapter);, + callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter);, + callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter,, + continuationBodyNullable);, + Retrofit retrofit, Method method, Type returnType, Annotation[] annotations) {, + HttpServiceMethod(RequestFactory requestFactory,
[+++ b/pom.xml, + <version>1.1.1</version>, +++ b/pom.xml, + <version>1.1.1</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.1</version>, +++ b/pom.xml, + <version>1.1.1</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.1</version>, +++ b/retrofit-samples/pom.xml, + <version>1.1.1</version>, +++ b/pom.xml, + <version>1.1.1</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.1</version>, +++ b/retrofit-samples/pom.xml, + <version>1.1.1</version>, +++ b/retrofit/pom.xml, + <version>1.1.1</version>]
[+++ b/retrofit/src/main/java/retrofit2/HttpException.java, +import javax.annotation.Nullable;, +, + public @Nullable Response<?> response() {]
[+++ b/pom.xml, + <version>2.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.1.1-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/retrofit-adapters/rxjava/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/retrofit-adapters/rxjava/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import org.junit.Before;, +import org.junit.Rule;, +import retrofit.converter.Converter;, +import retrofit.http.GET;, +import rx.observables.BlockingObservable;, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;, + @Rule public final MockWebServerRule server = new MockWebServerRule();, +, + interface Service {, + @GET("/") Observable<String> body();, + @GET("/") Observable<Response<String>> response();, + @GET("/") Observable<Result<String>> result();, + }, +, + private Service service;, +, + @Before public void setUp() {, + RestAdapter ra = new RestAdapter.Builder(), + .endpoint(server.getUrl("/").toString()), + .converter(new StringConverter()), + .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, + return observable;, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, + return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, + return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, + @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, + return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, + @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +import java.io.IOException;, + @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, + return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, + @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +import java.io.IOException;, + @Override public Object convert(ResponseBody value) throws IOException {, +++
[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, + static final class Tag<T> extends ParameterHandler<T> {, + final Class<T> cls;, +, + Tag(Class<T> cls) {, + this.cls = cls;, + }, +, + @Override void apply(RequestBuilder builder, @Nullable T value) {, + builder.addTag(cls, value);, + }, + }, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, + static final class Tag<T> extends ParameterHandler<T> {, + final Class<T> cls;, +, + Tag(Class<T> cls) {, + this.cls = cls;, + }, +, + @Override void apply(RequestBuilder builder, @Nullable T value) {, + builder.addTag(cls, value);, + }, + }, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, + <T> void addTag(Class<T> cls, @Nullable T value) {, + requestBuilder.tag(cls,
[+++ b/retrofit/src/main/java/retrofit/http/Converter.java, + * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, + * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/Converter.java, + * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, + * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import static retrofit.http.RestAdapter.UTF_8;, +, + InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(body), UTF_8);, + jsonBytes = gson.toJson(object).getBytes(UTF_8);, + throw new IllegalStateException(UTF_8 + " encoding does not exist.");, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, + * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, + * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import static retrofit.http.RestAdapter.UTF_8;, +, + InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(body), UTF_8);, + jsonBytes = gson.toJson(object).getBytes(UTF_8);, + throw new IllegalStateException(UTF_8 + " encoding does not exist.");, +++
[+++ b/retrofit/src/main/java/retrofit/RequestAction.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/pom.xml, + <module>retrofit-samples</module>, +++ b/pom.xml, + <module>retrofit-samples</module>, +++ b/retrofit-samples/github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit.samples</groupId>, + <artifactId>parent</artifactId>, + <version>1.0.3-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>github-client</artifactId>, + <name>Sample: GitHub Client</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + </dependencies>, +</project>, +++ b/pom.xml, + <module>retrofit-samples</module>, +++ b/retrofit-samples/github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit.samples</groupId>, + <artifactId>parent</artifactId>, + <version>1.0.3-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>github-client</artifactId>, + <name>Sample: GitHub Client</name>, +, + <dependencies>, + <dependency>,
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .addConverterFactory(new StringConverterFactory()), + .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .addConverterFactory(new StringConverterFactory()), + .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, + /** Create a converter for {@code type}. */, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .addConverterFactory(new StringConverterFactory()), + .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, + /** Create a converter for {@code type}. */, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, + .addConverterFactory(GsonConverterFactory.create(gson)), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .addConverterFactory(new StringConverterFactory()), + .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, + /** Create a converter for {@code type}. */, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, + .addConverterFactory(GsonConverterFactory.create(gson)), +++ b/retrofit-converters/jackson/src/main/java/retrofit/JacksonConverterFactory.java, + /** Create a converter for {@code type}. */, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .addConverterFactory(new StringConverterFactory()), + .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, + /** Create a converter for {@code type}. */, +++
[+++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android/pom.xml, + <version>0.6.0-rc3</version>, +++ b/core/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android/pom.xml, + <version>0.6.0-rc3</version>, +++ b/core/pom.xml, + <version>0.6.0-rc3</version>, +++ b/http/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android/pom.xml, + <version>0.6.0-rc3</version>, +++ b/core/pom.xml, + <version>0.6.0-rc3</version>, +++ b/http/pom.xml, + <version>0.6.0-rc3</version>, +++ b/io/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android/pom.xml, + <version>0.6.0-rc3</version>, +++ b/core/pom.xml, + <version>0.6.0-rc3</version>, +++ b/http/pom.xml, + <version>0.6.0-rc3</version>, +++ b/io/pom.xml, + <version>0.6.0-rc3</version>, +++ b/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc3</version>, +++ b/android/pom.xml, + <version>0.6.0-rc3</version>, +++ b/core/pom.xml, + <version>0.6.0-rc3</version>, +++ b/http/pom.xml, +
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import java.util.concurrent.ExecutorService;, + private final ExecutorService executor;, + BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor,, + Class<T> service) {, + this.executor = executor;, + final Call<?> behaviorCall = new BehaviorCall<>(behavior, executor, call);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import java.util.concurrent.ExecutorService;, + private final ExecutorService executor;, + BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor,, + Class<T> service) {, + this.executor = executor;, + final Call<?> behaviorCall = new BehaviorCall<>(behavior, executor, call);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/MockRetrofit.java, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, + private final ExecutorService executor;, + MockRetrofit(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor) {, + this.executor = executor;, + public Executor backgroundExecutor() {, + return executor;,
[+++ b/README.md, +++ b/README.md, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <scope>provided</scope>, + <optional>true</optional>, + </dependency>, +, + <dependency>, +++ b/README.md, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/http/pom.xml, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <scope>provided</scope>, + <optional>true</optional>, + </dependency>, +, + <dependency>, +++ b/http/src/main/java/retrofit/android/AndroidMainThread.java, +// Copyright 2012 Square, Inc., +package retrofit.android;, +, +import android.os.Handler;, +import android.os.Looper;, +import android.os.SystemClock;, +import retrofit.http.MainThread;, +,
[+++ b/pom.xml, + <mockito.version>1.9.5</mockito.version>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <version>${mockito.version}</version>, + </dependency>, +++ b/pom.xml, + <mockito.version>1.9.5</mockito.version>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <version>${mockito.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, +++ b/pom.xml, + <mockito.version>1.9.5</mockito.version>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <version>${mockito.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, +++ b/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java, +// Copyright 2013 Square, Inc., +package retrofit.android;, +, +import android.net.http.AndroidHttpClient;, +import retrofit.http.client.ApacheClient;, +, +/**, + * Provides a {@link retrofit.http.client.Client} which uses the Android-specific version of, + * {@link org.apache.http.client.HttpClient}, {@link AndroidHttpClient}., + * <p>, + * If you need to provide a
[+++ b/pom.xml, + <gson.version>2.2.3</gson.version>, +++ b/pom.xml, + <gson.version>2.2.3</gson.version>, +++ b/retrofit/src/main/java/retrofit/http/RetrofitError.java, + static RetrofitError networkError(String url, IOException exception) {, + static RetrofitError conversionError(String url, Response response, Converter converter,, + static RetrofitError httpError(String url, Response response, Converter converter,, + static RetrofitError unexpectedError(String url, Throwable exception) {]
[+++ b/pom.xml, + <moshi.version>1.8.0</moshi.version>, +++ b/pom.xml, + <moshi.version>1.8.0</moshi.version>, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, + reader.skipName();, + assertThat(e).hasMessage("Cannot skip unexpected NAME at $.");]
[+++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, + return new MoshiConverterFactory(moshi, false, false, false);, + private final boolean failOnUnknown;, + private MoshiConverterFactory(Moshi moshi, boolean lenient, boolean failOnUnknown,, + boolean serializeNulls) {, + this.failOnUnknown = failOnUnknown;, + return new MoshiConverterFactory(moshi, true, failOnUnknown, serializeNulls);, + }, +, + /**, + * Return a new factory which uses {@link JsonAdapter#failOnUnknown()} adapters., + */, + public MoshiConverterFactory failOnUnknown() {, + return new MoshiConverterFactory(moshi, lenient, true, serializeNulls);, + return new MoshiConverterFactory(moshi, lenient, failOnUnknown, true);, + if (failOnUnknown) {, + adapter = adapter.failOnUnknown();, + }, + @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, + if (failOnUnknown) {, + adapter = adapter.failOnUnknown();,
[+++ b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java, + ObjectReader reader = mapper.readerFor(javaType);, + ObjectWriter writer = mapper.writerFor(javaType);]
[+++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.util.Collections;, + @Override List<? extends Converter.Factory> defaultConverterFactories() {, + return Build.VERSION.SDK_INT >= 24, + ? singletonList(OptionalConverterFactory.INSTANCE), + : Collections.<Converter.Factory>emptyList();, + }, +, + @Override int defaultConverterFactoriesSize() {, + return Build.VERSION.SDK_INT >= 24 ? 1 : 0;, + }, +, +++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, + return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, + return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;, +import io.reactivex.plugins.RxJavaPlugins;, +, + @Test public void observableAssembly() {, + try {, + final Observable<String> justMe = Observable.just("me");, + RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {, + @Override public Observable apply(Observable f) {, + return justMe;, + }, + });, + assertThat(service.body()).isEqualTo(justMe);, + } finally {, + RxJavaPlugins.reset();, + }, + }]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.CompositeException;, +import rx.plugins.RxJavaPlugins;, + Throwable t = new HttpException(response);, + try {, + subscriber.onError(t);, + } catch (Throwable inner) {, + CompositeException composite = new CompositeException(t, inner);, + RxJavaPlugins.getInstance().getErrorHandler().handleError(composite);, + }, + } else {, + // This should never happen! onNext handles and forwards errors automatically., + Throwable broken = new AssertionError(, + "This should never happen! Report as a Retrofit bug with the full stacktrace.");, + //noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only., + broken.initCause(throwable);, + RxJavaPlugins.getInstance().getErrorHandler().handleError(broken);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.CompositeException;, +import rx.plugins.RxJavaPlugins;, + Throwable t = new HttpException(response);, + try {, +
[+++ b/checkstyle.xml, + <!--module name="InnerAssignment"/-->
[+++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, +Version 2.4.0 *(2018-03-14)*, +----------------------------, +, + * New: `Retrofit.Builder` exposes mutable lists of the added converter and call adapter factories., + * New: Call adapter added for Scala's `Future`., + * New: Converter for JAXB replaces the now-deprecated converter for Simple XML Framework., + * New: Add Java 9 automatic module names for each artifact corresponding to their root package., + * Fix: Do not swallow `Error`s from callbacks (usually `OutOfMemoryError`)., + * Fix: Moshi and Gson converters now assert that the full response was consumed. This prevents, +
[+++ b/pom.xml, + <module>retrofit-appengine</module>, +++ b/pom.xml, + <module>retrofit-appengine</module>, +++ b/retrofit-appengine/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>parent</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>retrofit-appengine</artifactId>, + <name>Retrofit AppEngine</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, +
[+++ b/pom.xml, + <jackson.version>2.2.2</jackson.version>, + <dependency>, + <groupId>com.fasterxml.jackson.core</groupId>, + <artifactId>jackson-databind</artifactId>, + <version>${jackson.version}</version>, + </dependency>, +, +++ b/pom.xml, + <jackson.version>2.2.2</jackson.version>, + <dependency>, + <groupId>com.fasterxml.jackson.core</groupId>, + <artifactId>jackson-databind</artifactId>, + <version>${jackson.version}</version>, + </dependency>, +, +++ b/retrofit-converters/jackson/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit-converters</artifactId>, + <version>1.1.2-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>converter-jackson</artifactId>, + <name>Converter: Jackson</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.fasterxml.jackson.core</groupId>, + <artifactId>jackson-databind</artifactId>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.easytesting</groupId>, +
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, + static final class RelativeUrl extends ParameterHandler<Object> {, + @Override void apply(RequestBuilder builder, Object value) {, +++ b/pom.xml, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, + static final class RelativeUrl extends ParameterHandler<Object> {, + @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, + void setRelativeUrl(Object relativeUrl) {, + if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, + this.relativeUrl = relativeUrl.toString();, +++ b/pom.xml, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, + static final class RelativeUrl extends ParameterHandler<Object> {, + @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, + void setRelativeUrl(Object relativeUrl) {, + if (relativeUrl == null) throw new NullPointerException("@Url
[+++ b/pom.xml]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + } else if (behavior.calculateIsError()) {, + if (delaySleep()) {, + //noinspection unchecked An error response has no body., + callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, + }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + } else if (behavior.calculateIsError()) {, + if (delaySleep()) {, + //noinspection unchecked An error response has no body., + callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, + }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +import java.util.concurrent.Callable;, +import okhttp3.ResponseBody;, +import retrofit2.Response;, + private static final int DEFAULT_ERROR_PERCENT = 0; // 0% of network calls will return errors., + private volatile int errorPercent = DEFAULT_ERROR_PERCENT;, + private volatile Callable<Response<?>> errorFactory = new Callable<Response<?>>() {, + @Override public Response<?> call()
[+++ b/pom.xml, + <appengine.version>1.9.12</appengine.version>, +++ b/pom.xml, + <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, + return parseResponse(fetchResponse);, + String mimeType = body.mimeType();, + if (mimeType != null) {, + fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, + }, +, + static Response parseResponse(HTTPResponse response) {, + String url = response.getFinalUrl().toString();, + return new Response(url, status, "", headers, body);, +++ b/pom.xml, + <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, + return parseResponse(fetchResponse);, + String mimeType = body.mimeType();, + if (mimeType != null) {, + fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, + }, +, + static Response parseResponse(HTTPResponse response) {, + String url = response.getFinalUrl().toString();, + return new Response(url, status, "", headers, body);, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import
[+++ b/checkstyle.xml, + <!--module name="MethodLength"/-->
[+++ b/pom.xml, + <version>1.6.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>1.6.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.6.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.6.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.6.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.6.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.6.1-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <distributionManagement>, + <repository>, + <id>${retrofit.repo.id}</id>, + <url>${retrofit.repo.url}</url>, + </repository>, + <snapshotRepository>, + <id>${retrofit.snapshot.repo.id}</id>, + <url>${retrofit.snapshot.repo.url}</url>, + </snapshotRepository>, + </distributionManagement>, +]
[+++ b/README.md, +Type-safe HTTP client for Android and Java by Square, Inc., +++ b/README.md, +Type-safe HTTP client for Android and Java by Square, Inc., +++ b/pom.xml, + <description>Type-safe HTTP client for Android and Java by Square, Inc.</description>, +++ b/README.md, +Type-safe HTTP client for Android and Java by Square, Inc., +++ b/pom.xml, + <description>Type-safe HTTP client for Android and Java by Square, Inc.</description>, +++ b/website/index.html, + <meta name="description" content="A type-safe HTTP client for Android and Java">]
[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import java.lang.reflect.Method;, + private final Method method;, + private final int p;, +, + RelativeUrl(Method method, int p) {, + this.method = method;, + this.p = p;, + }, +, + if (value == null) {, + throw Utils.parameterError(method, p, "@Url parameter is null.");, + }, + private final Method method;, + private final int p;, +, + Path(Method method, int p, String name, Converter<T, String> valueConverter, boolean encoded) {, + this.method = method;, + this.p = p;, + throw Utils.parameterError(method, p,, + private final Method method;, + private final int p;, + QueryMap(Method method, int p,
[+++ b/pom.xml, + <rxjava.version>0.14.9</rxjava.version>, + <dependency>, + <groupId>com.netflix.rxjava</groupId>, + <artifactId>rxjava-core</artifactId>, + <version>${rxjava.version}</version>, + </dependency>, +++ b/pom.xml, + <rxjava.version>0.14.9</rxjava.version>, + <dependency>, + <groupId>com.netflix.rxjava</groupId>, + <artifactId>rxjava-core</artifactId>, + <version>${rxjava.version}</version>, + </dependency>, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.databind.type.TypeFactory;, + final JavaType javaType = TypeFactory.defaultInstance().constructType(type);, +++ b/pom.xml, + <rxjava.version>0.14.9</rxjava.version>, + <dependency>, + <groupId>com.netflix.rxjava</groupId>, + <artifactId>rxjava-core</artifactId>, + <version>${rxjava.version}</version>, + </dependency>, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.databind.type.TypeFactory;, + final JavaType javaType = TypeFactory.defaultInstance().constructType(type);, +++ b/retrofit-mock/pom.xml, + <groupId>com.netflix.rxjava</groupId>, + <artifactId>rxjava-core</artifactId>, + <optional>true</optional>, + </dependency>, +, + <dependency>, +++ b/pom.xml, + <rxjava.version>0.14.9</rxjava.version>, + <dependency>, + <groupId>com.netflix.rxjava</groupId>, + <artifactId>rxjava-core</artifactId>, + <version>${rxjava.version}</version>, + </dependency>, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.databind.type.TypeFactory;, + final JavaType javaType = TypeFactory.defaultInstance().constructType(type);,
[+++ b/pom.xml, + <robolectric.version>3.0</robolectric.version>, + <dependency>, + <groupId>org.robolectric</groupId>, + <artifactId>robolectric</artifactId>, + <version>${robolectric.version}</version>, + </dependency>, +++ b/pom.xml, + <robolectric.version>3.0</robolectric.version>, + <dependency>, + <groupId>org.robolectric</groupId>, + <artifactId>robolectric</artifactId>, + <version>${robolectric.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, + <dependency>, + <groupId>org.robolectric</groupId>, + <artifactId>robolectric</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/pom.xml, + <robolectric.version>3.0</robolectric.version>, + <dependency>, + <groupId>org.robolectric</groupId>, + <artifactId>robolectric</artifactId>, + <version>${robolectric.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, + <dependency>, + <groupId>org.robolectric</groupId>, + <artifactId>robolectric</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/retrofit/src/main/java/retrofit2/RequestAction.java, +import android.net.Uri;, +import java.net.URI;, + static final class StringUrl extends RequestAction<String> {, + static final class JavaUriUrl extends RequestAction<URI> {, + @Override void perform(RequestBuilder builder, URI value) {, + builder.setRelativeUrl(value.toString());, +
[+++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +
[+++ b/retrofit-adapters/guava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit2</groupId>, + <artifactId>retrofit-adapters</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>adapter-guava</artifactId>, + <name>Adapter: Guava</name>, +, + <dependencies>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>mockwebserver</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/retrofit-adapters/guava/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +
[+++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXmlConverter.java, +package retrofit.converter;, +, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStreamWriter;, +import java.lang.reflect.Type;, +import okio.Buffer;, +import org.simpleframework.xml.Serializer;, +import org.simpleframework.xml.core.Persister;, +, +/**, + * A {@link Converter} which uses SimpleXML for reading and writing entities., + *, + * @author Fabien Ric (fabien.ric@gmail.com), + */, +public class SimpleXmlConverter implements Converter {, + private static final boolean DEFAULT_STRICT = true;, + private static final String CHARSET = "UTF-8";, + private static final MediaType MEDIA_TYPE =, + MediaType.parse("application/xml; charset=" + CHARSET);, +, + private final Serializer serializer;, +, + private final boolean
[+++ b/pom.xml, + <appengine.version>1.9.6</appengine.version>, +++ b/pom.xml, + <appengine.version>1.9.6</appengine.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import java.lang.annotation.Annotation;, +import retrofit.http.Part;, +import retrofit.http.PartMap;, + private final Annotation[] paramAnnotations;, + paramAnnotations = methodInfo.requestParamAnnotation;, + Annotation annotation = paramAnnotations[i];, + String transferEncoding = ((Part) annotation).encoding();, + multipartBody.addPart(name, transferEncoding, (TypedOutput) value);, + multipartBody.addPart(name, transferEncoding, new TypedString((String) value));, + multipartBody.addPart(name, transferEncoding, converter.toBody(value));, + String transferEncoding = ((PartMap) annotation).encoding();, + multipartBody.addPart(entryName, transferEncoding, (TypedOutput) entryValue);, + multipartBody.addPart(entryName, transferEncoding,, + new TypedString((String) entryValue));, + multipartBody.addPart(entryName, transferEncoding, converter.toBody(entryValue));, +++ b/pom.xml, + <appengine.version>1.9.6</appengine.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import java.lang.annotation.Annotation;, +import retrofit.http.Part;, +import retrofit.http.PartMap;, + private final Annotation[] paramAnnotations;, + paramAnnotations = methodInfo.requestParamAnnotation;, + Annotation annotation = paramAnnotations[i];,
[+++ b/checkstyle.xml, + <module name="MethodLength"/>
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + Retrofit retrofit = new Retrofit.Builder(), + service = retrofit.create(Service.class);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + Retrofit retrofit = new Retrofit.Builder(), + service = retrofit.create(Service.class);, +++ b/retrofit-converters/README.md, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +Retrofit retrofit = new Retrofit.Builder(), + .endpoint("https://api.example.com"), + .converter(new ProtoConverter()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + Retrofit retrofit = new Retrofit.Builder(), + service = retrofit.create(Service.class);, +++ b/retrofit-converters/README.md, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +Retrofit retrofit = new Retrofit.Builder(), + .endpoint("https://api.example.com"), + .converter(new ProtoConverter()), +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, + * @see MockRetrofit, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + Retrofit retrofit
[+++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, + retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, + retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, + retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +++ b/retrofit-converters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, + retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +++ b/retrofit-converters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-converters/java8/src/main/java/retrofit/converter/java8/Java8OptionalConverterFactory.java, + * @deprecated Retrofit includes support for Optional. This no longer needs to be added to the, + * Retrofit instance explicitly., + * <p>, +@Deprecated, + retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, + retrofit.nextResponseBodyConverter(this, innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +++ b/retrofit-converters/java8/README.md, +Deprecated – Included
[+++ b/checkstyle.xml, + <module name="MethodLength"/>
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/samples/pom.xml, + <artifactId>converter-moshi</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, +++ b/samples/pom.xml, + <artifactId>converter-moshi</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, +++ b/samples/src/main/java/com/example/retrofit/AnnotatedConverters.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is
[+++ b/pom.xml, + <robolectric.version>3.8</robolectric.version>, +++ b/pom.xml, + <robolectric.version>3.8</robolectric.version>, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/pom.xml, + <robolectric.version>3.8</robolectric.version>, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/pom.xml, + <robolectric.version>3.8</robolectric.version>, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/retrofit/src/test/java/retrofit2/RequestFactoryAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE)]
[+++ b/pom.xml, + <android-maven.version>3.5.1</android-maven.version>, + <gson.version>2.2.3</gson.version>, + <okhttp.version>1.0.1</okhttp.version>, + <guava.version>14.0</guava.version>, +++ b/pom.xml, + <android-maven.version>3.5.1</android-maven.version>, + <gson.version>2.2.3</gson.version>, + <okhttp.version>1.0.1</okhttp.version>, + <guava.version>14.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, + // Upper and lower characters, digits, underscores, and hyphens, starting with a character., + private static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";, + private static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);, + private static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");, + Matcher queryParamMatcher = PARAM_URL_REGEX.matcher(query);, + if (!PARAM_NAME_REGEX.matcher(name).matches()) {, + throw new IllegalStateException("Path parameter name is not valid: ", + + name, + + ". Must match ", + + PARAM_URL_REGEX.pattern());, + }, + "Method
[+++ b/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/pom.xml, + <gson.version>2.8.0</gson.version>, + <moshi.version>1.4.0</moshi.version>]
[+++ b/pom.xml, + <exclusions>, + <exclusion>, + <groupId>commons-logging</groupId>, + <artifactId>commons-logging</artifactId>, + </exclusion>, + </exclusions>]
[+++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/pom.xml, + <gson.version>2.4</gson.version>, +++ b/pom.xml, + <gson.version>2.4</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, + return new GsonRequestBodyConverter<>(gson, adapter);, +++ b/pom.xml, + <gson.version>2.4</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, + return new GsonRequestBodyConverter<>(gson, adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonRequestBodyConverter.java, +import com.google.gson.Gson;, +import com.google.gson.stream.JsonWriter;, + private final Gson gson;, + GsonRequestBodyConverter(Gson gson, TypeAdapter<T> adapter) {, + this.gson = gson;, + JsonWriter jsonWriter = gson.newJsonWriter(writer);, + adapter.write(jsonWriter, value);, + jsonWriter.flush();, +++ b/pom.xml, + <gson.version>2.4</gson.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, + return new GsonRequestBodyConverter<>(gson, adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonRequestBodyConverter.java, +import com.google.gson.Gson;, +import com.google.gson.stream.JsonWriter;, + private final Gson gson;, + GsonRequestBodyConverter(Gson gson, TypeAdapter<T> adapter) {, + this.gson = gson;, + JsonWriter jsonWriter = gson.newJsonWriter(writer);, + adapter.write(jsonWriter, value);, + jsonWriter.flush();,
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, + * By default, instances of this class will use a 2 second delay with 40% variance. Failures, + * will occur 3% of the time. HTTP errors will occur 0% of the time.]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/pom.xml, + <version>1.5.0</version>, + <tag>parent-1.5.0</tag>, +++ b/pom.xml, + <version>1.5.0</version>, + <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.0</version>, +++ b/pom.xml, + <version>1.5.0</version>, + <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.0</version>, +++ b/pom.xml, + <version>1.5.0</version>, + <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.5.0</version>, +++ b/pom.xml, + <version>1.5.0</version>, + <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.5.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.5.0</version>, +++ b/pom.xml, + <version>1.5.0</version>, + <tag>parent-1.5.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.5.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.5.0</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.5.0</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <version>1.2.0</version>, +++ b/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.0</version>, +++ b/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.0</version>, +++ b/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.0</version>, +++ b/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.2.0</version>, +++ b/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-samples/pom.xml, + <version>1.2.0</version>, +++ b/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/retrofit-adapters/README.md, +Retrofit ships with a default adapter for executing `Call` instances. The child modules contained, +herein are additional adapters for other popular execution mechanisms., +, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +, +```java, +Retrofit retrofit = new Retrofit.Builder(), + .baseUrl("https://api.example.com"), + .addCallAdapterFactory(RxJavaCallAdapterFactory.create()), + .build();, +```, +++ b/retrofit-adapters/README.md, +Retrofit ships with a default adapter for executing `Call` instances. The child modules contained, +herein are additional adapters for other popular execution mechanisms., +, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +, +```java, +Retrofit retrofit =
[+++ b/retrofit-converters/simplexml/README.md, +Deprecated – Please switch to the JAXB Converter, +------------------------------------------------, +, +The Simple XML project is no longer maintained. We recommend switching to the, +[JAXB converter](https://github.com/square/retrofit/tree/master/retrofit-converters/jaxb)., +, +-----, +, +++ b/retrofit-converters/simplexml/README.md, +Deprecated – Please switch to the JAXB Converter, +------------------------------------------------, +, +The Simple XML project is no longer maintained. We recommend switching to the, +[JAXB converter](https://github.com/square/retrofit/tree/master/retrofit-converters/jaxb)., +, +-----, +, +++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlConverterFactory.java, + *, + * @deprecated we recommend switching to the JAXB converter., +@Deprecated]
[+++ b/pom.xml, + <rxjava.version>1.3.0</rxjava.version>, +++ b/pom.xml, + <rxjava.version>1.3.0</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapter.java, + return observable;, +++ b/pom.xml, + <rxjava.version>1.3.0</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapter.java, + return observable;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, + boolean isCompletable = rawType == Completable.class;]
[+++ b/pom.xml, + <okhttp.version>3.6.0</okhttp.version>, +++ b/pom.xml, + <okhttp.version>3.6.0</okhttp.version>, +++ /dev/null, +++ b/pom.xml, + <okhttp.version>3.6.0</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <okhttp.version>3.6.0</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <okhttp.version>3.6.0</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallOnSubscribe.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable
[+++ b/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, +++ b/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import java.io.IOException;, +import java.io.OutputStream;, + private String contentTypeHeader;, + contentTypeHeader = methodInfo.contentTypeHeader;, + if ("Content-Type".equalsIgnoreCase(name)) {, + contentTypeHeader = value;, + return;, + }, +, + if (body != null && contentTypeHeader != null) {, + body
[+++ b/pom.xml, + <version>1.1.0</version>, +++ b/pom.xml, + <version>1.1.0</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.0</version>, +++ b/pom.xml, + <version>1.1.0</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.0</version>, +++ b/retrofit-samples/pom.xml, + <version>1.1.0</version>, +++ b/pom.xml, + <version>1.1.0</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.0</version>, +++ b/retrofit-samples/pom.xml, + <version>1.1.0</version>, +++ b/retrofit/pom.xml, + <version>1.1.0</version>]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/pom.xml, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/ObservableTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import java.lang.reflect.Type;, +import static retrofit2.Utils.methodError;, +, + Type returnType = method.getGenericReturnType();, + if (Utils.hasUnresolvableType(returnType)) {, + throw methodError(method,, + "Method return type must not include a type variable or wildcard: %s", returnType);, + }, + if (returnType == void.class) {, + throw methodError(method, "Service methods cannot return void.");, + }, +]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + final NetworkBehavior behavior;, + final ExecutorService backgroundExecutor;, + final Call<T> delegate;, + volatile boolean canceled;, + boolean delaySleep() {, + callback.onFailure(new IOException("canceled"));, + callback.onFailure(new IOException("canceled"));, + throw new IOException("canceled");, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + final NetworkBehavior behavior;, + final ExecutorService backgroundExecutor;, + final Call<T> delegate;, + volatile boolean canceled;, + boolean delaySleep() {, + callback.onFailure(new IOException("canceled"));, + callback.onFailure(new IOException("canceled"));, + throw new IOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import java.util.concurrent.ExecutorService;, + final Retrofit retrofit;, + private final ExecutorService executor;, + BehaviorDelegate(Retrofit retrofit, NetworkBehavior
[+++ b/pom.xml, + <version>1.4.0</version>, +++ b/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.0</version>, +++ b/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.0</version>, +++ b/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.4.0</version>, +++ b/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.4.0</version>, +++ b/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.4.0</version>, +++ b/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.0.3-SNAPSHOT</version>]
[+++ b/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + if (Utils.hasUnresolvableType(returnType)) {, + throw methodError(method,, + "Method return type must not include a type variable or wildcard: %s", returnType);, + }, + if (returnType == void.class) {, + throw methodError(method, "Service methods cannot return void.");, + }, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + if (Utils.hasUnresolvableType(returnType)) {, + throw methodError(method,, + "Method return type must not include a type variable or wildcard: %s", returnType);, + }, + if (returnType == void.class) {, + throw methodError(method, "Service methods cannot return void.");, + }, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + ExceptionCatchingResponseBody catchingBody = new ExceptionCatchingResponseBody(rawBody);, + static final class ExceptionCatchingResponseBody extends ResponseBody {, +
[+++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.1.2-SNAPSHOT</version>]
[+++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +
[+++ b/pom.xml, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-javadoc-plugin</artifactId>, + <version>2.10.3</version>, + <executions>, + <execution>, + <id>attach-javadocs</id>, + <phase>package</phase>, + <goals>, + <goal>jar</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, +, + <plugin>, +++ b/pom.xml, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-javadoc-plugin</artifactId>, + <version>2.10.3</version>, + <executions>, + <execution>, + <id>attach-javadocs</id>, + <phase>package</phase>, + <goals>, + <goal>jar</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, +, + <plugin>, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + if (executed) throw new IllegalStateException("Already executed");, + public Response<T> execute() throws IOException {, + if (executed) throw new IllegalStateException("Already executed");, +++ b/pom.xml, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-javadoc-plugin</artifactId>, + <version>2.10.3</version>, + <executions>, + <execution>, + <id>attach-javadocs</id>,
[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final ServiceMethod<T> serviceMethod;, + OkHttpCall(ServiceMethod<T> serviceMethod, Object[] args) {, + this.serviceMethod = serviceMethod;, + return new OkHttpCall<>(serviceMethod, args);, + Request request = serviceMethod.toRequest(args);, + okhttp3.Call call = serviceMethod.callFactory.newCall(request);, + T body = serviceMethod.toResponse(catchingBody);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final ServiceMethod<T> serviceMethod;, + OkHttpCall(ServiceMethod<T> serviceMethod, Object[] args) {, + this.serviceMethod = serviceMethod;, + return new OkHttpCall<>(serviceMethod, args);, + Request request = serviceMethod.toRequest(args);, + okhttp3.Call call = serviceMethod.callFactory.newCall(request);, + T body = serviceMethod.toResponse(catchingBody);, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final ServiceMethod<T> serviceMethod;, + OkHttpCall(ServiceMethod<T> serviceMethod, Object[] args) {, + this.serviceMethod
[+++ b/.travis.yml, +language: java, +, +branches:, + except:, + - gh-pages, +, +notifications:, + email: false, +, +before_install:, + - wget http://dl.google.com/android/android-sdk_r20.0.3-linux.tgz, + - tar -zxf android-sdk_r20.0.3-linux.tgz, + - export ANDROID_HOME=~/builds/square/retrofit/android-sdk-linux, + - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools, + - android update sdk --filter 1,3 --no-ui --force]
[+++ b/pom.xml, + <okhttp.version>3.1.0</okhttp.version>]
[+++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * @deprecated Retrofit includes support for CompletableFuture. This no longer needs to be added to, + * the Retrofit instance explicitly., + *, +@Deprecated, +++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * @deprecated Retrofit includes support for CompletableFuture. This no longer needs to be added to, + * the Retrofit instance explicitly., + *, +@Deprecated, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + return new Request.Builder().url("http://localhost").build();, +++ b/retrofit-adapters/java8/README.md, +Deprecated
[+++ b/pom.xml, + <gson.version>2.2.3</gson.version>]
[+++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/Converter.java, + T convert(F value) throws IOException;, +++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/Converter.java, + T convert(F value) throws IOException;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final MediaType contentType;, + NoContentResponseBody(MediaType contentType, long contentLength) {, + IOException thrownException;, +++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/Converter.java, + T convert(F value) throws IOException;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final MediaType contentType;, + NoContentResponseBody(MediaType contentType, long contentLength) {, + IOException thrownException;, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/pom.xml, + <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/Converter.java, + T convert(F value) throws
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java, + private final Serializer serializer;, +++ b/pom.xml, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java, + private final Serializer serializer;, +++ b/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java]
[+++ b/pom.xml, + <okhttp.version>3.8.0</okhttp.version>, + <gson.version>2.7</gson.version>, + <moshi.version>1.4.0</moshi.version>, +++ b/pom.xml, + <okhttp.version>3.8.0</okhttp.version>, + <gson.version>2.7</gson.version>, + <moshi.version>1.4.0</moshi.version>, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import javax.annotation.concurrent.GuardedBy;, + @GuardedBy("this"), + private boolean executed;]
[+++ b/retrofit/src/main/java/retrofit/http/client/ApacheClient.java, + HttpResponse apacheResponse = client.execute(apacheRequest);, +++ b/retrofit/src/main/java/retrofit/http/client/ApacheClient.java, + HttpResponse apacheResponse = client.execute(apacheRequest);, +++ b/samples/github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>samples</artifactId>, + <version>1.0.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>sample-github-client</artifactId>, + <name>Sample: GitHub Client</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + </dependencies>, +</project>, +++ b/retrofit/src/main/java/retrofit/http/client/ApacheClient.java, + HttpResponse apacheResponse = client.execute(apacheRequest);, +++ b/samples/github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>samples</artifactId>, + <version>1.0.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, +
[+++ b/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/pom.xml, +++ b/retrofit/src/main/java/retrofit/Callback.java, + * Communicates responses from a server or offline requests. One and only one method will be, + * invoked in response to a given request., + * <p>, + * Callback methods are executed using the {@link RestAdapter} callback executor. When none is, + * specified, the following defaults are used:, + * <ul>, + *
[+++ b/retrofit/src/main/java/retrofit2/Response.java, +import okhttp3.Request;, + .request(new Request.Builder().url("http://localhost").build()), + .request(new Request.Builder().url("http://localhost").build())]
[+++ b/pom.xml, +, + <!-- Snapshot Repository URL (override in ~/.m2/settings.xml profile) -->, + <snapshot.repo.id>example-nexus</snapshot.repo.id>, + <snapshot.repo.url>http://example.com/snapshots</snapshot.repo.url>, +, + <distributionManagement>, + <snapshotRepository>, + <id>${snapshot.repo.id}</id>, + <url>${snapshot.repo.url}</url>, + </snapshotRepository>, + </distributionManagement>]
[+++ b/checkstyle.xml, + <!--module name="ParameterNumber"/-->
[+++ b/.gitignore, +.idea, +*.iml, +classes, +++ b/.gitignore, +.idea, +*.iml, +classes, +++ b/android/pom.xml, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-checkstyle-plugin</artifactId>, + <configuration>, + <configLocation>../checkstyle.xml</configLocation>, + </configuration>, + <executions>, + <execution>, + <phase>verify</phase>, + <goals>, + <goal>checkstyle</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, + </plugins>, + </build>, +++ b/.gitignore, +.idea, +*.iml, +classes, +++ b/android/pom.xml, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-checkstyle-plugin</artifactId>, + <configuration>, + <configLocation>../checkstyle.xml</configLocation>, + </configuration>, + <executions>, + <execution>, + <phase>verify</phase>, + <goals>, + <goal>checkstyle</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, + </plugins>, + </build>, +++ b/android/src/main/java/retrofit/android/ShakeDetector.java,
[+++ b/pom.xml, + <version>2.4.0</version>, + <tag>parent-2.4.0</tag>, +++ b/pom.xml, + <version>2.4.0</version>, + <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.0</version>, +++ b/pom.xml, + <version>2.4.0</version>, + <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.4.0</version>, +++ b/pom.xml, + <version>2.4.0</version>, + <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.4.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.4.0</version>, +++ b/pom.xml, + <version>2.4.0</version>, + <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.4.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.4.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.4.0</version>, +++ b/pom.xml, + <version>2.4.0</version>, + <tag>parent-2.4.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.4.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.4.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.4.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, + <version>2.4.0</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <okhttp.version>3.5.0</okhttp.version>]
[+++ b/pom.xml, + <jackson.version>2.8.0</jackson.version>]
[+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, + MediaType type = MediaType.parse(value);, + if (type == null) {, + throw new IllegalArgumentException("Malformed content type: " + value);, + }, + contentType = type;, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, + MediaType type = MediaType.parse(value);, + if (type == null) {, + throw new IllegalArgumentException("Malformed content type: " + value);, + }, + contentType = type;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, + MediaType type = MediaType.parse(headerValue);, + if (type == null) {, + throw methodError("Malformed content type: %s", headerValue);, + }, + contentType = type;, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, + MediaType type = MediaType.parse(value);, + if (type == null) {, + throw new IllegalArgumentException("Malformed
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/http/MultipartTypedOutput.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.UUID;, +import retrofit.http.mime.TypedFile;, + final Map<String, TypedOutput> parts = new LinkedHashMap<String, TypedOutput>();, + private final String boundary;, +, + MultipartTypedOutput() {, + boundary = UUID.randomUUID().toString();, + }, + if (name == null) {, + throw new NullPointerException("Part name must not be null.");, + }, + if (body == null) {, + throw new NullPointerException("Part body must not be null.");, + }, + parts.put(name, body);, + return "multipart/form-data; boundary=" + boundary;, + return -1;, + boolean first = true;, + for (Map.Entry<String, TypedOutput>
[+++ b/pom.xml, + <wire.version>2.1.0</wire.version>, +++ b/pom.xml, + <wire.version>2.1.0</wire.version>, +++ b/retrofit-converters/wire/src/test/java/retrofit2/Phone.java, +// Source file: phone.proto at 6:1, +import com.squareup.wire.WireField;, +import com.squareup.wire.internal.Internal;, + public static final ProtoAdapter<Phone> ADAPTER = new ProtoAdapter_Phone();, +, + private static final long serialVersionUID = 0L;, +, + public static final String DEFAULT_NUMBER = "";, +, + @WireField(, + tag = 1,, + adapter = "com.squareup.wire.ProtoAdapter#STRING", + ), + public final String number;, +, + public Phone(String number) {, + this(number, ByteString.EMPTY);, + }, +, + public Phone(String number, ByteString unknownFields) {, + super(ADAPTER, unknownFields);, + this.number = number;, + }, +, + @Override, + public Builder
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + callback.onFailure(new IOException("canceled"));, + callback.onFailure(new IOException("canceled"));, + throw new IOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + callback.onFailure(new IOException("canceled"));, + callback.onFailure(new IOException("canceled"));, + throw new IOException("canceled");, +++ b/retrofit-mock/src/test/java/retrofit2/mock/MockRetrofitTest.java, + } catch (IOException e) {, + assertThat(e).isExactlyInstanceOf(IOException.class).hasMessage("canceled");, + assertThat(failureRef.get()).isExactlyInstanceOf(IOException.class).hasMessage("canceled");, + } catch (IOException e) {, + assertThat(e).isExactlyInstanceOf(IOException.class).hasMessage("canceled");, + assertThat(failureRef.get()).isExactlyInstanceOf(IOException.class).hasMessage("canceled");]
[+++ b/pom.xml, + <appengine.version>1.9.12</appengine.version>, +++ b/pom.xml, + <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, + return parseResponse(fetchResponse, fetchRequest);, + String mimeType = body.mimeType();, + if (mimeType != null) {, + fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, + }, +, + static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, + // Response URL will be null if it is the same as the request URL., + URL responseUrl = response.getFinalUrl();, + String urlString = (responseUrl != null ? responseUrl : creatingRequest.getURL()).toString();, +, + return new Response(urlString, status, "", headers, body);, +++ b/pom.xml, + <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, + return parseResponse(fetchResponse, fetchRequest);, + String mimeType = body.mimeType();, + if (mimeType
[+++ b/pom.xml, + <okhttp.version>3.8.0</okhttp.version>, +++ b/pom.xml, + <okhttp.version>3.8.0</okhttp.version>, +++ b/retrofit/src/main/java/retrofit2/Response.java, + .message("Response.error()"), +++ b/pom.xml, + <okhttp.version>3.8.0</okhttp.version>, +++ b/retrofit/src/main/java/retrofit2/Response.java, + .message("Response.error()"), +++ b/retrofit/src/test/java/retrofit2/ResponseTest.java, + assertThat(response.message()).isEqualTo("Response.error()");]
[+++ b/pom.xml, + <rxjava.version>1.0.10</rxjava.version>, +++ b/pom.xml, + <rxjava.version>1.0.10</rxjava.version>, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/ObservableBehaviorAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
[+++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, + service.wrongClass();, + service.wrongType();, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, + service.wrongClass();, + service.wrongType();, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, + service.wrongClass();, + service.wrongType();, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, + service.wrongClass();, + service.wrongType();, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, + service.wrongClass();, + service.wrongType();, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, + Converter<?> responseConverter;, + parseResponseType();, + /** Loads {@link #adapter} and {@link #responseConverter}. */, + this.adapter = adapter;, +, + if (responseType == ResponseBody.class) {, + responseConverter = new OkHttpResponseBodyConverter(isStreaming);, + } else {, + if (converterFactory == null) {, + responseConverter = converterFactory.get(responseType);, + }, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, + service.wrongClass();, + service.wrongType();, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, + service.wrongClass();, + service.wrongType();, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, + Converter<?> responseConverter;, + parseResponseType();, + /**
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import java.io.InterruptedIOException;, + private final NetworkBehavior behavior;, + private final ExecutorService backgroundExecutor;, + private final Call<T> delegate;, + private volatile boolean canceled;, + private boolean delaySleep() {, + callback.onFailure(new InterruptedIOException("canceled"));, + callback.onFailure(new InterruptedIOException("canceled"));, + throw new InterruptedIOException("canceled");, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import java.io.InterruptedIOException;, + private final NetworkBehavior behavior;, + private final ExecutorService backgroundExecutor;, + private final Call<T> delegate;, + private volatile boolean canceled;, + private boolean delaySleep() {, + callback.onFailure(new InterruptedIOException("canceled"));, + callback.onFailure(new InterruptedIOException("canceled"));, + throw new InterruptedIOException("canceled");,
[+++ b/pom.xml, + <okhttp.version>2.2.0</okhttp.version>, +++ b/pom.xml, + <okhttp.version>2.2.0</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/client/OkClient.java, + MediaType mediaType = body.contentType();, + return mediaType == null ? null : mediaType.toString();, +++ b/pom.xml, + <okhttp.version>2.2.0</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/client/OkClient.java, + MediaType mediaType = body.contentType();, + return mediaType == null ? null : mediaType.toString();, +++ b/retrofit/src/test/java/retrofit/client/OkClientTest.java, + @Test public void responseNoContentType() throws IOException {, + com.squareup.okhttp.Response okResponse = new com.squareup.okhttp.Response.Builder(), + .code(200).message("OK"), + .body(new TestResponseBody("hello", null)), + .addHeader("foo", "bar"), + .addHeader("kit", "kat"), + .protocol(Protocol.HTTP_1_1), + .request(new com.squareup.okhttp.Request.Builder(), + .url(HOST + "/foo/bar/"), + .get(), + .build()), + .build();, + Response response = OkClient.parseResponse(okResponse);, +, + assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");, + assertThat(response.getStatus()).isEqualTo(200);,
[+++ b/pom.xml, + <wire.version>1.0.1-SNAPSHOT</wire.version>, +++ b/pom.xml, + <wire.version>1.0.1-SNAPSHOT</wire.version>, +++ b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java, + return wire.parseFrom(body.in(), (Class<Message>) c);]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/pom.xml, + <module>samples</module>, +++ b/pom.xml, + <module>samples</module>, +++ /dev/null, +++ b/pom.xml, + <module>samples</module>, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <module>samples</module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <module>samples</module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <module>samples</module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <module>samples</module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit.samples</groupId>, + <artifactId>parent</artifactId>, + <version>1.7.1-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>github-client</artifactId>, + <name>Sample:
[+++ b/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.3-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/CHANGELOG.md, +Version 2.2.0 *(2017-02-21)*, +----------------------------, +, + * RxJava 2.x is now supported with a first-party 'adapter-rxjava2' artifact., + * New: `@QueryName` annotation allows creating a query parameter with no '=' separator or value., + * New: Support for messages generated by Protobuf 3.0 or newer when using the converter for Google's, + protobuf., + * New: RxJava 1.x call adapter now correctly handles broken subscribers whose methods throw exceptions., + * New: Add `toString()` implementations for `Response` and `Result`., + * New: The Moshi converter factory now offers methods for enabling null serialization and lenient, + parsing.,
[+++ b/pom.xml, + <!-- Sample Dependencies -->, + <jsoup.version>1.7.3</jsoup.version>, +, +++ b/pom.xml, + <!-- Sample Dependencies -->, + <jsoup.version>1.7.3</jsoup.version>, +, +++ b/samples/pom.xml, + <dependency>, + <groupId>org.jsoup</groupId>, + <artifactId>jsoup</artifactId>, + <version>${jsoup.version}</version>, + </dependency>, +++ b/pom.xml, + <!-- Sample Dependencies -->, + <jsoup.version>1.7.3</jsoup.version>, +, +++ b/samples/pom.xml, + <dependency>, + <groupId>org.jsoup</groupId>, + <artifactId>jsoup</artifactId>, + <version>${jsoup.version}</version>, + </dependency>, +++ b/samples/src/main/java/com/example/retrofit/Crawler.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of
[+++ b/retrofit/src/main/java/retrofit/http/Field.java, +// Copyright 2013 Square, Inc., +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.PARAMETER;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Named pair for a form-encoded request., + *, + * <pre>, + * &#64;FormUrlEncoded, + * &#64;POST("/"), + * void example(@Field("name") String name, @Field("occupation") String occupation, ..);, + * }, + * </pre>, + */, +@Target(PARAMETER) @Retention(RUNTIME), +public @interface Field {, + String value();, +}, +++ b/retrofit/src/main/java/retrofit/http/Field.java, +// Copyright 2013 Square, Inc., +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.PARAMETER;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Named pair for a
[+++ b/pom.xml, + <gson.version>2.1</gson.version>]
[+++ b/README.md, +++ b/README.md, +++ b/android/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>retrofit-http</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/README.md, +++ b/android/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>retrofit-http</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ b/README.md, +++ b/android/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>retrofit-http</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ /dev/null, +++ b/README.md, +++ b/android/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>retrofit-http</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ /dev/null, +++ /dev/null, +++ b/README.md, +++ b/android/pom.xml, + <dependency>, + <groupId>com.squareup</groupId>, + <artifactId>retrofit-http</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/android/src/main/java/retrofit/android/AndroidMainThread.java, +import retrofit.http.MainThread;, +++ /dev/null, +++ /dev/null, +++
[+++ b/pom.xml, + <version>1.7.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>1.7.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.7.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.7.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.7.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.7.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.7.1-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, + static final class RelativeUrl extends ParameterHandler<Object> {, + @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, + static final class RelativeUrl extends ParameterHandler<Object> {, + @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, + void setRelativeUrl(Object relativeUrl) {, + if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, + this.relativeUrl = relativeUrl.toString();, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, + static final class RelativeUrl extends ParameterHandler<Object> {, + @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, + void setRelativeUrl(Object relativeUrl) {, + if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, + this.relativeUrl = relativeUrl.toString();, +++
[+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, + static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";, + static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");, + static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);, + final okhttp3.Call.Factory callFactory;, + final CallAdapter<?> callAdapter;, + Request toRequest(Object... args) throws IOException {, + T toResponse(ResponseBody body) throws IOException {, + static Class<?> boxIfPrimitive(Class<?> type) {, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, + static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";, + static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");, + static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);, + final okhttp3.Call.Factory callFactory;, + final CallAdapter<?> callAdapter;, + Request toRequest(Object... args) throws IOException {, + T
[+++ b/pom.xml, + <kotlin.version>1.2.60</kotlin.version>, + <groupId>org.jetbrains.kotlin</groupId>, + <artifactId>kotlin-stdlib</artifactId>, + <version>${kotlin.version}</version>, + </dependency>, + <dependency>, +++ b/pom.xml, + <kotlin.version>1.2.60</kotlin.version>, + <groupId>org.jetbrains.kotlin</groupId>, + <artifactId>kotlin-stdlib</artifactId>, + <version>${kotlin.version}</version>, + </dependency>, + <dependency>, +++ b/retrofit/pom.xml, + <dependency>, + <groupId>org.jetbrains.kotlin</groupId>, + <artifactId>kotlin-stdlib</artifactId>, + <optional>true</optional>, + </dependency>, +++ b/pom.xml, + <kotlin.version>1.2.60</kotlin.version>, + <groupId>org.jetbrains.kotlin</groupId>, + <artifactId>kotlin-stdlib</artifactId>, + <version>${kotlin.version}</version>, + </dependency>, + <dependency>, +++ b/retrofit/pom.xml, + <dependency>, + <groupId>org.jetbrains.kotlin</groupId>, + <artifactId>kotlin-stdlib</artifactId>, + <optional>true</optional>, + </dependency>, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +import kotlin.Unit;, + /** Not volatile because we don't mind multiple threads discovering this. */, + private boolean checkForKotlinUnit = true;, +, + if (checkForKotlinUnit) {, + try {, + if
[+++ b/pom.xml, + <moshi.version>1.5.0</moshi.version>, + <robolectric.version>3.8</robolectric.version>, +++ b/pom.xml, + <moshi.version>1.5.0</moshi.version>, + <robolectric.version>3.8</robolectric.version>, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, + reader.nextName();, + assertThat(e).hasMessage("Cannot skip unexpected STRING at $.taco");, +++ b/pom.xml, + <moshi.version>1.5.0</moshi.version>, + <robolectric.version>3.8</robolectric.version>, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, + reader.nextName();, + assertThat(e).hasMessage("Cannot skip unexpected STRING at $.taco");, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/pom.xml, + <moshi.version>1.5.0</moshi.version>, + <robolectric.version>3.8</robolectric.version>, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, + reader.nextName();, + assertThat(e).hasMessage("Cannot skip unexpected STRING at $.taco");, +++ b/retrofit/src/test/java/retrofit2/CompletableFutureAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +import static org.robolectric.annotation.Config.NONE;, +@Config(sdk = NEWEST_SDK, manifest = NONE), +++ b/pom.xml, + <moshi.version>1.5.0</moshi.version>, + <robolectric.version>3.8</robolectric.version>, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +
[+++ b/CHANGELOG.md, +Version 1.1.0 *(In Development)*, +--------------------------------, +, + * Introduce `RequestInterceptor` to replace `RequestHeaders`. An interceptor provided to the, + `RestAdapter.Builder` will be called for every request and allow setting both headers and, + additional path parameter replacements., +, +, +++ b/CHANGELOG.md, +Version 1.1.0 *(In Development)*, +--------------------------------, +, + * Introduce `RequestInterceptor` to replace `RequestHeaders`. An interceptor provided to the, + `RestAdapter.Builder` will be called for every request and allow setting both headers and, + additional path parameter replacements., +, +, +++ b/pom.xml, + <version>1.1.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.0 *(In Development)*, +--------------------------------, +, + * Introduce `RequestInterceptor` to
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + * Inspects the annotations on an interface method to construct a reusable service method that, + * speaks HTTP. This requires potentially-expensive reflection so it is best to build each service, + * method only once and reuse it., + static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotations(, + Retrofit retrofit, Method method, RequestFactory requestFactory) {, + CallAdapter<ResponseT, ReturnT> callAdapter = createCallAdapter(retrofit, method);, + Type responseType = callAdapter.responseType();, + Converter<ResponseBody, ResponseT> responseConverter =, + createResponseConverter(retrofit, method, responseType);, +, + okhttp3.Call.Factory callFactory = retrofit.callFactory;, + return new HttpServiceMethod<>(requestFactory, callFactory, callAdapter, responseConverter);, + private static <ResponseT, ReturnT> CallAdapter<ResponseT, ReturnT> createCallAdapter(,
[+++ b/retrofit-adapters/pom.xml, + <module>rxjava-mock</module>, +++ b/retrofit-adapters/pom.xml, + <module>rxjava-mock</module>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit-adapters</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>adapter-rxjava-mock</artifactId>, + <name>Adapter: RxJava Mock</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit-mock</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>adapter-rxjava</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>io.reactivex</groupId>, + <artifactId>rxjava</artifactId>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>,
[+++ b/pom.xml, + <version>2.0.2</version>, + <tag>parent-2.0.2</tag>, +++ b/pom.xml, + <version>2.0.2</version>, + <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.2</version>, +++ b/pom.xml, + <version>2.0.2</version>, + <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.2</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.2</version>, +++ b/pom.xml, + <version>2.0.2</version>, + <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.2</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.2</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.2</version>, +++ b/pom.xml, + <version>2.0.2</version>, + <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.2</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.2</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.2</version>, +++ b/pom.xml, + <version>2.0.2</version>, + <tag>parent-2.0.2</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.2</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.2</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.2</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.2</version>, +++ b/pom.xml, +
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0-beta1</version>, +compile 'com.squareup.retrofit:retrofit:2.0.0-beta1', +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0-beta1</version>, +compile 'com.squareup.retrofit:retrofit:2.0.0-beta1', +++ b/deploy_website.sh, +# Delete everything that isn't versioned (1.x, 2.x), +ls | grep -E -v '^\d+\.x$' | xargs rm -rf, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0-beta1</version>, +compile 'com.squareup.retrofit:retrofit:2.0.0-beta1', +++ b/deploy_website.sh, +# Delete everything that isn't versioned (1.x, 2.x), +ls | grep -E -v '^\d+\.x$' | xargs rm -rf, +++ b/pom.xml, + <gson.version>2.3.1</gson.version>, + <wire.version>1.7.0</wire.version>, + <moshi.version>0.9.0</moshi.version>, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0-beta1</version>, +compile 'com.squareup.retrofit:retrofit:2.0.0-beta1', +++ b/deploy_website.sh, +# Delete everything that isn't versioned (1.x, 2.x), +ls | grep -E -v '^\d+\.x$' |
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import retrofit.http.android.AndroidApacheClient;, +import retrofit.http.android.MainThreadExecutor;, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import retrofit.http.android.AndroidApacheClient;, +import retrofit.http.android.MainThreadExecutor;, +++ b/retrofit/src/main/java/retrofit/http/RequestBuilder.java, +import retrofit.http.mime.TypedOutput;, +import retrofit.http.mime.TypedString;, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.http.mime.TypedInput;, +import retrofit.http.mime.TypedOutput;, +++
[+++ b/build-macros.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!-- Copyright 2010 Square, Inc. -->, +, +<!--, + - Ant macro definitions., + -->, +<project name="Macros" basedir="." default="help">, +, + <target name="help">, + <echo>Import this build file into the main build.xml.</echo>, + </target>, +, + <!--, + - Compiles a module., + -->, + <macrodef name="compile.module">, + <attribute name="module", + description="The directory name under 'modules'."/>, + <element name="compile.main.classpath" optional="true"/>, + <element name="compile.tests.classpath" optional="true"/>, +, + <sequential>, + <mkdir dir="${build.dir}/@{module}/main"/>, +, + <!-- Compile src/* and place classes in build/[module]/main. -->, + <javac srcdir="modules/@{module}/src", + destdir="${build.dir}/@{module}/main", + fork="true", + debug="true", + includeantruntime="false">, + <classpath>,
[+++ b/.travis.yml]
[+++ b/android-native/pom.xml, + <version>0.6.0-rc2</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc2</version>, +++ b/android/pom.xml, + <version>0.6.0-rc2</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc2</version>, +++ b/android/pom.xml, + <version>0.6.0-rc2</version>, +++ b/core/pom.xml, + <version>0.6.0-rc2</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc2</version>, +++ b/android/pom.xml, + <version>0.6.0-rc2</version>, +++ b/core/pom.xml, + <version>0.6.0-rc2</version>, +++ b/http/pom.xml, + <version>0.6.0-rc2</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc2</version>, +++ b/android/pom.xml, + <version>0.6.0-rc2</version>, +++ b/core/pom.xml, + <version>0.6.0-rc2</version>, +++ b/http/pom.xml, + <version>0.6.0-rc2</version>, +++ b/io/pom.xml, + <version>0.6.0-rc2</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc2</version>, +++ b/android/pom.xml, + <version>0.6.0-rc2</version>, +++ b/core/pom.xml, + <version>0.6.0-rc2</version>, +++ b/http/pom.xml, + <version>0.6.0-rc2</version>, +++ b/io/pom.xml, + <version>0.6.0-rc2</version>, +++ b/pom.xml, + <version>0.6.0-rc2</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc2</version>, +++ b/android/pom.xml, + <version>0.6.0-rc2</version>, +++ b/core/pom.xml, + <version>0.6.0-rc2</version>, +++ b/http/pom.xml, +
[+++ b/checkstyle.xml, + <!--<module name="MethodLength"/>-->
[+++ b/.gitignore, +build, +out, +lib, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +out, +lib, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build,
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, + if (value == null) {, + throw new IllegalArgumentException(, + "Multipart part \"" + name + "\" value must not be null.");, + }, +++ b/CHANGELOG.md, +++ b/pom.xml,
[+++ b/pom.xml, + <okhttp.version>3.8.1</okhttp.version>]
[+++ b/pom.xml, + <gson.version>2.3.1</gson.version>]
[+++ b/pom.xml, + <okhttp.version>3.2.0</okhttp.version>, + <protobuf.version>2.6.1</protobuf.version>, + <jackson.version>2.7.2</jackson.version>, + <wire.version>2.1.1</wire.version>, + <guava.version>19.0</guava.version>]
[+++ b/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, +
[+++ b/revision.properties, +retrofit.revision=0.4-SNAPSHOT]
[+++ b/retrofit/src/main/java/retrofit2/Response.java, + * Create a synthetic successful response using {@code headers} with {@code body} as the, + * deserialized body., + */, + public static <T> Response<T> success(T body, Headers headers) {, + if (headers == null) throw new NullPointerException("headers == null");, + return success(body, new okhttp3.Response.Builder() //, + .code(200), + .message("OK"), + .protocol(Protocol.HTTP_1_1), + .headers(headers), + .request(new Request.Builder().url("http://localhost").build()), + .build());, + }, +, + /**, +++ b/retrofit/src/main/java/retrofit2/Response.java, + * Create a synthetic successful response using {@code headers} with {@code body} as the, + * deserialized body., + */, + public static <T> Response<T> success(T body, Headers headers)
[+++ b/retrofit-converters/guava/README.md, +Guava Converter, +===============, +, +A `Converter` which supports Guava's `Optional<T>` by delegating to other converters for `T`, +and then wrapping it into `Optional`., +, +, +Download, +--------, +, +Download [the latest JAR][1] or grab via [Maven][2]:, +```xml, +<dependency>, + <groupId>com.squareup.retrofit2</groupId>, + <artifactId>converter-guava</artifactId>, + <version>latest.version</version>, +</dependency>, +```, +or [Gradle][2]:, +```groovy, +compile 'com.squareup.retrofit2:converter-guava:latest.version', +```, +, +Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap]., +, +, +, + [1]: https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=converter-guava&v=LATEST, + [2]: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.squareup.retrofit2%22%20a%3A%22converter-guava%22, + [snap]: https://oss.sonatype.org/content/repositories/snapshots/, +++ b/retrofit-converters/guava/README.md, +Guava Converter, +===============, +, +A `Converter` which supports Guava's `Optional<T>` by delegating to other converters for `T`, +and then
[+++ b/pom.xml, + <httpcomponents.version>4.0.1</httpcomponents.version>]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/Result.java, +, + @Override public String toString() {, + if (error != null) {, + return "Result{isError=true, error=\"" + error + "\"}";, + }, + return "Result{isError=false, response=" + response + '}';, + }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/Result.java, +, + @Override public String toString() {, + if (error != null) {, + return "Result{isError=true, error=\"" + error + "\"}";, + }, + return "Result{isError=false, response=" + response + '}';, + }, +++ b/retrofit/src/main/java/retrofit2/Response.java, +, + @Override public String toString() {, + return rawResponse.toString();, + }]
[+++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.JsonIOException;, +import com.google.gson.stream.JsonToken;, + T result = adapter.read(jsonReader);, + if (jsonReader.peek() != JsonToken.END_DOCUMENT) {, + throw new JsonIOException("JSON document was not fully consumed.");, + }, + return result;, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, +import com.google.gson.JsonIOException;, +import com.google.gson.stream.JsonToken;, + T result = adapter.read(jsonReader);, + if (jsonReader.peek() != JsonToken.END_DOCUMENT) {, + throw new JsonIOException("JSON document was not fully consumed.");, + }, + return result;, +++ b/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java, +import com.google.gson.JsonIOException;, +import retrofit2.http.GET;, +import static org.junit.Assert.fail;, + static final class Value {, + static final TypeAdapter<Value> BROKEN_ADAPTER = new TypeAdapter<Value>() {, + @Override public void write(JsonWriter out, Value value) {, + throw new AssertionError();,
[+++ b/.gitignore, +.classpath, +.project, +eclipsebin, +++ b/.gitignore, +.classpath, +.project, +eclipsebin, +++ b/.idea/libraries/JARs.xml, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.gitignore, +.classpath, +.project, +eclipsebin, +++ b/.idea/libraries/JARs.xml, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, + <component name="ProjectResources">, + <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>, + </component>, + <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.gitignore, +.classpath, +.project, +eclipsebin, +++ b/.idea/libraries/JARs.xml, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, + <component name="ProjectResources">, + <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>, + </component>, + <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">, +++ b/.idea/modules.xml, + <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/.gitignore, +.classpath, +.project, +eclipsebin, +++ b/.idea/libraries/JARs.xml, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-1.6.jar!/" />, +++ b/.idea/misc.xml, + <component name="ProjectResources">, + <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>,
[+++ b/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.0.2-SNAPSHOT</version>]
[+++ b/pom.xml, + <version>1.2.1</version>, +++ b/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.1</version>, +++ b/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.1</version>, +++ b/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.1</version>, +++ b/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.2.1</version>, +++ b/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.2.1</version>, +++ b/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.2.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/pom.xml, + <rxjava.version>0.19.0</rxjava.version>]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +public final class GuavaCallAdapterFactory extends CallAdapter.Factory {, + if (getRawType(returnType) != ListenableFuture.class) {, + Type innerType = getParameterUpperBound(0, (ParameterizedType) returnType);, + if (getRawType(innerType) != Response.class) {, + Type responseType = getParameterUpperBound(0, (ParameterizedType) innerType);, + @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +public final class GuavaCallAdapterFactory extends CallAdapter.Factory {, + if (getRawType(returnType) != ListenableFuture.class) {, + Type innerType = getParameterUpperBound(0, (ParameterizedType) returnType);, + if (getRawType(innerType) != Response.class) {, + Type responseType = getParameterUpperBound(0, (ParameterizedType) innerType);, + @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +public final class GuavaCallAdapterFactory extends CallAdapter.Factory {,
[+++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, + retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, + retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +, + @Test public void delegates() throws IOException {, + Retrofit retrofit = new Retrofit.Builder(), + .baseUrl(server.url("/")), + .addConverterFactory(new Converter.Factory() {, + @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, + Annotation[] annotations, Retrofit retrofit) {, + if (getRawType(type) != Object.class) {, + return null;, + }, + return new Converter<ResponseBody, Object>() {, + @Override public Object convert(ResponseBody value) {, + return null;, + }, + };, + }, + }), + .addConverterFactory(GuavaOptionalConverterFactory.create()), + .build();, +, + server.enqueue(new
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/checkstyle.xml, + <module name="Indentation">
[+++ b/pom.xml, + <okhttp.version>3.9.1</okhttp.version>]
[+++ b/pom.xml, + <version>2.4.2</version>, + <dependencies>, + <dependency>, + <groupId>org.apache.maven.scm</groupId>, + <artifactId>maven-scm-provider-gitexe</artifactId>, + <version>1.9</version>, + </dependency>, + </dependencies>]
[+++ b/pom.xml, + <moshi.version>1.5.0</moshi.version>]
[+++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <scala.version>2.12.4</scala.version>, +++ b/pom.xml, + <scala.version>2.12.4</scala.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, + return adapter.read(jsonReader);, +++ b/pom.xml, + <scala.version>2.12.4</scala.version>, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java, + return adapter.read(jsonReader);, +++ b/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java]
[+++ b/pom.xml, + <version>2.3.0</version>, + <tag>parent-2.3.0</tag>, +++ b/pom.xml, + <version>2.3.0</version>, + <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.3.0</version>, +++ b/pom.xml, + <version>2.3.0</version>, + <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.3.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.3.0</version>, +++ b/pom.xml, + <version>2.3.0</version>, + <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.3.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.3.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.3.0</version>, +++ b/pom.xml, + <version>2.3.0</version>, + <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.3.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.3.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.3.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.3.0</version>, +++ b/pom.xml, + <version>2.3.0</version>, + <tag>parent-2.3.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.3.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.3.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.3.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.3.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, + <version>2.3.0</version>, +++ b/pom.xml, +
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, + .baseUrl("https://api.example.com"), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, + .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, + .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, + .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, + .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/README.md, + .baseUrl("https://api.example.com"), +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, + .baseUrl(server.getUrl("/").toString()), +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java, +
[+++ b/pom.xml, + <rxjava.version>1.0.13</rxjava.version>, +++ b/pom.xml, + <rxjava.version>1.0.13</rxjava.version>, +++ /dev/null, +++ b/pom.xml, + <rxjava.version>1.0.13</rxjava.version>, +++ /dev/null, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + *
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ /dev/null, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, + public static void assertMultipart(TypedOutput typedOutput) {, + assertThat(typedOutput).isInstanceOf(MultipartTypedOutput.class);, + }, +, + public static void assertBytes(byte[] bytes, String expected) throws Exception {, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, + public static void assertMultipart(TypedOutput typedOutput) {, + assertThat(typedOutput).isInstanceOf(MultipartTypedOutput.class);, + }, +, + public static void assertBytes(byte[] bytes, String expected) throws Exception {, +++ /dev/null, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +
[+++ b/pom.xml, + <rxjava.version>0.19.0</rxjava.version>, +++ b/pom.xml, + <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, +++ b/pom.xml, + <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, +++ b/retrofit/src/test/java/retrofit/EndpointsTest.java, +// Copyright 2014 Square, Inc., +package retrofit;, +, +import org.junit.Test;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +public class EndpointsTest {, + @Test public void endpointOnly() {, + Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com");, + assertThat(endpoint.getUrl()).isEqualTo("http://example.com");, + }, +, + @Test public void endpointAndName() {, + Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com", "production");, + assertThat(endpoint.getUrl()).isEqualTo("http://example.com");, + assertThat(endpoint.getName()).isEqualTo("production");, + }, +}, +++ b/pom.xml, + <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, +++ b/retrofit/src/test/java/retrofit/EndpointsTest.java, +// Copyright 2014 Square, Inc., +package retrofit;, +, +import org.junit.Test;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +public class EndpointsTest {,
[+++ b/checkstyle.xml, + <module name="NewlineAtEndOfFile">
[+++ b/pom.xml, + <protobuf.version>3.5.0</protobuf.version>]
[+++ b/retrofit/src/main/java/retrofit2/HttpException.java, +import javax.annotation.Nullable;, +, + public @Nullable Response<?> response() {]
[+++ b/pom.xml, + <version>1.6.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>1.6.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.6.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.6.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.6.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.6.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.6.2-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <gson.version>2.2.3-SNAPSHOT</gson.version>, + <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, + <repositories>, + <repository>, + <id>sonatype-nexus-snapshots</id>, + <name>Sonatype Nexus Snapshots</name>, + <url>https://oss.sonatype.org/content/repositories/snapshots</url>, + <releases>, + <enabled>false</enabled>, + </releases>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + </repositories>, +]
[+++ b/pom.xml, + <gson.version>2.3</gson.version>]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import java.lang.reflect.ParameterizedType;, +import java.net.URI;, +import java.util.LinkedHashSet;, +import java.util.Map;, +import java.util.Set;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +import okhttp3.Headers;, +import okhttp3.HttpUrl;, +import okhttp3.MediaType;, +import okhttp3.MultipartBody;, +import okhttp3.RequestBody;, +import retrofit2.http.Body;, +import retrofit2.http.DELETE;, +import retrofit2.http.Field;, +import retrofit2.http.FieldMap;, +import retrofit2.http.FormUrlEncoded;, +import retrofit2.http.GET;, +import retrofit2.http.HEAD;, +import retrofit2.http.HTTP;, +import retrofit2.http.Header;, +import retrofit2.http.HeaderMap;, +import retrofit2.http.Multipart;, +import retrofit2.http.OPTIONS;, +import retrofit2.http.PATCH;, +import retrofit2.http.POST;, +import retrofit2.http.PUT;, +import retrofit2.http.Part;, +import retrofit2.http.PartMap;, +import retrofit2.http.Path;, +import retrofit2.http.Query;, +import retrofit2.http.QueryMap;, +import retrofit2.http.QueryName;, +import retrofit2.http.Url;, + // Upper and lower characters, digits, underscores, and hyphens, starting with a character., + static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";, + static final Pattern
[+++ b/pom.xml, + <gson.version>2.2.2</gson.version>, + <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, + <repositories>, + <repository>, + <id>sonatype-nexus-snapshots</id>, + <name>Sonatype Nexus Snapshots</name>, + <url>https://oss.sonatype.org/content/repositories/snapshots</url>, + <releases>, + <enabled>false</enabled>, + </releases>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + </repositories>, +, +++ b/pom.xml, + <gson.version>2.2.2</gson.version>, + <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, + <repositories>, + <repository>, + <id>sonatype-nexus-snapshots</id>, + <name>Sonatype Nexus Snapshots</name>, + <url>https://oss.sonatype.org/content/repositories/snapshots</url>, + <releases>, + <enabled>false</enabled>, + </releases>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + </repositories>, +, +++ b/retrofit/pom.xml, +++ b/pom.xml, + <gson.version>2.2.2</gson.version>, + <!-- Bring in Maven
[+++ b/samples/pom.xml, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>converter-gson</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/samples/pom.xml, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>converter-gson</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/samples/src/main/java/com/example/retrofit/SimpleService.java, +import retrofit.GsonConverterFactory;, + .addConverterFactory(GsonConverterFactory.create())]
[+++ b/pom.xml, + <rxjava.version>0.19.0</rxjava.version>, +++ b/pom.xml, + <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java]
[+++ b/README.md, + * Android - Contains Android-specific utility classes., +++ b/README.md, + * Android - Contains Android-specific utility classes., +++ /dev/null, +++ b/README.md, + * Android - Contains Android-specific utility classes., +++ /dev/null, +++ /dev/null, +++ b/README.md, + * Android - Contains Android-specific utility classes., +++ /dev/null, +++ /dev/null, +++ b/io/src/main/java/retrofit/io/QueueFile.java, +/*, + * Copyright (C) 2010 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, +
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +import rx.Scheduler;, + static CallAdapter<Completable> createCallAdapter(Scheduler scheduler) {, + return new CompletableCallAdapter(scheduler);, +, + static class CompletableCallAdapter implements CallAdapter<Completable> {, + private final Scheduler scheduler;, +, + CompletableCallAdapter(Scheduler scheduler) {, + this.scheduler = scheduler;, + }, +, + @Override public Type responseType() {, + return Void.class;, + }, +, + @Override public Completable adapt(Call call) {, + Completable completable = Completable.create(new CompletableCallOnSubscribe(call));, + if (scheduler != null) {, + return completable.subscribeOn(scheduler);, + }, + return completable;, + }, + }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +import rx.Scheduler;, + static CallAdapter<Completable> createCallAdapter(Scheduler scheduler) {, + return new CompletableCallAdapter(scheduler);, +, + static
[+++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, + return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, + return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;, +import io.reactivex.plugins.RxJavaPlugins;, +, + @Test public void observableAssembly() {, + try {, + final Observable<String> justMe = Observable.just("me");, + RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {, + @Override public Observable apply(Observable f) {, + return justMe;, + }, + });, + assertThat(service.body()).isEqualTo(justMe);, + } finally {, + RxJavaPlugins.reset();, + }, + }, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, + return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;, +import io.reactivex.plugins.RxJavaPlugins;, +, + @Test public void observableAssembly() {, + try {, + final Observable<String> justMe = Observable.just("me");, + RxJavaPlugins.setOnObservableAssembly(new Function<Observable,
[+++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="ProjectCodeStyleSettingsManager">, + <option name="PER_PROJECT_SETTINGS">, + <value />, + </option>, + </component>, +</project>, +, +++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="ProjectCodeStyleSettingsManager">, + <option name="PER_PROJECT_SETTINGS">, + <value />, + </option>, + </component>, +</project>, +, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +++ b/.idea/codeStyleSettings.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="ProjectCodeStyleSettingsManager">, + <option name="PER_PROJECT_SETTINGS">, + <value />, + </option>, + </component>, +</project>, +, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +import static org.easymock.EasyMock.capture;, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.expect;, +import static org.easymock.EasyMock.expectLastCall;, +import static org.easymock.EasyMock.isA;, +import static org.easymock.EasyMock.replay;, +import static org.easymock.EasyMock.verify;]
[+++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, + private final MockRxSupport mockRxSupport;, + } else {, + mockRxSupport = null;, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, + private final MockRxSupport mockRxSupport;, + } else {, + mockRxSupport = null;, +++ b/retrofit-samples/mock-github-client/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<!--, + ~ Copyright 2013 Square, Inc., + -->, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit.samples</groupId>, + <artifactId>parent</artifactId>, + <version>1.2.3-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>mock-github-client</artifactId>, + <name>Sample: Mock GitHub Client</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit-mock</artifactId>, + <version>${project.version}</version>, + </dependency>, + </dependencies>,
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java]
[+++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import com.squareup.moshi.JsonDataException;, +import com.squareup.moshi.JsonReader;, + JsonReader reader = JsonReader.of(source);, + T result = adapter.fromJson(reader);, + if (reader.peek() != JsonReader.Token.END_DOCUMENT) {, + throw new JsonDataException("JSON document was not fully consumed.");, + }, + return result;, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import com.squareup.moshi.JsonDataException;, +import com.squareup.moshi.JsonReader;, + JsonReader reader = JsonReader.of(source);, + T result = adapter.fromJson(reader);, + if (reader.peek() != JsonReader.Token.END_DOCUMENT) {, + throw new JsonDataException("JSON document was not fully consumed.");, + }, + return result;, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +import retrofit2.http.GET;, + static final class Value {, + final String theName;, +, + Value(String theName) {, + this.theName = theName;, + }, + },
[+++ b/pom.xml, + <version>2.2.0</version>, + <tag>parent-2.2.0</tag>, +++ b/pom.xml, + <version>2.2.0</version>, + <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.2.0</version>, +++ b/pom.xml, + <version>2.2.0</version>, + <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.2.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.2.0</version>, +++ b/pom.xml, + <version>2.2.0</version>, + <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.2.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.2.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.2.0</version>, +++ b/pom.xml, + <version>2.2.0</version>, + <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.2.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.2.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.2.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.2.0</version>, +++ b/pom.xml, + <version>2.2.0</version>, + <tag>parent-2.2.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.2.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.2.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.2.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.2.0</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, + <version>2.2.0</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <assertj.version>1.5.0</assertj.version>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <version>${assertj.version}</version>, +++ b/pom.xml, + <assertj.version>1.5.0</assertj.version>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <version>${assertj.version}</version>, +++ b/retrofit-converters/jackson/pom.xml, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, +++ b/pom.xml, + <assertj.version>1.5.0</assertj.version>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <version>${assertj.version}</version>, +++ b/retrofit-converters/jackson/pom.xml, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/pom.xml, + <assertj.version>1.5.0</assertj.version>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <version>${assertj.version}</version>, +++ b/retrofit-converters/jackson/pom.xml, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/retrofit-converters/protobuf/pom.xml, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, +++ b/pom.xml, + <assertj.version>1.5.0</assertj.version>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <version>${assertj.version}</version>, +++ b/retrofit-converters/jackson/pom.xml, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +++ b/retrofit-converters/protobuf/pom.xml, + <groupId>org.assertj</groupId>,
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + final NetworkBehavior behavior;, + final ExecutorService backgroundExecutor;, + final Call<T> delegate;, + volatile boolean canceled;, + boolean delaySleep() {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + final NetworkBehavior behavior;, + final ExecutorService backgroundExecutor;, + final Call<T> delegate;, + volatile boolean canceled;, + boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, + final Retrofit retrofit;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + final NetworkBehavior behavior;, + final ExecutorService backgroundExecutor;, + final Call<T> delegate;, + volatile boolean canceled;, + boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +
[+++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, + private static String getMessage(Response<?> response) {, + if (response == null) throw new NullPointerException("response == null");, + return "HTTP " + response.code() + " " + response.message();, + }, +, + super(getMessage(response));, +++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, + private static String getMessage(Response<?> response) {, + if (response == null) throw new
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final Object[] args;, + OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final Object[] args;, + OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, + okhttp3.Request create(Object[] args) throws IOException {, + int argumentCount = args.length;, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final Object[] args;, + OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, + okhttp3.Request create(Object[] args) throws IOException {, + int argumentCount = args.length;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java]
[+++ b/retrofit-adapters/guava/pom.xml, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-jar-plugin</artifactId>, + <configuration>, + <archive>, + <manifestEntries>, + <Automatic-Module-Name>retrofit2.adapter.guava</Automatic-Module-Name>, + </manifestEntries>, + </archive>, + </configuration>, + </plugin>, + </plugins>, + </build>, +++ b/retrofit-adapters/guava/pom.xml, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-jar-plugin</artifactId>, + <configuration>, + <archive>, + <manifestEntries>, + <Automatic-Module-Name>retrofit2.adapter.guava</Automatic-Module-Name>, + </manifestEntries>, + </archive>, + </configuration>, + </plugin>, + </plugins>, + </build>, +++ b/retrofit-adapters/java8/pom.xml, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-jar-plugin</artifactId>, + <configuration>, + <archive>, + <manifestEntries>, + <Automatic-Module-Name>retrofit2.adapter.java8</Automatic-Module-Name>, + </manifestEntries>, + </archive>, + </configuration>, + </plugin>, +++ b/retrofit-adapters/guava/pom.xml, +, + <build>, + <plugins>, + <plugin>,
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import com.google.common.reflect.TypeToken;, + return RequestBody.create(MediaType.parse("text/plain"), String.valueOf(object));, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import com.google.common.reflect.TypeToken;, + return RequestBody.create(MediaType.parse("text/plain"), String.valueOf(object));, +++ b/retrofit-converters/gson/README.md, +Gson Converter, +==============, +, +A `Converter` which uses [Gson][1] for serialization to and from JSON., +, +A default `Gson` instance will be created or one can be configured and passed to the, +`GsonConverter` construction to further control the serialization., +, +, + [1]: https://github.com/google/gson, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import com.google.common.reflect.TypeToken;, + return RequestBody.create(MediaType.parse("text/plain"), String.valueOf(object));, +++ b/retrofit-converters/gson/README.md, +Gson Converter, +==============, +, +A `Converter` which uses [Gson][1] for serialization to and from JSON., +, +A default `Gson` instance will be created or one can be
[+++ b/http/pom.xml, + <version>0.8.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.8.0-SNAPSHOT</version>, +++ b/http/src/main/java/retrofit/http/Callback.java, + *, + * @param error message to show user, or null if no message was returned, + void sessionExpired(ServerError error);, + * @param error message to show user, or null if no message was returned, + void serverError(ServerError error, int statusCode);, +, +, + /** JSON object for parsing server error responses. */, + static class ServerError {, + public final String message;, +, + public ServerError(String message) {, + this.message = message;, + }, + }, +++ b/http/pom.xml, + <version>0.8.0-SNAPSHOT</version>, +++ b/http/src/main/java/retrofit/http/Callback.java, + *, + * @param
[+++ b/pom.xml, + <rxjava.version>0.17.1</rxjava.version>, +++ b/pom.xml, + <rxjava.version>0.17.1</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Subscriber;, + return Observable.create(new Observable.OnSubscribe<Object>() {, + @Override public void call(Subscriber<? super Object> subscriber) {, + observable.subscribe(subscriber);, + Observable.error(throwable).subscribe(subscriber);, +++ b/pom.xml, + <rxjava.version>0.17.1</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Subscriber;, + return Observable.create(new Observable.OnSubscribe<Object>() {, + @Override public void call(Subscriber<? super Object> subscriber) {, + observable.subscribe(subscriber);, + Observable.error(throwable).subscribe(subscriber);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +import rx.functions.Action1;, +++ b/pom.xml, + <rxjava.version>0.17.1</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Subscriber;, + return Observable.create(new Observable.OnSubscribe<Object>() {, + @Override public void call(Subscriber<? super Object> subscriber) {, + observable.subscribe(subscriber);, + Observable.error(throwable).subscribe(subscriber);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +import rx.functions.Action1;, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import rx.Subscriber;, + return Observable.create(new Observable.OnSubscribe<Object>() {,
[+++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/.idea/modules.xml, + <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/.idea/modules.xml, + <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/modules/android/.gitignore, +android-ndk, +obj, +++ b/.idea/modules.xml, + <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/modules/android/.gitignore, +android-ndk, +obj, +++ b/modules/android/README.jni, +The native portions of Retofit's Android module live in ./jni., +, +Building:, +, + ./build-jni.sh, +, +Installation:, +, + Copy ./libs to your Android project root., +, +Testing:, +, + Run test_app on a device or emulator., +++ b/.idea/modules.xml, + <module fileurl="file://$PROJECT_DIR$/modules/android/test_app/test_app.iml" filepath="$PROJECT_DIR$/modules/android/test_app/test_app.iml" />, +++ b/modules/android/.gitignore, +android-ndk, +obj, +++ b/modules/android/README.jni, +The native portions of Retofit's Android module live in ./jni., +, +Building:, +, + ./build-jni.sh, +, +Installation:, +,
[+++ b/android-native/pom.xml, + <version>0.6.0-rc4</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc4</version>, +++ b/android/pom.xml, + <version>0.6.0-rc4</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc4</version>, +++ b/android/pom.xml, + <version>0.6.0-rc4</version>, +++ b/core/pom.xml, + <version>0.6.0-rc4</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc4</version>, +++ b/android/pom.xml, + <version>0.6.0-rc4</version>, +++ b/core/pom.xml, + <version>0.6.0-rc4</version>, +++ b/http/pom.xml, + <version>0.6.0-rc4</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc4</version>, +++ b/android/pom.xml, + <version>0.6.0-rc4</version>, +++ b/core/pom.xml, + <version>0.6.0-rc4</version>, +++ b/http/pom.xml, + <version>0.6.0-rc4</version>, +++ b/io/pom.xml, + <version>0.6.0-rc4</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc4</version>, +++ b/android/pom.xml, + <version>0.6.0-rc4</version>, +++ b/core/pom.xml, + <version>0.6.0-rc4</version>, +++ b/http/pom.xml, + <version>0.6.0-rc4</version>, +++ b/io/pom.xml, + <version>0.6.0-rc4</version>, +++ b/pom.xml, + <version>0.6.0-rc4</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc4</version>, +++ b/android/pom.xml, + <version>0.6.0-rc4</version>, +++ b/core/pom.xml, + <version>0.6.0-rc4</version>, +++ b/http/pom.xml, +
[+++ b/pom.xml, + <okhttp.version>3.0.0</okhttp.version>, +++ b/pom.xml, + <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, + assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, + assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +++ b/pom.xml, + <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, + assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, + assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + callback.onFailure(BehaviorCall.this, new IOException("canceled"));, + callback.onFailure(BehaviorCall.this, new IOException("canceled"));, + callback.onFailure(BehaviorCall.this, behavior.failureException());, + @Override public void onResponse(Call<T> call, Response<T> response) {, + callback.onResponse(call, response);, + @Override public void onFailure(Call<T> call, Throwable t) {, + callback.onFailure(call, t);, + @Override public void onResponse(Call<T> call, Response<T> response) {, + @Override public void onFailure(Call<T> call, Throwable t) {, +++ b/pom.xml, + <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, + assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP
[+++ b/checkstyle.xml, + <module name="NewlineAtEndOfFile">
[+++ b/pom.xml, + <wire.version>1.0.1</wire.version>]
[+++ b/pom.xml, + <jaxb.version>2.2.12</jaxb.version><!-- 2.3.0 breaks due to https://github.com/mojohaus/animal-sniffer/issues/29 -->, + <groupId>javax.xml.bind</groupId>, + <artifactId>jaxb-api</artifactId>, + <version>${jaxb.version}</version>, + </dependency>, + <dependency>, +++ b/pom.xml, + <jaxb.version>2.2.12</jaxb.version><!-- 2.3.0 breaks due to https://github.com/mojohaus/animal-sniffer/issues/29 -->, + <groupId>javax.xml.bind</groupId>, + <artifactId>jaxb-api</artifactId>, + <version>${jaxb.version}</version>, + </dependency>, + <dependency>, +++ b/retrofit-converters/jaxb/README.md, +JAXB Converter, +==============, +, +A `Converter` which uses [JAXB][1] for serialization to and from XML., +, +A default `JAXBContext` instance will be created or one can be configured and passed, +to `JaxbConverterFactory.create()` to further control the serialization., +, +, +Download, +--------, +, +Download [the latest JAR][2] or grab via [Maven][3]:, +```xml, +<dependency>, + <groupId>com.squareup.retrofit2</groupId>, + <artifactId>converter-jaxb</artifactId>, +
[+++ b/pom.xml, + <!-- Deployment Repository URLs (override in ~/.m2/settings.xml profile) -->, + <retrofit.repo.id>example-nexus</retrofit.repo.id>, + <retrofit.repo.url>http://example.com/releases</retrofit.repo.url>, + <retrofit.snapshot.repo.id>example-nexus</retrofit.snapshot.repo.id>, + <retrofit.snapshot.repo.url>http://example.com/snapshots</retrofit.snapshot.repo.url>, + <repository>, + <id>${retrofit.repo.id}</id>, + <url>${retrofit.repo.url}</url>, + </repository>, + <id>${retrofit.snapshot.repo.id}</id>, + <url>${retrofit.snapshot.repo.url}</url>]
[+++ b/pom.xml, + <okhttp.version>2.0.0</okhttp.version>, + <rxjava.version>0.19.2</rxjava.version>, + <appengine.version>1.9.6</appengine.version>, + <jackson.version>2.4.1</jackson.version>, + <wire.version>1.5.1</wire.version>, +++ b/pom.xml, + <okhttp.version>2.0.0</okhttp.version>, + <rxjava.version>0.19.2</rxjava.version>, + <appengine.version>1.9.6</appengine.version>, + <jackson.version>2.4.1</jackson.version>, + <wire.version>1.5.1</wire.version>, +++ b/retrofit-converters/wire/src/test/java/retrofit/converter/Person.java, + * A list of the customer's phone numbers., + public Person(String name, Integer id, String email, List<PhoneNumber> phone) {, + this.name = name;, + this.id = id;, + this.email = email;, + this.phone = immutableCopyOf(phone);, + }, +, + this(builder.name, builder.id, builder.email, builder.phone);, + setBuilder(builder);, + if (other == this) return true;, + result = result * 37 + (phone != null ? phone.hashCode() : 1);, + /**, + * The customer's
[+++ b/android-native/pom.xml, + <version>0.6.0-rc5</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc5</version>, +++ b/android/pom.xml, + <version>0.6.0-rc5</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc5</version>, +++ b/android/pom.xml, + <version>0.6.0-rc5</version>, +++ b/core/pom.xml, + <version>0.6.0-rc5</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc5</version>, +++ b/android/pom.xml, + <version>0.6.0-rc5</version>, +++ b/core/pom.xml, + <version>0.6.0-rc5</version>, +++ b/http/pom.xml, + <version>0.6.0-rc5</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc5</version>, +++ b/android/pom.xml, + <version>0.6.0-rc5</version>, +++ b/core/pom.xml, + <version>0.6.0-rc5</version>, +++ b/http/pom.xml, + <version>0.6.0-rc5</version>, +++ b/http/src/main/java/retrofit/http/GsonResponseHandler.java, + private final String startTime;, + private GsonResponseHandler(Gson gson, Type type, Callback<T> callback, String url,, + String startTime) {, + this.startTime = startTime;, + String startTime) {, + return new GsonResponseHandler<T>(gson, type, callback, url, startTime);, + entity = HttpClients.copyAndLog(entity, url, startTime);,
[+++ b/CHANGELOG.md, +Version 2.0.0-beta2 *(2015-09-28)*, +----------------------------------, +, + * New: Using a response type of `Void` (e.g., `Call<Void>`) will ignore and discard the response body. This, + can be used when there will be no response body (such as in a 201 response) or whenever the body is not, + needed. `@Head` requests are now forced to use this as their response type., + * New: `validateEagerly()` method on `Retrofit.Builder` will verify the correctness of all service methods, + on calls to `create()` instead of lazily validating on first use., + * New: `Converter` is now parameterized over both
[+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, + @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, + Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, + @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, + Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, + public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, + Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, + @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, + Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, + public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, + Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + converterFactories.get(i).stringConverter(type, annotations, this);, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, + @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, + Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, + public Converter<?,
[+++ b/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/samples/github-client/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.0.1-SNAPSHOT</version>]
[+++ b/.idea/codeStyleSettings.xml, + <value>, + <XML>, + <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, + </XML>, + </value>, +++ b/.idea/codeStyleSettings.xml, + <value>, + <XML>, + <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, + </XML>, + </value>, +++ b/modules/core/src/retrofit/core/Callback.java, +++ b/.idea/codeStyleSettings.xml, + <value>, + <XML>, + <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, + </XML>, + </value>, +++ b/modules/core/src/retrofit/core/Callback.java, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +import java.io.ByteArrayOutputStream;, +import java.lang.reflect.Method;, +import java.net.URISyntaxException;, +import java.util.Set;, +import java.util.UUID;, +++ b/.idea/codeStyleSettings.xml, + <value>, + <XML>, + <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, + </XML>, + </value>, +++ b/modules/core/src/retrofit/core/Callback.java, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +import java.io.ByteArrayOutputStream;, +import java.lang.reflect.Method;, +import java.net.URISyntaxException;, +import java.util.Set;, +import java.util.UUID;, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.util.concurrent.Executor;, +++
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, + } catch (OnCompletedFailedException, + | OnErrorFailedException, + | OnErrorNotImplementedException e) {, + RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, + } catch (OnCompletedFailedException, + | OnErrorFailedException, + | OnErrorNotImplementedException e) {, + RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +import rx.exceptions.OnCompletedFailedException;, +import rx.exceptions.OnErrorFailedException;, +import rx.exceptions.OnErrorNotImplementedException;, + } catch (OnCompletedFailedException, + | OnErrorFailedException, + | OnErrorNotImplementedException e) {, + RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, + return;, + } catch (OnCompletedFailedException, + | OnErrorFailedException, + | OnErrorNotImplementedException e) {, + RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, + } catch (OnCompletedFailedException, + | OnErrorFailedException, + | OnErrorNotImplementedException e) {, + RxJavaPlugins.getInstance().getErrorHandler().handleError(e);, + } catch
[+++ b/pom.xml, + <version>1.0.1</version>, +++ b/pom.xml, + <version>1.0.1</version>, +++ b/retrofit/pom.xml, + <version>1.0.1</version>, +++ b/pom.xml, + <version>1.0.1</version>, +++ b/retrofit/pom.xml, + <version>1.0.1</version>, +++ b/samples/github-client/pom.xml, + <version>1.0.1</version>, +++ b/pom.xml, + <version>1.0.1</version>, +++ b/retrofit/pom.xml, + <version>1.0.1</version>, +++ b/samples/github-client/pom.xml, + <version>1.0.1</version>, +++ b/samples/pom.xml, + <version>1.0.1</version>]
[+++ b/pom.xml, + <gson.version>2.2.1</gson.version>]
[+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final RequestFactory requestFactory;, + private final okhttp3.Call.Factory callFactory;, + private final Converter<ResponseBody, T> responseConverter;, + OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, + okhttp3.Call.Factory callFactory, Converter<ResponseBody, T> responseConverter) {, + this.requestFactory = requestFactory;, + this.callFactory = callFactory;, + this.responseConverter = responseConverter;, + return new OkHttpCall<>(requestFactory, args, callFactory, responseConverter);, + okhttp3.Call call = callFactory.newCall(requestFactory.create(args));, + T body = responseConverter.convert(catchingBody);, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final RequestFactory requestFactory;, + private final okhttp3.Call.Factory callFactory;, + private final Converter<ResponseBody, T> responseConverter;, + OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, + okhttp3.Call.Factory callFactory, Converter<ResponseBody, T> responseConverter) {, + this.requestFactory = requestFactory;, + this.callFactory = callFactory;,
[+++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="square/retrofit", +JDK="oraclejdk8", +BRANCH="master", +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, + echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, + echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, + echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, + echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH'
[+++ b/pom.xml, + <gson.version>2.8.5</gson.version>]
[+++ b/retrofit-converters/moshi/pom.xml]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, + if (!isUnsubscribed()) {, + }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, + if (!isUnsubscribed()) {, + }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java, +import rx.functions.Action1;, + @Test public void responseUnsubscribedDoesNotCallCompleted() throws InterruptedException {, + server.enqueue(new MockResponse().setBody("Hi"));, +, + final RecordingSubscriber<Response<String>> subscriber = subscriberRule.create();, + service.response(), + .doOnNext(new Action1<Response<String>>() {, + @Override, + public void call(Response<String> response) {, + subscriber.unsubscribe();, + }, + }), + .subscribe(subscriber);, +, + assertThat(subscriber.takeValue().body()).isEqualTo("Hi");, + }, +]
[+++ b/pom.xml, + <gson.version>2.1</gson.version>]
[+++ b/pom.xml, + <robolectric.version>3.0</robolectric.version>, +++ b/pom.xml, + <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another, + * converter to deserialize {@code T} and then wraps it into {@link Optional}., + */, +@IgnoreJRERequirement, +++ b/pom.xml, + <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another, + * converter to deserialize {@code T} and then wraps it into {@link Optional}., + */, +@IgnoreJRERequirement, +++ b/retrofit/src/main/java/retrofit2/Platform.java, +++ b/pom.xml, + <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to
[+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java, + assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType()), + assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())]
[+++ b/.idea/vcs.xml, + <mapping directory="" vcs="Git" />, +++ b/.idea/vcs.xml, + <mapping directory="" vcs="Git" />, +++ b/modules/io/src/retrofit/io/Files.java, +, + /**, + * Create the indicated directory, if it doesn't already exist., + *, + * @throws IllegalStateException if there is an error creating the directory., + * @throws IllegalArgumentException if param represents a file instead, + * of a directory., + */, + public static void makeDirectory(File directory) {, + if (!directory.exists()) {, + if (!directory.mkdirs()) {, + throw new IllegalStateException("Error creating " + directory + ".");, + }, + } else {, + if (!directory.isDirectory()) {, + throw new
[+++ b/pom.xml, + <moshi.version>1.1.0</moshi.version>]
[+++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java, + + " * retrofit.BuiltInConverterFactory\n", + + " * retrofit.ProtoConverterFactory");, + + " * retrofit.BuiltInConverterFactory\n", + + " * retrofit.ProtoConverterFactory");, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java, + + " * retrofit.BuiltInConverterFactory\n", + + " * retrofit.ProtoConverterFactory");, + + " * retrofit.BuiltInConverterFactory\n", + + " * retrofit.ProtoConverterFactory");, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterFactoryTest.java, + + " * retrofit.BuiltInConverterFactory\n", + + " * retrofit.WireConverterFactory");, + + " * retrofit.BuiltInConverterFactory\n", + + " * retrofit.WireConverterFactory");, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java, + + " * retrofit.BuiltInConverterFactory\n", + + " * retrofit.ProtoConverterFactory");, + + " * retrofit.BuiltInConverterFactory\n", + + " * retrofit.ProtoConverterFactory");, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterFactoryTest.java, + + " * retrofit.BuiltInConverterFactory\n", + + " *
[+++ b/retrofit-adapters/java8/README.md, +++ b/retrofit-adapters/java8/README.md, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +++ b/retrofit-adapters/java8/README.md, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + return new Request.Builder(), + .url("http://localhost"), + .build();, +++ b/retrofit-adapters/java8/README.md, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + return new Request.Builder(), + .url("http://localhost"), + .build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +++ b/retrofit-adapters/java8/README.md, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + return new Request.Builder(), + .url("http://localhost"), + .build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +++ /dev/null, +++ b/retrofit-adapters/java8/README.md, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + return new Request.Builder(), + .url("http://localhost"), + .build();, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Invocation.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may
[+++ b/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, + /**, + * Log the headers, body, and
[+++ b/checkstyle.xml, + <property name="caseIndent" value="2"/>
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import java.io.IOException;, +/**, + * A {@linkplain CallAdapter.Factory call adapter} which creates Guava futures., + * <p>, + * Adding this class to {@link Retrofit} allows you to return {@link ListenableFuture} from service, + * methods., + * <pre>{@code, + * interface MyService {, + * &#64;GET("user/me"), + * ListenableFuture<User> getUser(), + * }, + * }</pre>, + * There are two configurations supported for the {@code ListenableFuture} type parameter:, + * <ul>, + * <li>Direct body (e.g., {@code ListenableFuture<User>}) returns the deserialized body for 2XX, + * responses, sets {@link HttpException} errors for non-2XX responses, and
[+++ b/pom.xml, + <okhttp.version>1.6.0</okhttp.version>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, + <dependency>, +++ b/pom.xml, + <okhttp.version>1.6.0</okhttp.version>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, + <dependency>, +++ b/retrofit/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/pom.xml, + <okhttp.version>1.6.0</okhttp.version>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, + <dependency>, +++ b/retrofit/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/retrofit/src/main/java/retrofit/Platform.java, + /** Determine whether or not OkHttp 1.6 or newer is present on the runtime classpath. */, + boolean okUrlFactory = false;, + try {, + Class.forName("com.squareup.okhttp.OkUrlFactory");, + okUrlFactory = true;,
[+++ b/README.md, +public interface DummyService {, +Note that each method _must_ have a `Callback` object at the end of the parameter list. This is how, +your application will handle the results of your network calls: errors and successful responses are, +both handled by the `Callback` interface., +your `MyJsonObject` will need to implement `TypedBytes`. For convenience, you can extend, +`GsonRequestEntity` if you're just trying to send a JSON string in the request body., +++ b/README.md, +public interface DummyService {, +Note that each method _must_ have a `Callback` object at the end of the parameter list. This is how, +your application
[+++ b/pom.xml, + <rxjava.version>1.1.5</rxjava.version>, + <gson.version>2.7</gson.version>, + <wire.version>2.2.0</wire.version>]
[+++ b/pom.xml, + <okhttp.version>3.0.0-SNAPSHOT</okhttp.version>, + <repositories>, + <repository>, + <id>sonatype-snapshots</id>, + <url>https://oss.sonatype.org/content/repositories/snapshots/</url>, + </repository>, + </repositories>, +, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>com.squareup.okhttp3</groupId>, +++ b/pom.xml, + <okhttp.version>3.0.0-SNAPSHOT</okhttp.version>, + <repositories>, + <repository>, + <id>sonatype-snapshots</id>, + <url>https://oss.sonatype.org/content/repositories/snapshots/</url>, + </repository>, + </repositories>, +, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>com.squareup.okhttp3</groupId>, +++ b/retrofit-adapters/rxjava/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, +++ b/pom.xml, + <okhttp.version>3.0.0-SNAPSHOT</okhttp.version>, + <repositories>, + <repository>, + <id>sonatype-snapshots</id>, + <url>https://oss.sonatype.org/content/repositories/snapshots/</url>, + </repository>, + </repositories>, +, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>com.squareup.okhttp3</groupId>, +++ b/retrofit-adapters/rxjava/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +import okhttp3.MediaType;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;, +++ b/pom.xml, + <okhttp.version>3.0.0-SNAPSHOT</okhttp.version>, + <repositories>, + <repository>, + <id>sonatype-snapshots</id>, + <url>https://oss.sonatype.org/content/repositories/snapshots/</url>, +
[+++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +import java.lang.reflect.Modifier;, + if (!platform.isDefaultMethod(method) && !Modifier.isStatic(method.getModifiers())) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +import java.lang.reflect.Modifier;, + if (!platform.isDefaultMethod(method) && !Modifier.isStatic(method.getModifiers())) {, +++ b/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java, + // Response<String> response2 = example.user("Hi").execute();, + // assertThat(response2.body()).isEqualTo("Hi");, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +import java.lang.reflect.Modifier;, + if (!platform.isDefaultMethod(method) && !Modifier.isStatic(method.getModifiers())) {, +++ b/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java, + // Response<String> response2 = example.user("Hi").execute();, + // assertThat(response2.body()).isEqualTo("Hi");, +++ b/retrofit/src/test/java/retrofit2/Java8DefaultStaticMethodsInValidationTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java, +++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, + } finally {, + value.close();, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java, +++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, + } finally {, + value.close();, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + t.printStackTrace();, + t.printStackTrace();]
[+++ b/retrofit/src/main/java/retrofit2/BaseUrl.java, +package retrofit2;, +, +import okhttp3.HttpUrl;, +, +/** The base URL of the remote service. */, +public interface BaseUrl {, + /**, + * The base URL., + * <p>, + * Consumers will call this method every time they need to create a request allowing values, + * to change over time., + */, + HttpUrl url();, +}, +++ b/retrofit/src/main/java/retrofit2/BaseUrl.java, +package retrofit2;, +, +import okhttp3.HttpUrl;, +, +/** The base URL of the remote service. */, +public interface BaseUrl {, + /**, + * The base URL., + * <p>, + * Consumers will call this method every
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/retrofit/pom.xml, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, + final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, + @Override public String convert(ResponseBody value) {, + throw new AssertionError();, + };, + final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, + @Override public String convert(ResponseBody value) {, + throw new AssertionError();, + };, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, + final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, + @Override public String convert(ResponseBody value) {, + throw new AssertionError();, + };, + final
[+++ b/pom.xml, + <jackson.version>2.7.1</jackson.version>]
[+++ b/retrofit/src/main/java/retrofit2/Converter.java, + * {@link Header @Header}, {@link HeaderMap @HeaderMap}, {@link Path @Path},, + * {@link Query @Query}, and {@link QueryMap @QueryMap} values., +++ b/retrofit/src/main/java/retrofit2/Converter.java, + * {@link Header @Header}, {@link HeaderMap @HeaderMap}, {@link Path @Path},, + * {@link Query @Query}, and {@link QueryMap @QueryMap} values., +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, + static final class HeaderMap<T> extends ParameterHandler<Map<String, T>> {, + private final Converter<T, String> valueConverter;, +, + HeaderMap(Converter<T, String> valueConverter) {, + this.valueConverter = valueConverter;, + }, +, + @Override void apply(RequestBuilder builder, Map<String, T> value) throws IOException {, + if (value == null) {, + throw new IllegalArgumentException("Header map was
[+++ b/pom.xml, + <okhttp.version>3.9.0</okhttp.version>]
[+++ b/pom.xml]
[+++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.core.JsonParseException;, +import com.fasterxml.jackson.databind.JsonMappingException;, + @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, + } catch (JsonParseException e) {, + throw new ConversionException(e);, + } catch (JsonMappingException e) {, + throw new ConversionException(e);, + } catch (IOException e) {, + throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.core.JsonParseException;, +import com.fasterxml.jackson.databind.JsonMappingException;, + @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, + } catch (JsonParseException e) {, + throw new ConversionException(e);, + } catch (JsonMappingException e) {, + throw new ConversionException(e);, + } catch (IOException e) {, + throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, + @Test(expected =
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<?> adapt(final Call<R> call) {, +++ b/retrofit-adapters/java8/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit2</groupId>, + <artifactId>retrofit-adapters</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>adapter-java8</artifactId>, + <name>Adapter: Java 8</name>, +, + <properties>, + <java.version>1.8</java.version>, + </properties>, +, + <dependencies>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +
[+++ b/http/pom.xml, + <artifactId>fest-assert-core</artifactId>, +++ b/http/pom.xml, + <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/pom.xml, + <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +++ b/http/pom.xml, + <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +++ b/io/pom.xml, + <artifactId>fest-assert-core</artifactId>, +++ b/http/pom.xml, + <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +++ b/io/pom.xml, + <artifactId>fest-assert-core</artifactId>, +++ b/io/src/test/java/retrofit/internal/ObjectsTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/pom.xml, + <artifactId>fest-assert-core</artifactId>, +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import static org.fest.assertions.api.Assertions.assertThat;, +import static org.fest.assertions.api.Fail.fail;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import static
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + } else if (behavior.calculateIsError()) {, + if (delaySleep()) {, + //noinspection unchecked An error response has no body., + callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, + }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + } else if (behavior.calculateIsError()) {, + if (delaySleep()) {, + //noinspection unchecked An error response has no body., + callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, + }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.atomic.AtomicBoolean;, + /**, + * Invokes {@code callable} once for the returned {@link Call} and once for each instance that is, + * obtained from {@linkplain Call#clone() cloning} the returned {@link Call}., + */, + public static <T> Call<T> defer(Callable<Call<T>>
[+++ b/retrofit/src/main/java/retrofit/RestAdapter.java, + if (!methodInfo.isStreaming) {, + // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, + if (!methodInfo.isStreaming) {, + // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.Streaming;, + boolean isStreaming;, + } else if (annotationType == Streaming.class) {, + "Only methods having %s as data type are allowed to have @%s annotation.",, + Response.class.getSimpleName(), Streaming.class.getSimpleName());, + isStreaming = true;, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, + if (!methodInfo.isStreaming) {, + // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final Object[] args;, + OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final Object[] args;, + OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, + okhttp3.Request create(Object[] args) throws IOException {, + int argumentCount = args.length;, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, + @Override ReturnT invoke(Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final Object[] args;, + OkHttpCall(RequestFactory requestFactory, Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, + okhttp3.Request create(Object[] args) throws IOException {, + int argumentCount = args.length;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +
[+++ b/pom.xml, + <jackson.version>2.2.2</jackson.version>, + <dependency>, + <groupId>com.fasterxml.jackson.core</groupId>, + <artifactId>jackson-databind</artifactId>, + <version>${jackson.version}</version>, + </dependency>, +, +++ b/pom.xml, + <jackson.version>2.2.2</jackson.version>, + <dependency>, + <groupId>com.fasterxml.jackson.core</groupId>, + <artifactId>jackson-databind</artifactId>, + <version>${jackson.version}</version>, + </dependency>, +, +++ b/retrofit-converters/jackson/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit-converters</artifactId>, + <version>1.1.2-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>converter-jackson</artifactId>, + <name>Converter: Jackson</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.fasterxml.jackson.core</groupId>, + <artifactId>jackson-databind</artifactId>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.easytesting</groupId>, +
[+++ b/CHANGELOG.md, +Version 1.9.0 *(2015-01-07)*, +----------------------------, +, + * Update to OkHttp 2.x's native API. If you are using OkHttp you must use version 2.0 or newer (the latest, + is 2.2 at time of writing) and you no longer need to use the `okhttp-urlconnection` shim., + * New: Allow disabling Simple XML Framework's strict parsing., + * New: `@Header` now accepts a `List` or array for a type., + * New: `@Field` and `@FieldMap` now ahve options for enabling or disabling URL encoding of names and values., + * Fix: Remove query parameters from thread name when running
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import okhttp3.Request;, + @Override public Request request() {, + return delegate.request();, + }, +, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import okhttp3.Request;, + @Override public Request request() {, + return delegate.request();, + }, +, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +import okhttp3.Request;, +, + @Override public Request request() {, + return response.raw().request();, + }, +, + @Override public Request request() {, + return new Request.Builder().url("http://localhost").build();, + }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import okhttp3.Request;, + @Override public Request request() {, + return delegate.request();, + }, +, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +import okhttp3.Request;, +, + @Override public Request request() {, + return response.raw().request();, + }, +, + @Override public Request request()
[+++ b/.idea/.gitignore, +dictionaries/, +++ b/.idea/.gitignore, +dictionaries/, +++ b/.idea/misc.xml, + <list size="1">, + <item index="0" class="java.lang.String" itemvalue="com.google.inject.Inject" />, + </list>, +++ b/.idea/.gitignore, +dictionaries/, +++ b/.idea/misc.xml, + <list size="1">, + <item index="0" class="java.lang.String" itemvalue="com.google.inject.Inject" />, + </list>, +++ b/.idea/scopes/scope_settings.xml, +<component name="DependencyValidationManager">, + <state>, + <option name="SKIP_IMPORT_STATEMENTS" value="false" />, + </state>, +</component>, +++ b/.idea/.gitignore, +dictionaries/, +++ b/.idea/misc.xml, + <list size="1">, + <item index="0" class="java.lang.String" itemvalue="com.google.inject.Inject" />, + </list>, +++ b/.idea/scopes/scope_settings.xml, +<component name="DependencyValidationManager">, + <state>, + <option name="SKIP_IMPORT_STATEMENTS" value="false" />, + </state>, +</component>, +++ b/modules/http/src-tests/retrofit/http/FetcherTest.java, +import retrofit.internal.gson.Gson;, + Fetcher fetcher = new Fetcher(new Gson(), new Provider<HttpClient>() {, +++ b/.idea/.gitignore, +dictionaries/, +++ b/.idea/misc.xml, +
[+++ b/pom.xml, + <wire.version>1.0.1</wire.version>, +++ b/pom.xml, + <wire.version>1.0.1</wire.version>, +++ b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java, + InputStream in = null;, + in = body.in();, + return wire.parseFrom(in, (Class<Message>) c);, + } finally {, + if (in != null) {, + try {, + in.close();, + } catch (IOException ignored) {, + }, + }, +++ b/pom.xml, + <wire.version>1.0.1</wire.version>, +++ b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java, + InputStream in = null;, + in = body.in();, + return wire.parseFrom(in, (Class<Message>) c);, + } finally {, + if (in != null) {, + try {, + in.close();, + } catch (IOException ignored) {, + }, + }, +++ b/website/index.html, + <li>URL paramater
[+++ b/revision.properties, +# Note - with the next change, increment this to 0.5-SNAPSHOT, +retrofit.revision=0.4]
[+++ b/checkstyle.xml, + <module name="NewlineAtEndOfFile"/>
[+++ b/.buildscript/deploy_snapshot.sh, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/.buildscript/deploy_snapshot.sh, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, + [OkHttp](http://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](http://github.com/square/wire)!, +++ b/.buildscript/deploy_snapshot.sh, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, + [OkHttp](http://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](http://github.com/square/wire)!, +++ b/README.md, + <version>2.3.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.3.0', + [1]: http://square.github.io/retrofit/, +++ b/.buildscript/deploy_snapshot.sh, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, + [OkHttp](http://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](http://github.com/square/wire)!, +++ b/README.md, + <version>2.3.0</version>, +compile 'com.squareup.retrofit2:retrofit:2.3.0', + [1]: http://square.github.io/retrofit/, +++ b/pom.xml,
[+++ b/pom.xml, + <version>2.0.0-beta3</version>, + <tag>parent-2.0.0-beta3</tag>, +++ b/pom.xml, + <version>2.0.0-beta3</version>, + <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta3</version>, +++ b/pom.xml, + <version>2.0.0-beta3</version>, + <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta3</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-beta3</version>, +++ b/pom.xml, + <version>2.0.0-beta3</version>, + <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta3</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-beta3</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-beta3</version>, +++ b/pom.xml, + <version>2.0.0-beta3</version>, + <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta3</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-beta3</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-beta3</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-beta3</version>, +++ b/pom.xml, + <version>2.0.0-beta3</version>, + <tag>parent-2.0.0-beta3</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta3</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-beta3</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-beta3</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-beta3</version>, +++ b/retrofit-converters/moshi/pom.xml, + <version>2.0.0-beta3</version>, +++ b/pom.xml, +
[+++ b/http/pom.xml, + <scope>provided</scope>]
[+++ b/pom.xml, + <kotlin.version>1.3.10</kotlin.version>, + <kotlinx.coroutines.version>1.1.0</kotlinx.coroutines.version>, + <groupId>org.jetbrains.kotlinx</groupId>, + <artifactId>kotlinx-coroutines-core</artifactId>, + <version>${kotlinx.coroutines.version}</version>, + </dependency>, + <dependency>, + <groupId>org.jetbrains.kotlin</groupId>, + <artifactId>kotlin-maven-plugin</artifactId>, + <version>${kotlin.version}</version>, + </plugin>, + <plugin>, +++ b/pom.xml, + <kotlin.version>1.3.10</kotlin.version>, + <kotlinx.coroutines.version>1.1.0</kotlinx.coroutines.version>, + <groupId>org.jetbrains.kotlinx</groupId>, + <artifactId>kotlinx-coroutines-core</artifactId>, + <version>${kotlinx.coroutines.version}</version>, + </dependency>, + <dependency>, + <groupId>org.jetbrains.kotlin</groupId>, + <artifactId>kotlin-maven-plugin</artifactId>, + <version>${kotlin.version}</version>, + </plugin>, + <plugin>, +++ b/retrofit/pom.xml, + <dependency>, + <groupId>org.jetbrains.kotlinx</groupId>, + <artifactId>kotlinx-coroutines-core</artifactId>, + <optional>true</optional>, + </dependency>, +++ b/pom.xml, + <kotlin.version>1.3.10</kotlin.version>, + <kotlinx.coroutines.version>1.1.0</kotlinx.coroutines.version>, + <groupId>org.jetbrains.kotlinx</groupId>, + <artifactId>kotlinx-coroutines-core</artifactId>, + <version>${kotlinx.coroutines.version}</version>, + </dependency>, + <dependency>, + <groupId>org.jetbrains.kotlin</groupId>, + <artifactId>kotlin-maven-plugin</artifactId>, + <version>${kotlin.version}</version>, + </plugin>, + <plugin>, +++ b/retrofit/pom.xml, + <dependency>, + <groupId>org.jetbrains.kotlinx</groupId>, + <artifactId>kotlinx-coroutines-core</artifactId>, +
[+++ b/pom.xml, + <android-maven.version>3.4.0</android-maven.version>]
[+++ b/pom.xml, + <okhttp.version>1.6.0</okhttp.version>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, + <dependency>, +++ b/pom.xml, + <okhttp.version>1.6.0</okhttp.version>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, + <dependency>, +++ b/retrofit/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/pom.xml, + <okhttp.version>1.6.0</okhttp.version>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, + <dependency>, +++ b/retrofit/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/retrofit/src/main/java/retrofit/Platform.java, + /** Determine whether or not OkHttp 1.6 or newer is present on the runtime classpath. */, + boolean okUrlFactory = false;, + try {, + Class.forName("com.squareup.okhttp.OkUrlFactory");, + okUrlFactory = true;,
[+++ b/pom.xml, + <okhttp.version>1.3.0</okhttp.version>, + <rxjava.version>0.16.1</rxjava.version>, + <guava.version>16.0</guava.version>, +++ b/pom.xml, + <okhttp.version>1.3.0</okhttp.version>, + <rxjava.version>0.16.1</rxjava.version>, + <guava.version>16.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import rx.schedulers.Schedulers;]
[+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +import java.util.regex.Pattern;, + /**, + * Matches strings that contain {@code .} or {@code ..} as a complete path segment. This also, + * matches dots in their percent-encoded form, {@code %2E}., + *, + * <p>It is okay to have these strings within a larger path segment (like {@code a..z} or {@code, + * index.html}) but when alone they have a special meaning. A single dot resolves to no path, + * segment so {@code /one/./three/} becomes {@code /one/three/}. A double-dot pops the preceding, + * directory, so {@code /one/../three/} becomes {@code /three/}., + *, +
[+++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, + private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, + if (objectMapper == null) throw new NullPointerException("objectMapper == null");, + @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, + InputStream is = body.byteStream();, + return objectMapper.readValue(is, javaType);, + is.close();, + @Override public RequestBody toBody(Object object, Type type) {, + return RequestBody.create(MEDIA_TYPE, json);, + throw new RuntimeException(e);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, + private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, + if (objectMapper == null) throw new NullPointerException("objectMapper == null");, + @Override public Object fromBody(ResponseBody body,
[+++ b/pom.xml, + <javax.inject.version>1</javax.inject.version>, + <okhttp.version>1.0.2</okhttp.version>, +++ b/pom.xml, + <javax.inject.version>1</javax.inject.version>, + <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ b/pom.xml, + <javax.inject.version>1</javax.inject.version>, + <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <javax.inject.version>1</javax.inject.version>, + <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <javax.inject.version>1</javax.inject.version>, + <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <javax.inject.version>1</javax.inject.version>, + <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <javax.inject.version>1</javax.inject.version>, + <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <javax.inject.version>1</javax.inject.version>, + <okhttp.version>1.0.2</okhttp.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.gitignore, +eclipsebin, +++ b/.gitignore, +eclipsebin, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +package retrofit.http;, +, +import com.google.gson.Gson;, +import com.google.inject.AbstractModule;, +import com.google.inject.Guice;, +import com.google.inject.Injector;, +import com.google.inject.name.Named;, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.util.concurrent.Executor;, +import junit.framework.TestCase;, +import org.apache.http.HttpMessage;, +import org.apache.http.HttpResponse;, +import org.apache.http.ProtocolVersion;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.methods.HttpDelete;, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.client.methods.HttpPost;, +import org.apache.http.client.methods.HttpPut;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.entity.StringEntity;, +import org.apache.http.message.BasicStatusLine;, +import org.easymock.Capture;, +import org.easymock.IAnswer;, +import org.junit.Before;, +import retrofit.core.Callback;, +import retrofit.core.MainThread;, +, +import static org.easymock.EasyMock.capture;, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.expect;, +import static org.easymock.EasyMock.expectLastCall;, +import static org.easymock.EasyMock.isA;, +import static org.easymock.EasyMock.replay;, +import static org.easymock.EasyMock.verify;, +import static retrofit.http.RestAdapter.service;, +, +public class RestAdapterTest extends TestCase {, + private static final String ID
[+++ b/pom.xml, + <version>1.4.1</version>, +++ b/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.1</version>, +++ b/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.1</version>, +++ b/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.4.1</version>, +++ b/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.4.1</version>, +++ b/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.4.1</version>, +++ b/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.4.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/samples/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>adapter-rxjava</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/samples/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>adapter-rxjava</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/samples/src/main/java/com/example/retrofit/RxJavaObserveOnMainThread.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is
[+++ b/http/pom.xml, + <groupId>javax.inject</groupId>, + <artifactId>javax.inject</artifactId>, +++ b/http/pom.xml, + <groupId>javax.inject</groupId>, + <artifactId>javax.inject</artifactId>, +++ b/http/src/main/java/retrofit/http/HttpRequestBuilder.java, +import javax.inject.Named;, +++ b/http/pom.xml, + <groupId>javax.inject</groupId>, + <artifactId>javax.inject</artifactId>, +++ b/http/src/main/java/retrofit/http/HttpRequestBuilder.java, +import javax.inject.Named;, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, + private final Server server;, + private final Provider<HttpClient> httpClientProvider;, + private final Executor executor;, + private final MainThread mainThread;, + private final Headers headers;, + private final Gson gson;, + private final HttpProfiler profiler;, + private final ThreadLocal<SimpleDateFormat> dateFormat = new ThreadLocal<SimpleDateFormat>() {, + @Inject, + RestAdapter(Server server, Provider<HttpClient> httpClientProvider, Executor executor,, + MainThread mainThread, Headers headers, Gson gson, HttpProfiler profiler) {, + this.server = server;, + this.httpClientProvider = httpClientProvider;,
[+++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/pom.xml, + <version>2.0.0-beta1</version>, + <tag>parent-2.0.0-beta1</tag>, +++ b/pom.xml, + <version>2.0.0-beta1</version>, + <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta1</version>, +++ b/pom.xml, + <version>2.0.0-beta1</version>, + <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-beta1</version>, +++ b/pom.xml, + <version>2.0.0-beta1</version>, + <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-beta1</version>, +++ b/pom.xml, + <version>2.0.0-beta1</version>, + <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-beta1</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-beta1</version>, +++ b/pom.xml, + <version>2.0.0-beta1</version>, + <tag>parent-2.0.0-beta1</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-beta1</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-beta1</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-beta1</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-beta1</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <jackson.version>2.3.1</jackson.version>, +++ b/pom.xml, + <jackson.version>2.3.1</jackson.version>, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.lang.reflect.Type;, +import retrofit.mime.TypedByteArray;, +import retrofit.mime.TypedInput;, +import retrofit.mime.TypedOutput;, + public JacksonConverter() {, + this(new ObjectMapper());, + }, +, + @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, + JavaType javaType = objectMapper.getTypeFactory().constructType(type);, + } catch (JsonParseException e) {, + } catch (JsonMappingException e) {, + } catch (IOException e) {, + String json = objectMapper.writeValueAsString(object);, + } catch (JsonProcessingException e) {, + } catch (UnsupportedEncodingException e) {, +++ b/pom.xml, + <jackson.version>2.3.1</jackson.version>, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.lang.reflect.Type;, +import retrofit.mime.TypedByteArray;, +import retrofit.mime.TypedInput;,
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + private final NetworkBehavior behavior;, + private final ExecutorService backgroundExecutor;, + private final Call<T> delegate;, + private volatile boolean canceled;, + private boolean delaySleep() {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + private final NetworkBehavior behavior;, + private final ExecutorService backgroundExecutor;, + private final Call<T> delegate;, + private volatile boolean canceled;, + private boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, + private final Retrofit retrofit;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + private final NetworkBehavior behavior;, + private final
[+++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlRequestBodyConverter.java, + } catch (RuntimeException | IOException e) {, + throw e;]
[+++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +import static retrofit2.Utils.checkNotNull;, +, + checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +import static retrofit2.Utils.checkNotNull;, +, + checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/HttpException.java, +import static retrofit2.Utils.checkNotNull;, +, + checkNotNull(response, "response == null");, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +import static retrofit2.Utils.checkNotNull;, +, + checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/HttpException.java, +import static retrofit2.Utils.checkNotNull;, +, + checkNotNull(response, "response == null");, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +import static retrofit2.Utils.checkNotNull;, +, + checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java, +import static retrofit2.Utils.checkNotNull;, +, + checkNotNull(callback, "callback == null");, +++ b/retrofit/src/main/java/retrofit2/HttpException.java, +import static retrofit2.Utils.checkNotNull;, +, + checkNotNull(response, "response == null");, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +import static retrofit2.Utils.checkNotNull;, +, + checkNotNull(callback, "callback == null");,
[+++ b/pom.xml, + <gson.version>2.2.2</gson.version>, + <okhttp.version>1.0.1</okhttp.version>, + <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, + <repositories>, + <repository>, + <id>sonatype-nexus-snapshots</id>, + <name>Sonatype Nexus Snapshots</name>, + <url>https://oss.sonatype.org/content/repositories/snapshots</url>, + <releases>, + <enabled>false</enabled>, + </releases>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + </repositories>, +, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, + <dependency>, +++ b/pom.xml, + <gson.version>2.2.2</gson.version>, + <okhttp.version>1.0.1</okhttp.version>, + <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, + <repositories>, + <repository>, + <id>sonatype-nexus-snapshots</id>, + <name>Sonatype Nexus Snapshots</name>, + <url>https://oss.sonatype.org/content/repositories/snapshots</url>, + <releases>, + <enabled>false</enabled>, + </releases>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>,
[+++ b/CHANGELOG.md, +Version 2.0.0-beta4 *(2016-02-04)*, +----------------------------------, +, + * New: `Call` instance is now passed to both `onResponse` and `onFailure` methods of `Callback`. This aids, + in detecting when `onFailure` is called as a result of `Call.cancel()` by checking `Call.isCanceled()`., + * New: `Call.request()` returns (optionally creating) the `Request` object for the call. Note: If this is, + called before `Call.execute()` or `Call.enqueue()` this will do relatively expensive work synchronously., + Doing so in performance-critical sections (like on the Android main thread) should be avoided., + * New: Support for the release version of OkHttp 3.0 and newer., +
[+++ b/pom.xml, + <appengine.version>1.9.12</appengine.version>, +++ b/pom.xml, + <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, + String mimeType = body.mimeType();, + if (mimeType != null) {, + fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, + }, +, +++ b/pom.xml, + <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, + String mimeType = body.mimeType();, + if (mimeType != null) {, + fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, + }, +, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import retrofit.mime.MimeHelper;, +public final class TestingUtils {, + MultipartTypedOutput typedOutput = MimeHelper.newMultipart("foobarbaz");, +++ b/pom.xml, + <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, + String mimeType = body.mimeType();, + if (mimeType != null) {, + fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, + }, +, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import retrofit.mime.MimeHelper;, +public final class TestingUtils {,
[+++ b/retrofit/src/main/java/retrofit/Callback.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/pom.xml, + <version>1.3.0</version>, +++ b/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.3.0</version>, +++ b/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.3.0</version>, +++ b/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.3.0</version>, +++ b/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.3.0</version>, +++ b/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.3.0</version>, +++ b/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.3.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXmlConverter.java, +package retrofit.converter;, +, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStreamWriter;, +import java.lang.reflect.Type;, +import okio.Buffer;, +import org.simpleframework.xml.Serializer;, +import org.simpleframework.xml.core.Persister;, +, +/**, + * A {@link Converter} which uses SimpleXML for reading and writing entities., + *, + * @author Fabien Ric (fabien.ric@gmail.com), + */, +public class SimpleXmlConverter implements Converter {, + private static final boolean DEFAULT_STRICT = true;, + private static final String CHARSET = "UTF-8";, + private static final MediaType MEDIA_TYPE =, + MediaType.parse("application/xml; charset=" + CHARSET);, +, + private final Serializer serializer;, +, + private final boolean
[+++ b/retrofit/src/main/java/retrofit/http/Header.java, +// Copyright 2012 Square, Inc., +package retrofit.http;, +, +/** Represents an HTTP header name/value pair. */, +public final class Header {, + private final String name;, + private final String value;, +, + public Header(String name, String value) {, + this.name = name;, + this.value = value;, + }, +, + public String getName() {, + return name;, + }, +, + public String getValue() {, + return value;, + }, +, + @Override public boolean equals(Object o) {, + if (this == o) return true;, + if (o == null || getClass() != o.getClass()) return false;,
[+++ b/pom.xml, + <rxjava.version>1.0.14</rxjava.version>]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/OperatorMapResponseToBodyOrError.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/pom.xml, + <rxjava2.version>2.0.0</rxjava2.version>, + <guava.version>19.0</guava.version>, + <dependency>, + <groupId>io.reactivex.rxjava2</groupId>, + <artifactId>rxjava</artifactId>, + <version>${rxjava2.version}</version>, + </dependency>, +++ b/pom.xml, + <rxjava2.version>2.0.0</rxjava2.version>, + <guava.version>19.0</guava.version>, + <dependency>, + <groupId>io.reactivex.rxjava2</groupId>, + <artifactId>rxjava</artifactId>, + <version>${rxjava2.version}</version>, + </dependency>, +++ b/retrofit-adapters/pom.xml, + <module>rxjava2</module>, +++ b/pom.xml, + <rxjava2.version>2.0.0</rxjava2.version>, + <guava.version>19.0</guava.version>, + <dependency>, + <groupId>io.reactivex.rxjava2</groupId>, + <artifactId>rxjava</artifactId>, + <version>${rxjava2.version}</version>, + </dependency>, +++ b/retrofit-adapters/pom.xml, + <module>rxjava2</module>, +++ b/retrofit-adapters/rxjava2/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit2</groupId>, + <artifactId>retrofit-adapters</artifactId>, + <version>2.1.1-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>adapter-rxjava2</artifactId>, + <name>Adapter: RxJava 2</name>, +, + <dependencies>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>retrofit</artifactId>, +
[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, + return true;, + } catch (ClassNotFoundException ignored) {, + return false;, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, + return true;, + } catch (ClassNotFoundException ignored) {, + return false;, +++ b/retrofit/src/main/java/retrofit/client/OkClient.java, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.InputStream;, +import java.util.ArrayList;, +import java.util.List;, +import okio.BufferedSink;, +import retrofit.mime.TypedInput;, +import retrofit.mime.TypedOutput;, +public class OkClient implements Client {, + private final OkHttpClient client;, + if (client == null) throw new NullPointerException("client == null");, + this.client = client;, + @Override public Response execute(Request request) throws IOException {, +
[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, + static final class Tag<T> extends ParameterHandler<T> {, + final Class<T> cls;, +, + Tag(Class<T> cls) {, + this.cls = cls;, + }, +, + @Override void apply(RequestBuilder builder, @Nullable T value) {, + builder.addTag(cls, value);, + }, + }, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, + static final class Tag<T> extends ParameterHandler<T> {, + final Class<T> cls;, +, + Tag(Class<T> cls) {, + this.cls = cls;, + }, +, + @Override void apply(RequestBuilder builder, @Nullable T value) {, + builder.addTag(cls, value);, + }, + }, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, + <T> void addTag(Class<T> cls, @Nullable T value) {, + requestBuilder.tag(cls,
[+++ b/pom.xml, + <version>2.0.0</version>, + <tag>parent-2.0.0</tag>, +++ b/pom.xml, + <version>2.0.0</version>, + <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0</version>, +++ b/pom.xml, + <version>2.0.0</version>, + <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.0</version>, +++ b/pom.xml, + <version>2.0.0</version>, + <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0</version>, +++ b/pom.xml, + <version>2.0.0</version>, + <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0</version>, +++ b/pom.xml, + <version>2.0.0</version>, + <tag>parent-2.0.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <version>3.6.1</version>, + <compilerId>javac-with-errorprone</compilerId>, + <forceJavacCompilerUse>true</forceJavacCompilerUse>, + <dependencies>, + <dependency>, + <groupId>org.codehaus.plexus</groupId>, + <artifactId>plexus-compiler-javac-errorprone</artifactId>, + <version>2.8.1</version>, + </dependency>, + <dependency>, + <groupId>com.google.errorprone</groupId>, + <artifactId>error_prone_core</artifactId>, + <version>2.0.16</version>, + </dependency>, + </dependencies>, +++ b/pom.xml, + <version>3.6.1</version>, + <compilerId>javac-with-errorprone</compilerId>, + <forceJavacCompilerUse>true</forceJavacCompilerUse>, + <dependencies>, + <dependency>, + <groupId>org.codehaus.plexus</groupId>, + <artifactId>plexus-compiler-javac-errorprone</artifactId>, + <version>2.8.1</version>, + </dependency>, + <dependency>, + <groupId>com.google.errorprone</groupId>, + <artifactId>error_prone_core</artifactId>, + <version>2.0.16</version>, + </dependency>, + </dependencies>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, + upstream.call(new BodySubscriber<T>(subscriber));, +++ b/pom.xml, + <version>3.6.1</version>, + <compilerId>javac-with-errorprone</compilerId>, + <forceJavacCompilerUse>true</forceJavacCompilerUse>, + <dependencies>, + <dependency>, + <groupId>org.codehaus.plexus</groupId>, + <artifactId>plexus-compiler-javac-errorprone</artifactId>, + <version>2.8.1</version>, + </dependency>, + <dependency>, + <groupId>com.google.errorprone</groupId>, + <artifactId>error_prone_core</artifactId>, + <version>2.0.16</version>, + </dependency>,
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, + assertThat(response.isSuccessful()).isTrue();, + assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, + assertThat(response.isSuccessful()).isTrue();, + assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, + assertThat(response.isSuccessful()).isTrue();, + assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + if (response.isSuccessful()) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/CompletableFutureTest.java, + assertThat(response.isSuccessful()).isTrue();, + assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, + assertThat(response.isSuccessful()).isTrue();, + assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + if (response.isSuccessful()) {, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/CompletableFutureTest.java, + assertThat(response.isSuccessful()).isTrue();, + assertThat(response.isSuccessful()).isFalse();, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, + if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + if (response.isSuccessful()) {, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/ListenableFutureTest.java, +
[+++ b/pom.xml, + <gson.version>2.2.3</gson.version>, + <okhttp.version>1.0.1</okhttp.version>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, + <dependency>, +++ b/pom.xml, + <gson.version>2.2.3</gson.version>, + <okhttp.version>1.0.1</okhttp.version>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, + <dependency>, +++ b/retrofit/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <optional>true</optional>, + </dependency>, +++ b/pom.xml, + <gson.version>2.2.3</gson.version>, + <okhttp.version>1.0.1</okhttp.version>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <version>${okhttp.version}</version>, + </dependency>, + <dependency>, +++ b/retrofit/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <optional>true</optional>, + </dependency>, +++ b/retrofit/src/main/java/retrofit/http/Header.java, +// Copyright 2012 Square, Inc., +/** Represents an HTTP header name/value pair. */, +public final class Header {, + private final String name;, + private
[+++ b/pom.xml, + <okhttp.version>3.4.1</okhttp.version>]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java, + latch.await(1, SECONDS);, + //noinspection ThrowableResultOfMethodCallIgnored, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java, + latch.await(1, SECONDS);, + //noinspection ThrowableResultOfMethodCallIgnored, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java, + latch.await(1, SECONDS);, + //noinspection ThrowableResultOfMethodCallIgnored, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java, + latch.await(1, SECONDS);, + //noinspection ThrowableResultOfMethodCallIgnored, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CallArbiter.java, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/ResultOnSubscribe.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java, + latch.await(1, SECONDS);, + //noinspection ThrowableResultOfMethodCallIgnored, +++ /dev/null, +++ /dev/null, +++
[+++ b/pom.xml, + <simplexml.version>2.7.1</simplexml.version>, + <dependency>, + <groupId>org.simpleframework</groupId>, + <artifactId>simple-xml</artifactId>, + <version>${simplexml.version}</version>, + </dependency>, +++ b/pom.xml, + <simplexml.version>2.7.1</simplexml.version>, + <dependency>, + <groupId>org.simpleframework</groupId>, + <artifactId>simple-xml</artifactId>, + <version>${simplexml.version}</version>, + </dependency>, +++ b/retrofit-converters/pom.xml, + <module>simplexml</module>, +++ b/pom.xml, + <simplexml.version>2.7.1</simplexml.version>, + <dependency>, + <groupId>org.simpleframework</groupId>, + <artifactId>simple-xml</artifactId>, + <version>${simplexml.version}</version>, + </dependency>, +++ b/retrofit-converters/pom.xml, + <module>simplexml</module>, +++ b/retrofit-converters/simplexml/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit-converters</artifactId>, + <version>1.2.3-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>converter-simplexml</artifactId>, + <name>Converter: SimpleXML</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>org.simpleframework</groupId>,
[+++ b/pom.xml, + <okhttp.version>3.3.0</okhttp.version>]
[+++ b/pom.xml, + <okhttp.version>3.8.1</okhttp.version>, + <gson.version>2.7</gson.version>]
[+++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/github-client/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit-samples/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/retrofit/pom.xml, + <version>1.1.1-SNAPSHOT</version>]
[+++ b/pom.xml, + <okhttp.version>1.3.0</okhttp.version>, +++ b/pom.xml, + <okhttp.version>1.3.0</okhttp.version>, +++ b/retrofit-converters/README.md, + .setEndpoint("https://api.example.com"), +++ b/pom.xml, + <okhttp.version>1.3.0</okhttp.version>, +++ b/retrofit-converters/README.md, + .setEndpoint("https://api.example.com"), +++ b/retrofit-converters/jackson/README.md, +Jackson Converter, +=================, +, +A `Converter` which uses [Jackson][1] for serialization to and from JSON., +, +A default `ObjectMapper` instance will be created or one can be configured and passed to the, +`JacksonConverter` construction to further control the serialization., +, +, + [1]: http://wiki.fasterxml.com/JacksonHome, +++ b/pom.xml, + <okhttp.version>1.3.0</okhttp.version>, +++ b/retrofit-converters/README.md, + .setEndpoint("https://api.example.com"), +++ b/retrofit-converters/jackson/README.md, +Jackson Converter, +=================, +, +A `Converter` which uses [Jackson][1] for serialization to and from JSON., +, +A default `ObjectMapper` instance will be created
[+++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, + [OkHttp](https://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](https://github.com/square/wire)!, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, + [OkHttp](https://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](https://github.com/square/wire)!, +++ b/README.md, + [1]: https://square.github.io/retrofit/, +++ b/.buildscript/deploy_snapshot.sh, +# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +++ b/CHANGELOG.md, + [OkHttp](https://square.github.io/okhttp) jar to your project if you need this behavior., + * New: Converter for [Wire protocol buffers](https://github.com/square/wire)!, +++ b/README.md, + [1]: https://square.github.io/retrofit/, +++ b/pom.xml, + <url>https://github.com/square/retrofit/</url>, + <url>https://github.com/square/retrofit</url>, + <url>https://github.com/square/retrofit/issues</url>, + <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>,
[+++ b/pom.xml, + <moshi.version>1.0.0</moshi.version>, +++ b/pom.xml, + <moshi.version>1.0.0</moshi.version>, +++ b/retrofit-converters/moshi/README.md, +A default `Moshi` instance will be created or one can be configured and passed to, +`MoshiConverterFactory.create()` to further control the serialization.]
[+++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar source:jar -DskipTests=true -B -V, +script: mvn test -B, +, +++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar source:jar -DskipTests=true -B -V, +script: mvn test -B, +, +++ b/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar source:jar -DskipTests=true -B -V, +script: mvn test -B, +, +++ b/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/.travis.yml, +# Ensure Javadoc and source jar generation is exercised., +install: mvn install javadoc:jar
[+++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, + @Override public Object convert(ResponseBody value) {, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, + @Override public Object convert(ResponseBody value) {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, + @Override public Object convert(ResponseBody value) {]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + private final HttpUrl baseUrl;, + Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, + public HttpUrl baseUrl() {, + private HttpUrl baseUrl;, + public Builder baseUrl(HttpUrl baseUrl) {, + this.baseUrl = baseUrl;, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + private final HttpUrl baseUrl;, + Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, + public HttpUrl baseUrl() {, + private HttpUrl baseUrl;, + public Builder baseUrl(HttpUrl baseUrl) {, + this.baseUrl = baseUrl;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import okhttp3.HttpUrl;, + private final HttpUrl baseUrl;, + RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, + contentType, hasBody, isFormEncoded, isMultipart);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + private final HttpUrl
[+++ b/pom.xml, + <wire.version>1.2.0</wire.version>, + <guava.version>15.0</guava.version>, +++ b/pom.xml, + <wire.version>1.2.0</wire.version>, + <guava.version>15.0</guava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, + * public class UserService {]
[+++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java, +import com.google.protobuf.ExtensionRegistryLite;, + return new ProtoConverterFactory(null);, + }, +, + /** Create an instance which uses {@code registry} when deserializing. */, + public static ProtoConverterFactory createWithRegistry(ExtensionRegistryLite registry) {, + return new ProtoConverterFactory(registry);, + }, +, + private final ExtensionRegistryLite registry;, +, + private ProtoConverterFactory(ExtensionRegistryLite registry) {, + this.registry = registry;, + return new ProtoResponseBodyConverter<>(parser, registry);, +++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java, +import com.google.protobuf.ExtensionRegistryLite;, + return new ProtoConverterFactory(null);, + }, +, + /** Create an instance which uses {@code registry} when deserializing. */, + public static ProtoConverterFactory createWithRegistry(ExtensionRegistryLite registry) {, + return new ProtoConverterFactory(registry);, + }, +, + private final ExtensionRegistryLite registry;,
[+++ b/retrofit-mock/src/test/java/retrofit/MockRetrofitTest.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import javax.annotation.Nullable;, + private volatile @Nullable Future<?> task;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import javax.annotation.Nullable;, + private volatile @Nullable Future<?> task;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + private @Nullable Call<T> delegate;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import javax.annotation.Nullable;, + private volatile @Nullable Future<?> task;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + private @Nullable Call<T> delegate;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/MockRetrofit.java, +import javax.annotation.Nullable;, + private @Nullable NetworkBehavior behavior;, + private @Nullable ExecutorService executor;]
[+++ b/pom.xml, + <guava.version>18.0</guava.version>]
[+++ b/checkstyle.xml, + <property name="max" value="100"/>
[+++ b/examples/directory-sync/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + package="retrofit.test_app", + android:versionCode="1", + android:versionName="1.0">, + <application android:label="Test Retrofit">, + <activity android:name="Main", + android:label="Test Retrofit">, + <intent-filter>, + <action android:name="android.intent.action.MAIN" />, + <category android:name="android.intent.category.LAUNCHER" />, + </intent-filter>, + </activity>, + </application>, +</manifest> , +++ b/examples/directory-sync/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + package="retrofit.test_app", + android:versionCode="1", + android:versionName="1.0">, + <application android:label="Test Retrofit">, + <activity android:name="Main", + android:label="Test Retrofit">, + <intent-filter>, + <action android:name="android.intent.action.MAIN" />, + <category android:name="android.intent.category.LAUNCHER" />, + </intent-filter>, + </activity>, + </application>, +</manifest> , +++ b/examples/directory-sync/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>,
[+++ b/.idea/libraries/JARs.xml, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-2.1.jar!/" />, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-2.1-sources.jar!/" />, +++ b/.idea/libraries/JARs.xml, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-2.1.jar!/" />, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-2.1-sources.jar!/" />, +++ b/build.xml, + <jarjar jarfile="${build.dir}/retrofit-gson-2.1.jar">, + <zipfileset src="lib/gson-2.1.jar"/>, + <jarjar jarfile="${build.dir}/retrofit-gson-2.1-sources.jar">, + <zipfileset src="lib/gson-2.1-sources.jar"/>, + <pathelement location="${build.dir}/retrofit-gson-2.1.jar"/>, + <pathelement location="${build.dir}/retrofit-gson-2.1.jar"/>, +++ b/.idea/libraries/JARs.xml, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-2.1.jar!/" />, + <root url="jar://$PROJECT_DIR$/build/retrofit-gson-2.1-sources.jar!/" />, +++ b/build.xml, + <jarjar jarfile="${build.dir}/retrofit-gson-2.1.jar">, + <zipfileset src="lib/gson-2.1.jar"/>, + <jarjar jarfile="${build.dir}/retrofit-gson-2.1-sources.jar">, + <zipfileset src="lib/gson-2.1-sources.jar"/>, + <pathelement location="${build.dir}/retrofit-gson-2.1.jar"/>, + <pathelement location="${build.dir}/retrofit-gson-2.1.jar"/>, +++ b/ivy.xml, + <dependency org="com.google.code.gson" name="gson" rev="2.1"/>]
[+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/build.xml, + <property file="revision.properties"/>, +++ b/build.xml, + <property file="revision.properties"/>, +++ b/revision.properties, +retrofit.revision=0.1-SNAPSHOT, +]
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Subscription;, + subscriber.add(requestArbiter);, + static final class RequestArbiter<T> extends AtomicBoolean implements Subscription, Producer {, + @Override public void unsubscribe() {, +, + @Override public boolean isUnsubscribed() {, + return call.isCanceled();, + }]
[+++ b/pom.xml, + <okhttp.version>3.11.0</okhttp.version>, +++ b/pom.xml, + <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, + return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/pom.xml, + <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, + return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, + return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/pom.xml, + <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, + return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, + return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, + return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/pom.xml, + <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, + return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, + return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, + return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java, + return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/pom.xml, + <okhttp.version>3.11.0</okhttp.version>, +++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java, + return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java, + return RequestBody.create(MediaType.get("text/plain"), value);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java, +
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + /** Creates a failed {@link Call} from {@code failure}. */, + // TODO delete this overload in Retrofit 3.0., + return new FakeCall<>(null, failure);, + }, +, + /**, + * Creates a failed {@link Call} from {@code failure}., + * <p>, + * Note: When invoking {@link Call#execute() execute()} on the returned {@link Call}, if, + * {@code failure} is a {@link RuntimeException}, {@link Error}, or {@link IOException} subtype, + * it is thrown directly. Otherwise it is "sneaky thrown" despite not being declared., + */, + public static <T> Call<T> failure(Throwable failure) {, +
[+++ b/pom.xml, + <wire.version>2.1.0</wire.version>, + <moshi.version>1.0.0</moshi.version>, +++ b/pom.xml, + <wire.version>2.1.0</wire.version>, + <moshi.version>1.0.0</moshi.version>, +++ b/retrofit-converters/wire/src/test/java/retrofit2/Phone.java, +// Source file: phone.proto at 6:1, +import com.squareup.wire.WireField;, +import com.squareup.wire.internal.Internal;, + public static final ProtoAdapter<Phone> ADAPTER = new ProtoAdapter_Phone();, +, + private static final long serialVersionUID = 0L;, +, + public static final String DEFAULT_NUMBER = "";, +, + @WireField(, + tag = 1,, + adapter = "com.squareup.wire.ProtoAdapter#STRING", + ), + public final String number;, +, + public Phone(String number) {, + this(number, ByteString.EMPTY);, + }, +, + public Phone(String number, ByteString unknownFields) {, + super(ADAPTER, unknownFields);, + this.number = number;, + }, +, +
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Subscription;, + subscriber.add(requestArbiter);, + static final class RequestArbiter<T> extends AtomicBoolean implements Subscription, Producer {, + @Override public void unsubscribe() {, +, + @Override public boolean isUnsubscribed() {, + return call.isCanceled();, + }]
[+++ b/samples/pom.xml, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit-mock</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/samples/pom.xml, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit-mock</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/samples/src/main/java/com/example/retrofit/SimpleMockService.java, +// Copyright 2013 Square, Inc., +package com.example.retrofit;, +, +import com.example.retrofit.SimpleService.Contributor;, +import com.example.retrofit.SimpleService.GitHub;, +import com.google.common.util.concurrent.ThreadFactoryBuilder;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import retrofit.Call;, +import retrofit.MockRetrofit;, +import retrofit.Retrofit;, +, +/**, + * An example of using {@link MockRetrofit} to create a mock service implementation with, + * fake data. This re-uses the GitHub service from {@link SimpleService} for its mocking., + */, +public final class
[+++ b/pom.xml, + <version>2.0.3-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.0.3-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.3-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.3-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.3-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.3-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.3-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <version>2.4.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.4.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.4.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.4.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.4.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.4.0-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <rxjava.version>1.0.13</rxjava.version>, +++ b/pom.xml, + <rxjava.version>1.0.13</rxjava.version>, +++ /dev/null, +++ b/pom.xml, + <rxjava.version>1.0.13</rxjava.version>, +++ /dev/null, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit/mock/RxJavaBehaviorAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + *
[+++ b/pom.xml, + <wire.version>2.0.0</wire.version>, + <moshi.version>1.1.0</moshi.version>, +++ b/pom.xml, + <wire.version>2.0.0</wire.version>, + <moshi.version>1.1.0</moshi.version>, +++ b/retrofit-converters/wire/src/test/java/retrofit2/Phone.java, +// Source file: test.proto at 2:1, + public static final ProtoAdapter<Phone> ADAPTER = new ProtoAdapter<Phone>(FieldEncoding.LENGTH_DELIMITED, Phone.class) {, + };, +, + private static final long serialVersionUID = 0L;, +, + public static final String DEFAULT_NUMBER = "";, +, + public final String number;, +, + public Phone(String number) {, + this(number, ByteString.EMPTY);, + }, +, + public Phone(String number, ByteString unknownFields) {, + super(unknownFields);, + this.number = number;, + }, +, + @Override, + public Builder newBuilder() {, + Builder builder = new Builder();, +
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, + @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, + @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final @Nullable Object[] args;, + OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, + @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final @Nullable Object[] args;, + OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, + okhttp3.Request create(@Nullable Object[] args) throws IOException {, + int argumentCount = args != null ? args.length : 0;, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import javax.annotation.Nullable;, + @Override ReturnT invoke(@Nullable Object[] args) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final @Nullable
[+++ b/checkstyle.xml, + <module name="NewlineAtEndOfFile"/>
[+++ b/retrofit/src/main/java/retrofit/RequestAction.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.3.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/pom.xml, + <version>1.5.1</version>, + <tag>parent-1.5.1</tag>, +++ b/pom.xml, + <version>1.5.1</version>, + <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.1</version>, +++ b/pom.xml, + <version>1.5.1</version>, + <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.1</version>, +++ b/pom.xml, + <version>1.5.1</version>, + <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.5.1</version>, +++ b/pom.xml, + <version>1.5.1</version>, + <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.5.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.5.1</version>, +++ b/pom.xml, + <version>1.5.1</version>, + <tag>parent-1.5.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.5.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.5.1</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.5.1</version>, +++ b/pom.xml, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/pom.xml, + <rxjava.version>1.2.0</rxjava.version>, +++ b/pom.xml, + <rxjava.version>1.2.0</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyCallable.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
[+++ b/.github/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to Retrofit you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor
[+++ b/pom.xml, + <rxjava.version>0.19.0</rxjava.version>, +++ b/pom.xml, + <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, + super(message, url, response, null, body.getClass(), false, null);, +++ b/pom.xml, + <rxjava.version>0.19.0</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, + super(message, url, response, null, body.getClass(), false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, + @GET("/") void doStuff(Callback<String> cb);, + @GET("/") Observable<String> doStuff();, + @Override public void doStuff(Callback<String> cb) {, + mockService.doStuff(new Callback<String>() {, + @Override public void success(String o, Response response) {, + @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., + final String expected = new String("Hi");, +, + @Override public void doStuff(Callback<String> cb) {, + mockService.doStuff(new Callback<String>() {, + @Override public void success(String result, Response response) {, + @SuppressWarnings("RedundantStringConstructorCall") //
[+++ b/pom.xml, + <version>2.5.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.5.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.5.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.5.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.5.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.5.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava2/pom.xml, + <version>2.5.1-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, + @Override public @Nullable CallAdapter<?, ?> get(, + Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, + @Override public @Nullable CallAdapter<?, ?> get(, + Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, + @Override public @Nullable CallAdapter<?, ?> get(, + Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/package-info.java, +@retrofit2.internal.EverythingIsNonNull, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, +import javax.annotation.Nullable;, + @Override public @Nullable CallAdapter<?, ?> get(, + Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, +import javax.annotation.Nullable;, + @Override public @Nullable CallAdapter<?, ?> get(, + Type returnType, Annotation[] annotations, Retrofit
[+++ b/pom.xml, + <okhttp.version>3.1.2</okhttp.version>, + <rxjava.version>1.1.1</rxjava.version>, + <gson.version>2.4</gson.version>, +++ b/pom.xml, + <okhttp.version>3.1.2</okhttp.version>, + <rxjava.version>1.1.1</rxjava.version>, + <gson.version>2.4</gson.version>, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + *
[+++ b/.gitignore, +.settings, +, +bin, +gen, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.settings, +, +bin, +gen, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/.gitignore, +.settings, +, +bin, +gen, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +, +obj, +, +.DS_Store, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +.settings, +, +bin, +gen, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +, +obj, +, +.DS_Store, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +.settings, +, +bin, +gen, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +, +obj, +, +.DS_Store, +++ /dev/null,
[+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final RequestFactory requestFactory;, + private final okhttp3.Call.Factory callFactory;, + private final Converter<ResponseBody, T> responseConverter;, + OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, + okhttp3.Call.Factory callFactory, Converter<ResponseBody, T> responseConverter) {, + this.requestFactory = requestFactory;, + this.callFactory = callFactory;, + this.responseConverter = responseConverter;, + return new OkHttpCall<>(requestFactory, args, callFactory, responseConverter);, + okhttp3.Call call = callFactory.newCall(requestFactory.create(args));, + T body = responseConverter.convert(catchingBody);, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final RequestFactory requestFactory;, + private final okhttp3.Call.Factory callFactory;, + private final Converter<ResponseBody, T> responseConverter;, + OkHttpCall(RequestFactory requestFactory, @Nullable Object[] args,, + okhttp3.Call.Factory callFactory, Converter<ResponseBody, T> responseConverter) {, + this.requestFactory = requestFactory;, + this.callFactory = callFactory;,
[+++ b/retrofit-converters/protobuf/src/test/java/retrofit2/ProtoConverterFactoryTest.java, + assertThat(e).hasMessage("", + + "Unable to create converter for class java.lang.String\n", + assertThat(e.getCause()).hasMessage("", + + "Could not locate ResponseBody converter for class java.lang.String.\n", + + " Tried:\n", + assertThat(e).hasMessage("", + + "Unable to create converter for java.util.List<java.lang.String>\n", + assertThat(e.getCause()).hasMessage("", + + "Could not locate ResponseBody converter for java.util.List<java.lang.String>.\n", + + " Tried:\n", +++ b/retrofit-converters/protobuf/src/test/java/retrofit2/ProtoConverterFactoryTest.java, + assertThat(e).hasMessage("", + + "Unable to create converter for class java.lang.String\n", + assertThat(e.getCause()).hasMessage("", + + "Could not locate ResponseBody converter for class java.lang.String.\n", + + " Tried:\n", + assertThat(e).hasMessage("", + + "Unable to create converter for java.util.List<java.lang.String>\n", + assertThat(e.getCause()).hasMessage("", + + "Could not
[+++ b/pom.xml, + <module>retrofit-mock</module>, +++ b/pom.xml, + <module>retrofit-mock</module>, +++ b/retrofit-mock/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>parent</artifactId>, + <version>1.2.3-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>retrofit-mock</artifactId>, + <name>Retrofit Mock Adapter</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, +, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <optional>true</optional>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.easytesting</groupId>, + <artifactId>fest-assert-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, +
[+++ b/pom.xml, + <gson.version>2.2.4</gson.version>, + <okhttp.version>1.0.2</okhttp.version>, + <guava.version>14.0.1</guava.version>]
[+++ b/pom.xml, + <wire.version>1.0.0</wire.version>, + <dependency>, + <groupId>com.squareup.wire</groupId>, + <artifactId>wire-runtime</artifactId>, + <version>${wire.version}</version>, + </dependency>, +++ b/pom.xml, + <wire.version>1.0.0</wire.version>, + <dependency>, + <groupId>com.squareup.wire</groupId>, + <artifactId>wire-runtime</artifactId>, + <version>${wire.version}</version>, + </dependency>, +++ b/retrofit-converters/pom.xml, + <module>wire</module>, +++ b/pom.xml, + <wire.version>1.0.0</wire.version>, + <dependency>, + <groupId>com.squareup.wire</groupId>, + <artifactId>wire-runtime</artifactId>, + <version>${wire.version}</version>, + </dependency>, +++ b/retrofit-converters/pom.xml, + <module>wire</module>, +++ b/retrofit-converters/wire/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<!--, + ~ Copyright 2013 Square, Inc., + -->, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit-converters</artifactId>, + <version>1.2.1-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>converter-wire</artifactId>, + <name>Converter: Wire Protocol Buffers</name>, +, + <dependencies>, + <dependency>,
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/BodyOnSubscribe.java, +/*, + * Copyright (C) 2016 Jake Wharton, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/retrofit/src/main/java/retrofit2/HttpException.java, +public class HttpException extends RuntimeException {]
[+++ b/pom.xml, + <version>1.5.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>1.5.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.5.1-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <!-- Sample Dependencies -->, + <jsoup.version>1.7.3</jsoup.version>, +, +++ b/pom.xml, + <!-- Sample Dependencies -->, + <jsoup.version>1.7.3</jsoup.version>, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import android.net.Uri;, +import java.net.URI;, + static final class StringUrl extends ParameterHandler<String> {, + @Override void apply(RequestBuilder builder, String value) {, + static final class JavaUriUrl extends ParameterHandler<URI> {, + @Override void apply(RequestBuilder builder, URI value) {, + builder.setRelativeUrl(value.toString());, + }, + }, +, + static final class AndroidUriUrl extends ParameterHandler<Uri> {, + @Override void apply(RequestBuilder builder, Uri value) {, + builder.setRelativeUrl(value.toString());, + }, + }, +, +++ b/pom.xml, + <!-- Sample Dependencies -->, + <jsoup.version>1.7.3</jsoup.version>, +, +++
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/pom.xml, + <animal.sniffer.version>1.14</animal.sniffer.version>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-annotations</artifactId>, + <version>${animal.sniffer.version}</version>, + </dependency>, + <dependency>, +, + <plugin>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-maven-plugin</artifactId>, + <version>${animal.sniffer.version}</version>, + <executions>, + <execution>, + <phase>test</phase>, + <goals>, + <goal>check</goal>, + </goals>, + </execution>, + </executions>, + <configuration>, + <signature>, + <groupId>org.codehaus.mojo.signature</groupId>, + <artifactId>java16</artifactId>, + <version>1.1</version>, + </signature>, + </configuration>, + </plugin>, +++ b/.travis.yml, +++ b/pom.xml, + <animal.sniffer.version>1.14</animal.sniffer.version>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-annotations</artifactId>, + <version>${animal.sniffer.version}</version>, + </dependency>, + <dependency>, +, + <plugin>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-maven-plugin</artifactId>, + <version>${animal.sniffer.version}</version>, + <executions>, + <execution>, + <phase>test</phase>, + <goals>, + <goal>check</goal>, + </goals>, + </execution>, +
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, + String name = isFlowable ? "Flowable", + : isSingle ? "Single", + : isMaybe ? "Maybe" : "Observable";, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, + String name = isFlowable ? "Flowable", + : isSingle ? "Single", + : isMaybe ? "Maybe" : "Observable";, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + *
[+++ b/pom.xml, + <okhttp.version>3.8.1</okhttp.version>, + <gson.version>2.8.2</gson.version>]
[+++ b/pom.xml, + <okhttp.version>3.0.0-RC1</okhttp.version>]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <module>sync-sample</module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <module>sync-sample</module>, +++ b/sync-sample/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + package="retrofit.test_app", + android:versionCode="1", + android:versionName="1.0">, + <application android:label="Test Retrofit">, + <activity android:name="Main", + android:label="Test Retrofit">, + <intent-filter>, + <action android:name="android.intent.action.MAIN" />, + <category android:name="android.intent.category.LAUNCHER" />, + </intent-filter>, + </activity>, + </application>, +</manifest> ,
[+++ b/pom.xml, + <gson.version>2.2.4</gson.version>, + <okhttp.version>1.0.2</okhttp.version>, + <guava.version>14.0.1</guava.version>]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you
[+++ b/build.xml, + <echo, + message="${line.separator}Test report written to:${line.separator}${testreports.dir}/index.html"/>, + </target>, +, + <!--, + - Publishes to the Ivy repository using the resolver named, + - 'retrofit-resolver'., + -->, + <target name="publish" depends="dist">, + <ivy:publish, + pubrevision="${retrofit.revision}", + resolver="retrofit-resolver", + forcedeliver="true", + update="true", + overwrite="true", + publishivy="true">, + <!--, + - This pattern selects which files will be published. The artifact, + - pattern in ivy-settings.xml controls how the names matched here are, + - published in the Ivy repository., + -->, + <artifacts pattern="${build.dir}/[artifact]-[revision](-[classifier]).[ext]"/>, + </ivy:publish>, +++ b/build.xml, + <echo, + message="${line.separator}Test report written to:${line.separator}${testreports.dir}/index.html"/>, + </target>,
[+++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +
[+++ b/pom.xml, + <okhttp.version>2.3.0</okhttp.version>, +++ b/pom.xml, + <okhttp.version>2.3.0</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java, + @Override public long contentLength() throws IOException {, + try {, + } catch (IOException e) {, + thrownException = e;, + throw e;, + }, + @Override public BufferedSource source() throws IOException {, + BufferedSource delegateSource;, + try {, + delegateSource = delegate.source();, + } catch (IOException e) {, + thrownException = e;, + throw e;, + }, + return Okio.buffer(new ForwardingSource(delegateSource) {, +++ b/pom.xml, + <okhttp.version>2.3.0</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java, + @Override public long contentLength() throws IOException {, + try {, + } catch (IOException e) {, + thrownException
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, + String name = isFlowable ? "Flowable", + : isSingle ? "Single", + : isMaybe ? "Maybe" : "Observable";, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, + String name = isFlowable ? "Flowable", + : isSingle ? "Single", + : isMaybe ? "Maybe" : "Observable";, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + *
[+++ b/.travis.yml, + - wget http://dl.google.com/android/ndk/android-ndk-r8b-linux-x86.tar.bz2, + - tar -jxf android-ndk-r8b-linux-x86.tar.bz2, + - export ANDROID_NDK_HOME=~/builds/square/retrofit/android-ndk-r8b, + - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${ANDROID_NDK_HOME}]
[+++ b/pom.xml, + <gson.version>2.8.0</gson.version>]
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, + return response(Response.success(successValue));, + public static <T> Call<T> response(final Response<T> response) {, + return new Call<T>() {, + @Override public Response<T> execute() throws IOException {, + return response;, + @Override public void enqueue(Callback<T> callback) {, + callback.onResponse(this, response);, + }, +, + @Override public boolean isExecuted() {, + return false;, + }, +, + @Override public void cancel() {, + }, +, + @Override public boolean isCanceled() {, + return false;, + }, +, + @SuppressWarnings("CloneDoesntCallSuperClone") // Immutable object., + @Override public Call<T> clone() {, + return this;, + }, +, + @Override
[+++ b/pom.xml, + <version>1.6.1</version>, + <tag>parent-1.6.1</tag>, +++ b/pom.xml, + <version>1.6.1</version>, + <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1</version>, +++ b/pom.xml, + <version>1.6.1</version>, + <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.1</version>, +++ b/pom.xml, + <version>1.6.1</version>, + <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.1</version>, +++ b/pom.xml, + <version>1.6.1</version>, + <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.6.1</version>, +++ b/pom.xml, + <version>1.6.1</version>, + <tag>parent-1.6.1</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.6.1</version>, +++ b/retrofit-converters/pom.xml, + <version>1.6.1</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.6.1</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.6.1</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.6.1</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <android-maven.version>3.5.1</android-maven.version>, + <gson.version>2.2.3</gson.version>, + <okhttp.version>1.0.1</okhttp.version>, + <guava.version>14.0</guava.version>, +++ b/pom.xml, + <android-maven.version>3.5.1</android-maven.version>, + <gson.version>2.2.3</gson.version>, + <okhttp.version>1.0.1</okhttp.version>, + <guava.version>14.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, + url.append('?').append(requestQuery);, +++ b/pom.xml, + <android-maven.version>3.5.1</android-maven.version>, + <gson.version>2.2.3</gson.version>, + <okhttp.version>1.0.1</okhttp.version>, + <guava.version>14.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, + url.append('?').append(requestQuery);, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, + .setQuery("hi=mom") //, + @Test public void getWithQuery() throws Exception {, + Request request = new Helper() //, + .setMethod("GET") //, + .setUrl("http://example.com") //, + .setPath("/foo/bar/") //, + .setQuery("hi=mom") //, + .build();, + assertThat(request.getMethod()).isEqualTo("GET");, + assertThat(request.getHeaders()).isEmpty();, + assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?hi=mom");, + assertThat(request.getBody()).isNull();, + }, +]
[+++ b/pom.xml, + <version>2.0.0-beta2</version>, + <tag>parent-2.0.0-beta2</tag>, +++ b/pom.xml, + <version>2.0.0-beta2</version>, + <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta2</version>, +++ b/pom.xml, + <version>2.0.0-beta2</version>, + <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-beta2</version>, +++ b/pom.xml, + <version>2.0.0-beta2</version>, + <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-beta2</version>, +++ b/pom.xml, + <version>2.0.0-beta2</version>, + <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-beta2</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-beta2</version>, +++ b/pom.xml, + <version>2.0.0-beta2</version>, + <tag>parent-2.0.0-beta2</tag>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, + <version>2.0.0-beta2</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.0-beta2</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.0-beta2</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>2.0.0-beta2</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <okhttp.version>3.8.1</okhttp.version>, + <gson.version>2.8.0</gson.version>, + <moshi.version>1.5.0</moshi.version>]
[+++ b/retrofit-converters/guava/README.md, +Guava Converter, +===============, +, +A `Converter` which supports Guava's `Optional<T>` by delegating to other converters for `T`, +and then wrapping it into `Optional`., +, +, +Download, +--------, +, +Download [the latest JAR][1] or grab via [Maven][2]:, +```xml, +<dependency>, + <groupId>com.squareup.retrofit2</groupId>, + <artifactId>converter-guava</artifactId>, + <version>latest.version</version>, +</dependency>, +```, +or [Gradle][2]:, +```groovy, +compile 'com.squareup.retrofit2:converter-guava:latest.version', +```, +, +Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap]., +, +, +, + [1]: https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=converter-guava&v=LATEST, + [2]: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.squareup.retrofit2%22%20a%3A%22converter-guava%22, + [snap]: https://oss.sonatype.org/content/repositories/snapshots/, +++ b/retrofit-converters/guava/README.md, +Guava Converter, +===============, +, +A `Converter` which supports Guava's `Optional<T>` by delegating to other converters for `T`, +and then
[+++ b/retrofit/src/main/java/retrofit/ChangeableServer.java, +/** An {@link Endpoint} whose URL and name can be changed at runtime. */, +@Deprecated public class ChangeableServer implements Endpoint {, +++ b/retrofit/src/main/java/retrofit/ChangeableServer.java, +/** An {@link Endpoint} whose URL and name can be changed at runtime. */, +@Deprecated public class ChangeableServer implements Endpoint {, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +package retrofit;, +, +/**, + * Represents an API endpoint URL and associated name. Callers should always consult the instance, + * for the latest values rather than caching the returned values., + *, + * @author Matt Hickman (mhickman@palantir.com), + */, +public interface Endpoint {, +, + /** The base
[+++ b/pom.xml, + <wire.version>1.7.0</wire.version>, +++ b/pom.xml, + <wire.version>1.7.0</wire.version>, +++ b/retrofit-converters/gson/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, +++ b/pom.xml, + <wire.version>1.7.0</wire.version>, +++ b/retrofit-converters/gson/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,
[+++ b/pom.xml, + <okhttp.version>2.5.0</okhttp.version>, + <rxjava.version>1.0.13</rxjava.version>, +++ b/pom.xml, + <okhttp.version>2.5.0</okhttp.version>, + <rxjava.version>1.0.13</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ b/pom.xml, + <okhttp.version>2.5.0</okhttp.version>, + <rxjava.version>1.0.13</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/Platform.java, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, + client = new OkHttpClient();]
[+++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java]
[+++ b/pom.xml, + <moshi.version>1.8.0</moshi.version>, +++ b/pom.xml, + <moshi.version>1.8.0</moshi.version>, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, + reader.skipName();, + assertThat(e).hasMessage("Cannot skip unexpected NAME at $.");]
[+++ b/pom.xml, + <robolectric.version>3.0</robolectric.version>, +++ b/pom.xml, + <robolectric.version>3.0</robolectric.version>, +++ b/retrofit-adapters/java8/README.md, +Java 8 Adapter (Deprecated), +===========================, +A call adapter [Java 8's `CompletableFuture`][1]., +This adapter is no longer needed. Support for `CompletableFuture` is built-in to Retrofit and now, +works without configuration., +++ b/pom.xml, + <robolectric.version>3.0</robolectric.version>, +++ b/retrofit-adapters/java8/README.md, +Java 8 Adapter (Deprecated), +===========================, +A call adapter [Java 8's `CompletableFuture`][1]., +This adapter is no longer needed. Support for `CompletableFuture` is built-in to Retrofit and now, +works without configuration., +++ b/retrofit-converters/java8/README.md, +Java 8 Converter (Deprecated), +=============================, +This converter is no longer needed. Support for `Optional` is built-in to Retrofit and now works, +without configuration.,
[+++ b/checkstyle.xml, + <module name="NewlineAtEndOfFile"/>
[+++ b/pom.xml, + <rxjava.version>1.1.9</rxjava.version>, +++ b/pom.xml, + <rxjava.version>1.1.9</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, + @Rule public final RecordingSubscriber.Rule subscriberRule = new RecordingSubscriber.Rule();, + RecordingSubscriber<Void> subscriber = subscriberRule.create();, + service.completable().unsafeSubscribe(subscriber);, + RecordingSubscriber<Void> subscriber = subscriberRule.create();, + service.completable().unsafeSubscribe(subscriber);, + subscriber.assertError(HttpException.class, "HTTP 404 Client Error");, + RecordingSubscriber<Void> subscriber = subscriberRule.create();, + service.completable().unsafeSubscribe(subscriber);, +++ b/pom.xml, + <rxjava.version>1.1.9</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, + @Rule public final RecordingSubscriber.Rule subscriberRule = new RecordingSubscriber.Rule();, + RecordingSubscriber<Void> subscriber = subscriberRule.create();, + service.completable().unsafeSubscribe(subscriber);, + RecordingSubscriber<Void> subscriber = subscriberRule.create();, + service.completable().unsafeSubscribe(subscriber);, + subscriber.assertError(HttpException.class, "HTTP 404 Client Error");, + RecordingSubscriber<Void> subscriber = subscriberRule.create();, + service.completable().unsafeSubscribe(subscriber);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableWithSchedulerTest.java, + @Rule public final RecordingSubscriber.Rule subscriberRule = new RecordingSubscriber.Rule();,
[+++ b/pom.xml, + <wire.version>1.0.0</wire.version>, +++ b/pom.xml, + <wire.version>1.0.0</wire.version>, +++ b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java, +import java.io.ByteArrayOutputStream;, +import java.io.InputStream;, +import java.io.OutputStream;, + byte[] data = consumeAsBytes(body.in());, + return wire.parseFrom(data, (Class<Message>) c);, +, + /** Reads a stream into a {@code byte} array. */, + private byte[] consumeAsBytes(InputStream in) throws IOException {, + ByteArrayOutputStream out = new ByteArrayOutputStream();, + pipe(in, out);, + return out.toByteArray();, + }, +, + /** Reads content from the given input and pipes it to the given output. */, + private void pipe(InputStream in, OutputStream out) throws IOException {, + byte[] buffer = new byte[4096];, + int count;, + while ((count
[+++ b/pom.xml, + <version>2.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>2.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <version>1.5.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/pom.xml, + <version>1.5.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.5.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.5.2-SNAPSHOT</version>, +++ b/pom.xml, +
[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, + * {@link Flowable}, {@link Single}, {@link Completable} or {@link Maybe} from service methods.]
[+++ b/android-native/pom.xml, + <version>0.6.0-rc1</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc1</version>, +++ b/android/pom.xml, + <version>0.6.0-rc1</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc1</version>, +++ b/android/pom.xml, + <version>0.6.0-rc1</version>, +++ b/core/pom.xml, + <version>0.6.0-rc1</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc1</version>, +++ b/android/pom.xml, + <version>0.6.0-rc1</version>, +++ b/core/pom.xml, + <version>0.6.0-rc1</version>, +++ b/http/pom.xml, + <version>0.6.0-rc1</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc1</version>, +++ b/android/pom.xml, + <version>0.6.0-rc1</version>, +++ b/core/pom.xml, + <version>0.6.0-rc1</version>, +++ b/http/pom.xml, + <version>0.6.0-rc1</version>, +++ b/io/pom.xml, + <version>0.6.0-rc1</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc1</version>, +++ b/android/pom.xml, + <version>0.6.0-rc1</version>, +++ b/core/pom.xml, + <version>0.6.0-rc1</version>, +++ b/http/pom.xml, + <version>0.6.0-rc1</version>, +++ b/io/pom.xml, + <version>0.6.0-rc1</version>, +++ b/pom.xml, + <version>0.6.0-rc1</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc1</version>, +++ b/android/pom.xml, + <version>0.6.0-rc1</version>, +++ b/core/pom.xml, + <version>0.6.0-rc1</version>, +++ b/http/pom.xml, +
[+++ b/retrofit/src/main/java/retrofit/Callback.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit/pom.xml, +++ b/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +import android.os.Handler;, +import android.os.Looper;, +class Platform {, + return new Platform();, + Converter defaultConverter() {, + return new GsonConverter();, + Executor defaultCallbackExecutor() {, + return new Executor()
[+++ b/modules/core/src/retrofit/core/Callback.java, + * @return response object or null if server returned an empty response., + void clientError(T response);, +++ b/modules/core/src/retrofit/core/Callback.java, + * @return response object or null if server returned an empty response., + void clientError(T response);, +++ /dev/null, +++ b/modules/core/src/retrofit/core/Callback.java, + * @return response object or null if server returned an empty response., + void clientError(T response);, +++ /dev/null, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, + * {@link Callback#call(T)}. Invoked in background thread., + try {, + callback.clientError(parse(entity));, + } catch (ServerException e) {, + logger.log(Level.WARNING, e.getMessage(), e);, + callback.serverError(null);, + }, +++ b/modules/core/src/retrofit/core/Callback.java, +
[+++ b/retrofit/src/main/java/retrofit/BuiltInConverters.java, + private OkHttpResponseBodyConverter streamingResponseBodyConverter;, + private OkHttpResponseBodyConverter bufferingResponseBodyConverter;, + private VoidConverter voidResponseBodyConverter;, + private OkHttpRequestBodyConverter requestBodyConverter;, +, + if (ResponseBody.class == type) {, + if (Utils.isAnnotationPresent(annotations, Streaming.class)) {, + OkHttpResponseBodyConverter converter = streamingResponseBodyConverter;, + return converter != null, + ? converter, + : (streamingResponseBodyConverter = new OkHttpResponseBodyConverter(true));, + } else {, + OkHttpResponseBodyConverter converter = bufferingResponseBodyConverter;, + return converter != null, + ? converter, + : (bufferingResponseBodyConverter = new OkHttpResponseBodyConverter(false));, + }, + if (Void.class == type) {, + VoidConverter converter = voidResponseBodyConverter;, + return converter != null, + ? converter, + : (voidResponseBodyConverter = new VoidConverter());,
[+++ b/retrofit/src/main/java/retrofit/DefaultCallAdapterFactory.java, + return "Default CallAdapterFactory";, +++ b/retrofit/src/main/java/retrofit/DefaultCallAdapterFactory.java, + return "Default CallAdapterFactory";, +++ b/retrofit/src/main/java/retrofit/MethodHandler.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS
[+++ b/pom.xml, + <appengine.version>1.8.9</appengine.version>, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + <version>${appengine.version}</version>, + </dependency>, +++ b/pom.xml, + <appengine.version>1.8.9</appengine.version>, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + <version>${appengine.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, +, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + <optional>true</optional>, + </dependency>, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-compiler-plugin</artifactId>, + <configuration>, + <!-- The AppEngine dependency has an annotation processor we don't want to run. -->, + <compilerArgument>-proc:none</compilerArgument>, + </configuration>, + </plugin>, + </plugins>, + </build>, +++ b/pom.xml, + <appengine.version>1.8.9</appengine.version>, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + <version>${appengine.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, +, + <dependency>, +
[+++ b/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/pom.xml, + <version>1.7.0-SNAPSHOT</version>, +++ b/retrofit-converters/protobuf/pom.xml, +
[+++ b/http/pom.xml, + <optional>true</optional>]
[+++ b/android/pom.xml, + <version>${project.version}</version>]
[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, + String headerValue = valueConverter.convert(value);, + if (headerValue == null) return; // Skip converted but null values., +, + builder.addHeader(name, headerValue);, +, + String queryValue = valueConverter.convert(value);, + if (queryValue == null) return; // Skip converted but null values, +, + builder.addQueryParam(name, queryValue, encoded);, +, + String convertedEntryValue = valueConverter.convert(entryValue);, + if (convertedEntryValue == null) {, + throw new IllegalArgumentException("Query map value '", + + entryValue, + + "' converted to null by ", + + valueConverter.getClass().getName(), + + " for key '", + + entryKey, + + "'.");, + }, +, + builder.addQueryParam(entryKey, convertedEntryValue, encoded);,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/retrofit-mock/src/test/java/retrofit/mock/MockRetrofitTest.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY
[+++ b/http/pom.xml]
[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/ExecutorCallAdapterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/pom.xml, + <rxjava.version>1.1.0</rxjava.version>, +++ b/pom.xml, + <rxjava.version>1.1.0</rxjava.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +import rx.singles.BlockingSingle;, + @Test public void singleBodySuccess200() {, + server.enqueue(new MockResponse().setBody("Hi"));, +, + BlockingSingle<String> o = service.singleBody().toBlocking();, + assertThat(o.value()).isEqualTo("Hi");, + }, +, + @Test public void singleBodySuccess404() {, + server.enqueue(new MockResponse().setResponseCode(404));, +, + BlockingSingle<String> o = service.singleBody().toBlocking();, + try {, + o.value();, + fail();, + } catch (RuntimeException e) {, + Throwable cause = e.getCause();, + assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 OK");, + }, + }, +, + @Test public void singleBodyFailure() {, + server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, + BlockingSingle<String> o = service.singleBody().toBlocking();, + try {, + o.value();, + fail();, + } catch
[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + private final HttpUrl baseUrl;, + Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, + public HttpUrl baseUrl() {, + private HttpUrl baseUrl;, + public Builder baseUrl(HttpUrl baseUrl) {, + this.baseUrl = baseUrl;, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + private final HttpUrl baseUrl;, + Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,, + public HttpUrl baseUrl() {, + private HttpUrl baseUrl;, + public Builder baseUrl(HttpUrl baseUrl) {, + this.baseUrl = baseUrl;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import okhttp3.HttpUrl;, + private final HttpUrl baseUrl;, + RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, + contentType, hasBody, isFormEncoded, isMultipart);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, + private final HttpUrl
[+++ b/examples/directory-sync/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + package="retrofit.test_app", + android:versionCode="1", + android:versionName="1.0">, + <application android:label="Test Retrofit">, + <activity android:name="Main", + android:label="Test Retrofit">, + <intent-filter>, + <action android:name="android.intent.action.MAIN" />, + <category android:name="android.intent.category.LAUNCHER" />, + </intent-filter>, + </activity>, + </application>, +</manifest> , +++ b/examples/directory-sync/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + package="retrofit.test_app", + android:versionCode="1", + android:versionName="1.0">, + <application android:label="Test Retrofit">, + <activity android:name="Main", + android:label="Test Retrofit">, + <intent-filter>, + <action android:name="android.intent.action.MAIN" />, + <category android:name="android.intent.category.LAUNCHER" />, + </intent-filter>, + </activity>, + </application>, +</manifest> , +++ b/examples/directory-sync/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>,
[+++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + <version>1.7</version>, + <version>3.0</version>, + </plugins>, + </pluginManagement>, +, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-release-plugin</artifactId>, + <configuration>, + <autoVersionSubmodules>true</autoVersionSubmodules>, + </configuration>, + </plugin>, + <configLocation>checkstyle.xml</configLocation>, +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + <version>1.7</version>, + <version>3.0</version>, + </plugins>, + </pluginManagement>, +, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-release-plugin</artifactId>, + <configuration>, + <autoVersionSubmodules>true</autoVersionSubmodules>, + </configuration>, + </plugin>, + <configLocation>checkstyle.xml</configLocation>, +++ b/retrofit/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +++ b/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + <version>1.7</version>, + <version>3.0</version>, + </plugins>, + </pluginManagement>, +, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-release-plugin</artifactId>, + <configuration>, + <autoVersionSubmodules>true</autoVersionSubmodules>,
[+++ b/pom.xml, + <version>1.9.0</version>, + <tag>parent-1.9.0</tag>, +++ b/pom.xml, + <version>1.9.0</version>, + <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.9.0</version>, +++ b/pom.xml, + <version>1.9.0</version>, + <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.9.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.9.0</version>, +++ b/pom.xml, + <version>1.9.0</version>, + <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.9.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.9.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.9.0</version>, +++ b/pom.xml, + <version>1.9.0</version>, + <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.9.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.9.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.9.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.9.0</version>, +++ b/pom.xml, + <version>1.9.0</version>, + <tag>parent-1.9.0</tag>, +++ b/retrofit-converters/jackson/pom.xml, + <version>1.9.0</version>, +++ b/retrofit-converters/pom.xml, + <version>1.9.0</version>, +++ b/retrofit-converters/protobuf/pom.xml, + <version>1.9.0</version>, +++ b/retrofit-converters/simplexml/pom.xml, + <version>1.9.0</version>, +++ b/retrofit-converters/wire/pom.xml, + <version>1.9.0</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <protobuf.version>3.0.0</protobuf.version>, +++ b/pom.xml, + <protobuf.version>3.0.0</protobuf.version>, +++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, + Method method = c.getDeclaredMethod("parser");, + //noinspection unchecked, + parser = (Parser<MessageLite>) method.invoke(null);, + } catch (InvocationTargetException e) {, + throw new RuntimeException(e.getCause());, + } catch (NoSuchMethodException | IllegalAccessException ignored) {, + // If the method is missing, fall back to original static field for pre-3.0 support., + try {, + throw new IllegalArgumentException("Found a protobuf message but ", + + c.getName(), + + " had no parser() method or PARSER field.");, + }, +++ b/pom.xml, + <protobuf.version>3.0.0</protobuf.version>, +++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +
[+++ b/pom.xml, + <gson.version>2.2.2</gson.version>, + <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, + <repositories>, + <repository>, + <id>sonatype-nexus-snapshots</id>, + <name>Sonatype Nexus Snapshots</name>, + <url>https://oss.sonatype.org/content/repositories/snapshots</url>, + <releases>, + <enabled>false</enabled>, + </releases>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + </repositories>, +, +++ b/pom.xml, + <gson.version>2.2.2</gson.version>, + <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->, + <repositories>, + <repository>, + <id>sonatype-nexus-snapshots</id>, + <name>Sonatype Nexus Snapshots</name>, + <url>https://oss.sonatype.org/content/repositories/snapshots</url>, + <releases>, + <enabled>false</enabled>, + </releases>, + <snapshots>, + <enabled>true</enabled>, + </snapshots>, + </repository>, + </repositories>, +, +++ b/retrofit/pom.xml, +++ b/pom.xml, + <gson.version>2.2.2</gson.version>, + <!-- Bring in Maven
[+++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/io/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android-native/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/android/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/core/pom.xml, + <version>0.6.0-SNAPSHOT</version>, +++ b/http/pom.xml, +
[+++ b/retrofit/src/main/java/retrofit2/Call.java, +++ b/retrofit/src/main/java/retrofit2/Call.java, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/Call.java, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/MethodHandler.java, + private final okhttp3.Call.Factory callFactory;, + private MethodHandler(okhttp3.Call.Factory callFactory, RequestFactory requestFactory,, + return callAdapter.adapt(, + new OkHttpCall<>(callFactory, requestFactory, args, responseConverter));, +++ b/retrofit/src/main/java/retrofit2/Call.java, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/MethodHandler.java, + private final okhttp3.Call.Factory callFactory;, + private MethodHandler(okhttp3.Call.Factory callFactory, RequestFactory requestFactory,, + return callAdapter.adapt(, + new OkHttpCall<>(callFactory, requestFactory, args, responseConverter));, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, + private final okhttp3.Call.Factory callFactory;, + private final RequestFactory requestFactory;, + private final Object[] args;, + OkHttpCall(okhttp3.Call.Factory callFactory, RequestFactory requestFactory, Object[] args,, + this.callFactory = callFactory;, + this.requestFactory = requestFactory;, + this.args = args;, + return new OkHttpCall<>(callFactory, requestFactory,
[+++ b/retrofit/src/main/java/retrofit2/Invocation.java, + public static Invocation of(Method method, List<?> arguments) {, + checkNotNull(method, "method == null");, + checkNotNull(arguments, "arguments == null");, + return new Invocation(method, new ArrayList<>(arguments)); // Defensive copy., + }, +, + /** Trusted constructor assumes ownership of {@code arguments}. */, + Invocation(Method method, List<?> arguments) {, + this.arguments = Collections.unmodifiableList(arguments);, +++ b/retrofit/src/main/java/retrofit2/Invocation.java, + public static Invocation of(Method method, List<?> arguments) {, + checkNotNull(method, "method == null");, + checkNotNull(arguments, "arguments == null");, + return new Invocation(method, new ArrayList<>(arguments)); // Defensive copy., + }, +, + /** Trusted constructor assumes ownership of {@code arguments}. */, + Invocation(Method method,
[+++ b/pom.xml, + <junit.version>4.11</junit.version>, + <assertj.version>1.6.1</assertj.version>, + <guava.version>17.0</guava.version>]
[+++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, + retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, + retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +, + @Test public void delegates() throws IOException {, + Retrofit retrofit = new Retrofit.Builder(), + .baseUrl(server.url("/")), + .addConverterFactory(new Converter.Factory() {, + @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, + Annotation[] annotations, Retrofit retrofit) {, + if (getRawType(type) != Object.class) {, + return null;, + }, + return new Converter<ResponseBody, Object>() {, + @Override public Object convert(ResponseBody value) {, + return null;, + }, + };, + }, + }), + .addConverterFactory(GuavaOptionalConverterFactory.create()), + .build();, +, + server.enqueue(new
[+++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android/pom.xml, + <version>0.6.0-rc6</version>, +++ b/core/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android/pom.xml, + <version>0.6.0-rc6</version>, +++ b/core/pom.xml, + <version>0.6.0-rc6</version>, +++ b/http/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android/pom.xml, + <version>0.6.0-rc6</version>, +++ b/core/pom.xml, + <version>0.6.0-rc6</version>, +++ b/http/pom.xml, + <version>0.6.0-rc6</version>, +++ b/io/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android/pom.xml, + <version>0.6.0-rc6</version>, +++ b/core/pom.xml, + <version>0.6.0-rc6</version>, +++ b/http/pom.xml, + <version>0.6.0-rc6</version>, +++ b/io/pom.xml, + <version>0.6.0-rc6</version>, +++ b/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android-native/pom.xml, + <version>0.6.0-rc6</version>, +++ b/android/pom.xml, + <version>0.6.0-rc6</version>, +++ b/core/pom.xml, + <version>0.6.0-rc6</version>, +++ b/http/pom.xml, +
[+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, + private volatile Throwable failureException;, +, + failureException = new IOException("Mock failure!");, + failureException.setStackTrace(new StackTraceElement[0]);, + /**, + * Set the exception to be used when a failure is triggered., + * <p>, + * It is a best practice to remove the stack trace from {@code t} since it can misleadingly, + * point to code unrelated to this class., + */, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, + private volatile Throwable failureException;, +, + failureException = new IOException("Mock failure!");, + failureException.setStackTrace(new StackTraceElement[0]);, + /**, + * Set the exception to be used when a failure is triggered., + *
[+++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * @deprecated Retrofit includes support for CompletableFuture. This no longer needs to be added to, + * the Retrofit instance explicitly., + *, +@Deprecated, +++ b/retrofit-adapters/java8/README.md, +Deprecated – Included by default in Retrofit, +---------------------------------------, +, +, +++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java, + * @deprecated Retrofit includes support for CompletableFuture. This no longer needs to be added to, + * the Retrofit instance explicitly., + *, +@Deprecated, +++ b/retrofit/src/main/java/retrofit2/CompletableFutureCallAdapterFactory.java, +/*, + * Copyright (C) 2016 Square,
[+++ b/.gitignore, +# Eclipse, +# Idea, +#MacOS]
[+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, + return new BodyCallAdapter(innerType);, + return new ResponseCallAdapter(responseType);, + private static class BodyCallAdapter implements CallAdapter<ListenableFuture<?>> {, + @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, + private static class ResponseCallAdapter implements CallAdapter<ListenableFuture<?>> {, + @Override public <R> ListenableFuture<Response<R>> adapt(final Call<R> call) {, +++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java, + public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, + return new BodyCallAdapter(innerType);, + return new ResponseCallAdapter(responseType);, + private static class BodyCallAdapter implements CallAdapter<ListenableFuture<?>> {, + @Override public <R> ListenableFuture<R> adapt(final Call<R> call) {, + private static class ResponseCallAdapter implements CallAdapter<ListenableFuture<?>> {,
[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + final NetworkBehavior behavior;, + final ExecutorService backgroundExecutor;, + final Call<T> delegate;, + volatile boolean canceled;, + boolean delaySleep() {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + final NetworkBehavior behavior;, + final ExecutorService backgroundExecutor;, + final Call<T> delegate;, + volatile boolean canceled;, + boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, + final Retrofit retrofit;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, + CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, + final NetworkBehavior behavior;, + final ExecutorService backgroundExecutor;, + final Call<T> delegate;, + volatile boolean canceled;, + boolean delaySleep() {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +
[+++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, + super(message, url, response, null, body.getClass(), false, null);, +++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, + super(message, url, response, null, body.getClass(), false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, + @GET("/") void doStuff(Callback<String> cb);, + @GET("/") Observable<String> doStuff();, + @Override public void doStuff(Callback<String> cb) {, + mockService.doStuff(new Callback<String>() {, + @Override public void success(String o, Response response) {, + @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., + final String expected = new String("Hi");, +, + @Override public void doStuff(Callback<String> cb) {, + mockService.doStuff(new Callback<String>() {, + @Override public void success(String result, Response response) {, + @SuppressWarnings("RedundantStringConstructorCall") //
[+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, + if (Iterable.class.isAssignableFrom(rawParameterType)) {, + if (!(type instanceof ParameterizedType)) {, + throw parameterError(p, rawParameterType.getSimpleName(), + + " must include generic type (e.g., ", + + rawParameterType.getSimpleName(), + + "<String>)");, + }, + ParameterizedType parameterizedType = (ParameterizedType) type;, + Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);, + if (!MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(iterableType))) {, + return ParameterHandler.RawPart.INSTANCE.iterable();, + } else if (rawParameterType.isArray()) {, + Class<?> arrayComponentType = rawParameterType.getComponentType();, + if (!MultipartBody.Part.class.isAssignableFrom(arrayComponentType)) {, + throw parameterError(p,, + "@Part annotation must supply a name or use MultipartBody.Part parameter type.");, + }, + return ParameterHandler.RawPart.INSTANCE.array();, + } else if (MultipartBody.Part.class.isAssignableFrom(rawParameterType)) {, + throw parameterError(p,, + "@Part annotation
[+++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, + return new MoshiConverterFactory(moshi, false);, + private final boolean lenient;, + private MoshiConverterFactory(Moshi moshi, boolean lenient) {, + this.lenient = lenient;, + }, +, + /** Return a new factory which uses {@linkplain JsonAdapter#lenient() lenient} adapters. */, + public MoshiConverterFactory asLenient() {, + return new MoshiConverterFactory(moshi, true);, + if (lenient) {, + adapter = adapter.lenient();, + }, + if (lenient) {, + adapter = adapter.lenient();, + }, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, + return new MoshiConverterFactory(moshi, false);, + private final boolean lenient;, + private MoshiConverterFactory(Moshi moshi, boolean lenient) {, + this.lenient = lenient;, + }, +, + /** Return a
[+++ b/.idea/libraries/JARs.xml, + <root url="file://$PROJECT_DIR$/lib" />, + <root url="jar://$PROJECT_DIR$/lib/android-test-2.2.1-sources.jar!/" />, + <jarDirectory url="file://$PROJECT_DIR$/lib" recursive="false" />, +++ b/.idea/libraries/JARs.xml, + <root url="file://$PROJECT_DIR$/lib" />, + <root url="jar://$PROJECT_DIR$/lib/android-test-2.2.1-sources.jar!/" />, + <jarDirectory url="file://$PROJECT_DIR$/lib" recursive="false" />, +++ b/.idea/modules.xml, + <module fileurl="file://$PROJECT_DIR$/modules/util/android.iml" filepath="$PROJECT_DIR$/modules/util/android.iml" />, +++ b/.idea/libraries/JARs.xml, + <root url="file://$PROJECT_DIR$/lib" />, + <root url="jar://$PROJECT_DIR$/lib/android-test-2.2.1-sources.jar!/" />, + <jarDirectory url="file://$PROJECT_DIR$/lib" recursive="false" />, +++ b/.idea/modules.xml, + <module fileurl="file://$PROJECT_DIR$/modules/util/android.iml" filepath="$PROJECT_DIR$/modules/util/android.iml" />, +++ b/build.xml, + <compile.module module="android"/>, + <jar.module module="android"/>, + <pathelement location="${build.dir}/android/main"/>, + <pathelement location="${build.dir}/android/tests"/>, + <fileset dir="modules/android/src-tests">, +++ b/.idea/libraries/JARs.xml, + <root url="file://$PROJECT_DIR$/lib" />, + <root url="jar://$PROJECT_DIR$/lib/android-test-2.2.1-sources.jar!/" />, + <jarDirectory url="file://$PROJECT_DIR$/lib" recursive="false" />, +++ b/.idea/modules.xml, + <module fileurl="file://$PROJECT_DIR$/modules/util/android.iml" filepath="$PROJECT_DIR$/modules/util/android.iml" />, +++
[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import java.lang.reflect.Type;, +import static retrofit2.Utils.methodError;, +, + Type returnType = method.getGenericReturnType();, + if (Utils.hasUnresolvableType(returnType)) {, + throw methodError(method,, + "Method return type must not include a type variable or wildcard: %s", returnType);, + }, + if (returnType == void.class) {, + throw methodError(method, "Service methods cannot return void.");, + }, +]
[+++ b/retrofit-converters/moshi/pom.xml, + <!-- TODO remove this dependency once Moshi or OkHttp ships with 1.9.0 or newer. -->, + <dependency>, + <groupId>com.squareup.okio</groupId>, + <artifactId>okio</artifactId>, + <version>1.9.0</version>, + </dependency>, +++ b/retrofit-converters/moshi/pom.xml, + <!-- TODO remove this dependency once Moshi or OkHttp ships with 1.9.0 or newer. -->, + <dependency>, + <groupId>com.squareup.okio</groupId>, + <artifactId>okio</artifactId>, + <version>1.9.0</version>, + </dependency>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import okio.BufferedSource;, +import okio.ByteString;, + private static final ByteString UTF8_BOM = ByteString.decodeHex("EFBBBF");, +, + BufferedSource source = value.source();, + // Moshi has no document-level API so the responsibility of BOM skipping falls to whatever, + // is delegating to it. Since
[+++ b/pom.xml, + <version>2.1.0</version>, + <tag>parent-2.1.0</tag>, +++ b/pom.xml, + <version>2.1.0</version>, + <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.1.0</version>, +++ b/pom.xml, + <version>2.1.0</version>, + <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.1.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.1.0</version>, +++ b/pom.xml, + <version>2.1.0</version>, + <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.1.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.1.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.1.0</version>, +++ b/pom.xml, + <version>2.1.0</version>, + <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.1.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.1.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.1.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.1.0</version>, +++ b/pom.xml, + <version>2.1.0</version>, + <tag>parent-2.1.0</tag>, +++ b/retrofit-adapters/guava/pom.xml, + <version>2.1.0</version>, +++ b/retrofit-adapters/java8/pom.xml, + <version>2.1.0</version>, +++ b/retrofit-adapters/pom.xml, + <version>2.1.0</version>, +++ b/retrofit-adapters/rxjava/pom.xml, + <version>2.1.0</version>, +++ b/retrofit-converters/gson/pom.xml, + <version>2.1.0</version>, +++ b/pom.xml, +
[+++ b/pom.xml, + <module>retrofit-appengine</module>, +++ b/pom.xml, + <module>retrofit-appengine</module>, +++ b/retrofit-appengine/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>parent</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + </parent>, +, + <artifactId>retrofit-appengine</artifactId>, + <name>Retrofit AppEngine</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.retrofit</groupId>, + <artifactId>retrofit</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.google.appengine</groupId>, + <artifactId>appengine-api-1.0-sdk</artifactId>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.mockito</groupId>, + <artifactId>mockito-core</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, +
[+++ b/modules/http/src/retrofit/http/GET.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Make a GET request to a REST path relative to base URL., + *, + * @author Rob Dickerson, + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public @interface GET {, + String value();, +}, +++ b/modules/http/src/retrofit/http/GET.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Make a GET request to a REST path relative to base URL., + *, + * @author Rob Dickerson, + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public
[+++ b/pom.xml, + <guava.version>14.0-rc3</guava.version>, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <version>${guava.version}</version>, + </dependency>, +++ b/pom.xml, + <guava.version>14.0-rc3</guava.version>, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <version>${guava.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/pom.xml, + <guava.version>14.0-rc3</guava.version>, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <version>${guava.version}</version>, + </dependency>, +++ b/retrofit/pom.xml, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +import retrofit.io.TypedInput;, +import retrofit.io.TypedOutput;, + Object fromBody(TypedInput body, Type type) throws ConversionException;, + TypedOutput toBody(Object object);, +++ b/pom.xml, + <guava.version>14.0-rc3</guava.version>, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <version>${guava.version}</version>, + </dependency>, +++
[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .converterFactory(new StringConverterFactory()), + static class StringConverterFactory implements Converter.Factory {, + @Override public Converter<?> get(Type type) {, + return new Converter<String>() {, + @Override public String fromBody(ResponseBody body) throws IOException {, + @Override public RequestBody toBody(String value) {, + return RequestBody.create(MediaType.parse("text/plain"), value);, + }, + };, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, + .converterFactory(new StringConverterFactory()), + static class StringConverterFactory implements Converter.Factory {, + @Override public Converter<?> get(Type type) {, + return new Converter<String>() {, + @Override public String fromBody(ResponseBody body) throws IOException {, + @Override public RequestBody toBody(String value) {, + return RequestBody.create(MediaType.parse("text/plain"), value);, + }, + };, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverter.java, +import
[+++ b/pom.xml, + <okhttp.version>3.0.1</okhttp.version>]
[+++ b/pom.xml, + <wire.version>2.0.0</wire.version>, +++ b/pom.xml, + <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/pom.xml, + <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java, +import com.squareup.wire.ProtoAdapter;, + * This converter only applies for types which extend from {@link Message}., + return new WireConverterFactory();, + private WireConverterFactory() {, + ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, + return new WireResponseBodyConverter<>(adapter);, + Class<?> c = (Class<?>) type;, + if (!Message.class.isAssignableFrom(c)) {, + //noinspection unchecked, + ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, + return new WireRequestBodyConverter<>(adapter);, +++ b/pom.xml, + <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java, +import com.squareup.wire.ProtoAdapter;, + * This converter only applies for
[+++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, + } catch (Exception e) {, + // This is from the Callable. It shouldn't actually throw., + throw new RuntimeException(e);, +++ b/pom.xml, + <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, + } catch (Exception e) {, + // This is from the Callable. It shouldn't actually throw., + throw new RuntimeException(e);, +++ b/retrofit/src/test/java/retrofit/EndpointsTest.java, +// Copyright 2014 Square, Inc., +package retrofit;, +, +import org.junit.Test;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +public class EndpointsTest {, + @Test public void endpointOnly() {, + Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com");, + assertThat(endpoint.getUrl()).isEqualTo("http://example.com");, + }, +, + @Test public void
