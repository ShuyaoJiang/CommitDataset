[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ChildModuleProcessor.java, +package com.bumptech.glide.annotation.compiler;, +, +import com.bumptech.glide.annotation.GlideModule;, +import com.squareup.javapoet.TypeSpec;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +import javax.annotation.processing.RoundEnvironment;, +import javax.lang.model.element.TypeElement;, +, +/**, + * Generates {@link ModuleIndex} annotated classes for all, + * {@link com.bumptech.glide.module.ChildGlideModule} implementations., + */, +final class ChildModuleProcessor {, + private static final String COMPILER_PACKAGE_NAME =, + GlideAnnotationProcessor.class.getPackage().getName();, +, + private ProcessorUtil processorUtil;, +, + ChildModuleProcessor(ProcessorUtil processorUtil) {, + this.processorUtil = processorUtil;, + }, +, + boolean processModules(Set<? extends TypeElement> set, RoundEnvironment env) {, + // Order matters here, if we find an Indexer below, we return before writing the root module., +
[+++ b/library/findbugs-exclude.xml, + <!-- DecodeJob tasks are ordered, but equivalent ordering does not imply equality -->, + <Match>, + <Class name="com.bumptech.glide.load.engine.DecodeJob" />, + <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS" />, + </Match>, +, +++ b/library/findbugs-exclude.xml, + <!-- DecodeJob tasks are ordered, but equivalent ordering does not imply equality -->, + <Match>, + <Class name="com.bumptech.glide.load.engine.DecodeJob" />, + <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS" />, + </Match>, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.executor.GlideExecutor;, + GlideExecutor executor = mock(GlideExecutor.class);, + doAnswer(new Answer<Void>() {, + public Void answer(InvocationOnMock invocation) throws Throwable {, + return null;, + }).when(executor).execute(any(Runnable.class));, + .setResizeExecutor(executor).setDiskCacheExecutor(executor);, +++ b/library/findbugs-exclude.xml, + <!-- DecodeJob tasks are ordered, but equivalent ordering does not
[+++ b/library/src/com/bumptech/glide/loader/bitmap/BaseBitmapLoadFactory.java, + if ((imageModelLoader == null || imageDecoder == null), + && (videoModelLoader == null || videoDecoder == null)) {, + throw new IllegalArgumentException("You must provide at least a video model loader and a video decoder or" +, + "an image model loader and an image decoder");, + }, + if (transformationLoader == null) {, + throw new IllegalArgumentException("You must provide a non null transformation loader");, + }, +++ b/library/src/com/bumptech/glide/loader/bitmap/BaseBitmapLoadFactory.java, + if ((imageModelLoader == null || imageDecoder == null), + && (videoModelLoader == null || videoDecoder == null)) {, + throw new IllegalArgumentException("You must provide at least a
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, +import com.bumptech.glide.load.MultiTransformation;, + * Applies the given {@link Transformation}s in the given order for, + * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},, + * {@link android.graphics.drawable.BitmapDrawable}, and, + * {@link com.bumptech.glide.load.resource.gif.GifDrawable}), + * and throws an exception if asked to transform an unknown type., + * <p>, + * <p>This will override previous calls to {@link #dontTransform()}., + *, + * @param transformations One or more {@link Transformation}s for {@link Bitmap}s., + * @see #optionalTransform(Transformation), + * @see #optionalTransform(Class, Transformation), + */, + public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformations) {, + if (isAutoCloneEnabled) {, +
[+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +import java.lang.Class;, +import java.lang.Override;, +import java.lang.SuppressWarnings;, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +import java.lang.Class;, +import java.lang.Override;, +import java.lang.SuppressWarnings;, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java, +import java.lang.Class;, +import java.lang.Override;, +import java.lang.SuppressWarnings;, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +import java.lang.Class;, +import java.lang.Override;, +import java.lang.SuppressWarnings;, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java, +import java.lang.Class;, +import java.lang.Override;, +import java.lang.SuppressWarnings;, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java, +import java.lang.Class;, +import java.lang.Override;, +import java.lang.SuppressWarnings;, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +import java.lang.Class;, +import java.lang.Override;, +import java.lang.SuppressWarnings;, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java, +import java.lang.Class;, +import java.lang.Override;, +import java.lang.SuppressWarnings;, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java, +import java.lang.Class;, +import java.lang.Override;, +import java.lang.SuppressWarnings;, +++ b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java, +import java.lang.Class;, +import java.lang.Override;, +import java.lang.SuppressWarnings;, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +import java.lang.Class;, +import java.lang.Override;, +import java.lang.SuppressWarnings;, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java, +import java.lang.Class;, +import java.lang.Override;, +import java.lang.SuppressWarnings;, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java, +import
[+++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, + private static final String ALLOWED_URI_CHARS = "@#&=*+-_.,:!?()/~'%;$";, +++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, + private static final String ALLOWED_URI_CHARS = "@#&=*+-_.,:!?()/~'%;$";, +++ b/library/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java, +import static com.google.common.truth.Truth.assertThat;, + public void issue_2583() throws MalformedURLException {, + String original =, + "http://api.met.no/weatherapi/weathericon/1.1/?symbol=9;content_type=image/png";, +, + GlideUrl glideUrl = new GlideUrl(original);, + assertThat(glideUrl.toURL().toString()).isEqualTo(original);, + assertThat(glideUrl.toStringUrl()).isEqualTo(original);, + }, +, + @Test]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.transcode.DrawableBytesTranscoder;, + BitmapBytesTranscoder bitmapBytesTranscoder = new BitmapBytesTranscoder();, + GifDrawableBytesTranscoder gifDrawableBytesTranscoder = new GifDrawableBytesTranscoder();, +, + .register(Bitmap.class, byte[].class, bitmapBytesTranscoder), + .register(, + Drawable.class,, + byte[].class,, + new DrawableBytesTranscoder(, + bitmapPool, bitmapBytesTranscoder, gifDrawableBytesTranscoder)), + .register(GifDrawable.class, byte[].class, gifDrawableBytesTranscoder);, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.transcode.DrawableBytesTranscoder;, + BitmapBytesTranscoder bitmapBytesTranscoder = new BitmapBytesTranscoder();, + GifDrawableBytesTranscoder gifDrawableBytesTranscoder = new GifDrawableBytesTranscoder();, +, + .register(Bitmap.class, byte[].class, bitmapBytesTranscoder), + .register(, + Drawable.class,, + byte[].class,, + new DrawableBytesTranscoder(, + bitmapPool, bitmapBytesTranscoder, gifDrawableBytesTranscoder)), + .register(GifDrawable.class, byte[].class, gifDrawableBytesTranscoder);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/DrawableBytesTranscoder.java, +package com.bumptech.glide.load.resource.transcode;, +, +, +import android.graphics.Bitmap;, +import android.graphics.drawable.BitmapDrawable;, +import android.graphics.drawable.Drawable;, +import android.support.annotation.Nullable;, +import com.bumptech.glide.load.Options;, +import
[+++ b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgModule.java, +import com.bumptech.glide.module.AppGlideModule;, +public class SvgModule extends AppGlideModule {]
[+++ b/README.md, +Download, +--------, +You can download a jar from GitHub's [release page](https://github.com/bumptech/glide/releases) or to use the 3.0 alpha branch, use Gradle:, +, +```groovy, +repositories {, + mavenCentral(), + maven {, + url "https://oss.sonatype.org/content/repositories/snapshots", + }, +}, +, +dependencies {, + compile group: 'com.github.bumptech.glide', name:'glide', version:'3.3.0-SNAPSHOT', changing: true, +}, +```, +, +Or Maven:, +, +In your parent pom:, +, +```xml, +<parent>, + <groupId>org.sonatype.oss</groupId>, + <artifactId>oss-parent</artifactId>, + <version>7</version>, +</parent>, +```, +, +In your module:, +, +```xml, +<dependency>, + <groupId>com.github.bumptech.glide</groupId>, + <artifactId>glide</artifactId>, + <version>3.3.0-SNAPSHOT</version>, + <type>aar</type>, +</dependency>, +```, +, +Checkout the GitHub wiki for pages on a variety of topics and
[+++ b/gradle.properties, +MIN_SDK_VERSION=14, +++ b/gradle.properties, +MIN_SDK_VERSION=14, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/gradle.properties, +MIN_SDK_VERSION=14, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +++ b/gradle.properties, +MIN_SDK_VERSION=14, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + maybeSetPreMultiplied(bitmap);, +++ b/gradle.properties, +MIN_SDK_VERSION=14, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + maybeSetPreMultiplied(bitmap);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java, + // Explicitly check with an if statement, on some devices both parts of boolean expressions, + // can be evaluated even if we'd normally expect a short circuit., + return false;, +++ b/gradle.properties, +MIN_SDK_VERSION=14, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + maybeSetPreMultiplied(bitmap);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java, + // Explicitly check with an if statement, on some devices both parts of boolean
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CircleCrop.java, + // The version of this transformation, incremented to correct an error in a previous version., + // See #455., + private static final int VERSION = 1;, + private static final String ID = "com.bumptech.glide.load.resource.bitmap.CircleCrop." + VERSION;]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java, + private final Map<String, WriteLock> locks = new HashMap<>();, + void acquire(String safeKey) {, + writeLock = locks.get(safeKey);, + locks.put(safeKey, writeLock);, + void release(String safeKey) {, + writeLock = Preconditions.checkNotNull(locks.get(safeKey));, + + ", safeKey: " + safeKey, + WriteLock removed = locks.remove(safeKey);, + + ", safeKey: " + safeKey);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java, + private final Map<String, WriteLock> locks = new HashMap<>();, + void acquire(String safeKey) {, + writeLock = locks.get(safeKey);, + locks.put(safeKey, writeLock);, + void release(String safeKey) {, + writeLock = Preconditions.checkNotNull(locks.get(safeKey));, + + ", safeKey: " + safeKey, + WriteLock removed = locks.remove(safeKey);, + + ", safeKey:
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +package com.bumptech.glide;, +, +import static org.mockito.ArgumentMatchers.any;, +import static org.mockito.ArgumentMatchers.anyBoolean;, +import static org.mockito.ArgumentMatchers.eq;, +import static org.mockito.Mockito.verify;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.os.Handler;, +import android.os.Looper;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.load.DataSource;, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +import com.bumptech.glide.load.engine.cache.LruResourceCache;, +import com.bumptech.glide.request.FutureTarget;, +import com.bumptech.glide.request.RequestListener;, +import com.bumptech.glide.request.target.Target;, +import com.bumptech.glide.test.BitmapSubject;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +, +/**, + * Tests various aspects of memory and disk caching to verify resources can be retrieved as we, + * expect., + */, +@RunWith(AndroidJUnit4.class), +public
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, + * Disables the use of {@link android.graphics.Bitmap.Config#HARDWARE} in {@link Downsampler} to, + * avoid errors caused by inspecting Bitmap pixels, drawing with hardware support disabled,, + * drawing to {@link android.graphics.Canvas}s backed by {@link Bitmap}s etc., + *, + * <p>It's almost never safe to set {@link Downsampler#ALLOW_HARDWARE_CONFIG} to {@code true} so, + * we only provide a way to disable hardware configs entirely. If no option is set for, + * {@link Downsampler#ALLOW_HARDWARE_CONFIG}, Glide will set the value per request based on, + * whether or not a {@link Transformation} is applied and if one
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, + * @see #optionalCenterCrop()]
[+++ b/library/src/main/java/com/bumptech/glide/request/target/NotificationTarget.java, + private final String notificationTag;, + this(context, viewId, remoteViews, notification, notificationId, null);, + * Constructor using a Notification object, a notificationId, and a notificationTag to get a, + * handle on the Notification in order to update it that uses {@link #SIZE_ORIGINAL} as the, + * target width and height., + *, + * @param context Context to use in the AppWidgetManager initialization., + * @param viewId The id of the ImageView view that will load the image., + * @param remoteViews RemoteViews object which contains the ImageView that will load the, + * bitmap., + *
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + long contentLength = responseBody.contentLength();, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + long contentLength = responseBody.contentLength();, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +import android.util.Log;, + private static final String TAG = "HttpUrlFetcher";, + private static final String ENCODING_HEADER = "Accept-Encoding";, + private static final String DEFAULT_ENCODING = "identity";, + // Do our best to avoid gzip since it's both inefficient for images and also makes it more, + // difficult for us to detect and prevent partial content rendering. See #440., + if (TextUtils.isEmpty(urlConnection.getRequestProperty(ENCODING_HEADER))) {, + urlConnection.setRequestProperty(ENCODING_HEADER, DEFAULT_ENCODING);, + }, + return getStreamForSuccessfulRequest(urlConnection);, + private InputStream getStreamForSuccessfulRequest(HttpURLConnection urlConnection), + throws IOException {, + if (TextUtils.isEmpty(urlConnection.getContentEncoding()))
[+++ b/build.gradle, + gradleVersion = '4.1', + distributionType = Wrapper.DistributionType.ALL, +, +++ b/build.gradle, + gradleVersion = '4.1', + distributionType = Wrapper.DistributionType.ALL, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + gradleVersion = '4.1', + distributionType = Wrapper.DistributionType.ALL, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip, +++ b/build.gradle, + gradleVersion = '4.1', + distributionType = Wrapper.DistributionType.ALL, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip, +++ b/gradlew, +#!/usr/bin/env sh, +# Attempt to set APP_HOME, +# Resolve links: $0 may be a link, +PRG="$0", +# Need this for relative symlinks., +while [ -h "$PRG" ] ; do, + ls=`ls -ld "$PRG"`, + link=`expr "$ls" : '.*-> \(.*\)$'`, + if
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + /*parentCoordinator=*/ null,]
[+++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + public InputStream loadData(Priority priority) throws IOException {, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + public InputStream loadData(Priority priority) throws IOException {, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +@Config(manifest = Config.NONE, emulateSdk = 18, shadows =, + VolleyStreamFetcherServerTest.FakeSystemClock.class), + public void testReturnsNullIfRedirectLocationIsEmpty() throws Exception {, + assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, + public void testReturnsNullIfStatusCodeIsNegativeOne() throws Exception {, + assertThat(getFetcher().loadData(Priority.LOW)).isNull();, + public void testReturnsNullAfterTooManyRedirects() throws Exception {, + assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, + public void testReturnsNullIfStatusCodeIs500() throws Exception {, + assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, + public void testReturnsNullIfStatusCodeIs400() throws Exception {, + assertThat(getFetcher().loadData(Priority.LOW)).isNull();, +++
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, + if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, + } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, + if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, + } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, + } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, + if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, + } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, + } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java, + if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, + } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, +
[+++ b/src/com/bumptech/photos/imagemanager/loader/Approximate.java, +public class Approximate<T> extends ImageManagerLoader<T> {, +++ b/src/com/bumptech/photos/imagemanager/loader/Approximate.java, +public class Approximate<T> extends ImageManagerLoader<T> {, +++ b/src/com/bumptech/photos/imagemanager/loader/AsIs.java, +public class AsIs<T> extends ImageManagerLoader<T> {, +++ b/src/com/bumptech/photos/imagemanager/loader/Approximate.java, +public class Approximate<T> extends ImageManagerLoader<T> {, +++ b/src/com/bumptech/photos/imagemanager/loader/AsIs.java, +public class AsIs<T> extends ImageManagerLoader<T> {, +++ b/src/com/bumptech/photos/imagemanager/loader/CenterCrop.java, +public class CenterCrop<T> extends ImageManagerLoader<T> {, +++ b/src/com/bumptech/photos/imagemanager/loader/Approximate.java, +public class Approximate<T> extends ImageManagerLoader<T> {, +++ b/src/com/bumptech/photos/imagemanager/loader/AsIs.java, +public class AsIs<T> extends ImageManagerLoader<T> {, +++ b/src/com/bumptech/photos/imagemanager/loader/CenterCrop.java, +public class CenterCrop<T> extends ImageManagerLoader<T> {, +++ b/src/com/bumptech/photos/imagemanager/loader/Exact.java, +public class Exact<T> extends ImageManagerLoader<T> {, +++ b/src/com/bumptech/photos/imagemanager/loader/Approximate.java, +public class Approximate<T> extends ImageManagerLoader<T> {, +++ b/src/com/bumptech/photos/imagemanager/loader/AsIs.java, +public class AsIs<T> extends ImageManagerLoader<T> {, +++ b/src/com/bumptech/photos/imagemanager/loader/CenterCrop.java, +public
[+++ b/.idea/codeStyleSettings.xml, + <option name="PREFERRED_PROJECT_CODE_STYLE" value="GoogleStyle" />, +++ b/.idea/codeStyleSettings.xml, + <option name="PREFERRED_PROJECT_CODE_STYLE" value="GoogleStyle" />, +++ b/annotation/.gitignore, +/build, +++ b/.idea/codeStyleSettings.xml, + <option name="PREFERRED_PROJECT_CODE_STYLE" value="GoogleStyle" />, +++ b/annotation/.gitignore, +/build, +++ b/annotation/build.gradle, +apply plugin: 'java', +, +apply from: "${rootProject.projectDir}/scripts/upload.gradle", +++ b/.idea/codeStyleSettings.xml, + <option name="PREFERRED_PROJECT_CODE_STYLE" value="GoogleStyle" />, +++ b/annotation/.gitignore, +/build, +++ b/annotation/build.gradle, +apply plugin: 'java', +, +apply from: "${rootProject.projectDir}/scripts/upload.gradle", +++ b/annotation/compiler/.gitignore, +/build, +++ b/.idea/codeStyleSettings.xml, + <option name="PREFERRED_PROJECT_CODE_STYLE" value="GoogleStyle" />, +++ b/annotation/.gitignore, +/build, +++ b/annotation/build.gradle, +apply plugin: 'java', +, +apply from: "${rootProject.projectDir}/scripts/upload.gradle", +++ b/annotation/compiler/.gitignore, +/build, +++ b/annotation/compiler/build.gradle, +import org.gradle.internal.jvm.Jvm, +, +apply plugin: 'java', +, +dependencies {, + compile 'com.squareup:javapoet:1.8.0', + compile 'com.google.auto.service:auto-service:1.0-rc3', + compile
[+++ b/library/build.gradle, +, + consumerProguardFiles 'proguard-rules.txt', +++ b/library/build.gradle, +, + consumerProguardFiles 'proguard-rules.txt', +++ b/library/proguard-rules.txt, +-keep public class * implements com.bumptech.glide.module.GlideModule, +-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {, + **[] $VALUES;, + public *;, +}]
[+++ b/.travis.yml, + # TODO(#2738): Re-enable these when we find a fix., + # - COMPONENT=instrumentation ANDROID_TARGET=16, + # - COMPONENT=instrumentation ANDROID_TARGET=17, + # - COMPONENT=instrumentation ANDROID_TARGET=18]
[+++ b/gradle.properties, +VERSION_NAME=3.6.0-SNAPSHOT, +VERSION_MINOR=6, +VERSION_PATCH=0, +VERSION_CODE=12, +++ b/gradle.properties, +VERSION_NAME=3.6.0-SNAPSHOT, +VERSION_MINOR=6, +VERSION_PATCH=0, +VERSION_CODE=12, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.3.0-SNAPSHOT, +AERSION_MINOR=3, +VERSION_PATCH=0, +VERSION_CODE=8, +++ b/gradle.properties, +VERSION_NAME=3.6.0-SNAPSHOT, +VERSION_MINOR=6, +VERSION_PATCH=0, +VERSION_CODE=12, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.3.0-SNAPSHOT, +AERSION_MINOR=3, +VERSION_PATCH=0, +VERSION_CODE=8, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.3.0-SNAPSHOT, +VERSION_MINOR=3, +VERSION_PATCH=0, +VERSION_CODE=8]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, + .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), + .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, + .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), + .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, + @CheckResult, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, + .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), + .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, + @CheckResult, +++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java, + @CheckResult]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, + * Returns a {@link android.graphics.Bitmap} of exactly the given width, height, and configuration, and containing, + * only transparent pixels or null if no such {@link android.graphics.Bitmap} could be obtained from the pool., + *, + * <p>, + * Because this method erases all pixels in the {@link Bitmap}, this method is slightly slower than, + * {@link #getDirty(int, int, android.graphics.Bitmap.Config)}. If the {@link android.graphics.Bitmap} is being, + * obtained to be used in {@link android.graphics.BitmapFactory} or in any other case where every pixel in the, + * {@link android.graphics.Bitmap} will always be overwritten or
[+++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java, + /**, + * @deprecated Use {@link #waitForLayout()} instead., + */, + @SuppressWarnings({"unused", "deprecation"}), + @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java, + /**, + * @deprecated Use {@link #waitForLayout()} instead., + */, + @SuppressWarnings({"unused", "deprecation"}), + @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java, + /**, + * @deprecated Use {@link #waitForLayout()} instead., + */, + @SuppressWarnings("deprecation"), + @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java, + /**, + * @deprecated Use {@link #waitForLayout()} instead., + */, + @SuppressWarnings({"unused", "deprecation"}), + @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java, + /**, + * @deprecated Use {@link #waitForLayout()} instead., + */, + @SuppressWarnings("deprecation"), + @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java, + /**, + * @deprecated Use {@link #waitForLayout()} instead.,
[+++ b/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java, + * @param viewId The id of the ImageView view that will load the image., + * @param remoteViews RemoteViews object which contains the ImageView that will load the bitmap., + public AppWidgetTarget(Context context, int width, int height,, + int viewId, RemoteViews remoteViews, int... widgetIds) {, + * @param remoteViews RemoteViews object which contains the ImageView that will load the bitmap., + public AppWidgetTarget(Context context,, + int viewId, RemoteViews remoteViews, int... widgetIds) {, + this(context, SIZE_ORIGINAL, SIZE_ORIGINAL, viewId, remoteViews, widgetIds);, + * @param viewId The id of the ImageView view that will load the image., + *
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java]
[+++ b/README.md, +You can download a jar from GitHub's [release page](https://github.com/bumptech/glide/releases)., + compile 'com.github.bumptech.glide:glide:3.3.+', + <version>3.3.1</version>, +Checkout the [GitHub wiki](https://github.com/bumptech/glide/wiki) for pages on a variety of topics, and see the [javadocs](http://bumptech.github.io/glide/javadocs/latest/index.html)., +Volley is now an optional dependency that can be included via a utility library. To use Volley to fetch media over http/https:, + compile 'com.github.bumptech.glide:volley-integration:1.0.+', + <version>1.0.1</version>, +In addition to Volley, Glide also includes support for fetching media using OkHttp. To use OkHttp to fetch media over http/https:, + compile 'com.github.bumptech.glide:okhttp-integration:1.0.+', + <version>1.0.1</version>, +Version 3.x is a stable public release used in multiple open source projects at Google
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static org.mockito.AdditionalMatchers.not;, +import com.bumptech.glide.load.engine.cache.MemoryCacheAdapter;, +import com.bumptech.glide.test.ResourceIds.raw;, + public void submit_withDisabledMemoryCache_andResourceInActiveResources_loadsFromMemory() {, + Glide.init(, + context, new GlideBuilder().setMemoryCache(new MemoryCacheAdapter()));, +, + FutureTarget<Drawable> first =, + GlideApp.with(context), + .load(raw.canonical), + .submit();, + concurrency.get(first);, +, + concurrency.get(, + GlideApp.with(context), + .load(ResourceIds.raw.canonical), + .listener(requestListener), + .submit());, +, + verify(requestListener), + .onResourceReady(, + any(Drawable.class),, + any(),, + anyTarget(),, + eq(DataSource.MEMORY_CACHE),, + anyBoolean());, + }, +, + @Test, + public void submit_withRequestClearedFromMemory_doesNotLoadFromMemory() {, + Glide.init(, + context, new GlideBuilder().setMemoryCache(new MemoryCacheAdapter()));, +, + FutureTarget<Drawable> first =, + GlideApp.with(context), + .load(raw.canonical), + .submit();, + concurrency.get(first);, +, + // Allow first to be GCed and
[+++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, + Resource<T> previous = resource;, + Resource<T> transformed = transformation.transform(previous, outWidth, outHeight);, + if (transformed != previous && previous != resource && previous != null) {, + previous.recycle();, + }, + previous = transformed;, + Resource<T> transformed = transformation.transform(previous, outWidth, outHeight);, + if (transformed != previous && previous != resource && previous != null) {, + previous.recycle();, + }, + previous = transformed;, + return previous;, +++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, + Resource<T> previous = resource;, + Resource<T> transformed = transformation.transform(previous, outWidth, outHeight);, + if (transformed != previous && previous != resource && previous != null) {, + previous.recycle();, +
[+++ b/annotation/compiler/gradle.properties, +++ b/annotation/compiler/gradle.properties, +++ b/annotation/gradle.properties, +++ b/annotation/compiler/gradle.properties, +++ b/annotation/gradle.properties, +++ b/integration/gifencoder/gradle.properties, +++ b/annotation/compiler/gradle.properties, +++ b/annotation/gradle.properties, +++ b/integration/gifencoder/gradle.properties, +++ b/integration/okhttp/gradle.properties, +++ b/annotation/compiler/gradle.properties, +++ b/annotation/gradle.properties, +++ b/integration/gifencoder/gradle.properties, +++ b/integration/okhttp/gradle.properties, +++ b/integration/okhttp3/gradle.properties, +++ b/annotation/compiler/gradle.properties, +++ b/annotation/gradle.properties, +++ b/integration/gifencoder/gradle.properties, +++ b/integration/okhttp/gradle.properties, +++ b/integration/okhttp3/gradle.properties, +++ b/integration/recyclerview/gradle.properties, +++ b/annotation/compiler/gradle.properties, +++ b/annotation/gradle.properties, +++ b/integration/gifencoder/gradle.properties, +++ b/integration/okhttp/gradle.properties, +++ b/integration/okhttp3/gradle.properties, +++ b/integration/recyclerview/gradle.properties, +++ b/integration/volley/gradle.properties, +++ b/annotation/compiler/gradle.properties, +++ b/annotation/gradle.properties, +++ b/integration/gifencoder/gradle.properties, +++ b/integration/okhttp/gradle.properties, +++ b/integration/okhttp3/gradle.properties, +++ b/integration/recyclerview/gradle.properties, +++ b/integration/volley/gradle.properties, +++ b/third_party/disklrucache, +Subproject commit 273f119c607eb55da0627ebb4a0c1b0d1a15b2dc, +++ b/annotation/compiler/gradle.properties, +++ b/annotation/gradle.properties, +++ b/integration/gifencoder/gradle.properties, +++ b/integration/okhttp/gradle.properties, +++ b/integration/okhttp3/gradle.properties, +++ b/integration/recyclerview/gradle.properties, +++ b/integration/volley/gradle.properties, +++ b/third_party/disklrucache, +Subproject commit 273f119c607eb55da0627ebb4a0c1b0d1a15b2dc, +++ b/third_party/gif_decoder/gradle.properties]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, + private DrawableCrossFadeTransition resourceTransition;, + protected DrawableCrossFadeFactory(int duration, boolean isCrossFadeEnabled) {, + return dataSource == DataSource.MEMORY_CACHE, + ? NoTransition.<Drawable>get() : getResourceTransition();, + private Transition<Drawable> getResourceTransition() {, + if (resourceTransition == null) {, + resourceTransition = new DrawableCrossFadeTransition(duration, isCrossFadeEnabled);, + return resourceTransition;, + * @param durationMillis The duration of the cross fade animation in milliseconds., + return new DrawableCrossFadeFactory(durationMillis, isCrossFadeEnabled);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, + private DrawableCrossFadeTransition resourceTransition;, + protected DrawableCrossFadeFactory(int duration, boolean isCrossFadeEnabled) {, + return dataSource == DataSource.MEMORY_CACHE, + ? NoTransition.<Drawable>get() : getResourceTransition();, +
[+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + return path.load(rewinder, options, width, height,, + new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + return path.load(rewinder, options, width, height,, + new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + return path.load(rewinder, options, width, height,, + new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + downsampleStrategy,
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import static com.bumptech.glide.gifdecoder.GifDecoder.TOTAL_ITERATION_COUNT_FOREVER;, +, + int intrinsicCount = state.frameLoader.getLoopCount();, + maxLoopCount =, + (intrinsicCount == TOTAL_ITERATION_COUNT_FOREVER) ? LOOP_FOREVER : intrinsicCount;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import static com.bumptech.glide.gifdecoder.GifDecoder.TOTAL_ITERATION_COUNT_FOREVER;, +, + int intrinsicCount = state.frameLoader.getLoopCount();, + maxLoopCount =, + (intrinsicCount == TOTAL_ITERATION_COUNT_FOREVER) ? LOOP_FOREVER : intrinsicCount;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, + return gifDecoder.getTotalIterationCount();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import static com.bumptech.glide.gifdecoder.GifDecoder.TOTAL_ITERATION_COUNT_FOREVER;, +, + int intrinsicCount = state.frameLoader.getLoopCount();, + maxLoopCount =, + (intrinsicCount == TOTAL_ITERATION_COUNT_FOREVER) ? LOOP_FOREVER : intrinsicCount;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, + return gifDecoder.getTotalIterationCount();, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, + assertTrue("drawable should be still running", drawable.isRunning());, + assertFalse("drawable should be
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.data.DataRewinderRegistry;, +import com.bumptech.glide.load.data.InputStreamRewinder;, + private final DataRewinderRegistry dataRewinderRegistry;, + dataRewinderRegistry = new DataRewinderRegistry();, + dataRewinderRegistry.register(new InputStreamRewinder.Factory());, +, + return new RequestContext(loaderRegistry, encoderRegistry, decoderRegistry, resourceEncoderRegistry,, + dataRewinderRegistry);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.data.DataRewinderRegistry;, +import com.bumptech.glide.load.data.InputStreamRewinder;, + private final DataRewinderRegistry dataRewinderRegistry;, + dataRewinderRegistry = new DataRewinderRegistry();, + dataRewinderRegistry.register(new InputStreamRewinder.Factory());, +, + return new RequestContext(loaderRegistry, encoderRegistry, decoderRegistry, resourceEncoderRegistry,, + dataRewinderRegistry);, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java, + * Synchronously fetch data from which a resource can be decoded. This will always be called on, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.data.DataRewinderRegistry;, +import com.bumptech.glide.load.data.InputStreamRewinder;, + private final DataRewinderRegistry dataRewinderRegistry;, + dataRewinderRegistry = new DataRewinderRegistry();, + dataRewinderRegistry.register(new InputStreamRewinder.Factory());, +, +
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.DataUrlLoader;, + .append(String.class, InputStream.class, new DataUrlLoader.StreamFactory()), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.DataUrlLoader;, + .append(String.class, InputStream.class, new DataUrlLoader.StreamFactory()), +++ b/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java, +package com.bumptech.glide.load.model;, +, +import android.content.Context;, +import android.util.Base64;, +, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.DataSource;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.data.DataFetcher;, +import com.bumptech.glide.signature.ObjectKey;, +, +import java.io.ByteArrayInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +, +/**, + * A simple model loader for loading data from a Data URL String., + *, + * Data URIs use the "data" scheme., + *, + * <p>See http://www.ietf.org/rfc/rfc2397.txt for a complete description of the 'data' URL scheme., + *, + * <p>Briefly, a 'data' URL has the form: <pre>data:[mediatype][;base64],somedata"</pre>, +
[+++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, +import java.nio.charset.Charset;, +import java.security.MessageDigest;, + * <p>Using the fully qualified class name as a static final {@link String} (not, + * {@link Class#getName()} to avoid proguard obfuscation) is an easy way to implement, + * {@link #updateDiskCacheKey(java.security.MessageDigest)}} correctly. If additional arguments are, + * required they can be passed in to the constructor of the {@code Transformation} and then used to, + * update the {@link java.security.MessageDigest} passed in to, + * {@link #updateDiskCacheKey(MessageDigest)}. If arguments are primitive types, they can typically, + * easily be serialized using {@link java.nio.ByteBuffer}. {@link String} types can be serialized, +
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import android.widget.ImageView;, + * <p>All methods in this interface will be called from a background thread if the, + * {@code RequestListener} is added to a request that is started with, + * {@link RequestBuilder#submit()}, {@link RequestBuilder#submit(int, int)}, or, + * {@link RequestBuilder#into(int, int)}. Those methods no longer post results back to the main, + * thread to avoid the unnecessary thread interactions and corresponding latency. As a side affect, + * though, listeners added to those requests are no longer called on the main thread., + * {@code RequestListeners} added to requests started with {@link RequestBuilder#into(Target)}
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + private void notifyComplete(Resource<R> resource, DataSource dataSource) {, + callback.onResourceReady(resource, dataSource);, + notifyEncodeAndRelease(resource, currentDataSource);, + private void notifyEncodeAndRelease(Resource<R> resource, DataSource dataSource) {, + notifyComplete(result, dataSource);, + void onResourceReady(Resource<R> resource, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + private void notifyComplete(Resource<R> resource, DataSource dataSource) {, + callback.onResourceReady(resource, dataSource);, + notifyEncodeAndRelease(resource, currentDataSource);, + private void notifyEncodeAndRelease(Resource<R> resource, DataSource dataSource) {, + notifyComplete(result, dataSource);, + void onResourceReady(Resource<R> resource, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import com.bumptech.glide.load.DataSource;, + cb.onResourceReady(cached, DataSource.MEMORY_CACHE);, + cb.onResourceReady(active, DataSource.MEMORY_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + private void notifyComplete(Resource<R> resource, DataSource dataSource) {, + callback.onResourceReady(resource, dataSource);, + notifyEncodeAndRelease(resource, currentDataSource);, + private void notifyEncodeAndRelease(Resource<R> resource, DataSource dataSource)
[+++ b/integration/gifencoder/build.gradle, + androidTestCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}", +++ b/integration/gifencoder/build.gradle, + androidTestCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}", +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/integration/gifencoder/build.gradle, + androidTestCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}", +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestBuilderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/integration/gifencoder/build.gradle, + androidTestCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}", +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestBuilderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java, +import org.robolectric.RobolectricTestRunner;, + @Rule public ExpectedException exception = ExpectedException.none();, +++ b/integration/gifencoder/build.gradle, + androidTestCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}", +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestBuilderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java, +import org.robolectric.RobolectricTestRunner;, + @Rule public ExpectedException exception = ExpectedException.none();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/integration/gifencoder/build.gradle, + androidTestCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}", +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestBuilderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java, +import org.robolectric.RobolectricTestRunner;, + @Rule public
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java, + public BitmapSubject createSubject(, + @NonNull FailureMetadata metadata, @NonNull Bitmap actual) {]
[+++ b/samples/svg/src/main/res/layout/activity_main.xml, + <TextView, + android:id="@+id/description", + android:layout_width="wrap_content", + android:layout_height="wrap_content", + android:layout_marginBottom="@dimen/activity_vertical_margin", + android:onClick="clearCache", + android:clickable="true", + android:text="@string/hello_world", + />, +, + <Button, + android:id="@+id/button", + android:layout_width="wrap_content", + android:layout_height="wrap_content", + android:layout_alignParentBottom="true", + android:layout_centerHorizontal="true", + android:layout_marginTop="@dimen/activity_vertical_margin", + android:onClick="cycleScaleType", + android:text="@string/scaleType", + />, +, + android:layout_below="@id/description", + android:layout_above="@id/button", + android:layout_below="@id/description", + android:layout_above="@id/button"]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java, +package com.bumptech.glide;, +, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.fail;, +, +import android.content.Context;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.MockModelLoader;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.File;, +import java.io.IOException;, +import java.io.InputStream;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +@RunWith(AndroidJUnit4.class), +public class AsFileTest {, + @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();, + private final ConcurrencyHelper concurrency = new ConcurrencyHelper();, + private final Context context = InstrumentationRegistry.getTargetContext();, +, + @Test, + public void asFile_withUrl_succeeds() {, + String url = "https://www.w3schools.com/howto/img_fjords.jpg";, +, + MockModelLoader.mock(url, getData());, +, + File file =,
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java, +import org.mockito.ArgumentMatchers;, + @Test, + public void loadFromBuilder_withDataDiskCacheStrategy_returnsFromSource() throws IOException {, + byte[] data = getCanonicalBytes();, +, + concurrency.wait(, + GlideApp.with(context), + .asDrawable(), + .diskCacheStrategy(DiskCacheStrategy.DATA), + .load(data), + .submit());, +, + concurrency.wait(, + GlideApp.with(context), + .asDrawable(), + .diskCacheStrategy(DiskCacheStrategy.DATA), + .skipMemoryCache(true), + .load(data), + .listener(requestListener), + .submit());, +, + verify(requestListener).onResourceReady(, + anyDrawable(),, + ArgumentMatchers.any(),, + anyDrawableTarget(),, + eq(DataSource.DATA_DISK_CACHE),, + anyBoolean());, + }, +]
[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +import com.bumptech.glide.request.RequestListener;, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, + return (GlideRequests) super.addDefaultRequestListener(listener);, + }, +, + @Override, + @NonNull, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +import com.bumptech.glide.request.RequestListener;, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, + return (GlideRequests) super.addDefaultRequestListener(listener);, + }, +, + @Override, + @NonNull, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, +import com.bumptech.glide.request.RequestListener;, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, + return (GlideRequests) super.addDefaultRequestListener(listener);, + }, +, + @Override, + @NonNull, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +import com.bumptech.glide.request.RequestListener;, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, + return (GlideRequests) super.addDefaultRequestListener(listener);, + }, +, + @Override, + @NonNull, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, +import com.bumptech.glide.request.RequestListener;, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, + return (GlideRequests) super.addDefaultRequestListener(listener);, +
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeader.java, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeader.java, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + // Maximum size is 256, see GifHeaderParser.readColorTable, + // Private color table that can be modified if needed, + private final int[] pct = new int[256];, + act = currentFrame.lct != null ? currentFrame.lct : header.gct;, + // Prepare local copy of color table ("pct = act"), see #1068, + System.arraycopy(act, 0, pct, 0, act.length);, + // Forget about act reference from shared header object, use copied version, + act = pct;, + // Set transparent color if specified., + act[currentFrame.transIndex] = 0;, + // Transfer pixel data to image., + return
[+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + * <p>Note #{@link #resumeRequests()} must be called for any requests made before or while the, + * manager is paused to complete. RequestManagers attached to Fragments and Activities, + * automatically resume onStart()., + *, + * Cancels any in progress loads and clears resources of completed loads., + *, + * <p>Note #{@link #resumeRequests()} must be called for any requests made before or while the, + * manager is paused to complete. RequestManagers attached to Fragments and Activities, + * automatically resume onStart()., + *, + * <p>This will release the memory used by completed
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + // When request was failed or cancelled, be sure to use the updated model as it can contains, + // unexposed data that could help the request to succeed on restart., + // See https://github.com/bumptech/glide/issues/2270, + if (request.isEquivalentTo(previous), + && (Preconditions.checkNotNull(previous).isComplete(), + || Preconditions.checkNotNull(previous).isRunning())) {, + // triggering RequestListeners and Targets. If the request is already]
[+++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/ImageVideoWrapperEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/ImageVideoWrapperEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/ImageVideoWrapperEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/ImageVideoWrapperEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/ImageVideoWrapperEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullResourceEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/ImageVideoWrapperEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullResourceEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/ImageVideoWrapperEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullResourceEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FileDescriptorBitmapDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/ImageVideoWrapperEncoder.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java, +++
[+++ b/library/src/com/bumptech/glide/Glide.java, +import android.graphics.Bitmap;, +import com.bumptech.glide.loader.bitmap.BaseBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.model.BaseUrlLoader;, +import com.bumptech.glide.loader.bitmap.model.ResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.FileLoader;, +import com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.StringLoader;, +import com.bumptech.glide.loader.bitmap.model.UriLoader;, +import com.bumptech.glide.loader.bitmap.resource.ResourceFetcher;, +import com.bumptech.glide.loader.bitmap.transformation.CenterCrop;, +import com.bumptech.glide.loader.bitmap.transformation.FitCenter;, +import com.bumptech.glide.loader.bitmap.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.bitmap.transformation.None;, +import com.bumptech.glide.loader.bitmap.transformation.TransformationLoader;, +import com.bumptech.glide.resize.load.BitmapDecoder;, +import java.io.InputStream;, + loaderFactory.register(File.class, InputStream.class, new FileLoader.Factory());, + loaderFactory.register(Integer.class, InputStream.class, new ResourceLoader.Factory());, + loaderFactory.register(String.class, InputStream.class, new StringLoader.Factory());, + loaderFactory.register(Uri.class, InputStream.class, new UriLoader.Factory());, + loaderFactory.register(URL.class, InputStream.class, new VolleyUrlLoader.Factory());, + loaderFactory.register(URL.class, InputStream.class, new ModelLoaderFactory<URL, InputStream>() {, + ModelLoader<URL, InputStream> errorUrlLoader = new ModelLoader<URL, InputStream>() {, +, + public ResourceFetcher<InputStream> getResourceFetcher(URL model, int width, int height) {, + public ModelLoader<URL, InputStream> build(Context context, GenericLoaderFactory factories) {,
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifOptions.java, + "com.bumptech.glide.load.resource.gif.GifOptions.DecodeFormat", DecodeFormat.DEFAULT);, + "com.bumptech.glide.load.resource.gif.GifOptions.DisableAnimation", false);]
[+++ b/library/AndroidManifest.xml, + android:versionCode="5", + android:versionName="2.0.3" >]
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java, + int newPosition = Math.min(rawData.position() + blockSize, rawData.limit());, + rawData.position(newPosition);]
[+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + *, + * @deprecated If you must disable hardware bitmaps, set, + * {@link com.bumptech.glide.load.resource.bitmap.Downsampler#ALLOW_HARDWARE_CONFIG} to false, + * instead., + @Deprecated, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + *, + * @deprecated If you must disable hardware bitmaps, set, + * {@link com.bumptech.glide.load.resource.bitmap.Downsampler#ALLOW_HARDWARE_CONFIG} to false, + * instead., + @Deprecated, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +import android.graphics.Bitmap;, + boolean isBitmapTransformationSet() {, + return transformations.get(Bitmap.class) != null;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + *, + * @deprecated If you must disable hardware bitmaps, set, + * {@link
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java, +import com.bumptech.glide.util.Util;, + return TransformationUtils.roundedCorners(pool, toTransform, roundingRadius);, + if (o instanceof RoundedCorners) {, + RoundedCorners other = (RoundedCorners) o;, + return roundingRadius == other.roundingRadius;, + }, + return false;, + return Util.hashCode(ID.hashCode(),, + Util.hashCode(roundingRadius));, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java, +import com.bumptech.glide.util.Util;, + return TransformationUtils.roundedCorners(pool, toTransform, roundingRadius);, + if (o instanceof RoundedCorners) {, + RoundedCorners other = (RoundedCorners) o;, + return roundingRadius == other.roundingRadius;, + }, + return false;, + return Util.hashCode(ID.hashCode(),, + Util.hashCode(roundingRadius));, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java, +import com.bumptech.glide.load.Transformation;, + *, + * @deprecated Width and height are unused and ignored. Use, + * {@link #roundedCorners(BitmapPool, Bitmap, int)} instead., + @Deprecated, +
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import java.util.Map;, + RequestOptions defaultRequestOptions,, + Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions) {, + context, registry, imageViewTargetFactory, defaultRequestOptions,, + defaultTransitionOptions, engine, logLevel);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import java.util.Map;, + RequestOptions defaultRequestOptions,, + Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions) {, + context, registry, imageViewTargetFactory, defaultRequestOptions,, + defaultTransitionOptions, engine, logLevel);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import android.support.annotation.NonNull;, +import android.support.v4.util.ArrayMap;, +import java.util.Map;, + private final Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions = new ArrayMap<>();, + * Sets the default {@link TransitionOptions} to use when starting a request that will load a, + * resource with the given {@link Class}., + *, + * <p>It's preferable but not required for the requested
[+++ b/library/src/androidTest/java/com/bumptech/glide/util/TransformationUtilsTest.java, +import org.robolectric.annotation.Config;, +import org.robolectric.annotation.Implementation;, +import org.robolectric.annotation.Implements;, +import org.robolectric.shadows.ShadowBitmap;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.when;, +@Config(shadows = { TransformationUtilsTest.AlphaShadowBitmap.class }), + @Test, + public void testCenterCropSetsOutBitmapToHaveAlphaIfInBitmapHasAlphaAndOutBitmapIsReused() {, + Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +, + Bitmap toReuse = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);, +, + toReuse.setHasAlpha(false);, + toTransform.setHasAlpha(true);, +, + Bitmap result = TransformationUtils.centerCrop(toReuse, toTransform, toReuse.getWidth(), toReuse.getHeight());, +, + assertEquals(toReuse, result);, + assertTrue(result.hasAlpha());, + }, +, + @Test, + public void testCenterCropSetsOutBitmapToNotHaveAlphaIfInBitmapDoesNotHaveAlphaAndOutBitmapIsReused() {, + Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +, + Bitmap toReuse = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);, +, +
[+++ b/library/src/main/java/com/bumptech/glide/OriginalEngineKey.java, +package com.bumptech.glide;, +, +import com.bumptech.glide.load.Key;, +, +import java.io.UnsupportedEncodingException;, +import java.security.MessageDigest;, +, +public class OriginalEngineKey implements Key {, + private String id;, +, + public OriginalEngineKey(String id) {, + this.id = id;, + }, +, + @Override, + public boolean equals(Object o) {, + if (this == o) {, + return true;, + }, + if (!(o instanceof OriginalEngineKey)) {, + return false;, + }, +, + OriginalEngineKey that = (OriginalEngineKey) o;, +, + if (!id.equals(that.id)) {, + return false;, + }, +, + return true;, + }, +, + @Override, + public int hashCode() {, + return
[+++ b/.idea/codeStyleSettings.xml]
[+++ b/build.gradle, + << "-Xlint:-classfile" \, + /*, + * Disable deprecation warnings for ViewTarget/BaseTarget for now., + */ \, + << "-Xlint:-deprecation", +, + if (project.plugins.hasPlugin('net.ltgt.errorprone')) {, + // It's often useful to track individual objects when debugging object pooling., + options.compilerArgs << "-Xep:ObjectToString:OFF", + }, +++ b/build.gradle, + << "-Xlint:-classfile" \, + /*, + * Disable deprecation warnings for ViewTarget/BaseTarget for now., + */ \, + << "-Xlint:-deprecation", +, + if (project.plugins.hasPlugin('net.ltgt.errorprone')) {, + // It's often useful to track individual objects when debugging object pooling., + options.compilerArgs << "-Xep:ObjectToString:OFF", + }, +++ b/gradle.properties, +ERROR_PRONE_VERSION=2.3.1, +++ b/build.gradle,
[+++ b/checkstyle.xml, + <module name="MethodName" >, + <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"/>, + </module>]
[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java, +import android.support.annotation.NonNull;, + public static File getPhotoCacheDir(Context arg0) {, + return Glide.getPhotoCacheDir(arg0);, + public static File getPhotoCacheDir(Context arg0, String arg1) {, + return Glide.getPhotoCacheDir(arg0, arg1);, + @NonNull, + public static Glide get(Context arg0) {, + return Glide.get(arg0);, + public static void init(Context arg0, GlideBuilder arg1) {, + Glide.init(arg0, arg1);, + public static GlideRequests with(Context arg0) {, + return (GlideRequests) Glide.with(arg0);, + public static GlideRequests with(Activity arg0) {, + return (GlideRequests) Glide.with(arg0);, + public static GlideRequests with(FragmentActivity arg0) {, + return (GlideRequests) Glide.with(arg0);, + public static GlideRequests with(Fragment arg0) {, + return (GlideRequests) Glide.with(arg0);, + public static GlideRequests
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java, + super.onLoadStarted(placeholder);, + super.onLoadFailed(errorDrawable);, + super.onLoadCleared(placeholder);, +++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java, + super.onLoadStarted(placeholder);, + super.onLoadFailed(errorDrawable);, + super.onLoadCleared(placeholder);, +++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java, +import android.graphics.drawable.Drawable;, + * <p> Subclasses must call super in {@link #onLoadCleared(Drawable)} </p>, + *, + @Override, + public void onLoadCleared(Drawable placeholder) {, + super.onLoadCleared(placeholder);, + sizeDeterminer.clearCallbacksAndListener();, + }, +, + clearCallbacksAndListener();, + void getSize(SizeReadyCallback cb) {, + void clearCallbacksAndListener() {, + // Keep a reference to the layout listener and remove it here, + // rather than having the observer remove itself because the observer, + // we add the listener to will be almost immediately merged into, + //
[+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + Drawable error = null;, + if (model == null) {, + error = getFallbackDrawable();, + }, + // Either the model isn't null, or there was no fallback drawable set. Either way we should show, + // the error Drawable., + error = getErrorDrawable();, + if (requestListener == null, + || !requestListener.onLoadFailed(e, model, target, isFirstReadyResource())) {, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + Drawable error = null;, + if (model == null) {, + error = getFallbackDrawable();, + }, + // Either the model isn't null, or there was no fallback drawable set. Either way we should show, + //
[+++ b/integration/volley/src/main/java/com/bumptech/glide/volley/VolleyDiskCacheWrapper.java, +, +import com.bumptech.glide.load.engine.cache.StringKey;, +import java.io.File;, +import java.io.FileInputStream;, +import java.io.FileNotFoundException;, +import java.io.FileOutputStream;, + File file = diskCache.get(new StringKey(key));, + if (file == null) {, + InputStream is = null;, + is = new FileInputStream(file);, + CacheHeader header = readHeader(is);, + byte[] data = streamToBytes(is);, + if (is != null) {, + is.close();, + } catch (IOException e) {, + // Do nothing., + }, + }, + public boolean write(File file) {, + OutputStream os = null;, + boolean success = false;, + os = new FileOutputStream(file);, + CacheHeader header = new CacheHeader(key, entry);, + success = header.writeHeader(os);,
[+++ b/.travis.yml, + - COMPONENT=instrumentation ANDROID_TARGET=16, + - COMPONENT=instrumentation ANDROID_TARGET=17, + - COMPONENT=instrumentation ANDROID_TARGET=18, +++ b/.travis.yml, + - COMPONENT=instrumentation ANDROID_TARGET=16, + - COMPONENT=instrumentation ANDROID_TARGET=17, + - COMPONENT=instrumentation ANDROID_TARGET=18, +++ b/scripts/travis_create_emulator.sh, +avdmanager create avd --force -n test -k $target --device "Nexus 4" -c 2048M]
[+++ b/integration/gifencoder/gifencoder.iml, +++ b/integration/gifencoder/gifencoder.iml, +++ b/integration/okhttp/okhttp.iml, +++ b/integration/gifencoder/gifencoder.iml, +++ b/integration/okhttp/okhttp.iml, +++ b/integration/volley/volley.iml, +++ b/integration/gifencoder/gifencoder.iml, +++ b/integration/okhttp/okhttp.iml, +++ b/integration/volley/volley.iml, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +++ b/integration/gifencoder/gifencoder.iml, +++ b/integration/okhttp/okhttp.iml, +++ b/integration/volley/volley.iml, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, + /** decodeFromCachedResource **/, + assertEquals("diskCacheStrategy: " + strategy, harness.resource,, + harness.getJob().decodeFromCachedResource());, + harness.getJob().decodeFromCachedResource();, + assertNull(harness.getJob().decodeFromCachedResource());, + assertEquals(transcoded, harness.getJob().decodeFromCachedResource());, + harness.getJob().decodeFromCachedResource();, + assertNull(harness.getJob().decodeFromCachedResource());, + assertNull(harness.getJob().decodeFromCachedResource());, + harness.getJob().decodeFromCachedResource();, + assertNull(harness.getJob().decodeFromCachedResource());, + harness.getJob().decodeFromCachedResource();, + assertNull(harness.getJob().decodeFromCachedResource());, + assertNull(harness.getJob().decodeFromCachedResource());, + /** decodeFromCachedData **/, + assertNull(harness.getJob().decodeFromCachedData());, + assertEquals(harness.resource, harness.getJob().decodeFromCachedData());, + harness.getJob().decodeFromCachedData();, +
[+++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, + * <p>Implementations <em>must</em> implement {@link #equals(Object)} and {@link #hashCode()}., + *, +, + /**, + * For caching to work correctly, implementations <em>must</em> implement this method and, + * {@link #hashCode()}., + */, + @Override, + boolean equals(Object o);, +, + /**, + * For caching to work correctly, implementations <em>must</em> implement this method and, + * {@link #equals(Object)}., + */, + @Override, + int hashCode();]
[+++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +++ b/Makefile, + cd third_party/gif_decoder && ant clean && ant jar, + cp third_party/gif_decoder/bin/gifdecoder*.jar library/libs, +++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +++ b/Makefile, + cd third_party/gif_decoder && ant clean && ant jar, + cp third_party/gif_decoder/bin/gifdecoder*.jar library/libs, +++ b/library/.gitignore, +libs/gifdecoder*.jar, +++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +++ b/Makefile, + cd third_party/gif_decoder && ant clean &&
[+++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +@SuppressWarnings("PMD.UseUtilityClass"), +, + public static <TranscodeType> GenericTransitionOptions<TranscodeType> withNoTransition() {, + return new GenericTransitionOptions<TranscodeType>().dontTransition();, + }, +++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +@SuppressWarnings("PMD.UseUtilityClass"), +, + public static <TranscodeType> GenericTransitionOptions<TranscodeType> withNoTransition() {, + return new GenericTransitionOptions<TranscodeType>().dontTransition();, + }, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, + private final RequestManager requestManager;, +++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +@SuppressWarnings("PMD.UseUtilityClass"), +, + public static <TranscodeType> GenericTransitionOptions<TranscodeType> withNoTransition() {, + return new GenericTransitionOptions<TranscodeType>().dontTransition();, + }, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, + private final RequestManager requestManager;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, +public final class DrawableTransitionOptions extends, + TransitionOptions<DrawableTransitionOptions, Drawable> {, +++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +@SuppressWarnings("PMD.UseUtilityClass"), +, + public static <TranscodeType> GenericTransitionOptions<TranscodeType> withNoTransition() {, + return new GenericTransitionOptions<TranscodeType>().dontTransition();, + }, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, + private final RequestManager
[+++ b/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java, + * {@link @}GlideExtension, + * {@literal @}GlideOption, + * {@literal @}GlideExtension, + * {@literal @}GlideOption, +++ b/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java, + * {@link @}GlideExtension, + * {@literal @}GlideOption, + * {@literal @}GlideExtension, + * {@literal @}GlideOption, +++ b/glide/build.gradle, + doFirst {, + it.classpath =, + project.files(, + getAndroidLibraryVariantsForJar(variantName).collect {, + LibraryVariant lib -> lib.getJavaCompiler().classpath.files, + getAndroidLibraryVariantsForJavadoc(variantName).collect {, + LibraryVariant lib -> lib.getJavaCompiler().classpath.files, + // Finds dependencies of Android packages that would otherwise be, + // ignored (Volley in particular), + }, +++ b/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java, + * {@link @}GlideExtension, + * {@literal @}GlideOption, + * {@literal @}GlideExtension, + * {@literal @}GlideOption,
[+++ b/build.gradle, + // gifencoder is a legacy project that has a ton of warnings and is basically never, + // modified, so we're not going to worry about cleaning it up., + options.compilerArgs \, + << "-Xlint:all" << "-Werror" \, + /*, + * Java expects every annotation to have a processor, but we use, + * javax.annotation.Nullable, which doesn't have one., + */ \, + << "-Xlint:-processing" \, + /*, + * See https://github.com/google/dagger/issues/945, + * and https://bugs.openjdk.java.net/browse/JDK-8190452, + */ \, + << "-Xlint:-classfile", +, + project.afterEvaluate {, + if (project.hasProperty("android")) {, + android {, + lintOptions
[+++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java, + * the concrete data type returned by the AssetManager., +++ b/CONTRIBUTING.md, + * **wontfix**:
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static com.google.common.truth.Truth.assertThat;, +import android.os.Handler;, +import android.os.Looper;, +import com.bumptech.glide.test.WaitModelLoader;, +import com.bumptech.glide.test.WaitModelLoader.WaitModel;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, + // Tests #2428., + @Test, + public void onlyRetrieveFromCache_withPreviousRequestLoadingFromSource_doesNotBlock() {, + final WaitModel<Integer> waitModel = WaitModelLoader.Factory.waitOn(ResourceIds.raw.canonical);, +, + GlideApp.with(context), + .load(waitModel), + .submit();, +, + FutureTarget<Drawable> onlyFromCacheFuture = GlideApp.with(context), + .load(waitModel), + .onlyRetrieveFromCache(true), + .submit();, + try {, + onlyFromCacheFuture.get(1000, TimeUnit.MILLISECONDS);, + throw new IllegalStateException();, + } catch (InterruptedException | TimeoutException e) {, + throw new RuntimeException(e);, + } catch (ExecutionException e) {, + // Expected., + }, + waitModel.countDown();, + }, +, + // Tests #2428., + @Test, + public
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java, +public abstract class DownsampleStrategy {, + public static final DownsampleStrategy AT_LEAST = new DownsampleStrategy() {, + * Downsamples, maintaining the original aspect ratio, so that one of the image's dimensions is, + * exactly equal to the requested size and the other dimension is less than or equal to the, + * requested size., + */, + public static final DownsampleStrategy FIT_CENTER = new DownsampleStrategy() {, + @Override, + public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, + int requestedHeight) {, + return AT_LEAST.getSampleSize(sourceWidth, sourceHeight, requestedWidth, requestedHeight);, + }, +, + @Override, + public int getDensity(int sourceWidth,
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + @NonNull List<RequestListener<Object>> defaultRequestListeners,, + boolean isLoggingRequestOriginsEnabled) {, + isLoggingRequestOriginsEnabled,, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + @NonNull List<RequestListener<Object>> defaultRequestListeners,, + boolean isLoggingRequestOriginsEnabled) {, + isLoggingRequestOriginsEnabled,, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + private boolean isLoggingRequestOriginsEnabled;, + /**, + * Set to {@code true} to make Glide populate, + * {@link com.bumptech.glide.load.engine.GlideException#setOrigin(Exception)} for failed requests., + *, + * <p>The exception set by this method is not printed by {@link GlideException} and can only be, + * viewed via a {@link RequestListener} that reads the field via, + * {@link GlideException#getOrigin()}., + *, + * <p>This is an experimental API that may be removed in
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, +import android.support.annotation.DrawableRes;, +import android.support.annotation.FloatRange;, +import android.support.annotation.IntRange;, + public static RequestOptions sizeMultiplierOf(, + @FloatRange(from = 0, to = 1) float sizeMultiplier) {, + public static RequestOptions placeholderOf(@DrawableRes int placeholderId) {, + public static RequestOptions errorOf(@DrawableRes int errorId) {, + public static RequestOptions overrideOf(, + @IntRange(from = 0) int width,, + @IntRange(from = 0) int height) {, + public static RequestOptions overrideOf(@IntRange(from = 0) int size) {, + public static RequestOptions frameOf(@IntRange(from = 0) long frameTimeMicros) {, + public static RequestOptions timeoutOf(@IntRange(from = 0) int timeout) {, + public static RequestOptions encodeQualityOf(@IntRange(from = 0, to = 100) int quality)
[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java, + @CheckResult, + public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {, + return (GlideRequest<TranscodeType>) super.addListener(listener);, + }, +, + @Override, + @NonNull, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java, + @CheckResult, + public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {, + return (GlideRequest<TranscodeType>) super.addListener(listener);, + }, +, + @Override, + @NonNull, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java, + @CheckResult, + public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {, + return (GlideRequest<TranscodeType>) super.addListener(listener);, + }, +, + @Override, + @NonNull, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java, + @CheckResult, + public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {, + return (GlideRequest<TranscodeType>) super.addListener(listener);, + }, +, + @Override, + @NonNull, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java, + @CheckResult, + public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {,
[+++ b/.gitmodules, + url = https://github.com/recurser/exif-orientation-examples.git, +++ b/.gitmodules, + url = https://github.com/recurser/exif-orientation-examples.git, +++ /dev/null, +++ b/.gitmodules, + url = https://github.com/recurser/exif-orientation-examples.git, +++ /dev/null, +++ /dev/null, +++ b/.gitmodules, + url = https://github.com/recurser/exif-orientation-examples.git, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitmodules, + url = https://github.com/recurser/exif-orientation-examples.git, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitmodules, + url = https://github.com/recurser/exif-orientation-examples.git, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitmodules, + url = https://github.com/recurser/exif-orientation-examples.git, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitmodules, + url = https://github.com/recurser/exif-orientation-examples.git, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, + List<String> excludedGlideModuleClassNames =, + List<String> orderedLibraryGlideModuleClassNames =, + new ArrayList<>(libraryGlideModuleClassNames);, + Collections.sort(orderedLibraryGlideModuleClassNames);, +, + appGlideModuleClassName,, + orderedLibraryGlideModuleClassNames,, + excludedGlideModuleClassNames);, + generateRegisterComponents(, + orderedLibraryGlideModuleClassNames, excludedGlideModuleClassNames);, + private MethodSpec generateGetExcludedModuleClasses(Collection<String> excludedClassNames) {, + private MethodSpec generateRegisterComponents(, + Collection<String> libraryGlideModuleClassNames,, + Collection<String> excludedGlideModuleClassNames) {, + Collection<String> libraryGlideModuleClassNames,, + Collection<String> excludedGlideModuleClassNames) {, + private List<String> getExcludedGlideModuleClassNames(TypeElement appGlideModule) {, + Set<String> names = processorUtil.findClassValuesFromAnnotationOnClassAsNames(, + List<String> result = new ArrayList<>(names);, + Collections.sort(result);, + return result;]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +import org.robolectric.RobolectricTestRunner;, +import android.graphics.drawable.BitmapDrawable;, +import com.bumptech.glide.load.engine.Resource;, +import org.mockito.ArgumentCaptor;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, + @Mock Resource<BitmapDrawable> drawableResourceToTransform;, + @Mock BitmapDrawable drawableToTransform;, +, + private Bitmap bitmapToTransform;, + bitmapToTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + when(drawableResourceToTransform.get()).thenReturn(drawableToTransform);, + when(drawableToTransform.getBitmap()).thenReturn(bitmapToTransform);, + public void testReturnsOriginalResourceIfTransformationDoesNotTransform() {, + int outWidth = 123;, + int outHeight = 456;, + when(wrapped.transform(any(Resource.class), eq(outWidth), eq(outHeight))), + .thenAnswer(new Answer<Object>() {, + @Override, + public Object answer(InvocationOnMock invocation) throws Throwable {, + return invocation.getArguments()[0];, + }, + });, +, +
[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java, +import com.bumptech.glide.GlideBuilder;, +import java.lang.Deprecated;, + @Deprecated, + * @see Glide#init(Context, GlideBuilder), + */, + @VisibleForTesting, + @SuppressLint("VisibleForTests"), + public static void init(Context context, GlideBuilder builder) {, + Glide.init(context, builder);, + }, +, + /**, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java, +import com.bumptech.glide.GlideBuilder;, +import java.lang.Deprecated;, + @Deprecated, + * @see Glide#init(Context, GlideBuilder), + */, + @VisibleForTesting, + @SuppressLint("VisibleForTests"), + public static void init(Context context, GlideBuilder builder) {, + Glide.init(context, builder);, + }, +, + /**, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + /**, + * @deprecated Use {@link #init(Context, GlideBuilder)} to get a singleton compatible with, + * Glide's generated API., + *, + * <p>This
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + target.setRequest(null);, + target.setRequest(null);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + target.setRequest(null);, + target.setRequest(null);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + cleanup();, + private void cleanup() {, + currentData = null;, + currentDataSource = null;, + currentFetcher = null;, + currentSourceKey = null;, + currentThread = null;, + }, +]
[+++ b/.gitmodules, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++ b/.gitmodules, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++ b/library/tests/assets/exif-orientation-examples, +Subproject commit e87146ce6f4171130c6e0d325ae3fbf2a108f136, +++ b/.gitmodules, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++ b/library/tests/assets/exif-orientation-examples, +Subproject commit e87146ce6f4171130c6e0d325ae3fbf2a108f136, +++ b/library/tests/src/com/bumptech/glide/ExifTest.java, +package com.bumptech.glide;, +, +import android.content.res.AssetManager;, +import android.test.InstrumentationTestCase;, +import com.bumptech.glide.resize.load.ExifOrientationParser;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +/**, + * Created with IntelliJ IDEA., + * User: sam, + * Date: 8/14/13, + * Time: 9:18 AM, + * To change this template use File | Settings | File Templates., + */, +public
[+++ b/README.md, +++ b/README.md, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + // Engine asserts this anyway when removing resources, fail faster and consistently, + Util.assertMainThread();, + // memory cache needs to be cleared before bitmap pool to clear re-pooled Bitmaps too. See #687., + bitmapPool.clearMemory();, + // Engine asserts this anyway when removing resources, fail faster and consistently, + Util.assertMainThread();, + // memory cache needs to be trimmed before bitmap pool to trim re-pooled Bitmaps too. See #687., + bitmapPool.trimMemory(level);, + // Engine asserts this anyway when removing resources, fail faster and consistently, + Util.assertMainThread();, + // memory cache needs to be trimmed
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, + <component name="NewModuleRootManager" inherit-compiler-output="false">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property
[+++ b/src/com/bumptech/photos/PhotoManager.java, +import com.bumptech.photos.resize.ResizeJobGenerator;, + private ResizeJobGenerator resizer;, + this.resizer = new ResizeJobGenerator(mainHandler, CAN_RECYCLE ? bitmapCache : null);, +++ b/src/com/bumptech/photos/PhotoManager.java, +import com.bumptech.photos.resize.ResizeJobGenerator;, + private ResizeJobGenerator resizer;, + this.resizer = new ResizeJobGenerator(mainHandler, CAN_RECYCLE ? bitmapCache : null);, +++ /dev/null, +++ b/src/com/bumptech/photos/PhotoManager.java, +import com.bumptech.photos.resize.ResizeJobGenerator;, + private ResizeJobGenerator resizer;, + this.resizer = new ResizeJobGenerator(mainHandler, CAN_RECYCLE ? bitmapCache : null);, +++ /dev/null, +++ b/src/com/bumptech/photos/resize/ResizeJobGenerator.java, +/*, + * Copyright (c) 2012 Bump Technologies Inc. All rights reserved., + */, +package com.bumptech.photos.resize;, +, +import android.graphics.Bitmap;, +import android.os.Handler;, +import com.bumptech.photos.LoadedCallback;, +import com.bumptech.photos.cache.SizedBitmapCache;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +/**, + * @author sam, + *, +
[+++ b/gradle.properties, +OK_HTTP_VERSION=3.0.0-RC1, +MOCKWEBSERVER_VERSION=3.0.0-RC1, +++ b/gradle.properties, +OK_HTTP_VERSION=3.0.0-RC1, +MOCKWEBSERVER_VERSION=3.0.0-RC1, +++ b/integration/okhttp/build.gradle, + compile "com.squareup.okhttp:okhttp:2.7.1", +++ b/gradle.properties, +OK_HTTP_VERSION=3.0.0-RC1, +MOCKWEBSERVER_VERSION=3.0.0-RC1, +++ b/integration/okhttp/build.gradle, + compile "com.squareup.okhttp:okhttp:2.7.1", +++ b/integration/okhttp/gradle.properties, +POM_DESCRIPTION=An integration library to use OkHttp 2.x to fetch data over http/https in Glide, +++ b/gradle.properties, +OK_HTTP_VERSION=3.0.0-RC1, +MOCKWEBSERVER_VERSION=3.0.0-RC1, +++ b/integration/okhttp/build.gradle, + compile "com.squareup.okhttp:okhttp:2.7.1", +++ b/integration/okhttp/gradle.properties, +POM_DESCRIPTION=An integration library to use OkHttp 2.x to fetch data over http/https in Glide, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, + *, + * @deprecated replaced with com.bumptech.glide.integration.okhttp3.OkHttpGlideModule., +@Deprecated, +++ b/gradle.properties, +OK_HTTP_VERSION=3.0.0-RC1, +MOCKWEBSERVER_VERSION=3.0.0-RC1, +++ b/integration/okhttp/build.gradle, + compile "com.squareup.okhttp:okhttp:2.7.1", +++ b/integration/okhttp/gradle.properties, +POM_DESCRIPTION=An integration library to use OkHttp 2.x to fetch data over http/https in Glide,
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java, + return transcoder.transcode(transformed, options);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java, + return transcoder.transcode(transformed, options);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java, +import com.bumptech.glide.load.Options;, + public Resource<byte[]> transcode(Resource<Bitmap> toTranscode, Options options) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java, + return transcoder.transcode(transformed, options);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java, +import com.bumptech.glide.load.Options;, + public Resource<byte[]> transcode(Resource<Bitmap> toTranscode, Options options) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java, +import com.bumptech.glide.load.Options;, + public Resource<BitmapDrawable> transcode(Resource<Bitmap> toTranscode, Options options) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java, + return transcoder.transcode(transformed, options);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java, +import com.bumptech.glide.load.Options;, + public Resource<byte[]> transcode(Resource<Bitmap> toTranscode, Options options) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java, +import com.bumptech.glide.load.Options;, + public Resource<BitmapDrawable> transcode(Resource<Bitmap> toTranscode, Options options) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoder.java, +import com.bumptech.glide.load.Options;, + public Resource<byte[]> transcode(Resource<GifDrawable> toTranscode, Options options) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java, +
[+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, + * Returns a Volley request for the given image url. The given future should be put as a, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, + * Returns a Volley request for the given image url. The given future should be put as a, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java, + public Class<TestDrawable> getResourceClass() {, + return TestDrawable.class;, + }, +, + @Override, + public Class<TestDrawable> getResourceClass() {, + return TestDrawable.class;, + }, +, + @Override, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, + * Returns a Volley request for the given image url. The given future should be put as a, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java, + public Class<TestDrawable> getResourceClass() {, +
[+++ b/project.properties, +target=android-16]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CircleCrop.java]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java, + buffer.position(0);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java, + buffer.position(0);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java, + buffer.position(0);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java, + buffer.position(0);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java, + buffer.position(0);, +++ b/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java, + toCopy.position(0);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java, + buffer.position(0);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java, + buffer.position(0);, +++ b/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java, + toCopy.position(0);, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, + rawData.position(0);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java, + buffer.position(0);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java, + buffer.position(0);, +++ b/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java, + toCopy.position(0);, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, + rawData.position(0);, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java, + rawData.position(0);]
[+++ b/samples/flickr/src/main/AndroidManifest.xml, + <activity android:name=".FullscreenActivity" />, +, +++ b/samples/flickr/src/main/AndroidManifest.xml, + <activity android:name=".FullscreenActivity" />, +, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java, +import android.content.Intent;, + imageView.setOnClickListener(new View.OnClickListener() {, + @Override, + public void onClick(View view) {, + Intent intent = FullscreenActivity.getIntent(getActivity(), current);, + startActivity(intent);, + }, + });, +, +++ b/samples/flickr/src/main/AndroidManifest.xml, + <activity android:name=".FullscreenActivity" />, +, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java, +import android.content.Intent;, + imageView.setOnClickListener(new View.OnClickListener() {, + @Override, + public void onClick(View view) {, + Intent intent = FullscreenActivity.getIntent(getActivity(), current);, + startActivity(intent);, + }, + });, +, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java, +import android.content.Intent;, + viewHolder.imageView.setOnClickListener(new View.OnClickListener() {, + @Override, + public void onClick(View view) {, + Intent intent =
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import com.bumptech.glide.test.ConcurrencyHelper;, + private ConcurrencyHelper concurrency = new ConcurrencyHelper();, + concurrency.get(future);, + concurrency.get(, + .submit(IMAGE_SIZE_PIXELS, IMAGE_SIZE_PIXELS));, + concurrency.get(, + .submit(IMAGE_SIZE_PIXELS, IMAGE_SIZE_PIXELS));, + concurrency.get(, + .submit(IMAGE_SIZE_PIXELS, IMAGE_SIZE_PIXELS));, + Bitmap bitmap =, + concurrency.get(, + GlideApp.with(context), + .submit(IMAGE_SIZE_PIXELS, IMAGE_SIZE_PIXELS));, + concurrency.get(future);, + concurrency.get(future);, + concurrency.get(future);, + concurrency.get(, + .submit(IMAGE_SIZE_PIXELS, IMAGE_SIZE_PIXELS));, + concurrency.runOnMainThread(new Runnable() {, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import com.bumptech.glide.test.ConcurrencyHelper;, + private ConcurrencyHelper concurrency = new ConcurrencyHelper();, + concurrency.get(future);, + concurrency.get(, + .submit(IMAGE_SIZE_PIXELS, IMAGE_SIZE_PIXELS));, + concurrency.get(, + .submit(IMAGE_SIZE_PIXELS, IMAGE_SIZE_PIXELS));, + concurrency.get(, + .submit(IMAGE_SIZE_PIXELS, IMAGE_SIZE_PIXELS));, + Bitmap bitmap =, + concurrency.get(, + GlideApp.with(context), + .submit(IMAGE_SIZE_PIXELS, IMAGE_SIZE_PIXELS));, + concurrency.get(future);, + concurrency.get(future);, + concurrency.get(future);,
[+++ b/.gitignore, +.gradle, +build, +*.iws, +doc/**, +bin/**, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +*.swo, +samples/flickr/target, +integration/volley/target/**, +**/local.properties, +**/out/**, +**/gen-external-apklibs/**, +++ b/.gitignore, +.gradle, +build, +*.iws, +doc/**, +bin/**, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +*.swo, +samples/flickr/target, +integration/volley/target/**, +**/local.properties, +**/out/**, +**/gen-external-apklibs/**, +++ b/.gitmodules, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, +[submodule "third_party/disklrucache"], + path = third_party/disklrucache, + url = https://github.com/sjudd/DiskLruCache.git, +[submodule "library/src/androidTest/resources/exif-orientation-examples"], + path = library/src/androidTest/resources/exif-orientation-examples, +++ b/.gitignore, +.gradle, +build, +*.iws, +doc/**, +bin/**, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +*.swo, +samples/flickr/target, +integration/volley/target/**, +**/local.properties, +**/out/**, +**/gen-external-apklibs/**, +++ b/.gitmodules, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, +[submodule "third_party/disklrucache"], + path = third_party/disklrucache, + url = https://github.com/sjudd/DiskLruCache.git, +[submodule "library/src/androidTest/resources/exif-orientation-examples"], + path = library/src/androidTest/resources/exif-orientation-examples, +++ b/.travis.yml, +language: android, +android:, +
[+++ b/build.gradle, +, +++ b/build.gradle, +, +++ b/glide/build.gradle, +apply plugin: 'java', +, +evaluationDependsOn(":third_party:gif_decoder"), +evaluationDependsOn(":third_party:disklrucache"), +evaluationDependsOn(":library"), +, +def getAndroidSdkDirectory() {, + project(":library").android.sdkDirectory, +}, +, +def getAndroidCompileSdkVersion() {, + project(":library").android.compileSdkVersion, +}, +, +def getInternalAndroidProjects() {, + [':third_party:gif_decoder', ':library'].collect { project(it) }, +}, +def getInternalJavaProjects() {, + [':third_party:disklrucache'].collect { project(it) }, +}, +, +def getAllInternalProjects() {, + getInternalAndroidProjects() + getInternalJavaProjects(), +}, +, +def getReleaseVariantAndroidProjects() {, + getAndroidLibraryVariants("release"), +}, +, +def getAndroidLibraryVariants(variantName) {, + getInternalAndroidProjects().collect { project ->, + project.android.libraryVariants.findAll { type ->, + type.buildType.name.equalsIgnoreCase(variantName), + }, + }.sum(), +}, +, +def getSourceFilesForVariant(variantName) {, + getAndroidLibraryVariants(variantName).collect { it.javaCompile.source } +, + getInternalJavaProjects().collect {
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterInside.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterInside.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java]
[+++ b/samples/giphy/src/main/AndroidManifest.xml, + android:largeHeap="true", + <activity android:name=".FullscreenActivity" />, +++ b/samples/giphy/src/main/AndroidManifest.xml, + android:largeHeap="true", + <activity android:name=".FullscreenActivity" />, +++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java, + private static volatile Api api = null;, +++ b/samples/giphy/src/main/AndroidManifest.xml, + android:largeHeap="true", + <activity android:name=".FullscreenActivity" />, +++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java, + private static volatile Api api = null;, +++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java, +package com.bumptech.glide.samples.giphy;, +, +import android.app.Activity;, +import android.content.ClipData;, +import android.content.ClipboardManager;, +import android.content.Context;, +import android.content.Intent;, +import android.os.Bundle;, +import android.view.View;, +import android.widget.ImageView;, +import com.bumptech.glide.Glide;, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +import com.bumptech.glide.load.resource.transcode.BitmapToGlideDrawableTranscoder;, +import com.google.gson.Gson;, +, +/**, + * An {@link android.app.Activity} for displaying full size original GIFs., + */, +public class FullscreenActivity extends Activity {, + private static
[+++ b/.gitignore, +library/build/*, +++ b/.gitignore, +library/build/*, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++ b/.gitignore, +library/build/*, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++ /dev/null, +++ b/.gitignore, +library/build/*, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + *, + * @deprecated Use {@link #submit(int, int)} instead., + @Deprecated, + return submit(width, height);, + }, +, + /**, + * Returns a future that can be used to do a blocking get on a background thread., + *, + * <p>This method defaults to {@link Target#SIZE_ORIGINAL} for the width and the height. However,, + * since the width and height will be overriden by values passed to {@link, + * RequestOptions#override(int, int)}, this method can be used whenever {@link RequestOptions}, + * with override values are applied, or whenever you want to retrieve the
[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.resource.bitmap.BitmapTransformation;, + public BitmapRequestBuilder<ModelType, TranscodeType> cacheDecoder(ResourceDecoder<File, Bitmap> cacheDecoder) {, + * Transform images using the given {@link com.bumptech.glide.load.resource.bitmap.BitmapTransformation}s., + *, + * @see #centerCrop(), + * @see #fitCenter(), + * @see #transform(com.bumptech.glide.load.Transformation[]), + *, + * @param transformations The transformations to apply in order., + * @return This request builder., + */, + public BitmapRequestBuilder<ModelType, TranscodeType> transform(BitmapTransformation... transformations) {, + super.transform(transformations);, + return this;, + }, +, + /**, + * @see #transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation...), + * @see #transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation...), +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.resource.bitmap.BitmapTransformation;, + public BitmapRequestBuilder<ModelType, TranscodeType> cacheDecoder(ResourceDecoder<File, Bitmap> cacheDecoder) {, + * Transform images using the given
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import com.bumptech.glide.load.DecodeFormat;, + decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, DecodeFormat.PREFER_RGB_565,, + parserPool, decoderPool);, +, + @Test, + public void testSetsPreferredConfigOnDecoderBeforeDecoding() {, + when(gifHeader.getNumFrames()).thenReturn(1);, + when(gifHeader.getStatus()).thenReturn(GifDecoder.STATUS_OK);, + when(gifDecoder.getNextFrame()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));, +, + decoder = new GifResourceDecoder(Robolectric.application, mock(BitmapPool.class), DecodeFormat.ALWAYS_ARGB_8888,, + parserPool, decoderPool);, +, + decoder.decode(new ByteArrayInputStream(new byte[0]), 100, 100);, +, + InOrder order = inOrder(gifDecoder);, + order.verify(gifDecoder).setPreferredConfig(eq(Bitmap.Config.ARGB_8888));, + order.verify(gifDecoder).getNextFrame();, + }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import com.bumptech.glide.load.DecodeFormat;, + decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, DecodeFormat.PREFER_RGB_565,, + parserPool, decoderPool);, +, + @Test, + public void testSetsPreferredConfigOnDecoderBeforeDecoding() {, + when(gifHeader.getNumFrames()).thenReturn(1);, + when(gifHeader.getStatus()).thenReturn(GifDecoder.STATUS_OK);, + when(gifDecoder.getNextFrame()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));, +, + decoder = new GifResourceDecoder(Robolectric.application, mock(BitmapPool.class), DecodeFormat.ALWAYS_ARGB_8888,,
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableResource.java, +import android.graphics.Bitmap;, +, + Bitmap firstFrame = drawable.getFirstFrame();, + return drawable.getBuffer().limit() + Util.getBitmapByteSize(firstFrame.getWidth(),, + firstFrame.getHeight(), firstFrame.getConfig());, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableResource.java, +import android.graphics.Bitmap;, +, + Bitmap firstFrame = drawable.getFirstFrame();, + return drawable.getBuffer().limit() + Util.getBitmapByteSize(firstFrame.getWidth(),, + firstFrame.getHeight(), firstFrame.getConfig());, +++ b/library/src/main/java/com/bumptech/glide/util/LruCache.java, + protected synchronized void trimToSize(int size) {]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;, + registry = new Registry();, + registry.register(new DefaultImageHeaderParser());, +, + Downsampler downsampler = new Downsampler(registry.getImageHeaderParsers(),, + resources.getDisplayMetrics(), bitmapPool, arrayPool);, + new ByteBufferGifDecoder(context, registry.getImageHeaderParsers(), bitmapPool, arrayPool);, +, + registry.register(ByteBuffer.class, new ByteBufferEncoder()), + new StreamGifDecoder(registry.getImageHeaderParsers(), byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;, + registry = new Registry();, + registry.register(new DefaultImageHeaderParser());, +, + Downsampler downsampler = new Downsampler(registry.getImageHeaderParsers(),, + resources.getDisplayMetrics(), bitmapPool, arrayPool);, + new ByteBufferGifDecoder(context, registry.getImageHeaderParsers(), bitmapPool, arrayPool);, +, + registry.register(ByteBuffer.class, new ByteBufferEncoder()), + new StreamGifDecoder(registry.getImageHeaderParsers(), byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import com.bumptech.glide.load.ImageHeaderParser;, +import com.bumptech.glide.provider.ImageHeaderParserRegistry;, + private final ImageHeaderParserRegistry imageHeaderParserRegistry;, + this.imageHeaderParserRegistry = new ImageHeaderParserRegistry();, + public Registry register(ImageHeaderParser parser)
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ExternallyClearedDiskCacheTest.java, +package com.bumptech.glide.test;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Mockito.mock;, +, +import android.content.Context;, +import android.graphics.drawable.Drawable;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.Glide;, +import com.bumptech.glide.GlideBuilder;, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.engine.cache.DiskCache;, +import com.bumptech.glide.load.engine.cache.DiskCache.Factory;, +import com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;, +import com.bumptech.glide.test.ResourceIds.raw;, +import java.io.File;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +// Tests #2465., +@RunWith(AndroidJUnit4.class), +public class ExternallyClearedDiskCacheTest {, + @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();, + private final ConcurrencyHelper concurrency = new ConcurrencyHelper();, + private Context context;, + private File cacheDir;, +, + @Before, + public void setUp() {, + context = InstrumentationRegistry.getTargetContext();, + cacheDir = context.getCacheDir();, + }, +,
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java]
[+++ b/integration/volley/build.gradle, + androidTestCompile project(":testutil"), +++ b/integration/volley/build.gradle, + androidTestCompile project(":testutil"), +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import com.bumptech.glide.testutil.TestUtil;, + assertEquals(expected, TestUtil.isToString(is));, + assertEquals(expected, TestUtil.isToString(is));, + assertEquals(expected, TestUtil.isToString(is));, + assertEquals(expected, TestUtil.isToString(is));, +++ b/integration/volley/build.gradle, + androidTestCompile project(":testutil"), +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import com.bumptech.glide.testutil.TestUtil;, + assertEquals(expected, TestUtil.isToString(is));, + assertEquals(expected, TestUtil.isToString(is));, + assertEquals(expected, TestUtil.isToString(is));, + assertEquals(expected, TestUtil.isToString(is));, +++ b/library/build.gradle, + androidTestCompile project(':testutil'), +++ b/integration/volley/build.gradle, + androidTestCompile project(":testutil"), +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import com.bumptech.glide.testutil.TestUtil;, + assertEquals(expected, TestUtil.isToString(is));, + assertEquals(expected, TestUtil.isToString(is));, + assertEquals(expected, TestUtil.isToString(is));, + assertEquals(expected, TestUtil.isToString(is));, +++ b/library/build.gradle, + androidTestCompile project(':testutil'), +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.testutil.TestResourceUtil;, + return TestResourceUtil.openResource(getClass(), imageName);, +++ b/integration/volley/build.gradle, + androidTestCompile project(":testutil"), +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import com.bumptech.glide.testutil.TestUtil;, + assertEquals(expected, TestUtil.isToString(is));, +
[+++ b/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java, + * @param quality int greater than 0.]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.MediaStoreFileLoader;, + .append(Uri.class, File.class, new MediaStoreFileLoader.Factory()), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.MediaStoreFileLoader;, + .append(Uri.class, File.class, new MediaStoreFileLoader.Factory()), +++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/MediaStoreUtil.java, + public static boolean isMediaStoreUri(Uri uri) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.MediaStoreFileLoader;, + .append(Uri.class, File.class, new MediaStoreFileLoader.Factory()), +++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/MediaStoreUtil.java, + public static boolean isMediaStoreUri(Uri uri) {, +++ b/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java, +package com.bumptech.glide.load.model;, +, +import android.content.Context;, +import android.database.Cursor;, +import android.net.Uri;, +import android.provider.MediaStore;, +import android.text.TextUtils;, +, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.DataSource;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.data.DataFetcher;, +import com.bumptech.glide.load.data.mediastore.MediaStoreUtil;, +import com.bumptech.glide.signature.ObjectKey;, +, +import java.io.File;, +, +/**, + * Loads the file path for {@link MediaStore} owned {@link Uri uris}., + */, +public final class MediaStoreFileLoader implements ModelLoader<Uri,
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java, +package com.bumptech.glide;, +, +import static com.google.common.truth.Truth.assertThat;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.Bitmap.CompressFormat;, +import android.graphics.drawable.BitmapDrawable;, +import android.graphics.drawable.Drawable;, +import android.net.Uri;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import android.util.Base64;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import java.io.ByteArrayOutputStream;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +@RunWith(AndroidJUnit4.class), +public class DataUriTest {, + @Rule public TearDownGlide tearDownGlide = new TearDownGlide();, + private final ConcurrencyHelper concurrency = new ConcurrencyHelper();, + private final Context context = InstrumentationRegistry.getTargetContext();, +, + @Test, + public void load_withJpegAsDataUriString_returnsBitmap() {, + Bitmap bitmap =, + concurrency.get(, + Glide.with(context), + .asBitmap(), + .load(getDataUriString(CompressFormat.JPEG)), + .submit());, + assertThat(bitmap).isNotNull();, + }, +, + @Test,
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java, + @Test, + public void loadWideGamutImage_withArgb888OfSufficientSizeInPool_usesArgb8888Bitmap() {, + Bitmap wideGamut = Bitmap.createBitmap(100, 50, Bitmap.Config.RGBA_F16);, + byte[] data = asPng(wideGamut);, +, + Bitmap argb8888 = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + Glide.init(context, new GlideBuilder(), + .setBitmapPool(new LruBitmapPool(wideGamut.getAllocationByteCount() * 5)));, + Glide.get(context).getBitmapPool().put(argb8888);, +, + Bitmap result =, + concurrency.get(, + Glide.with(context), + .asBitmap(), + .load(data), + .submit());, +, + assertThat(result).isSameAs(argb8888);, + }, +, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java, + @Test, + public void loadWideGamutImage_withArgb888OfSufficientSizeInPool_usesArgb8888Bitmap() {, + Bitmap wideGamut = Bitmap.createBitmap(100, 50, Bitmap.Config.RGBA_F16);, + byte[] data = asPng(wideGamut);, +, + Bitmap argb8888 = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + Glide.init(context, new GlideBuilder(), + .setBitmapPool(new LruBitmapPool(wideGamut.getAllocationByteCount() * 5)));,
[+++ b/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + Log.v(TAG, message + " in " + LogTime.getElapsedMillis(startTime) + ", key: " + resultKey);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + Log.v(TAG, message + " in " + LogTime.getElapsedMillis(startTime) + ", key: " + resultKey);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java, + private static final String EMPTY_LOG_STRING = "";, + .append("EngineKey{"), + .append('+'), + .append("+["), + .append('x'), + .append("]+"), + .append('\''), + .append(cacheDecoder != null ? cacheDecoder .getId() : EMPTY_LOG_STRING), + .append('\''), + .append('+'), + .append('\''), + .append(decoder != null ? decoder .getId() : EMPTY_LOG_STRING), + .append('\''), + .append('+'), + .append('\''), + .append(transformation != null ? transformation.getId() : EMPTY_LOG_STRING), + .append('\''), + .append('+'), +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Rotate.java, +package com.bumptech.glide.load.resource.bitmap;, +, +import android.graphics.Bitmap;, +import android.support.annotation.NonNull;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.util.Util;, +import java.nio.ByteBuffer;, +import java.security.MessageDigest;, +, +/**, + * A {@link BitmapTransformation} which rotates the bitmap., + */, +public class Rotate extends BitmapTransformation {, + private static final String ID = "com.bumptech.glide.load.resource.bitmap.Rotate";, + private static final byte[] ID_BYTES = ID.getBytes(CHARSET);, +, + private final int degreesToRotate;, +, + /**, + * @param degreesToRotate number of degrees to rotate the image by. If zero the original image is, + * not modified., + */, + public Rotate(int degreesToRotate) {, + this.degreesToRotate = degreesToRotate;, + }, +, + @Override,
[+++ b/.gitmodules, +[submodule "DiskLruCache"], + path = DiskLruCache, + url = https://github.com/JakeWharton/DiskLruCache.git, +++ b/.gitmodules, +[submodule "DiskLruCache"], + path = DiskLruCache, + url = https://github.com/JakeWharton/DiskLruCache.git, +++ b/DiskLruCache, +Subproject commit 204d41abb60f981a3f8521b7b5cb41deb43281bc, +++ b/.gitmodules, +[submodule "DiskLruCache"], + path = DiskLruCache, + url = https://github.com/JakeWharton/DiskLruCache.git, +++ b/DiskLruCache, +Subproject commit 204d41abb60f981a3f8521b7b5cb41deb43281bc, +++ b/libs/android-support-v4.jar, +++ b/.gitmodules, +[submodule "DiskLruCache"], + path = DiskLruCache, + url = https://github.com/JakeWharton/DiskLruCache.git, +++ b/DiskLruCache, +Subproject commit 204d41abb60f981a3f8521b7b5cb41deb43281bc, +++ b/libs/android-support-v4.jar, +++ b/src/com/bumptech/photos/LoadedCallback.java, +/*, + * Copyright (c) 2012. Bump Technologies Inc. All Rights Reserved., + */, +, +package com.bumptech.photos;, +, +import android.graphics.Bitmap;, +, +/**, + * Created by IntelliJ IDEA., + *
[+++ b/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java, +++ b/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + /**, + * Keeps track of the set of Bitmaps drawn to the canvas., + */, +++ b/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + /**, + * Keeps track of the set of Bitmaps drawn to the canvas., + */, +++ b/library/src/test/java/javax/microedition/khronos/opengles/GL.java, +/**, + * TODO: Figure out why this is necessary and remove it., + * See: https://github.com/robolectric/robolectric-gradle-plugin/issues/145, + */, +++ b/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + /**, + * Keeps track of the set of Bitmaps drawn to the canvas., + */, +++ b/library/src/test/java/javax/microedition/khronos/opengles/GL.java, +/**, + * TODO: Figure out why this is necessary and
[+++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, + * The {@code source} is managed by the caller, there's no need to close it., + * The returned {@link Resource} will be {@link Resource#recycle() released} when the engine sees fit., + * </p>, + * <p>, + * Note - The {@code width} and {@code height} arguments are hints only,, + * there is no requirement that the decoded resource exactly match the given dimensions., + * A typical use case would be to use the target dimensions to determine, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, + * The {@code source} is managed by the caller, there's no need
[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.request.GenericRequest;, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.request.GenericRequest;, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +package com.bumptech.glide.request;, +, +import android.content.Context;, +import android.graphics.drawable.Drawable;, +import android.util.Log;, +import android.view.animation.Animation;, +import android.view.animation.AnimationUtils;, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.Resource;, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.load.engine.Engine;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.data.DataFetcher;, +import com.bumptech.glide.provider.LoadProvider;, +import com.bumptech.glide.request.target.Target;, +, +import java.io.InputStream;, +, +/**, + * A {@link Request} that loads a {@link Resource} into a given {@link Target}., + *,
[+++ b/library/src/main/java/com/bumptech/glide/manager/TargetTracker.java, + return Util.getSnapshot(targets);]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, + when(byteArrayPool.get(anyInt())), + .thenReturn(new byte[ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, + when(byteArrayPool.get(anyInt())), + .thenReturn(new byte[ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), + stream = new RecyclableBufferedInputStream(wrapped, byteArrayPool, BUFFER_SIZE);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, + when(byteArrayPool.get(anyInt())), + .thenReturn(new byte[ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), + stream = new RecyclableBufferedInputStream(wrapped, byteArrayPool, BUFFER_SIZE);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + /**, + * Sets the {@link ByteArrayPool} implementation to allow variable sized byte arrays to be stored, + * and retrieved as needed., + *, + * @param byteArrayPool The pool to use., + *
[+++ b/.travis.yml, +script: 'travis_retry ./gradlew build --parallel']
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, + this.context = context.getApplicationContext();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, + this.context = context.getApplicationContext();, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeader.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, + this.context = context.getApplicationContext();, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeader.java, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + private static final int BYTES_PER_INTEGER = Integer.SIZE / 8;, + // Maximum size is 256, see GifHeaderParser.readColorTable, + // Private color table that can be modified if needed, + private final int[] pct = new int[256];, + act = currentFrame.lct != null ? currentFrame.lct : header.gct;, + // Prepare local copy of color table ("pct = act"), see #1068, + System.arraycopy(act, 0, pct, 0, act.length);, + // Forget about act reference from shared header
[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static com.bumptech.glide.load.engine.DecodeOptions.through;, +import android.content.pm.ApplicationInfo;, +import android.os.Bundle;, +import com.bumptech.glide.module.GlideModule;, +import org.robolectric.res.builder.RobolectricPackageManager;, +, + RobolectricPackageManager pm = (RobolectricPackageManager) Robolectric.application.getPackageManager();, + ApplicationInfo info = pm.getApplicationInfo(Robolectric.application.getPackageName(), 0);, + info.metaData = new Bundle();, + info.metaData.putString(SetupModule.class.getName(), "GlideModule");, +, +// ShadowPackageManager spm = Robolectric.shadowOf_(Robolectric.application.getPackageManager());, +// spm.addGlideModule(SetupModule.class);, + requestManager, + .as(byte[].class), + .decode(through(Robolectric.application, Bitmap.class)), + .load(uri), + .into(target);, + .as(byte[].class), + .decode(through(Robolectric.application, GifDrawable.class)), + .as(byte[].class), + .decode(through(Robolectric.application, Bitmap.class)), + when(failFetcher.getDataClass()).thenReturn(failResource);, + when(failLoader.handles(any(failModel))).thenReturn(true);, + when(fetcher.getDataClass()).thenReturn(InputStream.class);, + when(modelLoader.handles(any(modelClass))).thenReturn(true);, + public static class SetupModule implements GlideModule {, +, + @Override, + public void applyOptions(Context context, GlideBuilder builder) {, + // Run all tasks on the main thread
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/com/bumptech/photos/photomanager/LoadedCallback.java, +/*, + * Copyright (c) 2012. Bump Technologies Inc. All Rights Reserved., + */, +, +package com.bumptech.photos.photomanager;, +, +import android.graphics.Bitmap;, +, +/**, + * Created by IntelliJ IDEA., + * User: sam, + * Date: 2/9/12, + * Time: 7:04 PM, + * To change this template use File | Settings | File Templates., + */, +public interface LoadedCallback {, + public void onLoadCompleted(Bitmap loaded);, + public void onLoadFailed(Exception e);, +}, +++ /dev/null, +++ /dev/null, +++ b/src/com/bumptech/photos/photomanager/LoadedCallback.java, +/*, + * Copyright (c) 2012. Bump Technologies Inc. All
[+++ b/CONTRIBUTING.md, +Similarly if you support a particular feature request, feel free to let us know by commenting on the issue., +[1]: https://github.com/bumptech/glide/issues/new?body=**Glide%20Version/Integration%20library%20%28if%20any%29**%3A%0A**Device/Android%20Version**%3A%0A**Issue%20details/Repro%20steps/Use%20case%20background**%3A%0A%0A**Glide%20load%20line**%3A%0A%60%60%60java%0AGlide.with%28...%29.....load%28...%29.....into%28...%29%3B%0A%60%60%60%0A%0A**Layout%20XML**%3A%0A%60%60%60xml%0A%3C...Layout%3E%0A%20%20%20%20%3CImageView%20android%3AscaleType%3D%22...%22%20...%20/%3E%0A%3C/..Layout%3E%0A%60%60%60%0A%0A**Stack%20trace%20/%20LogCat**%3A%0A%60%60%60ruby%0Apaste%20stack%20trace%20here%0A%60%60%60, +[5]: /bumptech/glide, +++ b/CONTRIBUTING.md, +Similarly if you support a particular feature request, feel free to let us know by commenting on the issue., +[1]: https://github.com/bumptech/glide/issues/new?body=**Glide%20Version/Integration%20library%20%28if%20any%29**%3A%0A**Device/Android%20Version**%3A%0A**Issue%20details/Repro%20steps/Use%20case%20background**%3A%0A%0A**Glide%20load%20line**%3A%0A%60%60%60java%0AGlide.with%28...%29.....load%28...%29.....into%28...%29%3B%0A%60%60%60%0A%0A**Layout%20XML**%3A%0A%60%60%60xml%0A%3C...Layout%3E%0A%20%20%20%20%3CImageView%20android%3AscaleType%3D%22...%22%20...%20/%3E%0A%3C/..Layout%3E%0A%60%60%60%0A%0A**Stack%20trace%20/%20LogCat**%3A%0A%60%60%60ruby%0Apaste%20stack%20trace%20here%0A%60%60%60, +[5]: /bumptech/glide, +++ b/README.md, + mavenCentral(), + compile 'com.github.bumptech.glide:glide:3.6.1', + <version>3.6.1</version>, +@Override, +public void onCreate(Bundle savedInstanceState) {, +@Override, +public View getView(int position, View recycled, ViewGroup container) {, + Glide.with(myFragment), +OkHttp and Volley, +-----------------, +Support for OkHttp and Volley is provided by integration libraries you can optionally include as dependencies., +The integration
[+++ b/.travis.yml]
[+++ b/annotation/compiler/test/build.gradle, + testImplementation "junit:junit:${JUNIT_VERSION}", +++ b/annotation/compiler/test/build.gradle, + testImplementation "junit:junit:${JUNIT_VERSION}", +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidAppGlideModuleWithExcludesTest.java, +import static org.junit.Assert.assertThrows;, +import org.junit.function.ThrowingRunnable;, +// Ignore warnings since most methods use assertThrows, + assertThrows(, + RuntimeException.class,, + new ThrowingRunnable() {, + @Override, + public void run() throws Throwable {, + });, + }, +++ b/annotation/compiler/test/build.gradle, + testImplementation "junit:junit:${JUNIT_VERSION}", +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidAppGlideModuleWithExcludesTest.java, +import static org.junit.Assert.assertThrows;, +import org.junit.function.ThrowingRunnable;, +// Ignore warnings since most methods use assertThrows, + assertThrows(, + RuntimeException.class,, + new ThrowingRunnable() {, + @Override, + public void run() throws Throwable {, + });, + }, +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java, +// Avoid warnings when asserting on exceptions., +++ b/annotation/compiler/test/build.gradle, +
[+++ b/gradle.properties, +VOLLEY_VERSION=1.0.16, +ROBOLECTRIC_VERSION=3.1, +++ b/gradle.properties, +VOLLEY_VERSION=1.0.16, +ROBOLECTRIC_VERSION=3.1, +++ b/integration/volley/build.gradle, + compile "com.mcxiaoke.volley:library:${VOLLEY_VERSION}"]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java, + bitmapPool = mock(BitmapPool.class);, + Resource<Bitmap> resource = mock(Resource.class);, + when(resource.get()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_4444));, + final Bitmap toTransform = Bitmap.createBitmap(1, 2, Bitmap.Config.RGB_565);, + Resource<Bitmap> resource = mock(Resource.class);, + when(resource.get()).thenReturn(toTransform);, +, + final Bitmap expected = Bitmap.createBitmap(223, 4123, Bitmap.Config.RGB_565);, + assertEquals(expected, toTransform);, + return expected;, + Resource<Bitmap> resource = mock(Resource.class);, + when(resource.get()).thenReturn(expected);, + when(resource.get()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565));, + assertNull(transform.transform(resource, 100, 100));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java, + bitmapPool = mock(BitmapPool.class);, + Resource<Bitmap> resource = mock(Resource.class);, + when(resource.get()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_4444));, + final Bitmap toTransform = Bitmap.createBitmap(1, 2, Bitmap.Config.RGB_565);, + Resource<Bitmap> resource = mock(Resource.class);, + when(resource.get()).thenReturn(toTransform);, +, + final Bitmap expected = Bitmap.createBitmap(223, 4123, Bitmap.Config.RGB_565);,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + private final GenericLoaderFactory loaderFactory;, + loaderFactory = new GenericLoaderFactory(context);, + return Glide.get(context).getLoaderFactory().buildModelLoader(modelClass, resourceClass);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + private final GenericLoaderFactory loaderFactory;, + loaderFactory = new GenericLoaderFactory(context);, + return Glide.get(context).getLoaderFactory().buildModelLoader(modelClass, resourceClass);, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + this.context = context.getApplicationContext();, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + private final GenericLoaderFactory loaderFactory;, + loaderFactory = new GenericLoaderFactory(context);, + return Glide.get(context).getLoaderFactory().buildModelLoader(modelClass, resourceClass);, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + this.context = context.getApplicationContext();, +++ b/library/src/main/java/com/bumptech/glide/load/model/GenericLoaderFactory.java, + private final Context context;, +, + public GenericLoaderFactory(Context context) {, + this.context = context.getApplicationContext();, + }, +, + * @deprecated Use {@link #buildModelLoader(Class, Class)} instead., + * @param modelClass The model class., + * @param resourceClass
[+++ b/annotation/compiler/test/build.gradle, +, +test.maxParallelForks = 2, +, +++ b/annotation/compiler/test/build.gradle, +, +test.maxParallelForks = 2, +, +++ b/build.gradle, + options.fork = true, +++ b/annotation/compiler/test/build.gradle, +, +test.maxParallelForks = 2, +, +++ b/build.gradle, + options.fork = true, +++ b/gradle.properties, +org.gradle.jvmargs=-Xmx4096M, +TEST_JVM_MEMORY_SIZE=4096M, +++ b/annotation/compiler/test/build.gradle, +, +test.maxParallelForks = 2, +, +++ b/build.gradle, + options.fork = true, +++ b/gradle.properties, +org.gradle.jvmargs=-Xmx4096M, +TEST_JVM_MEMORY_SIZE=4096M, +++ b/library/build.gradle, +, + // Initializing Robolectric is expensive, two threads seem to be around the only level where any, + // improvement is seen., + testTask.maxParallelForks = 2]
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, + @Deprecated]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/scripts/travis-sonatype-publish.sh, +if [ "$SONATYPE_PUBLISH" == "true" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ] && [ "$TRAVIS_BRANCH" == "$SONATYPE_PUBLISH_BRANCH" ]; then]
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;, +import java.util.concurrent.ExecutorService;, + private ExecutorService resizeService;, + private ExecutorService diskCacheService;, + public GlideBuilder setResizeService(ExecutorService service) {, + this.resizeService = service;, + return this;, + }, +, + public GlideBuilder setDiskCacheService(ExecutorService service) {, + this.diskCacheService = service;, + return this;, + }, +, + if (resizeService == null) {, + final int cores = Math.max(1, Runtime.getRuntime().availableProcessors());, + resizeService = new FifoPriorityThreadPoolExecutor(cores);, + }, + if (diskCacheService == null) {, + diskCacheService = new FifoPriorityThreadPoolExecutor(1);, + }, +, + engine = new Engine(memoryCache, diskCache, resizeService, diskCacheService);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;, +import java.util.concurrent.ExecutorService;, + private ExecutorService resizeService;, +
[+++ b/instrumentation/src/androidTest/AndroidManifest.xml, + <application android:label="GlideTest">, + <uses-library android:name="android.test.runner" />, +, + <instrumentation android:targetPackage="com.bumptech.glide.instrumentation", + android:name="com.google.android.apps.common.testing.testrunner.Google3InstrumentationTestRunner", + android:label="Glide Emulator Tests" />, +++ b/instrumentation/src/androidTest/AndroidManifest.xml, + <application android:label="GlideTest">, + <uses-library android:name="android.test.runner" />, +, + <instrumentation android:targetPackage="com.bumptech.glide.instrumentation", + android:name="com.google.android.apps.common.testing.testrunner.Google3InstrumentationTestRunner", + android:label="Glide Emulator Tests" />, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java, +++ b/instrumentation/src/androidTest/AndroidManifest.xml, + <application android:label="GlideTest">, + <uses-library android:name="android.test.runner" />, +, + <instrumentation android:targetPackage="com.bumptech.glide.instrumentation", + android:name="com.google.android.apps.common.testing.testrunner.Google3InstrumentationTestRunner", + android:label="Glide Emulator Tests" />, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheFactory.java, + return DiskLruCacheWrapper.create(cacheDir, diskCacheSize);, +++ b/instrumentation/src/androidTest/AndroidManifest.xml, + <application android:label="GlideTest">, + <uses-library android:name="android.test.runner" />, +, + <instrumentation android:targetPackage="com.bumptech.glide.instrumentation", + android:name="com.google.android.apps.common.testing.testrunner.Google3InstrumentationTestRunner", + android:label="Glide Emulator Tests" />, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheFactory.java, + return DiskLruCacheWrapper.create(cacheDir, diskCacheSize);, +++
[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.Presenter;, +import com.bumptech.glide.presenter.ThumbImagePresenter;, +import com.bumptech.glide.resize.Metadata;, +import com.bumptech.glide.resize.Priority;, + Presenter presenter = target.getPresenter();, + if (presenter != null) {, + presenter.clear();, + public Request<ModelType> thumbnail(float sizeMultiplier) {, + super.thumbnail(sizeMultiplier);, + return this;, + }, +, + private Float thumbSizeMultiplier;, + public GenericRequest thumbnail(float sizeMultiplier) {, + if (sizeMultiplier < 0f || sizeMultiplier > 1f) {, + throw new IllegalArgumentException("sizeMultiplier must be between 0 and 1");, + }, + this.thumbSizeMultiplier = sizeMultiplier;, + return this;, + }, +, + Presenter<ModelType> presenter = buildImagePresenter(target);, + presenter.setModel(model);, + return target;, + private <Y extends Target> ImagePresenter.Builder<ModelType, Y> buildImagePresenter(, + ModelLoader<ModelType,
[+++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, +import java.util.Map;, + private final Headers headers;, + private final String stringUrl;, + private String safeStringUrl;, + this(url, Headers.NONE);, + this(url, Headers.NONE);, + }, +, + public GlideUrl(URL url, Headers headers) {, + if (url == null) {, + throw new IllegalArgumentException("URL must not be null!");, + }, + if (headers == null) {, + throw new IllegalArgumentException("Headers must not be null");, + }, + this.url = url;, + stringUrl = null;, + this.headers = headers;, + }, +, + public GlideUrl(String url, Headers headers) {, + if (headers == null) {, + throw new IllegalArgumentException("Headers must
[+++ /dev/null, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.UnitModelLoader;, + modelLoaderRegistry.append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<GifDecoder>());, + modelLoaderRegistry.append(File.class, File.class, new UnitModelLoader.Factory<File>());, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.UnitModelLoader;, + modelLoaderRegistry.append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<GifDecoder>());, + modelLoaderRegistry.append(File.class, File.class, new UnitModelLoader.Factory<File>());, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + return getDownloadOnlyRequest().into(target);, + return getDownloadOnlyRequest().into(width, height);, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.UnitModelLoader;, + modelLoaderRegistry.append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<GifDecoder>());, + modelLoaderRegistry.append(File.class, File.class, new UnitModelLoader.Factory<File>());, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + return getDownloadOnlyRequest().into(target);, + return getDownloadOnlyRequest().into(width, height);, +++ b/library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java, +package com.bumptech.glide.load.model;, +, +import android.content.Context;, +, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.data.DataFetcher;, +, +public class UnitModelLoader<ResourceType> implements ModelLoader<ResourceType, ResourceType> {, +, + @Override, + public DataFetcher<ResourceType> getDataFetcher(ResourceType model, int width, int
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java, +import com.bumptech.glide.util.MultiClassKey;, +, +++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java, +import com.bumptech.glide.util.MultiClassKey;, +, +++ b/library/src/main/java/com/bumptech/glide/provider/DataLoadProviderRegistry.java, +import com.bumptech.glide.util.MultiClassKey;, +, +++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java, +import com.bumptech.glide.util.MultiClassKey;, +, +++ b/library/src/main/java/com/bumptech/glide/provider/DataLoadProviderRegistry.java, +import com.bumptech.glide.util.MultiClassKey;, +, +++ b/library/src/main/java/com/bumptech/glide/util/MultiClassKey.java, +package com.bumptech.glide.util;, +, +/**, + * A key of two {@link Class}es to be used in hashed collections., + */, +public class MultiClassKey {, + private Class<?> first;, + private Class<?> second;, +, + public MultiClassKey() {, + // leave them null, + }, +, + public MultiClassKey(Class<?> first, Class<?> second) {, + set(first, second);, + }, +, + public void set(Class<?> first, Class<?> second) {, + this.first = first;, + this.second
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java, + * The provided Bitmap, toTransform, should not be recycled or returned to the pool. Glide will automatically, + * recycle and/or reuse toTransform if the transformation returns a different Bitmap. Similarly implementations, + * should never recycle or return Bitmaps that are returned as the result of this method. Recycling or returning, + * the provided and/or the returned Bitmap to the pool will lead to a variety of runtime exceptions and drawing, + * errors. See #408 for an example. If the implementation obtains and discards intermediate Bitmaps, they may, + * safely be returned
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java, +public abstract class DiskCacheStrategy {, + public static final DiskCacheStrategy ALL = new DiskCacheStrategy() {, +, + @Override, + public boolean decodeCachedResource() {, + return true;, + }, +, + @Override, + public boolean decodeCachedData() {, + return true;, + }, + };, +, + public static final DiskCacheStrategy NONE = new DiskCacheStrategy() {, +, + @Override, + public boolean decodeCachedResource() {, + return false;, + }, +, + @Override, + public boolean decodeCachedData() {, + return false;, + }, + };, +, + public static final DiskCacheStrategy DATA = new DiskCacheStrategy() {, +, + @Override, +
[+++ b/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java, +import com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;, + private RecyclableBufferedInputStream wrapped;, + wrapped = mock(RecyclableBufferedInputStream.class);, +, + @Test, + public void testFixMarkLimitCallsFixMarkLimitOnWrappedStream() {, + is.fixMarkLimit();, + verify(wrapped).fixMarkLimit();, + }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java, +import com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;, + private RecyclableBufferedInputStream wrapped;, + wrapped = mock(RecyclableBufferedInputStream.class);, +, + @Test, + public void testFixMarkLimitCallsFixMarkLimitOnWrappedStream() {, + is.fixMarkLimit();, + verify(wrapped).fixMarkLimit();, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + if (Log.isLoggable(TAG, Log.VERBOSE)) {, + Log.v(TAG, "Reject bitmap from pool=" + strategy.logBitmap(bitmap) + " is mutable=", + + bitmap.isMutable());, + }, +++ b/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java, +import com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;, + private RecyclableBufferedInputStream wrapped;, + wrapped = mock(RecyclableBufferedInputStream.class);, +, + @Test, + public void testFixMarkLimitCallsFixMarkLimitOnWrappedStream() {, +
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import com.bumptech.glide.load.Transformation;, + * {@link android.graphics.drawable.VectorDrawable}s. Although Glide makes a best effort to apply, + * {@link com.bumptech.glide.load.Transformation}s to these {@link Drawable}s by either extracting, + * the underlying {@link Bitmap} or by converting the {@link Drawable} to a {@link Bitmap}, Glide, + * is still not able to transform all types of resources. Animated {@link Drawable}s cannot be, + * transformed (other than {@link com.bumptech.glide.load.resource.gif.GifDrawable}). To avoid, + * load failures if a {@link Drawable} can't be transformed, use the optional transformation, + * methods like {@link RequestOptions#optionalTransform(Class, Transformation)}., + *, + * <p>In some cases
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerAllocationTest.java, + private static final int DEFAULT_BITMAP_SIZE = Util.getBitmapByteSize(DEFAULT_BITMAP);, + byteSize += Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());, + int currentSize = Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());, + byteSize += Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());, + byteSize += Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerAllocationTest.java, + private static final int DEFAULT_BITMAP_SIZE = Util.getBitmapByteSize(DEFAULT_BITMAP);, + byteSize += Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());, + int currentSize = Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());, + byteSize += Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());, + byteSize += Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/PreFillerHandlerTest.java, + when(cache.getMaxSize()).thenReturn(Util.getBitmapByteSize(bitmap));, + when(cache.getMaxSize()).thenReturn(Util.getBitmapByteSize(bitmap) / 2);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerAllocationTest.java, + private static final int DEFAULT_BITMAP_SIZE = Util.getBitmapByteSize(DEFAULT_BITMAP);, + byteSize += Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());, + int currentSize = Util.getBitmapByteSize(current.getWidth(),
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, + * <p> Callers must <em>not</em> continue to use the Bitmap after calling this method. </p>]
[+++ b/.gitmodules, +[submodule "third_party/disklrucache/disklrucache"], + path = third_party/disklrucache/disklrucache, + url = https://github.com/sjudd/DiskLruCache.git, +++ b/.gitmodules, +[submodule "third_party/disklrucache/disklrucache"], + path = third_party/disklrucache/disklrucache, + url = https://github.com/sjudd/DiskLruCache.git, +++ b/library/build.gradle, + compile project(':third_party:disklrucache:disklrucache'), +++ b/.gitmodules, +[submodule "third_party/disklrucache/disklrucache"], + path = third_party/disklrucache/disklrucache, + url = https://github.com/sjudd/DiskLruCache.git, +++ b/library/build.gradle, + compile project(':third_party:disklrucache:disklrucache'), +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java, +import java.io.FileInputStream;, +import java.io.FileOutputStream;, + final DiskLruCache.Value value = getDiskCache().get(safeKey);, + if (value != null) {, + result = new FileInputStream(value.getFile(0));, + File file = editor.getFile(0);, + os = new FileOutputStream(file);, +++ b/.gitmodules, +[submodule "third_party/disklrucache/disklrucache"], + path = third_party/disklrucache/disklrucache, + url = https://github.com/sjudd/DiskLruCache.git, +++ b/library/build.gradle, + compile project(':third_party:disklrucache:disklrucache'), +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java, +import
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import android.util.Log;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.util.LogTime;, + private static final String TAG = "Engine";, + long startTime = LogTime.getLogTime();, + if (Log.isLoggable(TAG, Log.VERBOSE)) {, + Log.v(TAG, "loaded resource from cache in " + LogTime.getElapsedMillis(startTime));, + }, + if (Log.isLoggable(TAG, Log.VERBOSE)) {, + Log.v(TAG, "added to existing load in " + LogTime.getElapsedMillis(startTime));, + }, + long start = LogTime.getLogTime();, + if (Log.isLoggable(TAG, Log.VERBOSE)) {, + Log.v(TAG, "queued new load in " + LogTime.getElapsedMillis(start));, + Log.v(TAG, "finished load in engine in " + LogTime.getElapsedMillis(startTime));, + }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import android.util.Log;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.util.LogTime;, +
[+++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + transformations[i] = new GifBitmapWrapperTransformation(glide.getBitmapPool(), bitmapTransformations[i]);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + transformations[i] = new GifBitmapWrapperTransformation(glide.getBitmapPool(), bitmapTransformations[i]);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + transformations[i] = new GifBitmapWrapperTransformation(glide.getBitmapPool(), bitmapTransformations[i]);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/GifRequestBuilder.java, +import com.bumptech.glide.load.resource.gif.GifDrawableTransformation;, +public class GifRequestBuilder<ModelType>, + extends GenericRequestBuilder<ModelType, InputStream, GifDrawable, GifDrawable>, + LoadProvider<ModelType, InputStream, GifDrawable, GifDrawable> loadProvider, Glide glide,, + RequestTracker requestTracker, Lifecycle lifecycle) {, + GenericRequestBuilder<ModelType, InputStream, GifDrawable, GifDrawable> thumbnailRequest) {, + ResourceDecoder<InputStream, GifDrawable> decoder) {, + ResourceDecoder<File, GifDrawable> cacheDecoder) {, + ResourceEncoder<GifDrawable> encoder) {, + private GifDrawableTransformation[] toGifTransformations(Transformation<Bitmap>[] bitmapTransformations) {, + GifDrawableTransformation[] transformations = new GifDrawableTransformation[bitmapTransformations.length];, + transformations[i] = new GifDrawableTransformation(bitmapTransformations[i], glide.getBitmapPool());, + public GifRequestBuilder<ModelType> transform(Transformation<GifDrawable>... transformations)
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + /**, + * Ensure that the size of the bitmap is fixed to the requested width and height of the, + * resource from the caller. The final resource dimensions may differ from the requested, + * width and height, and thus setting this to true may result in the bitmap size differing, + * from the resource dimensions., + *, + * This can be used as a performance optimization for KitKat and above by fixing the size of the, + * bitmap for a collection of requested resources so that the bitmap pool will
[+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + * <p>On Android O+, this format will will use ARGB_8888 only when it's not possible to use, + * {@link android.graphics.Bitmap.Config#HARDWARE}., + *, + * this setting is a preference, not a promise., + * Identical to {@link #PREFER_ARGB_8888} but prevents Glide from using {@link, + * android.graphics.Bitmap.Config#HARDWARE} on Android O+, + */, + PREFER_ARGB_8888_DISALLOW_HARDWARE,, +, + /**, + *, + * <p>On Android O+, this format will will use ARGB_8888 only when it's not possible to use, + * {@link android.graphics.Bitmap.Config#HARDWARE}., +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + * <p>On Android O+, this format will will use ARGB_8888 only
[+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import android.os.Looper;, + Looper looper = harness.mainHandler.getLooper();, + Shadows.shadowOf(looper).pause();, + Shadows.shadowOf(looper).runOneTask();, +++ b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import android.os.Looper;, + Looper looper = harness.mainHandler.getLooper();, + Shadows.shadowOf(looper).pause();, + Shadows.shadowOf(looper).runOneTask();, +++ b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java, + Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_4444);, + Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + Bitmap first = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);, + Bitmap second = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + Bitmap third = Bitmap.createBitmap(120, 120, Bitmap.Config.RGB_565);, + final Bitmap leastRecentlyUsed = Bitmap.createBitmap(100, 100, Bitmap.Config.ALPHA_8);,
[+++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.load.DataSource;, +, + @Override, + public DataSource getDataSource() {, + return DataSource.REMOTE;, + }, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.load.DataSource;, +, + @Override, + public DataSource getDataSource() {, + return DataSource.REMOTE;, + }, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +import com.bumptech.glide.load.DataSource;, + @Override, + public DataSource getDataSource() {, + return DataSource.REMOTE;, + }, +, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.load.DataSource;, +, + @Override, + public DataSource getDataSource() {, + return DataSource.REMOTE;, + }, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +import
[+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + // Only log at more verbose log levels if the user has set a fallback drawable, because, + // fallback Drawables indicate the user expects null models occasionally., + int logLevel = getFallbackDrawable() == null ? Log.WARN : Log.DEBUG;, + onLoadFailed(new GlideException("Received null model"), logLevel);, + onLoadFailed(e, Log.WARN);, + }, +, + private void onLoadFailed(GlideException e, int maxLogLevel) {, + if (logLevel <= maxLogLevel) {]
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.view.ViewGroup;, +import com.bumptech.glide.loader.model.FileLoader;, +import com.bumptech.glide.loader.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.model.ModelLoader;, +import com.bumptech.glide.loader.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.model.ResourceLoader;, +import com.bumptech.glide.loader.model.StringLoader;, +import com.bumptech.glide.loader.model.UriLoader;, +import com.bumptech.glide.loader.stream.StreamLoader;, +import com.bumptech.glide.loader.transformation.CenterCrop;, +import com.bumptech.glide.loader.transformation.FitCenter;, +import com.bumptech.glide.loader.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.transformation.None;, +import com.bumptech.glide.loader.transformation.TransformationLoader;, +import com.bumptech.glide.presenter.target.Target;, +, +import java.util.Map;, +import java.util.WeakHashMap;, + * A singleton to present a simple static interface for Glide {@link Glide.Request} and to create and manage an, + private final Map<Target, Metadata> metadataTracker = new WeakHashMap<Target, Metadata>();, + * public void onException(Exception e, T model, Target target) {, + loaderFactory.register(File.class, new FileLoader.Factory());, + loaderFactory.register(Integer.class, new
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java, +import com.bumptech.glide.test.BitmapSubject;, +import com.bumptech.glide.test.GlideApp;, +, + @Test, + public void load_withBitmapDrawable_andDoNothingTransformation_doesNotRecycleBitmap(), + throws ExecutionException, InterruptedException {, + Bitmap bitmap = Bitmap.createBitmap(100, 200, Config.ARGB_8888);, + BitmapDrawable drawable = new BitmapDrawable(context.getResources(), bitmap);, +, + Drawable result = GlideApp.with(context), + .load(drawable), + .fitCenter(), + .override(bitmap.getWidth(), bitmap.getHeight()), + .submit(), + .get();, +, + BitmapSubject.assertThat(result).isNotRecycled();, + }, +, + @Test, + public void load_withBitmapDrawable_andFunctionalTransformation_doesNotRecycleBitmap(), + throws ExecutionException, InterruptedException {, + Bitmap bitmap = Bitmap.createBitmap(100, 200, Config.ARGB_8888);, + BitmapDrawable drawable = new BitmapDrawable(context.getResources(), bitmap);, +, + Drawable result = GlideApp.with(context), + .load(drawable), + .fitCenter(), + .override(bitmap.getWidth() / 2, bitmap.getHeight() / 2), + .submit(),
[+++ b/library/src/androidTest/java/com/bumptech/glide/manager/Issue117Activity.java, +package com.bumptech.glide.manager;, +, +import android.content.Context;, +import android.os.Bundle;, +import android.support.v4.app.Fragment;, +import android.support.v4.app.FragmentActivity;, +import android.support.v4.app.FragmentManager;, +import android.support.v4.app.FragmentPagerAdapter;, +import android.support.v4.view.ViewPager;, +import android.view.LayoutInflater;, +import android.view.View;, +import android.view.ViewGroup;, +import android.widget.ImageView;, +import com.bumptech.glide.Glide;, +, +/**, + * A test activity to reproduce Issue #117: https://github.com/bumptech/glide/issues/117., + */, +public class Issue117Activity extends FragmentActivity {, + @Override, + protected void onCreate(Bundle savedInstanceState) {, + super.onCreate(savedInstanceState);, + ViewPager viewPager = new ViewPager(this);, + int id = View.generateViewId();, + viewPager.setId(id);, + setContentView(viewPager,, + new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));, + viewPager.setAdapter(new Issue117Adapter(getSupportFragmentManager()));, + }, +, + private static class Issue117Adapter extends FragmentPagerAdapter {, +, + public Issue117Adapter(FragmentManager fm) {, +
[+++ b/checkstyle.xml, + <!-- Prevent importing Mockito matchers directly -->, + <module name="IllegalImport">, + <property name="illegalPkgs" value="org.mockito.internal" />, + <message key="import.illegal" value="Import from illegal package - {0}. Use org.mockito.Matchers to instantiate argument matchers; or org.hamcrest.Matchers for assertThat." />, + </module>, +++ b/checkstyle.xml, + <!-- Prevent importing Mockito matchers directly -->, + <module name="IllegalImport">, + <property name="illegalPkgs" value="org.mockito.internal" />, + <message key="import.illegal" value="Import from illegal package - {0}. Use org.mockito.Matchers to instantiate argument matchers; or org.hamcrest.Matchers for assertThat." />, + </module>, +++ b/library/build.gradle, + androidTestCompile 'org.hamcrest:hamcrest-library:1.3', +++ b/checkstyle.xml, + <!-- Prevent importing Mockito matchers directly -->, + <module name="IllegalImport">, +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, + this.provider = new GifBitmapProvider(bitmapPool, byteArrayPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, + this.provider = new GifBitmapProvider(bitmapPool, byteArrayPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, +import android.support.annotation.Nullable;, +import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;, + @Nullable private final ByteArrayPool byteArrayPool;, + /**, + * Constructs an instance without a shared byte array pool. Byte arrays will be always constructed, + * when requested., + */, + this(bitmapPool, null /*byteArrayPool*/);, + }, +, + /**, + * Constructs an instance with a shared byte array pool. Byte arrays will be reused where, + * possible., + */, + public GifBitmapProvider(BitmapPool bitmapPool, @Nullable ByteArrayPool byteArrayPool) {, + this.byteArrayPool = byteArrayPool;, +, + @Override,
[+++ b/annotation/compiler/build.gradle, + compile 'com.squareup:javapoet:1.9.0', +++ b/annotation/compiler/build.gradle, + compile 'com.squareup:javapoet:1.9.0', +++ b/checkstyle.xml, + <!-- Allow common trailing comments used to describe suppressions -->, + <module name="TrailingComment">, + <property name="legalComment" value="Public API" />, + </module>, +++ b/annotation/compiler/build.gradle, + compile 'com.squareup:javapoet:1.9.0', +++ b/checkstyle.xml, + <!-- Allow common trailing comments used to describe suppressions -->, + <module name="TrailingComment">, + <property name="legalComment" value="Public API" />, + </module>, +++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, + @Nullable, + @Nullable, + @Nullable, + @Nullable, + @Nullable, + @Nullable, + @Nullable, + @Nullable, + @NonNull, + @NonNull, + @Nullable, + @Nullable, + @NonNull, + @Nullable, + @NonNull, + @NonNull, + @NonNull,
[+++ b/library/src/main/java/com/bumptech/glide/load/DataSource.java, +++ b/library/src/main/java/com/bumptech/glide/load/DataSource.java, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + animationFactory.build(dataSource, isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/load/DataSource.java, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + animationFactory.build(dataSource, isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, +import com.bumptech.glide.load.DataSource;, +, + public Transition<Drawable> build(DataSource dataSource, boolean isFirstResource) {, + if (dataSource == DataSource.MEMORY_CACHE) {, + return getFirstResourceTransition(dataSource);, + return getSecondResourceTransition(dataSource);, + private Transition<Drawable> getFirstResourceTransition(DataSource dataSource) {, + viewAnimationFactory.build(dataSource, true /*isFirstResource*/);, + private Transition<Drawable> getSecondResourceTransition(DataSource dataSource) {, + viewAnimationFactory.build(dataSource, false /*isFirstResource*/);, +++ b/library/src/main/java/com/bumptech/glide/load/DataSource.java, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + animationFactory.build(dataSource, isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, +import com.bumptech.glide.load.DataSource;, +, + public Transition<Drawable> build(DataSource dataSource, boolean isFirstResource) {, + if (dataSource == DataSource.MEMORY_CACHE) {, + return getFirstResourceTransition(dataSource);, + return getSecondResourceTransition(dataSource);, + private Transition<Drawable> getFirstResourceTransition(DataSource dataSource) {,
[+++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, + // before they start running or while they are paused. See #346., + if (request == null) {, + return false;, + }, + boolean isOwnedByUs = requests.remove(request);, + // Avoid short circuiting., + isOwnedByUs = pendingRequests.remove(request) || isOwnedByUs;]
[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + ModelLoader<Float, InputStream> mockLoader = mockStreamModelLoader(Float.class);, + ModelLoader<T, InputStream> modelLoader = mockStreamModelLoader(modelClass);, + private <T> ModelLoader<T, InputStream> mockStreamModelLoader(final Class<T> modelClass) {, + ModelLoader<T, InputStream> modelLoader = mock(ModelLoader.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + ModelLoader<Float, InputStream> mockLoader = mockStreamModelLoader(Float.class);, + ModelLoader<T, InputStream> modelLoader = mockStreamModelLoader(modelClass);, + private <T> ModelLoader<T, InputStream> mockStreamModelLoader(final Class<T> modelClass) {, + ModelLoader<T, InputStream> modelLoader = mock(ModelLoader.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/ResourceLoaderTest.java, +package com.bumptech.glide.load.model;, +, +import android.net.Uri;, +import com.bumptech.glide.load.data.DataFetcher;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.when;,
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java, + public void testDoesNotCloseNullData() throws IOException {, +, + @Override, + protected void close(Closeable data) throws IOException {, + data.close();, + }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java, + public void testDoesNotCloseNullData() throws IOException {, +, + @Override, + protected void close(Closeable data) throws IOException {, + data.close();, + }, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +import java.io.IOException;, +, + @Override, + protected void close(ParcelFileDescriptor data) throws IOException {, + data.close();, + }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java, + public void testDoesNotCloseNullData() throws IOException {, +, + @Override, + protected void close(Closeable data) throws IOException {, + data.close();, + }, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +import java.io.IOException;, +, + @Override, +
[+++ b/.gitignore, +library/bin/*, +library/gen/*, +library/local.properties, +*.DS_Store, +*.swp, +++ b/.gitignore, +library/bin/*, +library/gen/*, +library/local.properties, +*.DS_Store, +*.swp, +++ /dev/null, +++ b/.gitignore, +library/bin/*, +library/gen/*, +library/local.properties, +*.DS_Store, +*.swp, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +library/bin/*, +library/gen/*, +library/local.properties, +*.DS_Store, +*.swp, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +library/bin/*, +library/gen/*, +library/local.properties, +*.DS_Store, +*.swp, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + package="com.bumptech.photos", + android:versionCode="1", + android:versionName="1.0">, + <application android:label="@string/app_name">, + <activity android:name="ACTIVITY_ENTRY_NAME", + android:label="@string/app_name">, + <intent-filter>, + <action android:name="android.intent.action.MAIN"/>, + <category android:name="android.intent.category.LAUNCHER"/>, + </intent-filter>, + </activity>, + </application>, +</manifest>, +++ b/.gitignore, +library/bin/*, +library/gen/*, +library/local.properties, +*.DS_Store, +*.swp, +++ /dev/null, +++
[+++ b/.travis.yml]
[+++ b/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java, + * See page 11 of http://giflib.sourceforge.net/gif89.txt for the position of the frame, + *, + * Column number, in pixels, of the left edge of the image, with respect to the left edge of the Logical Screen., + * Row number, in pixels, of the top edge of the image with respect to the top edge of the Logical Screen., + if (started) {, + }, + if (fixedWidth < 1) {, + }, + if (fixedHeight < 1) {, + }]
[+++ b/library/library.iml, + <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />, +++ b/library/library.iml, + <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, + public void testDefaultBitmapPoolSize() {, +// assertThat(bitmapPoolSize).isIn(Range.open());, + float totalScreenBytes = harness.getScreenSize() * (harness.bitmapPoolScreens + harness.memoryCacheScreens);, + float totalScreenMb = totalScreenBytes / (1024 * 1024);, + float memoryClassMb = totalScreenMb / harness.sizeMultiplier;, + return (int) Math.ceil(memoryClassMb);, + return new MemorySizeCalculator(Robolectric.application, activityManager, screenDimensions);, +++ b/library/library.iml, + <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, + public void testDefaultBitmapPoolSize() {, +// assertThat(bitmapPoolSize).isIn(Range.open());, + float totalScreenBytes = harness.getScreenSize() * (harness.bitmapPoolScreens + harness.memoryCacheScreens);, + float totalScreenMb = totalScreenBytes / (1024 * 1024);, + float memoryClassMb = totalScreenMb / harness.sizeMultiplier;,
[+++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, + final AtomicInteger calledCount = new AtomicInteger();, + public Object getPreloadItem(int position) {, + final int count = calledCount.getAndIncrement();, + assertEquals(11 + count, position);, + return super.getPreloadItem(position);, + ListPreloader<Object> preloader = new ListPreloader<Object>(preloaderAdapter, preloaderAdapter, 10);, + assertEquals(10, calledCount.get());, + public int[] getPreloadSize(Object item, int pos) {, + public Object getPreloadItem(int position) {, + return objects.get(position - 10);, + assertEquals(objects.get(pos - 10), item);, + ListPreloader<Object> preloader = new ListPreloader<Object>(preloaderAdapter, preloaderAdapter,, + toPreload);, + preloader.onScroll(null, 1, 10, 20);, + final AtomicInteger calledCount = new AtomicInteger();, + public Object getPreloadItem(int position) {, + if (position >= 40) {, + final
[+++ b/library/build.gradle, +++ b/library/build.gradle, +++ /dev/null, +++ b/library/build.gradle, +++ /dev/null, +++ b/scripts/upload.gradle, + : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/', + : 'https://oss.sonatype.org/content/repositories/snapshots/', + return hasProperty('USERNAME') ? USERNAME : (hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ''), + return hasProperty('PASSWORD') ? PASSWORD : (hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ''), + name = 'Simplified BSD License', + url = 'http://www.opensource.org/licenses/bsd-license', + distribution = 'repo', + name = 'The Apache Software License, Version 2.0', + url = 'http://www.apache.org/licenses/LICENSE-2.0.txt', + distribution = 'repo', + required { isReleaseBuild() && gradle.taskGraph.hasTask('uploadArchives') }, + def isAndroidProject = project.plugins.hasPlugin('com.android.application') || project.plugins.hasPlugin('com.android.library'), +, + if (isAndroidProject) {, + def releaseVariants = project.android.libraryVariants.findAll {, + it.buildType.name.equalsIgnoreCase('release'), +
[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, + for (Class<?> registeredResourceClass : registeredResourceClasses) {, + if (!result.contains(registeredResourceClass)) {, + result.add(registeredResourceClass);, + }, + }, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, + for (Class<?> registeredResourceClass : registeredResourceClasses) {, + if (!result.contains(registeredResourceClass)) {, + result.add(registeredResourceClass);, + }, + }, +++ b/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java, + } else {, + key.set(modelClass, resourceClass);]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +import com.bumptech.glide.tests.Util;, +import java.util.Collections;, + Transformation<Object> transformation = mock(Transformation.class);, +, + public Harness() {, + doAnswer(new Util.WriteDigest("transformation")).when(transformation), + .updateDiskCacheKey(any(MessageDigest.class));, + }, + return new EngineKey(id, signature, width, height,, + Collections.<Class<?>, Transformation<?>>singletonMap(Object.class, transformation),, + resourceClass, transcodeClass);, + public void testDiffersIfTransformationsDiffer() throws NoSuchAlgorithmException {, + EngineKey first = harness.build();, + Transformation<Object> other = mock(Transformation.class);, + doAnswer(new Util.WriteDigest("other")).when(other), + .updateDiskCacheKey(any(MessageDigest.class));, + harness.transformation = other;, + EngineKey second = harness.build();, + KeyAssertions.assertDifferent(first, second, false /*checkDiskCacheKey*/);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +import com.bumptech.glide.tests.Util;, +import java.util.Collections;, + Transformation<Object> transformation = mock(Transformation.class);, +, + public Harness() {, + doAnswer(new Util.WriteDigest("transformation")).when(transformation), + .updateDiskCacheKey(any(MessageDigest.class));, + }, + return new
[+++ b/build.gradle, + maven {, + url "https://oss.sonatype.org/content/repositories/snapshots", + }, + maven {, + url "https://oss.sonatype.org/content/repositories/snapshots", + }, +++ b/build.gradle, + maven {, + url "https://oss.sonatype.org/content/repositories/snapshots", + }, + maven {, + url "https://oss.sonatype.org/content/repositories/snapshots", + }, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.0-SNAPSHOT, +++ b/build.gradle, + maven {, + url "https://oss.sonatype.org/content/repositories/snapshots", + }, + maven {, + url "https://oss.sonatype.org/content/repositories/snapshots", + }, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.0-SNAPSHOT, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import org.robolectric.RuntimeEnvironment;, +import org.robolectric.shadows.ShadowLooper;, + requestQueue = Volley.newRequestQueue(RuntimeEnvironment.application);, + ShadowLooper.runUiThreadTasks();, +++ b/build.gradle, + maven {, + url "https://oss.sonatype.org/content/repositories/snapshots", + }, + maven {, + url "https://oss.sonatype.org/content/repositories/snapshots", + }, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.0-SNAPSHOT, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import org.robolectric.RuntimeEnvironment;, +import org.robolectric.shadows.ShadowLooper;,
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +import com.squareup.javapoet.MethodSpec.Builder;, + .addParameters(ProcessorUtil.getParameters(methodToOverride));, + addReturnAnnotations(builder, methodToOverride);, + private Builder addReturnAnnotations(Builder builder, ExecutableElement methodToOverride) {, + String visibleForTestingTypeQualifiedName =, + processingEnv, + .getElementUtils(), + .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME), + .toString();, +, + for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, + builder.addAnnotation(AnnotationSpec.get(mirror));, +, + // Suppress a lint warning if we're overriding a VisibleForTesting method., + // See #1977., + String annotationQualifiedName = mirror.getAnnotationType().toString();, + if (annotationQualifiedName.equals(visibleForTestingTypeQualifiedName)) {, + builder.addAnnotation(, + AnnotationSpec.builder(, + ClassName.get(SUPPRESS_LINT_PACKAGE_NAME, SUPPRESS_LINT_CLASS_NAME)), + .addMember("value", "$S", "VisibleForTests"), + .build());, + }, + }, +, + return builder;, + }, +, +, + Builder builder = MethodSpec.methodBuilder(methodToOverride.getSimpleName().toString()), + .addParameters(ProcessorUtil.getParameters(methodToOverride)), + parameter.getSimpleName());,
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +import java.util.Map;, + public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,, + Map<String, Object> options) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +import java.util.Map;, + public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,, + Map<String, Object> options) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java, +import java.util.Map;, + public LoadData<InputStream> buildLoadData(GlideUrl url, int width, int height,, + Map<String, Object> options) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +import java.util.Map;, + public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,, + Map<String, Object> options) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java, +import java.util.Map;, + public LoadData<InputStream> buildLoadData(GlideUrl url, int width, int height,, + Map<String, Object> options) {, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static org.mockito.Matchers.anyMapOf;, + when(failLoader.buildLoadData(any(failModel), anyInt(), anyInt(),,
[+++ b/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java, +import android.util.Log;, + private static final String TAG = "AnimatedGifEncoder";, +, + // The minimum % of an images pixels that must be transparent for us to set a transparent index automatically., + private static final double MIN_TRANSPARENT_PERCENTAGE = 4d;, + int totalTransparentPixels = 0;, + totalTransparentPixels++;, +, + double transparentPercentage = 100 * totalTransparentPixels / (double) pixelsInt.length;, + // Assume images with greater where more than n% of the pixels are transparent actually have transparency., + // See issue #214., + hasTransparentPixels = transparentPercentage > MIN_TRANSPARENT_PERCENTAGE;, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "got pixels for
[+++ b/build.gradle, +buildscript {, + repositories {, + mavenCentral(), + }, + dependencies {, + classpath 'com.android.tools.build:gradle:0.11.+', + }, +}, +++ b/build.gradle, +buildscript {, + repositories {, + mavenCentral(), + }, + dependencies {, + classpath 'com.android.tools.build:gradle:0.11.+', + }, +}, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +buildscript {, + repositories {, + mavenCentral(), + }, + dependencies {, + classpath 'com.android.tools.build:gradle:0.11.+', + }, +}, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sun Jun 22 01:25:24 PDT 2014, +distributionBase=GRADLE_USER_HOME, +distributionPath=wrapper/dists, +zipStoreBase=GRADLE_USER_HOME, +zipStorePath=wrapper/dists, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.12-all.zip, +++ b/build.gradle, +buildscript {, + repositories {, + mavenCentral(), + }, + dependencies {, + classpath 'com.android.tools.build:gradle:0.11.+', + }, +}, +++ b/gradle/wrapper/gradle-wrapper.jar,
[+++ b/README.md, + <version>3.3.1</version>, + <version>1.0.1</version>, + <version>1.0.1</version>, +++ b/README.md, + <version>3.3.1</version>, + <version>1.0.1</version>, + <version>1.0.1</version>, +++ b/gradle.properties, +VERSION_NAME=3.3.1, +VERSION_MINOR=3, +VERSION_PATCH=1, +++ b/README.md, + <version>3.3.1</version>, + <version>1.0.1</version>, + <version>1.0.1</version>, +++ b/gradle.properties, +VERSION_NAME=3.3.1, +VERSION_MINOR=3, +VERSION_PATCH=1, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.0.1, +VERSION_MINOR=0, +VERSION_PATCH=1, +++ b/README.md, + <version>3.3.1</version>, + <version>1.0.1</version>, + <version>1.0.1</version>, +++ b/gradle.properties, +VERSION_NAME=3.3.1, +VERSION_MINOR=3, +VERSION_PATCH=1, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.0.1, +VERSION_MINOR=0, +VERSION_PATCH=1, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.0.1, +VERSION_MINOR=0, +VERSION_PATCH=1]
[+++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + * impractical to return that size from {@link Target#getSize(com.bumptech.glide.request.target.SizeReadyCallback)}., +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + * impractical to return that size from {@link Target#getSize(com.bumptech.glide.request.target.SizeReadyCallback)}., +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + public void onLoadStarted(Drawable placeholder) {, +, + }, +, + @Override, + public void onLoadFailed(Exception e, Drawable errorDrawable) {, +, + }, +, + @Override, + public void onLoadCleared(Drawable placeholder) {, +, + }, +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + * impractical to return that size from {@link Target#getSize(com.bumptech.glide.request.target.SizeReadyCallback)}., +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + public void onLoadStarted(Drawable placeholder) {, +, + }, +, + @Override, + public void onLoadFailed(Exception
[+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +import javax.lang.model.element.AnnotationMirror;, + private static final ClassName CHECK_RESULT_CLASS_NAME =, + ClassName.get("android.support.annotation", "CheckResult");, + .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), + MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride), + .build());, +, + for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, + builder.addAnnotation(AnnotationSpec.get(mirror));, + }, + return builder.build();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +import javax.lang.model.element.AnnotationMirror;, + private static final ClassName CHECK_RESULT_CLASS_NAME =, + ClassName.get("android.support.annotation", "CheckResult");, + .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), + MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride), + .build());, +, + for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, + builder.addAnnotation(AnnotationSpec.get(mirror));, + }, + return builder.build();, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +import android.support.annotation.CheckResult;, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult]
[+++ b/library/src/androidTest/java/com/bumptech/glide/request/target/SimpleTargetTest.java, +import static org.mockito.Mockito.mock;, +, + public void testThrowsOnGetSizeIfGivenWidthIsLessThanZero() {, + getTarget(-1, 1).getSize(mock(SizeReadyCallback.class));, + }, + @Test(expected = IllegalArgumentException.class), + public void testThrowsOnGetSizeIfGivenWidthIsEqualToZero() {, + getTarget(0, 1).getSize(mock(SizeReadyCallback.class));, + }, +, + @Test(expected = IllegalArgumentException.class), + public void testThrowsOnGetSizeIfGivenHeightIsLessThanZero() {, + getTarget(1, -1).getSize(mock(SizeReadyCallback.class));, + }, +, + @Test(expected = IllegalArgumentException.class), + public void testThrowsOnGetSizeIfGivenHeightIsEqualToZero() {, + getTarget(1, 0).getSize(mock(SizeReadyCallback.class));, + }, +, + @Test, + public void testCanBeConstructedWithoutDimensions() {, + getTarget();, + }, +, + @Test(expected = IllegalArgumentException.class), + public void testThrowsOnGetSizeIfConstructedWithoutDimensions() {, + getTarget().getSize(mock(SizeReadyCallback.class));, + }, +, + private SimpleTarget<Object> getTarget() {, + return new SimpleTarget<Object>() {, + public
[+++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, + public void update(String key, Boolean value, MessageDigest messageDigest) {, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, + public void update(String key, Boolean value, MessageDigest messageDigest) {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/OptionsTest.java, +package com.bumptech.glide.load;, +, +import com.google.common.testing.EqualsTester;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +public class OptionsTest {, +, + @Test, + public void testEquals() {, + Option<Object> firstOption = Option.memory("firstKey");, + Object firstValue = new Object();, + Option<Object> secondOption = Option.memory("secondKey");, + Object secondValue = new Object();, + new EqualsTester(), + .addEqualityGroup(new Options(), new Options()), + .addEqualityGroup(, + new Options().set(firstOption, firstValue),, + new Options().set(firstOption,
[+++ b/.travis.yml, + - android-16, + - sys-img-armeabi-v7a-android-16, + - COMPONENT=instrumentation ANDROID_TARGET=16, + - COMPONENT=instrumentation ANDROID_TARGET=22, +++ b/.travis.yml, + - android-16, + - sys-img-armeabi-v7a-android-16, + - COMPONENT=instrumentation ANDROID_TARGET=16, + - COMPONENT=instrumentation ANDROID_TARGET=22, +++ b/scripts/travis_create_emulator.sh, +echo no | android create avd --force -n test -t android-$ANDROID_TARGET --abi armeabi-v7a]
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, +, + if (currentFrame.dispose == DISPOSAL_BACKGROUND && framePointer == 0) {, + // TODO: We should check and see if all individual pixels are replaced. If they are, the, + // first frame isn't actually transparent. For now, it's simpler and safer to assume, + // drawing a transparent background means the GIF contains transparency., + isFirstFrameTransparent = true;, + }, + (isFirstFrameTransparent != null && isFirstFrameTransparent), + || (isFirstFrameTransparent == null && isFirstFrame && transparentColorIndex != -1);]
[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java, +import android.support.v4.app.Fragment;, + @Deprecated, + public static GlideRequests with(@NonNull android.app.Fragment arg0) {, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java, +import android.support.v4.app.Fragment;, + @Deprecated, + public static GlideRequests with(@NonNull android.app.Fragment arg0) {, +++ b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerViewPreloader.java, +import android.support.v4.app.Fragment;, + * Helper constructor that accepts an {@link android.app.Fragment}., + @Deprecated, + public RecyclerViewPreloader(@NonNull android.app.Fragment fragment,, + * Helper constructor that accepts an {@link Fragment}., + public RecyclerViewPreloader(@NonNull Fragment fragment,, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java, +import android.support.v4.app.Fragment;, + @Deprecated, + public static GlideRequests with(@NonNull android.app.Fragment arg0) {, +++ b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerViewPreloader.java, +import android.support.v4.app.Fragment;, + * Helper constructor that accepts an {@link android.app.Fragment}., + @Deprecated, + public RecyclerViewPreloader(@NonNull android.app.Fragment fragment,, + * Helper
[+++ b/Makefile, +++ b/Makefile, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/Makefile, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/custom_rules.xml, +++ b/Makefile, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/custom_rules.xml, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.os.ParcelFileDescriptor;, +import android.view.View;, +import com.android.volley.RequestQueue;, +import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.ResourceBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorFileLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorModelLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorStringLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorUriLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamByteArrayLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamFileLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamModelLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamStringLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamUriLoader;, +import com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.bitmap.transformation.CenterCrop;, +import com.bumptech.glide.loader.bitmap.transformation.FitCenter;, +import com.bumptech.glide.loader.bitmap.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.bitmap.transformation.None;, +import com.bumptech.glide.loader.bitmap.transformation.TransformationLoader;, +import com.bumptech.glide.presenter.target.ImageViewTarget;, +import com.bumptech.glide.presenter.target.ViewTarget;, +import com.bumptech.glide.resize.load.BitmapDecoder;, +import com.bumptech.glide.resize.load.VideoBitmapDecoder;, +import java.io.InputStream;, +import java.util.UUID;,
[+++ b/instrumentation/build.gradle, + annotationProcessor project(":annotation:compiler"), + compile project(":library"), +, +++ b/instrumentation/build.gradle, + annotationProcessor project(":annotation:compiler"), + compile project(":library"), +, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CenterCropRegressionTest.java, +package com.bumptech.glide;, +, +import static com.google.common.truth.Truth.assertThat;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.test.BitmapRegressionTester;, +import com.bumptech.glide.test.CanonicalBitmap;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.RegressionTest;, +import com.bumptech.glide.test.SplitByCpu;, +import com.bumptech.glide.test.SplitBySdk;, +import com.bumptech.glide.test.TearDownGlide;, +import java.util.concurrent.ExecutionException;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TestName;, +import org.junit.runner.RunWith;, +, +@RunWith(AndroidJUnit4.class), +@RegressionTest, +@SplitByCpu, +@SplitBySdk({24, 21, 16}), +public class CenterCropRegressionTest {, + @Rule public TestName testName = new TestName();, + @Rule public TearDownGlide tearDownGlide = new TearDownGlide();, + private BitmapRegressionTester bitmapRegressionTester;, + private Context context;, + private CanonicalBitmap
[+++ b/build.gradle, + toolVersion = '6.12.1', + configFile = rootProject.file('checkstyle.xml'), + gradleVersion = '2.9', + distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip", +++ b/build.gradle, + toolVersion = '6.12.1', + configFile = rootProject.file('checkstyle.xml'), + gradleVersion = '2.9', + distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip", +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + toolVersion = '6.12.1', + configFile = rootProject.file('checkstyle.xml'), + gradleVersion = '2.9', + distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip", +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Nov 25 12:48:39 CET 2015, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.9-all.zip, +++ b/build.gradle, + toolVersion = '6.12.1', + configFile = rootProject.file('checkstyle.xml'), + gradleVersion = '2.9', + distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip", +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Nov 25 12:48:39 CET 2015, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.9-all.zip, +++ b/gradlew, +cd
[+++ b/glide/build.gradle, + } as Javadoc, + } as Task, + } as Task, + jar.dependsOn(project.tasks.build), +++ b/glide/build.gradle, + } as Javadoc, + } as Task, + } as Task, + jar.dependsOn(project.tasks.build), +++ b/gradle.properties, +# TODO: increase this to 2.0.+ when we compile with Java 7., +++ b/glide/build.gradle, + } as Javadoc, + } as Task, + } as Task, + jar.dependsOn(project.tasks.build), +++ b/gradle.properties, +# TODO: increase this to 2.0.+ when we compile with Java 7., +++ b/integration/build.gradle, +import com.android.build.gradle.api.BaseVariant, + android.libraryVariants.all { BaseVariant variant ->, +++ b/glide/build.gradle, + } as Javadoc, + } as Task, + } as
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java, +import static org.mockito.Matchers.anyLong;, +import static org.mockito.Mockito.never;, +, + @Test(expected = IllegalArgumentException.class), + public void testThrowsExceptionIfInitializedWithNegativeFrame() {, + new VideoBitmapDecoder(-1);, + }, +, + @Test, + public void testSpecifiesThumbnailFrameIfInitializedWithFrameNumber() throws IOException {, + int frame = 5;, + decoder = new VideoBitmapDecoder(new VideoBitmapDecoder.MediaMetadataRetrieverFactory() {, + @Override, + public MediaMetadataRetriever build() {, + return factory.build();, + }, + }, frame);, +, + decoder.decode(resource, bitmapPool, 100, 100, decodeFormat);, +, + verify(retriever).getFrameAtTime(5);, + verify(retriever, never()).getFrameAtTime();, + }, +, + @Test, + public void testDoesNotSpecifyThumbnailFrameIfInitializedWithoutFrameNumber(), + throws IOException {, + decoder = new VideoBitmapDecoder(new VideoBitmapDecoder.MediaMetadataRetrieverFactory() {, + @Override, + public MediaMetadataRetriever build()
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java, + * and height. To avoid upscaling, use {@link #AT_LEAST} or {@link #AT_MOST}., + public static final DownsampleStrategy CENTER_INSIDE = new CenterInside();, + * and height. To avoid upscaling, use {@link #AT_LEAST} or {@link #AT_MOST}., + private static class CenterInside extends DownsampleStrategy {, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java, + * and height. To avoid upscaling, use {@link #AT_LEAST} or {@link #AT_MOST}., + public static final DownsampleStrategy CENTER_INSIDE = new CenterInside();, + * and height. To avoid upscaling, use {@link #AT_LEAST} or {@link #AT_MOST}., + private static
[+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java, +import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;, + .isEqualTo(asUnixChars(appResource("GlideOptions.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideRequest.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideRequests.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));, + .isEqualTo(, + asUnixChars(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));, + .isEqualTo(, + asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));, +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java, +import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;, + .isEqualTo(asUnixChars(appResource("GlideOptions.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideRequest.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideRequests.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));, + .isEqualTo(, + asUnixChars(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));, + .isEqualTo(, + asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));, +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithMultipleExcludesTest.java, +import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;, + .isEqualTo(asUnixChars(appResource("GlideOptions.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideRequest.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideRequests.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));, + .isEqualTo(, + asUnixChars(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));, + .isEqualTo(, + asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));, +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java, +import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;, + .isEqualTo(asUnixChars(appResource("GlideOptions.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideRequest.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideRequests.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));, + .isEqualTo(, + asUnixChars(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));, + .isEqualTo(, + asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));, +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithMultipleExcludesTest.java, +import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;, + .isEqualTo(asUnixChars(appResource("GlideOptions.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideRequest.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideRequests.java").getCharContent(true)));, + .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));, + .isEqualTo(,
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, + // Allow the request to be run and GCed without being cleared., + concurrency.loadOnOtherThread(new Runnable() {, + @Override, + public void run() {, + }, + });, + // Wait for the weak reference to be cleared and the request to be removed from active, + // resources., + for (int j = 0; j < 100; j++) {, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, + // Allow the request to be run and GCed without being cleared., + concurrency.loadOnOtherThread(new Runnable() {, + @Override, + public void run() {, + }, + });, + // Wait for the weak reference
[+++ b/gradle.properties, +VERSION_NAME=4.0.0-RC1]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + public void testGetOpacityReturnsTransparent() {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + public void testGetOpacityReturnsTransparent() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, + return bitmapPool.getDirty(width, height, config);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + public void testGetOpacityReturnsTransparent() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, + return bitmapPool.getDirty(width, height, config);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, + // We can't tell, so default to transparent to be safe., + return PixelFormat.TRANSPARENT;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + public void testGetOpacityReturnsTransparent() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, + return bitmapPool.getDirty(width, height, config);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, + // We can't tell, so default to transparent to be safe., + return PixelFormat.TRANSPARENT;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, +import com.bumptech.glide.util.Util;, + this.totalFrameSize = Util.getBitmapByteSize(frameWidth, frameHeight, Bitmap.Config.ARGB_8888);, + .diskCacheStrategy(DiskCacheStrategy.NONE), +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + public
[+++ b/gradle.properties, +VERSION_NAME=4.6.0-SNAPSHOT, +SUPPORT_V4_VERSION=21.0.3, +SUPPORT_V7_VERSION=21.0.3, +VOLLEY_VERSION=1.0.10, +ROBOLECTRIC_GRADLE_VERSION=0.14.1, +MOCKWEBSERVER_VERSION=2.2.0, +FINDBUGS_VERSION=3.0.0, +JACOCO_VERSION=0.7.1.201405082137, +, +COMPILE_SDK_VERSION=21, +BUILD_TOOLS_VERSION=21.1.2, +TARGET_SDK_VERSION=21, +++ b/gradle.properties, +VERSION_NAME=4.6.0-SNAPSHOT, +SUPPORT_V4_VERSION=21.0.3, +SUPPORT_V7_VERSION=21.0.3, +VOLLEY_VERSION=1.0.10, +ROBOLECTRIC_GRADLE_VERSION=0.14.1, +MOCKWEBSERVER_VERSION=2.2.0, +FINDBUGS_VERSION=3.0.0, +JACOCO_VERSION=0.7.1.201405082137, +, +COMPILE_SDK_VERSION=21, +BUILD_TOOLS_VERSION=21.1.2, +TARGET_SDK_VERSION=21, +++ b/integration/okhttp/build.gradle, +, + compileOptions {, + sourceCompatibility JavaVersion.VERSION_1_7, + targetCompatibility JavaVersion.VERSION_1_7, + }, +++ b/gradle.properties, +VERSION_NAME=4.6.0-SNAPSHOT, +SUPPORT_V4_VERSION=21.0.3, +SUPPORT_V7_VERSION=21.0.3, +VOLLEY_VERSION=1.0.10, +ROBOLECTRIC_GRADLE_VERSION=0.14.1, +MOCKWEBSERVER_VERSION=2.2.0, +FINDBUGS_VERSION=3.0.0, +JACOCO_VERSION=0.7.1.201405082137, +, +COMPILE_SDK_VERSION=21, +BUILD_TOOLS_VERSION=21.1.2, +TARGET_SDK_VERSION=21, +++ b/integration/okhttp/build.gradle, +, + compileOptions {, + sourceCompatibility JavaVersion.VERSION_1_7, + targetCompatibility JavaVersion.VERSION_1_7, + }, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />, +++ b/gradle.properties, +VERSION_NAME=4.6.0-SNAPSHOT, +SUPPORT_V4_VERSION=21.0.3, +SUPPORT_V7_VERSION=21.0.3, +VOLLEY_VERSION=1.0.10, +ROBOLECTRIC_GRADLE_VERSION=0.14.1, +MOCKWEBSERVER_VERSION=2.2.0, +FINDBUGS_VERSION=3.0.0, +JACOCO_VERSION=0.7.1.201405082137, +, +COMPILE_SDK_VERSION=21, +BUILD_TOOLS_VERSION=21.1.2, +TARGET_SDK_VERSION=21, +++ b/integration/okhttp/build.gradle, +,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + // Compilation with Gradle requires the type to be specified for UnitModelLoader here., + .append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<GifDecoder>()), + // Compilation with Gradle requires the type to be specified for UnitModelLoader here., + .append(File.class, File.class, new UnitModelLoader.Factory<File>()), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + // Compilation with Gradle requires the type to be specified for UnitModelLoader here., + .append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<GifDecoder>()), + // Compilation with Gradle requires the type to be specified for UnitModelLoader here., + .append(File.class, File.class, new UnitModelLoader.Factory<File>()), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, + // Final to avoid a PMD error., + public final Registry setResourceDecoderBucketPriorityList(List<String> buckets) {]
[+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + && (requestListener != null, + ? that.requestListener != null : that.requestListener == null);]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/SimpleResourceTest.java, +package com.bumptech.glide.load.resource;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class SimpleResourceTest {, + private Anything object;, + private SimpleResource resource;, +, + @Before, + public void setUp() {, + object = new Anything();, + resource = new SimpleResource(object);, + }, +, + @Test, + public void testReturnsGivenObject() {, + assertEquals(object, resource.get());, + }, +, + @Test, + public void testReturnsGivenObjectMultipleTimes() {, + assertEquals(object, resource.get());, + assertEquals(object, resource.get());, + assertEquals(object, resource.get());, + }, +, + private static class Anything { }, +}, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/SimpleResourceTest.java, +package com.bumptech.glide.load.resource;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import static
[+++ b/library/src/main/java/com/bumptech/glide/load/ImageHeaderParser.java, + ImageType getType(InputStream is) throws IOException;, + ImageType getType(ByteBuffer byteBuffer) throws IOException;, + int getOrientation(InputStream is, ArrayPool byteArrayPool) throws IOException;, + int getOrientation(ByteBuffer byteBuffer, ArrayPool byteArrayPool) throws IOException;, +++ b/library/src/main/java/com/bumptech/glide/load/ImageHeaderParser.java, + ImageType getType(InputStream is) throws IOException;, + ImageType getType(ByteBuffer byteBuffer) throws IOException;, + int getOrientation(InputStream is, ArrayPool byteArrayPool) throws IOException;, + int getOrientation(ByteBuffer byteBuffer, ArrayPool byteArrayPool) throws IOException;, +++ b/library/src/main/java/com/bumptech/glide/load/ImageHeaderParserUtils.java, +++ b/library/src/main/java/com/bumptech/glide/load/ImageHeaderParser.java, + ImageType getType(InputStream is) throws IOException;, + ImageType getType(ByteBuffer byteBuffer) throws IOException;, + int getOrientation(InputStream is, ArrayPool byteArrayPool) throws IOException;, + int getOrientation(ByteBuffer byteBuffer, ArrayPool byteArrayPool) throws IOException;, +++ b/library/src/main/java/com/bumptech/glide/load/ImageHeaderParserUtils.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + private final
[+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java, +import android.content.Context;, +import android.graphics.Point;, +import android.support.annotation.VisibleForTesting;, +import android.view.Display;, +import android.view.WindowManager;, + this(view, false /*waitForLayout*/);, + }, +, + public ViewTarget(T view, boolean waitForLayout) {, + sizeDeterminer = new SizeDeterminer(view, waitForLayout);, + @VisibleForTesting, + static final class SizeDeterminer {, + @VisibleForTesting, + @Nullable, + static Integer maxDisplayLength;, + private final boolean waitForLayout;, + SizeDeterminer(View view, boolean waitForLayout) {, + this.waitForLayout = waitForLayout;, + }, +, + // Use the maximum to avoid depending on the device's current orientation., + private static int getMaxDisplayLength(Context context) {, + if (maxDisplayLength == null) {, + WindowManager windowManager =, + (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);,
[+++ b/library/custom_rules.xml, + basedir="bin/classes", + excludes="com/bumptech/glide/volley/">, +++ b/library/custom_rules.xml, + basedir="bin/classes", + excludes="com/bumptech/glide/volley/">, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.volley.VolleyUrlLoader;, + protected Glide() {, + loaderFactory.register(File.class, new FileLoader.Factory());, + loaderFactory.register(Integer.class, new ResourceLoader.Factory());, + loaderFactory.register(String.class, new StringLoader.Factory());, + loaderFactory.register(Uri.class, new UriLoader.Factory());, + try {, + Class.forName("com.bumptech.glide.volley.VolleyUrlLoader$Factory");, + loaderFactory.register(URL.class, new VolleyUrlLoader.Factory());, + } catch (ClassNotFoundException e) {, + Log.d("Volley not found, missing url loader");, + loaderFactory.register(URL.class, new ModelLoaderFactory<URL>() {, + ModelLoader<URL> errorUrlLoader = new ModelLoader<URL>() {, + @Override, + public StreamLoader getStreamLoader(URL model, int width, int height) {, + throw new IllegalArgumentException("No ModelLoaderFactory for urls registered with Glide");, + @Override, + public String getId(URL model)
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, + * Requests that we call startNext() again on a Glide owned thread., + */, + void reschedule();, +, + /**, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, + * Requests that we call startNext() again on a Glide owned thread., + */, + void reschedule();, +, + /**, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + public void reschedule() {, + runReason = RunReason.SWITCH_TO_SOURCE_SERVICE;, + callback.reschedule(this);, + }, +, + @Override, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, + * Requests that we call startNext() again on a Glide owned thread., + */, + void reschedule();, +, + /**, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + public void reschedule() {, + runReason = RunReason.SWITCH_TO_SOURCE_SERVICE;, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/com/bumptech/photos/imagemanager/ImageManager.java, +import com.bumptech.photos.imagemanager.cache.LruPhotoCache;, +import com.bumptech.photos.imagemanager.cache.PhotoDiskCache;, +import com.bumptech.photos.imagemanager.cache.SizedBitmapCache;, + private final ImageResizer resizer;, + this.resizer = new ImageResizer(bitmapCache);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/com/bumptech/photos/imagemanager/ImageManager.java, +import com.bumptech.photos.imagemanager.cache.LruPhotoCache;, +import com.bumptech.photos.imagemanager.cache.PhotoDiskCache;, +import com.bumptech.photos.imagemanager.cache.SizedBitmapCache;, + private final ImageResizer resizer;, + this.resizer = new ImageResizer(bitmapCache);, +++ b/src/com/bumptech/photos/imagemanager/cache/LruPhotoCache.java, +/*, + * Copyright (c) 2012. Bump Technologies Inc. All Rights Reserved., + */, +, +package com.bumptech.photos.imagemanager.cache;, +, +import android.app.ActivityManager;, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.support.v4.util.LruCache;, +, +/**, + * Created by IntelliJ IDEA., + * User:
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, + * <p>Replaces any previous calls to this method or {@link #placeholder(int)}., + *, + placeholderId = 0;, + fields &= ~PLACEHOLDER_ID;, +, + * <p>Replaces any previous calls to this method or {@link #placeholder(Drawable)}, + *, + placeholderDrawable = null;, + fields &= ~PLACEHOLDER;, +, + * <p>Replaces any previous calls to this method or {@link #fallback(int)}., + *, + fallbackId = 0;, + fields &= ~FALLBACK_ID;, +, + * <p>Replaces any previous calls to this method or {@link #fallback(Drawable)}., + *, + fallbackDrawable = null;, + fields &= ~FALLBACK;, +, + * <p>Replaces any previous
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + requestOptions = requestOptions.clone().optionalCenterCrop();, + requestOptions = requestOptions.clone().optionalCenterInside();, + requestOptions = requestOptions.clone().optionalFitCenter();, + requestOptions = requestOptions.clone().optionalCenterInside();]
[+++ b/gradle.properties, +VERSION_NAME=3.4.0-SNAPSHOT, +VERSION_MINOR=4, +VERSION_PATCH=0, +VERSION_CODE=7, +++ b/gradle.properties, +VERSION_NAME=3.4.0-SNAPSHOT, +VERSION_MINOR=4, +VERSION_PATCH=0, +VERSION_CODE=7, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.1.0-SNAPSHOT, +VERSION_MINOR=1, +VERSION_PATCH=0, +VERSION_CODE=3, +++ b/gradle.properties, +VERSION_NAME=3.4.0-SNAPSHOT, +VERSION_MINOR=4, +VERSION_PATCH=0, +VERSION_CODE=7, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.1.0-SNAPSHOT, +VERSION_MINOR=1, +VERSION_PATCH=0, +VERSION_CODE=3, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.1.0-SNAPSHOT, +VERSION_MINOR=1, +VERSION_PATCH=0, +VERSION_CODE=3]
[+++ b/.gitmodules, +++ b/.gitmodules, +++ /dev/null]
[+++ b/library/src/main/java/com/bumptech/glide/util/Util.java, + * <p>See #303, #375, #322, #2262., + @SuppressWarnings("UseBulkOperation"), + // toArray creates a new ArrayList internally and does not guarantee that the values it contains, + // are non-null. Collections.addAll in ArrayList uses toArray internally and therefore also, + // doesn't guarantee that entries are non-null. WeakHashMap's iterator does avoid returning null, + // and is therefore safe to use. See #322, #2262., + List<T> result = new ArrayList<>(other.size());, + if (item != null) {, + }]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/MultiTransformationTest.java, +import static org.mockito.Mockito.doAnswer;, +import com.bumptech.glide.tests.KeyAssertions;, +import com.bumptech.glide.tests.Util;, +import org.junit.Before;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, + @Mock Transformation<Object> first;, + @Mock Transformation<Object> second;, + @Mock Resource<Object> initial;, + @Mock Resource<Object> firstTransformed;, + @Mock Resource<Object> secondTransformed;, + @Before, + public void setUp() {, + MockitoAnnotations.initMocks(this);, + MultiTransformation<Object> transformation = new MultiTransformation<>(first, second);, + when(first.transform(any(Resource.class), anyInt(), anyInt())).thenReturn(firstTransformed);, + MultiTransformation<Object> transformation = new MultiTransformation(first);, + MultiTransformation<Object> transformation = new MultiTransformation<>(first, second);, + MultiTransformation<Object> transformation = new MultiTransformation<>(first, second);, + when(first.transform(any(Resource.class), anyInt(), anyInt())).thenReturn(firstTransformed);, + MultiTransformation<Object> transformation = new MultiTransformation<>(first);, + verify(firstTransformed, never()).recycle();, + MultiTransformation<Object> transformation = new MultiTransformation<>(first, second);,
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + responseBody = response.body();, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + responseBody = response.body();, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + responseBody = response.body();]
[+++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +import com.bumptech.glide.request.transition.TransitionFactory;, +import com.bumptech.glide.request.transition.ViewPropertyTransition;, +, + /**, + * Removes any existing animation put on the builder., + *, + * @see GenericTransitionOptions#dontTransition(), + */, +, + /**, + * Returns a typed {@link GenericTransitionOptions} object that uses the given view animation., + *, + * @see GenericTransitionOptions#transition(int), + */, + public static <TranscodeType> GenericTransitionOptions<TranscodeType> with(, + int viewAnimationId) {, + return new GenericTransitionOptions<TranscodeType>().transition(viewAnimationId);, + }, +, + /**, + * Returns a typed {@link GenericTransitionOptions} object that uses the given animator., + *, + * @see GenericTransitionOptions#transition(ViewPropertyTransition.Animator), + */, + public static <TranscodeType> GenericTransitionOptions<TranscodeType> with(, +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, + //noinspection rawtypes, + public void loadIntoView_withSkipMemoryCacheFalse_loadsFromMemoryCacheIfPresent() {, + final ImageView imageView = new ImageView(context);, + imageView.setLayoutParams(new LayoutParams(100, 100));, +, + concurrency.loadOnMainThread(, + GlideApp.with(context), + .load(ResourceIds.raw.canonical), + .listener(requestListener), + .skipMemoryCache(false), + .dontTransform(),, + imageView);, +, + // Casting avoids a varags array warning., + //noinspection rawtypes, + reset((RequestListener) requestListener);, +, + // Run on the main thread, since this is already cached, we shouldn't need to try to wait. If we, + // do end up re-using the old Target, our wait will always timeout anyway if we use, + // loadOnMainThread. If the load doesn't complete
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + registry.register(new DefaultImageHeaderParser());]
[+++ b/gradle.properties, +VERSION_NAME=4.9.0]
[+++ b/README.md, +-keep public enum com.bumptech.glide.load.ImageHeaderParser$** {, +++ b/README.md, +-keep public enum com.bumptech.glide.load.ImageHeaderParser$** {, +++ b/library/proguard-rules.txt, +-keep public enum com.bumptech.glide.load.ImageHeaderParser$** {]
[+++ b/library/src/main/java/com/bumptech/glide/load/HttpException.java, +import android.support.annotation.Nullable;, +, + public HttpException(String message, int statusCode, @Nullable Throwable cause) {]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifData.java, +, +import com.bumptech.glide.load.engine.Resource;, +import com.bumptech.glide.load.resource.UnitTransformation;, +import com.bumptech.glide.load.resource.bitmap.BitmapResource;, + private static final GifDrawableFactory GIF_DRAWABLE_FACTORY = new DefaultGifDrawableFactory();, + private final BitmapPool bitmapPool;, + /** The target dimensions we should pass to Glide to use when loading individual frames */, + private final GifDrawableFactory factory;, +, + /** The final dimensions of the transformed frames */, + private int frameHeight;, + private int frameWidth;, + this(context, bitmapPool, gifId, header, data, targetWidth, targetHeight, GIF_DRAWABLE_FACTORY);, + }, +, + GifData(Context context, BitmapPool bitmapPool, String gifId, GifHeader header, byte[] data,, + int targetWidth, int targetHeight, GifDrawableFactory factory) {, + this.bitmapPool = bitmapPool;,
[+++ b/gradle.properties, +ANDROID_GRADLE_VERSION=1.2.2, +ROBOLECTRIC_GRADLE_VERSION=1.0.1, +JUNIT_VERSION=4.12, +MOCKITO_VERSION=1.10.19, +++ b/gradle.properties, +ANDROID_GRADLE_VERSION=1.2.2, +ROBOLECTRIC_GRADLE_VERSION=1.0.1, +JUNIT_VERSION=4.12, +MOCKITO_VERSION=1.10.19, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Thu Apr 30 12:21:55 CEST 2015, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-all.zip, +++ b/gradle.properties, +ANDROID_GRADLE_VERSION=1.2.2, +ROBOLECTRIC_GRADLE_VERSION=1.0.1, +JUNIT_VERSION=4.12, +MOCKITO_VERSION=1.10.19, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Thu Apr 30 12:21:55 CEST 2015, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-all.zip, +++ b/integration/volley/build.gradle, +apply plugin: 'org.robolectric', +++ b/gradle.properties, +ANDROID_GRADLE_VERSION=1.2.2, +ROBOLECTRIC_GRADLE_VERSION=1.0.1, +JUNIT_VERSION=4.12, +MOCKITO_VERSION=1.10.19, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Thu Apr 30 12:21:55 CEST 2015, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-all.zip, +++ b/integration/volley/build.gradle, +apply plugin: 'org.robolectric', +++ b/library/build.gradle, +apply plugin: 'org.robolectric', + tasks.check.dependsOn(tasks.findbugs), + tasks.check.dependsOn(tasks.pmd), +++ b/gradle.properties, +ANDROID_GRADLE_VERSION=1.2.2, +ROBOLECTRIC_GRADLE_VERSION=1.0.1, +JUNIT_VERSION=4.12, +MOCKITO_VERSION=1.10.19, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Thu Apr 30 12:21:55 CEST 2015, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-all.zip, +++ b/integration/volley/build.gradle, +apply plugin: 'org.robolectric', +++ b/library/build.gradle, +apply plugin: 'org.robolectric', + tasks.check.dependsOn(tasks.findbugs), + tasks.check.dependsOn(tasks.pmd),
[+++ b/samples/flickr/lint.xml, + <issue id="IconMissingDensityFolder" severity="ignore"/>, +++ b/samples/flickr/lint.xml, + <issue id="IconMissingDensityFolder" severity="ignore"/>, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/SquareImageView.java, +import android.annotation.TargetApi;, +import android.os.Build;, + @TargetApi(Build.VERSION_CODES.LOLLIPOP), +++ b/samples/flickr/lint.xml, + <issue id="IconMissingDensityFolder" severity="ignore"/>, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/SquareImageView.java, +import android.annotation.TargetApi;, +import android.os.Build;, + @TargetApi(Build.VERSION_CODES.LOLLIPOP), +++ /dev/null]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java, +package com.bumptech.glide.load.engine.cache;, +, +import com.bumptech.glide.load.Key;, +, +import java.util.ArrayDeque;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Queue;, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +, +/**, + * Keeps a map of keys to locks that allows locks to be removed from the map when no longer in use, + * so the size of the collection is bounded., + *, + * <p> This class will be accessed by multiple threads in a thread pool and ensures that the, + * number of threads interested in each lock is updated atomically so that when the count reaches, + * 0, the lock
[+++ b/library/src/com/bumptech/glide/loader/model/BaseModelStreamLoader.java, + * @see ModelStreamLoader#fetchModelStream(Object, int, int, com.bumptech.glide.loader.model.ModelStreamLoader.ModelStreamReadyCallback), + public final Object fetchModelStream(T model, int width, int height, ModelStreamReadyCallback cb) {, + doFetchModelStreams(model, width, height, new InternalModelStreamReadyCallback(cb, model));, + * @see ModelStreamLoader#fetchModelStream(Object, int, int, com.bumptech.glide.loader.model.ModelStreamLoader.ModelStreamReadyCallback), + protected abstract void doFetchModelStreams(T model, int width, int height, ModelStreamReadyCallback cb);, + protected class InternalModelStreamReadyCallback implements ModelStreamReadyCallback {, + private final WeakReference<ModelStreamReadyCallback> cbRef;, + public InternalModelStreamReadyCallback(ModelStreamReadyCallback cb, T model) {, + this.cbRef = new WeakReference<ModelStreamReadyCallback>(cb);, + public boolean onStreamReady(String id, StreamOpener streamOpener) {, + ModelStreamReadyCallback cb = cbRef.get();, + result = cb.onStreamReady(id, streamOpener);, + ModelStreamReadyCallback cb = cbRef.get();, +++ b/library/src/com/bumptech/glide/loader/model/BaseModelStreamLoader.java, + *
[+++ b/README.md, +./gradlew :samples:contacturi:run, +++ b/README.md, +./gradlew :samples:contacturi:run, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, + * Uri for optimized search of phones by number, + * (e.g. content://com.android.contacts/phone_lookup/232323232, + */, + private static final int ID_LOOKUP_BY_PHONE = 5;, + /**, + URI_MATCHER.addURI(ContactsContract.AUTHORITY, "phone_lookup/*", ID_LOOKUP_BY_PHONE);, + case ID_LOOKUP_BY_PHONE:, +++ b/README.md, +./gradlew :samples:contacturi:run, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, + * Uri for optimized search of phones by number, + * (e.g. content://com.android.contacts/phone_lookup/232323232, + */, + private static final int ID_LOOKUP_BY_PHONE = 5;, + /**, + URI_MATCHER.addURI(ContactsContract.AUTHORITY, "phone_lookup/*", ID_LOOKUP_BY_PHONE);, + case ID_LOOKUP_BY_PHONE:, +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java, +import android.Manifest;, +import android.content.pm.PackageManager;, +import android.provider.ContactsContract;, +import android.support.v4.app.ActivityCompat;, +import android.support.v4.content.ContextCompat;, +import android.widget.EditText;, + private static
[+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java, +import android.content.ContentResolver;, + return build(context, uri, new ImageThumbnailQuery(context.getContentResolver()));, + return build(context, uri, new VideoThumbnailQuery(context.getContentResolver()));, + return new ThumbFetcher(, + uri, new ThumbnailStreamOpener(query, byteArrayPool, context.getContentResolver()));, + ThumbFetcher(Uri mediaStoreImageUri, ThumbnailStreamOpener opener) {, + InputStream result = opener.open(mediaStoreImageUri);, + orientation = opener.getOrientation(mediaStoreImageUri);, +, + private final ContentResolver contentResolver;, +, + VideoThumbnailQuery(ContentResolver contentResolver) {, + this.contentResolver = contentResolver;, + }, +, + public Cursor query(Uri uri) {, + return contentResolver.query(, +, + private final ContentResolver contentResolver;, +, + ImageThumbnailQuery(ContentResolver contentResolver) {, + this.contentResolver = contentResolver;, + }, +, + public Cursor query(Uri uri) {, + return contentResolver.query(, +++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java, +import android.content.ContentResolver;,
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + @TargetApi(Build.VERSION_CODES.O), +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + @TargetApi(Build.VERSION_CODES.O), +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java, + // Package private to avoid PMD warning., + MemorySizeCalculator(MemorySizeCalculator.Builder builder) {, + int widthPixels = builder.screenDimensions.getWidthPixels();, + int heightPixels = builder.screenDimensions.getHeightPixels();, + int screenSize = widthPixels * heightPixels * BYTES_PER_ARGB_8888_PIXEL;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + @TargetApi(Build.VERSION_CODES.O), +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java, + // Package private to avoid PMD warning., + MemorySizeCalculator(MemorySizeCalculator.Builder builder) {, + int widthPixels = builder.screenDimensions.getWidthPixels();, + int heightPixels = builder.screenDimensions.getHeightPixels();, + int screenSize = widthPixels * heightPixels * BYTES_PER_ARGB_8888_PIXEL;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + // Avoid short circuiting SDK checks., + @SuppressWarnings("PMD.CollapsibleIfStatements"), + @TargetApi(Build.VERSION_CODES.O), + // Avoid short circuiting, it appears to
[+++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java|AnimationOptions.java|BaseDecodeOptions.java|RequestOptions.java" checks="NoClone" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java|AnimationOptions.java|BaseDecodeOptions.java|RequestOptions.java" checks="NoClone" />, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java|AnimationOptions.java|BaseDecodeOptions.java|RequestOptions.java" checks="NoClone" />, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + Request request = new Request.Builder(), +, + @Override, + public Class<InputStream> getDataClass() {, + return InputStream.class;, + }, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java|AnimationOptions.java|BaseDecodeOptions.java|RequestOptions.java" checks="NoClone" />, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + Request request = new Request.Builder(), +, + @Override, + public Class<InputStream> getDataClass() {, + return InputStream.class;, + }, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +import com.bumptech.glide.load.model.MultiModelLoaderFactory;, + private final OkHttpClient
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + case CENTER_INSIDE:, + requestOptions.optionalCenterInside(context);, + break;, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + case CENTER_INSIDE:, + requestOptions.optionalCenterInside(context);, + break;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterInside.java, +package com.bumptech.glide.load.resource.bitmap;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.support.annotation.NonNull;, +, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +, +import java.security.MessageDigest;, +, +/**, + * Returns the image with its original size if its dimensions match or are smaller, + * than the target's, couple with {@link android.widget.ImageView.ScaleType#CENTER_INSIDE}, + * in order to center it in Target. If not, then it is scaled so that one of the dimensions of, + * the image will be equal to the given dimension and the other will
[+++ b/library/proguard-rules.txt, +-keep public class * extends com.bumptech.glide.module.AppGlideModule, +, +# Uncomment for DexGuard only, +#-keepresourcexmlelements manifest/application/meta-data@value=GlideModule, +++ b/library/proguard-rules.txt, +-keep public class * extends com.bumptech.glide.module.AppGlideModule, +, +# Uncomment for DexGuard only, +#-keepresourcexmlelements manifest/application/meta-data@value=GlideModule, +++ b/samples/imgur/build.gradle, +++ b/library/proguard-rules.txt, +-keep public class * extends com.bumptech.glide.module.AppGlideModule, +, +# Uncomment for DexGuard only, +#-keepresourcexmlelements manifest/application/meta-data@value=GlideModule, +++ b/samples/imgur/build.gradle, +++ /dev/null, +++ b/library/proguard-rules.txt, +-keep public class * extends com.bumptech.glide.module.AppGlideModule, +, +# Uncomment for DexGuard only, +#-keepresourcexmlelements manifest/application/meta-data@value=GlideModule, +++ b/samples/imgur/build.gradle, +++ /dev/null, +++ /dev/null]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java, +package com.bumptech.glide.load.engine;, +, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.signature.StringSignature;, +import com.bumptech.glide.tests.KeyAssertions;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +, +import java.io.UnsupportedEncodingException;, +import java.security.NoSuchAlgorithmException;, +, +@RunWith(JUnit4.class), +public class ResourceCacheKeyTest {, +, + private Factory factory;, +, + @Before, + public void setUp() {, + factory = new Factory();, + }, +, + @Test, + public void testIdenticalWithSameArguments(), + throws UnsupportedEncodingException, NoSuchAlgorithmException {, + KeyAssertions.assertSame(factory.build(), factory.build());, + }, +, + @Test, + public void testDifferIfSourceKeyDiffers(), + throws UnsupportedEncodingException, NoSuchAlgorithmException {, + mutateAndAssertDifferent(new FactoryMutation() {, + @Override,
[+++ /dev/null, +++ /dev/null, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.target.ImageViewTarget;, +import com.bumptech.glide.presenter.target.Target;, +import java.util.Map;, +import java.util.WeakHashMap;, + private final Map<Target, Metadata> metadataTracker = new WeakHashMap<Target, Metadata>();, + private ModelRequest(ModelLoader<T> modelLoader) {, + private Context context;, + private Target target;, +, + private Request(T model) {, + private Request(T model, ModelLoader<T> modelLoader) {, + //make an effort to support wrap content layout params. This will still blow, + //up if transformation doesn't handle wrap content, but its a start, + final ViewGroup.LayoutParams layoutParams = imageView.getLayoutParams();, + if (layoutParams != null &&, + (layoutParams.width == ViewGroup.LayoutParams.WRAP_CONTENT ||, + layoutParams.height == ViewGroup.LayoutParams.WRAP_CONTENT)) {, +
[+++ b/library/src/main/java/com/bumptech/glide/Priority.java, + LOW,, +++ b/library/src/main/java/com/bumptech/glide/Priority.java, + LOW,, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + return SingleRequest.obtain(, + context,, + model,, + transcodeClass,, + requestOptions,, + overrideWidth,, + overrideHeight,, + target,, + requestListener,, + requestCoordinator,, + context.getEngine(),, + transitionOptions.getTransitionFactory());, +++ b/library/src/main/java/com/bumptech/glide/Priority.java, + LOW,, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + return SingleRequest.obtain(, + context,, + model,, + transcodeClass,, + requestOptions,, + overrideWidth,, + overrideHeight,, + target,, + requestListener,, + requestCoordinator,, + context.getEngine(),, + transitionOptions.getTransitionFactory());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + private List<Key> cacheKeys;, + private final DecodeHelper<?> helper;, +, + DataCacheGenerator(DecodeHelper<?> helper, FetcherReadyCallback cb) {, + this(helper.getCacheKeys(), helper, cb);, + }, +, + // In some cases we may want
[+++ b/gradle.properties, +VERSION_NAME=4.9.0-SNAPSHOT, +VERSION_MINOR=9]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import java.util.Collections;, +import java.util.Set;, + private static final Set<Bitmap.Config> ALLOWED_CONFIGS = Collections.singleton(Bitmap.Config.ARGB_8888);, + pool = new LruBitmapPool(MAX_SIZE, strategy, ALLOWED_CONFIGS);, + pool = new LruBitmapPool(3, strategy, ALLOWED_CONFIGS);, + LruBitmapPool pool = new LruBitmapPool(100, strategy, ALLOWED_CONFIGS);, + LruBitmapPool pool = new LruBitmapPool(100, strategy, ALLOWED_CONFIGS);, + LruBitmapPool pool = new LruBitmapPool(MAX_SIZE, strategy, ALLOWED_CONFIGS);, + @Test, + public void testBitmapsWithDisallowedConfigsAreIgnored() {, + pool = new LruBitmapPool(100, strategy, Collections.singleton(Bitmap.Config.ARGB_4444));, +, + Bitmap bitmap = createMutableBitmap(Bitmap.Config.RGB_565);, + pool.put(bitmap);, +, + assertEquals(0, strategy.numPuts);, + }, +, + @Test, + public void testBitmapsWithAllowedNullConfigsAreAllowed() {, + pool = new LruBitmapPool(100, strategy, Collections.<Bitmap.Config>singleton(null));, +, + Bitmap bitmap
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + throw new IllegalArgumentException("You must call #load() before calling #into()");]
[+++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, + private final String stringUrl;, + private String safeStringUrl;, + if (headers == null) {, + throw new IllegalArgumentException("Headers must not be null");, + }, + if (headers == null) {, + throw new IllegalArgumentException("Headers must not be null");, + }, + if (safeUrl == null) {, + }, + if (TextUtils.isEmpty(safeStringUrl)) {, + String unsafeStringUrl = stringUrl;, + if (TextUtils.isEmpty(unsafeStringUrl)) {, + unsafeStringUrl = url.toString();, + safeStringUrl = Uri.encode(unsafeStringUrl, ALLOWED_URI_CHARS);, + }, + return safeStringUrl;, + for (Map.Entry<String, String> entry : headerMap.entrySet()) {, + stringBuilder.append('\n'), + .append(entry.getKey()), + .append(entry.getValue());, + if (o instanceof GlideUrl) {, +
[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;, + throw new NullPointerException("Context can't be null");, + .setBitmapLoadFactory(new ImageVideoBitmapLoadFactory<ModelType, ImageResourceType, VideoResourceType>(, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;, + throw new NullPointerException("Context can't be null");, + .setBitmapLoadFactory(new ImageVideoBitmapLoadFactory<ModelType, ImageResourceType, VideoResourceType>(, +++ /dev/null, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;, + throw new NullPointerException("Context can't be null");, + .setBitmapLoadFactory(new ImageVideoBitmapLoadFactory<ModelType, ImageResourceType, VideoResourceType>(, +++ /dev/null, +++ b/library/src/com/bumptech/glide/loader/bitmap/BitmapLoadFactory.java, +import com.bumptech.glide.resize.BitmapLoad;, + * An interface for providing a {@link BitmapLoad} to load a bitmap for a given model, width, and height., + * @param <T> The type of the model to return a {@link BitmapLoad} for., + * Returns a {@link BitmapLoad} that can
[+++ b/src/com/bumptech/photos/imagemanager/ImageResizer.java, +/*, + * Copyright (c) 2012 Bump Technologies Inc. All rights reserved., + */, +package com.bumptech.photos.imagemanager;, +, +import android.graphics.Bitmap;, +import android.graphics.BitmapFactory;, +import android.graphics.Canvas;, +import android.graphics.Matrix;, +import android.graphics.Paint;, +import android.os.Build;, +import com.bumptech.photos.imagemanager.cache.SizedBitmapCache;, +import com.bumptech.photos.util.Log;, +import com.bumptech.photos.util.Photo;, +, +import java.io.BufferedInputStream;, +import java.io.FileInputStream;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +import java.io.InputStream;, +, +/**, + * @author sam, + *, + */, +public class ImageResizer {, +, + private final SizedBitmapCache bitmapCache;, +, + public ImageResizer() {, + this(null);, + }, +, + public ImageResizer(SizedBitmapCache bitmapCache){, + this.bitmapCache = bitmapCache;, + }, +, + public Bitmap resizeCenterCrop(final String path, final int width, final
[+++ b/third_party/gif_decoder/build.gradle, +apply plugin: 'robolectric', +, +dependencies {, + androidTestCompile 'org.hamcrest:hamcrest-core:1.3', + androidTestCompile 'org.hamcrest:hamcrest-library:1.3', + androidTestCompile 'junit:junit:4.11', + androidTestCompile 'org.mockito:mockito-all:1.9.5', +}, +++ b/third_party/gif_decoder/build.gradle, +apply plugin: 'robolectric', +, +dependencies {, + androidTestCompile 'org.hamcrest:hamcrest-core:1.3', + androidTestCompile 'org.hamcrest:hamcrest-library:1.3', + androidTestCompile 'junit:junit:4.11', + androidTestCompile 'org.mockito:mockito-all:1.9.5', +}, +++ b/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifHeaderParserTest.java, +package com.bumptech.glide.gifdecoder;, +, +import com.bumptech.glide.gifdecoder.test.GifBytesTestUtil;, +import org.junit.Before;, +import org.junit.Test;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.nio.ByteBuffer;, +import java.nio.ByteOrder;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +, +/**, + * Tests for {@link com.bumptech.glide.gifdecoder.GifHeaderParser}., + */, +public class GifHeaderParserTest {, + private GifHeaderParser parser;, +, + @Before, + public void setUp()
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0,
[+++ b/.travis.yml, +- ./gradlew jacocoTestReport coveralls, +++ b/.travis.yml, +- ./gradlew jacocoTestReport coveralls, +++ b/build.gradle, + classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:${COVERALLS_GRADLE_VERSION}", +++ b/.travis.yml, +- ./gradlew jacocoTestReport coveralls, +++ b/build.gradle, + classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:${COVERALLS_GRADLE_VERSION}", +++ b/gradle.properties, +COVERALLS_GRADLE_VERSION=2.0.1, +++ b/.travis.yml, +- ./gradlew jacocoTestReport coveralls, +++ b/build.gradle, + classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:${COVERALLS_GRADLE_VERSION}", +++ b/gradle.properties, +COVERALLS_GRADLE_VERSION=2.0.1, +++ b/library/build.gradle, +apply plugin: 'jacoco', +apply plugin: 'com.github.kt3k.coveralls', +jacoco {, + toolVersion = "0.7.1.201405082137", +}, +coveralls {, + jacocoReportPath = 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml', +}, +, + buildTypes {, + debug {, + testCoverageEnabled = true, + }, + }, +, + task jacocoTestReport(type:JacocoReport, dependsOn: testDebug) {, + def coverageSourceDirs = ['src/main/java'], + group = "Reporting", +,
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + private static final BaseRequestOptions<?> DOWNLOAD_ONLY_OPTIONS =, + /**, + * Applies the given options to the request, options set or unset in the given options will, + * replace those previously set in options in this class., + *, + * @see BaseRequestOptions#apply(BaseRequestOptions), + * @return This request builder., + */, + public RequestBuilder<TranscodeType> apply(@NonNull BaseRequestOptions<?> requestOptions) {, + /**, + * Sets the {@link TransitionOptions} to use to transition from the placeholder or thumbnail when, + * this load completes., + *, + * <p>The given {@link TransitionOptions} will replace any {@link TransitionOptions} set, +
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillIdleHandlerTest.java, +package com.bumptech.glide.load.engine.prefill;, +, +import android.graphics.Bitmap;, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.engine.Resource;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.load.resource.bitmap.BitmapResource;, +import com.bumptech.glide.util.Util;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.InOrder;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import org.robolectric.RobolectricTestRunner;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.hasSize;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotEquals;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +@RunWith(RobolectricTestRunner.class), +public class BitmapPreFillIdleHandlerTest {, + private BitmapPreFillIdleHandler.Clock clock;, + private BitmapPool pool;,
[+++ b/gradle.properties, +VERSION_NAME=4.2.0-SNAPSHOT, +VERSION_MINOR=2, +VERSION_PATCH=0]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, +import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNull;, +, +import com.squareup.javapoet.ParameterSpec;, +, + .addParameter(ParameterSpec.builder(, + ClassName.get("android.content", "Context"), "context"), + .addAnnotation(nonNull()), + .build(), + ), + .addParameter(ParameterSpec.builder(, + ClassName.get("com.bumptech.glide", "GlideBuilder"), "builder"), + .addAnnotation(nonNull()), + .build(), + ), + .addAnnotation(nonNull()), + .addAnnotation(nonNull()), + .addParameter(ParameterSpec.builder(, + ClassName.get("android.content", "Context"), "context"), + .addAnnotation(nonNull()), + .build(), + ), + .addParameter(ParameterSpec.builder(, + ClassName.get("com.bumptech.glide", "Glide"), "glide"), + .addAnnotation(nonNull()), + .build(), + ), + .addParameter(ParameterSpec.builder(, + ClassName.get("com.bumptech.glide", "Registry"), "registry"), + .addAnnotation(nonNull()), + .build(), + );, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, +import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNull;, +, +import com.squareup.javapoet.ParameterSpec;, +, + .addParameter(ParameterSpec.builder(, + ClassName.get("android.content", "Context"), "context"), + .addAnnotation(nonNull()), + .build(), + ), + .addParameter(ParameterSpec.builder(, + ClassName.get("com.bumptech.glide", "GlideBuilder"),
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.support.annotation.VisibleForTesting;, + @VisibleForTesting, + public static void tearDown() {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.support.annotation.VisibleForTesting;, + @VisibleForTesting, + public static void tearDown() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import com.bumptech.glide.Glide;, + this(, + new GifState(, + bitmapPool,, + new GifFrameLoader(, + // TODO(b/27524013): Factor out this call to Glide.get(), + Glide.get(context),, + gifDecoder,, + targetFrameWidth,, + targetFrameHeight,, + frameTransformation,, + firstFrame)));, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.support.annotation.VisibleForTesting;, + @VisibleForTesting, + public static void tearDown() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import com.bumptech.glide.Glide;, + this(, + new GifState(, + bitmapPool,, + new GifFrameLoader(, + // TODO(b/27524013): Factor out this call to Glide.get(), + Glide.get(context),, + gifDecoder,, +
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + public void loadData(Priority priority, DataCallback<? super InputStream> callback) {, + request = requestFactory.create(url.toString(), callback, glideToVolleyPriority(priority));, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + public void loadData(Priority priority, DataCallback<? super InputStream> callback) {, + request = requestFactory.create(url.toString(), callback, glideToVolleyPriority(priority));, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + doAnswer(new Util.CallDataReady(null)), + .when(failFetcher), +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + public
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java, + private static final int MAX_BLOCK_SIZE = 256;, + private final byte[] block = new byte[MAX_BLOCK_SIZE];, + private void readContents() {, + private void readGraphicControlExt() {, + private void readBitmap() {, + skipImageData();, + private void readNetscapeExt() {, + private void readLSD() {, + private int[] readColorTable(int ncolors) {, + // TODO: what bounds checks are we avoiding if we know the number of colors?, + tab = new int[MAX_BLOCK_SIZE];, + * Skips LZW image data for a single frame to advance buffer., + private void skipImageData() {, + // lzwMinCodeSize, + read();, + // data sub-blocks,
[+++ b/checkstyle.xml, + <module name="AvoidNestedBlocks">, + <property name="allowInSwitchCase" value="true" />, + </module>, +++ b/checkstyle.xml, + <module name="AvoidNestedBlocks">, + <property name="allowInSwitchCase" value="true" />, + </module>, +++ b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/MainActivity.java, +import android.Manifest.permission;, +import android.annotation.TargetApi;, +import android.content.pm.PackageManager;, +import android.os.Build;, +import android.support.annotation.NonNull;, +import android.support.v4.app.ActivityCompat;, +import android.support.v4.app.Fragment;, +import android.support.v4.content.ContextCompat;, +import android.widget.Toast;, + private static final int REQUEST_READ_STORAGE = 0;, +, + if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M, + && ContextCompat.checkSelfPermission(this, permission.READ_EXTERNAL_STORAGE), + != PackageManager.PERMISSION_GRANTED) {, + requestStoragePermission();, + } else {, + replaceFragment();, + }, + }, +, + @TargetApi(Build.VERSION_CODES.JELLY_BEAN), + private void requestStoragePermission() {, + ActivityCompat.requestPermissions(this,, + new String[]{permission.READ_EXTERNAL_STORAGE},, + REQUEST_READ_STORAGE);, + }, +, + private void
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.Collections;, +import javax.annotation.Nullable;, + private ClassName requestOptionsClassName;, + TypeSpec generate(@Nullable TypeSpec generatedOptions) {, + if (generatedOptions != null) {, + requestOptionsClassName =, + RequestOptionsGenerator.GENERATED_REQUEST_OPTIONS_PACKAGE_NAME,, + generatedOptions.name);, + } else {, + requestOptionsClassName =, + ClassName.get(, + RequestOptionsGenerator.REQUEST_OPTIONS_PACKAGE_NAME,, + RequestBuilderGenerator.BASE_REQUEST_OPTIONS_SIMPLE_NAME);, + }, + @Nullable final TypeSpec generatedOptions) {, + if (generatedOptions == null) {, + return Collections.emptyList();, + }, + .equals(requestOptionMethod.toString());, + .addJavadoc(, + processorUtil.generateSeeMethodJavadoc(requestOptionsClassName, requestOptionMethod)), + "if (getMutableOptions() instanceof $T)", requestOptionsClassName), + requestOptionsClassName), + requestOptionsClassName)), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.Collections;, +import javax.annotation.Nullable;, + private ClassName requestOptionsClassName;, + TypeSpec generate(@Nullable TypeSpec generatedOptions) {, + if (generatedOptions != null)
[+++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java, + public void testPausesInProgressRequestsWhenPaused() {, + verify(request).pause();, + public void testPausesAndRestartsNotYetFinishedRequestsOnRestart() {, + verify(request).pause();, + public void testPausesFailedRequestOnRestartIfPaused() {, + verify(request).pause();, + public void testPausesIncompleteRequestsOnRestartIfPaused() {, + verify(request).pause();, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java, + public void testPausesInProgressRequestsWhenPaused() {, + verify(request).pause();, + public void testPausesAndRestartsNotYetFinishedRequestsOnRestart() {, + verify(request).pause();, + public void testPausesFailedRequestOnRestartIfPaused() {, + verify(request).pause();, + public void testPausesIncompleteRequestsOnRestartIfPaused() {, + verify(request).pause();, +++ b/library/src/androidTest/java/com/bumptech/glide/request/GenericRequestTest.java, + public void testIsPausedAfterPause() {, + GenericRequest request = harness.getRequest();, + request.pause();, +, + assertTrue(request.isPaused());, + }, +, + @Test, + public void testIsNotCancelledAfterPause() {, + GenericRequest request = harness.getRequest();, + request.pause();, +, + assertFalse(request.isCancelled());, + },
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java, + @NonNull WaitModel<Model> waitModel, int width, int height, @NonNull Options options) {, + public boolean handles(@NonNull WaitModel<Model> waitModel) {, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java, + @NonNull WaitModel<Model> waitModel, int width, int height, @NonNull Options options) {, + public boolean handles(@NonNull WaitModel<Model> waitModel) {, +++ b/library/src/main/java/com/bumptech/glide/load/ImageHeaderParserUtils.java, + //noinspection ForLoopReplaceableByForEach to improve perf, + for (int i = 0, size = parsers.size(); i < size; i++) {, + //noinspection ForLoopReplaceableByForEach to improve perf, + for (int i = 0, size = parsers.size(); i < size; i++) {, + //noinspection ForLoopReplaceableByForEach to improve perf, + for (int i = 0, size = parsers.size();
[+++ b/.idea/codeStyleSettings.xml, + <option name="OTHER_INDENT_OPTIONS">, + <value>, + <option name="INDENT_SIZE" value="2" />, + <option name="CONTINUATION_INDENT_SIZE" value="4" />, + <option name="TAB_SIZE" value="2" />, + <option name="USE_TAB_CHARACTER" value="false" />, + <option name="SMART_TABS" value="false" />, + <option name="LABEL_INDENT_SIZE" value="0" />, + <option name="LABEL_INDENT_ABSOLUTE" value="false" />, + <option name="USE_RELATIVE_INDENTS" value="false" />, + </value>, + </option>, + <package name="com.google" withSubpackages="true" static="true" />, + <package name="" withSubpackages="true" static="true" />, + <emptyLine />, + <package name="com.google" withSubpackages="true" static="false" />, + <emptyLine />, + <package name="antenna" withSubpackages="true" static="false" />, + <emptyLine />, + <package name="antlr" withSubpackages="true" static="false" />, + <emptyLine />, + <package name="ar" withSubpackages="true" static="false" />,
[+++ b/library/src/main/java/com/bumptech/glide/util/ContentLengthInputStream.java, + int value = super.read();, + checkReadSoFarOrThrow(value >= 0 ? 1 : -1);, + return value;, +++ b/library/src/main/java/com/bumptech/glide/util/ContentLengthInputStream.java, + int value = super.read();, + checkReadSoFarOrThrow(value >= 0 ? 1 : -1);, + return value;, +++ b/library/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java, +import java.io.ByteArrayInputStream;, + assertThat(is.available()).isEqualTo(contentLength - 1);, +, + @Test, + public void testRead_readWithZeroes_doesNotThrow() throws IOException {, + ByteArrayInputStream inner = new ByteArrayInputStream(new byte[] {0, 0, 0});, + InputStream is = ContentLengthInputStream.obtain(inner, 3);, +, + assertThat(is.read()).isEqualTo(0);, + assertThat(is.read()).isEqualTo(0);, + assertThat(is.read()).isEqualTo(0);, + assertThat(is.read()).isEqualTo(-1);, + }, +, + @Test, + public void testRead_readWithHighValues_doesNotThrow() throws IOException {, + ByteArrayInputStream inner =, + new ByteArrayInputStream(new byte[]
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.os.ParcelFileDescriptor;, +import android.view.View;, +import com.bumptech.glide.loader.bitmap.BaseBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorFileLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorModelLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorStringLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorUriLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamByteArrayLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamFileLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamModelLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamStringLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamUriLoader;, +import com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.bitmap.transformation.CenterCrop;, +import com.bumptech.glide.loader.bitmap.transformation.FitCenter;, +import com.bumptech.glide.loader.bitmap.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.bitmap.transformation.None;, +import com.bumptech.glide.loader.bitmap.transformation.TransformationLoader;, +import com.bumptech.glide.presenter.target.ImageViewTarget;, +import com.bumptech.glide.presenter.target.ViewTarget;, +import com.bumptech.glide.resize.load.BitmapDecoder;, +import com.bumptech.glide.resize.load.VideoBitmapDecoder;, +import java.io.InputStream;, + * A singleton to present a simple static interface for Glide {@link GenericRequest} and to create and manage an, + * public void onException(Exception
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.ImageHeaderParser;, +import com.bumptech.glide.request.RequestListener;, + @NonNull Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,, + @NonNull List<RequestListener<Object>> defaultRequestListeners) {, + List<ImageHeaderParser> imageHeaderParsers = registry.getImageHeaderParsers();, + Downsampler downsampler =, + new Downsampler(, + imageHeaderParsers,, + resources.getDisplayMetrics(),, + bitmapPool,, + arrayPool);, + new ByteBufferGifDecoder(context, imageHeaderParsers, bitmapPool, arrayPool);, + new StreamGifDecoder(imageHeaderParsers, byteBufferGifDecoder, arrayPool)), + defaultRequestListeners,, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.ImageHeaderParser;, +import com.bumptech.glide.request.RequestListener;, + @NonNull Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,, + @NonNull List<RequestListener<Object>> defaultRequestListeners) {, + List<ImageHeaderParser> imageHeaderParsers = registry.getImageHeaderParsers();, + Downsampler downsampler =, + new Downsampler(, + imageHeaderParsers,, + resources.getDisplayMetrics(),, + bitmapPool,, + arrayPool);, + new ByteBufferGifDecoder(context, imageHeaderParsers, bitmapPool, arrayPool);, + new StreamGifDecoder(imageHeaderParsers, byteBufferGifDecoder, arrayPool)), +
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, +Proguard, +--------, +Depending on your proguard config and usage, you may need to include the following lines in your proguard.cfg:, +```, +-keep public class * implements com.bumptech.glide.module.GlideModule, +-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {, + **[] $VALUES;, + public *;, +}, +```, +, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, +Proguard, +--------, +Depending on your proguard config and usage, you may need to include the following lines in your proguard.cfg:, +```, +-keep public class * implements com.bumptech.glide.module.GlideModule, +-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$**
[+++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>, +++ b/library/build.gradle, + androidTestCompile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}", + androidTestCompile 'com.android.support.test:runner:0.5', + androidTestCompile 'com.android.support.test:rules:0.5', + androidTestCompile "com.google.truth:truth:${TRUTH_VERSION}", + androidTestCompile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}", + testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner", +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>, +++ b/library/build.gradle, + androidTestCompile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}", + androidTestCompile 'com.android.support.test:runner:0.5', + androidTestCompile 'com.android.support.test:rules:0.5', + androidTestCompile "com.google.truth:truth:${TRUTH_VERSION}", + androidTestCompile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}", + testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner", +++ b/library/src/androidTest/java/com/bumptech/glide/test/TestNonBitmapResources.java, +package com.bumptech.glide.test;, +, +import static com.google.common.truth.Truth.assertThat;, +, +import android.content.ContentResolver;, +import android.content.Context;, +import android.content.pm.PackageInfo;, +import android.content.pm.PackageManager;, +import android.content.pm.PackageManager.NameNotFoundException;, +import android.content.res.Resources;, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.net.Uri;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.Glide;, +import com.google.common.collect.ImmutableList;, +import java.util.concurrent.ExecutionException;, +import org.junit.After;, +import org.junit.Before;,
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, + *, + * @deprecated use {@link #noTransformation()}, + */, + @Deprecated, + public static RequestOptions noTransform() {, + return noTransformation();, + }, +, + /**, + * Returns a {@link RequestOptions} object with {@link #dontTransform()} set.]
[+++ b/gradle.properties, +VERSION_NAME=4.8.0-SNAPSHOT, +VERSION_MINOR=8]
[+++ b/library/src/main/java/com/bumptech/glide/request/target/Target.java]
[+++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, + full.clear();, +++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, + full.clear();, +++ b/library/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java, +import org.mockito.InOrder;, +import static org.mockito.Mockito.inOrder;, +, + @Test, + public void testCallsClearOnRequestsWhenCleared() {, + coordinator.clear();, + InOrder order = inOrder(thumb, full);, + order.verify(thumb).clear();, + order.verify(full).clear();, + }, +, + @Test, + public void testRecyclesRequestsWhenRecycled() {, + coordinator.recycle();, + verify(thumb).recycle();, + verify(full).recycle();, + }, +]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + target.setRequest(null);, + target.setRequest(null);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + target.setRequest(null);, + target.setRequest(null);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + cleanup();, + private void cleanup() {, + currentData = null;, + currentDataSource = null;, + currentFetcher = null;, + currentSourceKey = null;, + currentThread = null;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + target.setRequest(null);, + target.setRequest(null);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + cleanup();, + private void cleanup() {, + currentData = null;, + currentDataSource = null;, + currentFetcher = null;, + currentSourceKey = null;, + currentThread = null;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + status = Status.COMPLETE;, + this.resource = resource;, +]
[+++ b/.gitignore, +library/build/*, +++ b/.gitignore, +library/build/*, +++ b/library/build.gradle, +buildscript {, + repositories {, + mavenCentral(), + }, + dependencies {, + classpath 'com.android.tools.build:gradle:0.5.+', + }, +}, +, +apply plugin: 'android-library', +, +repositories {, + mavenCentral(), +}, +, +dependencies {, + compile files('libs/disklrucache-2.0.2.jar'), + compile 'com.android.support:support-v4:13.0.+', + compile project('volley'), +}, +, +, +android {, + compileSdkVersion 17, + buildToolsVersion = 17, +, + sourceSets {, + main {, + assets.srcDirs = ['assets'], + res.srcDirs = ['res'], + aidl.srcDirs = ['src'], + resources.srcDirs = ['src'], + renderscript.srcDirs = ['src'], + java.srcDirs = ['src'], + manifest.srcFile 'AndroidManifest.xml', +, + }, + }, +}]
[+++ b/gradle.properties, +ANDROIDX_TEST_VERSION=1.1.0-alpha4, +++ b/gradle.properties, +ANDROIDX_TEST_VERSION=1.1.0-alpha4, +++ b/instrumentation/build.gradle, + androidTestImplementation "androidx.test:runner:${ANDROIDX_TEST_VERSION}", + androidTestImplementation "androidx.test:rules:${ANDROIDX_TEST_VERSION}", + testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import javax.lang.model.element.AnnotationMirror;, + private static final ClassName CHECK_RESULT_CLASS_NAME =, + ClassName.get("android.support.annotation", "CheckResult");, + MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride), + .build());, +, + for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, + builder.addAnnotation(AnnotationSpec.get(mirror));, + }, +, + return builder.build();, + && !input.type.equals(TypeName.get(SafeVarargs.class)), + // @CheckResult isn't applicable for RequestBuilder because there is no, + // autoClone() in RequestBuilder., + && !input.type.equals(CHECK_RESULT_CLASS_NAME);, + .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import javax.lang.model.element.AnnotationMirror;, + private static final ClassName CHECK_RESULT_CLASS_NAME =, + ClassName.get("android.support.annotation", "CheckResult");, + MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride), + .build());, +, + for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, + builder.addAnnotation(AnnotationSpec.get(mirror));, + }, +, + return builder.build();, +
[+++ b/integration/recyclerview/lint.xml, + <issue id="GradleDependency" severity="ignore" />, +++ b/integration/recyclerview/lint.xml, + <issue id="GradleDependency" severity="ignore" />, +++ b/library/lint.xml, + <issue id="GradleDependency" severity="ignore"/>, +++ b/integration/recyclerview/lint.xml, + <issue id="GradleDependency" severity="ignore" />, +++ b/library/lint.xml, + <issue id="GradleDependency" severity="ignore"/>, +++ b/samples/contacturi/lint.xml, + <issue id="GradleDependency" severity="ignore"/>, +++ b/integration/recyclerview/lint.xml, + <issue id="GradleDependency" severity="ignore" />, +++ b/library/lint.xml, + <issue id="GradleDependency" severity="ignore"/>, +++ b/samples/contacturi/lint.xml, + <issue id="GradleDependency" severity="ignore"/>, +++ b/samples/flickr/lint.xml, + <issue id="GradleDependency" severity="ignore" />, +++ b/integration/recyclerview/lint.xml, + <issue id="GradleDependency" severity="ignore" />, +++ b/library/lint.xml, + <issue id="GradleDependency" severity="ignore"/>, +++ b/samples/contacturi/lint.xml, + <issue id="GradleDependency" severity="ignore"/>, +++ b/samples/flickr/lint.xml, + <issue id="GradleDependency" severity="ignore" />, +++ b/samples/gallery/lint.xml, + <issue id="GradleDependency" severity="ignore" />, +++
[+++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import static junit.framework.Assert.assertFalse;, +import static junit.framework.Assert.assertTrue;, +, + @Test, + public void testDelegatesIsPausedToRequestTracker() {, + when(requestTracker.isPaused()).thenReturn(true);, + assertTrue(manager.isPaused());, + when(requestTracker.isPaused()).thenReturn(false);, + assertFalse(manager.isPaused());, + }, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import static junit.framework.Assert.assertFalse;, +import static junit.framework.Assert.assertTrue;, +, + @Test, + public void testDelegatesIsPausedToRequestTracker() {, + when(requestTracker.isPaused()).thenReturn(true);, + assertTrue(manager.isPaused());, + when(requestTracker.isPaused()).thenReturn(false);, + assertFalse(manager.isPaused());, + }, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/LifecycleTest.java, + private ActivityFragmentLifecycle lifecycle;, + lifecycle = new ActivityFragmentLifecycle();, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import static junit.framework.Assert.assertFalse;, +import static junit.framework.Assert.assertTrue;, +, + @Test, + public void testDelegatesIsPausedToRequestTracker() {, + when(requestTracker.isPaused()).thenReturn(true);, + assertTrue(manager.isPaused());, + when(requestTracker.isPaused()).thenReturn(false);, + assertFalse(manager.isPaused());, + }, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/LifecycleTest.java, + private ActivityFragmentLifecycle lifecycle;, + lifecycle = new
[+++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]instrumentation[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>, + <suppress files=".*[/\\]instrumentation[/\\]src[/\\]androidTest[/\\].*[/\\]ResourceIds" checks=".*"/>, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]instrumentation[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>, + <suppress files=".*[/\\]instrumentation[/\\]src[/\\]androidTest[/\\].*[/\\]ResourceIds" checks=".*"/>, +++ b/instrumentation/build.gradle, +apply plugin: 'com.android.application', +, +dependencies {, + // Appcompat is required to ensure that Glide's runtime detection the v7 support Drawable, + // loading classes functions. It's not clear why androidTestCompile isn't sufficient, but for, + // whatever reason, compile is the only dependency that seems to work., + compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}", + androidTestCompile project(':library'), + androidTestCompile "org.mockito:mockito-android:${MOCKITO_ANDROID_VERSION}", + androidTestCompile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", + androidTestCompile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}", + androidTestCompile 'com.android.support.test:runner:0.5', + androidTestCompile 'com.android.support.test:rules:0.5', + androidTestCompile "com.google.truth:truth:${TRUTH_VERSION}", +}, +, +android {, +
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Context context, DecodeFormat decodeFormat, int logLevel) {, + glideContext = new GlideContext(context, registry, imageViewTargetFactory, options, engine,, + this, logLevel);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Context context, DecodeFormat decodeFormat, int logLevel) {, + glideContext = new GlideContext(context, registry, imageViewTargetFactory, options, engine,, + this, logLevel);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import android.util.Log;, +public final class GlideBuilder {, + private int logLevel = Log.INFO;, + GlideBuilder(Context context) {, + /**, + * Sets a log level constant from those in {@link Log} to indicate the desired log verbosity., + *, + * <p>The level must be one of {@link Log#VERBOSE}, {@link Log#DEBUG}, {@link Log#INFO},,
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java, + static final int MIN_FRAME_DELAY = 2;]
[+++ b/gradle.properties, +VERSION_NAME=4.6.1, +VERSION_MINOR=6, +VERSION_PATCH=1]
[+++ b/LICENSE, +---------------------------------------------------------------------------------------------, +License for third_party/gif_encoder/AnimatedGifEncoder.java and, +third_party/gif_encoder/LZWEncoder.java:, +, +No copyright asserted on the source code of this class. May be used for any, +purpose, however, refer to the Unisys LZW patent for restrictions on use of, +the associated LZWEncoder class. Please forward any corrections to, +kweiner@fmsware.com., +, +-----------------------------------------------------------------------------, +License for third_party/gif_encoder/NeuQuant.java, +, +Copyright (c) 1994 Anthony Dekker, +, +NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See, +"Kohonen neural networks for optimal colour quantization" in "Network:, +Computation in Neural Systems" Vol. 5 (1994) pp 351-367. for a discussion of, +the algorithm., +, +Any party obtaining a copy of
[+++ b/library/src/main/AndroidManifest.xml, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + package="com.bumptech.glide">, + <uses-sdk android:minSdkVersion="14" />, +++ b/library/src/main/AndroidManifest.xml, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + package="com.bumptech.glide">, + <uses-sdk android:minSdkVersion="14" />, +++ b/library/src/main/java/com/bumptech/glide/request/target/BaseTarget.java, + * {@link com.bumptech.glide.load.engine.Resource} loaded into it using {@link, + * com.bumptech.glide.RequestManager#clear(Target)}., + * {@link com.bumptech.glide.request.target.ViewTarget} or {@link, + * com.bumptech.glide.request.target.ImageViewTarget} are preferable., + * @deprecated Use {@link CustomViewTarget} if loading the content into a view, the download API if, + * in the background, + * (http://bumptech.github.io/glide/doc/getting-started.html#background-threads), or a a fully, + * implemented {@link Target} for any specialized use-cases. Using BaseView is unsafe if the, + * user does not implement {@link #onLoadCleared}, resulting in
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sun Feb 11 17:13:25 PST 2018, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.5.1-all.zip, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sun Feb 11 17:13:25 PST 2018, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.5.1-all.zip, +++ b/settings.gradle, + ignoreExitValue true]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/README.md, +Note: Make sure your Android SDK has the Android Support Repository installed, and that your `$ANDROID_HOME` environment variable is pointing at the SDK or add a `local.properties` file in the root project with a `sdk.dir=...` line., +, +Samples, +-------, +Follow the steps in the 'Build' section to setup the project and then:, +, +```, +gradlew :samples:flickr:run, +gradlew :samples:giphy:run, +gradlew :samples:svg:run, +```, +++ b/README.md, +Note: Make sure your Android SDK has the Android Support Repository installed, and that your `$ANDROID_HOME` environment variable is pointing at the SDK or add a `local.properties` file in the root project with a
[+++ b/.travis.yml, + - build-tools-25.0.2, + - android-25, +++ b/.travis.yml, + - build-tools-25.0.2, + - android-25, +++ b/gradle.properties, +SUPPORT_V4_VERSION=25.1.1, +SUPPORT_V7_VERSION=25.1.1, +ANDROID_GRADLE_VERSION=2.2.3, +COMPILE_SDK_VERSION=25, +BUILD_TOOLS_VERSION=25.0.2, +TARGET_SDK_VERSION=25, +++ b/.travis.yml, + - build-tools-25.0.2, + - android-25, +++ b/gradle.properties, +SUPPORT_V4_VERSION=25.1.1, +SUPPORT_V7_VERSION=25.1.1, +ANDROID_GRADLE_VERSION=2.2.3, +COMPILE_SDK_VERSION=25, +BUILD_TOOLS_VERSION=25.0.2, +TARGET_SDK_VERSION=25, +++ b/library/src/main/java/com/bumptech/glide/module/ManifestParser.java, + } catch (InstantiationException e) {, + throw new RuntimeException("Unable to instantiate GlideModule implementation for " + clazz,, + e);, + // These can't be combined until API minimum is 19., + } catch (IllegalAccessException e) {]
[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + .listener(new RequestListener<String, GifDrawable>() {, + public boolean onResourceReady(GifDrawable resource, String model, Target target,, + GifDrawable firstResult = mock(GifDrawable.class);, + Resource<GifDrawable> firstResource = mock(Resource.class);, + GifDrawable secondResult = mock(GifDrawable.class);, + Resource<GifDrawable> secondResource = mock(Resource.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + .listener(new RequestListener<String, GifDrawable>() {, + public boolean onResourceReady(GifDrawable resource, String model, Target target,, + GifDrawable firstResult = mock(GifDrawable.class);, + Resource<GifDrawable> firstResource = mock(Resource.class);, + GifDrawable secondResult = mock(GifDrawable.class);, + Resource<GifDrawable> secondResource = mock(Resource.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + drawable.setLoopCount(GifDrawable.LOOP_INTRINSIC);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + .listener(new RequestListener<String, GifDrawable>() {, + public boolean onResourceReady(GifDrawable resource, String model, Target target,, + GifDrawable firstResult = mock(GifDrawable.class);, + Resource<GifDrawable>
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java, +package com.bumptech.glide.load.resource.bitmap;, +, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.when;, +, +import org.robolectric.RobolectricTestRunner;, +, +import android.annotation.TargetApi;, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.Canvas;, +import android.graphics.Color;, +import android.graphics.Paint;, +import android.graphics.Rect;, +, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.robolectric.RuntimeEnvironment;, +import org.robolectric.annotation.Config;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE), +public class CircleCropTest {, + @Mock private BitmapPool bitmapPool;, +, + private Context context;, + private CircleCrop circleCrop;, +, + @Before, + public void setup() {, + MockitoAnnotations.initMocks(this);, + context = RuntimeEnvironment.application;, + circleCrop = new CircleCrop(context);, + }, +, + @Test, + public void
[+++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperTransformationTest.java, + String expectedId = "testID";, + BitmapPool pool = mock(BitmapPool.class);, + GifBitmapWrapperTransformation transformation = new GifBitmapWrapperTransformation(pool, bitmapTransformation);, +, + assertEquals(expectedId, transformation.getId());, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperTransformationTest.java, + String expectedId = "testID";, + BitmapPool pool = mock(BitmapPool.class);, + GifBitmapWrapperTransformation transformation = new GifBitmapWrapperTransformation(pool, bitmapTransformation);, +, + assertEquals(expectedId, transformation.getId());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/GlideBitmapDrawableTranscoderTest.java, +import org.junit.Before;, + private GlideBitmapDrawableTranscoder transcoder;, +, + @Before, + public void setUp() {, + transcoder = new GlideBitmapDrawableTranscoder(Robolectric.application.getResources(), mock(BitmapPool.class));, + }, +, + @Test, + public void testHasValidId() {, + Util.assertClassHasValidId(GlideBitmapDrawableTranscoder.class, transcoder.getId());,
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/CacheLoaderTest.java, +import static org.mockito.Matchers.anyMapOf;, +import java.util.HashMap;, + private HashMap<String, Object> options;, + options = new HashMap<String, Object>();, + cacheLoader.load(key, decoder, width, height, options);, + verify(decoder).decode(eq(result), eq(width), eq(height), eq(options));, + when(decoder.decode(eq(file), eq(width), eq(height), eq(options))).thenReturn(expected);, + assertEquals(expected, cacheLoader.load(key, decoder, width, height, options));, + assertNull(cacheLoader.load(key, decoder, 100, 100, options));, + when(decoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), + .thenThrow(new IOException("Test"));, + cacheLoader.load(key, decoder, 100, 100, options);, + when(decoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), + .thenReturn(null);, + cacheLoader.load(key, decoder, 100, 101, options);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/CacheLoaderTest.java, +import static org.mockito.Matchers.anyMapOf;, +import java.util.HashMap;, + private HashMap<String, Object> options;, + options = new HashMap<String, Object>();, + cacheLoader.load(key, decoder, width, height,
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java, +import com.bumptech.glide.request.target.Target;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, + @Mock, + MockitoAnnotations.initMocks(this);, + Resource<Bitmap> resource = mockResource(100, 100);, + Resource<Bitmap> resource = mockResource(1, 2);, + final Resource<Bitmap> resource = mockResource(223, 4123);, + assertEquals(resource.get(), toTransform);, + return resource.get();, +, + Resource<Bitmap> resource = mockResource(100, 100);, +, + @Test, + public void testCallsTransformWithGivenBitmapWidthIfWidthIsSizeOriginal() {, + SizeTrackingTransform transform = new SizeTrackingTransform();, +, + int expectedWidth = 200;, + Resource<Bitmap> resource = mockResource(expectedWidth, 300);, + transform.transform(resource, Target.SIZE_ORIGINAL, 500);, +, + assertEquals(expectedWidth, transform.givenWidth);, + }, +, + @Test, + public void testCallsTransformWithGivenBitmapHeightIfHeightIsSizeOriginal() {, + SizeTrackingTransform transform = new SizeTrackingTransform();, +, + int expectedHeight =
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + // TODO: call cancel on the client when this method is called on a background thread. See #257]
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +import com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder;, +import com.bumptech.glide.load.resource.gif.StreamGifDecoder;, + /**, + * Disables resource decoders that return animated resources so any resource returned will be, + * static., + *, + * <p> To disable transitions (fades etc) use, + * {@link com.bumptech.glide.TransitionOptions#dontTransition()}</p>, + */, + public final CHILD dontAnimate() {, + set(ByteBufferGifDecoder.KEY_DISABLE_ANIMATION, true);, + set(StreamGifDecoder.KEY_DISABLE_ANIMATION, true);, + return selfOrThrowIfLocked();, + }, +, +++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +import com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder;, +import com.bumptech.glide.load.resource.gif.StreamGifDecoder;, + /**, + * Disables resource decoders that return animated resources so any resource returned will be, + * static., + *, + * <p> To disable transitions (fades etc) use, +
[+++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java, + if (animatable != null) {, + animatable.stop();, + }, +++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java, + if (animatable != null) {, + animatable.stop();, + }, +++ b/library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java, +import static org.mockito.Mockito.never;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, + @Mock private AnimatedDrawable animatedDrawable;, + MockitoAnnotations.initMocks(this);, +, + @Test, + public void onLoadCleared_withAnimatableDrawable_stopsDrawable() {, + target.onResourceReady(animatedDrawable, /*transition=*/ null);, + verify(animatedDrawable).start();, + verify(animatedDrawable, never()).stop();, +, + target.onLoadCleared(/*placeholder=*/ null);, +, + verify(animatedDrawable).stop();, + }, +]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static org.mockito.Mockito.reset;, +import android.view.ViewGroup.LayoutParams;, +import android.widget.ImageView;, +import org.mockito.ArgumentMatchers;, +, + @Test, + public void loadIntoView_withoutSkipMemoryCache_loadsFromMemoryCacheIfPresent() {, + final ImageView imageView = new ImageView(context);, + imageView.setLayoutParams(new LayoutParams(100, 100));, +, + concurrency.loadOnMainThread(, + GlideApp.with(context), + .load(ResourceIds.raw.canonical), + .listener(requestListener), + .dontTransform(),, + imageView);, +, + // Casting avoids a varags array warning., + reset((RequestListener) requestListener);, +, + // Run on the main thread, since this is already cached, we shouldn't need to try to wait. If we, + // do end up re-using the old Target, our wait will always timeout anyway if we use, + // loadOnMainThread. If
[+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, +package com.bumptech.glide.integration.volley;, +, +import com.android.volley.Request;, +import com.android.volley.Request.Priority;, +, +import java.io.InputStream;, +, +/**, + * Used to construct a custom Volley request, such as for authentication header decoration., + */, +public interface VolleyRequestFactory {, +, + /**, + * Returns a Volley request for the given image url. The given future should be set as a, + * listener or called when the request completes., + */, + Request<byte[]> create(String url, VolleyRequestFuture<InputStream> future, Priority priority);, +, +}, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, +package com.bumptech.glide.integration.volley;, +, +import com.android.volley.Request;, +import com.android.volley.Request.Priority;, +, +import java.io.InputStream;, +, +/**, + * Used to construct a custom
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + * @see com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + * @see com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable;, +import com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder;, + transcoderRegistry.register(Bitmap.class, GlideBitmapDrawable.class,, + new GlideBitmapDrawableTranscoder(context.getResources(), bitmapPool));, + new GlideBitmapDrawableTranscoder(context.getResources(), bitmapPool)));, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + * @see com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable;, +import com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder;, + transcoderRegistry.register(Bitmap.class, GlideBitmapDrawable.class,, + new GlideBitmapDrawableTranscoder(context.getResources(), bitmapPool));, + new GlideBitmapDrawableTranscoder(context.getResources(), bitmapPool)));, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable.java, +package com.bumptech.glide.load.resource.bitmap;, +, +import android.content.res.Resources;, +import android.graphics.Bitmap;, +import android.graphics.Canvas;, +import android.graphics.ColorFilter;, +import android.graphics.Paint;, +import android.graphics.PixelFormat;, +import android.graphics.Rect;, +import android.graphics.drawable.Drawable;, +import android.util.DisplayMetrics;, +import android.view.Gravity;, +, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +, +/**, + * A static {@link com.bumptech.glide.load.resource.drawable.GlideDrawable} for displaying a single image., + */, +public class GlideBitmapDrawable extends
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, +import com.bumptech.glide.load.model.stream.HttpGlideUrlLoader;, + * Returns a {@link RequestOptions} object with {@link #timeout(int)} set., + */, + public static RequestOptions timeoutOf(int timeout) {, + return new RequestOptions().timeout(timeout);, + }, +, + /**, + * <p>This is a component option specific to {@link VideoBitmapDecoder}. If the default video, + * decoder is replaced or skipped because of your configuration, this option may be ignored., + *, + * @see VideoBitmapDecoder#TARGET_FRAME, + * Sets the {@link DecodeFormat} to use when decoding {@link Bitmap} objects using, + * {@link Downsampler}., + *, + * <p>{@link DecodeFormat} is a request, not a
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, + @Test, + public void testPassesArgb888ToStrategyAsConfigForRequestsWithNullConfigsOnGet() {, + LruPoolStrategy strategy = mock(LruPoolStrategy.class);, + LruBitmapPool pool = new LruBitmapPool(100, strategy);, +, + Bitmap expected = createMutableBitmap();, + when(strategy.get(anyInt(), anyInt(), eq(Bitmap.Config.ARGB_8888))).thenReturn(expected);, + Bitmap result = pool.get(100, 100, null);, +, + assertEquals(expected, result);, + }, +, + @Test, + public void testPassesArgb8888ToStrategyAsConfigForRequestsWithNullConfigsOnGetDirty() {, + LruPoolStrategy strategy = mock(LruPoolStrategy.class);, + LruBitmapPool pool = new LruBitmapPool(100, strategy);, +, + Bitmap expected = createMutableBitmap();, + when(strategy.get(anyInt(), anyInt(), eq(Bitmap.Config.ARGB_8888))).thenReturn(expected);, + Bitmap result = pool.getDirty(100, 100, null);, +, + assertEquals(expected, result);, + },
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java, + assertThat(toCompress.compress(CompressFormat.PNG, 100, os)).isTrue();, + // TODO(b/71430152): Figure out whether or not this is supposed to pass in API 26 and fail in, + // API 27., + assumeTrue(Build.VERSION.SDK_INT != Build.VERSION_CODES.O_MR1);, + assertThat(toCompress.compress(CompressFormat.JPEG, 100, os)).isTrue();, + assertThat(toCompress.compress(CompressFormat.WEBP, 100, os)).isTrue();]
[+++ b/checkstyle.xml, + <property name="groups" value="*"/>, +++ b/checkstyle.xml, + <property name="groups" value="*"/>, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +++ b/checkstyle.xml, + <property name="groups" value="*"/>, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import java.io.File;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.nio.ByteBuffer;, +++ b/checkstyle.xml, + <property name="groups" value="*"/>, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import java.io.File;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.nio.ByteBuffer;, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +++ b/checkstyle.xml, + <property name="groups" value="*"/>, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import java.io.File;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.nio.ByteBuffer;, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +++ b/checkstyle.xml, + <property name="groups" value="*"/>, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import java.io.File;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.nio.ByteBuffer;, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +++
[+++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, + public List<Object> getPreloadItems(int start, int end) {, + assertEquals(11, start);, + assertEquals(21, end);, + return super.getPreloadItems(start, end);, + assertTrue(called.get());, + public int expectedPosition;, +, + public int[] getPreloadSize(Object item) {, + public List<Object> getPreloadItems(int start, int end) {, + return objects;, + public BitmapRequestBuilder getPreloadRequestBuilder(Object item) {, + assertEquals(objects.get(expectedPosition), item);, + expectedPosition++;, + preloader.onScroll(null, 1, 10, 30);, + public List<Object> getPreloadItems(int start, int end) {, + if (start == 40) {, + assertEquals(19, start);, + assertEquals(29, end);, + return super.getPreloadItems(start, end);, + public int[] getPreloadSize(Object item) {, + public List<Object> getPreloadItems(int start, int end) {, +
[+++ b/library/lint.xml, + <issue id="InlinedApi">, + <ignore path="src/com/bumptech/glide/resize/cache/LruMemoryCache.java" />, + </issue>, +++ b/library/lint.xml, + <issue id="InlinedApi">, + <ignore path="src/com/bumptech/glide/resize/cache/LruMemoryCache.java" />, + </issue>, +++ b/library/src/com/bumptech/glide/Glide.java, + * A class for monitoring the status of a request while images load., + *, + * @param <T> The type of the model being loaded, + */, + public static abstract class RequestListener<T> {, +, + /**, + * Called when an exception occurs during a load. Will only be called if we currently want to display an image, + * for the given model in the given target. It is recommended to
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, + * @see #centerInside(Context) (android.content.Context), + * @param context Any {@link android.content.Context}., + * @see #transform(Class, com.bumptech.glide.load.Transformation), + * @see #optionalCenterInside(Context) (android.content.Context), + *, + * @deprecated Use {@link #centerInside()}}, + */, + @Deprecated, + @GlideOption(, + staticMethodName = "centerInsideTransform",, + memoizeStaticMethod = true, + ), + public CHILD centerInside(@SuppressWarnings("unused") Context context) {, + return centerInside();, + }, +, + /**, + * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterInside} to all default types and, + * throws an exception if asked to transform an unknown type., + *, + * <p>This will override previous calls to {@link #dontTransform()}., + *]
[+++ b/CHANGELOG.md, +# Change Log, +, +## [v4.5.0](https://github.com/bumptech/glide/tree/HEAD), +, +[Full Changelog](https://github.com/bumptech/glide/compare/v4.4.0...v4.5.0), +, +## Features, +* Add an API to pause all requests for a given `Activity` or `Fragment` to allow callers to manually reduce memory when their Fragment or Application is backgrounded (@kurtisnelson, 09e33a2133eb1d4005b227439c0c53c9c4e8c89b) , +* Fully support Bitmap re-use for `RGBA_F16` `Bitmap`s. Previously Glide supported decoding `RGBA_F16` `Bitmap`s, but would not re-use any stored in the `BitmapPool` when doing so (cc0288c3b4bfb82a109a3f279af52c57fc5e1499), +* Support decoding Videos from resources as `AssetFileDescriptor`s (6e9866b5a19d06625006a9a8c605db21047df74b), +* Added support for the [`MediaMetadataRetriever#getScaledFrameAtTime`][2] method added in OMR1 to marginally reduce memory usage when decoding video
[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import org.robolectric.shadows.ShadowBitmap;, + GlideShadowLooper.class, GlideTest.MutableShadowBitmap.class }), + @Implements(Bitmap.class), + public static class MutableShadowBitmap extends ShadowBitmap {, +, + @Implementation, + public static Bitmap createBitmap(int width, int height, Bitmap.Config config) {, + Bitmap bitmap = ShadowBitmap.createBitmap(width, height, config);, + Robolectric.shadowOf(bitmap).setMutable(true);, + return bitmap;, + }, + }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import org.robolectric.shadows.ShadowBitmap;, + GlideShadowLooper.class, GlideTest.MutableShadowBitmap.class }), + @Implements(Bitmap.class), + public static class MutableShadowBitmap extends ShadowBitmap {, +, + @Implementation, + public static Bitmap createBitmap(int width, int height, Bitmap.Config config) {, + Bitmap bitmap = ShadowBitmap.createBitmap(width, height, config);, + Robolectric.shadowOf(bitmap).setMutable(true);, + return bitmap;, + }, + }, +, +++
[+++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=27.1.1]
[+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + // Either the model isn't null, or there was no fallback drawable set., + // The model isn't null, no fallback drawable was set or no error drawable was set., + if (error == null) {, + error = getPlaceholderDrawable();, + }, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + // Either the model isn't null, or there was no fallback drawable set., + // The model isn't null, no fallback drawable was set or no error drawable was set., + if (error == null) {, + error = getPlaceholderDrawable();, + }, +++ b/library/src/test/java/com/bumptech/glide/GlideTest.java, + public void testNullModelResolvesToUsePlaceholder() {, + Drawable
[+++ b/library/src/androidTest/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java, +import static org.mockito.Matchers.any;, + @Test, + public void testClearsThumbRequestOnFullRequestComplete_withNullParent() {, + coordinator.onRequestSuccess(full);, + verify(thumb).clear();, + }, +, + @Test, + public void testNotifiesParentOnFullRequestComplete_withNonNullParent() {, + coordinator = new ThumbnailRequestCoordinator(parent);, + coordinator.setRequests(full, thumb);, + coordinator.onRequestSuccess(full);, + verify(parent).onRequestSuccess(eq(coordinator));, + }, +, + @Test, + public void testDoesNotClearThumbRequestOnFullRequestComplete_withNonNullParent() {, + coordinator = new ThumbnailRequestCoordinator(parent);, + coordinator.setRequests(full, thumb);, + coordinator.onRequestSuccess(full);, + verify(thumb, never()).clear();, + }, +, + @Test, + public void testDoesNotClearThumbOnThumbRequestComplete() {, + coordinator.onRequestSuccess(thumb);, + verify(thumb, never()).clear();, + }, +, + @Test, + public void testDoesNotNotifyParentOnThumbRequestComplete() {, + coordinator = new ThumbnailRequestCoordinator(parent);, + coordinator.setRequests(full, thumb);, + coordinator.onRequestSuccess(thumb);, +, + verify(parent,
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java, +import android.support.v4.content.ContextCompat;, +import com.bumptech.glide.util.Preconditions;, + Drawable drawable =, + Preconditions.checkNotNull(ContextCompat.getDrawable(context, ResourceIds.raw.canonical));]
[+++ b/library/build.gradle, +apply plugin: 'pmd', +, +, + findbugsTestDebug {, + enabled = false, +, + check.dependsOn('findbugs'), +, + task pmd(type: Pmd) {, +, + description 'Run pmd', + group 'verification', +, + // If ruleSets is not empty, it seems to contain some, + // defaults which override rules in the ruleset file..., + ruleSets = [], + ruleSetFiles = files('pmd-ruleset.xml'), + source = fileTree('src/main/java'), +, + reports {, + xml.enabled = false, + html.enabled = true, + }, + }, +, + pmdTestDebug {, + enabled = false, + }, +, + check.dependsOn('pmd'), +++ b/library/build.gradle, +apply plugin:
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java, + trimToSize(getMaxSize() / 2);]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/com/bumptech/glide/Glide.java, + * starting point and example., + *, + * Note - This class is not thread safe., + /**, + * Get the singleton., + *, + * @return the singleton, + */, + * @param requestQueue The {@link RequestQueue} to set, + * Note - If an {@link ImageManager} has not yet been set via, + * {@link #setImageManager(com.bumptech.glide.resize.ImageManager)}, one will be created during this call unless, + * you specify a {@link ImageLoader} that does not use {@link #getRequestQueue(android.content.Context)} via, + * {@link Request#resizeWith(com.bumptech.glide.loader.image.ImageLoader)}, + *, + * Note - If the model is
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/CONTRIBUTING.md, +# Contributing, +Contributions of all types are welcome. We use GitHub as our bug and feature tracker both for code and for other, +aspects of the library (documentation, the wiki etc.), +, +## Asking Questions, +The best way to ask general questions is to send an email to our [mailing list][2], or join [#glide-library on, +freenode.org.][3], +, +## Filing issues, +To file an issue, please use our [issue template link][1] and fill out the template as much as possible. The more,
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, + @Test, + public void clearDiskCache_doesNotPreventFutureLoads(), + throws ExecutionException, InterruptedException, TimeoutException {, + FutureTarget<Drawable> future = GlideApp.with(context), + .load(ResourceIds.raw.canonical), + .diskCacheStrategy(DiskCacheStrategy.DATA), + .submit(IMAGE_SIZE_PIXELS, IMAGE_SIZE_PIXELS);, + future.get(TIMEOUT_MS, TIMEOUT_UNIT);, + GlideApp.with(context).clear(future);, +, + clearMemoryCacheOnMainThread();, + GlideApp.get(context).clearDiskCache();, +, + future = GlideApp.with(context), + .load(ResourceIds.raw.canonical), + .diskCacheStrategy(DiskCacheStrategy.DATA), + .submit(IMAGE_SIZE_PIXELS, IMAGE_SIZE_PIXELS);, + future.get(TIMEOUT_MS, TIMEOUT_UNIT);, +, + GlideApp.with(context).clear(future);, + clearMemoryCacheOnMainThread();, +, + GlideApp.with(context), + .load(ResourceIds.raw.canonical), + .listener(requestListener), + .diskCacheStrategy(DiskCacheStrategy.DATA), + .submit(IMAGE_SIZE_PIXELS, IMAGE_SIZE_PIXELS), + .get(TIMEOUT_MS, TIMEOUT_UNIT);, +, + verify(requestListener).onResourceReady(, + any(Drawable.class), any(), anyTarget(), eq(DataSource.DATA_DISK_CACHE), anyBoolean());, + }, +]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java]
[+++ b/build.gradle, +, + gradle.projectsEvaluated {, + tasks.withType(JavaCompile) {, + if (!name.contains('Test')) {, + options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation', + }, + }, + }, +++ b/build.gradle, +, + gradle.projectsEvaluated {, + tasks.withType(JavaCompile) {, + if (!name.contains('Test')) {, + options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation', + }, + }, + }, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + private GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> thumbnailRequestBuilder;, +++ b/build.gradle, +, + gradle.projectsEvaluated {, + tasks.withType(JavaCompile) {, + if (!name.contains('Test')) {, + options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation', + }, + }, + }, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + private GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> thumbnailRequestBuilder;, +++ b/library/src/main/java/com/bumptech/glide/GenericTranscodeRequest.java, + @SuppressWarnings("unchecked"), + private
[+++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, +import android.support.annotation.Nullable;, + * request was removed or invalid or {@code false} if the request was not found., + public boolean clearRemoveAndRecycle(@Nullable Request request) {, + // Nothing to do for null requests., + return true;, +++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, +import android.support.annotation.Nullable;, + * request was removed or invalid or {@code false} if the request was not found., + public boolean clearRemoveAndRecycle(@Nullable Request request) {, + // Nothing to do for null requests., + return true;, +++ b/library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java, + public void testClearRemoveAndRecycle_withNullRequest_doesNothingAndReturnsTrue() {, + assertThat(tracker.clearRemoveAndRecycle(null)).isTrue();]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +import com.bumptech.glide.annotation.GlideType;, + * {@link GlideType}:, + * {@link GlideType}., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +import com.bumptech.glide.annotation.GlideType;, + * {@link GlideType}:, + * {@link GlideType}., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import com.bumptech.glide.annotation.GlideOption;, +import com.bumptech.glide.annotation.GlideType;, + if (executableElement.getAnnotation(GlideOption.class) != null) {, + } else if (executableElement.getAnnotation(GlideType.class) != null) {, + validateStaticVoid(executableElement, GlideOption.class);, + throw new IllegalArgumentException("@GlideOption methods must take a ", + throw new IllegalArgumentException("@GlideOption methods must take a", + validateStaticVoid(executableElement, GlideType.class);, + throw new IllegalArgumentException("@GlideType methods must take a", + throw new IllegalArgumentException("@GlideType methods must take a", +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +import com.bumptech.glide.annotation.GlideType;, + * {@link GlideType}:, + * {@link GlideType}., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import com.bumptech.glide.annotation.GlideOption;,
[+++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, + verify(requestTracker).runRequest(any(Request.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, + verify(requestTracker).runRequest(any(Request.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.manager.Lifecycle;, + private RequestManager requestManager;, + Lifecycle lifecycle = mock(Lifecycle.class);, + requestManager = new RequestManager(getContext(), lifecycle);, + requestManager.resumeRequests();, + requestManager, + requestManager.load(file).into(target);, + requestManager.load(file).into(imageView);, + requestManager.load(url).into(target);, + requestManager.load(url).into(imageView);, + requestManager.load(uri).asBitmap().into(target);, + requestManager, + requestManager.load(uri).asBitmap().toBytes().into(target);, + requestManager.load(uri).into(target);, + requestManager.load(uri).into(imageView);, + requestManager, + requestManager.load(string).into(imageView);, + requestManager.load(integer).into(target);, + requestManager.load(integer).into(imageView);, + requestManager.load(bytes).into(target);, + requestManager.load(bytes).into(imageView);, + requestManager.load(bytes, id).into(target);, + requestManager.load(bytes, id).into(imageView);, + requestManager.load(unregistered).into(target);, + requestManager, + requestManager.load(0.5f).into(target);, + requestManager, + requestManager, + requestManager, + requestManager, + requestManager.load((Double) null).into(target);, + requestManager.load((Float) null).into(target);, + requestManager.load((Double) null).into(target);, + requestManager, + requestManager, + requestManager, + requestManager.load(data).into(target);, +++
[+++ b/library/project.properties, +target=android-18]
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.view.ViewGroup;, +import com.bumptech.glide.loader.model.FileLoader;, +import com.bumptech.glide.loader.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.model.ModelLoader;, +import com.bumptech.glide.loader.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.model.ResourceLoader;, +import com.bumptech.glide.loader.model.StringLoader;, +import com.bumptech.glide.loader.model.UriLoader;, +import com.bumptech.glide.loader.stream.StreamLoader;, +import com.bumptech.glide.loader.transformation.CenterCrop;, +import com.bumptech.glide.loader.transformation.FitCenter;, +import com.bumptech.glide.loader.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.transformation.None;, +import com.bumptech.glide.loader.transformation.TransformationLoader;, +import com.bumptech.glide.presenter.target.Target;, +, +import java.util.Map;, +import java.util.WeakHashMap;, + * A singleton to present a simple static interface for Glide {@link Glide.Request} and to create and manage an, + private final Map<Target, Metadata> metadataTracker = new WeakHashMap<Target, Metadata>();, + * public void onException(Exception e, T model, Target target) {, + loaderFactory.register(File.class, new FileLoader.Factory());, + loaderFactory.register(Integer.class, new
[+++ b/gradle.properties, +VERSION_NAME=4.0.0]
[+++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/LICENSE, +Copyright 2014 Google, Inc. All rights reserved., +THIS SOFTWARE IS PROVIDED BY GOOGLE, INC. ``AS IS'' AND ANY EXPRESS OR IMPLIED, +FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GOOGLE, INC. OR, +or implied, of Google, Inc., +++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++
[+++ b/samples/flickr/AndroidManifest.xml, + <activity android:name=".FlickrSearchActivity", +++ b/samples/flickr/AndroidManifest.xml, + <activity android:name=".FlickrSearchActivity", +++ /dev/null, +++ b/samples/flickr/AndroidManifest.xml, + <activity android:name=".FlickrSearchActivity", +++ /dev/null, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPathLoader.java, +package com.bumptech.flickr;, +, +import com.bumptech.flickr.api.Api;, +import com.bumptech.flickr.api.Photo;, +import com.bumptech.photos.loader.path.BasePathLoader;, +, +import java.io.File;, +, +/**, + * Created with IntelliJ IDEA., + * User: sam, + * Date: 1/6/13, + * Time: 11:55 AM, + * To change this template use File | Settings | File Templates., + */, +public class FlickrPathLoader extends BasePathLoader<Photo> {, + private final Api flickrApi;, + private final File cacheDir;, +, + public FlickrPathLoader(Api flickApi, File cacheDir) {, + this.flickrApi = flickApi;, + this.cacheDir
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.transcode.GifBitmapWrapperDrawableTranscoder;, +import com.bumptech.glide.load.resource.transcode.GifDataDrawableTranscoder;, + new GifBitmapWrapperDrawableTranscoder(new BitmapDrawableTranscoder(context.getResources(), bitmapPool),, + new GifDataDrawableTranscoder()));, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.transcode.GifBitmapWrapperDrawableTranscoder;, +import com.bumptech.glide.load.resource.transcode.GifDataDrawableTranscoder;, + new GifBitmapWrapperDrawableTranscoder(new BitmapDrawableTranscoder(context.getResources(), bitmapPool),, + new GifDataDrawableTranscoder()));, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResource.java, +package com.bumptech.glide.load.resource.bitmap;, +, +import android.graphics.drawable.BitmapDrawable;, +import com.bumptech.glide.Resource;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.util.Util;, +, +public class BitmapDrawableResource extends Resource<BitmapDrawable> {, + private BitmapDrawable drawable;, + private BitmapPool bitmapPool;, +, + public BitmapDrawableResource(BitmapDrawable drawable, BitmapPool bitmapPool) {, + this.drawable = drawable;, + this.bitmapPool = bitmapPool;, + }, +, + @Override, + public BitmapDrawable get() {, + return drawable;, + }, +, + @Override, + public int getSize() {, + return Util.getSize(drawable.getBitmap());, +
[+++ b/library/robolectric/src/com/bumptech/glide/ListPreloaderTest.java, + protected BitmapRequestBuilder getRequestBuilder(Object item) {, + return mock(BitmapRequestBuilder.class);, + protected BitmapRequestBuilder getRequestBuilder(Object item) {, + return mock(BitmapRequestBuilder.class);, + protected BitmapRequestBuilder getRequestBuilder(Object item) {, + protected BitmapRequestBuilder getRequestBuilder(Object item) {, + return mock(BitmapRequestBuilder.class);, +++ b/library/robolectric/src/com/bumptech/glide/ListPreloaderTest.java, + protected BitmapRequestBuilder getRequestBuilder(Object item) {, + return mock(BitmapRequestBuilder.class);, + protected BitmapRequestBuilder getRequestBuilder(Object item) {, + return mock(BitmapRequestBuilder.class);, + protected BitmapRequestBuilder getRequestBuilder(Object item) {, + protected BitmapRequestBuilder getRequestBuilder(Object item) {, + return mock(BitmapRequestBuilder.class);, +++ /dev/null, +++ b/library/robolectric/src/com/bumptech/glide/ListPreloaderTest.java, + protected BitmapRequestBuilder getRequestBuilder(Object item) {, + return mock(BitmapRequestBuilder.class);, + protected BitmapRequestBuilder getRequestBuilder(Object item) {, + return mock(BitmapRequestBuilder.class);, + protected BitmapRequestBuilder getRequestBuilder(Object item) {, +
[+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/MediaStoreUtil.java, +import com.bumptech.glide.request.target.Target;, + return width != Target.SIZE_ORIGINAL, + && height != Target.SIZE_ORIGINAL, + && width <= MINI_THUMB_WIDTH, + && height <= MINI_THUMB_HEIGHT;]
[+++ b/library/src/main/java/com/bumptech/glide/load/ImageHeaderParser.java, + RAW(false),]
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + Request.Builder requestBuilder = new Request.Builder().url(url.toStringUrl());, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + Request.Builder requestBuilder = new Request.Builder().url(url.toStringUrl());, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + Request.Builder requestBuilder = new Request.Builder().url(url.toStringUrl());, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + Request.Builder requestBuilder = new Request.Builder().url(url.toStringUrl());, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + Request.Builder requestBuilder = new Request.Builder().url(url.toStringUrl());, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + Request.Builder requestBuilder = new Request.Builder().url(url.toStringUrl());, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + Request.Builder requestBuilder = new Request.Builder().url(url.toStringUrl());, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java, +++
[+++ b/.gitignore, +gen/*]
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + private static final String USER_AGENT_HEADER = "User-Agent";, + private static final String DEFAULT_USER_AGENT = System.getProperty("http.agent");, +, + boolean isUserAgentSet = false;, + String key = headerEntry.getKey();, + requestBuilder.addHeader(key, headerEntry.getValue());, + isUserAgentSet |= USER_AGENT_HEADER.equalsIgnoreCase(key);, + }, + if (!isUserAgentSet) {, + requestBuilder.addHeader(USER_AGENT_HEADER, DEFAULT_USER_AGENT);]
[+++ b/Makefile, +++ b/Makefile, +++ b/library/AndroidManifest.xml, + android:versionCode="4", + android:versionName="3.0.0" >, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/Makefile, +++ b/library/AndroidManifest.xml, + android:versionCode="4", + android:versionName="3.0.0" >, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/custom_rules.xml, +++ b/Makefile, +++ b/library/AndroidManifest.xml, + android:versionCode="4", + android:versionName="3.0.0" >, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/custom_rules.xml, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.os.ParcelFileDescriptor;, +import android.view.View;, +import com.android.volley.RequestQueue;, +import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.ResourceBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorFileLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorModelLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorStringLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorUriLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamByteArrayLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamFileLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamModelLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamStringLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamUriLoader;, +import com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.bitmap.transformation.CenterCrop;, +import com.bumptech.glide.loader.bitmap.transformation.FitCenter;, +import com.bumptech.glide.loader.bitmap.transformation.MultiTransformationLoader;, +import
[+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/ExtensionWithType.java, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/ExtensionWithType.java, +++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/ExtensionWithType.java]
[+++ b/src/com/bumptech/photos/PhotoManager.java, + * Loads the image for the given id assuming its width and height are exactly those given, + * @param path - the path to the image, + * @param width - the width of the image on disk, + * @param height - the height of the image on disk, + * @param cb - the callback called when the load completes, + * @return A token tracking this request, + */, + public Object getImageExact(final String path, int width, int height, final LoadedCallback cb) {, + final Object token = cb;, + final String
[+++ b/.travis.yml, +before_script:, + - ./scripts/travis_before_script.sh, +, +++ b/.travis.yml, +before_script:, + - ./scripts/travis_before_script.sh, +, +++ b/debug.keystore, +++ b/.travis.yml, +before_script:, + - ./scripts/travis_before_script.sh, +, +++ b/debug.keystore, +++ b/scripts/travis_before_script.sh, +#!/usr/bin/env bash, +# Copies our debug.keystore file to its expected location to avoid a bug , +# where the Android build system seems to occasionally fail to generate it., +, +set -e, +, +cp debug.keystore ~/.android/debug.keystore]
[+++ b/build.gradle, + jcenter(), + // TODO: remove this when robolectric 2.4 is released., + maven {, + url "https://oss.sonatype.org/content/repositories/snapshots", + }, +, + classpath 'org.robolectric:robolectric-gradle-plugin:0.11.+', + classpath 'com.android.tools.build:gradle:0.12.+', + }, +}, +, +allprojects {, + repositories {, + jcenter(), + // TODO: remove this when robolectric 2.4 is released., + maven {, + url "https://oss.sonatype.org/content/repositories/snapshots", + }, + gradleVersion = '1.12', +++ b/build.gradle, + jcenter(), + // TODO: remove this when robolectric 2.4 is released., + maven {, + url "https://oss.sonatype.org/content/repositories/snapshots", + }, +, + classpath 'org.robolectric:robolectric-gradle-plugin:0.11.+', + classpath 'com.android.tools.build:gradle:0.12.+', + }, +}, +, +allprojects {, + repositories
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/CanonicalBitmap.java, + int resourceId = ResourceIds.raw.canonical;, + Bitmap result = BitmapFactory.decodeResource(context.getResources(), resourceId, options);, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/CanonicalBitmap.java, + int resourceId = ResourceIds.raw.canonical;, + Bitmap result = BitmapFactory.decodeResource(context.getResources(), resourceId, options);, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java, + int canonical = getResourceId("raw", "canonical");]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java|TransitionOptions.java|BaseDecodeOptions.java|RequestOptions.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, +
[+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + * android.graphics.Bitmap.Config#HARDWARE} on Android O+., +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + * android.graphics.Bitmap.Config#HARDWARE} on Android O+., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + // ResourceType in DecodeCallback below is required for compilation to work with gradle., + return path.load(, + rewinder, options, width, height, new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + * android.graphics.Bitmap.Config#HARDWARE} on Android O+., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + // ResourceType in DecodeCallback below is required for compilation to work with gradle., + return path.load(, + rewinder, options, width, height, new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + @TargetApi(Build.VERSION_CODES.O), + private static void assertNotHardwareConfig(Bitmap.Config config) {, + if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {, + return;, + }, +, +,
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +import org.robolectric.shadows.ShadowActivityManager;, + // Keep the bitmap pool size constant, even though normally it would change., + harness.byteArrayPoolSizeBytes *= 2;, + @Test, + public void testByteArrayPoolSize_withLowRamDevice_isHalfTheSpecifiedBytes() {, + ShadowActivityManager activityManager = Shadows.shadowOf(harness.activityManager);, + activityManager.setMemoryClass(getLargeEnoughMemoryClass());, +, + Util.setSdkVersionInt(10);, +, + int byteArrayPoolSize = harness.getCalculator().getByteArrayPoolSize();, + assertThat(byteArrayPoolSize).isEqualTo(harness.byteArrayPoolSizeBytes / 2);, + }, +, + float totalBytes = totalScreenBytes + harness.byteArrayPoolSizeBytes;, + float totalMb = totalBytes / (1024 * 1024);, + float memoryClassMb = totalMb / harness.sizeMultiplier;, + int byteArrayPoolSizeBytes = MemorySizeCalculator.Builder.BYTE_ARRAY_POOL_SIZE_BYTES;, + .setByteArrayPoolSize(byteArrayPoolSizeBytes), +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +import org.robolectric.shadows.ShadowActivityManager;, + // Keep the bitmap pool size constant, even though normally it would
[+++ b/library/src/androidTest/java/com/bumptech/glide/util/UtilTest.java, +package com.bumptech.glide.util;, +, +import android.graphics.Bitmap;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +, +import static org.junit.Assert.assertEquals;, +, +@RunWith(RobolectricTestRunner.class), +public class UtilTest {, +, + @Test, + public void testReturnsCorrectBitmapSizeForDifferentDimensions() {, + int width = 100;, + int height = 100;, + Bitmap.Config config = Bitmap.Config.ARGB_8888;, +, + int initialSize = Util.getBitmapPixelSize(width, height, config);, + int sizeOne = Util.getBitmapPixelSize(width * 2, height, config);, + int sizeTwo = Util.getBitmapPixelSize(width, height * 2, config);, +, + assertEquals(4 * width * height, initialSize);, + assertEquals(2 * initialSize, sizeOne);, + assertEquals(2 * initialSize, sizeTwo);, + }, +, + @Test, + public void testReturnsCorrectBitmapSizeForAlpha8Bitmap()
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + context,]
[+++ b/glide/build.gradle, + [':third_party:gif_decoder', ':library'].collect { project(it) }, +++ b/glide/build.gradle, + [':third_party:gif_decoder', ':library'].collect { project(it) }, +++ b/integration/gifencoder/build.gradle, +apply plugin: 'com.android.library', +, +repositories {, + mavenCentral(), +}, +, +dependencies {, + compile project(':glide'), +}, +, +android {, + compileSdkVersion COMPILE_SDK_VERSION as int, + buildToolsVersion BUILD_TOOLS_VERSION, +, + sourceSets {, + main {, + java.srcDirs = ['src/main/java', '../../third_party/gif_encoder/src/main/java'], + }, + }, +, + defaultConfig {, + minSdkVersion MIN_SDK_VERSION as int, + targetSdkVersion TARGET_SDK_VERSION as int, +, + versionCode = VERSION_CODE, + versionName = VERSION_NAME, + }, +, + compileOptions {, + sourceCompatibility JavaVersion.VERSION_1_7, + targetCompatibility JavaVersion.VERSION_1_7, + }, +},
[+++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java, + RequestBuilder<Drawable> thumbnailRequest = GlideApp.with(this), + .decode(Bitmap.class);, + GlideApp.with(this), +++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java, + RequestBuilder<Drawable> thumbnailRequest = GlideApp.with(this), + .decode(Bitmap.class);, + GlideApp.with(this), +++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java, + GlideApp.with(this), + RequestBuilder<Drawable> gifItemRequest = GlideApp.with(this), + .asDrawable();, + new RecyclerViewPreloader<>(GlideApp.with(this), adapter, preloadSizeProvider, 4);, + GifAdapter(Activity activity, RequestBuilder<Drawable> requestBuilder,, + void setResults(Api.GifResult[] results) {, + GifViewHolder(View itemView) {]
[+++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +import android.support.annotation.Nullable;, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +import android.support.annotation.Nullable;, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/Option.java, +import android.support.annotation.Nullable;, +, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +import android.support.annotation.Nullable;, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/Option.java, +import android.support.annotation.Nullable;, +, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +import android.support.annotation.Nullable;, +, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +import android.support.annotation.Nullable;, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/Option.java, +import android.support.annotation.Nullable;, +, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +import android.support.annotation.Nullable;, +, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java, +import android.support.annotation.Nullable;, +, + void onDataReady(@Nullable T data);, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +import android.support.annotation.Nullable;, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/Option.java, +import android.support.annotation.Nullable;, +, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +import android.support.annotation.Nullable;, +, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java, +import android.support.annotation.Nullable;, +, + void onDataReady(@Nullable T data);,
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0,
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, + /**, + * Returns a {@link DrawableTransitionOptions} object that enables a cross fade animation., + *, + * @see #crossFade()., + */, + /**, + * Returns a {@link DrawableTransitionOptions} object that enables a cross fade animation., + *, + * @see #crossFade(int)., + */, + /**, + * Returns a {@link DrawableTransitionOptions} object that enables a cross fade animation., + *, + * @see #crossFade(int, int)., + */, + /**, + * Returns a {@link DrawableTransitionOptions} object that enables a cross fade animation., + *, + * @see #crossFade(DrawableCrossFadeFactory)., + */, + public static DrawableTransitionOptions
[+++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.0-rc3, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.0-rc3, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.0-rc3, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static com.bumptech.glide.testutil.TestUtil.assertStreamOf;, +import org.robolectric.RobolectricTestRunner;, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.0-rc3, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static com.bumptech.glide.testutil.TestUtil.assertStreamOf;, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/test/java/com/bumptech/glide/GlideTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.0-rc3, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static com.bumptech.glide.testutil.TestUtil.assertStreamOf;, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/test/java/com/bumptech/glide/GlideTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.0-rc3, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static com.bumptech.glide.testutil.TestUtil.assertStreamOf;, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/test/java/com/bumptech/glide/GlideTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/test/java/com/bumptech/glide/RequestBuilderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.0-rc3, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java,
[+++ b/annotation/compiler/build.gradle, + compile 'com.google.code.findbugs:jsr305:3.0.1', +++ b/annotation/compiler/build.gradle, + compile 'com.google.code.findbugs:jsr305:3.0.1', +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ChildModuleProcessor.java, +import java.util.Collections;, + * Generates Indexer classes annotated with {@link Index} for all, + * {@link com.bumptech.glide.module.ChildGlideModule}s., + private IndexerGenerator indexerGenerator;, + ChildModuleProcessor(ProcessorUtil processorUtil, IndexerGenerator indexerGenerator) {, + this.indexerGenerator = indexerGenerator;, + TypeSpec indexer = indexerGenerator.generate(childGlideModules);, + processorUtil.writeIndexer(indexer);, + return Collections.singleton(GlideModule.class.getName());, +++ b/annotation/compiler/build.gradle, + compile 'com.google.code.findbugs:jsr305:3.0.1', +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ChildModuleProcessor.java, +import java.util.Collections;, + * Generates Indexer classes annotated with {@link Index} for all, + * {@link com.bumptech.glide.module.ChildGlideModule}s., + private IndexerGenerator indexerGenerator;, + ChildModuleProcessor(ProcessorUtil processorUtil, IndexerGenerator indexerGenerator) {, + this.indexerGenerator = indexerGenerator;, + TypeSpec indexer = indexerGenerator.generate(childGlideModules);, + processorUtil.writeIndexer(indexer);, +
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, + if (resource != null && resource.isMemoryCacheable()) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, + if (resource != null && resource.isMemoryCacheable()) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java, + private static volatile HardwareConfigState instance;, +, + // See https://bit.ly/2IW5AmI, + private static boolean isSamsungGalaxyS7Edge() {, + return Build.MODEL.startsWith("SM-G935") || Build.MODEL.startsWith("SM-G930");, + }]
[+++ b/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +package com.bumptech.photos.loader.image;, +, +import android.graphics.Bitmap;, +, +import java.lang.ref.WeakReference;, +, +/**, + * Created with IntelliJ IDEA., + * User: sam, + * Date: 1/1/13, + * Time: 2:45 PM, + * To change this template use File | Settings | File Templates., + */, +public abstract class BaseImageLoader<T> implements ImageLoader<T> {, + @Override, + public final Object fetchImage(String path, T model, int width, int height, ImageReadyCallback cb) {, + doFetchImage(path, model, width, height, cb);, + return cb;, + }, +, + @Override, + public void clear() { }, +, + protected abstract void doFetchImage(String path, T model,
[+++ b/build.gradle, +// Generate javadocs and sources containing batched documentation and sources for all subprojects., + // Get the variant from each subproject that matches our current variant name., + // Collect the source files from all android and java subprojects, + def sourceFiles = childEquivalentChildVariants.collect { it.javaCompile.source } +, + javaProjects.collect { it.sourceSets.main.allJava }, +, + task("${variant.name}SourceJar", type: Jar) {, + classifier = 'sources', + from sourceFiles, + }, +, + def cleanJavadocTask = task("clean${variant.name.capitalize()}Javadoc", type: Delete) {, + delete destinationDirPath, + }, + clean.dependsOn(cleanJavadocTask), +, + def javadocTask = task("${variant.name}Javadoc", type: Javadoc) {, + classifier = 'javadoc',
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static com.bumptech.glide.test.Matchers.anyDrawableTarget;, + anyDrawableTarget(),, + anyDrawableTarget(),, + anyDrawableTarget(),, + anyDrawableTarget(),, + anyDrawableTarget(),, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static com.bumptech.glide.test.Matchers.anyDrawableTarget;, + anyDrawableTarget(),, + anyDrawableTarget(),, + anyDrawableTarget(),, + anyDrawableTarget(),, + anyDrawableTarget(),, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBitmapTest.java, +import static com.bumptech.glide.test.Matchers.anyBitmap;, +import static com.bumptech.glide.test.Matchers.anyBitmapTarget;, +import static com.bumptech.glide.test.Matchers.anyDrawable;, +import static com.bumptech.glide.test.Matchers.anyDrawableTarget;, +import static org.mockito.Mockito.any;, +import static org.mockito.Mockito.anyBoolean;, +import static org.mockito.Mockito.eq;, +import static org.mockito.Mockito.verify;, +import com.bumptech.glide.load.DataSource;, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;, +import com.bumptech.glide.load.engine.cache.LruResourceCache;, +import com.bumptech.glide.request.RequestListener;, +import com.bumptech.glide.util.Util;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, + @Mock private RequestListener<Bitmap> bitmapListener;, + @Mock private RequestListener<Drawable> drawableListener;, +, + MockitoAnnotations.initMocks(this);, + @Test, + public void loadFromRequestManager_withBitmap_doesNotLoadFromDiskCache() {, + Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), ResourceIds.raw.canonical);, +
[+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + if ((status == Status.RUNNING || status == Status.WAITING_FOR_SIZE), + && canNotifyStatusChanged()) {]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java, + return false;]
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + * Sets a {@link RequestBuilder} that is built and run if the load started by this]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + return rawData.get() & MASK_INT_LOWEST_BYTE;, + rawData.get(block, 0, Math.min(blockSize, rawData.remaining()));]
[+++ b/samples/flickr/build.gradle, + minSdkVersion 11, +++ b/samples/flickr/build.gradle, + minSdkVersion 11, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java, +import android.support.v4.view.MenuItemCompat;, +import android.support.v7.app.AppCompatActivity;, +import android.view.Menu;, +import android.view.MenuInflater;, +import android.widget.SearchView;, +import com.bumptech.glide.samples.flickr.api.Query;, +import com.bumptech.glide.samples.flickr.api.RecentQuery;, +import com.bumptech.glide.samples.flickr.api.SearchQuery;, +import java.util.Collections;, +public class FlickrSearchActivity extends AppCompatActivity, + implements SearchView.OnQueryTextListener {, + private static final String STATE_QUERY = "state_search_string";, + private final QueryListener queryListener = new QueryListener();, + private Set<PhotoViewer> photoViewers = new HashSet<>();, + private List<Photo> currentPhotos = new ArrayList<>();, + private SearchView searchView;, + private Query currentQuery;, + @Override, + public boolean onCreateOptionsMenu(Menu menu) {, + MenuInflater menuInflater = getMenuInflater();, + menuInflater.inflate(R.menu.search_activity, menu);, +, + searchView =, + (SearchView)
[+++ b/.gitmodules, +++ b/.gitmodules, +++ /dev/null, +++ b/.gitmodules, +++ /dev/null, +++ b/libs/disklrucache-1.2.1.jar]
[+++ b/.gitignore, +.gradle, +build, +++ b/.gitignore, +.gradle, +build, +++ b/README.md, +Build, +------, +Building Glide with gradle is fairly straight forward:, +, +```, +cd glide/library, +./gradlew build, +```, +, +Note: Make sure your Android SDK has the Android Support Repository installed, and that your `$ANDROID_HOME` environment variable is pointing at the SDK., +, +++ b/.gitignore, +.gradle, +build, +++ b/README.md, +Build, +------, +Building Glide with gradle is fairly straight forward:, +, +```, +cd glide/library, +./gradlew build, +```, +, +Note: Make sure your Android SDK has the Android Support Repository installed, and that your `$ANDROID_HOME` environment variable is pointing at the SDK.,
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.RequestBuilder;, + * <p>It is not safe to reload this or a different model in this callback. If you need to do so, + * use {@link com.bumptech.glide.RequestBuilder#error(RequestBuilder)} instead., + *, + * <p>Although you can't start an entirely new load, it is safe to change what is displayed in the, + * {@link Target} at this point, as long as you return {@code true} from the method to prevent, + * {@link Target#onLoadFailed(Drawable)} from being called., + *, + * For example:, + * public boolean onLoadFailed(Exception e, T model, Target target, boolean isFirstResource) {,
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/model/LazyHeadersTest.java, +package com.bumptech.glide.load.model;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +import com.google.common.testing.EqualsTester;, +, +import com.bumptech.glide.load.model.LazyHeaders.Builder;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import java.util.Map;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +public class LazyHeadersTest {, +, + @Test, + public void testIncludesEagerHeaders() {, + Map<String, String> headers = new Builder(), + .addHeader("key", "value"), + .build(), + .getHeaders();, + assertThat(headers).containsEntry("key", "value");, + assertThat(headers).hasSize(1);, + }, +, + @Test, + public void testIncludesLazyHeaders() {, + LazyHeaderFactory factory = mock(LazyHeaderFactory.class);, + when(factory.buildHeader()).thenReturn("value");, + Map<String, String> headers = new Builder(), + .addHeader("key", factory), +
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.gitmodules, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++ b/.gitignore, +++ b/.gitmodules, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++ b/LICENSE, +Copyright 2013 Bump Technologies, Inc. All rights reserved., +THIS SOFTWARE IS PROVIDED BY BUMP TECHNOLOGIES, INC. ``AS IS'' AND ANY EXPRESS OR IMPLIED, +FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BUMP TECHNOLOGIES, INC. OR, +or implied, of Bump Technologies, Inc., +++ b/.gitignore, +++ b/.gitmodules, +[submodule "library/volley"], + path = library/volley, +[submodule
[+++ b/Makefile, +jar:, + cd library && ant jar, +glide-minus-volley:, + cd library && ant glide-minus-volley, +, +++ b/Makefile, +jar:, + cd library && ant jar, +glide-minus-volley:, + cd library && ant glide-minus-volley, +, +++ b/library/build.xml, +<project name="glide" default="help">, +++ b/Makefile, +jar:, + cd library && ant jar, +glide-minus-volley:, + cd library && ant glide-minus-volley, +, +++ b/library/build.xml, +<project name="glide" default="help">, +++ b/library/custom_rules.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project name="glide-rules" default="help">, + <target name="jar" depends="-compile">, + <jar destfile="bin/glide.jar", + basedir="bin/classes" >, + <zipgroupfileset dir="libs" includes="*.jar" />, + </jar>, + </target>, + <target name="glide-minus-volley" depends="-compile">, + <jar destfile="bin/glide-minus-volley.jar", + basedir="bin/classes" >, +
[+++ b/integration/integration.iml, + <facet type="java-gradle" name="Java-Gradle">, + <configuration>, + <option name="BUILD_FOLDER_PATH" />, + </configuration>, + </facet>, + <content url="file://$MODULE_DIR$">, + <excludeFolder url="file://$MODULE_DIR$/.gradle" />, + <excludeFolder url="file://$MODULE_DIR$/build" />, + </content>, +++ b/integration/integration.iml, + <facet type="java-gradle" name="Java-Gradle">, + <configuration>, + <option name="BUILD_FOLDER_PATH" />, + </configuration>, + </facet>, + <content url="file://$MODULE_DIR$">, + <excludeFolder url="file://$MODULE_DIR$/.gradle" />, + <excludeFolder url="file://$MODULE_DIR$/build" />, + </content>, +++ b/integration/okhttp/okhttp.iml, + <option name="RES_FOLDERS_RELATIVE_PATH" value="" />, + <excludeFolder url="file://$MODULE_DIR$/build/docs" />, + <excludeFolder url="file://$MODULE_DIR$/build/poms" />, + <excludeFolder url="file://$MODULE_DIR$/build/reports" />, +++ b/integration/integration.iml, + <facet type="java-gradle" name="Java-Gradle">, + <configuration>, + <option name="BUILD_FOLDER_PATH" />, + </configuration>, + </facet>, + <content url="file://$MODULE_DIR$">, + <excludeFolder url="file://$MODULE_DIR$/.gradle"
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java, +import static org.junit.Assert.assertNull;, + @Test, + public void testReturnsNullIfTransformReturnsNull() {, + BitmapTransformation transform = new BitmapTransformation(bitmapPool) {, +, + @Override, + public String getId() {, + return null;, + }, +, + @Override, + protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {, + return null;, + }, + };, +, + Resource<Bitmap> resource = mock(Resource.class);, + when(resource.get()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565));, + assertNull(transform.transform(resource, 100, 100));, + }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java, +import static org.junit.Assert.assertNull;, + @Test, + public void testReturnsNullIfTransformReturnsNull() {, + BitmapTransformation transform = new BitmapTransformation(bitmapPool) {, +, + @Override, + public String getId() {, + return
[+++ b/.idea/codeStyleSettings.xml, + <Objective-C-extensions>, + <option name="GENERATE_INSTANCE_VARIABLES_FOR_PROPERTIES" value="ASK" />, + <option name="RELEASE_STYLE" value="IVAR" />, + <option name="TYPE_QUALIFIERS_PLACEMENT" value="BEFORE" />, + <file>, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Import" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Macro" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Typedef" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Enum" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Constant" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Global" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Struct" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="FunctionPredecl" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Function" />, + </file>, + <class>, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Property" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Synthesize" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InitMethod" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="StaticMethod" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InstanceMethod" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="DeallocMethod"
[+++ b/gradle.properties, +VERSION_NAME=4.5.0]
[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + if (target == null) {, + throw new IllegalArgumentException("You must pass in a non null Target");, + }, +, + if (view == null) {, + throw new IllegalArgumentException("You must pass in a non null View");, + }, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + if (target == null) {, + throw new IllegalArgumentException("You must pass in a non null Target");, + }, +, + if (view == null) {, + throw new IllegalArgumentException("You must pass in a non null View");, + }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, +import com.bumptech.glide.load.model.NullEncoder;, + private final NullEncoder<GifDecoder> sourceEncoder;, + sourceEncoder = NullEncoder.get();, + .sourceEncoder(sourceEncoder), + .transform(transformation),
[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +, +import com.bumptech.glide.request.FutureTarget;, +import com.bumptech.glide.request.RequestFutureTarget;, + /**, + * Returns a future that can be used to do a blocking get on a background thread., + *, + * @param width The desired width (note this will be overriden by {@link #override(int, int)} if, + * previously called., + * @param height The desired height (note this will be overriden by {@link #override(int, int)}}, + * if previously called., + * @return An {@link com.bumptech.glide.request.FutureTarget} that can be used to obtain the, + * resource in a blocking manner., + */, + public FutureTarget<TranscodeType> into(int width, int
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, + verify(harness.transcoder).transcode(eq(harness.decoded));, + verify(harness.transcoder, never()).transcode(eq(harness.decoded));, + when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, + when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, + verify(harness.decoded, never()).recycle();, + return new ResourceRunner(key, width, height, cacheLoader, decoder, transcoder,, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, + verify(harness.transcoder).transcode(eq(harness.decoded));, + verify(harness.transcoder, never()).transcode(eq(harness.decoded));, + when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, + when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, + verify(harness.decoded, never()).recycle();, + return new ResourceRunner(key, width, height, cacheLoader, decoder, transcoder,, +++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, + verify(harness.transcoder).transcode(eq(harness.decoded));, + verify(harness.transcoder, never()).transcode(eq(harness.decoded));, + when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, + when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, + verify(harness.decoded, never()).recycle();, + return new ResourceRunner(key, width, height, cacheLoader, decoder, transcoder,, +++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java, + ResourceDecoder<File, Z> cacheDecoder, ResourceTranscoder<Z, R> transcoder,, + SourceResourceRunner<?, Z, R> sourceRunner, ExecutorService diskCacheService,, + DiskCacheStrategy diskCacheStrategy, ExecutorService resizeService, EngineJob job, Priority priority) {,
[+++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import static org.junit.Assume.assumeTrue;, + // Most likely an instance of http://stackoverflow.com/q/991489/253468, + assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, + // Most likely an instance of http://stackoverflow.com/q/991489/253468, + assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import static org.junit.Assume.assumeTrue;, + // Most likely an instance of http://stackoverflow.com/q/991489/253468, + assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, + // Most likely an instance of http://stackoverflow.com/q/991489/253468, + assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +++ b/integration/volley/build.gradle, + testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}", +++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import static org.junit.Assume.assumeTrue;, + // Most likely an instance of http://stackoverflow.com/q/991489/253468, + assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/NullCacheDecoder.java, +package com.bumptech.glide.load.resource;, +, +import com.bumptech.glide.Resource;, +import com.bumptech.glide.load.ResourceDecoder;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +public class NullCacheDecoder<Z> implements ResourceDecoder<InputStream, Z> {, + private static final NullCacheDecoder NULL_DECODER = new NullCacheDecoder();, +, + @SuppressWarnings("unchecked"), + public static <Z> NullCacheDecoder<Z> get() {, + return NULL_DECODER;, + }, +, + @Override, + public Resource<Z> decode(InputStream source, int width, int height) throws IOException {, + return null;, + }, +, + @Override, + public String getId() {, + return "";, + }, +}, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullCacheDecoder.java, +package com.bumptech.glide.load.resource;, +, +import com.bumptech.glide.Resource;, +import com.bumptech.glide.load.ResourceDecoder;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +public class NullCacheDecoder<Z> implements
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, + long targetTime = SystemClock.uptimeMillis() + decoder.getNextDelay();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, + long targetTime = SystemClock.uptimeMillis() + decoder.getNextDelay();, +++ b/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifHeaderParserTest.java, + private static ByteBuffer writeHeaderWithGceAndFrameDelay(short frameDelay) {, + final int lzwMinCodeSize = 2;, + ByteBuffer buffer = ByteBuffer.allocate(, + GifBytesTestUtil.HEADER_LENGTH, + + GifBytesTestUtil.GRAPHICS_CONTROL_EXTENSION_LENGTH, + + GifBytesTestUtil.IMAGE_DESCRIPTOR_LENGTH, + + GifBytesTestUtil.getImageDataSize(lzwMinCodeSize), + ).order(ByteOrder.LITTLE_ENDIAN);, + GifBytesTestUtil.writeHeaderAndLsd(buffer, 1, 1, false, 0);, + GifBytesTestUtil.writeGraphicsControlExtension(buffer, frameDelay);, + GifBytesTestUtil.writeImageDescriptor(buffer, 0, 0, 1, 1, false /*hasLct*/, 0);, + GifBytesTestUtil.writeFakeImageData(buffer, lzwMinCodeSize);, + return buffer;, + }, +, + @Test, + public void testCanParseFrameDelay() {, + final short frameDelay = 50;, + ByteBuffer buffer = writeHeaderWithGceAndFrameDelay(frameDelay);, +, + parser.setData(buffer.array());,
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + .addSuperinterface(Cloneable.class), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + .addSuperinterface(Cloneable.class), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, + .addSuperinterface(Cloneable.class)]
[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + this.diskCacheStrategy = other.diskCacheStrategy;, + this.isCacheable = other.isCacheable;, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + this.diskCacheStrategy = other.diskCacheStrategy;, + this.isCacheable = other.isCacheable;, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.stream.StreamByteArrayLoader;, + register(byte[].class, InputStream.class, new StreamByteArrayLoader.Factory());, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + this.diskCacheStrategy = other.diskCacheStrategy;, + this.isCacheable = other.isCacheable;, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.stream.StreamByteArrayLoader;, + register(byte[].class, InputStream.class, new StreamByteArrayLoader.Factory());, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +import com.bumptech.glide.signature.ApplicationVersionSignature;, +import com.bumptech.glide.signature.MediaStoreSignature;, +import com.bumptech.glide.signature.StringSignature;, + Key signature = new MediaStoreSignature(mimeType, dateModified, orientation);, + return (DrawableTypeRequest<Uri>) loadFromMediaStore(uri), + .signature(signature);, + * @see com.bumptech.glide.signature.ApplicationVersionSignature, + * @see com.bumptech.glide.GenericRequestBuilder#signature(com.bumptech.glide.load.Key), + return (DrawableTypeRequest<Integer>) loadGeneric(resourceId), + .signature(ApplicationVersionSignature.obtain(context));, + * @deprecated Use {@link #load(byte[])} along with, + * {@link
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java]
[+++ b/library/custom_rules.xml, + <zipgroupfileset dir="libs" includes="disklrucache*.jar,volley.jar" />]
[+++ b/build.gradle, +subprojects { project ->, +, + afterEvaluate {, + if (project.tasks.findByName('check')) {, + check.dependsOn('checkstyle'), + }, + }, +++ b/build.gradle, +subprojects { project ->, +, + afterEvaluate {, + if (project.tasks.findByName('check')) {, + check.dependsOn('checkstyle'), + }, + }, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +/**, + * An {@link DataFetcher} that uses an {@link com.squareup.okhttp.OkHttpClient} to load an {@link InputStream} for, + * an {@link GlideUrl}., + */, +++ b/build.gradle, +subprojects { project ->, +, + afterEvaluate {, + if (project.tasks.findByName('check')) {, + check.dependsOn('checkstyle'), + }, + }, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +/**, + * An {@link DataFetcher} that uses an {@link com.squareup.okhttp.OkHttpClient}
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageVideoBitmapDecoder.java, + ParcelFileDescriptor fileDescriptor = source.getFileDescriptor();, + if (fileDescriptor != null) {, + }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageVideoBitmapDecoder.java, + ParcelFileDescriptor fileDescriptor = source.getFileDescriptor();, + if (fileDescriptor != null) {, + }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java, + private static final DefaultFactory DEFAULT_FACTORY = new DefaultFactory();, + private MediaMetadataRetrieverFactory factory;, +, + interface MediaMetadataRetrieverFactory {, + public MediaMetadataRetriever build();, + }, +, + public VideoBitmapDecoder() {, + this(DEFAULT_FACTORY);, + }, +, +, + VideoBitmapDecoder(MediaMetadataRetrieverFactory factory) {, + this.factory = factory;, + }, +, + MediaMetadataRetriever mediaMetadataRetriever = factory.build();, + return "VideoBitmapDecoder.com.bumptech.glide.load.resource.bitmap";, + }, +, + private static class DefaultFactory implements MediaMetadataRetrieverFactory {, + @Override,
[+++ b/.travis.yml, +language: android, +android:, + components:, + - build-tools-19.1.0, +, +script: 'travis_retry ./gradlew clean build', +++ b/.travis.yml, +language: android, +android:, + components:, + - build-tools-19.1.0, +, +script: 'travis_retry ./gradlew clean build', +++ b/install_maven_dependencies/install-android-deps.sh, +#!/bin/sh, +# This script installs the necessary Android dependencies to compile Glide and run, +# the test suite., +# , +# Pre-requisites: , +# Using the android sdk tool, under Android 4.4.2 (API 19), install:, +# SDK Platform, +# Glass Development Kit Preview, +# Also using the android sdk tool, under Android 4.4.0 (API 14), install:, +# SDK Platform, +, +git clone https://github.com/mosabua/maven-android-sdk-deployer.git, +cd maven-android-sdk-deployer
[+++ b/annotation/gradle.properties]
[+++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, +import android.annotation.TargetApi;, +import android.content.UriMatcher;, +import android.os.Build;, +import android.provider.ContactsContract;, + /**, + * A lookup uri (e.g. content://com.android.contacts/contacts/lookup/3570i61d948d30808e537), + */, + private static final int ID_CONTACTS_LOOKUP = 1;, + /**, + * A contact thumbnail uri (e.g. content://com.android.contacts/contacts/38/photo), + */, + private static final int ID_CONTACTS_THUMBNAIL = 2;, + /**, + * A contact uri (e.g. content://com.android.contacts/contacts/38), + */, + private static final int ID_CONTACTS_CONTACT = 3;, + /**, + * A contact display photo (high resolution) uri, + * (e.g. content://com.android.contacts/5/display_photo), + */, + private static final int ID_CONTACTS_PHOTO = 4;, + /**, + * Match the
[+++ b/.gitignore, +samples/flickr/.idea/*, +samples/flickr/gen/**/*, +samples/flickr/out/**/*, +samples/flickr/local.properties, +++ b/.gitignore, +samples/flickr/.idea/*, +samples/flickr/gen/**/*, +samples/flickr/out/**/*, +samples/flickr/local.properties, +++ b/samples/flickr/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + package="com.bumptech.flickr", + android:versionCode="1", + android:versionName="1.0">, + <application android:label="@string/app_name" android:icon="@drawable/ic_launcher", + android:hardwareAccelerated="true">, +, + <activity android:name="MyActivity", + android:label="@string/app_name", + android:launchMode="singleTask", + android:screenOrientation="portrait">, + <intent-filter>, + <action android:name="android.intent.action.MAIN" />, + <category android:name="android.intent.category.LAUNCHER" />, + </intent-filter>, + </activity>, + </application>, +, + <uses-permission android:name="android.permission.INTERNET" />, + <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />, + <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="16" />, +</manifest>, +++ b/.gitignore, +samples/flickr/.idea/*, +samples/flickr/gen/**/*, +samples/flickr/out/**/*, +samples/flickr/local.properties, +++ b/samples/flickr/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + package="com.bumptech.flickr", + android:versionCode="1", + android:versionName="1.0">, + <application android:label="@string/app_name" android:icon="@drawable/ic_launcher", + android:hardwareAccelerated="true">, +, +
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, + @Test, + public void testCanGetCurrentMaxSize() {, + assertEquals(MAX_SIZE, pool.getMaxSize());, + }, +, + @Test, + public void testMaxSizeChangesAfterSizeMultiplier() {, + pool.setSizeMultiplier(2);, + assertEquals(2 * MAX_SIZE, pool.getMaxSize());, + }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, + @Test, + public void testCanGetCurrentMaxSize() {, + assertEquals(MAX_SIZE, pool.getMaxSize());, + }, +, + @Test, + public void testMaxSizeChangesAfterSizeMultiplier() {, + pool.setSizeMultiplier(2);, + assertEquals(2 * MAX_SIZE, pool.getMaxSize());, + }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java, + @Test, + public void testGetMaxSizeReturnsCurrentMaxSizeOfCache() {, + assertEquals(SIZE, cache.getMaxSize());, + }, +, + @Test, + public void testGetMaxSizeChangesIfMaxSizeChanges() {, + int multiplier = 2;, + cache.setSizeMultiplier(multiplier);, +, + assertEquals(SIZE * multiplier, cache.getMaxSize());,
[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, + RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, + requestManager = new RequestManager(getContext(), lifecycle, treeNode);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, + RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, + requestManager = new RequestManager(getContext(), lifecycle, treeNode);, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, + private RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, + manager =, + new RequestManager(Robolectric.application, lifecycle, treeNode, requestTracker, factory);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, + RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, + requestManager = new RequestManager(getContext(), lifecycle, treeNode);, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, + private RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, + manager =, + new RequestManager(Robolectric.application, lifecycle, treeNode, requestTracker, factory);, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java, + assertTrue(harness.hasFragmentWithTag(RequestManagerRetriever.FRAGMENT_TAG));, + harness.addFragmentWithTag(RequestManagerRetriever.FRAGMENT_TAG, requestManager);, + harness.addFragmentWithTag(RequestManagerRetriever.FRAGMENT_TAG, null);, +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java, +import android.support.v7.view.ContextThemeWrapper;, + return loadDrawableV7(context, id, theme);, + private static Drawable loadDrawableV7(Context context, @DrawableRes int id,, + @Nullable Theme theme) {, + Context resourceContext = theme != null ? new ContextThemeWrapper(context, theme) : context;, + return AppCompatResources.getDrawable(resourceContext, id);]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + gifDrawable.stop();, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + gifDrawable.stop();, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java, +import android.support.test.InstrumentationRegistry;, +import com.bumptech.glide.RequestManager;, + new ConcurrencyHelper().runOnMainThread(new Runnable() {, + @Override, + public void run() {, + RequestManager requestManager =, + Glide.with(InstrumentationRegistry.getTargetContext());, + requestManager.onStop();, + requestManager.onDestroy();, + }, + });, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + gifDrawable.stop();, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java, +import android.support.test.InstrumentationRegistry;, +import com.bumptech.glide.RequestManager;, + new ConcurrencyHelper().runOnMainThread(new Runnable() {, + @Override, + public void run() {, + RequestManager requestManager =, + Glide.with(InstrumentationRegistry.getTargetContext());, + requestManager.onStop();, + requestManager.onDestroy();, + }, + });, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + glide.getContext(), + .getApplicationContext(), + .unregisterComponentCallbacks(glide);]
[+++ b/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java, +package com.bumptech.glide.util;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.net.SocketTimeoutException;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyLong;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +public class ExceptionCatchingInputStreamTest {, +, + private InputStream wrapped;, + private ExceptionCatchingInputStream is;, +, + @Before, + public void setUp() throws Exception {, + wrapped = mock(InputStream.class);, + is = new ExceptionCatchingInputStream();, + is.setInputStream(wrapped);, + }, +, + @After, + public void tearDown() {, + ExceptionCatchingInputStream.clearQueue();, + }, +,
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.squareup.okhttp.Response;, +import com.squareup.okhttp.ResponseBody;, + private ResponseBody responseBody;, + Response response = client.newCall(request).execute();, + responseBody = response.body();, + if (!response.isSuccessful()) {, + throw new IOException("Request failed with code: " + response.code());, + }, + stream = responseBody.byteStream();, + if (stream != null) {, + }, + if (responseBody != null) {, + try {, + responseBody.close();, + } catch (IOException e) {, + // Ignored., + }, + }]
[+++ /dev/null, +++ /dev/null, +++ b/src/com/bumptech/photos/view/ImagePresenter.java, +/*, + * Copyright (c) 2012. Bump Technologies Inc. All Rights Reserved., + */, +, +package com.bumptech.photos.view;, +, +import android.graphics.drawable.Drawable;, +import android.widget.ImageView;, +import com.bumptech.photos.util.Log;, +import com.bumptech.photos.view.assetpath.AssetPathConverter;, +import com.bumptech.photos.view.loader.ImageLoader;, +, +import java.lang.ref.WeakReference;, +, +/**, + * Created with IntelliJ IDEA., + * User: sam, + * Date: 12/25/12, + * Time: 10:05 PM, + * To change this template use File | Settings | File Templates., + */, +public class ImagePresenter<T> {, + private int height = 0;, + private int width = 0;, +, + private Drawable placeholderDrawable;, + private ImageSetCallback imageSetCallback;, +,
[+++ b/gradle.properties, +VERSION_NAME=4.10.0-SNAPSHOT, +VERSION_MINOR=10]
[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.model.ImageVideoWrapper;, +import com.bumptech.glide.request.ViewPropertyAnimation;, + public BitmapRequestBuilder<ModelType, TranscodeType> animate(ViewPropertyAnimation.Animator animator) {, + super.animate(animator);, + return this;, + }, +, + @Override, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.model.ImageVideoWrapper;, +import com.bumptech.glide.request.ViewPropertyAnimation;, + public BitmapRequestBuilder<ModelType, TranscodeType> animate(ViewPropertyAnimation.Animator animator) {, + super.animate(animator);, + return this;, + }, +, + @Override, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.request.DrawableCrossFadeViewAnimation;, +import com.bumptech.glide.request.ViewPropertyAnimation;, + private final Context context;, + this.context = context;, + public DrawableRequestBuilder<ModelType> crossFade() {, + super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory());, + return this;, + }, +, + public DrawableRequestBuilder<ModelType> crossFade(int duration) {, + super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory(duration));, + return this;, + }, +, + public DrawableRequestBuilder<ModelType> crossFade(Animation animation,
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java, + new EngineResource<>(, + ref.resource,, + /*isMemoryCacheable=*/ true,, + /*isRecyclable=*/ false,, + ref.key,, + listener);, + referent.isMemoryCacheable() && isActiveResourceRetentionAllowed, + isCacheable = referent.isMemoryCacheable();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java, + new EngineResource<>(, + ref.resource,, + /*isMemoryCacheable=*/ true,, + /*isRecyclable=*/ false,, + ref.key,, + listener);, + referent.isMemoryCacheable() && isActiveResourceRetentionAllowed, + isCacheable = referent.isMemoryCacheable();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import com.bumptech.glide.load.engine.EngineResource.ResourceListener;, + diskCacheExecutor,, + sourceExecutor,, + sourceUnlimitedExecutor,, + animationExecutor,, + /*engineJobListener=*/ this,, + /*resourceListener=*/ this);, + result = new EngineResource<>(, + cached, /*isMemoryCacheable=*/ true, /*isRecyclable=*/ true, key, /*listener=*/ this);, + if (resource.isMemoryCacheable()) {, + if (resource.isMemoryCacheable()) {, + @Synthetic final EngineJobListener engineJobListener;, + @Synthetic final ResourceListener
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java, + * Determines if the GIF is animated by trying to read in the first 2 frames, + * This method reparses the data even if the header has already been read, + */, + public boolean isAnimated() {, + readHeader();, + if (!err()) {, + readContents(2 /* maxFrames */);, + }, + return header.frameCount > 1;, + }, +, + /**, + readContents(Integer.MAX_VALUE /* maxFrames */);, + }, +, + /**, + * Main file parser. Reads GIF content blocks. Stops after reading maxFrames, + */, + private void readContents(int maxFrames) {, + while (!(done ||
[+++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.1', + <version>3.5.1</version>, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.1', + <version>3.5.1</version>, +++ b/gradle.properties, +VERSION_NAME=3.5.1, +VERSION_MINOR=5, +VERSION_PATCH=1, +VERSION_CODE=10, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.1', + <version>3.5.1</version>, +++ b/gradle.properties, +VERSION_NAME=3.5.1, +VERSION_MINOR=5, +VERSION_PATCH=1, +VERSION_CODE=10, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.2.1, +VERSION_MINOR=2, +VERSION_PATCH=1, +VERSION_CODE=6, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.1', + <version>3.5.1</version>, +++ b/gradle.properties, +VERSION_NAME=3.5.1, +VERSION_MINOR=5, +VERSION_PATCH=1, +VERSION_CODE=10, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.2.1, +VERSION_MINOR=2, +VERSION_PATCH=1, +VERSION_CODE=6, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.2.1, +VERSION_MINOR=2, +VERSION_PATCH=1, +VERSION_CODE=6, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.1', + <version>3.5.1</version>, +++ b/gradle.properties, +VERSION_NAME=3.5.1, +VERSION_MINOR=5, +VERSION_PATCH=1, +VERSION_CODE=10, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.2.1, +VERSION_MINOR=2, +VERSION_PATCH=1, +VERSION_CODE=6, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.2.1, +VERSION_MINOR=2, +VERSION_PATCH=1, +VERSION_CODE=6, +++ b/library/build.gradle, + versionCode = VERSION_CODE as int]
[+++ b/.gitignore, +doc/**, +*.swo, +++ b/.gitignore, +doc/**, +*.swo, +++ b/build.gradle, +evaluationDependsOnChildren();, +, +def getAndroidSdkDirectory() {, + project("library").android.sdkDirectory, +}, +, +def getAndroidCompileSdkVersion() {, + project("library").android.compileSdkVersion, +}, +, +def getAndroidChildren() {, + subprojects.findAll { project -> project.plugins.hasPlugin('android-library') }, +}, +, +// For now this is just [release, debug], +def getAndroidLibraryVariants() {, + getAndroidChildren().collect { project ->, + project.android.libraryVariants, + }.sum().unique{ it.name }, +}, +, +// Generate javadocs containing batched documentation for all android library subprojects., +getAndroidLibraryVariants().each { variant ->, + def androidJar = "${getAndroidSdkDirectory()}/platforms/${getAndroidCompileSdkVersion()}/android.jar", + def destinationDirPath = "${getProjectDir()}/doc/${variant.baseName}", +, + task("clean${variant.name.capitalize()}Javadoc", type: Delete) {, + delete destinationDirPath, + }, +,
[+++ b/annotation/compiler/build.gradle, + compileOnly "com.squareup:javapoet:${JAVAPOET_VERSION}", + compileOnly "com.google.auto.service:auto-service:${AUTO_SERVICE_VERSION}", + compileOnly "com.google.code.findbugs:jsr305:${JSR_305_VERSION}", + // This is to support com.sun.tools.javac.util.List, currently used in RootModuleGenerator., +++ b/annotation/compiler/build.gradle, + compileOnly "com.squareup:javapoet:${JAVAPOET_VERSION}", + compileOnly "com.google.auto.service:auto-service:${AUTO_SERVICE_VERSION}", + compileOnly "com.google.code.findbugs:jsr305:${JSR_305_VERSION}", + // This is to support com.sun.tools.javac.util.List, currently used in RootModuleGenerator., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + private final Set<String> glideModules;, + private final Set<String> extensions;, +++ b/annotation/compiler/build.gradle, + compileOnly "com.squareup:javapoet:${JAVAPOET_VERSION}", + compileOnly "com.google.auto.service:auto-service:${AUTO_SERVICE_VERSION}", + compileOnly "com.google.code.findbugs:jsr305:${JSR_305_VERSION}", + // This is to support com.sun.tools.javac.util.List, currently used in RootModuleGenerator., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + private final Set<String> glideModules;, + private final Set<String> extensions;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java, + boolean processExtensions(RoundEnvironment env) {, +++ b/annotation/compiler/build.gradle,
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java, +, +import java.util.ArrayDeque;, +import java.util.Queue;, + private static final GifHeaderParserPool PARSER_POOL = new DefaultGifHeaderParserPool();, + private final Context context;, + private final BitmapPool bitmapPool;, + private GifHeaderParserPool parserPool;, + this(context, bitmapPool, PARSER_POOL);, + GifResourceDecoder(Context context, BitmapPool bitmapPool, GifHeaderParserPool parserPool) {, + this.parserPool = parserPool;, + final GifHeaderParser parser = parserPool.obtain(data);, + try {, + return decode(data, width, height, parser);, + } finally {, + parserPool.release(parser);, + }, + }, + private GifDataResource decode(byte[] data, int width, int height, GifHeaderParser parser) {, + final GifHeader header = parser.parseHeader();, +, + interface GifHeaderParserPool {, + public GifHeaderParser obtain(byte[] data);,
[+++ b/gradle.properties, +++ b/gradle.properties, +++ b/integration/gifencoder/build.gradle, +++ b/gradle.properties, +++ b/integration/gifencoder/build.gradle, +++ b/integration/okhttp/build.gradle, +++ b/gradle.properties, +++ b/integration/gifencoder/build.gradle, +++ b/integration/okhttp/build.gradle, +++ b/integration/okhttp3/build.gradle, +++ b/gradle.properties, +++ b/integration/gifencoder/build.gradle, +++ b/integration/okhttp/build.gradle, +++ b/integration/okhttp3/build.gradle, +++ b/integration/recyclerview/build.gradle, +++ b/gradle.properties, +++ b/integration/gifencoder/build.gradle, +++ b/integration/okhttp/build.gradle, +++ b/integration/okhttp3/build.gradle, +++ b/integration/recyclerview/build.gradle, +++ b/integration/volley/build.gradle, +++ b/gradle.properties, +++ b/integration/gifencoder/build.gradle, +++ b/integration/okhttp/build.gradle, +++ b/integration/okhttp3/build.gradle, +++ b/integration/recyclerview/build.gradle, +++ b/integration/volley/build.gradle, +++ b/library/build.gradle]
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + if (requestOptions.isLocked()) {, + requestOptions = requestOptions.clone();, + }, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + if (requestOptions.isLocked()) {, + requestOptions = requestOptions.clone();, + }, +++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, + public final boolean isLocked() {, + return isLocked;, + }, +]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java]
[+++ b/.gitignore, +docs/**/*]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java, + if ((cacheDirectory == null) || (!cacheDirectory.canWrite())) {]
[+++ b/README.md, + compile('com.github.bumptech.glide:library:3.3.0a-SNAPSHOT:@aar') {, + transitive = true, + changing = true, + }, + compile 'com.android.support:support-v4:19.0.0', +<dependency>, + <groupId>com.google.android</groupId>, + <artifactId>support-v4</artifactId>, + <version>r7</version>, +</dependency>, +++ b/README.md, + compile('com.github.bumptech.glide:library:3.3.0a-SNAPSHOT:@aar') {, + transitive = true, + changing = true, + }, + compile 'com.android.support:support-v4:19.0.0', +<dependency>, + <groupId>com.google.android</groupId>, + <artifactId>support-v4</artifactId>, + <version>r7</version>, +</dependency>, +++ b/build.gradle, +evaluationDependsOn(":third_party:disklrucache"), +// Currently the only excluded project is the :integration:volley project., +def androidProjects = [':third_party:gif_decoder', ':library'].collect { project(it) }, +def javaProjects = [':third_party:disklrucache'].collect { project(it) }, +def allProjects = androidProjects + javaProjects, +def releaseVariantAndroidProjects = androidProjects.collect {, + it.android.libraryVariants.findAll { variant ->, + variant.buildType.name.equalsIgnoreCase("release"), +
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static org.mockito.Mockito.any;, +import static org.mockito.Mockito.anyBoolean;, +import static org.mockito.Mockito.eq;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static org.mockito.Mockito.any;, +import static org.mockito.Mockito.anyBoolean;, +import static org.mockito.Mockito.eq;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, + /*activeResources=*/ null,, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static org.mockito.Mockito.any;, +import static org.mockito.Mockito.anyBoolean;, +import static org.mockito.Mockito.eq;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, + /*activeResources=*/ null,, +++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java, + new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);]
[+++ b/.travis.yml, + - $HOME/.gradle/caches]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + .addModifiers(Modifier.PUBLIC, Modifier.FINAL), + .varargs(requestOptionMethod.varargs), + .addAnnotations(, + FluentIterable.from(requestOptionMethod.annotations), + .filter(new Predicate<AnnotationSpec>() {, + @Override, + public boolean apply(AnnotationSpec input) {, + return !input.type.equals(TypeName.get(Override.class));, + }, + }), + .toList(), + ), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + .addModifiers(Modifier.PUBLIC, Modifier.FINAL), + .varargs(requestOptionMethod.varargs), + .addAnnotations(, + FluentIterable.from(requestOptionMethod.annotations), + .filter(new Predicate<AnnotationSpec>() {, + @Override, + public boolean apply(AnnotationSpec input) {, + return !input.type.equals(TypeName.get(Override.class));, + }, + }), + .toList(), + ), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, + MethodSpec.Builder result = MethodSpec.overriding(methodToOverride), + .addModifiers(Modifier.FINAL), + .build());, +, + if (methodToOverride.getSimpleName().toString().equals("transforms")) {, + result.addAnnotation(, + AnnotationSpec.builder(SafeVarargs.class), + .build());, + }, +, + return result.build();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +
[+++ b/library/src/androidTest/java/com/bumptech/glide/request/BaseRequestOptionsTest.java, +package com.bumptech.glide.request;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Mockito.mock;, +, +import com.bumptech.glide.load.Transformation;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE), +public class BaseRequestOptionsTest {, +, + private TestOptions options;, +, + @Before, + public void setUp() {, + options = new TestOptions();, + }, +, + @Test, + public void testTransformationIsSetAfterApplyingOtherOptionsWithTransformation() {, + TestOptions other = new TestOptions();, + other.transform(Object.class, mock(Transformation.class));, + options.apply(other);, + assertThat(options.isTransformationSet()).isTrue();, + }, +, + private static class TestOptions extends BaseRequestOptions<TestOptions> {, + // Empty., + }, +}, +++ b/library/src/androidTest/java/com/bumptech/glide/request/BaseRequestOptionsTest.java, +package com.bumptech.glide.request;, +, +import static
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import android.graphics.drawable.Drawable;, + * Called when an exception occurs during a load, immediately before, + * {@link Target#onLoadFailed(Drawable)}. Will only be called if we currently want to display an, + * image for the given model in the given target. It is recommended to create a single instance, + * per activity/fragment rather than instantiate a new object for each call to {@code, + * include all relevant builder calls (like centerCrop, placeholder etc)., + * Called when a load completes successfully, immediately before {@link]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalCacheDiskCacheFactory.java, + *, + * @deprecated use {@link ExternalPreferredCacheDiskCacheFactory} instead., +@Deprecated, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalCacheDiskCacheFactory.java, + *, + * @deprecated use {@link ExternalPreferredCacheDiskCacheFactory} instead., +@Deprecated, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java, +package com.bumptech.glide.load.engine.cache;, +, +import android.content.Context;, +, +import android.support.annotation.Nullable;, +import java.io.File;, +, +/**, + * Creates an {@link com.bumptech.glide.disklrucache.DiskLruCache} based disk cache in the external, + * disk cache directory, which falls back to the internal disk cache if no external storage is, + * available. If ever fell back to the internal disk cache, will use that one from that moment on., + *, + * <p><b>Images can be read by everyone when
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +import android.support.annotation.NonNull;, + * configuration, and containing only transparent pixels., + *, + * <p> If no Bitmap with the requested attributes is present in the pool, a new one will be, + * allocated. </p>, + @NonNull, + * {@link android.graphics.Bitmap} may <em>not</em> have been erased and may contain random data., + *, + * <p>If no Bitmap with the requested attributes is present in the pool, a new one will be, + * allocated. </p>, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +import android.support.annotation.NonNull;, + * configuration, and containing only transparent pixels., + *, + * <p> If
[+++ b/library/pmd-ruleset.xml, + <rule ref="rulesets/java/unusedcode.xml" />, +++ b/library/pmd-ruleset.xml, + <rule ref="rulesets/java/unusedcode.xml" />, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + <T> void apply(T model, GenericRequestBuilder<T, ?, ?, ?> requestBuilder);, +++ b/library/pmd-ruleset.xml, + <rule ref="rulesets/java/unusedcode.xml" />, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + <T> void apply(T model, GenericRequestBuilder<T, ?, ?, ?> requestBuilder);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java, + interface Writer {, +++ b/library/pmd-ruleset.xml, + <rule ref="rulesets/java/unusedcode.xml" />, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + <T> void apply(T model, GenericRequestBuilder<T, ?, ?, ?> requestBuilder);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java, + interface Writer {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java, + interface ResourceRemovedListener {]
[+++ b/gradle.properties, +VERSION_NAME=4.3.1, +VERSION_MINOR=3, +VERSION_PATCH=1]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +import com.squareup.javapoet.ParameterSpec;, + List<ParameterSpec> parameters = ProcessorUtil.getParameters(methodToOverride);, + .addParameters(parameters);, + for (ParameterSpec param : parameters) {, + args.add(param.name);, + List<ParameterSpec> parameters = ProcessorUtil.getParameters(methodToOverride);, + ParameterSpec parameter = parameters.iterator().next();, + .addParameters(parameters), + parameter.name);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +import com.squareup.javapoet.ParameterSpec;, + List<ParameterSpec> parameters = ProcessorUtil.getParameters(methodToOverride);, + .addParameters(parameters);, + for (ParameterSpec param : parameters) {, + args.add(param.name);, + List<ParameterSpec> parameters = ProcessorUtil.getParameters(methodToOverride);, + ParameterSpec parameter = parameters.iterator().next();, + .addParameters(parameters), + parameter.name);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, + static CodeBlock generateCastingSuperCall(TypeName toReturn, MethodSpec method) {, + .add("return ($T) super.$N(", toReturn, method.name), + FluentIterable.from(method.parameters), + .transform(new Function<ParameterSpec, String>() {, + public String apply(ParameterSpec input) {, + return
[+++ b/.travis.yml, +before_install:, + - mkdir "$ANDROID_HOME/licenses" || true, + - echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55\nd56f5187479451eabf01fb78af6dfcb131a6481e" > "$ANDROID_HOME/licenses/android-sdk-license", + - echo -e "\n84831b9409646a918e30573bab4c9c91346d8abd\n504667f4c0de7af1a06de9f4b1727b84351f2910" > "$ANDROID_HOME/licenses/android-sdk-preview-license", +]
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, + return new LoadData<>(model, new OkHttpStreamFetcher(client, model));, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, + return new LoadData<>(model, new OkHttpStreamFetcher(client, model));, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java, + return new LoadData<>(url, new VolleyStreamFetcher(requestQueue, url, requestFactory));, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, + return new LoadData<>(model, new OkHttpStreamFetcher(client, model));, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java, + return new LoadData<>(url, new VolleyStreamFetcher(requestQueue, url, requestFactory));, +++ /dev/null, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, + return new LoadData<>(model, new OkHttpStreamFetcher(client, model));, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java, + return new LoadData<>(url, new VolleyStreamFetcher(requestQueue, url, requestFactory));, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java, +package com.bumptech.glide.load.engine.cache;, +, +import static org.junit.Assert.assertTrue;, +, +import com.bumptech.glide.load.Key;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import java.security.MessageDigest;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;,
[+++ b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgSoftwareLayerSetter.java, +import com.bumptech.glide.load.DataSource;, + Target<PictureDrawable> target, DataSource dataSource, boolean isFirstResource) {]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + private static final ImmutableSet<String> EXCLUDED_METHODS_FROM_BASE_REQUEST_OPTIONS =]
[+++ b/checkstyle.xml, + <!-- Default sun.* packages -->, + <module name="IllegalImport">, + <property name="illegalPkgs" value="sun" />, + <message key="import.illegal" value="Import from illegal package - {0}. Programs that contain direct calls to the sun.* packages are not 100% Pure Java." />, + </module>, + <!-- Prevent importing JUnit 3 classes and Assert methods -->, + <module name="IllegalImport">, + <property name="illegalPkgs" value="junit" />, + <message key="import.illegal" value="Import from illegal package - {0}. Tests are written in JUnit 4, use org.junit.* equivalents." />, + </module>, +++ b/checkstyle.xml, + <!-- Default sun.* packages -->, + <module name="IllegalImport">, + <property name="illegalPkgs" value="sun" />, +
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +, + gifDrawable.stop();, + drawableFromView.stop();]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.load.engine.GlideException;, + * @param e The maybe {@code null} exception containing information about why the, + * request failed., + boolean onLoadFailed(GlideException e, Object model, Target<R> target, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.load.engine.GlideException;, + * @param e The maybe {@code null} exception containing information about why the, + * request failed., + boolean onLoadFailed(GlideException e, Object model, Target<R> target, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + if (requestListener == null || !requestListener.onLoadFailed(e, model, target,, +++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.load.engine.GlideException;, + * @param e The maybe {@code null} exception containing information about why the, + * request failed., + boolean
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerFactoryTest.java, +package com.bumptech.glide.load.engine;, +, +import android.os.Handler;, +, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.Encoder;, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.load.data.DataFetcher;, +import com.bumptech.glide.load.engine.cache.DiskCache;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +, +import java.io.File;, +import java.util.concurrent.ExecutorService;, +, +import static org.junit.Assert.assertNotNull;, +import static org.mockito.Mockito.mock;, +, +@RunWith(RobolectricTestRunner.class), +public class ResourceRunnerFactoryTest {, + private DefaultFactoryHarness harness;, +, + @Before, + public void setUp() {, + harness = new DefaultFactoryHarness();, + }, +, + @Test, + public void testProducesNonNullRunners() {, + assertNotNull(harness.build());, + }, +, + @SuppressWarnings("unchecked"), + private class DefaultFactoryHarness
[+++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +import com.bumptech.glide.request.animation.DrawableCrossFadeViewAnimation;, + * A class for creating a request to load a {@link GlideDrawable}., + extends GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable>, + LoadProvider<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable> loadProvider, Glide glide,, + super(context, model, loadProvider, GlideDrawable.class, glide, requestTracker, lifecycle);, + * Loads and displays the {@link GlideDrawable} retrieved by the given thumbnail request if it finishes before this, + * request. Best used for loading thumbnail {@link GlideDrawable}s that are smaller and will be loaded more quickly, + * than the fullsize {@link GlideDrawable}. There are no guarantees about the order in which the requests will, +
[+++ b/Makefile, + cd library/volley && ant jar, + cp library/volley/bin/volley.jar library/libs, +, +update-ant: setup, +++ b/Makefile, + cd library/volley && ant jar, + cp library/volley/bin/volley.jar library/libs, +, +update-ant: setup, +++ b/library/build.gradle, + compile files('libs/volley.jar'), +++ b/Makefile, + cd library/volley && ant jar, + cp library/volley/bin/volley.jar library/libs, +, +update-ant: setup, +++ b/library/build.gradle, + compile files('libs/volley.jar'), +++ b/library/project.properties, +++ b/Makefile, + cd library/volley && ant jar, + cp library/volley/bin/volley.jar library/libs, +, +update-ant: setup, +++ b/library/build.gradle, + compile files('libs/volley.jar'), +++ b/library/project.properties, +++ b/library/tests/project.properties, +]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java, + private GifHeaderParser parser;, + this(context, bitmapPool, new GifHeaderParser());, + }, +, + GifResourceDecoder(Context context, BitmapPool bitmapPool, GifHeaderParser parser) {, + this.parser = parser;, + GifHeader header = parser.setData(data).parseHeader();, +, + if (header.getNumFrames() <= 0) {, + // If we couldn't decode the GIF, we will end up with a frame count of 0., + return null;, + }, +, + GifData gifData = new GifData(context, bitmapPool, id, header, data, width, height);, + return new GifDataResource(gifData);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java, + private GifHeaderParser parser;, + this(context, bitmapPool, new GifHeaderParser());, + }, +, + GifResourceDecoder(Context context, BitmapPool bitmapPool, GifHeaderParser parser)
[+++ b/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java, + // See https://errorprone.info/bugpattern/IntLongMath., + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java, + // See https://errorprone.info/bugpattern/IntLongMath., + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java, + // See https://errorprone.info/bugpattern/IntLongMath., + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment., +++ b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java, + // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.]
[+++ b/library/src/main/java/com/bumptech/glide/util/LruCache.java, +, +import java.util.Iterator;, + Iterator<Map.Entry<T, Y>> cacheIterator;, + cacheIterator = cache.entrySet().iterator();, + last = cacheIterator.next();, + cacheIterator.remove();]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, + boolean isWeakRefCleared = false;, + isWeakRefCleared = true;, + if (!isWeakRefCleared) {, + fail("Failed to clear weak ref.");, + }, +]
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + private GlideExecutor sourceUnlimitedExecutor;, +, + sourceUnlimitedExecutor = GlideExecutor.newUnlimitedSourceExecutor();, +, + engine = new Engine(memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor,, + sourceUnlimitedExecutor);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + private GlideExecutor sourceUnlimitedExecutor;, +, + sourceUnlimitedExecutor = GlideExecutor.newUnlimitedSourceExecutor();, +, + engine = new Engine(memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor,, + sourceUnlimitedExecutor);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, + GlideExecutor diskCacheExecutor, GlideExecutor sourceExecutor,, + GlideExecutor sourceUnlimitedExecutor) {, + this(memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor, sourceUnlimitedExecutor,, + null, null, null, null, null, null);, + GlideExecutor sourceExecutor, GlideExecutor sourceUnlimitedExecutor, Map<Key, EngineJob> jobs,, + EngineKeyFactory keyFactory, Map<Key, WeakReference<EngineResource<?>>> activeResources,, + EngineJobFactory engineJobFactory, DecodeJobFactory decodeJobFactory,, + ResourceRecycler resourceRecycler) {, + engineJobFactory = new EngineJobFactory(diskCacheExecutor, sourceExecutor,, + sourceUnlimitedExecutor,
[+++ b/library/build.gradle, +, +++ b/library/build.gradle, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.EngineResource;, + verify(target).onResourceReady(any(EngineResource.class), any(GlideAnimation.class));, +++ b/library/build.gradle, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.EngineResource;, + verify(target).onResourceReady(any(EngineResource.class), any(GlideAnimation.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import static org.mockito.Mockito.when;, + verify(harness.cb).onResourceReady(eq(harness.engineResource));, + verify(harness.listener).onEngineJobComplete(eq(harness.key), eq(harness.engineResource));, + verify(cb).onResourceReady(eq(harness.engineResource));, + verify(harness.engineResource).acquire(eq(harness.numCbs));, + verify(harness.listener).onEngineJobComplete(eq(harness.key), (EngineResource) isNull());, + verify(harness.engineResource).setCacheable(eq(harness.isCacheable));, + verify(harness.engineResource).setCacheable(eq(harness.isCacheable));, + verify(harness.engineResource, times(2)).acquire(eq(1));, + verify(harness.engineResource, times(2)).acquire(eq(1));, + EngineResource<Object> engineResource = mock(EngineResource.class);, + EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);, + EngineJob job;, + when(factory.build(eq(resource))).thenReturn(engineResource);, + job = new EngineJob(key, mainHandler, isCacheable, listener, factory);, + EngineResource<Object> engineResource = mock(EngineResource.class);, + EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);, + when(factory.build(eq(resource))).thenReturn(engineResource);, + EngineJob result = new EngineJob(key, mainHandler, isCacheable, listener, factory);, +++ b/library/build.gradle,
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestTest.java, + new GlideBuilder().setSourceExecutor(GlideExecutor.newUnlimitedSourceExecutor()));, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestTest.java, + new GlideBuilder().setSourceExecutor(GlideExecutor.newUnlimitedSourceExecutor()));, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java, + protected String actualCustomStringRepresentation() {, + return getDisplayString(actual());, + if (!actual().isMutable()) {, + if (actual().isMutable()) {, + if (actual().isRecycled()) {, + if (!actual().sameAs(other)) {]
[+++ b/.idea/codeStyleSettings.xml, + <package name="java" withSubpackages="true" static="true" />, + <package name="java" withSubpackages="true" static="false" />]
[+++ b/library/src/com/bumptech/photos/resize/BitmapTracker.java, +import com.bumptech.photos.resize.cache.BitmapPool;, + private final BitmapPool target;, + public BitmapTracker(BitmapPool target, int bitmapsPerSize) {, +++ b/library/src/com/bumptech/photos/resize/BitmapTracker.java, +import com.bumptech.photos.resize.cache.BitmapPool;, + private final BitmapPool target;, + public BitmapTracker(BitmapPool target, int bitmapsPerSize) {, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.cache.BitmapPool;, + private final BitmapPool bitmapCache;, + bitmapCache = new BitmapPool(options.maxPerSize);, +++ b/library/src/com/bumptech/photos/resize/BitmapTracker.java, +import com.bumptech.photos.resize.cache.BitmapPool;, + private final BitmapPool target;, + public BitmapTracker(BitmapPool target, int bitmapsPerSize) {, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.cache.BitmapPool;, + private final BitmapPool bitmapCache;, + bitmapCache = new BitmapPool(options.maxPerSize);, +++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, +import com.bumptech.photos.resize.cache.BitmapPool;, + private final BitmapPool bitmapPool;, + public ImageResizer(BitmapPool bitmapPool) {, + this(bitmapPool, null);, + * @param bitmapPool The cache
[+++ b/README.md, +You can download a jar from GitHub's [release page](https://github.com/bumptech/glide/releases)., + compile 'com.github.bumptech.glide:glide:3.3.+', + <version>3.3.1</version>, +Checkout the [GitHub wiki](https://github.com/bumptech/glide/wiki) for pages on a variety of topics, and see the [javadocs](http://bumptech.github.io/glide/javadocs/latest/index.html)., +Volley is now an optional dependency that can be included via a utility library. To use Volley to fetch media over http/https:, + compile 'com.github.bumptech.glide:volley-integration:1.0.+', + <version>1.0.1</version>, +In addition to Volley, Glide also includes support for fetching media using OkHttp. To use OkHttp to fetch media over http/https:, + compile 'com.github.bumptech.glide:okhttp-integration:1.0.+', + <version>1.0.1</version>, +Version 3.x is a stable public release used in multiple open source projects at Google
[+++ b/library/src/main/java/com/bumptech/glide/BitmapOptions.java, +package com.bumptech.glide;, +, +interface BitmapOptions {, +, + public GenericRequestBuilder<?, ?, ?, ?> fitCenter();, +, + public GenericRequestBuilder<?, ?, ?, ?> centerCrop();, +, +}, +++ b/library/src/main/java/com/bumptech/glide/BitmapOptions.java, +package com.bumptech.glide;, +, +interface BitmapOptions {, +, + public GenericRequestBuilder<?, ?, ?, ?> fitCenter();, +, + public GenericRequestBuilder<?, ?, ?, ?> centerCrop();, +, +}, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.request.animation.ViewPropertyAnimation;, + extends GenericRequestBuilder<ModelType, ImageVideoWrapper, Bitmap, TranscodeType> implements BitmapOptions {, + * @return This request builder., + * @return This request builder., + * Load images at a size that is at most exactly as big as the target using, + * {@link com.bumptech.glide.load.resource.bitmap.Downsampler#AT_MOST}.,
[+++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, + null, glide, null, null);, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, + null, glide, null, null);, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, + new GenericRequestBuilder(null, Object.class, Object.class, mock(Glide.class),, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, + null, glide, null, null);, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, + new GenericRequestBuilder(null, Object.class, Object.class, mock(Glide.class),, +++ b/library/src/androidTest/java/com/bumptech/glide/GifTypeRequestTest.java, + null, glide, null, null);, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, + null, glide, null, null);, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, + new GenericRequestBuilder(null, Object.class, Object.class, mock(Glide.class),, +++ b/library/src/androidTest/java/com/bumptech/glide/GifTypeRequestTest.java, + null, glide, null, null);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, + null, glide, null, null);, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, + new GenericRequestBuilder(null, Object.class, Object.class, mock(Glide.class),, +++ b/library/src/androidTest/java/com/bumptech/glide/GifTypeRequestTest.java, + null, glide, null, null);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, + null, glide,
[+++ b/library/src/main/java/com/bumptech/glide/load/Key.java, + @Override, + @Override, +++ b/library/src/main/java/com/bumptech/glide/load/Key.java, + @Override, + @Override, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +++ b/library/src/main/java/com/bumptech/glide/load/Key.java, + @Override, + @Override, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java, + private static <K, V> void updateEntry(LinkedEntry<K, V> entry) {, + private static <K, V> void removeEntry(LinkedEntry<K, V> entry) {, +++ b/library/src/main/java/com/bumptech/glide/load/Key.java, + @Override, + @Override, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java, + private static <K, V> void updateEntry(LinkedEntry<K, V> entry) {, + private static <K, V> void removeEntry(LinkedEntry<K, V> entry) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullDecoder.java, + private static final NullDecoder<?, ?> NULL_DECODER = new NullDecoder<Object, Object>();, +++ b/library/src/main/java/com/bumptech/glide/load/Key.java, + @Override, + @Override, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java, + private
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + callback.onLoadFailed(e);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + callback.onLoadFailed(e);, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + callback.onLoadFailed(volleyError);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + callback.onLoadFailed(e);, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + callback.onLoadFailed(volleyError);, +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static org.mockito.Matchers.isA;, +import com.android.volley.VolleyError;, + doAnswer(new CountDown()).when(callback).onDataReady(any(InputStream.class));, + doAnswer(new CountDown()).when(callback).onLoadFailed(any(Exception.class));, + public void testCallsLoadFailedIfRedirectLocationIsEmpty() throws Exception {, + verify(callback).onLoadFailed(isA(VolleyError.class));, + public void testCallsLoadFailedIfStatusCodeIsNegativeOne() throws Exception {, + verify(callback).onLoadFailed(isA(VolleyError.class));, + public void testCallsLoadFailedAfterTooManyRedirects() throws Exception {, + verify(callback).onLoadFailed(isA(VolleyError.class));, + public void testCallsLoadFailedIfStatusCodeIs500() throws Exception {, + verify(callback).onLoadFailed(isA(VolleyError.class));, + public void testCallsLoadFailedIfStatusCodeIs400() throws Exception {, + verify(callback).onLoadFailed(isA(VolleyError.class));, + private class CountDown implements Answer<Void> {, +, + @Override, + public Void answer(InvocationOnMock invocation) throws Throwable {, + waitForResponseLatch.countDown();, +
[+++ b/.gitignore, +.gradle, +build, +*.iws, +doc/**, +bin/**, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +*.swo, +samples/flickr/target, +integration/volley/target/**, +**/local.properties, +**/out/**, +**/gen-external-apklibs/**, +++ b/.gitignore, +.gradle, +build, +*.iws, +doc/**, +bin/**, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +*.swo, +samples/flickr/target, +integration/volley/target/**, +**/local.properties, +**/out/**, +**/gen-external-apklibs/**, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +[submodule "third_party/disklrucache"], + path = third_party/disklrucache, + url = https://github.com/sjudd/DiskLruCache.git, +++ b/.gitignore, +.gradle, +build, +*.iws, +doc/**, +bin/**, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +*.swo, +samples/flickr/target, +integration/volley/target/**, +**/local.properties, +**/out/**, +**/gen-external-apklibs/**, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +[submodule "third_party/disklrucache"], + path = third_party/disklrucache, + url
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, + * Returns a {@link RequestOptions} object with {@link #centerCrop(Context)} set.]
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java, + when(requestContext.getModel()).thenReturn(model);, + when(requestContext.getTranscodeClass()).thenReturn(List.class);, + when(requestContext.getErrorDrawable()).thenReturn(errorDrawable);, + when(requestContext.getPlaceholderDrawable()).thenReturn(placeholderDrawable);, + when(requestContext.getOverrideWidth()).thenReturn(overrideWidth);, + when(requestContext.getOverrideHeight()).thenReturn(overrideHeight);, + when(requestContext.getSizeMultiplier()).thenReturn(1f);, +, + .obtain(requestContext, target, requestListener, requestCoordinator, engine, factory);, +++ b/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java, + when(requestContext.getModel()).thenReturn(model);, + when(requestContext.getTranscodeClass()).thenReturn(List.class);, + when(requestContext.getErrorDrawable()).thenReturn(errorDrawable);, + when(requestContext.getPlaceholderDrawable()).thenReturn(placeholderDrawable);, + when(requestContext.getOverrideWidth()).thenReturn(overrideWidth);, + when(requestContext.getOverrideHeight()).thenReturn(overrideHeight);, + when(requestContext.getSizeMultiplier()).thenReturn(1f);, +, + .obtain(requestContext, target, requestListener, requestCoordinator, engine, factory);, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + private final GlideContext context;, + private final Class<TranscodeType> transcodeClass;, + private final RequestTracker requestTracker;, + private final Lifecycle lifecycle;, + model = other.model;, + isModelSet = other.isModelSet;, + requestOptions = other.requestOptions;, + requestOptions.lock();, + private Priority getThumbnailPriority(Priority current) {, + switch (current) {, + return buildRequestRecursive(target, null, transitionOptions,
[+++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*" checks="[a-zA-Z0-9]*"/>, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*" checks="[a-zA-Z0-9]*"/>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + * Fetches an {@link InputStream} using the okhttp library., +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*" checks="[a-zA-Z0-9]*"/>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + * Fetches an {@link InputStream} using the okhttp library., +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java, +import static junit.framework.Assert.assertEquals;, + //@org.junit.Ignore, + // on windows it will fail because new FileOutputStream keeps to lock, + //@org.junit.Ignore, + // on windows it will fail because new FileOutputStream keeps to lock, + assertEquals(length, is.read(result));, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*" checks="[a-zA-Z0-9]*"/>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + * Fetches an {@link InputStream} using the okhttp library., +++
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import com.google.common.base.Function;, +import com.google.common.collect.FluentIterable;, +import java.util.Set;, +import javax.lang.model.element.AnnotationMirror;, +import javax.tools.Diagnostic.Kind;, + validateNewGlideOptionAnnotations(executableElement);, + private void validateNewGlideOptionAnnotations(ExecutableElement executableElement) {, + Set<String> annotationNames =, + FluentIterable.from(executableElement.getAnnotationMirrors()), + .transform(new Function<AnnotationMirror, String>() {, + @Override, + public String apply(AnnotationMirror input) {, + return input.getAnnotationType().asElement().toString();, + }, + }), + .toSet();, + if (!annotationNames.contains("android.support.annotation.NonNull")) {, + processingEnvironment.getMessager().printMessage(, + Kind.WARNING,, + executableElement.getEnclosingElement() + "#" + executableElement.getSimpleName(), + + " is missing the @NonNull annotation,", + + " please add it to ensure that your extension methods are always returning non-null", + + " values");, + }, + }, +, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import com.google.common.base.Function;,
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, + if (!cacheKeys.contains(data.sourceKey)) {, + }, + for (int j = 0; j < data.alternateKeys.size(); j++) {, + if (!cacheKeys.contains(data.alternateKeys.get(j))) {, + cacheKeys.add(data.alternateKeys.get(j));, + }, + }]
[+++ b/gradle.properties, +VERSION_NAME=4.8.0-SNAPSHOT, +VERSION_MINOR=8, +VERSION_PATCH=0]
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ExifInterfaceImageHeaderParser.java, +import android.os.Build;, +import android.support.annotation.RequiresApi;, +@RequiresApi(Build.VERSION_CODES.O_MR1), +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ExifInterfaceImageHeaderParser.java, +import android.os.Build;, +import android.support.annotation.RequiresApi;, +@RequiresApi(Build.VERSION_CODES.O_MR1), +++ b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java, + final SingleRequest<List> request = builder.addRequestListener(listener1).build();]
[+++ b/library/src/main/java/com/bumptech/glide/request/FutureTarget.java, + * {@link java.util.concurrent.Future}. For example:, + * .into(250, 250);]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.gitmodules, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, +++ b/.gitignore, +++ b/.gitmodules, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, +++ b/Makefile, +, +glide-minus-volley:, + cd library && ant clean && ant glide-minus-volley, +, +++ b/.gitignore, +++ b/.gitmodules, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, +++ b/Makefile, +, +glide-minus-volley:, + cd library && ant clean && ant glide-minus-volley, +, +++ b/library/AndroidManifest.xml, + android:versionName="2.0.3" >, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/.gitignore, +++ b/.gitmodules, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, +++ b/Makefile, +, +glide-minus-volley:, + cd library && ant clean && ant glide-minus-volley, +, +++ b/library/AndroidManifest.xml, + android:versionName="2.0.3" >,
[+++ b/gradle.properties, +VERSION_NAME=4.5.0-SNAPSHOT, +VERSION_MINOR=5]
[+++ b/.idea/codeStyleSettings.xml, + <option name="INSERT_INNER_CLASS_IMPORTS" value="true" />, + <option name="CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND" value="999" />, + <option name="NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND" value="999" />, + <option name="PACKAGES_TO_USE_IMPORT_ON_DEMAND">, + <value />, + </option>, + <option name="KEEP_BLANK_LINES_BEFORE_RBRACE" value="0" />, + <option name="ALIGN_MULTILINE_PARAMETERS" value="false" />, + <option name="ALIGN_MULTILINE_FOR" value="false" />, + <option name="SPACE_BEFORE_ARRAY_INITIALIZER_LBRACE" value="true" />, + <AndroidXmlCodeStyleSettings>, + <option name="USE_CUSTOM_SETTINGS" value="true" />, + <option name="LAYOUT_SETTINGS">, + <value>, + <option name="INSERT_BLANK_LINE_BEFORE_TAG" value="false" />, + </value>, + </option>, + </AndroidXmlCodeStyleSettings>, + <JSCodeStyleSettings>, + <option name="INDENT_CHAINED_CALLS" value="false" />, + </JSCodeStyleSettings>, + <JavaCodeStyleSettings>, + <option name="DO_NOT_WRAP_AFTER_SINGLE_ANNOTATION" value="true" />, + </JavaCodeStyleSettings>, + <Python>, + <option name="USE_CONTINUATION_INDENT_FOR_ARGUMENTS" value="true" />, + </Python>, + <TypeScriptCodeStyleSettings>, + <option
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + checkAndInitializeGlide(context);, + }, + }, + }, +, + return glide;, + }, +, + private static void checkAndInitializeGlide(Context context) {, + initializeGlide(context);, + private static void initializeGlide(Context context) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + checkAndInitializeGlide(context);, + }, + }, + }, +, + return glide;, + }, +, + private static void checkAndInitializeGlide(Context context) {, + initializeGlide(context);, + private static void initializeGlide(Context context) {, +++ b/library/src/main/java/com/bumptech/glide/module/RegistersComponents.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + checkAndInitializeGlide(context);, + }, + }, + }, +, + return glide;, + }, +, + private static void checkAndInitializeGlide(Context context) {, + initializeGlide(context);, + private static void initializeGlide(Context
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/build.gradle, + toolVersion = "6.6", + }, +, + checkstyle {, +++ b/.idea/codeStyleSettings.xml, +++ b/build.gradle, + toolVersion = "6.6", + }, +, + checkstyle {, +++ b/checkstyle.xml, + <property name="sortStaticImportsAlphabetically" value="true"/>, +++ b/.idea/codeStyleSettings.xml, +++ b/build.gradle, + toolVersion = "6.6", + }, +, + checkstyle {, +++ b/checkstyle.xml, + <property name="sortStaticImportsAlphabetically" value="true"/>, +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static com.google.common.truth.Truth.assertThat;, +++ b/.idea/codeStyleSettings.xml, +++ b/build.gradle, + toolVersion = "6.6", + }, +, + checkstyle {, +++ b/checkstyle.xml, + <property name="sortStaticImportsAlphabetically" value="true"/>, +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static com.google.common.truth.Truth.assertThat;, +++ b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import static com.google.common.truth.Truth.assertThat;, +++ b/.idea/codeStyleSettings.xml, +++ b/build.gradle, + toolVersion = "6.6",
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="18" />]
[+++ b/gradle.properties, +OK_HTTP_VERSION=3.9.1, +++ b/gradle.properties, +OK_HTTP_VERSION=3.9.1, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + private InputStream stream;, + private ResponseBody responseBody;, + // call may be accessed on the main thread while the object is in use on other threads. All other, + // accesses to variables may occur on different threads, but only one at a time., + private volatile Call call;]
[+++ b/library/pom.xml, + <modelVersion>4.0.0</modelVersion>, + <groupId>com.bumptech.glide</groupId>, + <artifactId>glide-parent</artifactId>, + <version>3.3.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + <name>Glide</name>, + <scope>test</scope>, +++ b/library/pom.xml, + <modelVersion>4.0.0</modelVersion>, + <groupId>com.bumptech.glide</groupId>, + <artifactId>glide-parent</artifactId>, + <version>3.3.0-SNAPSHOT</version>, + <relativePath>../pom.xml</relativePath>, + <name>Glide</name>, + <scope>test</scope>, +++ b/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>org.sonatype.oss</groupId>, + <artifactId>oss-parent</artifactId>, + <version>7</version>, + </parent>, +, + <groupId>com.bumptech.glide</groupId>, + <artifactId>glide-parent</artifactId>, + <version>3.3.0-SNAPSHOT</version>, + <packaging>pom</packaging>, +, + <name>Glide (Parent)</name>, + , + <modules>, + <module>library</module>, + <module>samples</module>, + </modules>, +, + <build>, + <plugins>, + <plugin>, + <groupId>com.jayway.maven.plugins.android.generation2</groupId>, + <artifactId>android-maven-plugin</artifactId>, + <version>3.9.0-rc.1</version>, + <configuration>, + <sdk>, + <platform>19</platform>, + </sdk>,
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java, + throw new IllegalStateException(, + "Failed to find any load path from " + helper.getModelClass() + " to ", + + helper.getTranscodeClass());]
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.ContentLengthInputStream;, + private static final String CONTENT_LENGTH_HEADER = "Content-Length";, +, + String contentLength = response.header(CONTENT_LENGTH_HEADER);, + stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.ContentLengthInputStream;, + private static final String CONTENT_LENGTH_HEADER = "Content-Length";, +, + String contentLength = response.header(CONTENT_LENGTH_HEADER);, + stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.ContentLengthInputStream;, + private static final String CONTENT_LENGTH_HEADER = "Content-Length";, +, + String contentLength = response.header(CONTENT_LENGTH_HEADER);, + stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +++ b/library/src/androidTest/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java, +package com.bumptech.glide.util;,
[+++ b/library/src/main/java/com/bumptech/glide/DownloadOptions.java, + * @param width The width in pixels to use to fetch the data., + * @param height The height in pixels to use to fetch the data., +++ b/library/src/main/java/com/bumptech/glide/DownloadOptions.java, + * @param width The width in pixels to use to fetch the data., + * @param height The height in pixels to use to fetch the data., +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + * @param width The width in pixels to use to load the resource., + * @param height The height in pixels to use to load the resource., + * @param width The desired width in pixels
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + return into(target, /*targetListener=*/ null);, + private <Y extends Target<TranscodeType>> Y into(, + @NonNull Y target,, + @Nullable RequestListener<TranscodeType> targetListener) {, + return into(target, targetListener, getMutableOptions());, + }, +, + private <Y extends Target<TranscodeType>> Y into(, + @NonNull Y target,, + @Nullable RequestListener<TranscodeType> targetListener,, + RequestOptions options) {, + Request request = buildRequest(target, targetListener, options);, + return into(, + glideContext.buildImageViewTarget(view, transcodeClass),, + /*targetListener=*/ null,, + requestOptions);, + into(target, target);, + into(target, target);, + private Request buildRequest(, + Target<TranscodeType> target,, + @Nullable RequestListener<TranscodeType> targetListener,, + RequestOptions requestOptions) {, + return buildRequestRecursive(, + target,, + targetListener,, + /*requestCoordinator=*/ null,,
[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.annotation.NonNull;, + @NonNull, + public <Data> Registry register(@NonNull Class<Data> dataClass, @NonNull Encoder<Data> encoder) {, + @NonNull, + public <Data> Registry append(@NonNull Class<Data> dataClass, @NonNull Encoder<Data> encoder) {, + @NonNull, + public <Data> Registry prepend(@NonNull Class<Data> dataClass, @NonNull Encoder<Data> encoder) {, + @NonNull, + @NonNull Class<Data> dataClass,, + @NonNull Class<TResource> resourceClass,, + @NonNull ResourceDecoder<Data, TResource> decoder) {, + @NonNull, + @NonNull String bucket,, + @NonNull Class<Data> dataClass,, + @NonNull Class<TResource> resourceClass,, + @NonNull ResourceDecoder<Data, TResource> decoder) {, + @NonNull, + @NonNull Class<Data> dataClass,, + @NonNull Class<TResource> resourceClass,, + @NonNull ResourceDecoder<Data, TResource> decoder) {, + @NonNull, + @NonNull
[+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + // We must call isFirstReadyResource before setting status., + boolean isFirstResource = isFirstReadyResource();, + loadedFromMemoryCache, isFirstResource)) {, + animationFactory.build(loadedFromMemoryCache, isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + // We must call isFirstReadyResource before setting status., + boolean isFirstResource = isFirstReadyResource();, + loadedFromMemoryCache, isFirstResource)) {, + animationFactory.build(loadedFromMemoryCache, isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, + private DrawableCrossFadeTransition firstResourceTransition;, + private DrawableCrossFadeTransition secondResourceTransition;, + this(new ViewAnimationFactory<Drawable>(, + new DefaultViewTransitionAnimationFactory(duration)), duration);, + } else if (isFirstResource) {, + return getFirstResourceTransition();, + } else {, + return getSecondResourceTransition();, + }, +, + private Transition<Drawable> getFirstResourceTransition() {, + if (firstResourceTransition == null) {, + Transition<Drawable> defaultAnimation =, + viewAnimationFactory.build(false
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +import com.bumptech.glide.load.resource.bitmap.CircleCrop;, + * Applies {@link CircleCrop} to all default types, and ignores unknown types., + *, + * @param context Any {@link Context}., + * @see #optionalTransform(Context, Transformation), + * @see #circleCrop(Context), + */, + public CHILD optionalCircleCrop(Context context) {, + downsample(DownsampleStrategy.CENTER_OUTSIDE);, + return optionalTransform(context, new CircleCrop(context));, + }, +, + /**, + * Applies {@link CircleCrop} to all default types and throws an exception if asked to transform, + * an unknown type., + *, + * @param context Any {@link Context}., + * @see #transform(Class, Transformation), + * @see #optionalCenterCrop(Context), + */, + public
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +import com.bumptech.glide.GlideContext;, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.Transformation;, + harness.isMemoryCacheable = false;, + harness.isMemoryCacheable = false;, + .buildKey(eq(harness.model), eq(harness.signature), eq(harness.width), eq(harness.height),, + eq(harness.transformations), eq(Object.class), eq(Object.class), eq(harness.options));, + Object model = new Object();, + Key signature = mock(Key.class);, + Map<Class<?>, Transformation<?>> transformations = new HashMap<>();, + Options options = new Options();, + GlideContext glideContext = mock(GlideContext.class);, + boolean isMemoryCacheable = true;, + when(keyFactory.buildKey(eq(model), eq(signature), anyInt(), anyInt(), eq(transformations),, + eq(Object.class), eq(Object.class), eq(options))).thenReturn(cacheKey);, + return engine.load(glideContext,, + model,, + signature,, + width,, + height,, + Object.class,, + Object.class,, + Priority.HIGH,, + DiskCacheStrategy.ALL,, + transformations,, + false /*isTransformationRequired*/,, + options,, +
[+++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, + InputStream inputStream = contentResolver.openInputStream(uri);, + throw new FileNotFoundException("InputStream is null for :" + uri);, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, + InputStream inputStream = contentResolver.openInputStream(uri);, + throw new FileNotFoundException("InputStream is null for :" + uri);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, + this.context = context.getApplicationContext();, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, + InputStream inputStream = contentResolver.openInputStream(uri);, + throw new FileNotFoundException("InputStream is null for :" + uri);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, + this.context = context.getApplicationContext();, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, + InputStream inputStream = contentResolver.openInputStream(uri);, + throw new FileNotFoundException("InputStream is null for :" + uri);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, + this.context = context.getApplicationContext();, +++ /dev/null, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, + InputStream inputStream = contentResolver.openInputStream(uri);,
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + byte transparentColorIndex = -1;, +, + byte byteCurrentColorIndex = mainPixels[sx];, + int currentColorIndex = ((int) byteCurrentColorIndex) & MASK_INT_LOWEST_BYTE;, + if (currentColorIndex != transparentColorIndex) {, + int color = act[currentColorIndex];, + if (color != COLOR_TRANSPARENT_BLACK) {, + dest[dx] = color;, + transparentColorIndex = byteCurrentColorIndex;, + }, + isFirstFrameTransparent =, + isFirstFrameTransparent == null && isFirstFrame && transparentColorIndex != -1;]
[+++ b/library/src/main/java/com/bumptech/glide/manager/LifecycleRequestManager.java, +class LifecycleRequestManager implements RequestManager {, + private final RequestTracker requestTracker;, + this(context, new RequestTracker(), new ConnectivityMonitorFactory());, + LifecycleRequestManager(Context context, RequestTracker requestTracker, ConnectivityMonitorFactory factory) {, + this.requestTracker = requestTracker;, + this.connectivityMonitor = factory.build(context, new RequestManagerConnectivityListener());, + requestTracker.addRequest(request);, + requestTracker.removeRequest(request);, + void onStart() {, + requestTracker.resumeRequests();, + void onStop() {, + requestTracker.pauseRequests();, + void onDestroy() {, + requestTracker.clearRequests();, +, + private class RequestManagerConnectivityListener implements ConnectivityMonitor.ConnectivityListener {, + if (isConnected) {, + requestTracker.restartRequests();, +++ b/library/src/main/java/com/bumptech/glide/manager/LifecycleRequestManager.java, +class LifecycleRequestManager implements RequestManager {, + private final RequestTracker requestTracker;, + this(context, new RequestTracker(), new ConnectivityMonitorFactory());, + LifecycleRequestManager(Context context, RequestTracker requestTracker, ConnectivityMonitorFactory factory) {, +
[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.RequestTracker;, + Class<TranscodeType> transcodeClass, Glide glide, RequestTracker requestTracker) {, + super(context, model, streamLoadProvider, transcodeClass, glide, requestTracker);, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.RequestTracker;, + Class<TranscodeType> transcodeClass, Glide glide, RequestTracker requestTracker) {, + super(context, model, streamLoadProvider, transcodeClass, glide, requestTracker);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +import com.bumptech.glide.manager.RequestTracker;, + private RequestTracker requestTracker;, + Glide glide, RequestTracker requestTracker) {, + glide, requestTracker);, + this.requestTracker= requestTracker;, + transcodeClass, glide, requestTracker);, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.RequestTracker;, + Class<TranscodeType> transcodeClass, Glide glide, RequestTracker requestTracker) {, + super(context, model, streamLoadProvider, transcodeClass, glide, requestTracker);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +import com.bumptech.glide.manager.RequestTracker;, + private RequestTracker requestTracker;, + Glide glide, RequestTracker requestTracker) {, + glide, requestTracker);, +
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java, + builder.setConfig(, + defaultFormat == DecodeFormat.PREFER_ARGB_8888, + || defaultFormat == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE, +++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java, + builder.setConfig(, + defaultFormat == DecodeFormat.PREFER_ARGB_8888, + || defaultFormat == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + || format == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE]
[+++ b/build.gradle, +, +task wrapper(type: Wrapper) {, + gradleVersion = '1.10', +}, +, +++ b/build.gradle, +, +task wrapper(type: Wrapper) {, + gradleVersion = '1.10', +}, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, +, +task wrapper(type: Wrapper) {, + gradleVersion = '1.10', +}, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Jun 23 11:25:59 PDT 2014, +distributionUrl=https\://services.gradle.org/distributions/gradle-1.10-bin.zip, +++ b/build.gradle, +, +task wrapper(type: Wrapper) {, + gradleVersion = '1.10', +}, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Jun 23 11:25:59 PDT 2014, +distributionUrl=https\://services.gradle.org/distributions/gradle-1.10-bin.zip, +++ b/library/build.gradle, +++ b/build.gradle, +, +task wrapper(type: Wrapper) {, + gradleVersion = '1.10', +}, +, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Jun 23 11:25:59
[+++ b/samples/contacturi/build.gradle, + annotationProcessor project(':annotation:compiler'), +++ b/samples/contacturi/build.gradle, + annotationProcessor project(':annotation:compiler'), +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/ContactUriModule.java, +package com.bumptech.glide.samples.contacturi;, +, +import com.bumptech.glide.annotation.GlideModule;, +import com.bumptech.glide.module.AppGlideModule;, +, +/**, + * Ensures that Glide's generated API is created for the Contact Uri sample., + */, +@GlideModule, +public class ContactUriModule extends AppGlideModule {, + // Intentionally empty., +}, +++ b/samples/contacturi/build.gradle, + annotationProcessor project(':annotation:compiler'), +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/ContactUriModule.java, +package com.bumptech.glide.samples.contacturi;, +, +import com.bumptech.glide.annotation.GlideModule;, +import com.bumptech.glide.module.AppGlideModule;, +, +/**, + * Ensures that Glide's generated API is created for the Contact Uri sample., + */, +@GlideModule, +public class ContactUriModule extends AppGlideModule {, + // Intentionally empty., +}, +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java, + GlideRequests glideRequests =
[+++ b/library/src/main/java/com/bumptech/glide/load/model/LazyHeaderFactory.java, +import android.support.annotation.Nullable;, +, + /**, + * Returns an http header, or {@code null} if no header could be built., + *, + * <p>Returning {@code null} or an empty String from this method will result in this particular, + * key/value being excluded from the headers provided in the request. If there are multiple, + * factories or values for a particular key, any non-null values will still be included for that, + * key., + */, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/model/LazyHeaderFactory.java, +import android.support.annotation.Nullable;, +, + /**, + * Returns an http header, or {@code null} if
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++
[+++ b/library/AndroidManifest.xml, + android:versionCode="7", + android:versionName="2.0.5" >]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + ImmutableSet.of("clone", "apply", "autoLock", "lock", "autoClone");, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + ImmutableSet.of("clone", "apply", "autoLock", "lock", "autoClone");, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, + "autoClone()"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + ImmutableSet.of("clone", "apply", "autoLock", "lock", "autoClone");, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, + "autoClone()"), +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + this.requestOptions = toSet.clone().autoClone();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + ImmutableSet.of("clone", "apply", "autoLock", "lock", "autoClone");, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, + "autoClone()"), +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + this.requestOptions = toSet.clone().autoClone();, +++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, + *, + * @deprecated Use {@link #autoClone()} instead., + @Deprecated, + return autoClone();, + }, +, + /**, + * Similar to {@link #lock()} except that mutations cause a {@link #clone()} operation to happen, + * before the mutation resulting
[+++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import com.bumptech.glide.gifdecoder.StandardGifDecoder;, + return new StandardGifDecoder(bitmapProvider);, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import com.bumptech.glide.gifdecoder.StandardGifDecoder;, + return new StandardGifDecoder(bitmapProvider);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +import com.bumptech.glide.gifdecoder.StandardGifDecoder;, + return new StandardGifDecoder(provider, header, data, sampleSize);, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import com.bumptech.glide.gifdecoder.StandardGifDecoder;, + return new StandardGifDecoder(bitmapProvider);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +import com.bumptech.glide.gifdecoder.StandardGifDecoder;, + return new StandardGifDecoder(provider, header, data, sampleSize);, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, + * Shared interface for GIF decoders., +public interface GifDecoder {, + int getWidth();, + int getHeight();, + ByteBuffer getData();, + int getStatus();, + void advance();, + int getDelay(int n);, + int getNextDelay();, + int getFrameCount();, + int getCurrentFrameIndex();, + void resetFrameIndex();, + int getLoopCount();, + int getByteSize();, + Bitmap getNextFrame();,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java, +import android.support.annotation.RequiresApi;, +@RequiresApi(Build.VERSION_CODES.KITKAT), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java, +import android.support.annotation.RequiresApi;, +@RequiresApi(Build.VERSION_CODES.KITKAT), +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java, +import android.support.annotation.RequiresApi;, +@RequiresApi(Build.VERSION_CODES.KITKAT), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java, +import android.support.annotation.RequiresApi;, +@RequiresApi(Build.VERSION_CODES.KITKAT), +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java, +import android.support.annotation.RequiresApi;, +@RequiresApi(Build.VERSION_CODES.KITKAT), +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java, +import android.annotation.TargetApi;, + @TargetApi(Build.VERSION_CODES.KITKAT), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java, +import android.support.annotation.RequiresApi;, +@RequiresApi(Build.VERSION_CODES.KITKAT), +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java, +import android.support.annotation.RequiresApi;, +@RequiresApi(Build.VERSION_CODES.KITKAT), +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java, +import android.annotation.TargetApi;, + @TargetApi(Build.VERSION_CODES.KITKAT), +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + public void onDecodeComplete(BitmapPool bitmapPool, Bitmap downsampled) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java,
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, + * @return {@code true} to prevent {@link Target#onResourceReady(Object, Transition)} from, + * being called on {@code target}, typically because the listener wants to, + * update the {@code target} or the object the {@code target} wraps, + * itself or {@code false} to allow {@link Target#onResourceReady(Object, Transition)}]
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + defaultRequestOptions = defaultRequestOptions.apply(new RequestOptions().format(decodeFormat));]
[+++ b/library/src/main/java/com/bumptech/glide/util/Util.java, + @Deprecated]
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + private GlideExecutor animationExecutor;, + * Sets the {@link GlideExecutor} to use when retrieving, + * <p>The thread count defaults to the number of cores available on the device, with a maximum of, + * 4., + *, + * <p>Use the {@link GlideExecutor#newSourceExecutor()} methods if you'd like to specify options, + * for the source executor., + *, + * @param service The ExecutorService to use., + * @return This builder., + * @see #setDiskCacheExecutor(GlideExecutor), + * @see GlideExecutor, + *, + * @deprecated Use {@link #setSourceExecutor(GlideExecutor)}, + */, + @Deprecated, + public GlideBuilder setResizeExecutor(GlideExecutor service)
[+++ b/.gitignore, +library/.gradle, +library/.settings]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + // File wasn't able to create a directory, or the result exists but not a directory, + return null;, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + // File wasn't able to create a directory, or the result exists but not a directory, + return null;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java, + // TODO calling twice with different arguments makes it return the cache for the same directory, it's public!, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + // File wasn't able to create a directory, or the result exists but not a directory, + return null;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java, + // TODO calling twice with different arguments makes it
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + int averageColor;, + if (sampleSize == 1) {, + int currentColorIndex = ((int) mainPixels[sx]) & 0xff;, + averageColor = act[currentColorIndex];, + } else {, + // TODO: This is substantially slower (up to 50ms per frame) than just grabbing the, + // current color index above, even with a sample size of 1., + averageColor = averageColorsNear(sx, maxPositionInSource, currentFrame.iw);, + }]
[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, + RequestListener<? super ModelType, TranscodeType> requestListener) {, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, + RequestListener<? super ModelType, TranscodeType> requestListener) {, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + public DrawableRequestBuilder<ModelType> listener(, + RequestListener<? super ModelType, GlideDrawable> requestListener) {, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, + RequestListener<? super ModelType, TranscodeType> requestListener) {, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + public DrawableRequestBuilder<ModelType> listener(, + RequestListener<? super ModelType, GlideDrawable> requestListener) {, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + private RequestListener<? super ModelType, TranscodeType> requestListener;, + RequestListener<? super ModelType, TranscodeType> requestListener) {, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, + RequestListener<? super ModelType, TranscodeType> requestListener) {, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + public DrawableRequestBuilder<ModelType> listener(, + RequestListener<? super ModelType, GlideDrawable> requestListener) {, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + private RequestListener<? super ModelType, TranscodeType>
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, + List<?> values = (List<?>) value;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, + List<?> values = (List<?>) value;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.HashSet;, +import java.util.Set;, + .addAnnotation(SafeVarargs.class), + .addAnnotation(, + AnnotationSpec.builder(SuppressWarnings.class), + .addMember("value", "$S", "varargs"), + .build());, + && !input.type.equals(TypeName.get(SafeVarargs.class)), + // We need to combine warnings below., + && !input.type.equals(TypeName.get(SuppressWarnings.class));, + AnnotationSpec suppressWarnings = buildSuppressWarnings(requestOptionMethod);, + if (suppressWarnings != null) {, + result.addAnnotation(suppressWarnings);, + }, + return result.build();, + @Nullable, + private AnnotationSpec buildSuppressWarnings(MethodSpec requestOptionMethod) {, + Set<String> suppressions = new HashSet<>();, + if (requestOptionMethod.annotations.contains(, + AnnotationSpec.builder(SuppressWarnings.class).build())) {, + for (AnnotationSpec annotation : requestOptionMethod.annotations) {, + if (annotation.type.equals(TypeName.get(SuppressWarnings.class))) {, + List<CodeBlock>
[+++ b/gradle.properties, +SUPPORT_V4_VERSION=22.2.0, +SUPPORT_V7_VERSION=22.2.0]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +import com.bumptech.glide.tests.Util;, + Util.setSdkVersionInt(initialSdkVersion);, + Util.setSdkVersionInt(10);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +import com.bumptech.glide.tests.Util;, + Util.setSdkVersionInt(initialSdkVersion);, + Util.setSdkVersionInt(10);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java, +import com.bumptech.glide.tests.Util;, + Util.setSdkVersionInt(currentBuildVersion);, + Util.setSdkVersionInt(18);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +import com.bumptech.glide.tests.Util;, + Util.setSdkVersionInt(initialSdkVersion);, + Util.setSdkVersionInt(10);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java, +import com.bumptech.glide.tests.Util;, + Util.setSdkVersionInt(currentBuildVersion);, + Util.setSdkVersionInt(18);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +import android.os.Build;, +import com.bumptech.glide.tests.Util;, +import org.junit.After;, + private int initialSdkVersion;, + initialSdkVersion = Build.VERSION.SDK_INT;, + }, +, + @After, + public void tearDown() {, + Util.setSdkVersionInt(initialSdkVersion);, + public void testStopsWhenCurrentFrameFinishesIfHasNoCallbackAndIsAtLeastAtHoneycomb() {, + public void testDoesNotStopWhenCurrentFrameFinishesIfHasNoCallbackAndIsPreHoneycomb() {, + Util.setSdkVersionInt(10);, +, + drawable.setIsRunning(true);, + drawable.setCallback(null);, + drawable.onFrameRead(0);, +, + assertTrue(drawable.isRunning());, + }, +, + @Test, + public void testResetsFrameManagerWhenCurrentFinishesIfHasNoCallbackAndIsAtLeastAtHoneycomb()
[+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplicationComponent.java, +import dagger.android.AndroidInjectionModule;, +/** Specifies Dagger modules for {@link ImgurApplication}. */, +@Component(, + modules = {, + AndroidInjectionModule.class,, +public interface ImgurApplicationComponent extends AndroidInjector<ImgurApplication> {}]
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import com.bumptech.glide.signature.ObjectKey;, + return loadGeneric(model).apply(signatureOf(new ObjectKey(UUID.randomUUID().toString())), +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import com.bumptech.glide.signature.ObjectKey;, + return loadGeneric(model).apply(signatureOf(new ObjectKey(UUID.randomUUID().toString())), +++ b/library/src/main/java/com/bumptech/glide/signature/ApplicationVersionSignature.java, + return new ObjectKey(versionCode);, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import com.bumptech.glide.signature.ObjectKey;, + return loadGeneric(model).apply(signatureOf(new ObjectKey(UUID.randomUUID().toString())), +++ b/library/src/main/java/com/bumptech/glide/signature/ApplicationVersionSignature.java, + return new ObjectKey(versionCode);, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import com.bumptech.glide.signature.ObjectKey;, + return loadGeneric(model).apply(signatureOf(new ObjectKey(UUID.randomUUID().toString())), +++ b/library/src/main/java/com/bumptech/glide/signature/ApplicationVersionSignature.java, + return new ObjectKey(versionCode);, +++ /dev/null, +++ b/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java, +import com.bumptech.glide.signature.ObjectKey;, + factory.sourceKey = new ObjectKey("secondKey");, + factory.signature = new ObjectKey("secondSignature");, + Key sourceKey = new ObjectKey("sourceKey");, + Key signature = new ObjectKey("signature");, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import com.bumptech.glide.signature.ObjectKey;, + return loadGeneric(model).apply(signatureOf(new ObjectKey(UUID.randomUUID().toString())), +++ b/library/src/main/java/com/bumptech/glide/signature/ApplicationVersionSignature.java, + return new ObjectKey(versionCode);, +++ /dev/null, +++ b/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java, +import
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +import android.content.res.Resources;, + private static final int THEME = 1 << 16;, + private Resources.Theme theme;, + * Sets the {@link android.content.res.Resources.Theme} to apply when loading {@link Drawable}s, + * for resource ids provided via {@link #error(int)}, {@link #placeholder(int)}, and, + * {@link #fallback(Drawable)}., + *, + * @param theme The theme to use when loading Drawables., + * @return this request builder., + */, + public final CHILD theme(Resources.Theme theme) {, + this.theme = theme;, + fields |= THEME;, +, + return selfOrThrowIfLocked();, + }, +, + /**, + if (isSet(other.fields, THEME)) {, + theme =
[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.model.MultiModelLoaderFactory;, +import static com.bumptech.glide.request.RequestOptions.placeholderOf;, +import static org.junit.Assert.assertNotNull;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyObject;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Matchers.notNull;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, + when(mockUrlLoaderFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))), + Glide.get(getContext()).prepend(GlideUrl.class, InputStream.class, mockUrlLoaderFactory);, + when(failFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))).thenReturn(failLoader);, + Glide.get(getContext()).prepend(failModel, failResource, failFactory);, + when(modelLoaderFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))), + Glide.get(Robolectric.application).prepend(modelClass, InputStream.class, modelLoaderFactory);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.model.MultiModelLoaderFactory;, +import static com.bumptech.glide.request.RequestOptions.placeholderOf;, +import static org.junit.Assert.assertNotNull;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyObject;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Matchers.notNull;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;,
[+++ b/library/src/main/java/com/bumptech/glide/util/Util.java, + throw new IllegalArgumentException("You must call this method on a background thread");]
[+++ b/gradle.properties, +VERSION_NAME=4.4.0-SNAPSHOT, +VERSION_MINOR=4, +VERSION_PATCH=0]
[+++ b/library/AndroidManifest.xml, + android:versionName="3.1.0a" >]
[+++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import com.bumptech.glide.load.model.GlideUrl;, + return new VolleyStreamFetcher(requestQueue, new GlideUrl(url.toString()), requestFuture);, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import com.bumptech.glide.load.model.GlideUrl;, + return new VolleyStreamFetcher(requestQueue, new GlideUrl(url.toString()), requestFuture);, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +import com.bumptech.glide.load.model.GlideUrl;, +import java.lang.reflect.Method;, + private final GlideUrl url;, + public VolleyStreamFetcher(RequestQueue requestQueue, GlideUrl url) {, + public VolleyStreamFetcher(RequestQueue requestQueue, GlideUrl url,, + VolleyRequestFuture<InputStream> requestFuture) {, + // Make sure the string url safely encodes non ascii characters., + String stringUrl = url.toURL().toString();, + GlideRequest request = new GlideRequest(stringUrl, requestFuture, glideToVolleyPriority(priority));, + return url.toString();, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import com.bumptech.glide.load.model.GlideUrl;, + return new VolleyStreamFetcher(requestQueue, new GlideUrl(url.toString()), requestFuture);, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +import com.bumptech.glide.load.model.GlideUrl;, +import java.lang.reflect.Method;, + private final GlideUrl
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + context.getApplicationContext().registerComponentCallbacks(glide);, + glideContext =, + new GlideContext(, + context, registry, imageViewTargetFactory, defaultRequestOptions, engine, logLevel);, + Log.d("TEST", "trimMemory: " + level);, + Log.d("TEST", "onLowMemory");, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + context.getApplicationContext().registerComponentCallbacks(glide);, + glideContext =, + new GlideContext(, + context, registry, imageViewTargetFactory, defaultRequestOptions, engine, logLevel);, + Log.d("TEST", "trimMemory: " + level);, + Log.d("TEST", "onLowMemory");, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +public class GlideContext extends ContextWrapper {, + Engine engine, int logLevel) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + context.getApplicationContext().registerComponentCallbacks(glide);, + glideContext =, + new GlideContext(, + context, registry, imageViewTargetFactory, defaultRequestOptions, engine, logLevel);, + Log.d("TEST", "trimMemory: " + level);, + Log.d("TEST", "onLowMemory");, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +public class GlideContext extends ContextWrapper
[+++ b/gradle.properties, +VERSION_NAME=4.2.0-SNAPSHOT, +VERSION_MINOR=2]
[+++ b/.gitignore, +.settings, +/library/.classpath, +/library/.project]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + try {, + } catch (AbstractMethodError e) {, + throw new IllegalStateException(, + "Attempting to register a Glide v3 module. If you see this, you or one of your", + + " dependencies may be including Glide v3 even though you're using Glide v4.", + + " You'll need to find and remove (or update) the offending dependency.", + + " The v3 module name is: " + module.getClass().getName(), e);, + }]
[+++ b/gradle.properties, +VERSION_NAME=4.2.0]
[+++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java, +import android.util.Log;, + private static final String TAG = "ConnectivityMonitor";, + try {, + } catch (SecurityException e) {, + // See #1417., + if (Log.isLoggable(TAG, Log.WARN)) {, + Log.w(TAG, "Failed to register", e);, + }, + }]
[+++ b/.travis.yml]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + private static volatile boolean isInitializing;, + // In the thread running initGlide(), one or more classes may call Glide.get(context)., + // Without this check, those calls could trigger infinite recursion., + if (isInitializing) {, + throw new IllegalStateException("You cannot call Glide.get() in registerComponents(),", + + " use the provided Glide instance instead");, + }, + isInitializing = true;, + isInitializing = false;, + public static synchronized void init(Glide glide) {, + public static synchronized void tearDown() {, + Glide glide = builder.build(applicationContext);, + Glide.glide = glide;]
[+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +import android.support.annotation.Nullable;, + @Nullable, + && Util.bothNullOrEqual(model, that.model), +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +import android.support.annotation.Nullable;, + @Nullable, + && Util.bothNullOrEqual(model, that.model), +++ b/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java, + harness.model = null;, + SingleRequest<List> nullModelRequest = harness.getRequest();, + assertTrue(nullModelRequest.isEquivalentTo(nullModelRequest));, + assertFalse(nullModelRequest.isEquivalentTo(originalRequest1));, + assertFalse(originalRequest1.isEquivalentTo(nullModelRequest));, +, + harness = new RequestHarness();]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java, +++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplicationComponent.java]
[+++ b/library/project.properties, +android.library.reference.1=volley]
[+++ b/.travis.yml, + licenses: , + - 'android-sdk-license.*']
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java, +import java.util.Collection;, +import java.util.List;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.TimeoutException;, +public final class GlideExecutor implements ExecutorService {, +, +, +, + private static final String ANIMATION_EXECUTOR_NAME = "animation";, +, + // Don't use more than four threads when automatically determining thread count.., + private static final int MAXIMUM_AUTOMATIC_THREAD_COUNT = 4;, +, + // May be accessed on other threads, but this is an optimization only so it's ok if we set its, + // value more than once., + private static volatile int bestThreadCount;, +, + private final ExecutorService delegate;, + return newDiskCacheExecutor(, + DEFAULT_DISK_CACHE_EXECUTOR_THREADS,, + DEFAULT_DISK_CACHE_EXECUTOR_NAME,, + UncaughtThrowableStrategy.DEFAULT);,
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, +import org.robolectric.RobolectricTestRunner;, +, +import org.robolectric.RuntimeEnvironment;, + downsampler = new Downsampler(RuntimeEnvironment.application.getResources().getDisplayMetrics(),, + bitmapPool);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, +import org.robolectric.RobolectricTestRunner;, +, +import org.robolectric.RuntimeEnvironment;, + downsampler = new Downsampler(RuntimeEnvironment.application.getResources().getDisplayMetrics(),, + bitmapPool);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +, + Downsampler downsampler = new Downsampler(resources.getDisplayMetrics(), bitmapPool);, + new ByteBufferBitmapDecoder(downsampler)), + new StreamBitmapDecoder(downsampler)), + new ByteBufferBitmapDecoder(downsampler))), + new StreamBitmapDecoder(downsampler))), +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, +import org.robolectric.RobolectricTestRunner;, +, +import org.robolectric.RuntimeEnvironment;, + downsampler = new Downsampler(RuntimeEnvironment.application.getResources().getDisplayMetrics(),, + bitmapPool);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +, + Downsampler downsampler = new Downsampler(resources.getDisplayMetrics(), bitmapPool);, + new ByteBufferBitmapDecoder(downsampler)), + new StreamBitmapDecoder(downsampler)), + new ByteBufferBitmapDecoder(downsampler))), + new StreamBitmapDecoder(downsampler))), +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +import android.util.DisplayMetrics;, + private final DisplayMetrics displayMetrics;, + public Downsampler(DisplayMetrics displayMetrics,
[+++ b/library/src/main/java/com/bumptech/glide/module/ManifestParser.java, + if (GLIDE_MODULE_VALUE.equals(appInfo.metaData.get(key))) {]
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.view.ViewGroup;, +import com.bumptech.glide.loader.model.FileLoader;, +import com.bumptech.glide.loader.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.model.ModelLoader;, +import com.bumptech.glide.loader.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.model.ResourceLoader;, +import com.bumptech.glide.loader.model.StringLoader;, +import com.bumptech.glide.loader.model.UriLoader;, +import com.bumptech.glide.loader.stream.StreamLoader;, +import com.bumptech.glide.loader.transformation.CenterCrop;, +import com.bumptech.glide.loader.transformation.FitCenter;, +import com.bumptech.glide.loader.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.transformation.None;, +import com.bumptech.glide.loader.transformation.TransformationLoader;, +import com.bumptech.glide.presenter.target.Target;, +, +import java.util.Map;, +import java.util.WeakHashMap;, + * A singleton to present a simple static interface for Glide {@link Glide.Request} and to create and manage an, + private final Map<Target, Metadata> metadataTracker = new WeakHashMap<Target, Metadata>();, + * public void onException(Exception e, T model, Target target) {, + loaderFactory.register(File.class, new FileLoader.Factory());, + loaderFactory.register(Integer.class, new
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + private MemoryCategory memoryCategory = MemoryCategory.NORMAL;, + *, + * @return the previous MemoryCategory used by Glide., + public MemoryCategory setMemoryCategory(MemoryCategory memoryCategory) {, + MemoryCategory oldCategory = this.memoryCategory;, + this.memoryCategory = memoryCategory;, + return oldCategory;]
[+++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, + return optionsApplier.apply(new BitmapRequestBuilder<ModelType, R>(transcodeClass, this)), + .transcoder(transcoder);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, + return optionsApplier.apply(new BitmapRequestBuilder<ModelType, R>(transcodeClass, this)), + .transcoder(transcoder);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + private ResourceTranscoder<ResourceType, TranscodeType> transcoder;, + this.transcoder = transcoder;, + return this;, + transcoder != null ? transcoder : glide.buildTranscoder(resourceClass, transcodeClass),, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, + return optionsApplier.apply(new BitmapRequestBuilder<ModelType, R>(transcodeClass, this)), + .transcoder(transcoder);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + private ResourceTranscoder<ResourceType, TranscodeType> transcoder;, + this.transcoder = transcoder;, + return this;, + transcoder != null ? transcoder : glide.buildTranscoder(resourceClass, transcodeClass),, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.gifdecoder.GifDecoder;, +import com.bumptech.glide.load.resource.gif.GifFrameModelLoader;, +import com.bumptech.glide.load.resource.gif.GifFrameResourceDecoder;, + /** Gifs */, + decoderRegistry.prepend(new GifResourceDecoder(context, bitmapPool), InputStream.class, GifDrawable.class);, + decoderRegistry.prepend(new FileToStreamDecoder<GifDrawable>(new GifResourceDecoder(context, bitmapPool)),,
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +import android.support.v4.os.TraceCompat;, + TraceCompat.beginSection("DecodeJob#run");, + } finally {, + TraceCompat.endSection();, + TraceCompat.beginSection("DecodeJob.decodeFromRetrievedData");, + try {, + } finally {, + TraceCompat.endSection();, + }, + TraceCompat.beginSection("DecodeJob.encode");, + TraceCompat.endSection();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +import android.support.v4.os.TraceCompat;, + TraceCompat.beginSection("DecodeJob#run");, + } finally {, + TraceCompat.endSection();, + TraceCompat.beginSection("DecodeJob.decodeFromRetrievedData");, + try {, + } finally {, + TraceCompat.endSection();, + }, + TraceCompat.beginSection("DecodeJob.encode");, + TraceCompat.endSection();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, +import android.support.v4.os.TraceCompat;, + TraceCompat.beginSection("encode: [" + bitmap.getWidth() + "x" + bitmap.getHeight() + "]");, + try {, + } finally {, + TraceCompat.endSection();, + }]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java, + *, + * <p>This class makes no guarantees about the contents of the returned array., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java, + *, + * <p>This class makes no guarantees about the contents of the returned array., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java, + *, + * <p>This class makes no guarantees about the contents of the returned array., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/IntegerArrayAdapter.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java, + *, + * <p>This class makes no guarantees about the contents of the returned array., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/IntegerArrayAdapter.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, + if (result == null) {]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java, + * private static final byte[] ID_BYTES = ID.getBytes(Charset.forName("UTF-8"));, + * public boolean equals(Object o) {, + * public void updateDiskCacheKey(MessageDigest messageDigest) {]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadVideoResourceTest.java, +package com.bumptech.glide;, +, +import static com.google.common.truth.Truth.assertThat;, +, +import android.content.ContentResolver;, +import android.content.Context;, +import android.content.res.Resources;, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.net.Uri;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import java.io.IOException;, +import java.util.concurrent.TimeUnit;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.MockitoAnnotations;, +, +/**, + * Tests that Glide is able to load videos stored in resources and loaded as, + * {@link android.content.res.AssetFileDescriptor}s., + */, +@RunWith(AndroidJUnit4.class), +public class LoadVideoResourceTest {, + @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();, + private final ConcurrencyHelper concurrency = new ConcurrencyHelper();, +, +
[+++ b/gradle.properties, +VERSION_NAME=4.7.1, +VERSION_MINOR=7, +VERSION_PATCH=1]
[+++ b/gradle.properties, +# TODO: Upgrade to latest version of Volley when we compile with Java 7., +VOLLEY_VERSION=1.0.8, +OK_HTTP_VERSION=2.2.0, +++ b/gradle.properties, +# TODO: Upgrade to latest version of Volley when we compile with Java 7., +VOLLEY_VERSION=1.0.8, +OK_HTTP_VERSION=2.2.0, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="library" exported="" name="okio-1.2.0" level="project" />, + <orderEntry type="library" exported="" name="okhttp-2.2.0" level="project" />, +++ b/gradle.properties, +# TODO: Upgrade to latest version of Volley when we compile with Java 7., +VOLLEY_VERSION=1.0.8, +OK_HTTP_VERSION=2.2.0, +++ b/integration/okhttp/okhttp.iml, + <orderEntry type="library" exported="" name="okio-1.2.0" level="project" />, + <orderEntry type="library" exported="" name="okhttp-2.2.0" level="project" />, +++ b/integration/volley/volley.iml, + <orderEntry type="library" exported="" name="library-1.0.10" level="project" />, +++ b/gradle.properties, +# TODO:
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, + return !options.get(GifOptions.DISABLE_ANIMATION), +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, + return !options.get(GifOptions.DISABLE_ANIMATION), +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifOptions.java, +package com.bumptech.glide.load.resource.gif;, +, +import com.bumptech.glide.load.DecodeFormat;, +import com.bumptech.glide.load.Option;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.ResourceDecoder;, +, +/**, + * Options related to decoding GIFs., + */, +public final class GifOptions {, +, + /**, + * Indicates the {@link com.bumptech.glide.load.DecodeFormat} that will be used in conjunction, + * with the particular GIF to determine the {@link android.graphics.Bitmap.Config} to use when, + * decoding frames of GIFs., + */, + public static final Option<DecodeFormat> DECODE_FORMAT = Option.memory(, + "com.bumptech.glide.load.resource.gif.DecodeFormat", DecodeFormat.DEFAULT);, +, + /**, + * If set to {@code true}, disables the
[+++ b/gradle.properties, +OK_HTTP_VERSION=3.0.1, +++ b/gradle.properties, +OK_HTTP_VERSION=3.0.1, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + public void onFailure(Call call, IOException e) {, + public void onResponse(Call call, Response response) throws IOException {]
[+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + private boolean isCallingCallbacks;, + assertNotCallingCallbacks();, + assertNotCallingCallbacks();, + assertNotCallingCallbacks();, + // Avoids difficult to understand errors like #2413., + private void assertNotCallingCallbacks() {, + if (isCallingCallbacks) {, + throw new IllegalStateException("You can't start or clear loads in RequestListener or", + + " Target callbacks. If you must do so, consider posting your into() or clear() calls", + + " to the main thread using a Handler instead.");, + }, + }, +, + assertNotCallingCallbacks();, + isCallingCallbacks = true;, + try {, + } finally {, + isCallingCallbacks = false;, + }, +, + isCallingCallbacks = true;,
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/.gitignore, +integration/volley/target/**, +**/local.properties, +++ b/.gitignore, +integration/volley/target/**, +**/local.properties, +++ b/README.md, +Glide is fast and efficient image loading library for Android that wraps image downloading, resizing, memory and disk, +caching, and bitmap recycling into one simple and easy to use interface. Glide includes a flexible api allowing it to, +plug in to almost any network stack. By default Glide uses a custom HttpUrlConnection based stack, but also includes a, +utility library to plug in to Google's Volley project instead., +Glide's primary focus is on making scrolling any kind of a list of images as smooth and fast as possible, but
[+++ b/integration/okhttp/build.gradle, + compile "com.android.support:support-annotations:{$SUPPORT_V4_VERSION}", +++ b/integration/okhttp/build.gradle, + compile "com.android.support:support-annotations:{$SUPPORT_V4_VERSION}", +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import android.support.annotation.NonNull;, + @NonNull, + @NonNull, +++ b/integration/okhttp/build.gradle, + compile "com.android.support:support-annotations:{$SUPPORT_V4_VERSION}", +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import android.support.annotation.NonNull;, + @NonNull, + @NonNull, +++ b/integration/okhttp3/build.gradle, + compile "com.android.support:support-annotations:{$SUPPORT_V4_VERSION}", +++ b/integration/okhttp/build.gradle, + compile "com.android.support:support-annotations:{$SUPPORT_V4_VERSION}", +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import android.support.annotation.NonNull;, + @NonNull, + @NonNull, +++ b/integration/okhttp3/build.gradle, + compile "com.android.support:support-annotations:{$SUPPORT_V4_VERSION}", +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, +import android.support.annotation.NonNull;, + @NonNull, + @NonNull, +++ b/integration/okhttp/build.gradle, + compile "com.android.support:support-annotations:{$SUPPORT_V4_VERSION}", +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import android.support.annotation.NonNull;, + @NonNull, + @NonNull, +++ b/integration/okhttp3/build.gradle, + compile "com.android.support:support-annotations:{$SUPPORT_V4_VERSION}", +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, +import android.support.annotation.NonNull;, + @NonNull, + @NonNull, +++ b/integration/volley/build.gradle, + compile "com.android.support:support-annotations:{$SUPPORT_V4_VERSION}", +++ b/integration/okhttp/build.gradle, + compile "com.android.support:support-annotations:{$SUPPORT_V4_VERSION}", +++
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, + return useUnlimitedSourceGeneratorPool, + ? sourceUnlimitedExecutor : (useAnimationPool ? animationExecutor : sourceExecutor);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, + return useUnlimitedSourceGeneratorPool, + ? sourceUnlimitedExecutor : (useAnimationPool ? animationExecutor : sourceExecutor);, +++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, + *, + * <p>If both {@link #useUnlimitedSourceGeneratorsPool(boolean)} and, + * {@link #useAnimationPool(boolean)} are set, {@link #useUnlimitedSourceGeneratorsPool(boolean)}, + * will be preferred and {@link #useAnimationPool(boolean)} will be ignored., + *, + * <p>If both {@link #useUnlimitedSourceGeneratorsPool(boolean)} and, + * {@link #useAnimationPool(boolean)} are set, {@link #useUnlimitedSourceGeneratorsPool(boolean)}, + * will be preferred and {@link #useAnimationPool(boolean)} will be ignored.]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=2.4]
[+++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamAssetPathFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamAssetPathFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamAssetPathFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/ByteArrayLoader.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamAssetPathFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/ByteArrayLoader.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamAssetPathFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/ByteArrayLoader.java, +++ b/library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java, +++ b/library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java]
[+++ b/.travis.yml, + - COMPONENT=firebase, +++ b/.travis.yml, + - COMPONENT=firebase, +++ b/gcloud-bumptech.json.enc, +++ b/.travis.yml, + - COMPONENT=firebase, +++ b/gcloud-bumptech.json.enc, +++ b/gcloud-sjudd.json.enc, +++ b/.travis.yml, + - COMPONENT=firebase, +++ b/gcloud-bumptech.json.enc, +++ b/gcloud-sjudd.json.enc, +++ b/scripts/travis_firebase.sh, +#!/usr/bin/env bash, +, +set -e, +, +./gradlew :instrumentation:assembleDebug :instrumentation:assembleDebugAndroidTest --parallel &, +pid=$!, +, +openssl aes-256-cbc -K $encrypted_ad2664a1c4dd_key -iv $encrypted_ad2664a1c4dd_iv -in $GCLOUD_FILE -out gcloud.json -d, +, +wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-176.0.0-linux-x86_64.tar.gz, +tar xf google-cloud-sdk-176.0.0-linux-x86_64.tar.gz, +echo "y" | ./google-cloud-sdk/bin/gcloud components update beta, +./google-cloud-sdk/bin/gcloud auth activate-service-account --key-file gcloud.json, +, +wait $pid, +, +apk_dir=instrumentation/build/outputs/apk, +./google-cloud-sdk/bin/gcloud firebase test android run \, + --type instrumentation \, + --app $apk_dir/instrumentation-debug.apk \, + --test $apk_dir/instrumentation-debug-androidTest.apk \, + --device
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + private ExecutorService sourceService;, + this.sourceService = service;, + if (sourceService == null) {, + sourceService = new FifoPriorityThreadPoolExecutor(cores);, + engine = new Engine(memoryCache, diskCache, diskCacheService, sourceService);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + private ExecutorService sourceService;, + this.sourceService = service;, + if (sourceService == null) {, + sourceService = new FifoPriorityThreadPoolExecutor(cores);, + engine = new Engine(memoryCache, diskCache, diskCacheService, sourceService);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, + public Engine(MemoryCache memoryCache, DiskCache diskCache, ExecutorService diskCacheService,, + ExecutorService sourceService) {, + this(memoryCache, diskCache, diskCacheService, sourceService, null, null, null, null);, + Engine(MemoryCache cache, DiskCache diskCache, ExecutorService diskCacheService, ExecutorService sourceService,, + Map<Key, EngineJob> jobs, EngineKeyFactory keyFactory,, + engineJobFactory =
[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, + private Glide glide;, + this.glide = glide;, + return transform(glide.getBitmapCenterCrop());, + return transform(glide.getBitmapFitCenter());, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, + private Glide glide;, + this.glide = glide;, + return transform(glide.getBitmapCenterCrop());, + return transform(glide.getBitmapFitCenter());, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + return transform(glide.getDrawableCenterCrop());, + return transform(glide.getDrawableFitCenter());, + public DrawableRequestBuilder<ModelType> transform(Transformation<GifBitmapWrapper> transformation) {, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, + private Glide glide;, + this.glide = glide;, + return transform(glide.getBitmapCenterCrop());, + return transform(glide.getBitmapFitCenter());, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + return transform(glide.getDrawableCenterCrop());, + return transform(glide.getDrawableFitCenter());, + public DrawableRequestBuilder<ModelType> transform(Transformation<GifBitmapWrapper> transformation) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.CenterCrop;, +import com.bumptech.glide.load.resource.bitmap.FitCenter;, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation;, + private final CenterCrop bitmapCenterCrop;, + private final GifBitmapWrapperTransformation drawableCenterCrop;, + private final FitCenter bitmapFitCenter;,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + throw new IllegalStateException("Cannot unregister not yet registered manager");]
[+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java, +import com.bumptech.glide.GlideBuilder;, +import com.bumptech.glide.load.DecodeFormat;, +import com.bumptech.glide.request.RequestOptions;, +, + @Override, + public void applyOptions(Context context, GlideBuilder builder) {, + super.applyOptions(context, builder);, + builder.setDefaultRequestOptions(new RequestOptions().format(DecodeFormat.PREFER_ARGB_8888));, + }, +]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, + return new EngineKey(id, signature, width, height, resourceClass, transcodeClass);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, + return new EngineKey(id, signature, width, height, resourceClass, transcodeClass);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java, +import com.bumptech.glide.load.engine.DecodeOptions;, +import org.robolectric.Robolectric;, + loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, handler, requestBuilder);, + verify(requestBuilder).decode(any(DecodeOptions.class));, + loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, + loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, + return new EngineKey(id, signature, width, height, resourceClass, transcodeClass);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java, +import com.bumptech.glide.load.engine.DecodeOptions;, +import org.robolectric.Robolectric;, + loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, handler, requestBuilder);, + verify(requestBuilder).decode(any(DecodeOptions.class));, + loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, + loader
[+++ b/library/src/main/java/com/bumptech/glide/util/LruCache.java, + protected synchronized int getCount() {]
[+++ b/CONTRIBUTING.md, +Similarly if you support a particular feature request, feel free to let us know by commenting on the issue., +<pre>**Glide Version/Integration library (if any)**:, +[1]: https://github.com/bumptech/glide/issues/new?body=**Glide%20Version/Integration%20library%20%28if%20any%29**%3A%0A**Device/Android%20Version**%3A%0A**Issue%20details/Repro%20steps/Use%20case%20background**%3A%0A%0A**Glide%20load%20line**%3A%0A%60%60%60java%0AGlide.with%28...%29.....load%28...%29.....into%28...%29%3B%0A%60%60%60%0A%0A**Layout%20XML**%3A%0A%60%60%60xml%0A%3C...Layout%3E%0A%20%20%20%20%3CImageView%20android%3AscaleType%3D%22...%22%20...%20/%3E%0A%3C/..Layout%3E%0A%60%60%60%0A%0A**Stack%20trace%20/%20LogCat**%3A%0A%60%60%60ruby%0Apaste%20stack%20trace%20here%0A%60%60%60, +[5]: /bumptech/glide, +++ b/CONTRIBUTING.md, +Similarly if you support a particular feature request, feel free to let us know by commenting on the issue., +<pre>**Glide Version/Integration library (if any)**:, +[1]: https://github.com/bumptech/glide/issues/new?body=**Glide%20Version/Integration%20library%20%28if%20any%29**%3A%0A**Device/Android%20Version**%3A%0A**Issue%20details/Repro%20steps/Use%20case%20background**%3A%0A%0A**Glide%20load%20line**%3A%0A%60%60%60java%0AGlide.with%28...%29.....load%28...%29.....into%28...%29%3B%0A%60%60%60%0A%0A**Layout%20XML**%3A%0A%60%60%60xml%0A%3C...Layout%3E%0A%20%20%20%20%3CImageView%20android%3AscaleType%3D%22...%22%20...%20/%3E%0A%3C/..Layout%3E%0A%60%60%60%0A%0A**Stack%20trace%20/%20LogCat**%3A%0A%60%60%60ruby%0Apaste%20stack%20trace%20here%0A%60%60%60, +[5]: /bumptech/glide, +++ b/README.md, + mavenCentral(), +@Override, +public void onCreate(Bundle savedInstanceState) {, +@Override, +public View getView(int position, View recycled, ViewGroup container) {, + Glide.with(myFragment), +OkHttp and Volley, +-----------------, +Support for OkHttp and Volley is provided by integration libraries you can optionally
[+++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.os.ParcelFileDescriptor;, +import com.bumptech.glide.load.model.ImageVideoModelLoader;, +import com.bumptech.glide.load.model.ImageVideoWrapper;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.provider.FixedLoadProvider;, +, +import java.io.InputStream;, +, +public class BitmapTypeRequest<A> extends BitmapRequestBuilder<A, Bitmap> {, + private final Context context;, + private final A model;, + private final ModelLoader<A, InputStream> streamModelLoader;, + private ModelLoader<A, ParcelFileDescriptor> fileDescriptorModelLoader;, + private final Glide glide;, +, + private static <A, R> FixedLoadProvider<A, ImageVideoWrapper, Bitmap, R> buildProvider(Glide glide,, + ModelLoader<A, InputStream> streamModelLoader,, + ModelLoader<A, ParcelFileDescriptor> fileDescriptorModelLoader,, + Class<R> transcodedClass,, + ResourceTranscoder<Bitmap, R> transcoder) {, + return streamModelLoader == null && fileDescriptorModelLoader == null ? null
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + sourceExecutor = new GlideExecutor("source");, + diskCacheExecutor = new GlideExecutor("disk-cache", 1);, +++ b/.idea/codeStyleSettings.xml, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + sourceExecutor = new GlideExecutor("source");, + diskCacheExecutor = new GlideExecutor("disk-cache", 1);, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + private static final BaseRequestOptions DOWNLOAD_ONLY_OPTIONS =, + public RequestBuilder<TranscodeType> apply(BaseRequestOptions requestOptions) {, + TransitionOptions<?, ? super TranscodeType> transitionOptions) {, + public <Y extends Target<TranscodeType>> Y into(Y target) {, + if (target == null) {, + throw new IllegalArgumentException("You must pass in a non null Target");, + }, + if (view == null) {, + throw new IllegalArgumentException("You must pass in a non null View");,
[+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + if (Util.isValidDimensions(overrideWidth, overrideHeight)) {, + width = overrideWidth;, + height = overrideHeight;, + }]
[+++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java, +++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java, +++ b/library/src/main/java/com/bumptech/glide/request/target/GlideDrawableImageViewTarget.java]
[+++ b/gradle.properties, +VERSION_NAME=4.1.0-SNAPSHOT, +VERSION_MINOR=1]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, + TypeSpec generate(, + String generatedCodePackageName, String glideName, TypeSpec generatedRequestManager) {, + .addMethods(, + generateOverridesForGlideMethods(generatedCodePackageName, generatedRequestManager)), + final String generatedCodePackageName, final TypeSpec generatedRequestManager) {, + return overrideGlideWithMethod(, + generatedCodePackageName, generatedRequestManager, input);, + String packageName, TypeSpec generatedRequestManager, ExecutableElement methodToOverride) {, + ClassName.get(packageName, generatedRequestManager.name);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, + TypeSpec generate(, + String generatedCodePackageName, String glideName, TypeSpec generatedRequestManager) {, + .addMethods(, + generateOverridesForGlideMethods(generatedCodePackageName, generatedRequestManager)), + final String generatedCodePackageName, final TypeSpec generatedRequestManager) {, + return overrideGlideWithMethod(, + generatedCodePackageName, generatedRequestManager, input);, + String packageName, TypeSpec generatedRequestManager, ExecutableElement methodToOverride) {, + ClassName.get(packageName, generatedRequestManager.name);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + private static final String REQUEST_BUILDER_PACKAGE_NAME = "com.bumptech.glide";, +
[+++ b/README.md, +You can download a jar from GitHub's [releases page][1]., + compile 'com.github.bumptech.glide:glide:3.4.+', + <version>3.4.0</version>, +Checkout the [GitHub wiki][2] for pages on a variety of topics, and see the [javadocs][3]., +Volley is now an optional dependency that can be included via a utility library. To use Volley to fetch media over, +http/https:, + compile 'com.github.bumptech.glide:volley-integration:1.1.+', + <version>1.1.0</version>, +In addition to Volley, Glide also includes support for fetching media using OkHttp. To use OkHttp to fetch media over, +http/https:, + compile 'com.github.bumptech.glide:okhttp-integration:1.1.+', + <version>1.1.0</version>, +Version 3.x is a stable public release used in multiple open source projects at Google
[+++ b/checkstyle.xml, +++ b/checkstyle.xml, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java, +import com.bumptech.glide.load.resource.bitmap.RoundedCorners;, + @Test, + public void circleCrop_withWideGamutBitmap_producesWideGamutBitmap() {, + Bitmap bitmap = Bitmap.createBitmap(100, 100, Config.RGBA_F16);, + byte[] data = asPng(bitmap);, +, + Bitmap result =, + concurrency.get(, + GlideApp.with(context), + .asBitmap(), + .load(data), + .circleCrop(), + .submit());, + assertThat(result).isNotNull();, + assertThat(result.getConfig()).isEqualTo(Config.RGBA_F16);, + }, +, + @Test, + public void roundedCorners_withWideGamutBitmap_producesWideGamutBitmap() {, + Bitmap bitmap = Bitmap.createBitmap(100, 100, Config.RGBA_F16);, + byte[] data = asPng(bitmap);, +, + Bitmap result =, + concurrency.get(, + GlideApp.with(context), + .asBitmap(), + .load(data), + .transform(new RoundedCorners(/*roundingRadius=*/ 10)), + .submit());, + assertThat(result).isNotNull();, + assertThat(result.getConfig()).isEqualTo(Config.RGBA_F16);, + }, +, +++ b/checkstyle.xml, +++
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CircleCrop.java]
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import android.graphics.Bitmap;, +import com.bumptech.glide.request.target.Target;, + private boolean isActiveResourceRetentionAllowed;, + * <p>Defaults to {@code false}., + *, + * <p>Leaving this method at the default {@code false} value will allow the platform to garbage, + * collect resources more quickly, but will lead to unexpected memory cache misses if callers load, + * resources into {@link com.bumptech.glide.request.target.Target}s but never clear them., + *, + * <p>If you set this method to {@code true} you <em>must not</em> call, + * {@link Bitmap#recycle()} or mutate any Bitmaps returned by Glide. If this method is set to, + * {@code false},
[+++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper;, + @Test, + public void testClone() throws IOException {, + GlideDrawable firstResult = mock(GlideDrawable.class);, + Resource<GlideDrawable> firstResource = mock(Resource.class);, + when(firstResource.get()).thenReturn(firstResult);, + ResourceTranscoder<GifBitmapWrapper, GlideDrawable> firstTranscoder = mock(ResourceTranscoder.class);, + when(firstTranscoder.transcode(any(Resource.class))).thenReturn(firstResource);, + when(firstTranscoder.getId()).thenReturn("transcoder1");, +, + GlideDrawable secondResult = mock(GlideDrawable.class);, + Resource<GlideDrawable> secondResource = mock(Resource.class);, + when(secondResource.get()).thenReturn(secondResult);, + ResourceTranscoder<GifBitmapWrapper, GlideDrawable> secondTranscoder = mock(ResourceTranscoder.class);, + when(secondTranscoder.transcode(any(Resource.class))).thenReturn(secondResource);, + when(secondTranscoder.getId()).thenReturn("transcoder2");, +, + DrawableRequestBuilder<String> firstRequest = requestManager.from(String.class).transcoder(firstTranscoder), + .override(100, 100);, + DrawableRequestBuilder<String> secondRequest = firstRequest.clone().transcoder(secondTranscoder);, +, + Target firstTarget = mock(Target.class);, + Target secondTarget = mock(Target.class);, +, +
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + && !input.type.equals(TypeName.get(SafeVarargs.class));, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + && !input.type.equals(TypeName.get(SafeVarargs.class));, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult, + @CheckResult]
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + // If the request is completed, beginning again will ensure the result is re-delivered,, + // triggering RequestListeners and Targets. If the request is failed, beginning again will, + // restart the request, giving it another chance to complete. If the request is already, + // running, we can let it continue running without interruption., + if (!Preconditions.checkNotNull(previous).isRunning()) {, + previous.begin();, + }, + requestManager.clear(target);, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + // If the request is completed, beginning again will ensure the result is re-delivered,, + // triggering RequestListeners and Targets. If the request is failed, beginning again will,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/third_party/gif_decoder/build.gradle, +, + defaultConfig {, + applicationId 'com.bumptech.glide.gifdecoder', + minSdkVersion 10, + targetSdkVersion 19, +++ /dev/null, +++ /dev/null, +++ b/third_party/gif_decoder/build.gradle, +, + defaultConfig {, + applicationId 'com.bumptech.glide.gifdecoder', + minSdkVersion 10, + targetSdkVersion 19, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/third_party/gif_decoder/build.gradle, +, + defaultConfig {, + applicationId 'com.bumptech.glide.gifdecoder', + minSdkVersion 10, + targetSdkVersion 19, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/third_party/gif_decoder/build.gradle, +, + defaultConfig {, + applicationId 'com.bumptech.glide.gifdecoder', + minSdkVersion 10, + targetSdkVersion 19, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + case FIT_XY:, + requestOptions.optionalCenterInside();, + break;, + case CENTER:, + case MATRIX:]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java, + // See TODO below., + @SuppressWarnings("PMD.CollapsibleIfStatements"), + // TODO(b/73882030): This case gets triggered when it shouldn't. With this assertion it causes, + // all loads to fail. Without this assertion it causes loads to miss the disk cache, + // unnecessarily, + // throw new IllegalStateException(, + // "Failed to find any load path from " + helper.getModelClass() + " to ", + // + helper.getTranscodeClass());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java, + // See TODO below., + @SuppressWarnings("PMD.CollapsibleIfStatements"), + // TODO(b/73882030): This case gets triggered when it shouldn't. With this assertion it causes, + // all loads to fail.
[+++ b/gradle.properties, +DAGGER_VERSION=2.11, +++ b/gradle.properties, +DAGGER_VERSION=2.11, +++ b/samples/imgur/build.gradle, + annotationProcessor "com.google.dagger:dagger-compiler:${DAGGER_VERSION}", + compile "com.google.dagger:dagger-android:${DAGGER_VERSION}", + compile "com.google.dagger:dagger-android-support:${DAGGER_VERSION}", + annotationProcessor "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}", +++ b/gradle.properties, +DAGGER_VERSION=2.11, +++ b/samples/imgur/build.gradle, + annotationProcessor "com.google.dagger:dagger-compiler:${DAGGER_VERSION}", + compile "com.google.dagger:dagger-android:${DAGGER_VERSION}", + compile "com.google.dagger:dagger-android-support:${DAGGER_VERSION}", + annotationProcessor "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}", +++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplication.java, +import dagger.android.AndroidInjector;, +import dagger.android.support.DaggerApplication;, +public final class ImgurApplication extends DaggerApplication {, + protected AndroidInjector<? extends DaggerApplication> applicationInjector() {, + return DaggerImgurApplicationComponent.create();, +++ b/gradle.properties, +DAGGER_VERSION=2.11, +++ b/samples/imgur/build.gradle, + annotationProcessor "com.google.dagger:dagger-compiler:${DAGGER_VERSION}", + compile "com.google.dagger:dagger-android:${DAGGER_VERSION}", + compile "com.google.dagger:dagger-android-support:${DAGGER_VERSION}", + annotationProcessor "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}", +++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplication.java, +import dagger.android.AndroidInjector;, +import dagger.android.support.DaggerApplication;, +public final class ImgurApplication extends DaggerApplication {, + protected AndroidInjector<? extends DaggerApplication> applicationInjector() {, + return
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0,
[+++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import java.util.Map;, + Request.Builder requestBuilder = new Request.Builder(), + .url(url.toStringUrl());, + for (Map.Entry<String, String> headerEntry : url.getHeaders().entrySet()) {, + requestBuilder.addHeader(headerEntry.getKey(), headerEntry.getValue());, + }, + Request request = requestBuilder.build();, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.5.2', + <version>3.5.2</version>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import java.util.Map;, + Request.Builder requestBuilder = new Request.Builder(), + .url(url.toStringUrl());, + for (Map.Entry<String, String> headerEntry : url.getHeaders().entrySet()) {, + requestBuilder.addHeader(headerEntry.getKey(), headerEntry.getValue());, + }, + Request request = requestBuilder.build();, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +import com.bumptech.glide.load.model.Headers;, +import java.util.HashMap;, +import java.util.Map;, +@Config(manifest = Config.NONE, emulateSdk
[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, + private final Pool<List<Throwable>> throwableListPool = FactoryPools.threadSafeList();, + this.modelLoaderRegistry = new ModelLoaderRegistry(throwableListPool);, + result =, + new LoadPath<>(, + dataClass, resourceClass, transcodeClass, decodePaths, throwableListPool);, + registeredTranscodeClass, decoders, transcoder, throwableListPool));, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, + private final Pool<List<Throwable>> throwableListPool = FactoryPools.threadSafeList();, + this.modelLoaderRegistry = new ModelLoaderRegistry(throwableListPool);, + result =, + new LoadPath<>(, + dataClass, resourceClass, transcodeClass, decodePaths, throwableListPool);, + registeredTranscodeClass, decoders, transcoder, throwableListPool));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + private final List<Throwable> throwables = new ArrayList<>();, + throwables.clear();, + } catch (Throwable t) {, + // Catch Throwable and not Exception to handle OOMs. Throwables are swallowed by our, + // usage of
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + /**, + * @return The context associated with this instance. , + */, + public Context getContext() {, + return glideContext.getBaseContext();, + }, +]
[+++ b/.gitignore, +*.iws, +bin/**, +++ b/.gitignore, +*.iws, +bin/**, +++ b/build.gradle, +apply plugin: 'java', +, +, +task addChildJarTasks {, + configure(getAndroidChildren()) { project ->, + def copyTask = task("makeJar", type: Copy) {, + from("${project.buildDir}/intermediates/bundles/release/"), + into("${project.buildDir}/lib"), + include('classes.jar'), + rename('classes.jar', "${project.name}.jar"), + }, + copyTask.dependsOn project.build, + }, +}, +, +task childJars(type: Copy) {, + destinationDir = file("${buildDir}/lib"), +, + into("${buildDir}/lib") {, + getAndroidChildren().each { p ->, + from(p.tasks.getByName("makeJar")*.outputs), + }, + }, +}, +, +task cleanChildJars(type: Delete) {, + delete "${buildDir}/lib", +}, +, +childJars.dependsOn(addChildJarTasks, cleanChildJars), +, +def binDirName = "bin", +, +task releaseJar(type: Jar) {, + from(file("${buildDir}/lib").listFiles().collect { zipTree(it)}),
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import static com.bumptech.glide.gifdecoder.GifDecoder.TOTAL_ITERATION_COUNT_FOREVER;, +, + int intrinsicCount = state.frameLoader.getLoopCount();, + maxLoopCount =, + (intrinsicCount == TOTAL_ITERATION_COUNT_FOREVER) ? LOOP_FOREVER : intrinsicCount;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import static com.bumptech.glide.gifdecoder.GifDecoder.TOTAL_ITERATION_COUNT_FOREVER;, +, + int intrinsicCount = state.frameLoader.getLoopCount();, + maxLoopCount =, + (intrinsicCount == TOTAL_ITERATION_COUNT_FOREVER) ? LOOP_FOREVER : intrinsicCount;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, + return gifDecoder.getTotalIterationCount();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import static com.bumptech.glide.gifdecoder.GifDecoder.TOTAL_ITERATION_COUNT_FOREVER;, +, + int intrinsicCount = state.frameLoader.getLoopCount();, + maxLoopCount =, + (intrinsicCount == TOTAL_ITERATION_COUNT_FOREVER) ? LOOP_FOREVER : intrinsicCount;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, + return gifDecoder.getTotalIterationCount();, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, + assertTrue("drawable should be still running", drawable.isRunning());, + assertFalse("drawable should be
[+++ b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java, +import android.graphics.drawable.Drawable;, +import android.view.View;, + * Target<Bitmap> target =, + * Glide.with(fragment), + * .load("http://somefakeurl.com/fakeImage.jpeg"), + * .apply(fitCenterTransform()), + * // At some later point, clear the Target to release the resources, prevent load queues from, + * // blowing out proportion, and to improve load times for future requests:, + * Glide.with(fragment).clear(target);, + * <p><em>Warning!</em> this class is extremely prone to mis-use. Use SimpleTarget only as a last, + * resort. {@link ViewTarget} or a subclass of {@link ViewTarget} is almost always a better choice., + *, + * <p><em>Don't forget to clear instances of this
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/.idea/codeStyleSettings.xml, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/glide/glide.iml, +<module external.linked.project.id=":glide" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="com.github.bumptech.glide" external.system.module.version="3.5.0-SNAPSHOT" type="JAVA_MODULE" version="4">, +++ b/.idea/codeStyleSettings.xml, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/glide/glide.iml, +<module external.linked.project.id=":glide" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="com.github.bumptech.glide" external.system.module.version="3.5.0-SNAPSHOT" type="JAVA_MODULE" version="4">, +++ b/integration/integration.iml, +<module external.linked.project.id=":integration" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.."
[+++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +, + @Override, + public void removeCallback(SizeReadyCallback cb) {, + // Do nothing because we don't retain references to SizeReadyCallbacks., + }, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +, + @Override, + public void removeCallback(SizeReadyCallback cb) {, + // Do nothing because we don't retain references to SizeReadyCallbacks., + }, +++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java, + @Override, + public void removeCallback(SizeReadyCallback cb) {, + // Do nothing because we do not retain references to SizeReadyCallbacks., + }, +, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +, + @Override, + public void removeCallback(SizeReadyCallback cb) {, + // Do nothing because we don't retain references to SizeReadyCallbacks., + }, +++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java,
[+++ b/library/AndroidManifest.xml, + android:versionCode="4", + android:versionName="2.0.2" >]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=27.0.2, +COMPILE_SDK_VERSION=27, +TARGET_SDK_VERSION=27, +++ b/build.gradle, +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=27.0.2, +COMPILE_SDK_VERSION=27, +TARGET_SDK_VERSION=27, +++ b/integration/okhttp/build.gradle, + api "com.squareup.okhttp:okhttp:2.7.2", +++ b/build.gradle, +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=27.0.2, +COMPILE_SDK_VERSION=27, +TARGET_SDK_VERSION=27, +++ b/integration/okhttp/build.gradle, + api "com.squareup.okhttp:okhttp:2.7.2", +++ b/samples/imgur/build.gradle, + implementation 'com.squareup.retrofit2:retrofit:2.3.0', + implementation 'com.squareup.retrofit2:converter-gson:2.3.0', + implementation 'com.squareup.retrofit2:adapter-rxjava:2.3.0', + implementation 'io.reactivex:rxjava:1.3.4', + compileOnly "com.google.errorprone:error_prone_annotations:2.1.3"]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ /dev/null, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, + private TranscodeRequest<String, Object, Object> request;, + when(optionsApplier.apply(any(RequestBuilder.class))).thenAnswer(arg(0));, + request = new TranscodeRequest<String, Object, Object>(Robolectric.application,, + RequestBuilder<String, Object, Object, Object> builder = request.transcode(transcoder, Object.class);, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, + private TranscodeRequest<String, Object, Object>
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.graphics.drawable.Drawable;, +import com.bumptech.glide.load.resource.drawable.ResourceDrawableDecoder;, + /* Drawables */, + .append(Uri.class, Drawable.class, new ResourceDrawableDecoder(context)), + .append(Integer.class, Uri.class, new ResourceLoader.UriFactory(resources)), + .append(int.class, Uri.class, new ResourceLoader.UriFactory(resources)), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.graphics.drawable.Drawable;, +import com.bumptech.glide.load.resource.drawable.ResourceDrawableDecoder;, + /* Drawables */, + .append(Uri.class, Drawable.class, new ResourceDrawableDecoder(context)), + .append(Integer.class, Uri.class, new ResourceLoader.UriFactory(resources)), + .append(int.class, Uri.class, new ResourceLoader.UriFactory(resources)), +++ b/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java, +, + /**, + * Factory for loading resource {@link Uri}s from Android resource ids., + */, + public static class UriFactory implements ModelLoaderFactory<Integer, Uri> {, +, + private final Resources resources;, +, + public UriFactory(Resources resources) {, + this.resources = resources;, + }, +, + @Override,
[+++ b/gradle.properties, +VERSION_NAME=4.6.0]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.UnitBitmapDecoder;, +import com.bumptech.glide.load.resource.drawable.UnitDrawableDecoder;, + .append(, + Registry.BUCKET_BITMAP, Bitmap.class, Bitmap.class, new UnitBitmapDecoder(bitmapPool)), + .append(Bitmap.class, Bitmap.class, UnitModelLoader.Factory.<Bitmap>getInstance()), + .append(Drawable.class, Drawable.class, UnitModelLoader.Factory.<Drawable>getInstance()), + .append(Drawable.class, Drawable.class, new UnitDrawableDecoder(bitmapPool)), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.UnitBitmapDecoder;, +import com.bumptech.glide.load.resource.drawable.UnitDrawableDecoder;, + .append(, + Registry.BUCKET_BITMAP, Bitmap.class, Bitmap.class, new UnitBitmapDecoder(bitmapPool)), + .append(Bitmap.class, Bitmap.class, UnitModelLoader.Factory.<Bitmap>getInstance()), + .append(Drawable.class, Drawable.class, UnitModelLoader.Factory.<Drawable>getInstance()), + .append(Drawable.class, Drawable.class, new UnitDrawableDecoder(bitmapPool)), +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import static com.bumptech.glide.request.RequestOptions.diskCacheStrategyOf;, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, + * Returns a request builder to load the given {@link Bitmap}., + *, + * <p>{@link Bitmap}s provided to this method become owned by Glide. The {@link Bitmap} may be, + * recycled or re-used
[+++ b/library/src/main/java/com/bumptech/glide/load/Options.java, +import com.bumptech.glide.util.CachedHashCodeArrayMap;, + private final ArrayMap<Option<?>, Object> values = new CachedHashCodeArrayMap<>();, +++ b/library/src/main/java/com/bumptech/glide/load/Options.java, +import com.bumptech.glide.util.CachedHashCodeArrayMap;, + private final ArrayMap<Option<?>, Object> values = new CachedHashCodeArrayMap<>();, +++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, +import com.bumptech.glide.util.CachedHashCodeArrayMap;, + private Map<Class<?>, Transformation<?>> transformations = new CachedHashCodeArrayMap<>();, + result.transformations = new CachedHashCodeArrayMap<>();, +++ b/library/src/main/java/com/bumptech/glide/load/Options.java, +import com.bumptech.glide.util.CachedHashCodeArrayMap;, + private final ArrayMap<Option<?>, Object> values = new CachedHashCodeArrayMap<>();, +++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, +import com.bumptech.glide.util.CachedHashCodeArrayMap;, + private Map<Class<?>, Transformation<?>> transformations = new CachedHashCodeArrayMap<>();, + result.transformations = new CachedHashCodeArrayMap<>();, +++ b/library/src/main/java/com/bumptech/glide/util/CachedHashCodeArrayMap.java, +package com.bumptech.glide.util;, +, +import android.support.v4.util.ArrayMap;, +import android.support.v4.util.SimpleArrayMap;, +, +/** An {@link ArrayMap} that caches its hashCode to support efficient lookup. */, +public final class
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, + private static volatile OkHttpClient internalClient;, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, + private static volatile OkHttpClient internalClient;, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + private static volatile Glide glide;, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, + private static volatile OkHttpClient internalClient;, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + private static volatile Glide glide;, +++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java, + private static final RequestManagerRetriever INSTANCE = new RequestManagerRetriever();, + return INSTANCE;, + // events, we must force the manager to start resumed using ApplicationLifecycle.]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.model.ResourceLoader;, + * Use {@link com.bumptech.glide.loader.model.ResourceLoader} to load the given model, + return new ResourceLoader(context);, + return ResourceLoader.class;, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.model.ResourceLoader;, + * Use {@link com.bumptech.glide.loader.model.ResourceLoader} to load the given model, + return new ResourceLoader(context);, + return ResourceLoader.class;, +++ /dev/null, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.model.ResourceLoader;, + * Use {@link com.bumptech.glide.loader.model.ResourceLoader} to load the given model, + return new ResourceLoader(context);, + return ResourceLoader.class;, +++ /dev/null, +++ b/library/src/com/bumptech/glide/loader/model/ResourceLoader.java, +package com.bumptech.glide.loader.model;, +, +import android.content.Context;, +import android.net.Uri;, +import com.bumptech.glide.loader.stream.LocalUriLoader;, +import com.bumptech.glide.loader.stream.StreamLoader;, +, +/**, + * A model loader for handling resources. Model must be a resource id in the package
[+++ b/.gitignore, +_site/*, +_pages/*, +++ b/.gitignore, +_site/*, +_pages/*, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples, +++ b/.gitignore, +_site/*, +_pages/*, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples, +++ b/.idea/.name, +glide, +++ b/.gitignore, +_site/*, +_pages/*, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples, +++ b/.idea/.name, +glide, +++ /dev/null, +++ b/.gitignore, +_site/*, +_pages/*, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples, +++ b/.idea/.name, +glide, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +_site/*, +_pages/*, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples,
[+++ b/library/src/main/java/com/bumptech/glide/module/ManifestParser.java, +import android.util.Log;, + private static final String TAG = "ManifestParser";, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Loading Glide modules");, + }, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Loaded Glide module: " + key);, + }, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Finished loading Glide modules");, + }]
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, + private boolean isAutoCloneEnabled;, + if (isAutoCloneEnabled) {, + return clone().sizeMultiplier(sizeMultiplier);, + }, +, + if (isAutoCloneEnabled) {, + return clone().diskCacheStrategy(strategy);, + }, + if (isAutoCloneEnabled) {, + return clone().priority(priority);, + }, +, + if (isAutoCloneEnabled) {, + return clone().placeholder(drawable);, + }, +, + if (isAutoCloneEnabled) {, + return clone().placeholder(resourceId);, + }, +, + if (isAutoCloneEnabled) {, + return clone().fallback(drawable);, + }, +, + if (isAutoCloneEnabled) {, + return clone().fallback(resourceId);, + }, +, + if (isAutoCloneEnabled) {, + return clone().error(drawable);, + }, +, + if (isAutoCloneEnabled) {, + return clone().error(resourceId);, + }, + if (isAutoCloneEnabled) {, +
[+++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import org.robolectric.RobolectricTestRunner;, +, + @Mock private RequestBuilder<Bitmap> request;, + @Mock private RequestManager requestManager;, + ListPreloader<Object> preloader = new ListPreloader<>(requestManager,, + preloaderAdapter, preloaderAdapter, 10);, + new ListPreloader<>(requestManager, preloaderAdapter, preloaderAdapter, toPreload);, + ListPreloader<Object> preloader = new ListPreloader<>(requestManager,, + preloaderAdapter, preloaderAdapter, 10);, + new ListPreloader<>(requestManager, preloaderAdapter, preloaderAdapter, toPreload);, + ListPreloader<Object> preloader = new ListPreloader<>(requestManager,, + preloaderAdapter, preloaderAdapter, 10);, + ListPreloader<Object> preloader = new ListPreloader<>(requestManager,, + preloaderAdapter, preloaderAdapter, 10);, + ListPreloader<Object> preloader = new ListPreloader<>(requestManager,, + preloaderAdapter, preloaderAdapter, 10);, + ListPreloader<Object> preloader = new ListPreloader<>(requestManager,, + preloaderAdapter, preloaderAdapter, 10);, + ListPreloader<Object> preloader = new ListPreloader<>(requestManager,, + preloaderAdapter, preloaderAdapter, 10);, + ListPreloader<Object>
[+++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=26.0.2, +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=26.0.2, +++ b/integration/recyclerview/build.gradle, + provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=26.0.2, +++ b/integration/recyclerview/build.gradle, + provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/library/build.gradle, + provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=26.0.2, +++ b/integration/recyclerview/build.gradle, + provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/library/build.gradle, + provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/samples/gallery/build.gradle, + compile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=26.0.2, +++ b/integration/recyclerview/build.gradle, + provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/library/build.gradle, + provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/samples/gallery/build.gradle, + compile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/samples/giphy/build.gradle, + compile 'com.google.code.gson:gson:2.8.0', + compile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=26.0.2, +++ b/integration/recyclerview/build.gradle, + provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/library/build.gradle, + provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/samples/gallery/build.gradle, + compile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/samples/giphy/build.gradle, + compile 'com.google.code.gson:gson:2.8.0', + compile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}", +++ b/samples/svg/build.gradle, + compile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"]
[+++ b/library/src/main/java/com/bumptech/glide/ModelRequest.java, + final StreamByteArrayLoader loader = new StreamByteArrayLoader(id);, +++ b/library/src/main/java/com/bumptech/glide/ModelRequest.java, + final StreamByteArrayLoader loader = new StreamByteArrayLoader(id);, +++ b/library/src/main/java/com/bumptech/glide/load/data/ByteArrayFetcher.java, + private final String id;, + public ByteArrayFetcher(byte[] bytes, String id) {, + this.id = id;, + public String getId() {, + return id;, + }, +, + @Override, +++ b/library/src/main/java/com/bumptech/glide/ModelRequest.java, + final StreamByteArrayLoader loader = new StreamByteArrayLoader(id);, +++ b/library/src/main/java/com/bumptech/glide/load/data/ByteArrayFetcher.java, + private final String id;, + public ByteArrayFetcher(byte[] bytes, String id) {, + this.id = id;, + public String getId() {, + return id;, + }, +, + @Override, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java, + * Returns a string uniquely identifying the
[+++ b/.travis.yml, +, +cache:, + directories:, + - $HOME/.gradle, +]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey, dataSource,, + encodeStrategy)) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey, dataSource,, + encodeStrategy)) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java, + ALL(true /*decodeCachedData*/, true /*decodeCachedResource*/) {, + public boolean isDataCacheable(DataSource dataSource) {, + public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, + },, + NONE(false /*decodeCachedData*/, false /*decodeCachedResource*/) {, + public boolean isDataCacheable(DataSource dataSource) {, + public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, + },, + DATA(true /*decodeCachedData*/, false /*decodeCachedResource*/) {, + public boolean isDataCacheable(DataSource dataSource) {, + public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, + },, + RESOURCE(false /*decodeCachedData*/, true /*decodeCachedResource*/) {, + public boolean isDataCacheable(DataSource dataSource) {, + public boolean isResourceCacheable(boolean
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="16" />]
[+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + registry = new Registry(), +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + registry = new Registry(), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, + public Registry() {, + this.modelLoaderRegistry = new ModelLoaderRegistry(exceptionListPool);, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + registry = new Registry(), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, + public Registry() {, + this.modelLoaderRegistry = new ModelLoaderRegistry(exceptionListPool);, +++ b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java, + * @param contentResolver Any {@link android.content.ContentResolver}., +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java,
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +class DecodeJob<R> implements DataFetcher.Callback<Object> {, + Resource<R> result = null;, + try {, + Data data = fetcher.loadData(requestContext.getPriority());, + if (data == null) {, + return null;, + }, + result = path.load(data, requestContext, width, height,, + } catch (IOException e) {, + if (Logs.isEnabled(Log.VERBOSE)) {, + Logs.log(Log.VERBOSE, "Fetcher failed: " + fetcher, e);, + }, + } finally {, + fetcher.cleanup();, + }, + return result;, + @Override, + public void onDataReady(Object data) {, +, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +class DecodeJob<R> implements DataFetcher.Callback<Object> {, + Resource<R> result = null;, + try {, + Data data
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + public static final DecodeFormat DEFAULT = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT, + ? PREFER_ARGB_8888 : PREFER_RGB_565;, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + public static final DecodeFormat DEFAULT = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT, + ? PREFER_ARGB_8888 : PREFER_RGB_565;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + Log.v(TAG, "Reject bitmap from pool", + + ", bitmap: " + strategy.logBitmap(bitmap), + + ", is mutable: " + bitmap.isMutable(), + + ", is allowed config: " + allowedConfigs.contains(bitmap.getConfig()));]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + MethodSpec.Builder result = MethodSpec.methodBuilder(requestOptionMethod.name), + .addModifiers(Modifier.PUBLIC), + return !input.type.equals(TypeName.get(Override.class)), + // SafeVarargs can only be applied to final methods. GlideRequest is, + // non-final to allow for mocking., + && !input.type.equals(TypeName.get(SafeVarargs.class));, + .addStatement("return this");, +, + if (requestOptionMethod.annotations.contains(, + AnnotationSpec.builder(SafeVarargs.class).build())) {, + result.addAnnotation(, + AnnotationSpec.builder(SuppressWarnings.class), + .addMember("value", "$S", "unchecked"), + .addMember("value", "$S", "varargs"), + .build());, + }, +, + return result.build();]
[+++ b/gradle.properties, +DAGGER_VERSION=2.10, +++ b/gradle.properties, +DAGGER_VERSION=2.10, +++ b/library/build.gradle, +, +++ b/gradle.properties, +DAGGER_VERSION=2.10, +++ b/library/build.gradle, +, +++ b/samples/imgur/.gitignore, +/build, +++ b/gradle.properties, +DAGGER_VERSION=2.10, +++ b/library/build.gradle, +, +++ b/samples/imgur/.gitignore, +/build, +++ b/samples/imgur/build.gradle, +apply plugin: 'com.android.application', +, +android {, + compileSdkVersion COMPILE_SDK_VERSION as int, + buildToolsVersion BUILD_TOOLS_VERSION, +, + defaultConfig {, + applicationId "com.bumptech.glide.samples.imgur", + minSdkVersion MIN_SDK_VERSION as int, + targetSdkVersion TARGET_SDK_VERSION as int, + versionCode 1, + versionName "1.0", +, + testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner", +, + }, + compileOptions {, + sourceCompatibility JavaVersion.VERSION_1_7, + targetCompatibility JavaVersion.VERSION_1_7, + }, + buildTypes {, + release {, + minifyEnabled false, + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', + },
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +import android.Manifest.permission;, +import android.support.test.rule.GrantPermissionRule;, + @Rule public final TestName testName = new TestName();, + @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();, + @Rule public final GrantPermissionRule grantPermissionRule;, +, + {, + if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M) {, + grantPermissionRule = GrantPermissionRule.grant(permission.SYSTEM_ALERT_WINDOW);, + } else {, + grantPermissionRule = GrantPermissionRule.grant();, + }, + }, +, + layoutParams.type =, + Build.VERSION.SDK_INT >= Build.VERSION_CODES.O, + ? LayoutParams.TYPE_APPLICATION_OVERLAY, + : Build.VERSION.SDK_INT == Build.VERSION_CODES.M, + ? LayoutParams.TYPE_TOAST : LayoutParams.TYPE_SYSTEM_ALERT;]
[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + if (modelClass == null) {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Unable to load null model, setting placeholder only");, + }, + return null;, + }, + return buildModelLoader(model != null ? (Class<T>) model.getClass() : null, resourceClass, context);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + if (modelClass == null) {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Unable to load null model, setting placeholder only");, + }, + return null;, + }, + return buildModelLoader(model != null ? (Class<T>) model.getClass() : null, resourceClass, context);, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + * Returns a request builder to
[+++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.1', + <version>3.6.1</version>, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.1', + <version>3.6.1</version>, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, + GifFrame previousFrame = null;, + // clear all pixels when meet first frame, + if (previousFrame == null) {, + Arrays.fill(dest, 0);, + }, +, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.1', + <version>3.6.1</version>, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, + GifFrame previousFrame = null;, + // clear all pixels when meet first frame, + if (previousFrame == null) {, + Arrays.fill(dest, 0);, + }, +, +++ b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java, + public void testFirstFrameMustClearBeforeDrawingWhenLastFrameIsDisposalBackground(), + throws IOException {, + byte[] data = TestUtil.resourceToBytes(getClass(), "transparent_disposal_background.gif");, + GifHeaderParser headerParser = new GifHeaderParser();,
[+++ b/CONTRIBUTING.md, +# Contributing, +Contributions of all types are welcome. We use GitHub as our bug and feature tracker both for code and for other, +aspects of the library (documentation, the wiki etc.), +, +## Asking Questions, +The best way to ask general questions is to send an email to our [mailing list][2], or join [#glide-library on, +freenode.org.][3], +, +## Filing issues, +To file an issue, please use our [issue template link][1] and fill out the template as much as possible. The more, +information you can provide, the more likely we are to be able help., +, +When in
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + animationExecutor,]
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, +import android.support.annotation.Nullable;, + private int workBufferSize;, + private int workBufferPosition;, + @Nullable, + private Boolean isFirstFrameTransparent;, + if (block == null) {, + block = bitmapProvider.obtainByteArray(255);, + }, + if (workBuffer == null) {, + workBuffer = bitmapProvider.obtainByteArray(WORK_BUFFER_SIZE);, + }, +, + isFirstFrameTransparent = null;, + if (currentFrame.interlace || sampleSize != 1) {, + copyCopyIntoScratchRobust(currentFrame);, + } else {, + copyIntoScratchFast(currentFrame);, + }, +, + // Copy pixels into previous image, + if (savePrevious && (currentFrame.dispose == DISPOSAL_UNSPECIFIED, + || currentFrame.dispose == DISPOSAL_NONE)) {, + if (previousImage == null) {, + previousImage = getNextBitmap();, + }, +
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.Synthetic;, + @Synthetic InputStream stream;, + @Synthetic ResponseBody responseBody;, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.Synthetic;, + @Synthetic InputStream stream;, + @Synthetic ResponseBody responseBody;, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.Synthetic;, + @Synthetic InputStream stream;, + @Synthetic ResponseBody responseBody;, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.Synthetic;, + @Synthetic InputStream stream;, + @Synthetic ResponseBody responseBody;, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.Synthetic;, + @Synthetic InputStream stream;, + @Synthetic ResponseBody responseBody;, +++ b/library/pmd-ruleset.xml, + <!--Overrides default check to avoid violation when @Synthetic annotation is present-->, + <rule ref="rulesets/java/design.xml/UncommentedEmptyConstructor", + message="Document empty constructor">, +, + <properties>, + <property name="xpath">, + <value>, + <![CDATA[, +//ConstructorDeclaration[@Private='false'][count(BlockStatement) = 0 and, +($ignoreExplicitConstructorInvocation = 'true' or
[+++ b/library/lint.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<lint>, + <issue id="MissingApplicationIcon" severity="ignore" />, + <issue id="AllowBackup" severity="ignore" />, +</lint>]
[+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java, + rootRequestManagerFragment =, + Glide.get(activity).getRequestManagerRetriever().getRequestManagerFragment(activity);, +++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java, + rootRequestManagerFragment =, + Glide.get(activity).getRequestManagerRetriever().getRequestManagerFragment(activity);, +++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java, + return supportFragmentGet(, + activity, fm, /*parentHint=*/ null, isActivityVisible(activity));, + return supportFragmentGet(fragment.getActivity(), fm, fragment, fragment.isVisible());, + return fragmentGet(, + activity, fm, /*parentHint=*/ null, isActivityVisible(activity));, + return fragmentGet(fragment.getActivity(), fm, fragment, fragment.isVisible());, + RequestManagerFragment getRequestManagerFragment(Activity activity) {, + return getRequestManagerFragment(, + activity.getFragmentManager(), /*parentHint=*/ null, isActivityVisible(activity));, + }, +, + @SuppressWarnings("deprecation"), + @NonNull, + private RequestManagerFragment getRequestManagerFragment(, + @NonNull final android.app.FragmentManager fm,, + @Nullable android.app.Fragment parentHint,, + boolean isParentVisible) {, + if (isParentVisible) {, + current.getGlideLifecycle().onStart();, + }, + @Nullable android.app.Fragment parentHint,, + boolean isParentVisible) {,
[+++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +import com.bumptech.glide.provider.DataLoadProvider;, +import com.bumptech.glide.provider.LoadProvider;, + Glide glide = mock(Glide.class);, + when(glide.buildTranscoder(any(Class.class), any(Class.class))).thenReturn(mock(ResourceTranscoder.class));, + when(glide.buildDataProvider(any(Class.class), any(Class.class))).thenReturn(mock(DataLoadProvider.class));, +, + GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, model,, + mock(LoadProvider.class), null, glide, null, null);, + request = new BitmapTypeRequest(original, mock(ModelLoader.class), mock(ModelLoader.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +import com.bumptech.glide.provider.DataLoadProvider;, +import com.bumptech.glide.provider.LoadProvider;, + Glide glide = mock(Glide.class);, + when(glide.buildTranscoder(any(Class.class), any(Class.class))).thenReturn(mock(ResourceTranscoder.class));, + when(glide.buildDataProvider(any(Class.class), any(Class.class))).thenReturn(mock(DataLoadProvider.class));, +, + GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, model,, + mock(LoadProvider.class), null, glide, null, null);, + request = new BitmapTypeRequest(original, mock(ModelLoader.class), mock(ModelLoader.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, + request = new DrawableTypeRequest<String>(model, mock(ModelLoader.class),, + mock(ModelLoader.class), Robolectric.application, Glide.get(Robolectric.application),, + mock(RequestTracker.class), mock(Lifecycle.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +import com.bumptech.glide.provider.DataLoadProvider;, +import
[+++ b/.idea/codeStyleSettings.xml, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + when(mockUrlLoader.getDataFetcher(any(GlideUrl.class), anyInt(), anyInt())).thenReturn(mockStreamFetcher);, + when(modelLoader.getDataFetcher(eq(glideUrl), anyInt(), anyInt())), + when(failLoader.getDataFetcher(any(failModel), anyInt(), anyInt())).thenReturn(failFetcher);, + when(modelLoader.getDataFetcher(any(modelClass), anyInt(), anyInt())), +++ b/.idea/codeStyleSettings.xml, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />,
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java, +package com.bumptech.glide.load.engine.cache;, +, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.util.Preconditions;, +, +import java.util.ArrayDeque;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Queue;, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +, +/**, + * Keeps a map of keys to locks that allows locks to be removed from the map when no longer in use, + * so the size of the collection is bounded., + *, + * <p> This class will be accessed by multiple threads in a thread pool and ensures that the, + * number of threads interested in each lock is updated atomically so that when the count reaches, + * 0,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + new ResourceDrawableDecoder(context);, + Registry.BUCKET_BITMAP, Bitmap.class, Bitmap.class, new UnitBitmapDecoder()), + .append(Drawable.class, Drawable.class, new UnitDrawableDecoder()), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + new ResourceDrawableDecoder(context);, + Registry.BUCKET_BITMAP, Bitmap.class, Bitmap.class, new UnitBitmapDecoder()), + .append(Drawable.class, Drawable.class, new UnitDrawableDecoder()), +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + * <p>It's almost always better to allow Glide to load {@link Bitmap}s than, + * not supported by Glide by default, consider registering a custom, + * {@link com.bumptech.glide.load.ResourceDecoder} instead of using this method., + * <p>It's almost always better to allow Glide to load {@link Bitmap}s than to pass, + * {@link Bitmap}s into Glide using this method . If you have a
[+++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Mockito.times;, + verify(request).recycle();, + }, +, + @Test, + public void testClearRemoveAndRecycle_withNullRequest_doesNothingAndReturnsFalse() {, + assertThat(tracker.clearRemoveAndRecycle(null)).isFalse();, + }, +, + @Test, + public void testClearRemoveAndRecycle_withUnTrackedRequest_doesNothingAndReturnsFalse() {, + Request request = mock(Request.class);, +, + assertThat(tracker.clearRemoveAndRecycle(request)).isFalse();, +, + verify(request, never()).clear();, + verify(request, never()).recycle();, + }, +, + @Test, + public void testClearRemoveAndRecycle_withTrackedRequest_clearsRecyclesAndReturnsTrue() {, + Request request = mock(Request.class);, + tracker.addRequest(request);, +, + assertThat(tracker.clearRemoveAndRecycle(request)).isTrue();, + verify(request).clear();, + verify(request).recycle();, + }, +, + @Test, + public void testClearRemoveAndRecyle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {, + Request request = mock(Request.class);, + tracker.addRequest(request);, + tracker.clearRemoveAndRecycle(request);, + assertThat(tracker.clearRemoveAndRecycle(request)).isFalse();, +, + verify(request, times(1)).clear();, + verify(request, times(1)).recycle();,
[+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java, +package com.bumptech.glide.annotation.compiler;, +, +import static com.bumptech.glide.annotation.compiler.test.Util.appResource;, +import static com.bumptech.glide.annotation.compiler.test.Util.emptyLibraryModule;, +import static com.bumptech.glide.annotation.compiler.test.Util.glide;, +import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;, +import static com.google.testing.compile.CompilationSubject.assertThat;, +import static com.google.testing.compile.Compiler.javac;, +, +import com.bumptech.glide.annotation.compiler.test.Util;, +import com.google.testing.compile.Compilation;, +import java.io.IOException;, +import javax.tools.JavaFileObject;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +, +@RunWith(JUnit4.class), +public class AppGlideModuleWithExcludesTest {, + private Compilation compilation;, +, + @Before, + public void setUp() {, + compilation =, + javac(), + .withProcessors(new GlideAnnotationProcessor()), + .compile(, + forResource("AppModuleWithExcludes.java"),, + emptyLibraryModule());, + assertThat(compilation).succeededWithoutWarnings();, + }, +, + @Test, + public void compilation_generatesExpectedGlideOptionsClass() throws IOException {, + assertThat(compilation), + .generatedSourceFile(subpackage("GlideOptions")), + .contentsAsUtf8String(), + .isEqualTo(appResource("GlideOptions.java").getCharContent(true));, + }, +, + @Test,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import com.bumptech.glide.manager.ConnectivityMonitor;, +import com.bumptech.glide.manager.ConnectivityMonitorFactory;, +import com.bumptech.glide.manager.RequestTracker;, +, +public class RequestManager {, +, + private final ConnectivityMonitor connectivityMonitor;, + private final RequestTracker requestTracker;, +, + public RequestManager(Context context) {, + this(context, new RequestTracker(), new ConnectivityMonitorFactory());, + }, +, + RequestManager(Context context, RequestTracker requestTracker, ConnectivityMonitorFactory factory) {, + this.requestTracker = requestTracker;, + this.connectivityMonitor = factory.build(context, new RequestManagerConnectivityListener());, + connectivityMonitor.register();, + }, +, + public RequestTracker getRequestTracker() {, + return requestTracker;, + }, +, + public void onStart() {, + // onStart might not be called because this object may be
[+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java, +++ b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java, + order.verify(builder).setConfig(, + DecodeFormat.DEFAULT == DecodeFormat.PREFER_ARGB_8888]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java, +package com.bumptech.glide.load.resource.bitmap;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.support.annotation.Nullable;, +, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.util.Preconditions;, +, +import java.nio.ByteBuffer;, +import java.security.MessageDigest;, +, +/**, + * A {@link BitmapTransformation} which rounds the corners of a bitmap., + */, +public final class RoundedCorners extends BitmapTransformation {, + private static final String ID = "com.bumptech.glide.load.resource.bitmap.RoundedCorners";, + private static final byte[] ID_BYTES = ID.getBytes(CHARSET);, +, + private final int roundingRadius;, +, + /**, + * @param roundingRadius the corner radius (in device-specific pixels)., + * @throws IllegalArgumentException if rounding radius is 0 or less., + */, + public RoundedCorners(BitmapPool bitmapPool, int roundingRadius) {,
[+++ b/integration/okhttp/gradle.properties, +POM_NAME=Glide Volley Integration, +POM_ARTIFACT_ID=volley-integration, +POM_PACKAGING=aar, +++ b/integration/okhttp/gradle.properties, +POM_NAME=Glide Volley Integration, +POM_ARTIFACT_ID=volley-integration, +POM_PACKAGING=aar, +++ b/integration/okhttp/lint.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<lint>, + <issue id="AllowBackup" severity="ignore" />, +</lint>, +++ b/integration/okhttp/gradle.properties, +POM_NAME=Glide Volley Integration, +POM_ARTIFACT_ID=volley-integration, +POM_PACKAGING=aar, +++ b/integration/okhttp/lint.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<lint>, + <issue id="AllowBackup" severity="ignore" />, +</lint>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +package com.bumptech.glide.integration.okhttp;, +, +public class OkHttpStreamFetcher {, +}, +++ b/integration/okhttp/gradle.properties, +POM_NAME=Glide Volley Integration, +POM_ARTIFACT_ID=volley-integration, +POM_PACKAGING=aar, +++ b/integration/okhttp/lint.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<lint>, + <issue id="AllowBackup" severity="ignore" />, +</lint>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +package com.bumptech.glide.integration.okhttp;, +, +public class OkHttpStreamFetcher {, +}, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +package com.bumptech.glide.integration.okhttp;, +, +public class OkHttpUrlLoader {, +}, +++ b/integration/okhttp/gradle.properties, +POM_NAME=Glide Volley Integration,
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +import com.bumptech.glide.GlideBuilder;, + public void applyOptions(Context context, GlideBuilder builder) {, + // Do nothing., + }, +, + @Override, + public void registerComponents(Context context, Glide glide) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +import com.bumptech.glide.GlideBuilder;, + public void applyOptions(Context context, GlideBuilder builder) {, + // Do nothing., + }, +, + @Override, + public void registerComponents(Context context, Glide glide) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java, +import com.bumptech.glide.GlideBuilder;, + public void applyOptions(Context context, GlideBuilder builder) {, + // Do nothing., + }, +, + @Override, + public void registerComponents(Context context, Glide glide) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +import com.bumptech.glide.GlideBuilder;, + public void applyOptions(Context context, GlideBuilder builder) {,
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + mainPixels[pi] = suffix[code];, + ++pi;, + ++i;, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + mainPixels[pi] = suffix[code];, + ++pi;, + ++i;, +++ b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java, + public void testCorrectPixelsDecoded() throws IOException {, + byte[] data = TestUtil.resourceToBytes(getClass(), "white_black_row.gif");, + GifHeaderParser headerParser = new GifHeaderParser();, + headerParser.setData(data);, + GifHeader header = headerParser.parseHeader();, + GifDecoder decoder = new StandardGifDecoder(provider);, + decoder.setData(header, data);, + decoder.advance();, + Bitmap bitmap = decoder.getNextFrame();, + assertNotNull(bitmap);, + assertEquals(bitmap.getPixel(2, 0), bitmap.getPixel(0, 0));, + assertEquals(bitmap.getPixel(3, 0), bitmap.getPixel(1, 0));, + }, +, + @Test, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + mainPixels[pi] = suffix[code];, + ++pi;, + ++i;, +++ b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java, + public void testCorrectPixelsDecoded() throws IOException
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import javax.lang.model.type.DeclaredType;, + validateExtensionConstructor(element);, + } else if (element.getKind() == ElementKind.METHOD) {, + ExecutableElement executableElement = (ExecutableElement) element;, + if (executableElement.getAnnotation(GlideOption.class) != null) {, + validateGlideOption(executableElement);, + } else if (executableElement.getAnnotation(GlideType.class) != null) {, + validateGlideType(executableElement);, + }, + }, + }, + }, +, + private static void validateExtensionConstructor(Element element) {, + if (returnsVoid(executableElement)) {, + private void validateGlideType(ExecutableElement executableElement) {, + if (returnsVoid(executableElement)) {, + validateDeprecatedGlideType(executableElement);, + } else {, + validateNewGlideType(executableElement);, + }, + }, + private void validateNewGlideType(ExecutableElement executableElement) {, + TypeMirror returnType = executableElement.getReturnType();, + if (!isRequestBuilder(returnType) || !typeMatchesExpected(returnType, executableElement)) {, +
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java, +@SuppressWarnings("PMD.UseVarargs"), +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java, +@SuppressWarnings("PMD.UseVarargs"), +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/IntegerArrayAdapter.java, +@SuppressWarnings("PMD.UseVarargs"), + public int getArrayLength(int[] array) {]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +import com.bumptech.glide.util.pool.GlideTrace;, + private Object model;, + this.model = model;, + model = null;, + GlideTrace.beginSectionFormat("DecodeJob#run(model=%s)", model);, + GlideTrace.endSection();, + GlideTrace.beginSection("DecodeJob.decodeFromRetrievedData");, + GlideTrace.endSection();, + GlideTrace.beginSection("DecodeJob.encode");, + GlideTrace.endSection();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +import com.bumptech.glide.util.pool.GlideTrace;, + private Object model;, + this.model = model;, + model = null;, + GlideTrace.beginSectionFormat("DecodeJob#run(model=%s)", model);, + GlideTrace.endSection();, + GlideTrace.beginSection("DecodeJob.decodeFromRetrievedData");, + GlideTrace.endSection();, + GlideTrace.beginSection("DecodeJob.encode");, + GlideTrace.endSection();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, +import com.bumptech.glide.util.pool.GlideTrace;, + GlideTrace., + beginSectionFormat("encode: [%dx%d] %s", bitmap.getWidth(), bitmap.getHeight(), format);, + GlideTrace.endSection();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +import com.bumptech.glide.util.pool.GlideTrace;, + private Object model;, + this.model = model;, + model = null;, + GlideTrace.beginSectionFormat("DecodeJob#run(model=%s)", model);, + GlideTrace.endSection();, + GlideTrace.beginSection("DecodeJob.decodeFromRetrievedData");, + GlideTrace.endSection();, +
[+++ b/gradle.properties, +ANDROID_GRADLE_VERSION=3.0.1]
[+++ b/library/src/main/java/com/bumptech/glide/load/Option.java, + public void update(byte[] keyBytes, Object value, MessageDigest messageDigest) {, + private final T defaultValue;, + private final CacheKeyUpdater<T> cacheKeyUpdater;, + private final String key;, + private volatile byte[] keyBytes;, +, + cacheKeyUpdater.update(getKeyBytes(), value, messageDigest);, + }, +, + private byte[] getKeyBytes() {, + if (keyBytes == null) {, + keyBytes = key.getBytes(Key.CHARSET);, + }, + return keyBytes;, + void update(byte[] keyBytes, T value, MessageDigest messageDigest);, +++ b/library/src/main/java/com/bumptech/glide/load/Option.java, + public void update(byte[] keyBytes, Object value, MessageDigest messageDigest) {, + private final T defaultValue;, + private final CacheKeyUpdater<T> cacheKeyUpdater;, + private final String key;, + private volatile byte[]
[+++ b/src/com/bumptech/photos/imagemanager/ImageManager.java, +/*, + * Copyright (c) 2012. Bump Technologies Inc. All Rights Reserved., + */, +, +package com.bumptech.photos.imagemanager;, +, +import android.graphics.Bitmap;, +import android.os.Build;, +import android.os.Handler;, +import android.os.SystemClock;, +import com.bumptech.photos.cache.LruPhotoCache;, +import com.bumptech.photos.cache.PhotoDiskCache;, +import com.bumptech.photos.cache.SizedBitmapCache;, +import com.bumptech.photos.resize.ResizeJobGenerator;, +, +import java.io.File;, +import java.io.InputStream;, +import java.util.HashMap;, +import java.util.Map;, +, +/**, + * Created by IntelliJ IDEA., + * User: sam, + * Date: 2/9/12, + * Time: 5:02 PM, + * To change this template use File | Settings | File Templates., + */, +public class ImageManager {, + public static final boolean CAN_RECYCLE = Build.VERSION.SDK_INT >= 11;, +, + private PhotoDiskCache
[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +, + @Override, + public BitmapRequestBuilder<ModelType, TranscodeType> skipMemoryCache(boolean skip) {, + super.skipMemoryCache(skip);, + return this;, + }, +, + @Override, + public BitmapRequestBuilder<ModelType, TranscodeType> skipDiskCache(boolean skip) {, + super.skipDiskCache(skip);, + return this;, + }, +, + @Override, + public BitmapRequestBuilder<ModelType, TranscodeType> skipCache(boolean skip) {, + super.skipCache(skip);, + return this;, + }, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +, + @Override, + public BitmapRequestBuilder<ModelType, TranscodeType> skipMemoryCache(boolean skip) {, + super.skipMemoryCache(skip);, + return this;, + }, +, + @Override, + public BitmapRequestBuilder<ModelType, TranscodeType> skipDiskCache(boolean skip) {, + super.skipDiskCache(skip);, + return this;, + }, +, + @Override, + public BitmapRequestBuilder<ModelType, TranscodeType> skipCache(boolean skip) {,
[+++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import static org.junit.Assume.assumeTrue;, + // Most likely an instance of http://stackoverflow.com/q/991489/253468, + assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, + // Most likely an instance of http://stackoverflow.com/q/991489/253468, + assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import static org.junit.Assume.assumeTrue;, + // Most likely an instance of http://stackoverflow.com/q/991489/253468, + assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, + // Most likely an instance of http://stackoverflow.com/q/991489/253468, + assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +++ b/integration/volley/build.gradle, + testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}", +++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import static org.junit.Assume.assumeTrue;, + // Most likely an instance of http://stackoverflow.com/q/991489/253468, + assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import android.graphics.drawable.Drawable;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import android.widget.ImageView;, +import com.bumptech.glide.manager.Lifecycle;, +import com.bumptech.glide.manager.LifecycleListener;, +import com.bumptech.glide.manager.RequestManagerTreeNode;, +import com.bumptech.glide.request.FutureTarget;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.ResourceIds.raw;, +import com.bumptech.glide.test.TearDownGlide;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +, +@RunWith(AndroidJUnit4.class), +public class RequestManagerTest {, + @Rule public TearDownGlide tearDownGlide = new TearDownGlide();, + @Mock private RequestManagerTreeNode treeNode;, +, + private ConcurrencyHelper concurrency = new ConcurrencyHelper();, + private RequestManager requestManager;, + private Context context;, +, + @Before, + public void setUp() {, + MockitoAnnotations.initMocks(this);, + context = InstrumentationRegistry.getTargetContext();, + Glide glide = Glide.get(context);, + requestManager
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + .addParameter(ClassName.get("com.bumptech.glide", "Glide"), "glide"), + "new $T().registerComponents(context, glide, registry)", moduleClassName);, + registerComponents.addStatement("appGlideModule.registerComponents(context, glide, registry)");, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + .addParameter(ClassName.get("com.bumptech.glide", "Glide"), "glide"), + "new $T().registerComponents(context, glide, registry)", moduleClassName);, + registerComponents.addStatement("appGlideModule.registerComponents(context, glide, registry)");, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +import com.bumptech.glide.Glide;, + public void registerComponents(Context context, Glide glide, Registry registry) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + .addParameter(ClassName.get("com.bumptech.glide", "Glide"), "glide"), + "new $T().registerComponents(context, glide, registry)", moduleClassName);, + registerComponents.addStatement("appGlideModule.registerComponents(context, glide, registry)");, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +import com.bumptech.glide.Glide;, + public void registerComponents(Context context, Glide glide, Registry registry) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java, +import com.bumptech.glide.Glide;, + public void registerComponents(Context context, Glide glide, Registry registry) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + .addParameter(ClassName.get("com.bumptech.glide", "Glide"), "glide"), + "new $T().registerComponents(context,
[+++ b/library/AndroidManifest.xml, + android:versionCode="2", + android:versionName="2.0.0">]
[+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FullscreenActivity.java, + Glide.with(this).load(photo).apply(fitCenterTransform()).into(fullscreenView);, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FullscreenActivity.java, + Glide.with(this).load(photo).apply(fitCenterTransform()).into(fullscreenView);, +++ b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java, +import com.bumptech.glide.request.RequestOptions;, + requestBuilder = requestManager.asDrawable().apply(RequestOptions.fitCenterTransform());]
[+++ b/samples/svg/src/main/res/drawable/image_loading.xml, + android:src="@mipmap/ic_launcher", +++ b/samples/svg/src/main/res/drawable/image_loading.xml, + android:src="@mipmap/ic_launcher", +++ b/samples/svg/src/main/res/mipmap-hdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/drawable/image_loading.xml, + android:src="@mipmap/ic_launcher", +++ b/samples/svg/src/main/res/mipmap-hdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/mipmap-mdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/drawable/image_loading.xml, + android:src="@mipmap/ic_launcher", +++ b/samples/svg/src/main/res/mipmap-hdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/mipmap-mdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/mipmap-xhdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/drawable/image_loading.xml, + android:src="@mipmap/ic_launcher", +++ b/samples/svg/src/main/res/mipmap-hdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/mipmap-mdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/mipmap-xhdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/mipmap-xxhdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/drawable/image_loading.xml, + android:src="@mipmap/ic_launcher", +++ b/samples/svg/src/main/res/mipmap-hdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/mipmap-mdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/mipmap-xhdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/mipmap-xxhdpi/ic_launcher.png, +++ b/samples/svg/src/main/res/mipmap-xxxhdpi/ic_launcher.png]
[+++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java]
[+++ b/.travis.yml, +sudo: false, +]
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + sourceExecutor = new GlideExecutor("source");, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + sourceExecutor = new GlideExecutor("source");, +++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java, +import android.support.annotation.NonNull;, +import java.io.File;, +import java.io.FilenameFilter;, +import java.util.regex.Pattern;, +, + private static final String CPU_NAME_REGEX = "cpu[0-9]+";, + private static final String CPU_LOCATION = "/sys/devices/system/cpu/";, + // Don't use more than four threads when automatically determining thread count.., + private static final int MAXIMUM_AUTOMATIC_THREAD_COUNT = 4;, +, + /**, + * Constructor to build a fixed thread pool with an automatically determined number of threads., + *, + * @see #calculateBestThreadCount(), + */, + public GlideExecutor() {, + this(calculateBestThreadCount());, + }, + *
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java, + * A long indicating the time position (in microseconds) of the target frame which will be, + * retrieved. {@link android.media.MediaMetadataRetriever#getFrameAtTime(long)} is used to, + * extract the video frame., + *, + * <p>When retrieving the frame at the given time position, there is no guarantee that the data, + * source has a frame located at the position. When this happens, a frame nearby will be returned., + * If the long is negative, time position and option will ignored, and any frame that the, + * implementation considers as representative may be returned.,
[+++ b/samples/imgur/src/main/res/layout/image_card.xml, + <androidx.cardview.widget.CardView, + </androidx.cardview.widget.CardView>]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java, +import com.bumptech.glide.request.target.Target;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, + @Mock, + MockitoAnnotations.initMocks(this);, + Resource<Bitmap> resource = mockResource(100, 100);, + Resource<Bitmap> resource = mockResource(1, 2);, + final Resource<Bitmap> resource = mockResource(223, 4123);, + assertEquals(resource.get(), toTransform);, + return resource.get();, +, + Resource<Bitmap> resource = mockResource(100, 100);, +, + @Test, + public void testCallsTransformWithGivenBitmapWidthIfWidthIsSizeOriginal() {, + SizeTrackingTransform transform = new SizeTrackingTransform();, +, + int expectedWidth = 200;, + Resource<Bitmap> resource = mockResource(expectedWidth, 300);, + transform.transform(resource, Target.SIZE_ORIGINAL, 500);, +, + assertEquals(expectedWidth, transform.givenWidth);, + }, +, + @Test, + public void testCallsTransformWithGivenBitmapHeightIfHeightIsSizeOriginal() {, + SizeTrackingTransform transform = new SizeTrackingTransform();, +, + int expectedHeight =
[+++ b/samples/flickr/res/layout/grid_fragment.xml, + android:gravity="center", + android:stretchMode="spacingWidthUniform", +++ b/samples/flickr/res/layout/grid_fragment.xml, + android:gravity="center", + android:stretchMode="spacingWidthUniform", +++ b/samples/flickr/res/layout/main.xml, + <android.support.v4.view.ViewPager, + android:id="@+id/view_pager", +++ b/samples/flickr/res/layout/grid_fragment.xml, + android:gravity="center", + android:stretchMode="spacingWidthUniform", +++ b/samples/flickr/res/layout/main.xml, + <android.support.v4.view.ViewPager, + android:id="@+id/view_pager", +++ b/samples/flickr/src/com/bumptech/flickr/GridFragment.java, +public class GridFragment extends SherlockFragment implements PhotoViewer{, + @Override, + public void onPhotosUpdated(List<Photo> photos) {, +++ b/samples/flickr/res/layout/grid_fragment.xml, + android:gravity="center", + android:stretchMode="spacingWidthUniform", +++ b/samples/flickr/res/layout/main.xml, + <android.support.v4.view.ViewPager, + android:id="@+id/view_pager", +++ b/samples/flickr/src/com/bumptech/flickr/GridFragment.java, +public class GridFragment extends SherlockFragment implements PhotoViewer{, + @Override, + public void onPhotosUpdated(List<Photo> photos) {, +++ b/samples/flickr/src/com/bumptech/flickr/MyActivity.java, +import android.support.v4.app.Fragment;, +import android.support.v4.app.FragmentManager;, +import android.support.v4.app.FragmentPagerAdapter;, +import android.support.v4.view.ViewPager;, +import android.view.ViewGroup;, +, + private List<PhotoViewer> photoViewers = new ArrayList<PhotoViewer>();, +, + for
[+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +import android.os.Handler;, +import android.os.Looper;, +import com.bumptech.glide.manager.Lifecycle;, +import com.bumptech.glide.manager.LifecycleListener;, +public class RequestManager implements LifecycleListener {, + public RequestManager(Context context, Lifecycle lifecycle) {, + this(context, lifecycle, new RequestTracker(), new ConnectivityMonitorFactory());, + RequestManager(Context context, final Lifecycle lifecycle, RequestTracker requestTracker,, + ConnectivityMonitorFactory factory) {, +, + ConnectivityMonitor connectivityMonitor = factory.build(context,, + new RequestManagerConnectivityListener(requestTracker));, +, + // If we're the application level request manager, we may be created on a background thread. In that case we, + // cannot risk synchronously pausing or resuming requests, so we hack around the issue by delaying adding, + // ourselves as a lifecycle listener by
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java, +import android.support.annotation.NonNull;, + protected abstract Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform,, + int outWidth, int outHeight);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java, +import android.support.annotation.NonNull;, + protected abstract Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform,, + int outWidth, int outHeight);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java, +import android.support.annotation.NonNull;, + protected Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform, int outWidth,, + int outHeight) {, + return TransformationUtils.centerCrop(pool, toTransform, outWidth, outHeight);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java, +import android.support.annotation.NonNull;, + protected abstract Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform,, + int outWidth, int outHeight);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java, +import android.support.annotation.NonNull;, + protected Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform, int outWidth,, + int
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java]
[+++ b/library/src/main/java/com/bumptech/glide/util/pool/GlideTrace.java, + private GlideTrace() {, + // Utility class., + }, +]
[+++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + if (fetcher != null && helper.hasLoadPath(fetcher.getDataClass())) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + if (fetcher != null && helper.hasLoadPath(fetcher.getDataClass())) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, + boolean hasLoadPath(Class<?> dataClass) {, + return getLoadPath(dataClass) != null;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + if (fetcher != null && helper.hasLoadPath(fetcher.getDataClass())) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, + boolean hasLoadPath(Class<?> dataClass) {, + return getLoadPath(dataClass) != null;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + if (fetcher != null && helper.hasLoadPath(fetcher.getDataClass())) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, + boolean hasLoadPath(Class<?> dataClass) {, + return getLoadPath(dataClass) != null;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java, + if (fetcher != null && helper.hasLoadPath(fetcher.getDataClass())) {,
[+++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Mar 04 18:37:29 PST 2019, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.1-all.zip]
[+++ b/.gitmodules, +[submodule "library/volley"], + path = library/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/.gitmodules, +[submodule "library/volley"], + path = library/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/library/project.properties, +android.library.reference=volley, +++ b/.gitmodules, +[submodule "library/volley"], + path = library/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/library/project.properties, +android.library.reference=volley, +++ b/library/volley, +Subproject commit ba7d701bc2a0fa657422242537ace9bd63b14798]
[+++ b/.idea/codeStyleSettings.xml, + <Objective-C-extensions>, + <option name="GENERATE_INSTANCE_VARIABLES_FOR_PROPERTIES" value="ASK" />, + <option name="RELEASE_STYLE" value="IVAR" />, + <option name="TYPE_QUALIFIERS_PLACEMENT" value="BEFORE" />, + <file>, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Import" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Macro" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Typedef" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Enum" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Constant" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Global" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Struct" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="FunctionPredecl" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Function" />, + </file>, + <class>, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Property" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Synthesize" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InitMethod" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="StaticMethod" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InstanceMethod" />, + <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="DeallocMethod"
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, + * Interface for handling operations on a primitive array type., + * TAG for logging., + * Return the length of the given array., + * Reset the array for re-use (e.g. set all values to 0)., + * Allocate and return an array of the specified size., + * Return the size of an element in the array in bytes (e.g. for int return 4)., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, + * Interface for handling operations on a primitive array type., + * TAG for logging., + * Return the length of the given array., + * Reset
[+++ b/third_party/gif_decoder/build.gradle, + androidTestCompile 'com.android.support:support-v4:19.1.0', + androidTestCompile 'org.robolectric:robolectric:2.4-SNAPSHOT', +++ b/third_party/gif_decoder/build.gradle, + androidTestCompile 'com.android.support:support-v4:19.1.0', + androidTestCompile 'org.robolectric:robolectric:2.4-SNAPSHOT', +++ b/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java, +package com.bumptech.glide.gifdecoder;, +, +import android.graphics.Bitmap;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +/**, + * Tests for {@link com.bumptech.glide.gifdecoder.GifDecoder}., + */, +@RunWith(RobolectricTestRunner.class), +@Config(emulateSdk = 18), +public class GifDecoderTest {, +, + private MockProvider provider;, +, + @Before, + public void setUp() {, + provider = new MockProvider();, + }, +, + @Test, + public void testCanDecodeFramesFromTestGif() {, + byte[] data = TestUtil.readResourceData("partial_gif_decode.gif");, + GifHeaderParser headerParser = new GifHeaderParser();,
[+++ b/gradle.properties, +TRUTH_VERSION=0.24, +++ b/gradle.properties, +TRUTH_VERSION=0.24, +++ b/integration/volley/build.gradle, + androidTestCompile "com.google.truth:truth:${TRUTH_VERSION}", +++ b/gradle.properties, +TRUTH_VERSION=0.24, +++ b/integration/volley/build.gradle, + androidTestCompile "com.google.truth:truth:${TRUTH_VERSION}", +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.assertEquals;, + assertEquals(expected, isToString(is));, + assertEquals(expected, isToString(is));, + assertEquals(expected, isToString(is));, + assertEquals(expected, isToString(is));, + assertThat(mockWebServer.takeRequest().getPath()).contains(DEFAULT_PATH);, + assertThat(mockWebServer.takeRequest().getPath()).contains(redirectBase + i);, + assertThat(e.getCause()).isInstanceOf(VolleyError.class);, + assertThat(e.getCause()).isInstanceOf(NoConnectionError.class);, + assertThat(e.getCause()).isInstanceOf(NoConnectionError.class);, + assertThat(e.getCause().getCause()).isInstanceOf(ProtocolException.class);, + assertThat(e.getCause()).isInstanceOf(ServerError.class);, + assertThat(e.getCause()).isInstanceOf(ServerError.class);, +++ b/gradle.properties, +TRUTH_VERSION=0.24, +++ b/integration/volley/build.gradle, + androidTestCompile "com.google.truth:truth:${TRUTH_VERSION}", +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.assertEquals;, + assertEquals(expected, isToString(is));, + assertEquals(expected, isToString(is));, + assertEquals(expected, isToString(is));, + assertEquals(expected, isToString(is));, + assertThat(mockWebServer.takeRequest().getPath()).contains(DEFAULT_PATH);, + assertThat(mockWebServer.takeRequest().getPath()).contains(redirectBase + i);, + assertThat(e.getCause()).isInstanceOf(VolleyError.class);, + assertThat(e.getCause()).isInstanceOf(NoConnectionError.class);, + assertThat(e.getCause()).isInstanceOf(NoConnectionError.class);, + assertThat(e.getCause().getCause()).isInstanceOf(ProtocolException.class);,
[+++ b/gradle.properties, +VERSION_NAME=4.3.0]
[+++ b/integration/okhttp/gradle.properties, +, +# Prefix and postfix for source and javadoc jars., +JAR_PREFIX=glide-, +JAR_POSTFIX=-integration, +++ b/integration/okhttp/gradle.properties, +, +# Prefix and postfix for source and javadoc jars., +JAR_PREFIX=glide-, +JAR_POSTFIX=-integration, +++ b/integration/volley/gradle.properties, +, +# Prefix and postfix for source and javadoc jars., +JAR_PREFIX=glide-, +JAR_POSTFIX=-integration, +++ b/integration/okhttp/gradle.properties, +, +# Prefix and postfix for source and javadoc jars., +JAR_PREFIX=glide-, +JAR_POSTFIX=-integration, +++ b/integration/volley/gradle.properties, +, +# Prefix and postfix for source and javadoc jars., +JAR_PREFIX=glide-, +JAR_POSTFIX=-integration, +++ b/scripts/upload.gradle, + baseName "${JAR_PREFIX}${project.name}${JAR_POSTFIX}", + baseName "${JAR_PREFIX}${project.name}${JAR_POSTFIX}"]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + BitmapEncoder bitmapEncoder = new BitmapEncoder(arrayPool);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + BitmapEncoder bitmapEncoder = new BitmapEncoder(arrayPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, +import android.support.annotation.Nullable;, +import com.bumptech.glide.load.data.BufferedOutputStream;, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, + @Nullable, + private final ArrayPool arrayPool;, +, + public BitmapEncoder(@NonNull ArrayPool arrayPool) {, + this.arrayPool = arrayPool;, + }, +, + /**, + * @deprecated Use {@link #BitmapEncoder(ArrayPool)} instead., + */, + @Deprecated, + public BitmapEncoder() {, + arrayPool = null;, + }, + if (arrayPool != null) {, + os = new BufferedOutputStream(os, arrayPool);, + }, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + BitmapEncoder bitmapEncoder = new BitmapEncoder(arrayPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, +import android.support.annotation.Nullable;, +import com.bumptech.glide.load.data.BufferedOutputStream;, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +
[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +import android.net.Uri;, +import java.lang.Deprecated;, +import java.lang.Integer;, +import java.lang.String;, +import java.net.URL;, + public GlideRequest<Drawable> load(@Nullable Bitmap arg0) {, + return (GlideRequest<Drawable>) super.load(arg0);, + }, +, + @Override, + @CheckResult, + public GlideRequest<Drawable> load(@Nullable Drawable arg0) {, + return (GlideRequest<Drawable>) super.load(arg0);, + }, +, + @Override, + @CheckResult, + public GlideRequest<Drawable> load(@Nullable String arg0) {, + return (GlideRequest<Drawable>) super.load(arg0);, + }, +, + @Override, + @CheckResult, + public GlideRequest<Drawable> load(@Nullable Uri arg0) {, + return (GlideRequest<Drawable>) super.load(arg0);, + }, +, + @Override, + @CheckResult, + public GlideRequest<Drawable> load(@Nullable File arg0) {, + return (GlideRequest<Drawable>) super.load(arg0);, + }, +, +
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.support.annotation.Nullable;, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.support.annotation.Nullable;, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import android.support.annotation.Nullable;, + @Nullable private Object model;, + @Nullable private RequestListener<TranscodeType> requestListener;, + @Nullable private RequestBuilder<TranscodeType> thumbnailBuilder;, + @Nullable private Float thumbSizeMultiplier;, + public RequestBuilder<TranscodeType> listener(, + @Nullable RequestListener<TranscodeType> requestListener) {, + public RequestBuilder<TranscodeType> thumbnail(, + @Nullable RequestBuilder<TranscodeType> thumbnailRequest) {, + public RequestBuilder<TranscodeType> load(@Nullable Object model) {, + private RequestBuilder<TranscodeType> loadGeneric(@Nullable Object model) {, + @Nullable ThumbnailRequestCoordinator parentCoordinator,, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.support.annotation.Nullable;, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import android.support.annotation.Nullable;, + @Nullable private Object model;, + @Nullable private RequestListener<TranscodeType> requestListener;, +
[+++ b/.travis.yml, +- scripts/travis-sonatype-publish.sh, +++ b/.travis.yml, +- scripts/travis-sonatype-publish.sh, +++ b/scripts/travis-sonatype-publish.sh, +#!/bin/bash, +# Publishes the latest snapshot to Sonatype. Works only for SNAPSHOT versions., +# Based closely on material from, +# http://benlimmer.com/2014/01/04/automatically-publish-to-sonatype-with-gradle-and-travis-ci., +, +if [ "$TRAVIS_REPO_SLUG" == "bumptech/glide" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ] && [ "$TRAVIS_BRANCH" == "3.0a" ]; then, + if [[ $(./gradlew -q getVersion) != *SNAPSHOT* ]]; then, + echo 'Travis can only publish snapshots.', + return 0, + fi, +, + echo -e "Starting publish to Sonatype...\n", +, + ./gradlew uploadArchives -PnexusUsername="${NEXUS_USERNAME}" -PnexusPassword="${NEXUS_PASSWORD}", + RETVAL=$?, +, + if [ $RETVAL -eq 0 ]; then, +
[+++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactory.java, +import android.support.v4.content.ContextCompat;, + private static final String NETWORK_PERMISSION = "android.permission.ACCESS_NETWORK_STATE";, + int permissionResult = ContextCompat.checkSelfPermission(context, NETWORK_PERMISSION);, + boolean hasPermission = permissionResult == PackageManager.PERMISSION_GRANTED;, + return hasPermission, + ? new DefaultConnectivityMonitor(context, listener) : new NullConnectivityMonitor();]
[+++ b/.gitmodules, +[submodule "third_party/disklrucache"], + path = third_party/disklrucache, +++ b/.gitmodules, +[submodule "third_party/disklrucache"], + path = third_party/disklrucache, +++ b/library/build.gradle, +apply plugin: 'maven', + compile project(':third_party:disklrucache'), +, +// All dependencies are written to the pom file with the default type (.jar). Since we're uploading the gif decoder, +// as an aar we need to change the type in the pom file to match or maven/gradle wont' be able to find the transitive, +// dependency., +afterEvaluate {, + def installer = install.repositories.mavenInstaller, + def deployer = uploadArchives.repositories.mavenDeployer, +, + [installer, deployer]*.pom*.whenConfigured { pom ->, + pom.dependencies.find { dep ->, + dep.groupId ==
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip]
[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.v4.util.Pools.Pool;, +import com.bumptech.glide.util.pool.FactoryPools;, + private final Pool<List<Exception>> exceptionListPool = FactoryPools.threadSafeList();, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.v4.util.Pools.Pool;, +import com.bumptech.glide.util.pool.FactoryPools;, + private final Pool<List<Exception>> exceptionListPool = FactoryPools.threadSafeList();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +import com.bumptech.glide.util.pool.FactoryPools.Poolable;, +import com.bumptech.glide.util.pool.StateVerifier;, + Comparable<DecodeJob<?>>,, + Poolable {, + private final StateVerifier stateVerifier = StateVerifier.newInstance();, + isCallbackNotified = false;, + if (isCallbackNotified) {, + throw new IllegalStateException("Already notified");, + }, + isCallbackNotified = true;, + @Override, + public StateVerifier getVerifier() {, + return stateVerifier;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.v4.util.Pools.Pool;, +import com.bumptech.glide.util.pool.FactoryPools;, + private final Pool<List<Exception>> exceptionListPool = FactoryPools.threadSafeList();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +import com.bumptech.glide.util.pool.FactoryPools.Poolable;, +import com.bumptech.glide.util.pool.StateVerifier;, + Comparable<DecodeJob<?>>,, + Poolable
[+++ b/samples/flickr/AndroidManifest.xml, +, + <uses-permission android:name="android.permission.INTERNET" />, + <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />, + <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="16" />, +, +, +++ b/samples/flickr/AndroidManifest.xml, +, + <uses-permission android:name="android.permission.INTERNET" />, + <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />, + <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="16" />, +, +, +++ b/samples/flickr/res/values/strings.xml, + <string name="app_name">Glide Demo</string>, +++ b/samples/flickr/AndroidManifest.xml, +, + <uses-permission android:name="android.permission.INTERNET" />, + <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />, + <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="16" />, +, +, +++ b/samples/flickr/res/values/strings.xml, + <string name="app_name">Glide Demo</string>, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoGrid.java, +import com.bumptech.glide.loader.image.ImageManagerLoader;, + public static FlickrPhotoGrid newInstance(int size) {, +, + //this is an example of how one might use ImagePresenter directly, there is no particular reason, + //why ImagePresenter is
[+++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import android.content.Context;, + private Context context;, + public ReEncodingGifResourceEncoder(Context context, BitmapPool bitmapPool) {, + this(context, bitmapPool, FACTORY);, + ReEncodingGifResourceEncoder(Context context, BitmapPool bitmapPool, Factory factory) {, + this.context = context;, + Resource<Bitmap> transformedResource =, + transformation.transform(, + context, bitmapResource, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import android.content.Context;, + private Context context;, + public ReEncodingGifResourceEncoder(Context context, BitmapPool bitmapPool) {, + this(context, bitmapPool, FACTORY);, + ReEncodingGifResourceEncoder(Context context, BitmapPool bitmapPool, Factory factory) {, + this.context = context;, + Resource<Bitmap> transformedResource =, + transformation.transform(, + context, bitmapResource, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import android.app.Application;, +import android.content.Context;, + Application context = RuntimeEnvironment.application;, +, + when(frameTransformation.transform(anyContext(), any(Resource.class),
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + requestBuilderGenerator.generate(, + generatedCodePackageName, indexedClassNames.extensions, generatedRequestOptions);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + requestBuilderGenerator.generate(, + generatedCodePackageName, indexedClassNames.extensions, generatedRequestOptions);, +++ /dev/null, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + requestBuilderGenerator.generate(, + generatedCodePackageName, indexedClassNames.extensions, generatedRequestOptions);, +++ /dev/null, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, + validateGlideOptionAnnotations(executableElement);, + private void validateGlideOptionAnnotations(ExecutableElement executableElement) {, + validateGlideTypeAnnotations(executableElement);, + private void validateGlideTypeAnnotations(ExecutableElement executableElement) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + requestBuilderGenerator.generate(, + generatedCodePackageName, indexedClassNames.extensions, generatedRequestOptions);, +++ /dev/null, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, + validateGlideOptionAnnotations(executableElement);, + private void validateGlideOptionAnnotations(ExecutableElement executableElement) {, + validateGlideTypeAnnotations(executableElement);, + private void validateGlideTypeAnnotations(ExecutableElement executableElement) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + requestBuilderGenerator.generate(, + generatedCodePackageName, indexedClassNames.extensions, generatedRequestOptions);, +++ /dev/null, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, + validateGlideOptionAnnotations(executableElement);, + private void validateGlideOptionAnnotations(ExecutableElement executableElement) {, + validateGlideTypeAnnotations(executableElement);, +
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + * @see RequestManager#clear(Target), +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + * @see RequestManager#clear(Target), +++ b/library/src/main/java/com/bumptech/glide/request/target/BaseTarget.java, + * {@link com.bumptech.glide.RequestManager#clear(Target)}.</p>]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java]
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java]
[+++ b/gradle.properties, +VERSION_NAME=3.6.0-SNAPSHOT, +VERSION_MINOR=6, +VERSION_CODE=9, +++ b/gradle.properties, +VERSION_NAME=3.6.0-SNAPSHOT, +VERSION_MINOR=6, +VERSION_CODE=9, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.3.0-SNAPSHOT, +VERSION_MINOR=3, +VERSION_CODE=5, +++ b/gradle.properties, +VERSION_NAME=3.6.0-SNAPSHOT, +VERSION_MINOR=6, +VERSION_CODE=9, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.3.0-SNAPSHOT, +VERSION_MINOR=3, +VERSION_CODE=5, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.3.0-SNAPSHOT, +VERSION_MINOR=3, +VERSION_CODE=5]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineBuilder.java, + HandlerThread handlerThread = new HandlerThread("EngineThread") {, + @Override, + public void run() {, + android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);, + super.run();, + }, + };, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineBuilder.java, + HandlerThread handlerThread = new HandlerThread("EngineThread") {, + @Override, + public void run() {, + android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);, + super.run();, + }, + };, +++ b/library/src/main/java/com/bumptech/glide/load/engine/SourceResourceRunner.java, + if (fetcher != null) {, + }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineBuilder.java, + HandlerThread handlerThread = new HandlerThread("EngineThread") {, + @Override, + public void run() {, + android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);, + super.run();, + }, + };, +++ b/library/src/main/java/com/bumptech/glide/load/engine/SourceResourceRunner.java, + if (fetcher != null) {, + }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor.java, + final Thread result =
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsOverrideGenerator.java, + if (methodToOverride.getSimpleName().toString().contains("transform"), + && methodToOverride.isVarArgs()) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsOverrideGenerator.java, + if (methodToOverride.getSimpleName().toString().contains("transform"), + && methodToOverride.isVarArgs()) {, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java, +import java.lang.Deprecated;, + public final GlideOptions transform(@NonNull Transformation<Bitmap>... transformations) {, + return (GlideOptions) super.transform(transformations);, + }, +, + @Override, + @SafeVarargs, + @SuppressWarnings("varargs"), + @Deprecated, + @NonNull, + @CheckResult, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsOverrideGenerator.java, + if (methodToOverride.getSimpleName().toString().contains("transform"), + && methodToOverride.isVarArgs()) {, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java, +import java.lang.Deprecated;, + public final GlideOptions transform(@NonNull Transformation<Bitmap>... transformations) {, + return (GlideOptions) super.transform(transformations);, + }, +, + @Override, + @SafeVarargs, + @SuppressWarnings("varargs"), + @Deprecated, + @NonNull, + @CheckResult, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java, + * @see GlideOptions#transform(Transformation<Bitmap>[]), + */, + @NonNull,
[+++ b/library/findbugs-exclude.xml, + <!-- We make a best effort attempt to acquire the cpu count from a fixed path -->, + <Match>, + <Class name="com.bumptech.glide.load.engine.executor.GlideExecutor" />, + <Bug pattern="DMI_HARDCODED_ABSOLUTE_FILENAME" />, + </Match>, +, +++ b/library/findbugs-exclude.xml, + <!-- We make a best effort attempt to acquire the cpu count from a fixed path -->, + <Match>, + <Class name="com.bumptech.glide.load.engine.executor.GlideExecutor" />, + <Bug pattern="DMI_HARDCODED_ABSOLUTE_FILENAME" />, + </Match>, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java, + File[] cpus = null;, + try {, + cpus = cpuInfo.listFiles(new FilenameFilter() {, + } catch (Throwable t) {, + if (Log.isLoggable(TAG, Log.ERROR)) {, + Log.e(TAG, "Failed to calculate accurate
[+++ b/library/libs/android-support-v4.jar, +++ b/library/libs/android-support-v4.jar, +++ b/library/pom.xml, +++ b/library/libs/android-support-v4.jar, +++ b/library/pom.xml, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.RequestManager;, + Class<TranscodeType> transcodeClass, Glide glide, RequestManager requestManager) {, + super(context, model, streamLoadProvider, transcodeClass, glide, requestManager);, +++ b/library/libs/android-support-v4.jar, +++ b/library/pom.xml, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.RequestManager;, + Class<TranscodeType> transcodeClass, Glide glide, RequestManager requestManager) {, + super(context, model, streamLoadProvider, transcodeClass, glide, requestManager);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +import com.bumptech.glide.manager.RequestManager;, + private RequestManager requestManager;, + Glide glide, RequestManager requestManager) {, + glide, requestManager);, + this.requestManager = requestManager;, + transcodeClass, glide, requestManager);, +++ b/library/libs/android-support-v4.jar, +++ b/library/pom.xml, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.RequestManager;, + Class<TranscodeType> transcodeClass, Glide glide, RequestManager requestManager) {, + super(context, model, streamLoadProvider, transcodeClass, glide,
[+++ b/.gitignore, +samples/flickr/gen, +samples/flickr/out, +samples/flickr/bin, +*.keystore, +, +++ b/.gitignore, +samples/flickr/gen, +samples/flickr/out, +samples/flickr/bin, +*.keystore, +, +++ b/samples/flickr/AndroidManifest.xml, + package="com.bumptech.glide.samples.flickr", + <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="18" />, +++ b/.gitignore, +samples/flickr/gen, +samples/flickr/out, +samples/flickr/bin, +*.keystore, +, +++ b/samples/flickr/AndroidManifest.xml, + package="com.bumptech.glide.samples.flickr", + <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="18" />, +++ b/samples/flickr/ant.properties, +key.store=glide-release-key.keystore, +key.alias=flickr, +++ b/.gitignore, +samples/flickr/gen, +samples/flickr/out, +samples/flickr/bin, +*.keystore, +, +++ b/samples/flickr/AndroidManifest.xml, + package="com.bumptech.glide.samples.flickr", + <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="18" />, +++ b/samples/flickr/ant.properties, +key.store=glide-release-key.keystore, +key.alias=flickr, +++ b/samples/flickr/build.xml, +<project name="glide-flickr-demo" default="help">, +++ b/.gitignore, +samples/flickr/gen, +samples/flickr/out, +samples/flickr/bin, +*.keystore, +, +++ b/samples/flickr/AndroidManifest.xml, + package="com.bumptech.glide.samples.flickr", + <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="18" />, +++ b/samples/flickr/ant.properties, +key.store=glide-release-key.keystore, +key.alias=flickr, +++ b/samples/flickr/build.xml, +<project name="glide-flickr-demo" default="help">, +++ /dev/null, +++ b/.gitignore, +samples/flickr/gen, +samples/flickr/out,
[+++ b/samples/flickr/res/layout/flickr_search_activity.xml, +++ b/samples/flickr/res/layout/flickr_search_activity.xml, +++ b/samples/flickr/res/values/strings.xml, +++ b/samples/flickr/res/layout/flickr_search_activity.xml, +++ b/samples/flickr/res/values/strings.xml, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrSearchActivity.java, +++ b/samples/flickr/res/layout/flickr_search_activity.xml, +++ b/samples/flickr/res/values/strings.xml, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrSearchActivity.java, +++ b/samples/flickr/src/com/bumptech/flickr/api/Api.java, + Log.d("API: searching");, + error.printStackTrace();]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, + Resource resource = mock(Resource.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, + Resource resource = mock(Resource.class);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, + Resource resource = mock(Resource.class);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + return animate(new ViewAnimation.ViewAnimationFactory<TranscodeType>(context, animationId));, + return animate(new ViewAnimation.ViewAnimationFactory<TranscodeType>(animation));, + return animate(new ViewPropertyAnimation.ViewPropertyAnimationFactory<TranscodeType>(animator));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, + Resource resource = mock(Resource.class);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + return animate(new ViewAnimation.ViewAnimationFactory<TranscodeType>(context, animationId));, + return animate(new ViewAnimation.ViewAnimationFactory<TranscodeType>(animation));, + return animate(new ViewPropertyAnimation.ViewPropertyAnimationFactory<TranscodeType>(animator));, +++ b/library/src/main/java/com/bumptech/glide/GenericTranscodeRequest.java, + transcoder = (ResourceTranscoder<Z, R>) UnitTranscoder.get();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, + Resource resource = mock(Resource.class);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java,
[+++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, + private int hashCode;, +, + if (hashCode == 0) {, + hashCode = getCacheKey().hashCode();, + }]
[+++ b/gradle.properties, +VERSION_NAME=3.3.0-SNAPSHOT]
[+++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.1', + <version>3.6.1</version>, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.1', + <version>3.6.1</version>, +++ b/gradle.properties, +VERSION_CODE=12, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.1', + <version>3.6.1</version>, +++ b/gradle.properties, +VERSION_CODE=12, +++ b/integration/gifencoder/build.gradle, + versionCode = VERSION_CODE as int, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.1', + <version>3.6.1</version>, +++ b/gradle.properties, +VERSION_CODE=12, +++ b/integration/gifencoder/build.gradle, + versionCode = VERSION_CODE as int, +++ b/integration/gifencoder/gradle.properties, +VERSION_CODE=8, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.1', + <version>3.6.1</version>, +++ b/gradle.properties, +VERSION_CODE=12, +++ b/integration/gifencoder/build.gradle, + versionCode = VERSION_CODE as int, +++ b/integration/gifencoder/gradle.properties, +VERSION_CODE=8, +++ b/integration/okhttp/build.gradle, + versionCode VERSION_CODE as int, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.1', + <version>3.6.1</version>, +++ b/gradle.properties, +VERSION_CODE=12, +++ b/integration/gifencoder/build.gradle, + versionCode =
[+++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, + * {@link #updateDiskCacheKey(java.security.MessageDigest)}} correctly., + * <p>If the original resource object is not returned, the original resource will be, + * be copied into the transformed resource., + *, + * <p>If a Transformation is updated, {@link #equals(Object)}, {@link #hashCode()}, and, + * {@link #updateDiskCacheKey(java.security.MessageDigest)} should all change. If you're using a, + * simple String key an easy way to do this is to append a version number to your key. Failing to, + * do so will mean users may see images loaded from cache that had the old version of the, + *
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + private final DeferredEncodeManager<?> deferredEncodeManager = new DeferredEncodeManager<>();, + private final ReleaseManager releaseManager = new ReleaseManager(deferredEncodeManager);, +, + private RunReason runReason;, + private long startFetchTime;, +, + private Key currentAttemptingKey;, + private volatile DataFetcherGenerator currentGenerator;, + private volatile boolean isCallbackNotified;, + this.runReason = RunReason.INITIALIZE;, + /**, + * Called when this object is no longer in use externally., + */, + if (releaseManager.release()) {, + releaseInternal();, + }, + }, +, + private void onEncodeComplete() {, + if (releaseManager.onEncodeComplete()) {, + releaseInternal();, + }, + }, +, + private void releaseInternal() {, + releaseManager.reset();, + deferredEncodeManager.clear();, +
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, + private static final String FULLY_QUALIFIED_NON_NULL_CLASS_NAME =, + "android.support.annotation.NonNull";, + if (!annotationNames.contains(FULLY_QUALIFIED_NON_NULL_CLASS_NAME)) {, + + " is missing the " + FULLY_QUALIFIED_NON_NULL_CLASS_NAME + " annotation,", +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, + private static final String FULLY_QUALIFIED_NON_NULL_CLASS_NAME =, + "android.support.annotation.NonNull";, + if (!annotationNames.contains(FULLY_QUALIFIED_NON_NULL_CLASS_NAME)) {, + + " is missing the " + FULLY_QUALIFIED_NON_NULL_CLASS_NAME + " annotation,", +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java, + assertThat(compilation).hadWarningContaining("android.support.annotation.NonNull");, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, + private static final String FULLY_QUALIFIED_NON_NULL_CLASS_NAME =, + "android.support.annotation.NonNull";, + if (!annotationNames.contains(FULLY_QUALIFIED_NON_NULL_CLASS_NAME)) {, + + " is missing the " + FULLY_QUALIFIED_NON_NULL_CLASS_NAME + " annotation,", +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java, + assertThat(compilation).hadWarningContaining("android.support.annotation.NonNull");, +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java, + assertThat(compilation).hadWarningContaining("android.support.annotation.NonNull");]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, + Bitmap.CompressFormat format = getFormat(bitmap, options);, + TraceCompat.beginSection(, + "encode: [" + bitmap.getWidth() + "x" + bitmap.getHeight() + "] " + format);, + + " in " + LogTime.getElapsedMillis(start), + + ", options format: " + options.get(COMPRESSION_FORMAT), + + ", hasAlpha: " + bitmap.hasAlpha());]
[+++ b/.gitignore, +**/.idea/runConfigurations.xml]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/.gitmodules, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++ b/.gitignore, +++ b/.gitmodules, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++ b/LICENSE, +Copyright 2013 Bump Technologies, Inc. All rights reserved., +THIS SOFTWARE IS PROVIDED BY BUMP TECHNOLOGIES, INC. ``AS IS'' AND ANY EXPRESS OR IMPLIED, +FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BUMP TECHNOLOGIES, INC. OR, +or implied, of Bump Technologies, Inc., +++ b/.gitignore, +++ b/.gitmodules, +[submodule "library/volley"], + path = library/volley, +[submodule
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java, +import android.content.Context;, +import com.bumptech.glide.Glide;, +import com.bumptech.glide.load.DecodeFormat;, + public StreamBitmapDecoder(Context context) {, + this(Glide.get(context).getBitmapPool());, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java, +import android.content.Context;, +import com.bumptech.glide.Glide;, +import com.bumptech.glide.load.DecodeFormat;, + public StreamBitmapDecoder(Context context) {, + this(Glide.get(context).getBitmapPool());, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifData.java, + GifFrameManager frameManager = new GifFrameManager(context, gifDecoder, getFrameTransformation());, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java, +import android.content.Context;, +import com.bumptech.glide.Glide;, +import com.bumptech.glide.load.DecodeFormat;, + public StreamBitmapDecoder(Context context) {, + this(Glide.get(context).getBitmapPool());, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifData.java, + GifFrameManager frameManager = new GifFrameManager(context, gifDecoder, getFrameTransformation());, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDataResource.java, +package com.bumptech.glide.load.resource.gif;, +, +import com.bumptech.glide.Resource;, +, +public class GifDataResource extends Resource<GifData> {, + private GifData gifData;, +, + public GifDataResource(GifData gifData) {, +
[+++ b/.gitignore, +!.idea/inspectionProfiles, +!.idea/inspectionProfiles/Project_Default.xml, +, +++ b/.gitignore, +!.idea/inspectionProfiles, +!.idea/inspectionProfiles/Project_Default.xml, +, +++ b/.idea/inspectionProfiles/Project_Default.xml, +<component name="InspectionProjectProfileManager">, + <profile version="1.0">, + <option name="myName" value="Project Default" />, + <inspection_tool class="SerializableHasSerialVersionUIDField" enabled="true" level="WARNING" enabled_by_default="true">, + <option name="ignoreAnonymousInnerClasses" value="false" />, + <option name="superClassString" value="" />, + </inspection_tool>, + </profile>, +</component>]
[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, + public synchronized GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {, + public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {, + public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, + public synchronized GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {, + public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {, + public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, + public synchronized GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {, + public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {, + public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, + public synchronized GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {, + public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {, + public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener)
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +import com.bumptech.glide.Registry;, + public void registerComponents(Context context, Registry registry) {, + registry.replace(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory());, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +import com.bumptech.glide.Registry;, + public void registerComponents(Context context, Registry registry) {, + registry.replace(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory());, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java, +import com.bumptech.glide.Registry;, + public void registerComponents(Context context, Registry registry) {, + registry.replace(GlideUrl.class, InputStream.class, new VolleyUrlLoader.Factory(context));, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +import com.bumptech.glide.Registry;, + public void registerComponents(Context context, Registry registry) {, + registry.replace(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory());, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java, +import com.bumptech.glide.Registry;, + public void registerComponents(Context context, Registry registry) {, + registry.replace(GlideUrl.class, InputStream.class, new VolleyUrlLoader.Factory(context));, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + Glide.get(getContext()).getRegistry().prepend(failModel, failResource, failFactory);, + Glide.get(Robolectric.application).getRegistry(), + .prepend(modelClass, InputStream.class, modelLoaderFactory);, + public
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.os.ParcelFileDescriptor;, +import android.view.View;, +import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorFileLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorModelLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorStringLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorUriLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamByteArrayLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamFileLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamModelLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamStringLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamUriLoader;, +import com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.bitmap.transformation.CenterCrop;, +import com.bumptech.glide.loader.bitmap.transformation.FitCenter;, +import com.bumptech.glide.loader.bitmap.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.bitmap.transformation.None;, +import com.bumptech.glide.loader.bitmap.transformation.TransformationLoader;, +import com.bumptech.glide.presenter.target.ImageViewTarget;, +import com.bumptech.glide.presenter.target.ViewTarget;, +import com.bumptech.glide.resize.load.BitmapDecoder;, +import com.bumptech.glide.resize.load.VideoBitmapDecoder;, +import java.io.InputStream;, +import java.util.UUID;, + * A singleton to present a simple static interface for Glide {@link Request} and to create and manage an, + * public
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + return into(target, /*targetListener=*/ null, /*backgroundRequestOrigin=*/ null);, + @Nullable RequestListener<TranscodeType> targetListener,, + @Nullable Exception backgroundRequestOrigin) {, + return into(target, targetListener, backgroundRequestOrigin, /*options=*/ this);, + @Nullable Exception backgroundRequestOrigin,, + /*backgroundRequestOrigin=*/ null,, + final Exception backgroundRequestOrigin =, + glideContext.isLoggingRequestOriginsEnabled(), + ? new RuntimeException("Gldie request origin trace") : null;, + into(target, target, backgroundRequestOrigin);, + into(target, target, /*backgroundRequestOrigin=*/ null);, + requestOptions,, + /*backgroundRequestOrigin=*/ null);, + BaseRequestOptions<?> requestOptions,, + @Nullable Exception backgroundRequestOrigin) {, + requestOptions,, + backgroundRequestOrigin);, + errorBuilder,, + backgroundRequestOrigin);, + BaseRequestOptions<?> requestOptions,, + @Nullable Exception backgroundRequestOrigin) {, + overrideHeight,, + backgroundRequestOrigin);, + thumbnailBuilder,, + backgroundRequestOrigin);, + overrideHeight,, + backgroundRequestOrigin);, +
[+++ b/library/src/main/java/com/bumptech/glide/util/LruCache.java, + if (result != item) {, + currentSize += getSize(item);, + }, +++ b/library/src/main/java/com/bumptech/glide/util/LruCache.java, + if (result != item) {, + currentSize += getSize(item);, + }, +++ b/library/src/test/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java, + public void testCanPutSameItemMultipleTimes() {, + String key = getKey();, + Object value = new Object();, + for (int i = 0; i < SIZE * 2; i++) {, + cache.put(key, value);, + }, +, + verify(listener, never()).onItemRemoved(anyObject());, + }, +, + @Test]
[+++ b/.travis.yml, +sudo: required, +dist: trusty, +, + - tools, + - android-22, + - sys-img-armeabi-v7a-android-22, +env: , + matrix:, + - COMPONENT=unit, + - COMPONENT=instrumentation, + - COMPONENT=samples, +before_script:, + - ./scripts/travis_before_script.sh, +, +script: , + - ./scripts/travis_script.sh, + - ./scripts/travis_after_success.sh, +++ b/.travis.yml, +sudo: required, +dist: trusty, +, + - tools, + - android-22, + - sys-img-armeabi-v7a-android-22, +env: , + matrix:, + - COMPONENT=unit, + - COMPONENT=instrumentation, + - COMPONENT=samples, +before_script:, + - ./scripts/travis_before_script.sh, +, +script: , + - ./scripts/travis_script.sh, + - ./scripts/travis_after_success.sh, +++ /dev/null, +++ b/.travis.yml, +sudo: required, +dist: trusty, +, + - tools, + - android-22,
[+++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java, +import static org.mockito.Matchers.eq;, +import android.content.ComponentCallbacks;, + @Test, + public void testCallsRequestManagerOnLowMemory() {, + runTest(new TestCase() {, + @Override, + public void runTest(Harness harness) {, + RequestManager requestManager = mock(RequestManager.class);, + harness.setRequestManager(requestManager);, + harness.getCallbacks().onLowMemory();, + verify(requestManager).onLowMemory();, + }, + });, + }, +, + @Test, + public void testNonSupportFragmentCallsRequestManagerOnTrimMemory() {, + RequestManagerHarness requestManagerHarness = new RequestManagerHarness();, + RequestManager requestManager = mock(RequestManager.class);, + requestManagerHarness.setRequestManager(requestManager);, + int level = 123;, + requestManagerHarness.fragment.onTrimMemory(level);, +, + verify(requestManager).onTrimMemory(eq(level));, + }, +, +, + public ComponentCallbacks getCallbacks();, +, + @Override, + public ComponentCallbacks getCallbacks() {, + return fragment;, + }, +, + @Override, +
[+++ b/README.md, +Then in your Activity or Application, register the Volley based model loader:, +```java, +public void onCreate() {, + Glide.get(this).register(GlideUrl.class, InputStream.class, new VolleyUrlLoader.Factory(yourRequestQueue));, + ..., +}, +```, +, +After the call to register any requests using http or https will go through Volley., +, +++ b/README.md, +Then in your Activity or Application, register the Volley based model loader:, +```java, +public void onCreate() {, + Glide.get(this).register(GlideUrl.class, InputStream.class, new VolleyUrlLoader.Factory(yourRequestQueue));, + ..., +}, +```, +, +After the call to register any requests using http or https will go through Volley., +, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.util.Util;, + Util.assertMainThread();, + request.begin();, +
[+++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, + request.clear();, + request.clear();, + // We don't need to check for cleared here. Any explicit clear by a user will remove the, + // Request from the tracker, so the only way we'd find a cleared request here is if we cleared, + // it. As a result it should be safe for us to resume cleared requests., + if (!request.isComplete() && !request.isRunning()) {, + if (!request.isComplete() && !request.isCleared()) {, + request.clear();, + // Ensure the request will be restarted in onResume., +++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, + request.clear();, + request.clear();, + // We don't need to check for
[+++ b/build.gradle, +++ b/build.gradle, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=2.4, +++ b/build.gradle, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=2.4, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, + public void testActiveResourcesIsNotCheckedIfNotMemoryCacheable() {, + harness.activeResources.put(harness.cacheKey, new WeakReference<EngineResource<?>>(harness.resource));, +, + harness.isMemoryCacheable = false;, + harness.doLoad();, +, + verify(harness.resource, never()).acquire();, + verify(harness.job).start(any(EngineRunnable.class));, + }, +, + @Test, + public void testCacheIsCheckedIfMemoryCacheable() {, + public void testCacheIsNotCheckedIfNotMemoryCacheable() {, + when(harness.cache.remove(eq(harness.cacheKey))).thenReturn(harness.resource);, +, + harness.isMemoryCacheable = false;, + harness.doLoad();, +, + verify(harness.job).start(any(EngineRunnable.class));, + }, +, + @Test, + when(harness.resource.isCacheable()).thenReturn(true);, + public void testDoesNotPutResourceThatIsNotCacheableInActiveResourcesOnEngineComplete() {, + when(harness.resource.isCacheable()).thenReturn(false);, + harness.engine.onEngineJobComplete(harness.cacheKey, harness.resource);, + assertThat(harness.activeResources).doesNotContainKey(harness.cacheKey);, + }, +, + @Test, + boolean isMemoryCacheable = true;, + when(engineJobFactory.build(eq(cacheKey), eq(isMemoryCacheable))).thenReturn(job);, +++ b/build.gradle, +++ b/gradle.properties,
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java, +import static com.bumptech.glide.request.RequestOptions.bitmapTransform;, +import static com.bumptech.glide.request.RequestOptions.centerCropTransform;, +import com.bumptech.glide.load.resource.bitmap.RoundedCorners;, + Glide.get(context).clearDiskCache();, + public void load_withBitmapResourceId_asDrawable_withTransformation_producesNonNullBitmap(), + throws ExecutionException, InterruptedException {, + Drawable drawable = Glide.with(context), + .load(android.R.drawable.star_big_off), + .apply(centerCropTransform()), + .submit(), + .get();, + assertThat(drawable).isNotNull();, + }, +, + @Test, + public void load_withBitmapAliasResourceId_asDrawable_withTransformation_producesNonNullDrawable(), + throws ExecutionException, InterruptedException {, + Drawable drawable = Glide.with(context), + .load(ResourceIds.drawable.bitmap_alias), + .apply(centerCropTransform()), + .submit(), + .get();, + assertThat(drawable).isNotNull();, + }, +, + @Test, + public void load_withShapeDrawableResourceId_asDrawable_withTransformation_sizeOriginal_fails(), + throws ExecutionException, InterruptedException {, + expectedException.expect(ExecutionException.class);, + Glide.with(context), + .load(ResourceIds.drawable.shape_drawable), + .apply(centerCropTransform()), + .submit(), + .get();, + }, +, + @Test, + public void
[+++ b/.gitignore, +**local.properties]
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++
[+++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, + public void update(byte[] keyBytes, Boolean value, MessageDigest messageDigest) {, + messageDigest.update(keyBytes);, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, + public void update(byte[] keyBytes, Boolean value, MessageDigest messageDigest) {, + messageDigest.update(keyBytes);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, + public void update(byte[] keyBytes, Boolean value, MessageDigest messageDigest) {, + messageDigest.update(keyBytes);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, + public void update(byte[] keyBytes, Boolean value, MessageDigest messageDigest) {, + messageDigest.update(keyBytes);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, +import org.robolectric.RobolectricTestRunner;, +++ b/library/src/main/java/com/bumptech/glide/load/Option.java, + private final T defaultValue;, + private final CacheKeyUpdater<T> cacheKeyUpdater;, + private final String key;, + private volatile byte[] keyBytes;, +++
[+++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +import java.net.URISyntaxException;, + } else {, + // Comparing the URLs using .equals performs additional network I/O and is generally broken., + // See http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html., + try {, + if (lastUrl != null && url.toURI().equals(lastUrl.toURI())) {, + } catch (URISyntaxException e) {, + // Do nothing, this is best effort., + }, + }, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +import java.net.URISyntaxException;, + } else {, + // Comparing the URLs using .equals performs additional network I/O and is generally broken., + // See http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html., + try {, + if (lastUrl != null && url.toURI().equals(lastUrl.toURI())) {, + } catch (URISyntaxException e)
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + // Public API., + @SuppressWarnings("WeakerAccess"), + // Public API., + @SuppressWarnings("unused"), + // Public API., + @SuppressWarnings("WeakerAccess"), + // Public API., + @SuppressWarnings("WeakerAccess"), + // Public API., + @SuppressWarnings("WeakerAccess"), + // Public API., + @SuppressWarnings("WeakerAccess"), + // Public API., + @SuppressWarnings("unused"), + // Public API., + @SuppressWarnings("unused"), + // Public API., + @SuppressWarnings("unused"), + // Public API., + @SuppressWarnings("WeakerAccess"), + // Public API., + @SuppressWarnings("unused"), + // Public API., + @SuppressWarnings("unused"), + // Public API., + @SuppressWarnings("unused"), + Glide build(@NonNull Context context) {]
[+++ b/library/src/main/java/com/bumptech/glide/manager/ActivityFragmentLifecycle.java, + Collections.newSetFromMap(new WeakHashMap<LifecycleListener, Boolean>());]
[+++ b/gradle.properties, +VERSION_NAME=4.8.0]
[+++ b/.travis.yml, + - COMPONENT=instrumentation ANDROID_TARGET=17, + - COMPONENT=instrumentation ANDROID_TARGET=18, + - COMPONENT=instrumentation ANDROID_TARGET=19, + - COMPONENT=instrumentation ANDROID_TARGET=20, + - COMPONENT=instrumentation ANDROID_TARGET=21, +++ b/.travis.yml, + - COMPONENT=instrumentation ANDROID_TARGET=17, + - COMPONENT=instrumentation ANDROID_TARGET=18, + - COMPONENT=instrumentation ANDROID_TARGET=19, + - COMPONENT=instrumentation ANDROID_TARGET=20, + - COMPONENT=instrumentation ANDROID_TARGET=21, +++ /dev/null, +++ b/.travis.yml, + - COMPONENT=instrumentation ANDROID_TARGET=17, + - COMPONENT=instrumentation ANDROID_TARGET=18, + - COMPONENT=instrumentation ANDROID_TARGET=19, + - COMPONENT=instrumentation ANDROID_TARGET=20, + - COMPONENT=instrumentation ANDROID_TARGET=21, +++ /dev/null, +++ b/scripts/travis_instrumentation.sh, +if [ "$TRAVIS_PULL_REQUEST" == "false" ] && [ $ANDROID_TARGET -gt 18 ]; then, + echo "Emulator tests >= 19 are run on Firebase ignoring", + exit 0,
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +import com.google.common.collect.Lists;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterSpec;, + return generateSeeMethodJavadocInternal(nameOfClassContainingMethod,, + methodSimpleName, Lists.transform(methodParameters,, + new Function<VariableElement, Object>() {, + @Override, + public Object apply(VariableElement input) {, + return getJavadocSafeName(input);, + }, + }));, + }, +, + CodeBlock generateSeeMethodJavadoc(, + TypeName nameOfClassContainingMethod, MethodSpec methodSpec) {, + return generateSeeMethodJavadocInternal(nameOfClassContainingMethod,, + methodSpec.name, Lists.transform(methodSpec.parameters,, + new Function<ParameterSpec, Object>() {, + @Override, + public Object apply(ParameterSpec input) {, + return input.name;, + }, + }));, + }, +, + private CodeBlock generateSeeMethodJavadocInternal(, + TypeName nameOfClassContainingMethod, String methodName,, + List<Object> safeParameterNames) {, + javadocArgs.add(methodName);, + for (Object param : safeParameterNames) {, + javadocArgs.add(param);,
[+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + private volatile Call call;, + call = client.newCall(request);, + call.enqueue(new okhttp3.Callback() {, + Call local = call;, + if (local != null) {, + local.cancel();, + }]
[+++ b/gradle.properties, +VOLLEY_VERSION=1.0.0]
[+++ /dev/null, +++ /dev/null, +++ b/integration/volley/build.gradle, +, + defaultConfig {, + applicationId "com.bumptech.glide.integration.volley", + minSdkVersion 10, + targetSdkVersion 19, + versionCode 1, + versionName "1.0.0", +++ /dev/null, +++ b/integration/volley/build.gradle, +, + defaultConfig {, + applicationId "com.bumptech.glide.integration.volley", + minSdkVersion 10, + targetSdkVersion 19, + versionCode 1, + versionName "1.0.0", +++ /dev/null, +++ /dev/null, +++ b/integration/volley/build.gradle, +, + defaultConfig {, + applicationId "com.bumptech.glide.integration.volley", + minSdkVersion 10, + targetSdkVersion 19, + versionCode 1, + versionName "1.0.0", +++ /dev/null, +++ b/integration/volley/src/main/AndroidManifest.xml, + package="com.bumptech.glide.integration.volley">, +++ /dev/null, +++ b/integration/volley/build.gradle, +, + defaultConfig {, + applicationId "com.bumptech.glide.integration.volley", + minSdkVersion 10, + targetSdkVersion 19, + versionCode 1,
[+++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.Option;, +import com.bumptech.glide.load.Options;, +import java.security.MessageDigest;, +, + private static final String KEY_ENCODE_TRANSFORMATION =, + "com.bumptech.glide.load.resource.gif.GifResourceEncoder.EncodeTransformation";, + * A boolean option that, if set to <code>true</code>, causes the fully transformed, + public static final Option<Boolean> ENCODE_TRANSFORMATION =, + Option.disk(KEY_ENCODE_TRANSFORMATION, false, new Option.CacheKeyUpdater<Boolean>() {, + @Override, + public void update(Boolean value, MessageDigest messageDigest) {, + if (value) {, + messageDigest.update(KEY_ENCODE_TRANSFORMATION.getBytes(Key.CHARSET));, + }, + }, + });, + public EncodeStrategy getEncodeStrategy(Options options) {, + return options.get(ENCODE_TRANSFORMATION) ? EncodeStrategy.TRANSFORMED : EncodeStrategy.SOURCE;, + public boolean encode(Resource<GifDrawable> resource, OutputStream os, Options options) {, + if (options.get(ENCODE_TRANSFORMATION)) {, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import
[+++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*[/\\]ResourceIds" checks=".*"/>, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*[/\\]ResourceIds" checks=".*"/>, +++ b/gradle.properties, +# Matches the version in Google., +MOCKITO_VERSION=1.9.5, +MOCKITO_ANDROID_VERSION=2.11.0, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*[/\\]ResourceIds" checks=".*"/>, +++ b/gradle.properties, +# Matches the version in Google., +MOCKITO_VERSION=1.9.5, +MOCKITO_ANDROID_VERSION=2.11.0, +++ b/integration/gifencoder/build.gradle, + testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}", +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*[/\\]ResourceIds" checks=".*"/>, +++ b/gradle.properties, +# Matches the version in Google., +MOCKITO_VERSION=1.9.5, +MOCKITO_ANDROID_VERSION=2.11.0, +++ b/integration/gifencoder/build.gradle, + testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}", +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, + when(decoder.getNextFrame()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*[/\\]ResourceIds" checks=".*"/>, +++ b/gradle.properties, +# Matches the version in Google., +MOCKITO_VERSION=1.9.5, +MOCKITO_ANDROID_VERSION=2.11.0, +++ b/integration/gifencoder/build.gradle, + testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}", +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, + when(decoder.getNextFrame()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));, +++ b/library/build.gradle,
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.ArrayList;, + // Enforce ordering across compilers (Internal and External compilers end up disagreeing on the, + // order produced by the Set additions above.), + ArrayList<String> suppressionsList = new ArrayList<>(suppressions);, + Collections.sort(suppressionsList);, + for (String suppression : suppressionsList) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.ArrayList;, + // Enforce ordering across compilers (Internal and External compilers end up disagreeing on the, + // order produced by the Set additions above.), + ArrayList<String> suppressionsList = new ArrayList<>(suppressions);, + Collections.sort(suppressionsList);, + for (String suppression : suppressionsList) {, +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=27.0.2, +JUNIT_VERSION=4.13-SNAPSHOT, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.ArrayList;, + // Enforce ordering across
[+++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +import com.bumptech.glide.resize.bitmap_recycle.LruBitmapPool;, + bitmapPool = new LruBitmapPool(getSafeMemoryCacheSize(context));, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +import com.bumptech.glide.resize.bitmap_recycle.LruBitmapPool;, + bitmapPool = new LruBitmapPool(getSafeMemoryCacheSize(context));, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java, +package com.bumptech.glide.resize.bitmap_recycle;, +, +import android.graphics.Bitmap;, +import com.bumptech.glide.util.Log;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Map;, +, +/**, + * Created with IntelliJ IDEA., + * User: sam, + * Date: 7/10/13, + * Time: 1:47 PM, + * To change this template use File | Settings | File Templates., + */, +public class LruBitmapPool implements BitmapPool {, + private final Map<Integer, ArrayList<Bitmap>> pool = new HashMap<Integer, ArrayList<Bitmap>>();, + //Typically there should only be a handful of
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java]
[+++ b/library/src/androidTest/java/com/bumptech/glide/request/GenericRequestTest.java, + public void testDoesNotNotifyTargetTwiceIfClearedTwiceInARow() {, + GenericRequest request = harness.getRequest();, + request.clear();, + request.clear();, +, + verify(harness.target, times(1)).onLoadCleared(any(Drawable.class));, + }, +, + @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/request/GenericRequestTest.java, + public void testDoesNotNotifyTargetTwiceIfClearedTwiceInARow() {, + GenericRequest request = harness.getRequest();, + request.clear();, + request.clear();, +, + verify(harness.target, times(1)).onLoadCleared(any(Drawable.class));, + }, +, + @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java, + public void testClearsThumbRequestOnFullRequestComplete_withNonNullParent() {, + verify(thumb).clear();, +++ b/library/src/androidTest/java/com/bumptech/glide/request/GenericRequestTest.java, + public void testDoesNotNotifyTargetTwiceIfClearedTwiceInARow() {, + GenericRequest request = harness.getRequest();, + request.clear();, + request.clear();, +, + verify(harness.target, times(1)).onLoadCleared(any(Drawable.class));, + }, +, + @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java, + public void testClearsThumbRequestOnFullRequestComplete_withNonNullParent() {, + verify(thumb).clear();, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, + /** Failed to
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import java.util.ArrayList;, +import java.util.List;, + @Nullable private List<RequestListener<TranscodeType>> requestListeners;, + * <p>Subsequent calls to this method will replace previously set listeners. To set multiple, + * listeners, use {@link #addListener} instead., + *, + this.requestListeners = null;, + return addListener(requestListener);, + }, + /**, + * Adds a {@link RequestListener}. If called multiple times, all passed, + * {@link RequestListener listeners} will be called in order., + *, + * @param requestListener The request listener to use. If {@code null}, this method is a noop., + * @return This request builder., + */, + @NonNull, + @CheckResult,
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import java.util.Map;, + Request.Builder requestBuilder = new Request.Builder(), + .url(url.toStringUrl());, + for (Map.Entry<String, String> headerEntry : url.getHeaders().entrySet()) {, + requestBuilder.addHeader(headerEntry.getKey(), headerEntry.getValue());, + }, + Request request = requestBuilder.build();, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import java.util.Map;, + Request.Builder requestBuilder = new Request.Builder(), + .url(url.toStringUrl());, + for (Map.Entry<String, String> headerEntry : url.getHeaders().entrySet()) {, + requestBuilder.addHeader(headerEntry.getKey(), headerEntry.getValue());, + }, + Request request = requestBuilder.build();, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +import com.bumptech.glide.load.model.Headers;, +import java.util.HashMap;, +import java.util.Map;, + @Test, + public void testAppliesHeadersInGlideUrl() throws Exception {, + mockWebServer.enqueue(new MockResponse().setResponseCode(200));, + String headerField = "field";, + String headerValue = "value";, + Map<String, String>
[+++ b/glide/build.gradle, + def classpathFiles = files(getAndroidLibraryVariantsForJar(variantName).collect {, + classpathFiles += files(getAndroidLibraryVariantsForJavadoc(variantName).collect {, + classpathFiles += (getInternalJavaProjectsForJavadoc().collect {, + it.sourceSets.main.compileClasspath.files, + }.flatten()), + classpathFiles += (getInternalJavaProjectsForJar().collect {, + it.sourceSets.main.compileClasspath.files, + }.flatten()), + classpathFiles += getInternalAndroidProjectsForJavadoc().collect {, + classpath = files(classpathFiles), +++ b/glide/build.gradle, + def classpathFiles = files(getAndroidLibraryVariantsForJar(variantName).collect {, + classpathFiles += files(getAndroidLibraryVariantsForJavadoc(variantName).collect {, + classpathFiles += (getInternalJavaProjectsForJavadoc().collect {, + it.sourceSets.main.compileClasspath.files, + }.flatten()), + classpathFiles += (getInternalJavaProjectsForJar().collect {, + it.sourceSets.main.compileClasspath.files, + }.flatten()), + classpathFiles += getInternalAndroidProjectsForJavadoc().collect {, + classpath = files(classpathFiles), +++ b/gradle.properties, +SUPPORT_V4_VERSION=25.3.1, +SUPPORT_V7_VERSION=25.3.1, +ANDROID_GRADLE_VERSION=2.3.0, +++ b/glide/build.gradle, + def classpathFiles = files(getAndroidLibraryVariantsForJar(variantName).collect {, + classpathFiles += files(getAndroidLibraryVariantsForJavadoc(variantName).collect {, +
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + RequestManager requestManager = RequestManagerRetriever.get(context);, + return new ModelRequest(context, Glide.get(context), requestManager);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + RequestManager requestManager = RequestManagerRetriever.get(context);, + return new ModelRequest(context, Glide.get(context), requestManager);, +++ b/library/src/main/java/com/bumptech/glide/manager/ConnectivityMonitor.java, +package com.bumptech.glide.manager;, +, +interface ConnectivityMonitor {, +, + public interface ConnectivityListener {, + public void onConnectivityChanged(boolean isConnected);, + }, +, + public void register();, +, + public void unregister();, +}, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + RequestManager requestManager = RequestManagerRetriever.get(context);, + return new ModelRequest(context, Glide.get(context), requestManager);, +++ b/library/src/main/java/com/bumptech/glide/manager/ConnectivityMonitor.java, +package com.bumptech.glide.manager;, +, +interface ConnectivityMonitor {, +, + public interface ConnectivityListener {, + public void onConnectivityChanged(boolean isConnected);, + }, +, + public void register();, +, +
[+++ b/.gitignore, +**/.idea/*, +++ b/.gitignore, +**/.idea/*, +++ b/library/.gitignore, +tests/ant.properties, +tests/local.properties, +tests/gen/**/*, +, +++ b/.gitignore, +**/.idea/*, +++ b/library/.gitignore, +tests/ant.properties, +tests/local.properties, +tests/gen/**/*, +, +++ b/library/AndroidManifest.xml, + <application />, +++ b/.gitignore, +**/.idea/*, +++ b/library/.gitignore, +tests/ant.properties, +tests/local.properties, +tests/gen/**/*, +, +++ b/library/AndroidManifest.xml, + <application />, +++ b/library/tests/AndroidManifest.xml, +<?xml version="1.0" encoding="utf-8"?>, +<!-- package name must be unique so suffix with "tests" so package loader doesn't ignore us -->, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + package="com.bumptech.glide.tests", + android:versionCode="1", + android:versionName="1.0">, + <uses-sdk android:minSdkVersion="8" />, + <!-- We add an application tag here just so that we can indicate that, + this package needs to link against the android.test library,,
[+++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java, +import static org.mockito.Mockito.doAnswer;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, + public void testAvoidsConcurrentModificationWhenResuming() {, + Request first = mock(Request.class);, + Request second = mock(Request.class);, +, + doAnswer(new RemoveRequest(second)).when(first).begin();, +, + tracker.addRequest(mock(Request.class));, + tracker.addRequest(first);, + tracker.addRequest(second);, +, + tracker.resumeRequests();, + }, +, + @Test, + public void testAvoidsConcurrentModificationWhenPausing() {, + Request first = mock(Request.class);, + Request second = mock(Request.class);, +, + when(first.isRunning()).thenReturn(true);, + doAnswer(new RemoveRequest(second)).when(first).pause();, +, + tracker.addRequest(mock(Request.class));, + tracker.addRequest(first);, + tracker.addRequest(second);, +, + tracker.pauseRequests();, + }, +, + @Test, + public void testAvoidsConcurrentModificationWhenClearing() {, + Request first = mock(Request.class);, + Request second = mock(Request.class);, +, + doAnswer(new RemoveRequest(second)).when(first).clear();, +,
[+++ b/integration/okhttp/gradle.properties, +VERSION_MINOR=3]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java, + @SuppressWarnings("deprecation"), +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java, + @SuppressWarnings("deprecation"), +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + //noinspection SuspiciousNameCombination, + @SuppressWarnings("deprecation"), +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java, + @SuppressWarnings("deprecation"), +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + //noinspection SuspiciousNameCombination, + @SuppressWarnings("deprecation"), +++ b/samples/flickr/src/main/AndroidManifest.xml, + android:icon="@android:drawable/sym_def_app_icon", +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java, + @SuppressWarnings("deprecation"), +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + //noinspection SuspiciousNameCombination,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/flickr/res/layout/flickr_photo_grid.xml, +<?xml version="1.0" encoding="utf-8"?>, +<GridView xmlns:android="http://schemas.android.com/apk/res/android", + android:id="@+id/images", + android:cacheColorHint="#00000000", + android:fadingEdge="none", + android:scrollingCache="false", + android:numColumns="auto_fit", + android:horizontalSpacing="10dp", + android:verticalSpacing="10dp", + android:gravity="center", + android:layout_gravity="center", + android:stretchMode="columnWidth", + android:layout_width="fill_parent", + android:layout_height="fill_parent" />, +++ /dev/null, +++ /dev/null, +++ b/samples/flickr/res/layout/flickr_photo_grid.xml, +<?xml version="1.0" encoding="utf-8"?>, +<GridView xmlns:android="http://schemas.android.com/apk/res/android", + android:id="@+id/images", + android:cacheColorHint="#00000000", + android:fadingEdge="none", + android:scrollingCache="false", + android:numColumns="auto_fit", + android:horizontalSpacing="10dp", + android:verticalSpacing="10dp", + android:gravity="center", + android:layout_gravity="center", + android:stretchMode="columnWidth", + android:layout_width="fill_parent", + android:layout_height="fill_parent" />, +++ b/samples/flickr/res/layout/flickr_photo_grid_item.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<ImageView xmlns:android="http://schemas.android.com/apk/res/android", + android:scaleType="center", + android:layout_width="fill_parent", + android:layout_height="fill_parent"/>, +++ /dev/null, +++ /dev/null, +++ b/samples/flickr/res/layout/flickr_photo_grid.xml, +<?xml
[+++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.1-SNAPSHOT, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.1-SNAPSHOT, +++ b/library/build.gradle, + jvmArgs '-XX:MaxPermSize=2048m', +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.1-SNAPSHOT, +++ b/library/build.gradle, + jvmArgs '-XX:MaxPermSize=2048m', +++ b/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java, + public static class PreDrawShadowViewTreeObserver {]
[+++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/LazyHeadersTest.java, +package com.bumptech.glide.load.model;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +import com.google.common.testing.EqualsTester;, +, +import com.bumptech.glide.load.model.LazyHeaders.Builder;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import java.util.Map;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +public class LazyHeadersTest {, +, + @Test, + public void testIncludesEagerHeaders() {, + Map<String, String> headers = new Builder(), + .addHeader("key", "value"), + .build(), + .getHeaders();, + assertThat(headers).containsEntry("key", "value");, + assertThat(headers).hasSize(1);, + }, +, + @Test, + public void testIncludesLazyHeaders() {, + LazyHeaderFactory factory = mock(LazyHeaderFactory.class);, + when(factory.buildHeader()).thenReturn("value");, + Map<String, String> headers = new Builder(),
[+++ b/.gitmodules, +[submodule "library/test/src/test/resources/exif-orientation-examples"], + path = library/test/src/test/resources/exif-orientation-examples, +++ b/.gitmodules, +[submodule "library/test/src/test/resources/exif-orientation-examples"], + path = library/test/src/test/resources/exif-orientation-examples, +++ b/build.gradle, +++ b/.gitmodules, +[submodule "library/test/src/test/resources/exif-orientation-examples"], + path = library/test/src/test/resources/exif-orientation-examples, +++ b/build.gradle, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]test[/\\]src[/\\]test[/\\].*" checks="Javadoc.*"/>, +++ b/.gitmodules, +[submodule "library/test/src/test/resources/exif-orientation-examples"], + path = library/test/src/test/resources/exif-orientation-examples, +++ b/build.gradle, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]test[/\\]src[/\\]test[/\\].*" checks="Javadoc.*"/>, +++ b/library/build.gradle, +tasks.withType(JavaCompile) {, + options.fork = true, +}, +, +check.dependsOn(':library:test:check'), +++ b/.gitmodules, +[submodule "library/test/src/test/resources/exif-orientation-examples"], + path = library/test/src/test/resources/exif-orientation-examples, +++ b/build.gradle, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]test[/\\]src[/\\]test[/\\].*" checks="Javadoc.*"/>, +++ b/library/build.gradle, +tasks.withType(JavaCompile) {, + options.fork = true, +}, +, +check.dependsOn(':library:test:check'), +++ /dev/null, +++ b/.gitmodules, +[submodule "library/test/src/test/resources/exif-orientation-examples"], + path = library/test/src/test/resources/exif-orientation-examples, +++
[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.data.bytes.BytesResource;, +import com.bumptech.glide.load.data.transcode.ResourceTranscoder;, +import com.bumptech.glide.load.model.GenericLoaderFactory;, +import com.bumptech.glide.load.model.GlideUrl;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.model.ModelLoaderFactory;, +import com.bumptech.glide.load.model.stream.StreamModelLoader;, +import com.bumptech.glide.load.resource.ResourceFetcher;, +import static org.mockito.Matchers.anyObject;, + Glide.with(getContext()).loadFromImage(url).into(target);, + verify(target).onResourceReady(any(Resource.class));, + verify(target).setRequest((Request) notNull());, +, + public void testAsBitmapOption() {, + Uri uri = Uri.parse("content://something/else");, + mockUri(uri);, +, + Glide.with(getContext()).load(uri).asBitmap().into(target);, +, + verify(target).onResourceReady(any(Bitmap.class));, + }, +, + @Test, + public void testTranscodeOption() {, + Uri uri = Uri.parse("content://something/else");, + mockUri(uri);, + final byte[] bytes = new byte[0];, +, + Glide.with(getContext()).load(uri).transcode(byte[].class, new ResourceTranscoder<Bitmap, byte[]>() {, + @Override, + public Resource<byte[]> transcode(Resource<Bitmap> toTranscode) {, + return new BytesResource(bytes);, + }, +, + @Override, + public String getId()
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +import com.bumptech.glide.load.DataSource;, + this.sourceKey = sourceId;, + cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.DATA_DISK_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +import com.bumptech.glide.load.DataSource;, + this.sourceKey = sourceId;, + cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.DATA_DISK_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheKey.java, + public Key getSourceKey() {, + return sourceKey;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +import com.bumptech.glide.load.DataSource;, + this.sourceKey = sourceId;, + cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.DATA_DISK_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheKey.java, + public Key getSourceKey() {, + return sourceKey;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +import com.bumptech.glide.load.DataSource;, + void onDataFetcherReady(Key sourceKey, Object data, DataFetcher fetcher, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +import com.bumptech.glide.load.DataSource;, + this.sourceKey = sourceId;, + cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.DATA_DISK_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheKey.java, + public Key getSourceKey() {,
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + // Use the previous request rather than the new one to allow for optimizations like skipping, + // setting placeholders, tracking and untracking Targets, and obtaining View dimensions that, + // are done in the individual Request., +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + // Use the previous request rather than the new one to allow for optimizations like skipping, + // setting placeholders, tracking and untracking Targets, and obtaining View dimensions that, + // are done in the individual Request., +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + && priority == that.priority, + // We do not want to require that RequestListeners implement equals/hashcode,
[+++ b/.gitignore, +**/jacoco.exec, +++ b/.gitignore, +**/jacoco.exec, +++ b/.travis.yml, + - build-tools-26.0.2, +++ b/.gitignore, +**/jacoco.exec, +++ b/.travis.yml, + - build-tools-26.0.2, +++ b/annotation/compiler/test/build.gradle, + testImplementation project(':glide'), + testImplementation project(':annotation:compiler'), + testImplementation 'com.squareup:javapoet:1.9.0', + testImplementation 'com.google.auto.service:auto-service:1.0-rc3', + testImplementation 'com.google.code.findbugs:jsr305:3.0.1', + testImplementation 'com.google.testing.compile:compile-testing:0.10', + testImplementation 'com.google.android:android:4.1.1.4', + testImplementation 'com.google.android:support-v4:r6', + testImplementation "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}", +++ b/.gitignore, +**/jacoco.exec, +++ b/.travis.yml, + - build-tools-26.0.2, +++ b/annotation/compiler/test/build.gradle, + testImplementation project(':glide'), + testImplementation project(':annotation:compiler'), + testImplementation 'com.squareup:javapoet:1.9.0', + testImplementation 'com.google.auto.service:auto-service:1.0-rc3', + testImplementation 'com.google.code.findbugs:jsr305:3.0.1', + testImplementation 'com.google.testing.compile:compile-testing:0.10', + testImplementation 'com.google.android:android:4.1.1.4', + testImplementation 'com.google.android:support-v4:r6', + testImplementation "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}", +++ b/build.gradle, + google(), +++ b/.gitignore, +**/jacoco.exec, +++ b/.travis.yml, + - build-tools-26.0.2, +++ b/annotation/compiler/test/build.gradle,
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, + throw new IllegalArgumentException(, + "RequestOptionsExtensions must be public, including: " + getName(typeElement));, + private static String getQualifiedMethodName(ExecutableElement executableElement) {, + return getEnclosingClassName(executableElement) + "#" + getName(executableElement);, + }, +, + private static String getEnclosingClassName(Element element) {, + return element.getEnclosingElement().toString();, + }, +, + private static String getName(Element element) {, + return element.toString();, + }, +, + throw new IllegalArgumentException(, + "RequestOptionsExtensions must be public, with private constructors and only static", + + " methods. Found a non-private constructor in: " + getEnclosingClassName(element));, + throw new IllegalArgumentException(, + "RequestOptionsExtensions must be public, with private constructors and only
[+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java, + // openInputStream can throw NPEs., + } catch (IOException | NullPointerException e) {, + try {, + // openInputStream can throw NPEs., + } catch (NullPointerException e) {, + throw new FileNotFoundException("NPE opening uri: " + thumbnailUri);, + }]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, + EngineJob job = harness.getJob();, + job.cancel();, + verify(harness.listener).onEngineJobCancelled(eq(job), eq(harness.key));, + verify(harness.listener, never()).onEngineJobCancelled(eq(job), eq(harness.key));, + verify(harness.listener, times(1)).onEngineJobCancelled(eq(job), eq(harness.key));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, + EngineJob job = harness.getJob();, + job.cancel();, + verify(harness.listener).onEngineJobCancelled(eq(job), eq(harness.key));, + verify(harness.listener, never()).onEngineJobCancelled(eq(job), eq(harness.key));, + verify(harness.listener, times(1)).onEngineJobCancelled(eq(job), eq(harness.key));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, + harness.engine.onEngineJobCancelled(harness.job, harness.cacheKey);, + harness.engine.onEngineJobCancelled(harness.job, harness.cacheKey);, + public void testRunnerIsNotRemovedFromRunnersIfOldJobIsCancelled() {, + harness.doLoad();, +, + harness.engine.onEngineJobCancelled(mock(EngineJob.class), harness.cacheKey);, +, + assertEquals(harness.runner, harness.runners.get(harness.cacheKey));, + }, +, + @Test, + public void testRunnerIsNotCancelledIfOldJobIsCancelled() {, + harness.doLoad();, +, + harness.engine.onEngineJobCancelled(mock(EngineJob.class), harness.cacheKey);, +, + verify(harness.runner, never()).cancel();, + }, +, + @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, + EngineJob job = harness.getJob();, + job.cancel();, + verify(harness.listener).onEngineJobCancelled(eq(job),
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.squareup.okhttp.ResponseBody;, + private ResponseBody responseBody;, + if (response.isSuccessful()) {, + responseBody = response.body();, + stream = responseBody.byteStream();, + } else if (Logs.isEnabled(Log.DEBUG)) {, + Logs.log(Log.DEBUG, "OkHttp got error response: " + response.code() + ", ", + + response.message());, + }, + if (stream != null) {, + }, + if (responseBody != null) {, + try {, + responseBody.close();, + } catch (IOException e) {, + // Ignored., + }, + }]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DownsampleVideoTest.java, +package com.bumptech.glide;, +, +import static com.bumptech.glide.test.BitmapSubject.assertThat;, +import static org.junit.Assume.assumeTrue;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.os.Build;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;, +import com.bumptech.glide.request.target.Target;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +@RunWith(AndroidJUnit4.class), +public class DownsampleVideoTest {, + // The dimensions of the test video., + private static final int WIDTH = 1080;, + private static final int HEIGHT = 1920;, +, + @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();, + private final ConcurrencyHelper concurrency = new ConcurrencyHelper();, + private final Context context = InstrumentationRegistry.getTargetContext();, +, +
[+++ b/Makefile, +, +glide-minus-volley:, + cd library && ant clean && ant glide-minus-volley, +, +++ b/Makefile, +, +glide-minus-volley:, + cd library && ant clean && ant glide-minus-volley, +, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/Makefile, +, +glide-minus-volley:, + cd library && ant clean && ant glide-minus-volley, +, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/custom_rules.xml, + <target name="glide-minus-volley" depends="-compile">, + <jar destfile="bin/glide-minus-volley-${mymanifest.manifest.android:versionName}.jar", + basedir="bin/classes", + excludes="com/bumptech/glide/volley/">, + <zipgroupfileset dir="libs" includes="disklrucache*.jar" />, + </jar>, + </target>, +++ b/Makefile, +, +glide-minus-volley:, + cd library && ant clean && ant glide-minus-volley, +, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />,
[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + verify(target).onResourceReady(any(Resource.class), any(GlideAnimation.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + verify(target).onResourceReady(any(Resource.class), any(GlideAnimation.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import static org.mockito.Mockito.doAnswer;, + harness.activeResources.put(harness.cacheKey, new WeakReference<EngineResource<?>>(harness.resource));, + harness.activeResources.put(harness.cacheKey, new WeakReference<EngineResource<?>>(null));, + harness.activeResources.put(harness.cacheKey, new WeakReference<EngineResource<?>>(null));, + harness.activeResources.put(harness.cacheKey, new WeakReference<EngineResource<?>>(harness.resource));, + harness.activeResources.put(harness.cacheKey, new WeakReference<EngineResource<?>>(harness.resource));, + harness.activeResources.put(harness.cacheKey, new WeakReference<EngineResource<?>>(harness.resource));, + harness.activeResources.put(harness.cacheKey, new WeakReference<EngineResource<?>>(other));, +, + @Test, + public void testHandlesNonEngineResourcesFromCacheIfPresent() {, + final Object expected = new Object();, + Resource fromCache = mock(Resource.class);, + when(fromCache.get()).thenReturn(expected);, + when(harness.cache.remove(eq(harness.cacheKey))).thenReturn(fromCache);, +, + doAnswer(new Answer() {, + @Override, + public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, + Resource resource = (Resource) invocationOnMock.getArguments()[0];, + assertEquals(expected, resource.get());, + return null;, +
[+++ b/gradle.properties, +VERSION_NAME=4.4.0-SNAPSHOT, +VERSION_MINOR=4]
[+++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java, +final class DefaultConnectivityMonitor implements ConnectivityMonitor {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "connectivity changed, isConnected: " + isConnected);, + }, +, + DefaultConnectivityMonitor(Context context, ConnectivityListener listener) {, +++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java, +final class DefaultConnectivityMonitor implements ConnectivityMonitor {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "connectivity changed, isConnected: " + isConnected);, + }, +, + DefaultConnectivityMonitor(Context context, ConnectivityListener listener) {, +++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactory.java, +import android.util.Log;, + private static final String TAG = "ConnectivityMonitor";, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(, + TAG,, + hasPermission, + ? "ACCESS_NETWORK_STATE permission granted, registering connectivity monitor", + : "ACCESS_NETWORK_STATE permission missing, cannot register connectivity
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.os.ParcelFileDescriptor;, +import android.view.View;, +import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.ResourceBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorFileLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorModelLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorStringLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorUriLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamByteArrayLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamFileLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamModelLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamStringLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamUriLoader;, +import com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.bitmap.transformation.CenterCrop;, +import com.bumptech.glide.loader.bitmap.transformation.FitCenter;, +import com.bumptech.glide.loader.bitmap.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.bitmap.transformation.None;, +import com.bumptech.glide.loader.bitmap.transformation.TransformationLoader;, +import com.bumptech.glide.presenter.target.ImageViewTarget;, +import com.bumptech.glide.presenter.target.ViewTarget;, +import com.bumptech.glide.resize.load.BitmapDecoder;, +import com.bumptech.glide.resize.load.VideoBitmapDecoder;, +import java.io.InputStream;, +import java.util.UUID;, + * A singleton to present a simple static interface for Glide {@link Request} and to create and manage an, +
[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.image.ImageManagerLoader;, +import com.bumptech.glide.resize.load.Downsampler;, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.image.ImageManagerLoader;, +import com.bumptech.glide.resize.load.Downsampler;, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/loader/image/ImageLoader.java, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.image.ImageManagerLoader;, +import com.bumptech.glide.resize.load.Downsampler;, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/loader/image/ImageLoader.java, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/loader/image/ImageManagerLoader.java, +import com.bumptech.glide.resize.load.Downsampler;, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.image.ImageManagerLoader;, +import com.bumptech.glide.resize.load.Downsampler;, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/loader/image/ImageLoader.java, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/loader/image/ImageManagerLoader.java, +import com.bumptech.glide.resize.load.Downsampler;, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/loader/transformation/CenterCrop.java, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.image.ImageManagerLoader;, +import com.bumptech.glide.resize.load.Downsampler;, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/loader/image/ImageLoader.java, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/loader/image/ImageManagerLoader.java, +import com.bumptech.glide.resize.load.Downsampler;, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/loader/transformation/CenterCrop.java, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/loader/transformation/FitCenter.java, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.image.ImageManagerLoader;, +import com.bumptech.glide.resize.load.Downsampler;, +import com.bumptech.glide.resize.load.Transformation;, +++ b/library/src/com/bumptech/glide/loader/image/ImageLoader.java, +import com.bumptech.glide.resize.load.Transformation;, +++
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java, + @SuppressWarnings("deprecation"), +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java, + @SuppressWarnings("deprecation"), +++ b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerViewPreloader.java, + * Helper constructor that accepts an {@link Fragment}., + public RecyclerViewPreloader(@NonNull Fragment fragment,, + * Helper constructor that accepts an {@link android.app.Fragment}., + * @deprecated Use constructor <code>RecyclerViewPreloader(Fragment, PreloadModelProvider<T>,, + * PreloadSizeProvider<T>)</code> instead., + @Deprecated, + public RecyclerViewPreloader(@NonNull android.app.Fragment fragment,, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java, + @SuppressWarnings("deprecation"), +++ b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerViewPreloader.java, + * Helper constructor that accepts an {@link Fragment}., + public RecyclerViewPreloader(@NonNull Fragment fragment,, + * Helper constructor that accepts an {@link android.app.Fragment}., + * @deprecated Use constructor <code>RecyclerViewPreloader(Fragment, PreloadModelProvider<T>,, + * PreloadSizeProvider<T>)</code> instead., + @Deprecated, + public RecyclerViewPreloader(@NonNull android.app.Fragment fragment,, +++
[+++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java, + private final ImageView view;, +, + this.view = view;, + view.setImageDrawable(resource);, + view.setImageDrawable(placeholder);, +++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java, + private final ImageView view;, +, + this.view = view;, + view.setImageDrawable(resource);, + view.setImageDrawable(placeholder);, +++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java, + observer.removeOnPreDrawListener(layoutListener);, + observer.addOnPreDrawListener(layoutListener);, + private static class SizeDeterminerLayoutListener implements ViewTreeObserver.OnPreDrawListener {, + public boolean onPreDraw() {, + return true;, +++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java, + private final ImageView view;, +, + this.view = view;, + view.setImageDrawable(resource);, + view.setImageDrawable(placeholder);, +++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java, + observer.removeOnPreDrawListener(layoutListener);, + observer.addOnPreDrawListener(layoutListener);, + private static class SizeDeterminerLayoutListener implements ViewTreeObserver.OnPreDrawListener {, + public boolean onPreDraw() {, + return true;, +++ b/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java, +package com.bumptech.glide.request.target;, +, +import android.content.Context;,
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + "AppGlideModule excludes LibraryGlideModule from annotation: " + glideModule);, + "Discovered LibraryGlideModule from annotation: " + glideModule);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + "AppGlideModule excludes LibraryGlideModule from annotation: " + glideModule);, + "Discovered LibraryGlideModule from annotation: " + glideModule);, +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithLibraryInPackageTest.java, +package com.bumptech.glide.annotation.compiler;, +, +import static com.bumptech.glide.annotation.compiler.test.Util.appResource;, +import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;, +import static com.bumptech.glide.annotation.compiler.test.Util.glide;, +import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;, +import static com.google.testing.compile.CompilationSubject.assertThat;, +import static com.google.testing.compile.Compiler.javac;, +, +import com.bumptech.glide.annotation.compiler.test.ReferencedResource;, +import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;, +import com.bumptech.glide.annotation.compiler.test.Util;, +import com.google.testing.compile.Compilation;, +import java.io.IOException;, +import javax.tools.JavaFileObject;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +, +/**, + * Tests AppGlideModules that use the @Excludes annotation, + * with a
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Glide(Engine engine, MemoryCache memoryCache, BitmapPool bitmapPool, ByteArrayPool byteArrayPool,, + Context context, int logLevel, RequestOptions defaultRequestOptions) {, + this.byteArrayPool = byteArrayPool;, + ByteBufferGifDecoder byteBufferGifDecoder = new ByteBufferGifDecoder(context, bitmapPool,, + byteArrayPool);, + byteArrayPool.clearMemory();, + byteArrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Glide(Engine engine, MemoryCache memoryCache, BitmapPool bitmapPool, ByteArrayPool byteArrayPool,, + Context context, int logLevel, RequestOptions defaultRequestOptions) {, + this.byteArrayPool = byteArrayPool;, + ByteBufferGifDecoder byteBufferGifDecoder = new ByteBufferGifDecoder(context, bitmapPool,, + byteArrayPool);, + byteArrayPool.clearMemory();, + byteArrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;, + private ByteArrayPool byteArrayPool;, + * Sets the {@link ByteArrayPool} implementation to allow variable sized byte arrays to be stored, +
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + * <li>{@link com.bumptech.glide.annotation.GlideExtension}s -, + * <ul>, + * <li>A {@link com.bumptech.glide.request.BaseRequestOptions} implementation that contains, + * static versions of all builder methods in the base class and both static and instance, + * versions of methods in all {@link com.bumptech.glide.annotation.GlideExtension}s., + * <li>If one or more methods in one or more, + * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes are annotated with, + * {@link com.bumptech.glide.annotation.ExtendsRequestManager}:, + * <ul>, + * <li>A {@link com.bumptech.glide.RequestManager} implementation containing a generated, + * method for each method annotated with, + * {@link com.bumptech.glide.annotation.ExtendsRequestManager}., + * <li>A {@link com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory}, + *
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java, +package com.bumptech.glide.load.resource.drawable;, +, +import android.graphics.Canvas;, +import android.graphics.ColorFilter;, +import android.graphics.drawable.Drawable;, +, +import com.bumptech.glide.load.resource.gif.GifDrawable;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +, +import static junit.framework.Assert.assertEquals;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +@RunWith(RobolectricTestRunner.class), +public class DrawableResourceTest {, + private TestDrawable drawable;, + private DrawableResource<TestDrawable> resource;, +, + @Before, + public void setUp() {, + drawable = mock(TestDrawable.class);, + resource = new DrawableResource<TestDrawable>(drawable) {, + @Override, + public int getSize() {, + return 0;, + }, +, + @Override, + public void recycle() { }, + };, + }, +, + @Test, + public void
[+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java, + Button search = (Button) findViewById(R.id.search);, + Resources res = getResources();, + ViewPager pager = (ViewPager) findViewById(R.id.view_pager);, + pager.setPageMargin(res.getDimensionPixelOffset(R.dimen.page_margin));, +, + @Override, + public CharSequence getPageTitle(int position) {, + Page page = Page.values()[position];, + int titleId = PAGE_TO_TITLE.get(page);, + return getString(titleId);, + }, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java, + Button search = (Button) findViewById(R.id.search);, + Resources res = getResources();, + ViewPager pager = (ViewPager) findViewById(R.id.view_pager);, + pager.setPageMargin(res.getDimensionPixelOffset(R.dimen.page_margin));, +, + @Override, + public CharSequence getPageTitle(int position) {, + Page page = Page.values()[position];, + int titleId = PAGE_TO_TITLE.get(page);, + return getString(titleId);, + }, +++ b/samples/flickr/src/main/res/layout/flickr_photo_grid.xml, + android:layout_height="fill_parent", + android:paddingTop="10dp" />, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java,
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + GlideExecutor.newUnlimitedSourceExecutor());, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + GlideExecutor.newUnlimitedSourceExecutor());, +++ b/library/src/main/java/com/bumptech/glide/module/ManifestParser.java, + if (appInfo.metaData == null) {, + return modules;, + }]
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + sourceExecutor = GlideExecutor.newSourceExecutor();, + diskCacheExecutor = GlideExecutor.newDiskCacheExecutor();, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + sourceExecutor = GlideExecutor.newSourceExecutor();, + diskCacheExecutor = GlideExecutor.newDiskCacheExecutor();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java, +import android.os.StrictMode;, +import android.os.StrictMode.ThreadPolicy;, + /**, + * The default thread name prefix for executors used to load/decode/transform data not found in, + * cache., + */, + public static final String DEFAULT_SOURCE_EXECUTOR_NAME = "source";, + /**, + * The default thread name prefix for executors used to load/decode/transform data found in, + * Glide's cache., + */, + public static final String DEFAULT_DISK_CACHE_EXECUTOR_NAME = "disk-cache";, + /**, + * The default thread count for executors used
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java, + * Transcodes the given resource to the new resource type and returns the new resource.]
[+++ b/samples/flickr/src/main/res/values/dimens.xml, +]
[+++ b/library/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, + <groupId>com.bumptech</groupId>, + <artifactId>glide</artifactId>, + <version>3.3.0</version>, + <packaging>apk</packaging>, + <name>glide</name>, +, + <dependencies>, + <dependency>, + <groupId>com.google.android</groupId>, + <artifactId>android</artifactId>, + <version> 4.1.1.4 </version>, + <scope>provided</scope>, + </dependency>, + <dependency>, + <groupId>com.mcxiaoke.volley</groupId>, + <artifactId>library</artifactId>, + <version>1.0.4</version>, + </dependency>, + <dependency>, + <groupId>com.jakewharton</groupId>, + <artifactId>disklrucache</artifactId>, + <version>2.0.2</version>, + </dependency>, + </dependencies>, +, + <build>, + <plugins>, + <plugin>, + <groupId>com.jayway.maven.plugins.android.generation2</groupId>, + <artifactId>android-maven-plugin</artifactId>, + <version>3.9.0-rc.2</version>, + <configuration>, + <sdk>, + <platform>19</platform>, + </sdk>, + <deleteConflictingFiles>true</deleteConflictingFiles>, + <undeployBeforeDeploy>true</undeployBeforeDeploy>, + </configuration>, + <extensions>true</extensions>, + </plugin>, + <plugin>, + <artifactId>maven-compiler-plugin</artifactId>, + <version>3.1</version>, +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterInside.java]
[+++ b/instrumentation/src/androidTest/java/android/support/test/InstrumentationRegistry.java, +package android.support.test;, +, +import android.content.Context;, +, +// Workaround for https://github.com/mockito/mockito/issues/1472., +public final class InstrumentationRegistry {, + public static Context getTargetContext() {, + return androidx.test.InstrumentationRegistry.getTargetContext();, + }, +}]
[+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java, + Cursor cursor = null;, + cursor = query.query(uri);, + } catch (SecurityException e) {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Failed to query for thumbnail for Uri: " + uri, e);, + }, + return null;, +++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java, + Cursor cursor = null;, + cursor = query.query(uri);, + } catch (SecurityException e) {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Failed to query for thumbnail for Uri: " + uri, e);, + }, + return null;, +++ b/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Matchers.any;, + public void open_returnsNull_whenQueryThrowsSecurityException() throws FileNotFoundException {, + when(harness.query.query(any(Uri.class))).thenThrow(new SecurityException());, +
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/ErrorHandlingTest.java, +import com.bumptech.glide.request.FutureTarget;, +import com.bumptech.glide.test.WaitModelLoader;, +import com.bumptech.glide.test.WaitModelLoader.WaitModel;, + @Test, + public void clearRequest_withError_afterPrimaryFails_clearsErrorRequest(), + throws InterruptedException {, + WaitModel<Integer> errorModel = WaitModelLoader.Factory.waitOn(ResourceIds.raw.canonical);, +, + FutureTarget<Drawable> target =, + Glide.with(context), + .load((Object) null), + .error(, + Glide.with(context), + .load(errorModel), + .listener(requestListener)), + .submit();, +, + Glide.with(context).clear(target);, + errorModel.countDown();, +, + // Make sure any pending requests run., + concurrency.pokeMainThread();, + Glide.tearDown();, + // Make sure that any callbacks posted back to the main thread run., + concurrency.pokeMainThread();, + }, +, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/ErrorHandlingTest.java, +import com.bumptech.glide.request.FutureTarget;, +import com.bumptech.glide.test.WaitModelLoader;, +import com.bumptech.glide.test.WaitModelLoader.WaitModel;, + @Test, + public void clearRequest_withError_afterPrimaryFails_clearsErrorRequest(), + throws InterruptedException {, +
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static com.bumptech.glide.test.Matchers.anyDrawable;, +import static com.bumptech.glide.test.Matchers.anyTarget;, + anyDrawable(),, + anyDrawable(),, + anyDrawable(),, + verify(requestListener), + .onResourceReady(, + anyDrawable(),, + any(),, + anyTarget(),, + eq(DataSource.MEMORY_CACHE),, + anyBoolean());, + verify(requestListener), + .onResourceReady(, + anyDrawable(),, + any(),, + anyTarget(),, + eq(DataSource.DATA_DISK_CACHE),, + anyBoolean());, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static com.bumptech.glide.test.Matchers.anyDrawable;, +import static com.bumptech.glide.test.Matchers.anyTarget;, + anyDrawable(),, + anyDrawable(),, + anyDrawable(),, + verify(requestListener), + .onResourceReady(, + anyDrawable(),, + any(),, + anyTarget(),, + eq(DataSource.MEMORY_CACHE),, + anyBoolean());, + verify(requestListener), + .onResourceReady(, + anyDrawable(),, + any(),, + anyTarget(),, + eq(DataSource.DATA_DISK_CACHE),, + anyBoolean());, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestTest.java, +package com.bumptech.glide;, +, +import static com.bumptech.glide.test.Matchers.anyDrawable;, +import static com.bumptech.glide.test.Matchers.anyTarget;, +import static com.google.common.truth.Truth.assertThat;, +import
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, + * Multiplies the initial size of the pool by the given multiplier to dynamically and, + * synchronously allow users to adjust the size of the pool., + * Adds the given {@link android.graphics.Bitmap} if it is eligible to be re-used and the pool, + * can fit it, or calls {@link Bitmap#recycle()} on the Bitmap and discards it., + * <p> Callers most <em>not</em> continue to use the Bitmap after calling this method. </p>, + void put(Bitmap bitmap);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, + * Multiplies the initial size of the pool by the given multiplier to dynamically
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + requestOptions.lock();, + Request request = buildRequest(target);, + Request previous = target.getRequest();, + if (request.isEquivalentTo(previous)) {, + request.recycle();, + return target;, + }, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + requestOptions.lock();, + Request request = buildRequest(target);, + Request previous = target.getRequest();, + if (request.isEquivalentTo(previous)) {, + request.recycle();, + return target;, + }, +++ b/library/src/main/java/com/bumptech/glide/request/Request.java, +, + /**, + * Returns {@code true} if this {@link Request} is equivalent to the given {@link Request} (has, + * all of the same options and sizes)., + *, + * <p>This method is identical to {@link #equals(Object)} except that it's specific to, + *
[+++ b/library/src/androidTest/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java, +import static org.mockito.Mockito.doAnswer;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, + public void testDoesNotStartFullIfClearedByThumb() {, + doAnswer(new Answer<Void>() {, + @Override, + public Void answer(InvocationOnMock invocation) throws Throwable {, + coordinator.clear();, + return null;, + }, + }).when(thumb).begin();, +, + coordinator.begin();, +, + verify(full, never()).begin();, + }, +, + @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java, +import static org.mockito.Mockito.doAnswer;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, + public void testDoesNotStartFullIfClearedByThumb() {, + doAnswer(new Answer<Void>() {, + @Override, + public Void answer(InvocationOnMock invocation) throws Throwable {, + coordinator.clear();, + return null;, + }, + }).when(thumb).begin();, +, + coordinator.begin();, +, + verify(full, never()).begin();, + }, +, + @Test, +++
[+++ b/integration/recyclerview/build.gradle, +apply plugin: 'com.android.library', +, +repositories {, + mavenCentral(), +}, +, +dependencies {, + compile project(':glide'), + compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}", + compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}", +}, +, +android {, + compileSdkVersion COMPILE_SDK_VERSION as int, + buildToolsVersion BUILD_TOOLS_VERSION as String, +, + defaultConfig {, + minSdkVersion MIN_SDK_VERSION as int, + targetSdkVersion TARGET_SDK_VERSION as int, +, + versionCode VERSION_CODE as int, + versionName VERSION_NAME as String, + }, +, + compileOptions {, + sourceCompatibility JavaVersion.VERSION_1_7, + targetCompatibility JavaVersion.VERSION_1_7, + }, +}, +, +apply from: "$rootProject.projectDir/scripts/upload.gradle", +++ b/integration/recyclerview/build.gradle, +apply plugin: 'com.android.library', +, +repositories {, + mavenCentral(), +}, +, +dependencies {, + compile project(':glide'), +
[+++ b/library/AndroidManifest.xml, + android:versionCode="3", + android:versionName="2.0.1" >]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + if (!result.mkdirs() && (!result.exists() || !result.isDirectory())) {, + throw new IllegalStateException("Cannot create cache directory structure for " + result);, + }, + register(int.class, ParcelFileDescriptor.class, new FileDescriptorResourceLoader.Factory());, + register(int.class, InputStream.class, new StreamResourceLoader.Factory());, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + if (!result.mkdirs() && (!result.exists() || !result.isDirectory())) {, + throw new IllegalStateException("Cannot create cache directory structure for " + result);, + }, + register(int.class, ParcelFileDescriptor.class, new FileDescriptorResourceLoader.Factory());, + register(int.class, InputStream.class, new StreamResourceLoader.Factory());, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + return new GenericTypeRequest(model);, + private GenericTypeRequest(A model) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + if (!result.mkdirs() && (!result.exists() || !result.isDirectory())) {, + throw new IllegalStateException("Cannot create cache directory structure for "
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + if (sourceWidth >= 0 && sourceHeight >= 0, + && fixBitmapToRequestedDimensions && isKitKatOrGreater) {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Unable to determine dimensions for: " + imageType, + + " with target [" + targetWidth + "x" + targetHeight + "]");, + }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + if (sourceWidth >= 0 && sourceHeight >= 0, + && fixBitmapToRequestedDimensions && isKitKatOrGreater) {, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Unable to determine dimensions for: " + imageType, + + " with target [" + targetWidth + "x" + targetHeight + "]");, + }, +++ b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java, +
[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.resize.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.resize.cache.DiskCache;, +import com.bumptech.glide.resize.cache.MemoryCache;, +import com.bumptech.glide.resize.load.MultiTransformation;, +import com.bumptech.glide.resize.request.BitmapRequestBuilder;, +import com.bumptech.glide.resize.request.Request;, +import com.bumptech.glide.resize.request.ThumbnailRequestCoordinator;, +import com.bumptech.glide.resize.target.ImageViewTarget;, +import com.bumptech.glide.resize.target.Target;, +import com.bumptech.glide.resize.target.ViewTarget;, +import java.util.List;, + * A singleton to present a simple static interface for building requests with {@link RequestBuilder} and maintaining, + * an {@link ImageManager} and it's {@link BitmapPool}, {@link DiskCache} and {@link MemoryCache}., + /**, + * Returns false if the {@link Glide} singleton has not yet been created and can therefore be setup using, + * {@link #setup(GlideBuilder)}., + *, + * @see #setup(GlideBuilder), + */, + /**, + * Creates the {@link Glide} singleton
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, + public RequestOptions override(int width, int height) {, + public RequestOptions override(int size) {]
[+++ b/library/build.gradle, +apply plugin: 'findbugs', +findbugs {, + toolVersion = "2.0.3", +}, +, +afterEvaluate {, + findbugsTestDebug {, + enabled = false, + }, +, + task findbugs(type: FindBugs, dependsOn: assembleDebug) {, +, + description 'Run findbugs', + group 'verification', +, + classes = fileTree('build/intermediates/classes/debug/'), + source = fileTree('src/main/java'), + classpath = files(project.configurations.compile.asPath), +, + effort = 'max', +, + excludeFilter = file("findbugs-exclude.xml"), +, + reports {, + xml.enabled = false, + html.enabled = true, + }, + }, + check.doLast {, + tasks.getByName("findbugs").execute(), + }, +}, +++ b/library/build.gradle, +apply plugin: 'findbugs', +findbugs {, + toolVersion = "2.0.3", +},
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/load/CacheLoader.java, +package com.bumptech.glide.load;, +, +import android.util.Log;, +import com.bumptech.glide.load.engine.Resource;, +import com.bumptech.glide.load.engine.cache.DiskCache;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +public class CacheLoader {, + private static final String TAG = "CacheLoader";, + private DiskCache diskCache;, +, + public CacheLoader(DiskCache diskCache) {, + this.diskCache = diskCache;, + }, +, + public <Z> Resource<Z> load(Key key, ResourceDecoder<InputStream, Z> decoder, int width, int height) {, + Resource<Z> result = null;, + InputStream fromCache = diskCache.get(key);, + if (fromCache != null) {, + try {, + result = decoder.decode(fromCache, width, height);, + } catch (IOException
[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.resource.ResourceFetcher;, +import com.bumptech.glide.load.model.GlideUrl;, +import com.bumptech.glide.load.model.GenericLoaderFactory;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.model.ModelLoaderFactory;, +import com.bumptech.glide.load.model.stream.StreamModelLoader;, +import com.bumptech.glide.load.engine.EngineBuilder;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.engine.cache.DiskCache;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.request.Request;, +import com.bumptech.glide.request.target.Target;, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.resource.ResourceFetcher;, +import com.bumptech.glide.load.model.GlideUrl;, +import com.bumptech.glide.load.model.GenericLoaderFactory;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.model.ModelLoaderFactory;, +import com.bumptech.glide.load.model.stream.StreamModelLoader;, +import com.bumptech.glide.load.engine.EngineBuilder;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.engine.cache.DiskCache;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.request.Request;, +import com.bumptech.glide.request.target.Target;, +++ b/library/robolectric/src/com/bumptech/glide/MetadataTest.java, +package com.bumptech.glide;, +, +import com.bumptech.glide.Metadata;, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.DecodeFormat;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class MetadataTest {, +, + @Test(expected = NullPointerException.class), + public void testNullPriorityThrows() {, + new Metadata(null, DecodeFormat.ALWAYS_ARGB_8888);, + }, +, + @Test(expected = NullPointerException.class), + public void testNullDecodeFormatThrows()
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, +import com.bumptech.glide.load.resource.bitmap.ExifInterfaceImageHeaderParser;, + // Right now we're only using this parser for HEIF images, which are only supported on OMR1+., + // If we need this for other file types, we should consider removing this restriction., + // Note that order here matters. We want to check the ExifInterface parser first for orientation, + // and then fall back to DefaultImageHeaderParser for other fields., + if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {, + registry.register(new ExifInterfaceImageHeaderParser());, + }, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, +import com.bumptech.glide.load.resource.bitmap.ExifInterfaceImageHeaderParser;, + // Right now we're only using this parser for HEIF images, which are
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, + validateAnnotatedNonNull(executableElement);, + validateNewGlideTypeAnnotations(executableElement);, + private void validateNewGlideTypeAnnotations(ExecutableElement executableElement) {, + validateAnnotatedNonNull(executableElement);, + }, +, + private void validateAnnotatedNonNull(ExecutableElement executableElement) {, + Set<String> annotationNames =, + FluentIterable.from(executableElement.getAnnotationMirrors()), + .transform(new Function<AnnotationMirror, String>() {, + @Override, + public String apply(AnnotationMirror input) {, + return input.getAnnotationType().asElement().toString();, + }, + }), + .toSet();, + if (!annotationNames.contains("android.support.annotation.NonNull")) {, + processingEnvironment.getMessager().printMessage(, + Kind.WARNING,, + executableElement.getEnclosingElement() + "#" + executableElement.getSimpleName(), + + " is missing the @NonNull annotation,", + + " please add it to ensure that your extension methods are always returning non-null", + + " values");, + }, + }, +, +++
[+++ b/samples/flickr/res/layout/main.xml, +<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android", + android:layout_width="fill_parent", + android:layout_height="fill_parent">, + <LinearLayout, + <LinearLayout, + android:layout_margin="10dp", + android:orientation="horizontal">, + <EditText, + android:id="@+id/search_text", + android:layout_width="0dp", + android:layout_height="wrap_content", + android:layout_marginRight="10dp", + android:layout_weight="1", + android:cursorVisible="true", + android:textCursorDrawable="@null", + android:textSize="16sp", + android:singleLine="true", + android:inputType="text", + android:imeOptions="actionSearch" />, + <!-- android:background="@drawable/stretch_field_comments" /> -->, + <Button, + android:id="@+id/search", + android:layout_width="wrap_content", + android:minWidth="50dp", + android:layout_height="40dp", + android:text="@string/search" />, + </LinearLayout>, + android:layout_marginLeft="10dp", + android:layout_marginRight="10dp", + <LinearLayout, + android:id="@+id/searching", + android:layout_width="wrap_content", + android:layout_height="wrap_content", + android:visibility="invisible", + android:layout_gravity="center", + android:gravity="center", + android:orientation="vertical">, + <TextView, + android:id="@+id/search_term", + android:layout_width="wrap_content", + android:layout_height="wrap_content", + android:gravity="center", + android:textSize="16sp", + android:layout_marginBottom="10dp"/>, + <ProgressBar, + android:layout_width="wrap_content",
[+++ b/build.gradle, + // Imgur uses generated code from dagger that has warnings., + if ("gifencoder" != project.getName() && "imgur" != project.getName()) {, +++ b/build.gradle, + // Imgur uses generated code from dagger that has warnings., + if ("gifencoder" != project.getName() && "imgur" != project.getName()) {, +++ b/gradle.properties, +VOLLEY_VERSION=1.1.0, +ANDROID_GRADLE_VERSION=3.2.1, +DAGGER_VERSION=2.15, +ROBOLECTRIC_VERSION=4.1, +COMPILE_SDK_VERSION=28, +++ b/build.gradle, + // Imgur uses generated code from dagger that has warnings., + if ("gifencoder" != project.getName() && "imgur" != project.getName()) {, +++ b/gradle.properties, +VOLLEY_VERSION=1.1.0, +ANDROID_GRADLE_VERSION=3.2.1, +DAGGER_VERSION=2.15, +ROBOLECTRIC_VERSION=4.1, +COMPILE_SDK_VERSION=28, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.request.BaseRequestOptions;, + * RequestBuilder#apply(BaseRequestOptions)} will override defaults, +++ b/build.gradle, + // Imgur uses
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + .append(Uri.class, Uri.class, new UnitModelLoader.Factory<Uri>()), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + .append(Uri.class, Uri.class, new UnitModelLoader.Factory<Uri>()), +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java, + * @see #getDrawable(Context, int, Theme), + */, + public static Drawable getDrawable(Context context, @DrawableRes int id) {, + return getDrawable(context, id, /*theme=*/ null);, + }, +, + /**, + *, + * @param theme Used instead of the {@link Theme} returned from the given {@link Context} if, + * non-null when loading the {@link Drawable}., +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + .append(Uri.class, Uri.class, new UnitModelLoader.Factory<Uri>()), +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java, + * @see #getDrawable(Context, int, Theme), + */, + public static Drawable getDrawable(Context context, @DrawableRes int id) {,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + initGlide(context);, + private static void initGlide(Context context) {, + glide = builder.createGlide(applicationContext);]
[+++ b/.travis.yml, +script: 'travis_retry ./gradlew build', +before_cache:, + - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock, + - $HOME/.gradle/caches/, + - $HOME/.gradle/wrapper/, +++ b/.travis.yml, +script: 'travis_retry ./gradlew build', +before_cache:, + - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock, + - $HOME/.gradle/caches/, + - $HOME/.gradle/wrapper/, +++ b/gradle.properties]
[+++ b/build.gradle, + maxViolations = 0, + diffMaxViolations = 0, +++ b/build.gradle, + maxViolations = 0, + diffMaxViolations = 0, +++ b/gradle.properties, +VIOLATIONS_PLUGIN_VERSION=1.8]
[+++ b/library/src/main/java/com/bumptech/glide/load/data/BufferedOutputStream.java, +package com.bumptech.glide.load.data;, +, +import android.support.annotation.NonNull;, +import android.support.annotation.VisibleForTesting;, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +import java.io.IOException;, +import java.io.OutputStream;, +, +/**, + * An {@link OutputStream} implementation that recycles and re-uses {@code byte[]}s using the, + * provided {@link ArrayPool}., + */, +public final class BufferedOutputStream extends OutputStream {, + @NonNull, + private final OutputStream out;, + private byte[] buffer;, + private ArrayPool arrayPool;, + private int index;, +, + public BufferedOutputStream(@NonNull OutputStream out, @NonNull ArrayPool arrayPool) {, + this(out, arrayPool, ArrayPool.STANDARD_BUFFER_SIZE_BYTES);, + }, +, + @VisibleForTesting, + BufferedOutputStream(@NonNull OutputStream out, ArrayPool arrayPool, int bufferSize) {, + this.out = out;, + this.arrayPool =
[+++ b/gradle.properties, +VERSION_NAME=4.7.0-SNAPSHOT, +VERSION_MINOR=7]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + // The area used by the graphic must be restored to the background color., + int downsampledIH = previousFrame.ih / sampleSize;, + int downsampledIY = previousFrame.iy / sampleSize;, + int downsampledIW = previousFrame.iw / sampleSize;, + int downsampledIX = previousFrame.ix / sampleSize;, + int topLeft = downsampledIY * downsampledWidth + downsampledIX;, + int bottomLeft = topLeft + downsampledIH * downsampledWidth;, + for (int left = topLeft; left < bottomLeft; left += downsampledWidth) {, + int right = left + downsampledIW;, + for (int pointer = left; pointer < right; pointer++) {, + dest[pointer] = c;, +
[+++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java, +import android.annotation.SuppressLint;, + // Permissions are checked in the factory instead., + @SuppressLint("MissingPermission")]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java, +import android.graphics.Bitmap.Config;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, + byte[] data = asPng(toCompress);, + byte[] data = asJpeg(toCompress);, + byte[] data = asWebp(toCompress);, +, + @Test, + public void load_withSmallerWideGamutInPool_decodesBitmap() {, + BitmapPool bitmapPool = Glide.get(context).getBitmapPool();, + Bitmap toPut = Bitmap.createBitmap(300, 298, Config.RGBA_F16);, + bitmapPool.put(toPut);, + // Add a second Bitmap to account for the InputStream decode., + bitmapPool.put(Bitmap.createBitmap(toPut));, +, + Bitmap wideGamut = Bitmap.createBitmap(300, 300, Config.RGBA_F16);, + byte[] data = asPng(wideGamut);, + Bitmap bitmap =, + concurrency.get(, + Glide.with(context), + .asBitmap(), + .load(data), + .submit());, + assertThat(bitmap).isNotNull();, + }, +, + private static byte[] asJpeg(Bitmap bitmap) {, + return toByteArray(bitmap,
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + thumbnailBuilder.requestOptions);]
[+++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, + // If the request has completed previously, there's no need to restart both the full and the, + // thumb, we can just restart the full., + if (!full.isComplete() && !thumb.isRunning()) {, +++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, + // If the request has completed previously, there's no need to restart both the full and the, + // thumb, we can just restart the full., + if (!full.isComplete() && !thumb.isRunning()) {, +++ b/library/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java, + public void begin_whenFullIsComplete_startsFull() {, + when(full.isComplete()).thenReturn(true);, +, + coordinator.begin();, +, + verify(full).begin();, + }, +, + @Test, + public void begin_whenFullIsComplete_doesNotBeginThumb() {, + when(full.isComplete()).thenReturn(true);, +, +
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNulls;, +import com.squareup.javapoet.ClassName;, + boolean noNonNull = true;, + for (ClassName nonNull : nonNulls()) {, + if (annotationNames.contains(nonNull.reflectionName())) {, + noNonNull = false;, + break;, + }, + }, + if (noNonNull) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNulls;, +import com.squareup.javapoet.ClassName;, + boolean noNonNull = true;, + for (ClassName nonNull : nonNulls()) {, + if (annotationNames.contains(nonNull.reflectionName())) {, + noNonNull = false;, + break;, + }, + }, + if (noNonNull) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +import java.util.Arrays;, + private static final ClassName JETBRAINS_NOTNULL_ANNOTATION =, + ClassName.get("org.jetbrains.annotations", "NotNull");, + static List<ClassName> nonNulls() {, + return Arrays.asList(NONNULL_ANNOTATION, JETBRAINS_NOTNULL_ANNOTATION);, + }, +]
[+++ b/library/src/main/java/com/bumptech/glide/util/LruCache.java, + * Returns the number of entries stored in cache., + */, + protected int getCount() {, + return cache.size();, + }, +, + /**]
[+++ b/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java, +import com.bumptech.glide.gifdecoder.test.TestUtil;, +@Config(manifest = Config.NONE, emulateSdk = 18), +++ b/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java, +import com.bumptech.glide.gifdecoder.test.TestUtil;, +@Config(manifest = Config.NONE, emulateSdk = 18), +++ b/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifHeaderParserTest.java, +import com.bumptech.glide.gifdecoder.test.TestUtil;, +++ b/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java, +import com.bumptech.glide.gifdecoder.test.TestUtil;, +@Config(manifest = Config.NONE, emulateSdk = 18), +++ b/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifHeaderParserTest.java, +import com.bumptech.glide.gifdecoder.test.TestUtil;, +++ /dev/null, +++ b/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java, +import com.bumptech.glide.gifdecoder.test.TestUtil;, +@Config(manifest = Config.NONE, emulateSdk = 18), +++ b/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifHeaderParserTest.java, +import com.bumptech.glide.gifdecoder.test.TestUtil;, +++ /dev/null, +++ b/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/test/TestUtil.java, +package com.bumptech.glide.gifdecoder.test;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +, +/**, + * Utility methods for GifDecoder tests., + */, +public final class TestUtil {, +, + private TestUtil() {, + // Utility class., + }, +, + private static InputStream
[+++ b/gradle.properties, +VERSION_NAME=3.4.0, +++ b/gradle.properties, +VERSION_NAME=3.4.0, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.1.0, +++ b/gradle.properties, +VERSION_NAME=3.4.0, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.1.0, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.1.0]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + * Generates a new implementation of a AppGlideModule that calls all included LibraryGlideModules, + * and the original AppGlideModule., + * made or classes registered in LibraryGlideModules., + * android.util.Log.d("Glide", "Discovered LibraryGlideModule from annotation:", + * + "com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule");, + * new com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule(), + TypeSpec generate(TypeElement appGlideModule, Set<String> libraryGlideModuleClassNames) {, + appGlideModuleClassName, libraryGlideModuleClassNames, excludedGlideModuleClassNames);, + generateRegisterComponents(libraryGlideModuleClassNames, excludedGlideModuleClassNames);, + private MethodSpec generateRegisterComponents(Set<String> libraryGlideModuleClassNames,, + for (String glideModule : libraryGlideModuleClassNames) {, + Set<String> libraryGlideModuleClassNames, Set<String> excludedGlideModuleClassNames) {, + for (String glideModule : libraryGlideModuleClassNames) {, + "AppGlideModule excludes LibraryGlideModule from annotation: " + moduleClassName);, + "Discovered LibraryGlideModule from annotation: "
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +import com.squareup.javapoet.AnnotationSpec;, +import javax.lang.model.element.AnnotationMirror;, +, + for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, + builder.addAnnotation(AnnotationSpec.get(mirror));, + }, +]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java, + /**, + * An integer indicating the frame option used to retrieve a target frame., + *, + * <p>This option will be ignored if {@link #TARGET_FRAME} is not set or is set to, + * {@link #DEFAULT_FRAME}., + *, + * @see MediaMetadataRetriever#getFrameAtTime(long, int), + */, + public static final Option<Integer> FRAME_OPTION = Option.disk(, + "com.bumptech.glide.load.resource.bitmap.VideoBitmapDecode.FrameOption",, + null /*defaultValue*/,, + new Option.CacheKeyUpdater<Integer>() {, + private final ByteBuffer buffer = ByteBuffer.allocate(Integer.SIZE / Byte.SIZE);, + @Override, + public void update(byte[] keyBytes, Integer value, MessageDigest messageDigest) {, + if (value == null) {, + return;, + }, +
[+++ b/README.md, +[![Build Status](https://travis-ci.org/bumptech/glide.svg?branch=master)](https://travis-ci.org/bumptech/glide), +Glide is a fast and efficient open source media management framework for Android that wraps media decoding, memory and, +disk caching, and resource pooling into a simple and easy to use interface. Glide supports fetching, decoding, and, +displaying video stills, images, and animated GIFs. Glide includes a flexible api that allows developers to plug in, +to almost any network stack. By default Glide uses a custom HttpUrlConnection based stack, but also includes utility, +libraries plug in to Google's Volley project or Square's OkHttp library instead., +You can download a jar from GitHub's [release page](https://github.com/bumptech/glide/releases)., +,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, +import com.bumptech.glide.load.resource.bitmap.ExifInterfaceImageHeaderParser;, + // Right now we're only using this parser for HEIF images, which are only supported on OMR1+., + // If we need this for other file types, we should consider removing this restriction., + // Note that order here matters. We want to check the ExifInterface parser first for orientation, + // and then fall back to DefaultImageHeaderParser for other fields., + if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {, + registry.register(new ExifInterfaceImageHeaderParser());, + }, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, +import com.bumptech.glide.load.resource.bitmap.ExifInterfaceImageHeaderParser;, + // Right now we're only using this parser for HEIF images, which are
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +import com.bumptech.glide.util.LogTime;, + long startTime = LogTime.getLogTime();, + requestedWidth, requestedHeight, startTime);, + BitmapFactory.Options options, Bitmap result, int requestedWidth, int requestedHeight,, + long startTime) {, + + ", thread: " + Thread.currentThread().getName(), + + ", duration: " + LogTime.getElapsedMillis(startTime));, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +import com.bumptech.glide.util.LogTime;, + long startTime = LogTime.getLogTime();, + requestedWidth, requestedHeight, startTime);, + BitmapFactory.Options options, Bitmap result, int requestedWidth, int requestedHeight,, + long startTime) {, + + ", thread: " + Thread.currentThread().getName(), + + ", duration: " + LogTime.getElapsedMillis(startTime));, +++ b/library/src/main/java/com/bumptech/glide/util/LogTime.java, + return SystemClock.uptimeMillis();]
[+++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class), +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class), +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class), +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class), +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class), +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, +import org.robolectric.annotation.Config;, +@Config(manifest = Config.NONE, emulateSdk = 18), +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class), +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class), +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, +import org.robolectric.annotation.Config;, +@Config(manifest = Config.NONE, emulateSdk = 18), +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java,
[+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, +import android.os.Build;, +public class OkHttpStreamFetcher implements DataFetcher<InputStream>,, + okhttp3.Callback {, + private DataCallback<? super InputStream> callback;, + this.callback = callback;, + if (Build.VERSION.SDK_INT != Build.VERSION_CODES.O) {, + call.enqueue(this);, + } else {, + try {, + // Calling execute instead of enqueue is a workaround for #2355, where okhttp throws a, + // ClassCastException on O., + onResponse(call, call.execute());, + } catch (IOException e) {, + onFailure(call, e);, + } catch (ClassCastException e) {, + // It's not clear that this catch is necessary, the error may only occur even on O if, + // enqueue is
[+++ b/gradle.properties, +org.gradle.configureondemand=false, +ANDROID_GRADLE_VERSION=3.1.3, +MOCKITO_ANDROID_VERSION=2.21.0]
[+++ b/samples/gallery/build.gradle, + compile(project(':integration:recyclerview')) {, + transitive = false, + }, +++ b/samples/gallery/build.gradle, + compile(project(':integration:recyclerview')) {, + transitive = false, + }, +++ b/samples/gallery/lint.xml, + <issue id="IconMissingDensityFolder" severity="ignore"/>, +++ b/samples/gallery/build.gradle, + compile(project(':integration:recyclerview')) {, + transitive = false, + }, +++ b/samples/gallery/lint.xml, + <issue id="IconMissingDensityFolder" severity="ignore"/>, +++ b/samples/gallery/src/main/AndroidManifest.xml, +, + <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />, +, +, + <application, + android:label="@string/app_name", + android:icon="@android:drawable/sym_def_app_icon", +++ b/samples/gallery/build.gradle, + compile(project(':integration:recyclerview')) {, + transitive = false, + }, +++ b/samples/gallery/lint.xml, + <issue id="IconMissingDensityFolder" severity="ignore"/>, +++ b/samples/gallery/src/main/AndroidManifest.xml, +, + <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />, +, +, + <application, + android:label="@string/app_name", + android:icon="@android:drawable/sym_def_app_icon", +++ b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/HorizontalGalleryFragment.java, +package com.bumptech.glide.samples.gallery;, +, +import android.os.Bundle;,
[+++ b/gradle.properties, +OK_HTTP_VERSION=3.0.1, +++ b/gradle.properties, +OK_HTTP_VERSION=3.0.1, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + public void onFailure(Call call, IOException e) {, + public void onResponse(Call call, Response response) throws IOException {]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +package com.bumptech.glide;, +, +import static com.google.common.truth.Truth.assertThat;, +, +import android.content.Context;, +import android.content.res.Resources;, +import android.graphics.Bitmap;, +import android.graphics.BitmapFactory;, +import android.graphics.drawable.BitmapDrawable;, +import android.net.Uri;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import com.google.common.io.ByteStreams;, +import java.io.BufferedOutputStream;, +import java.io.File;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.util.concurrent.TimeUnit;, +import org.junit.Before;, +import org.junit.Ignore;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.MockitoAnnotations;, +, +@RunWith(AndroidJUnit4.class), +public class AsBytesTest {, + @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();, + private final ConcurrencyHelper concurrency = new ConcurrencyHelper();, +, + private Context context;, +, + @Before, + public void setUp() throws IOException {,
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.view.ViewGroup;, +import com.bumptech.glide.loader.model.FileLoader;, +import com.bumptech.glide.loader.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.model.ModelLoader;, +import com.bumptech.glide.loader.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.model.ResourceLoader;, +import com.bumptech.glide.loader.model.StringLoader;, +import com.bumptech.glide.loader.model.UriLoader;, +import com.bumptech.glide.loader.stream.StreamLoader;, +import com.bumptech.glide.loader.transformation.CenterCrop;, +import com.bumptech.glide.loader.transformation.FitCenter;, +import com.bumptech.glide.loader.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.transformation.None;, +import com.bumptech.glide.loader.transformation.TransformationLoader;, +import com.bumptech.glide.presenter.target.Target;, +, +import java.util.Map;, +import java.util.WeakHashMap;, + * A singleton to present a simple static interface for Glide {@link Glide.Request} and to create and manage an, + private final Map<Target, Metadata> metadataTracker = new WeakHashMap<Target, Metadata>();, + * public void onException(Exception e, T model, Target target) {, + loaderFactory.register(File.class, new FileLoader.Factory());, + loaderFactory.register(Integer.class, new
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/PausedRequestsTest.java, +package com.bumptech.glide;, +, +import static com.google.common.truth.Truth.assertThat;, +, +import android.content.Context;, +import android.graphics.Color;, +import android.graphics.drawable.ColorDrawable;, +import android.support.test.InstrumentationRegistry;, +import android.widget.ImageView;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.GlideRequests;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import org.junit.Rule;, +import org.junit.Test;, +, +/**, + * Tests how {@link com.bumptech.glide.request.Request}s behave when the corresponding, + * {@link RequestManager} is paused., + */, +public final class PausedRequestsTest {, + @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();, + private final ConcurrencyHelper concurrency = new ConcurrencyHelper();, + private final Context context = InstrumentationRegistry.getTargetContext();, +, + @SuppressWarnings("unchecked"), + @Test, + public void load_withPlaceHolderSet_requestsPaused_displaysPlaceholder() {, + final ImageView imageView = new ImageView(context);,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapResourceDecoderTest.java, +package com.bumptech.glide.load.resource.gifbitmap;, +, +import android.graphics.Bitmap;, +import android.os.ParcelFileDescriptor;, +import com.bumptech.glide.Resource;, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.model.ImageVideoWrapper;, +import com.bumptech.glide.load.resource.gif.GifData;, +import com.bumptech.glide.load.resource.gif.GifDrawable;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +, +import java.io.ByteArrayInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +, +import static junit.framework.Assert.assertEquals;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +@RunWith(RobolectricTestRunner.class), +public class GifBitmapResourceDecoderTest {, + private ResourceDecoder<ImageVideoWrapper, Bitmap> bitmapDecoder;, + private ResourceDecoder<InputStream, GifData> gifDecoder;, + private GifBitmapWrapperResourceDecoder decoder;, +, + @SuppressWarnings("unchecked"), + @Before, + public void setUp() {, +
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + .url(url.toStringUrl()), + return url.getCacheKey();, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + .url(url.toStringUrl()), + return url.getCacheKey();, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + String stringUrl = url.toStringUrl();, + return url.getCacheKey();, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + .url(url.toStringUrl()), + return url.getCacheKey();, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + String stringUrl = url.toStringUrl();, + return url.getCacheKey();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, + when(glideUrl.getCacheKey()).thenReturn(expected);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + .url(url.toStringUrl()), + return url.getCacheKey();, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + String stringUrl = url.toStringUrl();, + return url.getCacheKey();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, + when(glideUrl.getCacheKey()).thenReturn(expected);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/GlideUrlTest.java, + assertEquals(expected, glideUrl.toStringUrl());, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + .url(url.toStringUrl()), + return url.getCacheKey();, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, + String stringUrl = url.toStringUrl();, + return url.getCacheKey();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, + when(glideUrl.getCacheKey()).thenReturn(expected);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/GlideUrlTest.java, + assertEquals(expected, glideUrl.toStringUrl());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java,
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import android.support.annotation.DrawableRes;, + * Returns a request builder that uses the, + * {@link com.bumptech.glide.load.model.ModelLoaderFactory} currently registered or, + * {@link com.bumptech.glide.load.engine.DiskCacheStrategy#RESOURCE} for release builds., + *, + * <p>This method will load non-{@link android.graphics.Bitmap} resources like, + * {@link android.graphics.drawable.VectorDrawable}s, but most common options including, + * default {@link com.bumptech.glide.load.Transformation}s will not <em>NOT</em> work on, + * non-{@link android.graphics.Bitmap} resources. As a result, functionality for, + * non-{@link android.graphics.Bitmap} resources may be limited., + public RequestBuilder<TranscodeType> load(@DrawableRes @Nullable Integer resourceId) {]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java]
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16" />]
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + responseBody = response.body();, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + responseBody = response.body();, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + responseBody = response.body();, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + responseBody = response.body();, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + responseBody = response.body();, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + private MemoryCategory memoryCategory = MemoryCategory.NORMAL;, + *, + * @return the previous MemoryCategory used by Glide., + public MemoryCategory setMemoryCategory(MemoryCategory memoryCategory) {, + MemoryCategory oldCategory = this.memoryCategory;, + this.memoryCategory = memoryCategory;, + return oldCategory;]
[+++ b/.gitignore, +library/build/*, +++ b/.gitignore, +library/build/*, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, +++ b/.gitignore, +library/build/*, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, +++ /dev/null, +++ b/.gitignore, +library/build/*, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, +++ /dev/null, +++ b/LICENSE, +Copyright 2013 Bump Technologies, Inc. All rights reserved., +THIS
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java, + // Calling setDataSource is expensive so avoid doing so unless we're actually called., + // For non-videos this isn't any cheaper, but for videos it safes the redundant call and, + // 50-100ms., + } catch (RuntimeException e) {, + // MediaMetadataRetriever APIs throw generic runtime exceptions when given invalid data., + throw new IOException(e);]
[+++ b/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java, +package com.bumptech.glide.util;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.assertEquals;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import java.io.ByteArrayInputStream;, +import java.io.IOException;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE), +public class MarkEnforcingInputStreamTest {, + // An arbitrary number > 0., + private static final int MARK_LIMIT = 5;, + // Another arbitrary number > MARK_LIMIT., + private static final int DATA_SIZE = MARK_LIMIT + 1;, +, + @Test, + public void testReturnsByte_whenReadsUpToMarkLimit_withMoreBytesAvailable() throws IOException {, + MarkEnforcingInputStream is = new MarkEnforcingInputStream(, + new ByteArrayInputStream(new byte[DATA_SIZE]));, + is.mark(MARK_LIMIT);, +, + for (int i = 0;
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, + * @see #centerInside()]
[+++ b/CONTRIBUTING.md, +Contributions of all types are welcome., +We use GitHub as our bug and feature tracker both for code and for other aspects of the library (documentation, the wiki, etc.)., +, +The best way to ask general questions is to send an email to our [mailing list][2], or join [#glide-library on freenode.org][3]., +, +When in doubt, file an issue. We'd rather close a few duplicate issues than let a problem go unnoticed., +Similarly if you support a particular feature request, feel free to let us know by commenting on the issue., +To file a new issue, please use
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/.gitmodules, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/.gitmodules, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/Makefile, + cd third_party/volley/volley && ant clean && ant jar, + cp third_party/volley/volley/bin/volley.jar library/libs, +++ b/.gitmodules, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/Makefile, + cd third_party/volley/volley && ant clean && ant jar, + cp third_party/volley/volley/bin/volley.jar library/libs, +++ /dev/null, +++ b/.gitmodules, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/Makefile, + cd third_party/volley/volley && ant clean && ant jar, + cp third_party/volley/volley/bin/volley.jar library/libs, +++ /dev/null, +++ b/third_party/volley/LICENSE,
[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import java.io.File;, +import java.util.HashMap;, +import java.util.Map;, +, + Map<Class<?>, List<? extends Class<?>>> dataClassToResourceClasses = new HashMap<>();, + Map<Class<?>, List<Class<Transcode>>> resourceClassToTranscodeClasses = new HashMap<>();, +, +, + dataClassToResourceClasses.put(dataClass, registeredResourceClasses);, +, +, + List<Class<Transcode>> registeredTranscodeClasses =, + transcoderRegistry.getTranscodeClasses(registeredResourceClass, transcodeClass);, +, + resourceClassToTranscodeClasses.put(registeredResourceClass, registeredTranscodeClasses);, +, +, + // Throw the exception before populating the cache in the hopes that a subsequent attempt will, + // succeed and only one request will randomly fail. This is really debugging logic that should, + // go away when we find the actual cause for b/73882030., + if (result.isEmpty() && !File.class.equals(transcodeClass)) {, + if
[+++ b/library/src/androidTest/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java, + public void testDoesNotClearThumbOnFullComplete_whenThumbIsComplete() {, + when(thumb.isComplete()).thenReturn(true);, + coordinator.onRequestSuccess(full);, + verify(thumb, never()).clear();, + }, +, + @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java, + public void testDoesNotClearThumbOnFullComplete_whenThumbIsComplete() {, + when(thumb.isComplete()).thenReturn(true);, + coordinator.onRequestSuccess(full);, + verify(thumb, never()).clear();, + }, +, + @Test, +++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, + // Clearing the thumb is not necessarily safe if the thumb is being displayed in the Target,, + // as a layer in a cross fade for example. The only way we know the thumb is not being, + // displayed and is therefore safe to clear is if the thumb request has not yet completed., + if
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +package com.bumptech.glide.load.resource.gif;, +, +import static android.support.test.InstrumentationRegistry.getTargetContext;, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.fail;, +import static org.junit.Assume.assumeTrue;, +, +import android.content.Context;, +import android.graphics.drawable.Drawable;, +import android.os.Build;, +import android.os.Handler;, +import android.os.Looper;, +import android.support.annotation.Nullable;, +import android.support.test.runner.AndroidJUnit4;, +import android.view.View;, +import android.view.WindowManager;, +import android.view.WindowManager.LayoutParams;, +import android.widget.ImageView;, +import com.bumptech.glide.load.DataSource;, +import com.bumptech.glide.load.engine.GlideException;, +import com.bumptech.glide.load.resource.gif.GifDrawable.GifState;, +import com.bumptech.glide.load.resource.gif.GifFrameLoader.OnEveryFrameListener;, +import com.bumptech.glide.request.RequestListener;, +import com.bumptech.glide.request.target.Target;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import com.bumptech.glide.util.Preconditions;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeUnit;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TestName;, +import org.junit.runner.RunWith;, +, +@RunWith(AndroidJUnit4.class), +public class GifDrawableTest {, + @Rule public TestName testName = new TestName();, + @Rule public TearDownGlide tearDownGlide = new TearDownGlide();, +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java, + * and height. To avoid upscaling, use {@link #AT_LEAST}, {@link #AT_MOST} or, + * {@link #CENTER_INSIDE}., + public static final DownsampleStrategy FIT_CENTER = new FitCenter();, + * and height. To avoid upscaling, use {@link #AT_LEAST}, {@link #AT_MOST},, + * or {@link #CENTER_INSIDE}., + *, + * <p>This method will not upscale.</p>, + public static final DownsampleStrategy CENTER_INSIDE = new CenterInside();, + private static class FitCenter extends DownsampleStrategy {, + private static class CenterInside extends DownsampleStrategy {, + FIT_CENTER.getScaleFactor(sourceWidth, sourceHeight, requestedWidth, requestedHeight));, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java, + * and height. To avoid upscaling, use {@link #AT_LEAST}, {@link #AT_MOST} or,
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/request/transition/BitmapContainerTransitionFactory.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/request/transition/BitmapContainerTransitionFactory.java, +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/request/transition/BitmapContainerTransitionFactory.java, +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifFrame.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/request/transition/BitmapContainerTransitionFactory.java, +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifFrame.java, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeader.java]
[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + //$CASES-OMITTED$, + default:, + // silently ignore, + break;, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + //$CASES-OMITTED$, + default:, + // silently ignore, + break;, +++ b/library/src/main/java/com/bumptech/glide/load/Key.java, + void updateDiskCacheKey(MessageDigest messageDigest) throws UnsupportedEncodingException;, + /**, + * {@inheritDoc}, + */, + boolean equals(Object o);, +, + /**, + * {@inheritDoc}, + */, + int hashCode();, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + //$CASES-OMITTED$, + default:, + // silently ignore, + break;, +++ b/library/src/main/java/com/bumptech/glide/load/Key.java, + void updateDiskCacheKey(MessageDigest messageDigest) throws UnsupportedEncodingException;, + /**, + * {@inheritDoc}, + */, + boolean equals(Object o);, +, + /**, + * {@inheritDoc},
[+++ b/README.md, +ProGuard, +Depending on your ProGuard (DexGuard) config and usage, you may need to include the following lines in your proguard.cfg (see [Configuration wiki](https://github.com/bumptech/glide/wiki/Configuration#keeping-a-glidemodule) for more details):, +-keepresourcexmlelements manifest/application/meta-data@value=GlideModule, +* **Dave Smith** for the [GIF decoder gist][9] Glide's GIF decoder is based on., +++ b/README.md, +ProGuard, +Depending on your ProGuard (DexGuard) config and usage, you may need to include the following lines in your proguard.cfg (see [Configuration wiki](https://github.com/bumptech/glide/wiki/Configuration#keeping-a-glidemodule) for more details):, +-keepresourcexmlelements manifest/application/meta-data@value=GlideModule, +* **Dave Smith** for the [GIF decoder gist][9] Glide's GIF decoder is based on., +++ b/build.gradle, +++ b/README.md, +ProGuard, +Depending on your ProGuard (DexGuard) config
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, + public final CHILD onlyRetrieveFromCache(boolean flag) {, + return clone().onlyRetrieveFromCache(flag);]
[+++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +import com.bumptech.glide.request.transition.TransitionFactory;, +import com.bumptech.glide.request.transition.ViewPropertyTransition;, +, + /**, + * Removes any existing animation put on the builder., + *, + * @see GenericTransitionOptions#dontTransition(), + */, +, + /**, + * Returns a typed {@link GenericTransitionOptions} object that uses the given view animation., + *, + * @see GenericTransitionOptions#transition(int), + */, + public static <TranscodeType> GenericTransitionOptions<TranscodeType> with(, + int viewAnimationId) {, + return new GenericTransitionOptions<TranscodeType>().transition(viewAnimationId);, + }, +, + /**, + * Returns a typed {@link GenericTransitionOptions} object that uses the given animator., + *, + * @see GenericTransitionOptions#transition(ViewPropertyTransition.Animator), + */, + public static <TranscodeType> GenericTransitionOptions<TranscodeType> with(, +
[+++ b/README.md, + compile 'com.github.bumptech.glide:glide:4.0.0-RC0', + compile 'com.android.support:support-v4:25.3.1', + <version>4.0.0-RC0</version>, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:4.0.0-RC0', + compile 'com.android.support:support-v4:25.3.1', + <version>4.0.0-RC0</version>, +++ b/gradle.properties, +VERSION_NAME=4.0.0-RC0]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java, + * Caches remote data with both {@link #DATA} and {@link #RESOURCE}, and local data with, + * {@link #RESOURCE} only., + return dataSource == DataSource.REMOTE;]
[+++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +++ b/library/libs/hamcrest-core-1.3.jar, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +++ b/library/libs/hamcrest-core-1.3.jar, +++ b/library/libs/junit-4.11.jar, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +++ b/library/libs/hamcrest-core-1.3.jar, +++ b/library/libs/junit-4.11.jar, +++ b/library/libs/mockito-all-1.9.5.jar, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +++ b/library/libs/hamcrest-core-1.3.jar, +++ b/library/libs/junit-4.11.jar, +++ b/library/libs/mockito-all-1.9.5.jar, +++ b/library/libs/robolectric-2.3-jar-with-dependencies.jar, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +++ b/library/libs/hamcrest-core-1.3.jar, +++ b/library/libs/junit-4.11.jar, +++ b/library/libs/mockito-all-1.9.5.jar, +++ b/library/libs/robolectric-2.3-jar-with-dependencies.jar, +++ b/library/pom.xml, +, + <parent>, + <groupId>org.sonatype.oss</groupId>, + <artifactId>oss-parent</artifactId>, + <version>7</version>, + </parent>, +, + <groupId>android.support</groupId>, + <artifactId>compatibility-v4</artifactId>, + <version>19.1.0</version>, + </dependency>, +
[+++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, +import java.util.Arrays;, +import java.util.Collection;, + * A transformation that applies one or more transformations in iteration order to a resource., + private Collection<? extends Transformation<T>> transformations;, + @SafeVarargs, + this.transformations = Arrays.asList(transformations);, + public MultiTransformation(Collection<? extends Transformation<T>> transformationList) {, + this.transformations = transformationList;, + for (Transformation<T> transformation : transformations) {]
[+++ b/library/src/main/java/com/bumptech/glide/GeneratedAppGlideModule.java, + * Allows {@link AppGlideModule}s to exclude {@link com.bumptech.glide.annotation.GlideModule}s to, + * ease the migration from {@link com.bumptech.glide.annotation.GlideModule}s to Glide's annotation, + * processing system and optionally provides a, + * {@link com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory} impl.]
[+++ b/samples/gallery/build.gradle, +apply plugin: 'com.android.application', +, +dependencies {, + compile project(':library'), + compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}", + compile "com.android.support:recyclerview-v7:21.0.3", +}, +, +android {, + compileSdkVersion 21, + buildToolsVersion "21.1.2", +, + defaultConfig {, + applicationId 'com.bumptech.glide.samples.gallery', + minSdkVersion 19, + targetSdkVersion 21, + versionCode 1, + versionName "1.0", + }, +, + compileOptions {, + sourceCompatibility JavaVersion.VERSION_1_7, + targetCompatibility JavaVersion.VERSION_1_7, + }, +}, +, +task run(type: Exec, dependsOn: 'installDebug') {, + description 'Installs the APK and runs the main activity: "gradlew :samples:???:run"', + commandLine "${android.sdkDirectory}/platform-tools/adb", 'shell', 'am', 'start', '-n', 'com.bumptech.glide.samples.flickr/.FlickrSearchActivity', +}, +++ b/samples/gallery/build.gradle, +apply plugin: 'com.android.application', +, +dependencies {, + compile
[+++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, + return request == full && !isAnyRequestComplete();, +++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, + return request == full && !isAnyRequestComplete();, +++ b/library/src/test/java/com/bumptech/glide/request/GenericRequestTest.java, + public void testCallsEngineWithOverrideWidthAndHeightIfSet() {, + @Test, + public void testDoesNotSetErrorDrawableIfRequestCoordinatorDoesntAllowIt() {, + harness.errorDrawable = new ColorDrawable(Color.RED);, + GenericRequest<Object, Object, Object, Object> request = harness.getRequest();, + when(harness.requestCoordinator.canSetPlaceholder(any(Request.class))).thenReturn(false);, + request.onException(new IOException("Test"));, +, + verify(harness.target, never()).setPlaceholder(any(Drawable.class));, + }, +, +++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, + return request == full && !isAnyRequestComplete();, +++ b/library/src/test/java/com/bumptech/glide/request/GenericRequestTest.java, + public void testCallsEngineWithOverrideWidthAndHeightIfSet() {, + @Test, + public void testDoesNotSetErrorDrawableIfRequestCoordinatorDoesntAllowIt() {, + harness.errorDrawable = new ColorDrawable(Color.RED);, + GenericRequest<Object, Object, Object, Object> request = harness.getRequest();, + when(harness.requestCoordinator.canSetPlaceholder(any(Request.class))).thenReturn(false);, + request.onException(new IOException("Test"));, +,
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + case CENTER_INSIDE:, + requestOptions.optionalCenterInside(context);, + break;, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + case CENTER_INSIDE:, + requestOptions.optionalCenterInside(context);, + break;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterInside.java, +package com.bumptech.glide.load.resource.bitmap;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.support.annotation.NonNull;, +, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +, +import java.security.MessageDigest;, +, +/**, + * Returns the image with its original size if its dimensions match or are smaller, + * than the target's, couple with {@link android.widget.ImageView.ScaleType#CENTER_INSIDE}, + * in order to center it in Target. If not, then it is scaled so that one of the dimensions of, + * the image will be equal to the given dimension and the other will
[+++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/src/test/resources/exif-orientation-examples"], + path = library/src/test/resources/exif-orientation-examples, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/LICENSE, +Copyright 2014 Google, Inc. All rights reserved., +THIS SOFTWARE IS PROVIDED BY GOOGLE, INC. ``AS IS'' AND ANY EXPRESS OR IMPLIED, +FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GOOGLE, INC. OR, +or implied, of Google, Inc., +++ b/.gitignore, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +samples/flickr/target, +++
[+++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, + request.clear();, +++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, + request.clear();, +++ b/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java, + public void runRequest_withAllRequestsPaused_doesNotStartRequest() {, + FakeRequest request = new FakeRequest();, + tracker.pauseAllRequests();, + tracker.runRequest(request);, +, + assertThat(request.isRunning()).isFalse();, + }, +, + @Test]
[+++ b/library/src/com/bumptech/glide/resize/ImageManager.java, + final String key = task.getId();, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, + final String key = task.getId();, +++ b/library/src/com/bumptech/glide/resize/SafeKeyGenerator.java, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, + final String key = task.getId();, +++ b/library/src/com/bumptech/glide/resize/SafeKeyGenerator.java, +++ b/library/src/com/bumptech/glide/resize/cache/DiskLruCacheWrapper.java, +import com.bumptech.glide.resize.SafeKeyGenerator;, + private final SafeKeyGenerator safeKeyGenerator;, + this.safeKeyGenerator = new SafeKeyGenerator();, + String safeKey = safeKeyGenerator.getSafeKey(key);, + final DiskLruCache.Snapshot snapshot = diskLruCache.get(safeKey);, + String safeKey = safeKeyGenerator.getSafeKey(key);, + DiskLruCache.Editor editor = diskLruCache.edit(safeKey);, + String safeKey = safeKeyGenerator.getSafeKey(key);, + diskLruCache.remove(safeKey);, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, + final String key = task.getId();, +++ b/library/src/com/bumptech/glide/resize/SafeKeyGenerator.java, +++ b/library/src/com/bumptech/glide/resize/cache/DiskLruCacheWrapper.java, +import com.bumptech.glide.resize.SafeKeyGenerator;, + private final SafeKeyGenerator safeKeyGenerator;, + this.safeKeyGenerator = new SafeKeyGenerator();, + String safeKey = safeKeyGenerator.getSafeKey(key);,
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, + <component name="NewModuleRootManager" inherit-compiler-output="false">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java]
[+++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, + * Scheduled to be removed in Glide 4.0., +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, + * Scheduled to be removed in Glide 4.0., +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + * {@link #animate(com.bumptech.glide.request.animation.ViewPropertyAnimation.Animator)}. Scheduled to be removed in, + * Glide 4.0., +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, + * Scheduled to be removed in Glide 4.0., +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + * {@link #animate(com.bumptech.glide.request.animation.ViewPropertyAnimation.Animator)}. Scheduled to be removed in, + * Glide 4.0., +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + * @deprecated Use {@link #loadFromMediaStore(android.net.Uri)},, + * {@link com.bumptech.glide.signature.MediaStoreSignature}, and, + * {@link com.bumptech.glide.DrawableRequestBuilder#signature(com.bumptech.glide.load.Key)} instead. Scheduled to be, + * removed in Glide 4.0., + @Deprecated, + * {@link com.bumptech.glide.GenericRequestBuilder#signature(com.bumptech.glide.load.Key)} instead. Scheduled to
[+++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java, +import android.util.Log;, +, + private static final String TAG = "StreamEncoder";, + int read;, + } catch (IOException e) {, + if (Log.isLoggable(TAG, Log.ERROR)) {, + Log.v(TAG, "Failed to encode data onto the OutputStream", e);, + }, + return false;, + } finally {, + ByteArrayPool.get().releaseBytes(buffer);, + }, +++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java, +import android.util.Log;, +, + private static final String TAG = "StreamEncoder";, + int read;, + } catch (IOException e) {, + if (Log.isLoggable(TAG, Log.ERROR)) {, + Log.v(TAG, "Failed to encode data onto the OutputStream", e);, + }, + return false;, + } finally {, + ByteArrayPool.get().releaseBytes(buffer);, +
[+++ b/build.gradle, + // TODO(#2730): Remove this after updating to the latest support library., + disable "GradleDependency", +++ b/build.gradle, + // TODO(#2730): Remove this after updating to the latest support library., + disable "GradleDependency", +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=26.1.0]
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java, + if (result.equals(toTransform)) {, + return resource;, + } else {, + return LazyBitmapDrawableResource.obtain(context, bitmap);]
[+++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +++ b/samples/flickr/ActionBarSherlock, +Subproject commit 90939dc3925ffaaa0de269bbbe1b35e274968ea1, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +++ b/samples/flickr/ActionBarSherlock, +Subproject commit 90939dc3925ffaaa0de269bbbe1b35e274968ea1, +++ b/samples/flickr/AndroidManifest.xml, + android:hardwareAccelerated="true", + android:theme="@style/Theme.Sherlock">, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +++ b/samples/flickr/ActionBarSherlock, +Subproject commit 90939dc3925ffaaa0de269bbbe1b35e274968ea1, +++ b/samples/flickr/AndroidManifest.xml, + android:hardwareAccelerated="true", + android:theme="@style/Theme.Sherlock">, +++ b/samples/flickr/libs/android-support-v4.jar, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +++ b/samples/flickr/ActionBarSherlock, +Subproject commit 90939dc3925ffaaa0de269bbbe1b35e274968ea1, +++ b/samples/flickr/AndroidManifest.xml, + android:hardwareAccelerated="true", +
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java, +import static com.google.common.truth.Truth.assertThat;, +import java.util.Map;, + private static final byte[] GIF_HEADER = new byte[] { 0x47, 0x49, 0x46 };, +, + public void testDoesNotHandleStreamIfEnabledButNotAGif() throws IOException {, + Map<String, Object> options = new HashMap<>();, + assertThat(decoder.handles(ByteBuffer.allocate(0), options)).isFalse();, + }, +, + @Test, + public void testHandlesStreamIfContainsGifHeaderAndDisabledIsNotSet() throws IOException {, + Map<String, Object> options = new HashMap<>();, + assertThat(decoder.handles(ByteBuffer.wrap(GIF_HEADER), options)).isTrue();, + }, +, + @Test, + public void testHandlesStreamIfContainsGifHeaderAndDisabledIsFalse() throws IOException {, + Map<String, Object> options = new HashMap<>();, + options.put(ByteBufferGifDecoder.KEY_DISABLE_ANIMATION, false);, + assertThat(decoder.handles(ByteBuffer.wrap(GIF_HEADER), options)).isTrue();, + }, +, + @Test, + public void testDoesNotHandleStreamIfDisabled() throws IOException {, +
[+++ b/samples/flickr/res/layout/flick_photo_list.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<ListView xmlns:android="http://schemas.android.com/apk/res/android", + android:id="@+id/flickr_photo_list", + android:layout_width="fill_parent", + android:layout_height="fill_parent", + android:cacheColorHint="#00000000", + android:scrollingCache="false">, +</ListView>, +, +++ b/samples/flickr/res/layout/flick_photo_list.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<ListView xmlns:android="http://schemas.android.com/apk/res/android", + android:id="@+id/flickr_photo_list", + android:layout_width="fill_parent", + android:layout_height="fill_parent", + android:cacheColorHint="#00000000", + android:scrollingCache="false">, +</ListView>, +, +++ b/samples/flickr/res/layout/flick_photo_list_item.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android", + android:orientation="horizontal", + android:layout_width="fill_parent", + android:layout_height="@dimen/flickr_list_item_height", + android:padding="10dp">, + <ImageView, + android:id="@+id/photo_view", + android:layout_width="0dp", + android:layout_height="fill_parent", + android:layout_weight="1", + android:scaleType="center" />, + <TextView, + android:id="@+id/title_view", + android:layout_width="0dp", + android:layout_height="fill_parent", + android:layout_weight="1", + android:layout_margin="10dp", + android:gravity="center", + android:textSize="16sp"/>, +</LinearLayout>, +++ b/samples/flickr/res/layout/flick_photo_list.xml, +<?xml version="1.0" encoding="utf-8"?>, +, +<ListView xmlns:android="http://schemas.android.com/apk/res/android", + android:id="@+id/flickr_photo_list", + android:layout_width="fill_parent", +
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;, + registry = new Registry();, + registry.register(new DefaultImageHeaderParser());, +, + Downsampler downsampler = new Downsampler(registry.getImageHeaderParsers(),, + resources.getDisplayMetrics(), bitmapPool, arrayPool);, + new ByteBufferGifDecoder(context, registry.getImageHeaderParsers(), bitmapPool, arrayPool);, +, + registry.register(ByteBuffer.class, new ByteBufferEncoder()), + new StreamGifDecoder(registry.getImageHeaderParsers(), byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;, + registry = new Registry();, + registry.register(new DefaultImageHeaderParser());, +, + Downsampler downsampler = new Downsampler(registry.getImageHeaderParsers(),, + resources.getDisplayMetrics(), bitmapPool, arrayPool);, + new ByteBufferGifDecoder(context, registry.getImageHeaderParsers(), bitmapPool, arrayPool);, +, + registry.register(ByteBuffer.class, new ByteBufferEncoder()), + new StreamGifDecoder(registry.getImageHeaderParsers(), byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import com.bumptech.glide.load.ImageHeaderParser;, +import com.bumptech.glide.provider.ImageHeaderParserRegistry;, + private final ImageHeaderParserRegistry imageHeaderParserRegistry;, + this.imageHeaderParserRegistry = new ImageHeaderParserRegistry();, + public Registry register(ImageHeaderParser parser)
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + long contentLength = responseBody.contentLength();, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + long contentLength = responseBody.contentLength();, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + long contentLength = responseBody.contentLength();]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java, +package com.bumptech.glide.load.resource.transcode;, +, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +import android.graphics.Bitmap;, +import android.graphics.drawable.BitmapDrawable;, +, +import com.bumptech.glide.load.engine.Resource;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.tests.Util;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +public class BitmapDrawableTranscoderTest {, + private BitmapDrawableTranscoder transcoder;, +, + @Before, + public void setUp() {, + transcoder = new BitmapDrawableTranscoder(Robolectric.application.getResources(), mock(BitmapPool.class));, + }, +, + @Test, + public void testHasValidId() {, + Util.assertClassHasValidId(BitmapDrawableTranscoder.class, transcoder.getId());, + }, +, + @Test, + public
[+++ b/.gitignore, +library/install_dependencies/maven-android-sdk-deployer, +++ b/.gitignore, +library/install_dependencies/maven-android-sdk-deployer, +++ b/library/install_dependencies/install-android-deps.sh, +#!/bin/sh, +# This script installs the necessary Android dependencies to compile Glide and run, +# the test suite., +# , +# Pre-requisites: , +# Using the android sdk tool, under Android 4.4.2 (API 19), install:, +# SDK Platform, +# Glass Development Kit Preview, +# , +, +git clone https://github.com/mosabua/maven-android-sdk-deployer.git, +cd maven-android-sdk-deployer , +mvn clean install -N && cd platforms && mvn clean install -N && cd android-19 && mvn clean install || { , + echo 'Failed to install 4.4 SDK, install relevant packages in android SDK first'; , + exit
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java, +import org.junit.Before;, + private static final String URL = "https://imgs.xkcd.com/comics/mc_hammer_age.png";, + @Before, + public void setUp() {, + MockModelLoader.mock(URL, getData());, + }, +, + .load(URL), + .load(URL), + .load(URL), + .load(URL)]
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, + * Returns a {@link RequestOptions} object with {@link #diskCacheStrategy(DiskCacheStrategy)} set.]
[+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + this.width = maybeApplySizeMultiplier(width, sizeMultiplier);, + this.height = maybeApplySizeMultiplier(height, sizeMultiplier);, + private static int maybeApplySizeMultiplier(int size, float sizeMultiplier) {, + return size == Target.SIZE_ORIGINAL ? size : Math.round(sizeMultiplier * size);, + }, +]
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import com.bumptech.glide.request.ErrorRequestCoordinator;, + @Nullable private RequestBuilder<TranscodeType> errorBuilder;, + * Sets a {@link RequestListener} to monitor the resource load. It's best to create a single, + * Sets a {@link RequestBuilder} that is built and run iff the load started by this, + * {@link RequestBuilder} fails., + *, + * <p>If this {@link RequestBuilder} uses a thumbnail that succeeds the given error, + * {@link RequestBuilder} will be started anyway if the non-thumbnail request fails., + *, + * <p>Recursive calls to {@link #error(RequestBuilder)} as well as calls to, + * {@link #thumbnail(float)} and {@link #thumbnail(RequestBuilder)} are
[+++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, + if (!thumb.isComplete()) {, + }]
[+++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, + *, + *, + * Returns a non null list of all models that need to be loaded for the list to display adapter items in, + * positions between {@code start} and {@code end}., + *, + * <p>, + * </p>, + *, + * Returns a non null {@link com.bumptech.glide.GenericRequestBuilder} for a given item. Must exactly match, + * the request used to load the resource in the list., + *, + * <p>, + * </p>, + *, + *, + * Returns the size of the view in the list where
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + .addModifiers(Modifier.PUBLIC)]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +import android.support.test.InstrumentationRegistry;, +import com.bumptech.glide.test.ConcurrencyHelper;, + private final ConcurrencyHelper concurrencyHelper = new ConcurrencyHelper();, + context = InstrumentationRegistry.getTargetContext();, + concurrencyHelper.get(, + .submit());, + concurrencyHelper.get(, + .submit(10, 10));, + concurrencyHelper.get(, + .submit());, + concurrencyHelper.get(, + .submit(10, 10));, + concurrencyHelper.get(, + .submit());, + concurrencyHelper.get(, + .submit(10, 10));, + concurrencyHelper.get(, + .submit());, + concurrencyHelper.get(, + .submit(10, 10));, + final GifDrawable gifDrawable =, + concurrencyHelper.get(, + GlideApp.with(context), + .submit(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL));, +, + concurrencyHelper.runOnMainThread(, + ConcurrencyHelper.waitOnLatch(waitForGifFrame);, + concurrencyHelper.runOnMainThread(, + new Runnable() {, +, + concurrencyHelper.loadOnMainThread(, + GlideApp.with(context), + .load(gifDrawable), + .override(Target.SIZE_ORIGINAL),, + imageView);, + WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams();, + WindowManager windowManager =, +++
[+++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Failed to encode data onto the OutputStream", e);, +++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Failed to encode data onto the OutputStream", e);, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Format Error Reading Color Table", e);, + }, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "Error Reading Block n: " + n + " count: " + count + " blockSize: " + blockSize, e);, + }]
[+++ b/samples/contacturi/lint.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<lint>, + <issue id="GoogleAppIndexingWarning" severity="ignore"/>, +</lint>, +++ b/samples/contacturi/lint.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<lint>, + <issue id="GoogleAppIndexingWarning" severity="ignore"/>, +</lint>, +++ b/samples/contacturi/src/main/AndroidManifest.xml, + android:allowBackup="false", +++ b/samples/contacturi/lint.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<lint>, + <issue id="GoogleAppIndexingWarning" severity="ignore"/>, +</lint>, +++ b/samples/contacturi/src/main/AndroidManifest.xml, + android:allowBackup="false", +++ b/samples/flickr/lint.xml, + <issue id="GoogleAppIndexingWarning" severity="ignore"/>, +++ b/samples/contacturi/lint.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<lint>, + <issue id="GoogleAppIndexingWarning" severity="ignore"/>, +</lint>, +++ b/samples/contacturi/src/main/AndroidManifest.xml, + android:allowBackup="false", +++ b/samples/flickr/lint.xml, + <issue id="GoogleAppIndexingWarning" severity="ignore"/>, +++ b/samples/gallery/lint.xml, + <issue id="GoogleAppIndexingWarning" severity="ignore"/>, +++ b/samples/contacturi/lint.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<lint>, + <issue id="GoogleAppIndexingWarning" severity="ignore"/>, +</lint>, +++ b/samples/contacturi/src/main/AndroidManifest.xml, + android:allowBackup="false", +++ b/samples/flickr/lint.xml, + <issue id="GoogleAppIndexingWarning" severity="ignore"/>, +++ b/samples/gallery/lint.xml, + <issue
[+++ b/library/res/values/ids.xml, + <item type="id" name="glide_metadata" />, +++ b/library/res/values/ids.xml, + <item type="id" name="glide_metadata" />, +++ b/library/src/com/bumptech/glide/Glide.java, + * for use with {@link Glide.Request} and/or as an easily accessible singleton, + * Set the {@link RequestQueue} to use with {@link Glide.Request}. Replaces the current, + * {@link ImageManager} with custom options for use with {@link com.bumptech.glide.Glide.Request} and/or as an, + * easily accessible singleton., + * Set the {@link ImageManager} to use with {@link Glide.Request} Replaces the current, + * Set the {@link ModelLoader} for this view., + * Note - You can use this method to set a {@link
[+++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, +import java.util.ArrayList;, +import java.util.List;, + private List<Request> getSnapshot() {, + // toArray creates a new ArrayList internally and this way we can guarantee entries will not be, + // null. See #322., + List<Request> result = new ArrayList<Request>(requests.size());, + // We could also just call new ArrayList<Request>(requests) but that actually creates two new ArrayLists because, + // that constructor in ArrayList calls toArray()., + for (Request request : requests) {, + result.add(request);, + }, + return result;]
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java]
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +public class OkHttpGlideModule implements com.bumptech.glide.module.GlideModule {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +public class OkHttpGlideModule implements com.bumptech.glide.module.GlideModule {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java, + *, + * @deprecated Prefer the okhttp3 version instead., +@Deprecated, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +public class OkHttpGlideModule implements com.bumptech.glide.module.GlideModule {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java, + *, + * @deprecated Prefer the okhttp3 version instead., +@Deprecated, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java, +public class OkHttpGlideModule implements com.bumptech.glide.module.GlideModule {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +public class OkHttpGlideModule implements com.bumptech.glide.module.GlideModule {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java, + *, + * @deprecated Prefer the okhttp3 version instead., +@Deprecated, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java, +public class OkHttpGlideModule implements com.bumptech.glide.module.GlideModule {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java, +@SuppressWarnings("deprecation"), +public class VolleyGlideModule implements com.bumptech.glide.module.GlideModule {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +public
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.manager.ConnectivityMonitorFactory;, + private final ConnectivityMonitorFactory connectivityMonitorFactory;, + Context context,, + ConnectivityMonitorFactory connectivityMonitorFactory,, + this.connectivityMonitorFactory = connectivityMonitorFactory;, + ConnectivityMonitorFactory getConnectivityMonitorFactory() {, + return connectivityMonitorFactory;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.manager.ConnectivityMonitorFactory;, + private final ConnectivityMonitorFactory connectivityMonitorFactory;, + Context context,, + ConnectivityMonitorFactory connectivityMonitorFactory,, + this.connectivityMonitorFactory = connectivityMonitorFactory;, + ConnectivityMonitorFactory getConnectivityMonitorFactory() {, + return connectivityMonitorFactory;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.manager.ConnectivityMonitorFactory;, +import com.bumptech.glide.manager.DefaultConnectivityMonitorFactory;, + private ConnectivityMonitorFactory connectivityMonitorFactory;, + * Sets the {@link com.bumptech.glide.manager.ConnectivityMonitorFactory}, + * to use to notify {@link com.bumptech.glide.RequestManager} of connectivity events., + * If not set {@link com.bumptech.glide.manager.DefaultConnectivityMonitorFactory} would be used., + *, + *
[+++ b/library/src/main/java/com/bumptech/glide/request/target/BaseTarget.java, +public abstract class BaseTarget<Z> implements Target<Z> {, +++ b/library/src/main/java/com/bumptech/glide/request/target/BaseTarget.java, +public abstract class BaseTarget<Z> implements Target<Z> {, +++ b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java, +public abstract class SimpleTarget<Z> extends BaseTarget<Z> {]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, + // Generates the String and list of arguments to pass in when calling this method or super., + // IE centerCrop(context) creates methodLiterals="%L" and methodArgs=[centerCrop, context]., + List<Object> methodArgs = new ArrayList<>();, + methodArgs.add(element.getSimpleName().toString());, + String methodLiterals = "";, + methodLiterals += "$L, ";, + methodArgs.add(variable.getSimpleName().toString());, + methodLiterals = methodLiterals.substring(0, methodLiterals.length() - 2);, + builder.beginControlFlow("if (isAutoCloneEnabled())"), + .addStatement(, + "return clone().$N(" + methodLiterals + ")", methodArgs.toArray(new Object[0])), + .endControlFlow();, +, + // Add the correct super() call., + if (overrideType == OVERRIDE_EXTEND) {, + String callSuper = "super.$L(" + methodLiterals + ")";, + builder.addStatement(callSuper, methodArgs.toArray(new Object[0])),
[+++ b/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java, +package com.bumptech.glide.request.target;, +, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, +import android.view.View;, +import android.widget.ImageView;, +import com.bumptech.glide.request.Request;, +import com.bumptech.glide.request.transition.Transition;, +import com.bumptech.glide.util.Util;, +, +/**, + * A base {@link Target} for loading resources ({@link android.graphics.Bitmap}, {@link Drawable}, + * etc) that are used outside of {@link android.view.View}s., + *, + * <p>If you're loading a resource into a {@link View}, use, + * {@link com.bumptech.glide.RequestBuilder#into(ImageView)}, a subclass of {@link ImageViewTarget},, + * or {@link CustomViewTarget}. Using this class to load resources into {@link View}s can prevent, + * Glide from correctly cancelling any previous loads, which may result
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableToBitmapConverter.java, +import com.bumptech.glide.load.engine.Resource;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;, + private static final BitmapPool NO_BITMAP_POOL = new BitmapPoolAdapter();, + static Resource<Bitmap> convert(BitmapPool bitmapPool, Drawable drawable, int width, int height) {, + boolean isRecycleable = false;, + // We created and drew to the Bitmap, so it's safe for us to recycle or re-use., + isRecycleable = true;, + BitmapPool toUse = isRecycleable ? bitmapPool : NO_BITMAP_POOL;, + return BitmapResource.obtain(result, toUse);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableToBitmapConverter.java, +import com.bumptech.glide.load.engine.Resource;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;, + private static final BitmapPool NO_BITMAP_POOL = new BitmapPoolAdapter();, + static Resource<Bitmap> convert(BitmapPool bitmapPool, Drawable drawable, int width, int height) {, + boolean isRecycleable = false;,
[+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/AppModuleWithMultipleExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/AppModuleWithMultipleExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/AppModuleWithMultipleExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/AppModuleWithMultipleExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/AppModuleWithMultipleExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedRequestManagerFactory.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/AppModuleWithMultipleExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedRequestManagerFactory.java, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/AppModuleWithMultipleExcludes.java, +++
[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + private int overrideHeight = -1;, + private int overrideWidth = -1;, + * Overrides the {@link Target}'s width and height with the given values. This is useful almost exclusively for, + * thumbnails, and should only be used when you both need a very specific sized image and when it is impossible or, + * impractical to return that size from {@link Target#getSize(Target.SizeReadyCallback)}., + *, + * @param width The width to use to load the resource., + * @param height The height to use to load the resource., + * @return This RequestBuilder., + */,
[+++ b/.travis.yml, +script: 'travis_retry ./gradlew build --parallel']
[+++ b/library/src/com/bumptech/photos/resize/BitmapTracker.java, +import com.bumptech.photos.resize.bitmap_recycle.ConcurrentBitmapPool;, + private final ConcurrentBitmapPool target;, + public BitmapTracker(ConcurrentBitmapPool target, int bitmapsPerSize) {, +++ b/library/src/com/bumptech/photos/resize/BitmapTracker.java, +import com.bumptech.photos.resize.bitmap_recycle.ConcurrentBitmapPool;, + private final ConcurrentBitmapPool target;, + public BitmapTracker(ConcurrentBitmapPool target, int bitmapsPerSize) {, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.bitmap_recycle.ConcurrentBitmapPool;, + private final ConcurrentBitmapPool bitmapCache;, + bitmapCache = new ConcurrentBitmapPool(options.maxPerSize);, +++ b/library/src/com/bumptech/photos/resize/BitmapTracker.java, +import com.bumptech.photos.resize.bitmap_recycle.ConcurrentBitmapPool;, + private final ConcurrentBitmapPool target;, + public BitmapTracker(ConcurrentBitmapPool target, int bitmapsPerSize) {, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.bitmap_recycle.ConcurrentBitmapPool;, + private final ConcurrentBitmapPool bitmapCache;, + bitmapCache = new ConcurrentBitmapPool(options.maxPerSize);, +++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, +import com.bumptech.photos.resize.bitmap_recycle.ConcurrentBitmapPool;, +, + private final ConcurrentBitmapPool bitmapPool;, +, + public ImageResizer(ConcurrentBitmapPool bitmapPool) {, + public ImageResizer(ConcurrentBitmapPool bitmapPool, BitmapFactory.Options defaultOptions){, +++
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, + * Glide.with(fragment/activity).load()} to avoid object churn.]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100, gifHeader,, + new byte[0], firstFrame);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100, gifHeader,, + new byte[0], firstFrame);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameManagerTest.java, + new GifFrameManager(Robolectric.application, mock(GifDecoder.class), null, 100, 100);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100, gifHeader,, + new byte[0], firstFrame);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameManagerTest.java, + new GifFrameManager(Robolectric.application, mock(GifDecoder.class), null, 100, 100);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameModelLoaderTest.java, + public void testFetcherIdIncludesFrameIndex() {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100, gifHeader,, + new byte[0], firstFrame);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameManagerTest.java, + new GifFrameManager(Robolectric.application, mock(GifDecoder.class),
[+++ b/library/findbugs-exclude.xml, + <!-- Re-using the byte array saves allocations, there's no serious risk of mutations. -->, + <Match>, + <Class name="com.bumptech.glide.util.FixedPreloadSizeProvider" />, + <Bug pattern="EI_EXPOSE_REP" />, + </Match>, +, +++ b/library/findbugs-exclude.xml, + <!-- Re-using the byte array saves allocations, there's no serious risk of mutations. -->, + <Match>, + <Class name="com.bumptech.glide.util.FixedPreloadSizeProvider" />, + <Bug pattern="EI_EXPOSE_REP" />, + </Match>, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + context,, + arrayPool,, + registry,, + imageViewTargetFactory,, + defaultRequestOptions,, + defaultTransitionOptions,, + engine,, + logLevel);, +++ b/library/findbugs-exclude.xml, + <!-- Re-using the byte array saves allocations, there's no serious risk of mutations. -->, + <Match>, + <Class
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/UriLoaderTest.java, + private DataFetcher<InputStream> assetUriFetcher;, + @SuppressWarnings("uncecked"), + assetUriFetcher = mock(DataFetcher.class);, +, + @Override, + protected DataFetcher<InputStream> getAssetPathFetcher(Context context, String path) {, + return assetUriFetcher;, + }, + public void testHandlesAssetUris() {, + Uri assetUri = Uri.parse("file:///android_asset/assetName");, + DataFetcher fetcher = loader.getResourceFetcher(assetUri, IMAGE_SIDE, IMAGE_SIDE);, + assertEquals(assetUriFetcher, fetcher);, + }, +, + @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/UriLoaderTest.java, + private DataFetcher<InputStream> assetUriFetcher;, + @SuppressWarnings("uncecked"), + assetUriFetcher = mock(DataFetcher.class);, +, + @Override, + protected DataFetcher<InputStream> getAssetPathFetcher(Context context, String path) {, + return assetUriFetcher;, + }, + public void testHandlesAssetUris() {, + Uri assetUri = Uri.parse("file:///android_asset/assetName");, + DataFetcher fetcher = loader.getResourceFetcher(assetUri, IMAGE_SIDE, IMAGE_SIDE);, +
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.load.HttpException;, + } else {, + callback.onLoadFailed(new HttpException(response.message(), response.code()));, + }, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.load.HttpException;, + } else {, + callback.onLoadFailed(new HttpException(response.message(), response.code()));, + }, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, +import com.bumptech.glide.load.HttpException;, + } else {, + callback.onLoadFailed(new HttpException(response.message(), response.code()));, + }]
[+++ b/.travis.yml, + - build-tools-24.0.2, + - android-24, + - oraclejdk8, +++ b/.travis.yml, + - build-tools-24.0.2, + - android-24, + - oraclejdk8, +++ b/build.gradle, +++ b/.travis.yml, + - build-tools-24.0.2, + - android-24, + - oraclejdk8, +++ b/build.gradle, +++ b/gradle.properties, +SUPPORT_V4_VERSION=24.2.0, +SUPPORT_V7_VERSION=24.2.0, +ANDROID_GRADLE_VERSION=2.1.3, +ROBOLECTRIC_VERSION=3.1.2, +COMPILE_SDK_VERSION=24, +BUILD_TOOLS_VERSION=24.0.2, +TARGET_SDK_VERSION=24, +, +org.gradle.jvmargs=-Xmx2048M, +++ b/.travis.yml, + - build-tools-24.0.2, + - android-24, + - oraclejdk8, +++ b/build.gradle, +++ b/gradle.properties, +SUPPORT_V4_VERSION=24.2.0, +SUPPORT_V7_VERSION=24.2.0, +ANDROID_GRADLE_VERSION=2.1.3, +ROBOLECTRIC_VERSION=3.1.2, +COMPILE_SDK_VERSION=24, +BUILD_TOOLS_VERSION=24.0.2, +TARGET_SDK_VERSION=24, +, +org.gradle.jvmargs=-Xmx2048M, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip, +++ b/.travis.yml, + - build-tools-24.0.2, + - android-24, + - oraclejdk8, +++ b/build.gradle, +++ b/gradle.properties, +SUPPORT_V4_VERSION=24.2.0, +SUPPORT_V7_VERSION=24.2.0, +ANDROID_GRADLE_VERSION=2.1.3, +ROBOLECTRIC_VERSION=3.1.2, +COMPILE_SDK_VERSION=24, +BUILD_TOOLS_VERSION=24.0.2, +TARGET_SDK_VERSION=24, +, +org.gradle.jvmargs=-Xmx2048M,
[+++ b/checkstyle.xml, + <module name="SuppressionFilter">, + <property name="file" value="checkstyle_suppressions.xml" />, + </module>, +, + <module name="JavadocType">, + <property name="scope" value="public"/>, + </module>, +++ b/checkstyle.xml, + <module name="SuppressionFilter">, + <property name="file" value="checkstyle_suppressions.xml" />, + </module>, +, + <module name="JavadocType">, + <property name="scope" value="public"/>, + </module>, +++ b/checkstyle_suppressions.xml, +<?xml version="1.0"?>, +, +<!DOCTYPE suppressions PUBLIC, + "-//Puppy Crawl//DTD Suppressions 1.1//EN", + "http://www.puppycrawl.com/dtds/suppressions_1_1.dtd">, +, +<suppressions>, + <suppress files=".*/library/src/test/.*" checks="[a-zA-Z0-9]*"/>, +</suppressions>, +, +++ b/checkstyle.xml, + <module name="SuppressionFilter">, + <property name="file" value="checkstyle_suppressions.xml" />, + </module>, +, + <module name="JavadocType">, + <property name="scope" value="public"/>, + </module>, +++ b/checkstyle_suppressions.xml, +<?xml version="1.0"?>, +, +<!DOCTYPE suppressions PUBLIC, + "-//Puppy
[+++ b/.travis.yml, + - yes | $ANDROID_HOME/tools/bin/sdkmanager "build-tools;28.0.3" "platforms;android-28"]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java, + Context targetContext = findContextForPackage(source, packageName);, + private Context findContextForPackage(Uri source, String packageName) {, + // Fast path, + if (packageName.equals(context.getPackageName())) {, + return context;, + }, +, + // The parent APK holds the correct context if the resource is located in a split, + if (packageName.contains(context.getPackageName())) {, + return context;, + }, +]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + public void loadGif_withInterlacedTransparentGif_sizeOriginal_succeeds(), + throws ExecutionException, InterruptedException {, + GifDrawable gifDrawable =, + GlideApp.with(context), + .asGif(), + .load(ResourceIds.raw.interlaced_transparent_gif), + .submit(), + .get();, + assertThat(gifDrawable).isNotNull();, + gifDrawable.stop();, + }, +, + @Test, + public void loadGif_withInterlacedTransparentGif_downsampled_succeeds(), + throws ExecutionException, InterruptedException {, + GifDrawable gifDrawable =, + GlideApp.with(context), + .asGif(), + .load(ResourceIds.raw.interlaced_transparent_gif), + .submit(10, 10), + .get();, + assertThat(gifDrawable).isNotNull();, + gifDrawable.stop();, + }, +, + @Test, + public void loadGif_withTransparentGif_sizeOriginal_succeeds(), + throws ExecutionException, InterruptedException {, + GifDrawable gifDrawable =, + GlideApp.with(context), + .asGif(), + .load(ResourceIds.raw.transparent_gif), + .submit(), + .get();, + assertThat(gifDrawable).isNotNull();, + gifDrawable.stop();, + }, +, + @Test,
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + if (request.isEquivalentTo(previous)) {, + // triggering RequestListeners and Targets. If the request is failed, beginning again will, + // restart the request, giving it another chance to complete. If the request is already, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + if (request.isEquivalentTo(previous)) {, + // triggering RequestListeners and Targets. If the request is failed, beginning again will, + // restart the request, giving it another chance to complete. If the request is already, +++ b/library/src/main/java/com/bumptech/glide/load/model/Model.java, +package com.bumptech.glide.load.model;, +, +/**, + * An optional interface that models can implement to enhance control over Glide behaviors., + */, +public interface Model {,
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, + decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, parserPool, decoderPool);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, + decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, parserPool, decoderPool);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + new GifDrawableLoadProvider(context, bitmapPool);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, + decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, parserPool, decoderPool);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + new GifDrawableLoadProvider(context, bitmapPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableLoadProvider.java, + public GifDrawableLoadProvider(Context context, BitmapPool bitmapPool) {, + decoder = new GifResourceDecoder(context, bitmapPool);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, + decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, parserPool, decoderPool);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + new GifDrawableLoadProvider(context, bitmapPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableLoadProvider.java, + public GifDrawableLoadProvider(Context context, BitmapPool bitmapPool) {, + decoder = new GifResourceDecoder(context, bitmapPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java, + this(context, bitmapPool, PARSER_POOL, DECODER_POOL);, + GifResourceDecoder(Context context, BitmapPool
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformation.java]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + /** The initial stage. */, + INITIALIZE,, + stage = getNextStage(Stage.INITIALIZE);, + stage = getNextStage(stage);, + private Stage getNextStage(Stage current) {, + if (current == null) {, + DiskCacheStrategy strategy = requestContext.getDiskCacheStrategy();, + switch (current) {, + case INITIALIZE:, + return strategy.decodeCachedResource(), + ? Stage.RESOURCE_CACHE : getNextStage(Stage.RESOURCE_CACHE);, + return strategy.decodeCachedData(), + ? Stage.DATA_CACHE : getNextStage(Stage.DATA_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + /** The initial stage. */, + INITIALIZE,, + stage = getNextStage(Stage.INITIALIZE);, + stage = getNextStage(stage);, + private Stage getNextStage(Stage current) {, + if (current == null) {, + DiskCacheStrategy strategy = requestContext.getDiskCacheStrategy();, + switch (current) {, + case
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +import com.squareup.javapoet.AnnotationSpec;, + .addAnnotation(, + AnnotationSpec.builder(SuppressWarnings.class), + .addMember("value", "$S", "deprecation"), + .build()), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +import com.squareup.javapoet.AnnotationSpec;, + .addAnnotation(, + AnnotationSpec.builder(SuppressWarnings.class), + .addMember("value", "$S", "deprecation"), + .build()), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, +import com.squareup.javapoet.AnnotationSpec;, + .addAnnotation(, + AnnotationSpec.builder(SuppressWarnings.class), + .addMember("value", "$S", "deprecation"), + .build())]
[+++ b/library/AndroidManifest.xml, + package="com.bumptech.glide", +++ b/library/AndroidManifest.xml, + package="com.bumptech.glide", +++ b/library/src/com/bumptech/glide/loader/image/BaseImageLoader.java, +package com.bumptech.glide.loader.image;, +, +import android.graphics.Bitmap;, +import com.bumptech.glide.loader.opener.StreamOpener;, +, +import java.lang.ref.WeakReference;, +, +, +/**, + * A base class for {@link ImageLoader} that provides some lifecycle methods and prevents memory leaks by only providing, + * subclasses with a weak reference to the calling {@link com.bumptech.glide.presenter.ImagePresenter}., + */, +public abstract class BaseImageLoader implements ImageLoader {, + @Override, + public final Object fetchImage(String id, StreamOpener streamOpener, int width, int height, ImageReadyCallback cb) {, + doFetchImage(id, streamOpener, width, height, new InternalImageReadyCallback(cb, id));, + return cb;, + }, +, + @Override, + public
[+++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, + if (Log.isLoggable(TAG, Log.WARN)) {, + Log.w(TAG, "Failed to write gif data", e);, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, + if (Log.isLoggable(TAG, Log.WARN)) {, + Log.w(TAG, "Failed to write gif data", e);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + private static final String TAG = "OkHttpFetcher";, + if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "OkHttp failed to obtain result", e);, + } else if (Log.isLoggable(TAG, Log.DEBUG)) {, + Log.d(TAG, "OkHttp got error response: " + response.code() + ", " + response.message());, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, + if (Log.isLoggable(TAG, Log.WARN)) {, + Log.w(TAG, "Failed to write gif data", e);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + private static final String TAG = "OkHttpFetcher";,
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, + DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);, + when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);, + transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, + DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);, + when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);, + transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, + engine = new Engine(cache, mock(DiskCache.Factory.class), mock(ExecutorService.class),, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, + DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);, + when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);, + transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, + engine = new Engine(cache, mock(DiskCache.Factory.class), mock(ExecutorService.class),, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.cache.InternalCacheDiskCacheFactory;, + private DiskCache.Factory diskCacheFactory;, + * @deprecated Creating a disk cache directory on the main thread causes strict mode violations, use, + * {@link #setDiskCache(com.bumptech.glide.load.engine.cache.DiskCache.Factory)} instead. Scheduled to be removed, + *
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, + * potentially containing random image data.]
[+++ /dev/null, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, +import com.bumptech.glide.load.engine.Resource;, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +import com.bumptech.glide.load.engine.Resource;, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceEncoder.java, +import com.bumptech.glide.load.engine.Resource;, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceEncoder.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/SkipCache.java, +import com.bumptech.glide.load.engine.Resource;, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceEncoder.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/SkipCache.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, +import com.bumptech.glide.load.engine.Resource;, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceEncoder.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/SkipCache.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, +import com.bumptech.glide.load.engine.Resource;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +++ /dev/null, +++
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;, + private final ArrayPool arrayPool;, + Glide(, + Engine engine,, + MemoryCache memoryCache,, + BitmapPool bitmapPool,, + ArrayPool arrayPool,, + Context context,, + int logLevel,, + RequestOptions defaultRequestOptions) {, + this.arrayPool = arrayPool;, + this.byteArrayPool = new LruByteArrayPool();, + ByteBufferGifDecoder byteBufferGifDecoder =, + new ByteBufferGifDecoder(context, bitmapPool, arrayPool);, + public ArrayPool getArrayPool() {, + return arrayPool;, + }, +, + arrayPool.clearMemory();, + arrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;, + private final ArrayPool arrayPool;, + Glide(, + Engine engine,, + MemoryCache memoryCache,, + BitmapPool bitmapPool,, + ArrayPool arrayPool,, + Context context,, + int logLevel,,
[+++ b/gradle.properties, +OK_HTTP_VERSION=3.9.0]
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java]
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +, +++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, + this(url, Headers.DEFAULT);, + this(url, Headers.DEFAULT);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +, +++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, + this(url, Headers.DEFAULT);, + this(url, Headers.DEFAULT);, +++ b/library/src/main/java/com/bumptech/glide/load/model/Headers.java, + /**, + * An empty Headers object that can be used if users don't want to provide headers., + *, + * @deprecated Use {@link #DEFAULT} instead., + */, + @Deprecated, + * A Headers object containing reasonable defaults that should be used when users don't want, + * to provide their own headers., + */, + Headers DEFAULT = new LazyHeaders.Builder().build();, +,
[+++ b/.travis.yml, +script: 'travis_retry ./gradlew build']
[+++ b/library/src/main/java/com/bumptech/glide/request/target/BaseTarget.java, +import android.support.annotation.Nullable;, + public void setRequest(@Nullable Request request) {, + @Nullable, + public void onLoadCleared(@Nullable Drawable placeholder) {, + public void onLoadStarted(@Nullable Drawable placeholder) {, + public void onLoadFailed(@Nullable Drawable errorDrawable) {]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, + result.add(getExcludedModuleClassFromAnnotationAttribute(clazz, current));, + // We should be able to cast to Attribute.Class rather than use reflection, but there are some, + // compilers that seem to break when we do so. See #2673 for an example., + private static String getExcludedModuleClassFromAnnotationAttribute(, + Element clazz, Object attribute) {, + if (attribute.getClass().getSimpleName().equals("UnresolvedClass")) {, + throw new IllegalArgumentException("Failed to parse @Excludes for: " + clazz, + + ", one or more excluded Modules could not be found at compile time. Ensure that all", + + "excluded Modules are included in your classpath.");, + }, +
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, + <component name="NewModuleRootManager" inherit-compiler-output="false">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + target.setRequest(null);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + target.setRequest(null);, +++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java, + private static boolean isTagUsedAtLeastOnce = false;, + private static Integer tagId = null;, + /**, + * Sets the android resource id to use in conjunction with {@link View#setTag(int, Object)}, + * to store temporary state allowing loads to be automatically cancelled and resources re-used, + * in scrolling lists., + *, + * <p>, + * If no tag id is set, Glide will use {@link View#setTag(Object)}., + * </p>, + *, + * <p>, + * Warning: prior to Android 4.0 tags were stored in a
[+++ b/build.gradle, + gradleVersion = '2.2', +++ b/build.gradle, + gradleVersion = '2.2', +++ b/gradle.properties, +ANDROID_GRADLE_VERSION=1.0.0, +ROBOLECTRIC_GRADLE_VERSION=0.14.0, +++ b/build.gradle, + gradleVersion = '2.2', +++ b/gradle.properties, +ANDROID_GRADLE_VERSION=1.0.0, +ROBOLECTRIC_GRADLE_VERSION=0.14.0, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sat Dec 20 22:55:19 PST 2014, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.2-bin.zip, +++ b/build.gradle, + gradleVersion = '2.2', +++ b/gradle.properties, +ANDROID_GRADLE_VERSION=1.0.0, +ROBOLECTRIC_GRADLE_VERSION=0.14.0, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sat Dec 20 22:55:19 PST 2014, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.2-bin.zip, +++ b/integration/okhttp/build.gradle, +++ b/build.gradle, + gradleVersion = '2.2', +++ b/gradle.properties, +ANDROID_GRADLE_VERSION=1.0.0, +ROBOLECTRIC_GRADLE_VERSION=0.14.0, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sat Dec 20 22:55:19 PST 2014, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.2-bin.zip, +++ b/integration/okhttp/build.gradle, +++ b/integration/volley/build.gradle, +++ b/build.gradle, + gradleVersion = '2.2', +++ b/gradle.properties, +ANDROID_GRADLE_VERSION=1.0.0, +ROBOLECTRIC_GRADLE_VERSION=0.14.0, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sat Dec 20 22:55:19 PST 2014, +distributionUrl=https\://services.gradle.org/distributions/gradle-2.2-bin.zip, +++
[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, +++ b/library/robolectric/src/com/bumptech/glide/request/BitmapRequestTest.java, + private static class MockTarget implements Target<Object> {, + public void onResourceReady(Resource<Object> resource) {, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, + verify(target).onResourceReady(any(Resource.class));, +++ b/library/robolectric/src/com/bumptech/glide/request/BitmapRequestTest.java, + private static class MockTarget implements Target<Object> {, + public void onResourceReady(Resource<Object> resource) {, +++ b/library/src/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.request.target.BitmapImageViewTarget;, + public <Y extends Target<Bitmap>> Y into(Y target) {, + * @return The {@link BitmapImageViewTarget}
[+++ b/library/src/main/java/com/bumptech/glide/manager/ActivityFragmentLifecycle.java, + private final Set<LifecycleListener> lifecycleListeners =, + Collections.newSetFromMap(new WeakHashMap<LifecycleListener, Boolean>());]
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + private static final int BYTES_PER_INTEGER = Integer.SIZE / 8;, + downsampledWidth = header.width / sampleSize;, + downsampledHeight = header.height / sampleSize;, + mainScratch = bitmapProvider.obtainIntArray(downsampledWidth * downsampledHeight);]
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;, + if (size > 0) {, + } else {, + bitmapPool = new BitmapPoolAdapter();, + }, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;, + if (size > 0) {, + } else {, + bitmapPool = new BitmapPoolAdapter();, + }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java, +, + int targetBitmapPoolSize = Math.round(screenSize * builder.bitmapPoolScreens);, +, + if (targetMemoryCacheSize + targetBitmapPoolSize <= availableSize) {, + bitmapPoolSize = targetBitmapPoolSize;, + + (targetMemoryCacheSize + targetBitmapPoolSize > maxSize), +, + /**, + * On Android O+, we use {@link android.graphics.Bitmap.Config#HARDWARE} for all reasonably, + * sized images unless we're creating thumbnails for the first time.
[+++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +, + Class<R> transcodedClass, ResourceTranscoder<Bitmap, R> transcoder) {, + if (streamModelLoader == null && fileDescriptorModelLoader == null) {, + return null;, + }, +, + if (transcoder == null) {, + transcoder = glide.buildTranscoder(Bitmap.class, transcodedClass);, + }, + DataLoadProvider<ImageVideoWrapper, Bitmap> loadProvider = glide.buildDataProvider(ImageVideoWrapper.class,, + Bitmap.class);, + ImageVideoModelLoader<A> modelLoader = new ImageVideoModelLoader<A>(streamModelLoader,, + fileDescriptorModelLoader);, +, + return new FixedLoadProvider<A, ImageVideoWrapper, Bitmap, R>(modelLoader, transcoder, loadProvider);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +, + Class<R> transcodedClass, ResourceTranscoder<Bitmap, R> transcoder) {, + if (streamModelLoader == null && fileDescriptorModelLoader == null) {, + return null;, + }, +, + if (transcoder == null) {, + transcoder
[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, + @NonNull, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java, + @NonNull, + @NonNull, + @NonNull, +
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + ClassName context = ClassName.get("android.content", "Context");, + .addParameter(context, "context"), + .addStatement(, + "super($N, $N ,$N, $N)", "glide", "requestManager", "transcodeClass", "context"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + ClassName context = ClassName.get("android.content", "Context");, + .addParameter(context, "context"), + .addStatement(, + "super($N, $N ,$N, $N)", "glide", "requestManager", "transcodeClass", "context"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java, + private static final ClassName CONTEXT_CLASS_NAME =, + ClassName.get("android.content", "Context");, + .addParameter(CONTEXT_CLASS_NAME, "context"), + "return new $T(glide, lifecycle, treeNode, context)",, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + ClassName context = ClassName.get("android.content", "Context");, + .addParameter(context, "context"), + .addStatement(, + "super($N, $N ,$N, $N)", "glide", "requestManager", "transcodeClass", "context"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java, + private static final ClassName CONTEXT_CLASS_NAME =, + ClassName.get("android.content",
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/project.properties, +target=android-19, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/project.properties, +target=android-19, +++ b/library/tests/project.properties, +target=android-19]
[+++ b/.gitignore, +library/target, +samples/flickr/target, +++ b/.gitignore, +library/target, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/robolectric/src/com/bumptech/glide/resize/load/exif-orientation-examples"], + path = library/robolectric/src/com/bumptech/glide/resize/load/exif-orientation-examples, +++ b/.gitignore, +library/target, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/robolectric/src/com/bumptech/glide/resize/load/exif-orientation-examples"], + path = library/robolectric/src/com/bumptech/glide/resize/load/exif-orientation-examples, +++ b/library/robolectric/libs/hamcrest-core-1.3.jar, +++ b/.gitignore, +library/target, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/robolectric/src/com/bumptech/glide/resize/load/exif-orientation-examples"], + path = library/robolectric/src/com/bumptech/glide/resize/load/exif-orientation-examples, +++ b/library/robolectric/libs/hamcrest-core-1.3.jar, +++ b/library/robolectric/libs/junit-4.11.jar, +++ b/.gitignore, +library/target, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/robolectric/src/com/bumptech/glide/resize/load/exif-orientation-examples"], + path = library/robolectric/src/com/bumptech/glide/resize/load/exif-orientation-examples, +++ b/library/robolectric/libs/hamcrest-core-1.3.jar, +++ b/library/robolectric/libs/junit-4.11.jar, +++ b/library/robolectric/libs/mockito-all-1.9.5.jar, +++ b/.gitignore, +library/target, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/robolectric/src/com/bumptech/glide/resize/load/exif-orientation-examples"], + path = library/robolectric/src/com/bumptech/glide/resize/load/exif-orientation-examples, +++ b/library/robolectric/libs/hamcrest-core-1.3.jar, +++ b/library/robolectric/libs/junit-4.11.jar, +++ b/library/robolectric/libs/mockito-all-1.9.5.jar, +++ b/library/robolectric/libs/robolectric-2.3-jar-with-dependencies.jar, +++ b/.gitignore, +library/target, +samples/flickr/target, +++ b/.gitmodules, +[submodule "library/robolectric/src/com/bumptech/glide/resize/load/exif-orientation-examples"], + path = library/robolectric/src/com/bumptech/glide/resize/load/exif-orientation-examples, +++ b/library/robolectric/libs/hamcrest-core-1.3.jar, +++
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + builder = builder.addAnnotation(AnnotationSpec.get(mirror));, + }, +, + if (methodToOverride.isVarArgs()) {, + builder = builder, + .addModifiers(Modifier.FINAL), + .addAnnotation(SafeVarargs.class);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + builder = builder.addAnnotation(AnnotationSpec.get(mirror));, + }, +, + if (methodToOverride.isVarArgs()) {, + builder = builder, + .addModifiers(Modifier.FINAL), + .addAnnotation(SafeVarargs.class);, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + * <p>Recursive calls to thumbnail are supported., + *, + * <p>Overrides any previous calls to {@link #thumbnail(RequestBuilder)},, + * {@link #thumbnail(float)} and {@link #thumbnail(RequestBuilder[])}., + *, + * @see #thumbnail(float), + * @see #thumbnail(RequestBuilder[]), + *, + * Recursively applies {@link #thumbnail(RequestBuilder)} so that the {@link RequestBuilder}s are, + * loaded as thumbnails
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ /dev/null]
[+++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java, + try {, + } catch (SecurityException e) {, + // See #1405., + if (Log.isLoggable(TAG, Log.WARN)) {, + Log.w(TAG, "Failed to determine connectivity status when connectivity changed", e);, + }, + // Default to true;, + isConnected = true;, + }, + // See #1405, + isConnected = isConnected(context);, +++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java, + try {, + } catch (SecurityException e) {, + // See #1405., + if (Log.isLoggable(TAG, Log.WARN)) {, + Log.w(TAG, "Failed to determine connectivity status when connectivity changed", e);, + }, + // Default to true;, + isConnected = true;, + }, + // See
[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.resource.bytes.BytesResource;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.load.data.DataFetcher;, +import static junit.framework.Assert.fail;, + doAnswer(new CallCallback()).when(target).getSize(any(Target.SizeReadyCallback.class));, + fail("Failed to get response from Volley in time");, + @SuppressWarnings("unchecked"), + Target<File> target = mock(Target.class);, + doAnswer(new CallCallback()).when(target).getSize(any(Target.SizeReadyCallback.class));, +, + DataFetcher<File> dataFetcher = mock(DataFetcher.class);, + when(dataFetcher.loadData(any(Priority.class))).thenReturn(expected);, + .thenReturn(dataFetcher);, + DataFetcher<Z> failFetcher = mock(DataFetcher.class);, + when(failFetcher.loadData(any(Priority.class))).thenThrow(new IOException("test"));, + DataFetcher<InputStream> fetcher = mock(DataFetcher.class);, + when(fetcher.loadData(any(Priority.class))).thenReturn(new ByteArrayInputStream(new byte[0]));, + private static class CallCallback implements Answer<Void> {, + private int width;, + private int height;, +, + public CallCallback() {, + this(100, 100);, + }, +, + public CallCallback(int width, int height) {, + this.width = width;, +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, + return "BitmapEncoder.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, + return "BitmapEncoder.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java, + return "CenterCrop.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, + return "BitmapEncoder.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java, + return "CenterCrop.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java, + return "FitCenter.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, + return "BitmapEncoder.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java, + return "CenterCrop.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java, + return "FitCenter.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageVideoBitmapDecoder.java, + return "ImageVideoBitmapDecoder.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, + return "BitmapEncoder.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java, + return "CenterCrop.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java, + return "FitCenter.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageVideoBitmapDecoder.java, + return "ImageVideoBitmapDecoder.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java, + private static final String ID = "StreamBitmapDecoder.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, + return "BitmapEncoder.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java, + return "CenterCrop.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java, + return "FitCenter.com.bumptech.glide.load.resource.bitmap";, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageVideoBitmapDecoder.java, + return
[+++ b/.gitmodules, +[submodule "samples/flickr/volley"], + path = samples/flickr/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/.gitmodules, +[submodule "samples/flickr/volley"], + path = samples/flickr/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/samples/flickr/project.properties, +android.library.reference.3=volley/, +++ b/.gitmodules, +[submodule "samples/flickr/volley"], + path = samples/flickr/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/samples/flickr/project.properties, +android.library.reference.3=volley/, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrStreamLoader.java, +import com.android.volley.Request;, + private Request current = null;, + current.cancel();, +++ b/.gitmodules, +[submodule "samples/flickr/volley"], + path = samples/flickr/volley, + url = https://android.googlesource.com/platform/frameworks/volley, +++ b/samples/flickr/project.properties, +android.library.reference.3=volley/, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrStreamLoader.java, +import com.android.volley.Request;, + private Request current = null;, + current.cancel();, +++ b/samples/flickr/src/com/bumptech/flickr/api/Api.java, +import com.android.volley.Request;, + public static Api get(Context applicationContext) {, + API = new Api(applicationContext, applicationContext.getResources().getDimensionPixelSize(R.dimen.large_photo_side));, +
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java, +import android.support.annotation.NonNull;, + public Target<T> call() {, + public void onResourceReady(@NonNull T resource,, + @Nullable Transition<? super T> transition) {, + public void getSize(@NonNull SizeReadyCallback cb) {, + public void removeCallback(@NonNull SizeReadyCallback cb) {, + public Target<T> call() {, + public void onResourceReady(@NonNull T resource,, + @Nullable Transition<? super T> transition) {, + public void getSize(@NonNull SizeReadyCallback cb) {, + public void removeCallback(@NonNull SizeReadyCallback cb) {, + public Void call() {, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java, +import android.support.annotation.NonNull;, + public Target<T> call() {, + public void onResourceReady(@NonNull T resource,, + @Nullable Transition<? super T> transition) {, + public void getSize(@NonNull
[+++ b/library/build.gradle, + provided "com.android.support:appcompat-v7:${SUPPORT_V7_VERSION}", +++ b/library/build.gradle, + provided "com.android.support:appcompat-v7:${SUPPORT_V7_VERSION}", +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +import android.support.annotation.DrawableRes;, +import android.support.v7.content.res.AppCompatResources;, + private static boolean shouldCallAppCompatResources = true;, + private Drawable loadDrawable(@DrawableRes int resourceId) {, + if (shouldCallAppCompatResources) {, + return loadDrawableV7(resourceId);, + } else {, + return loadDrawableBase(resourceId);, + }, + }, +, + /**, + * Tries to load the drawable thanks to AppCompatResources.<br>, + * This allows to parse VectorDrawables on legacy devices if the appcompat v7 is in the classpath., + */, + private Drawable loadDrawableV7(@DrawableRes int resourceId) {, + try {, + return AppCompatResources.getDrawable(glideContext, resourceId);, + } catch (NoClassDefFoundError
[+++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, + private String id;, + if (id == null) {, + if (transformations != null) {, + } else {, + for (Transformation transformation : transformationList) {, + sb.append(transformation.getId());, + }, + }, + id = sb.toString();, + }, + return id;, +++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, + private String id;, + if (id == null) {, + if (transformations != null) {, + } else {, + for (Transformation transformation : transformationList) {, + sb.append(transformation.getId());, + }, + }, + id = sb.toString();, + }, + return id;, +++ b/library/src/test/java/com/bumptech/glide/load/MultiTransformationTest.java, +import java.util.ArrayList;, +, + final String expected = firstId
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, + FactoryPools.threadSafe(JOB_POOL_SIZE,, + FactoryPools.threadSafe(, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, + FactoryPools.threadSafe(JOB_POOL_SIZE,, + FactoryPools.threadSafe(, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +import android.support.annotation.GuardedBy;, + private static final Pools.Pool<SingleRequest<?>> POOL = FactoryPools.threadSafe(150,, + @GuardedBy("this"), + public synchronized void onSizeReady(int width, int height) {]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, + private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME =, + "android.support.annotation.VisibleForTesting";, +, + private static final String SUPPRESS_LINT_PACKAGE_NAME =, + "android.annotation";, + private static final String SUPPRESS_LINT_CLASS_NAME =, + "SuppressLint";, +, + TypeElement visibleForTestingType =, + processingEnv, + .getElementUtils(), + .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);, +, + // Suppress a lint warning if we're overriding a VisibleForTesting method., + // See #1977., + if (mirror.getAnnotationType().asElement().equals(visibleForTestingType)) {, + builder.addAnnotation(, + AnnotationSpec.builder(, + ClassName.get(SUPPRESS_LINT_PACKAGE_NAME, SUPPRESS_LINT_CLASS_NAME)), + .addMember("value", "$S", "VisibleForTests"), + .build());, + }]
[+++ /dev/null, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.view.animation.Animation;, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.load.model.ImageVideoWrapper;, +import com.bumptech.glide.load.resource.bitmap.CenterCrop;, +import com.bumptech.glide.load.resource.bitmap.FitCenter;, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmap;, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmapTransformation;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.provider.LoadProvider;, +import com.bumptech.glide.request.bitmap.RequestListener;, +, +import java.io.InputStream;, +, +public class DrawableRequestBuilder<ModelType> extends, + GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmap, Drawable> {, + private final Context context;, + private final Glide glide;, +, + public DrawableRequestBuilder(Context context, ModelType model,, + LoadProvider<ModelType, ImageVideoWrapper, GifBitmap, Drawable> loadProvider, Glide glide) {, + super(context, model, loadProvider, Drawable.class, glide);, + this.context = context;, + this.glide = glide;, + }, +, + public DrawableRequestBuilder<ModelType>
[+++ b/.gitignore, +.gradle, +build, +jacoco.exec, +.idea/**, +!.idea/codeStyleSettings.xml, +++ b/.gitignore, +.gradle, +build, +jacoco.exec, +.idea/**, +!.idea/codeStyleSettings.xml, +++ b/.travis.yml, + # https://github.com/travis-ci/travis-ci/issues/6040#issuecomment-219367943, +++ b/.gitignore, +.gradle, +build, +jacoco.exec, +.idea/**, +!.idea/codeStyleSettings.xml, +++ b/.travis.yml, + # https://github.com/travis-ci/travis-ci/issues/6040#issuecomment-219367943, +++ b/build.gradle, + jcenter(), + google(), + toolVersion = '8.5', +++ b/.gitignore, +.gradle, +build, +jacoco.exec, +.idea/**, +!.idea/codeStyleSettings.xml, +++ b/.travis.yml, + # https://github.com/travis-ci/travis-ci/issues/6040#issuecomment-219367943, +++ b/build.gradle, + jcenter(), + google(), + toolVersion = '8.5', +++ b/gradle.properties, +++ b/.gitignore, +.gradle, +build, +jacoco.exec, +.idea/**, +!.idea/codeStyleSettings.xml, +++ b/.travis.yml, + # https://github.com/travis-ci/travis-ci/issues/6040#issuecomment-219367943, +++ b/build.gradle, + jcenter(), + google(), + toolVersion = '8.5', +++ b/gradle.properties, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/.gitignore, +.gradle, +build, +jacoco.exec, +.idea/**, +!.idea/codeStyleSettings.xml, +++
[+++ b/gradle.properties, +VERSION_NAME=3.3.0, +++ b/gradle.properties, +VERSION_NAME=3.3.0, +++ b/integration/okhttp/build.gradle, + versionCode = VERSION_CODE, + versionName = VERSION_NAME, +++ b/gradle.properties, +VERSION_NAME=3.3.0, +++ b/integration/okhttp/build.gradle, + versionCode = VERSION_CODE, + versionName = VERSION_NAME, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.0.0, +++ b/gradle.properties, +VERSION_NAME=3.3.0, +++ b/integration/okhttp/build.gradle, + versionCode = VERSION_CODE, + versionName = VERSION_NAME, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.0.0, +++ b/integration/volley/build.gradle, + versionCode = VERSION_CODE, + versionName = VERSION_NAME, +++ b/gradle.properties, +VERSION_NAME=3.3.0, +++ b/integration/okhttp/build.gradle, + versionCode = VERSION_CODE, + versionName = VERSION_NAME, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.0.0, +++ b/integration/volley/build.gradle, + versionCode = VERSION_CODE, + versionName = VERSION_NAME, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.0.0]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@link com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@link com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + * <li>A {@link com.bumptech.glide.request.RequestOptions} implementation that contains, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@link com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + * <li>A {@link com.bumptech.glide.request.RequestOptions} implementation that contains, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, + "com.bumptech.glide.request.RequestOptions")) {, + + " RequestOptions object as their first and only parameter, found multiple for: ", +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@link com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + * <li>A {@link com.bumptech.glide.request.RequestOptions} implementation that contains, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, + "com.bumptech.glide.request.RequestOptions")) {, + + " RequestOptions object as their first and only parameter, found multiple for: ", +++
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, + float memoryCacheSize = harness.getCalculator().getMemoryCacheSize();, + assertThat(memoryCacheSize).isEqualTo(harness.getScreenSize() * harness.memoryCacheScreens);, + }, +, + @Test, + public void testCanSetCustomMemoryCacheSize() {, + harness.memoryCacheScreens = 9.5f;, + Shadows.shadowOf(harness.activityManager).setMemoryClass(getLargeEnoughMemoryClass());, +, + float memoryCacheSize = harness.getCalculator().getMemoryCacheSize();, +, + assertThat(memoryCacheSize).isEqualTo(harness.getScreenSize() * harness.memoryCacheScreens);, + float memoryCacheSize = harness.getCalculator().getMemoryCacheSize();, + float bitmapPoolSize = harness.getCalculator().getBitmapPoolSize();, + assertThat(bitmapPoolSize).isEqualTo(harness.getScreenSize() * harness.bitmapPoolScreens);, + }, +, + @Test, + public void testCanSetCustomBitmapPoolSize() {, + harness.bitmapPoolScreens = 2f;, + Shadows.shadowOf(harness.activityManager).setMemoryClass(getLargeEnoughMemoryClass());, +, + float bitmapPoolSize = harness.getCalculator().getBitmapPoolSize();, +, + assertThat(bitmapPoolSize).isEqualTo(harness.getScreenSize() * harness.bitmapPoolScreens);, + float memoryCacheScreens = MemorySizeCalculator.Builder.MEMORY_CACHE_TARGET_SCREENS;, + float bitmapPoolScreens = MemorySizeCalculator.Builder.BITMAP_POOL_TARGET_SCREENS;, + float sizeMultiplier = MemorySizeCalculator.Builder.MAX_SIZE_MULTIPLIER;, + return new MemorySizeCalculator.Builder(RuntimeEnvironment.application), +
[+++ b/build.gradle, + if (!hasProperty('DISABLE_ERROR_PRONE')) {, +}, +++ b/build.gradle, + if (!hasProperty('DISABLE_ERROR_PRONE')) {, +}, +++ b/gradle.properties, +++ b/build.gradle, + if (!hasProperty('DISABLE_ERROR_PRONE')) {, +}, +++ b/gradle.properties, +++ b/library/build.gradle, +++ b/build.gradle, + if (!hasProperty('DISABLE_ERROR_PRONE')) {, +}, +++ b/gradle.properties, +++ b/library/build.gradle, +++ b/scripts/travis_after_success.sh]
[+++ b/checkstyle.xml, + <!-- Ensure trailling newline for compatibility -->, + <module name="NewlineAtEndOfFile" />, +, +++ b/checkstyle.xml, + <!-- Ensure trailling newline for compatibility -->, + <module name="NewlineAtEndOfFile" />, +, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +++ b/checkstyle.xml, + <!-- Ensure trailling newline for compatibility -->, + <module name="NewlineAtEndOfFile" />, +, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +++ b/library/src/test/java/com/bumptech/glide/load/OptionsTest.java, +++ b/checkstyle.xml, + <!-- Ensure trailling newline for compatibility -->, + <module name="NewlineAtEndOfFile" />, +, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +++ b/library/src/test/java/com/bumptech/glide/load/OptionsTest.java, +++ b/library/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java, +++ b/checkstyle.xml, + <!-- Ensure trailling newline for compatibility -->, + <module name="NewlineAtEndOfFile" />, +, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +++ b/library/src/test/java/com/bumptech/glide/load/OptionsTest.java, +++ b/library/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java, +++ b/library/src/test/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java, +++ b/checkstyle.xml, + <!--
[+++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java, + setResourceInternal(null);, + setResourceInternal(null);, + setResourceInternal(null);, + setResourceInternal(resource);, + maybeUpdateAnimatable(resource);, + private void setResourceInternal(@Nullable Z resource) {, + maybeUpdateAnimatable(resource);, + setResource(resource);, + }, +, + private void maybeUpdateAnimatable(@Nullable Z resource) {, + if (resource instanceof Animatable) {, + animatable = (Animatable) resource;, + animatable.start();, + } else {, + animatable = null;, + }, + }, +]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import android.support.annotation.NonNull;, + public void addListener(@NonNull LifecycleListener listener) {, + public void removeListener(@NonNull LifecycleListener listener) {, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import android.support.annotation.NonNull;, + public void addListener(@NonNull LifecycleListener listener) {, + public void removeListener(@NonNull LifecycleListener listener) {, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + void track(@NonNull Target<?> target, @NonNull Request request) {, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import android.support.annotation.NonNull;, + public void addListener(@NonNull LifecycleListener listener) {, + public void removeListener(@NonNull LifecycleListener listener) {, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, + void track(@NonNull Target<?> target, @NonNull Request request) {, +++ b/library/src/main/java/com/bumptech/glide/manager/ActivityFragmentLifecycle.java, +import android.support.annotation.NonNull;, + public void addListener(@NonNull LifecycleListener listener) {, + public void removeListener(@NonNull LifecycleListener listener) {, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import android.support.annotation.NonNull;, +
[+++ b/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java, + * e.addFrame(image3, 100, 100); // set position of the frame, + private int fixedWidth; // set by setSize(), +, + private int fixedHeight;, +, + * <code>setSize</code> was invoked, the size is used for all subsequent frames., + * Otherwise, the actual size of the image is used for each frames., + return addFrame(im, 0, 0);, + }, +, + /**, + * Adds next GIF frame to the specified position. The frame is not written immediately, but is actually, + * deferred until the next frame is received so that timing data can be, +
[+++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]main[/\\]java[/\\]com[/\\]bumptech[/\\]glide[/\\]util[/\\]CachedHashCodeArrayMap.java" checks="EqualsHashCodeCheck"/>, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]main[/\\]java[/\\]com[/\\]bumptech[/\\]glide[/\\]util[/\\]CachedHashCodeArrayMap.java" checks="EqualsHashCodeCheck"/>, +++ b/library/findbugs-exclude.xml, + <!-- We just cache the value of hashcode, no need to also override equals. -->, + <Match>, + <Class name="com.bumptech.glide.util.CachedHashCodeArrayMap" />, + <Bug pattern="EQ_DOESNT_OVERRIDE_EQUALS" />, + </Match>, +, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]library[/\\]src[/\\]main[/\\]java[/\\]com[/\\]bumptech[/\\]glide[/\\]util[/\\]CachedHashCodeArrayMap.java" checks="EqualsHashCodeCheck"/>, +++ b/library/findbugs-exclude.xml, + <!-- We just cache the value of hashcode, no need to also override equals. -->, + <Match>, + <Class name="com.bumptech.glide.util.CachedHashCodeArrayMap" />, + <Bug pattern="EQ_DOESNT_OVERRIDE_EQUALS" />, + </Match>, +, +++ b/library/src/main/java/com/bumptech/glide/util/CachedHashCodeArrayMap.java, +/**, + * An {@link ArrayMap} that caches its hashCode to support efficient lookup., + *, +
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + while (!started && hasNextModelLoader()) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + while (!started && hasNextModelLoader()) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + return new SourceGenerator(decodeHelper, this);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + while (!started && hasNextModelLoader()) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + return new SourceGenerator(decodeHelper, this);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, + isCancelled = true;, + decodeJob.cancel();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + while (!started && hasNextModelLoader()) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + return new SourceGenerator(decodeHelper, this);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, + isCancelled = true;, + decodeJob.cancel();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java, + while (!started && hasNextModelLoader()) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + while (!started && hasNextModelLoader()) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + return new SourceGenerator(decodeHelper, this);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, + isCancelled = true;, +
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, + return input.type;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, + return input.type;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + .equals(requestOptionsClassName.toString());]
[+++ b/library/AndroidManifest.xml, + android:versionCode="6", + android:versionName="2.0.4" >]
[+++ b/library/src/main/java/com/bumptech/glide/manager/ActivityFragmentLifecycle.java, +import com.bumptech.glide.util.Util;, +, + for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {, + for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {, + for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {, +++ b/library/src/main/java/com/bumptech/glide/manager/ActivityFragmentLifecycle.java, +import com.bumptech.glide.util.Util;, +, + for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {, + for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {, + for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {, +++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, +import com.bumptech.glide.util.Util;, + for (Request request : Util.getSnapshot(requests)) {, + for (Request request : Util.getSnapshot(requests)) {, + for (Request request : Util.getSnapshot(requests)) {, + for (Request request : Util.getSnapshot(requests)) {, +++ b/library/src/main/java/com/bumptech/glide/manager/ActivityFragmentLifecycle.java, +import com.bumptech.glide.util.Util;, +, + for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {, + for (LifecycleListener
[+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, + @Test @Config(sdk = 19), + bitmap.setConfig(null);, +++ b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, + @Test @Config(sdk = 19), + bitmap.setConfig(null);, +++ b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java, + @Test @Config(sdk = 19), + bitmap.setConfig(null);, +++ b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, + @Test @Config(sdk = 19), + bitmap.setConfig(null);, +++ b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java, + @Test @Config(sdk = 19), + bitmap.setConfig(null);, +++ b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java, + @Test @Config(sdk = 19), + toFit.setConfig(null);, + @Test @Config(sdk = 19), + toTransform.setConfig(null);, + @Test @Config(sdk = 19), + toRotate.setConfig(null);]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + private boolean onlyRetrieveFromCache;, + boolean onlyRetrieveFromCache,, + this.onlyRetrieveFromCache = onlyRetrieveFromCache;, + // Skip loading from source if the user opted to only retrieve the resource from cache., + return onlyRetrieveFromCache ? Stage.FINISHED : Stage.SOURCE;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + private boolean onlyRetrieveFromCache;, + boolean onlyRetrieveFromCache,, + this.onlyRetrieveFromCache = onlyRetrieveFromCache;, + // Skip loading from source if the user opted to only retrieve the resource from cache., + return onlyRetrieveFromCache ? Stage.FINISHED : Stage.SOURCE;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, + boolean onlyRetrieveFromCache,, + onlyRetrieveFromCache,, + boolean onlyRetrieveFromCache,, + onlyRetrieveFromCache,, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + private boolean onlyRetrieveFromCache;, + boolean onlyRetrieveFromCache,, + this.onlyRetrieveFromCache = onlyRetrieveFromCache;,
[+++ b/integration/okhttp/build.gradle, +apply plugin: 'com.android.library', +, +repositories {, + mavenCentral(), +}, +, +dependencies {, + compile project(':library'), +, + compile 'com.squareup.okhttp:okhttp:2.0.+', +}, +, +android {, + compileSdkVersion 19, + buildToolsVersion "19.1.0", +, + defaultConfig {, + applicationId "com.bumptech.glide.integration.okhttp", + minSdkVersion 10, + targetSdkVersion 19, + versionCode 1, + versionName "1.0.0", + }, +}, +, +++ b/integration/okhttp/build.gradle, +apply plugin: 'com.android.library', +, +repositories {, + mavenCentral(), +}, +, +dependencies {, + compile project(':library'), +, + compile 'com.squareup.okhttp:okhttp:2.0.+', +}, +, +android {, + compileSdkVersion 19, + buildToolsVersion "19.1.0", +, + defaultConfig {, + applicationId "com.bumptech.glide.integration.okhttp", + minSdkVersion 10, + targetSdkVersion 19, +
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, + * @see #centerInside(Context) (android.content.Context), + * @param context Any {@link android.content.Context}., + * @see #transform(Class, com.bumptech.glide.load.Transformation), + * @see #optionalCenterInside(Context) (android.content.Context), + *, + * @deprecated Use {@link #centerInside()}}, + */, + @Deprecated, + @GlideOption(, + staticMethodName = "centerInsideTransform",, + memoizeStaticMethod = true, + ), + public CHILD centerInside(@SuppressWarnings("unused") Context context) {, + return centerInside();, + }, +, + /**, + * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterInside} to all default types and, + * throws an exception if asked to transform an unknown type., + *, + * <p>This will override previous calls to {@link #dontTransform()}., + *]
[+++ b/library/lint.xml, +++ b/library/lint.xml, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.ImageReadyCallback;, + private ImagePresenter<T> buildImagePresenter(Target target) {, + final Animation animation = AnimationUtils.loadAnimation(context, animationId);, + builder.setImageReadyCallback(new ImageReadyCallback() {, + public void onImageReady(Target target, boolean fromCache) {, + if (!fromCache) {, +++ b/library/lint.xml, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.ImageReadyCallback;, + private ImagePresenter<T> buildImagePresenter(Target target) {, + final Animation animation = AnimationUtils.loadAnimation(context, animationId);, + builder.setImageReadyCallback(new ImageReadyCallback() {, + public void onImageReady(Target target, boolean fromCache) {, + if (!fromCache) {, +++ b/library/src/com/bumptech/glide/loader/transformation/MultiTransformation.java, + if (current != null && current != transformed) {, + pool.put(current);, +++ b/library/lint.xml, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.ImageReadyCallback;, + private ImagePresenter<T> buildImagePresenter(Target target) {, +
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #submit(int, int)}.]
[+++ b/library/src/main/java/com/bumptech/glide/manager/LifecycleRequestManager.java, +import java.util.Collections;, +import java.util.WeakHashMap;, + // Most requests will be for views and will therefore be held strongly (and safely) by the view via the tag., + // However, a user can always pass in a different type of target which may end up not being strongly referenced even, + // though the user still would like the request to finish. Weak references are therefore only really functional in, + // this context for view targets. Despite the side affects, WeakReferences are still essentially required. A user, + // can always make repeated requests into targets other
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, + if (transformations.isEmpty() && isTransformationRequired) {]
[+++ b/library/pom.xml, + <scope>test</scope>, + <scope>test</scope>, + <scope>test</scope>, +++ b/library/pom.xml, + <scope>test</scope>, + <scope>test</scope>, + <scope>test</scope>, +++ b/pom.xml, + <dependencies>, + <dependency>, + <groupId>android</groupId>, + <artifactId>android</artifactId>, + <version>4.4.2_r3</version>, + <scope>provided</scope>, + </dependency>, + <dependency>, + <groupId>com.mcxiaoke.volley</groupId>, + <artifactId>library</artifactId>, + <version>1.0.4</version>, + </dependency>, + </dependencies>, +, +++ b/library/pom.xml, + <scope>test</scope>, + <scope>test</scope>, + <scope>test</scope>, +++ b/pom.xml, + <dependencies>, + <dependency>, + <groupId>android</groupId>, + <artifactId>android</artifactId>, + <version>4.4.2_r3</version>, + <scope>provided</scope>, + </dependency>, + <dependency>, + <groupId>com.mcxiaoke.volley</groupId>, + <artifactId>library</artifactId>, + <version>1.0.4</version>, + </dependency>, + </dependencies>, +, +++ b/samples/flickr/pom.xml]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java, + protected String getUrl(Object model, int width, int height, Map<String, Object> options) {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java, + protected String getUrl(Object model, int width, int height, Map<String, Object> options) {, +++ b/library/src/main/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoader.java, + String stringURL = getUrl(model, width, height, options);, + result = new GlideUrl(stringURL, getHeaders(model, width, height, options));, + List<String> alternateUrls = getAlternateUrls(model, width, height, options);, + protected abstract String getUrl(Model model, int width, int height, Map<String, Object> options);, + protected List<String> getAlternateUrls(Model model, int width, int height,, + Map<String, Object> options) {, + protected Headers getHeaders(Model model, int width, int height, Map<String, Object> options) {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java,
[+++ b/library/src/main/java/com/bumptech/glide/load/Key.java, +import android.support.annotation.NonNull;, + void updateDiskCacheKey(@NonNull MessageDigest messageDigest);, +++ b/library/src/main/java/com/bumptech/glide/load/Key.java, +import android.support.annotation.NonNull;, + void updateDiskCacheKey(@NonNull MessageDigest messageDigest);, +++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, + public void updateDiskCacheKey(@NonNull MessageDigest messageDigest) {, +++ b/library/src/main/java/com/bumptech/glide/load/Key.java, +import android.support.annotation.NonNull;, + void updateDiskCacheKey(@NonNull MessageDigest messageDigest);, +++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, + public void updateDiskCacheKey(@NonNull MessageDigest messageDigest) {, +++ b/library/src/main/java/com/bumptech/glide/load/Options.java, +import android.support.annotation.NonNull;, + public void updateDiskCacheKey(@NonNull MessageDigest messageDigest) {, +++ b/library/src/main/java/com/bumptech/glide/load/Key.java, +import android.support.annotation.NonNull;, + void updateDiskCacheKey(@NonNull MessageDigest messageDigest);, +++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java, + public void updateDiskCacheKey(@NonNull MessageDigest messageDigest) {, +++ b/library/src/main/java/com/bumptech/glide/load/Options.java, +import android.support.annotation.NonNull;, + public void updateDiskCacheKey(@NonNull MessageDigest messageDigest) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheKey.java, +import android.support.annotation.NonNull;, + public void updateDiskCacheKey(@NonNull MessageDigest messageDigest) {, +++ b/library/src/main/java/com/bumptech/glide/load/Key.java, +import
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, + private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX =, + "androidx.annotation.VisibleForTesting";, +, + Elements elements = processingEnv.getElementUtils();, + TypeElement visibleForTestingTypeElement = elements, + .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX);, + if (visibleForTestingTypeElement == null) {, + // Fall back to looking for the Support library version., + visibleForTestingTypeElement = elements.getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);, + }, + String visibleForTestingTypeQualifiedName = visibleForTestingTypeElement.toString();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, + private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX =, + "androidx.annotation.VisibleForTesting";, +, + Elements elements = processingEnv.getElementUtils();, + TypeElement visibleForTestingTypeElement = elements, + .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX);, + if (visibleForTestingTypeElement == null) {, + // Fall back to looking for the Support library version., + visibleForTestingTypeElement = elements.getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);, + },
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + @SuppressWarnings({"unchecked", "deprecation", "TryWithIdenticalCatches"}), + // These exceptions can't be squashed across all versions of Android., + @SuppressWarnings("unused") // Public API]
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + // clear all pixels when meet first frame and drop prev image from last loop, + if (previousImage != null) {, + bitmapProvider.release(previousImage);, + }, + previousImage = null;, + Arrays.fill(dest, COLOR_TRANSPARENT_BLACK);, + }, +, + // clear all pixels when dispose is 3 but previousImage is null., + // When DISPOSAL_PREVIOUS and previousImage didn't be set, new frame should draw on, + // a empty image, + if (previousFrame != null && previousFrame.dispose == DISPOSAL_PREVIOUS, + && previousImage == null) {]
[+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpLibraryGlideModule.java, +import android.support.annotation.NonNull;, + public void registerComponents(@NonNull Context context, @NonNull Glide glide,, + @NonNull Registry registry) {, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpLibraryGlideModule.java, +import android.support.annotation.NonNull;, + public void registerComponents(@NonNull Context context, @NonNull Glide glide,, + @NonNull Registry registry) {, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + public void onResponse(@NonNull Call call, @NonNull Response response) {, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpLibraryGlideModule.java, +import android.support.annotation.NonNull;, + public void registerComponents(@NonNull Context context, @NonNull Glide glide,, + @NonNull Registry registry) {, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + public void onResponse(@NonNull Call call, @NonNull Response response) {, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java, +import android.support.annotation.NonNull;, + public OkHttpUrlLoader(@NonNull Call.Factory client) {, + public boolean handles(@NonNull GlideUrl url) {, + public LoadData<InputStream> buildLoadData(@NonNull
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.engine.cache.DiskLruCacheFactory;, + return getPhotoCacheDir(context, DiskLruCacheFactory.DEFAULT_DISK_CACHE_DIR);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.engine.cache.DiskLruCacheFactory;, + return getPhotoCacheDir(context, DiskLruCacheFactory.DEFAULT_DISK_CACHE_DIR);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + diskCacheFactory = new InternalCacheDiskCacheFactory(context);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.engine.cache.DiskLruCacheFactory;, + return getPhotoCacheDir(context, DiskLruCacheFactory.DEFAULT_DISK_CACHE_DIR);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + diskCacheFactory = new InternalCacheDiskCacheFactory(context);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java, +, + /** 250 MB of cache. */, + int DEFAULT_DISK_CACHE_SIZE = 250 * 1024 * 1024;, + String DEFAULT_DISK_CACHE_DIR = "image_manager_disk_cache";, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.engine.cache.DiskLruCacheFactory;, + return getPhotoCacheDir(context, DiskLruCacheFactory.DEFAULT_DISK_CACHE_DIR);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + diskCacheFactory = new InternalCacheDiskCacheFactory(context);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java, +, + /** 250 MB of cache. */, + int DEFAULT_DISK_CACHE_SIZE = 250 * 1024 * 1024;, + String
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java, +import com.bumptech.glide.load.resource.bitmap.Downsampler;, + // TODO: Even with hardware allowed, we get a wide F16. Attempting to decode the resource with, + // preferred config set to hardware fails with:, + // "D/skia (10312): --- Failed to allocate a hardware bitmap", + public void load_withWideGamutImage_hardwareAllowed_returnsDecodedBitmap() {, + .set(Downsampler.ALLOW_HARDWARE_CONFIG, true), + assertThat(bitmap).isNotNull();]
[+++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.3.2]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CenterCropRegressionTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CenterCropRegressionTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CenterInsideRegressionTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +import androidx.test.InstrumentationRegistry;, +import androidx.test.runner.AndroidJUnit4;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java, +import
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + engine =, + new Engine(, + memoryCache,, + diskCacheFactory,, + diskCacheExecutor,, + sourceExecutor,, + GlideExecutor.newUnlimitedSourceExecutor(),, + GlideExecutor.newAnimationExecutor());, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + engine =, + new Engine(, + memoryCache,, + diskCacheFactory,, + diskCacheExecutor,, + sourceExecutor,, + GlideExecutor.newUnlimitedSourceExecutor(),, + GlideExecutor.newAnimationExecutor());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, + GlideExecutor sourceUnlimitedExecutor,, + GlideExecutor animationExecutor) {, + this(, + memoryCache,, + diskCacheFactory,, + diskCacheExecutor,, + sourceExecutor,, + sourceUnlimitedExecutor,, + animationExecutor,, + /*jobs=*/ null,, + /*keyFactory=*/ null,, + /*activeResources=*/ null,, + /*engineJobFactory=*/ null,, + /*decodeJobFactory=*/ null,, + /*resourceRecycler=*/ null);, + GlideExecutor animationExecutor,, + engineJobFactory =, + new EngineJobFactory(, + diskCacheExecutor, sourceExecutor, sourceUnlimitedExecutor, animationExecutor, this);, + boolean useAnimationPool,,
[+++ b/.travis.yml, +, +after_success:, +- ./gradlew uploadGlideArchives -PNEXUS_USERNAME="${NEXUS_USERNAME}" -PNEXUS_PASSWORD="${NEXUS_PASSWORD}", +, +env:, + global:, + - secure: m/sb1iqIHzL/xCANDf0PHBRtX4ihiccFFWsMWby5PiGDh5ncItjI+kU+Yrgdy/PwmSwwTfB5nXzCdcJe8nLADSLF5PPccuKKO63mGH/Vsai0SJt94+wr+JnBS+T1LmTrlvtlRFEcKjFhOQsnAeJL30iNtQWsoqNSgVrYqUaBdAM=, + - secure: dMBw5H/o1VsmFX9vama8KWpS3ZbwSgVeNdwByfBgZz82ad1AkYPFN2QNt02qZsopeHCs3w91J1+2ULkEcGpi/eCjRNV449uQyx1DXB0pGkiGq9OAgeZhO/HiRAPqqzJRC4gxgOHBvfxaKm6ZD8THfExWJKTQfXrwFrh+9R4cL3g=]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + new Downsampler(resources.getDisplayMetrics(), bitmapPool, arrayPool);, + .register(InputStream.class, new StreamEncoder(arrayPool)), + new StreamBitmapDecoder(downsampler, arrayPool)), + new StreamBitmapDecoder(downsampler, arrayPool))), + new StreamGifDecoder(byteBufferGifDecoder, arrayPool)), + .register(new InputStreamRewinder.Factory(arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + new Downsampler(resources.getDisplayMetrics(), bitmapPool, arrayPool);, + .register(InputStream.class, new StreamEncoder(arrayPool)), + new StreamBitmapDecoder(downsampler, arrayPool)), + new StreamBitmapDecoder(downsampler, arrayPool))), + new StreamGifDecoder(byteBufferGifDecoder, arrayPool)), + .register(new InputStreamRewinder.Factory(arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/load/data/InputStreamRewinder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, + InputStreamRewinder(InputStream is, ArrayPool byteArrayPool) {, + private final ArrayPool byteArrayPool;, + public Factory(ArrayPool byteArrayPool) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + new Downsampler(resources.getDisplayMetrics(), bitmapPool, arrayPool);, + .register(InputStream.class, new StreamEncoder(arrayPool)), + new StreamBitmapDecoder(downsampler, arrayPool)), + new StreamBitmapDecoder(downsampler, arrayPool))), + new StreamGifDecoder(byteBufferGifDecoder, arrayPool)), + .register(new InputStreamRewinder.Factory(arrayPool)), +++
[+++ b/.idea/codeStyleSettings.xml, + <option name="ALIGN_MULTILINE_PARAMETERS" value="false" />, +++ b/.idea/codeStyleSettings.xml, + <option name="ALIGN_MULTILINE_PARAMETERS" value="false" />, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, + throw new HttpException("Too many (> " + MAXIMUM_REDIRECTS + ") redirects!");, + throw new HttpException("In re-direct loop");, + throw new HttpException("Received empty or null redirect url");, + } else if (statusCode == -1) {, + throw new HttpException(statusCode);, + throw new HttpException(urlConnection.getResponseMessage(), statusCode);, + /**, + * Thrown when an http request fails., + *, + * <p>Exposes the specific status code or {@link #UNKNOWN} via {@link #getStatusCode()} so, + * users may attempt to retry certain types of errors., + */,
[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.GlideUrl;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamUrlLoader;, + register(URL.class, InputStream.class, new StreamUrlLoader.Factory());, + register(GlideUrl.class, InputStream.class, new VolleyUrlLoader.Factory(requestQueue));, +, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.GlideUrl;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamUrlLoader;, + register(URL.class, InputStream.class, new StreamUrlLoader.Factory());, + register(GlideUrl.class, InputStream.class, new VolleyUrlLoader.Factory(requestQueue));, +, +++ b/library/src/com/bumptech/glide/loader/GlideUrl.java, +package com.bumptech.glide.loader;, +, +import java.net.MalformedURLException;, +import java.net.URL;, +, +/**, + * This is a simple wrapper for strings representing http/https urls. new URL() is an excessively expensive operation, + * that may be unnecessary if the class loading the image from the url doesn't actually require a URL object., + *, + * Users wishing to replace the class for handling urls must
[+++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import java.util.concurrent.RejectedExecutionException;, +import static org.junit.Assert.assertEquals;, + when(harness.cacheLoader.load(any(Key.class), any(ResourceDecoder.class), anyInt(), anyInt())), + .thenThrow(new RuntimeException("Test"));, +, + when(harness.tranformation.transform(any(Resource.class), anyInt(), anyInt())), + .thenThrow(new RuntimeException("test"));, + when(harness.transcoder.transcode(any(Resource.class))).thenThrow(new RuntimeException("test"));, + Exception exception = new RejectedExecutionException("test");, + when(harness.resizeService.submit(any(Runnable.class))).thenThrow(exception);, +, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import java.util.concurrent.RejectedExecutionException;, +import static org.junit.Assert.assertEquals;, + when(harness.cacheLoader.load(any(Key.class), any(ResourceDecoder.class), anyInt(), anyInt())), + .thenThrow(new RuntimeException("Test"));, +, + when(harness.tranformation.transform(any(Resource.class), anyInt(), anyInt())), + .thenThrow(new RuntimeException("test"));, + when(harness.transcoder.transcode(any(Resource.class))).thenThrow(new RuntimeException("test"));, + Exception exception = new RejectedExecutionException("test");, + when(harness.resizeService.submit(any(Runnable.class))).thenThrow(exception);, +, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import static org.junit.Assert.fail;, + when(parser.parseHeader()).thenThrow(new RuntimeException("Test"));, + fail("Expected exception is not thrown.");, + } catch (RuntimeException e) {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import java.util.concurrent.RejectedExecutionException;, +import static org.junit.Assert.assertEquals;,
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory factory) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java, + public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory factory) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + final Resources resources = context.getResources();, + .append(int.class, InputStream.class, new ResourceLoader.StreamFactory(resources)), + .append(, + int.class,, + ParcelFileDescriptor.class,, + new ResourceLoader.FileDescriptorFactory(resources)), + .append(Integer.class, InputStream.class, new ResourceLoader.StreamFactory(resources)), + .append(, + Integer.class,, + ParcelFileDescriptor.class,, + new ResourceLoader.FileDescriptorFactory(resources)), + .append(Uri.class, InputStream.class, new AssetUriLoader.StreamFactory(context.getAssets())), + .append(, + Uri.class,, + ParcelFileDescriptor.class,, + new AssetUriLoader.FileDescriptorFactory(context.getAssets())), + .append(Uri.class, InputStream.class, new
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +import android.support.annotation.Nullable;, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +import android.support.annotation.Nullable;, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +import android.support.annotation.Nullable;, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +import android.support.annotation.Nullable;, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +import android.support.annotation.Nullable;, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java, +import android.support.annotation.Nullable;, +, + @Nullable, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +import android.support.annotation.Nullable;, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +import android.support.annotation.Nullable;, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java, +import android.support.annotation.Nullable;, +, + @Nullable, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +import android.support.annotation.Nullable;, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +import android.support.annotation.Nullable;, + @Nullable, + @Nullable, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +import android.support.annotation.Nullable;, +
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, + maxLoopCount = state.frameLoader.getLoopCount();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, + maxLoopCount = state.frameLoader.getLoopCount();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, + return gifDecoder.getLoopCount();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, + maxLoopCount = state.frameLoader.getLoopCount();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, + return gifDecoder.getLoopCount();, +++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, + maxLoopCount = state.frameLoader.getLoopCount();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, + return gifDecoder.getLoopCount();, +++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + assertFalse(drawable.isRunning());, + assertFalse(drawable.isRunning());, + assertFalse(drawable.isRunning());, + assertFalse(drawable.isRunning());, + public void testUsesDecoderNetscapeLoopCountIfLoopCountIsLoopIntrinsic() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, + maxLoopCount = state.frameLoader.getLoopCount();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, + return gifDecoder.getLoopCount();, +++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, + assertFalse(drawable.isRunning());, + assertFalse(drawable.isRunning());, + assertFalse(drawable.isRunning());, + assertFalse(drawable.isRunning());, + public void testUsesDecoderNetscapeLoopCountIfLoopCountIsLoopIntrinsic() {, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, + * Gets the "Netscape" iteration count, if any. A count
[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java, + public static GlideOptions overrideOf(int width, int height) {, + return new GlideOptions().override(width, height);, + public static GlideOptions overrideOf(int size) {, + return new GlideOptions().override(size);, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java, + public static GlideOptions overrideOf(int width, int height) {, + return new GlideOptions().override(width, height);, + public static GlideOptions overrideOf(int size) {, + return new GlideOptions().override(size);, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java, + public static GlideOptions overrideOf(int width, int height) {, + return new GlideOptions().override(width, height);, + public static GlideOptions overrideOf(int size) {, + return new GlideOptions().override(size);, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java, + public static GlideOptions overrideOf(int width, int height) {, + return new GlideOptions().override(width, height);, + public
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java, + @Test, + public void loadFromBuilder_withDiskCacheStrategySetBeforeLoad_doesNotOverrideDiskCacheStrategy(), + throws IOException {, + byte[] data = getCanonicalBytes();, + concurrency.wait(, + GlideApp.with(context), + .asDrawable(), + .diskCacheStrategy(DiskCacheStrategy.RESOURCE), + .load(data), + .submit());, +, + concurrency.runOnMainThread(new Runnable() {, + @Override, + public void run() {, + GlideApp.get(context).clearMemory();, + }, + });, +, + concurrency.wait(, + GlideApp.with(context), + .asDrawable(), + .diskCacheStrategy(DiskCacheStrategy.RESOURCE), + .listener(requestListener), + .load(data), + .submit());, +, + verify(requestListener).onResourceReady(, + anyDrawable(), any(), anyTarget(), eq(DataSource.RESOURCE_DISK_CACHE), anyBoolean());, + }, +, + @Test, + public void loadFromBuilder_withSkipMemoryCacheSetBeforeLoad_doesNotOverrideSkipMemoryCache(), + throws IOException {, + byte[] data = getCanonicalBytes();, + concurrency.wait(, + GlideApp.with(context), + .asDrawable(), + .skipMemoryCache(false), + .load(data),
[+++ b/glide/build.gradle, +project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}", +, +++ b/glide/build.gradle, +project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}", +, +++ b/glide/gradle.properties, +POM_NAME=Glide Full, +POM_ARTIFACT_ID=glide-full, +++ b/glide/build.gradle, +project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}", +, +++ b/glide/gradle.properties, +POM_NAME=Glide Full, +POM_ARTIFACT_ID=glide-full, +++ b/integration/build.gradle, +// keep an empty file to make sure Gradle recognizes the properties, +++ b/glide/build.gradle, +project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}", +, +++ b/glide/gradle.properties, +POM_NAME=Glide Full, +POM_ARTIFACT_ID=glide-full, +++ b/integration/build.gradle, +// keep an empty file to make sure Gradle recognizes the properties, +++ b/integration/gifencoder/build.gradle, + compile project(':library'), +apply from: "${rootProject.projectDir}/scripts/upload.gradle", +++ b/glide/build.gradle, +project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}", +, +++ b/glide/gradle.properties, +POM_NAME=Glide Full, +POM_ARTIFACT_ID=glide-full, +++ b/integration/build.gradle, +// keep an empty file to make sure Gradle recognizes the
[+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ApiModule.java, +/** Provides classes related to the Imgur API via Dagger. */]
[+++ b/gradle.properties, +VERSION_NAME=4.1.0]
[+++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java, + // Initialize isConnected., + isConnected = isConnected(context);, + // See #1417, registering the receiver can throw SecurityException., + Preconditions.checkNotNull(, + (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE));, + NetworkInfo networkInfo;, + try {, + networkInfo = connectivityManager.getActiveNetworkInfo();, + } catch (RuntimeException e) {, + // #1405 shows that this throws a SecurityException., + // b/70869360 shows that this throws NullPointerException on APIs 22, 23, and 24., + // b/70869360 also shows that this throws RuntimeException on API 24 and 25., + if (Log.isLoggable(TAG, Log.WARN)) {, + Log.w(TAG, "Failed to determine connectivity status when connectivity changed", e);, + }, + // Default
[+++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, + if (url == null) {, + throw new IllegalArgumentException("URL must not be null!");, + }, + if (TextUtils.isEmpty(url)) {, + throw new IllegalArgumentException("String url must not be empty or null: " + url);, + }, +++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, + if (url == null) {, + throw new IllegalArgumentException("URL must not be null!");, + }, + if (TextUtils.isEmpty(url)) {, + throw new IllegalArgumentException("String url must not be empty or null: " + url);, + }, +++ b/library/src/main/java/com/bumptech/glide/load/model/ImageVideoModelLoader.java, +, + if (streamFetcher != null || fileDescriptorFetcher != null) {, + } else {, + return null;, + }, +++
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/main/java/com/bumptech/glide/load/Option.java, +public final class Option<T> {, +++ b/library/src/main/java/com/bumptech/glide/load/Option.java, +public final class Option<T> {, +++ b/library/src/main/java/com/bumptech/glide/load/Options.java, +import android.support.v4.util.ArrayMap;, +import android.support.v4.util.SimpleArrayMap;, +, + private final ArrayMap<Option<?>, Object> values = new ArrayMap<>();, + values.putAll((SimpleArrayMap<Option<?>, Object>) other.values);]
[+++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import org.robolectric.RobolectricTestRunner;, +, +@Config(manifest = Config.NONE, sdk = 18), +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import org.robolectric.RobolectricTestRunner;, +, +@Config(manifest = Config.NONE, sdk = 18), +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static com.google.common.truth.Truth.assertThat;, +import org.robolectric.RobolectricTestRunner;, +, +@Config(manifest = Config.NONE, sdk = 18,, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import org.robolectric.RobolectricTestRunner;, +, +@Config(manifest = Config.NONE, sdk = 18), +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static com.google.common.truth.Truth.assertThat;, +import org.robolectric.RobolectricTestRunner;, +, +@Config(manifest = Config.NONE, sdk = 18,, +++ b/library/src/test/java/com/bumptech/glide/GlideTest.java, +import org.robolectric.RobolectricTestRunner;, +, +@Config(manifest = Config.NONE, sdk = 18, shadows = {, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import org.robolectric.RobolectricTestRunner;, +, +@Config(manifest = Config.NONE, sdk = 18), +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static com.google.common.truth.Truth.assertThat;, +import org.robolectric.RobolectricTestRunner;, +, +@Config(manifest = Config.NONE, sdk =
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/glide/glide.iml, +<module external.linked.project.id=":glide" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="com.github.bumptech.glide" external.system.module.version="3.5.0-SNAPSHOT" type="JAVA_MODULE" version="4">,
[+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java, + throw (FileNotFoundException), + new FileNotFoundException("NPE opening uri: " + thumbnailUri).initCause(e);]
[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, + @NonNull Class<Model> modelClass,, + @NonNull Class<TResource> resourceClass,, + List<Class<?>> result =, + modelToResourceClassCache.get(modelClass, resourceClass, transcodeClass);, + modelToResourceClassCache.put(, + modelClass, resourceClass, transcodeClass, Collections.unmodifiableList(result));, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, + @NonNull Class<Model> modelClass,, + @NonNull Class<TResource> resourceClass,, + List<Class<?>> result =, + modelToResourceClassCache.get(modelClass, resourceClass, transcodeClass);, + modelToResourceClassCache.put(, + modelClass, resourceClass, transcodeClass, Collections.unmodifiableList(result));, +++ b/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java, + public List<Class<?>> get(, + @NonNull Class<?> modelClass,, + @NonNull Class<?> resourceClass,, + @NonNull Class<?> transcodeClass) {, + key = new MultiClassKey(modelClass, resourceClass, transcodeClass);, + key.set(modelClass, resourceClass, transcodeClass);, + public void put(, + @NonNull Class<?> modelClass,, + @NonNull Class<?> resourceClass,, + @NonNull Class<?> transcodeClass,, + .put(new MultiClassKey(modelClass,
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/scripts/travis_create_emulator.sh, +echo y | android --silent update sdk --no-ui --all --filter android-$ANDROID_TARGET, +echo y | android --silent update sdk --no-ui --all --filter sys-img-armeabi-v7a-android-$ANDROID_TARGET]
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + * reference has to be cleared and processed before the hard reference is removed. As a result,, + * setting this method to {@code true} may transiently increase the memory usage of an, + * application., +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + * reference has to be cleared and processed before the hard reference is removed. As a result,, + * setting this method to {@code true} may transiently increase the memory usage of an, + * application., +++ b/library/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java, + resources = new ActiveResources(/*isActiveResourceRetentionAllowed=*/ true);, + resources = new ActiveResources(/*isActiveResourceRetentionAllowed=*/ false);, + resources = new ActiveResources(/*isActiveResourceRetentionAllowed=*/ false);, +
[+++ b/library/src/main/java/com/bumptech/glide/TransitionOptions.java, + /**, + * Uses the given {@link TransitionFactory} to build a, + * {@link com.bumptech.glide.request.transition.Transition} for each request started with these, + * {@code TransitionOptions}., + *, + * @return This request builder., + */]
[+++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +, + public GifTypeRequest<A> asGif() {, + return new GifTypeRequest<A>(context, model, streamModelLoader, glide);, + }, +++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +, + public GifTypeRequest<A> asGif() {, + return new GifTypeRequest<A>(context, model, streamModelLoader, glide);, + }, +++ b/library/src/main/java/com/bumptech/glide/GifRequestBuilder.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.view.animation.Animation;, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.load.resource.bitmap.CenterCrop;, +import com.bumptech.glide.load.resource.bitmap.FitCenter;, +import com.bumptech.glide.load.resource.gif.GifData;, +import com.bumptech.glide.load.resource.gif.GifDataTransformation;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.provider.LoadProvider;, +import com.bumptech.glide.request.RequestListener;, +, +import java.io.InputStream;, +, +public class GifRequestBuilder<ModelType, TranscodeType>, + extends GenericRequestBuilder<ModelType, InputStream, GifData, TranscodeType> {, + private Glide glide;, +, + GifRequestBuilder(Context context, ModelType model,, + LoadProvider<ModelType, InputStream, GifData, TranscodeType> loadProvider,, +
[+++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java, + public BitmapImageViewTarget(ImageView view, boolean waitForLayout) {, + super(view, waitForLayout);, + }, +, +++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java, + public BitmapImageViewTarget(ImageView view, boolean waitForLayout) {, + super(view, waitForLayout);, + }, +, +++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java, + public BitmapThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {, + super(view, waitForLayout);, + }, +, +++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java, + public BitmapImageViewTarget(ImageView view, boolean waitForLayout) {, + super(view, waitForLayout);, + }, +, +++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java, + public BitmapThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {, + super(view, waitForLayout);, + }, +, +++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java, + public DrawableImageViewTarget(ImageView view, boolean waitForLayout) {, + super(view, waitForLayout);, + }, +, +++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java, + public BitmapImageViewTarget(ImageView view, boolean waitForLayout) {,
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java, +package com.bumptech.glide;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assume.assumeTrue;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.Bitmap.CompressFormat;, +import android.graphics.ColorSpace;, +import android.graphics.ColorSpace.Named;, +import android.os.Build;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.load.DecodeFormat;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import java.io.ByteArrayOutputStream;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TestRule;, +import org.junit.runner.RunWith;, +, +@RunWith(AndroidJUnit4.class), +public class WideGamutTest {, + @Rule public final TestRule tearDownGlide = new TearDownGlide();, + private final ConcurrencyHelper concurrency = new ConcurrencyHelper();, + private final Context context = InstrumentationRegistry.getTargetContext();, +, + @Before, + public void setUp() {, + assumeTrue(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O);, + }, +, + @Test,
[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +++ b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +++ b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java, +++ b/library/src/main/java/com/bumptech/glide/util/Util.java]
[+++ b/.gitignore, +library/build/*, +++ b/.gitignore, +library/build/*, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++ b/.gitignore, +library/build/*, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++ /dev/null, +++ b/.gitignore, +library/build/*, +++ b/.gitmodules, +[submodule "samples/flickr/ActionBarSherlock"], + path = samples/flickr/ActionBarSherlock, + url = https://github.com/JakeWharton/ActionBarSherlock.git, +[submodule "library/volley"], + path = library/volley, +[submodule "library/tests/assets/exif-orientation-examples"], + path = library/tests/assets/exif-orientation-examples, + url = https://github.com/recurser/exif-orientation-examples.git, +++
[+++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, + @Mock Transformation<Bitmap> frameTransformation;, + @Mock Resource<Bitmap> transformedResource;, + when(frameTransformation.transform(eq(frameResource), eq(expectedWidth), eq(expectedHeight))), + when(gifDrawable.getFrameTransformation()).thenReturn(frameTransformation);]
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import android.support.annotation.RawRes;, + public RequestBuilder<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer resourceId) {]
[+++ b/samples/svg/build.gradle, + applicationId 'com.bumptech.glide.samples.svg', + commandLine "${android.sdkDirectory}/platform-tools/adb", 'shell', 'am', 'start', '-n', 'com.bumptech.glide.samples.svg/.MainActivity', +++ b/samples/svg/build.gradle, + applicationId 'com.bumptech.glide.samples.svg', + commandLine "${android.sdkDirectory}/platform-tools/adb", 'shell', 'am', 'start', '-n', 'com.bumptech.glide.samples.svg/.MainActivity', +++ b/samples/svg/src/main/AndroidManifest.xml, + package="com.bumptech.glide.samples.svg" >, +++ b/samples/svg/build.gradle, + applicationId 'com.bumptech.glide.samples.svg', + commandLine "${android.sdkDirectory}/platform-tools/adb", 'shell', 'am', 'start', '-n', 'com.bumptech.glide.samples.svg/.MainActivity', +++ b/samples/svg/src/main/AndroidManifest.xml, + package="com.bumptech.glide.samples.svg" >, +++ b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/MainActivity.java, +package com.bumptech.glide.samples.svg;, +, +import android.app.Activity;, +import android.content.ContentResolver;, +import android.graphics.drawable.PictureDrawable;, +import android.net.Uri;, +import android.os.Bundle;, +import android.util.Log;, +import android.view.View;, +import android.widget.ImageView;, +import android.widget.TextView;, +, +import com.bumptech.glide.GenericRequestBuilder;, +import com.bumptech.glide.Glide;, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +import com.bumptech.glide.load.model.StreamEncoder;, +import com.bumptech.glide.load.resource.file.FileToStreamDecoder;, +import com.caverock.androidsvg.SVG;, +, +import java.io.File;, +import java.io.InputStream;, +, +/**, + * Displays an SVG image loaded
[+++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.7.0', + <version>3.7.0</version>, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.7.0', + <version>3.7.0</version>, +++ b/gradle.properties, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.7.0', + <version>3.7.0</version>, +++ b/gradle.properties, +++ b/integration/gifencoder/build.gradle, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.7.0', + <version>3.7.0</version>, +++ b/gradle.properties, +++ b/integration/gifencoder/build.gradle, +++ b/integration/okhttp/build.gradle, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.7.0', + <version>3.7.0</version>, +++ b/gradle.properties, +++ b/integration/gifencoder/build.gradle, +++ b/integration/okhttp/build.gradle, +++ b/integration/okhttp3/build.gradle, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.7.0', + <version>3.7.0</version>, +++ b/gradle.properties, +++ b/integration/gifencoder/build.gradle, +++ b/integration/okhttp/build.gradle, +++ b/integration/okhttp3/build.gradle, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + private volatile Call call;, + call = client.newCall(request);, + call.enqueue(new okhttp3.Callback() {, + Call local = call;, + if (local != null) {, + local.cancel();, +
[+++ b/.travis.yml, + - build-tools-26.0.1, + - android-26, + - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, + - $HOME/.android/build-cache, +, +++ b/.travis.yml, + - build-tools-26.0.1, + - android-26, + - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, + - $HOME/.android/build-cache, +, +++ b/build.gradle, + maven {, + url "https://maven.google.com", + }, +++ b/.travis.yml, + - build-tools-26.0.1, + - android-26, + - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, + - $HOME/.android/build-cache, +, +++ b/build.gradle, + maven {, + url "https://maven.google.com", + }, +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=26.0.1, +COMPILE_SDK_VERSION=26, +BUILD_TOOLS_VERSION=26.0.1, +TARGET_SDK_VERSION=26, +++ b/.travis.yml, + - build-tools-26.0.1, + - android-26, + - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, + - $HOME/.android/build-cache, +, +++ b/build.gradle, + maven {,
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DefaultResourceRunnerFactory.java, + private ExecutorService diskCacheService;, + ExecutorService diskCacheService, ExecutorService resizeService) {, + this.diskCacheService = diskCacheService;, + this.service = resizeService;, + sourceRunner, diskCacheService, service, engineJob, priority);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DefaultResourceRunnerFactory.java, + private ExecutorService diskCacheService;, + ExecutorService diskCacheService, ExecutorService resizeService) {, + this.diskCacheService = diskCacheService;, + this.service = resizeService;, + sourceRunner, diskCacheService, service, engineJob, priority);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineBuilder.java, +import android.os.Message;, + private ExecutorService diskCacheService;, + private ExecutorService resizeService;, + public EngineBuilder setResizeService(ExecutorService service) {, + resizeService = service;, + return this;, + }, +, + public EngineBuilder setDiskCacheService(ExecutorService service) {, + diskCacheService = service;, + if (resizeService == null) {, + resizeService =
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java, +import org.robolectric.RobolectricTestRunner;, + public void testReturnsSizeFromDrawable() {, + when(drawable.getSize()).thenReturn(size);, + assertEquals(size, resource.getSize());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java, +import org.robolectric.RobolectricTestRunner;, + public void testReturnsSizeFromDrawable() {, + when(drawable.getSize()).thenReturn(size);, + assertEquals(size, resource.getSize());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +import static com.google.common.truth.Truth.assertThat;, +import org.robolectric.RobolectricTestRunner;, +, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +, + @Mock private Drawable.Callback cb;, + @Mock private BitmapPool bitmapPool;, + @Mock private GifFrameLoader frameLoader;, + @Mock private Paint paint;, + @Mock private Transformation<Bitmap> transformation;, + MockitoAnnotations.initMocks(this);, + drawable = new GifDrawable(RuntimeEnvironment.application, frameLoader, bitmapPool, paint);, + when(frameLoader.getWidth()).thenReturn(frameWidth);, + when(frameLoader.getHeight()).thenReturn(frameHeight);, + when(frameLoader.getCurrentFrame()).thenReturn(firstFrame);, + drawable = new GifDrawable(RuntimeEnvironment.application, frameLoader, bitmapPool, paint);, + verify(frameLoader).subscribe(eq(drawable));, + verify(frameLoader).subscribe(eq(drawable));, + verify(frameLoader, never()).subscribe(eq(drawable));, + when(frameLoader.getFrameCount()).thenReturn(1);,
[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.Encoder;, +, + @Override, + public BitmapRequestBuilder<ModelType, TranscodeType> thumbnail(, + GenericRequestBuilder<ModelType, ImageVideoWrapper, Bitmap, TranscodeType> thumbnailRequest) {, + super.thumbnail(thumbnailRequest);, + return this;, + }, +, + @Override, + public BitmapRequestBuilder<ModelType, TranscodeType> sourceEncoder(Encoder<ImageVideoWrapper> sourceEncoder) {, + super.sourceEncoder(sourceEncoder);, + return this;, + }, +, + @Override, + public BitmapRequestBuilder<ModelType, TranscodeType> cacheSource(boolean cacheSource) {, + super.cacheSource(cacheSource);, + return this;, + }, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.Encoder;, +, + @Override, + public BitmapRequestBuilder<ModelType, TranscodeType> thumbnail(, + GenericRequestBuilder<ModelType, ImageVideoWrapper, Bitmap, TranscodeType> thumbnailRequest) {, + super.thumbnail(thumbnailRequest);, + return this;, + }, +, + @Override, + public BitmapRequestBuilder<ModelType, TranscodeType> sourceEncoder(Encoder<ImageVideoWrapper> sourceEncoder) {, + super.sourceEncoder(sourceEncoder);, +
[+++ b/library/src/androidTest/java/com/bumptech/glide/resize/load/ExifTest.java, + assertEquals(new ImageHeaderParser(is, byteArrayPool).getOrientation(),, +, + @Test, + public void testHandlesInexactSizesInByteArrayPools() {, + for (int i = 1; i <= 8; i++) {, + byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, + assertOrientation("Portrait", i);, + }, + for (int i = 1; i <= 8; i++) {, + byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, + assertOrientation("Landscape", i);, + }, + }, +++ b/library/src/androidTest/java/com/bumptech/glide/resize/load/ExifTest.java, + assertEquals(new ImageHeaderParser(is, byteArrayPool).getOrientation(),, +, + @Test, + public void testHandlesInexactSizesInByteArrayPools() {, + for (int i = 1; i <= 8; i++) {, + byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, + assertOrientation("Portrait", i);, + }, + for (int i = 1; i <= 8; i++) {, +
[+++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java, +import android.support.annotation.Nullable;, +, + @Nullable, + public ErrorRequestCoordinator(@Nullable RequestCoordinator coordinator) {, + primary.clear();, + coordinator.onRequestFailed(this);, +++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java, +import android.support.annotation.Nullable;, +, + @Nullable, + public ErrorRequestCoordinator(@Nullable RequestCoordinator coordinator) {, + primary.clear();, + coordinator.onRequestFailed(this);, +++ b/library/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java, +package com.bumptech.glide.request;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +, +@RunWith(JUnit4.class), +public class ErrorRequestCoordinatorTest {, +, + @Mock private Request primary;, + @Mock private Request error;, + @Mock private RequestCoordinator parent;, + private ErrorRequestCoordinator coordinator;, +, + @Before, + public void
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + *, + * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(Target)}., + @Deprecated, + *, + * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(int, int)}., + @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + *, + * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(Target)}., + @Deprecated, + *, + * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(int, int)}., + @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +import static com.bumptech.glide.request.RequestOptions.diskCacheStrategyOf;, +import static com.bumptech.glide.request.RequestOptions.skipMemoryCacheOf;, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +import java.io.File;, +, + private static final RequestOptions DOWNLOAD_ONLY_OPTIONS =, + diskCacheStrategyOf(DiskCacheStrategy.DATA).priority(Priority.LOW), + .skipMemoryCache(true);, +, + * Attempts always load the resource into the cache and return the {@link File} containing
[+++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import android.support.annotation.NonNull;, + public ReEncodingGifResourceEncoder(@NonNull Context context, @NonNull BitmapPool bitmapPool) {, + public EncodeStrategy getEncodeStrategy(@NonNull Options options) {, + public boolean encode(@NonNull Resource<GifDrawable> resource, @NonNull File file,, + @NonNull Options options) {, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import android.support.annotation.NonNull;, + public ReEncodingGifResourceEncoder(@NonNull Context context, @NonNull BitmapPool bitmapPool) {, + public EncodeStrategy getEncodeStrategy(@NonNull Options options) {, + public boolean encode(@NonNull Resource<GifDrawable> resource, @NonNull File file,, + @NonNull Options options) {, +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, +import android.support.annotation.NonNull;, + boolean encode(@NonNull T data, @NonNull File file, @NonNull Options options);, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import android.support.annotation.NonNull;, + public ReEncodingGifResourceEncoder(@NonNull Context context, @NonNull BitmapPool bitmapPool) {, + public EncodeStrategy
[+++ b/.travis.yml, +sudo: false]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBitmapTest.java, +package com.bumptech.glide;, +, +, +import static com.google.common.truth.Truth.assertThat;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.BitmapFactory;, +import android.graphics.drawable.Drawable;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;, +import com.bumptech.glide.load.engine.cache.MemoryCacheAdapter;, +import com.bumptech.glide.request.FutureTarget;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +@RunWith(AndroidJUnit4.class), +public class LoadBitmapTest {, + @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();, + private final ConcurrencyHelper concurrency = new ConcurrencyHelper();, + private Context context;, +, + @Before, + public void setUp() {, + context = InstrumentationRegistry.getTargetContext();, + }, +, + @Test, + public void clearFromRequestBuilder_asDrawable_withLoadedBitmap_doesNotRecycleBitmap() {, + Glide.init(context, new GlideBuilder(), + .setMemoryCache(new
[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + previous.recycle();, + return GenericRequest.obtain(, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, + previous.recycle();, + return GenericRequest.obtain(, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +import java.util.ArrayDeque;, +import java.util.Queue;, + private static final String TAG = "GenericRequest";, + private int placeholderResourceId;, + private int errorResourceId;, + private Context context;, + private Transformation<Z> transformation;, + private LoadProvider<A, T, Z, R> loadProvider;, + private RequestCoordinator requestCoordinator;, + private A model;, + private Class<R> transcodeClass;, + private boolean isMemoryCacheable;, + private Priority priority;, + private Target<R> target;, + private RequestListener<A, R> requestListener;, + private float sizeMultiplier;, + private Engine engine;, + private GlideAnimationFactory<R> animationFactory;, + private int overrideWidth;, + private int
[+++ b/gradle.properties, +VOLLEY_VERSION=1.0.0, +++ b/gradle.properties, +VOLLEY_VERSION=1.0.0, +++ b/integration/volley/build.gradle, + compile "com.android.volley:volley:${VOLLEY_VERSION}"]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java, + // See https://bit.ly/2IW5AmI, + private static boolean isSamsungGalaxyS7Edge() {, + return Build.MODEL.startsWith("SM-G935") || Build.MODEL.startsWith("SM-G930");, + }, +, + *, + * <p>Reduced on S7 Edge devices due to https://github.com/bumptech/glide/issues/3275., + private static final int MAXIMUM_FDS_FOR_HARDWARE_CONFIGS = isSamsungGalaxyS7Edge() ? 350 : 700;]
[+++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +import com.bumptech.glide.request.target.ViewTarget;, + public <X> ViewTarget<ImageView, X> buildImageViewTarget(, + ImageView imageView, Class<X> transcodeClass) {, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +import com.bumptech.glide.request.target.ViewTarget;, + public <X> ViewTarget<ImageView, X> buildImageViewTarget(, + ImageView imageView, Class<X> transcodeClass) {, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import com.bumptech.glide.request.target.ViewTarget;, + public ViewTarget<ImageView, TranscodeType> into(ImageView view) {, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +import com.bumptech.glide.request.target.ViewTarget;, + public <X> ViewTarget<ImageView, X> buildImageViewTarget(, + ImageView imageView, Class<X> transcodeClass) {, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import com.bumptech.glide.request.target.ViewTarget;, + public ViewTarget<ImageView, TranscodeType> into(ImageView view) {, +++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTargetFactory.java, + public <Z> ViewTarget<ImageView, Z> buildTarget(ImageView view, Class<Z> clazz) {, + return (ViewTarget<ImageView, Z>) new BitmapImageViewTarget(view);, + return (ViewTarget<ImageView, Z>) new DrawableImageViewTarget(view);, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +import com.bumptech.glide.request.target.ViewTarget;, +
[+++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, +import android.annotation.TargetApi;, +import android.content.UriMatcher;, +import android.os.Build;, +import android.provider.ContactsContract;, + /**, + * A lookup uri (e.g. content://com.android.contacts/contacts/lookup/3570i61d948d30808e537), + */, + private static final int ID_CONTACTS_LOOKUP = 1;, + /**, + * A contact thumbnail uri (e.g. content://com.android.contacts/contacts/38/photo), + */, + private static final int ID_CONTACTS_THUMBNAIL = 2;, + /**, + * A contact uri (e.g. content://com.android.contacts/contacts/38), + */, + private static final int ID_CONTACTS_CONTACT = 3;, + /**, + * A contact display photo (high resolution) uri, + * (e.g. content://com.android.contacts/5/display_photo), + */, + private static final int ID_CONTACTS_PHOTO = 4;, + /**,
[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, + List<Class<Transcode>> registeredTranscodeClasses = transcoderRegistry, + .getTranscodeClasses(registeredResourceClass, transcodeClass);, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, + List<Class<Transcode>> registeredTranscodeClasses = transcoderRegistry, + .getTranscodeClasses(registeredResourceClass, transcodeClass);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java, + // throw new IllegalStateException(, + // "Failed to find any load path from " + helper.getModelClass() + " to ", + // + helper.getTranscodeClass());]
[+++ b/.gitignore, +docs/**/*, +++ b/.gitignore, +docs/**/*, +++ b/README.md, +Sam Judd - @samajudd, +++ b/.gitignore, +docs/**/*, +++ b/README.md, +Sam Judd - @samajudd, +++ b/library/src/com/bumptech/glide/Glide.java, + if (tag instanceof ImageViewTarget) {, + if (tag != null) {, + Log.d("Replacing existing tag=" + tag + " on view=" + imageView + " with an ImageViewTarge");, + }, + ImagePresenter<T> result = target.getImagePresenter();, +, + if (previous != null && result == null) {, + previous = null;, + }, +++ b/.gitignore, +docs/**/*, +++ b/README.md, +Sam Judd - @samajudd, +++ b/library/src/com/bumptech/glide/Glide.java, + if (tag instanceof ImageViewTarget) {, + if (tag != null) {,
[+++ b/gradle.properties, +VERSION_NAME=3.6.0-SNAPSHOT, +VERSION_MINOR=6, +VERSION_PATCH=0, +VERSION_CODE=11, +++ b/gradle.properties, +VERSION_NAME=3.6.0-SNAPSHOT, +VERSION_MINOR=6, +VERSION_PATCH=0, +VERSION_CODE=11, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.3.0-SNAPSHOT, +VERSION_MINOR=3, +VERSION_PATCH=0, +VERSION_CODE=7, +++ b/gradle.properties, +VERSION_NAME=3.6.0-SNAPSHOT, +VERSION_MINOR=6, +VERSION_PATCH=0, +VERSION_CODE=11, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.3.0-SNAPSHOT, +VERSION_MINOR=3, +VERSION_PATCH=0, +VERSION_CODE=7, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.3.0-SNAPSHOT, +VERSION_MINOR=3, +VERSION_PATCH=0, +VERSION_CODE=7]
[+++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, + * @param <ModelType> The type of model to load the {@link Bitmap} or transcoded class from., +public class BitmapTypeRequest<ModelType> extends BitmapRequestBuilder<ModelType, Bitmap> {, + private final ModelType model;, + private final ModelLoader<ModelType, InputStream> streamModelLoader;, + private ModelLoader<ModelType, ParcelFileDescriptor> fileDescriptorModelLoader;, + BitmapTypeRequest(Context context, ModelType model,, + ModelLoader<ModelType, InputStream> streamModelLoader,, + ModelLoader<ModelType, ParcelFileDescriptor> fileDescriptorModelLoader,, + public <R> BitmapRequestBuilder<ModelType, R> transcode(ResourceTranscoder<Bitmap, R> transcoder,, + Class<R> transcodeClass) {, + return optionsApplier.apply(model, new BitmapRequestBuilder<ModelType, R>(context, model,, + public BitmapRequestBuilder<ModelType, byte[]> toBytes() {, + public BitmapRequestBuilder<ModelType, byte[]> toBytes(Bitmap.CompressFormat compressFormat, int quality) {, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, + * @param <ModelType> The type of model
[+++ b/.gitignore, +# Android, +local.properties, +*.keystore, +*.DS_Store, +proguard-project.txt, +, +# Gradle, +**/.gradle, +**/.settings, +**/build, +, +# gh-pages, +docs/**/*, +, +# Vim, +, +# Intellij , +*.ipr, +*.iml, +*.iws, +**/.idea/.name, +**/.idea/compiler.xml, +**/.idea/copyright/profiles_settings.xml, +**/.idea/encodings.xml, +**/.idea/misc.xml, +**/.idea/modules.xml, +**/.idea/scopes/scope_settings.xml, +**/.idea/vcs.xml, +**/.idea/libraries, +**/.idea/workspace.xml, +**/.idea/tasks.xml, +**/.idea/gradle.xml, +**/.idea/dictionaries, +**/.idea/dataSources.ids, +**/.idea/datasources.xml, +**/.idea/uiDesigner.xml, +, +++ b/.gitignore, +# Android, +local.properties, +*.keystore, +*.DS_Store, +proguard-project.txt, +, +# Gradle, +**/.gradle, +**/.settings, +**/build, +, +# gh-pages, +docs/**/*, +, +# Vim, +, +# Intellij , +*.ipr, +*.iml, +*.iws, +**/.idea/.name, +**/.idea/compiler.xml, +**/.idea/copyright/profiles_settings.xml, +**/.idea/encodings.xml, +**/.idea/misc.xml, +**/.idea/modules.xml, +**/.idea/scopes/scope_settings.xml, +**/.idea/vcs.xml, +**/.idea/libraries, +**/.idea/workspace.xml, +**/.idea/tasks.xml, +**/.idea/gradle.xml, +**/.idea/dictionaries, +**/.idea/dataSources.ids, +**/.idea/datasources.xml, +**/.idea/uiDesigner.xml, +, +++ /dev/null, +++ b/.gitignore, +# Android, +local.properties, +*.keystore, +*.DS_Store,
[+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java, +import com.bumptech.glide.Glide;, +import com.bumptech.glide.Registry;, + * An interface for creating a {@link ModelLoader} for a given model type., + *, + * <p>The application {@link android.content.Context} can be passed in to the constructor of the, + * factory when necessary. It's unsafe to retain {@link android.app.Activity}, + * {@link android.content.Context}s in factories. The {@link android.content.Context} can be, + * obtained from, + * {@link com.bumptech.glide.module.LibraryGlideModule#registerComponents(Context, Glide, Registry)}, + * in most cases.]
[+++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/build.gradle, +// See http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html., +if (JavaVersion.current().isJava8Compatible()) {, + allprojects {, + tasks.withType(Javadoc) {, + options.addStringOption('Xdoclint:none', '-quiet'), + }, + }, +}, +, +subprojects {, + tasks.withType(JavaCompile) {, + sourceCompatibility = 1.7, + targetCompatibility =
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, + return set(GifOptions.DISABLE_ANIMATION, true);]
[+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++
[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, + public void testGenericLoader() throws Exception {, + File expected = new File("test");, +, + GlideUrl glideUrl = mock(GlideUrl.class);, + ResourceFetcher<File> resourceFetcher = mock(ResourceFetcher.class);, + when(resourceFetcher.loadResource(any(Priority.class))).thenReturn(expected);, + ModelLoader<GlideUrl, File> modelLoader = mock(ModelLoader.class);, + when(modelLoader.getId(eq(glideUrl))).thenReturn("id");, + when(modelLoader.getResourceFetcher(eq(glideUrl), anyInt(), anyInt())), + .thenReturn(resourceFetcher);, +, + Resource<File> expectedResource = mock(Resource.class);, + when(expectedResource.get()).thenReturn(expected);, + ResourceDecoder<File, File> sourceDecoder = mock(ResourceDecoder.class);, + when(sourceDecoder.decode(eq(expected), anyInt(), anyInt())).thenReturn(expectedResource);, + when(sourceDecoder.getId()).thenReturn("sourceDecoderId");, + ResourceDecoder<InputStream, File> cacheDecoder = mock(ResourceDecoder.class);, + when(cacheDecoder.getId()).thenReturn("cacheDecoderId");, + ResourceEncoder<File> encoder = mock(ResourceEncoder.class);, + when(encoder.getId()).thenReturn("encoderId");, +, + Glide.with(getContext()), + .using(modelLoader, File.class), + .load(glideUrl), + .as(File.class), + .imageDecoder(sourceDecoder), + .cacheDecoder(cacheDecoder), + .encoder(encoder), + .into(target);,
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, + long getMaxSize();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, + long getMaxSize();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, + public long getMaxSize() {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, + long getMaxSize();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, + public long getMaxSize() {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + private final long initialMaxSize;, + private long maxSize;, + private long currentSize;, + LruBitmapPool(long maxSize, LruPoolStrategy strategy, Set<Bitmap.Config> allowedConfigs) {, + public LruBitmapPool(long maxSize) {, + public LruBitmapPool(long maxSize, Set<Bitmap.Config> allowedConfigs) {, + public long getMaxSize() {, + private synchronized void trimToSize(long size) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, + long getMaxSize();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, + public long getMaxSize() {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + private final long initialMaxSize;, + private long maxSize;,
[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.annotation.Nullable;, + @Nullable, + if (loadPathCache.isEmptyLoadPath(result)) {, + return null;, + } else if (result == null) {, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.annotation.Nullable;, + @Nullable, + if (loadPathCache.isEmptyLoadPath(result)) {, + return null;, + } else if (result == null) {, +++ b/library/src/main/java/com/bumptech/glide/provider/LoadPathCache.java, +import com.bumptech.glide.load.engine.DecodePath;, +import com.bumptech.glide.load.resource.transcode.UnitTranscoder;, +import java.util.Collections;, + private static final LoadPath<?, ?, ?> NO_PATHS_SIGNAL =, + new LoadPath<>(, + Object.class,, + Object.class,, + Object.class,, + Collections.singletonList(, + new DecodePath<>(, + Object.class,, + Object.class,, + Object.class,, + Collections.emptyList(),, + new UnitTranscoder<>(),, + /*listPool=*/ null)),, + /*listPool=*/ null);, +, + /**, + * Returns {@code} true if
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java, +package com.bumptech.glide;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.Bitmap.Config;, +import android.graphics.Canvas;, +import android.graphics.Color;, +import android.graphics.drawable.BitmapDrawable;, +import android.graphics.drawable.ColorDrawable;, +import android.graphics.drawable.Drawable;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.resource.bitmap.TransformationUtils;, +import com.bumptech.glide.request.RequestOptions;, +import java.util.concurrent.ExecutionException;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.ExpectedException;, +import org.junit.runner.RunWith;, +, +@RunWith(AndroidJUnit4.class), +public class DrawableTransformationTest {, + @Rule public ExpectedException expectedException = ExpectedException.none();, +, + private Context context;, +, + @Before, + public void setUp() {, + context = InstrumentationRegistry.getTargetContext();, + }, +, + @After, + public void tearDown() {, + Glide.get(context).clearDiskCache();, + Glide.tearDown();,
[+++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + + " annotationProcessor compile dependency on com.github.bumptech.glide:compiler"]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ResourceBitmapDecoder.java, + if (drawableResource == null) {, + return null;, + }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ResourceBitmapDecoder.java, + if (drawableResource == null) {, + return null;, + }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/NonOwnedDrawableResource.java, +import android.support.annotation.Nullable;, + @Nullable, + static Resource<Drawable> newInstance(@Nullable Drawable drawable) {, + return drawable != null ? new NonOwnedDrawableResource(drawable) : null;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ResourceBitmapDecoder.java, + if (drawableResource == null) {, + return null;, + }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/NonOwnedDrawableResource.java, +import android.support.annotation.Nullable;, + @Nullable, + static Resource<Drawable> newInstance(@Nullable Drawable drawable) {, + return drawable != null ? new NonOwnedDrawableResource(drawable) : null;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java, +import android.support.annotation.Nullable;, + @Nullable]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java, +public enum DiskCacheStrategy {, + ALL(true /*decodeCachedData*/, true /*decodeCachedResource*/) {, + },, + NONE(false /*decodeCachedData*/, false /*decodeCachedResource*/) {, + },, + DATA(true /*decodeCachedData*/, false /*decodeCachedResource*/) {, + },, + RESOURCE(false /*decodeCachedData*/, true /*decodeCachedResource*/) {, + return false;, + },, + AUTOMATIC(true /*decodeCachedData*/, true /*decodeCachedResource*/) {, + private final boolean decodeCachedData;, + private final boolean decodeCachedResource;, +, + DiskCacheStrategy(boolean decodeCachedData,, + boolean decodeCachedResource) {, + this.decodeCachedData = decodeCachedData;, + this.decodeCachedResource = decodeCachedResource;, + }, +, + public boolean decodeCachedResource() {, + return decodeCachedResource;, + }, + public boolean decodeCachedData() {, + return decodeCachedData;, + }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java, +public
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + private final RequestManagerRetriever requestManagerRetriever;, + RequestManagerRetriever requestManagerRetriever,, + this.requestManagerRetriever = requestManagerRetriever;, +, + /**, + * Internal method., + */, + public RequestManagerRetriever getRequestManagerRetriever() {, + return requestManagerRetriever;, + }, +, + private static RequestManagerRetriever getRetriever(@Nullable Context context) {, + // Context could be null for other reasons (ie the user passes in null), but in practice it will, + // only occur due to errors with the Fragment lifecycle., + if (context == null) {, + throw new IllegalArgumentException(, + "You cannot start a load on a Fragment where getActivity() returns null (which usually", +
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + return into(target, getMutableOptions());, + }, +, + private <Y extends Target<TranscodeType>> Y into(@NonNull Y target, RequestOptions options) {, + options = options.autoClone();, + Request request = buildRequest(target, options);, +, + RequestOptions requestOptions = this.requestOptions;, + // Clone in this method so that if we use this RequestBuilder to load into a View and then, + // into a different target, we don't retain the transformation applied based on the previous, + // View's scale type., + requestOptions.clone().optionalCenterCrop();, + requestOptions.clone().optionalCenterInside();, + requestOptions.clone().optionalFitCenter();, + requestOptions.clone().optionalCenterInside();, + return into(context.buildImageViewTarget(view, transcodeClass), requestOptions);, + private Request buildRequest(Target<TranscodeType> target, RequestOptions requestOptions) {,
[+++ b/.gitignore, +# sed, +*.bak, +, +++ b/.gitignore, +# sed, +*.bak, +, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]instrumentation[/\\]src[/\\].*" checks="Javadoc.*"/>, +++ b/.gitignore, +# sed, +*.bak, +, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]instrumentation[/\\]src[/\\].*" checks="Javadoc.*"/>, +++ b/instrumentation/build.gradle, +tasks.whenTaskAdded { task ->, + if (task.name.equals("lint")) {, + task.enabled = false, + }, +}, + androidTestCompile project(":annotation:compiler"), +++ b/.gitignore, +# sed, +*.bak, +, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]instrumentation[/\\]src[/\\].*" checks="Javadoc.*"/>, +++ b/instrumentation/build.gradle, +tasks.whenTaskAdded { task ->, + if (task.name.equals("lint")) {, + task.enabled = false, + }, +}, + androidTestCompile project(":annotation:compiler"), +++ b/instrumentation/src/androidTest/AndroidManifest.xml, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", + package="com.bumptech.glide.instrumentation.test">, + <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />, + <application>, + </application>, +</manifest>, +++ b/.gitignore,
[+++ b/build.gradle, + classpath "se.bjurr.violations:violations-gradle-plugin:${VIOLATIONS_PLUGIN_VERSION}", +++ b/build.gradle, + classpath "se.bjurr.violations:violations-gradle-plugin:${VIOLATIONS_PLUGIN_VERSION}", +++ b/gradle.properties, +VIOLATIONS_PLUGIN_VERSION=1.3, +++ b/build.gradle, + classpath "se.bjurr.violations:violations-gradle-plugin:${VIOLATIONS_PLUGIN_VERSION}", +++ b/gradle.properties, +VIOLATIONS_PLUGIN_VERSION=1.3, +++ b/library/build.gradle, +import se.bjurr.violations.gradle.plugin.ViolationsTask, +, +apply plugin: "se.bjurr.violations.violations-gradle-plugin", + // Failures are caught and printed by the violations plugin below., + ignoreFailures = true, +, + xml.enabled = true, + html.enabled = false, + // Failures are caught and printed by the violations plugin below., + ignoreFailures = true, +, + xml.enabled = true, + html.enabled = false, +, + task violations(type: ViolationsTask) {, + minSeverity = 'INFO', + detailLevel = 'VERBOSE', + maxViolations = 0, +, +
[+++ b/library/.gitignore, +tests/bin, +libs/volley.jar, +++ b/library/.gitignore, +tests/bin, +libs/volley.jar, +++ b/library/lint.xml, + <ignore path="src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java" />, +++ b/library/.gitignore, +tests/bin, +libs/volley.jar, +++ b/library/lint.xml, + <ignore path="src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java" />, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/AttributeStrategy.java, +package com.bumptech.glide.resize.bitmap_recycle;, +, +import android.graphics.Bitmap;, +, +class AttributeStrategy implements LruPoolStrategy {, + private final KeyPool keyPool = new KeyPool();, + private final GroupedLinkedMap<Key, Bitmap> groupedMap = new GroupedLinkedMap<Key, Bitmap>();, +, + public void put(Bitmap bitmap) {, + final Key key = keyPool.get(bitmap.getWidth(), bitmap.getHeight(), bitmap.getConfig());, +, + groupedMap.put(key, bitmap);, + }, +, + @Override, + public Bitmap get(int width, int height, Bitmap.Config config) {, + final Key key = keyPool.get(width, height, config);, +, +
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java, + try {, + } finally {, + Glide.tearDown();, + }, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java, + try {, + } finally {, + Glide.tearDown();, + }, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + glide.engine.shutdown();, + glide.engine.clearDiskCache();, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java, + try {, + } finally {, + Glide.tearDown();, + }, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + glide.engine.shutdown();, + glide.engine.clearDiskCache();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.TimeUnit;, + public void shutdown() {, + engineJobFactory.shutdown();, + void shutdown() {, + shutdownAndAwaitTermination(diskCacheExecutor);, + shutdownAndAwaitTermination(sourceExecutor);, + shutdownAndAwaitTermination(sourceUnlimitedExecutor);, + shutdownAndAwaitTermination(animationExecutor);, +, + private static void shutdownAndAwaitTermination(ExecutorService pool) {, + long shutdownSeconds = 5;, + pool.shutdown();, + try {, + if (!pool.awaitTermination(shutdownSeconds, TimeUnit.SECONDS)) {,
[+++ b/library/res/values/ids.xml, +<?xml version="1.0" encoding="utf-8"?>, +<resources>, + <item type="id" name="image_presenter_id" />, +</resources>, +++ b/library/res/values/ids.xml, +<?xml version="1.0" encoding="utf-8"?>, +<resources>, + <item type="id" name="image_presenter_id" />, +</resources>, +++ b/library/src/com/bumptech/glide/Glide.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import android.view.animation.Animation;, +import android.view.animation.AnimationUtils;, +import android.widget.ImageView;, +import com.bumptech.glide.loader.image.ImageLoader;, +import com.bumptech.glide.loader.model.FileStreamLoader;, +import com.bumptech.glide.loader.model.ModelStreamLoader;, +import com.bumptech.glide.loader.model.UrlStreamLoader;, +import com.bumptech.glide.presenter.ImagePresenter;, +import com.bumptech.glide.presenter.ImageSetCallback;, +import com.bumptech.glide.resize.ImageManager;, +import com.bumptech.glide.resize.loader.Approximate;, +import com.bumptech.glide.resize.loader.CenterCrop;, +import com.bumptech.glide.resize.loader.FitCenter;, +, +import java.io.File;, +import java.net.URL;, +import java.util.HashMap;, +import java.util.Map;, +, +/**, + * Static helper methods/classes to present a simple unified interface for using glide. Allows 90%, + * of the functionality of the library. The trade off is some extra unused
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java, +import android.os.Handler;, +import android.os.Looper;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, + // The following section is a hack to workaround a weird behavior where a post in RequestManager, + // can cause a failed request to be started twice in a row if the first attempt happens before., + // the post. This seems rather unlikely to happen in real applications and it only occurs when, + // the request fails unexpectedly, so we're working around this weird behavior in this test., + // See #3551., +, + // Trigger the Glide application RequestManager to be created., + Glide.get(context).getRequestManagerRetriever().get(context);,
[+++ b/annotation/compiler/build.gradle, +// Make sure running `gradlew :annotation:compiler:check` actually does full quality control., +test.dependsOn ':annotation:compiler:test:test', +, + inputs.files compiledJar, +++ b/annotation/compiler/build.gradle, +// Make sure running `gradlew :annotation:compiler:check` actually does full quality control., +test.dependsOn ':annotation:compiler:test:test', +, + inputs.files compiledJar, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + * {@literal @android.support.annotation.NonNull}, + * public java.util.Set&lt;java.lang.Class&lt;?>> getExcludedModuleClasses() {, + .addAnnotation(ClassName.get("android.support.annotation", "NonNull")), +++ b/annotation/compiler/build.gradle, +// Make sure running `gradlew :annotation:compiler:check` actually does full quality control., +test.dependsOn ':annotation:compiler:test:test', +, + inputs.files compiledJar, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + * {@literal @android.support.annotation.NonNull}, + * public java.util.Set&lt;java.lang.Class&lt;?>> getExcludedModuleClasses() {, + .addAnnotation(ClassName.get("android.support.annotation", "NonNull")), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + private static final AnnotationSpec NON_NULL = AnnotationSpec, + .builder(ClassName.get("android.support.annotation",
[+++ b/gradle.properties, +VERSION_NAME=3.5.0, +++ b/gradle.properties, +VERSION_NAME=3.5.0, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.2.0, +++ b/gradle.properties, +VERSION_NAME=3.5.0, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.2.0, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.2.0]
[+++ b/gradle.properties, +VERSION_NAME=3.4.0-SNAPSHOT, +VERSION_MINOR=4, +VERSION_CODE=6, +++ b/gradle.properties, +VERSION_NAME=3.4.0-SNAPSHOT, +VERSION_MINOR=4, +VERSION_CODE=6, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.1.0-SNAPSHOT, +VERSION_MINOR=1, +VERSION_CODE=2, +++ b/gradle.properties, +VERSION_NAME=3.4.0-SNAPSHOT, +VERSION_MINOR=4, +VERSION_CODE=6, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.1.0-SNAPSHOT, +VERSION_MINOR=1, +VERSION_CODE=2, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.1.0-SNAPSHOT, +VERSION_MINOR=1, +VERSION_CODE=2]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + boolean isExifOrientationRequired = TransformationUtils.isExifOrientationRequired(orientation);, + calculateConfig(, + is,, + decodeFormat,, + isHardwareConfigAllowed,, + isExifOrientationRequired,, + options,, + targetWidth,, + targetHeight);, + static void calculateScaling(DownsampleStrategy downsampleStrategy,, + int degreesToRotate,, + boolean isExifOrientationRequired,, + targetWidth,, + targetHeight,, + optionsWithScaling,, + format,, + isHardwareConfigAllowed,, + isExifOrientationRequired)) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + boolean isExifOrientationRequired = TransformationUtils.isExifOrientationRequired(orientation);, + calculateConfig(, + is,, + decodeFormat,, + isHardwareConfigAllowed,, + isExifOrientationRequired,, + options,, + targetWidth,, + targetHeight);, + static void calculateScaling(DownsampleStrategy downsampleStrategy,, + int degreesToRotate,, + boolean isExifOrientationRequired,, + targetWidth,, + targetHeight,, + optionsWithScaling,, + format,, + isHardwareConfigAllowed,, + isExifOrientationRequired)) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java, + boolean isHardwareConfigAllowed,,
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, + // GIFs, among other types, end up with a native Bitmap config that doesn't map to a java, + // config and is treated as null in java code. On KitKat+ these Bitmaps can be reconfigured, + // and are suitable for re-use., + if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {, + configs.remove(Bitmap.Config.HARDWARE);, + }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, + // GIFs, among other types, end up with a native Bitmap config that doesn't map to a java, + // config and is treated as null in java
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, + any(),, + any(),, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, + any(),, + any(),, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java, + any(),, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, + any(),, + any(),, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java, + any(),, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResource.java, + private final BitmapDrawable drawable;, + private final BitmapPool bitmapPool;, +, + private BitmapDrawable next;, +, + this.next = drawable;, + // We usually just have one consumer, so return the given drawable (created on a bg thread) to the first, + // consumer and then create a new drawable for each subsequent consumer., + if (next == null) {, + next = (BitmapDrawable) drawable.getConstantState().newDrawable();, + }, + BitmapDrawable result = next;, + next = null;, + return result;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResource.java, + private final BitmapDrawable drawable;, + private final BitmapPool bitmapPool;, +, + private BitmapDrawable next;, +,
[+++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +import android.content.res.AssetFileDescriptor;, + AssetFileDescriptor assetFileDescriptor = contentResolver.openAssetFileDescriptor(uri, "r");, + if (assetFileDescriptor == null) {, + throw new FileNotFoundException("FileDescriptor is null for: " + uri);, + }, + return assetFileDescriptor.getParcelFileDescriptor();, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +import android.content.res.AssetFileDescriptor;, + AssetFileDescriptor assetFileDescriptor = contentResolver.openAssetFileDescriptor(uri, "r");, + if (assetFileDescriptor == null) {, + throw new FileNotFoundException("FileDescriptor is null for: " + uri);, + }, + return assetFileDescriptor.getParcelFileDescriptor();, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, + InputStream inputStream = contentResolver.openInputStream(uri);, + if (inputStream == null) {, + throw new FileNotFoundException("InputStream is null for :" + uri);, + }, + return inputStream;, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +import android.content.res.AssetFileDescriptor;, + AssetFileDescriptor assetFileDescriptor = contentResolver.openAssetFileDescriptor(uri,
[+++ b/library/test/src/test/java/com/bumptech/glide/GlideTest.java, + ArgumentCaptor<Drawable> drawableCaptor = ArgumentCaptor.forClass(Drawable.class);, + verify(target).onResourceReady(drawableCaptor.capture(), any(Transition.class));, + assertThat(((ColorDrawable) drawableCaptor.getValue()).getColor()).isEqualTo(Color.RED);, +++ b/library/test/src/test/java/com/bumptech/glide/GlideTest.java, + ArgumentCaptor<Drawable> drawableCaptor = ArgumentCaptor.forClass(Drawable.class);, + verify(target).onResourceReady(drawableCaptor.capture(), any(Transition.class));, + assertThat(((ColorDrawable) drawableCaptor.getValue()).getColor()).isEqualTo(Color.RED);, +++ b/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java, + RequestOptions apply = options.fallback(new ColorDrawable(Color.RED)).apply(toApply);, + assertThat(((ColorDrawable) apply.getFallbackDrawable()).getColor()).isEqualTo(Color.RED);, +++ b/library/test/src/test/java/com/bumptech/glide/GlideTest.java, + ArgumentCaptor<Drawable> drawableCaptor = ArgumentCaptor.forClass(Drawable.class);, + verify(target).onResourceReady(drawableCaptor.capture(), any(Transition.class));, + assertThat(((ColorDrawable) drawableCaptor.getValue()).getColor()).isEqualTo(Color.RED);, +++ b/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java, + RequestOptions apply = options.fallback(new ColorDrawable(Color.RED)).apply(toApply);, + assertThat(((ColorDrawable) apply.getFallbackDrawable()).getColor()).isEqualTo(Color.RED);, +++ b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java, +++ b/library/test/src/test/java/com/bumptech/glide/GlideTest.java, + ArgumentCaptor<Drawable> drawableCaptor = ArgumentCaptor.forClass(Drawable.class);, + verify(target).onResourceReady(drawableCaptor.capture(), any(Transition.class));, + assertThat(((ColorDrawable) drawableCaptor.getValue()).getColor()).isEqualTo(Color.RED);, +++ b/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java, + RequestOptions apply = options.fallback(new ColorDrawable(Color.RED)).apply(toApply);, + assertThat(((ColorDrawable) apply.getFallbackDrawable()).getColor()).isEqualTo(Color.RED);, +++ b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java, +++ b/library/test/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java, +import static com.google.common.truth.Truth.assertThat;, +import org.mockito.ArgumentCaptor;, + ArgumentCaptor<Drawable> drawableCaptor
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceDecoderTest.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import static org.mockito.Mockito.never;, + decoder = new GifBitmapWrapperResourceDecoder(bitmapDecoder, gifDecoder, mock(BitmapPool.class), parser,, + streamFactory);, + Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + when(gifResource.get().getFirstFrame()).thenReturn(firstFrame);, + assertEquals(firstFrame, result.get().getBitmapResource().get());, + public void testDoesNotCallBitmapDecoderWhenGifTypeButGifHasSingleFrame() throws IOException {, + Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, + Resource<GifDrawable> gifResource = mockGifResource();, + when(gifResource.get().getFrameCount()).thenReturn(1);, + when(gifResource.get().getFirstFrame()).thenReturn(firstFrame);, +, + when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.GIF);, + when(gifDecoder.decode(any(InputStream.class), anyInt(), anyInt())).thenReturn(gifResource);, +, + decoder.decode(source, 100, 100);, +, + verify(bitmapDecoder, never()).decode(any(ImageVideoWrapper.class), anyInt(), anyInt());, + }, +, + @Test, + public void testDoesNotRecycleGifResourceWhenGifTypeButGifHasSingleFrame() throws IOException {, + verify(gifResource, never()).recycle();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceDecoderTest.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import static org.mockito.Mockito.never;, + decoder = new GifBitmapWrapperResourceDecoder(bitmapDecoder, gifDecoder, mock(BitmapPool.class),
[+++ b/library/findbugs-exclude.xml, + <!-- Inconsistent synchronization is due to synchronizing on Engine/listener to avoid deadlock only. -->, + <Match>, + <Class name="com.bumptech.glide.load.engine.EngineResource" />, + <Bug pattern="IS2_INCONSISTENT_SYNC" />, + </Match>, +]
[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.Lifecycle;, + Class<TranscodeType> transcodeClass, Glide glide, RequestTracker requestTracker, Lifecycle lifecycle) {, + super(context, model, streamLoadProvider, transcodeClass, glide, requestTracker, lifecycle);, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.Lifecycle;, + Class<TranscodeType> transcodeClass, Glide glide, RequestTracker requestTracker, Lifecycle lifecycle) {, + super(context, model, streamLoadProvider, transcodeClass, glide, requestTracker, lifecycle);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +import com.bumptech.glide.manager.Lifecycle;, + private final ModelLoader<ModelType, ParcelFileDescriptor> fileDescriptorModelLoader;, + private final RequestTracker requestTracker;, + private final RequestManager.OptionsApplier optionsApplier;, + private final Lifecycle lifecycle;, + Glide glide, RequestTracker requestTracker, Lifecycle lifecycle,, + RequestManager.OptionsApplier optionsApplier) {, + glide, requestTracker, lifecycle);, + this.lifecycle = lifecycle;, + transcodeClass, glide, requestTracker, lifecycle));, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.Lifecycle;, + Class<TranscodeType>
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, + } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN, + || level == android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, + } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN, + || level == android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN, + || level == android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL) {, + trimToSize(getMaxSize() / 2);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, + } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN, + || level == android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN, + || level == android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL) {, + trimToSize(getMaxSize() / 2);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java, + // Entering list of cached background apps, + } else if (level >=
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, + return !input.getSimpleName().toString().equals("as");]
[+++ b/annotation/compiler/build.gradle, +def packagingFolder = file("${buildDir}/intermediates"), +def repackagedJar = file("${packagingFolder}/repackaged.jar"), +def proguardedJar = file("${packagingFolder}/proguarded.jar"), + destinationDir = packagingFolder, + archiveName = 'compiled.jar', + zipfileset(src: tasks.compiledJar.archivePath), +// Create the standard jar artifact based on our compiled, repackaged and proguarded jar., +++ b/annotation/compiler/build.gradle, +def packagingFolder = file("${buildDir}/intermediates"), +def repackagedJar = file("${packagingFolder}/repackaged.jar"), +def proguardedJar = file("${packagingFolder}/proguarded.jar"), + destinationDir = packagingFolder, + archiveName = 'compiled.jar', + zipfileset(src: tasks.compiledJar.archivePath), +// Create the standard jar artifact based on our compiled, repackaged and proguarded jar., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@code AppGlideModule}, {@code com.bumptech.glide.Glide},, + * {@code com.bumptech.glide.RequestManager}, and, + * {@code com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/build.gradle, +def
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, + private final GifFrameManager frameManager;, + private final GifState state;, + private final GifDecoder decoder;, +, + /** The current frame to draw, or null if no frame has been loaded yet */, + /** True if the drawable is currently animating */, + private boolean isRunning;, + /** True if the drawable should animate while visible */, + private boolean isStarted;, + /** True if the drawable's resources have been recycled */, + /** True if the drawable is currently visible. */, + private boolean isVisible;, + isStarted = true;, + if (isVisible) {, + startRunning();,
[+++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java, + private static final float SQUARE_RATIO_MARGIN = 0.05f;, +, + //TODO: Try to generalize this to other sizes/shapes., + // This is a dirty hack that tries to make loading square thumbnails and then square full images less costly by, + // forcing both the smaller thumb and the larger version to have exactly the same intrinsic dimensions. If a, + // drawable is replaced in an ImageView by another drawable with different intrinsic dimensions, the ImageView, + // requests a layout. Scrolling rapidly while replacing thumbs with larger images triggers lots of these calls, + //
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +import com.google.common.base.Joiner;, + static CodeBlock generateCastingSuperCall(TypeName toReturn, ExecutableElement method) {, + return CodeBlock.builder(), + .add("return ($T) super.$N(", toReturn, method.getSimpleName()), + .add(, + FluentIterable.from(method.getParameters()), + .transform(new Function<VariableElement, String>() {, + @Nullable, + @Override, + public String apply(VariableElement input) {, + return input.getSimpleName().toString();, + }, + }), + .join(Joiner.on(","))), + .add(");\n"), + .build();, + }, +, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +import com.google.common.base.Joiner;, + static CodeBlock generateCastingSuperCall(TypeName toReturn, ExecutableElement method) {, + return CodeBlock.builder(), + .add("return ($T) super.$N(", toReturn, method.getSimpleName()), + .add(, + FluentIterable.from(method.getParameters()), + .transform(new Function<VariableElement, String>() {, + @Nullable, + @Override, + public String apply(VariableElement input) {, + return input.getSimpleName().toString();,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + .append(Registry.BUCKET_BITMAP, ByteBuffer.class, Bitmap.class,, + .append(Registry.BUCKET_BITMAP, InputStream.class, Bitmap.class,, + .append(Registry.BUCKET_BITMAP, ParcelFileDescriptor.class, Bitmap.class,, + new VideoBitmapDecoder(bitmapPool)), + .append(Registry.BUCKET_BITMAP_DRAWABLE, ByteBuffer.class, BitmapDrawable.class,, + .append(Registry.BUCKET_BITMAP_DRAWABLE, InputStream.class, BitmapDrawable.class,, + .append(Registry.BUCKET_BITMAP_DRAWABLE, ParcelFileDescriptor.class, BitmapDrawable.class,, + .append(Registry.BUCKET_GIF, InputStream.class, GifDrawable.class,, + .append(Registry.BUCKET_GIF, ByteBuffer.class, GifDrawable.class, byteBufferGifDecoder), + .append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<>()), + .append(Registry.BUCKET_BITMAP, GifDecoder.class, Bitmap.class,, + new GifFrameResourceDecoder(bitmapPool)), + .append(File.class, File.class, new UnitModelLoader.Factory<>()), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + .append(Registry.BUCKET_BITMAP, ByteBuffer.class, Bitmap.class,, + .append(Registry.BUCKET_BITMAP, InputStream.class, Bitmap.class,, + .append(Registry.BUCKET_BITMAP, ParcelFileDescriptor.class, Bitmap.class,, + new VideoBitmapDecoder(bitmapPool)), + .append(Registry.BUCKET_BITMAP_DRAWABLE, ByteBuffer.class, BitmapDrawable.class,, + .append(Registry.BUCKET_BITMAP_DRAWABLE, InputStream.class, BitmapDrawable.class,, + .append(Registry.BUCKET_BITMAP_DRAWABLE, ParcelFileDescriptor.class, BitmapDrawable.class,, + .append(Registry.BUCKET_GIF, InputStream.class, GifDrawable.class,, + .append(Registry.BUCKET_GIF, ByteBuffer.class, GifDrawable.class, byteBufferGifDecoder), + .append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<>()), +
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;, + private final ArrayPool arrayPool;, + Glide(, + Engine engine,, + MemoryCache memoryCache,, + BitmapPool bitmapPool,, + ArrayPool arrayPool,, + Context context,, + int logLevel,, + RequestOptions defaultRequestOptions) {, + this.arrayPool = arrayPool;, + this.byteArrayPool = new LruByteArrayPool();, + ByteBufferGifDecoder byteBufferGifDecoder =, + new ByteBufferGifDecoder(context, bitmapPool, arrayPool);, + public ArrayPool getArrayPool() {, + return arrayPool;, + }, +, + arrayPool.clearMemory();, + arrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;, + private final ArrayPool arrayPool;, + Glide(, + Engine engine,, + MemoryCache memoryCache,, + BitmapPool bitmapPool,, + ArrayPool arrayPool,, + Context context,, + int logLevel,,
[+++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/request/target/GlideDrawableImageViewTargetTest.java, +package com.bumptech.glide.request.target;, +, +import android.graphics.Canvas;, +import android.graphics.ColorFilter;, +import android.graphics.drawable.BitmapDrawable;, +import android.graphics.drawable.Drawable;, +import android.widget.ImageView;, +, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +, +import static junit.framework.Assert.assertEquals;, +import static junit.framework.Assert.assertFalse;, +import static junit.framework.Assert.assertTrue;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +@RunWith(RobolectricTestRunner.class), +public class GlideDrawableImageViewTargetTest {, +, + @Test, + public void testSetsDrawableOnViewInSetResource() {, + ImageView view = new ImageView(Robolectric.application);, + GlideDrawableImageViewTarget target = new GlideDrawableImageViewTarget(view);, + GlideDrawable expected = new MockAnimatedDrawable();, +, + target.setResource(expected);, +, + assertEquals(expected, view.getDrawable());,
[+++ b/CONTRIBUTING.md, +Similarly if you support a particular feature request, feel free to let us know by commenting on the issue or [subscribing][6] to the issue., +## Labels, +Labels on issues are managed by contributors, you don't have to worry about them. Here's a list of what they mean:, + * **bug**: feature that should work, but doesn't, + * **enhancement**: minor tweak/addition to existing behavior, + * **feature**: new behavior, bigger than enhancement, it gives more bang to Glide, + * **question**: no need to modify Glide to fix the issue, usually a usage problem, + * **reproducible**:
[+++ b/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java, + * @param viewId The id of the ImageView view that will load the image., + * @param remoteViews RemoteViews object which contains the ImageView that will load the bitmap., + public AppWidgetTarget(Context context, int width, int height,, + int viewId, RemoteViews remoteViews, int... widgetIds) {, + * @param remoteViews RemoteViews object which contains the ImageView that will load the bitmap., + public AppWidgetTarget(Context context,, + int viewId, RemoteViews remoteViews, int... widgetIds) {, + this(context, SIZE_ORIGINAL, SIZE_ORIGINAL, viewId, remoteViews, widgetIds);, + * @param viewId The id of the ImageView view that will load the image., + *
[+++ b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerToListViewScrollListener.java, +import android.support.annotation.NonNull;, + public RecyclerToListViewScrollListener(@NonNull AbsListView.OnScrollListener scrollListener) {, +++ b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerToListViewScrollListener.java, +import android.support.annotation.NonNull;, + public RecyclerToListViewScrollListener(@NonNull AbsListView.OnScrollListener scrollListener) {, +++ b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerViewPreloader.java, +import android.support.annotation.NonNull;, + public RecyclerViewPreloader(@NonNull Activity activity,, + @NonNull PreloadModelProvider<T> preloadModelProvider,, + @NonNull PreloadSizeProvider<T> preloadDimensionProvider, int maxPreload) {, + public RecyclerViewPreloader(@NonNull FragmentActivity fragmentActivity,, + @NonNull PreloadModelProvider<T> preloadModelProvider,, + @NonNull PreloadSizeProvider<T> preloadDimensionProvider,, + public RecyclerViewPreloader(@NonNull Fragment fragment,, + @NonNull PreloadModelProvider<T> preloadModelProvider,, + @NonNull PreloadSizeProvider<T> preloadDimensionProvider,, + public RecyclerViewPreloader(@NonNull android.support.v4.app.Fragment fragment,, + @NonNull PreloadModelProvider<T> preloadModelProvider,, + @NonNull PreloadSizeProvider<T> preloadDimensionProvider,, +, + public RecyclerViewPreloader(@NonNull RequestManager requestManager,, + @NonNull PreloadModelProvider<T> preloadModelProvider,, + @NonNull PreloadSizeProvider<T> preloadDimensionProvider, int maxPreload) {, +++ b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerToListViewScrollListener.java, +import
[+++ b/README.md, + compile 'com.android.support:support-v4:19.1.0', +++ b/README.md, + compile 'com.android.support:support-v4:19.1.0', +++ b/build.gradle, + classpath "org.robolectric:robolectric-gradle-plugin:${ROBOLECTRIC_GRADLE_VERSION}", + classpath "com.android.tools.build:gradle:${ANDROID_GRADLE_VERSION}", +++ b/README.md, + compile 'com.android.support:support-v4:19.1.0', +++ b/build.gradle, + classpath "org.robolectric:robolectric-gradle-plugin:${ROBOLECTRIC_GRADLE_VERSION}", + classpath "com.android.tools.build:gradle:${ANDROID_GRADLE_VERSION}", +++ b/gradle.properties, +, +SUPPORT_V4_VERSION=19.1.0, +SUPPORT_V7_VERSION=19.1.0, +VOLLEY_VERSION=1.0.7, +OK_HTTP_VERSION=2.0.0, +ANDROID_GRADLE_VERSION=0.13.3, +, +ROBOLECTRIC_GRADLE_VERSION=0.12.0, +JUNIT_VERSION=4.11, +MOCKITO_VERSION=1.9.5, +ROBOLECTRIC_VERSION=2.4-SNAPSHOT, +MOCKWEBSERVER_VERSION=1.6.0, +HAMCREST_VERSION=1.3, +, +COMPILE_SDK_VERSION=19, +BUILD_TOOLS_VERSION=19.1.0, +TARGET_SDK_VERSION=19, +MIN_SDK_VERSION=10, +, +, +++ b/README.md, + compile 'com.android.support:support-v4:19.1.0', +++ b/build.gradle, + classpath "org.robolectric:robolectric-gradle-plugin:${ROBOLECTRIC_GRADLE_VERSION}", + classpath "com.android.tools.build:gradle:${ANDROID_GRADLE_VERSION}", +++ b/gradle.properties, +, +SUPPORT_V4_VERSION=19.1.0, +SUPPORT_V7_VERSION=19.1.0, +VOLLEY_VERSION=1.0.7, +OK_HTTP_VERSION=2.0.0, +ANDROID_GRADLE_VERSION=0.13.3, +, +ROBOLECTRIC_GRADLE_VERSION=0.12.0, +JUNIT_VERSION=4.11, +MOCKITO_VERSION=1.9.5, +ROBOLECTRIC_VERSION=2.4-SNAPSHOT, +MOCKWEBSERVER_VERSION=1.6.0, +HAMCREST_VERSION=1.3, +, +COMPILE_SDK_VERSION=19, +BUILD_TOOLS_VERSION=19.1.0, +TARGET_SDK_VERSION=19, +MIN_SDK_VERSION=10, +, +, +++ b/integration/okhttp/build.gradle, + compile "com.squareup.okhttp:okhttp:${OK_HTTP_VERSION}", + compileSdkVersion COMPILE_SDK_VERSION as int, +
[+++ b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java, + private final Context context;, + this.context = context.getApplicationContext();]
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, +Proguard, +--------, +Depending on your proguard config and usage, you may need to include the following lines in your proguard.cfg:, +```, +-keep public class * implements com.bumptech.glide.module.GlideModule, +-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {, + **[] $VALUES;, + public *;, +}, +```, +, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, +Proguard, +--------, +Depending on your proguard config and usage, you may need to include the following lines in your proguard.cfg:, +```, +-keep public class * implements com.bumptech.glide.module.GlideModule, +-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$**
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + if (resource instanceof Initializable) {, + ((Initializable) resource).initialize();, + }, +, + private class DecodeCallback<Z> implements DecodePath.DecodeCallback<Z> {, + private DecodeCallback(DataSource dataSource) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + if (resource instanceof Initializable) {, + ((Initializable) resource).initialize();, + }, +, + private class DecodeCallback<Z> implements DecodePath.DecodeCallback<Z> {, + private DecodeCallback(DataSource dataSource) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Initializable.java, +package com.bumptech.glide.load.engine;, +, +/**, + * A callback allowing a resource to do some optimization on a background thread before being, + * returned to the ui., + */, +public interface Initializable {, +, + /**, + * Called on a background thread so the
[+++ b/library/src/androidTest/java/com/bumptech/glide/request/target/PreloadTargetTest.java, +package com.bumptech.glide.request.target;, +, +import com.bumptech.glide.request.Request;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +, +@RunWith(RobolectricTestRunner.class), +public class PreloadTargetTest {, +, + @Test, + public void testCallsSizeReadyWithGivenDimensions() {, + int width = 1234;, + int height = 456;, + PreloadTarget<Object> target = PreloadTarget.obtain(width, height);, + SizeReadyCallback cb = mock(SizeReadyCallback.class);, + target.getSize(cb);, +, + verify(cb).onSizeReady(eq(width), eq(height));, + }, +, + @Test, + public void testClearsTargetInOnResourceReady() {, + Request request = mock(Request.class);, + PreloadTarget<Object> target = PreloadTarget.obtain(100, 100);, + target.setRequest(request);, + target.onResourceReady(new Object(), null);, +, + verify(request).clear();, + }, +}, +++ b/library/src/androidTest/java/com/bumptech/glide/request/target/PreloadTargetTest.java,
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + if (bitmap.isRecycled()) {, + throw new IllegalStateException("Cannot pool recycled bitmap");, + }, + removed.recycle();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, + if (bitmap.isRecycled()) {, + throw new IllegalStateException("Cannot pool recycled bitmap");, + }, + removed.recycle();, +++ b/library/src/main/java/com/bumptech/glide/util/Util.java, + // The return value of getAllocationByteCount silently changes for recycled bitmaps from the, + // internal buffer size to row bytes * height. To avoid random inconsistencies in caches, we, + // instead assert here., + if (bitmap.isRecycled()) {, + throw new IllegalStateException("Cannot obtain size for recycled Bitmap: " + bitmap, + + "[" + bitmap.getWidth() + "x" + bitmap.getHeight() + "]
[+++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java, +package com.bumptech.glide.load.engine.prefill;, +, +import android.graphics.Bitmap;, +import android.os.Handler;, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.engine.Resource;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.load.resource.bitmap.BitmapResource;, +import com.bumptech.glide.util.Util;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.InOrder;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import org.robolectric.RobolectricTestRunner;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.hasSize;, +import static org.junit.Assert.assertNotEquals;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyLong;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.atLeastOnce;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +@RunWith(RobolectricTestRunner.class), +public class BitmapPreFillRunnerTest
[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +// @SuppressWarnings("unchecked"), +// @Test, +// public void testGenericLoader() throws Exception {, +// File expected = new File("test");, +//, +// Target<File> target = mock(Target.class);, +// doAnswer(new CallCallback()).when(target).getSize(any(SizeReadyCallback.class));, +//, +// GlideUrl glideUrl = mock(GlideUrl.class);, +// DataFetcher<File> dataFetcher = mock(DataFetcher.class);, +// when(dataFetcher.loadData(any(Priority.class))).thenReturn(expected);, +// when(dataFetcher.getId()).thenReturn("id");, +// ModelLoader<GlideUrl, File> modelLoader = mock(ModelLoader.class);, +// when(modelLoader.getDataFetcher(eq(glideUrl), anyInt(), anyInt())), +// .thenReturn(dataFetcher);, +//, +// Resource<File> expectedResource = mock(Resource.class);, +// when(expectedResource.get()).thenReturn(expected);, +// ResourceDecoder<File, File> sourceDecoder = mock(ResourceDecoder.class);, +// when(sourceDecoder.decode(eq(expected), anyInt(), anyInt())).thenReturn(expectedResource);, +// ResourceDecoder<File, File> cacheDecoder = mock(ResourceDecoder.class);, +// ResourceEncoder<File> encoder = mock(ResourceEncoder.class);, +// Encoder<File> sourceEncoder = mock(Encoder.class);, +//, +//, +// verify(target).onResourceReady(eq(expected), any(GlideAnimation.class));, +// }, + .asDrawable(), +
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + /** 250 MB of cache. */, + dataLoadProviderRegistry.register(InputStream.class, File.class, new StreamFileDataLoadProvider());, + // Do nothing., + // Do nothing., + public void onResourceReady(Object resource, GlideAnimation<Object> glideAnimation) {, + // Do nothing., + }, + // Do nothing., +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + /** 250 MB of cache. */, + dataLoadProviderRegistry.register(InputStream.class, File.class, new StreamFileDataLoadProvider());, + // Do nothing., + // Do nothing., + public void onResourceReady(Object resource, GlideAnimation<Object> glideAnimation) {, + // Do nothing., + }, + // Do nothing., +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, + public void onScrollStateChanged(AbsListView absListView, int scrollState) {, + // Do nothing., + }, + * Returns
[+++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.6.1, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.6.1, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java, +import android.annotation.TargetApi;, +import android.os.Build;, +import android.os.Build.VERSION_CODES;, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, + /** Matches the behavior of {@link MediaMetadataRetriever#getFrameAtTime(long)}. */, + @VisibleForTesting, + static final int DEFAULT_FRAME_OPTION = MediaMetadataRetriever.OPTION_CLOSEST_SYNC;, +, + /*defaultValue=*/ MediaMetadataRetriever.OPTION_CLOSEST_SYNC,, + public boolean handles(@NonNull T data, @NonNull Options options) {, + public Resource<Bitmap> decode(, + @NonNull T resource, int outWidth, int outHeight, @NonNull Options options), + throws IOException {, + if (frameOption == null) {, + frameOption = DEFAULT_FRAME_OPTION;, + }, + result =, + decodeFrame(mediaMetadataRetriever, frameTimeMicros, frameOption, outWidth, outHeight);, +, + @TargetApi(Build.VERSION_CODES.O_MR1), + @Nullable, + private static Bitmap
[+++ b/library/src/main/java/com/bumptech/glide/util/Util.java, + * Returns {@code true} if called on a background thread, {@code false} otherwise.]
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, + private static final int TRANSFORMATION = 1 << 11;, + private static final int RESOURCE_CLASS = 1 << 12;, + private static final int FALLBACK = 1 << 13;, + private static final int FALLBACK_ID = 1 << 14;, + private static final int THEME = 1 << 15;, + public final CHILD diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {, + public final CHILD priority(@NonNull Priority priority) {, + public final CHILD placeholder(@Nullable Drawable drawable) {, + public final CHILD error(@Nullable Drawable drawable) {, + public final CHILD signature(@NonNull Key signature) {, + public final
[+++ b/library/AndroidManifest.xml]
[+++ b/build.gradle, + configProperties.checkStyleConfigDir = rootProject.rootDir, +++ b/build.gradle, + configProperties.checkStyleConfigDir = rootProject.rootDir, +++ b/checkstyle.xml, + <property name="file" value="${checkStyleConfigDir}/checkstyle_suppressions.xml" />]
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + public RequestBuilder<TranscodeType> load(@Nullable String string) {, + public RequestBuilder<TranscodeType> load(@Nullable Uri uri) {, + public RequestBuilder<TranscodeType> load(@Nullable File file) {, + public RequestBuilder<TranscodeType> load(@Nullable Integer resourceId) {, + public RequestBuilder<TranscodeType> load(@Nullable URL url) {, + public RequestBuilder<TranscodeType> load(@Nullable byte[] model) {]
[+++ b/.gitignore, +*.ipr, +*.iws, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/build.gradle, + classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_PLUGIN_VERSION}", +++ b/.gitignore, +*.ipr, +*.iws, +++ b/build.gradle, + classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_PLUGIN_VERSION}", +++ b/checkstyle.xml, + <property name="legalComment" value="^Public API.?$|^NOPMD .*$" />, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/build.gradle, + classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_PLUGIN_VERSION}", +++ b/checkstyle.xml, + <property name="legalComment" value="^Public API.?$|^NOPMD .*$" />, +++ b/gradle.properties, +PMD_VERSION=5.8.1, +ERROR_PRONE_VERSION=2.1.4-SNAPSHOT, +ERROR_PRONE_PLUGIN_VERSION=0.0.13, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/build.gradle, + classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_PLUGIN_VERSION}", +++ b/checkstyle.xml, + <property name="legalComment" value="^Public API.?$|^NOPMD .*$" />, +++ b/gradle.properties, +PMD_VERSION=5.8.1, +ERROR_PRONE_VERSION=2.1.4-SNAPSHOT, +ERROR_PRONE_PLUGIN_VERSION=0.0.13, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, + // GC before delete() to release files on Windows (https://stackoverflow.com/a/4213208/253468), + System.gc();, + public void testWritesBytesDirectlyToDiskIfTransformationIsUnitTransformation() {, +++ b/.gitignore,
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + sourceExecutor = GlideExecutor.newSourceExecutor();, + diskCacheExecutor = GlideExecutor.newDiskCacheExecutor();, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + sourceExecutor = GlideExecutor.newSourceExecutor();, + diskCacheExecutor = GlideExecutor.newDiskCacheExecutor();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java, +import android.os.StrictMode;, +import android.os.StrictMode.ThreadPolicy;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, +public final class GlideExecutor extends ThreadPoolExecutor {, +, + /**, + * The default thread name prefix for executors used to load/decode/transform data not found in, + * cache., + */, + public static final String DEFAULT_SOURCE_EXECUTOR_NAME = "source";, + /**, + * The default thread name prefix for executors used to load/decode/transform data found in, + * Glide's cache., + */, + public static final String
[+++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, + public void testDoesNotThrowWhenWidthIsSizeOriginal() {, + getNullModelRequest().override(Target.SIZE_ORIGINAL, 100);, + }, +, + @Test, + public void testDoesNotThrowWhenHeightIsSizeOriginal() {, + getNullModelRequest().override(100, Target.SIZE_ORIGINAL);, + }, +, + @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, + public void testDoesNotThrowWhenWidthIsSizeOriginal() {, + getNullModelRequest().override(Target.SIZE_ORIGINAL, 100);, + }, +, + @Test, + public void testDoesNotThrowWhenHeightIsSizeOriginal() {, + getNullModelRequest().override(100, Target.SIZE_ORIGINAL);, + }, +, + @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/request/target/SimpleTargetTest.java, + @Test, + public void testConstructorDoesNotThrowWithSizeOriginal() {, + getTarget(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);, + }, +, + @Test, + public void testGetSizeDoesNotThrowWithSizeOriginal() {, + getTarget(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL).getSize(mock(SizeReadyCallback.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, + public void testDoesNotThrowWhenWidthIsSizeOriginal() {, + getNullModelRequest().override(Target.SIZE_ORIGINAL, 100);, + }, +, + @Test, + public void
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.content.res.Resources;, + Resources resources = context.getResources();, + new BitmapDrawableDecoder<>(resources, bitmapPool, new StreamBitmapDecoder(bitmapPool))), + new BitmapDrawableDecoder<>(resources, bitmapPool,, + new BitmapDrawableTranscoder(resources, bitmapPool)), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.content.res.Resources;, + Resources resources = context.getResources();, + new BitmapDrawableDecoder<>(resources, bitmapPool, new StreamBitmapDecoder(bitmapPool))), + new BitmapDrawableDecoder<>(resources, bitmapPool,, + new BitmapDrawableTranscoder(resources, bitmapPool)), +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableDecoder.java, +import com.bumptech.glide.util.Preconditions;, + private final ResourceDecoder<DataType, Bitmap> decoder;, + ResourceDecoder<DataType, Bitmap> decoder) {, + this.resources = Preconditions.checkNotNull(resources);, + this.bitmapPool = Preconditions.checkNotNull(bitmapPool);, + this.decoder = Preconditions.checkNotNull(decoder);, + return decoder.handles(source);, + Resource<Bitmap> bitmapResource = decoder.decode(source, width, height, options);, + return LazyBitmapDrawableResource.obtain(resources, bitmapPool, bitmapResource.get());, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.content.res.Resources;, + Resources resources = context.getResources();, +
[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + // TODO: fixme., +// ResourceTranscoder<GifBitmapWrapper, GlideDrawable> firstTranscoder = mock(ResourceTranscoder.class);, +// when(firstTranscoder.transcode(any(Resource.class))).thenReturn(firstResource);, +// when(firstTranscoder.getId()).thenReturn("transcoder1");, + // TODO: fixme., +// ResourceTranscoder<GifBitmapWrapper, GlideDrawable> secondTranscoder = mock(ResourceTranscoder.class);, +// when(secondTranscoder.transcode(any(Resource.class))).thenReturn(secondResource);, +// when(secondTranscoder.getId()).thenReturn("transcoder2");, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + // TODO: fixme., +// ResourceTranscoder<GifBitmapWrapper, GlideDrawable> firstTranscoder = mock(ResourceTranscoder.class);, +// when(firstTranscoder.transcode(any(Resource.class))).thenReturn(firstResource);, +// when(firstTranscoder.getId()).thenReturn("transcoder1");, + // TODO: fixme., +// ResourceTranscoder<GifBitmapWrapper, GlideDrawable> secondTranscoder = mock(ResourceTranscoder.class);, +// when(secondTranscoder.transcode(any(Resource.class))).thenReturn(secondResource);, +// when(secondTranscoder.getId()).thenReturn("transcoder2");, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, + // TODO: fixme., +// ResourceTranscoder<GifBitmapWrapper, GlideDrawable> firstTranscoder = mock(ResourceTranscoder.class);, +// when(firstTranscoder.transcode(any(Resource.class))).thenReturn(firstResource);, +// when(firstTranscoder.getId()).thenReturn("transcoder1");, + // TODO: fixme., +// ResourceTranscoder<GifBitmapWrapper, GlideDrawable> secondTranscoder = mock(ResourceTranscoder.class);, +// when(secondTranscoder.transcode(any(Resource.class))).thenReturn(secondResource);, +// when(secondTranscoder.getId()).thenReturn("transcoder2");, +++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Downsampler downsampler =, + new Downsampler(resources.getDisplayMetrics(), bitmapPool, arrayPool);, + new ByteBufferGifDecoder(context, bitmapPool, arrayPool);, + registry = new Registry(), + .register(ByteBuffer.class, new ByteBufferEncoder()), + new StreamGifDecoder(byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Downsampler downsampler =, + new Downsampler(resources.getDisplayMetrics(), bitmapPool, arrayPool);, + new ByteBufferGifDecoder(context, bitmapPool, arrayPool);, + registry = new Registry(), + .register(ByteBuffer.class, new ByteBufferEncoder()), + new StreamGifDecoder(byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Downsampler downsampler =, + new Downsampler(resources.getDisplayMetrics(), bitmapPool, arrayPool);, + new ByteBufferGifDecoder(context, bitmapPool, arrayPool);, + registry = new Registry(), + .register(ByteBuffer.class, new ByteBufferEncoder()), + new StreamGifDecoder(byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Downsampler downsampler =,
[+++ b/gradle.properties, +, +APPLY_UPLOAD_SCRIPT=true, +++ b/gradle.properties, +, +APPLY_UPLOAD_SCRIPT=true, +++ b/third_party/disklrucache, +Subproject commit fbfaeb5ea614dc6d65c641dac54349de205a8330]
[+++ b/gradle.properties, +VERSION_NAME=3.7.0-SNAPSHOT, +VERSION_MINOR=7, +VERSION_CODE=13, +++ b/gradle.properties, +VERSION_NAME=3.7.0-SNAPSHOT, +VERSION_MINOR=7, +VERSION_CODE=13, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.4.0-SNAPSHOT, +VERSION_MINOR=4, +VERSION_CODE=9, +++ b/gradle.properties, +VERSION_NAME=3.7.0-SNAPSHOT, +VERSION_MINOR=7, +VERSION_CODE=13, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.4.0-SNAPSHOT, +VERSION_MINOR=4, +VERSION_CODE=9, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.4.0-SNAPSHOT, +VERSION_MINOR=4, +VERSION_CODE=9]
[+++ b/checkstyle.xml, +++ b/checkstyle.xml, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import android.widget.ImageView;, +import com.bumptech.glide.request.target.Target;, +, + /**, + * {@inheritDoc}, + *, + * <p>, + * Note - If no transformation is set for this load, a default transformation will be applied based on the, + * value returned from {@link android.widget.ImageView#getScaleType()}. To avoid this default transformation,, + * use {@link #dontTransform()}., + * </p>, + *, + * @param view {@inheritDoc}, + * @return {@inheritDoc}, + */, + @Override, + public Target<TranscodeType> into(ImageView view) {, + return super.into(view);, + }, +, + @Override, + void applyFitCenter() {, + fitCenter();, + },
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, + * <p>this will override previous calls to {@link #dontTransform()}., + *, + * @param context any {@link android.content.Context}., + * @see #transform(Class, com.bumptech.glide.load.Transformation), + * @see #optionalCenterCrop(android.content.Context), + *, + * @deprecated Use {@link #centerCrop()}., + */, + @Deprecated, + @GlideOption(, + staticMethodName = "centerCropTransform",, + memoizeStaticMethod = true, + ), + public CHILD centerCrop(@SuppressWarnings("unused") Context context) {, + return centerCrop();, + }, +, + /**, + * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterCrop} to all default types and, + * throws an exception if asked to transform an unknown type., + *]
[+++ /dev/null, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +, + /* Bitmaps */, + resourceEncoderRegistry.add(Bitmap.class, new BitmapEncoder());, +, + /* GlideBitmapDrawables */, + decoderRegistry.append(new GlideBitmapDrawableDecoder<InputStream>(context.getResources(), bitmapPool,, + new StreamBitmapDecoder(bitmapPool, decodeFormat)), InputStream.class, GlideBitmapDrawable.class);, + resourceEncoderRegistry.add(GlideBitmapDrawable.class,, + new GlideBitmapDrawableEncoder(bitmapPool, new BitmapEncoder()));, + /* Gifs */, +, + /* Gif Frames */, + /* Files */, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +, + /* Bitmaps */, + resourceEncoderRegistry.add(Bitmap.class, new BitmapEncoder());, +, + /* GlideBitmapDrawables */, + decoderRegistry.append(new GlideBitmapDrawableDecoder<InputStream>(context.getResources(), bitmapPool,, + new StreamBitmapDecoder(bitmapPool, decodeFormat)), InputStream.class, GlideBitmapDrawable.class);, + resourceEncoderRegistry.add(GlideBitmapDrawable.class,, + new GlideBitmapDrawableEncoder(bitmapPool, new BitmapEncoder()));, + /* Gifs */, +,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/flickr/build.gradle, + applicationId "com.bumptech.glide.samples.flickr", + versionCode 1, + versionName "1.0.0", +++ /dev/null, +++ /dev/null, +++ b/samples/flickr/build.gradle, + applicationId "com.bumptech.glide.samples.flickr", + versionCode 1, + versionName "1.0.0", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/flickr/build.gradle, + applicationId "com.bumptech.glide.samples.flickr", + versionCode 1, + versionName "1.0.0", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/flickr/build.gradle, + applicationId "com.bumptech.glide.samples.flickr", + versionCode 1, + versionName "1.0.0", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/flickr/build.gradle, + applicationId "com.bumptech.glide.samples.flickr", + versionCode 1, + versionName "1.0.0", +++ /dev/null, +++ /dev/null, +++ /dev/null,
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, + private static final long TIMEOUT_MS = 5000;, + private static final TimeUnit TIMEOUT_UNIT = TimeUnit.MILLISECONDS;, + future.get(TIMEOUT_MS, TimeUnit.MILLISECONDS);, + .get(TIMEOUT_MS, TIMEOUT_UNIT);, + .get(TIMEOUT_MS, TIMEOUT_UNIT);, + .get(TIMEOUT_MS, TIMEOUT_UNIT);, + .get(TIMEOUT_MS, TIMEOUT_UNIT);, + future.get(TIMEOUT_MS, TIMEOUT_UNIT);, + countDownLatch.await(TIMEOUT_MS, TIMEOUT_UNIT);]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java, + throws ExecutionException, InterruptedException {, + .appendPath(resources.getResourceTypeName(iconResourceId)), + .appendPath(resources.getResourceEntryName(iconResourceId)), + .appendPath(resources.getResourceTypeName(iconResourceId)), + .appendPath(resources.getResourceEntryName(iconResourceId)), + .appendPath(resources.getResourceTypeName(iconResourceId)), + .appendPath(resources.getResourceEntryName(iconResourceId)), + .appendPath(resources.getResourceTypeName(iconResourceId)), + .appendPath(resources.getResourceEntryName(iconResourceId)), + String packageName = info.activityInfo.packageName;, + int iconResourceId = getResourceId(packageName);, + if (iconResourceId != 0, + && doesApplicationPackageNameMatchResourcePackageName(packageName, iconResourceId)) {, +, + /**, + * Returns {@code true} iff the resource package name is exactly the same as the containing, + * application package name for a given resource id., + *, + * <p>The resource package name is the value returned by, + * {@link Resources#getResourcePackageName(int)}. The application package name is package name of, +
[+++ b/.gitignore, +.idea/libraries, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/gradle.xml, +.idea/dictionaries, +.idea/dataSources.ids, +.idea/datasources.xml, +library/.idea, +samples/**/.idea, +++ b/.gitignore, +.idea/libraries, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/gradle.xml, +.idea/dictionaries, +.idea/dataSources.ids, +.idea/datasources.xml, +library/.idea, +samples/**/.idea, +++ b/.idea/.name, +glide-parent, +++ b/.gitignore, +.idea/libraries, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/gradle.xml, +.idea/dictionaries, +.idea/dataSources.ids, +.idea/datasources.xml, +library/.idea, +samples/**/.idea, +++ b/.idea/.name, +glide-parent, +++ b/.idea/androidDexCompiler.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="AndroidDexCompilerConfiguration">, + <option name="MAX_HEAP_SIZE" value="1024" />, + </component>, +</project>, +++ b/.gitignore, +.idea/libraries, +.idea/workspace.xml, +.idea/tasks.xml, +.idea/gradle.xml, +.idea/dictionaries, +.idea/dataSources.ids, +.idea/datasources.xml, +library/.idea, +samples/**/.idea, +++ b/.idea/.name, +glide-parent, +++ b/.idea/androidDexCompiler.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="AndroidDexCompilerConfiguration">, + <option name="MAX_HEAP_SIZE" value="1024" />, + </component>, +</project>, +++ b/.idea/checkstyle-idea.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project version="4">, + <component name="CheckStyle-IDEA">,
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java, + @NonNull, + public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super Data> callback) {, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java, + @NonNull, + public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super Data> callback) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + public void loadData(@NonNull Priority priority,, + @NonNull final DataCallback<? super InputStream> callback) {, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java, + @NonNull, + public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super Data> callback) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, + public void loadData(@NonNull Priority priority,, + @NonNull final DataCallback<? super InputStream> callback) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +import android.support.annotation.NonNull;, + public boolean handles(@NonNull GlideUrl url) {, + public LoadData<InputStream> buildLoadData(@NonNull GlideUrl model, int width,
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.ContentLengthInputStream;, + private static final String CONTENT_LENGTH_HEADER = "Content-Length";, + String contentLength = response.header(CONTENT_LENGTH_HEADER);, + stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.ContentLengthInputStream;, + private static final String CONTENT_LENGTH_HEADER = "Content-Length";, + String contentLength = response.header(CONTENT_LENGTH_HEADER);, + stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);, +++ b/library/src/androidTest/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java, +package com.bumptech.glide.util;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Mockito.when;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +public class ContentLengthInputStreamTest {, + @Mock InputStream
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java, + parser.clear();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java, + parser.clear();, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java, + public void clear() {, + rawData = null;, + header = null;, + }, +]
[+++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static com.bumptech.glide.request.RequestOptions.placeholderOf;, + // TODO: fixme., +// requestManager, +// .using(modelLoader, File.class), +// .load(glideUrl), +// .as(File.class), +// .decoder(sourceDecoder), +// .cacheDecoder(cacheDecoder), +// .encoder(encoder), +// .sourceEncoder(sourceEncoder), +// .into(target);, + requestManager.asDrawable().load(file).into(target);, + requestManager.asDrawable().load(file).into(imageView);, + requestManager.asDrawable().load(url).into(target);, + requestManager.asDrawable().load(url).into(imageView);, + requestManager.asBitmap().load(uri).into(target);, + .to(byte[].class), + .load(uri), + .transcoder(transcoder), + requestManager.asBitmap().to(byte[].class).load(uri).into(target);, + requestManager.asDrawable().load(uri).into(target);, + requestManager.asDrawable().load(uri).into(imageView);, + .asGif(), + .listener(new RequestListener<GifDrawable>() {, + public boolean onException(Exception e, Object model, Target target, boolean isFirstResource) {, + public boolean onResourceReady(GifDrawable resource, Object model, Target target,, + boolean isFromMemoryCache, boolean isFirstResource) {, + requestManager.asDrawable().load(string).into(imageView);, + requestManager.asDrawable().load(integer).into(target);, + requestManager.asDrawable().load(integer).into(imageView);, + requestManager.asDrawable().load(bytes).into(target);, + requestManager.asDrawable().load(bytes).into(imageView);, + requestManager.asDrawable().load(unregistered).into(target);,
[+++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java, +package com.bumptech.glide.request.target;, +, +import android.graphics.Bitmap;, +import android.graphics.drawable.BitmapDrawable;, +import android.graphics.drawable.Drawable;, +import android.widget.ImageView;, +, +/**, + * Efficiently displays multiple Bitmaps loaded serially into a single {@link android.view.View}., + */, +public class BitmapThumbnailImageViewTarget extends ThumbnailImageViewTarget<Bitmap> {, + public BitmapThumbnailImageViewTarget(ImageView view) {, + super(view);, + }, +, + @Override, + protected Drawable getDrawable(Bitmap resource) {, + return new BitmapDrawable(view.getResources(), resource);, + }, +}, +++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java, +package com.bumptech.glide.request.target;, +, +import android.graphics.Bitmap;, +import android.graphics.drawable.BitmapDrawable;, +import android.graphics.drawable.Drawable;, +import android.widget.ImageView;, +, +/**, + * Efficiently displays multiple Bitmaps loaded serially into a single {@link android.view.View}., + */, +public class BitmapThumbnailImageViewTarget extends ThumbnailImageViewTarget<Bitmap> {, +
[+++ b/library/pom.xml]
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + * Applies the given options to the request., + *, + * <p>As with {@link RequestOptions#apply(RequestOptions)}, {@code #apply} only replaces those, + * values that are explicitly set in the given {@link RequestOptions} object. If you need to, + * completely reset all previously set options, create a new {@code RequestBuilder} instead of, + * using this method., +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + * Applies the given options to the request., + *, + * <p>As with {@link RequestOptions#apply(RequestOptions)}, {@code #apply} only replaces those, + * values that are explicitly set in the given {@link RequestOptions} object. If
[+++ b/integration/okhttp/src/main/AndroidManifest.xml, + <application>, + <meta-data, + android:name="com.bumptech.glide.integration.okhttp.OkHttpGlideModule", + android:value="GlideModule" />, + </application>, +++ b/integration/okhttp/src/main/AndroidManifest.xml, + <application>, + <meta-data, + android:name="com.bumptech.glide.integration.okhttp.OkHttpGlideModule", + android:value="GlideModule" />, + </application>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java, +package com.bumptech.glide.integration.okhttp;, +, +import android.content.Context;, +, +import com.bumptech.glide.Glide;, +import com.bumptech.glide.load.model.GlideUrl;, +import com.bumptech.glide.module.GlideModule;, +, +import java.io.InputStream;, +, +/**, + * A {@link com.bumptech.glide.module.GlideModule} implementation to replace Glide's default, + * {@link java.net.HttpURLConnection} based {@link com.bumptech.glide.load.model.ModelLoader} with an OkHttp based, + * {@link com.bumptech.glide.load.model.ModelLoader}., + *, + * <p>, + * If you're using gradle, you can include this module simply by depending on the aar, the module will be merged, + *
[+++ b/samples/svg/build.gradle, +buildscript {, + repositories {, + mavenCentral(), + }, + dependencies {, + classpath 'com.android.tools.build:gradle:0.12.+', + }, +}, +apply plugin: 'com.android.application', +, +repositories {, + mavenCentral(), +}, +, +android {, + compileSdkVersion 19, + buildToolsVersion "19.1.0", +, + defaultConfig {, + applicationId "com.bumptech.svgsample.app", + minSdkVersion 10, + targetSdkVersion 19, + versionCode 1, + versionName "1.0", + }, + buildTypes {, + release {, + runProguard false, + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', + }, + }, +}, +, +dependencies {, + compile project(':library'), + compile fileTree(dir: 'libs', include: ['*.jar']), + compile 'com.android.support:appcompat-v7:19.+', +}, +++ b/samples/svg/build.gradle, +buildscript {, + repositories
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java]
[+++ b/library/lint.xml, +++ b/library/lint.xml, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, + @TargetApi(Build.VERSION_CODES.HONEYCOMB), +++ b/library/lint.xml, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, + @TargetApi(Build.VERSION_CODES.HONEYCOMB), +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {, +++ b/library/lint.xml, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, + @TargetApi(Build.VERSION_CODES.HONEYCOMB), +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +import android.annotation.SuppressLint;, + @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1), + if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {, + @SuppressLint("InlinedApi"), + if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE) {, + } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, + if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, +++ b/library/lint.xml, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, + @TargetApi(Build.VERSION_CODES.HONEYCOMB), +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +import android.annotation.SuppressLint;, + @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1), +
[+++ b/library/src/main/java/com/bumptech/glide/Resource.java, +import com.bumptech.glide.load.Key;, + private ResourceListener listener;, + private Key key;, + private boolean isCacheable;, +, + public interface ResourceListener {, + public void onResourceReleased(Key key, Resource resource);, + }, + public void setResourceListener(Key key, ResourceListener listener) {, + this.key = key;, + this.listener = listener;, + }, +, + public void setCacheable(boolean isCacheable) {, + this.isCacheable = isCacheable;, + }, +, + public boolean isCacheable() {, + return isCacheable;, + }, +, + if (!Looper.getMainLooper().equals(Looper.myLooper())) {, + if (!Looper.getMainLooper().equals(Looper.myLooper())) {, + listener.onResourceReleased(key, this);, +++ b/library/src/main/java/com/bumptech/glide/Resource.java, +import com.bumptech.glide.load.Key;, + private ResourceListener listener;, + private Key key;, + private
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, +package com.bumptech.glide.annotation.compiler;, +, +import com.bumptech.glide.annotation.Excludes;, +import com.squareup.javapoet.AnnotationSpec;, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterizedTypeName;, +import com.squareup.javapoet.TypeName;, +import com.squareup.javapoet.TypeSpec;, +import com.squareup.javapoet.TypeSpec.Builder;, +import com.squareup.javapoet.WildcardTypeName;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +import javax.lang.model.element.Modifier;, +import javax.lang.model.element.TypeElement;, +, +/**, + * Generates a new implementation of a AppGlideModule that calls all included ChildGlideModules and, + * the original AppGlideModule., + *, + * <p>The generated class will always call the AppGlideModule last to give it priority over choices, + * made or classes registered in ChildGlideModules., + *, + * <p>Android logging is included to allow developers to see exactly which modules are
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java, +import com.bumptech.glide.util.Util;, + int size = Util.getSize(bitmap);, + final Key key = keyPool.get(size);, + final int removedSize = Util.getSize(removed);, + return Util.getSize(bitmap);, + int size = Util.getSize(bitmap);, + return getBitmapString(size);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java, +import com.bumptech.glide.util.Util;, + int size = Util.getSize(bitmap);, + final Key key = keyPool.get(size);, + final int removedSize = Util.getSize(removed);, + return Util.getSize(bitmap);, + int size = Util.getSize(bitmap);, + return getBitmapString(size);, +++ b/library/src/main/java/com/bumptech/glide/util/Util.java, + * Returns the in memory size of the given {@link Bitmap} in bytes., + if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, + // Workaround for KitKat initial release NPE in Bitmap, fixed in MR1.
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java, +import javax.annotation.processing.ProcessingEnvironment;, + private final GlideExtensionValidator extensionValidator;, + ExtensionProcessor(, + ProcessingEnvironment processingEnvironment,, + ProcessorUtil processorUtil,, + IndexerGenerator indexerGenerator) {, + extensionValidator = new GlideExtensionValidator(processingEnvironment, processorUtil);, + extensionValidator.validateExtension(typeElement);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java, +import javax.annotation.processing.ProcessingEnvironment;, + private final GlideExtensionValidator extensionValidator;, + ExtensionProcessor(, + ProcessingEnvironment processingEnvironment,, + ProcessorUtil processorUtil,, + IndexerGenerator indexerGenerator) {, + extensionValidator = new GlideExtensionValidator(processingEnvironment, processorUtil);, + extensionValidator.validateExtension(typeElement);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + extensionProcessor =, + new ExtensionProcessor(processingEnvironment, processorUtil, indexerGenerator);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java, +import javax.annotation.processing.ProcessingEnvironment;, + private final GlideExtensionValidator extensionValidator;, + ExtensionProcessor(, + ProcessingEnvironment processingEnvironment,, + ProcessorUtil processorUtil,, + IndexerGenerator indexerGenerator) {, + extensionValidator = new GlideExtensionValidator(processingEnvironment, processorUtil);, + extensionValidator.validateExtension(typeElement);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java,
[+++ b/.gitignore, +.gradle, +build, +*.iws, +doc/**, +bin/**, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +*.swo, +samples/flickr/target, +integration/volley/target/**, +**/local.properties, +**/out/**, +**/gen-external-apklibs/**, +++ b/.gitignore, +.gradle, +build, +*.iws, +doc/**, +bin/**, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +*.swo, +samples/flickr/target, +integration/volley/target/**, +**/local.properties, +**/out/**, +**/gen-external-apklibs/**, +++ b/.gitmodules, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, +[submodule "third_party/disklrucache"], + path = third_party/disklrucache, + url = https://github.com/sjudd/DiskLruCache.git, +[submodule "library/src/androidTest/resources/exif-orientation-examples"], + path = library/src/androidTest/resources/exif-orientation-examples, +++ b/.gitignore, +.gradle, +build, +*.iws, +doc/**, +bin/**, +library/target, +library/install_dependencies/maven-android-sdk-deployer, +*.swo, +samples/flickr/target, +integration/volley/target/**, +**/local.properties, +**/out/**, +**/gen-external-apklibs/**, +++ b/.gitmodules, +[submodule "third_party/volley/volley"], + path = third_party/volley/volley, +[submodule "third_party/disklrucache"], + path = third_party/disklrucache, + url = https://github.com/sjudd/DiskLruCache.git, +[submodule "library/src/androidTest/resources/exif-orientation-examples"], + path = library/src/androidTest/resources/exif-orientation-examples, +++ b/.travis.yml, +language: android, +android:, +
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + apply(requestManager.getDefaultRequestOptions());, + apply(other);]
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + int sampleSize = this.sampleSize;, + int downsampledWidth = this.downsampledWidth;, + int downsampledHeight = this.downsampledHeight;, + byte[] mainPixels = this.mainPixels;, + int[] act = this.act;, + boolean isFirstFrameTransparent = false;, + } else if (isFirstFrame && !isFirstFrameTransparent) {, + this.isFirstFrameTransparent = isFirstFrameTransparent;, +, + byte[] mainPixels = this.mainPixels;, + short[] prefix = this.prefix;, + byte[] suffix = this.suffix;, + byte[] pixelStack = this.pixelStack;, + byte[] block = this.block;, + block = this.block;]
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++
[+++ b/samples/giphy/build.gradle, + compile(project(':integration:recyclerview')) {, + transitive = false, + }, + compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}", +++ b/samples/giphy/build.gradle, + compile(project(':integration:recyclerview')) {, + transitive = false, + }, + compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}", +++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java, +import android.support.v7.widget.LinearLayoutManager;, +import android.support.v7.widget.RecyclerView;, +import com.bumptech.glide.integration.recyclerview.RecyclerViewPreloader;, +import java.util.Collections;, + RecyclerView gifList = (RecyclerView) findViewById(R.id.gif_list);, + LinearLayoutManager layoutManager = new LinearLayoutManager(this);, + gifList.setLayoutManager(layoutManager);, + new ViewPreloadSizeProvider<>();, + RecyclerViewPreloader<Api.GifResult> preloader =, + new RecyclerViewPreloader<>(Glide.with(this), adapter, preloadSizeProvider, 4);, + gifList.addOnScrollListener(preloader);, + if (adapter.getItemCount() == 0) {, + private static class GifAdapter extends RecyclerView.Adapter<GifViewHolder>, + implements ListPreloader.PreloadModelProvider<Api.GifResult> {, + public GifViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {, + View view = activity.getLayoutInflater().inflate(R.layout.gif_list_item, parent, false);,
[+++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.0', + <version>3.6.0</version>, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.0', + <version>3.6.0</version>, +++ b/gradle.properties, +VERSION_NAME=3.6.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.0', + <version>3.6.0</version>, +++ b/gradle.properties, +VERSION_NAME=3.6.0, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.3.0, +++ b/README.md, + compile 'com.github.bumptech.glide:glide:3.6.0', + <version>3.6.0</version>, +++ b/gradle.properties, +VERSION_NAME=3.6.0, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.3.0, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.3.0]
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="120" />, +++ b/checkstyle_suppressions.xml, + <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + * <p>This method may be inefficient aways and is definitely inefficient for large hierarchies., + * Consider memoizing the result after the View is attached or again, prefer the Activity and, + * Fragment variants whenever possible., + * <p>If the support {@link FragmentActivity} class is used, this method will only attempt to, + * discover support {@link Fragment}s. Any non-support {@link android.app.Fragment}s attached, + * to the {@link FragmentActivity} will be ignored., + *, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + * <p>This method may be inefficient aways and is definitely inefficient for large hierarchies., + * Consider memoizing
[+++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +import com.bumptech.glide.util.Util;, + queue = Util.createQueue(size);, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +import com.bumptech.glide.util.Util;, + queue = Util.createQueue(size);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BaseKeyPool.java, +import com.bumptech.glide.util.Util;, + private final Queue<T> keyPool = Util.createQueue(MAX_SIZE);, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +import com.bumptech.glide.util.Util;, + queue = Util.createQueue(size);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BaseKeyPool.java, +import com.bumptech.glide.util.Util;, + private final Queue<T> keyPool = Util.createQueue(MAX_SIZE);, +++ b/library/src/main/java/com/bumptech/glide/load/model/ModelCache.java, +import com.bumptech.glide.util.Util;, + private static final Queue<ModelKey> KEY_QUEUE = Util.createQueue(0);, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +import com.bumptech.glide.util.Util;, + queue = Util.createQueue(size);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BaseKeyPool.java, +import com.bumptech.glide.util.Util;, + private final Queue<T> keyPool = Util.createQueue(MAX_SIZE);, +++ b/library/src/main/java/com/bumptech/glide/load/model/ModelCache.java, +import com.bumptech.glide.util.Util;, + private static final Queue<ModelKey> KEY_QUEUE = Util.createQueue(0);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +import com.bumptech.glide.util.Util;, + private static final Queue<BitmapFactory.Options> OPTIONS_QUEUE
[+++ b/build.gradle, + classpath 'com.android.tools.build:gradle:0.13.+', + gradleVersion = '2.1', +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:0.13.+', + gradleVersion = '2.1', +++ b/glide/build.gradle, + archives releaseJavadocJar {, + classifier 'javadoc', + }, + archives releaseSourceJar {, + classifier 'sources', + }, +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:0.13.+', + gradleVersion = '2.1', +++ b/glide/build.gradle, + archives releaseJavadocJar {, + classifier 'javadoc', + }, + archives releaseSourceJar {, + classifier 'sources', + }, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + classpath 'com.android.tools.build:gradle:0.13.+', + gradleVersion = '2.1', +++ b/glide/build.gradle, + archives releaseJavadocJar {, + classifier 'javadoc', + }, + archives releaseSourceJar {, + classifier 'sources', + }, +++
[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import java.io.IOException;, + private InputStream stream;, + stream = client.newCall(request), + .execute(), + .body(), + .byteStream();, + return stream;, + if (stream == null) {, + return;, + }, + try {, + stream.close();, + } catch (IOException e) {, + // Ignored, + }, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import java.io.IOException;, + private InputStream stream;, + stream = client.newCall(request), + .execute(), + .body(), + .byteStream();, + return stream;, + if (stream == null) {, + return;, + }, + try {, + stream.close();, + } catch (IOException e) {, + // Ignored, + }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +import org.mockito.InOrder;, +import
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + * models. Typically the {@link RequestManager#using(StreamModelLoader)} or, + * {@link RequestManager#using(FileDescriptorModelLoader)} syntax is preferred because it directly links the model, + * @see RequestManager#using(FileDescriptorModelLoader), + * @see RequestManager#using(StreamModelLoader), + public static RequestManager with(Context context) {, + return RequestManagerRetriever.get(context);, + public static RequestManager with(Activity activity) {, + return RequestManagerRetriever.get(activity);, + public static RequestManager with(FragmentActivity activity) {, + return RequestManagerRetriever.get(activity);, + public static RequestManager with(android.app.Fragment fragment) {, + return RequestManagerRetriever.get(fragment);, + public static RequestManager with(Fragment fragment) {, + return RequestManagerRetriever.get(fragment);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + * models. Typically the {@link RequestManager#using(StreamModelLoader)} or, + * {@link RequestManager#using(FileDescriptorModelLoader)} syntax is preferred because
[+++ b/library/src/main/java/com/bumptech/glide/load/HttpException.java, +package com.bumptech.glide.load;, +, +import java.io.IOException;, +, +/**, + * Thrown when an http request fails., + *, + * <p>Exposes the specific status code or {@link #UNKNOWN} via {@link #getStatusCode()} so, + * users may attempt to retry or otherwise uniformly handle certain types of errors regardless of, + * the underlying http library., + */, +public final class HttpException extends IOException {, + public static final int UNKNOWN = -1;, + private final int statusCode;, +, + public HttpException(int statusCode) {, + this("Http request failed with status code: " + statusCode, statusCode);, + }, +, +
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java, + if (sourceIds.isEmpty()) {, + return false;, + }]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.hamcrest.CoreMatchers.not;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotEquals;, +import static org.junit.Assert.assertThat;, +/**, + * Tests if {@link EngineKey} {@link Object#hashCode() hashCode} and {@link Object#equals(Object) equals}, + * and SHA-1 disk cache key are different on any difference in ID or existence of a certain workflow part., + * Also checking whether the equals method is symmetric., + *, + * @see #assertDifferent, + */, + public void testDiffersIfIdDiffers() throws Exception {, + assertDifferent(first, second);, + public void testDiffersIfHeightDiffers() throws Exception {, + assertDifferent(first, second);, + public void testDiffersIfWidthDiffers() throws Exception {, + assertDifferent(first,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + if (glide != null) {, + glide.engine.tearDown();, + }, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + if (glide != null) {, + glide.engine.tearDown();, + }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import android.support.annotation.VisibleForTesting;, + @VisibleForTesting, + public void tearDown() {, + engineJobFactory.tearDown();, + }, +, + @VisibleForTesting, + void tearDown() {, + diskCacheExecutor.shutdown();, + sourceExecutor.shutdown();, + sourceUnlimitedExecutor.shutdown();, + animationExecutor.shutdown();, + }, +]
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/ErrorHandlingTest.java, + public void setUp() {, + public void load_whenLoadSucceeds_butEncoderFails_doesNotCallOnLoadFailed() {, + public void clearRequest_withError_afterPrimaryFails_clearsErrorRequest() {, + @NonNull, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/ErrorHandlingTest.java, + public void setUp() {, + public void load_whenLoadSucceeds_butEncoderFails_doesNotCallOnLoadFailed() {, + public void clearRequest_withError_afterPrimaryFails_clearsErrorRequest() {, + @NonNull, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, + public void update(@NonNull byte[] keyBytes, @NonNull Boolean value,, + @NonNull MessageDigest messageDigest) {, + @NonNull, + @NonNull, + Resource<Bitmap> buildFrameResource(@NonNull Bitmap bitmap, @NonNull BitmapPool bitmapPool) {, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/ErrorHandlingTest.java, + public void setUp() {, + public void load_whenLoadSucceeds_butEncoderFails_doesNotCallOnLoadFailed() {, + public void clearRequest_withError_afterPrimaryFails_clearsErrorRequest() {, + @NonNull, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, + public void update(@NonNull byte[] keyBytes, @NonNull Boolean value,, + @NonNull
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableResource.java, +package com.bumptech.glide.load.resource.drawable;, +, +import android.graphics.drawable.Drawable;, +import com.bumptech.glide.Resource;, +, +public class DrawableResource extends Resource<Drawable> {, + private final Drawable drawable;, + private final Resource wrapped;, +, + public DrawableResource(Drawable drawable, Resource wrapped) {, + this.drawable = drawable;, + this.wrapped = wrapped;, + }, +, + @Override, + public Drawable get() {, + return drawable;, + }, +, + @Override, + public int getSize() {, + return wrapped.getSize();, + }, +, + @Override, + protected void recycleInternal() {, + wrapped.recycle();, + }, +}, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableResource.java, +package com.bumptech.glide.load.resource.drawable;, +, +import android.graphics.drawable.Drawable;, +import com.bumptech.glide.Resource;, +, +public class DrawableResource extends Resource<Drawable> {,
[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, +Proguard, +--------, +Depending on your proguard config and usage, you may need to include the following lines in your proguard.cfg:, +```, +-keep public class * implements com.bumptech.glide.module.GlideModule, +-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {, + **[] $VALUES;, + public *;, +}, +```, +, +++ b/.idea/codeStyleSettings.xml, +++ b/.travis.yml, + - build-tools-19.1.0, +++ b/README.md, +Proguard, +--------, +Depending on your proguard config and usage, you may need to include the following lines in your proguard.cfg:, +```, +-keep public class * implements com.bumptech.glide.module.GlideModule, +-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$**
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +import com.bumptech.glide.load.model.ModelLoader.LoadData;, + private volatile LoadData<?> loadData;, + loadData = null;, + loadData =, + helper.getOptions());, + if (loadData != null && helper.hasLoadPath(loadData.fetcher.getDataClass())) {, + loadData.fetcher.loadData(helper.getPriority(), this);, + LoadData<?> local = loadData;, + local.fetcher.cancel();, + cb.onDataFetcherReady(sourceKey, data, loadData.fetcher, DataSource.DATA_DISK_CACHE, sourceKey);, + cb.onDataFetcherFailed(sourceKey, e, loadData.fetcher, DataSource.DATA_DISK_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +import com.bumptech.glide.load.model.ModelLoader.LoadData;, + private volatile LoadData<?> loadData;, + loadData = null;, + loadData =, + helper.getOptions());, + if (loadData != null && helper.hasLoadPath(loadData.fetcher.getDataClass())) {, + loadData.fetcher.loadData(helper.getPriority(), this);, + LoadData<?> local = loadData;, + local.fetcher.cancel();, + cb.onDataFetcherReady(sourceKey, data, loadData.fetcher, DataSource.DATA_DISK_CACHE, sourceKey);, + cb.onDataFetcherFailed(sourceKey, e, loadData.fetcher, DataSource.DATA_DISK_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java, +import com.bumptech.glide.load.model.ModelLoader.LoadData;, +
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java, + private final ResourceTranscoder transcoder;, + private final Encoder sourceEncoder;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java, + private final ResourceTranscoder transcoder;, + private final Encoder sourceEncoder;, +++ b/library/src/main/java/com/bumptech/glide/load/model/UriLoader.java, + private static boolean isLocalUri(String scheme) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java, + private final ResourceTranscoder transcoder;, + private final Encoder sourceEncoder;, +++ b/library/src/main/java/com/bumptech/glide/load/model/UriLoader.java, + private static boolean isLocalUri(String scheme) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, + private static boolean shouldUsePool(RecyclableBufferedInputStream bis) {, + private static Bitmap.Config getConfig(RecyclableBufferedInputStream bis, DecodeFormat format) {, + private static Bitmap decodeStream(RecyclableBufferedInputStream bis, BitmapFactory.Options options) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java, + private final ResourceTranscoder transcoder;, + private final Encoder sourceEncoder;, +++ b/library/src/main/java/com/bumptech/glide/load/model/UriLoader.java, + private static boolean
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java]
[+++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" type="JAVA_MODULE" version="4">, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" type="JAVA_MODULE" version="4">, +++ b/glide/glide.iml, +<module external.linked.project.id=":glide" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" type="JAVA_MODULE" version="4">, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" type="JAVA_MODULE" version="4">, +++ b/glide/glide.iml, +<module external.linked.project.id=":glide" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" type="JAVA_MODULE" version="4">, +++ b/integration/integration.iml, +<module external.linked.project.id=":integration" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" type="JAVA_MODULE" version="4">, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" type="JAVA_MODULE" version="4">, +++ b/glide/glide.iml, +<module external.linked.project.id=":glide" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" type="JAVA_MODULE" version="4">, +++ b/integration/integration.iml, +<module external.linked.project.id=":integration" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" type="JAVA_MODULE" version="4">, +++ b/integration/okhttp/okhttp.iml, +<module external.linked.project.id=":integration:okhttp" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" type="JAVA_MODULE" version="4">, +++ b/glide-parent.iml, +<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" type="JAVA_MODULE" version="4">,
[+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideExtension.java, + return requestOptions.centerCrop();]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java, + try {, + } finally {, + editor.abortUnlessCommitted();, + }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java, + try {, + } finally {, + editor.abortUnlessCommitted();, + }, +++ b/library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java, + File dir = Robolectric.application.getCacheDir();, + @Test, + public void testEditIsAbortedIfWriterThrows() throws FileNotFoundException {, + try {, + cache.put(key, new DiskCache.Writer() {, + @Override, + public boolean write(File file) {, + throw new RuntimeException("test");, + }, + });, + } catch (RuntimeException e) {, + // Expected., + }, +, + cache.put(key, new DiskCache.Writer() {, + @Override, + public boolean write(File file) {, + try {, + new FileOutputStream(file).write(data);, + }
[+++ /dev/null, +++ /dev/null, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.bitmap_recycle.ConcurrentBitmapReferenceCounter;, + private final ConcurrentBitmapReferenceCounter bitmapTracker;, + bitmapTracker = new ConcurrentBitmapReferenceCounter(bitmapPool, options.maxPerSize);, +++ /dev/null, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.bitmap_recycle.ConcurrentBitmapReferenceCounter;, + private final ConcurrentBitmapReferenceCounter bitmapTracker;, + bitmapTracker = new ConcurrentBitmapReferenceCounter(bitmapPool, options.maxPerSize);, +++ b/library/src/com/bumptech/photos/resize/bitmap_recycle/ConcurrentBitmapReferenceCounter.java, +package com.bumptech.photos.resize.bitmap_recycle;, +, +import android.graphics.Bitmap;, +import com.bumptech.photos.resize.bitmap_recycle.BitmapPool;, +, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentLinkedQueue;, +, +/**, + * Created with IntelliJ IDEA., + * User: sam, + * Date: 6/4/13, + * Time: 9:54 AM, + * To change this template use File | Settings | File Templates., + */, +public class ConcurrentBitmapReferenceCounter {, +, + private static class InnerTrackerPool {,
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java]
[+++ b/annotation/gradle.properties, +GROUP=com.github.bumptech.glide.annotation]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + requestBuilderGenerator.generate(generatedCodePackageName, indexedClassNames.extensions);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + requestBuilderGenerator.generate(generatedCodePackageName, indexedClassNames.extensions);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/FieldUniqueIdGenerator.java, +package com.bumptech.glide.annotation.compiler;, +, +/**, + * Generates unique field ids for classes generated by Glide's annotation processor., + */, +final class FieldUniqueIdGenerator {, + private static int nextStaticFieldUniqueId;, +, + private FieldUniqueIdGenerator() {, + // Utility class., + }, +, + static int next() {, + return nextStaticFieldUniqueId++;, + }, +}, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + requestBuilderGenerator.generate(generatedCodePackageName, indexedClassNames.extensions);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/FieldUniqueIdGenerator.java, +package com.bumptech.glide.annotation.compiler;, +, +/**, + * Generates unique field ids for classes generated by Glide's annotation processor., + */, +final class FieldUniqueIdGenerator {, + private static int nextStaticFieldUniqueId;, +,
[+++ b/checkstyle.xml, +++ b/checkstyle.xml, +++ b/samples/giphy/.gitignore, +/build, +++ b/checkstyle.xml, +++ b/samples/giphy/.gitignore, +/build, +++ b/samples/giphy/build.gradle, +apply plugin: 'com.android.application', +, +android {, + compileSdkVersion 19, + buildToolsVersion "19.1.0", +, + defaultConfig {, + applicationId "com.bumptech.glide.giphy", + minSdkVersion 14, + targetSdkVersion 19, + versionCode 1, + versionName "1.0", + }, + buildTypes {, + release {, + runProguard false, + proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', + }, + }, +}, +, +dependencies {, + compile project(':library'), + compile 'com.google.code.gson:gson:2.2.4', +}, +++ b/checkstyle.xml, +++ b/samples/giphy/.gitignore, +/build, +++ b/samples/giphy/build.gradle, +apply plugin: 'com.android.application', +, +android {, + compileSdkVersion 19, + buildToolsVersion "19.1.0", +, + defaultConfig {, +
[+++ b/gradle.properties, +OK_HTTP_VERSION=3.0.0-RC1, +++ b/gradle.properties, +OK_HTTP_VERSION=3.0.0-RC1, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + boolean isUserAgentSet = false;, + public void onFailure(Request request, IOException e) {, + public void onResponse(Response response) throws IOException {, +++ b/gradle.properties, +OK_HTTP_VERSION=3.0.0-RC1, +++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java, + boolean isUserAgentSet = false;, + public void onFailure(Request request, IOException e) {, + public void onResponse(Response response) throws IOException {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java, + final Thread result = new Thread(runnable, "glide-" + name + "-thread-" + threadNum) {]
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + void removeFromManagers(Target<?> target) {, + synchronized (managers) {, + if (requestManager.untrack(target)) {, + throw new IllegalStateException("Failed to remove target from managers");, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + void removeFromManagers(Target<?> target) {, + synchronized (managers) {, + if (requestManager.untrack(target)) {, + throw new IllegalStateException("Failed to remove target from managers");, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, + public <Model, TResource, Transcode> List<Class<?>> getRegisteredResourceClasses(, + Class<Model> modelClass, Class<TResource> resourceClass, Class<Transcode> transcodeClass) {, + List<Class<Transcode>> registeredTranscodeClasses = transcoderRegistry, + .getTranscodeClasses(registeredResourceClass, transcodeClass);, + if (!registeredTranscodeClasses.isEmpty() && !result.contains(registeredResourceClass)) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + void removeFromManagers(Target<?> target) {, + synchronized (managers) {, + if (requestManager.untrack(target)) {, + throw new IllegalStateException("Failed to
[+++ b/gradle.properties, +VERSION_NAME=4.3.0-SNAPSHOT, +VERSION_MINOR=3]
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java, +public abstract class DiskCacheStrategy {, + public static final DiskCacheStrategy ALL = new DiskCacheStrategy() {, +, + @Override, + public boolean decodeCachedResource() {, + return true;, + }, +, + @Override, + public boolean decodeCachedData() {, + return true;, + }, + };, +, + public static final DiskCacheStrategy NONE = new DiskCacheStrategy() {, +, + @Override, + public boolean decodeCachedResource() {, + return false;, + }, +, + @Override, + public boolean decodeCachedData() {, + return false;, + }, + };, +, + public static final DiskCacheStrategy DATA = new DiskCacheStrategy() {, +, + @Override, +
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +import com.squareup.javapoet.AnnotationSpec;, +import com.squareup.javapoet.TypeVariableName;, +import java.util.LinkedHashSet;, +import javax.lang.model.element.TypeParameterElement;, +import javax.lang.model.type.TypeVariable;, + static MethodSpec.Builder overriding(ExecutableElement method) {, + String methodName = method.getSimpleName().toString();, +, + MethodSpec.Builder builder = MethodSpec.methodBuilder(methodName), + .addAnnotation(Override.class);, +, + Set<Modifier> modifiers = method.getModifiers();, + modifiers = new LinkedHashSet<>(modifiers);, + modifiers.remove(Modifier.ABSTRACT);, + Modifier defaultModifier = null;, + // Modifier.DEFAULT doesn't exist until Java 8., + try {, + defaultModifier = Modifier.valueOf("DEFAULT");, + } catch (IllegalArgumentException e) {, + // Ignored., + }, + modifiers.remove(defaultModifier);, +, + builder = builder.addModifiers(modifiers);, +, + for (TypeParameterElement typeParameterElement : method.getTypeParameters()) {, + TypeVariable var = (TypeVariable) typeParameterElement.asType();, + builder =
[+++ b/integration/gifencoder/gradle.properties, +++ b/integration/gifencoder/gradle.properties, +++ b/integration/okhttp/gradle.properties, +++ b/integration/gifencoder/gradle.properties, +++ b/integration/okhttp/gradle.properties, +++ b/integration/okhttp3/gradle.properties, +++ b/integration/gifencoder/gradle.properties, +++ b/integration/okhttp/gradle.properties, +++ b/integration/okhttp3/gradle.properties, +++ b/integration/recyclerview/gradle.properties, +++ b/integration/gifencoder/gradle.properties, +++ b/integration/okhttp/gradle.properties, +++ b/integration/okhttp3/gradle.properties, +++ b/integration/recyclerview/gradle.properties, +++ b/integration/volley/gradle.properties, +++ b/integration/gifencoder/gradle.properties, +++ b/integration/okhttp/gradle.properties, +++ b/integration/okhttp3/gradle.properties, +++ b/integration/recyclerview/gradle.properties, +++ b/integration/volley/gradle.properties, +++ b/third_party/gif_decoder/gradle.properties]
[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, + * @see #centerInside()]
[+++ b/build.gradle, + maven {, + url "https://plugins.gradle.org/m2/", + }, + classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_VERSION}", +++ b/build.gradle, + maven {, + url "https://plugins.gradle.org/m2/", + }, + classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_VERSION}", +++ b/gradle.properties, +ERROR_PRONE_VERSION=0.0.13, +++ b/build.gradle, + maven {, + url "https://plugins.gradle.org/m2/", + }, + classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_VERSION}", +++ b/gradle.properties, +ERROR_PRONE_VERSION=0.0.13, +++ b/library/build.gradle, +if (!hasProperty('DISABLE_ERROR_PRONE')) {, + apply plugin: "net.ltgt.errorprone", +}, +, +++ b/build.gradle, + maven {, + url "https://plugins.gradle.org/m2/", + }, + classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_VERSION}", +++ b/gradle.properties, +ERROR_PRONE_VERSION=0.0.13, +++ b/library/build.gradle, +if (!hasProperty('DISABLE_ERROR_PRONE')) {, + apply plugin: "net.ltgt.errorprone", +}, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import java.lang.reflect.InvocationTargetException;, + result = clazz.getDeclaredConstructor().newInstance();, + } catch (InstantiationException e) {, + throwIncorrectGlideModule(e);,
[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.load.UnitTransformation;, + private Transformation<ResourceType> singleTransformation = UnitTransformation.get();, + if (singleTransformation == UnitTransformation.get()) {, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.load.UnitTransformation;, + private Transformation<ResourceType> singleTransformation = UnitTransformation.get();, + if (singleTransformation == UnitTransformation.get()) {, +++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.load.UnitTransformation;, + private Transformation<ResourceType> singleTransformation = UnitTransformation.get();, + if (singleTransformation == UnitTransformation.get()) {, +++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, +++ b/library/src/main/java/com/bumptech/glide/load/UnitTransformation.java, +package com.bumptech.glide.load;, +, +import com.bumptech.glide.load.engine.Resource;, +, +/**, + * A noop Transformation that simply returns the given resource., + */, +public class UnitTransformation<T> implements Transformation<T> {, + private static final UnitTransformation TRANSFORMATION = new UnitTransformation();, +, + @SuppressWarnings("unchecked"), + public static <T> UnitTransformation<T> get() {,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Downsampler downsampler =, + new Downsampler(resources.getDisplayMetrics(), bitmapPool, arrayPool);, + new ByteBufferGifDecoder(context, bitmapPool, arrayPool);, + registry = new Registry(), + .register(ByteBuffer.class, new ByteBufferEncoder()), + new StreamGifDecoder(byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Downsampler downsampler =, + new Downsampler(resources.getDisplayMetrics(), bitmapPool, arrayPool);, + new ByteBufferGifDecoder(context, bitmapPool, arrayPool);, + registry = new Registry(), + .register(ByteBuffer.class, new ByteBufferEncoder()), + new StreamGifDecoder(byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Downsampler downsampler =, + new Downsampler(resources.getDisplayMetrics(), bitmapPool, arrayPool);, + new ByteBufferGifDecoder(context, bitmapPool, arrayPool);, + registry = new Registry(), + .register(ByteBuffer.class, new ByteBufferEncoder()), + new StreamGifDecoder(byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Downsampler downsampler =,
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +import com.bumptech.glide.request.GlideContext;, + public void setUp() throws IOException, GlideContext.NoResultEncoderAvailableException,, + GlideContext.NoSourceEncoderAvailableException, GlideContext.NoDecoderAvailableException {, + GlideContext glideContext = mock(GlideContext.class);, + public Harness() throws IOException, GlideContext.NoDecoderAvailableException,, + GlideContext.NoResultEncoderAvailableException, GlideContext.NoSourceEncoderAvailableException {, + GlideContext.NoDecoderAvailableException, GlideContext.NoResultEncoderAvailableException,, + GlideContext.NoSourceEncoderAvailableException {, + when(glideContext.getDecoder(any(DataRewinder.class), eq(Object.class))).thenReturn(cacheDecoder);, + when(glideContext.getResultEncoder(any(Resource.class))).thenReturn(resultEncoder);, + when(glideContext.getSourceEncoder(anyObject())).thenReturn(sourceEncoder);, + return new DecodeJob<Object, Object>(Object.class, key, width, height, dataFetcherSet, glideContext,, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +import com.bumptech.glide.request.GlideContext;, + public void setUp() throws IOException, GlideContext.NoResultEncoderAvailableException,, + GlideContext.NoSourceEncoderAvailableException, GlideContext.NoDecoderAvailableException {, + GlideContext glideContext = mock(GlideContext.class);, + public Harness() throws IOException, GlideContext.NoDecoderAvailableException,, + GlideContext.NoResultEncoderAvailableException, GlideContext.NoSourceEncoderAvailableException {, + GlideContext.NoDecoderAvailableException, GlideContext.NoResultEncoderAvailableException,, + GlideContext.NoSourceEncoderAvailableException {, + when(glideContext.getDecoder(any(DataRewinder.class), eq(Object.class))).thenReturn(cacheDecoder);, + when(glideContext.getResultEncoder(any(Resource.class))).thenReturn(resultEncoder);, + when(glideContext.getSourceEncoder(anyObject())).thenReturn(sourceEncoder);, + return new
[+++ b/checkstyle.xml, + <property name="illegalClasses" value="org\.mockito\.ArgumentMatchers.*" />]
[+++ b/samples/flickr/src/main/AndroidManifest.xml]
[+++ b/library/AndroidManifest.xml]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, + .addModifiers(Modifier.PUBLIC)]
[+++ b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java, +import static com.bumptech.glide.request.RequestOptions.fitCenterTransform;, +import android.graphics.drawable.Drawable;, + private final RequestBuilder<Drawable> requestBuilder;, + requestBuilder = requestManager, + .asDrawable(), + .apply(fitCenterTransform(context));, +, + requestBuilder, + .clone(), + .apply(signatureOf(signature)), + return requestBuilder, + .clone(), + .apply(signatureOf(signature)), +++ b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java, +import static com.bumptech.glide.request.RequestOptions.fitCenterTransform;, +import android.graphics.drawable.Drawable;, + private final RequestBuilder<Drawable> requestBuilder;, + requestBuilder = requestManager, + .asDrawable(), + .apply(fitCenterTransform(context));, +, + requestBuilder, + .clone(), + .apply(signatureOf(signature)), + return requestBuilder, + .clone(), + .apply(signatureOf(signature)), +++ b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerViewFragment.java, +++ b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java, +import static com.bumptech.glide.request.RequestOptions.fitCenterTransform;, +import android.graphics.drawable.Drawable;, + private final RequestBuilder<Drawable> requestBuilder;, + requestBuilder = requestManager, + .asDrawable(), + .apply(fitCenterTransform(context));, +, + requestBuilder, + .clone(), + .apply(signatureOf(signature)), + return
[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/gradle.properties, +ANDROID_X_VERSION=1.0.0, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/gradle.properties, +ANDROID_X_VERSION=1.0.0, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, + private final boolean isLoggingRequestOriginsEnabled;, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, + public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/gradle.properties, +ANDROID_X_VERSION=1.0.0, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, + private final boolean isLoggingRequestOriginsEnabled;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/CallbackException.java, + private
[+++ b/samples/flickr/res/layout/grid_fragment.xml, + android:horizontalSpacing="10dp", + android:verticalSpacing="10dp", + android:layout_gravity="center", + android:stretchMode="columnWidth", + android:layout_height="fill_parent" />]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java, +import static org.junit.Assert.assertNull;, +, + @Test, + public void testReturnsNullIfGifDecoderReturnsNullFrame() {, + when(gifDecoder.getNextFrame()).thenReturn(null);, +, + assertNull(resourceDecoder.decode(gifDecoder, 100, 100));, + }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java, +import static org.junit.Assert.assertNull;, +, + @Test, + public void testReturnsNullIfGifDecoderReturnsNullFrame() {, + when(gifDecoder.getNextFrame()).thenReturn(null);, +, + assertNull(resourceDecoder.decode(gifDecoder, 100, 100));, + }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, + public void testReturnsNullIfGifDecoderFailsToDecodeFirstFrame() {, + when(gifHeader.getNumFrames()).thenReturn(1);, + when(gifHeader.getStatus()).thenReturn(GifDecoder.STATUS_OK);, + when(gifDecoder.getNextFrame()).thenReturn(null);, +, + assertNull(decoder.decode(new ByteArrayInputStream(new byte[0]), 100, 100));, + }, +, + @Test, + public void testReturnsGifDecoderToPoolWhenGifDecoderReturnsNullFirstFrame() {, + when(gifHeader.getNumFrames()).thenReturn(1);, + when(gifHeader.getStatus()).thenReturn(GifDecoder.STATUS_OK);, + when(gifDecoder.getNextFrame()).thenReturn(null);, +, + decoder.decode(new ByteArrayInputStream(new byte[0]), 100, 100);, +, + verify(decoderPool).release(eq(gifDecoder));, + }, +, + @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java, +import static
[+++ b/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java, + // The minimum % of an images pixels that must be transparent for us to set a transparent index, + // automatically., + * Adds next GIF frame to the specified position. The frame is not written immediately, but is, + * actually deferred until the next frame is received so that timing data can be inserted., + * Invoking <code>finish()</code> flushes all frames. If <code>setSize</code> was invoked, the, + * size is used for all subsequent frames. Otherwise, the actual size of the image is used for, + * each frame., + * Column number,
[+++ b/gradle.properties, +PMD_VERSION=6.0.0, +++ b/gradle.properties, +PMD_VERSION=6.0.0, +++ b/library/build.gradle, + classpath = files(), + classpath += classPathForQuality(), + classpath = files(), + classpath += files("${project.buildDir}/intermediates/classes/debug/"), + doFirst {, + classpath += classPathForQuality(), + }, +, + //TODO enable this once new Gradle containing this flag is out, + //see https://github.com/gradle/gradle/pull/3125#issuecomment-352442432, + //incrementalAnalysis = true, +def classPathForQuality() {, + return files(, + android.bootClasspath,, + project.configurations.compile,, + project.android.libraryVariants.collect { it.javaCompile.classpath }, + ), +}, +, +++ b/gradle.properties, +PMD_VERSION=6.0.0, +++ b/library/build.gradle, + classpath = files(), + classpath += classPathForQuality(), + classpath = files(), + classpath += files("${project.buildDir}/intermediates/classes/debug/"), + doFirst {, + classpath +=
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/Issue2638Test.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import android.content.res.Resources;, +import android.graphics.Bitmap;, +import android.graphics.Bitmap.CompressFormat;, +import android.graphics.BitmapFactory;, +import android.graphics.Color;, +import android.graphics.drawable.BitmapDrawable;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import android.widget.AbsListView.LayoutParams;, +import android.widget.ImageView;, +import com.bumptech.glide.test.BitmapSubject;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import com.google.common.io.ByteStreams;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.concurrent.ExecutionException;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +@RunWith(AndroidJUnit4.class), +public class Issue2638Test {, + @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();, + private final ConcurrencyHelper concurrency = new ConcurrencyHelper();, + private Context context;, +, + @Before, + public void setUp() {, + context = InstrumentationRegistry.getTargetContext();, + }, +, + @Test, + public
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, + Preconditions.checkArgument(!isRecycled, "You cannot start a recycled Drawable. Ensure that", + + "you clear any references to the Drawable when clearing the corresponding request.");, + Preconditions.checkArgument(!isRecycled, "Cannot change the visibility of a recycled resource.", + + " Ensure that you unset the Drawable from your View before changing the View's", + + " visibility.");, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, + Preconditions.checkArgument(!isRecycled, "You cannot start a recycled Drawable. Ensure that", + + "you clear any references to the Drawable when clearing the corresponding request.");, + Preconditions.checkArgument(!isRecycled, "Cannot change the visibility of a recycled resource.", + + " Ensure that you unset
[+++ b/.gitignore, +**/out/**, +**/gen-external-apklibs/**, +++ b/.gitignore, +**/out/**, +**/gen-external-apklibs/**, +++ b/library/install_dependencies/install-android-deps.sh, +# Also using the android sdk tool, under Android 4.4.0 (API 14), install:, +# SDK Platform, +mvn clean install -N && cd platforms && mvn clean install -N && cd android-14 && mvn clean install || {, + echo 'Failed to install 4.0 SDK, install relevant packages in android SDK first';, + exit 1;, +}, +cd ../.., +mvn clean install -N && cd extras && mvn clean install -N && cd compatibility-v4 && mvn clean install || {, + echo 'Failed to install android-support-v4, install support library in android
[+++ b/gradle.properties, +TRUTH_VERSION=0.36, +++ b/gradle.properties, +TRUTH_VERSION=0.36, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestTest.java, +import static org.mockito.Mockito.any;, +import static org.mockito.Mockito.anyBoolean;, +import static org.mockito.Mockito.eq;, +++ b/gradle.properties, +TRUTH_VERSION=0.36, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestTest.java, +import static org.mockito.Mockito.any;, +import static org.mockito.Mockito.anyBoolean;, +import static org.mockito.Mockito.eq;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java, +import com.google.common.truth.FailureMetadata;, + private static final Subject.Factory<BitmapSubject, Bitmap> FACTORY =, + new Subject.Factory<BitmapSubject, Bitmap>() {, + public BitmapSubject createSubject(@NonNull FailureMetadata metadata, @NonNull Bitmap actual) {, + return new BitmapSubject(metadata, actual);, + private BitmapSubject(FailureMetadata failureMetadata, Bitmap subject) {, + super(failureMetadata, subject);, +++ b/gradle.properties, +TRUTH_VERSION=0.36, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestTest.java, +import static org.mockito.Mockito.any;, +import static org.mockito.Mockito.anyBoolean;, +import static org.mockito.Mockito.eq;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java, +import com.google.common.truth.FailureMetadata;, + private static final Subject.Factory<BitmapSubject, Bitmap> FACTORY =,
[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static org.mockito.Mockito.times;, + public void testReceivesThumbnails() {, + String full = mockUri("content://full");, + String thumb = mockUri("content://thumb");, + requestManager, + .load(full), + .thumbnail(requestManager, + .load(thumb)), + .into(target);, +, + verify(target, times(2)).onResourceReady(any(Drawable.class), any(GlideAnimation.class));, + }, +, + @Test, + public void testReceivesRecursiveThumbnails() {, + requestManager, + .load(mockUri("content://first")), + .thumbnail(requestManager, + .load(mockUri("content://second")), + .thumbnail(requestManager, + .load(mockUri("content://third")), + .thumbnail(requestManager, + .load(mockUri("content://fourth")), + ), + ), + ), + .into(target);, + verify(target, times(4)).onResourceReady(any(Drawable.class), any(GlideAnimation.class));, + }, +, + @Test, + public void testReceivesRecursiveThumbnailWithPercentage() {, + requestManager, + .load(mockUri("content://first")), + .thumbnail(requestManager, + .load(mockUri("content://second")), + .thumbnail(0.5f), + ), + .into(target);, + verify(target,
[+++ b/library/src/com/bumptech/glide/resize/load/Downsampler.java, + orientation = new ImageHeaderParser(bis).getOrientation();, + result = new ImageHeaderParser(bis).hasAlpha() ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;, +++ b/library/src/com/bumptech/glide/resize/load/Downsampler.java, + orientation = new ImageHeaderParser(bis).getOrientation();, + result = new ImageHeaderParser(bis).hasAlpha() ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;, +++ /dev/null, +++ b/library/src/com/bumptech/glide/resize/load/Downsampler.java, + orientation = new ImageHeaderParser(bis).getOrientation();, + result = new ImageHeaderParser(bis).hasAlpha() ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;, +++ /dev/null, +++ b/library/src/com/bumptech/glide/resize/load/ImageHeaderParser.java, +package com.bumptech.glide.resize.load;, +, +import com.bumptech.glide.util.Log;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.nio.ByteBuffer;, +import java.nio.ByteOrder;, +, +/**, + * A class for parsing the exif orientation from an InputStream for an image. Handles jpegs and tiffs., + */, +public class ImageHeaderParser {, + private static final
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java, + public static final DownsampleStrategy CENTER_INSIDE = new DownsampleStrategy() {, + * Downsamples, maintaining the original aspect ratio , so that one of the image's dimensions is, + * exactly equal to the requested size and the other dimension is greater than or equal to, + * the requested size., + */, + public static final DownsampleStrategy CENTER_OUTSIDE = new DownsampleStrategy() {, + @Override, + public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, + int requestedHeight) {, + return AT_LEAST.getSampleSize(sourceWidth, sourceHeight, requestedWidth, requestedHeight);, + }, +, + @Override, + public int getDensity(int sourceWidth, int sourceHeight, int requestedWidth,,
[+++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, + <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, + <option name="KEEP_LINE_BREAKS" value="false" />, + <option name="METHOD_PARAMETERS_WRAP" value="1" />, + <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, + <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, + <option name="WRAP_LONG_LINES" value="true" />, +++ b/.travis.yml, + - tools, + - platform-tools, + - build-tools-21.1.2, + - android-21, + - extra-android-m2repository, + - extra-android-support, +, +jdk:, + - openjdk7, + - oraclejdk7, + - oraclejdk8, +, +++ b/.idea/codeStyleSettings.xml, +
[+++ b/gradle.properties, +VERSION_NAME=4.7.0, +VERSION_MINOR=7, +VERSION_PATCH=0]
[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, + private boolean isActiveResourceRetentionAllowed = true;, + /**, + * If set to {@code true}, allows Glide to re-capture resources that are loaded into, + * {@link com.bumptech.glide.request.target.Target}s which are subsequently de-referenced and, + * garbage collected without being cleared., + *, + * <p>Glide's resource re-use system is permissive, which means that's acceptable for callers to, + * load resources into {@link com.bumptech.glide.request.target.Target}s and then never clear the, + * {@link com.bumptech.glide.request.target.Target}. To do so, Glide uses, + * {@link java.lang.ref.WeakReference}s to track resources that belong to, + * {@link com.bumptech.glide.request.target.Target}s that haven't yet been cleared.
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import android.support.annotation.NonNull;, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import android.support.annotation.NonNull;, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import android.support.annotation.NonNull;, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/SafeKeyGenerator.java, +import android.support.annotation.NonNull;, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import android.support.annotation.NonNull;, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/SafeKeyGenerator.java, +import android.support.annotation.NonNull;, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +import android.support.annotation.NonNull;, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import android.support.annotation.NonNull;, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/SafeKeyGenerator.java, +import android.support.annotation.NonNull;, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +import android.support.annotation.NonNull;, +
[+++ b/checkstyle.xml, + <property name="max" value="100" />, +++ b/checkstyle.xml, + <property name="max" value="100" />, +++ b/integration/gifencoder/build.gradle, +++ b/checkstyle.xml, + <property name="max" value="100" />, +++ b/integration/gifencoder/build.gradle, +++ b/integration/gifencoder/gifencoder.iml, + <excludeFolder url="file://$MODULE_DIR$/build/docs" />, +++ b/checkstyle.xml, + <property name="max" value="100" />, +++ b/integration/gifencoder/build.gradle, +++ b/integration/gifencoder/gifencoder.iml, + <excludeFolder url="file://$MODULE_DIR$/build/docs" />, +++ b/integration/gifencoder/lint.xml, +++ b/checkstyle.xml, + <property name="max" value="100" />, +++ b/integration/gifencoder/build.gradle, +++ b/integration/gifencoder/gifencoder.iml, + <excludeFolder url="file://$MODULE_DIR$/build/docs" />, +++ b/integration/gifencoder/lint.xml, +++ b/integration/gifencoder/src/androidTest/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, + @Mock, + Resource<GifDrawable> resource;, + @Mock, + GifDecoder decoder;, + @Mock, + GifHeaderParser parser;, + @Mock, + AnimatedGifEncoder gifEncoder;, + @Mock, + Resource<Bitmap> frameResource;, + @Mock, + Transformation frameTransformation;, + @Mock,
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java]
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java, +import org.robolectric.RobolectricTestRunner;, +, +import com.bumptech.glide.Registry.NoModelLoaderAvailableException;, +, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, + @Mock ModelLoaderFactory<String, String> firstFactory;, + @Mock ModelLoader<String, String> firstModelLoader;, + @Mock MultiModelLoaderFactory.Factory multiModelLoaderFactory;, + @Mock ModelLoaderFactory<String, String> secondFactory;, + @Mock ModelLoader<String, String> secondModelLoader;, +, + public @Rule ExpectedException exception = ExpectedException.none();, + when(firstFactory.build(anyContext(), eq(multiFactory))).thenReturn(firstModelLoader);, + when(secondFactory.build(anyContext(), eq(multiFactory))).thenReturn(secondModelLoader);, + multiFactory.append(String.class, String.class, firstFactory);, + assertThat(modelLoaders).containsExactly(firstModelLoader);, + multiFactory.append(String.class, String.class, firstFactory);, + ModelLoader<String, String> modelLoader = multiFactory.build(String.class, String.class);, + assertThat(modelLoader).isEqualTo(firstModelLoader);, + multiFactory.prepend(String.class, String.class, firstFactory);, + assertThat(modelLoaders).containsExactly(firstModelLoader);, + multiFactory.prepend(String.class, String.class, firstFactory);, + ModelLoader<String, String> modelLoader = multiFactory.build(String.class, String.class);, + assertThat(modelLoader).isEqualTo(firstModelLoader);, + multiFactory.replace(String.class, String.class, firstFactory);, + assertThat(modelLoaders).containsExactly(firstModelLoader);, + multiFactory.replace(String.class, String.class, firstFactory);, +
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + * Clears disk cache., + *, + * <p>, + * This method should always be called on a background thread, since it is a blocking call., + * </p>, + */, + public void clearDiskCache() {, + Util.assertBackgroundThread();, + getEngine().clearDiskCache();, + }, +, + /**, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + * Clears disk cache., + *, + * <p>, + * This method should always be called on a background thread, since it is a blocking call., + * </p>, + */, + public void clearDiskCache() {, + Util.assertBackgroundThread();, + getEngine().clearDiskCache();, + }, +, + /**, +++
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java, + private static final int DEFAULT_COMPRESSION_QUALITY = 90;, + this(null, DEFAULT_COMPRESSION_QUALITY);]
[+++ b/gradle.properties, +OK_HTTP_VERSION=3.12.1]
[+++ b/library/build.gradle, + androidTestCompile 'com.google.guava:guava-testlib:18.0', + '**/Manifest*.*',, + '**/BitmapRequestBuilder.class',, + '**/DrawableRequestBuilder.class',, + '**/GifRequestBuilder.class', ], +++ b/library/build.gradle, + androidTestCompile 'com.google.guava:guava-testlib:18.0', + '**/Manifest*.*',, + '**/BitmapRequestBuilder.class',, + '**/DrawableRequestBuilder.class',, + '**/GifRequestBuilder.class', ], +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java, +package com.bumptech.glide.load.data;, +, +import android.content.res.AssetFileDescriptor;, +import android.content.res.AssetManager;, +import android.os.ParcelFileDescriptor;, +import com.bumptech.glide.Priority;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import java.io.IOException;, +, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +public class FileDescriptorAssetPathFetcherTest {, + private FileDescriptorAssetPathFetcher fetcher;, + private ParcelFileDescriptor expected;, + private String assetPath;, +, +
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, + @Test(expected = NullPointerException.class), + public void testThrowsIfWrappedResourceIsNull() {, + new EngineResource<Object>(null, false);, + }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, + @Test(expected = NullPointerException.class), + public void testThrowsIfWrappedResourceIsNull() {, + new EngineResource<Object>(null, false);, + }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/SimpleResourceTest.java, + @Test(expected = NullPointerException.class), + public void testThrowsIfGivenNullData() {, + new SimpleResource<Object>(null);, + }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, + @Test(expected = NullPointerException.class), + public void testThrowsIfWrappedResourceIsNull() {, + new EngineResource<Object>(null, false);, + }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/SimpleResourceTest.java, + @Test(expected = NullPointerException.class), + public void testThrowsIfGivenNullData() {, + new SimpleResource<Object>(null);, + }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java, + @Test(expected = NullPointerException.class), + public void testThrowsIfBitmapIsNull() {,
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java, +import android.support.v4.content.ContextCompat;, + public static Drawable getDrawable(, + Context ourContext, Context targetContext, @DrawableRes int id) {, + return getDrawable(ourContext, targetContext, id, /*theme=*/ null);, + public static Drawable getDrawable(, + Context ourContext, @DrawableRes int id, @Nullable Theme theme) {, + return getDrawable(ourContext, ourContext, id, theme);, + }, +, + private static Drawable getDrawable(, + Context ourContext, Context targetContext, @DrawableRes int id, @Nullable Theme theme) {, + return loadDrawableV7(targetContext, id, theme);, + } catch (IllegalStateException e) {, + if (ourContext.getPackageName().equals(targetContext.getPackageName())) {, + throw e;, + }, + return ContextCompat.getDrawable(targetContext, id);, + return loadDrawableV4(targetContext, id, theme != null ? theme
[+++ b/library/src/com/bumptech/glide/resize/ImageManager.java, + public void onStreamReady(final InputStream is) {, + future = executor.submit(new Runnable() {, + @Override, + public void run() {, + });, + }, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, + public void onStreamReady(final InputStream is) {, + future = executor.submit(new Runnable() {, + @Override, + public void run() {, + });, + }, +++ b/samples/flickr/res/layout/flickr_search_activity.xml, + android:id="@+id/search_loading", +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, + public void onStreamReady(final InputStream is) {, + future = executor.submit(new Runnable() {, + @Override, + public void run() {, + });, + }, +++ b/samples/flickr/res/layout/flickr_search_activity.xml, + android:id="@+id/search_loading", +++ b/samples/flickr/res/values/strings.xml, + <string name="search_failed">Search for \"%s\" failed, check your network connection and
[+++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +import android.support.annotation.NonNull;, + boolean handles(@NonNull T source, @NonNull Options options) throws IOException;, + Resource<Z> decode(@NonNull T source, int width, int height, @NonNull Options options), + throws IOException;, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +import android.support.annotation.NonNull;, + boolean handles(@NonNull T source, @NonNull Options options) throws IOException;, + Resource<Z> decode(@NonNull T source, int width, int height, @NonNull Options options), + throws IOException;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineResource.java, +import android.support.annotation.NonNull;, + @NonNull, + @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +import android.support.annotation.NonNull;, + boolean handles(@NonNull T source, @NonNull Options options) throws IOException;, + Resource<Z> decode(@NonNull T source, int width, int height, @NonNull Options options), + throws IOException;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineResource.java, +import android.support.annotation.NonNull;,
[+++ b/Makefile, + cp -f third_party/disklrucache/disklrucache*.jar library/libs, + cp -f third_party/gif_decoder/bin/gifdecoder*.jar library/libs, + cp -f third_party/volley/volley/bin/volley.jar library/libs, +++ b/Makefile, + cp -f third_party/disklrucache/disklrucache*.jar library/libs, + cp -f third_party/gif_decoder/bin/gifdecoder*.jar library/libs, + cp -f third_party/volley/volley/bin/volley.jar library/libs, +++ b/library/.gitignore, +libs/disklrucache*.jar, +++ b/Makefile, + cp -f third_party/disklrucache/disklrucache*.jar library/libs, + cp -f third_party/gif_decoder/bin/gifdecoder*.jar library/libs, + cp -f third_party/volley/volley/bin/volley.jar library/libs, +++ b/library/.gitignore, +libs/disklrucache*.jar, +++ /dev/null, +++ b/Makefile, + cp -f third_party/disklrucache/disklrucache*.jar library/libs, + cp -f third_party/gif_decoder/bin/gifdecoder*.jar library/libs, + cp -f third_party/volley/volley/bin/volley.jar library/libs, +++ b/library/.gitignore, +libs/disklrucache*.jar, +++ /dev/null, +++ b/third_party/disklrucache/LICENSE, +Copyright 2012 Jake Wharton, +Copyright 2011 The Android Open Source Project, +, +Licensed under the Apache
[+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + *, + * @deprecated If you must disable hardware bitmaps, set, + * {@link com.bumptech.glide.load.resource.bitmap.Downsampler#ALLOW_HARDWARE_CONFIG} to false, + * instead., + @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + *, + * @deprecated If you must disable hardware bitmaps, set, + * {@link com.bumptech.glide.load.resource.bitmap.Downsampler#ALLOW_HARDWARE_CONFIG} to false, + * instead., + @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, + private boolean isScaleOnlyOrNoTransform;, + boolean isScaleOnlyOrNoTransform,, + this.isScaleOnlyOrNoTransform = isScaleOnlyOrNoTransform;, + boolean isScaleOnlyOrNoTransform() {, + return isScaleOnlyOrNoTransform;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, + *, + * @deprecated If you must disable hardware bitmaps, set, + * {@link com.bumptech.glide.load.resource.bitmap.Downsampler#ALLOW_HARDWARE_CONFIG} to false, + * instead., + @Deprecated, +++
[+++ b/.gitignore, +++ b/.gitignore, +++ b/README.md, +Sam Judd - <sam.a.judd@gmail.com> @samajudd, +++ b/.gitignore, +++ b/README.md, +Sam Judd - <sam.a.judd@gmail.com> @samajudd, +++ b/library/src/com/bumptech/glide/Glide.java, + if (tag != null && tag instanceof ImageViewTarget) {, + ImagePresenter<T> result = target.getImagePresenter();, +++ b/.gitignore, +++ b/README.md, +Sam Judd - <sam.a.judd@gmail.com> @samajudd, +++ b/library/src/com/bumptech/glide/Glide.java, + if (tag != null && tag instanceof ImageViewTarget) {, + ImagePresenter<T> result = target.getImagePresenter();, +++ b/library/src/com/bumptech/glide/presenter/target/ImageViewTarget.java, + * A target wrapping an ImageView that makes use of {@link ImageView#setTag(Object)} to store and retrieve, + * ImagePresenters. Also obtains the runtime dimensions of the ImageView., + /**, + * TODO: use
[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, + public BitmapRequestBuilder<ModelType, TranscodeType> diskCacheStrategy(DiskCacheStrategy strategy) {, + super.diskCacheStrategy(strategy);, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, + public BitmapRequestBuilder<ModelType, TranscodeType> diskCacheStrategy(DiskCacheStrategy strategy) {, + super.diskCacheStrategy(strategy);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, + public DrawableRequestBuilder<ModelType> listener(RequestListener<ModelType, Drawable> requestListener) {, + public DrawableRequestBuilder<ModelType> diskCacheStrategy(DiskCacheStrategy strategy) {, + super.diskCacheStrategy(strategy);, + return this;, + }, +, + @Override, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, + public BitmapRequestBuilder<ModelType, TranscodeType> diskCacheStrategy(DiskCacheStrategy strategy) {, + super.diskCacheStrategy(strategy);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, + public DrawableRequestBuilder<ModelType> listener(RequestListener<ModelType, Drawable> requestListener) {, + public DrawableRequestBuilder<ModelType> diskCacheStrategy(DiskCacheStrategy strategy) {, + super.diskCacheStrategy(strategy);, + return this;, + }, +, + @Override, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, + private
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;, + registry = new Registry();, + registry.register(new DefaultImageHeaderParser());, +, + Downsampler downsampler = new Downsampler(registry.getImageHeaderParsers(),, + resources.getDisplayMetrics(), bitmapPool, arrayPool);, + new ByteBufferGifDecoder(context, registry.getImageHeaderParsers(), bitmapPool, arrayPool);, +, + registry.register(ByteBuffer.class, new ByteBufferEncoder()), + new StreamGifDecoder(registry.getImageHeaderParsers(), byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;, + registry = new Registry();, + registry.register(new DefaultImageHeaderParser());, +, + Downsampler downsampler = new Downsampler(registry.getImageHeaderParsers(),, + resources.getDisplayMetrics(), bitmapPool, arrayPool);, + new ByteBufferGifDecoder(context, registry.getImageHeaderParsers(), bitmapPool, arrayPool);, +, + registry.register(ByteBuffer.class, new ByteBufferEncoder()), + new StreamGifDecoder(registry.getImageHeaderParsers(), byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import com.bumptech.glide.load.ImageHeaderParser;, +import com.bumptech.glide.provider.ImageHeaderParserRegistry;, + private final ImageHeaderParserRegistry imageHeaderParserRegistry;, + this.imageHeaderParserRegistry = new ImageHeaderParserRegistry();, + public Registry register(ImageHeaderParser parser)
[+++ b/build.gradle, + // TODO: remove this when robolectric 2.4 is released., + maven {, + url 'https://oss.sonatype.org/content/repositories/snapshots', + }, + // TODO: remove this when robolectric 2.4 is released., + maven {, + url 'https://oss.sonatype.org/content/repositories/snapshots', + }, +++ b/build.gradle, + // TODO: remove this when robolectric 2.4 is released., + maven {, + url 'https://oss.sonatype.org/content/repositories/snapshots', + }, + // TODO: remove this when robolectric 2.4 is released., + maven {, + url 'https://oss.sonatype.org/content/repositories/snapshots', + }, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=2.4-SNAPSHOT, +++ b/build.gradle, + // TODO: remove this when robolectric 2.4 is released., + maven {, + url 'https://oss.sonatype.org/content/repositories/snapshots', + },
[+++ b/gradle.properties, +VERSION_NAME=4.1.1, +VERSION_MINOR=1, +VERSION_PATCH=1]
[+++ b/library/AndroidManifest.xml, + android:versionCode="5", + android:versionName="3.2.0a" >]
[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + return SourceVersion.latestSupported();]
[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.image.ImageManagerLoader;, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.image.ImageManagerLoader;, +++ b/library/src/com/bumptech/glide/loader/image/ImageManagerLoader.java, +package com.bumptech.glide.loader.image;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import com.bumptech.glide.Glide;, +import com.bumptech.glide.loader.stream.StreamLoader;, +import com.bumptech.glide.resize.Downsampler;, +import com.bumptech.glide.resize.Transformation;, +import com.bumptech.glide.resize.ImageManager;, +import com.bumptech.glide.resize.LoadedCallback;, +, +import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;, +, +/**, + * A base class for loaders that user ImageManager. Primarily responsible for keeping track of bitmaps for recycling, + * purposes., + */, +public class ImageManagerLoader implements ImageLoader {, +, + protected final ImageManager imageManager;, + private final Downsampler downsampler;, + private Bitmap acquired;, + private Object loadToken;, +, + public ImageManagerLoader(Context context) {, + this(context, Downsampler.AT_LEAST);, + }, +, + public ImageManagerLoader(ImageManager
[+++ b/samples/flickr/src/main/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10", + android:targetSdkVersion="19" />, +, +, +++ b/samples/flickr/src/main/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10", + android:targetSdkVersion="19" />, +, +, +++ b/samples/gallery/src/main/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="19", + android:targetSdkVersion="19" />, +++ b/samples/flickr/src/main/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10", + android:targetSdkVersion="19" />, +, +, +++ b/samples/gallery/src/main/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="19", + android:targetSdkVersion="19" />, +++ b/samples/giphy/src/main/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10", + android:targetSdkVersion="19" />, +++ b/samples/flickr/src/main/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10", + android:targetSdkVersion="19" />, +, +, +++ b/samples/gallery/src/main/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="19", + android:targetSdkVersion="19" />, +++ b/samples/giphy/src/main/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10", + android:targetSdkVersion="19" />]
[+++ b/library/src/com/bumptech/photos/loader/opener/FileInputStreamsOpener.java, +package com.bumptech.photos.loader.opener;, +, +import java.io.File;, +import java.io.FileInputStream;, +import java.io.IOException;, +, +/**, + * Created with IntelliJ IDEA., + * User: sam, + * Date: 7/10/13, + * Time: 11:11 PM, + * To change this template use File | Settings | File Templates., + */, +public class FileInputStreamsOpener implements StreamOpener {, + private final File file;, +, + public FileInputStreamsOpener(String path) {, + this(new File(path));, + }, +, + public FileInputStreamsOpener(File file) {, + this.file = file;, + }, +, + @Override, + public Streams openStreams() throws IOException {, + return new Streams(new FileInputStream(file), new FileInputStream(file));, +
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java]
[+++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java, + } else {, + animatable = null;]
[+++ b/annotation/compiler/build.gradle, +++ b/annotation/compiler/build.gradle, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + private boolean isGeneratedAppGlideModulePending;, +// if (set.isEmpty() && !isGeneratedAppGlideModulePending) {, +// return false;, +// }, + isGeneratedAppGlideModulePending = true;, +++ b/annotation/compiler/build.gradle, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + private boolean isGeneratedAppGlideModulePending;, +// if (set.isEmpty() && !isGeneratedAppGlideModulePending) {, +// return false;, +// }, + isGeneratedAppGlideModulePending = true;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, + + " RequestBuilder object as their first and only parameter, but given multiple for: ", + TypeMirror argumentType = first.asType();, + if (!argumentType.toString().startsWith("com.bumptech.glide.RequestBuilder")) {, + + " RequestBuilder object as their first and only parameter, but given: " + argumentType);, +++ b/annotation/compiler/build.gradle, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + private boolean isGeneratedAppGlideModulePending;,
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-4.2.1-all.zip]
[+++ b/checkstyle.xml, + <module name="ImportOrder">, + <!-- Checks for out of order import statements. -->, +, + <property name="severity" value="error"/>, + <property name="groups" value="com.google,*,java,javax"/>, + <!-- This ensures that static imports go first. -->, + <property name="option" value="top"/>, + <property name="tokens" value="STATIC_IMPORT, IMPORT"/>, + </module>, +++ b/checkstyle.xml, + <module name="ImportOrder">, + <!-- Checks for out of order import statements. -->, +, + <property name="severity" value="error"/>, + <property name="groups" value="com.google,*,java,javax"/>, + <!-- This ensures that static imports go first. -->, + <property name="option" value="top"/>, + <property name="tokens" value="STATIC_IMPORT, IMPORT"/>, + </module>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +, +++ b/checkstyle.xml, + <module name="ImportOrder">, +
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + VideoBitmapDecoder videoBitmapDecoder = new VideoBitmapDecoder(bitmapPool);, + ByteBufferBitmapDecoder byteBufferBitmapDecoder = new ByteBufferBitmapDecoder(downsampler);, + StreamBitmapDecoder streamBitmapDecoder = new StreamBitmapDecoder(downsampler, arrayPool);, + ResourceDrawableDecoder resourceDrawableDecoder =, + new ResourceDrawableDecoder(context, bitmapPool);, + ResourceLoader.StreamFactory resourceLoaderStreamFactory =, + new ResourceLoader.StreamFactory(resources);, + ResourceLoader.UriFactory resourceLoaderUriFactory =, + new ResourceLoader.UriFactory(resources);, + ResourceLoader.FileDescriptorFactory resourceLoaderFileDescriptorFactory =, + new ResourceLoader.FileDescriptorFactory(resources);, + BitmapEncoder bitmapEncoder = new BitmapEncoder();, + .append(Registry.BUCKET_BITMAP, ByteBuffer.class, Bitmap.class, byteBufferBitmapDecoder), + .append(Registry.BUCKET_BITMAP, InputStream.class, Bitmap.class, streamBitmapDecoder), + .append(, + Registry.BUCKET_BITMAP, ParcelFileDescriptor.class, Bitmap.class, videoBitmapDecoder), + .append(Bitmap.class, bitmapEncoder), + /* BitmapDrawables */, + .append(, + Registry.BUCKET_BITMAP_DRAWABLE,, + ByteBuffer.class,, + BitmapDrawable.class,, + new BitmapDrawableDecoder<>(resources, bitmapPool, byteBufferBitmapDecoder)), + .append(, + Registry.BUCKET_BITMAP_DRAWABLE,, + InputStream.class,,
[+++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]gif_encoder[/\\].*" checks=".*"/>, +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]gif_encoder[/\\].*" checks=".*"/>, +++ b/library/build.gradle, + compile project(':third_party:gif_encoder'), +++ b/checkstyle_suppressions.xml, + <suppress files=".*[/\\]gif_encoder[/\\].*" checks=".*"/>, +++ b/library/build.gradle, + compile project(':third_party:gif_encoder'), +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceEncoderTest.java, +import android.graphics.Bitmap;, +import com.bumptech.glide.gifdecoder.GifDecoder;, +import com.bumptech.glide.gifdecoder.GifHeader;, +import com.bumptech.glide.gifdecoder.GifHeaderParser;, +import com.bumptech.glide.gifencoder.AnimatedGifEncoder;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import org.mockito.InOrder;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.verify;, + private GifDecoder decoder;, + private GifHeaderParser parser;, + private AnimatedGifEncoder gifEncoder;, + private Resource<Bitmap> frameResource;, + private Transformation frameTransformation;, +, + GifResourceEncoder.Factory factory = mock(GifResourceEncoder.Factory.class);, + decoder = mock(GifDecoder.class);, + when(factory.buildDecoder(any(GifDecoder.BitmapProvider.class))).thenReturn(decoder);, + parser = mock(GifHeaderParser.class);, + when(factory.buildParser()).thenReturn(parser);,
[+++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.cache.DiskCache;, +import com.bumptech.photos.resize.cache.DiskCacheAdapter;, +import com.bumptech.photos.resize.cache.disk.AndroidDiskCache;, + private static DiskCache buildDiskCacheFor(Options options, File diskCacheDir) {, + if (options.useDiskCache && options.maxDiskCacheSize <= 0) {, + options.maxDiskCacheSize = MAX_DISK_CACHE_SIZE;, + }, + final DiskCache result;, + if (diskCacheDir == null || !options.useDiskCache) {, + result = new DiskCacheAdapter();, + } else {, + result = AndroidDiskCache.get(diskCacheDir, options.maxDiskCacheSize);, + }, +, + return result;, + }, +, + this(context, buildDiskCacheFor(options, diskCacheDir), resizeService, options);, + }, +, + public ImageManager(Context context, DiskCache diskCache, ExecutorService resizeService, Options options) {, + diskCacheFormat = options.diskCacheFormat;, + this.diskCache = diskCache;, + path = diskCache.get(String.valueOf(key));, +
[+++ b/gradle.properties, +VERSION_NAME=4.6.0-SNAPSHOT, +VERSION_MINOR=6]
[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + if (!requestOptions.isTransformationSet(), + && requestOptions.isTransformationAllowed(), + && view.getScaleType() != null) {, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, + if (!requestOptions.isTransformationSet(), + && requestOptions.isTransformationAllowed(), + && view.getScaleType() != null) {, +++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, + private static final int TRANSFORMATION_ALLOWED = 1 << 16;, + private static final int TRANSFORMATION_REQUIRED = 1 << 17;, + private boolean isTransformationAllowed = true;, + public final boolean isTransformationAllowed() {, + return isTransformationAllowed;, + }, +, + * <p>This will override previous calls to {@link #dontTransform()}., + *, + * <p>This will override previous calls to {@link #dontTransform()}., + *, + * <p>This will override previous calls
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.view.View;, +import com.bumptech.glide.util.Preconditions;, + Preconditions.checkNotNull(, + "You cannot start a load on a not yet attached View or a Fragment where getActivity() ", + + "returns null (which usually occurs when getActivity() is called before the Fragment ", + + "is attached or after the Fragment is destroyed).");, + /**, + * Begin a load with Glide that will be tied to the lifecycle of the {@link Fragment},, + * {@link android.app.Fragment}, or {@link Activity} that contains the View., + *, + * <p>A {@link Fragment} or {@link android.app.Fragment} is assumed to contain a View if
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java, +package com.bumptech.glide.load.data.mediastore;, +, +import android.net.Uri;, +import android.provider.MediaStore;, +import com.bumptech.glide.Priority;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import java.io.ByteArrayInputStream;, +import java.io.InputStream;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +public class ThumbFetcherTest {, +, + @Mock ThumbnailStreamOpener opener;, + private ThumbFetcher fetcher;, + private Uri uri;, +, + @Before, + public
[+++ b/gradle.properties, +VERSION_NAME=3.5.0-SNAPSHOT, +VERSION_MINOR=5, +VERSION_CODE=8, +++ b/gradle.properties, +VERSION_NAME=3.5.0-SNAPSHOT, +VERSION_MINOR=5, +VERSION_CODE=8, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.2.0-SNAPSHOT, +VERSION_MINOR=2, +VERSION_CODE=4, +++ b/gradle.properties, +VERSION_NAME=3.5.0-SNAPSHOT, +VERSION_MINOR=5, +VERSION_CODE=8, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=1.2.0-SNAPSHOT, +VERSION_MINOR=2, +VERSION_CODE=4, +++ b/integration/volley/gradle.properties, +VERSION_NAME=1.2.0-SNAPSHOT, +VERSION_MINOR=2, +VERSION_CODE=4]
[+++ b/library/custom_rules.xml, + <xmlproperty file="AndroidManifest.xml" prefix="mymanifest" collapseAttributes="true"/>, +, + <jar destfile="bin/glide-${mymanifest.manifest.android:versionName}.jar", + <jar destfile="bin/glide-minus-volley-${mymanifest.manifest.android:versionName}.jar"]
[+++ b/gradle.properties, +VERSION_NAME=4.4.0]
[+++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.load.DataSource;, + * @param dataSource The {@link DataSource} the resource was loaded from., + boolean onResourceReady(R resource, Object model, Target<R> target, DataSource dataSource,, +++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.load.DataSource;, + * @param dataSource The {@link DataSource} the resource was loaded from., + boolean onResourceReady(R resource, Object model, Target<R> target, DataSource dataSource,, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + || !requestListener.onResourceReady(result, model, target, dataSource, isFirstResource)) {, +++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.load.DataSource;, + * @param dataSource The {@link DataSource} the resource was loaded from., + boolean onResourceReady(R resource, Object model, Target<R> target, DataSource dataSource,, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, + || !requestListener.onResourceReady(result, model, target, dataSource, isFirstResource)) {, +++
[+++ b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java, + * public void onResourceReady(Bitmap resource, Transition<? super Bitmap> transition) {]
[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, + Arrays.fill(mainPixels, pi, npix, (byte) COLOR_TRANSPARENT_BLACK);]
[+++ b/build.gradle, + toolVersion = '8.4', +++ b/build.gradle, + toolVersion = '8.4', +++ b/checkstyle.xml, + <message key="import.illegal" value="Import from illegal package - {0}. Use org.mockito.Matchers to instantiate argument matchers." />, +, + <!-- ArgumentMatchers isn't available internally, the same methods are available on org.mockito.Mockito. -->, + <module name="IllegalImport">, + <property name="illegalClasses" value="org\.mockito\.ArgumentMatchers\..*" />, + <property name="regexp" value="true" />, + <message key="import.illegal" value="Import from illegal class - {0}. Use org.mockito.Mockito to statically import matcher methods." />, + </module>, +, + <property name="separated" value="true" />, +++ b/build.gradle, + toolVersion = '8.4', +++ b/checkstyle.xml, + <message key="import.illegal" value="Import from illegal package -
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + public void onResourceReady(Object resource, GlideAnimation<? super Object> glideAnimation) {]
[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java, + MediaMetadataRetriever mediaMetadataRetriever = factory.build();, + try {, + mediaMetadataRetriever.setDataSource(resource.getFileDescriptor());, + } finally {, + }]
[+++ b/library/lint.xml, + <issue id="InlinedApi">, + <ignore path="src/com/bumptech/glide/resize/cache/LruMemoryCache.java" />, + </issue>]
[+++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, + RecyclableBufferedInputStream bis = new RecyclableBufferedInputStream(is, tempBytes[0]);, +++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, + RecyclableBufferedInputStream bis = new RecyclableBufferedInputStream(is, tempBytes[0]);, +++ b/library/src/com/bumptech/photos/resize/RecyclableBufferedInputStream.java, +package com.bumptech.photos.resize;, +, +/*, + * Licensed to the Apache Software Foundation (ASF) under one or more, + * contributor license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright ownership., + * The ASF licenses this file to You under the Apache License, Version 2.0, + * (the &quot;License&quot;); you may not use this file except in compliance with, + * the License. You may obtain a copy of the License
[+++ b/library/findbugs-exclude.xml, + <Class name="com.bumptech.glide.load.engine.executor.RuntimeCompat" />, +++ b/library/findbugs-exclude.xml, + <Class name="com.bumptech.glide.load.engine.executor.RuntimeCompat" />, +++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/RuntimeCompat.java, + private RuntimeCompat() {, + // Utility class., + }, + @SuppressWarnings("PMD"), +++ b/library/findbugs-exclude.xml, + <Class name="com.bumptech.glide.load.engine.executor.RuntimeCompat" />, +++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/RuntimeCompat.java, + private RuntimeCompat() {, + // Utility class., + }, + @SuppressWarnings("PMD"), +++ b/library/src/test/java/com/bumptech/glide/load/engine/executor/MockGlideExecutor.java, + private MockGlideExecutor() {, + }, + public void execute(final Runnable command) {]
[+++ b/annotation/compiler/test/build.gradle, +, +task regenerateTestResources {, + group 'Verification', + description 'Regenerates all test resource files under annotation/compiler/test/src/test/resources that are compared against the current output to detect regressions', + tasks.withType(Test) {, + systemProperties.put("com.bumptech.glide.annotation.compiler.test.regenerate.path", projectDir), + }, + doFirst {, + println("Regenerating test resources...."), + }, + doLast {, + println("Finished regenerating test resources"), + }, +}, +regenerateTestResources.finalizedBy(test), +++ b/annotation/compiler/test/build.gradle, +, +task regenerateTestResources {, + group 'Verification', + description 'Regenerates all test resource files under annotation/compiler/test/src/test/resources that are compared against the current output to detect regressions', + tasks.withType(Test) {, + systemProperties.put("com.bumptech.glide.annotation.compiler.test.regenerate.path", projectDir), + }, + doFirst {, + println("Regenerating test
[+++ b/library/src/main/java/com/bumptech/glide/load/data/LoadDataSet.java, + return "DataFetcherSet{modelLoaders=" +, + Arrays.toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) + "}";, +++ b/library/src/main/java/com/bumptech/glide/load/data/LoadDataSet.java, + return "DataFetcherSet{modelLoaders=" +, + Arrays.toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) + "}";, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + private volatile DataFetcher<?> fetcher;, + public void cancel() {, + DataFetcher<?> local = fetcher;, + if (local != null) {, + local.cancel();, + }, + }, +, + @Override, +++ b/library/src/main/java/com/bumptech/glide/load/data/LoadDataSet.java, + return "DataFetcherSet{modelLoaders=" +, + Arrays.toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) + "}";, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + private volatile DataFetcher<?> fetcher;, + public void cancel() {, + DataFetcher<?> local = fetcher;, + if (local != null) {, + local.cancel();, + }, + }, +, + @Override, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java,
[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Context context, int logLevel, RequestOptions defaultRequestOptions) {, +, + DecodeFormat decodeFormat = defaultRequestOptions.getOptions().get(Downsampler.DECODE_FORMAT);, + glideContext = new GlideContext(context, registry, imageViewTargetFactory,, + defaultRequestOptions, engine, this, logLevel);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, + Context context, int logLevel, RequestOptions defaultRequestOptions) {, +, + DecodeFormat decodeFormat = defaultRequestOptions.getOptions().get(Downsampler.DECODE_FORMAT);, + glideContext = new GlideContext(context, registry, imageViewTargetFactory,, + defaultRequestOptions, engine, this, logLevel);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.request.RequestOptions;, + private RequestOptions defaultRequestOptions = new RequestOptions();, + * @param diskCacheFactory The disk cache factory to use., + * for thumbnail requests to work properly., + * for thumbnail requests to work properly., + * Sets the default {@link
[+++ b/library/src/main/java/com/bumptech/glide/provider/LoadPathCache.java, +import com.bumptech.glide.load.ResourceDecoder;, + new DecodePath<Object, Object, Object>(, + Collections.<ResourceDecoder<Object, Object>>emptyList(),]
[+++ b/.gitmodules, +++ b/.gitmodules, +++ /dev/null, +++ b/.gitmodules, +++ /dev/null, +++ b/samples/flickr/AndroidManifest.xml, + android:theme="@style/Theme.AppCompat">, +++ b/.gitmodules, +++ /dev/null, +++ b/samples/flickr/AndroidManifest.xml, + android:theme="@style/Theme.AppCompat">, +++ b/samples/flickr/build.gradle, + compile 'com.android.support:appcompat-v7:18.0.+', +++ b/.gitmodules, +++ /dev/null, +++ b/samples/flickr/AndroidManifest.xml, + android:theme="@style/Theme.AppCompat">, +++ b/samples/flickr/build.gradle, + compile 'com.android.support:appcompat-v7:18.0.+', +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java, +import android.support.v4.app.Fragment;, +, +public class FlickrPhotoGrid extends Fragment implements PhotoViewer {, +++ b/.gitmodules, +++ /dev/null, +++ b/samples/flickr/AndroidManifest.xml, + android:theme="@style/Theme.AppCompat">, +++ b/samples/flickr/build.gradle, + compile 'com.android.support:appcompat-v7:18.0.+', +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java, +import android.support.v4.app.Fragment;, +, +public class FlickrPhotoGrid extends Fragment implements PhotoViewer {, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java, +import android.support.v4.app.Fragment;, +, +public class FlickrPhotoList extends Fragment implements PhotoViewer {, +++ b/.gitmodules, +++ /dev/null, +++ b/samples/flickr/AndroidManifest.xml, +
[+++ b/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java, + * @param width The requested width (> 0, or == Target.SIZE_ORIGINAL)., + * @param height The requested height (> 0, or == Target.SIZE_ORIGINAL)., + * @throws IllegalArgumentException if width/height doesn't meet (> 0, or == Target.SIZE_ORIGINAL)]
[+++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=27.1.0]
[+++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper;, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation;, + GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, Drawable> {, + LoadProvider<ModelType, ImageVideoWrapper, GifBitmapWrapper, Drawable> loadProvider, Glide glide) {, + GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, Drawable> thumbnailRequest) {, + ResourceDecoder<ImageVideoWrapper, GifBitmapWrapper> decoder) {, + ResourceDecoder<InputStream, GifBitmapWrapper> cacheDecoder) {, + ResourceEncoder<GifBitmapWrapper> encoder) {, + return transform(new GifBitmapWrapperTransformation(context, bitmapTransformation));, + Transformation<GifBitmapWrapper> transformation) {, + ResourceTranscoder<GifBitmapWrapper, Drawable> transcoder) {, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper;, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation;, + GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, Drawable> {, + LoadProvider<ModelType, ImageVideoWrapper, GifBitmapWrapper, Drawable> loadProvider, Glide glide) {, + GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, Drawable> thumbnailRequest) {, + ResourceDecoder<ImageVideoWrapper, GifBitmapWrapper> decoder) {, + ResourceDecoder<InputStream, GifBitmapWrapper> cacheDecoder) {, + ResourceEncoder<GifBitmapWrapper> encoder) {, +
[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, + @Rule, + public ExpectedException expectedException = ExpectedException.none();, +, + public void load_withBitmapAliasResourceId_asBitmap_producesNonNullBitmap(), + throws ExecutionException, InterruptedException {, + Bitmap bitmap = Glide.with(context), + .asBitmap(), + .load(ResourceIds.drawable.bitmap_alias), + .submit(), + .get();, + assertThat(bitmap).isNotNull();, + }, +, + @Test, + public void load_withShapeDrawableResourceId_asBitmap_withSizeOriginal_fails(), + throws ExecutionException, InterruptedException {, + expectedException.expect(ExecutionException.class);, + Glide.with(context), + .asBitmap(), + .load(ResourceIds.drawable.shape_drawable), + .submit(), + .get();, + }, +, + @Test, + public void load_withShapeDrawableResourceId_asBitmap_withValidSize_returnsNonNullBitmap(), + throws ExecutionException, InterruptedException {, + Bitmap bitmap = Glide.with(context), + .asBitmap(), + .load(ResourceIds.drawable.shape_drawable), + .submit(100, 200), + .get();, + assertThat(bitmap).isNotNull();, + assertThat(bitmap.getWidth()).isEqualTo(100);, + assertThat(bitmap.getHeight()).isEqualTo(200);,
[+++ b/gradle.properties, +org.gradle.daemon=true, +++ b/gradle.properties, +org.gradle.daemon=true, +++ b/library/build.gradle, + classpath 'org.robolectric:robolectric-gradle-plugin:0.11.+', +apply plugin: 'robolectric', + minSdkVersion 10, + targetSdkVersion 19, +++ b/gradle.properties, +org.gradle.daemon=true, +++ b/library/build.gradle, + classpath 'org.robolectric:robolectric-gradle-plugin:0.11.+', +apply plugin: 'robolectric', + minSdkVersion 10, + targetSdkVersion 19, +++ b/library/lint.xml, + <ignore path="src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java" />, + <ignore path="src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java" />, +++ b/gradle.properties, +org.gradle.daemon=true, +++ b/library/build.gradle, + classpath 'org.robolectric:robolectric-gradle-plugin:0.11.+', +apply plugin: 'robolectric', + minSdkVersion 10, + targetSdkVersion 19, +++ b/library/lint.xml, + <ignore path="src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java" />, + <ignore path="src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java" />, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.annotation.TargetApi;, + @TargetApi(11), +++ b/gradle.properties, +org.gradle.daemon=true, +++ b/library/build.gradle, + classpath 'org.robolectric:robolectric-gradle-plugin:0.11.+', +apply plugin: 'robolectric', + minSdkVersion 10, + targetSdkVersion 19, +++ b/library/lint.xml,
[+++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, + <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.os.ParcelFileDescriptor;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorFileLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorModelLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorStringLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorUriLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.BaseUrlLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamFileLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamModelLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamStringLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamUriLoader;, +import com.bumptech.glide.resize.load.VideoBitmapDecoder;, + loaderFactory.register(File.class, ParcelFileDescriptor.class, new FileDescriptorFileLoader.Factory());, + loaderFactory.register(File.class, InputStream.class, new StreamFileLoader.Factory());, + loaderFactory.register(Integer.class, ParcelFileDescriptor.class, new FileDescriptorResourceLoader.Factory());, + loaderFactory.register(Integer.class, InputStream.class, new StreamResourceLoader.Factory());, + loaderFactory.register(String.class, ParcelFileDescriptor.class, new FileDescriptorStringLoader.Factory());, + loaderFactory.register(String.class, InputStream.class, new StreamStringLoader.Factory());, + loaderFactory.register(Uri.class, ParcelFileDescriptor.class, new FileDescriptorUriLoader.Factory());, + loaderFactory.register(Uri.class, InputStream.class, new StreamUriLoader.Factory());, + loaderFactory.register(URL.class, ParcelFileDescriptor.class, new ModelLoaderFactory<URL, ParcelFileDescriptor>() {, + @Override, + public ModelLoader<URL, ParcelFileDescriptor> build(Context context, GenericLoaderFactory factories)
[+++ b/.travis.yml, +script: 'travis_retry ./gradlew clean checkstyle build', +++ b/.travis.yml, +script: 'travis_retry ./gradlew clean checkstyle build', +++ b/build.gradle, + apply plugin: 'checkstyle', +, + checkstyle {, + configFile = new File(rootDir, 'checkstyle.xml'), + }, +, + task checkstyle(type: Checkstyle) {, + source 'src', + include '**/*.java', + exclude '**/gen/**', +, + // empty classpath, + classpath = files(), + }, +++ b/.travis.yml, +script: 'travis_retry ./gradlew clean checkstyle build', +++ b/build.gradle, + apply plugin: 'checkstyle', +, + checkstyle {, + configFile = new File(rootDir, 'checkstyle.xml'), + }, +, + task checkstyle(type: Checkstyle) {, + source 'src', + include '**/*.java', +
[+++ b/library/src/main/java/com/bumptech/glide/load/model/BasicHeaders.java, +package com.bumptech.glide.load.model;, +, +import android.text.TextUtils;, +, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Set;, +, +/**, + * A wrapper class for a set of headers to be included in a Glide request., + */, +public final class BasicHeaders implements Headers {, +, + private final Map<String, Set<String>> headers;, + private volatile Map<String, String> combinedHeaders;, +, + BasicHeaders(Map<String, Set<String>> headers) {, + this.headers = Collections.unmodifiableMap(headers);, + }, +, + public Map<String, String> getHeaders() {, + if (combinedHeaders == null) {, + synchronized (this) {, + if (combinedHeaders == null) {, + this.combinedHeaders = generateCombinedHeaders();, +
[+++ b/library/src/androidTest/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java, +package com.bumptech.glide.load.data;, +, +import static com.google.common.truth.Truth.assertThat;, +, +import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;, +import com.bumptech.glide.testutil.TestResourceUtil;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +public class ExifOrientationStreamTest {, + private InputStream openOrientationExample(boolean isLandscape, int item) {, + String filePrefix = isLandscape ? "Landscape" : "Portrait";, + return TestResourceUtil.openResource(getClass(),, + "exif-orientation-examples/" + filePrefix + "_" + item + ".jpg");, + }, +, + @Test, + public void testIncludesGivenExifOrientation() throws IOException {, + for (int i = 0; i < 8; i++) {, + for (int j = 0; j
[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + boolean started = false;, + started = true;, + return started;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + boolean started = false;, + started = true;, + return started;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, + Object getModel() {, + return model;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + boolean started = false;, + started = true;, + return started;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, + Object getModel() {, + return model;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, + reschedule();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, + boolean started = false;, + started = true;, + return started;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, + Object getModel() {, + return model;, + }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +
[+++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +VERSION_MAJOR=4, +VERSION_MINOR=0, +VERSION_CODE=12, +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +VERSION_MAJOR=4, +VERSION_MINOR=0, +VERSION_CODE=12, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=2.0.0-SNAPSHOT, +VERSION_MAJOR=2, +VERSION_MINOR=0, +VERSION_CODE=8, +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +VERSION_MAJOR=4, +VERSION_MINOR=0, +VERSION_CODE=12, +++ b/integration/okhttp/gradle.properties, +VERSION_NAME=2.0.0-SNAPSHOT, +VERSION_MAJOR=2, +VERSION_MINOR=0, +VERSION_CODE=8, +++ b/integration/volley/gradle.properties, +VERSION_NAME=2.0.0-SNAPSHOT, +VERSION_MAJOR=2, +VERSION_MINOR=0, +VERSION_CODE=8]
