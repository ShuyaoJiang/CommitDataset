[+++ b/okhttp/src/main/java/okhttp3/Handshake.java, +import java.io.IOException;, + public static Handshake get(SSLSession session) throws IOException {, + if ("SSL_NULL_WITH_NULL_NULL".equals(cipherSuiteString)) {, + throw new IOException("cipherSuite == SSL_NULL_WITH_NULL_NULL");, + }, + if ("NONE".equals(tlsVersionString)) throw new IOException("tlsVersion == NONE");, +++ b/okhttp/src/main/java/okhttp3/Handshake.java, +import java.io.IOException;, + public static Handshake get(SSLSession session) throws IOException {, + if ("SSL_NULL_WITH_NULL_NULL".equals(cipherSuiteString)) {, + throw new IOException("cipherSuite == SSL_NULL_WITH_NULL_NULL");, + }, + if ("NONE".equals(tlsVersionString)) throw new IOException("tlsVersion == NONE");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java]
[+++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java, + static final class CountingSink extends ForwardingSink {]
[+++ b/pom.xml, + <version>20130303</version>, +++ b/pom.xml, + <version>20130303</version>, +++ b/src/main/java/com/google/mockwebserver/MockWebServer.java, + } else if (!request.startsWith("POST ") && !request.startsWith("PUT ")) {]
[+++ b/okhttp-dnsoverhttps/pom.xml, + <scope>test</scope>, +++ b/okhttp-dnsoverhttps/pom.xml, + <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-dnsoverhttps/pom.xml, + <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // opt-in to fallback to COMPATIBLE_TLS, + .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), + // opt-in to fallback to COMPATIBLE_TLS, + .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), + .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +++ b/okhttp-dnsoverhttps/pom.xml, + <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // opt-in to fallback to COMPATIBLE_TLS, + .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), + // opt-in to fallback to COMPATIBLE_TLS, + .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), + .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, + .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), + assertEquals(TlsVersion.TLS_1_0, fallbackRequest.getTlsVersion());, +++ b/okhttp-dnsoverhttps/pom.xml, + <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // opt-in to fallback to COMPATIBLE_TLS, + .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +
[+++ b/okhttp/build.gradle, +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/okhttp-logging-interceptor/pom.xml, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/okhttp-logging-interceptor/pom.xml, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +/** An OkHttp interceptor which logs HTTP request and response data. */, +@javax.annotation.ParametersAreNonnullByDefault, +package okhttp3.logging;, +++ b/okhttp-logging-interceptor/pom.xml, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +/** An OkHttp interceptor which logs HTTP request and response data. */, +@javax.annotation.ParametersAreNonnullByDefault, +package okhttp3.logging;, +++ b/okhttp/pom.xml, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/okhttp-logging-interceptor/pom.xml, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <scope>provided</scope>, + </dependency>, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +/** An OkHttp
[+++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestRule;, + @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();, + private OkHttpClient client = clientTestRule.client;, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestRule;, + @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();, + private OkHttpClient client = clientTestRule.client;, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable
[+++ b/okhttp/build.gradle, + 'okhttp3.CipherSuite#javaName()',, +++ b/okhttp/build.gradle, + 'okhttp3.CipherSuite#javaName()',, +++ /dev/null, +++ b/okhttp/build.gradle, + 'okhttp3.CipherSuite#javaName()',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + *
[+++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp/src/main/java/com/squareup/okhttp/CipherSuite.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/pom.xml]
[+++ b/.travis.yml, + - ./mvnw dependency:resolve -B || true, + - ./mvnw -DskipTests package checkstyle:check -B, + - ./mvnw test javadoc:jar source:jar -B, +++ b/.travis.yml, + - ./mvnw dependency:resolve -B || true, + - ./mvnw -DskipTests package checkstyle:check -B, + - ./mvnw test javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_2019-03-14_, +## Version 3.12.2, +, +_2019-03-14_, +, + * Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake., + * Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`, + callback., +, +, +++ b/.travis.yml, + - ./mvnw dependency:resolve -B ||
[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, + StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, + StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, + Address address = chain.connection().route().address();, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, + StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, + Address address = chain.connection().route().address();, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, + route = connection.route();,
[+++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/CHANGELOG.md, +## Version 2.5.0, +, +_2015-08-25_, +, + * **OkHttp now rejects request headers that contain invalid characters.** This, + includes potential security problems (newline characters) as well as simple, + non-ASCII characters (including international characters and emoji)., +, + * **Call canceling is more reliable.** We had a bug where a socket being, + connected wasn't being closed when the application used `Call.cancel()`., +, + * **Changing a HttpUrl’s scheme now tracks the default port.** We had a bug, + where changing a URL from `http` to `https` would leave it on port 80., +, + *
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.Buffer;, + result.setChunkedBody(new Buffer().write(body), 1024);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.Buffer;, + result.setChunkedBody(new Buffer().write(body), 1024);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import okio.Buffer;, + private Buffer body;, + setBody(new Buffer());, + public Buffer getBody() {, + return body != null ? body.clone() : null; // Defensive copy., + return bodyStream != null ? bodyStream : getBody().inputStream();, + return setBody(new Buffer().write(body));, + }, +, + public MockResponse setBody(Buffer body) {, + setHeader("Content-Length", body.size());, + this.body = body.clone(); // Defensive copy., + return setBody(new Buffer().writeUtf8(body));, + public MockResponse setChunkedBody(Buffer body, int maxChunkSize) {, + Buffer bytesOut = new Buffer();, + while (!body.exhausted()) {, +
[+++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, + Response response = call.execute();, +, + Response response = call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, + Response response = call.execute();, +, + Response response = call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +public final class UtilTest {, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, + Response response = call.execute();, +, + Response response = call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +public final class UtilTest {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.WebSocketListener;, +++ b/okhttp-tests/fuzzingserver-config.json, +{, + "url": "ws://127.0.0.1:9001",, + "outdir": "./target/fuzzingserver-report",, + "cases": ["*"],, + "exclude-cases": [, + "6.1.1",, + "6.1.2",, + "6.1.3",, + "6.2.1",, + "6.2.2",, + "6.2.3",, + "6.2.4",, + "6.3.1",, + "6.3.2",, + "6.4.1",, + "6.4.2",, + "6.4.3",, + "6.4.4",, + "6.5.1",, + "6.5.2",, + "6.5.3",, + "6.5.4",, + "6.5.5",, + "6.6.1",, + "6.6.2",, + "6.6.3",, + "6.6.4",, + "6.6.5",, + "6.6.6",, + "6.6.7",, + "6.6.8",, + "6.6.9",, + "6.6.10",,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + logger.log(Level.WARNING, "MockWebServer connection failed", e);, + // This gnarly block of code will release all sockets and all thread,, + // even if any close fails., + if (serverSocket == null) return;, +, + serverSocket = null;, + logger.log(Level.WARNING, "MockWebServer connection failed", e);, + logger.warning("MockWebServer connection didn't make a request");, + logger.info("Received request: " + request + " and responded: " + response);, + logger.info("Received request: " + request + " and responded: " + response, + + " protocol is " + protocol.toString());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + logger.log(Level.WARNING, "MockWebServer connection failed", e);, + // This gnarly
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.QueueDispatcher;, + /**, + * We don't know if the connection will support HTTP/2 until after we've connected. When multiple, + * connections are requested concurrently OkHttp will pessimistically connect multiple times, then, + * close any unnecessary connections. This test confirms that behavior works as intended., + *, + * <p>This test uses proxy tunnels to get a hook while a connection is being established., + */, + @Test public void concurrentHttp2ConnectionsDeduplicated() throws Exception {, + server.useHttps(sslClient.socketFactory, true);, +, + // Force a fresh connection pool for the test., + client.connectionPool().evictAll();, +, +
[+++ b/checkstyle.xml, + <!-- Space after 'for' and 'if' -->
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.RouteDatabase;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.RouteDatabase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.RouteDatabase;, +, + @Override public RouteDatabase routeDatabase(OkHttpClient client) {, + return client.routeDatabase;, + }, + RouteDatabase getRoutesDatabase() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.RouteDatabase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.RouteDatabase;, +, + @Override public RouteDatabase routeDatabase(OkHttpClient client) {, + return client.routeDatabase;, + }, + RouteDatabase getRoutesDatabase() {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.RouteDatabase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.RouteDatabase;, +, + @Override public RouteDatabase routeDatabase(OkHttpClient client) {, + return client.routeDatabase;, + }, + RouteDatabase getRoutesDatabase() {, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java, +, + public abstract RouteDatabase routeDatabase(OkHttpClient client);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.RouteDatabase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, + logger.setLevel(Level.FINE);, + logger.addHandler(handler);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, + logger.setLevel(Level.FINE);, + logger.addHandler(handler);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, + super("OkHttp %s", redactedUrl().toString());, + return string + " to " + redactedUrl();, + }, +, + HttpUrl redactedUrl() {, + return originalRequest.url().resolve("/...");]
[+++ b/okhttp-sse/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/okhttp-sse/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + call.timeout().clearTimeout();, +++ b/okhttp-sse/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import java.util.concurrent.TimeUnit;, +import static okhttp3.TestUtil.defaultClient;, + private OkHttpClient client = defaultClient();, + @Test public void callTimeoutIsNotApplied() throws Exception {, + client = client.newBuilder(), + .callTimeout(100, TimeUnit.MILLISECONDS), + .build();, +, + server.enqueue(new MockResponse(), + .setBodyDelay(500, TimeUnit.MILLISECONDS), + .setHeader("content-type", "text/event-stream"), + .setBody("data: hey\n\n"));, +, + EventSource source = newEventSource();, +, + assertEquals("/", source.request().url().encodedPath());, +, +
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.2.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.2.0', + <version>3.2.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0', +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.2.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.2.0', + <version>3.2.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0', +++ b/benchmarks/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.2.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.2.0', + <version>3.2.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0', +++ b/benchmarks/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, + SSLContext sslContext = SslContextBuilder.localhost();, + new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.2.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.2.0', + <version>3.2.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0', +++ b/benchmarks/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, + SSLContext sslContext = SslContextBuilder.localhost();, + new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import
[+++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ /dev/null, +++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ /dev/null, +++ b/README.md, +okhttp, +======, +, +An HTTP+SPDY client for Android and Java applications, +++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ /dev/null, +++ b/README.md, +okhttp, +======, +, +An HTTP+SPDY client for Android and Java applications, +++ /dev/null, +++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ /dev/null, +++ b/README.md, +okhttp, +======, +, +An HTTP+SPDY client
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertNull(client.getResponseCache());, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertNull(client.getResponseCache());, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertNull(client.getResponseCache());, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertNull(client.getResponseCache());, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertNull(client.getResponseCache());, + client.setResponseCache(new AbstractResponseCache() {, + client.setResponseCache(new AbstractResponseCache() {, +
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', + <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', + <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', + <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', + <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', + <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft07Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, + @Test public void cache() throws Exception {, + server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, + @Test public void cache() throws Exception {, + server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingReceiver.java, + for (RecordedResponse recordedResponse : responses) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, + @Test public void cache() throws Exception {, + server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingReceiver.java, + for (RecordedResponse recordedResponse : responses) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SyncApiTest.java, + @Test public void cache() throws Exception {, + server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, + @Test public void cache() throws Exception {, + server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingReceiver.java, + for (RecordedResponse recordedResponse : responses) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SyncApiTest.java, + @Test public void cache()
[+++ b/build.gradle, + classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.7.1', + apply plugin: 'net.ltgt.errorprone', + dependencies {, + errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1', + errorprone 'com.google.errorprone:error_prone_core:2.3.3', + }, +++ b/build.gradle, + classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.7.1', + apply plugin: 'net.ltgt.errorprone', + dependencies {, + errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1', + errorprone 'com.google.errorprone:error_prone_core:2.3.3', + }, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, + String[] result = new String[array.length + 1];, + System.arraycopy(array, 0, result, 0, array.length);]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, + InetAddress inetAddress = socket.getLocalAddress();, + int localPort = socket.getLocalPort();, + this.requestUrl =, + HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, localPort, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, + InetAddress inetAddress = socket.getLocalAddress();, + int localPort = socket.getLocalPort();, + this.requestUrl =, + HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, localPort, path));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + *
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, + } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, + || responseCode == HttpURLConnection.HTTP_RESET) {, + mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, + } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, + || responseCode == HttpURLConnection.HTTP_RESET) {, + mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, + urlFactory.setClient(urlFactory.client().newBuilder(), + .dns(new FakeDns()), + .build());, + server.enqueue(new MockResponse(), + .setResponseCode(HttpURLConnection.HTTP_NO_CONTENT), + try {, + connection.getInputStream();, + fail();, + } catch (IOException expected) {, + assertEquals("HTTP 204 had non-zero Content-Length: 25", expected.getMessage());, + }, + urlFactory.setClient(urlFactory.client().newBuilder(), + .dns(new FakeDns()), +
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/LICENSE.txt, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffers;, + InputStream bodyIn = OkBuffers.buffer(stream.getSource()).inputStream();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffers;, + InputStream bodyIn = OkBuffers.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +public class Main extends HelpOption implements Runnable {, + try {, + Response response = client.execute(request);, + if (showHeaders) {, + System.out.println(response.statusLine());, + Headers headers = response.headers();, + for (int i = 0, count = headers.size(); i < count; i++) {, + System.out.println(headers.name(i) + ": " + headers.value(i));, + }, + System.out.println();, + }, + Response.Body body = response.body();, + byte[] buffer = new byte[1024];, + while (body.ready()) {, + int c = body.byteStream().read(buffer);, + if (c == -1)
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.util.List;, + private final RecordingEventListener listener = new RecordingEventListener();, + private OkHttpClient client = defaultClient(), + .newBuilder(), + .eventListener(listener), + .build();, +, + @Test public void requestBodyEndsAfterResponseBody() throws Exception {, + enableProtocol(Protocol.HTTP_2);, + MockDuplexResponseBody mockDuplexResponseBody = enqueueResponseWithBody(, + new MockResponse(), + .clearHeaders(),, + new MockDuplexResponseBody(), + .exhaustResponse(), + .receiveRequest("request A\n"), + .exhaustRequest());, +, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .post(new AsyncRequestBody()), + .build());, +, + try (Response response = call.execute()) {, + BufferedSource responseBody = response.body().source();, + assertTrue(responseBody.exhausted());, +, + BufferedSink requestBody = ((AsyncRequestBody) call.request().body()).takeSink();, + requestBody.writeUtf8("request A\n");, + requestBody.close();, + }, +,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, + InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, + InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.Failure;, +public class Main extends HelpOption implements Runnable, Response.Receiver {, + client.enqueue(request, this);, + // Immediately begin triggering an executor shutdown so that after execution of the above, + // request the threads do not stick around until timeout., + client.getDispatcher().getExecutorService().shutdown();, + @Override public void onFailure(Failure failure) {, + failure.exception().printStackTrace();, + close();, + }, +, + @Override public boolean onResponse(Response response) throws IOException {, + if (showHeaders) {, + System.out.println(response.statusLine());, + Headers headers = response.headers();, + for (int
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml]
[+++ b/pom.xml]
[+++ b/.buildscript/deploy_snapshot.sh, + ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/deploy_snapshot.sh, + ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.travis.yml, + - openjdk8, + - openjdk11, +before_install:, + - mvn -N io.takari:maven:wrapper -Dmaven=3.6.0, + - echo "MAVEN_OPTS='-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS'" > ~/.mavenrc, +install:, + - ./mvnw dependency:resolve -B, +, +script:, + - ./mvnw test -B, + - ./mvnw javadoc:jar source:jar -B, +++ b/.buildscript/deploy_snapshot.sh, + ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.travis.yml, + - openjdk8, + - openjdk11, +before_install:, + - mvn -N io.takari:maven:wrapper -Dmaven=3.6.0, + - echo "MAVEN_OPTS='-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS'" >
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, + InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, + InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, + return ByteString.of(md5bytes).hex();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, + InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, + return ByteString.of(md5bytes).hex();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.Okio;, + this.source = Okio.buffer(source);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, + InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, + return ByteString.of(md5bytes).hex();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.Okio;, + this.source = Okio.buffer(source);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java, +import okio.Okio;, + this.source = Okio.buffer(inflaterSource);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, + InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, + return ByteString.of(md5bytes).hex();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java,
[+++ b/okhttp/src/main/java/okhttp3/internal/cache2/FileOperator.java, + long bytesWritten = fileChannel.transferFrom(source, pos, byteCount);, + byteCount -= bytesWritten;, + long bytesRead = fileChannel.transferTo(pos, byteCount, sink);]
[+++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, + private volatile StreamAllocation streamAllocation;, + StreamAllocation streamAllocation = new StreamAllocation(client.connectionPool(),, + createAddress(request.url()), call, eventListener, callStackTrace);, + this.streamAllocation = streamAllocation;, + if (!recover(e.getLastConnectException(), streamAllocation, false, request)) {, + if (!recover(e, streamAllocation, requestSendStarted, request)) throw e;, + Request followUp = followUpRequest(response, streamAllocation.connection());, + this.streamAllocation = streamAllocation;, + private boolean recover(IOException e, StreamAllocation streamAllocation,, + boolean requestSendStarted, Request userRequest) {, + private Request followUpRequest(Response userResponse, Connection connection) throws IOException {]
[+++ b/benchmarks/pom.xml, + <id>npn-when-jdk7</id>, + <groupId>org.mortbay.jetty.npn</groupId>, + <artifactId>npn-boot</artifactId>, +++ b/benchmarks/pom.xml, + <id>npn-when-jdk7</id>, + <groupId>org.mortbay.jetty.npn</groupId>, + <artifactId>npn-boot</artifactId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + /** Which ALPN/NPN protocols are in use. Only useful with TLS. */, +++ b/benchmarks/pom.xml, + <id>npn-when-jdk7</id>, + <groupId>org.mortbay.jetty.npn</groupId>, + <artifactId>npn-boot</artifactId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + /** Which ALPN/NPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + * Sets whether NPN is used on incoming HTTPS connections to negotiate a, + * protocol like HTTP/1.1 or SPDY/3. Call this method to disable NPN and, + * SPDY., + * @deprecated Use {@link #setProtocolNegotiationEnabled}., + */, + public void setNpnEnabled(boolean
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import java.util.ArrayList;, +import java.util.concurrent.CountDownLatch;, +import okhttp3.Call;, +import okhttp3.Callback;, +import okhttp3.internal.Util;, + List<Call> networkRequests = new ArrayList<>(2);, + List<Exception> failures = new ArrayList<>(2);, + List<InetAddress> results = new ArrayList<>(5);, +, + buildRequest(hostname, networkRequests, results, failures, DnsRecordCodec.TYPE_A);, +, + if (includeIPv6) {, + buildRequest(hostname, networkRequests, results, failures, DnsRecordCodec.TYPE_AAAA);, + }, +, + executeRequests(hostname, networkRequests, results, failures);, +, + if (!results.isEmpty()) {, + return results;, + }, +, + return throwBestFailure(hostname, failures);, + }, +, + private void buildRequest(String hostname, List<Call> networkRequests, List<InetAddress> results,, + List<Exception> failures, int type) {, + Request request = buildRequest(hostname, type);, + Response response =
[+++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, + Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;,
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + private Response.Callback callback;, + callback = new Response.Callback() {, + client.call(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + private Response.Callback callback;, + callback = new Response.Callback() {, + client.call(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, + private RecordingCallback callback = new RecordingCallback();, + client.call(request).execute(callback);, + callback.await(request.url()), + client.call(new Request.Builder().url(server.getUrl("/a")).build()).execute(callback);, + callback.await(server.getUrl("/a")).assertBody("abc");, + client.call(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, + callback.await(server.getUrl("/b")).assertBody("def");, + client.call(new Request.Builder().url(server.getUrl("/c")).build()).execute(callback);, + callback.await(server.getUrl("/c")).assertBody("ghi");, + client.call(request).execute(callback);, + callback.await(request.url()).assertHandshake();, + client.call(request).execute(callback);, + callback.await(request.url()).assertBody("abc");, + client.call(request).execute(callback);, + callback.await(request.url()), + client.call(request1).execute(callback);, + callback.await(request1.url()).assertCode(200).assertBody("A");, + client.call(request2).execute(callback);, + callback.await(request2.url()).assertCode(200).assertBody("A");, + client.call(request1).execute(callback);, + callback.await(request1.url()).assertCode(200).assertBody("A");, + client.call(request2).execute(callback);, + callback.await(request2.url()).assertCode(200).assertBody("B");, + client.call(request).execute(callback);, + callback.await(server.getUrl("/c")), + client.call(request).execute(callback);, + callback.await(server.getUrl("/20")), + client.call(request).execute(callback);, + callback.await(server.getUrl("/20")).assertFailure("Too many
[+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + if (protocols.contains(Protocol.SPDY_3)) {, + }, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + if (protocols.contains(Protocol.SPDY_3)) {, + }, +++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_131</id>, + <activation>, + <jdk>1.8.0_131</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, + </properties>, + </profile>]
[+++ b/checkstyle.xml, + <!--<module name="NeedBraces"/>-->
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.DoubleInetAddressDns;, +import okhttp3.internal.RecordingOkAuthenticator;, +import okhttp3.internal.SingleInetAddressDns;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.internal.Util;, +import okhttp3.internal.Version;, +import okhttp3.internal.http.FakeDns;, +import okhttp3.internal.io.InMemoryFileSystem;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, +import okhttp3.mockwebserver.SocketPolicy;, +import okhttp3.testing.RecordingHostnameVerifier;, +import static okhttp3.internal.Internal.logger;, + client.setProxyAuthenticator(new RecordingOkAuthenticator("password"));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.DoubleInetAddressDns;, +import okhttp3.internal.RecordingOkAuthenticator;, +import okhttp3.internal.SingleInetAddressDns;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.internal.Util;, +import okhttp3.internal.Version;, +import okhttp3.internal.http.FakeDns;, +import okhttp3.internal.io.InMemoryFileSystem;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, +import okhttp3.mockwebserver.SocketPolicy;, +import okhttp3.testing.RecordingHostnameVerifier;, +import static okhttp3.internal.Internal.logger;, + client.setProxyAuthenticator(new RecordingOkAuthenticator("password"));, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import okhttp3.internal.RecordingAuthenticator;, +import okhttp3.internal.http.AuthenticatorAdapter;, +import okhttp3.internal.http.RecordingProxySelector;, +import okhttp3.internal.tls.OkHostnameVerifier;, + assertSame(AuthenticatorAdapter.INSTANCE, client.getProxyAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.DoubleInetAddressDns;, +import okhttp3.internal.RecordingOkAuthenticator;, +import okhttp3.internal.SingleInetAddressDns;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.internal.Util;, +import okhttp3.internal.Version;,
[+++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, + /** Don't combine chunked with HTTP_2; that's not allowed. */, +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java,
[+++ b/pom.xml, + <version>20130403</version>, +++ b/pom.xml, + <version>20130403</version>, +++ b/src/main/java/com/google/mockwebserver/MockResponse.java, + * Returns the raw HTTP payload, or null if this response is streamed., + */, + public byte[] getBody() {, + return body;, + }, +, + /**]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void cancelImmediatelyAfterEnqueue() throws Exception {, + call.cancel();, + @Test public void cancelAll() throws Exception {, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + call.enqueue(callback);, + client.dispatcher().cancelAll();, + callback.await(server.url("/")).assertFailure("Canceled");, + }, +, + Request request = new Request.Builder().url(server.url("/a")).build();, + final Call call = client.newCall(request);, +, + call.cancel();, + call.execute();, +, + Request requestA = new Request.Builder().url(server.url("/a")).build();, + Request requestB = new Request.Builder().url(server.url("/b")).build();, + final Call callA = client.newCall(requestA);, + final Call callB = client.newCall(requestB);, +, + callB.cancel();, + callA.enqueue(callback);, + callB.enqueue(callback);, + Request requestA = new Request.Builder().url(server.url("/a")).build();, + Request request = new
[+++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union of the acting entity and all, + other entities that control, are controlled by, or are under common,
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/benchmarks/pom.xml, + <version>3.1.1</version>, +++ b/benchmarks/pom.xml, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.1</version>, +++ b/benchmarks/pom.xml, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.1</version>, +++ b/okcurl/pom.xml, + <version>3.1.1</version>, +++ b/benchmarks/pom.xml, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.1</version>, +++ b/okcurl/pom.xml, + <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.1</version>, +++ b/benchmarks/pom.xml, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.1</version>, +++ b/okcurl/pom.xml, + <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.1.1</version>, +++ b/benchmarks/pom.xml, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.1</version>, +++ b/okcurl/pom.xml, + <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.1.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.1.1</version>, +++ b/benchmarks/pom.xml, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.1</version>, +++ b/okcurl/pom.xml, + <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +import okhttp3.ResponseBody;, + ResponseBody body = response.body();, +, + //noinspection ConstantConditions main body is never null, + MediaType contentType = body.contentType();, + // Replace the body with an empty one so the callbacks can't see real data., + ServerSentEventReader reader = new ServerSentEventReader(body.source(), this);]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + server.enqueue(new MockResponse(), + .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), + .setResponseCode(408), + .setHeader("Connection", "Close"), + .setBody("You took too long!"));, + server.enqueue(new MockResponse().setBody("Body"));, + Request request = new Request.Builder(), + .url(server.url("/")), + .build();, + Response response = client.newCall(request).execute();, + @Test public void requestBodyRetransmittedOnClientRequestTimeout() throws Exception {, + .setResponseCode(408), + Request request = new Request.Builder(), + .build();, + Response response = client.newCall(request).execute();, + @Test public void disableClientRequestTimeoutRetry() throws IOException {, + server.enqueue(new MockResponse(), + .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), + .setResponseCode(408), + .setHeader("Connection", "Close"), + .setBody("You took too long!"));, +, + client = client.newBuilder(), + .retryOnConnectionFailure(false), + .build();, +, + Request request = new Request.Builder(), + .url(server.url("/")),
[+++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +Download [the latest JAR][3] or configure this dependency:, +Download [the latest JAR][4] or configure this dependency:, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., + [1]: https://square.github.io/okhttp, + [2]: https://github.com/square/okhttp/wiki, + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +Download [the latest JAR][3] or configure this dependency:, +Download [the latest JAR][4] or configure this dependency:,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + logger.info(MockWebServer.this + " starting to accept connections");, + logger.log(Level.WARNING, MockWebServer.this + " failed unexpectedly", e);, + // Release all sockets and all threads, even if any close fails., + logger.info(MockWebServer.this + " done accepting connections: " + e.getMessage());, + logger.log(Level.WARNING, MockWebServer.this + " connection from ", + + raw.getInetAddress() + " failed", e);, + logger.warning(MockWebServer.this + " connection from " + raw.getInetAddress(), + + " didn't make a request");, + logger.info(MockWebServer.this + " received request: " + request, + + " and responded: " + response);, + @Override public String toString() {, + return "MockWebServer[" +
[+++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, + tasks.withType(JavaCompile).configureEach {, + options.errorprone {, + check("MissingOverride", CheckSeverity.ERROR), + }, + }, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, + tasks.withType(JavaCompile).configureEach {, + options.errorprone {, + check("MissingOverride", CheckSeverity.ERROR), + }, + }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + @Override LogRecorder assertLogMatch(String pattern) {, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, + tasks.withType(JavaCompile).configureEach {, + options.errorprone {, + check("MissingOverride", CheckSeverity.ERROR), + }, + }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + @Override LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/test/java/okhttp3/DelegatingSSLSocket.java, + @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, + @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, + @SuppressWarnings("MissingOverride") // Can only override with JDK 9+,
[+++ b/pom.xml, + <version>0.8-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, + Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, + Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, + @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, + Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, + @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.net.Socket;, + public abstract Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, + Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, + @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.net.Socket;, + public abstract Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +import java.net.Socket;, + Socket socket = null;, +
[+++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + // Ensure that the (shared) connection pool is in a consistent state., + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().idleConnectionCount());, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + // Ensure that the (shared) connection pool is in a consistent state., + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().idleConnectionCount());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // Ensure the test has released all connections., + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().connectionCount());, + @Test public void canRetryNormalRequestBody() throws Exception {, + server.enqueue(new MockResponse(), + .setResponseCode(503), + .setHeader("Retry-After", "0"), + .setBody("please retry"));, + server.enqueue(new MockResponse(), + .setBody("thank you for retrying"));, +, + Request request = new Request.Builder(), + .url(server.url("/")), +
[+++ b/website/index.html, + <meta name="description" content="An HTTP &amp; SPDY client for Android and Java applications">, + <link href="static/bootstrap-combined.min.css" rel="stylesheet">, + <link href="static/app-theme.css" rel="stylesheet">, + <section id="subtitle">, + <div class="container">, + <div class="row">, + <div class="span12">, + <h2>An <strong>HTTP &amp; SPDY</strong> client for Android and Java applications</h2>, + </div>, + </div>, + </div>, + </section>, + <div class="content-nav" data-spy="affix" data-offset-top="80">, +++ b/website/index.html, + <meta name="description" content="An HTTP &amp; SPDY client for Android and Java applications">, + <link href="static/bootstrap-combined.min.css" rel="stylesheet">, + <link href="static/app-theme.css" rel="stylesheet">, + <section id="subtitle">, + <div class="container">, + <div class="row">, + <div class="span12">, + <h2>An <strong>HTTP &amp; SPDY</strong>
[+++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], + path = okhttp-hpacktests/src/test/resources/hpack-test-case, + url = git://github.com/http2jp/hpack-test-case.git, +++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], + path = okhttp-hpacktests/src/test/resources/hpack-test-case, + url = git://github.com/http2jp/hpack-test-case.git, +++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + * **API Change**: Use `IOException` in `Callback.onFailure()`. This is, + a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, + used `Throwable`., + * Fix: Fixed a caching bug where we weren't storing rewritten request headers, + like `Accept-Encoding`., + * Fix: Fixed bugs
[+++ b/mockwebserver/pom.xml, + <artifactId>okhttp</artifactId>, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp</artifactId>, +++ /dev/null, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/pom.xml, + <animal.sniffer.version>1.15</animal.sniffer.version>]
[+++ b/pom.xml, + </profile>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getLocalHost();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getLocalHost();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, + Logger logger = Logger.getLogger(Http20Draft15.class.getName() + "$FrameLogger");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getLocalHost();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, + Logger logger = Logger.getLogger(Http20Draft15.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +When new interop tests are available, you should update, +HpackDecodeInteropGoodTest#GOOD_INTEROP_TESTS with the directory name., +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getLocalHost();, +++
[+++ b/.gitignore, +++ b/.gitignore, +++ b/okhttp/build.gradle, + classExcludes = [, + // Package-private in 3.x, internal in 4.0.0:, + 'okhttp3.Cache$CacheResponseBody$1',, + ], + 'okhttp3.Cache#delete()',, + 'okhttp3.Cache#directory()',, + 'okhttp3.Cache#evictAll()',, + 'okhttp3.Cache#hitCount()',, + 'okhttp3.Cache#initialize()',, + 'okhttp3.Cache#isClosed()',, + 'okhttp3.Cache#maxSize()',, + 'okhttp3.Cache#networkCount()',, + 'okhttp3.Cache#requestCount()',, + 'okhttp3.Cache#size()',, + 'okhttp3.Cache#urls()',, + 'okhttp3.Cache#writeAbortCount()',, + 'okhttp3.Cache#writeSuccessCount()',, +++ b/.gitignore, +++ b/okhttp/build.gradle, + classExcludes = [, + // Package-private in 3.x, internal in 4.0.0:, + 'okhttp3.Cache$CacheResponseBody$1',, + ], + 'okhttp3.Cache#delete()',, + 'okhttp3.Cache#directory()',, + 'okhttp3.Cache#evictAll()',, + 'okhttp3.Cache#hitCount()',, + 'okhttp3.Cache#initialize()',, + 'okhttp3.Cache#isClosed()',, + 'okhttp3.Cache#maxSize()',, + 'okhttp3.Cache#networkCount()',, + 'okhttp3.Cache#requestCount()',, + 'okhttp3.Cache#size()',, + 'okhttp3.Cache#urls()',, + 'okhttp3.Cache#writeAbortCount()',, + 'okhttp3.Cache#writeSuccessCount()',, +++ b/okhttp/src/main/java/okhttp3/Address.kt, + * Copyright
[+++ b/README.md, + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/README.md, + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/README.md, + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, + Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/README.md, + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, + Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft14Test.java, +/*, + * Copyright (C) 2013 Square, Inc.,
[+++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/src/main/java/okhttp3/internal/SslContextBuilder.java, + * Constructs an SSL context for testing. This uses Bouncy Castle to generate a self-signed, + * certificate for a single hostname such as "localhost"., + * <p>The crypto performed by this class is relatively slow. Clients should reuse SSL context, + * instances where possible., + * @param hostName the subject of the host. For TLS this should be the domain name that the client, + * uses to identify the server., + * Generates a certificate
[+++ b/mockwebserver/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + .signedBy(serverCa), + .signedBy(clientCa), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + .signedBy(serverCa), + .signedBy(clientCa), +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, + .signedBy(root), + .signedBy(certA), + .signedBy(root), + .signedBy(certA), + .signedBy(root), + .signedBy(certA), + .signedBy(certB), + .signedBy(root), + .signedBy(certA), + .signedBy(certB), + .signedBy(root), + .signedBy(certA), + .signedBy(selfSigned), + .signedBy(trusted), + .signedBy(certA), + .signedBy(unknownSigner), + .signedBy(trusted), + .signedBy(intermediateCa), + .signedBy(!result.isEmpty() ? result.get(0) : null), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + .signedBy(serverCa), + .signedBy(clientCa), +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, + .signedBy(root), + .signedBy(certA), + .signedBy(root), + .signedBy(certA), + .signedBy(root), + .signedBy(certA), + .signedBy(certB), + .signedBy(root), + .signedBy(certA), + .signedBy(certB), + .signedBy(root), + .signedBy(certA), + .signedBy(selfSigned), + .signedBy(trusted), + .signedBy(certA), + .signedBy(unknownSigner), + .signedBy(trusted), +
[+++ b/benchmarks/pom.xml, + <dependency>, + <groupId>io.netty</groupId>, + <artifactId>netty-transport</artifactId>, + <version>4.0.15.Final</version>, + </dependency>, + <dependency>, + <groupId>io.netty</groupId>, + <artifactId>netty-handler</artifactId>, + <version>4.0.15.Final</version>, + </dependency>, + <dependency>, + <groupId>io.netty</groupId>, + <artifactId>netty-codec-http</artifactId>, + <version>4.0.15.Final</version>, + </dependency>, +++ b/benchmarks/pom.xml, + <dependency>, + <groupId>io.netty</groupId>, + <artifactId>netty-transport</artifactId>, + <version>4.0.15.Final</version>, + </dependency>, + <dependency>, + <groupId>io.netty</groupId>, + <artifactId>netty-handler</artifactId>, + <version>4.0.15.Final</version>, + </dependency>, + <dependency>, + <groupId>io.netty</groupId>, + <artifactId>netty-codec-http</artifactId>, + <version>4.0.15.Final</version>, + </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with
[+++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + * **API Change**: Use `IOException` in `Callback.onFailure()`. This is, + a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, + used `Throwable`., + * Fix: Fixed a caching bug where we weren't storing rewritten request headers, + like `Accept-Encoding`., + * Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, + large downloads, + * Update the language level to Java 7. (OkHttp requires
[+++ b/benchmarks/pom.xml, + <version>1.5.0</version>, + <version>1.15</version>, +++ b/benchmarks/pom.xml, + <version>1.5.0</version>, + <version>1.15</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/benchmarks/pom.xml, + <version>1.5.0</version>, + <version>1.15</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/benchmarks/pom.xml, + <version>1.5.0</version>, + <version>1.15</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.10.4</version>, + <version>3.0.2</version>, +++ b/benchmarks/pom.xml, + <version>1.5.0</version>, + <version>1.15</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.10.4</version>, + <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, + <version>2.10.4</version>, + <version>3.0.2</version>, +++
[+++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, + HTTP to HTTPS., +, +, +Version 1.1.0 *(2013-06-15)*, +----------------------------, +, + * Fix: Connection reuse was broken for most HTTPS connections due to a bug in, + the way the hostname verifier was selected., + * Fix: Locking bug in SpdyConnection., + * Fix: Ignore null header values (for compatibility with HttpURLConnection)., + * Add URLStreamHandlerFactory support so that `URL.openConnection()` uses, + OkHttp., + * Expose the transport ("http/1.1", "spdy/3", etc.) via magic request headers., + Use `X-Android-Transports` to write
[+++ b/pom.xml, + <okio.version>1.13.0</okio.version>]
[+++ b/okhttp-apache/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.3-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/okhttp-apache/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.3-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.3-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.3-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, + <version>1.0.3-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.io.Closeable;, + Closeable deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.io.Closeable;, + Closeable deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.Closeable;, + @Override public Closeable deduplicate(, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.io.Closeable;, + Closeable deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.Closeable;, + @Override public Closeable deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.io.Closeable;, + public abstract Closeable deduplicate(, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.io.Closeable;, + Closeable deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.Closeable;, + @Override public Closeable deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.io.Closeable;, + public abstract Closeable deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +import java.io.Closeable;, + Closeable closeable = null;, +
[+++ b/benchmarks/pom.xml, + <version>3.2.0</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0</version>, +++ b/okcurl/pom.xml, + <version>3.2.0</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0</version>, +++ b/okcurl/pom.xml, + <version>3.2.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.2.0</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0</version>, +++ b/okcurl/pom.xml, + <version>3.2.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.2.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.2.0</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0</version>, +++ b/okcurl/pom.xml, + <version>3.2.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.2.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.2.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.2.0</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0</version>, +++ b/okcurl/pom.xml, + <version>3.2.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, + 1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., + 2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, + 1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., + 2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, + <build>, + <plugins>, +
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, + server.start();, + byte[] bytes = new byte[bodyByteCount];, + random.nextBytes(bytes);, + Buffer body = new Buffer().write(bytes);, + Buffer gzipBody = new Buffer();, + GzipSink gzipSink = new GzipSink(gzipBody);, + gzipSink.write(body, body.size());, + gzipSink.close();, + body = gzipBody;, + result.setChunkedBody(body, 1024);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, + server.start();, + byte[] bytes = new byte[bodyByteCount];, + random.nextBytes(bytes);, + Buffer body = new Buffer().write(bytes);, + Buffer gzipBody = new Buffer();, + GzipSink gzipSink = new GzipSink(gzipBody);, + gzipSink.write(body, body.size());, + gzipSink.close();, + body = gzipBody;, + result.setChunkedBody(body, 1024);, +++ b/mockwebserver/README.md, + server.start();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, + server.start();, +
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import java.io.InterruptedIOException;, +import static org.junit.Assert.assertTrue;, + @Test public void threadIsInterruptedOnFirstRead() {, + Thread.currentThread().interrupt();, + try {, + String result = publicSuffixDatabase.getEffectiveTldPlusOne("squareup.com");, + assertEquals("squareup.com", result);, + } finally {, + assertTrue(Thread.interrupted());, + }, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import java.io.InterruptedIOException;, +import static org.junit.Assert.assertTrue;, + @Test public void threadIsInterruptedOnFirstRead() {, + Thread.currentThread().interrupt();, + try {, + String result = publicSuffixDatabase.getEffectiveTldPlusOne("squareup.com");, + assertEquals("squareup.com", result);, + } finally {, + assertTrue(Thread.interrupted());, + }, + }, +, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +import java.io.InterruptedIOException;, + readTheListUninterruptibly();, + /**, + * Reads the public suffix list treating the operation as uninterruptible. We always want to read,
[+++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + unknownHostException.addSuppressed(failures.get(i));, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + unknownHostException.addSuppressed(failures.get(i));, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + unknownHostException.addSuppressed(failures.get(i));, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.java, + firstException.addSuppressed(e);]
[+++ /dev/null, +++ /dev/null, +++ b/benchmarks/pom.xml, +++ /dev/null, +++ b/benchmarks/pom.xml, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +++ /dev/null, +++ b/benchmarks/pom.xml, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java, +import io.netty.buffer.PooledByteBufAllocator;, +import io.netty.channel.ChannelOption;, + .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT), +++ /dev/null, +++ b/benchmarks/pom.xml, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java, +import io.netty.buffer.PooledByteBufAllocator;, +import io.netty.channel.ChannelOption;, + .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT), +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + // TODO: expose means to select which protocols to advertise., + Platform.get().setNpnProtocols(sslSocket, Protocol.HTTP2_SPDY3_AND_HTTP);, +++ /dev/null, +++ b/benchmarks/pom.xml, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java, +import io.netty.buffer.PooledByteBufAllocator;, +import io.netty.channel.ChannelOption;, + .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT), +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + // TODO: expose means to select which protocols to advertise., + Platform.get().setNpnProtocols(sslSocket, Protocol.HTTP2_SPDY3_AND_HTTP);, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, + server.useHttps(sslContext.getSocketFactory(), false);, + server.setNpnEnabled(true);]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/.github/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor
[+++ b/okhttp-tests/pom.xml, + <dependency>, + <groupId>org.conscrypt</groupId>, + <artifactId>conscrypt-openjdk-uber</artifactId>, + <version>1.0.1</version>, + </dependency>, +++ b/okhttp-tests/pom.xml, + <dependency>, + <groupId>org.conscrypt</groupId>, + <artifactId>conscrypt-openjdk-uber</artifactId>, + <version>1.0.1</version>, + </dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/ConscryptTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, + InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, + InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, + addHeaderLenient(headers, header);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, + InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, + addHeaderLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.InternalKtKt;, + InternalKtKt.addHeaderLenient(headers, ": A");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, + InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, + addHeaderLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.InternalKtKt;, + InternalKtKt.addHeaderLenient(headers, ": A");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, + private final RecordingEventListener listener = new RecordingEventListener();, + server.enqueue(new MockResponse().setBody("seed connection pool"));, + server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, + server.enqueue(new MockResponse().setBody("retry success"));, + Headers.Builder
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union
[+++ b/src/main/java/com/squareup/okhttp/ExtendedResponseCache.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *
[+++ b/pom.xml, + <version>20121111</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()), null);, + stream.close(ErrorCode.NO_ERROR, null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()), null);, + stream.close(ErrorCode.NO_ERROR, null);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // TODO https://github.com/square/okhttp/issues/4703, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()), null);, + stream.close(ErrorCode.NO_ERROR, null);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // TODO https://github.com/square/okhttp/issues/4703, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import java.io.EOFException;, + @Rule public final TestRule timeout = new Timeout(5_000, TimeUnit.MILLISECONDS);, + stream1.close(ErrorCode.CANCEL, null);, + } catch (EOFException expected) {, + assertEquals("Expected a SETTINGS frame but was 1", expected.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()), null);, + stream.close(ErrorCode.NO_ERROR, null);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // TODO https://github.com/square/okhttp/issues/4703, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import java.io.EOFException;, + @Rule public final TestRule timeout = new Timeout(5_000, TimeUnit.MILLISECONDS);, + stream1.close(ErrorCode.CANCEL, null);,
[+++ b/okhttp/build.gradle, + 'okhttp3.Request#body()',, + 'okhttp3.Request#cacheControl()',, + 'okhttp3.Request#header(java.lang.String)',, + 'okhttp3.Request#headers()',, + 'okhttp3.Request#headers(java.lang.String)',, + 'okhttp3.Request#isHttps()',, + 'okhttp3.Request#method()',, + 'okhttp3.Request#newBuilder()',, + 'okhttp3.Request#tag()',, + 'okhttp3.Request#tag(java.lang.Class)',, + 'okhttp3.Request#url()',, + 'okhttp3.Response#body()',, + 'okhttp3.Response#cacheControl()',, + 'okhttp3.Response#cacheResponse()',, + 'okhttp3.Response#challenges()',, + 'okhttp3.Response#code()',, + 'okhttp3.Response#handshake()',, + 'okhttp3.Response#header(java.lang.String)',, + 'okhttp3.Response#header(java.lang.String, java.lang.String)',, + 'okhttp3.Response#headers(java.lang.String)',, + 'okhttp3.Response#headers()',, + 'okhttp3.Response#isRedirect()',, + 'okhttp3.Response#isSuccessful()',, + 'okhttp3.Response#message()',, + 'okhttp3.Response#networkResponse()',, + 'okhttp3.Response#newBuilder()',, + 'okhttp3.Response#peekBody(long)',, + 'okhttp3.Response#priorResponse()',, + 'okhttp3.Response#protocol()',, + 'okhttp3.Response#receivedResponseAtMillis()',, + 'okhttp3.Response#request()',, + 'okhttp3.Response#sentRequestAtMillis()',, + 'okhttp3.Response#trailers()',, +++ b/okhttp/build.gradle, + 'okhttp3.Request#body()',, + 'okhttp3.Request#cacheControl()',, + 'okhttp3.Request#header(java.lang.String)',, + 'okhttp3.Request#headers()',, + 'okhttp3.Request#headers(java.lang.String)',, + 'okhttp3.Request#isHttps()',, + 'okhttp3.Request#method()',, + 'okhttp3.Request#newBuilder()',, + 'okhttp3.Request#tag()',, + 'okhttp3.Request#tag(java.lang.Class)',, + 'okhttp3.Request#url()',, + 'okhttp3.Response#body()',, + 'okhttp3.Response#cacheControl()',, + 'okhttp3.Response#cacheResponse()',,
[+++ b/okhttp/build.gradle, + 'okhttp3.CipherSuite#javaName()',, +++ b/okhttp/build.gradle, + 'okhttp3.CipherSuite#javaName()',, +++ /dev/null, +++ b/okhttp/build.gradle, + 'okhttp3.CipherSuite#javaName()',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + *
[+++ b/okhttp/pom.xml, +++ b/okhttp/pom.xml, +++ /dev/null, +++ b/okhttp/pom.xml, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.net.ProtocolException;, +import java.security.Permission;, +import java.security.Principal;, +import java.security.cert.Certificate;, +import java.util.List;, +import java.util.Map;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLPeerUnverifiedException;, +public final class HttpsURLConnectionImpl extends HttpsURLConnection {, +, + /** Reuse HttpURLConnectionImpl. */, + super(url);, + delegate = new HttpURLConnectionImpl(url, client);, + @Override public String getCipherSuite() {, + Handshake handshake = handshake();, + return handshake != null ? handshake.cipherSuite() : null;, + @Override public Certificate[] getLocalCertificates() {, + Handshake handshake = handshake();, + if (handshake == null) return null;, + List<Certificate> result = handshake.localCertificates();, +
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an
[+++ b/okhttp/src/main/java/okhttp3/RealCall.kt, + fun newRealCall(, +++ b/okhttp/src/main/java/okhttp3/RealCall.kt, + fun newRealCall(, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, + * Returns the system property, or defaultValue if the system property is null or]
[+++ b/.github/CONTRIBUTING.md, +Some general advice, +, +- Don’t change public API lightly, avoid if possible, and include your reasoning in the PR if essential. It causes pain for developers who use OkHttp and sometimes runtime errors., +- Favour a working external library if appropriate. There are many examples of OkHttp libraries that can sit on top or hook in via existing APIs., +- Get working code on a personal branch with tests before you submit a PR., +- OkHttp is a small and light dependency. Don't introduce new dependencies or major new functionality., +- OkHttp targets the intersection of
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +
[+++ b/pom.xml, + <version>20120905</version>, +++ b/pom.xml, + <version>20120905</version>, +++ b/src/main/java/com/google/mockwebserver/QueueDispatcher.java, + private boolean failFast;, + if (failFast && responseQueue.peek() == null) {, + // Fail fast if there's no response queued up., + return new MockResponse().setResponseCode(404);, + }, +, +, + public void setFailFast(boolean failFast) {, + this.failFast = failFast;, + }]
[+++ b/.travis.yml, +addons:, + apt:, + packages:, + - oracle-java8-installer # Updates JDK 8 to the latest available., +, +++ b/.travis.yml, +addons:, + apt:, + packages:, + - oracle-java8-installer # Updates JDK 8 to the latest available., +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/OptionalMethodTest.java, +import org.junit.Ignore;, + @Ignore("Despite returning false for isSupported, invocation actually succeeds."), + return;, + fail();, + return;, + fail();, +++ b/.travis.yml, +addons:, + apt:, + packages:, + - oracle-java8-installer # Updates JDK 8 to the latest available., +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/OptionalMethodTest.java, +import org.junit.Ignore;, + @Ignore("Despite returning false for isSupported, invocation actually succeeds."), + return;, + fail();, + return;, + fail();,
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.RecordingEventListener.CallFailed;, +import okhttp3.RecordingEventListener.ConnectFailed;, +import org.junit.Ignore;, + @Test public void canceledCallEventSequence() throws IOException {, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + call.cancel();, + try {, + call.execute();, + fail();, + } catch (IOException expected) {, + assertEquals("Canceled", expected.getMessage());, + }, +, + List<String> expectedEvents = Arrays.asList("CallStart", "CallFailed");, + assertEquals(expectedEvents, listener.recordedEventTypes());, + }, +, + CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, + assertSame(call, callFailed.call);, + assertTrue(callFailed.ioe instanceof UnknownHostException);, + CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, + assertSame(call, callFailed.call);, + assertTrue(callFailed.ioe instanceof UnknownHostException);, + ConnectFailed connectFailed = listener.removeUpToEvent(ConnectFailed.class);, + assertSame(call, connectFailed.call);, + assertEquals(expectedAddress, connectFailed.inetSocketAddress);, + assertNull(connectFailed.protocol);, + assertNotNull(connectFailed.ioe);, +
[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, + return new HttpURLConnectionImpl(url, 80, proxy);, + return new HttpsURLConnectionImpl(url, 443, proxy);, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, + return new HttpURLConnectionImpl(url, 80, proxy);, + return new HttpsURLConnectionImpl(url, 443, proxy);, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, + return new HttpURLConnectionImpl(url, 80, proxy);, + return new HttpsURLConnectionImpl(url, 443, proxy);, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +import com.squareup.okhttp.internal.util.ExtendedResponseCache;, +import com.squareup.okhttp.internal.util.ResponseSource;, +import java.net.ProxySelector;, +import java.net.ResponseCache;, + private final ResponseCache responseCache = ResponseCache.getDefault();, + if (responseCache instanceof ExtendedResponseCache) {, + ((ExtendedResponseCache) responseCache).trackResponse(responseSource);, + if (!policy.getUseCaches() || responseCache == null) {, + CacheResponse candidate = responseCache.get(uri, method,, + routeSelector = new RouteSelector(address,
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void failedAuthenticatorReleasesConnection() throws IOException {, + server.enqueue(new MockResponse(), + .setResponseCode(401));, +, + client.connectionPool().evictAll();, + client = client.newBuilder(), + .authenticator(new Authenticator() {, + @Override public Request authenticate(Route route, Response response) throws IOException {, + throw new IOException("IOException!");, + }, + }), + .build();, +, + Request request = new Request.Builder(), + .url(server.url("/")), + .build();, +, + executeSynchronously(request), + .assertFailure(IOException.class);, +, + assertEquals(1, client.connectionPool().idleConnectionCount());, + }, +, + @Test public void failedProxyAuthenticatorReleasesConnection() throws IOException {, + server.enqueue(new MockResponse(), + .setResponseCode(407));, +, + client.connectionPool().evictAll();, + client = client.newBuilder(), + .proxyAuthenticator(new Authenticator() {, + @Override public Request authenticate(Route
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + private NullServer nullServer = new NullServer();, + nullServer.shutdown();, + proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, TestUtil.UNREACHABLE_ADDRESS));, + nullServer.start();, + proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, nullServer.address()));, + nullServer.start();, + Call call = client.newCall(new Request.Builder(), + .url(nullServer.url(scheme)), + .build());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + private NullServer nullServer = new NullServer();, + nullServer.shutdown();, + proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, TestUtil.UNREACHABLE_ADDRESS));, + nullServer.start();, + proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, nullServer.address()));, + nullServer.start();, + Call call = client.newCall(new Request.Builder(), + .url(nullServer.url(scheme)), + .build());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, + @Test public void connectTimeout() throws Exception {, + Interceptor interceptor1 = new Interceptor() {, + @Override public Response intercept(Chain chainA) throws IOException {, + assertEquals(5000, chainA.connectTimeoutMillis());, +, + Chain chainB
[+++ b/benchmarks/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + @Override public void onFailure(Request request, Throwable throwable) {, + System.out.println("Failed: " + throwable);, +++ b/CHANGELOG.md, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + @Override public void onFailure(Request request, Throwable throwable) {, + System.out.println("Failed: " + throwable);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.TimeUnit;, + * use this to verify the request was sent as intended. This method will block until the, + * request is available, possibly forever., + *, + * @return the head of the request queue, + * Awaits the next HTTP request (waiting up to the, + * specified wait time if necessary), removes it, and
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/samples/guide/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>okhttp-tls</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/CHANGELOG.md, +++ b/samples/guide/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>okhttp-tls</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, +
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, + @Test public void peerHttp2ServerZerosCompressionTable() throws Exception {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, + @Test public void peerHttp2ServerZerosCompressionTable() throws Exception {, +++ b/okhttp-urlconnection/pom.xml, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-annotations</artifactId>, + <version>${animal.sniffer.version}</version>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, + @Test public void peerHttp2ServerZerosCompressionTable() throws Exception {, +++ b/okhttp-urlconnection/pom.xml, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-annotations</artifactId>, + <version>${animal.sniffer.version}</version>, + <optional>true</optional>, + </dependency>, + <dependency>, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, + @IgnoreJRERequirement // Should only be invoked on Java 7+., + @Override public long getContentLengthLong() {, + return delegate.getContentLengthLong();, + }, +, + @IgnoreJRERequirement // Should only be invoked
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY
[+++ b/okhttp-logging-interceptor/README.md, +Logging Interceptor, +===================, +, +An [OkHttp interceptor][1] which logs HTTP request and response data., +, +```java, +OkHttpClient client = new OkHttpClient();, +HttpLoggingInterceptor logging = new HttpLoggingInterceptor();, +logging.setLevel(Level.BASIC);, +client.interceptors().add(logging);, +```, +, +You can change the log level at any time by calling `setLevel`., +, +To log to a custom location, pass a `Logger` instance to the constructor., +```java, +HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new Logger() {, + @Override public void log(String message) {, + Timber.tag("OkHttp").d(message);, + }, +});, +```, +, +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +the potential to leak
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) throws IOException {, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static
[+++ b/pom.xml, + <apache.http.version>4.2.6</apache.http.version>, + <version>3.7.0</version>, + <version>2.8.4</version>, + <version>2.3.1</version>, + <version>2.21.0</version>, + <version>2.21.0</version>]
[+++ b/.circleci/config.yml, + GRADLE_OPTS: -Dorg.gradle.daemon=false -Dokhttp.platform=jdk9 -Dorg.gradle.workers.max=3 -Xmx1G, + mkdir -p ~/test-results/junit/, + find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;, + path: ~/test-results, + mkdir -p ~/reports/, + tar cf - */build/reports | (cd ~/reports/; tar xf -), + path: ~/reports, +, + testconscrypt:, + docker:, + - image: circleci/openjdk:11.0.2-jdk, +, + environment:, + JVM_OPTS: -Xmx1g, + TERM: dumb, +, + steps:, + - checkout, +, + - restore_cache:, + keys:, + - v3-{{ checksum "build.gradle" }}-{{ .Branch }}-testconscrypt, + - v3-{{ checksum "build.gradle" }}-{{ .Branch }}, + - v3-{{ checksum "build.gradle" }}-master, + -
[+++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., + <groupId>com.squareup.okhttp3</groupId>, + <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2.0 so that code can be shared., + <groupId>com.squareup.okhttp3</groupId>, + <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., + <groupId>com.squareup.okhttp3</groupId>, + <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2.0 so that code can be
[+++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, + call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, + call.execute();, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +import okhttp3.internal.http.RealResponseBody;, +import okio.ForwardingSource;, +import okio.Okio;, +import okio.Source;, + String contentType = response.header("Content-Type");, + HttpCodec codec = streamAllocation.codec();, + long contentLength = codec.reportedContentLength(response);, + Source rawSource = codec.openResponseBodySource(response);, + ResponseBodySource source = new ResponseBodySource(rawSource, contentLength);, + return new RealResponseBody(contentType, contentLength, Okio.buffer(source));, + private long contentLength;, + private long bytesReceived;, + private boolean closed;, + RequestBodySink(Sink delegate, long contentLength) {, + this.contentLength = contentLength;, + if (contentLength != -1L && bytesReceived + byteCount > contentLength) {, + throw new ProtocolException("expected " + contentLength, + if (contentLength != -1L && bytesReceived
[+++ b/okhttp-apache/pom.xml, + <version>1.1.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.0</version>, +++ b/okhttp/pom.xml, + <version>1.1.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.0</version>, +++ b/okhttp/pom.xml, + <version>1.1.0</version>, +++ b/pom.xml, + <version>1.1.0</version>, + <tag>parent-1.1.0</tag>, +++ b/okhttp-apache/pom.xml, + <version>1.1.0</version>, +++ b/okhttp/pom.xml, + <version>1.1.0</version>, +++ b/pom.xml, + <version>1.1.0</version>, + <tag>parent-1.1.0</tag>, +++ b/samples/guide/pom.xml, + <version>1.1.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.0</version>, +++ b/okhttp/pom.xml, + <version>1.1.0</version>, +++ b/pom.xml, + <version>1.1.0</version>, + <tag>parent-1.1.0</tag>, +++ b/samples/guide/pom.xml, + <version>1.1.0</version>, +++ b/samples/pom.xml, + <version>1.1.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.0</version>, +++ b/okhttp/pom.xml, + <version>1.1.0</version>, +++ b/pom.xml, + <version>1.1.0</version>, + <tag>parent-1.1.0</tag>, +++ b/samples/guide/pom.xml, + <version>1.1.0</version>, +++ b/samples/pom.xml, + <version>1.1.0</version>, +++ b/samples/simple-client/pom.xml, + <version>1.1.0</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, + private final TlsVersion tlsVersion;, + this.tlsVersion = socket instanceof SSLSocket, + ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), + : null;, + return tlsVersion;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, + private final TlsVersion tlsVersion;, + this.tlsVersion = socket instanceof SSLSocket, + ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), + : null;, + return tlsVersion;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/tls/SslClient.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, + private final TlsVersion tlsVersion;, + this.tlsVersion = socket instanceof SSLSocket, + ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), + : null;, + return tlsVersion;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/tls/SslClient.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, + private final TlsVersion tlsVersion;, + this.tlsVersion = socket instanceof SSLSocket, +
[+++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, + client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, + client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, + client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + this(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, + client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, + urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java,
[+++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + // TODO: support HTTP/2.0., + // 17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '4', '/', '2', '.', '0',, + private static final byte[] HTTP_20_DRAFT_04 = new byte[] {, + 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '4', '/', '2', '.', '0', + };, + } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_04)) {, + transport = Transport.HTTP_20_DRAFT_04;, + if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_04) {, + SpdyConnection.Builder builder = new SpdyConnection.Builder(false, socket), + .handler(spdySocketHandler);, + if (transport ==
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, + public MockDuplexResponseBody requestIOException() {, + actions.add((request, requestBody, responseBody) -> {, + try {, + requestBody.exhausted();, + fail();, + } catch (IOException expected) {, + }, + });, + return this;, + }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, + public MockDuplexResponseBody requestIOException() {, + actions.add((request, requestBody, responseBody) -> {, + try {, + requestBody.exhausted();, + fail();, + } catch (IOException expected) {, + }, + });, + return this;, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import java.util.ArrayList;, +import java.util.List;, +import okhttp3.internal.Util;, + List<Response> responsesNotClosed = new ArrayList<>();, +, + responsesNotClosed.add(response);, + try (Response response
[+++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, + private static final String HOST = "ws://localhost:9001";, + webSocket.close(code, null);, +++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, + private static final String HOST = "ws://localhost:9001";, + webSocket.close(code, null);, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, + ResponseBody body = body("efbbbf68656c6c6f");, + ResponseBody body = body("efbbbf68656c6c6f");, + ResponseBody body = body("efbbbf68656c6c6f");, + assertEquals(0xbf, source.readByte() & 0xff);, + ResponseBody body = body("efbbbf68656c6c6f");, + assertEquals(0xbf,
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + -
[+++ b/bom/pom.xml, + <version>3.13.0-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java, + if (peerSettings.getHeaderTableSize() != -1) {]
[+++ b/benchmarks/pom.xml, + <version>3.9.1</version>, +++ b/benchmarks/pom.xml, + <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.1</version>, +++ b/benchmarks/pom.xml, + <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.1</version>, +++ b/okcurl/pom.xml, + <version>3.9.1</version>, +++ b/benchmarks/pom.xml, + <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.1</version>, +++ b/okcurl/pom.xml, + <version>3.9.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.9.1</version>, +++ b/benchmarks/pom.xml, + <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.1</version>, +++ b/okcurl/pom.xml, + <version>3.9.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.9.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.9.1</version>, +++ b/benchmarks/pom.xml, + <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.1</version>, +++ b/okcurl/pom.xml, + <version>3.9.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.9.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.9.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.9.1</version>, +++ b/benchmarks/pom.xml, + <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.1</version>, +++ b/okcurl/pom.xml, + <version>3.9.1</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Internal;, +import com.squareup.okhttp.internal.SingleInetAddressNetwork;, +import java.net.SocketException;, +import javax.net.ssl.SSLProtocolException;, + Internal.instance.setNetwork(client, new SingleInetAddressNetwork());, + @Test public void noRecoveryFromTlsHandshakeFailureWhenTlsFallbackIsDisabled() throws Exception {, + client.setConnectionConfigurations(Arrays.asList(, + ConnectionConfiguration.MODERN_TLS, ConnectionConfiguration.CLEARTEXT));, +, + server.useHttps(sslContext.getSocketFactory(), false);, + server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));, + server.play();, +, + client.setSslSocketFactory(sslContext.getSocketFactory());, + client.setHostnameVerifier(new RecordingHostnameVerifier());, + Internal.instance.setNetwork(client, new SingleInetAddressNetwork());, +, + Request request = new Request.Builder().url(server.getUrl("/")).build();, + try {, + client.newCall(request).execute();, + fail();, + } catch (SSLProtocolException expected) {, + }, + }, +, + @Test public void cleartextCallsFailWhenCleartextIsDisabled() throws Exception {, + // Configure the client with only TLS configurations. No cleartext!, + client.setConnectionConfigurations(Arrays.asList(, + ConnectionConfiguration.MODERN_TLS, ConnectionConfiguration.COMPATIBLE_TLS));, +, + server.enqueue(new MockResponse());,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName(null);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName(null);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, + Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName(null);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, + Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName(null);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, + Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +++ b/okhttp-hpacktests/pom.xml, +
[+++ b/pom.xml, + <!-- ALPN Versions targeted for each Java 8 minor release -->, + <!-- Check versions with this page: -->, + <!-- http://www.eclipse.org/jetty/documentation/current/alpn-chapter.html#alpn-chapterchapterversions -->, + <profile>, + <id>alpn-when-jdk8_05</id>, + <activation>, + <jdk>1.8.0_05</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.0.v20141016</alpn.jdk8.version>, + </properties>, + </profile>, + <profile>, + <id>alpn-when-jdk8_11</id>, + <activation>, + <jdk>1.8.0_11</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.0.v20141016</alpn.jdk8.version>, + </properties>, + </profile>, + <profile>, + <id>alpn-when-jdk8_20</id>, + <activation>, + <jdk>1.8.0_20</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.0.v20141016</alpn.jdk8.version>, + </properties>, + </profile>, + <profile>, + <id>alpn-when-jdk8_25</id>, + <activation>, + <jdk>1.8.0_25</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.2.v20141202</alpn.jdk8.version>, + </properties>, + </profile>, +
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/okhttp-protocols/pom.xml, + <groupId>com.squareup.okio</groupId>, + <artifactId>okio</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/okhttp-protocols/pom.xml, + <groupId>com.squareup.okio</groupId>, + <artifactId>okio</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import okio.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/okhttp-protocols/pom.xml, + <groupId>com.squareup.okio</groupId>, + <artifactId>okio</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import okio.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import okio.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/okhttp-protocols/pom.xml, + <groupId>com.squareup.okio</groupId>, + <artifactId>okio</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import okio.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import okio.ByteString;, +++
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, + transmitter.prepareToConnect(call.request());, + transmitter.acquireConnection(c1, true);, + transmitter.prepareToConnect(call.request());, + transmitter.acquireConnection(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, + transmitter.prepareToConnect(call.request());, + transmitter.acquireConnection(c1, true);, + transmitter.prepareToConnect(call.request());, + transmitter.acquireConnection(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, + @Test public void applicationInterceptorProceedsMultipleTimes() throws Exception {, + server.enqueue(new MockResponse().setBody("a"));, + server.enqueue(new MockResponse().setBody("b"));, +, + client = client.newBuilder(), + .addInterceptor(chain -> {, + try (Response a = chain.proceed(chain.request())) {, + assertEquals("a", a.body().string());, + }, + return chain.proceed(chain.request());, + }), + .build();, +, + Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, + Response response = call.execute();, + assertEquals("b", response.body().string());, +, + List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, + "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, + "RequestHeadersEnd",
[+++ b/pom.xml, + <okio.version>1.4.0</okio.version>]
[+++ b/okhttp/build.gradle, +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/benchmarks/pom.xml, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++ b/benchmarks/pom.xml, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttp.java, +import com.squareup.okhttp.OkUrlFactory;, + HttpURLConnection urlConnection = new OkUrlFactory(client).open(url);, +++ b/benchmarks/pom.xml, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttp.java, +import com.squareup.okhttp.OkUrlFactory;, + HttpURLConnection urlConnection = new OkUrlFactory(client).open(url);, +++ b/okhttp-tests/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/benchmarks/pom.xml, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttp.java, +import com.squareup.okhttp.OkUrlFactory;, + HttpURLConnection urlConnection = new OkUrlFactory(client).open(url);, +++ b/okhttp-tests/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, +
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.CipherSuite.TLS_DH_anon_WITH_AES_128_GCM_SHA256;, + /**, + * When the server doesn't present any certificates we fail the TLS handshake. This test requires, + * that the client and server are each configured with a cipher suite that permits the server to, + * be unauthenticated., + */, + @Test public void tlsSuccessWithNoPeerCertificates() throws Exception {, + server.enqueue(new MockResponse(), + .setBody("abc"));, +, + // The _anon_ cipher suites don't require server certificates., + CipherSuite cipherSuite = TLS_DH_anon_WITH_AES_128_GCM_SHA256;, +, + HandshakeCertificates clientCertificates = new HandshakeCertificates.Builder(), + .build();, + client = client.newBuilder(), + .sslSocketFactory(, + socketFactoryWithCipherSuite(clientCertificates.sslSocketFactory(), cipherSuite),, + clientCertificates.trustManager()), +
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, + /**, + * Release any resources held by this dispatcher. Any requests that are currently being dispatched, + * should return immediately. Responses returned after shutdown will not be transmitted: their, + * socket connections have already been closed., + */, + public void shutdown() {, + }, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java,
[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import java.net.Proxy;, +, + @Test public void addressToString() throws Exception {, + Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, + authenticator, null, protocols, connectionSpecs, proxySelector);, + assertEquals("Address{square.com:80, proxySelector=RecordingProxySelector}",, + address.toString());, + }, +, + @Test public void addressWithProxyToString() throws Exception {, + Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, + authenticator, Proxy.NO_PROXY, protocols, connectionSpecs, proxySelector);, + assertEquals("Address{square.com:80, proxy=" + Proxy.NO_PROXY + "}", address.toString());, + }, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import java.net.Proxy;, +, + @Test public void addressToString() throws Exception {, + Address address = new Address("square.com", 80, dns, socketFactory, null, null,
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.HttpsURLConnection;, + if (isHttps()) {, + HttpsURLConnection httpsConnection = (HttpsURLConnection) httpConnection;, + cipherSuite = httpsConnection.getCipherSuite();, + peerCertificatesNonFinal = httpsConnection.getServerCertificates();, + localCertificates = httpsConnection.getLocalCertificates();, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.HttpsURLConnection;, + if (isHttps()) {, + HttpsURLConnection httpsConnection = (HttpsURLConnection) httpConnection;, + cipherSuite = httpsConnection.getCipherSuite();, + peerCertificatesNonFinal = httpsConnection.getServerCertificates();, + localCertificates = httpsConnection.getLocalCertificates();, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, + /** Prefix used on custom headers.
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, + @Test public void pingsTransmitted() throws Exception {, + // Ping every 500 ms, starting at 500 ms., + client = client.newBuilder(), + .pingInterval(500, TimeUnit.MILLISECONDS), + .build();, +, + // Delay the response to give 1 ping enough time to be sent and replied to., + server.enqueue(new MockResponse(), + .setBodyDelay(750, TimeUnit.MILLISECONDS), + .setBody("ABC"));, +, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + Response response = call.execute();, + assertEquals("ABC", response.body().string());, +, + assertEquals(Protocol.HTTP_2, response.protocol());, +, + // Confirm a single ping was sent and received, and its reply was sent and
[+++ b/checkstyle.xml, + <module name="MethodLength"/>
[+++ b/pom.xml, + <groupId>com.squareup</groupId>]
[+++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.Set;, + private final Set<Socket> openClientSockets =, + Collections.newSetFromMap(new ConcurrentHashMap<Socket, Boolean>());, + private final Set<SpdyConnection> openSpdyConnections =, + Collections.newSetFromMap(new ConcurrentHashMap<SpdyConnection, Boolean>());, + for (Iterator<Socket> s = openClientSockets.iterator(); s.hasNext(); ) {, + for (Iterator<SpdyConnection> s = openSpdyConnections.iterator(); s.hasNext(); ) {, + openClientSockets.add(socket);, + openClientSockets.add(socket);, + openSpdyConnections.add(spdyConnection);, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.Set;, + private final Set<Socket> openClientSockets =, + Collections.newSetFromMap(new ConcurrentHashMap<Socket, Boolean>());, + private final Set<SpdyConnection> openSpdyConnections =, + Collections.newSetFromMap(new ConcurrentHashMap<SpdyConnection,
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + ConnectionAcquired.class);, + ConnectionAcquired.class);, + ConnectionAcquired connectionAcquired = listener.removeUpToEvent(ConnectionAcquired.class);, + assertSame(call, connectionAcquired.call);, + assertNotNull(connectionAcquired.connection);, + listener.removeUpToEvent(ConnectionAcquired.class);, + assertFalse(remainingEvents.contains(ConnectionAcquired.class));, + ConnectionAcquired connectionAcquired1 = listener.removeUpToEvent(ConnectionAcquired.class);, + ConnectionAcquired connectionAcquired2 = listener.removeUpToEvent(ConnectionAcquired.class);, + assertSame(connectionAcquired1.connection, connectionAcquired2.connection);, + listener.removeUpToEvent(ConnectionAcquired.class);, + listener.removeUpToEvent(ConnectionAcquired.class);, + static final class ConnectionAcquired {, + ConnectionAcquired(Call call, Connection connection) {, + this.call = call;, + this.connection = connection;, + }, + }, +, + static final class ConnectionReleased {, + final Call call;, + final Connection connection;, +, + ConnectionReleased(Call call, Connection connection) {, + Proxy proxy, Protocol protocol, Throwable throwable) {, + @Override public void connectionAcquired(Call call, Connection connection)
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, + private final Hpack.Reader hpackReader = new Hpack.Reader(4096,
[+++ b/benchmarks/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, + return new Builder(this);, + private String method;, + private final Headers.Builder headers;, + public Builder() {, + this.method = "GET";, + this.headers = new Headers.Builder();, + private Builder(Request request) {, + this.url = request.url;, + this.method = request.method;, + this.body = request.body;, + this.tag = request.tag;, + this.headers = request.headers.newBuilder();, + return url(new URL(url));, + if (url == null) throw new IllegalStateException("url == null");, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, + return new Builder(this);, + private String method;, + private final Headers.Builder headers;, + public Builder() {, + this.method = "GET";, + this.headers = new Headers.Builder();, + private Builder(Request request)
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/pom.xml, +++
[+++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, + - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", + - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, + - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", + - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, + - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", + - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, + - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", + - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++
[+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ /dev/null, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ /dev/null, +++ /dev/null, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-testing-support/src/main/java/okhttp3/testing/RecordingHostnameVerifier.java, +/*, + * Copyright (C) 2013 The Android Open Source Project, + *, + * Licensed under
[+++ b/okhttp-apache/pom.xml, + <packaging>bundle</packaging>, + <plugin>, + <groupId>org.apache.felix</groupId>, + <artifactId>maven-bundle-plugin</artifactId>, + <extensions>true</extensions>, + <configuration>, + <instructions>, + <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, + <Bundle-Version>${project.version}</Bundle-Version>, + <Export-Package>, + okhttp3.apache.*, + </Export-Package>, + </instructions>, + </configuration>, + </plugin>, +++ b/okhttp-apache/pom.xml, + <packaging>bundle</packaging>, + <plugin>, + <groupId>org.apache.felix</groupId>, + <artifactId>maven-bundle-plugin</artifactId>, + <extensions>true</extensions>, + <configuration>, + <instructions>, + <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, + <Bundle-Version>${project.version}</Bundle-Version>, + <Export-Package>, + okhttp3.apache.*, + </Export-Package>, + </instructions>, + </configuration>, + </plugin>, +++ b/okhttp-logging-interceptor/pom.xml, + <packaging>bundle</packaging>, +, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.felix</groupId>, + <artifactId>maven-bundle-plugin</artifactId>, + <extensions>true</extensions>, + <configuration>, + <instructions>, + <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, + <Bundle-Version>${project.version}</Bundle-Version>, + <Export-Package>, + okhttp3.logging.*, + </Export-Package>, + </instructions>, +
[+++ b/build.gradle, +++ b/build.gradle, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + LogRecorder assertLogMatch(String pattern) {, +++ b/build.gradle, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/main/java/okhttp3/Route.kt, +class Route(, + fun requiresTunnel(): Boolean {, + return address.sslSocketFactory() != null && proxy.type() == Proxy.Type.HTTP, + }, +, + override fun equals(other: Any?): Boolean {, + return other is Route, + && other.address == address, + && other.proxy == proxy, + && other.inetSocketAddress == inetSocketAddress, + }, +, + override fun hashCode(): Int {, + var result = 17, + result = 31 * result + address.hashCode(), + result = 31 * result + proxy.hashCode(), +
[+++ b/bom/pom.xml, + <distributionManagement>, + <repository>, + <id>sonatype-nexus-staging</id>, + <name>Nexus Release Repository</name>, + <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>, + </repository>, + </distributionManagement>, +++ b/bom/pom.xml, + <distributionManagement>, + <repository>, + <id>sonatype-nexus-staging</id>, + <name>Nexus Release Repository</name>, + <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>, + </repository>, + </distributionManagement>, +++ b/pom.xml]
[+++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union of the acting entity and all, + other entities that control, are controlled by,
[+++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> streamHeaders = stream.getRequestHeaders();, + stream.sendResponseHeaders(Collections.singletonList(, + stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> streamHeaders = stream.getRequestHeaders();, + stream.sendResponseHeaders(Collections.singletonList(, + stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + List<Header> requestHeaders = stream.getRequestHeaders();, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> streamHeaders = stream.getRequestHeaders();, + stream.sendResponseHeaders(Collections.singletonList(, + stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + List<Header> requestHeaders = stream.getRequestHeaders();, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> streamHeaders = stream.getRequestHeaders();, + stream.sendResponseHeaders(Collections.singletonList(, + stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + List<Header> requestHeaders = stream.getRequestHeaders();, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);,
[+++ b/pom.xml, + <junit.version>4.10</junit.version>, +++ b/pom.xml, + <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, + public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, + String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/pom.xml, + <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, + public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, + String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/pom.xml, + <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, + public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, + String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, + public static String getDefaultUserAgent() {, +++ b/pom.xml, + <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, + public static
[+++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, + private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, + private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ /dev/null, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, + private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.SingleInetAddressDns;, + .dns(new SingleInetAddressDns()), + .dns(new SingleInetAddressDns()), + .dns(new SingleInetAddressDns()), +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, + private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.SingleInetAddressDns;, + .dns(new SingleInetAddressDns()), + .dns(new SingleInetAddressDns()), + .dns(new SingleInetAddressDns()), +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.internal.SingleInetAddressDns;, +
[+++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketRecorder.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, + .listener(this), + @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, + .listener(this), + @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, + .listener(framedSocketListener), + private class FramedSocketHandler extends FramedConnection.Listener {, + @Override public void onStream(FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, + .listener(this), + @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);,
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, + String hostname = url.getHost();, + hostname = proxyAddress.getHostName();, + return new SocketPermission(hostname + ":" + hostPort, "connect, resolve");, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, + String hostname = url.getHost();, + hostname = proxyAddress.getHostName();, + return new SocketPermission(hostname + ":" + hostPort, "connect, resolve");, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, + String hostname = url.getHost();, + hostname = proxyAddress.getHostName();, + return new SocketPermission(hostname
[+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okio.Buffer;, + return agent != null ? toHumanReadableAscii(agent) : Version.userAgent();, + }, +, + /** Returns {@code s} with control characters and non-ASCII characters replaced with '?'. */, + private static String toHumanReadableAscii(String s) {, + for (int i = 0, length = s.length(), c; i < length; i += Character.charCount(c)) {, + c = s.codePointAt(i);, + if (c > '\u001f' && c < '\u007f') continue;, +, + Buffer buffer = new Buffer();, + buffer.writeUtf8(s, 0, i);, + buffer.writeUtf8CodePoint('?');, + for (int j = i + Character.charCount(c); j < length; j += Character.charCount(c)) {, + c
[+++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void rangeHeaderPreventsAutomaticGzip() throws Exception {, + Buffer gzippedBody = gzip("abcabcabc");, +, + // Enqueue a gzipped response. Our request isn't expecting it, but that's okay., + server.enqueue(new MockResponse(), + .setResponseCode(HttpURLConnection.HTTP_PARTIAL), + .setBody(gzippedBody), + .addHeader("Content-Encoding: gzip"), + .addHeader("Content-Range: bytes 0-" + (gzippedBody.size() - 1)));, +, + // Make a range request., + Request request = new Request.Builder(), + .url(server.url("/")), + .header("Range", "bytes=0-"), + .build();, + Call call = client.newCall(request);, +, + // The response is not decompressed., + Response response = call.execute();, + assertEquals("gzip", response.header("Content-Encoding"));, + assertEquals(gzippedBody.snapshot(), response.body().source().readByteString());, +, + //
[+++ b/build.gradle, + check("MissingFail", CheckSeverity.ERROR), +++ b/build.gradle, + check("MissingFail", CheckSeverity.ERROR), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.Ignore;, + @Ignore("Not actually failing where expected"), + fail();, +++ b/build.gradle, + check("MissingFail", CheckSeverity.ERROR), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.Ignore;, + @Ignore("Not actually failing where expected"), + fail();, +++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java, + fail();, + fail();, + fail();, + fail();]
[+++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +import okio.Buffer;, + static void toggleMask(Buffer.UnsafeCursor cursor, byte[] key) {, + int keyIndex = 0;, + do {, + byte[] buffer = cursor.data;, + for (int i = cursor.start, end = cursor.end; i < end; i++, keyIndex++) {, + keyIndex %= keyLength; // Reassign to prevent overflow breaking counter., + } while (cursor.next() != -1);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +import okio.Buffer;, + static void toggleMask(Buffer.UnsafeCursor cursor, byte[] key) {, + int keyIndex = 0;, + do {, + byte[] buffer = cursor.data;, + for (int i = cursor.start, end = cursor.end; i < end; i++, keyIndex++) {, + keyIndex
[+++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import junit.framework.TestCase;, +public class CustomDispatcherTest extends TestCase {, + @Override, + public void tearDown() throws Exception {, + public void testSimpleDispatch() throws Exception {, + public void testOutOfOrderResponses() throws Exception {, +, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import junit.framework.TestCase;, +public class CustomDispatcherTest extends TestCase {, + @Override, + public void tearDown() throws Exception {, + public void testSimpleDispatch() throws Exception {, + public void testOutOfOrderResponses() throws Exception {, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/HttpUrlConnectionImplTest.java, +package com.squareup.okhttp.internal.huc;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.OkUrlFactory;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import java.io.IOException;, +import java.net.HttpURLConnection;, +import java.net.URL;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static org.junit.Assert.fail;,
[+++ b/okhttp-tests/src/test/java/okhttp3/RequestTest.java, +import java.util.UUID;, +import static org.junit.Assert.assertSame;, + @Test public void newBuilderUrlResetsUrl() {, + @Test public void cacheControl() {, + @Test public void emptyCacheControlClearsAllCacheControlHeaders() {, + @Test public void headerAcceptsPermittedCharacters() {, + @Test public void emptyNameForbidden() {, + @Test public void headerForbidsNullArguments() {, + @Test public void headerAllowsTabOnlyInValues() {, + @Test public void headerForbidsControlCharacters() {, + @Test public void noTag() {, + Request request = new Request.Builder(), + .url("https://square.com"), + .build();, + assertNull(request.tag());, + assertNull(request.tag(Object.class));, + assertNull(request.tag(UUID.class));, + assertNull(request.tag(String.class));, + }, +, + @Test public void defaultTag() {, + UUID tag = UUID.randomUUID();, + Request request = new Request.Builder(),
[+++ b/.travis.yml]
[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *
[+++ b/okhttp-android-support/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>2.3.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp-android-support</artifactId>, + <name>OkHttp Android Platform Support</name>, + <description>Classes to support the Android platform's use of OkHttp (not required for most developers).</description>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${project.version}</version>, + </dependency>, + , + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-javadoc-plugin</artifactId>, + <configuration>,
[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/main/java/libcore/net/http/HttpConnection.java, + /*, + * Buffer the input to mask SSL InputStream's degenerate available(), + * implementation. That way we can read the end of a chunked response, + * without blocking and will recycle the connection more reliably., + * http://code.google.com/p/android/issues/detail?id=38817, + */, + sslInputStream = new BufferedInputStream(sslSocket.getInputStream(), 128);, +++ b/pom.xml, +++ b/src/main/java/libcore/net/http/HttpConnection.java, + /*, + * Buffer the input to mask SSL InputStream's degenerate available(), + * implementation. That way we can read the end of a chunked response, + * without blocking and will recycle the connection more reliably., + *
[+++ b/.travis.yml, +before_cache:, + - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock, + - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, + - $HOME/.gradle/caches/, + - $HOME/.gradle/wrapper/]
[+++ b/benchmarks/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-tests/pom.xml, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>logging-interceptor</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-tests/pom.xml, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>logging-interceptor</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.logging.HttpLoggingInterceptor;, + @Test public void successfulCallEventSequenceWithListener() throws IOException {, + server.enqueue(new MockResponse().setBody("abc"));, +, + client = client.newBuilder().addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(, + HttpLoggingInterceptor.Level.BODY)).build();, +, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + Response response = call.execute();, + assertEquals(200, response.code());, + assertEquals("abc", response.body().string());, + response.body().close();, +, + List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, + "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, + "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, + "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, + assertEquals(expectedEvents,
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, + TlsNode tlsNode = localhost();, + new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, + TlsNode tlsNode = localhost();, + new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, + TlsNode tlsNode = localhost();, + server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, + TlsNode tlsNode = localhost();, + new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, + TlsNode tlsNode = localhost();, + server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, + TlsNode
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, + BufferedSource bodyIn = Okio.buffer(stream.getSource());, + byte[] bodyOut = bodyIn.readByteArray();, +, + return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.length,, + bodyOut, sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, + BufferedSource bodyIn = Okio.buffer(stream.getSource());, + byte[] bodyOut = bodyIn.readByteArray();, +, + return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.length,, + bodyOut, sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, + BufferedSource bodyIn = Okio.buffer(stream.getSource());, + byte[] bodyOut = bodyIn.readByteArray();, +, + return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.length,, + bodyOut, sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, + BufferedSource bodyIn = Okio.buffer(stream.getSource());, + byte[] bodyOut = bodyIn.readByteArray();, +,
[+++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, + <version>1.1.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, + <version>1.1.0</version>, + <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.10.4</version>, + <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, + <version>1.1.0</version>, + <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.10.4</version>, + <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, + <version>2.10.4</version>, + <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, + <version>1.1.0</version>, + <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.10.4</version>, + <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + assertEquals(512f, i, 20f); // Halfway +/- 2%, +++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, + * <p/>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, + * <p/>, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, + * <p/>, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import com.squareup.okhttp.internal.bytes.ByteString;, + * or HTTP/2.0., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, + * <p/>, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import com.squareup.okhttp.internal.bytes.ByteString;, + * or HTTP/2.0., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/ByteString.java, +/*, + * Copyright 2014 Square Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this
[+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.Util;, + String agent = Util.getSystemProperty("http.agent", null);, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.Util;, + String agent = Util.getSystemProperty("http.agent", null);, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import java.security.AccessControlException;, +, + /**, + * Returns the system property, or defaultValue if the system property is null or, + * cannot be read (e.g. because of security policy restrictions)., + */, + public static String getSystemProperty(String key, @Nullable String defaultValue) {, + final String value;, + try {, + value = System.getProperty(key);, + } catch (AccessControlException ex) {, + return defaultValue;, + }, + return value != null ? value : defaultValue;, + }, +++
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingCookieJar.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import okhttp3.internal.tls.SslClient;, +import okhttp3.mockwebserver.SocketPolicy;, +import static org.junit.Assert.assertNotNull;, + private final SslClient sslClient = SslClient.localhost();, + @Test public void successfulCallEventSequence() throws IOException {, + server.enqueue(new MockResponse());, +, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + Response response = call.execute();, + assertEquals(200, response.code());, + response.body().close();, +, + List<Class<?>> expectedEvents = Arrays.asList(DnsStart.class, DnsEnd.class);, + assertEquals(expectedEvents, listener.recordedEventTypes());, + }, +, + @Test public void successfulHttpsCallEventSequence() throws IOException {, + enableTls(false);, + server.enqueue(new MockResponse());, +, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + Response response = call.execute();, + assertEquals(200, response.code());, + response.body().close();,
[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/AbstractOutputStream.java, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void legalToExecuteTwiceCloning() throws Exception {, + server.enqueue(new MockResponse().setBody("abc"));, + server.enqueue(new MockResponse().setBody("def"));, +, + Request request = new Request.Builder(), + .url(server.url("/")), + .build();, +, + Call call = client.newCall(request);, + Response response1 = call.execute();, +, + Call cloned = call.clone();, + Response response2 = cloned.execute();, +, + assertEquals(response1.body().string(), "abc");, + assertEquals(response2.body().string(), "def");, + }, +, + @Test public void legalToExecuteTwiceCloning_Async() throws Exception {, + server.enqueue(new MockResponse().setBody("abc"));, + server.enqueue(new MockResponse().setBody("def"));, +, + Request request = new Request.Builder(), + .url(server.url("/")), + .build();, +, + Call call = client.newCall(request);, + call.enqueue(callback);, +, + Call cloned = call.clone();, +
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.ConnectionPool;, + // If we don't set this reference, there's no way to clean shutdown persistent connections., + client.setConnectionPool(ConnectionPool.getDefault());, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.ConnectionPool;, + // If we don't set this reference, there's no way to clean shutdown persistent connections., + client.setConnectionPool(ConnectionPool.getDefault());, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, + client.setConnectionPool(null);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.ConnectionPool;, + // If we don't set this reference, there's no way to clean shutdown persistent connections., + client.setConnectionPool(ConnectionPool.getDefault());, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, + client.setConnectionPool(null);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + ConnectionPool pool = ConnectionPool.getDefault();, + pool.evictAll();, + client.setConnectionPool(pool);, +, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.ConnectionPool;, + // If we don't set this reference, there's
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/LICENSE.txt, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION,
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, + Response response = client.newCall(headRequest).execute();, + assertEquals(200, response.code());, + assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, + Response response = client.newCall(headRequest).execute();, + assertEquals(200, response.code());, + assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, + String contentType = response.header("Content-Type");, + long contentLength = response.body().contentLength();, + .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource))), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, + Response response = client.newCall(headRequest).execute();, + assertEquals(200, response.code());, + assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, + String contentType = response.header("Content-Type");, + long contentLength = response.body().contentLength();, + .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource))), +++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java, + String contentType = networkResponse.header("Content-Type");, + responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java,
[+++ b/okhttp-apache/pom.xml, + <version>1.0.2</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.2</version>, +++ b/okhttp/pom.xml, + <version>1.0.2</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.2</version>, +++ b/okhttp/pom.xml, + <version>1.0.2</version>, +++ b/pom.xml, + <version>1.0.2</version>, + <tag>parent-1.0.2</tag>, +++ b/okhttp-apache/pom.xml, + <version>1.0.2</version>, +++ b/okhttp/pom.xml, + <version>1.0.2</version>, +++ b/pom.xml, + <version>1.0.2</version>, + <tag>parent-1.0.2</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.2</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.2</version>, +++ b/okhttp/pom.xml, + <version>1.0.2</version>, +++ b/pom.xml, + <version>1.0.2</version>, + <tag>parent-1.0.2</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.2</version>, +++ b/samples/pom.xml, + <version>1.0.2</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.2</version>, +++ b/okhttp/pom.xml, + <version>1.0.2</version>, +++ b/pom.xml, + <version>1.0.2</version>, + <tag>parent-1.0.2</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.2</version>, +++ b/samples/pom.xml, + <version>1.0.2</version>, +++ b/samples/simple-client/pom.xml, + <version>1.0.2</version>]
[+++ b/okhttp-sse/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, + oldClasspath = files(baselineJar(project, baselineVersion)), + newClasspath = files(jar.archivePath), + onlyBinaryIncompatibleModified = true, + failOnModification = true, + txtOutputFile = file("$buildDir/reports/japi.txt"), + ignoreMissingClasses = true, + includeSynthetic = true, + packageExcludes = [, + 'okhttp3.internal.sse',, + ], +}, +check.dependsOn(japicmp), +++ b/okhttp-sse/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, + oldClasspath = files(baselineJar(project, baselineVersion)), + newClasspath = files(jar.archivePath), + onlyBinaryIncompatibleModified = true, + failOnModification = true, + txtOutputFile = file("$buildDir/reports/japi.txt"), + ignoreMissingClasses = true, + includeSynthetic = true, + packageExcludes = [, + 'okhttp3.internal.sse',, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> continueHeaders = Collections.singletonList(, + new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue")));, + stream.writeHeaders(continueHeaders, false, true);, + boolean outFinished = body == null, + && response.getPushPromises().isEmpty(), + && !response.isDuplex();, + boolean flushHeaders = body == null;, + if (outFinished && trailers.size() > 0) {, + stream.writeHeaders(http2Headers, outFinished, flushHeaders);, + BufferedSink sink = Okio.buffer(stream.getSink());, + BufferedSource source = Okio.buffer(stream.getSource());, + DuplexResponseBody duplexResponseBody = response.getDuplexResponseBody();, + } else if (!outFinished) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> continueHeaders = Collections.singletonList(, + new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue")));, + stream.writeHeaders(continueHeaders, false, true);, + boolean outFinished = body == null, + && response.getPushPromises().isEmpty(), + && !response.isDuplex();, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, + } catch (InterruptedException ignored) {, + throw new AssertionError();, + throw new InterruptedIOException();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, + } catch (InterruptedException ignored) {, + throw new AssertionError();, + throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, + } catch (InterruptedException ignored) {, + throw new AssertionError();, + throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, + } catch (InterruptedException ignored) {, + throw new AssertionError();,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +/*, + * Copyright 2014 Square Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS"
[+++ b/benchmarks/pom.xml, + <version>3.3.1</version>, +++ b/benchmarks/pom.xml, + <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.1</version>, +++ b/benchmarks/pom.xml, + <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.1</version>, +++ b/okcurl/pom.xml, + <version>3.3.1</version>, +++ b/benchmarks/pom.xml, + <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.1</version>, +++ b/okcurl/pom.xml, + <version>3.3.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.3.1</version>, +++ b/benchmarks/pom.xml, + <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.1</version>, +++ b/okcurl/pom.xml, + <version>3.3.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.3.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.3.1</version>, +++ b/benchmarks/pom.xml, + <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.1</version>, +++ b/okcurl/pom.xml, + <version>3.3.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.3.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.3.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.3.1</version>, +++ b/benchmarks/pom.xml, + <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.1</version>, +++ b/okcurl/pom.xml, + <version>3.3.1</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_201</id>, + <activation>, + <jdk>1.8.0_201</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.13.v20181017</alpn.jdk8.version>, + </properties>, + </profile>, + <profile>, + <id>alpn-when-jdk8_202</id>, + <activation>, + <jdk>1.8.0_202</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.13.v20181017</alpn.jdk8.version>, + </properties>, + </profile>]
[+++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ /dev/null, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/ByteString.java, +/*, + * Copyright 2014 Square Inc., + *, + * Licensed under the Apache License, Version
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, + assertTrue(request.getHeaders().contains("If-Modified-Since: " + formatDate(since)));, + return formatDate(new Date(System.currentTimeMillis() + timeUnit.toMillis(delta)));, + }, +, + private String formatDate(Date date) {, + DateFormat rfc1123 = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);, + rfc1123.setTimeZone(TimeZone.getTimeZone("GMT"));, + return rfc1123.format(date);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, + assertTrue(request.getHeaders().contains("If-Modified-Since: " + formatDate(since)));, + return formatDate(new Date(System.currentTimeMillis() + timeUnit.toMillis(delta)));, + }, +, + private String formatDate(Date date) {, + DateFormat rfc1123 = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);, + rfc1123.setTimeZone(TimeZone.getTimeZone("GMT"));, + return rfc1123.format(date);, +++ b/pom.xml, + <okio.version>1.0.1</okio.version>]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Headers okHeaders = extractOkResponseHeaders(httpUrlConnection);, + Headers okHeaders = extractOkHeaders(javaResponse);, + Headers headers = extractOkHeaders(requestHeaders);, + final Headers headers = response.headers();, + private static Headers extractOkHeaders(CacheResponse javaResponse) throws IOException {, + return extractOkHeaders(javaResponseHeaders);, + private static
[+++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs for interacting with cipher suites and TLS versions., + * Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs for interacting with cipher suites and TLS versions., + * Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, + <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', + <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs
[+++ b/mockwebserver/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/mockwebserver/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.3-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + equalTo(19L));, + equalTo(19L));, + equalTo(19L));, + requestBodySuccess(requestBody, equalTo(8192L), equalTo(19L));, + equalTo(19L));, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + equalTo(19L));, + equalTo(19L));, + equalTo(19L));, + requestBodySuccess(requestBody, equalTo(8192L), equalTo(19L));, + equalTo(19L));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, + @Test public void byteCount() {, + assertEquals(0L, new Headers.Builder().build().byteCount());, + assertEquals(10L, new Headers.Builder(), + .add("abc", "def"), + .build(), + .byteCount());, + assertEquals(20L, new Headers.Builder(), + .add("abc", "def"), + .add("ghi", "jkl"), + .build(), + .byteCount());, + }, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + equalTo(19L));, + equalTo(19L));, + equalTo(19L));, + requestBodySuccess(requestBody, equalTo(8192L), equalTo(19L));, + equalTo(19L));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, + @Test public void byteCount() {, + assertEquals(0L, new Headers.Builder().build().byteCount());, + assertEquals(10L, new Headers.Builder(),
[+++ b/benchmarks/pom.xml, + <version>3.5.0</version>, +++ b/benchmarks/pom.xml, + <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.5.0</version>, +++ b/benchmarks/pom.xml, + <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.5.0</version>, +++ b/okcurl/pom.xml, + <version>3.5.0</version>, +++ b/benchmarks/pom.xml, + <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.5.0</version>, +++ b/okcurl/pom.xml, + <version>3.5.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.5.0</version>, +++ b/benchmarks/pom.xml, + <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.5.0</version>, +++ b/okcurl/pom.xml, + <version>3.5.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.5.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.5.0</version>, +++ b/benchmarks/pom.xml, + <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.5.0</version>, +++ b/okcurl/pom.xml, + <version>3.5.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.5.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.5.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.5.0</version>, +++ b/benchmarks/pom.xml, + <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.5.0</version>, +++ b/okcurl/pom.xml, + <version>3.5.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/samples/crawler/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp.sample</groupId>, + <artifactId>sample-parent</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>crawler</artifactId>, + <name>Sample: Crawler</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>org.jsoup</groupId>, + <artifactId>jsoup</artifactId>, + <version>1.7.3</version>, + </dependency>, + </dependencies>, +</project>, +++ b/samples/crawler/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp.sample</groupId>, + <artifactId>sample-parent</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>crawler</artifactId>, + <name>Sample: Crawler</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <version>${project.version}</version>, + </dependency>,
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, + /**, + * Release any resources held by this dispatcher. Any requests that are currently being dispatched, + * should return immediately. Responses returned after shutdown will not be transmitted: their, + * socket connections have already been closed., + */, + public void shutdown() {, + }, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java,
[+++ b/CHANGELOG.md, +## Version 3.7.0, +, +_2017-04-15_, +, + * **OkHttp no longer recovers from TLS handshake failures by attempting a TLSv1 connection.**, + The fallback was necessary for servers that implemented version negotiation incorrectly. Now, + that 99.99% of servers do it right this fallback is obsolete., + * Fix: Do not honor cookies set on a public domain. Previously a malicious site could inject, + cookies on top-level domains like `co.uk` because our cookie parser didn't honor the [public, + suffix][public_suffix] list. Alongside this fix is a new API, `HttpUrl.topPrivateDomain()`,, + which returns the privately domain name
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import okhttp3.internal.Util;, + Util.addSuppressedIfPossible(unknownHostException, failures.get(i));, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import okhttp3.internal.Util;, + Util.addSuppressedIfPossible(unknownHostException, failures.get(i));, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, + private static final Method addSuppressedExceptionMethod;, +, + static {, + Method m;, + try {, + m = Throwable.class.getDeclaredMethod("addSuppressed", Throwable.class);, + } catch (Exception e) {, + m = null;, + }, + addSuppressedExceptionMethod = m;, + }, +, + public static void addSuppressedIfPossible(Throwable e, Throwable suppressed) {, + if (addSuppressedExceptionMethod != null) {, + try {, + addSuppressedExceptionMethod.invoke(e, suppressed);, + } catch (InvocationTargetException | IllegalAccessException ignored) {, + }, + }, + }, +, + String[] result
[+++ b/pom.xml]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, + transmitter.acquireConnectionNoEvents(c1);, + assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., + transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, + transmitter.acquireConnectionNoEvents(c1);, + assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., + transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, + @Override public void initExchange(, + Response.Builder responseBuilder, Exchange exchange) {, + responseBuilder.initExchange(exchange);, + }, +, + @Override public @Nullable Exchange exchange(Response response) {, + return response.exchange;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, + transmitter.acquireConnectionNoEvents(c1);, + assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., + transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, + @Override public void initExchange(, + Response.Builder responseBuilder, Exchange exchange) {, + responseBuilder.initExchange(exchange);,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, + } catch (InterruptedException ignored) {, + throw new AssertionError();, + throw new InterruptedIOException();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, + } catch (InterruptedException ignored) {, + throw new AssertionError();, + throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, + } catch (InterruptedException ignored) {, + throw new AssertionError();, + throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, + } catch (InterruptedException ignored) {, + throw new AssertionError();,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, + Headers streamHeaders = stream.takeHeaders();, + String name = streamHeaders.name(i);, + String value = streamHeaders.value(i);, + if (name.equals(Header.TARGET_METHOD_UTF8)) {, + } else if (name.equals(Header.TARGET_PATH_UTF8)) {, + httpHeaders.add(name, value);, + if (name.equals("expect") && value.equalsIgnoreCase("100-continue")) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, + Headers streamHeaders = stream.takeHeaders();, + String name = streamHeaders.name(i);, + String value = streamHeaders.value(i);, + if (name.equals(Header.TARGET_METHOD_UTF8)) {, + } else if (name.equals(Header.TARGET_PATH_UTF8)) {, + httpHeaders.add(name, value);, + if (name.equals("expect") && value.equalsIgnoreCase("100-continue")) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import okhttp3.Headers;, + Headers requestHeaders = stream.takeHeaders();, + if (requestHeaders.name(i).equals(Header.TARGET_PATH_UTF8)) {, + path = requestHeaders.value(i);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static
[+++ b/okhttp-apache/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + /** https://github.com/square/okhttp/issues/2198 */, + @Test public void cachedRedirect() throws IOException {, + server.enqueue(new MockResponse(), + .setResponseCode(301), + .addHeader("Cache-Control: max-age=60"), + .addHeader("Location: /bar"));, + server.enqueue(new MockResponse(), + .setBody("ABC"));, + server.enqueue(new MockResponse(), + .setBody("ABC"));, +, + Request request1 = new Request.Builder().url(server.url("/")).build();, + Response response1 = client.newCall(request1).execute();, + assertEquals("ABC", response1.body().string());, +, + Request request2 = new Request.Builder().url(server.url("/")).build();, + Response response2 = client.newCall(request2).execute();, + assertEquals("ABC", response2.body().string());, + }, +, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + /** https://github.com/square/okhttp/issues/2198 */, + @Test public void cachedRedirect() throws IOException {, + server.enqueue(new MockResponse(),
[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + long contentLength = responseBody.contentLength();, + String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, + + bodySize + " body" : "") + ')');, + if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + long contentLength = responseBody.contentLength();, + String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, + + bodySize + " body" : "") + ')');, + if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, + @Test public void basicChunkedResponseBody() throws IOException {, + setLevel(Level.BASIC);, +, + server.enqueue(new MockResponse(), + .setChunkedBody("Hello!", 2), + .setHeader("Content-Type", PLAIN));, + Response response = client.newCall(request().build()).execute();,
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, + HandshakeCertificates handshakeCertificates = localhost();, + new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, + HandshakeCertificates handshakeCertificates = localhost();, + new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, + HandshakeCertificates handshakeCertificates = localhost();, + server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, + HandshakeCertificates handshakeCertificates = localhost();, + new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, + HandshakeCertificates handshakeCertificates = localhost();, + server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, + @Override public void initChannel(SocketChannel channel) {, + HandshakeCertificates handshakeCertificates = localhost();, + SSLEngine engine = handshakeCertificates.sslContext().createSSLEngine();, + ChannelHandlerContext context, HttpObject message) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, + Buffer body = new Buffer();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, + Buffer body = new Buffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, + Buffer buffer = new Buffer();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, + Buffer body = new Buffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, + Buffer buffer = new Buffer();, +++ b/okhttp-tests/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, + Buffer body = new Buffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, + Buffer buffer = new Buffer();, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +import okio.Buffer;, + Buffer buffer = new Buffer();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, + Buffer body = new Buffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, +
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + // 1. Seed the cache (potentially)., + // 2. Expect a cache hit or miss., + // 1. Seed the cache., + // 2. Invalidate it., + // 3. Expect a cache miss., + // 1. Seed the cache., + // 2. Invalidate it with an uncacheable response., + // 3. Expect a cache miss., + @Test public void putInvalidatesWithNoContentResponse() throws Exception {, + // 1. Seed the cache., + // 2. Invalidate it., + // 3. Expect a cache miss., + server.enqueue(new MockResponse(), + .setBody("A"), + .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));, + server.enqueue(new MockResponse(), +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/.circleci/config.yml, +# Check https://circleci.com/docs/2.0/language-java/ for more details, +version: 2, +jobs:, + build:, + docker:, + - image: circleci/openjdk:8-jdk, +, + working_directory: ~/repo, +, + environment:, + JVM_OPTS: -Xmx3200m, + TERM: dumb, +, + steps:, + - checkout, +, + - restore_cache:, + keys:, + - v1-dependencies-{{ checksum "build.gradle" }}, + - v1-dependencies-, +, + - run: ./gradlew downloadDependencies, +, + - save_cache:, + paths:, + - ~/.gradle/caches, + key: v1-dependencies-{{ checksum "build.gradle" }}, +, + - run: ./gradlew check, + , + - run:, + name: Save test results, + command: |, + mkdir -p ~/test-results/junit/, + find
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, + @Test public void readSettingsFrameExperimentalId() throws IOException {, + writeMedium(frame, 6); // 2 for the code and 4 for the value, + frame.writeByte(Http2.TYPE_SETTINGS);, + frame.writeByte(Http2.FLAG_NONE);, + frame.writeInt(0); // Settings are always on the connection stream 0., + frame.write(ByteString.decodeHex("f000")); // Id reserved for experimental use., + frame.writeInt(1);, +, + reader.nextFrame(false, new BaseTestHandler() {, + @Override public void settings(boolean clearPrevious, Settings settings) {, + // no-op, + }, + });, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, + @Test public void readSettingsFrameExperimentalId() throws IOException {, + writeMedium(frame, 6); // 2 for the code and 4
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AddressTest.java, + private Dns dns = Dns.SYSTEM;, + Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,, + Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,, + Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,, + Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AddressTest.java, + private Dns dns = Dns.SYSTEM;, + Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,, + Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,, + Address a = new Address("square.com", 80, dns, socketFactory, null, null,
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + .protocols(benchmark.protocols), + .sslSocketFactory(socketFactory), + .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + .protocols(benchmark.protocols), + .sslSocketFactory(socketFactory), + .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, + .protocols(benchmark.protocols), + .dispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, + .sslSocketFactory(socketFactory), + .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + .protocols(benchmark.protocols), + .sslSocketFactory(socketFactory), + .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, + .protocols(benchmark.protocols), + .dispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, + .sslSocketFactory(socketFactory), + .hostnameVerifier(hostnameVerifier), +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + builder.followSslRedirects(followRedirects);, + builder.connectTimeout(connectTimeout, SECONDS);, + builder.readTimeout(readTimeout, SECONDS);, + builder.sslSocketFactory(createInsecureSslSocketFactory());, + builder.hostnameVerifier(createInsecureHostnameVerifier());, + client.connectionPool().evictAll(); // Close any persistent connections., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + .protocols(benchmark.protocols), + .sslSocketFactory(socketFactory), + .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, + .protocols(benchmark.protocols), + .dispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, + .sslSocketFactory(socketFactory), + .hostnameVerifier(hostnameVerifier), +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + builder.followSslRedirects(followRedirects);, + builder.connectTimeout(connectTimeout, SECONDS);, + builder.readTimeout(readTimeout, SECONDS);,
[+++ b/CHANGELOG.md, +_2018-02-04_, +++ b/CHANGELOG.md, +_2018-02-04_, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + try (BufferedSink sink = Okio.buffer(stream.getSink())) {, + }, + try (BufferedSink sink = Okio.buffer(stream.getSink());, + BufferedSource source = Okio.buffer(stream.getSource())) {, + }, +++ b/CHANGELOG.md, +_2018-02-04_, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + try (BufferedSink sink = Okio.buffer(stream.getSink())) {, + }, + try (BufferedSink sink = Okio.buffer(stream.getSink());, + BufferedSource source = Okio.buffer(stream.getSource())) {, + }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You
[+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, + logger.log(Level.INFO, "Http2Server connection failure: " + e);, + logger.log(Level.WARNING, "Http2Server unexpected failure", e);, + @Override public void onStream(Http2Stream stream) throws IOException {, + Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, + System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, + logger.log(Level.INFO, "Http2Server connection failure: " + e);, + logger.log(Level.WARNING, "Http2Server unexpected failure", e);, + @Override public void onStream(Http2Stream stream) throws IOException {, + Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, + System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, + .listener(http2SocketHandler), + /** Processes HTTP requests layered over HTTP/2. */, +
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + @Test public void getWithRequestBody() throws Exception {, + server.enqueue(new MockResponse());, + server.play();, +, + try {, + new Request.Builder().method("GET", RequestBody.create(MediaType.parse("text/plain"), "abc"));, + fail();, + } catch (IllegalArgumentException expected) {, + }, + }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + @Test public void getWithRequestBody() throws Exception {, + server.enqueue(new MockResponse());, + server.play();, +, + try {, + new Request.Builder().method("GET", RequestBody.create(MediaType.parse("text/plain"), "abc"));, + fail();, + } catch (IllegalArgumentException expected) {, + }, + }, +, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + @Test public void getWithRequestBody() throws Exception {, + server.enqueue(new MockResponse());, + server.play();, +, + try {, + new Request.Builder().method("GET", RequestBody.create(MediaType.parse("text/plain"),
[+++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, + @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, + @Override, + @Override, +
[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.http.Dispatcher;, + private final RouteDatabase routeDatabase;, + private final Dispatcher dispatcher;, + routeDatabase = new RouteDatabase();, + dispatcher = new Dispatcher();, + routeDatabase = copyFrom.routeDatabase;, + dispatcher = copyFrom.dispatcher;, + readTimeout = (int) millis;, + public OkResponseCache getOkResponseCache() {, + public RouteDatabase getRoutesDatabase() {, + return routeDatabase;, + }, +, + if (transports.contains("")) {, + throw new IllegalArgumentException("transports contains an empty string");, + }, + return open(url, proxy);, + if (protocol.equals("http")) return new HttpURLConnectionImpl(url, copy);, + if (protocol.equals("https")) return new HttpsURLConnectionImpl(url, copy);, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java,
[+++ b/checkstyle.xml, +++ b/checkstyle.xml, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, + int w1;, + try {, + w1 = in.readInt();, + } catch (IOException e) {, + return false; // This might be a normal socket close., + }, + int w2 = in.readInt();, +, + int length = w1 & 0xffff;, + int type = (w1 & 0xff0000) >> 16;, + int flags = (w1 & 0xff000000) >> 24;, + boolean r = (w2 & 0x80000000) != 0;, + int streamId = (w2 & 0x7fffffff);, +, + throw new UnsupportedOperationException("TODO");, + @Override public synchronized void synStream(boolean outFinished, boolean inFinished,, + int streamId,
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + -
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void getClientRequestTimeoutWithBackPressure() throws Exception {, + server.enqueue(new MockResponse(), + .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), + .setResponseCode(408), + .setHeader("Connection", "Close"), + .setHeader("Retry-After", "1"), + .setBody("You took too long!"));, +, + Request request = new Request.Builder(), + .url(server.url("/")), + .build();, + Response response = client.newCall(request).execute();, +, + assertEquals("You took too long!", response.body().string());, + }, +, + @Test public void maxUnavailableTimeoutRetries() throws IOException {, + server.enqueue(new MockResponse(), + .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), + .setResponseCode(503), + .setHeader("Connection", "Close"), + .setHeader("Retry-After", "0"), + .setBody("You took too long!"));, + server.enqueue(new MockResponse(), + .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), + .setResponseCode(503), + .setHeader("Connection", "Close"), + .setHeader("Retry-After", "0"), + .setBody("You took too long!"));, +,
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + return new X509Certificate[0];]
[+++ b/CHANGELOG.md, +## Version 3.3.1, +, +_2016-05-28_, +, + * Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified, + newline characters as control characters. This is fixed., + * Fix: Don't crash reading non-ASCII characters in HTTP/2 headers or in cached, + HTTP headers., + * Fix: Retain the response body when an attempt to open a web socket returns a, + non-101 response code., +, +, + replace the `OkHttp-Sent-Millis` and `OkHttp-Received-Millis` headers that were, +++ b/CHANGELOG.md, +## Version 3.3.1, +, +_2016-05-28_, +, + * Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified, + newline characters as control
[+++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
[+++ b/mockwebserver/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>1.1.2-SNAPSHOT</version>, + </parent>, +, + <artifactId>mockwebserver</artifactId>, + <name>MockWebServer</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-protocols</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>org.bouncycastle</groupId>, + <artifactId>bcprov-jdk15on</artifactId>, + </dependency>, + <dependency>, + <groupId>org.mortbay.jetty.npn</groupId>, + <artifactId>npn-boot</artifactId>, + <optional>true</optional>, + </dependency>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.google.mockwebserver</groupId>, + <artifactId>mockwebserver</artifactId>, + </dependency>, + </dependencies>, +, + <build>, + <!-- Don't restrict test code to Java 1.5 APIs. -->, + <plugins>, + <plugin>, +
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/Jdk9PlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, + StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, + StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, + Address address = chain.connection().route().address();, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, + StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, + Address address = chain.connection().route().address();, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, + route = connection.route();,
[+++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, + call.get().cancel();, + call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, + call.get().cancel();, + call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + return ((RealCall) call).streamAllocation();, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, + call.get().cancel();, + call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + return ((RealCall) call).streamAllocation();, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.CallServerInterceptor;, +import okhttp3.internal.http.RetryAndFollowUpInterceptor;, + private final RetryAndFollowUpInterceptor retryAndFollowUpInterceptor;, + this.retryAndFollowUpInterceptor = new RetryAndFollowUpInterceptor(client);, + this.retryAndFollowUpInterceptor.setForWebSocket(true);, + retryAndFollowUpInterceptor.cancel();, + return retryAndFollowUpInterceptor.isCanceled();, + }, +, + StreamAllocation streamAllocation() {, + return retryAndFollowUpInterceptor.streamAllocation();, + if (retryAndFollowUpInterceptor.isCanceled()) {, + String string = retryAndFollowUpInterceptor.isCanceled() ? "canceled call" : "call";, + interceptors.add(retryAndFollowUpInterceptor);, + if (!retryAndFollowUpInterceptor.isForWebSocket()) {, + interceptors.add(new CallServerInterceptor(, + retryAndFollowUpInterceptor.isForWebSocket()));, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, + call.get().cancel();, + call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + return ((RealCall)
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.WebSocketListener;, +public final class MockWebServer implements TestRule, Closeable {, + @Override public void close() throws IOException {, + shutdown();, + }, +, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.WebSocketListener;, +public final class MockWebServer implements TestRule, Closeable {, + @Override public void close() throws IOException {, + shutdown();, + }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.io.Closeable;, + @Test public void closeViaClosable() throws IOException {, + Closeable server = new MockWebServer();, + server.close();, + }, +, +++ b/mockwebserver/pom.xml,
[+++ /dev/null, +++ /dev/null, +++ b/pom.xml]
[+++ b/pom.xml, + <mockwebserver.version>20120731</mockwebserver.version>, +++ b/pom.xml, + <mockwebserver.version>20120731</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpConnection.java, + /**, + * Returns a new OkHttpConnection or OkHttpsConnection to {@code url}., + */, + String protocol = url.getProtocol();, + if (protocol.equals("http")) {, + return new libcore.net.http.HttpURLConnectionImpl(url, 80);, + } else if (protocol.equals("https")) {, + return new libcore.net.http.HttpsURLConnectionImpl(url, 443);, + } else {, + throw new IllegalArgumentException();, + }, + /**, + * Returns a new OkHttpConnection or OkHttpsConnection to {@code url} that, + * connects via {@code proxy}., + */, + String protocol = url.getProtocol();, + if (protocol.equals("http")) {, + return new libcore.net.http.HttpURLConnectionImpl(url, 80, proxy);, + }
[+++ b/mockwebserver/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule, Closeable {, + @Override public void close() throws IOException {, + shutdown();, + }, +, +++ b/mockwebserver/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule,
[+++ b/okhttp-testing-support/src/main/java/okhttp3/ForwardingRequestBody.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_161</id>, + <activation>, + <jdk>1.8.0_161</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.12.v20180117</alpn.jdk8.version>, + </properties>, + </profile>, + <profile>, + <id>alpn-when-jdk8_162</id>, + <activation>, + <jdk>1.8.0_162</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.12.v20180117</alpn.jdk8.version>, + </properties>, + </profile>]
[+++ b/okhttp/src/main/java/okhttp3/Response.java, + BufferedSource peeked = body.source().peek();, + Buffer buffer = new Buffer();, + peeked.request(byteCount);, + buffer.write(peeked, Math.min(byteCount, peeked.getBuffer().size()));, + return ResponseBody.create(body.contentType(), buffer.size(), buffer);, +++ b/okhttp/src/main/java/okhttp3/Response.java, + BufferedSource peeked = body.source().peek();, + Buffer buffer = new Buffer();, + peeked.request(byteCount);, + buffer.write(peeked, Math.min(byteCount, peeked.getBuffer().size()));, + return ResponseBody.create(body.contentType(), buffer.size(), buffer);, +++ b/pom.xml, + <okio.version>1.16.0</okio.version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, + private NewWebSocket.Listener webSocketListener;, + public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, + public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, + private NewWebSocket.Listener webSocketListener;, + public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, + public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, + RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, + @Override public void close() {, + RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, + response.getWebSocketListener(), new SecureRandom());, + response.getWebSocketListener().onOpen(webSocket, fancyResponse);, + webSocket.initReaderAndWriter(streams);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, + private NewWebSocket.Listener webSocketListener;, + public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, + public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, + RealNewWebSocket.Streams streams =
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, + httpA.connect(200, 200, 200, null);, + httpB.connect(200, 200, 200, null);, + httpC.connect(200, 200, 200, null);, + httpD.connect(200, 200, 200, null);, + httpE.connect(200, 200, 200, null);, + spdyA.connect(20000, 20000, 2000, null);, + connection.connect(200, 200, 200, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, + httpA.connect(200, 200, 200, null);, + httpB.connect(200, 200, 200, null);, + httpC.connect(200, 200, 200, null);, + httpD.connect(200, 200, 200, null);, + httpE.connect(200, 200, 200, null);, + spdyA.connect(20000, 20000, 2000, null);, + connection.connect(200, 200, 200, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, + /** Confirm that an unacknowledged write times out. */, + @Test public void writeTimeouts() throws IOException {, + server.enqueue(new MockResponse(), + .throttleBody(1,
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, + return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, + return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, + 'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, + 'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, + 'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, + 'okhttp3.CertificatePinner$Builder#build()',, + 'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, + 'okhttp3.CipherSuite#javaName()',, + 'okhttp3.ConnectionSpec#cipherSuites()',, + 'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, + 'okhttp3.ConnectionSpec#isTls()',, + 'okhttp3.ConnectionSpec#supportsTlsExtensions()',, + 'okhttp3.ConnectionSpec#tlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#build()',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, + return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, + 'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, + 'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, + 'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, + 'okhttp3.CertificatePinner$Builder#build()',, + 'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, + 'okhttp3.CipherSuite#javaName()',, + 'okhttp3.ConnectionSpec#cipherSuites()',, + 'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, + 'okhttp3.ConnectionSpec#isTls()',, + 'okhttp3.ConnectionSpec#supportsTlsExtensions()',, + 'okhttp3.ConnectionSpec#tlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#build()',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',,
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + callback.await(requestA.url()).assertFailure(, + "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + callback.await(requestA.url()).assertFailure(, + "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, + public void assertFailure(String... messages) {, + assertTrue(failure.getMessage(), Arrays.asList(messages).contains(failure.getMessage()));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + callback.await(requestA.url()).assertFailure(, + "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, + public void assertFailure(String... messages) {, + assertTrue(failure.getMessage(), Arrays.asList(messages).contains(failure.getMessage()));, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + callback.await(requestA.url()).assertFailure(, + "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, + public void assertFailure(String... messages) {, + assertTrue(failure.getMessage(), Arrays.asList(messages).contains(failure.getMessage()));, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, + private static final String TLS_1_2 = "TLSv1.2"; // 2008., + private
[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, + private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, + private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, + private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, + client.client().setProxyAuthenticator(new JavaNetAuthenticator());, + client.client().setAuthenticator(new JavaNetAuthenticator());, + client.client().setAuthenticator(new JavaNetAuthenticator());, + client.client().setAuthenticator(new JavaNetAuthenticator());, + client.client().setAuthenticator(new JavaNetAuthenticator());, + client.client().setAuthenticator(new JavaNetAuthenticator());, + client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, + private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, + client.client().setProxyAuthenticator(new JavaNetAuthenticator());, + client.client().setAuthenticator(new JavaNetAuthenticator());, + client.client().setAuthenticator(new JavaNetAuthenticator());, + client.client().setAuthenticator(new JavaNetAuthenticator());, + client.client().setAuthenticator(new JavaNetAuthenticator());, + client.client().setAuthenticator(new JavaNetAuthenticator());, + client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.JavaNetAuthenticator;, + client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, + private Authenticator authenticator = Authenticator.NONE;,
[+++ b/.travis.yml, + - ./gradlew check, +++ b/.travis.yml, + - ./gradlew check, +++ b/build.gradle, +++ b/.travis.yml, + - ./gradlew check, +++ b/build.gradle, +++ b/okhttp/src/test/java/okhttp3/EventListenerTest.java]
[+++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +import okhttp3.internal.Internal;, +import okhttp3.internal.connection.Exchange;, + // This is a long-lived response. Cancel full-call timeouts., + Exchange exchange = Internal.instance.exchange(response);, + if (exchange != null) exchange.timeoutEarlyExit();, +, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +import okhttp3.internal.Internal;, +import okhttp3.internal.connection.Exchange;, + // This is a long-lived response. Cancel full-call timeouts., + Exchange exchange = Internal.instance.exchange(response);, + if (exchange != null) exchange.timeoutEarlyExit();, +, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, + @Test public void fullCallTimeoutDoesNotApplyOnceConnected() throws Exception {, + .callTimeout(250, TimeUnit.MILLISECONDS), + @Test public void fullCallTimeoutAppliesToSetup() throws Exception {, + client = client.newBuilder(), + .callTimeout(250, TimeUnit.MILLISECONDS), + .build();, +, + server.enqueue(new MockResponse(), + .setHeadersDelay(500, TimeUnit.MILLISECONDS), + .setHeader("content-type", "text/event-stream"), + .setBody("data: hey\n\n"));,
[+++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestingRule;, + @Rule public final OkHttpClientTestingRule clientTestingRule = new OkHttpClientTestingRule();, + private OkHttpClient client = clientTestingRule.client;, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestingRule;, + @Rule public final OkHttpClientTestingRule clientTestingRule = new OkHttpClientTestingRule();, + private OkHttpClient client = clientTestingRule.client;, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestingRule.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable
[+++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, + - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", + - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +before_cache:, + - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock, + - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, + - $HOME/.gradle/caches/, + - $HOME/.gradle/wrapper/, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, + - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", + - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +before_cache:, + - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock, + - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, + - $HOME/.gradle/caches/, + - $HOME/.gradle/wrapper/, +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml,
[+++ b/okhttp/src/main/java/okhttp3/RealCall.kt, + // TODO(egorand): Remove @JvmStatic once OkHttpClient.java is converted to Kotlin, + @JvmStatic fun newRealCall(, +++ b/okhttp/src/main/java/okhttp3/RealCall.kt, + // TODO(egorand): Remove @JvmStatic once OkHttpClient.java is converted to Kotlin, + @JvmStatic fun newRealCall(, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, + * Returns the system property, or {@code defaultValue} if the system property is null or]
[+++ b/src/test/java/libcore/net/http/ExternalSpdyExample.java, +/*, + * Copyright (C) 2009 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *
[+++ b/.gitignore, +local.properties, +++ b/.gitignore, +local.properties, +++ b/okhttp/build.gradle, +++ b/.gitignore, +local.properties, +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.kt, + * Copyright (C) 2012 The Android Open Source Project, +++ b/.gitignore, +local.properties, +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.kt, + * Copyright (C) 2012 The Android Open Source Project, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, +
[+++ b/okhttp-tests/src/test/java/okhttp3/CertificateAuthorityCouncilTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + private static final int CLIENT_AUTH_NONE = 0;, + private static final int CLIENT_AUTH_REQUESTED = 1;, + private static final int CLIENT_AUTH_REQUIRED = 2;, +, + private int clientAuth = CLIENT_AUTH_NONE;, + * Configure the server to not perform SSL authentication of the client. This leaves, + * authentication to another layer such as in an HTTP cookie or header. This is the default and, + * most common configuration., + */, + public void noClientAuth() {, + this.clientAuth = CLIENT_AUTH_NONE;, + }, +, + /**, + * Configure the server to {@linkplain SSLSocket#setWantClientAuth want client auth}.
[+++ b/mockwebserver/pom.xml, + <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0</version>, +++ b/okcurl/pom.xml, + <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0</version>, +++ b/okcurl/pom.xml, + <version>3.14.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0</version>, +++ b/okcurl/pom.xml, + <version>3.14.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.14.0</version>, +++ b/okhttp-hpacktests/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0</version>, +++ b/okcurl/pom.xml, + <version>3.14.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.14.0</version>, +++ b/okhttp-hpacktests/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.14.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0</version>, +++ b/okcurl/pom.xml, + <version>3.14.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.14.0</version>, +++ b/okhttp-hpacktests/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.14.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.14.0</version>, +++ b/okhttp-sse/pom.xml, + <version>3.14.0</version>,
[+++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union
[+++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, + * <p>These differences may have a significant consequence when the URI is interpreted by a, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, + * <p>These differences may have a significant consequence when the URI is interpreted by a, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java, + * and {@code :path}., + * @param byteCount must be between 0 and the minimum of {@code source.length} and {@link, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, + * <p>These differences may have a significant consequence when the URI is interpreted by a, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java, + * and {@code :path}., + * @param byteCount must be between 0 and the minimum of {@code source.length} and
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + "unexpected end of stream on " + server.url("/").redact());, + .assertFailureMatches(".*unexpected end of stream on " + server.url("/").redact());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + "unexpected end of stream on " + server.url("/").redact());, + .assertFailureMatches(".*unexpected end of stream on " + server.url("/").redact());, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Transmitter;, + OkHttpClient client = new OkHttpClient.Builder(), + .connectionPool(pool), + .build();, + Call call = client.newCall(newRequest(addressA));, + Transmitter transmitter = new Transmitter(client, call);, + transmitter.newStreamAllocation(addressA);, + transmitter.acquire(c1, true);, + assertEquals(Collections.emptyList(), c1.transmitters);, + OkHttpClient client = new OkHttpClient.Builder(), + .connectionPool(pool), + .build();, + Call call = client.newCall(newRequest(connection.route().address()));, + Transmitter transmitter = new Transmitter(client, call);, + transmitter.newStreamAllocation(call.request());, +
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import static java.util.Collections.emptyList;, +import static java.util.Collections.emptyMap;, +import static java.util.Collections.singletonList;, +import static java.util.Collections.singletonMap;, +import static org.junit.Assert.assertNull;, + Headers.of(singletonMap("", "OkHttp"));, + Headers.of(singletonMap(" ", "OkHttp"));, + Headers headers = Headers.of(singletonMap("User-Agent", ""));, + Headers headers = Headers.of(singletonMap(" User-Agent ", "OkHttp"));, + Headers headers = Headers.of(singletonMap("User-Agent", " OkHttp "));, + Headers.of(singletonMap("User-\u0000Agent", "OkHttp"));, + Headers.of(singletonMap("User-Agent", "Square\u0000OkHttp"));, + @Test public void testDigestChallengeWithStrictRfc2617Header() {, + assertEquals("digest", challenges.get(0).scheme());, + Map<String, String> expectedAuthParams = new LinkedHashMap<>();, + expectedAuthParams.put("realm", "myrealm");, + expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, + expectedAuthParams.put("qop", "auth");, + expectedAuthParams.put("stale", "FALSE");, + assertEquals(expectedAuthParams, challenges.get(0).authParams());, + }, + @Test public void testDigestChallengeWithDifferentlyOrderedAuthParams() {, + Headers headers = new Headers.Builder(), + List<Challenge>
[+++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons. It uses a local, + * connection to a MockWebServer to measure how many identical requests per second can be carried, + * over a fixed number of threads., +++
[+++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, + <version>1.1.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, + <version>1.1.0</version>, + <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.10.4</version>, + <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, + <version>1.1.0</version>, + <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.10.4</version>, + <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, + <version>2.10.4</version>, + <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + Source source = Okio.source(file);, + try {, + BufferedSink out = Okio.buffer(stream.getSink());, + out.writeAll(source);, + out.close();, + } finally {, + Util.closeQuietly(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + Source source = Okio.source(file);, + try {, + BufferedSink out = Okio.buffer(stream.getSink());, + out.writeAll(source);, + out.close();, + } finally {, + Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.buffer(), source.buffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + Source source = Okio.source(file);, + try {, + BufferedSink out = Okio.buffer(stream.getSink());, + out.writeAll(source);, + out.close();, + } finally {, + Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Buffer buffer = source.buffer();, + GzipSource gzippedResponseBody = null;, + try
[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, + public static int getDefaultPort(String protocol) {, + if ("http".equals(protocol)) return 80;, + if ("https".equals(protocol)) return 443;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, + public static int getDefaultPort(String protocol) {, + if ("http".equals(protocol)) return 80;, + if ("https".equals(protocol)) return 443;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + HttpTransport.writeRequest(out, request.headers(), requestLine);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, + public static int getDefaultPort(String protocol) {, + if ("http".equals(protocol)) return 80;, + if ("https".equals(protocol)) return 443;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + HttpTransport.writeRequest(out, request.headers(), requestLine);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.Headers;, + private final Headers varyHeaders;, + private final Headers responseHeaders;, + Headers.Builder varyHeadersBuilder = new Headers.Builder();, + Headers.Builder responseHeadersBuilder = new Headers.Builder();, + this.varyHeaders = response.request().headers().getAll(response.getVaryFields());,
[+++ b/pom.xml, + <okio.version>1.2.0</okio.version>]
[+++ b/checkstyle.xml, + <module name="IllegalImport"/>
[+++ b/.gitignore, +*.ipr, +*.iws, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, + hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.getTransports());, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, + hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.getTransports());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, + RawHeaders rawHeaders = RawHeaders.fromBytes(socketIn);, + httpEngine.connection.setHttpMinorVersion(rawHeaders.getHttpMinorVersion());, + httpEngine.receiveHeaders(rawHeaders);, +, + ResponseHeaders headers = new ResponseHeaders(httpEngine.uri, rawHeaders);, + headers.setTransport("http/1.1");, + return headers;, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, + hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.getTransports());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, + RawHeaders rawHeaders = RawHeaders.fromBytes(socketIn);, + httpEngine.connection.setHttpMinorVersion(rawHeaders.getHttpMinorVersion());, + httpEngine.receiveHeaders(rawHeaders);, +, + ResponseHeaders headers = new ResponseHeaders(httpEngine.uri, rawHeaders);, + headers.setTransport("http/1.1");, + return headers;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +import java.util.ArrayList;, + private List<String> transports;, + List<String> getTransports() {, + return
[+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +import java.util.HashMap;, + Map<String, List<String>> headers = new HashMap<>();, + Map<String, List<String>> headers = new HashMap<>();, + Map<String, List<String>> headers = new HashMap<>();, + Map<String, List<String>> javaRequestHeaders = new HashMap<>();, + Map<String, List<String>> javaRequestHeaders = new HashMap<>();, + Map<String, List<String>> javaResponseHeaders = new HashMap<>();, + Map<String, List<String>> javaResponseHeaders = new HashMap<>();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +import java.util.HashMap;, + Map<String, List<String>> headers = new HashMap<>();, + Map<String, List<String>> headers = new HashMap<>();, + Map<String, List<String>> headers = new HashMap<>();, + Map<String, List<String>> javaRequestHeaders = new HashMap<>();, + Map<String, List<String>> javaRequestHeaders = new HashMap<>();, + Map<String, List<String>> javaResponseHeaders = new HashMap<>();,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.writeAll(body);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + return buffer.readString(body.contentType().charset());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, + return buffer.readUtf8();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, + return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, + responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, + return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, + responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, + return buffer.readByteString().hex();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, + return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, + responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + * Throttles the request reader and response writer to sleep for the given period after each, + * series of {@code bytesPerPeriod} bytes are transferred. Use this to simulate network behavior., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + * Throttles the request reader and response writer to sleep for the given period after each, + * series of {@code bytesPerPeriod} bytes are transferred. Use this to simulate network behavior., +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/MockSpdyPeer.java, +import java.net.InetSocketAddress;, +import okhttp3.internal.Util;, + serverSocket = new ServerSocket();, + serverSocket.setReuseAddress(false);, + serverSocket.bind(new InetSocketAddress("localhost", 0), 1);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + * Throttles the request reader and response writer to sleep
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, + private OkHttpClient client = defaultClient();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, + private OkHttpClient client = defaultClient();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, + private OkHttpClient client = defaultClient();, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, + 1. If you made modifications to `Benchmark` run `mvn compile`., + 2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, + 1. If you made modifications to `Benchmark` run `mvn compile`., + 2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project
[+++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="square/okhttp", +JDK="oraclejdk8", +BRANCH="master", +, +set -e, +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, + echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, + echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, + echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, + echo "Skipping snapshot deployment: wrong
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, + assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, + assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, + assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, + assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, + assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, + assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, + assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, + assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis
[+++ b/.github/ISSUE_TEMPLATE.md, +What kind of issue is this?, +, + - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do, + something, or to understand why something isn't working the way you expect it to, use Stack, + Overflow. https://stackoverflow.com/questions/tagged/okhttp, +, + - [ ] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests, + get fixed. Here’s an example: https://gist.github.com/swankjesse/981fcae102f513eb13ed, +, + - [ ] Feature Request. Start by telling us what problem you’re trying to solve. Often
[+++ b/okhttp-testing-support/src/main/java/okhttp3/ForwardingRequestBody.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/.travis.yml, +# - openjdk11, +++ b/.travis.yml, +# - openjdk11, +++ b/CHANGELOG.md, +## Version 3.11.0, +, +_2018-07-12_, +, + * **OkHttp's new okhttp-tls submodule tames HTTPS and TLS.**, +, + `HeldCertificate` is a TLS certificate and its private key. Generate a certificate with its, + builder then use it to sign another certificate or perform a TLS handshake. The, + `certificatePem()` method encodes the certificate in the familiar PEM format, + (`--- BEGIN CERTIFICATE ---`); the `privateKeyPkcs8Pem()` does likewise for the private key., +, + `HandshakeCertificates` holds the TLS certificates required for a TLS handshake. On the server, +
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void cancelImmediatelyAfterEnqueue() throws Exception {, + call.cancel();, + @Test public void cancelAll() throws Exception {, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + call.enqueue(callback);, + client.dispatcher().cancelAll();, + callback.await(server.url("/")).assertFailure("Canceled");, + }, +, + Request request = new Request.Builder().url(server.url("/a")).build();, + final Call call = client.newCall(request);, +, + call.cancel();, + call.execute();, +, + Request requestA = new Request.Builder().url(server.url("/a")).build();, + Request requestB = new Request.Builder().url(server.url("/b")).build();, + final Call callA = client.newCall(requestA);, + final Call callB = client.newCall(requestB);, +, + callB.cancel();, + callA.enqueue(callback);, + callB.enqueue(callback);, + Request requestA = new Request.Builder().url(server.url("/a")).build();, + Request request = new
[+++ b/pom.xml, + <consoleOutput>true</consoleOutput>]
[+++ b/benchmarks/pom.xml, + <id>alpn-when-jdk7</id>, + <groupId>org.mortbay.jetty.alpn</groupId>, + <artifactId>alpn-boot</artifactId>, + <version>${alpn.jdk7.version}</version>, + <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/pom.xml, + <id>alpn-when-jdk7</id>, + <groupId>org.mortbay.jetty.alpn</groupId>, + <artifactId>alpn-boot</artifactId>, + <version>${alpn.jdk7.version}</version>, + <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/benchmarks/pom.xml, + <id>alpn-when-jdk7</id>, + <groupId>org.mortbay.jetty.alpn</groupId>, + <artifactId>alpn-boot</artifactId>, + <version>${alpn.jdk7.version}</version>, + <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/benchmarks/pom.xml, + <id>alpn-when-jdk7</id>, + <groupId>org.mortbay.jetty.alpn</groupId>, + <artifactId>alpn-boot</artifactId>, + <version>${alpn.jdk7.version}</version>, + <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + /** Which ALPN protocols are in use. Only useful with TLS.
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, + private WebSocketListener webSocketListener;, + public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, + public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, + private WebSocketListener webSocketListener;, + public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, + public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, + RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, + RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, + private WebSocketListener webSocketListener;, + public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, + public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, + RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, + RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, + private
[+++ b/mockwebserver/pom.xml, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/okhttp-android-support/pom.xml, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++
[+++ b/bom/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>parent</artifactId>, + <version>3.12.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp-bom</artifactId>, + <packaging>pom</packaging>, + <name>OkHttp (Bill of Materials)</name>, +, + <dependencyManagement>, + <dependencies>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-tests</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-android-support</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-apache</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-sse</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, +
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + -
[+++ b/mockwebserver/pom.xml, + <version>1.2.1</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.1</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.1</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.1</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.1</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.1</version>, +++ b/okhttp/pom.xml, + <version>1.2.1</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.1</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.1</version>, +++ b/okhttp/pom.xml, + <version>1.2.1</version>, +++ b/pom.xml, + <version>1.2.1</version>, + <tag>parent-1.2.1</tag>, +++ b/mockwebserver/pom.xml, + <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.1</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.1</version>, +++ b/okhttp/pom.xml, + <version>1.2.1</version>, +++ b/pom.xml, + <version>1.2.1</version>, + <tag>parent-1.2.1</tag>, +++ b/samples/guide/pom.xml, + <version>1.2.1</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.1</version>, +++ b/okhttp-protocols/pom.xml, +
[+++ /dev/null, +++ /dev/null, +++ b/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, + <parent>, + <groupId>org.sonatype.oss</groupId>, + <artifactId>oss-parent</artifactId>, + <version>7</version>, + </parent>, + <groupId>com.google.mockwebserver</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>20120127</version>, + <name>mockwebserver</name>, + <url>http://code.google.com/p/mockwebserver</url>, + <issueManagement>, + <system>code.google.com</system>, + <url>http://code.google.com/p/mockwebserver/issues</url>, + </issueManagement>, + <inceptionYear>2011</inceptionYear>, + <licenses>, + <license>, + <name>The Apache Software License, Version 2.0</name>, + <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>, + <distribution>repo</distribution>, + </license>, + </licenses>, + <prerequisites>, + <maven>3.0.4</maven>, + </prerequisites>, + <dependencies>, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <version>3.8.1</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-compiler-plugin</artifactId>,
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();,
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, + return new Thread(new Runnable() {, + @Override public void run() {, + final URL url = mockWebServer.url(path).url();, + final HttpURLConnection conn;, + } catch (IOException e) {, + }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, + return new Thread(new Runnable() {, + @Override public void run() {, + final URL url = mockWebServer.url(path).url();, + final HttpURLConnection conn;, + } catch (IOException e) {, + }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + new Thread() {, + @Override public void run() {, + }, +
[+++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + String name = request.getPath();, + ThreadPoolExecutor replyExecutor =, + new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, + Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier", name), true));, + replyExecutor.allowCoreThreadTimeOut(true);, + final CountDownLatch connectionClose = new CountDownLatch(1);, + RealWebSocket webSocket =, + new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, + response.getWebSocketListener(), fancyResponse, name) {, + @Override protected void shutdown() {, + connectionClose.countDown();, + };, +, + webSocket.loopReader();, + } catch (InterruptedException ignored) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + String name = request.getPath();, + ThreadPoolExecutor replyExecutor =, + new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, + Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier",
[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.net.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.net.http.HttpsURLConnectionImpl;, + return new HttpURLConnectionImpl(url, 80, proxy);, + return new HttpsURLConnectionImpl(url, 443, proxy);, +++ b/pom.xml, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.net.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.net.http.HttpsURLConnectionImpl;, + return new HttpURLConnectionImpl(url, 80, proxy);, + return new HttpsURLConnectionImpl(url, 443, proxy);, +++ b/src/main/java/com/squareup/okhttp/internal/Platform.java, +/*, + * Copyright (C) 2012 Square, Inc., + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License
[+++ b/.buildscript/deploy_snapshot.sh, + ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/deploy_snapshot.sh, + ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.travis.yml, + - openjdk8, + - openjdk11, +before_install:, + - mvn -N io.takari:maven:wrapper -Dmaven=3.6.0, + - echo "MAVEN_OPTS='-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS'" > ~/.mavenrc, +install:, + - ./mvnw dependency:resolve -B, +, +script:, + - ./mvnw test -B, + - ./mvnw javadoc:jar source:jar -B, +++ b/.buildscript/deploy_snapshot.sh, + ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.travis.yml, + - openjdk8, + - openjdk11, +before_install:, + - mvn -N io.takari:maven:wrapper -Dmaven=3.6.0, + - echo "MAVEN_OPTS='-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS'" >
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import io.airlift.airline.Arguments;, +import io.airlift.airline.Command;, +import io.airlift.airline.HelpOption;, +import io.airlift.airline.Option;, +import io.airlift.airline.SingleCommand;, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import io.airlift.airline.Arguments;, +import io.airlift.airline.Command;, +import io.airlift.airline.HelpOption;, +import io.airlift.airline.Option;, +import io.airlift.airline.SingleCommand;, +++ b/okhttp/src/main/java/okhttp3/Call.java, + * failure exception. If you {@link #cancel} a request before it completes the callback will not, + * be invoked., +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import io.airlift.airline.Arguments;, +import io.airlift.airline.Command;, +import io.airlift.airline.HelpOption;, +import io.airlift.airline.Option;, +import io.airlift.airline.SingleCommand;, +++ b/okhttp/src/main/java/okhttp3/Call.java, + * failure exception. If you {@link #cancel} a request before it completes the callback will not, + * be invoked., +++ b/pom.xml, + <airlift.version>0.7</airlift.version>]
[+++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName(null);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/benchmarks/pom.xml, + <version>3.9.0</version>, +++ b/benchmarks/pom.xml, + <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.0</version>, +++ b/benchmarks/pom.xml, + <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.0</version>, +++ b/okcurl/pom.xml, + <version>3.9.0</version>, +++ b/benchmarks/pom.xml, + <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.0</version>, +++ b/okcurl/pom.xml, + <version>3.9.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.9.0</version>, +++ b/benchmarks/pom.xml, + <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.0</version>, +++ b/okcurl/pom.xml, + <version>3.9.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.9.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.9.0</version>, +++ b/benchmarks/pom.xml, + <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.0</version>, +++ b/okcurl/pom.xml, + <version>3.9.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.9.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.9.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.9.0</version>, +++ b/benchmarks/pom.xml, + <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.9.0</version>, +++ b/okcurl/pom.xml, + <version>3.9.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/.buildscript/deploy_snapshot.sh, + echo "TODO: fix snapshot deployment for gradle...", + # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/deploy_snapshot.sh, + echo "TODO: fix snapshot deployment for gradle...", + # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, + <servers>, + <server>, + <id>sonatype-nexus-snapshots</id>, + <username>${env.CI_DEPLOY_USERNAME}</username>, + <password>${env.CI_DEPLOY_PASSWORD}</password>, + </server>, + </servers>, +</settings>, +++ b/.buildscript/deploy_snapshot.sh, + echo "TODO: fix snapshot deployment for gradle...", + # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, + <servers>, + <server>, + <id>sonatype-nexus-snapshots</id>, + <username>${env.CI_DEPLOY_USERNAME}</username>, + <password>${env.CI_DEPLOY_PASSWORD}</password>, + </server>, + </servers>, +</settings>, +++ b/.travis.yml, +
[+++ b/benchmarks/pom.xml, + <version>3.1.0</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0</version>, +++ b/okcurl/pom.xml, + <version>3.1.0</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0</version>, +++ b/okcurl/pom.xml, + <version>3.1.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.0</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0</version>, +++ b/okcurl/pom.xml, + <version>3.1.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.1.0</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0</version>, +++ b/okcurl/pom.xml, + <version>3.1.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.1.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.1.0</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0</version>, +++ b/okcurl/pom.xml, + <version>3.1.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/pom.xml, + <consoleOutput>true</consoleOutput>]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.RecordingEventListener.CallEvent;, +import okhttp3.RecordingEventListener.ConnectEnd;, +import okhttp3.RecordingEventListener.ConnectStart;, +import okhttp3.RecordingEventListener.ConnectionAcquired;, +import okhttp3.RecordingEventListener.ConnectionReleased;, +import okhttp3.RecordingEventListener.DnsEnd;, +import okhttp3.RecordingEventListener.DnsStart;, +import okhttp3.RecordingEventListener.FetchEnd;, +import okhttp3.RecordingEventListener.FetchStart;, +import okhttp3.RecordingEventListener.RequestHeadersEnd;, +import okhttp3.RecordingEventListener.RequestHeadersStart;, +import okhttp3.RecordingEventListener.ResponseBodyEnd;, +import okhttp3.RecordingEventListener.ResponseBodyStart;, +import okhttp3.RecordingEventListener.ResponseHeadersEnd;, +import okhttp3.RecordingEventListener.ResponseHeadersStart;, +import okhttp3.RecordingEventListener.SecureConnectEnd;, +import okhttp3.RecordingEventListener.SecureConnectStart;, + // TODO ResponseBodyEnd should not be last event, + List<String> expectedEvents = Arrays.asList("FetchStart",, + "DnsStart", "DnsEnd", "ConnectStart", "ConnectEnd",, + "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, + "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, + "ConnectionReleased", "FetchEnd", "ResponseBodyEnd");, + // TODO ResponseBodyEnd should not be last event, + List<String> expectedEvents = Arrays.asList("FetchStart",, + "DnsStart", "DnsEnd", "ConnectStart", "SecureConnectStart",, + "SecureConnectEnd", "ConnectEnd",, + "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, + "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, + "ConnectionReleased",
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + -
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.tls.HeldCertificate;, +import static java.nio.charset.StandardCharsets.UTF_8;, + connection.getOutputStream().write("ABCDEF".getBytes(UTF_8));, + connection.getOutputStream().write("request".getBytes(UTF_8));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.tls.HeldCertificate;, +import static java.nio.charset.StandardCharsets.UTF_8;, + connection.getOutputStream().write("ABCDEF".getBytes(UTF_8));, + connection.getOutputStream().write("request".getBytes(UTF_8));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, + RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, + Collections.emptyList(), 0, new Buffer(), 0, socket);, + RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, + Collections.emptyList(), 0, new Buffer(), 0, socket);, + RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, + Collections.emptyList(), 0, new Buffer(), 0, socket);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.tls.HeldCertificate;, +import static java.nio.charset.StandardCharsets.UTF_8;, + connection.getOutputStream().write("ABCDEF".getBytes(UTF_8));, + connection.getOutputStream().write("request".getBytes(UTF_8));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, + RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, + Collections.emptyList(), 0, new Buffer(),
[+++ b/README.md, +An HTTP+SPDY client for Android and Java applications., +Download [the latest JAR][1] or grab via Maven:, +Known Issues, +------------, +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [2]: http://developer.android.com/reference/java/net/ProxySelector.html, +++
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, + assertEquals("digest", challenges.get(0).scheme());, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, + try {, + } catch (InterruptedIOException e) {, + throw new SocketTimeoutException(e.getMessage());, + }, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, + try {, + } catch (InterruptedIOException e) {, + throw new SocketTimeoutException(e.getMessage());, + }, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java, +import okio.Pipe;, + initOutputStream(Okio.buffer(pipe.sink()), expectedContentLength);, + while (pipe.source().read(buffer, 8192) != -1L) {, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, + try {, + } catch (InterruptedIOException e) {, + throw new SocketTimeoutException(e.getMessage());, + }, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java, +import okio.Pipe;,
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, + /*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + final @Nullable SSLSocketFactory sslSocketFactory;, + final @Nullable CertificateChainCleaner certificateChainCleaner;, + public Proxy proxy() {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + final @Nullable SSLSocketFactory sslSocketFactory;, + final @Nullable CertificateChainCleaner certificateChainCleaner;, + public Proxy proxy() {, +++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_181</id>, + <activation>, + <jdk>1.8.0_181</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.12.v20180117</alpn.jdk8.version>, + </properties>, + </profile>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import com.google.mockwebserver.RecordedRequest;, +import java.io.ByteArrayInputStream;, +import java.util.Arrays;, +import org.apache.http.entity.ByteArrayEntity;, +import org.apache.http.entity.InputStreamEntity;, +import org.junit.Before;, +import static org.junit.Assert.assertTrue;, + private MockWebServer server;, + private OkApacheClient client;, +, + @Before public void setUp() throws IOException {, + client = new OkApacheClient();, + server = new MockWebServer();, + server.play();, + }, +, + @Test public void postByteEntity() throws Exception {, + server.enqueue(new MockResponse());, +, + final HttpPost post = new HttpPost(server.getUrl("/").toURI());, + byte[] body = "Hello, world!".getBytes("UTF-8");, + post.setEntity(new ByteArrayEntity(body));, + client.execute(post);, +, + RecordedRequest request = server.takeRequest();,
[+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, + Request request1 = new Request.Builder(), + .url("http://" + TestUtil.UNREACHABLE_ADDRESS), +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, + Request request1 = new Request.Builder(), + .url("http://" + TestUtil.UNREACHABLE_ADDRESS), +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.duplex.HeadersListener;, + @Override public void duplex(Request.Builder requestBuilder, String method) {, + requestBuilder.duplex(method);, + }, +, +, + @Override public void headersListener(Response response, HeadersListener headersListener) {, + response.headersListener(headersListener);, + }, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, + Request request1 = new Request.Builder(), + .url("http://" + TestUtil.UNREACHABLE_ADDRESS), +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.duplex.HeadersListener;, + @Override public void duplex(Request.Builder requestBuilder, String method) {, + requestBuilder.duplex(method);, + }, +, +, + @Override public void headersListener(Response response, HeadersListener headersListener) {, + response.headersListener(headersListener);, +
[+++ b/pom.xml]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import org.junit.Rule;, +import org.junit.rules.Timeout;, + @Rule public MockWebServer mockWebServer = new MockWebServer();, + @Rule public Timeout globalTimeout = Timeout.seconds(30);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import org.junit.Rule;, +import org.junit.rules.Timeout;, + @Rule public MockWebServer mockWebServer = new MockWebServer();, + @Rule public Timeout globalTimeout = Timeout.seconds(30);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.rules.Timeout;, + @Rule public Timeout globalTimeout = Timeout.seconds(30);, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import org.junit.Rule;, +import org.junit.rules.Timeout;, + @Rule public MockWebServer mockWebServer = new MockWebServer();, + @Rule public Timeout globalTimeout = Timeout.seconds(30);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.rules.Timeout;, + @Rule public Timeout globalTimeout = Timeout.seconds(30);, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import org.junit.Rule;, +import org.junit.rules.Timeout;, + @Rule public Timeout globalTimeout =
[+++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/mockwebserver/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/mockwebserver/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, + SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), + .handler(spdySocketHandler), + .build();, + HTTP_11, SPDY_3, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/mockwebserver/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, + SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), + .handler(spdySocketHandler), + .build();, + HTTP_11, SPDY_3, +++ b/okhttp-apache/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/mockwebserver/pom.xml, + <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + SpdySocketHandler spdySocketHandler
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, + listener.forbidLock(client.connectionPool());, + listener.forbidLock(client.dispatcher());, + server.enqueue(new MockResponse(), + .setBody("abc"));, + assertEquals("abc", response.body().string());, + List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, + "ConnectionAcquired", "ConnectStart", "ConnectEnd", "RequestHeadersStart",, + "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, + "FetchEnd", "ResponseBodyEnd", "ConnectionReleased");, + server.enqueue(new MockResponse(), + .setBody("abc"));, + assertEquals("abc", response.body().string());, + List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, + "ConnectionAcquired", "ConnectStart", "SecureConnectStart", "SecureConnectEnd",, + "ConnectEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",, + "ResponseHeadersEnd", "ResponseBodyStart", "FetchEnd", "ResponseBodyEnd",, + "ConnectionReleased");, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, + listener.forbidLock(client.connectionPool());, + listener.forbidLock(client.dispatcher());, + server.enqueue(new MockResponse(), + .setBody("abc"));, + assertEquals("abc", response.body().string());, + List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, + "ConnectionAcquired", "ConnectStart", "ConnectEnd", "RequestHeadersStart",, + "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd",
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, + assertThat(elapsedMillis >= 500).overridingErrorMessage(, + Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, + assertThat(elapsedMillis < 1000).overridingErrorMessage(, + Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, + assertThat(elapsedMillis >= 500).overridingErrorMessage(, + Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, + assertThat(elapsedMillis < 1000).overridingErrorMessage(, + Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, + assertThat(elapsedMillis >= 1000).overridingErrorMessage(, + Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, + assertThat(server.getPort() > 0).isTrue();, + assertThat(e.getMessage().contains("refused")).isTrue();, + server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, + server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, + server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, + assertThat(elapsedMillis >= 500).overridingErrorMessage(, + Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, + assertThat(elapsedMillis < 1000).overridingErrorMessage(, + Util.format("Request + Response: %sms", elapsedMillis)).isTrue();,
[+++ b/okhttp-sse/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/okhttp-sse/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + call.timeout().clearTimeout();, +++ b/okhttp-sse/pom.xml, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import java.util.concurrent.TimeUnit;, +import static okhttp3.TestUtil.defaultClient;, + private OkHttpClient client = defaultClient();, + @Test public void callTimeoutIsNotApplied() throws Exception {, + client = client.newBuilder(), + .callTimeout(100, TimeUnit.MILLISECONDS), + .build();, +, + server.enqueue(new MockResponse(), + .setBodyDelay(500, TimeUnit.MILLISECONDS), + .setHeader("content-type", "text/event-stream"), + .setBody("data: hey\n\n"));, +, + EventSource source = newEventSource();, +, + assertEquals("/", source.request().url().encodedPath());, +, +
[+++ b/okhttp-apache/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/okhttp-apache/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.1.1-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, + <version>1.1.1-SNAPSHOT</version>]
[+++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/okhttp-tests/pom.xml, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>logging-interceptor</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-tests/pom.xml, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>logging-interceptor</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.logging.HttpLoggingInterceptor;, + @Test public void successfulCallEventSequenceWithListener() throws IOException {, + server.enqueue(new MockResponse().setBody("abc"));, +, + client = client.newBuilder().addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(, + HttpLoggingInterceptor.Level.BODY)).build();, +, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + Response response = call.execute();, + assertEquals(200, response.code());, + assertEquals("abc", response.body().string());, + response.body().close();, +, + List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, + "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, + "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, + "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, + assertEquals(expectedEvents,
[+++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, + public Builder certificateChain(HeldCertificate serverCert, HeldCertificate... chain) {, + return certificateChain(serverCert.keyPair, serverCert.certificate, certificates);, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, + public Builder certificateChain(HeldCertificate serverCert, HeldCertificate... chain) {, + return certificateChain(serverCert.keyPair, serverCert.certificate, certificates);, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, + public Builder certificateChain(HeldCertificate serverCert, HeldCertificate... chain) {, + return certificateChain(serverCert.keyPair, serverCert.certificate, certificates);, +++ /dev/null, +++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_102</id>, + <activation>, + <jdk>1.8.0_102</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, + </properties>, + </profile>]
[+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + -
[+++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, + /** Returns true if there is a failure that retrying might fix. */, + boolean hasStreamFailure() {, + return hasStreamFailure;, + }, + }, + /** Returns true if a current route is still good or if there are routes we haven't tried yet. */, + boolean hasRouteToTry() {, + synchronized (connectionPool) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, + /** Returns true if there is a failure that retrying might fix. */, + boolean hasStreamFailure() {, + return hasStreamFailure;, + }, + }, + /** Returns true if a current route is still good or if there are routes
[+++ b/README.md, +An HTTP+SPDY client for Android and Java applications., +Download [the latest JAR][1] or grab via Maven:, +Known Issues, +------------, +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [2]: http://developer.android.com/reference/java/net/ProxySelector.html, +++
[+++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, + Internal.instance.setCallWebSocket(call);, + call.enqueue(responseCallback);, +++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, + Internal.instance.setCallWebSocket(call);, + call.enqueue(responseCallback);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +, + @Override public void setCallWebSocket(Call call) {, + ((RealCall) call).setForWebSocket();, + }, +++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, + Internal.instance.setCallWebSocket(call);, + call.enqueue(responseCallback);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +, + @Override public void setCallWebSocket(Call call) {, + ((RealCall) call).setForWebSocket();, + }, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, + private boolean forWebSocket;, + Response result = getResponseWithInterceptorChain();, + synchronized void setForWebSocket() {, + if (executed) throw new IllegalStateException("Already Executed");, + this.forWebSocket = true;, + @Override public void enqueue(Callback responseCallback) {, + client.dispatcher().enqueue(new AsyncCall(responseCallback));, + private AsyncCall(Callback responseCallback) {, + Response response = getResponseWithInterceptorChain();, + private Response getResponseWithInterceptorChain()
[+++ b/okhttp/src/main/java/okhttp3/CipherSuite.java, +import static java.lang.Integer.MAX_VALUE;, +, + // Last updated 2014-11-11 using cipher suites from Android 21 and Java 8., + // public static final CipherSuite TLS_NULL_WITH_NULL_NULL = of("TLS_NULL_WITH_NULL_NULL", 0x0000, 5246, MAX_VALUE, MAX_VALUE);, + public static final CipherSuite TLS_RSA_WITH_NULL_MD5 = of("SSL_RSA_WITH_NULL_MD5", 0x0001, 5246, 6, 10);, + public static final CipherSuite TLS_RSA_WITH_NULL_SHA = of("SSL_RSA_WITH_NULL_SHA", 0x0002, 5246, 6, 10);, + public static final CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 = of("SSL_RSA_EXPORT_WITH_RC4_40_MD5", 0x0003, 4346, 6, 10);, + public static final CipherSuite TLS_RSA_WITH_RC4_128_MD5 = of("SSL_RSA_WITH_RC4_128_MD5", 0x0004, 5246, 6, 10);, + public static final CipherSuite TLS_RSA_WITH_RC4_128_SHA = of("SSL_RSA_WITH_RC4_128_SHA", 0x0005, 5246, 6, 10);, + // public static final CipherSuite
[+++ b/okhttp/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-protocols</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/okhttp/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-protocols</artifactId>, + <version>${project.version}</version>, + </dependency>, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java, + // If delete() fails, make sure it's because the file didn't exist!, + if (!file.delete() && file.exists()) {, + throw new IOException("failed to delete " + file);, + public synchronized long getMaxSize() {, + deleteIfExists(file);]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/OkHeaders.java, + Headers requestHeaders = response.request().headers();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/OkHeaders.java, + Headers requestHeaders = response.request().headers();, +++ b/pom.xml, + <bouncycastle.version>1.50</bouncycastle.version>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, + 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', + };, + } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, + transport = Transport.HTTP_20_DRAFT_06;, + if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, + if (transport == Transport.SPDY_3) {, + } else {, + builder.http20Draft06();, + HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, + 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0',
[+++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union of the acting entity and all, + other entities that control, are controlled by,
[+++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, + <version>3.1.0</version>, + <version>1.5.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, + <version>3.1.0</version>, + <version>1.5.0</version>, + <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.1</version>, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, + <version>3.1.0</version>, + <version>1.5.0</version>, + <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.1</version>, + <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.0.1</version>, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++
[+++ b/build.gradle, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java, +++ b/okhttp/src/test/java/okhttp3/MediaTypeTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call {, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call {, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java, +import okhttp3.MediaType;, + MediaType mediaType = MediaType.parse(contentType);, + if (mediaType == null || !mediaType.subtype().equalsIgnoreCase("html")) {, + response.body().close();, + return;, + }, +]
[+++ b/deploy_website.sh, +#!/bin/bash, +, +set -ex, +, +DIR=temp-clone, +, +# Delete any existing temporary website clone, +rm -rf $DIR, +, +# Clone the current repo into temp folder, +git clone git@github.com:square/okhttp.git $DIR, +, +# Move working directory into temp folder, +cd $DIR, +, +# Checkout and track the gh-pages branch, +git checkout -t origin/gh-pages, +, +# Delete everything, +rm -rf *, +, +# Copy website files from real repo, +cp -R ../website/* ., +, +# Stage all files in git and create a commit, +git add ., +git add -u, +git commit -m "Website at $(date)", +, +# Push
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void mockResponseSetHeaders() {, + MockResponse response = new MockResponse(), + .clearHeaders(), + .addHeader("Cookie: s=square"), + .addHeader("Cookies: delicious");, +, + response.setHeaders(new Headers.Builder().add("Cookie", "a=android").build());, +, + assertEquals(Arrays.asList("Cookie: a=android"), headersToList(response));, + }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, + @Test public void headersToString() {, + Headers headers = new Headers.Builder(), + .add("A", "a"), + .add("B", "bb"), + .build();, + assertEquals("A: a\nB: bb\n", headers.toString());, + }, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, + @Test public void headersToString() {, + Headers headers = new Headers.Builder(), + .add("A", "a"), + .add("B", "bb"), + .build();, + assertEquals("A: a\nB: bb\n", headers.toString());, + }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, + hpackWriter = new Hpack.Writer(bytesOut);, + Hpack.Writer writer = new Hpack.Writer(110, bytesOut);, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, + @Test public void headersToString() {, + Headers headers = new Headers.Builder(), + .add("A", "a"), + .add("B", "bb"), + .build();, + assertEquals("A:
[+++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <bouncycastle.version>1.48</bouncycastle.version>, + <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ b/pom.xml, + <bouncycastle.version>1.48</bouncycastle.version>, + <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <bouncycastle.version>1.48</bouncycastle.version>, + <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <bouncycastle.version>1.48</bouncycastle.version>, + <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <bouncycastle.version>1.48</bouncycastle.version>, + <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <bouncycastle.version>1.48</bouncycastle.version>, + <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, + <bouncycastle.version>1.48</bouncycastle.version>, + <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, + transmitter.acquireConnectionNoEvents(c1);, + assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., + transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, + transmitter.acquireConnectionNoEvents(c1);, + assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., + transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, + @Override public void initExchange(, + Response.Builder responseBuilder, Exchange exchange) {, + responseBuilder.initExchange(exchange);, + }, +, + @Override public @Nullable Exchange exchange(Response response) {, + return response.exchange;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, + transmitter.acquireConnectionNoEvents(c1);, + assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., + transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, + @Override public void initExchange(, + Response.Builder responseBuilder, Exchange exchange) {, + responseBuilder.initExchange(exchange);,
[+++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ /dev/null, +++
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + .addHeader("Cache-Control", "immutable"), + .addHeader("Cache-Control", "immutable"), +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + .addHeader("Cache-Control", "immutable"), + .addHeader("Cache-Control", "immutable"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + .authenticator(new RecordingOkAuthenticator(credential, null)), + .authenticator(new RecordingOkAuthenticator(credential, null)), + .authenticator(new RecordingOkAuthenticator(credential, null)), + RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(null, null);, + .authenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret"), null)), + .authenticator(new RecordingOkAuthenticator("password", null)), + .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")), + .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")), + .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")), + .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")), + @Test public void noPreemptiveProxyAuthorization() throws Exception {, + RecordedRequest connect1 = server.takeRequest();, + assertNull(connect1.getHeader("Proxy-Authorization"));, +, + RecordedRequest connect2 = server.takeRequest();, + assertEquals("password", connect2.getHeader("Proxy-Authorization"));, + }, +, + /** Confirm that we can send authentication information without
[+++ b/pom.xml, + <mockwebserver.version>20120905</mockwebserver.version>, +++ b/pom.xml, + <mockwebserver.version>20120905</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/pom.xml, + <mockwebserver.version>20120905</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/src/main/java/libcore/io/StrictLineReader.java, + if (!(charset.equals(Charsets.US_ASCII) || charset.equals(Charsets.UTF_8) ||, + charset.equals(Charsets.ISO_8859_1))) {, +++ b/pom.xml, + <mockwebserver.version>20120905</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/src/main/java/libcore/io/StrictLineReader.java, + if (!(charset.equals(Charsets.US_ASCII) || charset.equals(Charsets.UTF_8) ||, + charset.equals(Charsets.ISO_8859_1))) {, +++ b/src/main/java/libcore/net/http/HttpConnection.java, + inputStream = address.requiresTunnel(), + Proxy proxy, int connectTimeout) throws IOException {, + : new Address(uri, sslSocketFactory, proxy);, + Address address = new Address(uri, sslSocketFactory, selectedProxy);, + public Address(URI uri, SSLSocketFactory sslSocketFactory, Proxy proxy), + throws UnknownHostException {, + && Objects.equal(this.sslSocketFactory, that.sslSocketFactory);, +, + /**, + * Returns true if the HTTP connection
[+++ b/CHANGELOG.md, + `runningCalls()` and `queuedCalls()` methods. You can write code that, + selects calls by tag, host, or whatever, and invokes `Call.cancel()` on the, + ones that are no longer necessary., +++ b/CHANGELOG.md, + `runningCalls()` and `queuedCalls()` methods. You can write code that, + selects calls by tag, host, or whatever, and invokes `Call.cancel()` on the, + ones that are no longer necessary., +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, + return (installedCache.getDirectory().equals(directory), + && installedCache.getMaxSize() == maxSize, + return delegate.getSize();, + return delegate.getMaxSize();, + return delegate.getNetworkCount();, + return delegate.getHitCount();, + return delegate.getRequestCount();, +++ b/CHANGELOG.md, + `runningCalls()` and `queuedCalls()` methods. You can write
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/FaultyFileSystem.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/FaultyFileSystem.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, + Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/FaultyFileSystem.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, + Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, + @Override public Socket deduplicate(, +++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/FaultyFileSystem.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, + Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, + @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.net.Socket;, + public abstract Socket deduplicate(, +++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/FaultyFileSystem.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, + Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, + @Override
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import java.net.SocketTimeoutException;, + } catch (SocketTimeoutException expected) {, + assertEquals("timeout", expected.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import java.net.SocketTimeoutException;, + } catch (SocketTimeoutException expected) {, + assertEquals("timeout", expected.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import java.net.SocketTimeoutException;, + } catch (SocketTimeoutException expected) {, + } catch (SocketTimeoutException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import java.net.SocketTimeoutException;, + } catch (SocketTimeoutException expected) {, + assertEquals("timeout", expected.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import java.net.SocketTimeoutException;, + } catch (SocketTimeoutException expected) {, + } catch (SocketTimeoutException expected) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +import java.net.SocketTimeoutException;, +, + @Override protected IOException newTimeoutException(IOException cause) {, + SocketTimeoutException socketTimeoutException = new SocketTimeoutException("timeout");, + if (cause != null) {, + socketTimeoutException.initCause(cause);, + },
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + // Limit the size of the request body that the server holds in memory to an arbitrary, + // 3.5 MBytes so this test can pass on devices with little memory., + server.setBodyLimit(7 * 512 * 1024);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + // Limit the size of the request body that the server holds in memory to an arbitrary, + // 3.5 MBytes so this test can pass on devices with little memory., + server.setBodyLimit(7 * 512 * 1024);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, + } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, + || responseCode == HttpURLConnection.HTTP_RESET) {, + mockResponse.setBody(""); // We
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, + * is <strong>not</strong> used to indicate not whether this URLConnection is, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, + * is <strong>not</strong> used to indicate not whether this URLConnection is, +++ b/okhttp-ws-tests/fuzzingserver-config.json, +{, + "url": "ws://127.0.0.1:9001",, + "outdir": "./target/fuzzingserver-report",, + "cases": ["*"],, + "exclude-cases": [, + "6.1.1",, + "6.1.2",, + "6.1.3",, + "6.2.1",, + "6.2.2",, + "6.2.3",, + "6.2.4",, + "6.3.1",, + "6.3.2",, + "6.4.1",, + "6.4.2",, + "6.4.3",, + "6.4.4",,
[+++ b/okhttp-dnsoverhttps/README.md, +OkHttp DNS over HTTPS Implementation, +====================================, +, +This module is an experimental implementation of DNS over HTTPS using OkHttp., +API is not considered stable and may change at any time., +++ b/okhttp-dnsoverhttps/README.md, +OkHttp DNS over HTTPS Implementation, +====================================, +, +This module is an experimental implementation of DNS over HTTPS using OkHttp., +API is not considered stable and may change at any time., +++ b/okhttp-dnsoverhttps/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>parent</artifactId>, + <version>3.11.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp-dnsoverhttps</artifactId>, + <name>OkHttp DNS over HTTPS</name>, +, + <dependencies>,
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, + callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, + // Force requests to be executed serially., + okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, + dispatcher.setMaxRequests(1);, + client = client.newBuilder(), + .dispatcher(dispatcher), + .build();, + callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, + callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, + // Force requests to be executed serially., + okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, + dispatcher.setMaxRequests(1);, + client = client.newBuilder(), + .dispatcher(dispatcher), + .build();, + callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, + private static final Dispatcher dispatcher = new Dispatcher();, + .dispatcher(dispatcher), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, + callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + String urlKey = Cache.key(url);, + String urlKey = Cache.key(url);, + String urlKey = Cache.key(url);, + String urlKey = Cache.key(url);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + String urlKey = Cache.key(url);, + String urlKey = Cache.key(url);, + String urlKey = Cache.key(url);, + String urlKey = Cache.key(url);, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + String urlKey = Cache.key(url);, + String urlKey = Cache.key(url);, + String urlKey = Cache.key(url);, + String urlKey = Cache.key(url);, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java,
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(String path, AtomicInteger responseCode) {, + return new Thread(() -> {, + URL url = mockWebServer.url(path).url();, + HttpURLConnection conn;, + } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(String path, AtomicInteger responseCode) {, + return new Thread(() -> {, + URL url = mockWebServer.url(path).url();, + HttpURLConnection conn;, + } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + new Thread(() -> {, + }).start();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(String path, AtomicInteger responseCode) {, + return new Thread(() -> {, + URL url = mockWebServer.url(path).url();, + HttpURLConnection conn;, + } catch (IOException ignored) {,
[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +public final class CookieTest {, + HttpUrl url = HttpUrl.parse("https://example.com/");, + @Test public void idnDomainMatches() throws Exception {, + Cookie cookie = Cookie.parse(HttpUrl.parse("http://☃.net/"), "a=b; domain=☃.net");, + assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, + assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, + assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, + assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, + }, +, + @Test public void punycodeDomainMatches() throws Exception {, + Cookie cookie = Cookie.parse(HttpUrl.parse("http://xn--n3h.net/"), "a=b; domain=xn--n3h.net");, + assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, + assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, + assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, + assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, + }, +, + @Test public void domainMatchesIpAddress() throws Exception {, + HttpUrl urlWithIp = HttpUrl.parse("http://123.45.234.56/");, + assertNull(Cookie.parse(urlWithIp, "a=b; domain=234.56"));, + assertEquals("123.45.234.56", Cookie.parse(urlWithIp, "a=b; domain=123.45.234.56").domain());, + }, +, + @Test public void hostOnly() throws Exception {, + assertTrue(Cookie.parse(url,
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java, + synchronized (connection) { // Multiple application threads may hit this section., + connection.unacknowledgedBytesRead += read;, + if (connection.unacknowledgedBytesRead, + >= connection.okHttpSettings.getInitialWindowSize() / 2) {, + connection.writeWindowUpdateLater(0, connection.unacknowledgedBytesRead);, + connection.unacknowledgedBytesRead = 0;, + }, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java, + synchronized (connection) { // Multiple application threads may hit this section., + connection.unacknowledgedBytesRead += read;, + if (connection.unacknowledgedBytesRead, + >= connection.okHttpSettings.getInitialWindowSize() / 2) {, + connection.writeWindowUpdateLater(0, connection.unacknowledgedBytesRead);, + connection.unacknowledgedBytesRead = 0;, + },
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, + callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, + // Force requests to be executed serially., + okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, + dispatcher.setMaxRequests(1);, + client = client.newBuilder(), + .dispatcher(dispatcher), + .build();, + callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, + callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, + // Force requests to be executed serially., + okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, + dispatcher.setMaxRequests(1);, + client = client.newBuilder(), + .dispatcher(dispatcher), + .build();, + callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, + private static final Dispatcher dispatcher = new Dispatcher();, + .dispatcher(dispatcher), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, + callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, + 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', + };, + } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, + transport = Transport.HTTP_20_DRAFT_09;, + if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, + if (transport == Transport.HTTP_20_DRAFT_09) {, + builder.http20Draft09();, + builder.spdy3();, + HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, + 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', + };,
[+++ b/okhttp/build.gradle, + 'okhttp3.OkHttpClient$Builder#addInterceptor(okhttp3.Interceptor)',, + 'okhttp3.OkHttpClient$Builder#addNetworkInterceptor(okhttp3.Interceptor)',, + 'okhttp3.OkHttpClient$Builder#authenticator(okhttp3.Authenticator)',, + 'okhttp3.OkHttpClient$Builder#build()',, + 'okhttp3.OkHttpClient$Builder#cache(okhttp3.Cache)',, + 'okhttp3.OkHttpClient$Builder#callTimeout(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.OkHttpClient$Builder#callTimeout(java.time.Duration)',, + 'okhttp3.OkHttpClient$Builder#certificatePinner(okhttp3.CertificatePinner)',, + 'okhttp3.OkHttpClient$Builder#connectionPool(okhttp3.ConnectionPool)',, + 'okhttp3.OkHttpClient$Builder#connectionSpecs(java.util.List)',, + 'okhttp3.OkHttpClient$Builder#connectTimeout(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.OkHttpClient$Builder#connectTimeout(java.time.Duration)',, + 'okhttp3.OkHttpClient$Builder#cookieJar(okhttp3.CookieJar)',, + 'okhttp3.OkHttpClient$Builder#dispatcher(okhttp3.Dispatcher)',, + 'okhttp3.OkHttpClient$Builder#dns(okhttp3.Dns)',, + 'okhttp3.OkHttpClient$Builder#eventListener(okhttp3.EventListener)',, + 'okhttp3.OkHttpClient$Builder#eventListenerFactory(okhttp3.EventListener$Factory)',, + 'okhttp3.OkHttpClient$Builder#followRedirects(boolean)',, + 'okhttp3.OkHttpClient$Builder#followSslRedirects(boolean)',, + 'okhttp3.OkHttpClient$Builder#hostnameVerifier(javax.net.ssl.HostnameVerifier)',, + 'okhttp3.OkHttpClient$Builder#interceptors()',, + 'okhttp3.OkHttpClient$Builder#networkInterceptors()',, + 'okhttp3.OkHttpClient$Builder#pingInterval(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.OkHttpClient$Builder#pingInterval(java.time.Duration)',, + 'okhttp3.OkHttpClient$Builder#protocols(java.util.List)',, + 'okhttp3.OkHttpClient$Builder#proxy(java.net.Proxy)',, + 'okhttp3.OkHttpClient$Builder#proxyAuthenticator(okhttp3.Authenticator)',, + 'okhttp3.OkHttpClient$Builder#proxySelector(java.net.ProxySelector)',, + 'okhttp3.OkHttpClient$Builder#readTimeout(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.OkHttpClient$Builder#readTimeout(java.time.Duration)',, + 'okhttp3.OkHttpClient$Builder#retryOnConnectionFailure(boolean)',, + 'okhttp3.OkHttpClient$Builder#socketFactory(javax.net.SocketFactory)',, + 'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory)',, + 'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory, javax.net.ssl.X509TrustManager)',, + 'okhttp3.OkHttpClient$Builder#writeTimeout(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.OkHttpClient$Builder#writeTimeout(java.time.Duration)',, +++ b/okhttp/build.gradle, + 'okhttp3.OkHttpClient$Builder#addInterceptor(okhttp3.Interceptor)',, + 'okhttp3.OkHttpClient$Builder#addNetworkInterceptor(okhttp3.Interceptor)',, + 'okhttp3.OkHttpClient$Builder#authenticator(okhttp3.Authenticator)',, + 'okhttp3.OkHttpClient$Builder#build()',, + 'okhttp3.OkHttpClient$Builder#cache(okhttp3.Cache)',, + 'okhttp3.OkHttpClient$Builder#callTimeout(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.OkHttpClient$Builder#callTimeout(java.time.Duration)',, + 'okhttp3.OkHttpClient$Builder#certificatePinner(okhttp3.CertificatePinner)',,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/benchmarks/pom.xml, + <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, + <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, + <version>2.4.0-RC1</version>, +++ b/okhttp-testing-support/pom.xml, + <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + private static Logger frameLogger;, + frameLogger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, + frameLogger.setLevel(Level.FINE);, + frameLogger.addHandler(handler);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + private static Logger frameLogger;, + frameLogger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, + frameLogger.setLevel(Level.FINE);, + frameLogger.addHandler(handler);, +++ b/okhttp/src/main/java/okhttp3/internal/Platform.java]
[+++ b/fuzzing/fuzzingserver-config.json, +{, + "url": "ws://127.0.0.1:9099",, + "outdir": "./target/fuzzingserver-report",, + "cases": ["*"],, + "exclude-cases": [, + "6.1.1",, + "6.1.2",, + "6.1.3",, + "6.2.1",, + "6.2.2",, + "6.2.3",, + "6.2.4",, + "6.3.1",, + "6.3.2",, + "6.4.1",, + "6.4.2",, + "6.4.3",, + "6.4.4",, + "6.5.1",, + "6.5.2",, + "6.5.3",, + "6.5.4",, + "6.5.5",, + "6.6.1",, + "6.6.2",, + "6.6.3",, + "6.6.4",, + "6.6.5",, + "6.6.6",, + "6.6.7",, + "6.6.8",, + "6.6.9",, + "6.6.10",, + "6.6.11",, + "6.7.1",, + "6.7.2",, + "6.7.3",, + "6.7.4",, + "6.8.1",, + "6.8.2",, + "6.9.1",, + "6.9.2",, + "6.9.3",, + "6.9.4",, + "6.10.1",, + "6.10.2",, + "6.10.3",,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, + if (response.getSocketPolicy() == DISCONNECT_AT_END) {, + Http2Connection connection = stream.getConnection();, + connection.shutdown(ErrorCode.NO_ERROR);, + }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, + if (response.getSocketPolicy() == DISCONNECT_AT_END) {, + Http2Connection connection = stream.getConnection();, + connection.shutdown(ErrorCode.NO_ERROR);, + }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, + * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, + * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, + * frame</a> immediately after the response and will close the connection when the client's socket, + * is exhausted., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, + if (response.getSocketPolicy() == DISCONNECT_AT_END) {, + Http2Connection connection = stream.getConnection();, + connection.shutdown(ErrorCode.NO_ERROR);, +
[+++ b/CHANGELOG.md, +## Version 2.5.0, +, +_2015-08-25_, +, + * **Timeouts now default to 10 seconds.** Previously we defaulted to never, + timing out, and that was a lousy policy. If establishing a connection,, + reading the next byte from a connection, or writing the next byte to a, + connection takes more than 10 seconds to complete, you’ll need to adjust, + the timeouts manually., +, + * **OkHttp now rejects request headers that contain invalid characters.** This, + includes potential security problems (newline characters) as well as simple, + non-ASCII characters (including international characters and emoji)., +,
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, + assertEquals("timeout", e.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, + assertEquals("timeout", e.getMessage());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, + assertEquals("timeout", e.getMessage());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import java.net.ProxySelector;, +import java.net.SocketAddress;, + private final FakeProxySelector proxySelector = new FakeProxySelector();, +, + private static class FakeProxySelector extends ProxySelector {, + List<URI> requestedUris =
[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import okhttp3.internal.http.AuthenticatorAdapter;, + private Authenticator authenticator = AuthenticatorAdapter.INSTANCE;, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import okhttp3.internal.http.AuthenticatorAdapter;, + private Authenticator authenticator = AuthenticatorAdapter.INSTANCE;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +public final class CookieTest {, + HttpUrl url = HttpUrl.parse("https://example.com/");, + @Test public void idnDomainMatches() throws Exception {, + Cookie cookie = Cookie.parse(HttpUrl.parse("http://☃.net/"), "a=b; domain=☃.net");, + assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, + assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, + assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, + assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, + }, +, + @Test public void punycodeDomainMatches() throws Exception {, + Cookie cookie = Cookie.parse(HttpUrl.parse("http://xn--n3h.net/"), "a=b; domain=xn--n3h.net");, + assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, + assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, + assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, + assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, + }, +, + @Test public void domainMatchesIpAddress() throws Exception {, + HttpUrl urlWithIp = HttpUrl.parse("http://123.45.234.56/");, + assertNull(Cookie.parse(urlWithIp,
[+++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, + @Test public void applicationInterceptorResponseMustHaveBody() throws Exception {, + server.enqueue(new MockResponse());, +, + Interceptor interceptor = new Interceptor() {, + @Override public Response intercept(Chain chain) throws IOException {, + return chain.proceed(chain.request()).newBuilder().body(null).build();, + }, + };, + client = client.newBuilder(), + .addInterceptor(interceptor), + .build();, +, + Request request = new Request.Builder(), + .url(server.url("/")), + .build();, + try {, + client.newCall(request).execute();, + fail();, + } catch (IllegalStateException expected) {, + assertEquals("interceptor " + interceptor + " returned a response with no body",, + expected.getMessage());, + }, + }, +, + @Test public void networkInterceptorResponseMustHaveBody() throws Exception {, + server.enqueue(new
[+++ b/CHANGELOG.md, +## Version 3.3.1, +, +_2016-05-28_, +, + * Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified, + newline characters as control characters. This is fixed., + * Fix: Don't crash reading non-ASCII characters in HTTP/2 headers or in cached, + HTTP headers., + * Fix: Retain the response body when an attempt to open a web socket returns a, + non-101 response code., +, +, +## Version 3.3.0, +, +_2016-05-24_, +, + * New: `Response.sentRequestAtMillis()` and `receivedResponseAtMillis()`, + methods track the system's local time when network calls are made. These, + replace the `OkHttp-Sent-Millis` and `OkHttp-Received-Millis` headers
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Buffer buffer = source.getBuffer();, + try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Buffer buffer = source.getBuffer();, + try
[+++ b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java, +import java.util.Arrays;, + public void check(String hostname, List<Certificate> peerCertificates), + for (int i = 0, size = peerCertificates.size(); i < size; i++) {, + X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, + for (int i = 0, size = peerCertificates.size(); i < size; i++) {, + X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, + for (int i = 0, size = pins.size(); i < size; i++) {, + ByteString pin = pins.get(i);, + /** @deprecated replaced with {@link #check(String, List)}. */, + public void check(String hostname, Certificate... peerCertificates), + throws SSLPeerUnverifiedException {, + check(hostname, Arrays.asList(peerCertificates));, + }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java, +import
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import okhttp3.internal.tls.SslClient;, +import okhttp3.mockwebserver.SocketPolicy;, +import static org.junit.Assert.assertNotNull;, + private final SslClient sslClient = SslClient.localhost();, + @Test public void successfulCallEventSequence() throws IOException {, + server.enqueue(new MockResponse());, +, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + Response response = call.execute();, + assertEquals(200, response.code());, + response.body().close();, +, + List<Class<?>> expectedEvents = Arrays.asList(DnsStart.class, DnsEnd.class);, + assertEquals(expectedEvents, listener.recordedEventTypes());, + }, +, + @Test public void successfulHttpsCallEventSequence() throws IOException {, + enableTls(false);, + server.enqueue(new MockResponse());, +, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + Response response = call.execute();, + assertEquals(200, response.code());, + response.body().close();,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/COPYING, +, + Apache License, + Version 2.0, January 2004,
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, + hpackWriter = new Hpack.Writer(4096, false, bytesOut);, + Hpack.Writer writer = new Hpack.Writer(110, false, bytesOut);, + @Test public void huffmanEncode() throws IOException {, + hpackWriter = new Hpack.Writer(4096, true, bytesOut);, + hpackWriter.writeHeaders(headerEntries("foo", "bar"));, +, + ByteString expected = new Buffer(), + .writeByte(0x40) // Literal header, new name., + .writeByte(0x82) // String literal is Huffman encoded (len = 2)., + .writeByte(0x94) // 'foo' Huffman encoded., + .writeByte(0xE7), + .writeByte(3) // String literal not Huffman encoded (len = 3)., + .writeByte('b'), + .writeByte('a'), + .writeByte('r'), + .readByteString();, +, + ByteString actual = bytesOut.readByteString();, + assertEquals(expected, actual);, + }, +,
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, + private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, + <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, + private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, + private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++
[+++ b/checkstyle.xml, + <module name="NeedBraces"/>
[+++ b/okhttp/pom.xml, +, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-assembly-plugin</artifactId>, + <configuration>, + <descriptorRefs>, + <descriptorRef>jar-with-dependencies</descriptorRef>, + </descriptorRefs>, + </configuration>, + <executions>, + <execution>, + <phase>package</phase>, + <goals>, + <goal>single</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, +++ b/okhttp/pom.xml, +, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-assembly-plugin</artifactId>, + <configuration>, + <descriptorRefs>, + <descriptorRef>jar-with-dependencies</descriptorRef>, + </descriptorRefs>, + </configuration>, + <executions>, + <execution>, + <phase>package</phase>, + <goals>, + <goal>single</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/DelegatingHttpsURLConnection.java, +/*, + * Licensed to the Apache Software Foundation (ASF) under one or more, + * contributor license agreements. See the NOTICE file
[+++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_121</id>, + <activation>, + <jdk>1.8.0_121</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, + </properties>, + </profile>]
[+++ b/build.xml, + <target name="docs">, + <mkdir dir="build/api"/>, + <javadoc destdir="build/api" windowtitle="MockWebServer" source="1.6">, + <packageset dir="src/main/java"/>, + </javadoc>, + </target>, +, +++ b/build.xml, + <target name="docs">, + <mkdir dir="build/api"/>, + <javadoc destdir="build/api" windowtitle="MockWebServer" source="1.6">, + <packageset dir="src/main/java"/>, + </javadoc>, + </target>, +, +++ b/javadoc/allclasses-frame.html, +<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">, +<!--NewPage-->, +<HTML>, +<HEAD>, +<!-- Generated by javadoc (build 1.6.0_24) on Tue May 24 23:30:28 PDT 2011 -->, +<TITLE>, +All Classes (MockWebServer), +</TITLE>, +, +<META NAME="date" CONTENT="2011-05-24">, +, +<LINK REL ="stylesheet" TYPE="text/css" HREF="stylesheet.css" TITLE="Style">, +, +, +</HEAD>, +, +<BODY BGCOLOR="white">, +<FONT size="+1" CLASS="FrameHeadingFont">, +<B>All Classes</B></FONT>, +<BR>, +, +<TABLE
[+++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +import okhttp3.internal.connection.RealConnectionPool;, + public final RealConnectionPool connectionPool;, + this.connectionPool = Internal.instance.realConnectionPool(client.connectionPool());, + public void noNewStreamsOnConnection() {, + connection().noNewStreams();, + public void responseBodyComplete(long bytesRead, IOException e) {, + streamAllocation.responseBodyComplete(bytesRead, e);, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +import okhttp3.internal.connection.RealConnectionPool;, + public final RealConnectionPool connectionPool;, + this.connectionPool = Internal.instance.realConnectionPool(client.connectionPool());, + public void noNewStreamsOnConnection() {, + connection().noNewStreams();, + public void responseBodyComplete(long bytesRead, IOException e) {, + streamAllocation.responseBodyComplete(bytesRead, e);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, + public final RealConnectionPool connectionPool;, + /**, + * If true, no new streams can be created on this connection. Once true this is always true., + * Guarded by {@link #connectionPool}., + */, +
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.Buffer;, + result.setChunkedBody(new Buffer().write(body), 1024);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.Buffer;, + result.setChunkedBody(new Buffer().write(body), 1024);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import okio.Buffer;, + private Buffer body;, + setBody(new Buffer());, + public Buffer getBody() {, + return body != null ? body.clone() : null; // Defensive copy., + return bodyStream != null ? bodyStream : getBody().inputStream();, + return setBody(new Buffer().write(body));, + }, +, + public MockResponse setBody(Buffer body) {, + setHeader("Content-Length", body.size());, + this.body = body.clone(); // Defensive copy., + return setBody(new Buffer().writeUtf8(body));, + public MockResponse setChunkedBody(Buffer body, int maxChunkSize) {, + Buffer bytesOut = new Buffer();, + while (!body.exhausted()) {, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import okhttp3.HttpUrl;, + private final HttpUrl requestUrl;, +, + String scheme = socket instanceof SSLSocket ? "https" : "http";, + String hostname = socket.getInetAddress().getHostName();, + int port = socket.getLocalPort();, + this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, + this.requestUrl = null;, + public HttpUrl getRequestUrl() {, + return requestUrl;, + }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import okhttp3.HttpUrl;, + private final HttpUrl requestUrl;, +, + String scheme = socket instanceof SSLSocket ? "https" : "http";, + String hostname = socket.getInetAddress().getHostName();, + int port = socket.getLocalPort();, + this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, + this.requestUrl = null;, + public
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.net.HttpURLConnection;, +import java.util.Arrays;, +import okhttp3.Protocol;, + /**, + * We had a bug where web socket connections were leaked if the HTTP connection upgrade was not, + * successful. This test confirms that connections are released back to the connection pool!, + * https://github.com/square/okhttp/issues/4258, + */, + @Test public void webSocketConnectionIsReleased() throws Exception {, + // This test assumes HTTP/1.1 pooling semantics., + client = client.newBuilder(), + .protocols(Arrays.asList(Protocol.HTTP_1_1)), + .build();, +, + webServer.enqueue(new MockResponse(), + .setResponseCode(HttpURLConnection.HTTP_NOT_FOUND), + .setBody("not found!"));, + webServer.enqueue(new MockResponse());, +, + newWebSocket();, + clientListener.assertFailure();, +, + Request regularRequest = new Request.Builder(), + .url(webServer.url("/")),
[+++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +import okio.ByteString;, + @Override public void onPong(ByteString payload) {, + @Override public void onPong(ByteString payload) {, + @Override public void onPong(ByteString payload) {, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +import okio.ByteString;, + @Override public void onPong(ByteString payload) {, + @Override public void onPong(ByteString payload) {, + @Override public void onPong(ByteString payload) {, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okio.ByteString;, + client.sendPing(ByteString.encodeUtf8("Hello, WebSockets!"));, + clientListener.assertPong(ByteString.encodeUtf8("Hello, WebSockets!"));, + }, +, + @Test public void nullPingPayloadThrows() throws IOException {, + webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, + enqueueClientWebSocket();, +, + WebSocket client = clientListener.assertOpen();, + try {, + client.sendPing(null);, + fail();, + } catch (NullPointerException e) {, + assertEquals("payload == null",
[+++ b/.gitignore, +*.ipr, +*.iws, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, + if (entity != null) {, + // Buffer short, fixed-length request bodies. This costs memory, but permits the request, + // to be transparently retried if there is a connection failure., + }, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, + if (entity != null) {, + // Buffer short, fixed-length request bodies. This costs memory, but permits the request, + // to be transparently retried if there is a connection failure., + }, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import org.apache.http.client.methods.HttpPost;, +, + @Test public void noEntity() throws Exception {, + server.enqueue(new
[+++ b/.travis.yml, + - $HOME/.m2, +++ b/.travis.yml, + - $HOME/.m2, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, + CountDownLatch responseDequeuedLatch = new CountDownLatch(1);, + CountDownLatch requestCanceledLatch = new CountDownLatch(1);, +, + QueueDispatcher dispatcher = new QueueDispatcher() {, + @Override, + public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, + // This guarantees a deterministic sequence when handling the canceled request:, + // 1. Server reads request and dequeues first response, + // 2. Client cancels request, + // 3. Server tries to send response on the canceled stream, + // Otherwise, there is no guarantee for the sequence. For example, the server may use the,
[+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, + Platform.get().configureTrustManager(trustManager), +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, + Platform.get().configureTrustManager(trustManager), +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import okhttp3.internal.platform.Platform;, + return Platform.get().platformTrustManager();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, + Platform.get().configureTrustManager(trustManager), +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import okhttp3.internal.platform.Platform;, + return Platform.get().platformTrustManager();, +++ b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.kt, + * Requires org.conscrypt:conscrypt-openjdk-uber >= 2.1.0 on the classpath., + get() {, + // n.b. We should consider defaulting to OpenJDK 11 trust manager, + // https://groups.google.com/forum/#!topic/conscrypt/3vYzbesjOb4, + return Conscrypt.newProviderBuilder().provideTrustManager(true).build(), + }, +, + // See release notes https://groups.google.com/forum/#!forum/conscrypt, + // for version differences, + override fun getSSLContext(): SSLContext =, + // supports TLSv1.3 by default (version api is >= 1.4.0), +, + override fun platformTrustManager(): X509TrustManager {, + return Conscrypt.getDefaultX509TrustManager(),
[+++ b/.gitignore, +local.properties]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.write(body, body.size());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + Response response = client.newCall(request).execute();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + Response response = client.newCall(request).execute();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + return new String(buffer.readByteString(buffer.size()).toByteArray(),, + body.contentType().charset());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + Response response = client.newCall(request).execute();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + return new String(buffer.readByteString(buffer.size()).toByteArray(),, + body.contentType().charset());, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, + Response okResponse = client.newCall(okRequest).execute();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.write(body, body.size());,
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, + nullSafeImmutableList(localCertificates));, + Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, + nullSafeImmutableList(localCertificates));, + Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, + Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, + Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, + nullSafeImmutableList(localCertificates));, + Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, + Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, + Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, + nullSafeImmutableList(localCertificates));, +
[+++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + processResponse(response);, + }, +, + public void processResponse(Response response) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + processResponse(response);, + }, +, + public void processResponse(Response response) {, +++ b/okhttp-sse/src/main/java/okhttp3/sse/EventSources.java, +import okhttp3.Response;, + public static void processResponse(Response response, EventSourceListener listener) {, + RealEventSource eventSource = new RealEventSource(response.request(), listener);, + eventSource.processResponse(response);, + }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void canRetryNormalRequestBody() throws Exception {, + server.enqueue(new MockResponse(), + .setResponseCode(503), + .setHeader("Retry-After", "0"), + .setBody("please retry"));, + server.enqueue(new MockResponse(), + .setBody("thank you for retrying"));, +, + Request request = new Request.Builder(), + .url(server.url("/")), + .post(new RequestBody() {, + int attempt = 0;, +, + @Override public @Nullable MediaType contentType() {, + return null;, + }, +, + @Override public void writeTo(BufferedSink sink) throws IOException {, + sink.writeUtf8("attempt " + (attempt++));, + }, + }), + .build();, + Response response = client.newCall(request).execute();, + assertEquals(200, response.code());, + assertEquals("thank you for retrying", response.body().string());, +, + assertEquals("attempt 0",
[+++ b/okhttp/pom.xml, + <scope>provided</scope>]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, + transmitter.acquireConnection(c1);, + assertTrue(c1.noNewStreams); // Can't allocate once a leak has been detected., + transmitter.acquireConnection(connection);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, + transmitter.acquireConnection(c1);, + assertTrue(c1.noNewStreams); // Can't allocate once a leak has been detected., + transmitter.acquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, + @Override public Transmitter transmitter(Call call) {, + return ((RealCall) call).transmitter();, + }, +, + @Override public void initDeferredTrailers(, + Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, + responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, + transmitter.acquireConnection(c1);, + assertTrue(c1.noNewStreams); // Can't allocate once a leak has been detected., + transmitter.acquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, + @Override public Transmitter transmitter(Call call) {, + return
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, + try {, + call.execute();, + fail();, + } catch (IllegalStateException expected) {, + assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, + try {, + call.execute();, + fail();, + } catch (IllegalStateException expected) {, + assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, + try {, + call.execute();, + fail();, + } catch (IllegalStateException expected) {, + assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, + try {, + call.execute();, + fail();, + }
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + server.setProtocols(protocols);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + server.setProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, + Platform.get().setProtocols(sslSocket, spdyProtocols);, + String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + server.setProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, + Platform.get().setProtocols(sslSocket, spdyProtocols);, + String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, + * When {@link MockWebServer#setProtocols(java.util.List) protocols}, + * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2}, this attaches a, + * pushed stream to this response., +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + server.setProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, + Platform.get().setProtocols(sslSocket, spdyProtocols);, + String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, + * When {@link MockWebServer#setProtocols(java.util.List) protocols}, + * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2}, this attaches a, + * pushed stream to this response., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + private boolean protocolNegotiationEnabled =
[+++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/AccessHeaders.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/LICENSE.txt, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION,
[+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, + logger.log(Level.INFO, "FramedServer connection failure: " + e);, + logger.log(Level.WARNING, "FramedServer unexpected failure", e);, + @Override public void onStream(final Http2Stream stream) throws IOException {, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, + System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, + logger.log(Level.INFO, "FramedServer connection failure: " + e);, + logger.log(Level.WARNING, "FramedServer unexpected failure", e);, + @Override public void onStream(final Http2Stream stream) throws IOException {, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, + System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, + .listener(framedSocketListener), + /** Processes HTTP requests layered over framed
[+++ b/okhttp-apache/pom.xml, + <version>1.0.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.1</version>, +++ b/okhttp/pom.xml, + <version>1.0.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.1</version>, +++ b/okhttp/pom.xml, + <version>1.0.1</version>, +++ b/pom.xml, + <version>1.0.1</version>, + <tag>parent-1.0.1</tag>, +++ b/okhttp-apache/pom.xml, + <version>1.0.1</version>, +++ b/okhttp/pom.xml, + <version>1.0.1</version>, +++ b/pom.xml, + <version>1.0.1</version>, + <tag>parent-1.0.1</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.1</version>, +++ b/okhttp/pom.xml, + <version>1.0.1</version>, +++ b/pom.xml, + <version>1.0.1</version>, + <tag>parent-1.0.1</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.1</version>, +++ b/samples/pom.xml, + <version>1.0.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.1</version>, +++ b/okhttp/pom.xml, + <version>1.0.1</version>, +++ b/pom.xml, + <version>1.0.1</version>, + <tag>parent-1.0.1</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.1</version>, +++ b/samples/pom.xml, + <version>1.0.1</version>, +++ b/samples/simple-client/pom.xml, + <version>1.0.1</version>]
[+++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, + 1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., + 2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, + 1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., + 2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, + <build>, + <plugins>, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, + this.path = requestLine.substring(methodEnd + 1, pathEnd);, + String hostname = socket.getInetAddress().getHostName();, + int port = socket.getLocalPort();, + this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, + this.path = requestLine.substring(methodEnd + 1, pathEnd);, + String hostname = socket.getInetAddress().getHostName();, + int port = socket.getLocalPort();, + this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, + this.path = requestLine.substring(methodEnd + 1, pathEnd);, + String hostname = socket.getInetAddress().getHostName();, + int port = socket.getLocalPort();, + this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, + Handshake handshake = Handshake.get(, + httpsUrlConnection.getCipherSuite(), nullSafeImmutableList(peerCertificates),, + Handshake handshake = Handshake.get(, + javaSecureCacheResponse.getCipherSuite(), peerCertificates, localCertificates);, + return handshake != null ? handshake.cipherSuite() : null;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, + Handshake handshake = Handshake.get(, + httpsUrlConnection.getCipherSuite(), nullSafeImmutableList(peerCertificates),, + Handshake handshake = Handshake.get(, + javaSecureCacheResponse.getCipherSuite(), peerCertificates, localCertificates);, + return handshake != null ? handshake.cipherSuite() :
[+++ b/.github/CONTRIBUTING.md, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, + <parent>, + <artifactId>parent</artifactId>, + </parent>, +, + <artifactId>okhttp-bom</artifactId>, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, + <parent>, + <artifactId>parent</artifactId>, + </parent>, +, + <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, + <parent>, + <artifactId>parent</artifactId>, + </parent>, +, + <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + /** Replaces all headers with those specified in {@code headers}. */, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, + <parent>, + <artifactId>parent</artifactId>, + </parent>, +, + <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + /** Replaces all headers with those specified in {@code headers}. */, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + writeResponse(stream, response);, + if (!readBody && peek.getSocketPolicy() ==
[+++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, + return equal(this.proxy, that.proxy), + && equal(this.sslSocketFactory, that.sslSocketFactory), + && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, + return equal(this.proxy, that.proxy), + && equal(this.sslSocketFactory, that.sslSocketFactory), + && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Platform;, + if (!connection.isEligibleForRecycling()) {, + IoUtils.closeQuietly(connection);, + continue;, + try {, + Platform.get().tagSocket(connection.getSocket());, + } catch (SocketException e) {, + // When unable to tag, skip recycling and close, + Platform.get().logW("Unable to tagSocket(): " + e);, + IoUtils.closeQuietly(connection);, + continue;, + }, + return connection;, + Platform.get().untagSocket(connection.getSocket());, + Platform.get().logW("Unable to untagSocket(): " + e);, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, + return
[+++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +++ /dev/null, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteDatabase.kt, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required
[+++ b/pom.xml, + <jnr-unixsocket.version>0.19</jnr-unixsocket.version>, + <dependency>, + <groupId>com.github.jnr</groupId>, + <artifactId>jnr-unixsocket</artifactId>, + <version>${jnr-unixsocket.version}</version>, + </dependency>, +++ b/pom.xml, + <jnr-unixsocket.version>0.19</jnr-unixsocket.version>, + <dependency>, + <groupId>com.github.jnr</groupId>, + <artifactId>jnr-unixsocket</artifactId>, + <version>${jnr-unixsocket.version}</version>, + </dependency>, +++ b/samples/pom.xml, + <module>unixdomainsockets</module>, +++ b/pom.xml, + <jnr-unixsocket.version>0.19</jnr-unixsocket.version>, + <dependency>, + <groupId>com.github.jnr</groupId>, + <artifactId>jnr-unixsocket</artifactId>, + <version>${jnr-unixsocket.version}</version>, + </dependency>, +++ b/samples/pom.xml, + <module>unixdomainsockets</module>, +++ b/samples/unixdomainsockets/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp3.sample</groupId>, + <artifactId>sample-parent</artifactId>, + <version>3.11.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>unixdomainsockets</artifactId>, + <name>Sample: UNIX domain sockets</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>okhttp</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp3</groupId>,
[+++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_141</id>, + <activation>, + <jdk>1.8.0_141</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, + </properties>, + </profile>, + <profile>, + <id>alpn-when-jdk8_144</id>, + <activation>, + <jdk>1.8.0_144</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, + </properties>, + </profile>]
[+++ b/src/main/java/com/squareup/okhttp/Connection.java, +import com.squareup.okhttp.internal.http.HttpAuthenticator;, +import com.squareup.okhttp.internal.http.HttpEngine;, +import com.squareup.okhttp.internal.http.HttpTransport;, +import com.squareup.okhttp.internal.http.RawHeaders;, +import com.squareup.okhttp.internal.http.SpdyTransport;, +import com.squareup.okhttp.internal.spdy.SpdyConnection;, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +import com.squareup.okhttp.internal.http.HttpAuthenticator;, +import com.squareup.okhttp.internal.http.HttpEngine;, +import com.squareup.okhttp.internal.http.HttpTransport;, +import com.squareup.okhttp.internal.http.RawHeaders;, +import com.squareup.okhttp.internal.http.SpdyTransport;, +import com.squareup.okhttp.internal.spdy.SpdyConnection;, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Util;, + Util.closeQuietly(connection);, + Util.closeQuietly(connection);, + Util.closeQuietly(connection);, + Util.closeQuietly(connection);, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +import com.squareup.okhttp.internal.http.HttpAuthenticator;, +import com.squareup.okhttp.internal.http.HttpEngine;, +import com.squareup.okhttp.internal.http.HttpTransport;, +import com.squareup.okhttp.internal.http.RawHeaders;, +import com.squareup.okhttp.internal.http.SpdyTransport;, +import com.squareup.okhttp.internal.spdy.SpdyConnection;, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Util;, + Util.closeQuietly(connection);, + Util.closeQuietly(connection);, + Util.closeQuietly(connection);, + Util.closeQuietly(connection);, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +import com.squareup.okhttp.internal.http.HttpAuthenticator;, +import com.squareup.okhttp.internal.http.HttpEngine;, +import com.squareup.okhttp.internal.http.HttpTransport;, +import com.squareup.okhttp.internal.http.RawHeaders;, +import com.squareup.okhttp.internal.http.SpdyTransport;, +import com.squareup.okhttp.internal.spdy.SpdyConnection;, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Util;, + Util.closeQuietly(connection);, + Util.closeQuietly(connection);, + Util.closeQuietly(connection);, + Util.closeQuietly(connection);, +++
[+++ b/CHANGELOG.md, + charset for the remaining bytes. Most applications should not need a byte order mark., + * New: Update HTTP/2 support to `h2-16` and `hpack-10`., +++ b/CHANGELOG.md, + charset for the remaining bytes. Most applications should not need a byte order mark., + * New: Update HTTP/2 support to `h2-16` and `hpack-10`., +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, + // receiving a window update on the connection will unblock new streams., +++ b/CHANGELOG.md, + charset for the remaining bytes. Most applications should not need a byte order mark., + * New: Update HTTP/2 support to `h2-16` and `hpack-10`., +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +
[+++ b/okhttp/pom.xml]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void successfulExpectContinuePermitsConnectionReuse() throws Exception {, + executeSynchronously(new Request.Builder(), + .url(server.url("/")), + .header("Expect", "100-continue"), + .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), + .build());, + executeSynchronously(new Request.Builder(), + .url(server.url("/")), + .build());, + @Test public void successfulExpectContinuePermitsConnectionReuseWithHttp2() throws Exception {, + enableProtocol(Protocol.HTTP_2);, + successfulExpectContinuePermitsConnectionReuse();, + }, +, + @Test public void unsuccessfulExpectContinuePreventsConnectionReuse() throws Exception {, + executeSynchronously(new Request.Builder(), + .url(server.url("/")), + .header("Expect", "100-continue"), + .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), + .build());, + executeSynchronously(new Request.Builder(), + .url(server.url("/")), + .build());, +, + assertEquals(0, server.takeRequest().getSequenceNumber());, + assertEquals(0, server.takeRequest().getSequenceNumber());, + }, +, + @Test public void unsuccessfulExpectContinuePermitsConnectionReuseWithHttp2() throws Exception {, + enableProtocol(Protocol.HTTP_2);, +, + server.enqueue(new MockResponse());, + server.enqueue(new
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, + 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', + };, + } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, + transport = Transport.HTTP_20_DRAFT_09;, + if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, + if (transport == Transport.HTTP_20_DRAFT_09) {, + builder.http20Draft09();, + builder.spdy3();, + HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, + 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', + };,
[+++ b/mockwebserver/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +
[+++ b/build.gradle, + id 'me.champeau.gradle.japicmp' version '0.2.6', +, +/**, + * Returns a .jar file for the golden version of this project., + * https://github.com/Visistema/Groovy1/blob/ba5eb9b2f19ca0cc8927359ce414c4e1974b7016/gradle/binarycompatibility.gradle#L48, + */, +ext.baselineJar = { project, version ->, + def group = project.property("GROUP"), + def artifactId = project.property("POM_ARTIFACT_ID"), + try {, + String jarFile = "$artifactId-${version}.jar", + project.group = 'virtual_group_for_japicmp' // Prevent it from resolving the current version., + def dependency = project.dependencies.create("$group:$artifactId:$version@jar"), + return project.configurations.detachedConfiguration(dependency).files, + .find { (it.name == jarFile) }, + } finally {, + project.group = group, + }, +}, +ext.baselineVersion = "3.14.0", +++ b/build.gradle, + id 'me.champeau.gradle.japicmp' version '0.2.6',
[+++ b/benchmarks/pom.xml, + <version>2.2.0</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0</version>, +++ b/okcurl/pom.xml, + <version>2.2.0</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0</version>, +++ b/okcurl/pom.xml, + <version>2.2.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.2.0</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0</version>, +++ b/okcurl/pom.xml, + <version>2.2.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.2.0</version>, +++ b/okhttp-tests/pom.xml, + <version>2.2.0</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0</version>, +++ b/okcurl/pom.xml, + <version>2.2.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.2.0</version>, +++ b/okhttp-tests/pom.xml, + <version>2.2.0</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.2.0</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0</version>, +++ b/okcurl/pom.xml, + <version>2.2.0</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/.travis.yml, + - ./mvnw dependency:resolve -B, + - ./mvnw checkstyle:check -B, + - ./mvnw test -B, + - ./mvnw javadoc:jar source:jar -B, +++ b/.travis.yml, + - ./mvnw dependency:resolve -B, + - ./mvnw checkstyle:check -B, + - ./mvnw test -B, + - ./mvnw javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_RELEASE TBD_, +++ b/.travis.yml, + - ./mvnw dependency:resolve -B, + - ./mvnw checkstyle:check -B, + - ./mvnw test -B, + - ./mvnw javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_RELEASE TBD_, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.13.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.13.1"), +++ b/.travis.yml, + - ./mvnw dependency:resolve -B, + - ./mvnw checkstyle:check -B, + - ./mvnw test -B, +
[+++ b/mockwebserver/pom.xml, + <dependency>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/mockwebserver/pom.xml, + <dependency>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import static org.assertj.core.api.Assertions.assertThat;, + assertThat(requestsMade.size()).isEqualTo(0);, + assertThat(requestsMade.size()).isEqualTo(1);, + // First response is still waiting., + assertThat(firstResponseCode.get()).isEqualTo(0);, + // Second response is done., + assertThat(secondResponseCode.get()).isEqualTo(200);, + // And now it's done!, + assertThat(firstResponseCode.get()).isEqualTo(200);, + // (Still done)., + assertThat(secondResponseCode.get()).isEqualTo(200);, +++ b/mockwebserver/pom.xml, + <dependency>, + <groupId>org.assertj</groupId>, + <artifactId>assertj-core</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import static org.assertj.core.api.Assertions.assertThat;, + assertThat(requestsMade.size()).isEqualTo(0);, + assertThat(requestsMade.size()).isEqualTo(1);, + // First response is still waiting., + assertThat(firstResponseCode.get()).isEqualTo(0);, + // Second response is
[+++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_191</id>, + <activation>, + <jdk>1.8.0_191</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.13.v20181017</alpn.jdk8.version>, + </properties>, + </profile>, + <profile>, + <id>alpn-when-jdk8_192</id>, + <activation>, + <jdk>1.8.0_192</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.13.v20181017</alpn.jdk8.version>, + </properties>, + </profile>]
[+++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java, + try (Response response = client.newCall(request).execute()) {, + String responseSource = response.networkResponse() != null ? ("(network: ", + + response.networkResponse().code(), + + " over ", + + response.protocol(), + + ")") : "(cache)";, + }, +++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java, + try (Response response = client.newCall(request).execute()) {, + String responseSource = response.networkResponse() != null ? ("(network: ", + + response.networkResponse().code(), + + " over ", + + response.protocol(), + + ")") : "(cache)";, + }, +++ b/samples/simple-client/src/main/java/okhttp3/sample/OkHttpContributors.java, + try (Response response = client.newCall(request).execute()) {, + }]
[+++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java, + result.add(buildChantra(client));]
[+++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp/src/main/java/okhttp3/internal/duplex/DuplexRequestBody.java, + pipe.fold(requestBodyOut);, +++ b/okhttp/src/main/java/okhttp3/internal/duplex/DuplexRequestBody.java, + pipe.fold(requestBodyOut);, +++ b/pom.xml, + <okio.version>1.17.1</okio.version>]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + SSLContext context = Platform.get().newSSLContext();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + SSLContext context = Platform.get().newSSLContext();, +++ b/okhttp-tls/build.gradle, + packageExcludes = [, + 'okhttp3.tls.internal',, + ], + methodExcludes = [, + // Became 'final' in 4.0.0:, + 'okhttp3.tls.HandshakeCertificates#keyManager()',, + 'okhttp3.tls.HandshakeCertificates#sslContext()',, + 'okhttp3.tls.HandshakeCertificates#sslSocketFactory()',, + 'okhttp3.tls.HandshakeCertificates#trustManager()',, + 'okhttp3.tls.HandshakeCertificates$Builder#addPlatformTrustedCertificates()',, + 'okhttp3.tls.HandshakeCertificates$Builder#addTrustedCertificate(java.security.cert.X509Certificate)',, + 'okhttp3.tls.HandshakeCertificates$Builder#build()',, + 'okhttp3.tls.HandshakeCertificates$Builder#heldCertificate(okhttp3.tls.HeldCertificate, java.security.cert.X509Certificate\\[\\])',, + 'okhttp3.tls.HeldCertificate#certificate()',, + 'okhttp3.tls.HeldCertificate#certificatePem()',, + 'okhttp3.tls.HeldCertificate#keyPair()',, + 'okhttp3.tls.HeldCertificate#privateKeyPkcs1Pem()',, + 'okhttp3.tls.HeldCertificate#privateKeyPkcs8Pem()',, + 'okhttp3.tls.HeldCertificate$Builder#addSubjectAlternativeName(java.lang.String)',, + 'okhttp3.tls.HeldCertificate$Builder#build()',, + 'okhttp3.tls.HeldCertificate$Builder#certificateAuthority(int)',, + 'okhttp3.tls.HeldCertificate$Builder#commonName(java.lang.String)',, + 'okhttp3.tls.HeldCertificate$Builder#duration(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.tls.HeldCertificate$Builder#ecdsa256()',, + 'okhttp3.tls.HeldCertificate$Builder#keyPair(java.security.KeyPair)',, + 'okhttp3.tls.HeldCertificate$Builder#keyPair(java.security.PublicKey, java.security.PrivateKey)',, + 'okhttp3.tls.HeldCertificate$Builder#organizationalUnit(java.lang.String)',, + 'okhttp3.tls.HeldCertificate$Builder#rsa2048()',, + 'okhttp3.tls.HeldCertificate$Builder#serialNumber(java.math.BigInteger)',, + 'okhttp3.tls.HeldCertificate$Builder#serialNumber(long)',, + 'okhttp3.tls.HeldCertificate$Builder#signedBy(okhttp3.tls.HeldCertificate)',, + 'okhttp3.tls.HeldCertificate$Builder#validityInterval(long, long)',, + ], +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + SSLContext context
[+++ b/.travis.yml, +, +addons:, + apt:, + packages:, + - oracle-java8-installer, +++ b/.travis.yml, +, +addons:, + apt:, + packages:, + - oracle-java8-installer, +++ b/pom.xml, + <!-- ALPN library targeted to Java 8 update 71 - 74 -->, + <alpn.jdk8.version>8.1.7.v20160121</alpn.jdk8.version>, + <profile>, + <id>jdk9</id>, + <activation>, + <jdk>9</jdk>, + </activation>, + <!-- Not currently used, but visible in Intellij etc -->, + </profile>]
[+++ b/benchmarks/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/README.md, +Download [the latest JAR][1] or grab via Maven:, + <groupId>com.squareup.okhttp</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses, +[Jetty-NPN][3] which requires OpenJDK
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, + /**, + * Release any resources held by this dispatcher. Any requests that are currently being dispatched, + * should return immediately. Responses returned after shutdown will not be transmitted: their, + * socket connections have already been closed., + */, + public void shutdown() {, + }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, + /**, + * Release any resources held by this dispatcher. Any requests that are currently being dispatched, + * should return immediately. Responses returned after shutdown will not be transmitted: their, + * socket connections have already been closed., + */, + public
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, + @Test public void testIpv6() throws UnknownHostException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, + @Test public void testIpv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, + assertEquals("192.168.1.254", parse("http://[::ffff:c0a8:1fe]/").host());, + @Test public void hostIpv6Builder() throws Exception {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, + @Test public void testIpv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, + assertEquals("192.168.1.254", parse("http://[::ffff:c0a8:1fe]/").host());, + @Test public void hostIpv6Builder() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java, + SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, + ConnectionSpec sslV3 =, + new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), + TlsVersion[] enabledSocketTlsVersions = {TlsVersion.TLS_1_1, TlsVersion.TLS_1_0};, + assertEnabledProtocols(socket, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, + assertEnabledProtocols(socket, TlsVersion.TLS_1_0);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, + @Test public void testIpv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, + assertEquals("192.168.1.254", parse("http://[::ffff:c0a8:1fe]/").host());,
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, + StreamAllocation streamAllocation = new StreamAllocation(pool, addressA, null,, + EventListener.NONE, null);, + StreamAllocation leak = new StreamAllocation(pool, connection.route().address(), null,, + EventListener.NONE, null);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, + StreamAllocation streamAllocation = new StreamAllocation(pool, addressA, null,, + EventListener.NONE, null);, + StreamAllocation leak = new StreamAllocation(pool, connection.route().address(), null,, + EventListener.NONE, null);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, +
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.WebSocketListener;, +++ b/okhttp-tests/fuzzingserver-config.json, +{, + "url": "ws://127.0.0.1:9001",, + "outdir": "./target/fuzzingserver-report",, + "cases": ["*"],, + "exclude-cases": [, + "6.1.1",, + "6.1.2",, + "6.1.3",, + "6.2.1",, + "6.2.2",, + "6.2.3",, + "6.2.4",, + "6.3.1",, + "6.3.2",, + "6.4.1",, + "6.4.2",, + "6.4.3",, + "6.4.4",, + "6.5.1",, + "6.5.2",, + "6.5.3",, + "6.5.4",, + "6.5.5",, + "6.6.1",, + "6.6.2",, + "6.6.3",, + "6.6.4",, + "6.6.5",, + "6.6.6",, + "6.6.7",, + "6.6.8",, + "6.6.9",, + "6.6.10",,
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + Source source = Okio.source(file);, + try {, + BufferedSink out = Okio.buffer(stream.getSink());, + out.writeAll(source);, + out.close();, + } finally {, + Util.closeQuietly(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + Source source = Okio.source(file);, + try {, + BufferedSink out = Okio.buffer(stream.getSink());, + out.writeAll(source);, + out.close();, + } finally {, + Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.buffer(), source.buffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + Source source = Okio.source(file);, + try {, + BufferedSink out = Okio.buffer(stream.getSink());, + out.writeAll(source);, + out.close();, + } finally {, + Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Buffer buffer = source.buffer();, + GzipSource gzippedResponseBody = null;, + try
[+++ b/checkstyle.xml, + <module name="MethodLength"/>
[+++ b/benchmarks/pom.xml, + <version>2.4.0</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0</version>, +++ b/okcurl/pom.xml, + <version>2.4.0</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0</version>, +++ b/okcurl/pom.xml, + <version>2.4.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.4.0</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0</version>, +++ b/okcurl/pom.xml, + <version>2.4.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.4.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.4.0</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0</version>, +++ b/okcurl/pom.xml, + <version>2.4.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.4.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.4.0</version>, +++ b/okhttp-testing-support/pom.xml, + <version>2.4.0</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0</version>, +++ b/okcurl/pom.xml, + <version>2.4.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import java.net.HttpCookie;, +import java.util.ArrayList;, +import java.util.Arrays;, + public void assertCookies(HttpUrl url, String... expectedCookies) throws Exception {, + List<String> actualCookies = new ArrayList<>();, + for (HttpCookie cookie : cookieManager.getCookieStore().get(url.uri())) {, + actualCookies.add(cookie.toString());, + }, + assertEquals(Arrays.asList(expectedCookies), actualCookies);, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import java.net.HttpCookie;, +import java.util.ArrayList;, +import java.util.Arrays;, + public void assertCookies(HttpUrl url, String... expectedCookies) throws Exception {, + List<String> actualCookies = new ArrayList<>();, + for (HttpCookie cookie : cookieManager.getCookieStore().get(url.uri())) {, + actualCookies.add(cookie.toString());, + }, + assertEquals(Arrays.asList(expectedCookies), actualCookies);, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + executeSynchronously("/").assertFailure(IOException.class);, + @Test public void requestHeaderNameWithSpaceForbidden() throws Exception
[+++ b/CHANGELOG.md, +## Version 3.12.2, +, + * Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake., + * Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`, + callback., +, +, +++ b/CHANGELOG.md, +## Version 3.12.2, +, + * Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake., + * Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`, + callback., +, +, +++ b/pom.xml, + <version>8.15</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + private static final List<ConnectionSpec> DEFAULT_CONNECTION_SPECS = Util.immutableList(, + ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, ConnectionSpec.CLEARTEXT);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + private static final List<ConnectionSpec> DEFAULT_CONNECTION_SPECS = Util.immutableList(, + ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, ConnectionSpec.CLEARTEXT);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, + if (route.address().sslSocketFactory() == null) {, + if (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) {, + "CLEARTEXT communication not enabled for client"));, + }, + String host = route.address().url().host();, + if (!Platform.get().isCleartextTrafficPermitted(host)) {, + throw new RouteException(new UnknownServiceException(, + "CLEARTEXT communication to " +
[+++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import okhttp3.CertificatePinner.Pin;, + static String certA1Sha256Pin;, + static String certB1Sha256Pin;, + static String certC1Sha256Pin;, + certA1Sha256Pin = "sha256/" + CertificatePinner.sha256(certA1.certificate).base64();, + certB1Sha256Pin = "sha256/" + CertificatePinner.sha256(certB1.certificate).base64();, + certC1Sha256Pin = "sha256/" + CertificatePinner.sha256(certC1.certificate).base64();, + assertTrue(certA1Sha256Pin.equals(keypairACertificate2Pin));, + assertTrue(certB1Sha256Pin.equals(keypairBCertificate2Pin));, + assertFalse(certA1Sha256Pin.equals(certB1Sha256Pin));, + .add("example.com", certA1Sha256Pin), + .build();, +, + certificatePinner.check("example.com", certA1.certificate);, + }, +, + @Test public void successfulCheckSha1Pin() throws Exception {, + CertificatePinner certificatePinner = new CertificatePinner.Builder(), + .add("example.com", "sha1/" + CertificatePinner.sha1(certA1.certificate).base64()), + .add("example.com", certB1Sha256Pin), + .add("example.com", certA1Sha256Pin), + .add("example.com", certA1Sha256Pin, certB1Sha256Pin), + .add("example.com", certA1Sha256Pin), + .add("www.example.com", certA1Sha256Pin), + .add("*.example.com", certA1Sha256Pin), + .add("*.example.com", certB1Sha256Pin),
[+++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.Util;, + .body(Util.EMPTY_RESPONSE)]
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import java.util.concurrent.atomic.AtomicReference;, + /** Test a previously coalesced connection that's no longer healthy. */, + @Test public void staleCoalescedConnection() throws Exception {, + server.enqueue(new MockResponse().setResponseCode(200));, + server.enqueue(new MockResponse().setResponseCode(200));, +, + final AtomicReference<Connection> connection = new AtomicReference<>();, + client = client.newBuilder(), + .addNetworkInterceptor(new Interceptor() {, + @Override public Response intercept(Chain chain) throws IOException {, + connection.set(chain.connection());, + return chain.proceed(chain.request());, + }, + }), + .build();, + dns.set("san.com", Dns.SYSTEM.lookup(server.getHostName()).subList(0, 1));, +, + assert200Http2Response(execute(url), server.getHostName());, +, + // Simulate a stale connection in the pool., + connection.get().socket().close();, +, + HttpUrl sanUrl = url.newBuilder().host("san.com").build();, + assert200Http2Response(execute(sanUrl), "san.com");, +, + assertEquals(1, client.connectionPool().connectionCount());,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName("localhost");, + // Workaround for bug on Android: closing the input/output streams should close an, + // SSLSocket but does not. https://code.google.com/p/android/issues/detail?id=97564, + socket.close();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + inetAddress = InetAddress.getByName("localhost");, + // Workaround for bug on Android: closing the input/output streams should close an, + // SSLSocket but does not. https://code.google.com/p/android/issues/detail?id=97564, + socket.close();, +++ b/okhttp-android-support/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>2.3.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp-android-support</artifactId>, + <name>OkHttp Android Platform Support</name>, + <description>Classes to support the Android platform's use of
[+++ b/.buildscript/deploy_snapshot.sh, + mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.buildscript/deploy_snapshot.sh, + mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.travis.yml, +script: mvn test javadoc:jar source:jar -B, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import java.io.InterruptedIOException;, +import static org.junit.Assert.assertTrue;, + @Test public void threadIsInterruptedOnFirstRead() {, + Thread.currentThread().interrupt();, + try {, + String result = publicSuffixDatabase.getEffectiveTldPlusOne("squareup.com");, + assertEquals("squareup.com", result);, + } finally {, + assertTrue(Thread.interrupted());, + }, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import java.io.InterruptedIOException;, +import static org.junit.Assert.assertTrue;, + @Test public void threadIsInterruptedOnFirstRead() {, + Thread.currentThread().interrupt();, + try {, + String result = publicSuffixDatabase.getEffectiveTldPlusOne("squareup.com");, + assertEquals("squareup.com", result);, + } finally {, + assertTrue(Thread.interrupted());, + }, + }, +, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +import java.io.InterruptedIOException;, + readTheListUninterruptibly();, + /**, + * Reads the public suffix list treating the operation as uninterruptible. We always want to read,
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Buffer buffer = source.getBuffer();, + try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Buffer buffer = source.getBuffer();, + try
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket, transport);, + private final Transport transport;, + private SpdySocketHandler(Socket socket, Transport transport) {, + this.transport = transport;, + logger.info("Received request: " + request + " and responded: " + response, + + " transport is " + transport);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket, transport);, + private final Transport transport;, + private SpdySocketHandler(Socket socket, Transport transport) {, + this.transport = transport;, + logger.info("Received request: " + request + " and responded: " + response, + + " transport is " + transport);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, + throw new UnsupportedOperationException();, +
[+++ b/okhttp/pom.xml, + <links>, + <link>http://square.github.io/okio/</link>, + </links>, +++ b/okhttp/pom.xml, + <links>, + <link>http://square.github.io/okio/</link>, + </links>, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +++ b/okhttp/pom.xml, + <links>, + <link>http://square.github.io/okio/</link>, + </links>, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, + public OkHttpClient setConnectTimeout(long timeout, TimeUnit unit) {, + return this;, + public OkHttpClient setReadTimeout(long timeout, TimeUnit unit) {, + return this;, + public OkHttpClient setWriteTimeout(long timeout, TimeUnit unit) {, + return this;, + public OkHttpClient cancel(Object tag) {, + return this;]
[+++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, + try (Response response = call.execute()) {, + }, + try (Response response = call.execute()) {, + }, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, + try (Response response = call.execute()) {, + }, + try (Response response = call.execute()) {, + }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +import static org.junit.Assert.assertSame;, + public class UtilTest {, + @Test public void testAssertionError() {, + NullPointerException nullPointerException = new NullPointerException();, + AssertionError ae = Util.assertionError("npe", nullPointerException);, + assertSame(nullPointerException, ae.getCause());, + assertEquals("npe", ae.getMessage());, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, + try (Response response = call.execute()) {, + }, + try (Response response = call.execute()) {, + }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java,
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + ? Util.EMPTY_REQUEST, + ? Util.EMPTY_REQUEST, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + ? Util.EMPTY_REQUEST, + ? Util.EMPTY_REQUEST, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +import okhttp3.internal.Util;, + body = Util.EMPTY_REQUEST;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + ? Util.EMPTY_REQUEST, + ? Util.EMPTY_REQUEST, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +import okhttp3.internal.Util;, + body = Util.EMPTY_REQUEST;, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +import okhttp3.Interceptor;, +import static org.junit.Assert.assertNotNull;, + private OkHttpClient client = new OkHttpClient.Builder(), + .addInterceptor(new Interceptor() {, + @Override public Response intercept(Chain chain) throws IOException {, + Response response = chain.proceed(chain.request());, + assertNotNull(response.body()); // Ensure application interceptors never see a null body., + return response;, + }, + }), + .build();, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + ? Util.EMPTY_REQUEST, + ?
[+++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, + private final SpdyReader spdyReader;, + private final SpdyWriter spdyWriter;, + private final ExecutorService readExecutor;, + private final ExecutorService writeExecutor;, + private final ExecutorService callbackExecutor;, + handler = builder.handler;, + callbackExecutor = new ThreadPoolExecutor(1, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,, + /**, + * Returns true if this peer initiated the connection., + */, + public synchronized boolean isClient() {, + return nextStreamId % 2 == 1;, + }, +, + SpdyStream
[+++ b/pom.xml, + <version>20130706</version>, +++ b/pom.xml, + <version>20130706</version>, +++ b/src/main/java/com/google/mockwebserver/MockWebServer.java, + long contentLength = -1;, + contentLength = Long.parseLong(header.substring(15).trim());, + private void transfer(long length, InputStream in, OutputStream out) throws IOException {, + int count = in.read(buffer, 0, (int) Math.min(buffer.length, length));]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, + private boolean started;, + if (started) return;, + started = true;, + server.play();, + if (!started) before();, + return server.getPort();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, + private boolean started;, + if (started) return;, + started = true;, + server.play();, + if (!started) before();, + return server.getPort();, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRuleTest.java, + @Test public void whenRuleCreatedPortIsAvailable() throws IOException {, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, + client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, + private boolean started;, + if (started) return;, + started = true;, + server.play();, + if (!started) before();, + return server.getPort();,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + private String status;, + setResponseCode(200);, + String reason = "Mock Response";, + if (code >= 100 && code < 200) {, + reason = "Informational";, + } else if (code >= 200 && code < 300) {, + reason = "OK";, + } else if (code >= 300 && code < 400) {, + reason = "Redirection";, + } else if (code >= 400 && code < 500) {, + reason = "Client Error";, + } else if (code >= 500 && code < 600) {, + reason = "Server Error";, + }, + return setStatus("HTTP/1.1
[+++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_112</id>, + <activation>, + <jdk>1.8.0_112</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, + </properties>, + </profile>]
[+++ b/pom.xml, + <version>0.8-SNAPSHOT</version>]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(String path, AtomicInteger responseCode) {, + return new Thread(() -> {, + URL url = mockWebServer.url(path).url();, + HttpURLConnection conn;, + } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(String path, AtomicInteger responseCode) {, + return new Thread(() -> {, + URL url = mockWebServer.url(path).url();, + HttpURLConnection conn;, + } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + new Thread(() -> {, + }).start();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(String path, AtomicInteger responseCode) {, + return new Thread(() -> {, + URL url = mockWebServer.url(path).url();, + HttpURLConnection conn;, + } catch (IOException ignored) {,
[+++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/ExchangeCodec.java, + Sink createRequestBody(Request request, long contentLength);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/ExchangeCodec.java, + Sink createRequestBody(Request request, long contentLength);, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1ExchangeCodec.java, + @Override public Sink createRequestBody(Request request, long contentLength) {, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/ExchangeCodec.java, + Sink createRequestBody(Request request, long contentLength);, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1ExchangeCodec.java, + @Override public Sink createRequestBody(Request request, long contentLength) {, +++ b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.java, + @SuppressWarnings("deprecation") private Provider getProvider() {, + // defaults to true, but allow for older versions of conscrypt if still compatible, + // new form with boolean is only present in >= 2.0.0, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/ExchangeCodec.java, + Sink createRequestBody(Request request, long contentLength);,
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2Codec;, + Response response = Http2Codec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, + assertEquals(expected, Http2Codec.http2HeadersList(request));, + assertEquals(expected, Http2Codec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2Codec;, + Response response = Http2Codec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, + assertEquals(expected, Http2Codec.http2HeadersList(request));, + assertEquals(expected, Http2Codec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, + @Test public void proxySelectorHttpWithConnectionReuse() throws IOException {, + server.enqueue(new MockResponse(), + .setBody("response 1"));, + server.enqueue(new MockResponse(), + .setResponseCode(407));, +, + urlFactory.setClient(urlFactory.client().newBuilder(), + .proxySelector(new ProxySelector() {, + @Override public List<Proxy> select(URI uri) {, + return Collections.singletonList(server.toProxyAddress());, + }, +, + @Override public void connectFailed(, + URI uri, SocketAddress socketAddress, IOException e) {, + }, + }).build());, + URL url = new URL("http://android.com/foo");, + assertContent("response 1",
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, + return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, + return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, + 'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, + 'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, + 'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, + 'okhttp3.CertificatePinner$Builder#build()',, + 'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, + return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, + 'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, + 'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, + 'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, + 'okhttp3.CertificatePinner$Builder#build()',, + 'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, +++ /dev/null, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, + return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, + 'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, + 'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, + 'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, + 'okhttp3.CertificatePinner$Builder#build()',, + 'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + -
[+++ b/CHANGELOG.md, +## Version 3.0.0-RC1, +, +_2016-01-02_, +, +OkHttp 3 is a major release focused on API simplicity and consistency. The API, +changes are numerous but most are cosmetic. Applications should be able to, +upgrade from the 2.x API to the 3.x API mechanically and without risk., +, +Because the release includes breaking API changes, we're changing the project's, +package name from `com.squareup.okhttp` to `okhttp3`. This should make it, +possible for large applications to migrate incrementally. The Maven group ID, +is now `com.squareup.okhttp3`. For an explanation of this strategy, see Jake, +Wharton's post, [Java Interoperability Policy for Major Version,
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, + * QueueDispatcher} but other dispatchers can be configured., + */, + public Dispatcher getDispatcher() {, + return dispatcher;, + }, +, + /**, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, + * QueueDispatcher} but other dispatchers can be configured., + */, + public
[+++ b/checkstyle.xml, + <!--<module name="ConstantName"/>-->
[+++ b/pom.xml, + <okio.version>1.6.0</okio.version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + @Test public void previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding() throws Exception {, + server.enqueue(new MockResponse(), + .setBody("ABCABCABC"), + .addHeader("Content-Type: text/plain"), + .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), + .addHeader("Expires: " + formatDate(-1, TimeUnit.HOURS)));, + server.enqueue(new MockResponse(), + .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED), + .addHeader("Content-Type: text/plain"), + .addHeader("Content-Encoding: gzip"));, + server.enqueue(new MockResponse(), + .setBody("DEFDEFDEF"));, +, + assertEquals("ABCABCABC", get(server.url("/")).body().string());, + assertEquals("ABCABCABC", get(server.url("/")).body().string());, + assertEquals("DEFDEFDEF", get(server.url("/")).body().string());, + }, +, + @Test public void changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding() throws Exception {, + server.enqueue(new MockResponse(), + .setBody(gzip("ABCABCABC")), + .addHeader("Content-Type: text/plain"), + .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), + .addHeader("Expires: " + formatDate(-1, TimeUnit.HOURS)), + .addHeader("Content-Encoding: gzip"));, + server.enqueue(new MockResponse(), + .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED), + .addHeader("Content-Type: text/plain"), +
[+++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="square/okhttp", +JDK="oraclejdk8", +BRANCH="master", +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, + echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, + echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, + echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, + echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH'
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, + TlsNode tlsNode = localhost();, + new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, + TlsNode tlsNode = localhost();, + new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, + TlsNode tlsNode = localhost();, + server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, + TlsNode tlsNode = localhost();, + new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, + TlsNode tlsNode = localhost();, + server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.TlsNode;, + @Override public void initChannel(SocketChannel channel) throws Exception {, + TlsNode tlsNode = localhost();, + SSLEngine engine = tlsNode.sslContext().createSSLEngine();, + ChannelHandlerContext context, HttpObject message) throws Exception
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST,
[+++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp/src/main/java/okhttp3/Headers.java, + if (value == null) throw new NullPointerException("value for name " + name + " == null");, +++ b/okhttp/src/main/java/okhttp3/Headers.java, + if (value == null) throw new NullPointerException("value for name " + name + " == null");, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/Headers.java, + if (value == null) throw new NullPointerException("value for name " + name + " == null");, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/pom.xml]
[+++ b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.TimeUnit;, +, + private final ExecutorService writeExecutor = Executors.newSingleThreadExecutor();, + OkHttpClient client = new OkHttpClient.Builder(), + .readTimeout(0, TimeUnit.MILLISECONDS), + .build();, + writeExecutor.shutdown();, + writeExecutor.shutdown();]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, + transmitter.acquireConnection(c1);, + transmitter.acquireConnection(connection);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, + transmitter.acquireConnection(c1);, + transmitter.acquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, + public void acquireConnection(RealConnection connection) {, + streamAllocation.transmitterAcquireConnection(connection);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, + transmitter.acquireConnection(c1);, + transmitter.acquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, + public void acquireConnection(RealConnection connection) {, + streamAllocation.transmitterAcquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, + public boolean isEligible(Address address, @Nullable List<Route> routes) {, + if (routes == null || !routeMatchesAny(routes)) return false;, + if (address.hostnameVerifier() != OkHostnameVerifier.INSTANCE) return false;, + /** Returns true if this connection's route has the same address as any of {@code routes}. */, + private boolean routeMatchesAny(List<Route> candidates) {, + for (int i = 0, size = candidates.size(); i
[+++ b/benchmarks/pom.xml, + <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-RC1</version>, +++ b/okhttp-apache/pom.xml, + <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-RC1</version>, +++ b/okhttp-apache/pom.xml, + <version>2.1.0-RC1</version>, +++ b/okhttp-tests/pom.xml, + <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-RC1</version>, +++ b/okhttp-apache/pom.xml, + <version>2.1.0-RC1</version>, +++ b/okhttp-tests/pom.xml, + <version>2.1.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, + return new Thread(new Runnable() {, + @Override public void run() {, + final URL url = mockWebServer.url(path).url();, + final HttpURLConnection conn;, + } catch (IOException e) {, + }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, + return new Thread(new Runnable() {, + @Override public void run() {, + final URL url = mockWebServer.url(path).url();, + final HttpURLConnection conn;, + } catch (IOException e) {, + }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + new Thread() {, + @Override public void run() {, + }, +
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.writeAll(body);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + return buffer.readString(body.contentType().charset());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, + return buffer.readUtf8();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, + return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, + responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, + return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, + responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, + return buffer.readByteString().hex();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, + return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, + responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++
[+++ b/benchmarks/pom.xml, + <dependency>, + <groupId>org.apache.httpcomponents</groupId>, + <artifactId>httpclient</artifactId>, + </dependency>, +++ b/benchmarks/pom.xml, + <dependency>, + <groupId>org.apache.httpcomponents</groupId>, + <artifactId>httpclient</artifactId>, + </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClientRequest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS
[+++ b/build.xml, + <mkdir dir="build/test-classes"/>, + <javac srcdir="src/test/java" includes="**" destdir="build/test-classes", + debug="on" source="1.6" target="1.6" includeantruntime="false">, + <compilerarg value="-Xlint"/>, + <classpath>, + <pathelement location="build/classes" />, + <pathelement location="lib/junit.jar" />, + </classpath>, + </javac>, + <target name="test" depends="compile">, + <junit printsummary="true" showoutput="false" fork="true", + errorProperty="test.failed" failureProperty="test.failed">, + <assertions><enable/></assertions>, + <classpath>, + <pathelement location="build/classes"/>, + <pathelement location="build/test-classes"/>, + <pathelement location="lib/junit.jar"/>, + </classpath>, + <batchtest>, + <fileset dir="build/test-classes" includes="**/**Test.class"/>, + </batchtest>, + </junit>, + <fail message="Tests failed." if="test.failed"/>, + </target>, +, +++ b/build.xml, + <mkdir dir="build/test-classes"/>, + <javac srcdir="src/test/java" includes="**" destdir="build/test-classes", + debug="on" source="1.6" target="1.6" includeantruntime="false">, + <compilerarg value="-Xlint"/>, + <classpath>, + <pathelement
[+++ b/okhttp/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp</artifactId>, + <name>OkHttp</name>, +, + <dependencies>, + <dependency>, + <groupId>org.mortbay.jetty.npn</groupId>, + <artifactId>npn-boot</artifactId>, + <optional>true</optional>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>org.bouncycastle</groupId>, + <artifactId>bcprov-jdk15on</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.google.mockwebserver</groupId>, + <artifactId>mockwebserver</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/okhttp/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>1.0-SNAPSHOT</version>, +
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.util.Collections;, + assertEquals("android.com:443", connect.getHeader("Host"));, + /** https://github.com/square/okhttp/issues/2344 */, + @Test public void ipv6HostHasSquareBraces() throws Exception {, + // Use a proxy to fake IPv6 connectivity, even if localhost doesn't have IPv6., + server.useHttps(sslContext.getSocketFactory(), true);, + server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, + server.enqueue(new MockResponse(), + .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), + .clearHeaders());, + server.enqueue(new MockResponse(), + .setBody("response body"));, +, + client = client.newBuilder(), + .sslSocketFactory(sslContext.getSocketFactory()), + .hostnameVerifier(new RecordingHostnameVerifier()), + .proxy(server.toProxyAddress()), + .build();, +, + Request request = new Request.Builder(), + .url("https://[::1]/"), + .build();, + Response response = client.newCall(request).execute();, + assertEquals("response body", response.body().string());, +, + RecordedRequest connect = server.takeRequest();, + assertEquals("CONNECT [::1]:443 HTTP/1.1", connect.getRequestLine());, + assertEquals("[::1]:443",
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void disconnectRequestHalfway() throws IOException {, + assertEquals(512f, i, 20f); // Halfway +/- 2%, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void disconnectRequestHalfway() throws IOException {, + assertEquals(512f, i, 20f); // Halfway +/- 2%, +++ b/okhttp-sse/src/main/java/okhttp3/EventSource.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or
[+++ b/pom.xml, + <okio.version>1.5.0</okio.version>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, + Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, + Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import
[+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, + @Test public void nullSSLSocketFactory_throws() throws Exception {, + server.useHttps(sslClient.socketFactory, false /* tunnelProxy */);, + HttpsURLConnection connection = (HttpsURLConnection) server.url("/").url().openConnection();, + try {, + connection.setSSLSocketFactory(null);, + fail();, + } catch (IllegalArgumentException expected) {, + }, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, + @Test public void nullSSLSocketFactory_throws() throws Exception {, + server.useHttps(sslClient.socketFactory, false /* tunnelProxy */);, + HttpsURLConnection connection = (HttpsURLConnection) server.url("/").url().openConnection();, + try {, + connection.setSSLSocketFactory(null);, + fail();, + } catch (IllegalArgumentException expected) {, + }, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import org.hamcrest.CoreMatchers;, + for (String l: logs) {, + if (l.contains(type)) {, + return l;,
[+++ b/checkstyle.xml, + <module name="SuppressWarningsFilter"/>
[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + long contentLength = responseBody.contentLength();, + String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, + + bodySize + " body" : "") + ')');, + if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + long contentLength = responseBody.contentLength();, + String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, + + bodySize + " body" : "") + ')');, + if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, + @Test public void basicChunkedResponseBody() throws IOException {, + setLevel(Level.BASIC);, +, + server.enqueue(new MockResponse(), + .setChunkedBody("Hello!", 2), + .setHeader("Content-Type", PLAIN));, + Response response = client.newCall(request().build()).execute();,
[+++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/bom/pom.xml, + <parent>, + <artifactId>parent</artifactId>, + </parent>, +, + <artifactId>okhttp-bom</artifactId>, +++ b/bom/pom.xml, + <parent>, + <artifactId>parent</artifactId>, + </parent>, +, + <artifactId>okhttp-bom</artifactId>, +++ b/mockwebserver/src/main/java/okhttp3/internal/duplex/MwsDuplexAccess.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on
[+++ b/build.gradle, + 'kotlin': '1.3.20',, + 'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",, + classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", + apply plugin: 'org.jetbrains.kotlin.platform.jvm', +++ b/build.gradle, + 'kotlin': '1.3.20',, + 'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",, + classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", + apply plugin: 'org.jetbrains.kotlin.platform.jvm', +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionSpecTest.java, + TlsVersion.TLS_1_2.javaName(),, + TlsVersion.TLS_1_1.javaName(),, + assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, + TlsVersion.TLS_1_2.javaName(),, + TlsVersion.TLS_1_1.javaName(),, + assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, + TlsVersion.TLS_1_2.javaName(),, + TlsVersion.TLS_1_1.javaName(),, + assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, + TlsVersion.TLS_1_2.javaName(),, + TlsVersion.TLS_1_1.javaName(),, + new String[] {TlsVersion.TLS_1_2.javaName(), TlsVersion.TLS_1_1.javaName()});, + socket.setEnabledProtocols(new String[] {TlsVersion.TLS_1_1.javaName()});, +++ b/build.gradle, + 'kotlin': '1.3.20',, + 'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",, + classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", + apply plugin: 'org.jetbrains.kotlin.platform.jvm', +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionSpecTest.java, + TlsVersion.TLS_1_2.javaName(),, + TlsVersion.TLS_1_1.javaName(),, + assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, + TlsVersion.TLS_1_2.javaName(),, + TlsVersion.TLS_1_1.javaName(),, + assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, + TlsVersion.TLS_1_2.javaName(),, + TlsVersion.TLS_1_1.javaName(),, + assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +
[+++ b/okhttp/src/main/java/com/squareup/okhttp/CipherSuite.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/benchmarks/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, + @Test public void readSettingsFrameExperimentalId() throws IOException {, + writeMedium(frame, 6); // 2 for the code and 4 for the value, + frame.writeByte(Http2.TYPE_SETTINGS);, + frame.writeByte(Http2.FLAG_NONE);, + frame.writeInt(0); // Settings are always on the connection stream 0., + frame.write(ByteString.decodeHex("f000")); // Id reserved for experimental use., + frame.writeInt(1);, +, + reader.nextFrame(false, new BaseTestHandler() {, + @Override public void settings(boolean clearPrevious, Settings settings) {, + // no-op, + }, + });, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, + @Test public void readSettingsFrameExperimentalId() throws IOException {, + writeMedium(frame, 6); // 2 for the code and 4 for the value, + frame.writeByte(Http2.TYPE_SETTINGS);, +
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + /** We incorrectly report a CallEnd event with the CallFailed event. */, + @Ignore, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + /** We incorrectly report a CallEnd event with the CallFailed event. */, + @Ignore, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, + public int refusedStreamCount;, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + /** We incorrectly report a CallEnd event with the CallFailed event. */, + @Ignore, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, + public int refusedStreamCount;, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, + private RouteSelector.Selection routeSelection;, + private Route route;, + RealConnection releasedConnection;, + releasedConnection = connection;, + toClose = connection != null && connection.noNewStreams, + ? transmitterReleaseConnection(), + : null;, +, + if (connection !=
[+++ b/README.md, +An HTTP & SPDY client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +MockWebServer coupling with OkHttp is essential for proper testing of SPDY and HTTP/2.0 so that code can be shared., +++ b/README.md, +An HTTP & SPDY client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +MockWebServer coupling with OkHttp is essential for proper testing of SPDY and HTTP/2.0 so that code can be shared., +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/README.md, +An HTTP & SPDY client for Android and Java applications. For more information see [the
[+++ b/okhttp-apache/pom.xml, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.google.mockwebserver</groupId>, + <artifactId>mockwebserver</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-apache/pom.xml, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.google.mockwebserver</groupId>, + <artifactId>mockwebserver</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +package com.squareup.okhttp.apache;, +, +import com.google.mockwebserver.MockResponse;, +import com.google.mockwebserver.MockWebServer;, +import java.io.IOException;, +import org.apache.http.Header;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.util.EntityUtils;, +import org.junit.After;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class OkApacheClientTest {, + private MockWebServer server = new MockWebServer();, + private OkApacheClient client = new OkApacheClient();, +, + @After public void tearDown() throws
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union
[+++ b/pom.xml, + <okio.version>1.3.0</okio.version>]
[+++ b/benchmarks/pom.xml, + <version>3.12.0</version>, +++ b/benchmarks/pom.xml, + <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.12.0</version>, +++ b/benchmarks/pom.xml, + <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.12.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.12.0</version>, +++ b/benchmarks/pom.xml, + <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.12.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.12.0</version>, +++ b/okcurl/pom.xml, + <version>3.12.0</version>, +++ b/benchmarks/pom.xml, + <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.12.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.12.0</version>, +++ b/okcurl/pom.xml, + <version>3.12.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.12.0</version>, +++ b/benchmarks/pom.xml, + <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.12.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.12.0</version>, +++ b/okcurl/pom.xml,
[+++ b/.buildscript/deploy_snapshot.sh, + echo "TODO: fix snapshot deployment for gradle...", + # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/deploy_snapshot.sh, + echo "TODO: fix snapshot deployment for gradle...", + # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, + <servers>, + <server>, + <id>sonatype-nexus-snapshots</id>, + <username>${env.CI_DEPLOY_USERNAME}</username>, + <password>${env.CI_DEPLOY_PASSWORD}</password>, + </server>, + </servers>, +</settings>, +++ b/.buildscript/deploy_snapshot.sh, + echo "TODO: fix snapshot deployment for gradle...", + # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, + <servers>, + <server>, + <id>sonatype-nexus-snapshots</id>, + <username>${env.CI_DEPLOY_USERNAME}</username>, + <password>${env.CI_DEPLOY_PASSWORD}</password>, + </server>, + </servers>, +</settings>, +++ b/.travis.yml, +
[+++ b/pom.xml, + <conscrypt.version>1.4.0</conscrypt.version>]
[+++ b/pom.xml, + <version>8.18</version>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft13;, +, + Logger logger = Logger.getLogger(Http20Draft13.class.getName());, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft13;, +, + Logger logger = Logger.getLogger(Http20Draft13.class.getName());, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + boolean reuseSocket = true;, + reuseSocket = false;, + return reuseSocket;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + boolean reuseSocket = true;, + reuseSocket = false;, + return reuseSocket;, +++ b/okhttp-testing-support/src/main/java/com/squareup/okhttp/testing/RecordingHostnameVerifier.java, +/*, + * Copyright (C) 2013 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software,
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/Jdk9PlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/CHANGELOG.md, + * New: Upgrade to Okio 1.12.0., +, + ```xml, + <dependency>, + <groupId>com.squareup.okio</groupId>, + <artifactId>okio</artifactId>, + <version>1.12.0</version>, + </dependency>, +, + com.squareup.okio:okio:1.12.0, + ```, +, +++ b/CHANGELOG.md, + * New: Upgrade to Okio 1.12.0., +, + ```xml, + <dependency>, + <groupId>com.squareup.okio</groupId>, + <artifactId>okio</artifactId>, + <version>1.12.0</version>, + </dependency>, +, + com.squareup.okio:okio:1.12.0, + ```, +, +++ b/pom.xml, + <okio.version>1.12.0</okio.version>]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, + // Buffer short, fixed-length request bodies. This costs memory, but permits the request to, + // be transparently retried if there is a connection failure., +++ b/.gitignore, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, + // Buffer short, fixed-length request bodies. This costs memory, but permits the request to, + // be transparently retried if there is a connection failure., +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +++ b/.gitignore, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, + // Buffer short, fixed-length request bodies. This costs memory, but permits the request to, + // be transparently retried if there is a connection failure., +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +++
[+++ b/pom.xml, + <version>8.18</version>]
[+++ b/.travis.yml, + - ./mvnw dependency:resolve -B || true, + - ./mvnw -DskipTests package checkstyle:check -B, + - ./mvnw test javadoc:jar source:jar -B, +++ b/.travis.yml, + - ./mvnw dependency:resolve -B || true, + - ./mvnw -DskipTests package checkstyle:check -B, + - ./mvnw test javadoc:jar source:jar -B, +++ b/CHANGELOG.md]
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, + assertTrue(Thread.interrupted());, + assertTrue(Thread.interrupted());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, + assertTrue(Thread.interrupted());, + assertTrue(Thread.interrupted());, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, + Thread.interrupted(); // Temporarily clear the interrupted state., +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, + assertTrue(Thread.interrupted());, + assertTrue(Thread.interrupted());, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, + Thread.interrupted(); // Temporarily clear the interrupted state., +++ b/pom.xml, + <okio.version>1.15.0</okio.version>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, + stream.close(ErrorCode.NO_ERROR);, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, + stream.close(ErrorCode.NO_ERROR);, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + call.timeout().clearTimeout();, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, + stream.close(ErrorCode.NO_ERROR);, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, + @Test public void callTimeoutIsNotApplied() throws Exception {, + .callTimeout(100, TimeUnit.MILLISECONDS), +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, + stream.close(ErrorCode.NO_ERROR);, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, + @Test public void callTimeoutIsNotApplied() throws Exception {, + .callTimeout(100, TimeUnit.MILLISECONDS), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // TODO https://github.com/square/okhttp/issues/4598, +// java.util.NoSuchElementException, +// at java.base/java.util.ArrayDeque.removeFirst(ArrayDeque.java:363), +// at okhttp3.internal.tls.BasicCertificateChainCleaner.clean(BasicCertificateChainCleaner.java:58), +// at okhttp3.CertificatePinner.check(CertificatePinner.java:166), +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, + stream.close(ErrorCode.NO_ERROR);, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java,
[+++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + * **API Change**: Use `IOException` in `Callback.onFailure()`. This is, + a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, + used `Throwable`., + * Fix: Fixed a caching bug where we weren't storing rewritten request headers, + like `Accept-Encoding`., + * Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, + large downloads, + * Update the language level to Java 7. (OkHttp requires
[+++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static okhttp3.internal.Util.indexOf;, + if (isFallback && indexOf(sslSocket.getSupportedCipherSuites(), "TLS_FALLBACK_SCSV") != -1) {, + if (indexOf(b, toFind) != -1) {, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static okhttp3.internal.Util.indexOf;, + if (isFallback && indexOf(sslSocket.getSupportedCipherSuites(), "TLS_FALLBACK_SCSV") != -1) {, + if (indexOf(b, toFind) != -1) {, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, + public static <T> int indexOf(T[] array, T value) {, + for (int i = 0, size = array.length; i < size; i++) {, + if (equal(array[i], value)) return i;, + }, + return -1;, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, + assertFalse(c1.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertTrue(c1.socket().isClosed());, + assertTrue(c1.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertTrue(c2.socket().isClosed());, + assertTrue(c1.socket().isClosed());, + assertTrue(c2.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertFalse(c2.socket().isClosed());, + assertTrue(c1.socket().isClosed());, + assertFalse(c2.socket().isClosed());, + assertFalse(c3.socket().isClosed());, + RealConnection result = RealConnection.testConnection(pool, route, new Socket(), idleAtNanos);, + pool.put(result);, + return result;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, + assertFalse(c1.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertTrue(c1.socket().isClosed());, + assertTrue(c1.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertTrue(c2.socket().isClosed());, + assertTrue(c1.socket().isClosed());, + assertTrue(c2.socket().isClosed());, + assertFalse(c1.socket().isClosed());, + assertFalse(c2.socket().isClosed());, + assertTrue(c1.socket().isClosed());, + assertFalse(c2.socket().isClosed());, + assertFalse(c3.socket().isClosed());, + RealConnection result = RealConnection.testConnection(pool, route, new Socket(), idleAtNanos);, + pool.put(result);, + return
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, + ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, + ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, + HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, + ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, + HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, + ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, + HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, + UrlConnectionRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, + ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, + HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, + UrlConnectionRequest(HttpUrl url) {, +++ b/checkstyle.xml, + "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/build.gradle, +dependencies {, + testImplementation deps.okio, + testImplementation project(':okhttp'), + testImplementation project(':okhttp-testing-support'), + testImplementation project(':okhttp-tls'), + testImplementation project(':okhttp-urlconnection'), + testImplementation project(':mockwebserver'), + testImplementation project(':okhttp-logging-interceptor'), + testImplementation deps.conscrypt, + testImplementation deps.junit, + testImplementation deps.assertj, + testCompileOnly deps.jsr305, +}, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/build.gradle, +dependencies {, + testImplementation deps.okio, + testImplementation project(':okhttp'), + testImplementation project(':okhttp-testing-support'), + testImplementation project(':okhttp-tls'), + testImplementation project(':okhttp-urlconnection'), + testImplementation project(':mockwebserver'), + testImplementation project(':okhttp-logging-interceptor'),
[+++ b/samples/guide/pom.xml, + <dependency>, + <groupId>com.google.code.gson</groupId>, + <artifactId>gson</artifactId>, + </dependency>, +++ b/samples/guide/pom.xml, + <dependency>, + <groupId>com.google.code.gson</groupId>, + <artifactId>gson</artifactId>, + </dependency>, +++ b/samples/guide/src/main/java/com/squareup/okhttp/guide/Recipes.java, +import com.google.gson.Gson;, +import com.squareup.okhttp.Cache;, +import java.io.File;, +import java.util.Map;, + public void parseResponseWithGson() throws Exception {, + OkHttpClient client = new OkHttpClient();, + Gson gson = new Gson();, +, + Request request = new Request.Builder(), + .url("https://api.github.com/gists/c2a7c39532239ff261be"), + .build();, + Response response = client.newCall(request).execute();, + Gist gist = gson.fromJson(response.body().charStream(), Gist.class);, + for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {, + System.out.println(entry.getKey());, + System.out.println(entry.getValue().content);, + }, + }, +, + static class Gist {, + Map<String, GistFile> files;, + },
[+++ b/okhttp/pom.xml, + <version>1.1.3</version>, +++ b/okhttp/pom.xml, + <version>1.1.3</version>, +++ b/pom.xml, + <version>1.1.3</version>]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java, + assertEquals(server.getCookieDomain(), cookie.getDomain());, + assertEquals(server.getCookieDomain(), cookie.getDomain());, + assertEquals(server.getCookieDomain(), cookie.getDomain());, + assertEquals(server.getCookieDomain(), cookie.getDomain());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java, + assertEquals(server.getCookieDomain(), cookie.getDomain());, + assertEquals(server.getCookieDomain(), cookie.getDomain());, + assertEquals(server.getCookieDomain(), cookie.getDomain());, + assertEquals(server.getCookieDomain(), cookie.getDomain());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.HostResolver;, + .setConnectionPool(ConnectionPool.getDefault()), + .setHostResolver(dns);, + RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, + RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, + routeSelector = RouteSelector.get(httpRequest, client);, + RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, + RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, + RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, + RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, + RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, + RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, + RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, + RouteSelector routeSelector =
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp/src/main/java/okhttp3/FormBody.java, + if (name == null) throw new NullPointerException("name == null");, + if (value == null) throw new NullPointerException("value == null");, +, + if (name == null) throw new NullPointerException("name == null");, + if (value == null) throw new NullPointerException("value == null");, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp/src/main/java/okhttp3/FormBody.java, + if (name == null) throw new NullPointerException("name == null");, + if (value == null) throw new NullPointerException("value == null");, +, + if (name == null) throw new NullPointerException("name == null");, + if (value == null) throw new NullPointerException("value == null");, +, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, + Handshake unverifiedHandshake
[+++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, + public static void ensureAllConnectionsReleased(OkHttpClient client) {, + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().idleConnectionCount());, + }, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, + public static void ensureAllConnectionsReleased(OkHttpClient client) {, + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().idleConnectionCount());, + }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + TestUtil.ensureAllConnectionsReleased(client);, + TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, + public static void ensureAllConnectionsReleased(OkHttpClient client) {, + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().idleConnectionCount());, + }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + TestUtil.ensureAllConnectionsReleased(client);, + TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, + public static void ensureAllConnectionsReleased(OkHttpClient client) {, + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().idleConnectionCount());, +
[+++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/mockspdyserver/MockSpdyServer.java, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.QueueDispatcher;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +++ /dev/null, +++
[+++ b/.travis.yml, + - ./gradlew :okhttp:test --tests EventListenerTest, +++ b/.travis.yml, + - ./gradlew :okhttp:test --tests EventListenerTest, +++ b/build.gradle, + testLogging {, + showStandardStreams = true, + }, + }, +, + test {, + filter {, + includeTestsMatching "okhttp3.EventListenerTest.requestBodyFailHttp*", + }, + }, +, + test {, +++ b/.travis.yml, + - ./gradlew :okhttp:test --tests EventListenerTest, +++ b/build.gradle, + testLogging {, + showStandardStreams = true, + }, + }, +, + test {, + filter {, + includeTestsMatching "okhttp3.EventListenerTest.requestBodyFailHttp*", + }, + }, +, + test {, +++ b/okhttp/src/test/java/okhttp3/EventListenerTest.java, +import java.time.Clock;, +import okhttp3.logging.LoggingEventListener;, + // XXX, + client = client.newBuilder().eventListenerFactory(new
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/LICENSE.txt, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION,
[+++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import okhttp3.internal.URLFilter;, +++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import okhttp3.internal.URLFilter;, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, + private CertificatePinner(List<Pin> pins, CertificateChainCleaner certificateChainCleaner) {, + this.pins = pins;, + this.certificateChainCleaner = certificateChainCleaner;, + /** Returns a certificate pinner that uses {@code certificateChainCleaner}. */, + CertificatePinner withCertificateChainCleaner(CertificateChainCleaner certificateChainCleaner) {, + return this.certificateChainCleaner != certificateChainCleaner, + ? new CertificatePinner(pins, certificateChainCleaner), + : this;, + return new CertificatePinner(Util.immutableList(pins), null);, +++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import okhttp3.internal.URLFilter;, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, + private CertificatePinner(List<Pin> pins, CertificateChainCleaner certificateChainCleaner) {, + this.pins = pins;, + this.certificateChainCleaner = certificateChainCleaner;, + /** Returns a certificate pinner that uses {@code certificateChainCleaner}. */, + CertificatePinner withCertificateChainCleaner(CertificateChainCleaner certificateChainCleaner) {, + return this.certificateChainCleaner
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, + private NewWebSocket.Listener webSocketListener;, + public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, + public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, + private NewWebSocket.Listener webSocketListener;, + public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, + public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, + RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, + RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, + private NewWebSocket.Listener webSocketListener;, + public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, + public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, + RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, + RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, + private
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, + 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', + };, + } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, + transport = Transport.HTTP_20_DRAFT_06;, + if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, + if (transport == Transport.SPDY_3) {, + } else {, + builder.http20Draft06();, + HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, + 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0',
[+++ b/pom.xml, + <okio.version>1.6.0</okio.version>]
[+++ b/okhttp/src/main/java/okhttp3/Authenticator.java, + * <p>Implementations should check if the initial request already included an attempt to, + * authenticate. If so it is likely that further attempts will not be useful and the authenticator, + * should give up., + *, + * if (response.request().header("Authorization") != null) {, + * return null; // Give up, we've already failed to authenticate., + * }, + *, + * if (response.request().header("Proxy-Authorization") != null) {, + * return null; // Give up, we've already failed to authenticate., + * }, + *, +++ b/okhttp/src/main/java/okhttp3/Authenticator.java, + * <p>Implementations should check if the initial
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/pom.xml, + <version>20120819</version>, +++ b/pom.xml, + <version>20120819</version>, +++ b/src/main/java/com/google/mockwebserver/Dispatcher.java, + * Returns a response to satisfy {@code request}. This method may block (for, + * instance, to wait on a CountdownLatch)., + * Returns the socket policy of the next request. Default implementation, + * returns {@link SocketPolicy#KEEP_OPEN}. Mischievous implementations can, + * return other values to test HTTP edge cases., +++ b/pom.xml, + <version>20120819</version>, +++ b/src/main/java/com/google/mockwebserver/Dispatcher.java, + * Returns a response to satisfy {@code request}. This method may block (for, + * instance, to wait on a CountdownLatch)., + * Returns the socket policy of the next
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, + Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, + Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, + Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, + Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, + Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++
[+++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, + return "Event{id='" + id + "', type='" + type + "', data='" + data + "'}";]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + framedConnection.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + return null;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + framedConnection.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + return null;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Ignore("currently broken"), +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + framedConnection.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + return null;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Ignore("currently broken"), +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, + .pushObserver(observer), + .build();, + connection.start(false);, + connection.start(false);, + FramedConnection connection = connectionBuilder(peer, HTTP_2), + .pushObserver(PushObserver.CANCEL), + .build();, + connection.start(false);, + connection.start(false);, + FramedConnection connection = connectionBuilder(peer, variant).build();, + connection.start(false);, + return connection;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +
[+++ b/.buildscript/deploy_snapshot.sh, + mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.buildscript/deploy_snapshot.sh, + mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.travis.yml, +# - openjdk11, +addons:, + apt:, + packages:, + - oracle-java8-installer # Updates JDK 8 to the latest available., +script: mvn test javadoc:jar source:jar -B, +++ b/.buildscript/deploy_snapshot.sh, + mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.travis.yml, +# - openjdk11, +addons:, + apt:, + packages:, + - oracle-java8-installer # Updates JDK 8 to the latest available., +script: mvn test javadoc:jar source:jar -B, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + + "tlsVersion=TLS_1_2 ", + + "cipherSuite=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 ", + "connectFailed: null javax\\.net\\.ssl\\.SSLProtocolException: Handshake
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, + /** Synthetic response header: the local time when the request was sent. */, + private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, + /** Synthetic response header: the local time when the response was received. */, + private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, + .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), + .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), + if (name.equals(SENT_MILLIS)) {, + if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, + /** Synthetic response header: the local time when the request was sent. */, + private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, + /**
[+++ b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, + data.write(ByteString.decodeHex("0a00")); // Empty pong., + data.write(ByteString.decodeHex("ca00")); // Empty pong, flag 1 set., + data.write(ByteString.decodeHex("aa00")); // Empty pong, flag 2 set., + data.write(ByteString.decodeHex("9a00")); // Empty pong, flag 3 set.]
[+++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, + if (i == 513) {, + // pause slightly after half way to make result more predictable, + Thread.sleep(100);,
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.7.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.7.0', + <version>3.7.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.7.0', +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.7.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.7.0', + <version>3.7.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.7.0', +++ b/okhttp-tests/src/test/java/okhttp3/CacheControlTest.java, + + "no-transform", cacheControl.toString());, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.7.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.7.0', + <version>3.7.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.7.0', +++ b/okhttp-tests/src/test/java/okhttp3/CacheControlTest.java, + + "no-transform", cacheControl.toString());, +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, + int minFreshSeconds, boolean onlyIfCached, boolean noTransform,, + mustRevalidate, maxStaleSeconds, minFreshSeconds, onlyIfCached, noTransform, headerValue);, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.7.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.7.0', + <version>3.7.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.7.0', +++ b/okhttp-tests/src/test/java/okhttp3/CacheControlTest.java, + + "no-transform", cacheControl.toString());, +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, + int minFreshSeconds, boolean onlyIfCached, boolean noTransform,, + mustRevalidate, maxStaleSeconds, minFreshSeconds, onlyIfCached, noTransform,
[+++ b/okhttp/build.gradle, + 'okhttp3.Dispatcher#cancelAll()',, + 'okhttp3.Dispatcher#executorService()',, + 'okhttp3.Dispatcher#getMaxRequests()',, + 'okhttp3.Dispatcher#getMaxRequestsPerHost()',, + 'okhttp3.Dispatcher#queuedCalls()',, + 'okhttp3.Dispatcher#queuedCallsCount()',, + 'okhttp3.Dispatcher#runningCalls()',, + 'okhttp3.Dispatcher#runningCallsCount()',, + 'okhttp3.Dispatcher#setIdleCallback(java.lang.Runnable)',, + 'okhttp3.Dispatcher#setMaxRequests(int)',, + 'okhttp3.Dispatcher#setMaxRequestsPerHost(int)',, +++ b/okhttp/build.gradle, + 'okhttp3.Dispatcher#cancelAll()',, + 'okhttp3.Dispatcher#executorService()',, + 'okhttp3.Dispatcher#getMaxRequests()',, + 'okhttp3.Dispatcher#getMaxRequestsPerHost()',, + 'okhttp3.Dispatcher#queuedCalls()',, + 'okhttp3.Dispatcher#queuedCallsCount()',, + 'okhttp3.Dispatcher#runningCalls()',, + 'okhttp3.Dispatcher#runningCallsCount()',, + 'okhttp3.Dispatcher#setIdleCallback(java.lang.Runnable)',, + 'okhttp3.Dispatcher#setMaxRequests(int)',, + 'okhttp3.Dispatcher#setMaxRequestsPerHost(int)',, +++ /dev/null, +++ b/okhttp/build.gradle, + 'okhttp3.Dispatcher#cancelAll()',, + 'okhttp3.Dispatcher#executorService()',, + 'okhttp3.Dispatcher#getMaxRequests()',, + 'okhttp3.Dispatcher#getMaxRequestsPerHost()',, + 'okhttp3.Dispatcher#queuedCalls()',, + 'okhttp3.Dispatcher#queuedCallsCount()',, + 'okhttp3.Dispatcher#runningCalls()',, + 'okhttp3.Dispatcher#runningCallsCount()',, + 'okhttp3.Dispatcher#setIdleCallback(java.lang.Runnable)',, + 'okhttp3.Dispatcher#setMaxRequests(int)',, + 'okhttp3.Dispatcher#setMaxRequestsPerHost(int)',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.kt, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");,
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import okhttp3.internal.Util;, +import static org.junit.Assert.fail;, + if (domain == null) {, + try {, + publicSuffixDatabase.getEffectiveTldPlusOne(null);, + fail();, + } catch (NullPointerException expected) {, + }, + return;, + }, +, + String canonicalDomain = Util.domainToAscii(domain);, + if (canonicalDomain == null) return;, +, + String result = publicSuffixDatabase.getEffectiveTldPlusOne(canonicalDomain);, + if (registrablePart == null) {, + assertNull(result);, + } else {, + assertEquals(Util.domainToAscii(registrablePart), result);, + }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import okhttp3.internal.Util;, +import static org.junit.Assert.fail;, + if (domain == null) {, + try {, + publicSuffixDatabase.getEffectiveTldPlusOne(null);, + fail();, + } catch (NullPointerException expected) {, + }, + return;, + },
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, + DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, + listener.expectNextEvent(DnsStart.class);, + DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, + listener.expectNextEvent(DnsStart.class);, + DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, + <T> T expectNextEvent(Class<T> eventClass) {, + if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, + DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, + listener.expectNextEvent(DnsStart.class);, + DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, + listener.expectNextEvent(DnsStart.class);, + DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, + <T> T expectNextEvent(Class<T> eventClass) {, + if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, + InputStream resource = PublicSuffixDatabaseTest.class, + InputStream resource = PublicSuffixDatabaseTest.class, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, + DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, + listener.expectNextEvent(DnsStart.class);, +
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, + private WebSocketListener webSocketListener;, + return setStatus("HTTP/1.1 " + code + " OK");, + if (bodyStream != null) {, + return bodyStream;, + }, + Buffer body = getBody();, + return body != null ? body.inputStream() : null;, + /**, + * Attempts to perform a web socket upgrade on the connection. This will overwrite any previously, + * set status or body., + */, + public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, + setStatus("HTTP/1.1 101 Switching Protocols");, + setHeader("Connection", "Upgrade");, + setHeader("Upgrade", "websocket");, + body = null;, + bodyStream = null;, + webSocketListener = listener;, +
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + // A cache miss writes the cache., + long t0 = System.currentTimeMillis();, + assertEquals(0, response1.receivedResponseAtMillis() - t0, 250.0);, + // A conditional cache hit updates the cache., + Thread.sleep(500); // Make sure t0 and t1 are distinct., + long t1 = System.currentTimeMillis();, + assertEquals(0, response2.receivedResponseAtMillis() - t1, 250.0);, + // A full cache hit reads the cache., + Thread.sleep(500); // Make sure t1 and t2 are distinct., + long t2 = System.currentTimeMillis();, + assertEquals(0, response3.receivedResponseAtMillis() - t1, 250.0);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + // A cache miss writes the cache., + long t0 = System.currentTimeMillis();, + assertEquals(0, response1.receivedResponseAtMillis()
[+++ b/okhttp-tls/src/main/java/okhttp3/tls/TlsNode.java, +import java.security.KeyManagementException;, + private final X509KeyManager keyManager;, + private TlsNode(X509KeyManager keyManager, X509TrustManager trustManager) {, + this.keyManager = keyManager;, + public X509KeyManager keyManager() {, + return keyManager;, + public SSLSocketFactory sslSocketFactory() {, + return sslContext().getSocketFactory();, + public SSLContext sslContext() {, + try {, + SSLContext sslContext = Platform.get().getSSLContext();, + sslContext.init(new KeyManager[] { keyManager }, new TrustManager[] { trustManager },, + new SecureRandom());, + return sslContext;, + } catch (KeyManagementException e) {, + throw new AssertionError(e);, + }, + }, +, + public static final class Builder {, + return new TlsNode(keyManager, trustManager);, +++ b/okhttp-tls/src/main/java/okhttp3/tls/TlsNode.java, +import java.security.KeyManagementException;, + private
[+++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, + * Returns null if the domain is a public suffix., + if (domainLabels.length == rule.length && rule[0].charAt(0) != EXCEPTION_MARKER) {, + // The domain is a public suffix., + throw new IllegalStateException("Unable to load " + PUBLIC_SUFFIX_RESOURCE + " resource ", + + "from the classpath.");]
[+++ b/README.md, +An HTTP & SPDY client for Android and Java applications., +, +For more information please see [the website][1]., +, +Download [the latest JAR][2] or grab via Maven:, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, + [1]: http://square.github.io/okhttp, + [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, +++ b/README.md, +An HTTP & SPDY client for Android and Java applications., +, +For more information please see [the website][1]., +, +Download [the latest JAR][2] or grab via Maven:, +OkHttp's test suite creates an
[+++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, + * QueueDispatcher} but other dispatchers can be configured., + */, + public Dispatcher getDispatcher() {, + return dispatcher;, + }, +, + /**, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, + * QueueDispatcher} but other dispatchers can be configured., + */, + public
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, + SslClient sslClient = SslClient.localhost();, + new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, + SslClient sslClient = SslClient.localhost();, + new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.internal.tls.SslClient;, + SslClient sslClient = SslClient.localhost();, + server.useHttps(sslClient.socketFactory, false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, + SslClient sslClient = SslClient.localhost();, + new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.internal.tls.SslClient;, + SslClient sslClient = SslClient.localhost();, + server.useHttps(sslClient.socketFactory, false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.internal.tls.SslClient;, + SslClient sslClient = SslClient.localhost();, + SSLEngine engine = sslClient.sslContext.createSSLEngine();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, + SslClient sslClient = SslClient.localhost();, + new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++
[+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, + @Override public Socket createSocket() throws IOException {, + @Override
[+++ b/benchmarks/pom.xml, + <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-RC1</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-RC1</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/PipeDuplexRequestBody.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Buffer buffer = source.getBuffer();, + try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Buffer buffer = source.getBuffer();, + try
[+++ b/benchmarks/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +public final class MockWebServer implements TestRule {, + private boolean started;, +, + private synchronized void maybeStart() {, + if (started) return;, + try {, + start();, + } catch (IOException e) {, + throw new RuntimeException(e);, + }, + }, +, + @Override public Statement apply(final Statement base, Description description) {, + return new Statement() {, + @Override public void evaluate() throws Throwable {, + maybeStart();, + try {, + base.evaluate();, + } finally {, + try {, + shutdown();, + } catch (IOException e) {,
[+++ b/pom.xml, + <junit.version>4.12</junit.version>]
[+++ b/pom.xml, +, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-release-plugin</artifactId>, + <version>2.3.2</version>, + <configuration>, + <autoVersionSubmodules>true</autoVersionSubmodules>, + </configuration>, + </plugin>]
[+++ b/okhttp-dnsoverhttps/README.md, +OkHttp DNS over HTTPS Implementation, +====================================, +, +This module is an experimental implementation of DNS over HTTPS using OkHttp., +API is not considered stable and may change at any time., +++ b/okhttp-dnsoverhttps/README.md, +OkHttp DNS over HTTPS Implementation, +====================================, +, +This module is an experimental implementation of DNS over HTTPS using OkHttp., +API is not considered stable and may change at any time., +++ b/okhttp-dnsoverhttps/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>parent</artifactId>, + <version>3.11.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp-dnsoverhttps</artifactId>, + <name>OkHttp DNS over HTTPS</name>, +, + <dependencies>,
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.Call;, + @Override public void onFailure(Call call, IOException e) {, + @Override public void onResponse(Call call, Response response) throws IOException {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.Call;, + @Override public void onFailure(Call call, IOException e) {, + @Override public void onResponse(Call call, Response response) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Override public void onFailure(Call call, IOException e) {, + @Override public void onResponse(Call call, Response response) throws IOException {, + @Override public void onFailure(Call call, IOException e) {, + @Override public void onResponse(Call call, Response response) throws IOException {, + callback.await(server.url("/a")), + callback.await(server.url("/0")), + callback.await(server.url("/0")).assertFailure("Too many follow-up requests:
[+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.EXPECT_CONTINUE;, + boolean readBody = true;, + && lowercaseHeader.substring(7).trim().equalsIgnoreCase("100-continue")) {, + readBody = false;, + if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, + readBody = true;, + if (!readBody) {, + // Don't read the body unless we've invited the client to send it., + } else if (contentLength != -1) {, + boolean readBody = true;, + if (name.utf8().equals("expect") && value.equalsIgnoreCase("100-continue")) {, + // Don't read the body unless we've invited the
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void getClientRequestTimeoutWithBackPressure() throws Exception {, + server.enqueue(new MockResponse(), + .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), + .setResponseCode(408), + .setHeader("Connection", "Close"), + .setHeader("Retry-After", "1"), + .setBody("You took too long!"));, +, + Request request = new Request.Builder(), + .url(server.url("/")), + .build();, + Response response = client.newCall(request).execute();, +, + assertEquals("You took too long!", response.body().string());, + }, +, + @Test public void maxUnavailableTimeoutRetries() throws IOException {, + server.enqueue(new MockResponse(), + .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), + .setResponseCode(503), + .setHeader("Connection", "Close"), + .setHeader("Retry-After", "0"), + .setBody("You took too long!"));, + server.enqueue(new MockResponse(), + .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), + .setResponseCode(503), + .setHeader("Connection", "Close"), + .setHeader("Retry-After", "0"), + .setBody("You took too long!"));, +,
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, + CountDownLatch responseDequeuedLatch = new CountDownLatch(1);, + CountDownLatch requestCanceledLatch = new CountDownLatch(1);, +, + QueueDispatcher dispatcher = new QueueDispatcher() {, + @Override, + public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, + // This guarantees a deterministic sequence when handling the canceled request:, + // 1. Server reads request and dequeues first response, + // 2. Client cancels request, + // 3. Server tries to send response on the canceled stream, + // Otherwise, there is no guarantee for the sequence. For example, the server may use the, + // first mocked response to respond to the second
[+++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + + "cipherSuite=TLS_.* ", +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + + "cipherSuite=TLS_.* ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestingRule;, + @Rule public final OkHttpClientTestingRule clientTestingRule = new OkHttpClientTestingRule();, + private OkHttpClient client = clientTestingRule.client;, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + + "cipherSuite=TLS_.* ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestingRule;, + @Rule public final OkHttpClientTestingRule clientTestingRule = new OkHttpClientTestingRule();, + private OkHttpClient client = clientTestingRule.client;, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestingRule.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Handshake handshake = Handshake.get(null, cipherSuite,, + nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, + Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Handshake handshake = Handshake.get(null, cipherSuite,, + nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, + Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, + Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, + Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Handshake handshake = Handshake.get(null, cipherSuite,, + nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, + Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, + Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, + Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;, +++
[+++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, + webSocket.message(response);, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, + webSocket.message(response);, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, + client.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, + client.message(RequestBody.create(BINARY, "Hello!"));, + client.message(null);, + client.message(RequestBody.create(null, "Hey!"));, + client.message(RequestBody.create(MediaType.parse("text/plain"), "Hey!"));, + client.ping(ByteString.encodeUtf8("Hello, WebSockets!"));, + client.ping(null);, + server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, + server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, + client.ping(ByteString.EMPTY);, + client.ping(ByteString.encodeUtf8("WebSockets are fun!"));, + webSocket.message(RequestBody.create(TEXT, "abc"));, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, + webSocket.message(response);, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, + client.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, + client.message(RequestBody.create(BINARY, "Hello!"));, + client.message(null);, + client.message(RequestBody.create(null, "Hey!"));, + client.message(RequestBody.create(MediaType.parse("text/plain"), "Hey!"));, + client.ping(ByteString.encodeUtf8("Hello, WebSockets!"));, + client.ping(null);, + server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, + server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, + client.ping(ByteString.EMPTY);, + client.ping(ByteString.encodeUtf8("WebSockets are fun!"));, + webSocket.message(RequestBody.create(TEXT, "abc"));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, + client.message(message);, + client.ping(ByteString.encodeUtf8("Pong?"));, + client.message(message);, +
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, + ByteArrayOutputStream bodyOut = new ByteArrayOutputStream();, + byte[] buffer = new byte[8192];, + int count;, + while ((count = bodyIn.read(buffer)) != -1) {, + bodyOut.write(buffer, 0, count);, + }, + return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.size(),, + bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, + ByteArrayOutputStream bodyOut = new ByteArrayOutputStream();, + byte[] buffer = new byte[8192];, + int count;, + while ((count = bodyIn.read(buffer)) != -1) {, + bodyOut.write(buffer, 0, count);, + }, + return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.size(),, + bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import org.junit.After;, +import
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.mockwebserver.internal.tls.HeldCertificate;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import static org.junit.Assert.assertNotNull;, + /**, + * We had a bug where we were passing a null route to the authenticator., + * https://github.com/square/okhttp/issues/3809, + */, + @Test public void authenticateWithNoConnection() throws Exception {, + server.enqueue(new MockResponse(), + .addHeader("Connection: close"), + .setResponseCode(401), + .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));, +, + RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(null);, +, + client = client.newBuilder(), + .authenticator(authenticator), + .build();, +, + executeSynchronously("/"), + .assertCode(401);, +, + assertNotNull(authenticator.onlyRoute());, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.mockwebserver.internal.tls.HeldCertificate;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import static org.junit.Assert.assertNotNull;, + /**, + * We had a bug where we were passing a
[+++ b/pom.xml, + <!-- ALPN Versions targeted for each Java 8 minor release -->, + <!-- Check versions with this page: -->, + <!-- http://www.eclipse.org/jetty/documentation/current/alpn-chapter.html#alpn-chapterchapterversions -->, + <profile>, + <id>alpn-when-jdk8_05</id>, + <activation>, + <jdk>1.8.0_05</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.0.v20141016</alpn.jdk8.version>, + </properties>, + </profile>, + <profile>, + <id>alpn-when-jdk8_11</id>, + <activation>, + <jdk>1.8.0_11</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.0.v20141016</alpn.jdk8.version>, + </properties>, + </profile>, + <profile>, + <id>alpn-when-jdk8_20</id>, + <activation>, + <jdk>1.8.0_20</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.0.v20141016</alpn.jdk8.version>, + </properties>, + </profile>, + <profile>, + <id>alpn-when-jdk8_25</id>, + <activation>, + <jdk>1.8.0_25</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.2.v20141202</alpn.jdk8.version>, + </properties>, + </profile>, +
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', + <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', + <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', + <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/README.md, + URL baseUrl = server.getUrl("/v1/chat/");, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', + <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/README.md, + URL baseUrl = server.getUrl("/v1/chat/");, +++ b/mockwebserver/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', + <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/README.md, +
[+++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, + @Override public void setFixedLengthStreamingMode(long contentLength) {, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, + @Override public void setFixedLengthStreamingMode(long contentLength) {, +++ b/samples/guide/pom.xml, + <dependency>, + <groupId>com.google.code.gson</groupId>, + <artifactId>gson</artifactId>, + </dependency>, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, + @Override public void setFixedLengthStreamingMode(long contentLength) {, +++ b/samples/guide/pom.xml, + <dependency>, + <groupId>com.google.code.gson</groupId>, + <artifactId>gson</artifactId>, + </dependency>, +++ b/samples/guide/src/main/java/com/squareup/okhttp/guide/Recipes.java, +import com.google.gson.Gson;, +import com.squareup.okhttp.Cache;, +import java.io.File;, +import java.util.Map;, + public void parseResponseWithGson() throws Exception {, + OkHttpClient client = new OkHttpClient();, + Gson gson = new Gson();, +, + Request request = new Request.Builder(), + .url("https://api.github.com/gists/c2a7c39532239ff261be"), + .build();, + Response response = client.newCall(request).execute();, + Gist gist = gson.fromJson(response.body().charStream(), Gist.class);, +
[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/CHANGELOG.md, +## Version 3.4.1, +, +_2016-07-10_, +, + * **Fix an major bug in encoding HTTP headers.** In 3.4.0 and 3.4.0-RC1 OkHttp, + had an off-by-one bug in our HPACK encoder. This bug could have caused the, + wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone, + who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix., +, +, +++ b/CHANGELOG.md, +## Version 3.4.1, +, +_2016-07-10_, +, + * **Fix an major bug in encoding HTTP headers.** In 3.4.0 and 3.4.0-RC1 OkHttp, + had an off-by-one bug in our HPACK encoder.
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, + private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, + private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, + private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, + private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, + private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, + private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + * The sockets and streams of an HTTP, HTTPS, or HTTPS+SPDY connection. May be, + * used for multiple HTTP
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + // Limit the size of the request body that the server holds in memory to an arbitrary, + // 3.5 MBytes so this test can pass on devices with little memory., + server.setBodyLimit(7 * 512 * 1024);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + // Limit the size of the request body that the server holds in memory to an arbitrary, + // 3.5 MBytes so this test can pass on devices with little memory., + server.setBodyLimit(7 * 512 * 1024);, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java, + ? InetAddress.getLoopbackAddress()]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, + private WebSocketListener webSocketListener;, + public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, + public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, + private WebSocketListener webSocketListener;, + public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, + public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, + RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, + RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, + private WebSocketListener webSocketListener;, + public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, + public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, + RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, + RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, + private
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/Platform.java, +import android.util.Log;, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +import java.util.logging.Level;, +import javax.net.ssl.SSLParameters;, +import static okhttp3.internal.Internal.logger;, +, + // Attempt to find Android 2.3+ APIs., + try {, + Class<?> sslParametersClass;, + try {, + sslParametersClass = Class.forName("com.android.org.conscrypt.SSLParametersImpl");, + } catch (ClassNotFoundException
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import okhttp3.internal.Util;, + Headers headers = Util.EMPTY_HEADERS;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import okhttp3.internal.Util;, + Headers headers = Util.EMPTY_HEADERS;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + return Util.EMPTY_HEADERS;, + varyHeaders = Util.EMPTY_HEADERS;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import okhttp3.internal.Util;, + Headers headers = Util.EMPTY_HEADERS;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + return Util.EMPTY_HEADERS;, + varyHeaders = Util.EMPTY_HEADERS;, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, + assertEquals(0L, Util.EMPTY_HEADERS.byteCount());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import okhttp3.internal.Util;, + Headers headers = Util.EMPTY_HEADERS;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + return Util.EMPTY_HEADERS;, + varyHeaders = Util.EMPTY_HEADERS;, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, + assertEquals(0L, Util.EMPTY_HEADERS.byteCount());, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +, + @Test public void nonAsciiFilename() throws Exception {, + String expected = "", + + "--AaB03x\r\n", + + "Content-Disposition:
[+++ b/benchmarks/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/README.md, +Download [the latest JAR][1] or grab via Maven:, + <groupId>com.squareup.okhttp</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses, +[Jetty-NPN][3] which requires OpenJDK
[+++ b/benchmarks/pom.xml, + <id>alpn-when-jdk7</id>, + <groupId>org.mortbay.jetty.alpn</groupId>, + <artifactId>alpn-boot</artifactId>, + <version>${alpn.jdk7.version}</version>, + <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/pom.xml, + <id>alpn-when-jdk7</id>, + <groupId>org.mortbay.jetty.alpn</groupId>, + <artifactId>alpn-boot</artifactId>, + <version>${alpn.jdk7.version}</version>, + <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/benchmarks/pom.xml, + <id>alpn-when-jdk7</id>, + <groupId>org.mortbay.jetty.alpn</groupId>, + <artifactId>alpn-boot</artifactId>, + <version>${alpn.jdk7.version}</version>, + <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + * Sets whether ALPN is used on incoming HTTPS connections to, + * Indicates the protocols supported by ALPN on incoming HTTPS, +++ b/benchmarks/pom.xml, + <id>alpn-when-jdk7</id>, + <groupId>org.mortbay.jetty.alpn</groupId>, + <artifactId>alpn-boot</artifactId>,
[+++ b/benchmarks/pom.xml, + <version>3.11.0</version>, +++ b/benchmarks/pom.xml, + <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.11.0</version>, +++ b/benchmarks/pom.xml, + <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.11.0</version>, +++ b/okcurl/pom.xml, + <version>3.11.0</version>, +++ b/benchmarks/pom.xml, + <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.11.0</version>, +++ b/okcurl/pom.xml, + <version>3.11.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.11.0</version>, +++ b/benchmarks/pom.xml, + <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.11.0</version>, +++ b/okcurl/pom.xml, + <version>3.11.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.11.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.11.0</version>, +++ b/benchmarks/pom.xml, + <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.11.0</version>, +++ b/okcurl/pom.xml, + <version>3.11.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.11.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.11.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.11.0</version>, +++ b/benchmarks/pom.xml, + <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.11.0</version>, +++ b/okcurl/pom.xml, + <version>3.11.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +import java.util.Arrays.asList, + return bootstrapDnsHosts(asList(*bootstrapDnsHosts)), +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +import java.util.Arrays.asList, + return bootstrapDnsHosts(asList(*bootstrapDnsHosts)), +++ b/okhttp/build.gradle, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +import java.util.Arrays.asList, + return bootstrapDnsHosts(asList(*bootstrapDnsHosts)), +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.kt, + return other is Address, + && equalsNonHost(other), + return this.dns == that.dns, + && this.url().port() == that.url().port(), + return "Address{" +, + "${url.host()}:${url.port()}, " +, + (if (proxy != null) "proxy=$proxy" else "proxySelector=$proxySelector") +, + "}", +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +import java.util.Arrays.asList, + return bootstrapDnsHosts(asList(*bootstrapDnsHosts)), +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.kt, + return other is Address, + && equalsNonHost(other), + return this.dns == that.dns, + && this.url().port() == that.url().port(), + return "Address{" +, + "${url.host()}:${url.port()},
[+++ b/benchmarks/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, + Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, + Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropBadTest.java, + private static final String[] BAD_INTEROP_TESTS = {, + "hyper-hpack",, + "node-http2-protocol",, + "raw-data",, + "twitter-hpack", + };, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, + Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropBadTest.java, + private static final String[] BAD_INTEROP_TESTS = {, + "hyper-hpack",, + "node-http2-protocol",, + "raw-data",, + "twitter-hpack", + };, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropGoodTest.java, + // TODO: Filter on the json key for draft, which explains some of the failures., + private static final String[] GOOD_INTEROP_TESTS = {, + "go-hpack",, + "haskell-http2-linear",, + "haskell-http2-linear-huffman",,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, + } catch (InterruptedException ignored) {, + throw new AssertionError();, + throw new InterruptedIOException();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, + } catch (InterruptedException ignored) {, + throw new AssertionError();, + throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, + } catch (InterruptedException ignored) {, + throw new AssertionError();, + throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, + } catch (InterruptedException ignored) {, + throw new AssertionError();,
[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.kt, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/.travis.yml, +# - openjdk11, +++ b/.travis.yml, +# - openjdk11, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import javax.net.ssl.SSLException;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, + SSLException.class, // JDK 11 response to the FAIL_HANDSHAKE, + } catch (SSLException expected) {, + // JDK 11 response to the FAIL_HANDSHAKE, + String jvmVersion = System.getProperty("java.specification.version");, + assertEquals("11", jvmVersion);, +++ b/.travis.yml, +# - openjdk11, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import javax.net.ssl.SSLException;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, + SSLException.class, // JDK 11 response to the FAIL_HANDSHAKE, + } catch (SSLException expected) {, + // JDK 11 response to the FAIL_HANDSHAKE, + String jvmVersion = System.getProperty("java.specification.version");, + assertEquals("11", jvmVersion);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, + } catch (SSLException expected) {,
[+++ b/fuzzing/fuzzingserver-config.json, +{, + "url": "ws://127.0.0.1:9099",, + "outdir": "./target/fuzzingserver-report",, + "cases": ["*"],, + "exclude-cases": [, + "6.1.1",, + "6.1.2",, + "6.1.3",, + "6.2.1",, + "6.2.2",, + "6.2.3",, + "6.2.4",, + "6.3.1",, + "6.3.2",, + "6.4.1",, + "6.4.2",, + "6.4.3",, + "6.4.4",, + "6.5.1",, + "6.5.2",, + "6.5.3",, + "6.5.4",, + "6.5.5",, + "6.6.1",, + "6.6.2",, + "6.6.3",, + "6.6.4",, + "6.6.5",, + "6.6.6",, + "6.6.7",, + "6.6.8",, + "6.6.9",, + "6.6.10",, + "6.6.11",, + "6.7.1",, + "6.7.2",, + "6.7.3",, + "6.7.4",, + "6.8.1",, + "6.8.2",, + "6.9.1",, + "6.9.2",, + "6.9.3",, + "6.9.4",, + "6.10.1",, + "6.10.2",, + "6.10.3",,
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.QueueDispatcher;, + /**, + * We don't know if the connection will support HTTP/2 until after we've connected. When multiple, + * connections are requested concurrently OkHttp will pessimistically connect multiple times, then, + * close any unnecessary connections. This test confirms that behavior works as intended., + *, + * <p>This test uses proxy tunnels to get a hook while a connection is being established., + */, + @Test public void concurrentHttp2ConnectionsDeduplicated() throws Exception {, + server.useHttps(sslClient.socketFactory, true);, +, + // Force a fresh connection pool for the test., + client.connectionPool().evictAll();, +, +
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;, + HttpsURLConnectionImpl.setDefaultHostnameVerifier(hostnameVerifier);, + HttpsURLConnectionImpl.setDefaultSSLSocketFactory(socketFactory);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;, + HttpsURLConnectionImpl.setDefaultHostnameVerifier(hostnameVerifier);, + HttpsURLConnectionImpl.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, + <module name="UnusedImports"/>
[+++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *
[+++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons. It uses a local, + * connection to a MockWebServer to measure how many identical requests per second can be carried, + * over a fixed number of threads., +++
[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Base64.java, +/*, + * Licensed to the Apache Software Foundation (ASF) under one or more, + * contributor license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright ownership., + * The ASF licenses this file to You under the Apache License, Version 2.0, + * (the "License"); you may not use this file except in compliance with, + * the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software,
[+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, + private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, + 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, + Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, + private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, + 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, + Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, + private final String name;, + public NamedRunnable(String format, Object... args) {, + this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, + private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, + 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, + Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, + private final String name;, + public NamedRunnable(String format, Object... args) {, + this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;,
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, + HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, + HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, + HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, + HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, + <module name="UnusedImports">
[+++ b/.circleci/config.yml, +++ b/.circleci/config.yml, +++ b/build.gradle, + 'conscrypt': '2.1.0',, +++ b/.circleci/config.yml, +++ b/build.gradle, + 'conscrypt': '2.1.0',, +++ b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, + data.write(ByteString.decodeHex("0a00")); // Empty ping., + data.write(ByteString.decodeHex("9a00")); // Empty ping, flag 1 set., + data.write(ByteString.decodeHex("aa00")); // Empty ping, flag 2 set., + data.write(ByteString.decodeHex("ca00")); // Empty ping, flag 3 set.]
[+++ /dev/null, +++ /dev/null, +++ b/benchmarks/pom.xml, + <groupId>com.google.caliper</groupId>, + <artifactId>caliper</artifactId>, + <version>1.0-beta-1</version>, + </dependency>, + <dependency>, + <!-- Netty needs this if gzip is enabled. -->, + <dependency>, + <groupId>com.jcraft</groupId>, + <artifactId>jzlib</artifactId>, + <version>1.1.2</version>, + </dependency>, +++ /dev/null, +++ b/benchmarks/pom.xml, + <groupId>com.google.caliper</groupId>, + <artifactId>caliper</artifactId>, + <version>1.0-beta-1</version>, + </dependency>, + <dependency>, + <!-- Netty needs this if gzip is enabled. -->, + <dependency>, + <groupId>com.jcraft</groupId>, + <artifactId>jzlib</artifactId>, + <version>1.1.2</version>, + </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, + long total = readAllAndClose(in);, +++ /dev/null, +++ b/benchmarks/pom.xml, + <groupId>com.google.caliper</groupId>, + <artifactId>caliper</artifactId>, + <version>1.0-beta-1</version>, + </dependency>, + <dependency>, + <!-- Netty needs this if gzip is
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, + @Test public void isClosed_uninitializedCache() throws Exception {, +
[+++ b/README.md, +Building, +--------, +, +### On the Desktop, +Run OkHttp tests on the desktop with Maven., +```, +mvn clean test, +```, +SPDY support uses a Deflater API that wasn't available in Java 6. For this reason SPDY tests will fail with this error: `Cannot SPDY; no SYNC_FLUSH available`. All other tests should run fine., +, +### On the Desktop with NPN, +Using NPN on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +```, +mvn clean test -Pspdy-tls, +```, +, +### On a Device, +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, + byte[] bytes = new byte[bodyByteCount];, + random.nextBytes(bytes);, + Buffer body = new Buffer().write(bytes);, + Buffer gzipBody = new Buffer();, + GzipSink gzipSink = new GzipSink(gzipBody);, + gzipSink.write(body, body.size());, + gzipSink.close();, + body = gzipBody;, + result.setChunkedBody(body, 1024);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, + byte[] bytes = new byte[bodyByteCount];, + random.nextBytes(bytes);, + Buffer body = new Buffer().write(bytes);, + Buffer gzipBody = new Buffer();, + GzipSink gzipSink = new GzipSink(gzipBody);, + gzipSink.write(body, body.size());, + gzipSink.close();, + body = gzipBody;, + result.setChunkedBody(body, 1024);, +++ b/mockwebserver/pom.xml, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, + byte[] bytes = new byte[bodyByteCount];, + random.nextBytes(bytes);, +
[+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, + @Override public Transmitter transmitter(Call call) {, + return ((RealCall) call).transmitter();, + @Override public void initDeferredTrailers(, + Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, + responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, + @Override public Transmitter transmitter(Call call) {, + return ((RealCall) call).transmitter();, + @Override public void initDeferredTrailers(, + Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, + responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.Transmitter;, + * There is a cycle between the {@link Call} and {@link Transmitter} that makes this awkward., + * This is set after immediately after creating the call instance., + private Transmitter transmitter;, + call.transmitter
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + if (protocols.contains(Protocol.H2C) && protocols.size() > 1) {, + // when using h2c prior knowledge, no other protocol should be supported., + throw new IllegalArgumentException("protocols containing h2c cannot use other protocols: ", + + protocols);, + } else if (!protocols.contains(Protocol.H2C) && !protocols.contains(Protocol.HTTP_1_1)) {, + public List<Protocol> protocols() {, + return protocols;, + }, +, + } else if (protocols.contains(Protocol.H2C)) {, + socket = raw;, + protocol = Protocol.H2C;, + if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, + } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + if (protocols.contains(Protocol.H2C) && protocols.size()
[+++ b/benchmarks/pom.xml, + <version>3.1.2</version>, +++ b/benchmarks/pom.xml, + <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.2</version>, +++ b/benchmarks/pom.xml, + <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.2</version>, +++ b/okcurl/pom.xml, + <version>3.1.2</version>, +++ b/benchmarks/pom.xml, + <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.2</version>, +++ b/okcurl/pom.xml, + <version>3.1.2</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.2</version>, +++ b/benchmarks/pom.xml, + <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.2</version>, +++ b/okcurl/pom.xml, + <version>3.1.2</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.2</version>, +++ b/okhttp-apache/pom.xml, + <version>3.1.2</version>, +++ b/benchmarks/pom.xml, + <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.2</version>, +++ b/okcurl/pom.xml, + <version>3.1.2</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.2</version>, +++ b/okhttp-apache/pom.xml, + <version>3.1.2</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.1.2</version>, +++ b/benchmarks/pom.xml, + <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.2</version>, +++ b/okcurl/pom.xml, + <version>3.1.2</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/README.md, +```, +```, +```, +```, +```, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>,
[+++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs for interacting with cipher suites and TLS versions., + * Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs for interacting with cipher suites and TLS versions., + * Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, + <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', + <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs
[+++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, + // TODO(jwilson): test that we're interrupted once Okio retains interrupted state., + // https://github.com/square/okhttp/issues/3107, + if (false) assertTrue(Thread.interrupted());, + // TODO(jwilson): test that we're interrupted once Okio retains interrupted state., + // https://github.com/square/okhttp/issues/3107, + if (false) assertTrue(Thread.interrupted());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, + // TODO(jwilson): test that we're interrupted once Okio retains interrupted state., + // https://github.com/square/okhttp/issues/3107, + if (false) assertTrue(Thread.interrupted());, + // TODO(jwilson): test that we're interrupted once Okio retains interrupted state., + // https://github.com/square/okhttp/issues/3107, + if (false) assertTrue(Thread.interrupted());, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, + // TODO(jwilson): test that we're interrupted once Okio retains interrupted state., + // https://github.com/square/okhttp/issues/3107,
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, + "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, + "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, + "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, + streamAllocation.streamFinished(true, streamAllocation.codec(), -1L, null);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, + "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, + streamAllocation.streamFinished(true, streamAllocation.codec(), -1L, null);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, + public void streamFinished(boolean noNewStreams, HttpCodec codec, long bytesRead, IOException e) {, + eventListener.responseBodyEnd(call, bytesRead);, +, + boolean callEnd;, + callEnd = this.released;, +, + if (e != null) {, + eventListener.callFailed(call, e);,
[+++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_171</id>, + <activation>, + <jdk>1.8.0_171</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.12.v20180117</alpn.jdk8.version>, + </properties>, + </profile>, + <profile>, + <id>alpn-when-jdk8_172</id>, + <activation>, + <jdk>1.8.0_172</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.12.v20180117</alpn.jdk8.version>, + </properties>]
[+++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, + int result = Objects.hashCode(id);, + result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, + int result = Objects.hashCode(id);, + result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, + Response response = call.execute();, +, + Response response = call.execute();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, + int result = Objects.hashCode(id);, + result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, + Response response = call.execute();, +, + Response response = call.execute();, +++ b/okhttp/src/main/java/okhttp3/Address.java, + result = 31 * result + Objects.hashCode(proxy);, + result = 31 * result + Objects.hashCode(sslSocketFactory);, + result = 31 * result + Objects.hashCode(hostnameVerifier);, + result
[+++ /dev/null, +++ /dev/null, +++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/Authenticate.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/benchmarks/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>benchmarks</artifactId>, + <name>Benchmarks</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>org.bouncycastle</groupId>, + <artifactId>bcprov-jdk15on</artifactId>, + </dependency>, + <dependency>, + <groupId>org.mortbay.jetty.npn</groupId>, + <artifactId>npn-boot</artifactId>, + <scope>provided</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/benchmarks/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + </parent>, +, +
[+++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java, +import okhttp3.internal.http2.Header;, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java, +import okhttp3.internal.http2.Header;, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static okhttp3.internal.Util.indexOf;, + if (isFallback && indexOf(sslSocket.getSupportedCipherSuites(), "TLS_FALLBACK_SCSV") != -1) {, + if (indexOf(b, toFind) != -1) {, +++ b/okhttp-hpacktests/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java, +import okhttp3.internal.http2.Header;, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static okhttp3.internal.Util.indexOf;, + if (isFallback && indexOf(sslSocket.getSupportedCipherSuites(), "TLS_FALLBACK_SCSV") != -1) {, + if (indexOf(b, toFind) != -1) {, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +
[+++ b/CHANGELOG.md, + charset for the remaining bytes. Most applications should not not need a byte order mark., + * New: Update HTTP/2 support to to `h2-16` and `hpack-10`., +++ b/CHANGELOG.md, + charset for the remaining bytes. Most applications should not not need a byte order mark., + * New: Update HTTP/2 support to to `h2-16` and `hpack-10`., +++ b/README.md, + <version>3.6.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.6.0', + <version>3.6.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.6.0', +-dontwarn okhttp3.**, +++ b/CHANGELOG.md, + charset for the remaining bytes. Most applications should not not need a byte order mark., + * New: Update HTTP/2 support to to `h2-16` and `hpack-10`.,
[+++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +import okhttp3.internal.platform.Platform;, + private SSLContext sslContext;, + public Builder sslContext(SSLContext sslContext) {, + this.sslContext = sslContext;, + return this;, + }, +, + SSLContext activeSslContext =, + this.sslContext != null ? this.sslContext : Platform.get().getSSLContext();, + activeSslContext.init(keyManagerFactory.getKeyManagers(), trustManagers,, + new SecureRandom());, + return new SslClient(activeSslContext, (X509TrustManager) trustManagers[0]);, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +import okhttp3.internal.platform.Platform;, + private SSLContext sslContext;, + public Builder sslContext(SSLContext sslContext) {, + this.sslContext = sslContext;, + return this;, + }, +, + SSLContext activeSslContext =, + this.sslContext != null ? this.sslContext : Platform.get().getSSLContext();, + activeSslContext.init(keyManagerFactory.getKeyManagers(), trustManagers,, + new SecureRandom());, + return new SslClient(activeSslContext, (X509TrustManager) trustManagers[0]);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + bytesOut.writeUtf8("0\r\n"); // Last chunk. Trailers follow!, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + bytesOut.writeUtf8("0\r\n"); // Last chunk. Trailers follow!, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + writeHeaders(sink, response.getHeaders());, +, + Buffer body = response.getBody();, + if (body == null) return;, + sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, + throttledTransfer(response, socket, body, sink, body.size(), false);, +, + if ("chunked".equalsIgnoreCase(response.getHeaders().get("Transfer-Encoding"))) {, + writeHeaders(sink, response.getTrailers());, + }, + }, +, + private void writeHeaders(BufferedSink sink, Headers headers) throws IOException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + bytesOut.writeUtf8("0\r\n"); // Last chunk. Trailers follow!, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + writeHeaders(sink, response.getHeaders());, +, + Buffer body = response.getBody();, + if (body == null) return;, + sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, + throttledTransfer(response, socket, body,
[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotNull;, + /**, + * These public suffixes were selected by inspecting the publicsuffix.org list. It's possible they, + * may change in the future. If this test begins to fail, please double check they are still, + * present in the public suffix list., + */, + @Test public void domainIsPublicSuffix() {, + HttpUrl ascii = HttpUrl.parse("https://foo1.foo.bar.elb.amazonaws.com");, + assertNotNull(Cookie.parse(ascii, "a=b; domain=foo.bar.elb.amazonaws.com"));, + assertNull(Cookie.parse(ascii, "a=b; domain=bar.elb.amazonaws.com"));, + assertNull(Cookie.parse(ascii, "a=b; domain=com"));, +, + HttpUrl unicode = HttpUrl.parse("https://長.長.長崎.jp");, + assertNotNull(Cookie.parse(unicode, "a=b; domain=長.長崎.jp"));, + assertNull(Cookie.parse(unicode, "a=b; domain=長崎.jp"));, +, + HttpUrl punycode = HttpUrl.parse("https://xn--ue5a.xn--ue5a.xn--8ltr62k.jp");, + assertNotNull(Cookie.parse(punycode, "a=b; domain=xn--ue5a.xn--8ltr62k.jp"));, +
[+++ b/benchmarks/pom.xml, + <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.4.0-RC1</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, + <version>3.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/benchmarks/pom.xml, + <version>3.6.0</version>, +++ b/benchmarks/pom.xml, + <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.6.0</version>, +++ b/benchmarks/pom.xml, + <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.6.0</version>, +++ b/okcurl/pom.xml, + <version>3.6.0</version>, +++ b/benchmarks/pom.xml, + <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.6.0</version>, +++ b/okcurl/pom.xml, + <version>3.6.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.6.0</version>, +++ b/benchmarks/pom.xml, + <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.6.0</version>, +++ b/okcurl/pom.xml, + <version>3.6.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.6.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.6.0</version>, +++ b/benchmarks/pom.xml, + <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.6.0</version>, +++ b/okcurl/pom.xml, + <version>3.6.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.6.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.6.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.6.0</version>, +++ b/benchmarks/pom.xml, + <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.6.0</version>, +++ b/okcurl/pom.xml, + <version>3.6.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp/pom.xml, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-javadoc-plugin</artifactId>, + <configuration>, + <excludePackageNames>com.squareup.okhttp.internal:com.squareup.okhttp.internal.*</excludePackageNames>, + </configuration>, + </plugin>, + </plugins>, + </build>, +++ b/okhttp/pom.xml, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-javadoc-plugin</artifactId>, + <configuration>, + <excludePackageNames>com.squareup.okhttp.internal:com.squareup.okhttp.internal.*</excludePackageNames>, + </configuration>, + </plugin>, + </plugins>, + </build>, +++ b/pom.xml, + <artifactId>maven-javadoc-plugin</artifactId>, + <version>2.9</version>, + </plugin>, +, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +import java.util.LinkedHashMap;, +import java.util.Map;, + private final Map<String, List<InetAddress>> hostAddresses = new LinkedHashMap<>();, + private final List<String> requestedHosts = new ArrayList<>();, + private int nextAddress = 100;, + /** Sets the results for {@code hostname}. */, + public FakeDns set(String hostname, List<InetAddress> addresses) {, + hostAddresses.put(hostname, addresses);, + /** Clears the results for {@code hostname}. */, + public FakeDns clear(String hostname) {, + hostAddresses.remove(hostname);, + public InetAddress lookup(String hostname, int index) throws UnknownHostException {, + return hostAddresses.get(hostname).get(index);, +, + List<InetAddress> result = hostAddresses.get(hostname);, + if (result != null) return result;, +, + throw new UnknownHostException();, +, +
[+++ b/okhttp-protocols/pom.xml, + <dependency>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-annotations</artifactId>, + <version>1.10</version>, + <optional>true</optional>, + </dependency>, +++ b/okhttp-protocols/pom.xml, + <dependency>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-annotations</artifactId>, + <version>1.10</version>, + <optional>true</optional>, + </dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, + void emitCompleteSegments(Deadline deadline) throws IOException {, +++ b/okhttp-protocols/pom.xml, + <dependency>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-annotations</artifactId>, + <version>1.10</version>, + <optional>true</optional>, + </dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, + void emitCompleteSegments(Deadline deadline) throws IOException {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/DeflaterSink.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + *
[+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, + private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, + 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, + Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, + private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, + 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, + Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, + private final String name;, + public NamedRunnable(String format, Object... args) {, + this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, + private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, + 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, + Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, + private final String name;, + public NamedRunnable(String format, Object... args) {, + this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;,
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, + private final Address addressC = newAddress("c");, + private final Route routeC1 = newRoute(addressC);, + ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, + RealConnection c1 = newConnection(routeA1, 50L);, + ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, + RealConnection c1 = newConnection(routeA1, 50L);, + ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, + RealConnection c1 = newConnection(routeA1, 75L);, + RealConnection c2 = newConnection(routeB1, 50L);, + @Test public void oldestConnectionsEvictedIfIdleLimitExceeded() throws Exception {, + ConnectionPool pool = new ConnectionPool(2, 100L, TimeUnit.NANOSECONDS);, + pool.setCleanupRunnableForTest(emptyRunnable);, +, + RealConnection c1 = newConnection(routeA1, 50L);, + pool.put(c1);, +,
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/cache2/FileOperatorTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.net.Inet6Address;, +import java.net.InetAddress;, + String path = requestLine.substring(methodEnd + 1, pathEnd);, + if (!path.startsWith("/")) {, + path = "/";, + }, + this.path = path;, + InetAddress inetAddress = socket.getInetAddress();, +, + String hostname = inetAddress.getHostName();, + if (inetAddress instanceof Inet6Address) {, + hostname = "[" + hostname + "]";, + }, +, + // Allow null in failure case to allow for testing bad requests, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.net.Inet6Address;, +import java.net.InetAddress;, + String path = requestLine.substring(methodEnd + 1, pathEnd);, + if (!path.startsWith("/")) {, + path = "/";, + }, + this.path = path;, + InetAddress
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, + } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, + shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, + } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, + shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, + * Shutdown {@link MockWebServer} after writing response., + */, + SHUTDOWN_SERVER_AFTER_RESPONSE,, +, + /**, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, + } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, + shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, + * Shutdown {@link MockWebServer} after writing response., + */, + SHUTDOWN_SERVER_AFTER_RESPONSE,, +, + /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void shutdownServerAfterRequest() throws Exception {, + server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE));, +, + URL url = server.url("/").url();, +,
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.3.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.0', + <version>3.3.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.0', +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.3.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.0', + <version>3.3.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.0', +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, + SSLContext sslContext = SslContextBuilder.localhost();, + new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.3.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.0', + <version>3.3.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.0', +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, + SSLContext sslContext = SslContextBuilder.localhost();, + new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, + SSLContext sslContext = SslContextBuilder.localhost();, + server.useHttps(sslContext.getSocketFactory(), false);, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.3.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.0', + <version>3.3.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.0', +++
[+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, + assertEquals("B", readAscii(openConnection(url)));, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, + assertEquals("B", readAscii(openConnection(url)));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + /**, + * When the server returns a full response body we will store it and return it regardless of what, + * its Last-Modified date is. This behavior was different prior to OkHttp 3.5 when we would prefer, + * the response with the later Last-Modified date., + *, + * https://github.com/square/okhttp/issues/2886, + */, + server.enqueue(new MockResponse(), + .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, + assertEquals("B", get(url).body().string());, + assertEquals("B", get(url).body().string());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, + assertEquals("B", readAscii(openConnection(url)));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + /**, + * When the server returns a full response body we
[+++ b/README.md, + <groupId>com.squareup.okhttp3</groupId>, + <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', + <groupId>com.squareup.okhttp3</groupId>, + <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/README.md, + <groupId>com.squareup.okhttp3</groupId>, + <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', + <groupId>com.squareup.okhttp3</groupId>, + <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/README.md, + <groupId>com.squareup.okhttp3</groupId>, +++ b/README.md, + <groupId>com.squareup.okhttp3</groupId>, + <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', + <groupId>com.squareup.okhttp3</groupId>, + <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/README.md, + <groupId>com.squareup.okhttp3</groupId>, +++ b/okhttp-logging-interceptor/README.md, + <groupId>com.squareup.okhttp3</groupId>, +++ b/README.md, + <groupId>com.squareup.okhttp3</groupId>, + <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', + <groupId>com.squareup.okhttp3</groupId>, + <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/README.md, + <groupId>com.squareup.okhttp3</groupId>, +++ b/okhttp-logging-interceptor/README.md, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + throw new AssertionError(e);, + throw new AssertionError(e);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + throw new AssertionError(e);, + throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + throw new AssertionError(e);, + throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void disconnectRequestHalfway() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, +
[+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +import java.net.SocketTimeoutException;, + @Test public void chainWithReadTimeout() throws Exception {, + Interceptor interceptor1 = new Interceptor() {, + @Override public Response intercept(Chain chainA) throws IOException {, + assertEquals(5000, chainA.readTimeoutMillis());, +, + Chain chainB = chainA.withReadTimeout(100, TimeUnit.MILLISECONDS);, + assertEquals(100, chainB.readTimeoutMillis());, +, + return chainB.proceed(chainA.request());, + }, + };, +, + Interceptor interceptor2 = new Interceptor() {, + @Override public Response intercept(Chain chain) throws IOException {, + assertEquals(100, chain.readTimeoutMillis());, + return chain.proceed(chain.request());, + }, + };, +, + client = client.newBuilder(), + .readTimeout(5, TimeUnit.SECONDS), + .addInterceptor(interceptor1), + .addInterceptor(interceptor2), + .build();, +, + server.enqueue(new MockResponse(), + .setBody("abc"), + .throttleBody(1, 1,
[+++ b/pom.xml, + <mockwebserver.version>20130505</mockwebserver.version>]
[+++ b/benchmarks/pom.xml, + <version>2.7.0</version>, +++ b/benchmarks/pom.xml, + <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.7.0</version>, +++ b/benchmarks/pom.xml, + <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.7.0</version>, +++ b/okcurl/pom.xml, + <version>2.7.0</version>, +++ b/benchmarks/pom.xml, + <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.7.0</version>, +++ b/okcurl/pom.xml, + <version>2.7.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.7.0</version>, +++ b/benchmarks/pom.xml, + <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.7.0</version>, +++ b/okcurl/pom.xml, + <version>2.7.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.7.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.7.0</version>, +++ b/benchmarks/pom.xml, + <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.7.0</version>, +++ b/okcurl/pom.xml, + <version>2.7.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.7.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.7.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>2.7.0</version>, +++ b/benchmarks/pom.xml, + <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.7.0</version>, +++ b/okcurl/pom.xml, + <version>2.7.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/mockwebserver/README.md, + HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/README.md, + HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void close() throws IOException {, + replyExecutor.shutdown();, +++ b/mockwebserver/README.md, + HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void close() throws IOException {, + replyExecutor.shutdown();, +++ b/okhttp-logging-interceptor/README.md, +Logging Interceptor, +===================, +, +An [OkHttp interceptor][1] which logs HTTP request and response data., +, +```java, +OkHttpClient client = new OkHttpClient();, +HttpLoggingInterceptor logging = new HttpLoggingInterceptor();, +logging.setLevel(Level.BASIC);, +client.interceptors().add(logging);, +```, +, +You can change the log level at any time by calling `setLevel`., +, +To log to a custom location, pass a `Logger`
[+++ b/benchmarks/pom.xml, + <version>2.0.0</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0</version>, +++ b/okcurl/pom.xml, + <version>2.0.0</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0</version>, +++ b/okcurl/pom.xml, + <version>2.0.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0</version>, +++ b/okcurl/pom.xml, + <version>2.0.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0</version>, +++ b/okcurl/pom.xml, + <version>2.0.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.0.0</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0</version>, +++ b/okcurl/pom.xml, + <version>2.0.0</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + String[] parts = header.split(":", -1);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + for (int i = 302; i <= 308; ++i) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + for (int i = 302; i <= 308; ++i) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + @Test public void userAgentIsOmittedByDefault() throws Exception {, + assertNull(recordedRequest.getHeader("User-Agent"));, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + for (int i = 302; i <= 308; ++i) {,
[+++ b/benchmarks/pom.xml, + <!-- caliper needs to be updated to be compatible with guava 16 -->, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <version>14.0.1</version>, + </dependency>, +++ b/benchmarks/pom.xml, + <!-- caliper needs to be updated to be compatible with guava 16 -->, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <version>14.0.1</version>, + </dependency>, +++ b/okhttp-protocols/pom.xml, +++ b/benchmarks/pom.xml, + <!-- caliper needs to be updated to be compatible with guava 16 -->, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + <version>14.0.1</version>, + </dependency>, +++ b/okhttp-protocols/pom.xml, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, + private void emitCompleteSegments(Deadline deadline) throws IOException {, +++ b/benchmarks/pom.xml, + <!-- caliper needs to
[+++ b/CHANGELOG.md, +## Version 3.6.0, +, +_2017-01-29_, +, + * Fix: Don't crash with a "cache is closed" error when there is an error initializing the cache., + * Fix: Calling `disconnect()` on a connecting `HttpUrlConnection` could cause it to retry in an, + infinite loop! This regression was introduced in OkHttp 2.7.0., + * Fix: Drop cookies that contain ASCII NULL and other bad characters. Previously such cookies, + would cause OkHttp to crash when they were included in a request., + * Fix: Release duplicated multiplexed connections. If we concurrently establish connections to an, + HTTP/2 server,
[+++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import com.squareup.okhttp.ws.WebSocket;, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import com.squareup.okhttp.ws.WebSocket;, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + private static Logger frameLogger;, + frameLogger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, + frameLogger.setLevel(Level.FINE);, + frameLogger.addHandler(handler);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + private static Logger frameLogger;, + frameLogger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, + frameLogger.setLevel(Level.FINE);, + frameLogger.addHandler(handler);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.SocketTimeoutException;, + * Make a request with two routes. The first route will time out because it's connecting to a, + * special address that never connects. The automatic retry will succeed., + InetSocketAddress unreachableAddress = new InetSocketAddress("10.255.255.1", 8080);, +, + RecordingProxySelector proxySelector = new RecordingProxySelector();, + proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, unreachableAddress));, + proxySelector.proxies.add(server.toProxyAddress());, +, + server.enqueue(new MockResponse(), + .setBody("success!"));, +, + client =
[+++ b/okhttp/build.gradle, + classExcludes = [, + // Package-private in 3.x, internal in 4.0.0:, + 'okhttp3.Cache$CacheResponseBody$1',, + ], + 'okhttp3.Cache#delete()',, + 'okhttp3.Cache#directory()',, + 'okhttp3.Cache#evictAll()',, + 'okhttp3.Cache#hitCount()',, + 'okhttp3.Cache#initialize()',, + 'okhttp3.Cache#isClosed()',, + 'okhttp3.Cache#maxSize()',, + 'okhttp3.Cache#networkCount()',, + 'okhttp3.Cache#requestCount()',, + 'okhttp3.Cache#size()',, + 'okhttp3.Cache#urls()',, + 'okhttp3.Cache#writeAbortCount()',, + 'okhttp3.Cache#writeSuccessCount()',, +++ b/okhttp/build.gradle, + classExcludes = [, + // Package-private in 3.x, internal in 4.0.0:, + 'okhttp3.Cache$CacheResponseBody$1',, + ], + 'okhttp3.Cache#delete()',, + 'okhttp3.Cache#directory()',, + 'okhttp3.Cache#evictAll()',, + 'okhttp3.Cache#hitCount()',, + 'okhttp3.Cache#initialize()',, + 'okhttp3.Cache#isClosed()',, + 'okhttp3.Cache#maxSize()',, + 'okhttp3.Cache#networkCount()',, + 'okhttp3.Cache#requestCount()',, + 'okhttp3.Cache#size()',, + 'okhttp3.Cache#urls()',, + 'okhttp3.Cache#writeAbortCount()',, + 'okhttp3.Cache#writeSuccessCount()',, +++ /dev/null, +++ b/okhttp/build.gradle, + classExcludes = [, + // Package-private
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + @Test public void setFollowRedirectsFalse() throws Exception {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, + @Test public void setProtocolsRejectsHttp10() throws Exception {, + OkHttpClient client = new OkHttpClient();, + try {, + client.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));, + fail();, + } catch (IllegalArgumentException expected) {, + }, + }, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, + @Test public void setProtocolsRejectsHttp10() throws Exception {, + OkHttpClient client = new OkHttpClient();, + try {,
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, + @Override public Socket createSocket() throws IOException {, + @Override
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, + /**, + * Release any resources held by this dispatcher. Any requests that are currently being dispatched, + * should return immediately. Responses returned after shutdown will not be transmitted: their, + * socket connections have already been closed., + */, + public void shutdown() {, + }, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, + Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java,
[+++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/CacheAdapterTest.java, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, +import okio.Buffer;, + private SSLContext sslContext = SslContextBuilder.localhost();, + private HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, + client.setHostnameVerifier(hostnameVerifier);, + client.setHostnameVerifier(hostnameVerifier);, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/CacheAdapterTest.java, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, +import okio.Buffer;, + private SSLContext sslContext = SslContextBuilder.localhost();, + private HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, + client.setHostnameVerifier(hostnameVerifier);, + client.setHostnameVerifier(hostnameVerifier);, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, + private HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, + private SSLContext sslContext = SslContextBuilder.localhost();, + c1.setHostnameVerifier(hostnameVerifier);, + c2.setHostnameVerifier(hostnameVerifier);, + client.setHostnameVerifier(hostnameVerifier);, + client.setHostnameVerifier(hostnameVerifier);, + client.setHostnameVerifier(hostnameVerifier);, + connection1.setHostnameVerifier(hostnameVerifier);, + connection2.setHostnameVerifier(hostnameVerifier);, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/CacheAdapterTest.java, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, +import okio.Buffer;, + private SSLContext sslContext = SslContextBuilder.localhost();, + private HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, + client.setHostnameVerifier(hostnameVerifier);, +
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + /** We forbid non-ASCII characters in outgoing request headers, but accept UTF-8. */, + @Test public void responseHeaderParsingIsLenient() throws Exception {, + Headers headers = new Headers.Builder(), + .add("Content-Length", "0"), + .addLenient("a\tb: c\u007fd"), + .addLenient(": ef"), + .addLenient("\ud83c\udf69: \u2615\ufe0f"), + .build();, + server.enqueue(new MockResponse().setHeaders(headers));, +, + Request request = new Request.Builder(), + .url(server.url("/")), + .build();, +, + executeSynchronously(request), + .assertHeader("a\tb", "c\u007fd"), + .assertHeader("\ud83c\udf69", "\u2615\ufe0f"), + .assertHeader("", "ef");, + }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + /** We forbid non-ASCII characters in outgoing request headers, but accept UTF-8. */, + @Test public void responseHeaderParsingIsLenient() throws Exception {, + Headers
[+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, + stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.EXPECT_CONTINUE;, + boolean readBody = true;, + && lowercaseHeader.substring(7).trim().equalsIgnoreCase("100-continue")) {, + readBody = false;, + if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, + readBody = true;, + if (!readBody) {, + // Don't read the body unless we've invited the client to send it., + } else if (contentLength != -1) {, + boolean readBody = true;, + if (name.utf8().equals("expect") && value.equalsIgnoreCase("100-continue")) {, + // Don't read the body unless we've invited the
[+++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +import java.security.cert.TrustAnchor;, +import okhttp3.internal.tls.BasicTrustRootIndex;, +import okhttp3.internal.tls.TrustRootIndex;, + @Override, + public TrustRootIndex buildTrustRootIndex(X509TrustManager trustManager) {, +, + try {, + // From org.conscrypt.TrustManagerImpl, we want the method with this signature:, + // private TrustAnchor findTrustAnchorByIssuerAndSignature(X509Certificate lastCert);, + Method method = trustManager.getClass().getDeclaredMethod(, + "findTrustAnchorByIssuerAndSignature", X509Certificate.class);, + method.setAccessible(true);, + return new AndroidTrustRootIndex(trustManager, method);, + } catch (NoSuchMethodException e) {, + return super.buildTrustRootIndex(trustManager);, + }, + }, +, +, + /**, + * An index of trusted root certificates that exploits knowledge of Android implementation, + * details. This class is potentially much faster to initialize than {@link BasicTrustRootIndex}, + *
[+++ b/.travis.yml, + - oraclejdk8, +++ b/.travis.yml, + - oraclejdk8, +++ b/README.md, +Run OkHttp tests on the desktop with Maven. Running HTTP/2 and SPDY tests on the desktop uses, +[Jetty-NPN][3] when running OpenJDK 7 or [Jetty-ALPN][4] when OpenJDK 8., +Test on a USB-attached Android using [Vogar][5]. Unfortunately `dx` requires that you build with, +Download [the latest JAR][6] or grab via Maven:, + [4]: https://github.com/jetty-project/jetty-alpn, + [5]: https://code.google.com/p/vogar/, + [6]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/.travis.yml, + - oraclejdk8, +++ b/README.md, +Run OkHttp tests on the desktop with Maven. Running HTTP/2 and SPDY tests on the desktop uses, +[Jetty-NPN][3] when running OpenJDK 7
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, + @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, + private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + static
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting
[+++ b/pom.xml, + <plugin>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-maven-plugin</artifactId>, + <version>1.9</version>, + <executions>, + <execution>, + <phase>test</phase>, + <goals>, + <goal>check</goal>, + </goals>, + </execution>, + </executions>, + <configuration>, + <signature>, + <groupId>org.codehaus.mojo.signature</groupId>, + <artifactId>java15</artifactId>, + <version>1.0</version>, + </signature>, + </configuration>, + </plugin>]
[+++ b/src/main/java/com/squareup/okhttp/ExtendedResponseCache.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *
[+++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, + private static final String HOST = "ws://localhost:9099";, + webSocket.close(1000, null);, +++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, + private static final String HOST = "ws://localhost:9099";, + webSocket.close(1000, null);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.validateCloseCode;, + private static final long MAX_QUEUE_SIZE = 16 * 1024 * 1024; // 16 MiB., + validateCloseCode(code);, +++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt,
[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, + @Test public void domainMatchesIpv6Address() throws Exception {, + Cookie cookie = Cookie.parse(HttpUrl.parse("http://[::1]/"), "a=b; domain=::1");, + assertEquals("::1", cookie.domain());, + assertTrue(cookie.matches(HttpUrl.parse("http://[::1]/")));, + }, +, + @Test public void domainMatchesIpv6AddressWithCompression() throws Exception {, + Cookie cookie = Cookie.parse(HttpUrl.parse("http://[0001:0000::]/"), "a=b; domain=0001:0000::");, + assertEquals("1::", cookie.domain());, + assertTrue(cookie.matches(HttpUrl.parse("http://[1::]/")));, + }, +, + @Test public void domainMatchesIpv6AddressWithIpv4Suffix() throws Exception {, + Cookie cookie = Cookie.parse(, + HttpUrl.parse("http://[::1:ffff:ffff]/"), "a=b; domain=::1:255.255.255.255");, + assertEquals("::1:ffff:ffff", cookie.domain());, + assertTrue(cookie.matches(HttpUrl.parse("http://[::1:ffff:ffff]/")));, + }, +, + @Test public void ipv6AddressDoesntMatch() throws Exception {, + Cookie cookie = Cookie.parse(HttpUrl.parse("http://[::1]/"), "a=b; domain=::2");, + assertNull(cookie);, + }, +, + @Test public void ipv6AddressMalformed() throws
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + callback.await(server.url("/a")).assertFailure("Canceled");, + callback.await(server.url("/")).assertFailure("Canceled");, + client.dispatcher().setMaxRequests(1); // Force requests to be executed serially., + callback.await(requestB.url()).assertFailure("Canceled");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + callback.await(server.url("/a")).assertFailure("Canceled");, + callback.await(server.url("/")).assertFailure("Canceled");, + client.dispatcher().setMaxRequests(1); // Force requests to be executed serially., + callback.await(requestB.url()).assertFailure("Canceled");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, + public static <T> Set<T> setOf(T... elements) {, + return setOf(Arrays.asList(elements));, + }, +, + public static <T> Set<T> setOf(Collection<T> elements) {, + return new LinkedHashSet<>(elements);, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + callback.await(server.url("/a")).assertFailure("Canceled");, + callback.await(server.url("/")).assertFailure("Canceled");, + client.dispatcher().setMaxRequests(1); // Force requests to be executed serially., + callback.await(requestB.url()).assertFailure("Canceled");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, + public static
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +public final class UtilTest {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +public final class UtilTest {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES
[+++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, + @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, + @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, + @Override, + @Override, +
[+++ b/CHANGELOG.md, + * Fix: Don't leak connections! There was a regression in 2.0.0-RC2 where, +++ b/CHANGELOG.md, + * Fix: Don't leak connections! There was a regression in 2.0.0-RC2 where, +++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/AccessHeaders.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union
[+++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/NewWebSocketTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java, + static DnsOverHttps buildCloudflareIp(OkHttpClient bootstrapClient) {, + .url(parseUrl("https://1.1.1.1/dns-query")), + .includeIPv6(false), + .build();, + }, +, + static DnsOverHttps buildCloudflare(OkHttpClient bootstrapClient) {, + return new DnsOverHttps.Builder().client(bootstrapClient), + .url(parseUrl("https://cloudflare-dns.com/dns-query")), + .bootstrapDnsHosts(getByIp("1.1.1.1")), + .url(parseUrl("https://cloudflare-dns.com/dns-query?ct=application/dns-udpwireformat")), + .bootstrapDnsHosts(getByIp("104.16.111.25"), getByIp("104.16.112.25"),, + getByIp("2400:cb00:2048:1:0:0:6810:7019"), getByIp("2400:cb00:2048:1:0:0:6810:6f19")), + result.add(buildCloudflareIp(client));]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.SynchronousQueue;, + @Test public void getWithRequestBody() throws Exception {, + server.enqueue(new MockResponse());, + server.play();, +, + try {, + new Request.Builder().method("GET", RequestBody.create(MediaType.parse("text/plain"), "abc"));, + fail();, + } catch (IllegalArgumentException expected) {, + }, + }, +, + @Test public void asyncResponseCanBeConsumedLater() throws Exception {, + server.enqueue(new MockResponse().setBody("abc"));, + server.enqueue(new MockResponse().setBody("def"));, + server.play();, +, + Request request = new Request.Builder(), + .url(server.getUrl("/")), + .header("User-Agent", "SyncApiTest"), + .build();, +, + final BlockingQueue<Response> responseRef = new SynchronousQueue<Response>();, + client.newCall(request).enqueue(new Callback() {, + @Override public void onFailure(Request request, Throwable throwable) {, + throw new AssertionError();, + }, +,
[+++ b/okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java, + @Override public boolean exists(File file) {, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java, + @Override public boolean exists(File file) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java, + private void assertGarbageFilesAllDeleted() {, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java, + @Override public boolean exists(File file) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java, + private void assertGarbageFilesAllDeleted() {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/FaultyFileSystem.java, + @Override public boolean exists(File file) {, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java, + @Override public boolean exists(File file) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java, + private void assertGarbageFilesAllDeleted() {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/FaultyFileSystem.java, + @Override public boolean exists(File file) {, +++ b/okhttp/src/main/java/okhttp3/internal/io/FileSystem.java, + @Override public boolean exists(File file) {, + boolean exists(File file);]
[+++ b/.gitignore, +local.properties, +++ b/.gitignore, +local.properties, +++ b/okhttp/build.gradle, + 'okhttp3.Challenge#scheme()',, + 'okhttp3.Challenge#authParams()',, + 'okhttp3.Challenge#realm()',, + 'okhttp3.Challenge#charset()',, + 'okhttp3.Challenge#withCharset(java.nio.charset.Charset)',, + 'okhttp3.Address#certificatePinner()',, + 'okhttp3.Address#connectionSpecs()',, + 'okhttp3.Address#dns()',, + 'okhttp3.Address#hostnameVerifier()',, + 'okhttp3.Address#protocols()',, + 'okhttp3.Address#proxy()',, + 'okhttp3.Address#proxyAuthenticator()',, + 'okhttp3.Address#proxySelector()',, + 'okhttp3.Address#sslSocketFactory()',, + 'okhttp3.Address#url()',, + 'okhttp3.Address#socketFactory()',, + 'okhttp3.Handshake#cipherSuite()',, + 'okhttp3.Handshake#localCertificates()',, + 'okhttp3.Handshake#localPrincipal()',, + 'okhttp3.Handshake#peerCertificates()',, + 'okhttp3.Handshake#tlsVersion()',, + 'okhttp3.Handshake#peerPrincipal()',, +++ b/.gitignore, +local.properties, +++ b/okhttp/build.gradle, + 'okhttp3.Challenge#scheme()',, + 'okhttp3.Challenge#authParams()',, + 'okhttp3.Challenge#realm()',, + 'okhttp3.Challenge#charset()',, + 'okhttp3.Challenge#withCharset(java.nio.charset.Charset)',, + 'okhttp3.Address#certificatePinner()',, + 'okhttp3.Address#connectionSpecs()',, + 'okhttp3.Address#dns()',, + 'okhttp3.Address#hostnameVerifier()',, + 'okhttp3.Address#protocols()',, + 'okhttp3.Address#proxy()',, + 'okhttp3.Address#proxyAuthenticator()',, + 'okhttp3.Address#proxySelector()',, + 'okhttp3.Address#sslSocketFactory()',, + 'okhttp3.Address#url()',, + 'okhttp3.Address#socketFactory()',, + 'okhttp3.Handshake#cipherSuite()',, + 'okhttp3.Handshake#localCertificates()',, + 'okhttp3.Handshake#localPrincipal()',, + 'okhttp3.Handshake#peerCertificates()',, + 'okhttp3.Handshake#tlsVersion()',,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + throw new AssertionError(e);, + throw new AssertionError(e);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + throw new AssertionError(e);, + throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + throw new AssertionError(e);, + throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void disconnectRequestHalfway() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, +
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, + @Test public void testIPv6() throws UnknownHostException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, + @Test public void testIPv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test, + public void cancelWhileRequestHeadersAreSent() throws Exception {, + server.enqueue(new MockResponse().setBody("A"));, +, + EventListener listener =, + new EventListener() {, + @Override, + public void requestHeadersStart(Call call) {, + try {, + // Cancel call from another thread to avoid reentrance., + cancelLater(call, 0).join();, + } catch (InterruptedException e) {, + throw new AssertionError();, + }, + }, + };, + client = client.newBuilder().eventListener(listener).build();, +, + Call call = client.newCall(new Request.Builder().url(server.url("/a")).build());, + try {, + call.execute();,
[+++ b/.gitignore, +++ b/.gitignore, +++ b/okhttp/build.gradle, +++ b/.gitignore, +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, + @Test public void pingsTransmitted() throws Exception {, + // Ping every 500 ms, starting at 500 ms., + client = client.newBuilder(), + .pingInterval(500, TimeUnit.MILLISECONDS), + .build();, +, + // Delay the response to give 1 ping enough time to be sent and replied to., + server.enqueue(new MockResponse(), + .setBodyDelay(750, TimeUnit.MILLISECONDS), + .setBody("ABC"));, +, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + Response response = call.execute();, + assertEquals("ABC", response.body().string());, +, + assertEquals(Protocol.HTTP_2, response.protocol());, +, + // Confirm a single ping was sent and received, and its reply was sent and
[+++ b/pom.xml, + <okio.version>1.0.0</okio.version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + // 1. seed the cache (potentially), + // 2. expect a cache hit or miss, + // 1. seed the cache, + // 2. invalidate it, + // 3. expect a cache miss, + // 1. seed the cache, + // 2. invalidate it with uncacheable response, + // 3. expect a cache miss, + // 1. request a range, + // 2. request a full document, expecting a cache miss, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + // 1. seed the cache (potentially), + // 2. expect a cache hit or miss, + // 1. seed the cache, +
[+++ b/checkstyle.xml, + <!--<module name="NeedBraces"/>-->
[+++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.0"), +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.0"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + Source source = Okio.source(file);, + try {, + BufferedSink out = Okio.buffer(stream.getSink());, + out.writeAll(source);, + out.close();, + } finally {, + Util.closeQuietly(source);, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.0"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + Source source = Okio.source(file);, + try {, + BufferedSink out = Okio.buffer(stream.getSink());, + out.writeAll(source);, + out.close();, + } finally {, + Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.buffer(), source.buffer().size());, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.0"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + Source source = Okio.source(file);, + try {, + BufferedSink out = Okio.buffer(stream.getSink());, + out.writeAll(source);, + out.close();, + } finally {, + Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +
[+++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *
[+++ b/okhttp-apache/README.md, +OkHttp Apache HttpClient Implementation, +=======================================, +, +This module is an implementation of the Apache `HttpClient` interface that is backed by OkHttp., +, +**Warning**: Many core features of Apache HTTP client are not implemented by this API. This includes, +the keep-alive strategy, cookie store, credentials provider, route planner and others., +++ b/okhttp-apache/README.md, +OkHttp Apache HttpClient Implementation, +=======================================, +, +This module is an implementation of the Apache `HttpClient` interface that is backed by OkHttp., +, +**Warning**: Many core features of Apache HTTP client are not implemented by this API. This includes, +the keep-alive strategy, cookie store, credentials provider, route
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, + /**, + * Webservers may set the initial window size to zero, which is a special case because it means, + * that we have to flush headers immediately before any request body can be sent., + * https://github.com/square/okhttp/issues/2543, + */, + @Test public void peerSetsZeroFlowControl() throws Exception {, + peer.setVariantAndClient(HTTP_2, true);, +, + // Write the mocking script., + peer.sendFrame().settings(new Settings().set(INITIAL_WINDOW_SIZE, 0, 0));, + peer.sendFrame().windowUpdate(0, 10); // Increase the connection window size., + peer.acceptFrame(); // PING or SETTINGS ACK, + peer.acceptFrame(); // PING or SETTINGS ACK, + peer.sendFrame().ping(true, 1, 0);, + peer.acceptFrame(); // HEADERS STREAM
[+++ b/okcurl/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>2.0.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okcurl</artifactId>, + <name>OkCurl</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>org.bouncycastle</groupId>, + <artifactId>bcprov-jdk15on</artifactId>, + </dependency>, + <dependency>, + <groupId>org.mortbay.jetty.npn</groupId>, + <artifactId>npn-boot</artifactId>, + </dependency>, + <dependency>, + <groupId>io.airlift</groupId>, + <artifactId>airline</artifactId>, + </dependency>, + <dependency>, + <groupId>com.google.guava</groupId>, + <artifactId>guava</artifactId>, + </dependency>, +, + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + </dependencies>, +, + <build>, + <resources>, + <resource>, + <directory>src/main/resources</directory>, + <filtering>true</filtering>, +
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, + logger.setLevel(Level.FINE);, + logger.addHandler(handler);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, + logger.setLevel(Level.FINE);, + logger.addHandler(handler);, +++ b/okhttp-hpacktests/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <groupId>com.squareup.moshi</groupId>, + <artifactId>moshi</artifactId>, + </dependency>, + <dependency>, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, + logger.setLevel(Level.FINE);, + logger.addHandler(handler);, +++ b/okhttp-hpacktests/pom.xml, + <version>3.3.0-SNAPSHOT</version>, + <groupId>com.squareup.moshi</groupId>, + <artifactId>moshi</artifactId>, + </dependency>, + <dependency>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/framed/HpackDecodeInteropTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the
[+++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, + <version>1.1.2-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +import java.security.cert.TrustAnchor;, +import okhttp3.internal.tls.BasicTrustRootIndex;, +import okhttp3.internal.tls.TrustRootIndex;, + private final Class<?> sslSocketClass;, + AndroidPlatform(Class<?> sslParametersClass, Class<?> sslSocketClass, Method setUseSessionTickets,, + Method setHostname, Method getAlpnSelectedProtocol, Method setAlpnProtocols) {, + this.sslSocketClass = sslSocketClass;, + if (!sslSocketClass.isInstance(sslSocket)) {, + return; // No TLS extensions if the socket class is custom., + }, + if (!sslSocketClass.isInstance(socket)) {, + return null; // No TLS extensions if the socket class is custom., + }, + return super.buildCertificateChainCleaner(trustManager);, + return new AndroidPlatform(sslParametersClass, sslSocketClass, setUseSessionTickets,, + setHostname, getAlpnSelectedProtocol, setAlpnProtocols);, + @Override public TrustRootIndex buildTrustRootIndex(X509TrustManager trustManager) {, + try {, + // From org.conscrypt.TrustManagerImpl, we want the
[+++ b/mockwebserver/pom.xml, + <version>1.2</version>, +++ b/mockwebserver/pom.xml, + <version>1.2</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2</version>, +++ b/mockwebserver/pom.xml, + <version>1.2</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2</version>, +++ b/mockwebserver/pom.xml, + <version>1.2</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2</version>, +++ b/okhttp/pom.xml, + <version>1.2</version>, +++ b/mockwebserver/pom.xml, + <version>1.2</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2</version>, +++ b/okhttp/pom.xml, + <version>1.2</version>, +++ b/pom.xml, + <version>1.2</version>, + <tag>parent-1.2</tag>, +++ b/mockwebserver/pom.xml, + <version>1.2</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2</version>, +++ b/okhttp/pom.xml, + <version>1.2</version>, +++ b/pom.xml, + <version>1.2</version>, + <tag>parent-1.2</tag>, +++ b/samples/guide/pom.xml, + <version>1.2</version>, +++ b/mockwebserver/pom.xml, + <version>1.2</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2</version>, +++ b/okhttp-protocols/pom.xml, +
[+++ b/okhttp-testing-support/src/main/java/okhttp3/testing/InstallUncaughtExceptionHandlerListener.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +import org.junit.internal.Throwables;, + private final Map<Throwable, String> exceptions = new LinkedHashMap<>();, + @Override public void testRunStarted(Description description) {, +, + synchronized (exceptions) {, + exceptions.put(throwable, lastTestStarted.getDisplayName());, + }, + @Override public void testStarted(Description description) {, +, + synchronized (exceptions) {, + if (!exceptions.isEmpty()) {, + throw Throwables.rethrowAsException(exceptions.keySet().iterator().next());, + }, + }]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, + try {, + } catch (InterruptedIOException e) {, + throw new SocketTimeoutException(e.getMessage());, + }, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, + try {, + } catch (InterruptedIOException e) {, + throw new SocketTimeoutException(e.getMessage());, + }, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java, +import okio.Pipe;, + initOutputStream(Okio.buffer(pipe.sink()), expectedContentLength);, + while (pipe.source().read(buffer, 8192) != -1L) {, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, + try {, + } catch (InterruptedIOException e) {, + throw new SocketTimeoutException(e.getMessage());, + }, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java, +import okio.Pipe;,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, + /**, + * Release any resources held by this dispatcher. Any requests that are currently being dispatched, + * should return immediately. Responses returned after shutdown will not be transmitted: their, + * socket connections have already been closed., + */, + public void shutdown() {, + }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, + /**, + * Release any resources held by this dispatcher. Any requests that are currently being dispatched, + * should return immediately. Responses returned after shutdown will not be transmitted: their, + * socket connections have already been closed., + */, + public
[+++ b/build.gradle, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/okhttp-logging-interceptor/gradle.properties, +POM_ARTIFACT_ID=okhttp-logging-interceptor, +POM_NAME=okhttp-logging-interceptor, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/okhttp-logging-interceptor/gradle.properties, +POM_ARTIFACT_ID=okhttp-logging-interceptor, +POM_NAME=okhttp-logging-interceptor, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import org.junit.Rule;, + @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/okhttp-logging-interceptor/gradle.properties, +POM_ARTIFACT_ID=okhttp-logging-interceptor, +POM_NAME=okhttp-logging-interceptor, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import org.junit.Rule;, + @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java, +import org.junit.Rule;, + @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/okhttp-logging-interceptor/gradle.properties, +POM_ARTIFACT_ID=okhttp-logging-interceptor, +POM_NAME=okhttp-logging-interceptor, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import org.junit.Rule;, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union
[+++ b/pom.xml, + <okio.version>1.11.0</okio.version>]
[+++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, + assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, + assertEquals(-1, in.read());, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, + assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, + assertEquals(-1, in.read());, +++ /dev/null, +++ b/mockwebserver/README.md, + URL baseUrl =
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + result.setChunkedBody(body, 1024);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, + result.setChunkedBody(body, 1024);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Util;, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, + private byte[] body;, + setBody(new byte[0]);, + public byte[] getBody() {, + return body;, + return bodyStream != null ? bodyStream : new ByteArrayInputStream(body);, + setHeader("Content-Length", body.length);, + this.body = body;, + try {, + return setBody(body.getBytes("UTF-8"));, + } catch (UnsupportedEncodingException e) {, + throw new AssertionError();, + }, + public MockResponse setChunkedBody(byte[] body, int maxChunkSize) {, + try {, + ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, + int pos = 0;, + while (pos < body.length)
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft10Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/benchmarks/pom.xml, + <version>3.3.0</version>, +++ b/benchmarks/pom.xml, + <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.0</version>, +++ b/benchmarks/pom.xml, + <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.0</version>, +++ b/okcurl/pom.xml, + <version>3.3.0</version>, +++ b/benchmarks/pom.xml, + <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.0</version>, +++ b/okcurl/pom.xml, + <version>3.3.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.3.0</version>, +++ b/benchmarks/pom.xml, + <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.0</version>, +++ b/okcurl/pom.xml, + <version>3.3.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.3.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.3.0</version>, +++ b/benchmarks/pom.xml, + <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.0</version>, +++ b/okcurl/pom.xml, + <version>3.3.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.3.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.3.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.3.0</version>, +++ b/benchmarks/pom.xml, + <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.0</version>, +++ b/okcurl/pom.xml, + <version>3.3.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import okhttp3.HttpUrl;, + private final HttpUrl requestUrl;, +, + String scheme = socket instanceof SSLSocket ? "https" : "http";, + String hostname = socket.getInetAddress().getHostName();, + int port = socket.getLocalPort();, + this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, + this.requestUrl = null;, + public HttpUrl getRequestUrl() {, + return requestUrl;, + }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import okhttp3.HttpUrl;, + private final HttpUrl requestUrl;, +, + String scheme = socket instanceof SSLSocket ? "https" : "http";, + String hostname = socket.getInetAddress().getHostName();, + int port = socket.getLocalPort();, + this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, + this.requestUrl = null;, + public
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + String[] parts = header.split(":", -1);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-apache/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-apache/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java, + private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.parse("application/octet-stream");, + HttpEntityBody(HttpEntity entity, String contentTypeHeader) {, + if (contentTypeHeader != null) {, + mediaType = MediaType.parse(contentTypeHeader);, + } else if (entity.getContentType() != null)
[+++ b/benchmarks/pom.xml, + <artifactId>okhttp-tls</artifactId>, + <groupId>${project.groupId}</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, +++ b/benchmarks/pom.xml, + <artifactId>okhttp-tls</artifactId>, + <groupId>${project.groupId}</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/pom.xml, + <artifactId>okhttp-tls</artifactId>, + <groupId>${project.groupId}</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/pom.xml, + <artifactId>okhttp-tls</artifactId>, + <groupId>${project.groupId}</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/pom.xml, + <artifactId>okhttp-tls</artifactId>, + <groupId>${project.groupId}</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;,
[+++ b/benchmarks/pom.xml, + <groupId>com.google.caliper</groupId>, + <artifactId>caliper</artifactId>, + <version>1.0-beta-1</version>, + </dependency>, + <dependency>, + <!-- Netty needs this if gzip is enabled. -->, + <dependency>, + <groupId>com.jcraft</groupId>, + <artifactId>jzlib</artifactId>, + <version>1.1.2</version>, + </dependency>, +++ b/benchmarks/pom.xml, + <groupId>com.google.caliper</groupId>, + <artifactId>caliper</artifactId>, + <version>1.0-beta-1</version>, + </dependency>, + <dependency>, + <!-- Netty needs this if gzip is enabled. -->, + <dependency>, + <groupId>com.jcraft</groupId>, + <artifactId>jzlib</artifactId>, + <version>1.1.2</version>, + </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, + long total = readAllAndClose(in);, +++ b/benchmarks/pom.xml, + <groupId>com.google.caliper</groupId>, + <artifactId>caliper</artifactId>, + <version>1.0-beta-1</version>, + </dependency>, + <dependency>, + <!-- Netty needs this if gzip is enabled. -->, + <dependency>, + <groupId>com.jcraft</groupId>, + <artifactId>jzlib</artifactId>,
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, + Buffer body = new Buffer();, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, + Buffer body = new Buffer();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, + Buffer body = new Buffer();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, + Buffer buffer = new Buffer();, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, + Buffer body = new Buffer();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, + Buffer buffer = new Buffer();, +++ b/okhttp-tests/pom.xml, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, + Buffer body = new Buffer();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, + Buffer buffer
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + .assertSuccessful(), + @Test public void getReturns500() throws Exception {, + server.enqueue(new MockResponse().setResponseCode(500));, + server.play();, +, + Request request = new Request.Builder(), + .url(server.getUrl("/")), + .build();, +, + executeSynchronously(request), + .assertCode(500), + .assertNotSuccessful();, + }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + .assertSuccessful(), + @Test public void getReturns500() throws Exception {, + server.enqueue(new MockResponse().setResponseCode(500));, + server.play();, +, + Request request = new Request.Builder(), + .url(server.getUrl("/")), + .build();, +, + executeSynchronously(request), + .assertCode(500), + .assertNotSuccessful();, + }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, + public RecordedResponse assertSuccessful() {, + assertTrue(response.isSuccessful());, + return this;, + }, +, + public
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + unknownHostException.addSuppressed(failures.get(i));, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + unknownHostException.addSuppressed(failures.get(i));, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + unknownHostException.addSuppressed(failures.get(i));, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.java, + firstException.addSuppressed(e);]
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, +, + @Test public void basicChallenge() {, + Headers headers = new Headers.Builder(), + .add("WWW-Authenticate: Basic realm=\"protected area\""), + .build();, + assertEquals(Arrays.asList(new Challenge("Basic", "protected area")),, + HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, + }, +, + @Test public void basicChallengeWithCharset() {, + Headers headers = new Headers.Builder(), + .add("WWW-Authenticate: Basic realm=\"protected area\", charset=\"UTF-8\""), + .build();, + assertEquals(Arrays.asList(new Challenge("Basic", "protected area").withCharset(Util.UTF_8)),, + HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, + }, +, + @Test public void basicChallengeWithUnexpectedCharset() {, + Headers headers = new Headers.Builder(), + .add("WWW-Authenticate: Basic realm=\"protected area\", charset=\"US-ASCII\""), + .build();, + assertEquals(Collections.emptyList(), HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, + }, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, +, + @Test
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.Network;, + .setConnectionPool(ConnectionPool.getDefault());, + Internal.instance.setNetwork(client, dns);, +, + private static class FakeDns implements Network {, + @Override public InetAddress[] resolveInetAddresses(String host) throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.Network;, + .setConnectionPool(ConnectionPool.getDefault());, + Internal.instance.setNetwork(client, dns);, +, + private static class FakeDns implements Network {, + @Override public InetAddress[] resolveInetAddresses(String host) throws UnknownHostException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.Network;, + .setConnectionPool(ConnectionPool.getDefault());, + Internal.instance.setNetwork(client, dns);, +, + private static class FakeDns implements Network {, + @Override public InetAddress[] resolveInetAddresses(String host) throws UnknownHostException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.Network;, + .setConnectionPool(ConnectionPool.getDefault());, + Internal.instance.setNetwork(client, dns);, +, + private
[+++ b/bom/pom.xml, + <artifactId>okhttp-logging-interceptor</artifactId>, +++ b/bom/pom.xml, + <artifactId>okhttp-logging-interceptor</artifactId>, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +++ b/bom/pom.xml, + <artifactId>okhttp-logging-interceptor</artifactId>, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, + StreamAllocation streamAllocation = Internal.instance.streamAllocation(call);, +, + streamAllocation.streamFailed(e);]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import javax.annotation.Nullable;, +import okhttp3.RecordingEventListener.RequestHeadersEnd;, +import okhttp3.RecordingEventListener.ResponseHeadersEnd;, +import org.hamcrest.BaseMatcher;, +import org.hamcrest.CoreMatchers;, +import org.hamcrest.Description;, +import org.hamcrest.Matcher;, +import static org.hamcrest.CoreMatchers.any;, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assume.assumeThat;, + public static final Matcher<Response> anyResponse = CoreMatchers.any(Response.class);, + private void assertSuccessfulEventOrder(Matcher<Response> responseMatcher) throws IOException {, + assumeThat(response, responseMatcher);, +, + private void assertBytesReadWritten(RecordingEventListener listener,, + @Nullable Matcher<Long> requestHeaderLength, @Nullable Matcher<Long> requestBodyBytes,, + @Nullable Matcher<Long> responseHeaderLength, @Nullable Matcher<Long> responseBodyBytes) {, +, + if (requestHeaderLength != null) {, + RequestHeadersEnd responseHeadersEnd = listener.removeUpToEvent(RequestHeadersEnd.class);, + assertThat("request header length", responseHeadersEnd.headerLength, requestHeaderLength);, + } else {, + assertFalse("Found RequestHeadersEnd", listener.recordedEventTypes().contains("RequestHeadersEnd"));, + }, +, + if
[+++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union of the acting entity and all, + other entities that control, are controlled by,
[+++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, + ThreadPoolExecutor replyExecutor =, + new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, + Util.threadFactory(String.format("MockWebServer %s WebSocket", request.getPath()),, + true));, + replyExecutor.allowCoreThreadTimeOut(true);, + new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, + listener, request.getPath()) {, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-ws</artifactId>,
[+++ b/.gitignore, +++ b/.gitignore, +++ b/okhttp/build.gradle, + 'okhttp3.RealCall#getResponseWithInterceptorChain()',, + 'okhttp3.RealCall#redactedUrl()',, + 'okhttp3.RealCall#toLoggableString()',, + 'okhttp3.RealCall$AsyncCall#callsPerHost()',, + 'okhttp3.RealCall$AsyncCall#executeOn(java.util.concurrent.ExecutorService)',, + 'okhttp3.RealCall$AsyncCall#get()',, + 'okhttp3.RealCall$AsyncCall#host()',, + 'okhttp3.RealCall$AsyncCall#request()',, + 'okhttp3.RealCall$AsyncCall#reuseCallsPerHostFrom(okhttp3.RealCall$AsyncCall)',, +++ b/.gitignore, +++ b/okhttp/build.gradle, + 'okhttp3.RealCall#getResponseWithInterceptorChain()',, + 'okhttp3.RealCall#redactedUrl()',, + 'okhttp3.RealCall#toLoggableString()',, + 'okhttp3.RealCall$AsyncCall#callsPerHost()',, + 'okhttp3.RealCall$AsyncCall#executeOn(java.util.concurrent.ExecutorService)',, + 'okhttp3.RealCall$AsyncCall#get()',, + 'okhttp3.RealCall$AsyncCall#host()',, + 'okhttp3.RealCall$AsyncCall#request()',, + 'okhttp3.RealCall$AsyncCall#reuseCallsPerHostFrom(okhttp3.RealCall$AsyncCall)',, +++ /dev/null, +++ b/.gitignore, +++ b/okhttp/build.gradle, + 'okhttp3.RealCall#getResponseWithInterceptorChain()',, + 'okhttp3.RealCall#redactedUrl()',, + 'okhttp3.RealCall#toLoggableString()',, + 'okhttp3.RealCall$AsyncCall#callsPerHost()',, + 'okhttp3.RealCall$AsyncCall#executeOn(java.util.concurrent.ExecutorService)',, + 'okhttp3.RealCall$AsyncCall#get()',, + 'okhttp3.RealCall$AsyncCall#host()',, + 'okhttp3.RealCall$AsyncCall#request()',, + 'okhttp3.RealCall$AsyncCall#reuseCallsPerHostFrom(okhttp3.RealCall$AsyncCall)',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/RealCall.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may
[+++ b/build.gradle, + id 'me.champeau.gradle.japicmp' version '0.2.6', +, +/**, + * Returns a .jar file for the golden version of this project., + * https://github.com/Visistema/Groovy1/blob/ba5eb9b2f19ca0cc8927359ce414c4e1974b7016/gradle/binarycompatibility.gradle#L48, + */, +ext.baselineJar = { project, version ->, + def group = project.property("GROUP"), + def artifactId = project.property("POM_ARTIFACT_ID"), + try {, + String jarFile = "$artifactId-${version}.jar", + project.group = 'virtual_group_for_japicmp' // Prevent it from resolving the current version., + def dependency = project.dependencies.create("$group:$artifactId:$version@jar"), + return project.configurations.detachedConfiguration(dependency).files, + .find { (it.name == jarFile) }, + } finally {, + project.group = group, + }, +}, +ext.baselineVersion = "3.14.0", +++ b/build.gradle, + id 'me.champeau.gradle.japicmp' version '0.2.6',
[+++ b/mockwebserver/README.md, + HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/README.md, + HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, + * Adds a new header with the name and value. This may be used to add multiple, + * headers with the same name. Unlike {@link #addHeader(String, Object)} this, + * does not validate the name and value., + */, + public MockResponse addHeaderLenient(String name, Object value) {, + Internal.instance.addLenient(headers, name, String.valueOf(value));, + return this;, + }, +, + /**, +++ b/mockwebserver/README.md, + HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, + * Adds a new header with the name
[+++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, + HTTP to HTTPS., +, +, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, + HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, + HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that
[+++ b/checkstyle.xml, + <module name="MethodLength">
[+++ b/.travis.yml, +before_install:, + - mvn -version, +, +++ b/.travis.yml, +before_install:, + - mvn -version, +, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +import java.util.concurrent.ExecutorService;, + private boolean client = false;, + private Variant variant = new Spdy3();, + private FrameWriter frameWriter = variant.newWriter(bytesOut, client);;, + private final ExecutorService executor = Executors.newCachedThreadPool(, + public void setVariantAndClient(Variant variant, boolean client) {, + if (this.variant.getProtocol() == variant.getProtocol() && this.client == client) {, + return;, + }, + port = serverSocket.getLocalPort();, + Util.closeQuietly(MockSpdyPeer.this);, + @Override public synchronized void close() throws IOException {, + executor.shutdown();, + Util.closeQuietly(socket);, + Util.closeQuietly(serverSocket);, +++ b/.travis.yml, +before_install:, + - mvn -version, +, +++
[+++ b/mockwebserver/pom.xml, +, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-assembly-plugin</artifactId>, + <configuration>, + <descriptorRefs>, + <descriptorRef>jar-with-dependencies</descriptorRef>, + </descriptorRefs>, + </configuration>, + <executions>, + <execution>, + <phase>package</phase>, + <goals>, + <goal>single</goal>, + </goals>, + </execution>, + </executions>, + </plugin>]
[+++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + client = client.newBuilder(), + .dns(new DoubleInetAddressDns()), + .build();, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + client = client.newBuilder(), + .dns(new DoubleInetAddressDns()), + .build();, +, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +import java.io.FileNotFoundException;, + if (requestSendStarted && requestIsUnrepeatable(e, userRequest)) return false;, + private boolean requestIsUnrepeatable(IOException e, Request userRequest) {, + return userRequest.body() instanceof UnrepeatableRequestBody, + || e instanceof FileNotFoundException;, + }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void propfindRedirectsToPropfindAndMaintainsRequestBody() throws Exception {, + // given, + // when, +, + // then, + assertEquals("Request Body", page2.getBody().readUtf8());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void propfindRedirectsToPropfindAndMaintainsRequestBody() throws Exception {, + // given, + // when, +, + // then, + assertEquals("Request Body", page2.getBody().readUtf8());, +++ b/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.java, + public static boolean redirectsWithBody(String method) {, + return method.equals("PROPFIND"); // (WebDAV) redirects should also maintain the request body, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void propfindRedirectsToPropfindAndMaintainsRequestBody() throws Exception {, + // given, + // when, +, + // then, + assertEquals("Request Body", page2.getBody().readUtf8());, +++ b/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.java, +
[+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, + private static final String NPE_THROW_WITH_NULL = "throw with null exception";, +, + // The following try/catch block is a pseudo hacky way to get around a crash on Android 7.0, + // More details:, + // https://github.com/square/okhttp/issues/3245, + // https://android-review.googlesource.com/#/c/271775/, + try {, + } catch (NullPointerException npe) {, + if (NPE_THROW_WITH_NULL.equals(npe.getMessage())) {, + throw new IOException(npe);, + }, + }]
[+++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + * Fix: Don't eagerly release stream allocations on cache hits. We might still, + need them to handle redirects., +, +, +++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + * Fix: Don't eagerly release stream allocations on cache hits. We might still, + need them to handle redirects., +, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + private String status = "HTTP/1.1 200 OK";, + return setStatus("HTTP/1.1 " + code + " OK");, +++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + * Fix: Don't eagerly release stream allocations on cache hits. We
[+++ b/build.gradle, + def platform = System.getProperty("okhttp.platform", "jdk8"), + if (platform == "jdk8") {, +++ b/build.gradle, + def platform = System.getProperty("okhttp.platform", "jdk8"), + if (platform == "jdk8") {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + return System.getProperty("okhttp.platform", "jdk8");, +++ b/build.gradle, + def platform = System.getProperty("okhttp.platform", "jdk8"), + if (platform == "jdk8") {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + return System.getProperty("okhttp.platform", "jdk8");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, + boolean canRetry() {, + // Don't try if the failure wasn't our fault!, + if (!hasStreamFailure) return false;, +++ b/build.gradle, + def platform = System.getProperty("okhttp.platform", "jdk8"), + if (platform == "jdk8") {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + return System.getProperty("okhttp.platform", "jdk8");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, + boolean
[+++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, + journalWriter = Okio.buffer(Okio.blackhole());, + return Okio.blackhole();, + return Okio.blackhole();, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, + journalWriter = Okio.buffer(Okio.blackhole());, + return Okio.blackhole();, + return Okio.blackhole();, +++ b/pom.xml, + <okio.version>1.10.0</okio.version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java, + long byteCount = source.read(buffer, 8192L);, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java, + long byteCount = source.read(buffer, 8192L);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, + assertData("017e4000");, + assertData(bytes.readByteArray(16_384));, + assertData("007e4000");, + assertData(bytes.readByteArray(16_384));, + assertData("007e6000");, + assertData(bytes.readByteArray(24_576));, + assertData("007e4000");, + assertData(bytes.readByteArray(16_384));, + assertData("007e6000");, + assertData(bytes.readByteArray(24_576));, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java, + long byteCount = source.read(buffer, 8192L);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, + assertData("017e4000");, + assertData(bytes.readByteArray(16_384));, + assertData("007e4000");, + assertData(bytes.readByteArray(16_384));, + assertData("007e6000");, + assertData(bytes.readByteArray(24_576));, + assertData("007e4000");, + assertData(bytes.readByteArray(16_384));, + assertData("007e6000");, + assertData(bytes.readByteArray(24_576));, +++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketReader.java, + private final byte[] maskBuffer = new byte[8192];, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java, + long byteCount = source.read(buffer, 8192L);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, + assertData("017e4000");, + assertData(bytes.readByteArray(16_384));, + assertData("007e4000");, + assertData(bytes.readByteArray(16_384));, + assertData("007e6000");, +
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + private static Logger frameLogger;, + frameLogger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, + frameLogger.setLevel(Level.FINE);, + frameLogger.addHandler(handler);]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Headers okHeaders = extractOkResponseHeaders(httpUrlConnection, okResponseBuilder);, + Headers okHeaders = extractOkHeaders(javaResponse, okResponseBuilder);, + Headers headers = extractOkHeaders(requestHeaders, null);, + final Headers headers = withSyntheticHeaders(response);, + okResponse = okResponse.newBuilder(), + .body(null), + .headers(withSyntheticHeaders(okResponse)), + .build();, + private
[+++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java, + if (link != null) queue.add(link);, +++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java, + if (link != null) queue.add(link);, +++ b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java, + Set<String> blacklist = Collections.singleton(, + "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=");, +++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java, + if (link != null) queue.add(link);, +++ b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java, + Set<String> blacklist = Collections.singleton(, + "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=");, +++ b/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + *
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, + public void release(boolean callEnd) {, + if (callEnd) {, + }, + if (callEnd) {, + }, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, + public void release(boolean callEnd) {, + if (callEnd) {, + }, + if (callEnd) {, + }, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, + streamAllocation.release(true);, + streamAllocation.release(true);, + streamAllocation.release(true);, + streamAllocation.release(true);, + streamAllocation.release(true);, + streamAllocation.release(true);, + streamAllocation.release(false);]
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http.HttpHeaders;, +, + /** See https://github.com/square/okhttp/issues/2780. */, + @Test public void testDigestChallenges() {, + // Strict RFC 2617 header., + Headers headers = new Headers.Builder(), + .add("WWW-Authenticate", "Digest realm=\"myrealm\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaks", + + "jdflkasdf\", qop=\"auth\", stale=\"FALSE\""), + .build();, + List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, + assertEquals(1, challenges.size());, + assertEquals("Digest", challenges.get(0).scheme());, + assertEquals("myrealm", challenges.get(0).realm());, +, + // Not strict RFC 2617 header., + headers = new Headers.Builder(), + .add("WWW-Authenticate", "Digest qop=\"auth\", realm=\"myrealm\", nonce=\"fjalskdflwejrlask", + + "dfjlaskdjflaksjdflkasdf\", stale=\"FALSE\""), + .build();, + challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, + assertEquals(1, challenges.size());, + assertEquals("Digest", challenges.get(0).scheme());, + assertEquals("myrealm", challenges.get(0).realm());, +, + // Not strict
[+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +import okhttp3.internal.ws.WebSocketRecorder.MessageDelegate;, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +import okhttp3.internal.ws.WebSocketRecorder.MessageDelegate;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + *
[+++ b/checkstyle.xml, + <!--<module name="FinalClass"/>-->
[+++ b/CHANGELOG.md, +## Version 3.11.0, +, +_2018-07-12_, +, + * **OkHttp's new okhttp-tls submodule tames HTTPS and TLS.**, +, + `HeldCertificate` is a TLS certificate and its private key. Generate a certificate with its, + builder then use it to sign another certificate or perform a TLS handshake. The, + `certificatePem()` method encodes the certificate in the familiar PEM format, + (`--- BEGIN CERTIFICATE ---`); the `privateKeyPkcs8Pem()` does likewise for the private key., +, + `HandshakeCertificates` holds the TLS certificates required for a TLS handshake. On the server, + it keeps your `HeldCertificate` and its chain. On the client
[+++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/samples/guide/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + private String status;, + setResponseCode(200);, + String reason = "Mock Response";, + if (code >= 100 && code < 200) {, + reason = "Informational";, + } else if (code >= 200 && code < 300) {, + reason = "OK";, + } else if (code >= 300 && code < 400) {, + reason = "Redirection";, + } else if (code >= 400 && code < 500) {, + reason = "Client Error";, + } else if (code >= 500 && code < 600) {, + reason = "Server Error";, + }, + return setStatus("HTTP/1.1
[+++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/Deadline.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/okhttp-apache/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/okhttp-apache/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.0.1-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, + <version>1.0.1-SNAPSHOT</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, + @Test public void networkErrorReportedAsCloseNotFailure() {, + server2client.close();, + client.processNextFrame();, + clientListener.assertClose(1006, "");, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, + @Test public void networkErrorReportedAsCloseNotFailure() {, + server2client.close();, + client.processNextFrame();, + clientListener.assertClose(1006, "");, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, + callback.assertClose(1005, "");, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, + @Test public void networkErrorReportedAsCloseNotFailure() {, + server2client.close();, + client.processNextFrame();, + clientListener.assertClose(1006, "");, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, + callback.assertClose(1005, "");, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_ABNORMAL_TERMINATION;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_CLIENT_GOING_AWAY;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_PROTOCOL_EXCEPTION;, + if (t instanceof IOException && !(t instanceof ProtocolException)) {, + readerListener.onClose(CLOSE_ABNORMAL_TERMINATION, "");, + } else {, + }, + int code = protocolException
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void legalToExecuteTwiceCloning() throws Exception {, + server.enqueue(new MockResponse().setBody("abc"));, + server.enqueue(new MockResponse().setBody("def"));, +, + Request request = new Request.Builder(), + .url(server.url("/")), + .build();, +, + Call call = client.newCall(request);, + Response response1 = call.execute();, +, + Call cloned = call.clone();, + Response response2 = cloned.execute();, +, + assertEquals(response1.body().string(), "abc");, + assertEquals(response2.body().string(), "def");, + }, +, + @Test public void legalToExecuteTwiceCloning_Async() throws Exception {, + server.enqueue(new MockResponse().setBody("abc"));, + server.enqueue(new MockResponse().setBody("def"));, +, + Request request = new Request.Builder(), + .url(server.url("/")), + .build();, +, + Call call = client.newCall(request);, + call.enqueue(callback);, +, + Call cloned = call.clone();, +
[+++ b/benchmarks/pom.xml, + <version>3.0.1</version>, +++ b/benchmarks/pom.xml, + <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, +++ b/benchmarks/pom.xml, + <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, +++ b/okcurl/pom.xml, + <version>3.0.1</version>, +++ b/benchmarks/pom.xml, + <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, +++ b/okcurl/pom.xml, + <version>3.0.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.1</version>, +++ b/benchmarks/pom.xml, + <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, +++ b/okcurl/pom.xml, + <version>3.0.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.0.1</version>, +++ b/benchmarks/pom.xml, + <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, +++ b/okcurl/pom.xml, + <version>3.0.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.0.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.0.1</version>, +++ b/benchmarks/pom.xml, + <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, +++ b/okcurl/pom.xml, + <version>3.0.1</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java, + Set<String> blacklist = Collections.singleton(, + "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=");, +++ b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java, + Set<String> blacklist = Collections.singleton(, + "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=");, +++ b/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,,
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/CHANGELOG.md, +++ b/.travis.yml, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.10.0</version>, +implementation 'com.squareup.okhttp3:okhttp:3.10.0', + <version>3.10.0</version>, +testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0', +++ b/.travis.yml, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.10.0</version>, +implementation 'com.squareup.okhttp3:okhttp:3.10.0', + <version>3.10.0</version>, +testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0', +++ b/benchmarks/pom.xml, + <version>3.11.0-SNAPSHOT</version>, + <artifactId>mockwebserver</artifactId>, + <groupId>org.bouncycastle</groupId>, + <artifactId>bcprov-jdk15on</artifactId>, +++ b/.travis.yml, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.10.0</version>, +implementation 'com.squareup.okhttp3:okhttp:3.10.0', + <version>3.10.0</version>, +testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0', +++ b/benchmarks/pom.xml, + <version>3.11.0-SNAPSHOT</version>, + <artifactId>mockwebserver</artifactId>, + <groupId>org.bouncycastle</groupId>, + <artifactId>bcprov-jdk15on</artifactId>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, + SslClient sslClient = SslClient.localhost();, + new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/.travis.yml, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.10.0</version>, +implementation 'com.squareup.okhttp3:okhttp:3.10.0', + <version>3.10.0</version>, +testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0', +++ b/benchmarks/pom.xml,
[+++ b/pom.xml, + <junit.version>4.12</junit.version>]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt, +/*, + * Copyright (C) 2012 Square, Inc., + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES
[+++ b/CHANGELOG.md, +## Version 2.5.0, +, +_2015-08-25_, +, + * **Timeouts now default to 10 seconds.** Previously we defaulted to never, + timing out, and that was a lousy policy. If some of your requests require, + more than 10 seconds to complete, you’ll need to adjust the timeouts, + manually., +, + * **OkHttp now rejects request headers that contain invalid characters.** This, + includes potential security problems (newline characters) as well as simple, + non-ASCII characters (including international characters and emoji)., +, + * **Call canceling is more reliable.** We had a bug where a socket being,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + X509Certificate certificate = selfSignedCertificate(keyPair);, + private KeyPair generateKeyPair() throws GeneralSecurityException {, + private X509Certificate selfSignedCertificate(KeyPair keyPair) throws GeneralSecurityException {, + generator.setSerialNumber(BigInteger.ONE);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + X509Certificate certificate = selfSignedCertificate(keyPair);, + private KeyPair generateKeyPair() throws GeneralSecurityException {, + private X509Certificate selfSignedCertificate(KeyPair keyPair) throws GeneralSecurityException {, + generator.setSerialNumber(BigInteger.ONE);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, + Platform.get().setProtocols(sslSocket, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + X509Certificate certificate = selfSignedCertificate(keyPair);, + private KeyPair generateKeyPair() throws GeneralSecurityException {, + private X509Certificate selfSignedCertificate(KeyPair keyPair) throws GeneralSecurityException {, + generator.setSerialNumber(BigInteger.ONE);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, + Platform.get().setProtocols(sslSocket, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + Platform.get().setProtocols(sslSocket, protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + X509Certificate certificate = selfSignedCertificate(keyPair);, + private KeyPair generateKeyPair() throws
[+++ b/checkstyle.xml, +++ b/checkstyle.xml, +++ b/pom.xml, + <version>2.10</version>, + <profile>, + <id>alpn-when-jdk8_111</id>, + <activation>, + <jdk>1.8.0_111</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, + </properties>, + </profile>, +++ b/checkstyle.xml, +++ b/pom.xml, + <version>2.10</version>, + <profile>, + <id>alpn-when-jdk8_111</id>, + <activation>, + <jdk>1.8.0_111</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, + </properties>, + </profile>, +++ b/samples/pom.xml, +++ b/checkstyle.xml, +++ b/pom.xml, + <version>2.10</version>, + <profile>, + <id>alpn-when-jdk8_111</id>, + <activation>, + <jdk>1.8.0_111</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, + </properties>, + </profile>, +++ b/samples/pom.xml, +++ /dev/null, +++ b/checkstyle.xml, +++ b/pom.xml, + <version>2.10</version>, + <profile>, + <id>alpn-when-jdk8_111</id>, + <activation>, + <jdk>1.8.0_111</jdk>, + </activation>, + <properties>, +
[+++ b/bom/pom.xml, + <artifactId>logging-interceptor</artifactId>, +++ b/bom/pom.xml, + <artifactId>logging-interceptor</artifactId>, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, + WebSocket server = serverListener.assertOpen();, + closeWebSockets(webSocket, server);, + WebSocket server = serverListener.assertOpen();, + closeWebSockets(webSocket, server);, + WebSocket server = serverListener.assertOpen();, + closeWebSockets(webSocket, server);, + WebSocket server = serverListener.assertOpen();, + closeWebSockets(webSocket, server);, + WebSocket webSocket = newWebSocket();, + closeWebSockets(webSocket, server);, + closeWebSockets(webSocket, server);, +, + // TODO: fix connection leak, +, + // TODO: fix connection leak, +, + // TODO: fix connection leak, +, + // TODO: fix connection leak, +, + // TODO: fix connection leak, +, + // TODO: fix connection leak, + closeWebSockets(webSocket, server);, +
[+++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/okcurl/pom.xml, + <version>3.1.0</version>, + <version>1.5.0</version>, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/okcurl/pom.xml, + <version>3.1.0</version>, + <version>1.5.0</version>, + <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.1</version>, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/okcurl/pom.xml, + <version>3.1.0</version>, + <version>1.5.0</version>, + <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.1</version>, + <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.0.1</version>, + <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.1</version>, + <version>3.1.0</version>, + <version>3.1.1</version>, +++ b/okcurl/pom.xml, + <version>3.1.0</version>, + <version>1.5.0</version>, + <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.1</version>, + <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, + @Test public void setProtocolsRejectsHttp10() throws Exception {, + OkHttpClient client = new OkHttpClient();, + try {, + client.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));, + fail();, + } catch (IllegalArgumentException expected) {, + }, + }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, + @Test public void setProtocolsRejectsHttp10() throws Exception {, + OkHttpClient client = new OkHttpClient();, + try {, + client.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));, + fail();, + } catch
[+++ b/.gitignore, +local.properties]
[+++ b/benchmarks/pom.xml, + <version>3.10.0</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0</version>, +++ b/okcurl/pom.xml, + <version>3.10.0</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0</version>, +++ b/okcurl/pom.xml, + <version>3.10.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.10.0</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0</version>, +++ b/okcurl/pom.xml, + <version>3.10.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.10.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.10.0</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0</version>, +++ b/okcurl/pom.xml, + <version>3.10.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.10.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.10.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.10.0</version>, +++ b/benchmarks/pom.xml, + <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.10.0</version>, +++ b/okcurl/pom.xml, + <version>3.10.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, + // Wait until the server has completely filled the stream and connection flow-control windows., + int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, + int dataFrameCount = 0;, + while (dataFrameCount < expectedFrameCount) {, + String log = http2Handler.take();, + if (log.equals("FINE: << 0x00000003 16384 DATA ")) {, + dataFrameCount++;, + }, + }, + // Wait until the server has completely filled the stream and connection flow-control windows., + int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, + int dataFrameCount = 0;, + while (dataFrameCount < expectedFrameCount) {, + String log = http2Handler.take();, + if (log.equals("FINE: << 0x00000003 16384
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + assertTrue(message.contains("A connection to " + server.url("/") + " was leaked.", + assertTrue(message.contains("A connection to " + server.url("/") + " was leaked."]
[+++ b/okhttp/pom.xml, + <dependency>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-annotations</artifactId>, + <version>1.17</version>, + <scope>provided</scope>, + </dependency>, +++ b/okhttp/pom.xml, + <dependency>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-annotations</artifactId>, + <version>1.17</version>, + <scope>provided</scope>, + </dependency>, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.time.Duration;, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, + * Sets the default connect timeout for new connections. A value of 0 means no timeout,, + * otherwise values must be between 1 and {@link Integer#MAX_VALUE} when converted to, + * milliseconds., + *, + * <p>The connectTimeout is applied when connecting a TCP socket to the target host., + * The default value is 10 seconds., + */, + @IgnoreJRERequirement, + public
[+++ b/okhttp/pom.xml, + <version>1.1.0</version>, +++ b/okhttp/pom.xml, + <version>1.1.0</version>, +++ b/pom.xml, + <version>1.1.0</version>]
[+++ b/benchmarks/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +
[+++ b/benchmarks/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, + long fixedContentLength = httpEngine.policy.getFixedContentLength();, + long contentLength = httpEngine.requestHeaders.getContentLength();, + if (contentLength > Integer.MAX_VALUE) {, + throw new IllegalArgumentException("Use setFixedLengthStreamingMode() or ", + + "setChunkedStreamingMode() for requests larger than 2 GiB.");, + }, +, + return new RetryableOutputStream((int) contentLength);, + private long bytesRemaining;, + private FixedLengthOutputStream(OutputStream socketOut, long bytesRemaining) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, + long fixedContentLength = httpEngine.policy.getFixedContentLength();, + long contentLength = httpEngine.requestHeaders.getContentLength();, + if (contentLength > Integer.MAX_VALUE) {, + throw new IllegalArgumentException("Use setFixedLengthStreamingMode() or ", + + "setChunkedStreamingMode() for requests larger than 2 GiB.");, + }, +, + return new RetryableOutputStream((int) contentLength);, + private long bytesRemaining;,
[+++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs for interacting with cipher suites and TLS versions., + * Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs for interacting with cipher suites and TLS versions., + * Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, + <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', + <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + server.enqueue(new MockResponse().setBody("seed connection pool"));, + server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, + executeSynchronously(request).assertBody("seed connection pool");, + executeSynchronously(request).assertBody("retry success");, + server.enqueue(new MockResponse().setBody("seed connection pool"));, + server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, + executeSynchronously(request).assertBody("seed connection pool");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + server.enqueue(new MockResponse().setBody("seed connection pool"));, + server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, + executeSynchronously(request).assertBody("seed connection pool");, + executeSynchronously(request).assertBody("retry success");, + server.enqueue(new MockResponse().setBody("seed connection pool"));, + server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, + executeSynchronously(request).assertBody("seed connection pool");, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, + assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + server.enqueue(new MockResponse().setBody("seed connection pool"));, + server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, + executeSynchronously(request).assertBody("seed connection pool");, + executeSynchronously(request).assertBody("retry success");, + server.enqueue(new
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, + if (i == 513) {, + // pause slightly after half way to make result more predictable, + Thread.sleep(100);, + }, + assertEquals(512f, i, 5f); // Halfway +/- 0.5%]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheRequest.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, + @Override public boolean isDuplex() {, + return true;, + }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, + @Override public boolean isDuplex() {, + return true;, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, + @Override public boolean isDuplex() {, + return true;, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, + @Test public void callTimeoutIsNotApplied() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, + @Override public
[+++ b/benchmarks/pom.xml, + <version>2.3.0</version>, +++ b/benchmarks/pom.xml, + <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.3.0</version>, +++ b/benchmarks/pom.xml, + <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.3.0</version>, +++ b/okcurl/pom.xml, + <version>2.3.0</version>, +++ b/benchmarks/pom.xml, + <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.3.0</version>, +++ b/okcurl/pom.xml, + <version>2.3.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.3.0</version>, +++ b/benchmarks/pom.xml, + <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.3.0</version>, +++ b/okcurl/pom.xml, + <version>2.3.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.3.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.3.0</version>, +++ b/benchmarks/pom.xml, + <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.3.0</version>, +++ b/okcurl/pom.xml, + <version>2.3.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.3.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.3.0</version>, +++ b/okhttp-tests/pom.xml, + <version>2.3.0</version>, +++ b/benchmarks/pom.xml, + <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.3.0</version>, +++ b/okcurl/pom.xml, + <version>2.3.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/bom/pom.xml, + <version>3.13.0-SNAPSHOT</version>]
[+++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +++ b/okhttp-urlconnection/pom.xml, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +++ b/okhttp-urlconnection/pom.xml, +++ b/okhttp-ws/pom.xml, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +++ b/okhttp-urlconnection/pom.xml, +++ b/okhttp-ws/pom.xml, +++ b/okhttp/pom.xml, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +++ b/okhttp-urlconnection/pom.xml, +++
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.platform.Platform;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.platform.Platform;, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, + okhttp3.internal.cache.CacheRequest okCacheRequest =, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.platform.Platform;, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, + okhttp3.internal.cache.CacheRequest okCacheRequest =, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +import okhttp3.internal.cache.CacheRequest;, +import okhttp3.internal.cache.CacheStrategy;, +import okhttp3.internal.cache.InternalCache;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.platform.Platform;, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, + okhttp3.internal.cache.CacheRequest okCacheRequest =, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +import okhttp3.internal.cache.CacheRequest;, +import okhttp3.internal.cache.CacheStrategy;, +import okhttp3.internal.cache.InternalCache;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.cache.CacheRequest;, +import okhttp3.internal.http.HttpHeaders;, +import okhttp3.internal.platform.Platform;, + if (HttpHeaders.hasVaryAll(responseHeaders)) {, + Set<String>
[+++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, + - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", + - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, + - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", + - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, + - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", + - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/.buildscript/deploy_snapshot.sh, + ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, + - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", + - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.framed.Settings;, + private Settings settings;, + * When {@linkplain MockWebServer#setProtocols(java.util.List) protocols}, + * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2 HTTP/2}, this, + * pushes {@code settings} before writing the response., + */, + public MockResponse withSettings(Settings settings) {, + this.settings = settings;, + return this;, + }, +, + public Settings getSettings() {, + return settings;, + }, +, + /**, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.framed.Settings;, + private Settings settings;, + * When {@linkplain MockWebServer#setProtocols(java.util.List) protocols}, + * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2 HTTP/2}, this, + * pushes {@code settings} before writing the response., + */, + public MockResponse withSettings(Settings settings) {,
[+++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, + @Test public void testIPv6() throws UnknownHostException {, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, + @Test public void testIPv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, + <version>1.1.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, + <version>2.10.4</version>, + <version>3.0.0</version>, + <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, + @Test public void testIPv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, + <version>1.1.0</version>, + <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.10.4</version>, +
[+++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, + call.get().cancel();, + call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, + call.get().cancel();, + call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + return ((RealCall) call).streamAllocation();, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, + call.get().cancel();, + call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + return ((RealCall) call).streamAllocation();, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.CallServerInterceptor;, +import okhttp3.internal.http.RetryAndFollowUpInterceptor;, + private final RetryAndFollowUpInterceptor retryAndFollowUpInterceptor;, + this.retryAndFollowUpInterceptor = new RetryAndFollowUpInterceptor(client);, + this.retryAndFollowUpInterceptor.setForWebSocket(true);, + retryAndFollowUpInterceptor.cancel();, + return retryAndFollowUpInterceptor.isCanceled();, + }, +, + StreamAllocation streamAllocation() {, + return retryAndFollowUpInterceptor.streamAllocation();, + if (retryAndFollowUpInterceptor.isCanceled()) {, + String string = retryAndFollowUpInterceptor.isCanceled() ? "canceled call" : "call";, + interceptors.add(retryAndFollowUpInterceptor);, + if (!retryAndFollowUpInterceptor.isForWebSocket()) {, + interceptors.add(new CallServerInterceptor(, + retryAndFollowUpInterceptor.isForWebSocket()));, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, + call.get().cancel();, + call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + return ((RealCall)
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + @Option(, + name = "--call-timeout",, + description = "Maximum time allowed for the entire call (seconds)"), + public int callTimeout = DEFAULT_TIMEOUT;, +, + if (callTimeout != DEFAULT_TIMEOUT) {, + builder.callTimeout(callTimeout, SECONDS);, + }, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + @Option(, + name = "--call-timeout",, + description = "Maximum time allowed for the entire call (seconds)"), + public int callTimeout = DEFAULT_TIMEOUT;, +, + if (callTimeout != DEFAULT_TIMEOUT) {, + builder.callTimeout(callTimeout, SECONDS);, + }, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, + final String hostname;, + hostname = builder.hostname;, + Util.threadFactory(Util.format("OkHttp %s Writer", hostname), false));, + Util.threadFactory(Util.format("OkHttp %s Push Observer", hostname), true));, + writerExecutor.execute(new
[+++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, + return (installedCache.directory().equals(directory), + && installedCache.maxSize() == maxSize, + return delegate.size();, + return delegate.maxSize();, + return delegate.networkCount();, + return delegate.hitCount();, + return delegate.requestCount();, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, + return (installedCache.directory().equals(directory), + && installedCache.maxSize() == maxSize, + return delegate.size();, + return delegate.maxSize();, + return delegate.networkCount();, + return delegate.hitCount();, + return delegate.requestCount();, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + assertEquals(1, cache.writeSuccessCount());, + assertEquals(0, cache.writeAbortCount());, + assertEquals(1, cache.writeSuccessCount());, + assertEquals(0, cache.writeAbortCount());, + assertEquals(2, cache.requestCount());, + assertEquals(1, cache.hitCount());, + assertEquals(2, cache.requestCount());, + assertEquals(1, cache.networkCount());, + assertEquals(1, cache.hitCount());, + assertEquals(4, cache.requestCount()); // 2 requests + 2 redirects, + assertEquals(2, cache.networkCount());, + assertEquals(2, cache.hitCount());, + assertEquals(4, cache.requestCount()); // 2
[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, + @Test public void spaceInName() throws Exception {, + assertEquals("a b", Cookie.parse(url, "a b=cd").name());, + }, +, + @Test public void spaceInValue() throws Exception {, + assertEquals("c d", Cookie.parse(url, "ab=c d").value());, + }, +, + @Test public void invalidCharacters() throws Exception {, + assertEquals(null, Cookie.parse(url, "a\u0000b=cd"));, + assertEquals(null, Cookie.parse(url, "ab=c\u0000d"));, + assertEquals(null, Cookie.parse(url, "a\u0001b=cd"));, + assertEquals(null, Cookie.parse(url, "ab=c\u0001d"));, + assertEquals(null, Cookie.parse(url, "a\u0009b=cd"));, + assertEquals(null, Cookie.parse(url, "ab=c\u0009d"));, + assertEquals(null, Cookie.parse(url, "a\u001fb=cd"));, + assertEquals(null, Cookie.parse(url, "ab=c\u001fd"));, + assertEquals(null, Cookie.parse(url, "a\u007fb=cd"));, + assertEquals(null, Cookie.parse(url, "ab=c\u007fd"));, + assertEquals(null, Cookie.parse(url, "a\u0080b=cd"));, + assertEquals(null, Cookie.parse(url, "ab=c\u0080d"));, + assertEquals(null, Cookie.parse(url, "a\u00ffb=cd"));, + assertEquals(null, Cookie.parse(url,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *
[+++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, + .commonName(InetAddress.getByName("localhost").getCanonicalHostName()), +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, + .commonName(InetAddress.getByName("localhost").getCanonicalHostName()), +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + return inetSocketAddress.getAddress().getCanonicalHostName();, + InetSocketAddress address = new InetSocketAddress(inetSocketAddress.getAddress(), + .getCanonicalHostName(), getPort());, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, + .commonName(InetAddress.getByName("localhost").getCanonicalHostName()), +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + return inetSocketAddress.getAddress().getCanonicalHostName();, + InetSocketAddress address = new InetSocketAddress(inetSocketAddress.getAddress(), + .getCanonicalHostName(), getPort());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.net.InetAddress;, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, + .commonName(InetAddress.getByName("localhost").getCanonicalHostName()), +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + return inetSocketAddress.getAddress().getCanonicalHostName();, + InetSocketAddress address = new InetSocketAddress(inetSocketAddress.getAddress(), + .getCanonicalHostName(), getPort());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.net.InetAddress;, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + assertEquals(server.getHostName(), dnsStart.domainName);, + assertEquals(server.getHostName(), dnsEnd.domainName);, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, + .commonName(InetAddress.getByName("localhost").getCanonicalHostName()), +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + return inetSocketAddress.getAddress().getCanonicalHostName();, + InetSocketAddress address = new InetSocketAddress(inetSocketAddress.getAddress(), + .getCanonicalHostName(), getPort());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.net.InetAddress;, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +
[+++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import java.net.InetSocketAddress;, +import java.net.Proxy;, +import okhttp3.internal.RecordingOkAuthenticator;, +import org.junit.After;, +import static okhttp3.TestUtil.defaultClient;, + private OkHttpClient client;, + private SocksProxy socksProxy;, +, + @Before public void setUp() throws IOException {, + client = defaultClient().newBuilder(), + @After public void tearDown() throws Exception {, + if (socksProxy != null) {, + socksProxy.shutdown();, + }, + }, +, + List<Class<?>> expectedEvents = Arrays.asList(, + DnsStart.class, DnsEnd.class,, + ConnectStart.class, ConnectEnd.class);, + enableTlsWithTunnel(false);, + ConnectStart.class, SecureConnectStart.class,, + SecureConnectEnd.class, ConnectEnd.class);, + @Test public void successfulConnect() throws IOException {, + server.enqueue(new MockResponse());, +, + Call call = client.newCall(new Request.Builder(), + .url(server.url("/")), + .build());, + Response response
[+++ b/pom.xml, + <artifactId>maven-release-plugin</artifactId>, + <version>2.4.2</version>, + <dependencies>, + <dependency>, + <groupId>org.apache.maven.scm</groupId>, + <artifactId>maven-scm-provider-gitexe</artifactId>, + <version>1.9</version>, + </dependency>, + </dependencies>, + <configuration>, + <autoVersionSubmodules>true</autoVersionSubmodules>, + </configuration>, + </plugin>, +, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, + public MockDuplexResponseBody requestIOException() {, + actions.add((request, requestBody, responseBody) -> {, + try {, + requestBody.exhausted();, + fail();, + } catch (IOException expected) {, + }, + });, + return this;, + }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, + public MockDuplexResponseBody requestIOException() {, + actions.add((request, requestBody, responseBody) -> {, + try {, + requestBody.exhausted();, + fail();, + } catch (IOException expected) {, + }, + });, + return this;, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import java.util.ArrayList;, +import java.util.List;, +import okhttp3.internal.Util;, + List<Response> responsesNotClosed = new ArrayList<>();, +, + responsesNotClosed.add(response);, + try (Response response
[+++ b/mockwebserver/pom.xml, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, +++ b/okhttp-android-support/pom.xml, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++ b/mockwebserver/pom.xml, + <artifactId>okhttp-testing-support</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, +++
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> streamHeaders = stream.takeHeaders();, + stream.writeHeaders(Collections.singletonList(, + stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> streamHeaders = stream.takeHeaders();, + stream.writeHeaders(Collections.singletonList(, + stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + List<Header> requestHeaders = stream.takeHeaders();, + stream.writeHeaders(responseHeaders, true);, + stream.writeHeaders(responseHeaders, true);, + stream.writeHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> streamHeaders = stream.takeHeaders();, + stream.writeHeaders(Collections.singletonList(, + stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + List<Header> requestHeaders = stream.takeHeaders();, + stream.writeHeaders(responseHeaders, true);, + stream.writeHeaders(responseHeaders, true);, + stream.writeHeaders(responseHeaders, true);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import java.util.ArrayDeque;, +import okio.Utf8;, + assertEquals(headerEntries("a", "android"), stream.takeHeaders());, + assertEquals(headerEntries("a", "android"), stream.takeHeaders());, + static final class RecordingHeadersListener implements Header.Listener {, + final ArrayDeque<Header> receivedHeaders = new ArrayDeque<>();, +, +
[+++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, + private static final String HOST = "ws://localhost:9099";, + webSocket.close(1000, null);, +++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, + private static final String HOST = "ws://localhost:9099";, + webSocket.close(1000, null);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.validateCloseCode;, + private static final long MAX_QUEUE_SIZE = 16 * 1024 * 1024; // 16 MiB., + validateCloseCode(code);, +++ b/okhttp-tests/fuzzingserver-config.json, + "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +before_install:, + - mvn -version, +jdk:, + - oraclejdk7, + - oraclejdk8, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +before_install:, + - mvn -version, +jdk:, + - oraclejdk7, + - oraclejdk8, +++ b/CHANGELOG.md, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +before_install:, + - mvn -version, +jdk:, + - oraclejdk7, + - oraclejdk8, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', + <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +before_install:, + - mvn -version, +jdk:, + - oraclejdk7, + - oraclejdk8, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.1.0</version>, +compile
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpResponseCacheTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + private int http2ErrorCode = -1;, + public int getHttp2ErrorCode() {, + return http2ErrorCode;, + }, +, + /**, + * Sets the <a href="https://tools.ietf.org/html/rfc7540#section-7">HTTP/2 error code</a> to be, + * returned when resetting the stream. This is only valid with {@link, + * SocketPolicy#RESET_STREAM_AT_START}., + */, + public MockResponse setHttp2ErrorCode(int http2ErrorCode) {, + this.http2ErrorCode = http2ErrorCode;, + return this;, + }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + private int http2ErrorCode = -1;, + public int getHttp2ErrorCode() {, + return http2ErrorCode;, + }, +, + /**, + * Sets the <a href="https://tools.ietf.org/html/rfc7540#section-7">HTTP/2 error code</a> to be, + * returned
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.JavaNetHeaders;, + return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, + return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, + return JavaNetHeaders.toMultimap(request.headers(), null);, + return JavaNetHeaders.toMultimap(request.headers(), null);, + return JavaNetHeaders.toMultimap(response.headers(), StatusLine.get(response).toString());, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.JavaNetHeaders;, + return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, + return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, + return JavaNetHeaders.toMultimap(request.headers(), null);, + return JavaNetHeaders.toMultimap(request.headers(), null);, + return JavaNetHeaders.toMultimap(response.headers(), StatusLine.get(response).toString());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, + client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.JavaNetHeaders;, + return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, + return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, + return JavaNetHeaders.toMultimap(request.headers(), null);, + return JavaNetHeaders.toMultimap(request.headers(), null);, + return JavaNetHeaders.toMultimap(response.headers(), StatusLine.get(response).toString());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, + client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, + client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.JavaNetHeaders;, + return
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + // 1. Seed the cache (potentially)., + // 2. Expect a cache hit or miss., + // 1. Seed the cache., + // 2. Invalidate it., + // 3. Expect a cache miss., + // 1. Seed the cache., + // 2. Invalidate it with an uncacheable response., + // 3. Expect a cache miss., + @Test public void putInvalidatesWithNoContentResponse() throws Exception {, + // 1. Seed the cache., + // 2. Invalidate it., + // 3. Expect a cache miss., + server.enqueue(new MockResponse(), + .setBody("A"), + .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));, + server.enqueue(new MockResponse(), +
[+++ b/benchmarks/README.md, + 1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/README.md, + 1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, + <argument>okhttp3.benchmarks.Benchmark</argument>, +++ b/benchmarks/README.md, + 1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, + <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ b/benchmarks/README.md, + 1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, + <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/README.md, + 1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, + <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/README.md, + 1. If you
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + return new X509Certificate[0];, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + return new X509Certificate[0];, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.ProtocolException;, + @Test public void tooManyProxyAuthFailuresWithConnectionClose() throws IOException {, + server.useHttps(sslContext.getSocketFactory(), true);, + server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, + for (int i = 0; i < 21; i++) {, + server.enqueue(new MockResponse(), + .setResponseCode(407), + .addHeader("Proxy-Authenticate: Basic realm=\"localhost\""), + .addHeader("Connection: close"));, + }, +, + client = client.newBuilder(), + .sslSocketFactory(sslContext.getSocketFactory()), + .proxy(server.toProxyAddress()), + .proxyAuthenticator(new RecordingOkAuthenticator("password")), + .hostnameVerifier(new RecordingHostnameVerifier()), + .build();, +, + Request request = new Request.Builder(), + .url("https://android.com/foo"), + .build();, + try {, + client.newCall(request).execute();, + fail();, + } catch (ProtocolException expected) {, + }, + },
[+++ b/okhttp-android-support/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>2.3.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp-android-support</artifactId>, + <name>OkHttp Android Platform Support</name>, + <description>Classes to support the Android platform's use of OkHttp (not required for most developers).</description>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp-urlconnection</artifactId>, + <version>${project.version}</version>, + </dependency>, + , + <dependency>, + <groupId>junit</groupId>, + <artifactId>junit</artifactId>, + <scope>test</scope>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, + </dependencies>, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-javadoc-plugin</artifactId>, + <configuration>,
[+++ b/benchmarks/pom.xml, + <version>3.0.0</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0</version>, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0</version>, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.0</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0</version>, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.0.0</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0</version>, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.0.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.0.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.0.0</version>, +++ b/benchmarks/pom.xml, + <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.0.0</version>, +++ b/okcurl/pom.xml, + <version>3.0.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/README.md, + --classpath ~/.m2/repository/com/google/mockwebserver/mockwebserver/20120905/mockwebserver-20120905.jar \, + --classpath target/okhttp-0.9-SNAPSHOT.jar \, + ./src/test/java, +++ b/README.md, + --classpath ~/.m2/repository/com/google/mockwebserver/mockwebserver/20120905/mockwebserver-20120905.jar \, + --classpath target/okhttp-0.9-SNAPSHOT.jar \, + ./src/test/java, +++ b/pom.xml, + <version>0.9-SNAPSHOT</version>]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + -
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, + serverListener.assertFailure(EOFException.class);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, + serverListener.assertFailure(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, + transmitter.initCallStackTrace(, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, + serverListener.assertFailure(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, + transmitter.initCallStackTrace(, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, + public void initCallStackTrace(@Nullable Object callStackTrace) {, + public void releaseStreamForException() {, + streamAllocation.releaseStreamForException();, + public boolean canRetry() {, + return streamAllocation.canRetry();, + try {, + } catch (IOException e) {, + streamAllocation.streamFailed(e);, + throw e;, + }, + long contentLength = request.body().contentLength();, + Sink rawRequestBody = streamAllocation.codec().createRequestBody(request, contentLength);, + return new RequestBodySink(rawRequestBody, contentLength);, + try {, + } catch (IOException e) {, + streamAllocation.streamFailed(e);, + throw e;, + }, + try {, + } catch (IOException
[+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +import javax.net.ssl.SSLSession;, + // block for session establishment, + SSLSession sslSocketSession = sslSocket.getSession();, + if (!isValid(sslSocketSession)) {, + throw new IOException("a valid ssl session was not established");, + }, + Handshake unverifiedHandshake = Handshake.get(sslSocketSession);, + private boolean isValid(SSLSession sslSocketSession) {, + // don't use SslSocket.getSession since for failed results it returns SSL_NULL_WITH_NULL_NULL, + return !"NONE".equals(sslSocketSession.getProtocol()) && !"SSL_NULL_WITH_NULL_NULL".equals(, + sslSocketSession.getCipherSuite());, + }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, + if (connection.allocations.size() < connection.allocationLimit, + && address.equals(connection.route().address), + && !connection.noNewStreams) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, + if (connection.allocations.size() < connection.allocationLimit, + && address.equals(connection.route().address), + && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, + if (connection.allocations.size() < connection.allocationLimit, + && address.equals(connection.route().address), + && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, + if (connection.allocations.size() < connection.allocationLimit, + && address.equals(connection.route().address), + && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, + public void connect(int connectTimeout, int readTimeout, int writeTimeout,, + List<ConnectionSpec> connectionSpecs, boolean connectionRetryEnabled) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, + if
[+++ b/mockwebserver/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/mockwebserver/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +
[+++ b/okhttp-apache/pom.xml, + <packaging>bundle</packaging>, + <plugin>, + <groupId>org.apache.felix</groupId>, + <artifactId>maven-bundle-plugin</artifactId>, + <extensions>true</extensions>, + <configuration>, + <instructions>, + <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, + <Bundle-Version>${project.version}</Bundle-Version>, + <Export-Package>, + okhttp3.apache.*, + </Export-Package>, + </instructions>, + </configuration>, + </plugin>, +++ b/okhttp-apache/pom.xml, + <packaging>bundle</packaging>, + <plugin>, + <groupId>org.apache.felix</groupId>, + <artifactId>maven-bundle-plugin</artifactId>, + <extensions>true</extensions>, + <configuration>, + <instructions>, + <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, + <Bundle-Version>${project.version}</Bundle-Version>, + <Export-Package>, + okhttp3.apache.*, + </Export-Package>, + </instructions>, + </configuration>, + </plugin>, +++ b/okhttp-logging-interceptor/pom.xml, + <packaging>bundle</packaging>, +, +, + <build>, + <plugins>, + <plugin>, + <groupId>org.apache.felix</groupId>, + <artifactId>maven-bundle-plugin</artifactId>, + <extensions>true</extensions>, + <configuration>, + <instructions>, + <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, + <Bundle-Version>${project.version}</Bundle-Version>, + <Export-Package>, + okhttp3.logging.*, + </Export-Package>, + </instructions>, +
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, + if (i == 513) {, + // pause slightly after half way to make result more predictable, + Thread.sleep(100);, + }, + assertEquals(512f, i, 5f); // Halfway +/- 0.5%]
[+++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +import okhttp3.internal.tls.SslClient;, + SslClient client = new SslClient.Builder().build();, + X509TrustManager x509TrustManager = client.trustManager;, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +import okhttp3.internal.tls.SslClient;, + SslClient client = new SslClient.Builder().build();, + X509TrustManager x509TrustManager = client.trustManager;, +++ b/pom.xml, + <animal.sniffer.version>1.11</animal.sniffer.version>]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, + final OkAuthenticator authenticator;, + HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy), + throws UnknownHostException {, + if (authenticator == null) throw new IllegalArgumentException("authenticator == null");, + this.authenticator = authenticator;, +, + /**, + * Returns the client's authenticator. This method never returns null., + */, + public OkAuthenticator getAuthenticator() {, + return authenticator;, + }, +, + && equal(this.hostnameVerifier, that.hostnameVerifier), + && equal(this.authenticator, that.authenticator);, + result = 31 * result + (authenticator != null ? authenticator.hashCode() : 0);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, + final OkAuthenticator authenticator;, + HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy), + throws UnknownHostException {, + if
[+++ b/benchmarks/pom.xml, + <version>3.8.0</version>, +++ b/benchmarks/pom.xml, + <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.8.0</version>, +++ b/benchmarks/pom.xml, + <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.8.0</version>, +++ b/okcurl/pom.xml, + <version>3.8.0</version>, +++ b/benchmarks/pom.xml, + <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.8.0</version>, +++ b/okcurl/pom.xml, + <version>3.8.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.8.0</version>, +++ b/benchmarks/pom.xml, + <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.8.0</version>, +++ b/okcurl/pom.xml, + <version>3.8.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.8.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.8.0</version>, +++ b/benchmarks/pom.xml, + <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.8.0</version>, +++ b/okcurl/pom.xml, + <version>3.8.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.8.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.8.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.8.0</version>, +++ b/benchmarks/pom.xml, + <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.8.0</version>, +++ b/okcurl/pom.xml, + <version>3.8.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/main/java/libcore/net/http/HttpsURLConnectionImpl.java, + // Get a connection. This may return a pooled connection!, + // If the TLS connection is ready, use it., + // The TLS connection isn't ready. Build a tunnel if necessary and then handshake., + if (connection.getAddress().requiresTunnel()) {, + makeTunnel(policy, connection, getRequestHeaders());, + }, +++ b/pom.xml, +++ b/src/main/java/libcore/net/http/HttpsURLConnectionImpl.java, + // Get a connection. This may return a pooled connection!, + // If the TLS connection is ready, use it., + // The TLS connection isn't ready. Build a tunnel if necessary and then handshake., + if (connection.getAddress().requiresTunnel()) {, + makeTunnel(policy, connection,
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + serverSocket = new ServerSocket(port, 50, inetAddress);, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0',
[+++ b/okhttp/src/main/java/okhttp3/Authenticator.java, + * <p>Implementations should check if the initial request already included an attempt to, + * authenticate. If so it is likely that further attempts will not be useful and the authenticator, + * should give up., + *, + * if (response.request().header("Authorization") != null) {, + * return null; // Give up, we've already failed to authenticate., + * }, + *, + * if (response.request().header("Proxy-Authorization") != null) {, + * return null; // Give up, we've already failed to authenticate., + * }, + *, +++ b/okhttp/src/main/java/okhttp3/Authenticator.java, + * <p>Implementations should check if the initial
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void dnsReturnsZeroIpAddresses() throws Exception {, + // Configure a DNS that returns our local MockWebServer for android.com., + FakeDns dns = new FakeDns();, + List<InetAddress> ipAddresses = new ArrayList<>();, + dns.set("android.com", ipAddresses);, + client = client.newBuilder(), + .dns(dns), + .build();, +, + server.enqueue(new MockResponse());, + Request request = new Request.Builder(), + .url(server.url("/").newBuilder().host("android.com").build()), + .build();, + executeSynchronously(request).assertFailure(dns + " returned no addresses for android.com");, +, + dns.assertRequests("android.com");, + }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void dnsReturnsZeroIpAddresses() throws Exception {, + // Configure a DNS that returns our local MockWebServer for android.com., + FakeDns dns =
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, + Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, + Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java, + URL url = new URL("https://twitter.com");, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, + Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java, + URL url = new URL("https://twitter.com");, +++ /dev/null, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, + Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java, + URL url = new URL("https://twitter.com");, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft12Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', + <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', + <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', + <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, + @Override public void onFailure(Request request, IOException e) {, + @Override public void onResponse(Response response) throws IOException {, +++ b/CHANGELOG.md, +++ b/README.md, + <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', + <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', +++ b/benchmarks/pom.xml, + <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, + @Override public void onFailure(Request request, IOException e) {, + @Override public void onResponse(Response response)
[+++ b/mockwebserver/pom.xml, + <artifactId>maven-javadoc-plugin</artifactId>, + <configuration>, + <links>, + <link>http://square.github.io/okhttp/javadoc/</link>, + <link>http://square.github.io/okio/</link>, + </links>, + </configuration>, + </plugin>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, +++ b/mockwebserver/pom.xml, + <artifactId>maven-javadoc-plugin</artifactId>, + <configuration>, + <links>, + <link>http://square.github.io/okhttp/javadoc/</link>, + <link>http://square.github.io/okio/</link>, + </links>, + </configuration>, + </plugin>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +, + /** @deprecated replaced with {@link #peek}. */, + protected final SocketPolicy peekSocketPolicy() {, + throw new UnsupportedOperationException("This API is obsolete. Override peek() instead!");, + }]
[+++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, + public MockDuplexResponseBody requestIOException() {, + actions.add((request, requestBody, responseBody) -> {, + try {, + requestBody.exhausted();, + fail();, + } catch (IOException expected) {, + }, + });, + return this;, + }, +, + public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, + actions.add((request, requestBody, responseBody) -> {, + try {, + Thread.sleep(unit.toMillis(duration));, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + }, + });, + return this;, + }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, + public MockDuplexResponseBody requestIOException()
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + private long headersDelayAmount = 0;, + private TimeUnit headersDelayUnit = TimeUnit.MILLISECONDS;, +, + public MockResponse setHeadersDelay(long delay, TimeUnit unit) {, + headersDelayAmount = delay;, + headersDelayUnit = unit;, + return this;, + }, +, + public long getHeadersDelay(TimeUnit unit) {, + return unit.convert(headersDelayAmount, headersDelayUnit);, + }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + private long headersDelayAmount = 0;, + private TimeUnit headersDelayUnit = TimeUnit.MILLISECONDS;, +, + public MockResponse setHeadersDelay(long delay, TimeUnit unit) {, + headersDelayAmount = delay;, + headersDelayUnit = unit;, + return this;, + }, +, + public long getHeadersDelay(TimeUnit unit) {, + return unit.convert(headersDelayAmount, headersDelayUnit);, + },
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import javax.net.ssl.SSLPeerUnverifiedException;, + .subjectAlternativeName("root_ca.com"), + .subjectAlternativeName("intermediate_ca.com"), + .commonName("Local Host"), + .subjectAlternativeName(server.getHostName()), + .subjectAlternativeName("root_ca.com"), + .subjectAlternativeName("intermediate_ca.com"), + .subjectAlternativeName("jethrowillis.com"), + assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, + assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, + assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, + assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, + @Test public void commonNameIsNotTrusted() throws Exception {, + serverCert = new HeldCertificate.Builder(), + .issuedBy(serverIntermediateCa), + .serialNumber("3"), + .commonName(server.getHostName()), + .subjectAlternativeName("different-host.com"), + .build();, +, + OkHttpClient client = buildClient(clientCert, clientIntermediateCa);, +, + SSLSocketFactory socketFactory = buildServerSslSocketFactory(ClientAuth.NEEDS);, +, + server.useHttps(socketFactory, false);, +, + Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +, + try {, + call.execute();, + fail();, + } catch (SSLPeerUnverifiedException expected)
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, + Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, + Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, + Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, + Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, + assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, + Response response
[+++ b/okhttp/src/main/java/okhttp3/internal/Util.java, + String[] result = Arrays.copyOf(array, array.length + 1);]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + assertNull(dnsEnd.ioe);, + assertTrue(dnsEnd.ioe instanceof UnknownHostException);, + assertTrue(dnsEnd.ioe instanceof UnknownHostException);, + assertNull(connectEnd.ioe);, + assertNotNull(connectEnd.ioe);, + assertNull(connectEnd.ioe);, + assertNull(connectEnd.ioe);, + assertNull(connectEnd.ioe);, + assertNull(secureEnd.ioe);, + assertNotNull(secureEnd.ioe);, + assertNull(secureEnd.ioe);, + assertNotNull(responseBodyEnd.ioe);, + assertNotNull(responseBodyEnd.ioe);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + assertNull(dnsEnd.ioe);, + assertTrue(dnsEnd.ioe instanceof UnknownHostException);, + assertTrue(dnsEnd.ioe instanceof UnknownHostException);, + assertNull(connectEnd.ioe);, + assertNotNull(connectEnd.ioe);, + assertNull(connectEnd.ioe);, + assertNull(connectEnd.ioe);, + assertNull(connectEnd.ioe);, + assertNull(secureEnd.ioe);, + assertNotNull(secureEnd.ioe);, + assertNull(secureEnd.ioe);, + assertNotNull(responseBodyEnd.ioe);, + assertNotNull(responseBodyEnd.ioe);, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +import java.io.IOException;, + IOException ioe) {, + logEvent(new DnsEnd(call, domainName, inetAddressList, ioe));, + @Override public void secureConnectEnd(Call call, Handshake handshake, IOException ioe) {, + logEvent(new SecureConnectEnd(call, handshake, ioe));, + @Nullable Proxy proxy, Protocol
[+++ b/CHANGELOG.md, +## Version 2.0.0-RC2, +, +_2014-06-11_, +, +This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for, +advice on upgrading from 1.x to 2.x., +, + * Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, + connections were neither closed nor pooled., + * Fix: Revert builder-style return types from OkHttpClient's timeout methods, + for binary compatibility with OkHttp 1.x., + * Fix: Don't skip client stream 1 on SPDY/3.1. This fixes SPDY connectivity to, + `https://google.com`, which doesn't follow the SPDY/3.1 spec!, + * Fix: Always configure NPN headers. This fixes connectivity to,
[+++ b/pom.xml, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-javadoc-plugin</artifactId>, + <executions>, + <execution>, + <id>attach-javadocs</id>, + <goals><goal>jar</goal></goals>, + </execution>, + </executions>, + </plugin>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-gpg-plugin</artifactId>, + <executions>, + <execution>, + <id>sign-artifacts</id>, + <phase>verify</phase>, + <goals>, + <goal>sign</goal>, + </goals>, + </execution>, + </executions>, + </plugin>]
[+++ b/benchmarks/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, +++ b/benchmarks/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, +++ b/benchmarks/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, +++ b/okcurl/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, +++ b/benchmarks/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, +++ b/mockwebserver/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, +++ b/okcurl/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, +++ b/okhttp-android-support/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, + <groupId>${project.groupId}</groupId>, +++ b/benchmarks/pom.xml, +
[+++ b/checkstyle.xml, + <module name="SuppressWarningsFilter"/>
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, + HandshakeCertificates handshakeCertificates = localhost();, + new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, + HandshakeCertificates handshakeCertificates = localhost();, + new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, + HandshakeCertificates handshakeCertificates = localhost();, + server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, + HandshakeCertificates handshakeCertificates = localhost();, + new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, + HandshakeCertificates handshakeCertificates = localhost();, + server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, + @Override public void initChannel(SocketChannel channel) {, + HandshakeCertificates handshakeCertificates = localhost();, + SSLEngine engine = handshakeCertificates.sslContext().createSSLEngine();, + ChannelHandlerContext context, HttpObject message) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + private @Nullable Call call;, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + private @Nullable Call call;, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + private @Nullable Call call;, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, + private @Nullable Call call;, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceRecorder.java, + public void onFailure(EventSource eventSource, @Nullable Throwable t, @Nullable Response response) {, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +
[+++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, + HTTP to HTTPS., +, +, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, + HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, + HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *
[+++ b/okhttp/pom.xml]
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import
[+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java, +import org.junit.Assume;, + Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);, +, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java, +import org.junit.Assume;, + Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);, +, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +import java.util.Collections;, +import static okhttp3.internal.http2.hpackjson.Story.MISSING;, + if (interopTests.length == 0) {, + return Collections.singletonList(new Story[] {MISSING});, + }, +, + for (Case testCase : story.getCases()) {, + bytesIn.write(testCase.getWire());, + assertSetEquals(String.format("seqno=%d", testCase.getSeqno()), testCase.getHeaders(),, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java, +import org.junit.Assume;, + Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);, +, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +import java.util.Collections;, +import static okhttp3.internal.http2.hpackjson.Story.MISSING;, + if (interopTests.length == 0) {, + return Collections.singletonList(new Story[] {MISSING});, + },
[+++ b/benchmarks/pom.xml, + <version>2.6.0</version>, +++ b/benchmarks/pom.xml, + <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.6.0</version>, +++ b/benchmarks/pom.xml, + <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.6.0</version>, +++ b/okcurl/pom.xml, + <version>2.6.0</version>, +++ b/benchmarks/pom.xml, + <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.6.0</version>, +++ b/okcurl/pom.xml, + <version>2.6.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.6.0</version>, +++ b/benchmarks/pom.xml, + <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.6.0</version>, +++ b/okcurl/pom.xml, + <version>2.6.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.6.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.6.0</version>, +++ b/benchmarks/pom.xml, + <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.6.0</version>, +++ b/okcurl/pom.xml, + <version>2.6.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.6.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.6.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>2.6.0</version>, +++ b/benchmarks/pom.xml, + <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.6.0</version>, +++ b/okcurl/pom.xml, + <version>2.6.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java, +import com.squareup.okhttp.Authenticator;, +public final class RecordingOkAuthenticator implements Authenticator {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java, +import com.squareup.okhttp.Authenticator;, +public final class RecordingOkAuthenticator implements Authenticator {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.Authenticator;, + private final Authenticator authenticator = AuthenticatorAdapter.INSTANCE;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java, +import com.squareup.okhttp.Authenticator;, +public final class RecordingOkAuthenticator implements Authenticator {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.Authenticator;, + private final Authenticator authenticator = AuthenticatorAdapter.INSTANCE;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, + final Authenticator authenticator;, + Authenticator authenticator, Proxy proxy, List<Protocol> protocols), + public Authenticator getAuthenticator() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java, +import com.squareup.okhttp.Authenticator;, +public final class RecordingOkAuthenticator implements Authenticator {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.Authenticator;, + private final Authenticator authenticator = AuthenticatorAdapter.INSTANCE;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, + final
[+++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, + // While MockWebServer waits to read the client's HEADERS frame before sending the response, it, + // doesn't wait to read the client's DATA frame and may send a DATA frame before the client, + // does. So we can't assume the client's empty DATA will be logged first., + assertThat(countFrames(logs, "FINE: >> 0x00000003 0 DATA END_STREAM")), + .isEqualTo((long) 2);, + assertThat(countFrames(logs, "FINE: >> 0x00000003 3 DATA ")), + .isEqualTo((long) 1);, +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, + // While MockWebServer waits to read the client's
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + X509Certificate certificate = selfSignedCertificate(keyPair, "1");, + public KeyPair generateKeyPair() throws GeneralSecurityException {, + public X509Certificate selfSignedCertificate(KeyPair keyPair, String serialNumber), + throws GeneralSecurityException {, + generator.setSerialNumber(new BigInteger(serialNumber));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + X509Certificate certificate = selfSignedCertificate(keyPair, "1");, + public KeyPair generateKeyPair() throws GeneralSecurityException {, + public X509Certificate selfSignedCertificate(KeyPair keyPair, String serialNumber), + throws GeneralSecurityException {, + generator.setSerialNumber(new BigInteger(serialNumber));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, + Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + X509Certificate certificate = selfSignedCertificate(keyPair, "1");, + public KeyPair generateKeyPair() throws GeneralSecurityException {, + public X509Certificate selfSignedCertificate(KeyPair keyPair, String serialNumber), + throws GeneralSecurityException {, + generator.setSerialNumber(new BigInteger(serialNumber));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, + Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, + 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', + };, + } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, + transport = Transport.HTTP_20_DRAFT_09;, + if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, + if (transport == Transport.HTTP_20_DRAFT_09) {, + builder.http20Draft09();, + builder.spdy3();, + HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, + 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', + };,
[+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java, +import okhttp3.internal.http2.Header;]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, + public static void ensureAllConnectionsReleased(OkHttpClient client) {, + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().idleConnectionCount());, + }, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, + public static void ensureAllConnectionsReleased(OkHttpClient client) {, + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().idleConnectionCount());, + }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + TestUtil.ensureAllConnectionsReleased(client);, + TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, + public static void ensureAllConnectionsReleased(OkHttpClient client) {, + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().idleConnectionCount());, + }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, + TestUtil.ensureAllConnectionsReleased(client);, + TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, + public static void ensureAllConnectionsReleased(OkHttpClient client) {, + client.connectionPool().evictAll();, + assertEquals(0, client.connectionPool().idleConnectionCount());, +
[+++ b/mockwebserver/pom.xml, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-jar-plugin</artifactId>, + <configuration>, + <archive>, + <manifestEntries>, + <Automatic-Module-Name>okhttp3.mockwebserver</Automatic-Module-Name>, + </manifestEntries>, + </archive>, + </configuration>, + </plugin>, +++ b/mockwebserver/pom.xml, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-jar-plugin</artifactId>, + <configuration>, + <archive>, + <manifestEntries>, + <Automatic-Module-Name>okhttp3.mockwebserver</Automatic-Module-Name>, + </manifestEntries>, + </archive>, + </configuration>, + </plugin>, +++ b/okcurl/pom.xml, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-jar-plugin</artifactId>, + <configuration>, + <archive>, + <manifestEntries>, + <Automatic-Module-Name>okhttp3.curl</Automatic-Module-Name>, + </manifestEntries>, + </archive>, + </configuration>, + </plugin>, +++ b/mockwebserver/pom.xml, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-jar-plugin</artifactId>, + <configuration>, + <archive>, + <manifestEntries>, + <Automatic-Module-Name>okhttp3.mockwebserver</Automatic-Module-Name>, + </manifestEntries>, + </archive>, + </configuration>, + </plugin>, +++ b/okcurl/pom.xml, +
[+++ b/mockwebserver/pom.xml, + <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.1</version>, +++ b/okcurl/pom.xml, + <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.1</version>, +++ b/okcurl/pom.xml, + <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.1</version>, +++ b/okcurl/pom.xml, + <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.13.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.1</version>, +++ b/okcurl/pom.xml, + <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.13.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.13.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.1</version>, +++ b/okcurl/pom.xml, + <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.13.1</version>, +++ b/okhttp-apache/pom.xml, + <version>3.13.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.13.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.1</version>, +++ b/okcurl/pom.xml, + <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.13.1</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import org.junit.Ignore;, + assertEquals(Arrays.asList(, + new Challenge("Digest", Collections.<String, String>emptyMap())),, + HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, + assertEquals(Arrays.asList(, + new Challenge("Digest", Collections.<String, String>emptyMap())),, + HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, + @Ignore("TODO(jwilson): reject parameters that use invalid characters"), + assertEquals(Arrays.asList(, + new Challenge("Digest", Collections.<String, String>emptyMap())),, + HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, + assertEquals(Arrays.asList(, + new Challenge("Other", singletonMap((String) null, "abc=="))),, + HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import org.junit.Ignore;, + assertEquals(Arrays.asList(, + new Challenge("Digest", Collections.<String, String>emptyMap())),, + HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, + assertEquals(Arrays.asList(, + new Challenge("Digest", Collections.<String, String>emptyMap())),, + HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, + @Ignore("TODO(jwilson): reject parameters that use invalid characters"), + assertEquals(Arrays.asList(, + new Challenge("Digest", Collections.<String, String>emptyMap())),, + HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, + assertEquals(Arrays.asList(, + new
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, + * Close the socket after the response. This is the default HTTP/1.0 behavior., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, + * Close the socket after the response. This is the default HTTP/1.0 behavior., +++ b/okhttp/src/main/java/okhttp3/Cache.java, + final DiskLruCache cache;, + int writeSuccessCount;, + int writeAbortCount;, + CacheRequest put(Response response) {, + void remove(Request request) throws IOException {, + void update(Response cached, Response network) {, + synchronized void trackResponse(CacheStrategy cacheStrategy) {, + synchronized void trackConditionalCacheHit() {, + boolean done;, + static int readInt(BufferedSource source) throws IOException {, + final DiskLruCache.Snapshot snapshot;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java,
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + if (position == 0 || position > response.headers().size()) {, + if (position > response.headers().size()) {, + return null;, + }, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + if (position == 0 || position > response.headers().size()) {, + if (position > response.headers().size()) {, + return null;, + }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, + .tag("request"), + client.cancel("request");, + client.cancel("request");, + Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, + client.newCall(request).execute();, + client.cancel("request B");, + Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, + client.newCall(requestA).enqueue(callback);, + Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();, + client.newCall(requestB).enqueue(callback);, +, +
[+++ b/checkstyle.xml, + <module name="MethodLength">
[+++ b/okhttp-apache/pom.xml, + <version>1.1.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.1</version>, +++ b/okhttp/pom.xml, + <version>1.1.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.1</version>, +++ b/okhttp/pom.xml, + <version>1.1.1</version>, +++ b/pom.xml, + <version>1.1.1</version>, + <tag>parent-1.1.1</tag>, +++ b/okhttp-apache/pom.xml, + <version>1.1.1</version>, +++ b/okhttp/pom.xml, + <version>1.1.1</version>, +++ b/pom.xml, + <version>1.1.1</version>, + <tag>parent-1.1.1</tag>, +++ b/samples/guide/pom.xml, + <version>1.1.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.1</version>, +++ b/okhttp/pom.xml, + <version>1.1.1</version>, +++ b/pom.xml, + <version>1.1.1</version>, + <tag>parent-1.1.1</tag>, +++ b/samples/guide/pom.xml, + <version>1.1.1</version>, +++ b/samples/pom.xml, + <version>1.1.1</version>, +++ b/okhttp-apache/pom.xml, + <version>1.1.1</version>, +++ b/okhttp/pom.xml, + <version>1.1.1</version>, +++ b/pom.xml, + <version>1.1.1</version>, + <tag>parent-1.1.1</tag>, +++ b/samples/guide/pom.xml, + <version>1.1.1</version>, +++ b/samples/pom.xml, + <version>1.1.1</version>, +++ b/samples/simple-client/pom.xml, + <version>1.1.1</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/HeldCertificate.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/okhttp-apache/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/okhttp-apache/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.0.2-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/samples/pom.xml, + <version>1.0.2-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, + <version>1.0.2-SNAPSHOT</version>]
[+++ b/.travis.yml, + - ./mvnw checkstyle:check -B]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +public final class MockWebServer implements TestRule, Closeable {, + @Override public void close() throws IOException {, + shutdown();, + }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +public final class MockWebServer implements TestRule, Closeable {, + @Override public void close() throws IOException {, + shutdown();, + }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.io.Closeable;, + @Test public void closeViaClosable() throws IOException {, + Closeable server = new MockWebServer();, + server.close();, + }, +]
[+++ b/okhttp-tests/pom.xml, + <dependency>, + <groupId>com.google.code.gson</groupId>, + <artifactId>gson</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-tests/pom.xml, + <dependency>, + <groupId>com.google.code.gson</groupId>, + <artifactId>gson</artifactId>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/WebPlatformTestRun.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is
[+++ b/mockwebserver/pom.xml, + <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.0</version>, +++ b/okcurl/pom.xml, + <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.0</version>, +++ b/okcurl/pom.xml, + <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.0</version>, +++ b/okcurl/pom.xml, + <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.13.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.0</version>, +++ b/okcurl/pom.xml, + <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.13.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.13.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.0</version>, +++ b/okcurl/pom.xml, + <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.13.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.13.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, + <version>3.13.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.13.0</version>, +++ b/okcurl/pom.xml, + <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.13.0</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-13, + Request.Builder requestBuilder = new Request.Builder().header("Accept", DNS_MESSAGE.toString());, + requestBuilder = requestBuilder.url(url).post(RequestBody.create(DNS_MESSAGE, query));, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-13, + Request.Builder requestBuilder = new Request.Builder().header("Accept", DNS_MESSAGE.toString());, + requestBuilder = requestBuilder.url(url).post(RequestBody.create(DNS_MESSAGE, query));, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java, + .url(HttpUrl.get("https://dns.google.com/experimental")), + .url(HttpUrl.get("https://cloudflare-dns.com/dns-query")), + .url(HttpUrl.get("https://doh.cleanbrowsing.org/doh/family-filter/")), + //result.add(buildCleanBrowsing(client)); // timeouts, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-13, + Request.Builder requestBuilder = new Request.Builder().header("Accept", DNS_MESSAGE.toString());, + requestBuilder = requestBuilder.url(url).post(RequestBody.create(DNS_MESSAGE, query));, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java, + .url(HttpUrl.get("https://dns.google.com/experimental")), + .url(HttpUrl.get("https://cloudflare-dns.com/dns-query")), + .url(HttpUrl.get("https://doh.cleanbrowsing.org/doh/family-filter/")), + //result.add(buildCleanBrowsing(client)); // timeouts, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, + new DnsOverHttps.Builder().client(bootstrapClient).url(url).post(true).build());]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +public class ConnectionPool {, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +public class ConnectionPool {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +public class Route {, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +public class ConnectionPool {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +public class Route {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.Timeout;, + public static final Source EMPTY_SOURCE = new Source() {, + @Override public long read(Buffer sink, long byteCount) throws IOException {, + return -1;, + }, + @Override public Timeout timeout() {, + return Timeout.NONE;, + }, + @Override public void close() throws IOException {, + }, + };, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +public class ConnectionPool {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +public class Route {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.Timeout;,
[+++ b/okhttp-apache/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp-apache</artifactId>, + <name>OkHttp Apache HttpClient</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>org.apache.httpcomponents</groupId>, + <artifactId>httpclient</artifactId>, + <scope>provided</scope>, + </dependency>, + </dependencies>, +</project>, +++ b/okhttp-apache/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>parent</artifactId>, + <version>1.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp-apache</artifactId>, + <name>OkHttp Apache HttpClient</name>, +, + <dependencies>, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>okhttp</artifactId>, + <version>${project.version}</version>,
[+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, + stream.reply(responseHeaders, true);, + stream.reply(responseHeaders, true);, + stream.reply(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, + stream.reply(responseHeaders, true);, + stream.reply(responseHeaders, true);, + stream.reply(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + boolean expectContinue = false;, + && lowercaseHeader.substring(7).trim().equals("100-continue")) {, + expectContinue = true;, + if (expectContinue) {, + if (contentLength != -1) {, + body.close();, + stream.reply(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, + stream.reply(responseHeaders, true);, + stream.reply(responseHeaders, true);, + stream.reply(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + boolean expectContinue = false;, + && lowercaseHeader.substring(7).trim().equals("100-continue")) {, + expectContinue = true;, + if (expectContinue) {, + if (contentLength != -1) {, + body.close();, + stream.reply(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, + RESET_STREAM_AT_START, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + sleepIfDelayed(response.getHeadersDelay(TimeUnit.MILLISECONDS));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + sleepIfDelayed(response.getHeadersDelay(TimeUnit.MILLISECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + server.enqueue(new MockResponse().setHeadersDelay(2, TimeUnit.SECONDS));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + sleepIfDelayed(response.getHeadersDelay(TimeUnit.MILLISECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, + server.enqueue(new MockResponse().setHeadersDelay(2, TimeUnit.SECONDS));, +++ b/pom.xml, + <apache.http.version>4.2.2</apache.http.version>, + <version>3.6.1</version>, + <version>2.8.1</version>, + <version>2.0.16</version>, + <version>2.17</version>, + <version>2.17</version>]
[+++ b/README.md, + <groupId>com.squareup.okhttp</groupId>, + <version>2.7.0</version>, +compile 'com.squareup.okhttp:okhttp:2.7.0', + <groupId>com.squareup.okhttp</groupId>, + <version>2.7.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.7.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/README.md, + <groupId>com.squareup.okhttp</groupId>, + <version>2.7.0</version>, +compile 'com.squareup.okhttp:okhttp:2.7.0', + <groupId>com.squareup.okhttp</groupId>, + <version>2.7.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.7.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/README.md, + <groupId>com.squareup.okhttp</groupId>, + <version>2.7.0</version>, +compile 'com.squareup.okhttp:okhttp:2.7.0', + <groupId>com.squareup.okhttp</groupId>, + <version>2.7.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.7.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/README.md, + <groupId>com.squareup.okhttp</groupId>, +++ b/README.md, + <groupId>com.squareup.okhttp</groupId>, + <version>2.7.0</version>, +compile 'com.squareup.okhttp:okhttp:2.7.0', + <groupId>com.squareup.okhttp</groupId>, + <version>2.7.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.7.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST,
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, + @Override, + public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler), + throws IOException {, + @Override, + public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler,, + HttpContext context) throws IOException {, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, + <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, + @Override, + public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler), + throws IOException {, + @Override, + public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler,, + HttpContext context) throws IOException
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, + public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, + actions.add((request, requestBody, responseBody) -> {, + try {, + Thread.sleep(unit.toMillis(duration));, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + }, + });, + return this;, + }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, + public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, + actions.add((request, requestBody, responseBody) -> {, + try {, + Thread.sleep(unit.toMillis(duration));, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + }, + });, + return this;, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, + @Test public void fullCallTimeoutAppliesToSetup() throws Exception {, + enableProtocol(Protocol.HTTP_2);, +, + server.enqueue(new MockResponse(), +
[+++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp/src/main/java/okhttp3/Dns.java, +++ b/okhttp/src/main/java/okhttp3/Dns.java, +++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_151</id>, + <activation>, + <jdk>1.8.0_151</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, + </properties>, + </profile>, + <profile>, + <id>alpn-when-jdk8_152</id>, + <activation>, + <jdk>1.8.0_152</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, + </properties>, + </profile>]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + .add(OkHeaders.SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), + .add(OkHeaders.RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), + if (name.equals(OkHeaders.SENT_MILLIS)) {, + if (name.equals(OkHeaders.RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + .add(OkHeaders.SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), + .add(OkHeaders.RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), + if (name.equals(OkHeaders.SENT_MILLIS)) {, + if (name.equals(OkHeaders.RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import javax.net.ssl.SSLPeerUnverifiedException;, + try {, + } catch (Throwable t) {, + throw new IOException("unexpected cache failure", t);, + }, + try {, + } catch (Throwable t) {, + throw new IOException("unexpected cache failure", t);, + }, + try {, + } catch (Throwable t) {, + throw new IOException("unexpected cache failure", t);, + }, + try {, + } catch (Throwable t) {,
[+++ b/CHANGELOG.md, + `ConnectionSpec` class., + client.setConnectionSpecs(Arrays.asList(, + ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));, + client.setConnectionSpecs(Arrays.asList(, + ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));, +++ b/CHANGELOG.md, + `ConnectionSpec` class., + client.setConnectionSpecs(Arrays.asList(, + ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));, + client.setConnectionSpecs(Arrays.asList(, + ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + client.setConnectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));, + client.setConnectionSpecs(Arrays.asList(, + ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));, + assertTrue(expected.getMessage().contains("exhausted connection specs"));, +++ b/CHANGELOG.md, + `ConnectionSpec` class., + client.setConnectionSpecs(Arrays.asList(, + ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));, + client.setConnectionSpecs(Arrays.asList(, + ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, + client.setConnectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));, + client.setConnectionSpecs(Arrays.asList(, + ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));, + assertTrue(expected.getMessage().contains("exhausted connection specs"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, + List<ConnectionSpec> connectionSpecs = Util.immutableList(, + ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT);, + Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), connectionSpecs);, + Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), connectionSpecs);, + ConnectionSpec.CLEARTEXT);, + ConnectionSpec.MODERN_TLS);, + ConnectionSpec.CLEARTEXT));, +++ b/CHANGELOG.md,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + private static final int CLIENT_AUTH_NONE = 0;, + private static final int CLIENT_AUTH_REQUESTED = 1;, + private static final int CLIENT_AUTH_REQUIRED = 2;, +, + private int clientAuth = CLIENT_AUTH_NONE;, + * Configure the server to not perform SSL authentication of the client. This leaves, + * authentication to another layer such as in an HTTP cookie or header. This is the default and, + * most common configuration., + */, + public void noClientAuth() {, + this.clientAuth = CLIENT_AUTH_NONE;, + }, +, + /**, + * Configure the server to {@linkplain SSLSocket#setWantClientAuth want client auth}.
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import javax.net.ServerSocketFactory;, + private ServerSocketFactory serverSocketFactory = ServerSocketFactory.getDefault();, + public void setServerSocketFactory(ServerSocketFactory serverSocketFactory) {, +
[+++ b/okhttp-apache/pom.xml, + <version>1.0.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.0</version>, +++ b/okhttp/pom.xml, + <version>1.0.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.0</version>, +++ b/okhttp/pom.xml, + <version>1.0.0</version>, +++ b/pom.xml, + <version>1.0.0</version>, + <tag>parent-1.0.0</tag>, +++ b/okhttp-apache/pom.xml, + <version>1.0.0</version>, +++ b/okhttp/pom.xml, + <version>1.0.0</version>, +++ b/pom.xml, + <version>1.0.0</version>, + <tag>parent-1.0.0</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.0</version>, +++ b/okhttp/pom.xml, + <version>1.0.0</version>, +++ b/pom.xml, + <version>1.0.0</version>, + <tag>parent-1.0.0</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.0</version>, +++ b/samples/pom.xml, + <version>1.0.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.0.0</version>, +++ b/okhttp/pom.xml, + <version>1.0.0</version>, +++ b/pom.xml, + <version>1.0.0</version>, + <tag>parent-1.0.0</tag>, +++ b/samples/guide/pom.xml, + <version>1.0.0</version>, +++ b/samples/pom.xml, + <version>1.0.0</version>, +++ b/samples/simple-client/pom.xml, + <version>1.0.0</version>]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, + HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, + HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, + HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, + HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, + <module name="UnusedImports">
[+++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, + <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven.
[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, + private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, + private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import org.junit.Ignore;, +public class CookieTest {, + HttpUrl url = HttpUrl.parse("http://example.com/");, + @Ignore("cookie matching isn't implemented"), + @Ignore("cookie matching isn't implemented"), + @Ignore("cookie matching isn't implemented"), + @Ignore("cookie matching isn't implemented"), +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, + private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import org.junit.Ignore;, +public class CookieTest {, + HttpUrl url = HttpUrl.parse("http://example.com/");, + @Ignore("cookie matching isn't implemented"), + @Ignore("cookie matching isn't implemented"), + @Ignore("cookie matching isn't implemented"), + @Ignore("cookie matching isn't implemented"), +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, + private Authenticator authenticator =
[+++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs for interacting with cipher suites and TLS versions., + * Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs for interacting with cipher suites and TLS versions., + * Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, + <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', + <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +++ b/pom.xml, + <animal.sniffer.version>1.15</animal.sniffer.version>]
[+++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, + testLogging {, + exceptionFormat = 'full', + }, + tasks.withType(JavaCompile).configureEach {, + options.errorprone {, + check("MissingOverride", CheckSeverity.ERROR), + }, + }, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, + testLogging {, + exceptionFormat = 'full', + }, + tasks.withType(JavaCompile).configureEach {, + options.errorprone {, + check("MissingOverride", CheckSeverity.ERROR), + }, + }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + @Override LogRecorder assertLogMatch(String pattern) {, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, + testLogging {, + exceptionFormat = 'full', + }, + tasks.withType(JavaCompile).configureEach {, + options.errorprone {, + check("MissingOverride", CheckSeverity.ERROR), + }, + }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + @Override LogRecorder assertLogMatch(String pattern)
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, + new RealWebSocket(false, source, sink, new SecureRandom(), listener,, + request.getPath()) {, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, + new RealWebSocket(false, source, sink, new SecureRandom(), listener,, + request.getPath()) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, + Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, + new RealWebSocket(false, source, sink, new SecureRandom(), listener,, + request.getPath()) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, + Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, + <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE) && protocols.size() > 1) {, + // when using h2_prior_knowledge, no other protocol should be supported., + throw new IllegalArgumentException(, + "protocols containing h2_prior_knowledge cannot use other protocols: " + protocols);, + } else if (!protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE), + && !protocols.contains(Protocol.HTTP_1_1)) {, + } else if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE)) {, + protocol = Protocol.H2_PRIOR_KNOWLEDGE;, + if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, + } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE) && protocols.size() > 1) {, + // when using h2_prior_knowledge, no other protocol should be supported., +
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), + assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // Attempt RESTRICTED_TLS
[+++ b/mockwebserver/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/mockwebserver/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, + <version>1.2.1-SNAPSHOT</version>, + <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +
[+++ b/pom.xml, + <bootclasspathPrefix>${settings.localRepository}/org/mortbay/jetty/npn/npn-boot/${npn.version}/npn-boot-${npn.version}.jar</bootclasspathPrefix>, + <argLine>-Xbootclasspath/p:${bootclasspathPrefix}</argLine>, + <bootclasspathPrefix>${settings.localRepository}/org/mortbay/jetty/alpn/alpn-boot/${alpn.version}/alpn-boot-${alpn.version}.jar</bootclasspathPrefix>, + <argLine>-Xbootclasspath/p:${bootclasspathPrefix}</argLine>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, + .handler(this), + @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, + .handler(this), + @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.framed.IncomingStreamHandler;, + FramedSocketHandler framedSocketHandler = new FramedSocketHandler(socket, protocol);, + .handler(framedSocketHandler), + private class FramedSocketHandler implements IncomingStreamHandler {, + @Override public void receive(FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, + .handler(this), + @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.framed.IncomingStreamHandler;, + FramedSocketHandler framedSocketHandler
[+++ b/.buildscript/deploy_snapshot.sh, + echo "TODO: fix snapshot deployment for gradle...", + # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/deploy_snapshot.sh, + echo "TODO: fix snapshot deployment for gradle...", + # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.github/CONTRIBUTING.md, +sure your code compiles by running `./gradlew check`. Checkstyle failures, +++ b/.buildscript/deploy_snapshot.sh, + echo "TODO: fix snapshot deployment for gradle...", + # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.github/CONTRIBUTING.md, +sure your code compiles by running `./gradlew check`. Checkstyle failures, +++ b/.gitignore, +.gradle, +generated, +++ b/.buildscript/deploy_snapshot.sh, + echo "TODO: fix snapshot deployment for gradle...", +
[+++ b/pom.xml, + <junit.version>4.10</junit.version>, +++ b/pom.xml, + <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, + public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, + String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/pom.xml, + <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, + public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, + String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, + public static String getDefaultUserAgent() {, +++ b/pom.xml, + <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, + public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, + String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, + public static String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, + public String getHeaderFieldKey(int position) {, + return delegate.getHeaderFieldKey(position);, +++ b/pom.xml,
[+++ b/okhttp/pom.xml]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + throw new AssertionError(e);, + throw new AssertionError(e);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + throw new AssertionError(e);, + throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + throw new AssertionError(e);, + throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void disconnectRequestHalfway() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, +
[+++ b/mockwebserver/pom.xml, + <artifactId>maven-javadoc-plugin</artifactId>, + <configuration>, + <links>, + <link>http://square.github.io/okhttp/javadoc/</link>, + <link>http://square.github.io/okio/</link>, + </links>, + </configuration>, + </plugin>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, +++ b/mockwebserver/pom.xml, + <artifactId>maven-javadoc-plugin</artifactId>, + <configuration>, + <links>, + <link>http://square.github.io/okhttp/javadoc/</link>, + <link>http://square.github.io/okio/</link>, + </links>, + </configuration>, + </plugin>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +++ b/mockwebserver/pom.xml, + <artifactId>maven-javadoc-plugin</artifactId>, + <configuration>, + <links>, + <link>http://square.github.io/okhttp/javadoc/</link>, + <link>http://square.github.io/okio/</link>, + </links>, + </configuration>, + </plugin>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +++ b/pom.xml]
[+++ b/checkstyle.xml, + <module name="MethodLength">
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + private Headers.Builder trailers = new Headers.Builder();, + public Headers getTrailers() {, + return trailers.build();, + }, +, + /** Replaces all headers with those specified. */, + /** Replaces all trailers with those specified. */, + public MockResponse setTrailers(Headers trailers) {, + this.trailers = trailers.newBuilder();, + return this;, + }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, + private Headers.Builder trailers = new Headers.Builder();, + public Headers getTrailers() {, + return trailers.build();, + }, +, + /** Replaces all headers with those specified. */, + /** Replaces all trailers with those specified. */, + public MockResponse setTrailers(Headers trailers) {, +
[+++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, + Security.insertProviderAt(Conscrypt.newProviderBuilder().provideTrustManager().build(), 1);, + System.out.println(, + "Running tests using " + Platform.get() + " " + System.getProperty("java.vm.version"));, + System.out.println("TLS1.3+TLS1.2");, + testClient(urls, buildClient(ConnectionSpec.RESTRICTED_TLS));, +, + System.out.println("\nTLS1.3 only");, + System.out.println(Platform.get());, +, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, + Security.insertProviderAt(Conscrypt.newProviderBuilder().provideTrustManager().build(), 1);, + System.out.println(, + "Running tests using " + Platform.get() + " " + System.getProperty("java.vm.version"));, + System.out.println("TLS1.3+TLS1.2");, + testClient(urls, buildClient(ConnectionSpec.RESTRICTED_TLS));, +, + System.out.println("\nTLS1.3 only");, + System.out.println(Platform.get());, +, +++ b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.java, + return Conscrypt.newProviderBuilder().provideTrustManager().build();, + return SSLContext.getInstance("TLSv1.3", getProvider());, + try {, + // Allow for Conscrypt 1.2, + return SSLContext.getInstance("TLS", getProvider());, + } catch (NoSuchAlgorithmException e2) {, + }, + public static ConscryptPlatform buildIfSupported() {, +
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Version;, + @Test public void userAgentIsIncludedByDefault() throws Exception {, + assertTrue(recordedRequest.getHeader("User-Agent"), + .matches("okhttp/\\d\\.\\d\\.\\d(-SNAPSHOT)?"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Version;, + @Test public void userAgentIsIncludedByDefault() throws Exception {, + assertTrue(recordedRequest.getHeader("User-Agent"), + .matches("okhttp/\\d\\.\\d\\.\\d(-SNAPSHOT)?"));, +++ b/okhttp/pom.xml, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>templating-maven-plugin</artifactId>, + <version>1.0-alpha-3</version>, + <executions>, + <execution>, + <goals>, + <goal>filter-sources</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, + <plugin>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Version;, + @Test public void userAgentIsIncludedByDefault() throws Exception {, + assertTrue(recordedRequest.getHeader("User-Agent"), + .matches("okhttp/\\d\\.\\d\\.\\d(-SNAPSHOT)?"));, +++ b/okhttp/pom.xml, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>templating-maven-plugin</artifactId>, + <version>1.0-alpha-3</version>, + <executions>, + <execution>, + <goals>, + <goal>filter-sources</goal>, + </goals>, + </execution>, + </executions>, + </plugin>, +
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, + ByteString data = ByteString.decodeHex("", + + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", + + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +, + sink.write(data).flush();, + assertData(data);, + sink.write(data).flush();, + assertData(data);, + ByteString data = ByteString.decodeHex("", + + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", + + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, + sink.write(data).flush();, + assertData("60b420bb");, + assertData("", + + "0000000058e5f96f1a7fb386dec41920967d0d185a443df4d7", + + "c4c9376391d4a65e0ed8230d1332734b796dee2b4495fb4376");, + sink.write(data).close();, + assertData("3851d9d4");, + assertData("", + + "58e5f96f00000000429a4ae98621e04fce98f47702a1c49b8f", + + "2130583b742dc906eb214c55f6cb1c139c948173a16c941b93");, + assertData(ByteString.decodeHex(hex));, + }, +, + private void assertData(ByteString expected) throws EOFException {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, + ByteString data = ByteString.decodeHex("", + + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", + + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +, + sink.write(data).flush();, + assertData(data);, + sink.write(data).flush();, + assertData(data);, + ByteString data = ByteString.decodeHex("", + +
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, + assertThat(elapsedMillis).isBetween(500L, 1000L);, + assertThat(elapsedMillis).isBetween(500L, 1000L);, + assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, + assertThat(server.getPort()).isGreaterThan(0);, + assertThat(e.getMessage()).contains("refused");, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, + assertThat(elapsedMillis).isBetween(500L, 1000L);, + assertThat(elapsedMillis).isBetween(500L, 1000L);, + assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, + assertThat(server.getPort()).isGreaterThan(0);, + assertThat(e.getMessage()).contains("refused");, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, + List<Header> responseHeaders = asList(, + List<Header> responseHeaders = asList(, + List<Header> responseHeaders = asList(, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, + assertThat(elapsedMillis).isBetween(500L, 1000L);, + assertThat(elapsedMillis).isBetween(500L, 1000L);, + assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, + assertThat(server.getPort()).isGreaterThan(0);, + assertThat(e.getMessage()).contains("refused");, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, + if (response.getSocketPolicy() == DISCONNECT_AT_END) {, + Http2Connection connection = stream.getConnection();, + connection.shutdown(ErrorCode.NO_ERROR);, + }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, + if (response.getSocketPolicy() == DISCONNECT_AT_END) {, + Http2Connection connection = stream.getConnection();, + connection.shutdown(ErrorCode.NO_ERROR);, + }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, + * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, + * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, + * frame</a> immediately after the response and will close the connection when the client's socket, + * is exhausted., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, + if (response.getSocketPolicy() == DISCONNECT_AT_END) {, + Http2Connection connection = stream.getConnection();, + connection.shutdown(ErrorCode.NO_ERROR);, +
[+++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +++ b/okhttp/src/main/java/okhttp3/MultipartBody.java, + private final Headers headers;, + private final RequestBody body;, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +++ b/okhttp/src/main/java/okhttp3/MultipartBody.java, + private final Headers headers;, + private final RequestBody body;, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, + journalWriter = Okio.buffer(Okio.blackhole());, + return Okio.blackhole();, + return Okio.blackhole();, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +++ b/okhttp/src/main/java/okhttp3/MultipartBody.java, + private final Headers headers;, + private final RequestBody body;, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, + journalWriter = Okio.buffer(Okio.blackhole());, + return Okio.blackhole();, + return Okio.blackhole();, +++ b/pom.xml, + <okio.version>1.10.0</okio.version>]
[+++ b/README.md, +OkHttp, +Known Issues, +------------, +, +The SPDY implementation is incomplete:, +, +* Settings frames are not honored. Flow control is not implemented., +* It assumes a well-behaved peer. If the peer sends an invalid frame, OkHttp's SPDY client will not respond with the required `RST` frame., +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android
[+++ b/okhttp/build.gradle, + 'okhttp3.ConnectionSpec#cipherSuites()',, + 'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, + 'okhttp3.ConnectionSpec#isTls()',, + 'okhttp3.ConnectionSpec#supportsTlsExtensions()',, + 'okhttp3.ConnectionSpec#tlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#build()',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ b/okhttp/build.gradle, + 'okhttp3.ConnectionSpec#cipherSuites()',, + 'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, + 'okhttp3.ConnectionSpec#isTls()',, + 'okhttp3.ConnectionSpec#supportsTlsExtensions()',, + 'okhttp3.ConnectionSpec#tlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#build()',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.kt, +++ b/okhttp/build.gradle, + 'okhttp3.ConnectionSpec#cipherSuites()',, + 'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, + 'okhttp3.ConnectionSpec#isTls()',, + 'okhttp3.ConnectionSpec#supportsTlsExtensions()',, + 'okhttp3.ConnectionSpec#tlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, + 'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, + 'okhttp3.ConnectionSpec$Builder#build()',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, + 'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.kt, +++ /dev/null, +++ b/okhttp/build.gradle, + 'okhttp3.ConnectionSpec#cipherSuites()',, + 'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, + 'okhttp3.ConnectionSpec#isTls()',, +
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, + // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., + .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), + assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + // Attempt RESTRICTED_TLS
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, + } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, + shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, + } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, + shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.net.Inet6Address;, +import java.net.InetAddress;, + String path = requestLine.substring(methodEnd + 1, pathEnd);, + if (!path.startsWith("/")) {, + path = "/";, + }, + this.path = path;, + InetAddress inetAddress = socket.getLocalAddress();, +, + String hostname = inetAddress.getHostName();, + if (inetAddress instanceof Inet6Address) {, + hostname = "[" + hostname + "]";, + }, +, + int localPort = socket.getLocalPort();, + // Allow null in failure case to
[+++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, + private OkHttpClient client = defaultClient();, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, + private OkHttpClient client = defaultClient();, +++ /dev/null, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, + private OkHttpClient client = defaultClient();, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, + client = defaultClient().newBuilder(), + TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, + + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, + private OkHttpClient client = defaultClient();, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, + client =
[+++ b/mockwebserver/pom.xml, + <optional>true</optional>, +++ b/mockwebserver/pom.xml, + <optional>true</optional>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(String path, AtomicInteger responseCode) {, + return new Thread(() -> {, + URL url = mockWebServer.url(path).url();, + HttpURLConnection conn;, + } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(String path, AtomicInteger responseCode) {, + return new Thread(() -> {, + URL url = mockWebServer.url(path).url();, + HttpURLConnection conn;, + } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + new Thread(() -> {, + }).start();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + private Thread buildRequestThread(String path, AtomicInteger responseCode) {, + return new Thread(() -> {, + URL url = mockWebServer.url(path).url();, + HttpURLConnection conn;, + } catch (IOException ignored) {,
[+++ b/build.gradle, + check("MissingFail", CheckSeverity.ERROR), +++ b/build.gradle, + check("MissingFail", CheckSeverity.ERROR), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.Ignore;, + @Ignore("Not actually failing where expected"), + fail();, +++ b/build.gradle, + check("MissingFail", CheckSeverity.ERROR), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.Ignore;, + @Ignore("Not actually failing where expected"), + fail();, +++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java, + fail();, + fail();, + fail();, + fail();]
[+++ /dev/null, +++ /dev/null, +++ b/CHANGELOG.md, +++ /dev/null, +++ b/CHANGELOG.md, +++ b/README.md, +An HTTP & SPDY client for Android and Java applications., +, +For more information please see [the website][1]., +, +Making Connections, +------------------, +, +Although you provide only the URL, OkHttp plans its connection to your webserver, +using three types: URL, Address, and Route., +, +#### [URLs](http://developer.android.com/reference/java/net/URL.html), +, +URLs (like `https://github.com/square/okhttp`) are fundamental to HTTP and the, +Internet. In addition to being a universal, decentralized naming scheme for, +everything on the web, they also specify how to access web resources., +, +URLs are abstract:, +, + * They
[+++ b/build.gradle, + 'okio': '2.2.2',, +++ b/build.gradle, + 'okio': '2.2.2',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt, +import okio.utf8Size, + val utf8ByteCount = label.utf8Size(), + nameBuf.copyTo(this, 0, nameBuf.size), +++ b/build.gradle, + 'okio': '2.2.2',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt, +import okio.utf8Size, + val utf8ByteCount = label.utf8Size(), + nameBuf.copyTo(this, 0, nameBuf.size), +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +import java.io.EOFException;, + assertThat(ioe.getCause()).isInstanceOf(EOFException.class);, +++ b/build.gradle, + 'okio': '2.2.2',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt, +import okio.utf8Size, + val utf8ByteCount = label.utf8Size(), + nameBuf.copyTo(this, 0, nameBuf.size), +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +import java.io.EOFException;, + assertThat(ioe.getCause()).isInstanceOf(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/Cache.kt, +import okio.buffer, +import okio.ByteString.Companion.decodeBase64, +import okio.ByteString.Companion.encodeUtf8, + val metadata = snapshot.getSource(ENTRY_METADATA).buffer(), + val source = rawSource.buffer(), + val sink = editor.newSink(ENTRY_METADATA).buffer(), + bytes.write(line.decodeBase64()!!), + bodySource =
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, + /** Lazily created (with synthetic headers) on first call to getHeaders(). */, + private Headers responseHeaders;, + private Headers getHeaders() throws IOException {, + if (responseHeaders == null) {, + Response response = getResponse().getResponse();, + Headers headers = response.headers();, +, + responseHeaders = headers.newBuilder(),
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/deploy_website.sh, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +++ b/README.md, + <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', + <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>,
[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, + if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, + if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, + // Give the socket a chance to become stale., + Thread.sleep(250);, +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, + if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, + // Give the socket a chance to become stale., + Thread.sleep(250);, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.http.OkHeaders;, + if (OkHeaders.hasBody(response) && response.code() >= HTTP_BAD_REQUEST) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, + if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, + // Give the socket a chance to become stale., + Thread.sleep(250);, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java,
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE/bug_report.md, +---, +name: Bug report, +about: A reproducible problem, +title: '', +labels: bug, +assignees: '', +, +---, +, +Bug reports must include a failing test! Writing a test helps you to isolate and describe the problem, and it helps us to fix it fast. Bug without tests may be closed without comment., +, +Here’s an example to get you started., +https://gist.github.com/swankjesse/981fcae102f513eb13ed, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE/bug_report.md, +---, +name: Bug report, +about: A reproducible problem, +title: '', +labels: bug, +assignees: '', +, +---, +, +Bug reports must include a failing test! Writing a test helps you
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, + server.play();, + byte[] body = new byte[bodyByteCount];, + random.nextBytes(body);, + body = gzip(body);, + result.setChunkedBody(new Buffer().write(body), 1024);, +, + /** Returns a gzipped copy of {@code bytes}. */, + private byte[] gzip(byte[] bytes) throws IOException {, + ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, + OutputStream gzippedOut = new GZIPOutputStream(bytesOut);, + gzippedOut.write(bytes);, + gzippedOut.close();, + return bytesOut.toByteArray();, + }, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, + server.play();, + byte[] body = new byte[bodyByteCount];, + random.nextBytes(body);, + body = gzip(body);, + result.setChunkedBody(new Buffer().write(body), 1024);, +, + /** Returns a gzipped copy
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> streamHeaders = stream.takeHeaders();, + stream.writeHeaders(Collections.singletonList(, + stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> streamHeaders = stream.takeHeaders();, + stream.writeHeaders(Collections.singletonList(, + stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + List<Header> requestHeaders = stream.takeHeaders();, + stream.writeHeaders(responseHeaders, true);, + stream.writeHeaders(responseHeaders, true);, + stream.writeHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> streamHeaders = stream.takeHeaders();, + stream.writeHeaders(Collections.singletonList(, + stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + List<Header> requestHeaders = stream.takeHeaders();, + stream.writeHeaders(responseHeaders, true);, + stream.writeHeaders(responseHeaders, true);, + stream.writeHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + List<Header> streamHeaders = stream.takeHeaders();, + stream.writeHeaders(Collections.singletonList(, + stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + List<Header> requestHeaders = stream.takeHeaders();, + stream.writeHeaders(responseHeaders, true);, + stream.writeHeaders(responseHeaders, true);, + stream.writeHeaders(responseHeaders, true);,
[+++ b/okhttp-tests/pom.xml, +, + <build>, + <plugins>, + <!-- Do not deploy this as an artifact to Maven central. -->, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-deploy-plugin</artifactId>, + <configuration>, + <skip>true</skip>, + </configuration>, + </plugin>, + </plugins>, + </build>]
[+++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/tls/HeldCertificate.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/pom.xml, + <junit.version>3.8.2</junit.version>, +++ b/pom.xml, + <junit.version>3.8.2</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, + public static boolean processAuthHeader(int responseCode, RawHeaders responeHeaders,, + String credentials = getCredentials(responeHeaders, challengeHeader, proxy, url);, +++ b/pom.xml, + <junit.version>3.8.2</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, + public static boolean processAuthHeader(int responseCode, RawHeaders responeHeaders,, + String credentials = getCredentials(responeHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +public final class HttpDate {, +++ b/pom.xml, + <junit.version>3.8.2</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, + public static boolean processAuthHeader(int responseCode, RawHeaders responeHeaders,, + String credentials = getCredentials(responeHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +public final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, + public static final String getDefaultUserAgent() {, +++ b/pom.xml, + <junit.version>3.8.2</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java,
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-5.3-all.zip, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-5.3-all.zip, +++ b/gradlew, +#, +# Copyright 2015 the original author or authors., +#, +# Licensed under the Apache License, Version 2.0 (the "License");, +# you may not use this file except in compliance with the License., +# You may obtain a copy of the License at, +#, +# http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing, software, +# distributed under the License is distributed on an "AS IS" BASIS,, +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +# See
[+++ b/benchmarks/pom.xml, + <version>3.7.0</version>, +++ b/benchmarks/pom.xml, + <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.7.0</version>, +++ b/benchmarks/pom.xml, + <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.7.0</version>, +++ b/okcurl/pom.xml, + <version>3.7.0</version>, +++ b/benchmarks/pom.xml, + <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.7.0</version>, +++ b/okcurl/pom.xml, + <version>3.7.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.7.0</version>, +++ b/benchmarks/pom.xml, + <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.7.0</version>, +++ b/okcurl/pom.xml, + <version>3.7.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.7.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.7.0</version>, +++ b/benchmarks/pom.xml, + <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.7.0</version>, +++ b/okcurl/pom.xml, + <version>3.7.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.7.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.7.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.7.0</version>, +++ b/benchmarks/pom.xml, + <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.7.0</version>, +++ b/okcurl/pom.xml, + <version>3.7.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + boolean expectContinue = false;, + expectContinue = true;, + if (expectContinue && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, + if (contentLength != -1) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + boolean expectContinue = false;, + expectContinue = true;, + if (expectContinue && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, + if (contentLength != -1) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.nio.charset.StandardCharsets;, +, + @Test public void http100Continue() throws Exception {, + server.enqueue(new MockResponse().setBody("response"));, +, + URL url = server.url("/").url();, + HttpURLConnection connection = (HttpURLConnection) url.openConnection();, + connection.setDoOutput(true);, + connection.setRequestProperty("Expect", "100-Continue");, + connection.getOutputStream().write("request".getBytes(StandardCharsets.UTF_8));, +, + InputStream in = connection.getInputStream();, + BufferedReader reader = new BufferedReader(new InputStreamReader(in));, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, + final SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, + if (expectContinue && socketPolicy == EXPECT_CONTINUE || socketPolicy == CONTINUE_ALWAYS) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, + final SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, + if (expectContinue && socketPolicy == EXPECT_CONTINUE || socketPolicy == CONTINUE_ALWAYS) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, + EXPECT_CONTINUE,, +, + /**, + * Transmit a {@code HTTP/1.1 100 Continue} response before reading the HTTP request body even, + * if the client does not send the header {@code Expect: 100-continue} in its request., + */, + CONTINUE_ALWAYS, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, + final SocketPolicy socketPolicy =
[+++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], + path = okhttp-hpacktests/src/test/resources/hpack-test-case, + url = git://github.com/http2jp/hpack-test-case.git, +++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], + path = okhttp-hpacktests/src/test/resources/hpack-test-case, + url = git://github.com/http2jp/hpack-test-case.git, +++ b/okhttp-hpacktests/README.md, +OkHttp HPACK tests, +==================, +, +These tests use the [hpack-test-case][1] project to validate OkHttp's HPACK, +implementation. The HPACK test cases are in a separate git submodule, so to, +initialize them, you must run:, +, + git submodule init, + git submodule update, +, +When new interop tests are available, you should update, +HpackDecodeInteropGoodTest#GOOD_INTEROP_TESTS with the directory name., +, +TODO, +----, +, + * Add maven goal to avoid manual call to git submodule
[+++ b/README.md, + <version>2.0.0</version>, +or Gradle:, +```groovy, +compile 'com.squareup.okhttp:okhttp:2.0.0', +```, + <version>2.0.0</version>, +or Gradle:, +```groovy, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', +```, +, +++ b/README.md, + <version>2.0.0</version>, +or Gradle:, +```groovy, +compile 'com.squareup.okhttp:okhttp:2.0.0', +```, + <version>2.0.0</version>, +or Gradle:, +```groovy, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', +```, +, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + String[] parts = header.split(":", 2);, +++ b/README.md, + <version>2.0.0</version>, +or Gradle:, +```groovy, +compile 'com.squareup.okhttp:okhttp:2.0.0', +```, + <version>2.0.0</version>, +or Gradle:, +```groovy, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', +```, +, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, + String[] parts = header.split(":", 2);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, + @Test public void headerSplitWithDate() {, + Request request = fromArgs("-H", "If-Modified-Since: Mon, 18 Aug 2014 15:16:06 GMT",, + "http://example.com").createRequest();, + assertEquals("Mon, 18 Aug
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, + public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, + actions.add((request, requestBody, responseBody) -> {, + try {, + Thread.sleep(unit.toMillis(duration));, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + }, + });, + return this;, + }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, + public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, + actions.add((request, requestBody, responseBody) -> {, + try {, + Thread.sleep(unit.toMillis(duration));, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + }, + });, + return this;, + }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, + @Test public void fullCallTimeoutAppliesToSetup() throws Exception {, + enableProtocol(Protocol.HTTP_2);, +, + server.enqueue(new MockResponse(), +
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, + static {, + Internal.initializeInstanceForTests();, + }, +, + pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., + pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., + pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., + pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., + pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import
[+++ b/.github/CONTRIBUTING.md, +Some general advice, +, +- Don’t change public API lightly, avoid if possible, and include your reasoning in the PR if essential. It causes pain for developers who use OkHttp and sometimes runtime errors., +- Favour a working external library if appropriate. There are many examples of OkHttp libraries that can sit on top or hook in via existing APIs., +- Get working code on a personal branch with tests before you submit a PR., +- OkHttp is a small and light dependency. Don't introduce new dependencies or major new functionality., +- OkHttp targets the intersection of
[+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +import okhttp3.internal.ws.WebSocketRecorder.MessageDelegate;, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +import okhttp3.internal.ws.WebSocketRecorder.MessageDelegate;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + *
[+++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons., + * It uses a local connection to a MockWebServer to measure how many identical, + * requests per second can be carried over a fixed number of threads., +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">,
[+++ b/okhttp-tests/src/test/java/okhttp3/CipherSuiteTest.java, +import static org.junit.Assert.assertArrayEquals;, + * On the Oracle JVM some older cipher suites have the "SSL_" prefix and others have the "TLS_", + * prefix. On the IBM JVM all cipher suites have the "SSL_" prefix., + *, + * <p>Prior to OkHttp 3.3.1 we accepted either form and consider them equivalent. And since OkHttp, + * 3.7.0 this is also true. But OkHttp 3.3.1 through 3.6.0 treated these as different., + assertEquals(, + assertEquals(, + assertEquals(, +, + @Test public void applyIntersectionRetainsSslPrefixes() throws Exception {, + FakeSslSocket socket = new FakeSslSocket();, + socket.setEnabledProtocols(new String[] { "TLSv1"
[+++ b/okhttp/src/main/java/okhttp3/internal/Util.java, + * Returns the system property, or {@code defaultValue} if the system property is null or]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + throw new AssertionError(e);, + throw new AssertionError(e);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + throw new AssertionError(e);, + throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, + throw new AssertionError(e);, + throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, + public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, + @Test public void disconnectRequestHalfway() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + } catch (InterruptedException e) {, + throw new AssertionError(e);, +
[+++ b/CHANGELOG.md, +Version 1.2 *(2013-08-10)*, +----------------------------, +, + * New APIs on OkHttpClient to set default timeouts for connect and read., + * Fix bug when caching SPDY responses., + * Fix a bug with SPDY plus half-closed streams. (thanks kwuollett), + * Fix a bug in `Content-Length` reporting for gzipped streams in the Apache, + HTTP client adapter. (thanks kwuollett), + * Work around the Alcatel `getByInetAddress` bug (thanks k.kocel), + * Be more aggressive about testing pooled sockets before reuse. (thanks, + warpspin), + * Include `Content-Type` and `Content-Encoding` in the Apache HTTP client, + adapter. (thanks
[+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, + ConnectException ce = new ConnectException("Failed to connect to " + route.socketAddress());, + ce.initCause(e);, + throw ce;]
[+++ b/CHANGELOG.md, +## Version 3.8.0, +, +_2017-05-13_, +, +, + * **OkHttp now uses `@Nullable` to annotate all possibly-null values.** We've, + added a compile-time dependency on the JSR 305 annotations. This is a, + [provided][maven_provided] dependency and does not need to be included in, + your build configuration, `.jar` file, or `.apk`. We use, + `@ParametersAreNonnullByDefault` and all parameters and return types are, + never null unless explicitly annotated `@Nullable`., +, + * **Warning: this release is source-incompatible for Kotlin users.**, + Nullability was previously ambiguous and lenient but now the compiler will, + enforce strict null checks.,
[+++ b/benchmarks/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/deploy_website.sh, +# Download the latest javadoc to directories like 'javadoc' or 'javadoc-urlconnection'., +for DOCUMENTED_ARTIFACT in okhttp okhttp-urlconnection okhttp-apache, +do, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, + JAVADOC_DIR="javadoc${DOCUMENTED_ARTIFACT//okhttp/}", + mkdir $JAVADOC_DIR, + unzip javadoc.zip -d $JAVADOC_DIR, + rm javadoc.zip, +done, +, +# Download the 1.6.0 javadoc to '1.x/javadoc'., +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +mkdir -p 1.x/javadoc, +unzip javadoc.zip -d 1.x/javadoc, +++ b/deploy_website.sh, +# Download the latest javadoc to directories like 'javadoc' or 'javadoc-urlconnection'., +for DOCUMENTED_ARTIFACT in okhttp okhttp-urlconnection okhttp-apache, +do, + curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, + JAVADOC_DIR="javadoc${DOCUMENTED_ARTIFACT//okhttp/}", + mkdir $JAVADOC_DIR, + unzip javadoc.zip -d $JAVADOC_DIR, + rm javadoc.zip,
[+++ b/.github/CONTRIBUTING.md, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, + <parent>, + <artifactId>parent</artifactId>, + </parent>, +, + <artifactId>okhttp-bom</artifactId>, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, + <parent>, + <artifactId>parent</artifactId>, + </parent>, +, + <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, + <parent>, + <artifactId>parent</artifactId>, + </parent>, +, + <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, + <parent>, + <artifactId>parent</artifactId>, + </parent>, +, + <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + writeResponse(stream, response);, + if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, + private void writeResponse(Http2Stream stream, MockResponse response) throws IOException {, + boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty();, + stream.writeHeaders(http2Headers, closeStreamAfterHeaders);,
[+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java, +import java.util.concurrent.atomic.AtomicInteger;, +import static okhttp3.TestUtil.repeat;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, + serverListener.assertBinaryMessage(ByteString.of(new byte[] {'H', 'e', 'l', 'l', 'o', '!'}));, + @Test public void webSocketAndApplicationInterceptors() throws IOException {, + final AtomicInteger interceptedCount = new AtomicInteger();, +, + client = client.newBuilder(), + .addInterceptor(new Interceptor() {, + @Override public Response intercept(Chain chain) throws IOException {, + assertNull(chain.request().body());, + Response response = chain.proceed(chain.request());, + assertEquals("Upgrade", response.header("Connection"));, + assertTrue("", response.body().source().exhausted());, + interceptedCount.incrementAndGet();, + return response;, + }, + }).build();, +, + webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +, + WebSocket webSocket = newWebSocket();, + clientListener.assertOpen();, + assertEquals(1, interceptedCount.get());, + webSocket.close(1000, null);, +, + WebSocket server
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, + @Test public void dataFrameNotAssociateWithStream() throws IOException {, + byte[] payload = new byte[] {0x01, 0x02};, +, + writeMedium(frame, payload.length);, + frame.writeByte(Http2.TYPE_DATA);, + frame.writeByte(Http2.FLAG_NONE);, + frame.writeInt(0);, + frame.write(payload);, +, + try {, + reader.nextFrame(false, new BaseTestHandler());, + fail();, + } catch (IOException e) {, + assertEquals("PROTOCOL_ERROR: TYPE_DATA streamId == 0", e.getMessage());, + }, + }, +, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, + @Test public void dataFrameNotAssociateWithStream() throws IOException {, + byte[] payload = new byte[] {0x01, 0x02};, +, + writeMedium(frame, payload.length);, + frame.writeByte(Http2.TYPE_DATA);, + frame.writeByte(Http2.FLAG_NONE);, + frame.writeInt(0);, + frame.write(payload);, +, + try {, +
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/HeldCertificate.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/okhttp-protocols/pom.xml, + <dependency>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-annotations</artifactId>, + <version>1.10</version>, + <optional>true</optional>, + </dependency>, +++ b/okhttp-protocols/pom.xml, + <dependency>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-annotations</artifactId>, + <version>1.10</version>, + <optional>true</optional>, + </dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, + void emitCompleteSegments(Deadline deadline) throws IOException {, +++ b/okhttp-protocols/pom.xml, + <dependency>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>animal-sniffer-annotations</artifactId>, + <version>1.10</version>, + <optional>true</optional>, + </dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, + void emitCompleteSegments(Deadline deadline) throws IOException {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/DeflaterSink.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + *
[+++ /dev/null, +++ /dev/null, +++ b/COPYING, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union of the acting entity and all, + other entities that control, are controlled by,
[+++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], + path = okhttp-hpacktests/src/test/resources/hpack-test-case, + url = git://github.com/http2jp/hpack-test-case.git, +++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], + path = okhttp-hpacktests/src/test/resources/hpack-test-case, + url = git://github.com/http2jp/hpack-test-case.git, +++ b/okhttp-hpacktests/README.md, +OkHttp HPACK tests, +==================, +, +These tests use the [hpack-test-case][1] project to validate OkHttp's HPACK, +implementation. The HPACK test cases are in a separate git submodule, so to, +initialize them, you must run:, +, + git submodule init, + git submodule update, +, +When new interop tests are available, you should update, +HpackDecodeInteropGoodTest#GOOD_INTEROP_TESTS with the directory name., +, +TODO, +----, +, + * Add maven goal to avoid manual call to git submodule
[+++ b/pom.xml, + <groupId>com.squareup</groupId>]
[+++ b/LICENSE.txt, +, + Apache License, + Version 2.0, January 2004, + http://www.apache.org/licenses/, +, + TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, + 1. Definitions., +, + "License" shall mean the terms and conditions for use, reproduction,, + and distribution as defined by Sections 1 through 9 of this document., +, + "Licensor" shall mean the copyright owner or entity authorized by, + the copyright owner that is granting the License., +, + "Legal Entity" shall mean the union of the acting entity and all, + other entities that control, are controlled by, or are under common,
[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +
[+++ b/okhttp/src/test/java/okhttp3/KotlinSourceCompatibilityTest.kt, +@Suppress("UNUSED_VARIABLE"), +++ b/okhttp/src/test/java/okhttp3/KotlinSourceCompatibilityTest.kt, +@Suppress("UNUSED_VARIABLE"), +++ b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, + data.write(ByteString.decodeHex("0a00")); // Empty pong., + data.write(ByteString.decodeHex("ca00")); // Empty pong, flag 1 set., + data.write(ByteString.decodeHex("aa00")); // Empty pong, flag 2 set., + data.write(ByteString.decodeHex("9a00")); // Empty pong, flag 3 set.]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, + assertThat(elapsedMillis).isBetween(500L, 1000L);, + assertThat(elapsedMillis).isBetween(500L, 1000L);, + assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, + assertThat(server.getPort()).isGreaterThan(0);, + assertThat(e.getMessage()).contains("refused");, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, + assertThat(elapsedMillis).isBetween(500L, 1000L);, + assertThat(elapsedMillis).isBetween(500L, 1000L);, + assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, + assertThat(server.getPort()).isGreaterThan(0);, + assertThat(e.getMessage()).contains("refused");, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, + List<Header> responseHeaders = asList(, + List<Header> responseHeaders = asList(, + List<Header> responseHeaders = asList(, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, + assertThat(elapsedMillis).isBetween(500L, 1000L);, + assertThat(elapsedMillis).isBetween(500L, 1000L);, + assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, + assertThat(server.getPort()).isGreaterThan(0);, + assertThat(e.getMessage()).contains("refused");, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, + server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static
[+++ b/okhttp/build.gradle, + 'okhttp3.OkHttpClient$Builder#addInterceptor(okhttp3.Interceptor)',, + 'okhttp3.OkHttpClient$Builder#addNetworkInterceptor(okhttp3.Interceptor)',, + 'okhttp3.OkHttpClient$Builder#authenticator(okhttp3.Authenticator)',, + 'okhttp3.OkHttpClient$Builder#build()',, + 'okhttp3.OkHttpClient$Builder#cache(okhttp3.Cache)',, + 'okhttp3.OkHttpClient$Builder#callTimeout(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.OkHttpClient$Builder#callTimeout(java.time.Duration)',, + 'okhttp3.OkHttpClient$Builder#certificatePinner(okhttp3.CertificatePinner)',, + 'okhttp3.OkHttpClient$Builder#connectionPool(okhttp3.ConnectionPool)',, + 'okhttp3.OkHttpClient$Builder#connectionSpecs(java.util.List)',, + 'okhttp3.OkHttpClient$Builder#connectTimeout(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.OkHttpClient$Builder#connectTimeout(java.time.Duration)',, + 'okhttp3.OkHttpClient$Builder#cookieJar(okhttp3.CookieJar)',, + 'okhttp3.OkHttpClient$Builder#dispatcher(okhttp3.Dispatcher)',, + 'okhttp3.OkHttpClient$Builder#dns(okhttp3.Dns)',, + 'okhttp3.OkHttpClient$Builder#eventListener(okhttp3.EventListener)',, + 'okhttp3.OkHttpClient$Builder#eventListenerFactory(okhttp3.EventListener$Factory)',, + 'okhttp3.OkHttpClient$Builder#followRedirects(boolean)',, + 'okhttp3.OkHttpClient$Builder#followSslRedirects(boolean)',, + 'okhttp3.OkHttpClient$Builder#hostnameVerifier(javax.net.ssl.HostnameVerifier)',, + 'okhttp3.OkHttpClient$Builder#interceptors()',, + 'okhttp3.OkHttpClient$Builder#networkInterceptors()',, + 'okhttp3.OkHttpClient$Builder#pingInterval(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.OkHttpClient$Builder#pingInterval(java.time.Duration)',, + 'okhttp3.OkHttpClient$Builder#protocols(java.util.List)',, + 'okhttp3.OkHttpClient$Builder#proxy(java.net.Proxy)',, + 'okhttp3.OkHttpClient$Builder#proxyAuthenticator(okhttp3.Authenticator)',, + 'okhttp3.OkHttpClient$Builder#proxySelector(java.net.ProxySelector)',, + 'okhttp3.OkHttpClient$Builder#readTimeout(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.OkHttpClient$Builder#readTimeout(java.time.Duration)',, + 'okhttp3.OkHttpClient$Builder#retryOnConnectionFailure(boolean)',, + 'okhttp3.OkHttpClient$Builder#socketFactory(javax.net.SocketFactory)',, + 'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory)',, + 'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory, javax.net.ssl.X509TrustManager)',, + 'okhttp3.OkHttpClient$Builder#writeTimeout(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.OkHttpClient$Builder#writeTimeout(java.time.Duration)',, +++ b/okhttp/build.gradle, + 'okhttp3.OkHttpClient$Builder#addInterceptor(okhttp3.Interceptor)',, + 'okhttp3.OkHttpClient$Builder#addNetworkInterceptor(okhttp3.Interceptor)',, + 'okhttp3.OkHttpClient$Builder#authenticator(okhttp3.Authenticator)',, + 'okhttp3.OkHttpClient$Builder#build()',, + 'okhttp3.OkHttpClient$Builder#cache(okhttp3.Cache)',, + 'okhttp3.OkHttpClient$Builder#callTimeout(long, java.util.concurrent.TimeUnit)',, + 'okhttp3.OkHttpClient$Builder#callTimeout(java.time.Duration)',, + 'okhttp3.OkHttpClient$Builder#certificatePinner(okhttp3.CertificatePinner)',,
[+++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, + /** Synthetic response header: the local time when the request was sent. */, + private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, + /** Synthetic response header: the local time when the response was received. */, + private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, + .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), + .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), + if (name.equals(SENT_MILLIS)) {, + if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, + /** Synthetic response header: the local time when the request was sent. */, + private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, + /**
[+++ b/CHANGELOG.md, +## Version 3.0.1, +, +_2016-01-14_, +, + * Rollback OSGi support. This was causing library jars to include more classes, + than expected, which interfered with Gradle builds., +, +, +## Version 3.0.0, +, +_2016-01-13_, +, +This release commits to a stable 3.0 API. Read the 3.0.0-RC1 changes for advice, +on upgrading from 2.x to 3.x., +, + * **The `Callback` interface now takes a `Call`**. This makes it easier to, + check if the call was canceled from within the callback. When migrating, + async calls to this new API, `Call` is now the first parameter
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.util.logging.Level;, +import java.util.logging.SimpleFormatter;, +import static okhttp3.TestUtil.awaitGarbageCollection;, + response.body().close();, + @Test public void leakedResponseBodyLogsStackTrace() throws Exception {, + server.enqueue(new MockResponse(), + .setBody("This gets leaked."));, +, + client = new OkHttpClient.Builder(), + .connectionPool(new ConnectionPool(0, 10, TimeUnit.MILLISECONDS)), + .build();, +, + Request request = new Request.Builder(), + .url(server.url("/")), + .build();, +, + Level original = logger.getLevel();, + logger.setLevel(Level.FINE);, + logHandler.setFormatter(new SimpleFormatter());, + try {, + client.newCall(request).execute(); // Ignore the response so it gets leaked then GC'd., + awaitGarbageCollection();, +, + String message = logHandler.take();, + assertTrue(message.contains("WARNING: A connection to " + server.url("/") + " was leaked.", + + "
[+++ b/samples/guide/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>okhttp-tls</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/samples/guide/pom.xml, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>okhttp-tls</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, +++ b/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *,
[+++ b/benchmarks/pom.xml, + <version>3.4.0</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0</version>, +++ b/okcurl/pom.xml, + <version>3.4.0</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0</version>, +++ b/okcurl/pom.xml, + <version>3.4.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0</version>, +++ b/okcurl/pom.xml, + <version>3.4.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.4.0</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0</version>, +++ b/okcurl/pom.xml, + <version>3.4.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.4.0</version>, +++ b/okhttp-apache/pom.xml, + <version>3.4.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.4.0</version>, +++ b/benchmarks/pom.xml, + <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, + <version>3.4.0</version>, +++ b/okcurl/pom.xml, + <version>3.4.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/bom/pom.xml, + <artifactId>logging-interceptor</artifactId>, +++ b/bom/pom.xml, + <artifactId>logging-interceptor</artifactId>, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, + serverListener.assertOpen();, + // TODO: fix connection leak, + serverListener.assertOpen();, + // TODO: fix connection leak, + // TODO: fix connection leak, + // TODO: fix connection leak, + newWebSocket();, + // TODO: fix connection leak, + // TODO: fix connection leak, + server.close(1000, null);, + // TODO: fix connection leak, +, + // TODO: fix connection leak, +, + // TODO: fix connection leak, +, + // TODO: fix connection leak, +, + // TODO: fix connection leak, + newWebSocket();, + // TODO: fix connection leak, + //
[+++ b/okhttp/src/main/java/okhttp3/CacheControl.java, + * <p>See <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC 7234, 5.2</a>., +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, + * <p>See <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC 7234, 5.2</a>., +++ b/okhttp/src/main/java/okhttp3/Protocol.java, + * <p>This version of OkHttp implements <a href="https://tools.ietf.org/html/rfc7230">RFC, + * 7230</a>, and tracks revisions to that spec., +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, + * <p>See <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC 7234, 5.2</a>., +++ b/okhttp/src/main/java/okhttp3/Protocol.java, + * <p>This version of OkHttp implements <a href="https://tools.ietf.org/html/rfc7230">RFC, + * 7230</a>, and tracks revisions to that spec., +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, + /** Combines cached headers with a network headers as defined by RFC 7234, 4.3.4. */, +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, + * <p>See <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC 7234, 5.2</a>., +++ b/okhttp/src/main/java/okhttp3/Protocol.java, + * <p>This
[+++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, + throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, + throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, + throw new AssertionError("Invalid IPv6 address: '" + percentDecoded + "'");, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, + throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, + throw new AssertionError("Invalid IPv6 address: '" + percentDecoded + "'");, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import static okhttp3.internal.Util.assertionError;, + throw assertionError("No System TLS", e); // The system has no TLS. Just give up., + throw assertionError("No System TLS", e); // The system has no TLS. Just give up., +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, + throw new AssertionError("unsupported hashAlgorithm: "
[+++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ /dev/null, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected void closeConnection() throws IOException {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/README.md, + URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + @Override protected
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, + Logger logger = Logger.getLogger(Http20Draft15.class.getName());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, + Logger logger = Logger.getLogger(Http20Draft15.class.getName());, +++ /dev/null, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, + Logger logger = Logger.getLogger(Http20Draft15.class.getName());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft15Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software,
[+++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ /dev/null, +++ /dev/null, +++ b/okio/src/main/java/okio/ByteString.java, +import java.io.EOFException;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, + /** A singleton empty {@code ByteString}. */, + public static final ByteString EMPTY = ByteString.of();, +, + ByteString(byte[] data) {, + this.data = data; // Trusted internal constructor doesn't clone data., + }, + public static ByteString read(InputStream in, int byteCount) throws IOException {, + byte[] result = new byte[byteCount];, + for (int offset = 0, read; offset < byteCount; offset += read) {, + read = in.read(result, offset, byteCount - offset);, + if (read == -1) throw new EOFException();, + }, +, + @Override public
[+++ b/okcurl/pom.xml, + <artifactId>logging-interceptor</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, +++ b/okcurl/pom.xml, + <artifactId>logging-interceptor</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.logging.HttpLoggingInterceptor;, +import okhttp3.logging.LoggingEventListener;, + @Option(, + name = {"-v", "--verbose"},, + description = "Makes " + NAME + " verbose during the operation"), + public boolean verbose;, +, + if (verbose) {, + HttpLoggingInterceptor.Logger logger =, + new HttpLoggingInterceptor.Logger() {, + @Override, + public void log(String message) {, + System.out.println(message);, + }, + };, + builder.eventListenerFactory(new LoggingEventListener.Factory(logger));, + }, +++ b/okcurl/pom.xml, + <artifactId>logging-interceptor</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>${project.groupId}</groupId>, +++
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, + bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, + bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, + bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, + localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, + bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, + @Test public void malformedChunkSize() throws IOException {, + server.enqueue(new MockResponse().setBody("5:x\r\nABCDE\r\n0\r\n\r\n"), + .clearHeaders(), + .addHeader("Transfer-encoding: chunked"));, +, + URLConnection connection = client.open(server.getUrl("/"));, + try {, + readAscii(connection.getInputStream(), Integer.MAX_VALUE);, + fail();, + } catch (IOException e) {,
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +, + @Test public void partAccessors() throws IOException {, + MultipartBody body = new MultipartBody.Builder(), + .addPart(Headers.of("Foo", "Bar"), RequestBody.create(null, "Baz")), + .build();, + assertEquals(1, body.parts().size());, +, + Buffer part1Buffer = new Buffer();, + MultipartBody.Part part1 = body.part(0);, + part1.body().writeTo(part1Buffer);, + assertEquals(Headers.of("Foo", "Bar"), part1.headers());, + assertEquals("Baz", part1Buffer.readUtf8());, + }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +, + @Test public void
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, + assertTrue(Thread.interrupted());, + assertTrue(Thread.interrupted());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, + assertTrue(Thread.interrupted());, + assertTrue(Thread.interrupted());, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, + Thread.interrupted(); // Temporarily clear the interrupted state., +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, + assertTrue(Thread.interrupted());, + assertTrue(Thread.interrupted());, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, + Thread.interrupted(); // Temporarily clear the interrupted state., +++ b/pom.xml, + <okio.version>1.15.0</okio.version>]
[+++ b/benchmarks/pom.xml, + <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-RC2</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-RC2</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-RC2</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-RC2</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-RC2</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.0-RC2</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, + <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, + <version>2.0.0-RC2</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, + sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, + out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Buffer buffer = source.getBuffer();, + try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, + try (Source source = Okio.source(file); BufferedSink
[+++ b/pom.xml, + <consoleOutput>true</consoleOutput>, +++ b/pom.xml, + <consoleOutput>true</consoleOutput>, +++ b/src/main/java/libcore/net/http/HttpsURLConnectionImpl.java, + // Get a connection. This may return a pooled connection!, + // If the TLS connection is ready, use it., + // The TLS connection isn't ready. Build a tunnel if necessary and then handshake., + if (connection.getAddress().requiresTunnel()) {, + makeTunnel(policy, connection, getRequestHeaders());, + }, +++ b/pom.xml, + <consoleOutput>true</consoleOutput>, +++ b/src/main/java/libcore/net/http/HttpsURLConnectionImpl.java, + // Get a connection. This may return a pooled connection!, + // If the TLS connection is ready, use it., + // The TLS connection isn't ready. Build a tunnel if necessary and then handshake., +
[+++ b/okhttp/src/main/java/okhttp3/Headers.java, + if (value == null) throw new NullPointerException("value for name " + name + " == null");, +++ b/okhttp/src/main/java/okhttp3/Headers.java, + if (value == null) throw new NullPointerException("value for name " + name + " == null");, +++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_131</id>, + <activation>, + <jdk>1.8.0_131</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, + </properties>, + </profile>]
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + client = new OkHttpClient.Builder(), + .setProtocols(benchmark.protocols), + .build();, + client = new OkHttpClient.Builder(), + .setSslSocketFactory(socketFactory), + .setHostnameVerifier(hostnameVerifier), + .build();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + client = new OkHttpClient.Builder(), + .setProtocols(benchmark.protocols), + .build();, + client = new OkHttpClient.Builder(), + .setSslSocketFactory(socketFactory), + .setHostnameVerifier(hostnameVerifier), + .build();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, + client = new OkHttpClient.Builder(), + .setProtocols(benchmark.protocols), + .setDispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, + benchmark.concurrencyLevel, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>()))), + .build();, + client = client.newBuilder(), + .setSslSocketFactory(socketFactory), + .setHostnameVerifier(hostnameVerifier), + .build();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, + client = new OkHttpClient.Builder(), + .setProtocols(benchmark.protocols), + .build();, + client = new OkHttpClient.Builder(), + .setSslSocketFactory(socketFactory), + .setHostnameVerifier(hostnameVerifier), + .build();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java,
[+++ b/okhttp/src/main/java/okhttp3/Headers.java, + this.namesAndValues = builder.namesAndValues.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/Headers.java, + this.namesAndValues = builder.namesAndValues.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, + return result.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/Headers.java, + this.namesAndValues = builder.namesAndValues.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, + return result.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, + for (Entry entry : lruEntries.values().toArray(new Entry[0])) {, + for (Entry entry : lruEntries.values().toArray(new Entry[0])) {, +++ b/okhttp/src/main/java/okhttp3/Headers.java, + this.namesAndValues = builder.namesAndValues.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, + return result.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, + for (Entry entry : lruEntries.values().toArray(new Entry[0])) {, + for (Entry entry : lruEntries.values().toArray(new Entry[0])) {, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, + streamsToClose = streams.values().toArray(new Http2Stream[0]);, + streamsToNotify = streams.values().toArray(new Http2Stream[0]);, + streamsCopy = streams.values().toArray(new Http2Stream[0]);]
[+++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +
[+++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, + 1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., + 2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, + 1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., + 2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, + <build>, + <plugins>, +
[+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +import java.net.SocketAddress;, + final String connectionName;, + connectionName = builder.connectionName;, + Util.threadFactory(Util.format("OkHttp %s Writer", connectionName), false));, + Util.threadFactory(Util.format("OkHttp %s Push Observer", connectionName), true));, + writerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", connectionName, streamId) {, + new NamedRunnable("OkHttp Window Update %s stream %d", connectionName, streamId) {, + super("OkHttp %s ping %08x%08x", connectionName, payload1, payload2);, + String connectionName;, + SocketAddress remoteSocketAddress = socket.getRemoteSocketAddress();, + String connectionName = remoteSocketAddress instanceof InetSocketAddress, + ? ((InetSocketAddress) remoteSocketAddress).getHostName(), + : remoteSocketAddress.toString();, + return socket(socket, connectionName,, + Socket socket, String connectionName, BufferedSource source, BufferedSink sink) {, + this.connectionName = connectionName;, + super("OkHttp %s", connectionName);, + listenerExecutor.execute(new
[+++ b/benchmarks/pom.xml, + <version>2.5.0</version>, +++ b/benchmarks/pom.xml, + <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0</version>, +++ b/benchmarks/pom.xml, + <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0</version>, +++ b/okcurl/pom.xml, + <version>2.5.0</version>, +++ b/benchmarks/pom.xml, + <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0</version>, +++ b/okcurl/pom.xml, + <version>2.5.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.5.0</version>, +++ b/benchmarks/pom.xml, + <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0</version>, +++ b/okcurl/pom.xml, + <version>2.5.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.5.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.5.0</version>, +++ b/benchmarks/pom.xml, + <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0</version>, +++ b/okcurl/pom.xml, + <version>2.5.0</version>, +++ b/okhttp-android-support/pom.xml, + <version>2.5.0</version>, +++ b/okhttp-apache/pom.xml, + <version>2.5.0</version>, +++ b/okhttp-testing-support/pom.xml, + <version>2.5.0</version>, +++ b/benchmarks/pom.xml, + <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, + <version>2.5.0</version>, +++ b/okcurl/pom.xml, + <version>2.5.0</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, + HostnameVerifier hostnameVerifier, Proxy proxy) throws UnknownHostException {, + && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, + HostnameVerifier hostnameVerifier, Proxy proxy) throws UnknownHostException {, + && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + boolean credentialsFound = HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH,, + responseHeaders, requestHeaders, route.proxy, url);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, + HostnameVerifier hostnameVerifier, Proxy proxy) throws UnknownHostException {, + && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + boolean credentialsFound = HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH,, + responseHeaders, requestHeaders, route.proxy, url);, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, + HostnameVerifier hostnameVerifier, Proxy proxy) throws UnknownHostException {, + && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + boolean credentialsFound = HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH,, + responseHeaders, requestHeaders, route.proxy, url);, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +++
[+++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Handshake handshake = Handshake.get(null, cipherSuite,, + nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, + Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Handshake handshake = Handshake.get(null, cipherSuite,, + nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, + Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, + Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, + Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Handshake handshake = Handshake.get(null, cipherSuite,, + nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, + Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, + Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, + Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, + Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++
[+++ b/pom.xml, + <profile>, + <id>alpn-when-jdk8_131</id>, + <activation>, + <jdk>1.8.0_131</jdk>, + </activation>, + <properties>, + <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, + </properties>, + </profile>]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, + @Test public void newBuilderResolve() throws Exception {, + // Non-exhaustive tests because implementation is the same as resolve., + HttpUrl base = HttpUrl.parse("http://host/a/b");, + assertEquals(HttpUrl.parse("https://host2/"), base.newBuilder("https://host2").build());, + assertEquals(HttpUrl.parse("http://host2/"), base.newBuilder("//host2").build());, + assertEquals(HttpUrl.parse("http://host/path"), base.newBuilder("/path").build());, + assertEquals(HttpUrl.parse("http://host/a/path"), base.newBuilder("path").build());, + assertEquals(HttpUrl.parse("http://host/a/b?query"), base.newBuilder("?query").build());, + assertEquals(HttpUrl.parse("http://host/a/b#fragment"), base.newBuilder("#fragment").build());, + assertEquals(HttpUrl.parse("http://host/a/b"), base.newBuilder("").build());, + assertEquals(null, base.newBuilder("ftp://b"));, + assertEquals(null, base.newBuilder("ht+tp://b"));, + assertEquals(null, base.newBuilder("ht-tp://b"));, + assertEquals(null, base.newBuilder("ht.tp://b"));, + }, +, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, + @Test public void newBuilderResolve() throws Exception {, + // Non-exhaustive tests because implementation is the same as resolve., + HttpUrl base = HttpUrl.parse("http://host/a/b");, + assertEquals(HttpUrl.parse("https://host2/"), base.newBuilder("https://host2").build());, + assertEquals(HttpUrl.parse("http://host2/"),
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/FormBodyTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License
[+++ b/okhttp-sse/pom.xml, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-jar-plugin</artifactId>, + <version>3.0.2</version>, + <configuration>, + <archive>, + <manifestEntries>, + <Automatic-Module-Name>okhttp3.sse</Automatic-Module-Name>, + </manifestEntries>, + </archive>, + </configuration>, + </plugin>, +++ b/okhttp-sse/pom.xml, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-jar-plugin</artifactId>, + <version>3.0.2</version>, + <configuration>, + <archive>, + <manifestEntries>, + <Automatic-Module-Name>okhttp3.sse</Automatic-Module-Name>, + </manifestEntries>, + </archive>, + </configuration>, + </plugin>, +++ /dev/null, +++ b/okhttp-sse/pom.xml, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-jar-plugin</artifactId>, + <version>3.0.2</version>, + <configuration>, + <archive>, + <manifestEntries>, + <Automatic-Module-Name>okhttp3.sse</Automatic-Module-Name>, + </manifestEntries>, + </archive>, + </configuration>, + </plugin>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/pom.xml, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-jar-plugin</artifactId>, + <version>3.0.2</version>, + <configuration>, + <archive>, +
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.BINARY;, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.TEXT;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.BINARY;, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.TEXT;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +, + @Override public Call newCall(OkHttpClient client, Request request) {, + return new Call(client, request);, + }, +, + @Override public Response callGetResponse(Call call, boolean forWebSocket), + throws IOException {, + return call.getResponse(forWebSocket);, + }, +, + @Override public void callEngineReleaseConnection(Call call) throws IOException {, +
[+++ b/okhttp/pom.xml, +, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-assembly-plugin</artifactId>, + <configuration>, + <descriptorRefs>, + <descriptorRef>jar-with-dependencies</descriptorRef>, + </descriptorRefs>, + </configuration>, + <executions>, + <execution>, + <phase>package</phase>, + <goals>, + <goal>single</goal>, + </goals>, + </execution>, + </executions>, + </plugin>]
[+++ b/mockwebserver/pom.xml, + <version>1.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.0</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.0</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.0</version>, +++ b/okhttp/pom.xml, + <version>1.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.0</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.0</version>, +++ b/okhttp/pom.xml, + <version>1.2.0</version>, +++ b/pom.xml, + <version>1.2.0</version>, + <tag>parent-1.2.0</tag>, +++ b/mockwebserver/pom.xml, + <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.0</version>, +++ b/okhttp-protocols/pom.xml, + <version>1.2.0</version>, +++ b/okhttp/pom.xml, + <version>1.2.0</version>, +++ b/pom.xml, + <version>1.2.0</version>, + <tag>parent-1.2.0</tag>, +++ b/samples/guide/pom.xml, + <version>1.2.0</version>, +++ b/mockwebserver/pom.xml, + <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, + <version>1.2.0</version>, +++ b/okhttp-protocols/pom.xml, +
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + // 17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0',, + private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, + 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', + } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, + transport = Transport.HTTP_20_DRAFT_06;, + if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, + builder.http20Draft06();, + HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + // 17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0',,
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +import okio.BufferedSource;, +/** Test caching with {@link OkUrlFactory}. */, + private final OkHttpClient client = new OkHttpClient();, + client.setCache(cache);, + MockResponse mockResponse = new MockResponse(), + .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), + mockResponse.addHeader("Proxy-Authenticate: Basic realm=\"protected area\"");, + mockResponse.addHeader("WWW-Authenticate: Basic realm=\"protected area\"");, + server.enqueue(mockResponse);, + Request request = new Request.Builder(), + .url(server.getUrl("/")), + .build();, + Response response = client.newCall(request).execute();, + assertEquals(responseCode, response.code());, + // Exhaust the content stream., + response.body().string();, + Response cached = cache.get(request);, + * Skipping bytes in the input stream caused ResponseCache corruption., + MockResponse mockResponse = new MockResponse(), + .addHeader("Last-Modified:
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, + .tag("request"), + client.cancel("request");, + client.cancel("request");, + Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, + client.newCall(request).execute();, + client.cancel("request B");, + Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, + client.newCall(requestA).enqueue(callback);, + Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();, + client.newCall(requestB).enqueue(callback);, +, + Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, + Request request = new Request.Builder().url(server.url("/a")).tag("request A").build();, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, + @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, + .tag("request"), + client.cancel("request");, + client.cancel("request");, + Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, + client.newCall(request).execute();, + client.cancel("request B");, + Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, + client.newCall(requestA).enqueue(callback);, + Request requestB
[+++ b/CHANGELOG.md, +## Version 3.14.0, +, +_RELEASE TBD_, +, + * **This release deletes the long-deprecated `OkUrlFactory` and `OkApacheClient` APIs.** These, + facades hide OkHttp's implementation behind another client's API. If you still need this please, + copy and paste [ObsoleteUrlFactory.java][obsolete_url_factory] or, + [ObsoleteApacheClient.java][obsolete_apache_client] into your project., +, + * **OkHttp now supports duplex calls over HTTP/2.** With normal HTTP calls the request must finish, + before the response starts. With duplex, request and response bodies are transmitted, + simultaneously. This can be used to implement interactive conversations within a single HTTP, + call., +, + Create duplex calls
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, + <dependency>, + <groupId>com.squareup.okhttp</groupId>, + <artifactId>mockwebserver</artifactId>, + <version>${project.version}</version>, + <scope>test</scope>, + </dependency>, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, + /** Lazily created (with synthetic headers) on first call to getHeaders(). */, + private Headers responseHeaders;, + private Headers getHeaders() throws IOException {, + if (responseHeaders == null) {, + Response response = getResponse().getResponse();, + Headers headers = response.headers();, +, + responseHeaders = headers.newBuilder(), + .add(Platform.get().getPrefix() + "-Response-Source", responseSourceHeader(response)), + .build();, + }, + return responseHeaders;, + }, +, + private static
[+++ b/benchmarks/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, + <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/**, + * What should be done with the incoming socket., + *, + * <p>Be careful when using values like {@link #DISCONNECT_AT_END}, {@link #SHUTDOWN_INPUT_AT_END}, + * and {@link #SHUTDOWN_OUTPUT_AT_END} that close a socket after a response, and where there are, + * follow-up requests. The client is unblocked and free to continue as soon as it has received the, + * entire response body. If and when the client makes
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, + /** Response headers start, then the entire request body, then response headers end. */, + @Test public void expectContinueStartsResponseHeadersEarly() throws Exception {, + server.enqueue(new MockResponse(), + .setSocketPolicy(SocketPolicy.EXPECT_CONTINUE));, +, + Request request = new Request.Builder(), + .url(server.url("/")), + .header("Expect", "100-continue"), + .post(RequestBody.create(MediaType.get("text/plain"), "abc")), + .build();, +, + Call call = client.newCall(request);, + call.execute();, +, + List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, + "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, + "ResponseHeadersStart", "RequestBodyStart", "RequestBodyEnd", "ResponseHeadersEnd",, + "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, + assertEquals(expectedEvents, listener.recordedEventTypes());, + }, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, + /** Response headers start, then the entire request body, then
[+++ b/pom.xml, + <groupId>com.squareup.okhttp</groupId>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-source-plugin</artifactId>, + <executions>, + <execution>, + <id>attach-sources</id>, + <phase>verify</phase>, + <goals><goal>jar-no-fork</goal></goals>, + </execution>, + </executions>, + </plugin>, + <plugin>, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-javadoc-plugin</artifactId>, + <executions>, + <execution>, + <id>attach-javadocs</id>, + <goals><goal>jar</goal></goals>, + </execution>, + </executions>, + </plugin>, + <plugin>]
[+++ b/okhttp-sse/pom.xml, + <excludePackageNames>okhttp3.internal:okhttp3.internal.*</excludePackageNames>, +++ b/okhttp-sse/pom.xml, + <excludePackageNames>okhttp3.internal:okhttp3.internal.*</excludePackageNames>, +++ b/okhttp-tls/pom.xml, + <excludePackageNames>okhttp3.tls.internal:okhttp3.tls.internal.*</excludePackageNames>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + duplexResponseBody.onRequest(request, source, sink);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + duplexResponseBody.onRequest(request, source, sink);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/DuplexResponseBody.java, +import okio.BufferedSink;, + void onRequest(, + BufferedSink responseBodySink) throws IOException;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, + duplexResponseBody.onRequest(request, source, sink);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/DuplexResponseBody.java, +import okio.BufferedSink;, + void onRequest(, + BufferedSink responseBodySink) throws IOException;, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + *
[+++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/samples/guide/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, + <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +
[+++ b/mockwebserver/pom.xml]
[+++ b/pom.xml, + <version>20120723</version>, + <plugin>, + <!--, + OkHttp requires with javac >= 1.7 for syncFlush on DeflaterOutputStream., + Its language version must be <= 1.6 for dx., +, + Running this code on Java 6 or earlier will fail at runtime due to the missing, + syncFlush API., +, + Dalvik's core library includes syncFlush, but with an @hide tag so that it doesn't, + show up in the documentation or the android.jar stubs. This code works fine on, + Dalvik., + -->, + <groupId>org.apache.maven.plugins</groupId>, + <artifactId>maven-enforcer-plugin</artifactId>, + <executions>, + <execution>, + <id>enforce-java</id>, + <goals>, + <goal>enforce</goal>,
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, + OkBuffer body = new OkBuffer();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, + OkBuffer body = new OkBuffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.OkBuffer;, + OkBuffer buffer = new OkBuffer();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, + OkBuffer body = new OkBuffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.OkBuffer;, + OkBuffer buffer = new OkBuffer();, +++ b/okhttp-tests/pom.xml, + <version>${project.version}</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, + OkBuffer body = new OkBuffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.OkBuffer;, + OkBuffer buffer = new OkBuffer();, +++ b/okhttp-tests/pom.xml, + <version>${project.version}</version>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +import okio.OkBuffer;, + OkBuffer buffer = new OkBuffer();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, + OkBuffer body = new OkBuffer();, +++
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, + email: false, +, +jdk:, + -
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, + System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, + return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, + Headers okHeaders = extractOkResponseHeaders(httpUrlConnection);, + Headers okHeaders = extractOkHeaders(javaResponse);, + Headers headers = extractOkHeaders(requestHeaders);, + final Headers headers = response.headers();, + private static Headers extractOkHeaders(CacheResponse javaResponse) throws IOException {, + return extractOkHeaders(javaResponseHeaders);, + private static
[+++ b/okhttp-sse/README.md, +OkHttp Server-Sent Events, +=========================, +, +Experimental support for server-sent events., +API is not considered stable and may change at any time., +++ b/okhttp-sse/README.md, +OkHttp Server-Sent Events, +=========================, +, +Experimental support for server-sent events., +API is not considered stable and may change at any time., +++ b/okhttp-sse/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, +, + <parent>, + <groupId>com.squareup.okhttp3</groupId>, + <artifactId>parent</artifactId>, + <version>3.11.0-SNAPSHOT</version>, + </parent>, +, + <artifactId>okhttp-sse</artifactId>, + <name>OkHttp Server-Sent Events</name>, +, + <dependencies>, + <dependency>, + <groupId>${project.groupId}</groupId>, + <artifactId>okhttp</artifactId>, + <version>${project.version}</version>, + </dependency>, + <dependency>, + <groupId>com.google.code.findbugs</groupId>, + <artifactId>jsr305</artifactId>, + <scope>provided</scope>, +
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, + @Test public void conditionalCacheHit() throws Exception {, + server.enqueue(new MockResponse(), + .clearHeaders(), + .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, + @Test public void conditionalCacheMiss() throws Exception {, + server.enqueue(new MockResponse().setBody("A").addHeader("ETag: v1"));, + server.enqueue(new MockResponse().setBody("B"));, + server.play();, +, + client.setOkResponseCache(cache);, +, + Request request1 = new Request.Builder(), + .url(server.getUrl("/")), + .build();, + client.enqueue(request1, receiver);, + receiver.await(request1.url()).assertCode(200).assertBody("A");, + assertNull(server.takeRequest().getHeader("If-None-Match"));, +, + Request request2 = new Request.Builder(), + .url(server.getUrl("/")), + .build();, + client.enqueue(request2, receiver);, + receiver.await(request2.url()).assertCode(200).assertBody("B");, + assertEquals("v1", server.takeRequest().getHeader("If-None-Match"));, + }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, + @Test public void conditionalCacheHit() throws Exception {, + server.enqueue(new MockResponse(), + .clearHeaders(), + .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, + @Test public void conditionalCacheMiss()
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, + static {, + Internal.initializeInstanceForTests();, + }, +, + pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., + pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., + pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., + pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., + pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.internal.Internal;, + listener.forbidLock(Internal.instance.realConnectionPool(client.connectionPool()));, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.internal.Internal;, + listener.forbidLock(Internal.instance.realConnectionPool(client.connectionPool()));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,,
[+++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, + @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., + @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., + @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, + @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., + @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., + @IgnoreJRERequirement // Should only be invoked on Java 8+ or
[+++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs for interacting with cipher suites and TLS versions., + * Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs for interacting with cipher suites and TLS versions., + * Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, + <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', + <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + * New: Typesafe APIs
[+++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, + /** Returns true if there is a failure that retrying might fix. */, + boolean hasStreamFailure() {, + return hasStreamFailure;, + }, + }, + /** Returns true if a current route is still good or if there are routes we haven't tried yet. */, + boolean hasRouteToTry() {, + synchronized (connectionPool) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, + /** Returns true if there is a failure that retrying might fix. */, + boolean hasStreamFailure() {, + return hasStreamFailure;, + }, + }, + /** Returns true if a current route is still good or if there are routes
[+++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.0.0-RC1</version>, +++ b/okcurl/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.0.0-RC1</version>, +++ b/okcurl/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.0.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <version>3.0.0-RC1</version>,
[+++ b/CHANGELOG.md, +## Version 3.4.0-RC1, +, +_2016-07-02_, +, + * **We’ve rewritten HttpURLConnection and HttpsURLConnection.** Previously we, + shared a single HTTP engine between two frontend APIs: `HttpURLConnection`, + and `Call`. With this release we’ve rearranged things so that the, + `HttpURLConnection` frontend now delegates to the `Call` APIs internally., + This has enabled substantial simplifications and optimizations in the OkHttp, + core for both frontends., +, + For most HTTP requests the consequences of this change will be negligible., + If your application uses `HttpURLConnection.connect()`,, + `setFixedLengthStreamingMode()`, or `setChunkedStreamingMode()`, OkHttp will, + now use a async dispatcher thread
