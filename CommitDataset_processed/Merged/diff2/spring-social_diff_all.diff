[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + try {, + } catch (Exception e) {, + logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, + }, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + try {, + } catch (Exception e) {, + logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, + }, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, + .param("oauth_verifier", "verifier")), + .andExpect(redirectedUrl("/connect/oauth1Provider"));, + @Test, + public void oauth1Callback_exceptionWhileFetchingAccessToken() throws Exception {, + ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, + ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, + connectionFactoryLocator.addConnectionFactory(connectionFactory);, +
[+++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), + metaInf << files("src/main/resources/tld/spring-social.tld"), + gradleVersion = "1.12", +++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), + metaInf << files("src/main/resources/tld/spring-social.tld"), + gradleVersion = "1.12", +++ b/gradle.properties, +h2Version=1.3.176, +springSecurityVersion=3.2.9.RELEASE, +aspectjVersion=1.8.5, +springVersion=4.3.3.RELEASE, +version=1.1.5.BUILD-SNAPSHOT, +jacksonVersion=2.6.1, +mockitoVersion=1.10.19, +thymeleafVersion=2.1.4.RELEASE, +++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), + metaInf << files("src/main/resources/tld/spring-social.tld"), + gradleVersion = "1.12", +++ b/gradle.properties, +h2Version=1.3.176, +springSecurityVersion=3.2.9.RELEASE, +aspectjVersion=1.8.5, +springVersion=4.3.3.RELEASE, +version=1.1.5.BUILD-SNAPSHOT, +jacksonVersion=2.6.1, +mockitoVersion=1.10.19, +thymeleafVersion=2.1.4.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), + metaInf << files("src/main/resources/tld/spring-social.tld"), + gradleVersion = "1.12", +++ b/gradle.properties, +h2Version=1.3.176, +springSecurityVersion=3.2.9.RELEASE, +aspectjVersion=1.8.5, +springVersion=4.3.3.RELEASE, +version=1.1.5.BUILD-SNAPSHOT, +jacksonVersion=2.6.1, +mockitoVersion=1.10.19, +thymeleafVersion=2.1.4.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Jun 30 12:43:52 CDT 2014, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.12-bin.zip, +++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), + metaInf << files("src/main/resources/tld/spring-social.tld"),
[+++ b/docs/src/reference/docbook/apis.xml]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, + SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException;]
[+++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/api/impl/LinkedInTemplate.java, + LinkedInConnections connections = restTemplate.getForObject("https://api.linkedin.com/v1/people/~/connections", LinkedInConnections.class);, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/api/impl/LinkedInTemplate.java, + LinkedInConnections connections = restTemplate.getForObject("https://api.linkedin.com/v1/people/~/connections", LinkedInConnections.class);, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/connect/LinkedInApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,,
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, + int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, + int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <section id="service-providers-implementing">, + <title>Implementing Service Providers</title>, + The spring-social-core module provides support for implementing your own ServiceProviders., + This support consists of convenient base classes for the various ServiceProvider types, such as OAuth1 and OAuth2-based providers., + A common data access interface is also provided for persisting connection information., + In this section, you will learn how to implement ServiceProviders., + </para>, + <section id="service-providers-implementing-oauth2">, + <title>OAuth2</title>, + <para>, + To implement an OAuth2-based ServiceProvider, first extend AbstractOAuth2ServiceProvider., + Parameterize &lt;S&gt; to be the Java Binding to the ServiceProvider API., + Define a single constructor that
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, + private final OAuth10Operations oauth1Operations;, +, + public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, + String consumerSecret, OAuth10Operations oauth1Operations) {, + super(id, connectionRepository, consumerKey, consumerSecret);, + this.oauth1Operations = oauth1Operations;, + }, +, + public OAuth10Operations getOAuth10Operations() {, + return oauth1Operations;, + }, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, + private final OAuth10Operations oauth1Operations;, +, + public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + private final ApiAdapter<A> apiAdapter;, + this.apiAdapter = nullSafeApiAdapter(apiAdapter);, + * Exposes the ApiAdapter to subclasses., + return apiAdapter;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + private final ApiAdapter<A> apiAdapter;, + this.apiAdapter = nullSafeApiAdapter(apiAdapter);, + * Exposes the ApiAdapter to subclasses., + return apiAdapter;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, + * @param apiAdapter the ApiAdapter for the ServiceProvider, + OAuth2ServiceProvider<A> serviceProvider, ApiAdapter<A> apiAdapter) {, + super(apiAdapter);, + * @param apiAdapter the ApiAdapter for the ServiceProvider, + public OAuth2Connection(ConnectionData data, OAuth2ServiceProvider<A> serviceProvider, ApiAdapter<A> apiAdapter) {, + super(data, apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + private final ApiAdapter<A> apiAdapter;, + this.apiAdapter = nullSafeApiAdapter(apiAdapter);, + * Exposes the ApiAdapter to
[+++ b/docs/src/reference/docbook/apis.xml, + <title>Working with Service Provider APIs</title>, +++ b/docs/src/reference/docbook/apis.xml, + <title>Working with Service Provider APIs</title>, +++ b/docs/src/reference/docbook/implementing.xml, + By now, you should have a API binding to the provider's API, a ServiceProvider&lt;A&gt; implementation for conducting the "authorization dance", and an ApiAdapter&lt;A&gt; implementation for mapping onto the uniform Connection model.]
[+++ b/docs/src/reference/docbook/overview.xml, +, + <para>, + The phrase "social networking" often refers to efforts aimed at bringing people together., + In the software world, those efforts take the form of online social networks such as Facebook, Twitter, and LinkedIn., + Roughly half a billion of this world's internet users have flocked to these services to keep frequent contact with family, friends, and colleagues., + </para>, + <para>, + Under the surface, however, these services are just software applications that gather, store, and process information., + Just like so many applications written before, these social networks have users who sign
[+++ b/spring-social-test/src/main/java/org/springframework/social/test/connect/MockConnectionRepository.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/build.gradle, + compile("org.thymeleaf:thymeleaf:$thymeleaf3Version", optional), + compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version", optional), +++ b/build.gradle, + compile("org.thymeleaf:thymeleaf:$thymeleaf3Version", optional), + compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version", optional), +++ b/settings.gradle, +++ b/build.gradle, + compile("org.thymeleaf:thymeleaf:$thymeleaf3Version", optional), + compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version", optional), +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, + compile("org.thymeleaf:thymeleaf:$thymeleaf3Version", optional), + compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version", optional), +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + compile("org.thymeleaf:thymeleaf:$thymeleaf3Version", optional), + compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version", optional), +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, +/*, + * Copyright 2015-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + *
[+++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Exception indicating that the authorization presented to the server has expired., +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Exception indicating that the authorization presented to the server has expired., +++ b/spring-social-core/src/main/java/org/springframework/social/InternalServerErrorException.java, + * Exception indicating an internal error occurred on the server., +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Exception indicating that the authorization presented to the server has expired., +++ b/spring-social-core/src/main/java/org/springframework/social/InternalServerErrorException.java, + * Exception indicating an internal error occurred on the server., +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Exception indicating that the authorization presented to the server is invalid., + * It could be wrong or corrupt, or it could have been
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/src/dist/changelog.txt, + Bug Fixes, + * Set character set to UTF-8 for string parts of multipart messages to allow for, + Korean and other characters to be posted in status updates. (SOCIALTW-37), +]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 1 (Oct 29, 2010), +==============================================, +, +New Features, + * OAuthSigningClientHttpRequest and OAuthSigningClientHttpRequestFactory for signing, + requests sent through RestTemplate, + * TwitterOperations/TwitterTemplate for interaction with Twitter's REST API, + * Supports tweeting, retweeting, retrieval of friends, retrieval of screen name,, + and searching, + * FacebookOperations/FacebookTemplate for interaction with Facebook's Graph API, + * Supports posting messages (and links) to a user's wall, retrieval of friends,, + retrieval of profile ID, profile picture, profile URL., + * LinkedInOperations/LinkedInTemplate for interaction with LinkedIn's REST API, + * Supports retrieval of a user's connections
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.beans.factory.InitializingBean;, +public class ConnectController implements InitializingBean {, + private ConnectSupport connectSupport;, + private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy();, + , + connectSupport.setApplicationUrl(applicationUrl);, + * Sets a strategy to use when persisting information that is to survive past the boundaries of a request., + * The default strategy is to set the data as attributes in the HTTP Session., + * @param sessionStrategy the session strategy., + */, + public void setSessionStrategy(SessionStrategy sessionStrategy) {, + this.sessionStrategy = sessionStrategy;, + }, + , + /**, + return new RedirectView(connectSupport.buildOAuthUrl(connectionFactory, request, parameters));, + sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, + Connection<?> connection
[+++ b/build.gradle, +project('spring-social-config') {, + description = 'Configuration Namespace', + dependencies {, + compile "org.springframework:spring-beans:$springVersion", + compile project(':spring-social-core'), + testCompile project(':spring-social-facebook'), + testCompile project(':spring-social-twitter'), + testCompile "com.h2database:h2:1.2.143", + testCompile project(':spring-social-core').sourceSets.test.classes, + }, +}, +, +++ b/build.gradle, +project('spring-social-config') {, + description = 'Configuration Namespace', + dependencies {, + compile "org.springframework:spring-beans:$springVersion", + compile project(':spring-social-core'), + testCompile project(':spring-social-facebook'), + testCompile project(':spring-social-twitter'), + testCompile "com.h2database:h2:1.2.143", + testCompile project(':spring-social-core').sourceSets.test.classes, + }, +}, +, +++ b/docs/src/reference/docbook/implementing.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="implementing" xmlns:xlink="http://www.w3.org/1999/xlink">, + <title>Implementing Service Providers</title>, + <para>, + The spring-social-core module provides support for implementing your own ServiceProviders., + This support consists
[+++ b/docs/src/reference/docbook/overview.xml, +, + <section id="overview-social">, + <title>Socializing applications</title>, + , + <para>The phrase "social networking" often refers to efforts aimed at bringing people together. In the software world, those efforts take the form of online social networks such as Facebook, Twitter, and LinkedIn. Roughly half a billion of this world's internet users have flocked to these services to keep frequent contact with family, friends, and colleagues.</para>, + , + <para>Under the surface, however, these services are just software applications that gather, store, and process information. Just like so many applications written before, these social networks have users who
[+++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/web.xml]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestAuthorizer.java, +package org.springframework.social.oauth1;, +, +import java.net.MalformedURLException;, +import java.util.HashMap;, +import java.util.Map;,
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <title>Establishing connections</title>, + <title>OAuth2 service providers</title>, + <title>OAuth1 service providers</title>, + </section>, + <title>Persisting connections</title>, + <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType);, + <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId); , + <S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType);, + Note that all operations on this repository are scoped relative to the "current user" that has authenticated with your local application., + For standalone, desktop, or mobile environments that only have one user this distinction isn't important., + In a multi-user web application environment, this implies ServiceProviderConnectionRepository instances will be request-scoped., + These operations include the ability to lookup the local userIds
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, + if (isSocialSecurityAvailable()) {, + // TODO: Determine if the class is assignable to a SocialAuthenticationService , + this.authenticationServiceClass = getAuthenticationServiceClass();, + }, + protected Class<?> getAuthenticationServiceClass() {, + return null;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, + if (isSocialSecurityAvailable()) {, + // TODO: Determine if the class is assignable to a SocialAuthenticationService , + this.authenticationServiceClass = getAuthenticationServiceClass();, + }, + protected Class<?> getAuthenticationServiceClass() {, + return null;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, + , + @Override, + protected Class<?> getAuthenticationServiceClass() {, + return FakeSocialAuthenticationService.class;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, + if (isSocialSecurityAvailable()) {, + // TODO: Determine if the class is assignable to a SocialAuthenticationService ,
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + private String applicationUrl = null;, + , + this.applicationUrl = applicationUrl;, + if (applicationUrl != null) {, + this.connectSupport.setApplicationUrl(applicationUrl);, + }, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + private String applicationUrl = null;, + , + this.applicationUrl = applicationUrl;, + if (applicationUrl != null) {, + this.connectSupport.setApplicationUrl(applicationUrl);, + }, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.connect.mem.InMemoryUsersConnectionRepository;, + public void createConnectController_setApplicationUrl() throws Exception {, + ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, + ConnectionRepository connectionRepository = new InMemoryUsersConnectionRepository(connectionFactoryLocator).createConnectionRepository("userid");, + ConnectController controller = new ConnectController(connectionFactoryLocator, connectionRepository);, + controller.setApplicationUrl("http://baseurl.com/");, + }, + , + @Test]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, + private final OAuth1Credentials credentials;, + credentials = null;, + credentials = new OAuth1Credentials(consumerKey, consumerSecret, accessToken, accessTokenSecret);, + restTemplate = ProtectedResourceClientFactory.create(credentials);, + this.restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, credentials));, + return credentials != null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, + private final OAuth1Credentials credentials;, + credentials = null;, + credentials = new OAuth1Credentials(consumerKey, consumerSecret, accessToken, accessTokenSecret);, + restTemplate = ProtectedResourceClientFactory.create(credentials);, + this.restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, credentials));, + return credentials != null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + public static RestTemplate create(OAuth1Credentials credentials) {, + client.setInterceptors(new ClientHttpRequestInterceptor[] { new OAuth1RequestInterceptor(credentials)});, + client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(), credentials));, + public static ClientHttpRequestFactory addOAuthSigning(ClientHttpRequestFactory requestFactory, OAuth1Credentials credentials) {, + return new Spring30OAuth1RequestFactory(requestFactory, credentials);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + * Creates an {@link OAuthToken} given the response from the request token or access token exchange with the provider., + * May be overridden to create a custom {@link OAuthToken}., + * @param tokenValue the token value received from the provider., + * @param tokenSecret the token secret received from the provider., + * @param response all parameters from the response received in the request/access token exchange., + * @return an {@link OAuthToken}, + */, + protected OAuthToken createOAuthToken(String tokenValue, String tokenSecret, MultiValueMap<String, String> response) {, + return new OAuthToken(tokenValue, tokenSecret);, + }, +, + /**,
[+++ b/docs/src/reference/docbook/implementing.xml, + A Spring Social client module is a standard Java project that builds a single jar artifact e.g. spring-social-twitter.jar., + We recommend the code structure of a client module follow the guidelines described below., + <title>Code structure guidelines</title>, + We recommend the code for a new Spring Social client module reside within the <code>org.springframework.social.{providerId}</code> base package,, + Each request made to the API server needs to be signed with the authorization credentials provided during construction of the binding., + For complete implementation examples, consult the source of the existing API bindings included in Spring Social., + The
[+++ b/docs/src/reference/docbook/connecting.xml, +++ b/docs/src/reference/docbook/connecting.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/docs/src/reference/docbook/connecting.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/docs/src/reference/docbook/serviceprovider.xml, + OAuth 2 is rapidly becoming a preferred authorization protocol, and is used by major service providers such as Facebook, Github, Foursquare, and 37signals.]
[+++ b/docs/src/reference/docbook/overview.xml, + If you are developing against a milestone or release candidate version, such as 1.0.0.M1 or 1.0.0.RC1, you will need to add the following repository in order to resolve the artifact:, + If you are using Spring Social with Spring Framework 3.0.5 or >, make sure you explicitly add the spring-web dependency to your build:, + <version>3.0.6.RELEASE</version>, + compile ("org.springframework:spring-web:3.0.6.RELEASE") { force=true }, + Each binding, such as Facebook or Twitter, transitively depends on Jackson 1.8, so there's nothing special to do to add Jackson to your project's Maven or Gradle build. ]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/reference/docbook/connecting.xml, + public TwitterServiceProvider twitter(@Value("${twitter.consumerKey}") String consumerKey,, + @Value("${twitter.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, + public FacebookServiceProvider facebook(@Value("${facebook.appId}") String appId,, + @Value("${facebook.appSecret}") String appSecret, ConnectionRepository connectionRepository) {, + public TripItServiceProvider tripit(@Value("${tripit.consumerKey}") String consumerKey,, + @Value("${tripit.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, + Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as placeholder variables to be resolved by Spring's property placeholder support., + public TextEncryptor textEncryptor(@Value("${security.encryptPassword}") String password,, + @Value("${security.encryptSalt}") String salt) {, + <constructor-arg value="${twitter.consumerKey}"
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, + * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, + * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, + for (int i = 1; i < strings.length; i++) {, + builder.append("," + strings[i]);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, + * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, + for (int i = 1; i < strings.length; i++) {, + builder.append("," + strings[i]);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, + * Retrieves a list of the authenticating user's friends' IDs., + * @return a list of Strings, where each entry
[+++ b/gradle.properties, +springSocialVersion=1.0.0.RC1, +role=buildmaster]
[+++ b/.gitignore, +Thumbs.db, +build, +bin, +.classpath, +.project, +.settings, +++ b/.gitignore, +Thumbs.db, +build, +bin, +.classpath, +.project, +.settings, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + * Sets the default URL to redirect the user to after signing in using a provider., + String originalUrl = signInAdapter.signIn(userId, connection, request);, + return originalUrl != null ? redirect(originalUrl) : redirect(postSignInUrl);]
[+++ b/build.gradle, + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, + public void exchangeForAccess_facebookStyle() {, + // Facebook returns form-encoded results as text/plain. There is no refresh token., + MediaType responseContentType = MediaType.TEXT_PLAIN;, + String responseFile = "accessToken.facebook";, + AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, + assertEquals("162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B", accessGrant.getAccessToken());, + assertNull(accessGrant.getRefreshToken());, + }, +, + @Test, + public void exchangeForAccess_jsonResponse() {, + // The OAuth 2 spec draft specifies JSON as the response content type. Gowalla and Github return the access token this way., + MediaType responseContentType = MediaType.APPLICATION_JSON;, + String responseFile = "accessToken.json";, + AccessGrant accessGrant = getAccessGrant(responseContentType,
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, + .andExpect(content().string(expectedClientParams + "code=code&redirect_uri=http%3A%2F%2Fwww.someclient.com%2Fcallback&grant_type=authorization_code"));, + .andExpect(content().string(expectedClientParams + "username=habuma&password=letmein01&grant_type=password&scope=read%2Cwrite"));, + .andExpect(content().string(expectedClientParams + "grant_type=client_credentials&scope=read%2Cwrite"));, + .andExpect(content().string(expectedClientParams + "refresh_token=r3fr35h_t0k3n&grant_type=refresh_token"));]
[+++ b/build.gradle, +project('spring-social-oauth') {, + description = 'Spring Social OAuth', + dependencies {, + compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", + compile ("org.scribe:scribe:$scribeVersion") { optional = true }, + compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, + compile "org.springframework:spring-web:$springVersion", + }, +}, +, + compile project(':spring-social-oauth'), +++ b/build.gradle, +project('spring-social-oauth') {, + description = 'Spring Social OAuth', + dependencies {, + compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", + compile ("org.scribe:scribe:$scribeVersion") { optional = true }, + compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, + compile "org.springframework:spring-web:$springVersion", + }, +}, +, + compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/build.gradle, +project('spring-social-oauth') {, + description = 'Spring Social OAuth', +
[+++ b/build.gradle, + gradleVersion = "1.11", +++ b/build.gradle, + gradleVersion = "1.11", +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + gradleVersion = "1.11", +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri Feb 21 16:56:03 CST 2014, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.11-bin.zip]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.SessionStrategy;, +import org.springframework.social.connect.web.HttpSessionSessionStrategy;, +import org.springframework.web.context.request.ServletWebRequest;, + private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy(); , +, + /**, + * Sets a strategy to use when persisting information that is to survive past the boundaries of a request., + * The default strategy is to set the data as attributes in the HTTP Session., + * @param sessionStrategy the session strategy., + */, + public void setSessionStrategy(SessionStrategy sessionStrategy) {, + this.sessionStrategy = sessionStrategy;, + }, +, + sessionStrategy.setAttribute(new ServletWebRequest(request), ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(token.getConnection()));]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * .apply(new SpringSocialConfigurer());, + * Constructs a SpringSocialConfigurer.]
[+++ b/spring-social-core/src/main/resources/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.sql, +-- This SQL contains a "create table" that can be used to create a table that JdbcUsersConnectionRepository can persist, +-- connection in. It is, however, not to be assumed to be production-ready, all-purpose SQL. It is merely representative, +-- of the kind of table that JdbcUsersConnectionRepository works with. The table and column names, as well as the general, +-- column types, are what is important. Specific column types and sizes that work may vary across database vendors and, +-- the required sizes may vary across API providers. , +, + accessToken varchar(512) not null,, + secret varchar(512),,
[+++ b/build.gradle, +, +, +++ b/build.gradle, +, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, +import org.thymeleaf.spring4.context.SpringWebContext;, + ApplicationContext applicationContext = getSpringApplicationContextFromThymeleafContext(context);, + private ApplicationContext getSpringApplicationContextFromThymeleafContext(final IContext context) {, + if (!(context instanceof SpringWebContext)) {, + SpringWebContext.class.getName() + ". Spring Social integration can only be used in " +, + final SpringWebContext springContext = (SpringWebContext) context;]
[+++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg value="http://localhost:8080/facebook-showcase" />, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg value="http://localhost:8080/facebook-showcase" />, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/data.xml, + <jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg value="http://localhost:8080/facebook-showcase" />, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/data.xml, + <jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <bean id="serviceProviderFactory" class="org.springframework.social.config.BeanServiceProviderFactory" autowire="constructor" />]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/build.gradle, + compile project(':spring-social-web'), +++ b/build.gradle, + compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, + @Override, + public void signIn(Serializable accountId) {, + SecurityContextHolder.getContext().setAuthentication(, + new UsernamePasswordAuthenticationToken(accountId, null, null));, + }, +, +}, +++ b/build.gradle, + compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, + @Override, + public void signIn(Serializable accountId) {, + SecurityContextHolder.getContext().setAuthentication(, + new UsernamePasswordAuthenticationToken(accountId, null, null));, + }, +, +}, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml,
[+++ b/pom.xml, + <!-- TODO: This isn't right...it's a javadoc:aggregate goal, not a property. , + See http://maven.apache.org/plugins/maven-javadoc-plugin/examples/aggregate.html, + <javadoc:aggregate>true</javadoc:aggregate> -->]
[+++ b/readme.txt, +, +If you've already cloned the Spring-Social repository without the --recursive, +switch, you'll need to pull the submodules with the following steps:, +, + git submodule update --init]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + /**, + * Creates a memento can be used to persist the state of this connection for restoration later., + */, + public ServiceProviderConnectionMemento createMemento();, +, + /**, + * Creates a copy of this connection with the id property set to the value provided., + */, + public ServiceProviderConnection<S> assignId(Long id);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + /**, + * Creates a memento can be used to persist the state of this connection for restoration later., + */, + public ServiceProviderConnectionMemento createMemento();, +, + /**, + * Creates a copy of this connection with the id property set
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + * @param connectionAddedRedirectUrl The URL to redirect to after adding connections following authorization, + * the user is still authenticated, so redirecting to the default failure URL might, + * @param connectionAddingFailureRedirectUrl The URL to redirect to after a failing connection following authorization]
[+++ b/build.gradle, + testCompile project(':spring-social-facebook'), + testCompile project(':spring-social-twitter'), +++ b/build.gradle, + testCompile project(':spring-social-facebook'), + testCompile project(':spring-social-twitter'), +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, + applicationContext.getBean(TwitterServiceProvider.class);, + applicationContext.getBean(FacebookServiceProvider.class);, +++ b/build.gradle, + testCompile project(':spring-social-facebook'), + testCompile project(':spring-social-twitter'), +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, + applicationContext.getBean(TwitterServiceProvider.class);, + applicationContext.getBean(FacebookServiceProvider.class);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, + <social:service-provider class="org.springframework.social.facebook.provider.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +, +++ b/build.gradle, + testCompile project(':spring-social-facebook'), + testCompile project(':spring-social-twitter'), +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, + applicationContext.getBean(TwitterServiceProvider.class);, + applicationContext.getBean(FacebookServiceProvider.class);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, + <social:service-provider class="org.springframework.social.facebook.provider.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +, +++ /dev/null, +++ b/build.gradle, + testCompile project(':spring-social-facebook'), + testCompile project(':spring-social-twitter'), +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, + applicationContext.getBean(TwitterServiceProvider.class);, +
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +import org.w3c.dom.NamedNodeMap;, + public final BeanDefinition parse(Element element, ParserContext parserContext) {, + BeanDefinition connectionFactoryLocatorBD = getConnectionFactoryLocatorBeanDefinition(parserContext);, + addConnectionFactory(connectionFactoryLocatorBD, element.getAttribute(APP_ID), element.getAttribute(APP_SECRET), element.getAttributes());, + BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, + return addApiBindingBean;, + }, + /**, + * Creates a BeanDefinition for a provider connection factory., + * Although most providers will not need to override this method, it does allow for overriding to address any provider-specific needs., + * @param appId The application's App ID, + * @param appSecret The application's App Secret, + * @param allAttributes All attributes available on the configuration element. Useful for provider-specific configuration., +
[+++ /dev/null, +++ /dev/null, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/data.xml, + <jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ /dev/null, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/data.xml, + <jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <bean id="serviceProviderFactory" class="org.springframework.social.config.BeanServiceProviderFactory" autowire="constructor" />]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <para>, + OAuth 2 is rapidly becoming a preferred authorization protocol, and is used by major service providers such as Facebook, Github, Gowalla, and 37signals., + In Spring Social, the OAuth2ServiceProvider interface models a service provider based on the OAuth 2 protocol:, + </para>, + <para>, + <methodname>getOAuthOperations()</methodname> returns an API to use to conduct the authorization flow, or "OAuth Dance", with a service provider., + The result of this flow is an <classname>AccessGrant</classname> that can be used to establish a connection with a local user account by calling <methodname>connect</methodname>., + The OAuth2Operations interface is shown
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <listitem><para>Connection#fetchUserProfile() would make a remote API call to Twitter to get @kdonald's profile data and normalize it into a UserProfile model.</para></listitem>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors.,
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +public class JdbcConnectionRepository implements ConnectionRepository {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +public class JdbcConnectionRepository implements ConnectionRepository {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +public class InMemoryConnectionRepository implements ConnectionRepository {]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/test/java/org/springframework/social/config/DummyConnection.java, +@SuppressWarnings("serial"), +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/test/java/org/springframework/social/config/DummyConnection.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, + apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class<?>[] { apiType }, new ApiInvocationHandler());, + @SuppressWarnings("rawtypes"), +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/test/java/org/springframework/social/config/DummyConnection.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, + apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class<?>[] { apiType }, new ApiInvocationHandler());, + @SuppressWarnings("rawtypes"), +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + @Deprecated, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/InMemoryConnectionRepositoryConfigSupport.java, + * Used by InMemoryConnectionRepositoryBeanDefinitionParser for XML configuration., +++ b/spring-social-config/src/test/java/org/springframework/social/config/DummyConnection.java, +@SuppressWarnings("serial"), +++
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <title>Core API</title>, + The <interfacename>ServiceProviderConnection&lt;S&gt;</interfacename> interface models a connection to an external service provider such as Facebook:, + ServiceProviderConnectionKey getKey();, + , + String getDisplayName();, +, + String getProfileUrl();, +, + String getImageUrl();, +, + void sync();, +, + boolean test();, +, + boolean hasExpired();, +, + void refresh();, +, + ServiceProviderUserProfile fetchUserProfile();, +, + void updateStatus(String message);, +, + ServiceProviderConnectionData createData();, + Each ServiceProviderConnection is uniquely identified by a composite key consisting of a providerId (e.g. 'facebook') and connected providerUserId (e.g. '1255689239', for Keith Donald's Facebook ID)., + This key tells you what provider user
[+++ b/.gitignore, +target]
[+++ b/spring-social-twitter/src/test/java/org/springframework/social/twitter/TimelineTemplateTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/FeedOperations.java, + String postLink(String message, FacebookLink link);, + String postLink(String ownerId, String message, FacebookLink link);, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/FeedOperations.java, + String postLink(String message, FacebookLink link);, + String postLink(String ownerId, String message, FacebookLink link);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/PageOperations.java, + * To post a link to the page's feed as the authenticated user, use {@link FeedOperations#postLink(String, String, FacebookLink)} instead., +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/FeedOperations.java, + String postLink(String message, FacebookLink link);, + String postLink(String ownerId, String message, FacebookLink link);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/PageOperations.java, + * To post a link to the page's
[+++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), + dependencyManagement {, + springIoTestRuntime {, + imports {, + mavenBom "io.spring.platform:platform-bom:${platformVersion}", + }, + }, +++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), + dependencyManagement {, + springIoTestRuntime {, + imports {, + mavenBom "io.spring.platform:platform-bom:${platformVersion}", + }, + }, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, + addCustomParameters(params);, + protected void addCustomParameters(OAuth2Parameters params) {, + }]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, + String key = oauthEncode(consumerSecret) + "&" + (tokenSecret != null ? oauthEncode(tokenSecret) : "");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, + String key = oauthEncode(consumerSecret) + "&" + (tokenSecret != null ? oauthEncode(tokenSecret) : "");, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/SigningSupportTest.java, + @Test, + public void buildAuthorizationHeaderValue_oauthEncodedSecrets() throws Exception {, + SigningSupport signingUtils = new SigningSupport();, + signingUtils.setTimestampGenerator(new MockTimestampGenerator(123456789, 987654321));, + URI uri = URIBuilder.fromUri("http://example.com/request").queryParam("b5", "=%3D").queryParam("a3", "a").queryParam("c@", ""), + .queryParam("a2", "r b").build();, + HttpRequest request = new SimpleClientHttpRequestFactory().createRequest(uri, HttpMethod.POST);, + request.getHeaders().setContentType(MediaType.APPLICATION_FORM_URLENCODED);, + String authorizationHeader = signingUtils.buildAuthorizationHeaderValue(request, "c2&a3=2+q".getBytes(), new OAuth1Credentials("9djdj82h48djs9d2", "con+sumer=secret", "kkk9d7dh3k39sjv7", "token+secret="));, + assertAuthorizationHeader(authorizationHeader, "7VuTmiewi5yudNuXhlZvT1UI53w%3D");, + }, +]
[+++ b/docs/src/reference/docbook/signin.xml, + Instead of creating a connection at the end of process, however, <classname>ProviderSignInController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user to the application., + </section>, +, + <section xml:id="signin_using">, + <title>Enabling provider signin</title>, + The <classname>ProviderSignInController</classname> bean only requires a single <code><![CDATA[<constructor-arg>]]></code> to specify the application's base URL., + <classname>ProviderSignInController</classname> will use this URL to construct the callback URL used in the authentication flow., + When authenticating via an OAuth 1 provider, <classname>ProviderSignInController</classname> supports the following flow:, + <section>, + <title>ProviderSignInController's dependencies</title>, + , + As shown above,
[+++ b/docs/src/reference/docbook/connecting.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="connecting", + xmlns:xlink="http://www.w3.org/1999/xlink">, + <title>Connecting to Social Providers</title>, +, + <para>Most social connections are based on OAuth authorization. Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network that it's okay for the application to access and manipulate their social information. The outcome of the dance is an access token that the application can use
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, + Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, + Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, + Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID =
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + return new RedirectView(providerId, true);]
[+++ b/build.gradle, + junitVersion = '4.10', + testCompile "com.google.guava:guava:10.0", +++ b/build.gradle, + junitVersion = '4.10', + testCompile "com.google.guava:guava:10.0", +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, + request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, + request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, + convertSessionAttributeToModelAttribute(DUPLICATE_CONNECTION_ATTRIBUTE, request, model);, + convertSessionAttributeToModelAttribute(PROVIDER_ERROR_ATTRIBUTE, request, model);, + }, +, + private void convertSessionAttributeToModelAttribute(String attributeName, WebRequest request, Model model) {, + if (request.getAttribute(attributeName, RequestAttributes.SCOPE_SESSION) != null) {, + model.addAttribute(attributeName, Boolean.TRUE);, + request.removeAttribute(attributeName, RequestAttributes.SCOPE_SESSION); , + private static final String PROVIDER_ERROR_ATTRIBUTE = "social.provider.error";, +, +++ b/build.gradle, + junitVersion = '4.10', + testCompile "com.google.guava:guava:10.0", +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, + request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, + request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);,
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, + return registerApiBindingBean(registry, apiHelperClass, apiBindingType,allAttributes);, + private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType,Map<String, Object> allAttributes) {, + BeanDefinition helperBD = getApiHelperBeanDefinitionBuilder(allAttributes).getBeanDefinition();, + /**, + * Subclassing hook to allow api helper bean to be configured with attributes from annotation, + */, + protected BeanDefinitionBuilder getApiHelperBeanDefinitionBuilder(Map<String, Object> allAttributes), + {, + return BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource");, + }, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + String redirectUrl = signInAdapter.signIn(userId, connection, request);, + if(redirectUrl != null) {, + return redirect(redirectUrl);, + }, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + String redirectUrl = signInAdapter.signIn(userId, connection, request);, + if(redirectUrl != null) {, + return redirect(redirectUrl);, + }, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/SignInAdapter.java, + * @return the URL that ProviderSignInController should redirect to after sign in. May be null, indicating that ProviderSignInController, + * should redirect to its postSignInUrl., + String signIn(String userId, Connection<?> connection, NativeWebRequest request);]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, + BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID); , + BeanDefinitionHolder scopedProxy = ScopedProxyUtils.createScopedProxy(connFactoryLocatorBeanDefHolder, parserContext.getRegistry(), false); , + parserContext.getRegistry().registerBeanDefinition(scopedProxy.getBeanName(), scopedProxy.getBeanDefinition());, + BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(ScopedProxyUtils.getTargetBeanName(CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, + BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID); , + BeanDefinitionHolder scopedProxy = ScopedProxyUtils.createScopedProxy(connFactoryLocatorBeanDefHolder, parserContext.getRegistry(), false); , + parserContext.getRegistry().registerBeanDefinition(scopedProxy.getBeanName(), scopedProxy.getBeanDefinition());, + BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(ScopedProxyUtils.getTargetBeanName(CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, + String connectionRepositoryId = element.getAttribute("connection-repository-id");, + String usersConnectionRepositoryId = element.getAttribute("users-connection-repository-id");, + registerUsersConnectionRepositoryBeanDefinition(parserContext, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, + return registerConnectionRepository(parserContext, usersConnectionRepositoryId, connectionRepositoryId);, + private void registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String usersConnectionRepositoryId, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, + parserContext.getRegistry().registerBeanDefinition(usersConnectionRepositoryId, decorateWithScopedProxy(usersConnectionRepositoryId, usersConnectionRepositoryBD, parserContext));, +
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.authentication.AuthenticationTrustResolverImpl;, + private AuthenticationTrustResolverImpl authenticationTrustResolver = new AuthenticationTrustResolverImpl();, +, + // Check if not already authenticated or is already logged in anonymous., + if (auth == null || !auth.isAuthenticated() || authenticationTrustResolver.isAnonymous(auth)) {]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + List<ServiceProviderConnection<?>> connections = getConnectionRepository().findConnectionsToProvider(providerId);, + getConnectionRepository().addConnection(connection); , + getConnectionRepository().addConnection(connection);, + getConnectionRepository().removeConnectionsToProvider(providerId);, + getConnectionRepository().removeConnection(new ServiceProviderConnectionKey(providerId, providerUserId));, + private ServiceProviderConnectionRepository getConnectionRepository() {, + return currentUserConnectionRepositoryProvider.get();, + }, +]
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.client.test.MockRestServiceServer;, +import org.springframework.web.client.test.ResponseCreators;, + private static final String ACCESS_TOKEN_URL = "http://www.someprovider.com/oauth/accessToken";, +, + oAuth2Template = new OAuth2Template("client_id", "client_secret", authorizeUrl, ACCESS_TOKEN_URL);, + HttpHeaders responseHeaders = new HttpHeaders();, + responseHeaders.setContentType(MediaType.TEXT_PLAIN);, + MockRestServiceServer mockServer = MockRestServiceServer.createServer((RestTemplate) oAuth2Template, + .getRestOperations());, + mockServer.expect(requestTo(ACCESS_TOKEN_URL)), + .andExpect(method(POST)), + .andExpect(body("client_id=client_id&client_secret=client_secret&code=code&" +, + "redirect_uri=http%3A%2F%2Fwww.someclient.com%2Fcallback&grant_type=authorization_code")), + .andRespond(ResponseCreators.withResponse(new ClassPathResource("accessToken.json", getClass()),, + responseHeaders));, + AccessGrant accessGrant = oAuth2Template.exchangeForAccess("code", "http://www.someclient.com/callback");, + assertEquals("accessToken", accessGrant.getAccessToken());, + assertEquals("refreshToken", accessGrant.getRefreshToken());, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.client.test.MockRestServiceServer;, +import
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + </section>, + <section id="service-providers-persisting-connections">, + <title>Persisting Connections</title>, + <para>, + After a connection has been established, you may wish to persist it for later use., + This makes things convenient for the user since the connection can simply be restored from its persistent form and does not need to be established again., + Spring Social provides a ServiceProviderConnectionRepository interface for managing the persistence of a user's connections:, + </para>, + <programlisting language="java"><![CDATA[, +public interface ServiceProviderConnectionRepository {, +, + MultiValueMap<String, ServiceProviderConnection<?>> findConnections();, + , + List<ServiceProviderConnection<?>> findConnectionsToProvider(String providerId);, +, + MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUserIds);, +, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, + if (newUserId != null), + {, + }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, + if (newUserId != null), + {, + }, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, + , + @Test, + public void findUserIdWithConnectionNoConnection_withConnectionSignUpReturningNull() { , + Connection<TestFacebookApi>
[+++ b/docs/src/reference/docbook/connecting.xml, + In the previous chapter, you learned how Spring Social's <emphasis>Service Provider 'Connect' Framework</emphasis> can be used to manage user connections between your application and external service providers., + In this chapter, you'll learn how to control the connect flow in a web application environment., + Spring Social's <code>spring-social-web</code> module includes <classname>ConnectController</classname>, a Spring MVC controller that works with ServiceProviders to coordinate the connection flow., + At each step, <classname>ConnectController</classname> delegates to a <interfacename>ServiceProvider</interfacename> to handle the finer details such as obtaining a request token and creating connections., + Because <classname>ConnectController</classname> collaborates with ServiceProviders to establish connections,
[+++ b/build.gradle, + testCompile files(this.project(':spring-social-client').sourceSets.test.classesDir), +++ b/build.gradle, + testCompile files(this.project(':spring-social-client').sourceSets.test.classesDir), +++ /dev/null, +++ b/build.gradle, + testCompile files(this.project(':spring-social-client').sourceSets.test.classesDir), +++ /dev/null, +++ b/spring-social-config/src/test/resources/org/springframework/social/config/xml/socialNamespaceHandlerTests-serviceProviders.xml, + <bean class="org.springframework.social.provider.test.StubConnectionRepository" />]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + private final Map<String, Object> additionalParameters;, +, + public AccessGrant(String accessToken, String refreshToken, Long expireTime, String scope, Map<String, Object> additionalParameters) {, + this.expireTime = expireTime;, + * The refresh token that can be used to renew the access token., + */, + public String getRefreshToken() {, + return refreshToken;, + }, +, + /**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + private final Map<String, Object> additionalParameters;, +, + public AccessGrant(String accessToken, String refreshToken, Long expireTime, String scope, Map<String, Object> additionalParameters) {, + this.expireTime = expireTime;, + * The refresh token that can be used to renew the access token., + */,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, + public static String buildAuthorizationHeaderValue(HttpMethod method, URI targetUrl, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters, String consumerSecret, String tokenSecret) {, + return buildAuthorizationHeaderValue(request.getMethod(), request.getURI(), oauthParameters, additionalParameters, consumerSecret, accessTokenSecret);, + return buildAuthorizationHeaderValue(request.getMethod(), request.getURI(), oauthParameters, additionalParameters, consumerSecret, accessTokenSecret);]
[+++ b/samples/spring-social-showcase/pom.xml, + <artifactId>spring-social-tripit</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, +++ b/samples/spring-social-showcase/pom.xml, + <artifactId>spring-social-tripit</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/tripit/TripItShowcaseController.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the
[+++ b/samples/facebook-showcase-2/pom.xml, + <groupId>org.scribe</groupId>, + <artifactId>scribe</artifactId>, + <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/pom.xml, + <groupId>org.scribe</groupId>, + <artifactId>scribe</artifactId>, + <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/pom.xml, + <groupId>org.scribe</groupId>, + <artifactId>scribe</artifactId>, + <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, + facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/samples/facebook-showcase-2/pom.xml, + <groupId>org.scribe</groupId>, + <artifactId>scribe</artifactId>, + <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, + facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table ServiceProvider (name varchar,, + displayName varchar not null,, + implementation varchar not null,, + apiKey varchar not null, , + secret varchar,, + appId bigint,, + requestTokenUrl varchar,, + authorizeUrl varchar,, + accessTokenUrl
[+++ /dev/null, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, + primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, + primary key (member, provider, accessToken));, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, + primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="serviceProviderFactory" />, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, + primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="serviceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, + primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="serviceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <!-- Configure a connection repository through which account-to-provider connections will be stored --> ,
[+++ b/samples/facebook-showcase-2/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, + private String defaultScope = "";, + * @param defaultScope OAuth scope to use, i.e. requested permissions, + public void setDefaultScope(String defaultScope) {, + this.defaultScope = defaultScope;, + setScope(request, params);, + private void setScope(HttpServletRequest request, OAuth2Parameters params) {, + String requestedScope = request.getParameter("scope");, + if (StringUtils.hasLength(requestedScope)) {, + params.setScope(requestedScope);, + } else {, + params.setScope(defaultScope);, + }, + }, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, + private String defaultScope = "";, + * @param defaultScope OAuth scope to use, i.e. requested permissions, + public void setDefaultScope(String defaultScope) {, + this.defaultScope = defaultScope;, + setScope(request, params);, + private void setScope(HttpServletRequest request, OAuth2Parameters
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +Before we accept a non-trivial patch or pull request we will need you to sign the, +https://support.springsource.com/spring_committer_signup[contributor's agreement]., +Signing the contributor's agreement does not grant anyone commit rights to the main, +repository, but it does mean that we can accept your contributions, and you will get an, +author credit if we do. Active contributors might be asked to join the core team, and, +given the ability to merge pull requests., +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.adoc, +Before we accept a non-trivial patch or pull request we will
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, + public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null, null);, +, + private final String id;, + * The user's id in the provider, + * May be null if not exposed/supported by the provider., + * @return the user's id in the provider, + */, + public String getId() {, + return id;, + }, +, + /**, + UserProfile(String id, String name, String firstName, String lastName, String email, String username) {, + this.id = id;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, + public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null, null);,
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInUtils.java, + ProviderSignInAttempt signInAttempt = (ProviderSignInAttempt) sessionStrategy.getAttribute(request, ProviderSignInAttempt.SESSION_ATTRIBUTE);, + ProviderSignInAttempt signInAttempt = (ProviderSignInAttempt) sessionStrategy.getAttribute(request, ProviderSignInAttempt.SESSION_ATTRIBUTE);, + sessionStrategy.removeAttribute(request, ProviderSignInAttempt.SESSION_ATTRIBUTE);]
[+++ b/gradle.properties, +springVersion=5.0.0.RC2]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, + "https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, + "https://graph.facebook.com/oauth/access_token"));, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, + "https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, + "https://graph.facebook.com/oauth/access_token"));, +++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubServiceProvider.java, + super("github", connectionRepository, new OAuth2Template(clientId, clientSecret,, + "https://github.com/login/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, + "https://github.com/login/oauth/access_token"));, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, + "https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, + "https://graph.facebook.com/oauth/access_token"));, +++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubServiceProvider.java, + super("github", connectionRepository, new OAuth2Template(clientId, clientSecret,, + "https://github.com/login/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, + "https://github.com/login/oauth/access_token"));, +++ b/spring-social-gowalla/src/main/java/org/springframework/social/gowalla/connect/GowallaServiceProvider.java, + super("gowalla", connectionRepository, new OAuth2Template(clientId, clientSecret,, + "https://gowalla.com/api/oauth/new?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://gowalla.com/api/oauth/token"));, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, + "https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, + "https://graph.facebook.com/oauth/access_token"));, +++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubServiceProvider.java, + super("github", connectionRepository, new OAuth2Template(clientId, clientSecret,, + "https://github.com/login/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}",, + "https://github.com/login/oauth/access_token"));, +++ b/spring-social-gowalla/src/main/java/org/springframework/social/gowalla/connect/GowallaServiceProvider.java, + super("gowalla", connectionRepository, new OAuth2Template(clientId, clientSecret,, + "https://gowalla.com/api/oauth/new?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://gowalla.com/api/oauth/token"));, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/connect/LinkedInServiceProvider.java, + super("linkedin", connectionRepository, consumerKey, consumerSecret,
[+++ b/docs/src/reference/docbook/apis.xml, + Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, + If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, + Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>.,
[+++ b/docs/src/reference/docbook/apis.xml, + <title>Working with Service APIs</title>, +++ b/docs/src/reference/docbook/apis.xml, + <title>Working with Service APIs</title>, +++ b/docs/src/reference/docbook/signin.xml, + <title>Signing in with Service Provider Accounts</title>]
[+++ b/README, +git clone git://github.com/SpringSource/spring-social.git, +++ b/README, +git clone git://github.com/SpringSource/spring-social.git, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/InMemoryConnectionRepositoryRegistrar.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++
[+++ b/docs/src/reference/docbook/apis.xml, + From a user's perspective, Twitter's function is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., + In contrast, Twitter's API is rather rich, enabling applications to interact with Twitter in ways that may not be obvious from the humble tweet box., + Spring Social offers interaction with Twitter's service API through the <interfacename>TwitterApi</interfacename> interface and its implementation, <classname>TwitterTemplate</classname>. , +TwitterApi twitterApi = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitterApi = new TwitterTemplate();]]>, + Attempting other operations, such as tweeting will fail with an <classname>IllegalStateException</classname> being thrown., + If you are
[+++ b/spring-social-core/src/main/java/org/springframework/social/support/AbstractClientHttpRequestFactoryWrapper.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, + return null;]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + Connection<?> connection = token.getConnection();]
[+++ /dev/null]
[+++ b/docs/src/info/changelog.txt, + * Now built against Spring Framework 3.1.0.RELEASE (still compatible with Spring Framework 3.0.6), + * Now built against Spring Security 3.1.0.RELEASE]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.net.MalformedURLException;, +import java.net.URL;, + public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {, + webSupport.setApplicationUrl(applicationUrl);, + return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request));, + Connection<?> connection = webSupport.completeConnection(connectionFactory, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.net.MalformedURLException;, +import java.net.URL;, + public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {, + webSupport.setApplicationUrl(applicationUrl);, + return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request));, + Connection<?> connection = webSupport.completeConnection(connectionFactory, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import java.net.URL;, +, + private URL applicationUrl;, +, + public void setApplicationUrl(URL applicationUrl) {, + this.applicationUrl = applicationUrl;, + }, +, + public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, + return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request);, + return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request);, + public Connection<?> completeConnection(OAuth2ConnectionFactory<?>
[+++ b/docs/src/reference/docbook/implementing.xml, + The process of adding support for a new service provider consists of several steps:, + A Spring Social client module is simply a standard Java project that builds a single jar artifact e.g. spring-social-twitter.jar., + We do recommend the actual code structure follow several packaging guidelines that are described below., + <title>Spring Social Client Modules</title>, + <entry>The public interface that defines the API binding.</entry>, + <entry>The implementation of the API binding.</entry>, + You can see this recommended structure in action by reviewing one of the other client modules such as spring-social-twitter:, + API developers are free
[+++ b/build.gradle, + testCompile "org.springframework:spring-jdbc:$springVersion", +++ b/build.gradle, + testCompile "org.springframework:spring-jdbc:$springVersion", +++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeConnectionFactory.java, + private String appId;, + , + private String appSecret;, +, + this.appId = appId;, + this.appSecret = appSecret;, + public String getAppId() {, + return appId;, + }, + public String getAppSecret() {, + return appSecret;, + }, + , + public static final class FakeServiceProvider extends AbstractOAuth2ServiceProvider<Fake> {, +++ b/build.gradle, + testCompile "org.springframework:spring-jdbc:$springVersion", +++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeConnectionFactory.java, + private String appId;, + , + private String appSecret;, +, + this.appId = appId;, + this.appSecret = appSecret;, + public String getAppId() {, + return appId;, + }, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + // manually parse the response instead of using a message converter., + // The response content type could by text/plain, text/html, etc...and may not trigger the form-encoded message converter]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +import java.util.List;, +, +import org.springframework.util.MultiValueMap;, + * <p>, + * Many of the methods contained in this interface require an access token from, + * Facebook. When a method's description speaks of the "current user", it is, + * referring to the user for whom the access token has been issued., + * </p>, +public interface FacebookApi {, + /**, + * Retrieves the user's Facebook profile ID., + * @return the user's Facebook profile ID., + */, +
[+++ b/build.gradle, + h2Version = '1.3.166', + httpComponentsVersion = '4.1.3', + jacksonVersion = '1.9.6', + springVersion = '3.1.1.RELEASE', +++ b/build.gradle, + h2Version = '1.3.166', + httpComponentsVersion = '4.1.3', + jacksonVersion = '1.9.6', + springVersion = '3.1.1.RELEASE', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/build.gradle, + h2Version = '1.3.166', + httpComponentsVersion = '4.1.3', + jacksonVersion = '1.9.6', + springVersion = '3.1.1.RELEASE', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-core/src/main/java/org/springframework/social/support/BufferingClientHttpResponse.java, + public int getRawStatusCode() throws IOException {, + return response.getRawStatusCode();, +
[+++ b/build.gradle, + srcDirs = ['src/main/java','src/main/resources'], +project('spring-social-config') {, + description = 'Spring Social Config', + dependencies {, + compile project(':spring-social-core'), + compile project(':spring-social-web'), + compile ("org.springframework.social:spring-social-twitter:$springSocialVersion") { transitive = false }, + compile ("org.springframework.social:spring-social-facebook:$springSocialVersion") { transitive = false }, + testCompile "com.h2database:h2:$h2Version", + }, +}, +, +++ b/build.gradle, + srcDirs = ['src/main/java','src/main/resources'], +project('spring-social-config') {, + description = 'Spring Social Config', + dependencies {, + compile project(':spring-social-core'), + compile project(':spring-social-web'), + compile ("org.springframework.social:spring-social-twitter:$springSocialVersion") { transitive = false }, + compile ("org.springframework.social:spring-social-facebook:$springSocialVersion") { transitive = false }, + testCompile "com.h2database:h2:$h2Version", + }, +}, +, +++ b/settings.gradle, +include 'spring-social-config', +++ b/build.gradle, +
[+++ b/gradlew, +, +RETCODE=$?, +, +if [ "$RETCODE" == "1" ] ; then, + echo "Gradle classes not found -- did you forget to clone --recursive when checking out this repository? See README for more details", +fi, +++ b/gradlew, +, +RETCODE=$?, +, +if [ "$RETCODE" == "1" ] ; then, + echo "Gradle classes not found -- did you forget to clone --recursive when checking out this repository? See README for more details", +fi, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + return new RedirectView("/connect/" + providerId, true);]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + public String buildAuthorizeUrl(@SuppressWarnings("deprecation") GrantType grantType, OAuth2Parameters parameters) {, + public String buildAuthenticateUrl(@SuppressWarnings("deprecation") GrantType grantType, OAuth2Parameters parameters) {, + @SuppressWarnings("deprecation"), + @SuppressWarnings("deprecation") , + @SuppressWarnings("deprecation") , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + public String buildAuthorizeUrl(@SuppressWarnings("deprecation") GrantType grantType, OAuth2Parameters parameters) {, + public String buildAuthenticateUrl(@SuppressWarnings("deprecation") GrantType grantType, OAuth2Parameters parameters) {, + @SuppressWarnings("deprecation"), + @SuppressWarnings("deprecation") , + @SuppressWarnings("deprecation") , +++ b/spring-social-core/src/main/java/org/springframework/social/support/FormMapHttpMessageConverter.java, + @SuppressWarnings("unchecked")]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + private SocialAuthenticationServiceLocator authServiceLocator;, + Assert.notNull(getAuthServiceLocator(), "authServiceLocator must be configured");, + Set<String> authProviders = authServiceLocator.registeredAuthenticationProviderIds();, + , + if (authProviders.isEmpty()) {, + SocialAuthenticationService<?> authService = authServiceLocator.getAuthenticationService(explicitAuthProviderId);, + if (authService.getAuthenticationMode() == AuthenticationMode.IMPLICIT) {, + for (final String authProvider : authProviders) {, +, + SocialAuthenticationService<?> authService = authServiceLocator.getAuthenticationService(authProvider);, + public SocialAuthenticationServiceLocator getAuthServiceLocator() {, + return authServiceLocator;, + }, +, + public void setAuthServiceLocator(SocialAuthenticationServiceLocator authServiceLocator) {, + this.authServiceLocator = authServiceLocator;, + }, + , +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + private SocialAuthenticationServiceLocator authServiceLocator;, + Assert.notNull(getAuthServiceLocator(), "authServiceLocator must be configured");, + Set<String> authProviders = authServiceLocator.registeredAuthenticationProviderIds();, + , + if (authProviders.isEmpty()) {, + SocialAuthenticationService<?> authService
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, + this(accessToken, TokenStrategy.AUTHORIZATION_HEADER);, + }, +, + /**, + * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., + * @param accessToken the access token, + * @param tokenStrategy Specifies how access tokens are sent on API requests. Defaults to sending them in Authorization header., + */, + protected AbstractOAuth2ApiBinding(String accessToken, TokenStrategy tokenStrategy) {, + restTemplate = createRestTemplate(accessToken, getOAuth2Version(), tokenStrategy);, + private RestTemplate createRestTemplate(String accessToken, OAuth2Version version, TokenStrategy tokenStrategy) {, + ClientHttpRequestInterceptor interceptor = tokenStrategy.interceptor(accessToken, version);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, + this(accessToken, TokenStrategy.AUTHORIZATION_HEADER);, + }, +, + /**, + *
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.util.Collection;, + public static boolean removeSignInAttempt(HttpSession session, ConnectionKey key) {, + return session != null ? SignInAttempts.remove(session, key) : false;, + }, + , + public static boolean removeSignInAttempt(HttpSession session, ConnectionData data) {, + return removeSignInAttempt(session, SignInAttempts.key(data));, + }, + , + private static Collection<ConnectionData> get(HttpSession session) {, + private static boolean remove(HttpSession session, ConnectionKey key) {, + SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, + return signInAttempts != null ? signInAttempts.removeAttempt(key) : false;, + }, + , + private boolean removeAttempt(ConnectionKey key) {, + return attempts.remove(key) != null;, + private Collection<ConnectionData> getAttempts() {, + return attempts.values();, +
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +import org.springframework.social.facebook.graph.GraphApi;, + PlacesOperations checkinOperations();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +import org.springframework.social.facebook.graph.GraphApi;, + PlacesOperations checkinOperations();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookModule.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + *
[+++ b/build.gradle, + springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/build.gradle, + springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +
[+++ b/pom.xml, + <artifactId>spring-social-dist</artifactId>, + <packaging>pom</packaging>, + <modules>, + <module>spring-social-parent</module>, + <module>spring-social-core</module>, + </modules>, + <javadoc:aggregate>true</javadoc:aggregate>, + <header>Spring Social</header>, + <title>Spring Social Core</title>, + <packages>org.springframework.social:org.springframework.spring-social-core.*</packages>, + <repositories>, + <!-- For testing against latest Spring snapshots -->, + <repository>, + <id>org.springframework.maven.snapshot</id>, + <name>Spring Maven Snapshot Repository</name>, + <url>http://maven.springframework.org/snapshot</url>, + <releases><enabled>false</enabled></releases> , + <snapshots><enabled>true</enabled></snapshots>, + </repository>, + <!-- For Spring releases -->, + <repository>, + <id>org.springframework.maven.release</id>, + <name>Spring Maven Release Repository</name>, + <url>http://maven.springframework.org/release</url>, + <snapshots><enabled>false</enabled></snapshots> , + </repository>, + <!-- For developing against latest Spring milestones -->, + <repository>, + <id>org.springframework.maven.milestone</id>, + <name>Spring Maven Milestone Repository</name>, + <url>http://maven.springframework.org/milestone</url>, + <snapshots><enabled>false</enabled></snapshots> ,
[+++ b/docs/src/reference/docbook/implementing.xml, + <para>Develop or integrate a Java binding to the provider's API e.g. <code>TwitterApi</code>.</para>, + <para>Create a ServiceProvider model that allows users to authorize with the remote provider and obtain authorized API instances e.g. <code>TwitterServiceProvider</code>.</para>, + <para>Create an ApiAdapter that maps the provider's native API onto the uniform Connection model e.g. <code>TwitterApiAdapter</code>.</para>, + <para>Finally, create a ConnectionFactory that wraps the other artifacts up and provides a simple interface for establishing connections e.g. <code>TwitterConnectionFactory</code>.</para>, + You can always construct such an API instance directly, and you'll see in the following sections how to expose an instance as part of
[+++ b/.gitignore, +**/src/test/java/exploration, +++ b/.gitignore, +**/src/test/java/exploration, +++ b/build.gradle, + scribeVersion = '1.0.6', + }, +}, +, +project('spring-social-connect') {, + description = 'Spring Social Connect', + dependencies {, + compile project(':spring-social-core'), + compile project(':spring-social-facebook') { optional = true }, + compile project(':spring-social-linkedin') { optional = true }, + compile project(':spring-social-tripit') { optional = true }, + compile project(':spring-social-twitter') { optional = true }, + }, +}, +, +project('spring-social-facebook') {, + description = 'Spring Social Facebook', + dependencies {, + compile project(':spring-social-core'), + compile project(':spring-social-oauth'), +project('spring-social-linkedin') {, + description = 'Spring Social LinkedIn', + dependencies {, + compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", + compile
[+++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + addTextToMapMessageConverter();, + MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, + requestParameters.set("client_id", clientId);, + requestParameters.set("client_secret", clientSecret);, + requestParameters.set("code", authorizationCode);, + requestParameters.set("redirect_uri", redirectUri);, + requestParameters.set("grant_type", "authorization_code");, + Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, + return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, + , + // private helpers, + // TODO : Can probably tweak
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, + HttpServletRequest nativeRequest = request.getNativeRequest(HttpServletRequest.class);, + return applicationUrl.getProtocol() + "://" + applicationUrl.getHost() + portPart() + nativeRequest.getRequestURI();, + return nativeRequest.getRequestURL().toString();, + }, + }, +, + private String portPart() {, + int port = applicationUrl.getPort();, + if (port == -1) {, + return "";, + } else {, + return ":" + port;]
[+++ b/spring-social-github/src/main/java/org/springframework/social/github/connect/GitHubApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + The <interfacename>Connection&lt;A&gt;</interfacename> interface models a connection to an external service provider such as Facebook:, +public class OAuth2ConnectionFactory<A> extends ConnectionFactory<A> {, + public Connection<A> createConnection(AccessGrant accessGrant);, +public class OAuth1ConnectionFactory<A> extends ConnectionFactory<A> {, + public Connection<A> createConnection(OAuthToken accessToken);, + <A> ConnectionFactory<A> getConnectionFactory(Class<A> serviceApiType);, + <A> Connection<A> findPrimaryConnectionToApi(Class<A> apiType);, + <A> Connection<A> findConnectionToApiForUser(Class<A> apiType, String providerUserId); , + <A> List<Connection<A>> findConnectionsToApi(Class<A> apiType);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + <A> List<Connection<A>> findConnectionsToApi(Class<A> apiType);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + <A> List<Connection<A>> findConnectionsToApi(Class<A> apiType);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, + public <S> List<Connection<S>> findConnectionsToApi(Class<S> serviceApiType) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + <A> List<Connection<A>> findConnectionsToApi(Class<A> apiType);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, + public <S> List<Connection<S>> findConnectionsToApi(Class<S> serviceApiType) {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, + List<Connection<TestFacebookApi>> connections = connectionRepository.findConnectionsToApi(TestFacebookApi.class);]
[+++ b/docs/src/reference/docbook/tripit.xml, + <para>TripIt is a social network that links together travelers. By connecting with other travelers, you can keep in touch with contacts when your travel plans coincide. Also, aside from its social aspects, TripIt is rather useful for managing a user's travel information.</para>, + <para>Using Spring Social's <interfacename>TripItOperations</interfacename> and its implementation, <classname>TripItTemplate</classname>, you can develop applications that integrate a user's travel information and network.</para>, + , + <para>To create an instance of <classname>TripItTemplate</classname>, pass in your application's OAuth 1 credentials along with a user's access token/secret pair to the constructor:</para>, + , + <programlisting><![CDATA[String apiKey = "...";
[+++ b/build.gradle, +++ b/build.gradle, +++ b/docs/src/reference/docbook/connecting.xml, + <listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, + <listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, + <listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, + <listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the user's provider user ID.</para></listitem>, +++ b/build.gradle, +++ b/docs/src/reference/docbook/connecting.xml, + <listitem><para><code>DELETE /connect/{providerId}</code> - Severs all of the user's connection with the provider.</para></listitem>, + <listitem><para><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific connection with the provider, based on the
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, + private final JdbcTemplate jdbcTemplate;, +, + @Inject, + public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, + this.jdbcTemplate = jdbcTemplate;, + }, +, + public ShowcaseUser findUserByUsername(String username) {, + return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, + new RowMapper<ShowcaseUser>() {, + public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, + return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, + .getString("email"));, + }, + }, username);, + }, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package
[+++ b/docs/src/reference/docbook/implementing.xml, + this.restTemplate = ProtectedResourceClientFactory.create(consumerKey, consumerSecret, accessToken, accessTokenSecret);]
[+++ b/gradle.properties, +version=1.1.0.M4]
[+++ b/build.gradle, + compile "org.springframework:spring-webmvc:$springVersion", +++ b/build.gradle, + compile "org.springframework:spring-webmvc:$springVersion", +++ b/docs/src/reference/docbook/implementing.xml, +++ b/build.gradle, + compile "org.springframework:spring-webmvc:$springVersion", +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, + "https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://graph.facebook.com/oauth/access_token"));, +++ b/build.gradle, + compile "org.springframework:spring-webmvc:$springVersion", +++ b/docs/src/reference/docbook/implementing.xml, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProvider.java, + "https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://graph.facebook.com/oauth/access_token"));, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookInitTag.java, +, +import org.springframework.web.context.WebApplicationContext;, +import org.springframework.web.servlet.tags.RequestContextAwareTag;, +public class FacebookInitTag extends RequestContextAwareTag {, + private String apiKeyProperty = "facebook.apiKey";, + /**, + * Sets the name of the environment property containing the API key. Ignored if apiKey is set. Defaults to "facebook.apiKey"., + * @param apiKeyProperty, + */, + public void setApiKeyProperty(String apiKeyProperty) {, + this.apiKeyProperty = apiKeyProperty;, + }, +, + protected
[+++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, + facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +
[+++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcAccountConnectionRepository.java, + this.providerAccountIdByMemberAndProviderQuery = SELECT_PROVIDER_ACCOUNT_ID;, + this.countConnectionsQuery = SELECT_ACCOUNT_CONNECTION_COUNT;, + this.insertAccountConnectionQuery = INSERT_ACCOUNT_CONNECTION;, + this.deleteAccountConnectionQuery = DELETE_ACCOUNT_CONNECTION;, + this.accessTokenByMemberAndProviderQuery = SELECT_ACCESS_TOKEN;, + }, +, + public String getProviderAccountIdByMemberAndProviderQuery() {, + return providerAccountIdByMemberAndProviderQuery;, + }, +, + public void setProviderAccountIdByMemberAndProviderQuery(String providerAccountIdByMemberAndProviderQuery) {, + this.providerAccountIdByMemberAndProviderQuery = providerAccountIdByMemberAndProviderQuery;, + }, +, + public String getCountConnectionsQuery() {, + return countConnectionsQuery;, + }, +, + public void setCountConnectionsQuery(String countConnectionsQuery) {, + this.countConnectionsQuery = countConnectionsQuery;, + }, +, + public String getInsertAccountConnectionQuery() {, + return insertAccountConnectionQuery;, + }, +, + public void setInsertAccountConnectionQuery(String insertAccountConnectionQuery) {, + this.insertAccountConnectionQuery = insertAccountConnectionQuery;, + }, +, + public
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ApiTemplate.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, + * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJackson2HttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., + * Returns a {@link MappingJackson2HttpMessageConverter} to be used by the internal {@link RestTemplate}., + protected MappingJackson2HttpMessageConverter getJsonMessageConverter() {, + return new MappingJackson2HttpMessageConverter(); , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, + * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJackson2HttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., + * Returns a {@link MappingJackson2HttpMessageConverter} to be used by the internal {@link RestTemplate}., + protected MappingJackson2HttpMessageConverter getJsonMessageConverter() {, + return new MappingJackson2HttpMessageConverter(); , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, +
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableSocial.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/DefaultConnectionFactoryConfigurer.java, + * Copyright 2015 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableSocial.java, + * Copyright 2015 the original author or authors.,
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/SpringSocialDialect.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.util.Assert;, + Assert.notNull(consumerKey, "The consumerKey property cannot be null");, + Assert.notNull(consumerSecret, "The consumerSecret property cannot be null");, + Assert.notNull(requestTokenUrl, "The requestTokenUrl property cannot be null");, + Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, + Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, + Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.util.Assert;, + Assert.notNull(consumerKey, "The consumerKey property cannot be null");, + Assert.notNull(consumerSecret, "The consumerSecret property cannot be null");, + Assert.notNull(requestTokenUrl, "The requestTokenUrl property cannot be null");, + Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, + Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, + Assert.notNull(requestFactory, "The
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + public ApiException(String message) {, + public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + public ApiException(String message) {, + public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +import org.springframework.social.OperationNotPermittedException;, + public DuplicateStatusException(String message) {, + super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + public ApiException(String message) {, + public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +import org.springframework.social.OperationNotPermittedException;, + public DuplicateStatusException(String message) {, + super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + public ExpiredAuthorizationException() {, + super("The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + public ApiException(String message) {, + public ApiException(String message, Throwable cause) {, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +import org.springframework.social.OperationNotPermittedException;, + public DuplicateStatusException(String message) {, +
[+++ b/build.gradle, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +springSocialVersion=1.0.1.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors.,
[+++ b/build.gradle, + h2Version = '1.3.155', + jacksonVersion = '1.8.1', + springSecurityVersion = '3.1.0.CI-SNAPSHOT', + compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/build.gradle, + h2Version = '1.3.155', + jacksonVersion = '1.8.1', + springSecurityVersion = '3.1.0.CI-SNAPSHOT', + compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), +
[+++ b/spring-social-core/src/main/java/org/springframework/social/ForbiddenException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, + private final SigningUtils signingUtils;, + , + this.signingUtils = new SigningUtils();, + return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, + private final SigningUtils signingUtils;, + , + this.signingUtils = new SigningUtils();, + return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + private final SigningUtils signingUtils;, +, + this.signingUtils = new SigningUtils();, + Map<String, String> oauthParameters = signingUtils.commonOAuthParameters(consumerKey);, + return signingUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, + private final SigningUtils signingUtils;, + , + this.signingUtils = new SigningUtils();, + return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + private final SigningUtils
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.M2, +role=buildmaster]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, + return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, + private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, + BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, + return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, + private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, + BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +import org.springframework.security.core.AuthenticationException;, +public class SocialAuthenticationException extends AuthenticationException {, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, + return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, + private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, + BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +import org.springframework.security.core.AuthenticationException;, +public class SocialAuthenticationException extends AuthenticationException {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, + return registerApiBindingBean(registry,
[+++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + addTextToMapMessageConverter();, + MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, + requestParameters.set("client_id", clientId);, + requestParameters.set("client_secret", clientSecret);, + requestParameters.set("code", authorizationCode);, + requestParameters.set("redirect_uri", redirectUri);, + requestParameters.set("grant_type", "authorization_code");, + Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, + return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, + , + // private helpers, + // TODO : Can probably tweak
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/GenericOAuth1ConnectionFactory.java, + * @param oauth1Version The version of OAuth 1 (OAuth 1.0 or OAuth 1.0a) supported by the provider., + OAuth1Version oauth1Version,, + this(providerId, consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, authorizeUrl, accessTokenUrl, oauth1Version, apiAdapter);, + * @param authenticateUrl The API's OAuth 1.0/1.0a authentication URL. If null, will default to the authorizeUrl., + * @param oauth1Version The version of OAuth 1 (OAuth 1.0 or OAuth 1.0a) supported by the provider., + OAuth1Version oauth1Version,, + super(providerId, new GenericOAuth1ServiceProvider(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, authenticateUrl, accessTokenUrl, oauth1Version), apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/GenericOAuth1ConnectionFactory.java, + * @param oauth1Version The version of OAuth 1 (OAuth 1.0 or OAuth 1.0a) supported
[+++ b/docs/src/reference/docbook/implementing.xml, + <title>Adding support for a service provider</title>, + Spring Social makes it easy to add support for service providers that are not already supported by the framework., + If you review the existing client modules, such as spring-social-twitter and spring-social-facebook, you will discover they are implemented in a consistent manner and they apply a set of well-defined extension points., + In this section, you will learn how to add support for new service providers you wish to integrate into your applications., + <section id="service-providers-implementing">, + <title>Process</title>, + <para>, + The process of adding client support for a
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2015 the original author or authors., + private String signupUrl;, +, + private String connectionAddedRedirectUrl;, +, + private String defaultFailureUrl;, +, + if (signupUrl != null) {, + filter.setSignupUrl(signupUrl);, + }, +, + if (connectionAddedRedirectUrl != null) {, + filter.setConnectionAddedRedirectUrl(connectionAddedRedirectUrl);, + }, +, + if (defaultFailureUrl != null) {, + filter.setDefaultFailureUrl(defaultFailureUrl);, + }, + , + /**, + * Sets the URL to land on after an authentication failure so that the user can register with the application., + * @param signupUrl the URL to redirect to after an authentication failure, + * @return
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils#getConnection()`., +@Autowired, +ProviderSignInUtils providerSignInUtils;, +, + Connection<?> connection = providerSignInUtils.getConnection(request);, +If `ProviderSignInUtils#getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils#doPostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils#doPostSignUp()` to complete the connection:, + ProviderSignInUtils.doPostSignUp(account.getUsername(), request);, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can
[+++ b/build.gradle, + h2Version = '1.3.154', +++ b/build.gradle, + h2Version = '1.3.154', +++ b/spring-social-core/src/main/java/sql-error-codes.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">, +, +<!--, + - Overrides default error codes for H2 to account for new error code, + - (23505) introduced in H2 1.3.154 that indicates a duplicate key error., + -, + - This file is temporary and will be removed in Spring Social 1.1 when, + - Spring Framework 3.1 is required., + -->, +<beans>, +, + <bean id="H2" class="org.springframework.jdbc.support.SQLErrorCodes">, + <property name="badSqlGrammarCodes">, + <value>42000,42001,42101,42102,42111,42112,42121,42122,42132</value>, + </property>, + <property name="duplicateKeyCodes">, + <value>23001,23505</value>, + </property>,
[+++ b/docs/src/info/changelog.txt, + * The ability to test a connection and refresh an expired connection, + * The ability to update status across connections in a uniform way, + * The ability to access user profile data on a connection in a uniform way, + and use it to pre-populate application registration forms, + * New query operations for finding connections by provider ID, API binding type,, + a provider user ID, a combination of provider ID and provider user ID, or, + a combination of provider ID and API binding type, + * Enhanced support for extending the
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUser.java, +package org.springframework.social.security;, +, +import java.util.Collection;, +, +import org.springframework.security.core.GrantedAuthority;, +import org.springframework.security.core.userdetails.User;, +, +/**, + * simple utility class that uses {@link User#getUsername()} as {@link SocialUserDetails#getUserId()}, + * for SocialUserDetails, + *, + * @author stf@molindo.at, + */, +public class SocialUser extends User implements SocialUserDetails {, +, + private static final long serialVersionUID = 1L;, +, + public SocialUser(String username, String password, boolean enabled, boolean accountNonExpired,, + boolean credentialsNonExpired, boolean accountNonLocked, Collection<? extends GrantedAuthority> authorities) {, + super(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities);, + }, +, + public SocialUser(String username, String password, Collection<? extends GrantedAuthority> authorities) {, +
[+++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/api/impl/TripItModule.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/.gitignore, +samples/**/target, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +samples/**/target, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase-2/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, + <groupId>org.springframework.social.samples</groupId>, + <artifactId>facebook-showcase-2</artifactId>, + <name>Spring Social Facebook Showcase 2</name>, + <packaging>war</packaging>, + <version>1.0.0.BUILD-SNAPSHOT</version>, + <properties>, + <java-version>1.6</java-version>, + <org.springframework.social-version>1.0.0.BUILD-SNAPSHOT</org.springframework.social-version>, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, + <org.slf4j-version>1.5.10</org.slf4j-version>, +
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + response.setHeader("Pragma", "no-cache");, + response.setDateHeader("Expires", 1L);, + response.setHeader("Cache-Control", "no-cache");, + response.addHeader("Cache-Control", "no-store");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, + * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJacksonHttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., + * Returns a {@link MappingJacksonHttpMessageConverter} to be used by the internal {@link RestTemplate}., + protected MappingJacksonHttpMessageConverter getJsonMessageConverter() {, + return new MappingJacksonHttpMessageConverter(); , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, + * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJacksonHttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., + * Returns a {@link MappingJacksonHttpMessageConverter} to be used by the internal {@link RestTemplate}., + protected MappingJacksonHttpMessageConverter getJsonMessageConverter() {, + return new MappingJacksonHttpMessageConverter(); , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors.,
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.javajava, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0.RELEASE (August 25, 2011), +=============================================, +Bug Fixes, + * Discontinued use of "../"-based relative URLs when redirecting, + after deleting a connection to fix redirection when the disconnect, + form's action URL has a trailing slash. (SOCIAL-238), +, +Improvements, + * Added schema for JdbcUsersConnectionRepository to reference documentation, + and briefly described its purpose and location within the core module., + (SOCIAL-241), + * ConnectInterceptor.preConnect() now returns a MultiValueMap<String, String>, + to be able to add parameters to the authorization URL. (SOCIAL-243), + * New samples illustrating a popup-based connection flow and Spring Social, +
[+++ b/build.gradle, + testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/build.gradle, + testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, + <groupId>org.scribe</groupId>, + <artifactId>scribe</artifactId>, + <version>1.0.7</version>, +++ b/build.gradle, + testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, + <groupId>org.scribe</groupId>, + <artifactId>scribe</artifactId>, + <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/build.gradle, + testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, + <groupId>org.scribe</groupId>, + <artifactId>scribe</artifactId>, + <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, + facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/build.gradle, + testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, + <groupId>org.scribe</groupId>, + <artifactId>scribe</artifactId>, + <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + FacebookProfile userProfile = facebookProvider.getServiceOperations(1).getUserProfile();, + facebookProvider.getServiceOperations(1).updateStatus(message);, +++ b/samples/facebook-showcase-2/src/main/resources/org/springframework/social/samples/facebook/db/ConnectedAccount.sql, +create table ServiceProvider (name varchar,, + displayName varchar not null,,
[+++ b/build.gradle, + compile project(':spring-social-gowalla') { optional = true }, +project('spring-social-gowalla') {, + description = 'Spring Social Gowalla', + dependencies {, + compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", + compile project(':spring-social-core'), + compile project(':spring-social-oauth'), + }, +}, +, +++ b/build.gradle, + compile project(':spring-social-gowalla') { optional = true }, +project('spring-social-gowalla') {, + description = 'Spring Social Gowalla', + dependencies {, + compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", + compile project(':spring-social-core'), + compile project(':spring-social-oauth'), + }, +}, +, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/views/home.jsp, +<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>, +<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>, +<%@ taglib uri="http://www.springframework.org/tags/form" prefix="sf" %>, +<%@ page session="false" %>, +<html>, +<head>, + <title>Facebook Showcase</title>, +</head>, +<body>, + <h1>Facebook Showcase</h1>,
[+++ b/src/reference/docbook/signin.xml, + </listitem>]
[+++ b/build.gradle, + commonsCodecVersion = '1.5', + springSecurityVersion = '3.1.0.RC2', + compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { provided = true }, +++ b/build.gradle, + commonsCodecVersion = '1.5', + springSecurityVersion = '3.1.0.RC2', + compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { provided = true }, +++ b/docs/src/reference/docbook/overview.xml, + , + <section id="overview-dependencies">, + <title>Dependencies</title>, + , + <para>, + In addition to Spring Social itself, there are a few additional dependencies you may need to add to your project's build., + </para>, + , + <section id="overview-dependencies-spring">, + <title>Spring Framework</title>, + <para>, + Spring Social depends on the Spring Framework's web module for its REST client support using
[+++ b/docs/src/reference/docbook/connecting.xml, + <para>, + In the previous chapter, you saw how Spring Social's <emphasis>Service Provider 'Connect' Framework</emphasis> supports authorization and manages connections between an application and an external service provider., + But although various implementations of <interfacename>ServiceProvider</interfacename> support the specifics of the authorization protocol for each service provider, they do not handle the overall connection flow. , + </para>, + <para>, + Spring Social's <code>spring-social-web</code> module includes <classname>ConnectController</classname>, a Spring MVC controller that works with <interfacename>ServiceProvider</interfacename>s to coordinate the connection flow., + <classname>ConnectController</classname> takes care of redirecting the user to the service provider for authorization and responding to
[+++ b/docs/src/reference/docbook/apis.xml, + If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> via a <interfacename>ServiceProviderConnection</interfacename>. , + For example, the following snippet calls <methodname>getServiceApi()</methodname> on a connection to retrieve a <interfacename>TwitterApi</interfacename>:, +ServiceProviderConnection<TwitterApi> connection = , + connectionRepository.findConnectionByServiceApi(TwitterApi);, +TwitterApi twitterApi = connection.getServiceApi();]]>, +ServiceProviderConnection<FacebookApi> connection = , + connectionRepository.findConnectionByServiceApi(FacebookApi);, +FacebookApi facebookApi = connection.getServiceApi();]]>, + Spring Social's Facebook API binding is divided into 9 sub-APIs exposes through the methods of <interfacename>FacebookApi</interfacename>:, + </para>, +, + <programlisting language="java"><![CDATA[, +public interface FacebookApi extends GraphApi {, +, + CommentOperations commentOperations();, +, + EventOperations
[+++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, + * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, + * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ServiceProvider.java, + * @param <S> the service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, + * The request token should be stored in the user's session up until the authorization callback is made
[+++ b/build.gradle, + compile ("org.springframework.android:spring-android-rest-template:1.0.0.M2") {, + optional = true, + transitive = false, + }, +++ b/build.gradle, + compile ("org.springframework.android:spring-android-rest-template:1.0.0.M2") {, + optional = true, + transitive = false, + }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, + /**, + * AuthorizationCode denotes the server-side authorization flow, and is, + * associated with the response_type=code parameter value, + */, + AuthorizationCode,, +, + /**, + * ImplicitGrant
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors.,
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++
[+++ b/gradle.properties, +springSocialVersion=1.1.0.BUILD-SNAPSHOT, +role=developer]
[+++ b/build.gradle, + jacksonVersion = '1.8.3', + springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/build.gradle, + jacksonVersion = '1.8.3', + springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +},
[+++ b/build.gradle, + compile project(':spring-social-github') { optional = true }, +project('spring-social-github') {, + description = 'Spring Social GitHub', + dependencies {, + compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", + compile project(':spring-social-core'), + compile project(':spring-social-oauth'), + }, +}, +, +++ b/build.gradle, + compile project(':spring-social-github') { optional = true }, +project('spring-social-github') {, + description = 'Spring Social GitHub', + dependencies {, + compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", + compile project(':spring-social-core'), + compile project(':spring-social-oauth'), + }, +}, +, +++ b/samples/facebook-showcase-2/build.gradle, +// Main gradle build file for Spring Social's Facebook Showcase Sample, +description = 'Spring Social Facebook Connect', +abbreviation = 'FACESHOW', +++ b/build.gradle, + compile project(':spring-social-github') { optional = true
[+++ b/samples/facebook-showcase-2/README, +Facebook Showcase, +=================, +with Facebook. This particular showcase example leverages Facebook's XFBML and JavaScript APIs to establish, +connections between the application user and their Facebook profile. (Another Facebook showcase sample,, +facebook-showcase-2, demonstrates how to use Spring Social to establish connections following OAuth 2's, +web server flow)., + - Connecting to Facebook via Facebook's <fb:login-button> tag., + - Using Spring Social's @FacebookAccessToken and @FacebookUserId annotations to extract a user's access token, + and user ID from the cookie that is written after authorization., +++ b/samples/facebook-showcase-2/README, +Facebook Showcase, +=================, +with Facebook. This particular showcase example leverages Facebook's XFBML and
[+++ b/spring-social-security/src/test/java/org/springframework/social/security/provider/OAuth2AuthenticationServiceTest.java, + // TODO: This isn't the complete redirect URL, but it's sufficient to verify that the redirect URL was drawn from the request., + // Ultimately the OAuth2Template creates the redirect URL, but since that's mocked out in this test, that won't be easily, + // done without recreating the functionality of a real OAuth2Template. Instead, we can feel confident that if the redirect, + // URL is what we told the mock to return, then the mock must have been given the proper return URL., + assertEquals("http://facebook.com/auth", e.getRedirectUrl());, + , + @Test, + public void test_withProxyHeaders()
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/src/reference/docbook/signin.xml, +<bean class="org.springframework.social.connect.web.ProviderSignInController">, +<bean class="org.springframework.social.connect.web.ProviderSignInController">, +<bean class="org.springframework.social.connect.web.ProviderSignInController">]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/build.gradle, +description = "Spring Social Documentation", + title = "Spring Social ${version} API", +++ b/docs/build.gradle, +description = "Spring Social Documentation", + title = "Spring Social ${version} API", +++ b/docs/src/api/overview.html, +This document is the API specification for Spring Social, + support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top"/>, +++ b/docs/build.gradle, +description = "Spring Social Documentation", + title = "Spring Social ${version} API", +++ b/docs/src/api/overview.html, +This document is the API specification for Spring Social, + support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top"/>, +++ b/docs/src/info/changelog.txt, +++ b/docs/build.gradle, +description = "Spring Social Documentation", + title = "Spring Social ${version}
[+++ b/build.gradle, + httpComponentsVersion = '4.1.1', + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/build.gradle, + httpComponentsVersion = '4.1.1', + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, + RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/build.gradle, + httpComponentsVersion = '4.1.1', + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, + RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, + RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/build.gradle, + httpComponentsVersion = '4.1.1', + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, + RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + List<Connection<?>> connections = repo.findConnections(data.getProviderId());]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + return connectView();, + setNoCache(request);, + return connectView(providerId); , + return connectedView(providerId); , + return connectionStatusRedirect(providerId);, + }, +, + // subclassing hooks, + , + /**, + * Returns the ConnectionFactoryLocator., + */, + protected ConnectionFactoryLocator getConnectionFactoryLocator() {, + return connectionFactoryLocator;, + }, + , + /**, + * Returns the ConnectionRepository., + */, + protected ConnectionRepository getConnectionRepository() {, + return connectionRepository;, + }, + , + /**, + * Returns a RedirectView with the URL to redirect to after a connection is created or deleted., + * Defaults to "/connect/{providerId}" relative to the servlet context
[+++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import static org.junit.Assert.*;, +++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceHandlerTest.java, +import static org.junit.Assert.*;, +++ b/spring-social-config/src/test/resources/org/springframework/social/config/xml/socialNamespaceHandlerTests-serviceProviders.xml, + <bean id="connectionRepository" class="org.springframework.social.connect.test.StubConnectionRepository" />]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + Assert.notNull(token.getConnection());, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + Assert.notNull(token.getConnection());, +++ b/spring-social-security/src/test/java/org/springframework/social/security/provider/OAuth1AuthenticationServiceTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, + assertTrue(token.getConnection() instanceof Connection);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + Assert.notNull(token.getConnection());, +++ b/spring-social-security/src/test/java/org/springframework/social/security/provider/OAuth1AuthenticationServiceTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, + assertTrue(token.getConnection() instanceof Connection);, +++ b/spring-social-security/src/test/java/org/springframework/social/security/provider/OAuth2AuthenticationServiceTest.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +import static org.springframework.social.security.test.ArgMatchers.oAuth2Parameters;, + assertTrue(token.getConnection() instanceof Connection);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, + * Strategy interface used to determine the account ID of the current user.]
[+++ b/gradle.properties, +version=1.1.0.BUILD-SNAPSHOT]
[+++ b/docs/src/reference/docbook/connecting.xml, + ConnectionFactoryLocator connectionFactoryLocator, Provider<ConnectionRepository> connectionRepositoryProvider) {, +<bean class="org.springframework.social.connect.web.ConnectController">, + ConnectionFactoryLocator connectionFactoryLocator, Provider<ConnectionRepository> connectionRepositoryProvider) {, +<bean class="org.springframework.social.connect.web.ConnectController">]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +, +import org.springframework.util.MultiValueMap;, + MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers);, + void updateConnection(ServiceProviderConnection<?> connection);, + , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +, +import org.springframework.util.MultiValueMap;, + MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers);, + void updateConnection(ServiceProviderConnection<?> connection);, + , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import java.util.ArrayList;, +import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + public MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers) {, + MapSqlParameterSource parameters = new MapSqlParameterSource();, + parameters.addValue("localUserId", getLocalUserId());, + parameters.addValue("providerId_" + providerId, providerId);, + parameters.addValue("providerUserIds_" + providerId, entry.getValue());, + List<ServiceProviderConnection<?>> resultList = new NamedParameterJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", parameters, connectionMapper);, + MultiValueMap<String, ServiceProviderConnection<?>> connectionsForUsers
[+++ b/build.gradle, +project('spring-social-web') {, + description = 'Spring Web Integration', +++ b/build.gradle, +project('spring-social-web') {, + description = 'Spring Web Integration', +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/build.gradle, +project('spring-social-web') {, + description = 'Spring Web Integration', +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/build.gradle, +project('spring-social-web') {, + description = 'Spring Web Integration', +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/build.gradle, +project('spring-social-web') {, + description = 'Spring Web Integration', +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/settings.gradle, +include 'spring-social-web', +++ b/build.gradle, +project('spring-social-web') {, + description = 'Spring Web
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, + , +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, + , +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, + , +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/FriendsApiImpl.java, + @SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, + , +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/FriendsApiImpl.java, + @SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AbstractResponseExtractor.java, + @SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, + , +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/FriendsApiImpl.java, + @SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AbstractResponseExtractor.java, + @SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AlbumResponseExtractor.java, +import org.springframework.social.facebook.types.Reference;, + @SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, + , +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/AbstractFacebookApi.java, + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), + @SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/FriendsApiImpl.java, + @SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/AbstractResponseExtractor.java, + @SuppressWarnings("unchecked"), +++
[+++ b/gradle.properties, +springSecurityVersion=5.0.0.M1, +springVersion=5.0.0.RC1, +++ b/gradle.properties, +springSecurityVersion=5.0.0.M1, +springVersion=5.0.0.RC1, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, +import java.util.Base64;, + signatureBytes = Base64.getEncoder().encode(signatureBytes);, +++ b/gradle.properties, +springSecurityVersion=5.0.0.M1, +springVersion=5.0.0.RC1, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, +import java.util.Base64;, + signatureBytes = Base64.getEncoder().encode(signatureBytes);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/PreemptiveBasicAuthClientHttpRequestInterceptor.java, +import java.util.Base64;, + request.getHeaders().set("Authorization", "Basic " + new String(Base64.getEncoder().encode((username + ":" + password).getBytes(charset)), charset));]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.BUILD-SNAPSHOT, +role=developer]
[+++ b/build.gradle, + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), +project('spring-social-test') {, + description = 'Rest Template Test Support', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + }, +}, +, +++ b/build.gradle, + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), +project('spring-social-test') {, + description = 'Rest Template Test Support', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + }, +}, +, +++ b/settings.gradle, +include 'spring-social-test', +++ b/build.gradle, + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'), + testCompile project(':spring-social-test'),
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, + public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, + this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, + public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, + this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +import org.springframework.social.connect.ServiceProviderConnectionData;, + MapSqlParameterSource source = new MapSqlParameterSource();, + source.addValue("localUserId", getLocalUserId());, + String providerId = entry.getKey();, + providerUsersCriteriaSql.append("providerId = :providerId_").append(providerId).append(" and providerUserId in (:providerUserIds_").append(providerId).append(")");, + source.addValue("providerId_" + providerId, providerId);, + source.addValue("providerUserIds_" + providerId, entry.getValue());, + return new SimpleJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", connectionMapper, source);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, + private final JdbcTemplate jdbcTemplate;, +, + @Inject, + public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, + this.jdbcTemplate = jdbcTemplate;, + }, +, + public ShowcaseUser findUserByUsername(String username) {, + return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, + new RowMapper<ShowcaseUser>() {, + public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, + return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, + .getString("email"));, + }, + }, username);, + }, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package
[+++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + FacebookOperations facebook = facebookProvider.getServiceOperations(1, screenName);, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + FacebookOperations facebook = facebookProvider.getServiceOperations(1, screenName);, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="accountIdResolver" />, + , + <!-- Account ID resolver used internally by the connect controller --> , + <bean id="accountIdResolver" , + class="org.springframework.social.samples.facebook.FacebookShowcaseAccountIdResolver" />, +, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + FacebookOperations facebook = facebookProvider.getServiceOperations(1, screenName);, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="accountIdResolver" />, + , + <!-- Account ID resolver used internally by the connect controller --> , + <bean id="accountIdResolver" , + class="org.springframework.social.samples.facebook.FacebookShowcaseAccountIdResolver" />, +, +++ b/samples/facebook-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <bean id="serviceProviderFactory" class="org.springframework.social.connect.jdbc.JdbcServiceProviderFactory">]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/pom.xml, +, +, + <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>, + <!-- dist.* properties are used by the antrun tasks below -->, + <dist.id>spring-social</dist.id>, + <dist.name>Spring Social</dist.name>, + <dist.key>SOCIAL</dist.key>, + <dist.version>${project.version}</dist.version>, + <dist.releaseType>snapshot</dist.releaseType>, + <dist.finalName>${dist.id}-${dist.version}</dist.finalName>, + <dist.fileName>${dist.finalName}.zip</dist.fileName>, + <dist.filePath>target/${dist.fileName}</dist.filePath>, + <dist.bucketName>dist.springframework.org</dist.bucketName>, + <!-- these properties should be in ~/.m2/settings.xml, + <dist.accessKey>s3 access key</dist.accessKey>, + <dist.secretKey>s3 secret key</dist.secretKey>, + -->, + <profiles>, + <profile>, + <id>staging</id>, + <distributionManagement>, + <site>, + <id>spring-site-staging</id>, + <url>file:///${java.io.tmpdir}/spring-social/docs/${project.version}</url>, + </site>, + <repository>, + <id>spring-milestone-staging</id>, + <url>file:///${java.io.tmpdir}/spring-social/milestone</url>, + </repository>, + <snapshotRepository>, + <id>spring-snapshot-staging</id>, + <url>file:///${java.io.tmpdir}/spring-social/snapshot</url>, + </snapshotRepository>, + </distributionManagement>, + </profile>, + </profiles>, + <distributionManagement>, + <!-- see 'staging'
[+++ b/gradle.properties, +junitVersion=4.11, +httpComponentsVersion=4.3.1, +springVersion=4.1.6.BUILD-SNAPSHOT, +springSnapshotVersion=latest.integration, +hamcrestVersion=1.3, +version=1.1.2.BUILD-SNAPSHOT, +jacksonVersion=2.4.5, +servletApiVersion=3.0.1, +springReleaseVersion=latest.release, +mockitoVersion=1.10.8, +javaxInjectVersion=1, +thymeleafVersion=2.1.2.RELEASE]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, + Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, + Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, + Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * The key that identifies this ServiceProviderConnection., + * Used to support
[+++ b/build.gradle, +, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +, +++ b/settings.gradle, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null,
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, + public String getConsumerKey() {, + return consumerKey;, + }, +, + public String getConsumerSecret() {, + return consumerSecret;, + }, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, + public String getConsumerKey() {, + return consumerKey;, + }, +, + public String getConsumerSecret() {, + return consumerSecret;, + }, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, + private final String clientId;, +, + private final String clientSecret;, + , + public AbstractOAuth2ServiceProvider(String id, String clientId, String clientSecret, ConnectionRepository connectionRepository, OAuth2Operations oauth2Operations) {, + this.clientId = clientId;, + this.clientSecret = clientSecret;, + public String getClientId() {, + return clientId;, + }, +, + public String getClientSecret()
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + return createAccessGrant((String) result.get("access_token"), (String) result.get("scope"), (String) result.get("refresh_token"), getIntegerValue(result, "expires_in"), result);, + }, +, + // Retrieves object from map into an Integer, regardless of the object's actual type. Allows for flexibility in object type (eg, "3600" vs 3600)., + private Integer getIntegerValue(Map<String, Object> map, String key) {, + Object object = map.get(key); , + return object != null ? , + Integer.valueOf(String.valueOf(object)) : // normalize to String before creating integer value; , + null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + return createAccessGrant((String) result.get("access_token"), (String) result.get("scope"), (String) result.get("refresh_token"), getIntegerValue(result, "expires_in"), result);, + }, +, + // Retrieves object from map
[+++ b/docs/src/reference/docbook/apis.xml, +++ b/docs/src/reference/docbook/apis.xml, +++ b/docs/src/reference/docbook/signin.xml, + In order to ease sign in for their users, many applications allow sign in with a service provider such as Twitter or Facebook., + With this authentication technique, the user signs into (or may already be signed into) his or her provider account., + The application then tries to match that provider account to a local user account., + If a match is found, the user is automatically signed into the application., + Instead of creating a connection at the end of process, however, <classname>ProviderSignInController</classname> attempts to find a previously established connection
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInAttempt.java, +import org.springframework.social.connect.DuplicateConnectionException;, + * @throws DuplicateConnectionException if the user already has this connection, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInAttempt.java, +import org.springframework.social.connect.DuplicateConnectionException;, + * @throws DuplicateConnectionException if the user already has this connection, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInController.java, + private final SignInAdapter signInAdapter;, + private String signUpUrl = "/signup";, + private String postSignInUrl = "/";, + private final String controllerCallbackUrl;, + * @param signInAdapter an adapter between this controller and the local application's user sign-in system., + Provider<ConnectionRepository> connectionRepositoryProvider, SignInAdapter signInAdapter) {, + this.signInAdapter = signInAdapter;, + this.controllerCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, + * Sets the URL to redirect the user to if no
[+++ b/docs/src/reference/docbook/overview.xml, + <title>Spring Social Overview</title>, +++ b/docs/src/reference/docbook/overview.xml, + <title>Spring Social Overview</title>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + for (Iterator<Entry<String, List<String>>> additionalParams = additionalParameters.entrySet().iterator(); additionalParams.hasNext();) {, + MultiValueMap<String, String> customAuthorizeParameters = getCustomAuthorizationParameters();, + if (customAuthorizeParameters == null) {, + if(clientAdditionalParameters != null) {, + customAuthorizeParameters.putAll(clientAdditionalParameters);, + }, + return customAuthorizeParameters;, +++ b/docs/src/reference/docbook/overview.xml, + <title>Spring Social Overview</title>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + for (Iterator<Entry<String, List<String>>> additionalParams = additionalParameters.entrySet().iterator(); additionalParams.hasNext();) {, + MultiValueMap<String, String> customAuthorizeParameters = getCustomAuthorizationParameters();, + if (customAuthorizeParameters == null) {, + if(clientAdditionalParameters != null) {, + customAuthorizeParameters.putAll(clientAdditionalParameters);, + }, + return customAuthorizeParameters;, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.social.test.client.RequestMatchers.*;,
[+++ b/gradle.properties, +springVersion=5.0.0.M3]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import javax.servlet.http.HttpSession;, + private SimpleUrlAuthenticationFailureHandler delegateAuthenticationFailureHandler;, + , + this.delegateAuthenticationFailureHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);, + super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(delegateAuthenticationFailureHandler));, + * The URL to redirect to if authentication fails or if authorization is denied by the user., + * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., + delegateAuthenticationFailureHandler.setDefaultFailureUrl(defaultFailureUrl);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import javax.servlet.http.HttpSession;, + private SimpleUrlAuthenticationFailureHandler delegateAuthenticationFailureHandler;, + , + this.delegateAuthenticationFailureHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);, + super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(delegateAuthenticationFailureHandler));, + * The URL to redirect to if authentication fails or if authorization is denied by the user., + * @param defaultFailureUrl
[+++ b/.gitmodules, +[submodule "buildSrc"], + path = buildSrc, + url = git://github.com/SpringSource/spring-build-gradle.git, +++ b/.gitmodules, +[submodule "buildSrc"], + path = buildSrc, + url = git://github.com/SpringSource/spring-build-gradle.git, +++ b/build.gradle, + import org.springframework.build.Version, +// @author Chris Beams, +apply plugin: 'base', +apply plugin: 'idea', +, +def buildSrcDir = "$rootDir/buildSrc", +apply from: "$buildSrcDir/wrapper.gradle", +apply from: "$buildSrcDir/maven-root-pom.gradle", +, + version = new Version(springSocialVersion), + mavenRepo urls: 'http://maven.springframework.org/snapshot', + mavenCentral(), + // add tasks for creating source jars and generating poms etc, + apply from: "$buildSrcDir/maven-deployment.gradle", +, + // add tasks for finding and publishing .xsd files, + apply from: "$buildSrcDir/schema-publication.gradle", +// -----------------------------------------------------------------------------, +// Configuration for the
[+++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Copyright 2010 the original author or authors., + * Exception indicating that the authorization used during an operation invocation are invalid., + super("The authorization invalid.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Copyright 2010 the original author or authors., + * Exception indicating that the authorization used during an operation invocation are invalid., + super("The authorization invalid.");, +++ b/spring-social-core/src/main/java/org/springframework/social/MissingAuthorizationException.java, + * Copyright 2010 the original author or authors., + * Exception indicating that an operation requiring authorization was attempted using an API binding that was created without authorization., + super("Authorization is required for the operation, but the API
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + private static boolean interceptorsSupported = ClassUtils.isPresent("org.springframework.http.client.ClientHttpRequestInterceptor", ProtectedResourceClientFactory.class.getClassLoader());, + , + private static boolean listBasedInterceptors = false;, + , + private static Method setInterceptorsMethod;, + , + static {, + if (interceptorsSupported) {, + try {, + setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", List.class);, + listBasedInterceptors = true;, + } catch (NoSuchMethodException e) {, + try {, + setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", new ClientHttpRequestInterceptor[0].getClass());, + } catch (NoSuchMethodException shouldntHappen) {}, + }, + }, + }, +, + OAuth1RequestInterceptor interceptor = new OAuth1RequestInterceptor(credentials);, + try {, + if (listBasedInterceptors) {, + List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, + interceptors.add(interceptor);, + setInterceptorsMethod.invoke(client, interceptors);
[+++ b/docs/src/reference/docbook/index.xml, + <title>Interacting</title>, +++ b/docs/src/reference/docbook/index.xml, + <title>Interacting</title>, +++ b/docs/src/reference/docbook/signin.xml, + <para>To make it easier for users to sign in to your application, Spring Social makes it possible for them to authenticate to your application by signing into either Twitter or Facebook.</para>, + , + <section xml:id="signin_with_twitter">, + <title>Sign in with Twitter</title>, + , + <para>Spring Social's <classname>TwitterSigninController</classname> is a Spring MVC controller that processes the "Sign in with Twitter" flow described at <ulink url="http://dev.twitter.com/pages/sign_in_with_twitter"/>. Essentially, this process is an OAuth 1 authorization flow, quite similar to the flow that <classname>ConnectController</classname> processes for connecting an account with Twitter. The
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A link to a service provider user., + * Allows the client application to access or update user information using the provider's API., + * Exposes a set of operations that are common across all service providers, including, + * the ability to {@link #getUser() access user profile information} and {@link #updateStatus(String) update user status}. , + * @param <S> a strongly-typed binding to the service provider's API, + * The key that identifies this ServiceProviderConnection., + * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors.,
[+++ b/spring-social-core/src/main/java/org/springframework/social/RevokedAuthorizationException.java, + this("Unknown");, + }, + , + public RevokedAuthorizationException(String reason) {, + super("The authorization has been revoked. Reason: " + reason);]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.List;, + public static Map<String, String> getFacebookCookieData(Cookie[] cookies, String apiKey, String appSecret) {, + Map<String, String> cookieData = extractDataFromCookie(cookie.getValue().trim());, + String signature = calculateSignature(appSecret, cookieData);, + if (signature.equals(cookieData.get("sig"))) {, + return cookieData;, + }, + System.out.println(signature);, + break;, + private static String calculateSignature(String appSecret, Map<String, String> cookieData) {, + String payload = "";, + List<String> keys = new ArrayList<String>(cookieData.keySet());, + Collections.sort(keys);, + for (String key : keys) {, + if (!key.equals("sig")) {, + payload += key + "=" + cookieData.get(key);, + }, + }, + return md5(payload + appSecret);, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/docs/src/reference/docbook/overview.xml, +++ b/settings.gradle, +++
[+++ b/docs/src/reference/docbook/implementing.xml, + <section id="service-providers-implementing-serviceproviderconnectionfactory-oauth1">]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + private static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, + private static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, + private static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + private static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, + private static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, + private static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + try {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + private static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, + private static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, + private static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + try {, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, + public void signIn_nonExistentProvider() throws Exception {, + ConnectionFactoryRegistry
[+++ b/samples/facebook-showcase/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/samples/github-showcase/pom.xml, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/pom.xml, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/pom.xml, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/ShowcaseController.java, + GitHubOperations gitHub = gitHubProvider.getConnections(1).get(0).getServiceApi();, + String gitHubId = gitHub.getProfileId();, +++ b/samples/github-showcase/pom.xml, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/ShowcaseController.java, + GitHubOperations gitHub = gitHubProvider.getConnections(1).get(0).getServiceApi();, + String gitHubId = gitHub.getProfileId();, +++ b/samples/github-showcase/src/main/resources/org/springframework/social/samples/github/db/ConnectedAccount.sql, +create table Connection (id identity,, + accountId varchar not null,, + providerId varchar not null,, + primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/github-showcase/pom.xml,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import java.util.Arrays;, +import java.util.List;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.http.converter.HttpMessageConverter;, +import org.springframework.http.converter.StringHttpMessageConverter;, + private final String consumerKey;, + private final String consumerSecret;, + private final String requestTokenUrl;, + private final UriTemplate authorizeUrlTemplate;, + private final String accessTokenUrl;, + private final RestTemplate restTemplate;, + this.restTemplate = new RestTemplate();, + List<HttpMessageConverter<?>> converters = Arrays.<HttpMessageConverter<?>> asList(, + new StringHttpMessageConverter(), new FormHttpMessageConverter());, + this.restTemplate.setMessageConverters(converters);]
[+++ b/docs/src/reference/docbook/implementing.xml, + <para>Create a source project for the client code e.g. <code>spring-social-twitter</code>.</para>, + <para>Develop or integrate a Java binding to the provider's "Service API" e.g. <code>TwitterApi</code>.</para>, + <para>Create a ServiceProvider implementation that allows users to authorize with the provider and obtain Service API instances e.g. <code>TwitterServiceProvider</code>.</para>, + <para>Create a ServiceApiAdapter that maps the provider's native Service API onto the uniform ServiceProviderConnection model e.g. <code>TwitterServiceApiAdapter</code>.</para>, + <para>Finally, create a ServiceProviderConnectionFactory that wraps the other artifacts up and provides a simple interface for establishing connections e.g. <code>TwitterServiceProviderConnectionFactory</code></para>, + <section id="service-providers-implementing-project">, + <title>Creating a source project for the provider client code</title>,
[+++ b/.travis.yml, +language: java, +jdk: oraclejdk8]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + MultiValueMap<String, String> additionalParameters = preConnect(connectionFactory, request);, + return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, additionalParameters));, + private MultiValueMap<String, String> preConnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, + MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, + MultiValueMap parameters = interceptor.preConnect(connectionFactory, request);, + if (parameters != null) {, + additionalParameters.putAll(parameters);, + return additionalParameters;, + }, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + MultiValueMap<String, String> additionalParameters = preConnect(connectionFactory, request);, + return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, additionalParameters));, + private MultiValueMap<String, String> preConnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, + MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, + MultiValueMap parameters = interceptor.preConnect(connectionFactory, request);, + if (parameters != null) {, + additionalParameters.putAll(parameters);, + return
[+++ b/build.gradle, + javaxInjectVersion = '1', + compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, + compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, + compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +++ b/build.gradle, + javaxInjectVersion = '1', + compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, + compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, + compile ("javax.inject:javax.inject:$javaxInjectVersion") { optional = true }, +++ b/docs/src/reference/docbook/signin.xml, + <classname>TwitterSigninController</classname> is constructed with three arguments:, + <constructor-arg ref="#{environment['application.url']}" />, + <constructor-arg value="#{environment['facebook.appId']}" />, + <constructor-arg value="#{environment['facebook.appSecret']}" />, + It also needs the base application URL that it will use to construct a URL to <classname>ConnectController</classname>
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.springframework.social.connect.web.test.StubOAuthTemplateBehavior.*;, +import org.springframework.social.connect.web.test.StubOAuthTemplateBehavior;, + // OAuth 1, + ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuthTemplateBehavior.THROW_EXCEPTION);, + ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, + // OAuth 2, + , + @Test, + public void connect_OAuth2Provider() throws Exception {, + ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, + ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, + connectionFactoryLocator.addConnectionFactory(connectionFactory);, + MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, + mockMvc.perform(post("/connect/oauth2Provider")), + .andExpect(redirectedUrl(OAUTH2_AUTHORIZE_URL));, + }, +, + @Test, + public void connect_OAuth2Provider_withScope() throws Exception {, + ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, + ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, + connectionFactoryLocator.addConnectionFactory(connectionFactory);, + MockMvc mockMvc =
[+++ b/README, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process of: , +, +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update, +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, + ./gradlew eclipse, +, +Once complete, you may then import the projects into
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++
[+++ b/docs/src/reference/docbook/overview.xml, + <para>The Spring Social project enables your applications to establish Connections with Software-as-a-Service (SaaS) Providers such as Facebook and Twitter to invoke Service APIs on behalf of Users.</para>, + <para>What makes these applications a little different than traditional applications is that the data that they collect represent some facet of their users' lives. What's more, these applications are more than willing to share that data with other applications, as long as the user gives permission to do so. This means that although these social networks are great at bringing people together, as software services they also excel
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="serviceprovider" xmlns:xlink="http://www.w3.org/1999/xlink">, + <para>, + The <code>spring-social-core</code> module includes a <emphasis>Service Provider 'Connect' Framework</emphasis> for managing connections to Software-as-a-Service (SaaS) providers such as Facebook and Twitter., + This framework allows your application to establish connections between local user accounts and accounts those users have with external service providers. , + Once a connection is established, it can be be used to obtain a strongly-typed Java binding to the ServiceProvider's API, giving your application the ability to invoke the API on behalf of the user., + </para>, + <para>, + To illustrate, consider Facebook as
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 22, 2011), + * Fixed Spring 3.0 compatibility issues (SOCIAL-152), + * Converted LinkedInTemplate response binding to be JSON-based, fixing a, + problem with Android compatibility (SOCIAL-148), + * Fixed several JSON deserialization issues by either adding new fields to, + the model classes or by setting Jackson to ignore unknown properties., + * Made javax.Inject dependency a required dependency of spring-social-web (SOCIAL-158), + * Added setRequestFactory() methods to OAuth1Template and OAuth2Template to, + allow for customization of the request factory (SOCIAL-133), + * AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding now create a
[+++ b/build.gradle, + compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +++ b/build.gradle, + compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on
[+++ b/spring-social-core/src/test/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepositoryTest.java, + assertTrue(localUserIds.contains("1"));, + assertTrue(localUserIds.contains("2"));, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/mem/InMemoryUsersConnectionRepositoryTest.java, + assertTrue(localUserIds.contains("1"));, + assertTrue(localUserIds.contains("2"));, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/SigningSupportTest.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, + , + private void assertAuthorizationHeader(String authorizationHeader, String expectedSignature) {, + List<String> headerElements = normalizedHeaderElements(authorizationHeader);, + assertEquals("OAuth", headerElements.get(0));, + assertEquals("oauth_consumer_key=\"9djdj82h48djs9d2\"", headerElements.get(1));, + assertEquals("oauth_nonce=\"987654321\"", headerElements.get(2));, + assertEquals("oauth_signature=\""+expectedSignature+"\"", headerElements.get(3));, + assertEquals("oauth_signature_method=\"HMAC-SHA1\"", headerElements.get(4));, + assertEquals("oauth_timestamp=\"123456789\"", headerElements.get(5));, + assertEquals("oauth_token=\"kkk9d7dh3k39sjv7\"", headerElements.get(6));, + assertEquals("oauth_version=\"1.0\"", headerElements.get(7));, + }, +, + private List<String> normalizedHeaderElements(String authorizationHeader) {, + List<String> headerElements = new ArrayList<>();, + for (String element : authorizationHeader.split("[,\\s]")) {, + if (element.trim().length() > 0) {, + headerElements.add(element.trim());, + }, + }, + Collections.sort(headerElements);, + return headerElements;, +
[+++ b/docs/src/reference/docbook/implementing.xml, + <para>Create a ServiceProvider that allows users to authorize with the remote provider and obtain authorized Service API instances e.g. <code>TwitterServiceProvider</code>.</para>, + As part of the spring-social-test module, Spring Social includes a framework for unit testing API bindings., + <para>, + As described in the previous section, a client binding to a secure API such as Facebook or Twitter requires valid user authorization credentials to work., + Such credentials are generally obtained by having your application conduct an authorization "dance" or handshake with the service provider., + Spring Social provides the ServiceProvider&lt;S&gt; abstraction to handle this "authorization
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ReconnectFilter.java, + return httpRequest.getServletPath().substring(CONNECT_PATH_LENGTH).replace("/", "");, + private static final int CONNECT_PATH_LENGTH = CONNECT_PATH.length();, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ReconnectFilter.java, + return httpRequest.getServletPath().substring(CONNECT_PATH_LENGTH).replace("/", "");, + private static final int CONNECT_PATH_LENGTH = CONNECT_PATH.length();, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ReconnectFilterTest.java, +/*, + * Copyright 2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + * OAuth10Operations implementation that uses REST-template to make the OAuth calls.]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + private String applicationUrl;, +, + this.applicationUrl = applicationUrl;, + if (this.applicationUrl != null) {, + this.connectSupport.setApplicationUrl(applicationUrl);, + }, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + private String applicationUrl;, +, + this.applicationUrl = applicationUrl;, + if (this.applicationUrl != null) {, + this.connectSupport.setApplicationUrl(applicationUrl);, + }, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, + @Test, + public void constructor() {, + ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, + ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, + connectionFactoryLocator.addConnectionFactory(connectionFactory1);, + StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, + usersConnectionRepository.createConnectionRepository("habuma").addConnection(connectionFactory1.createConnection(, + new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, + ProviderSignInController providerSignInController = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null);, + providerSignInController.setApplicationUrl("my.url");, + }, +]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 6, 2011), +======================================================, +Notable, + * Extracted provider-specific modules to separate projects, + * Renamed {Provider}Api interfaces to {Provider}.java, + (e.g. TwitterApi is now Twitter), +, +New Features, + * Enabled use of Spring Social behind a proxy, + * Facebook API binding:, + * Photo and video upload, + * Facebook search, + * Facebook pages, + * Twitter API binding:, + * Block API, + * Notifications API, + * Geo API, +, +Bug Fixes, + * SOCIAL-152: Spring Social depends upon some Spring 3.1M1 (or unreleased, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +, + public ServiceProviderUser getUser(Object serviceApi) {, + return EMPTY_PROFILE;, + private static final ServiceProviderUser EMPTY_PROFILE = new ServiceProviderUser(null, null, null, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +, + public ServiceProviderUser getUser(Object serviceApi) {, + return EMPTY_PROFILE;, + private static final ServiceProviderUser EMPTY_PROFILE = new ServiceProviderUser(null, null, null, null);, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +, + public ServiceProviderUser getUser(Object serviceApi) {, + return EMPTY_PROFILE;, + private static final ServiceProviderUser EMPTY_PROFILE = new ServiceProviderUser(null, null, null, null);, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;,
[+++ b/docs/manual/src/asciidoc/index.adoc, + accessToken varchar(255) not null, , + secret varchar(255),, + refreshToken varchar(255),, +++ b/docs/manual/src/asciidoc/index.adoc, + accessToken varchar(255) not null, , + secret varchar(255),, + refreshToken varchar(255),, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.SessionStrategy;, +import org.springframework.social.connect.web.HttpSessionSessionStrategy;, +import org.springframework.web.context.request.ServletWebRequest;, + private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy(); , +, + /**, + * Sets a strategy to use when persisting information that is to survive past the boundaries of a request., + * The default strategy is to set the data as attributes in the HTTP Session., + * @param sessionStrategy the session strategy., + */, + public void setSessionStrategy(SessionStrategy sessionStrategy) {, +
[+++ b/.gitignore, +**/.classpath, +**/.project]
[+++ b/docs/src/reference/docbook/overview.xml, + If you are using Spring Social with Spring Framework 3.0.x (3.0.5 or >), make sure you explicitly add the spring-web dependency to your build:, + <version>3.0.7.RELEASE</version>, + <version>3.1.0.RELEASE</version>, + Although shown here to depend on version 4.1.2 of the HttpClient library, Spring Social can also work with 4.0.X versions of HttpClient.]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/web/connect/ConnectController.java, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.ListableBeanFactory;, +public class ConnectController implements BeanFactoryAware {, + public ConnectController(String applicationUrl) {, + // implementing BeanFactoryAware, + , + public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, + this.serviceProviderLocator = new ServiceProviderLocator((ListableBeanFactory) beanFactory);, + }, +, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/web/connect/ConnectController.java, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.ListableBeanFactory;, +public class ConnectController implements BeanFactoryAware {, + public ConnectController(String applicationUrl) {, + // implementing BeanFactoryAware, + , + public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, + this.serviceProviderLocator = new ServiceProviderLocator((ListableBeanFactory) beanFactory);, + }, +, +++ b/spring-social-web/src/main/java/org/springframework/social/web/connect/ServiceProviderLocator.java, +/*, + *
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + * If the request went through an load balancer or proxy, the URL's scheme, host, and/or port may point at an internal server which is not appropriate as an external callback URL., + * For those cases you can set application URL to the base external URL for the application and it will be used to construct the callback URL instead of determining the callback URL from the request., + public void setApplicationUrl(URL applicationUrl) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + * If the request went through an load balancer or proxy, the URL's scheme, host, and/or port may
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +String authorizeUrl = oauth2Operations.buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, new OAuth2Parameters(callbackUrl));, +String authorizeUrl = oauth2Operations.buildAuthorizeUrl(GrantType.IMPLICIT_GRANT, new OAuth2Parameters(callbackUrl));, +String authorizeUrl = oauth1Operations.buildAuthorizeUrl(requestToken, OAuth1Parameters.NONE);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, authenticateUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +, + private final OAuth1Operations oauth1Operations;, + String consumerSecret, OAuth1Operations oauth1Operations) {, + this.oauth1Operations = oauth1Operations;, +, + public OAuth1Operations getOAuthOperations() {, + return oauth1Operations;, + @Override, + protected final S getApi(Connection connection) {, + return getApi(consumerKey, consumerSecret, connection.getAccessToken(), connection.getSecret());, + }, +, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, +, + private final OAuth1Operations oauth1Operations;, + String consumerSecret, OAuth1Operations oauth1Operations) {, + this.oauth1Operations = oauth1Operations;,
[+++ b/build.gradle, +, +++ b/build.gradle, +, +++ b/gradle.properties, +h2Version = 1.3.175, +hamcrestVersion = 1.3, +httpComponentsVersion = 4.3.1, +jacksonVersion = 2.3.2, +javaxInjectVersion = 1, +junitVersion = 4.11, +mockitoVersion = 1.9.5, +servletApiVersion = 3.0.1, +springVersion = 4.0.3.RELEASE, +springReleaseVersion = latest.release, +springSnapshotVersion = latest.integration, +springSecurityVersion = 3.2.3.RELEASE, +thymeleafVersion = 2.1.2.RELEASE, +jspApiVersion = 2.2.1]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.hamcrest.core.StringContains.*;, +import org.springframework.test.web.client.RequestMatcher;, + customOauth10 = new OAuth1Template("consumer_key", "consumer_secret", REQUEST_TOKEN_URL, AUTHORIZE_URL, null, ACCESS_TOKEN_URL, OAuth1Version.CORE_10) {, + , + .andExpect(headerContains("Authorization", "oauth_callback=\"http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback\"")), +, + // private helper, + @SuppressWarnings("unchecked"), + private RequestMatcher headerContains(String name, String substring) {, + return header(name, containsString(substring));, + }, +]
[+++ b/src/dist/changelog.txt, +Spring Social 2.0.0.M2 (January 20, 2017), +=========================================, +This release primarily addresses Thymeleaf 3 compatibility., +In addition, a few other enhancements and bug fixes, +have been applied:, +, + * Extract Thymeleaf 2 support from spring-social-web, + module into spring-social-web-thymeleaf2 module., + * Thymeleaf 3 support is in new spring-social-web-thymeleaf3, + module., + * Only set refresh token if given refresh token is non-null,, + thereby avoiding loss of refresh token during connection, + refresh. (Issue #21, Pull request #218), + * Make JdbcConnectionRepository and InMemoryConnectionRepository, + public so that they behave correctly when working with , +
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/README, +================================ Spring Social ===============================, +Spring Social is an extension of the Spring Framework that helps you connect your, +applications with Software-as-a-Service (SaaS) providers such as Facebook and Twitter., +, +To get up and running quickly using the project, see the Quickstart:, +https://github.com/SpringSource/spring-social/wiki/Quick-Start, +, +-------------------------------------------------------------------------------, +To get the code and build from source, do the following:, +, +git clone git://github.com/SpringSource/spring-social.git, +cd spring-social, +./gradlew build, +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, +./gradlew eclipse, +, +Once complete, you may then import the projects into Eclipse:, +File -> Import -> Existing projects into
[+++ b/build.gradle, + h2Version = '1.3.170', + httpComponentsVersion = '4.2.3', + junitVersion = '4.11', + springVersion = '3.2.1.RELEASE', + testCompile ("org.springframework:spring-test:$springVersion"), + testCompile ("org.springframework:spring-test:$springVersion"), +++ b/build.gradle, + h2Version = '1.3.170', + httpComponentsVersion = '4.2.3', + junitVersion = '4.11', + springVersion = '3.2.1.RELEASE', + testCompile ("org.springframework:spring-test:$springVersion"), + testCompile ("org.springframework:spring-test:$springVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, +++ b/build.gradle, + h2Version = '1.3.170', + httpComponentsVersion = '4.2.3', + junitVersion = '4.11', + springVersion = '3.2.1.RELEASE', + testCompile ("org.springframework:spring-test:$springVersion"), + testCompile ("org.springframework:spring-test:$springVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, +++ b/build.gradle, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, + if (localUserIds.size() == 0 && connectionSignUp != null) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, + if (localUserIds.size() == 0 && connectionSignUp != null) {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +import org.springframework.social.connect.ConnectionSignUp;, + public void findUserIdWithConnectionNoConnection_withWorkingConnectionSignUp() { , + Connection<TestFacebookApi> connection = connectionFactory.createConnection(new AccessGrant("12345"));, + usersConnectionRepository.setConnectionSignUp(new ConnectionSignUp() {, + public String execute(Connection<?> connection) {, + return "batman";, + }, + });, + List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connection);, + assertEquals(1, userIds.size());, + assertEquals("batman", userIds.get(0));, + }, +, + @Test]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth/OAuthClientRequestSigner.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +public class OAuth1ClientRequestInterceptor {, + private OAuthToken accessToken;, + public OAuth1ClientRequestInterceptor(OAuthToken accessToken) {, + // TODO: implement me, +++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +public class OAuth1ClientRequestInterceptor {, + private OAuthToken accessToken;, + public OAuth1ClientRequestInterceptor(OAuthToken accessToken) {, + // TODO: implement me, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +public class OAuth1ClientRequestInterceptor {, + private OAuthToken accessToken;, + public OAuth1ClientRequestInterceptor(OAuthToken accessToken) {, + // TODO: implement me, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Template.java, +import java.io.UnsupportedEncodingException;, +import java.net.URLEncoder;, +import java.security.InvalidKeyException;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.UUID;, +import
[+++ b/build.gradle, + httpComponentsVersion = '4.3.1', + servletApiVersion = '3.0.1', + springVersion = '4.0.0.RELEASE', + springSecurityVersion = '3.2.0.RELEASE', + testCompile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), + compile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), + testCompile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), + compile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +++ b/build.gradle, + httpComponentsVersion = '4.3.1', + servletApiVersion = '3.0.1', + springVersion = '4.0.0.RELEASE', + springSecurityVersion = '3.2.0.RELEASE', + testCompile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), + compile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), + testCompile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), + compile ("javax.servlet:javax.servlet-api:$servletApiVersion", provided), +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +import java.net.URI;, +import org.apache.http.client.protocol.HttpClientContext;, +import org.apache.http.impl.client.CloseableHttpClient;, +import org.apache.http.impl.client.HttpClients;, +import org.apache.http.protocol.HttpContext;, +import org.springframework.http.HttpMethod;, + , + protected HttpContext createHttpContext(HttpMethod httpMethod, URI uri) {, + HttpClientContext context = new HttpClientContext();, +
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +package org.springframework.social.showcase.facebook;, +, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.facebook.FacebookOperations;, +import org.springframework.social.twitter.DuplicateTweetException;, +import org.springframework.social.web.connect.ConnectInterceptor;, +import org.springframework.util.StringUtils;, +import org.springframework.web.context.request.WebRequest;, +, +public class PostToWallAfterConnectInterceptor implements ConnectInterceptor<FacebookOperations> {, +, + public void preConnect(ServiceProvider<FacebookOperations> provider, WebRequest request) {, + if (StringUtils.hasText(request.getParameter(POST_TO_WALL_PARAMETER))) {, + request.setAttribute(POST_TO_WALL_ATTRIBUTE, Boolean.TRUE, WebRequest.SCOPE_SESSION);, + }, + }, +, + public void postConnect(ServiceProvider<FacebookOperations> provider,, + ServiceProviderConnection<FacebookOperations> connection, WebRequest request) {, + if (request.getAttribute(POST_TO_WALL_ATTRIBUTE, WebRequest.SCOPE_SESSION) != null) {, + try {, + connection.getServiceApi().updateStatus("I've connected with the Spring Social Showcase!");, + } catch (DuplicateTweetException e) {, + }, + request.removeAttribute(POST_TO_WALL_ATTRIBUTE, WebRequest.SCOPE_SESSION);, + }, + }, +, + private static final String POST_TO_WALL_PARAMETER
[+++ b/src/reference/docbook/index.xml, + <year>2011-2013</year>]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/gradle.properties, +++ b/build.gradle, +++ b/gradle.properties, +++ b/settings.gradle, +++ b/build.gradle, +++ b/gradle.properties, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/src/dist/changelog.txt, +Spring Social 2.0.0.M3 (? ?, 2017), +==================================, + * Remove Thymeleaf 2 support., +]
[+++ b/build.gradle, + compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/build.gradle, + compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, + <constructor-arg ref="connectionRepository" />, +++ b/build.gradle, + compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, + <constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, + <intercept-url pattern="/connect/**" access="permitAll" />, +++ b/build.gradle, + compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, + <constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, + <intercept-url pattern="/connect/**" access="permitAll" />, +++ /dev/null, +++ b/build.gradle, + compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +
[+++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, + * Abstract implementation of {@link OAuthClientRequestAuthorizer} that adds an, + * OAuth 1 Authorization header to the request. Concrete implementations will, + * generate the Authorization header by implementing the, + * buildAuthorizationHeader() method., +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, + String authorizationHeader = buildAuthorizationHeader(request.getMethod(), request.getURI(), + protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters);, +, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, + * Abstract implementation of {@link OAuthClientRequestAuthorizer} that adds an, + * OAuth 1 Authorization header to the request. Concrete implementations will, + * generate the Authorization header by implementing the,
[+++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/api/impl/TripItModule.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.authentication.AuthenticationTrustResolverImpl;, + private AuthenticationTrustResolverImpl authenticationTrustResolver = new AuthenticationTrustResolverImpl();, +, + // Check if not already authenticated or is already logged in anonymous., + if (auth == null || !auth.isAuthenticated() || authenticationTrustResolver.isAnonymous(auth)) {]
[+++ b/build.gradle, + hamcrestVersion = '1.2.1', + mockitoVersion = '1.9.0', + springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", + testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", + testCompile "junit:junit-dep:$junitVersion", + testCompile "org.mockito:mockito-core:$mockitoVersion", + testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, + hamcrestVersion = '1.2.1', + mockitoVersion = '1.9.0', + springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", + testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", + testCompile "junit:junit-dep:$junitVersion", + testCompile "org.mockito:mockito-core:$mockitoVersion", + testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @return the new user id (must not be null)., +++ b/build.gradle, + hamcrestVersion = '1.2.1', + mockitoVersion = '1.9.0', + springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", + testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", + testCompile "junit:junit-dep:$junitVersion", + testCompile "org.mockito:mockito-core:$mockitoVersion", + testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", + testCompile
[+++ b/build.gradle, + h2Version = '1.3.156', +++ b/build.gradle, + h2Version = '1.3.156', +++ b/docs/src/reference/docbook/connecting.xml, + registry.addConnectionFactory(new FacebookConnectionFactory(, + environment.getProperty("facebook.clientId"),, + registry.addConnectionFactory(new TwitterConnectionFactory(, + environment.getProperty("twitter.consumerKey"),, + public ConnectionRepository connectionRepository(, + @Value("#{request.userPrincipal}") Principal principal) {, + return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), , + textEncryptor);, +<bean id="connectionFactoryLocator" , + class="org.springframework.social.connect.support.ConnectionFactoryRegistry">, +<bean id="usersConnectionRepository" , + class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">, +<bean id="connectionRepository" factory-method="createConnectionRepository" , + factory-bean="usersConnectionRepository" scope="request">, + <aop:scoped-proxy proxy-target-class="false" />, + <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" , + factory-method="noOpText" />, + <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" , + factory-method="text">, + return new ConnectController(connectionFactoryLocator(), , + connectionRepository());, + <!-- relies on by-type autowiring for the constructor-args -->, + When coordinating a connection
[+++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + addTextToMapMessageConverter();, + MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, + requestParameters.set("client_id", clientId);, + requestParameters.set("client_secret", clientSecret);, + requestParameters.set("code", authorizationCode);, + requestParameters.set("redirect_uri", redirectUri);, + requestParameters.set("grant_type", "authorization_code");, + Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, + return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, + , + // private helpers, + // TODO : Can probably tweak
[+++ b/gradle.properties, +springSocialVersion=1.0.0.RC3, +role=buildmaster]
[+++ b/gradle.properties, +version=1.1.4.BUILD-SNAPSHOT]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + private RestTemplate restTemplate;, + getRestTemplate().setRequestFactory(requestFactory);, + if (!useParametersForClientAuthentication) {, + restTemplate.getInterceptors().add(new PreemptiveBasicAuthClientHttpRequestInterceptor(clientId, clientSecret));, + }, + return extractAccessGrant(getRestTemplate().postForObject(accessTokenUrl, parameters, Map.class));, + // Lazily create RestTemplate to make sure all parameters have had a chance to be set., + // Can't do this InitializingBean.afterPropertiesSet() because it will often be created directly and not as a bean., + if (restTemplate == null) {, + restTemplate = createRestTemplate();, + }]
[+++ b/samples/twitter-showcase/pom.xml, + <artifactId>spring-social-core</artifactId>, +++ b/samples/twitter-showcase/pom.xml, + <artifactId>spring-social-core</artifactId>, +++ b/samples/twitter-showcase/src/main/java/org/springframework/social/samples/twitter/TweetController.java, +import org.springframework.social.connect.ServiceProviderConnection;, +++ b/samples/twitter-showcase/pom.xml, + <artifactId>spring-social-core</artifactId>, +++ b/samples/twitter-showcase/src/main/java/org/springframework/social/samples/twitter/TweetController.java, +import org.springframework.social.connect.ServiceProviderConnection;, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <bean id="serviceProviderFactory" class="org.springframework.social.config.BeanServiceProviderFactory" />]
[+++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * Indicates a security-related error occurred during the invocation of a service provider API operation., + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * Indicates a security-related error occurred during the invocation of a service provider API operation., + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Indicates an HTTP 403 (Forbidden) response from making a call to a service provider API., + * In the case of Twitter, this often means that you
[+++ b/gradle.properties, +springSocialVersion=1.0.0.BUILD-SNAPSHOT, +role=developer]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.1 Release (December 15, 2011), +===============================================]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors.,
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupController.java, +import org.springframework.social.web.connect.SignInControllerGateway;, + private final SignInControllerGateway signinGateway;, + public SignupController(UserRepository userRepository, SignInControllerGateway signinGateway) {, + this.signinGateway = signinGateway;, +, + signinGateway.signIn(user.getUsername());, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupController.java, +import org.springframework.social.web.connect.SignInControllerGateway;, + private final SignInControllerGateway signinGateway;, + public SignupController(UserRepository userRepository, SignInControllerGateway signinGateway) {, + this.signinGateway = signinGateway;, +, + signinGateway.signIn(user.getUsername());, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupForm.java, + @NotEmpty, + @Size(min = 6, message = "must be at least 6 characters"), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupController.java, +import org.springframework.social.web.connect.SignInControllerGateway;, + private final SignInControllerGateway signinGateway;, + public SignupController(UserRepository userRepository, SignInControllerGateway signinGateway) {, + this.signinGateway = signinGateway;, +, + signinGateway.signIn(user.getUsername());, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/signup/SignupForm.java, + @NotEmpty, + @Size(min = 6, message = "must be at least
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, + public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, + return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, + public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, + return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, + * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, + ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, + public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, + return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, + * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, + ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this(accessToken, null);, + public AccessGrant(String accessToken, String refreshToken) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-github/src/main/java/org/springframework/social/github/api/GitHubApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + /**, + * Creates a memento that can be used to persist the state of this connection., + */, + ServiceProviderConnectionMemento createMemento();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + /**, + * Creates a memento that can be used to persist the state of this connection., + */, + ServiceProviderConnectionMemento createMemento();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, + public abstract ServiceProviderConnection<S> createConnection(ServiceProviderConnectionMemento memento);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + /**, + * Creates a memento that can be used to persist the state of this connection., + */, + ServiceProviderConnectionMemento createMemento();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, + public abstract ServiceProviderConnection<S> createConnection(ServiceProviderConnectionMemento memento);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionMemento.java, +/*, + * Copyright 2011 the
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, + public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, + return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, + public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, + return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, + * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, + ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, + public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, + return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/OAuth2ServiceProvider.java, + * @param accessToken the access token returned from {@link OAuth2Operations#exchangeForAccess(String, String)}, + ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, + public ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken) {, + return
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/docs/src/reference/docbook/signin.xml, +<facebook:init appId="0c754d95f9d9899b0d7c4454a6f2dde6" />]]>, +++ b/docs/src/reference/docbook/signin.xml, +<facebook:init appId="0c754d95f9d9899b0d7c4454a6f2dde6" />]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookInitTag.java, +import javax.servlet.jsp.tagext.TagSupport;, +public class FacebookInitTag extends TagSupport {, + private String appId;, + * Sets the application's Facebook ID., + * @param appId, + public void setAppId(String appId) {, + this.appId = appId;, + public int doStartTag() throws JspException {, + pageContext.getOut().append("FB.init({appId: '" + appId + "', status: true, cookie: true, xfbml: true});");, +++ b/docs/src/reference/docbook/signin.xml, +<facebook:init appId="0c754d95f9d9899b0d7c4454a6f2dde6" />]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookInitTag.java, +import javax.servlet.jsp.tagext.TagSupport;, +public class FacebookInitTag extends TagSupport {, + private String appId;, + * Sets the application's Facebook ID., + * @param appId, + public void setAppId(String
[+++ b/docs/src/reference/docbook/facebook.xml, + <para>Spring Social's <interfacename>FacebookOperations</interfacename> and its implementation, <classname>FacebookTemplate</classname> provider the operations needed to interact with Facebook on behalf of a user.</para>, + <para>Creating an instance of <classname>FacebookTemplate</classname> is as simple as constructing it by passing in an authorized access token to the constructor:</para>, + , + <programlisting><![CDATA[String accessToken = "f8FX29g..."; // access token received from Facebook after OAuth authorization, +FacebookOperations facebook = new FacebookTemplate(accessToken);]]></programlisting>, +, + <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>FacebookServiceOperations</classname>:</para>, + ,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, + configureRestTemplate(restTemplate);, + configureRestTemplate(restTemplate);, + * Subclassing hook to enable customization of the RestTemplate used to consume provider API resources., + * An example use case might be to configure a custom error handler., + * @param restTemplate the RestTemplate to configure., + */, + protected void configureRestTemplate(RestTemplate restTemplate) { , + }, + , + /**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, + configureRestTemplate(restTemplate);, + configureRestTemplate(restTemplate);, + * Subclassing hook to enable customization of the RestTemplate used to consume provider API resources., + * An example use case might be to configure a custom error handler., + * @param restTemplate
[+++ b/.gitignore, +**/.settings, +**/bin]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.web.filter.HiddenHttpMethodFilter;, + * Note: requires {@link HiddenHttpMethodFilter} to be registered with the '_method' request parameter set to 'DELETE' to convert web browser POSTs to DELETE requests., + * Note: requires {@link HiddenHttpMethodFilter} to be registered with the '_method' request parameter set to 'DELETE' to convert web browser POSTs to DELETE requests.]
[+++ b/build.gradle, + compile project(':spring-social-web'), +++ b/build.gradle, + compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, + @Override, + public void signIn(Serializable accountId) {, + SecurityContextHolder.getContext().setAuthentication(, + new UsernamePasswordAuthenticationToken(accountId, null, null));, + }, +, +}, +++ b/build.gradle, + compile project(':spring-social-web'), +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/AccountIdAsPrincipalSigninGateway.java, +package org.springframework.social.showcase;, +, +import java.io.Serializable;, +, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.web.connect.SignInControllerGateway;, +, +public class AccountIdAsPrincipalSigninGateway implements SignInControllerGateway {, +, + @Override, + public void signIn(Serializable accountId) {, + SecurityContextHolder.getContext().setAuthentication(, + new UsernamePasswordAuthenticationToken(accountId, null, null));, + }, +, +}, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml,
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;, + private AuthenticationFailureHandler failureHandler = new SimpleUrlAuthenticationFailureHandler();, + , + getFailureHandler().onAuthenticationFailure(request, response, failed);, + public void setPostFailureUrl(String postFailureUrl) {, + AuthenticationFailureHandler failureHandler = getFailureHandler();, + if (failureHandler instanceof SimpleUrlAuthenticationFailureHandler) {, + SimpleUrlAuthenticationFailureHandler h = (SimpleUrlAuthenticationFailureHandler) failureHandler;, + h.setDefaultFailureUrl(postFailureUrl);, + } else {, + throw new IllegalStateException("can't set postFailureUrl on unknown failureHandler, type is " + failureHandler.getClass().getName());, + }, + }, + , + public AuthenticationFailureHandler getFailureHandler() {, + return failureHandler;, + }, +, + public void setFailureHandler(AuthenticationFailureHandler failureHandler) {, + this.failureHandler = failureHandler;, + }, +]
[+++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), + classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), + classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), + classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Oct 12 11:51:42 MDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-1.12-bin.zip, +++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), + classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Oct 12 11:51:42 MDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-1.12-bin.zip, +++ b/gradlew, +# Attempt to set APP_HOME, +# Resolve links: $0 may be a link, +PRG="$0", +# Need this for relative symlinks., +while [ -h "$PRG" ] ; do, + ls=`ls -ld "$PRG"`, + link=`expr "$ls" : '.*-> \(.*\)$'`, + if expr "$link" : '/.*' > /dev/null; then, + PRG="$link", +
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + * This may be useful when overriding {@link #addCustomAuthorizationParameters(MultiValueMap)} and the consumer key is required in the authorization request., + protected void addCustomAuthorizationParameters(MultiValueMap<String, String> parameters) {, + addCustomAuthorizationParameters(parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + * This may be useful when overriding {@link #addCustomAuthorizationParameters(MultiValueMap)} and the consumer key is required in the authorization request., + protected void addCustomAuthorizationParameters(MultiValueMap<String, String> parameters) {, + addCustomAuthorizationParameters(parameters);, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, + protected void addCustomAuthorizationParameters(MultiValueMap<String,String> parameters) {]
[+++ b/build.gradle, + classpath('org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'), + dependencies {, + springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties", +++ b/build.gradle, + classpath('org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'), + dependencies {, + springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties", +++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT, +springSecurityVersion=3.2.8.RELEASE, +springVersion=4.1.7.RELEASE, +jacksonVersion=2.6.1, +thymeleafVersion=2.1.4.RELEASE, +++ b/build.gradle, + classpath('org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'), + dependencies {, + springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties", +++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT, +springSecurityVersion=3.2.8.RELEASE, +springVersion=4.1.7.RELEASE, +jacksonVersion=2.6.1, +thymeleafVersion=2.1.4.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/build.gradle, + classpath('org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'), + dependencies {, + springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties", +++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT, +springSecurityVersion=3.2.8.RELEASE, +springVersion=4.1.7.RELEASE, +jacksonVersion=2.6.1, +thymeleafVersion=2.1.4.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullApiAdapter.java, + public boolean test(Object api) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullApiAdapter.java, + public boolean test(Object api) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, + public <S> Connection<S> findPrimaryConnectionToApi(Class<S> apiType) {, + String providerId = getProviderId(apiType);, + public <S> List<Connection<S>> findConnectionsToApi(Class<S> apiType) {, + List<?> connections = findConnectionsToProvider(getProviderId(apiType));, + public <S> Connection<S> findConnectionToApiForUser(Class<S> apiType, String providerUserId) {, + String providerId = getProviderId(apiType);, + private <S> String getProviderId(Class<S> apiType) {, + return connectionFactoryLocator.getConnectionFactory(apiType).getProviderId();,
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, + /**, + * Creates an instance of a UserProfile., + * @param name The user's full name, + * @param firstName The user's first name, + * @param lastName The user's last name, + * @param email The user's email address, + * @param username The user's username, + * @deprecated Use other constructor instead, + */, + @Deprecated, + public UserProfile(String name, String firstName, String lastName, String email, String username) {, + this(null, name, firstName, lastName, email, username);, + }, + , + /**, + * Creates an instance of a UserProfile., + * @param
[+++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <bean id="serviceProviderFactory" class="org.springframework.social.config.BeanServiceProviderFactory" autowire="constructor" />]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import javax.inject.Inject;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, + private String viewUrl = "/connect/";, +, + * Sets the url to return on successfull connect., + *, + * @param viewUrl The url to return to., + */, + public void setViewUrl(String viewUrl) {, + this.viewUrl = viewUrl;, + }, + , + /**, +, + /**, + * Returns the view to return on successfull connect., + *, + * @return the view url to return on successfull connect., + */, + protected String getViewUrl() {, + return viewUrl;,
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, + Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, + Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, + Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * The key that identifies this ServiceProviderConnection., + * Used to support proactively test authorization credentials such as an API access token
[+++ b/docs/src/reference/docbook/apis.xml, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +TwitterApi twitterApi = new TwitterTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, + connectionRepository.findPrimaryConnectionToServiceApi(TwitterApi.class);, + connectionRepository.findPrimaryConnectionToServiceApi(FacebookApi.class);, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +LinkedInApi linkedinApi = new LinkedInTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, + connectionRepository.findPrimaryConnectionToServiceApi(LinkedInApi.class);, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +TripItApi tripitApi = new TripItTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, + connectionRepository.findPrimaryConnectionToServiceApi(TripItApi.class);, + connectionRepository.findPrimaryConnectionToServiceApi(GitHubApi.class);, + connectionRepository.findPrimaryConnectionToServiceApi(GowallaApi.class);, +++ b/docs/src/reference/docbook/apis.xml, +String consumerKey = "..."; //
[+++ b/docs/src/reference/docbook/overview.xml, + <listitem><para>spring-social-movies - Shows how to extend Spring Social to implement a new ServiceProvider and API binding.</para></listitem>, + <listitem><para>spring-social-twitter4j - Shows how to extend Spring Social and re-use an existing API binding.</para></listitem>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl) {, + this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);, + }, +, + public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl, OAuth1Version version) {, + this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, null, accessTokenUrl, version);, + }, +, + public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String authenticateUrl, String accessTokenUrl) {, + this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, authenticateUrl, OAuth1Version.CORE_10_REVISION_A);, + }, + , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl) {, + this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl,
[+++ b/docs/src/reference/docbook/connecting.xml, + <classname>ConnectController</classname> relies on an implementation of <interfacename>ConnectionFactoryLocator</interfacename> (see <xref linkend="service-providers-establishing-connections-connection-factory-registry"/>) to find a connection factory for a specific provider., + If we wanted to add support for connecting to other providers, we would simply register their connection factories here., + When restoring connections, it will use the <interfacename>ConnectionFactoryLocator</interfacename> to locate ConnectionFactory instances., +<bean id="connectionFactoryLocator" class="org.springframework.social.connect.support.ConnectionFactoryRegistry">, +<bean id="usersConnectionRepository" class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">, + <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText" />, + <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="text">]
[+++ b/README.md, +- TripIt: [GitHub][tripit-gh] | [Reference][tripit-ref] | [API][tripit-api], +- GitHub: [GitHub][github-gh] | [Reference][github-ref] | [API][github-api], +[twitter-ref]: http://docs.spring.io/spring-social-twitter/docs/current/reference/html, +[twitter-api]: http://docs.spring.io/spring-social-twitter/docs/current/api, +[facebook-ref]: http://docs.spring.io/spring-social-facebook/docs/current/reference/html, +[facebook-api]: http://docs.spring.io/spring-social-facebook/docs/current/api, +[linkedin-ref]: http://docs.spring.io/spring-social-linkedin/docs/current/reference/html, +[linkedin-api]: http://docs.spring.io/spring-social-linkedin/docs/current/api, +[tripit-ref]: http://docs.spring.io/spring-social-tripit/docs/current/reference/html, +[tripit-api]: http://docs.spring.io/spring-social-tripit/docs/current/api, +[github-ref]: http://docs.spring.io/spring-social-github/docs/current/reference/html, +[github-api]: http://docs.spring.io/spring-social-github/docs/current/api, +++ b/README.md, +- TripIt: [GitHub][tripit-gh] | [Reference][tripit-ref] | [API][tripit-api], +- GitHub: [GitHub][github-gh] | [Reference][github-ref] | [API][github-api], +[twitter-ref]: http://docs.spring.io/spring-social-twitter/docs/current/reference/html, +[twitter-api]: http://docs.spring.io/spring-social-twitter/docs/current/api, +[facebook-ref]: http://docs.spring.io/spring-social-facebook/docs/current/reference/html, +[facebook-api]: http://docs.spring.io/spring-social-facebook/docs/current/api, +[linkedin-ref]: http://docs.spring.io/spring-social-linkedin/docs/current/reference/html, +[linkedin-api]: http://docs.spring.io/spring-social-linkedin/docs/current/api, +[tripit-ref]: http://docs.spring.io/spring-social-tripit/docs/current/reference/html, +[tripit-api]: http://docs.spring.io/spring-social-tripit/docs/current/api, +[github-ref]: http://docs.spring.io/spring-social-github/docs/current/reference/html, +[github-api]: http://docs.spring.io/spring-social-github/docs/current/api, +++ b/build.gradle, + classpath('org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'), + testCompile("junit:junit:${junitVersion}"), + dependencies {, + springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties", +++ b/README.md, +- TripIt: [GitHub][tripit-gh] | [Reference][tripit-ref] | [API][tripit-api], +- GitHub: [GitHub][github-gh] | [Reference][github-ref] |
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/build.gradle, + compile project(':spring-social-core'), +++ b/build.gradle, + compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, + accountId varchar not null,, + providerId varchar not null,, + accessToken varchar not null, , + secret varchar, , + refreshToken varchar,, + providerAccountId varchar,, + primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/build.gradle, + compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, + accountId varchar not null,, + providerId varchar not null,, + accessToken varchar not null, , + secret varchar, , + refreshToken varchar,, + providerAccountId varchar,, + primary key (id));, +create unique
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/src/reference/docbook/overview.xml, + <title>Spring Social overview</title>]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + The API can be used to access and update user data on the provider's system., + To put this framework into action, consider Twitter as an example ServiceProvider., + <section id="service-providers-establishing-connections">, + <para>, + So far we have discussed how existing connections are managed using the ServiceProvider framework, but we have not yet discussed how new connections are established., + The manner in which connections between local user accounts and external provider accounts are established varies based on the authorization protocol used by the ServiceProvider., + Some service providers use OAuth, others use Basic Auth, others
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/.gitignore, +**/build, +**/src/test/java/exploration, +.gradle, +spring-social-core/src/test/java/exploration, +**/.classpath, +**/.project, +**/.settings, +**/bin, +++ b/.gitignore, +**/build, +**/src/test/java/exploration, +.gradle, +spring-social-core/src/test/java/exploration, +**/.classpath, +**/.project, +**/.settings, +**/bin, +++ b/build.gradle, + h2Version = '1.3.156', + jacksonVersion = '1.8.2', + springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/.gitignore, +**/build, +**/src/test/java/exploration, +.gradle, +spring-social-core/src/test/java/exploration, +**/.classpath, +**/.project, +**/.settings, +**/bin, +++ b/build.gradle, + h2Version = '1.3.156', + jacksonVersion = '1.8.2', + springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security')
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, + return registerApiBindingBean(registry, apiHelperClass, apiBindingType,allAttributes);, + private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType,Map<String, Object> allAttributes) {, + BeanDefinition helperBD = getApiHelperBeanDefinitionBuilder(allAttributes).getBeanDefinition();, + /**, + * Subclassing hook to allow api helper bean to be configured with attributes from annotation, + */, + protected BeanDefinitionBuilder getApiHelperBeanDefinitionBuilder(Map<String, Object> allAttributes), + {, + return BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource");, + }, +]
[+++ b/build.gradle, + mockitoVersion = '1.8.5', + testCompile "junit:junit:$junitVersion", + testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/build.gradle, + mockitoVersion = '1.8.5', + testCompile "junit:junit:$junitVersion", + testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/build.gradle, + mockitoVersion = '1.8.5', + testCompile "junit:junit:$junitVersion", + testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @return the new user id (null indicates that an implicit local user profile could not be created)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, + if (newUserId != null), + {, + }, +++ b/build.gradle, + mockitoVersion = '1.8.5', + testCompile "junit:junit:$junitVersion", +
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * A ServiceProvider provides access to a API that the application can invoke on behalf of a provider user., + * Defines a single parameterized type A representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * @param <A> the service provider's API type, +public interface ServiceProvider<A> {, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * A ServiceProvider provides access to a API that the application can invoke on behalf of a provider user., + * Defines a single parameterized type A representing a strongly-typed Java binding to the provider's
[+++ b/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, + <classpathentry kind="src" output="target/classes" path="src/main/java"/>, + <classpathentry excluding="**" kind="src" output="target/classes" path="src/main/resources"/>, + <classpathentry kind="src" output="target/test-classes" path="src/test/java"/>, + <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>, + <classpathentry kind="con" path="org.maven.ide.eclipse.MAVEN2_CLASSPATH_CONTAINER">, + <attributes>, + <attribute name="org.eclipse.jst.component.nondependency" value=""/>, + </attributes>, + </classpathentry>, + <classpathentry kind="con" path="org.eclipse.jst.j2ee.internal.module.container"/>, + <classpathentry kind="output" path="target/classes"/>, +</classpath>, +++ b/.classpath, +<?xml version="1.0" encoding="UTF-8"?>, +<classpath>, + <classpathentry kind="src" output="target/classes" path="src/main/java"/>, + <classpathentry excluding="**" kind="src" output="target/classes" path="src/main/resources"/>, + <classpathentry kind="src" output="target/test-classes" path="src/test/java"/>, + <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>, + <classpathentry kind="con" path="org.maven.ide.eclipse.MAVEN2_CLASSPATH_CONTAINER">, + <attributes>, + <attribute name="org.eclipse.jst.component.nondependency" value=""/>, + </attributes>, + </classpathentry>, + <classpathentry kind="con" path="org.eclipse.jst.j2ee.internal.module.container"/>, + <classpathentry kind="output" path="target/classes"/>, +</classpath>, +++
[+++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., + Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, + ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile
[+++ b/samples/facebook-showcase-2/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, + facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/samples/facebook-showcase-2/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + FacebookProfile userProfile =
[+++ b/build.gradle, + jacksonVersion = '1.8.4', +++ b/build.gradle, + jacksonVersion = '1.8.4', +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +Improvements, + * ProviderSignInController now handles callbacks from the provider when the, + user denies authorization by redirecting to the application's sign in page., + (SOCIAL-236), + * If multiple matching connections are found during provider sign in, redirect, + to the sign in page to offer the user a chance to sign in through some other, + means (username/password, via a different provider, etc). (SOCIAL-237), +, +++ b/build.gradle, + jacksonVersion = '1.8.4', +++ b/docs/src/info/changelog.txt, +Spring
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * @see ConnectionRepository#findPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * @see ConnectionRepository#findPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * Find all connections the current user has across all providers., + MultiValueMap<String, Connection<?>> findAllConnections();, + * Returns true if the current user is connected to the provider by the given id e.g. 'facebook'., + * @param providerId the provider id, + * @return true if yes, false otherwise, + */, + public boolean isConnected(String providerId);, + , + /**, + * Returns true if the current user is connected to the provider of the given API type e.g. Facebook.class., + * Useful as
[+++ b/pom.xml, +, + <!-- Joda Date/Time -->, + <dependency>, + <groupId>joda-time</groupId>, + <artifactId>joda-time</artifactId>, + <version>1.6</version>, + </dependency>, +++ b/pom.xml, +, + <!-- Joda Date/Time -->, + <dependency>, + <groupId>joda-time</groupId>, + <artifactId>joda-time</artifactId>, + <version>1.6</version>, + </dependency>, +++ b/src/main/java/org/springframework/social/account/AccountAlreadyConnectedException.java, +package org.springframework.social.account;, +, +@SuppressWarnings("serial"), +public final class AccountAlreadyConnectedException extends Exception {, +, + private final String provider;, + , + private final String accountId;, +, + public AccountAlreadyConnectedException(String provider, String accountId) {, + super("account already connected");, + this.provider = provider;, + this.accountId = accountId;, + }, +, + public String getProvider() {, + return provider;, + }, + , + public
[+++ b/docs/src/reference/docbook/apis.xml, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="apis" xmlns:xlink="http://www.w3.org/1999/xlink">, + <para>, + After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. , + Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application., + </para>, + <para>, + Each service provider exposes their data and functionality through an API. , + Spring Social provides Java-based access to those
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionFactoryRegistry.java, +public class ConnectionFactoryRegistry implements ConnectionFactoryLocator {]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++
[+++ b/build.gradle, + compile project(':spring-social-web') { optional = true }, + compile project(':spring-social-web') { optional = true }, +++ b/build.gradle, + compile project(':spring-social-web') { optional = true }, + compile project(':spring-social-web') { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <bean class="org.springframework.social.facebook.web.FacebookSigninController">, + <constructor-arg ref="connectionRepository" />, + <constructor-arg>, + <bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, + </constructor-arg>, + <constructor-arg value="0b754d95f9c9899b0d6c4454b6f2dde7" />, + </bean>, + , +++ b/build.gradle, + compile project(':spring-social-web') { optional = true }, + compile project(':spring-social-web') { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <bean class="org.springframework.social.facebook.web.FacebookSigninController">, + <constructor-arg ref="connectionRepository" />, + <constructor-arg>, + <bean class="org.springframework.social.showcase.AccountIdAsPrincipalSigninGateway" />, + </constructor-arg>, + <constructor-arg value="0b754d95f9c9899b0d6c4454b6f2dde7"
[+++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT, +++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + addSignInAttempt(request.getSession(), token.getConnection());, + private void addSignInAttempt(HttpSession session, Connection<?> connection) {, + session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, + }, +, +++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + addSignInAttempt(request.getSession(), token.getConnection());, + private void addSignInAttempt(HttpSession session, Connection<?> connection) {, + session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, + }, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/SessionUserIdSource.java, +/*, + * Copyright 2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, + requestParameters.set("client_id", clientId);, + requestParameters.set("client_secret", clientSecret);, + requestParameters.set("code", authorizationCode);, + requestParameters.set("redirect_uri", redirectUri);, + requestParameters.set("grant_type", "authorization_code");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, + requestParameters.set("client_id", clientId);, + requestParameters.set("client_secret", clientSecret);, + requestParameters.set("code", authorizationCode);, + requestParameters.set("redirect_uri", redirectUri);, + requestParameters.set("grant_type", "authorization_code");, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookConnectController.java, + public FacebookConnectController(ServiceProvider<FacebookOperations> facebookProvider,, + AccountIdResolver accountIdResolver) {, + * Configure the list of interceptors that should receive callbacks during, + * the connection process., + Class<?> providerType = GenericTypeResolver.resolveTypeArgument(interceptor.getClass(),, + ConnectInterceptor.class);, + public String connectAccountToFacebook(@FacebookAccessToken(required = false) String
[+++ b/gradle.properties, +springVersion=5.0.0.BUILD-SNAPSHOT]
[+++ b/docs/src/info/changelog.txt, + (e.g. TwitterApi is now Twitter, FacebookApi is now Facebook, etc), +++ b/docs/src/info/changelog.txt, + (e.g. TwitterApi is now Twitter, FacebookApi is now Facebook, etc), +++ /dev/null, +++ b/docs/src/info/changelog.txt, + (e.g. TwitterApi is now Twitter, FacebookApi is now Facebook, etc), +++ /dev/null, +++ b/docs/src/reference/docbook/connecting.xml, + The following class constructs a <classname>ConnectionFactoryRegistry</classname> containing <interfacename>ConnectionFactory</interfacename>s for Twitter and Facebook using Spring's Java configuration style: , + Here, three connection factories--one each for Twitter and Facebook--are registered with <classname>ConnectionFactoryRegistry</classname> via the <methodname>addConnectionFactory()</methodname> method., +++ b/docs/src/info/changelog.txt, + (e.g. TwitterApi is now Twitter, FacebookApi is now Facebook, etc), +++ /dev/null, +++ b/docs/src/reference/docbook/connecting.xml, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , + * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, + * with the response_type=code parameter value, + * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, + * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 14, 2011), +Compatibility Notes, + * Extracted provider-specific modules to separate projects., + * Renamed {Provider}Api.java interfaces to {Provider}.java., + * Renamed several operations in ConnectionRepository (see JavaDocs/source for details)., + * Renamed AbstractOAuth1ApiTemplate and AbstractOAuth2ApiTemplate to AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding, respectively., + * Simplified ConnectController and ProviderSignInController constructors (see JavaDocs/source for details)., + * Moved ConnectController & ProviderSignInController's applicationUrl property from constructor to setter and made optional., + * Renamed ConnectController#postLoginUrl property to postSignInUrl for consistency., + * Renamed SignInService to SignInAdapter for clarity & added Connection, HttpServletRequest, and HttpServletResponse
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, + * The request token should be stored in the user's session up until the authorization callback is made, + * and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}.]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInInterceptor.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Apr 27, 2011), +==============================================, +New Features, + * Many improvements to service provider "connect" framework, + * New ProviderSignInController for signing into an application by first, + signing into a provider such as Twitter or Facebook., + * A more complete Twitter API binding, including..., + * Reading, sending, and deleting direct messages, + * Retrieving a user's friends and followers and (un)following other users, + * Maintaining and subscribing to lists, + * Reading daily/weekly/local/current trends, + * Maintaining saved searches, + * Search for users, + * Getting suggestions on
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + public String providerPage(@PathVariable String providerId, WebRequest request, Model model) {, + handleDuplicateConnectionException(request, model);, + request.setAttribute(DUPLICATE_CONNECTION_EXCEPTION_ATTRIBUTE, e, WebRequest.SCOPE_SESSION);, + private void handleDuplicateConnectionException(WebRequest request, Model model) {, + DuplicateConnectionException exception = (DuplicateConnectionException) request.getAttribute(DUPLICATE_CONNECTION_EXCEPTION_ATTRIBUTE, WebRequest.SCOPE_SESSION);, + request.removeAttribute(DUPLICATE_CONNECTION_EXCEPTION_ATTRIBUTE, WebRequest.SCOPE_SESSION);, + if(exception != null) {, + model.addAttribute(DUPLICATE_CONNECTION_EXCEPTION_ATTRIBUTE, Boolean.TRUE);, + }, + }, +, + private static final String DUPLICATE_CONNECTION_EXCEPTION_ATTRIBUTE = "_duplicateConnectionException";, +]
[+++ b/docs/src/reference/docbook/signin.xml, + <constructor-arg ref="#{environment['application.url']}" />, + It also needs the base application URL that it will use to construct a URL to <classname>ConnectController</classname> to create a connection after signup., + <para>[[[TODO: Document the deferred connection-after-signup stuff!!!]]]</para>, + ]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * "facebook" -&gt; Connection("Keith Donald") ,, + * "twitter" -&gt; Connection("kdonald"), Connection("springsource"), + * Returns an empty map if the user has no connections., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * "facebook" -&gt; Connection("Keith Donald") ,, + * "twitter" -&gt; Connection("kdonald"), Connection("springsource"), + * Returns an empty map if the user has no connections., +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * .apply(new SpringSocialConfigurer());, + * Constructs a SpringSocialConfigurer.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, + /**, + * AuthorizationCode denotes the server-side authorization flow, and is, + * associated with the response_type=code parameter value, + */, + AuthorizationCode,, +, + /**, + * ImplicitGrant denotes the client-side authorization flow and is, + * associated with the response_type=token parameter value, + */, + ImplicitGrant, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types
[+++ b/build.gradle, + gradleVersion = "1.12", +++ b/build.gradle, + gradleVersion = "1.12", +++ b/gradle.properties, +version = 1.1.1.BUILD-SNAPSHOT, +++ b/build.gradle, + gradleVersion = "1.12", +++ b/gradle.properties, +version = 1.1.1.BUILD-SNAPSHOT, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + gradleVersion = "1.12", +++ b/gradle.properties, +version = 1.1.1.BUILD-SNAPSHOT, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Mon Jun 30 12:43:52 CDT 2014, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.12-bin.zip]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, + * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, + * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, + for (String string : strings) {, + builder.append("," + string);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, + * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, + for (String string : strings) {, + builder.append("," + string);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, + * @param a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, + for (String string : strings) {, + builder.append("," + string);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendTemplate.java, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java,
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, + public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, + for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, + addConnectionFactory(connectionFactory);, + }, + }, + , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, + public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, + for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, + addConnectionFactory(connectionFactory);, + }, + }, + , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, + * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, + public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, + for (ServiceProviderConnectionFactory<?> connectionFactory :
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + return new RedirectView(providerId, true);]
[+++ b/build.gradle, +project('spring-social-core') {, + description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', + description = 'Facebook API', + compile project(':spring-social-core'), + description = 'Github API', + compile project(':spring-social-core'), + description = 'Gowalla API', + compile project(':spring-social-core'), + description = 'LinkedIn API', + compile project(':spring-social-core'), + description = 'TripIt API', + compile project(':spring-social-core'), + description = 'Twitter API', + compile project(':spring-social-core'), + compile project(':spring-social-core'), + compile project(':spring-social-core'), + testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/build.gradle, +project('spring-social-core') {, + description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', + description = 'Facebook
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;]
[+++ /dev/null, +++ /dev/null, +++ b/README.md, +# Spring Social, +, +[Spring Social] is an extension of the [Spring Framework] that helps you connect your applications with Software-as-a-Service (SaaS) providers such as Facebook and Twitter., +, +, +## Features, +, +- An extensible service provider framework that greatly simplifies the process of connecting local user accounts to hosted provider accounts., +, +- A connect controller that handles the authorization flow between your Java/Spring web application, a service provider, and your users., +, +- Java bindings to popular service provider APIs such as Facebook, Twitter, LinkedIn, TripIt, and GitHub., +, +-
[+++ b/build.gradle, +project('spring-social-config') {, + description = 'Configuration Namespace', + dependencies {, + compile "org.springframework:spring-beans:$springVersion", + compile project(':spring-social-core'), + testCompile project(':spring-social-facebook'), + testCompile project(':spring-social-twitter'), + testCompile "com.h2database:h2:1.2.143", + testCompile project(':spring-social-core').sourceSets.test.classes, + }, +}, +, +++ b/build.gradle, +project('spring-social-config') {, + description = 'Configuration Namespace', + dependencies {, + compile "org.springframework:spring-beans:$springVersion", + compile project(':spring-social-core'), + testCompile project(':spring-social-facebook'), + testCompile project(':spring-social-twitter'), + testCompile "com.h2database:h2:1.2.143", + testCompile project(':spring-social-core').sourceSets.test.classes, + }, +}, +, +++ b/docs/src/reference/docbook/serviceprovider.xml, + With the connection established, the application can now obtain a reference to the Service API and invoke the provider on behalf of the user., + With the connection
[+++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Operations.java, + * @param accessToken the access token and secret, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Operations.java, + * @param accessToken the access token and secret, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Operations.java, + * @param accessToken the access token and secret, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth2/AccessGrant.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by
[+++ b/src/dist/changelog.txt, +Spring Social 1.0.3 Release (June 6, 2013), +==========================================, +This release was pushed to support Spring Social Twitter 1.0.4 so that a, +TwitterTemplate can be created using application-only authorization (e.g.,, +OAuth 2's client credentials grant)., +, +Improvements:, + * Support OAuth 2's password grant and client credentials grant (SOCIAL-324)., +]
[+++ b/samples/spring-social-showcase/README, +Spring Social Showcase, +======================, +++ b/samples/spring-social-showcase/README, +Spring Social Showcase, +======================, +++ b/samples/spring-social-showcase/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, + <modelVersion>4.0.0</modelVersion>, + <groupId>org.springframework.social.samples</groupId>, + <artifactId>spring-social-showcase</artifactId>, + <name>Spring Social Showcase</name>, + <packaging>war</packaging>, + <version>1.0.0.BUILD-SNAPSHOT</version>, + <properties>, + <java-version>1.6</java-version>, + <org.springframework.social-version>1.0.0.BUILD-SNAPSHOT</org.springframework.social-version>, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, + <org.springframework.security-version>3.1.0.CI-SNAPSHOT</org.springframework.security-version>, + <org.slf4j-version>1.5.10</org.slf4j-version>, + </properties>, + <dependencies>, + <!-- Spring -->, + <dependency>, + <groupId>org.springframework</groupId>, + <artifactId>spring-context</artifactId>, + <version>${org.springframework-version}</version>, + <exclusions>, + <!-- Exclude Commons Logging in favor of SLF4j -->, + <exclusion>, + <groupId>commons-logging</groupId>, + <artifactId>commons-logging</artifactId>, + </exclusion>, + </exclusions>, + </dependency>, + <dependency>, + <groupId>org.springframework</groupId>, + <artifactId>spring-webmvc</artifactId>, + <version>${org.springframework-version}</version>, + </dependency>,
[+++ b/docs/src/reference/docbook/connecting.xml, + <title>Creating connections with <classname>ConnectController</classname></title>, + <constructor-arg value="http://localhost:8080/myapplication" />, +, + <para><classname>ConnectController</classname> is constructed with three arguments:</para>, + , + <itemizedlist>, + <listitem><para>A reference to an instance of a <interfacename>ServiceProviderFactory</interfacename> to assist <classname>ConnectController</classname> in obtaining service providers.</para></listitem>, + <listitem><para>A reference to an instance of an <interfacename>AccountIdResolver</interfacename> so that <classname>ConnectController</classname> will know which application account to create connections for.</para></listitem>, + <listitem><para>The base URL for the application. <classname>ConnectController</classname> will use this to construct callback URLs used in the OAuth dance.</para></listitem>, + </itemizedlist>, +, + <para><classname>ConnectController</classname> also supports a registration-then-connect flow, which is covered in <xref linkend="registration-flow"/>.</para>, +, + <para><classname>ConnectController</classname>
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java, +, + public void addAll(K key, List<? extends V> values) {, + throw new UnsupportedOperationException("This empty MultiValueMap is not modifiable");, + }, +, + @Override, + public void addAll(MultiValueMap<K, V> values) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java, +, + public void addAll(K key, List<? extends V> values) {, + throw new UnsupportedOperationException("This empty MultiValueMap is not modifiable");, + }, +, + @Override, + public void addAll(MultiValueMap<K, V> values) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/TreeMultiValueMap.java, + public void addAll(K key, List<? extends V> newValues) {, + values = new LinkedList<>();, + values.addAll(newValues);, + }, +, + @Override, + public void addAll(MultiValueMap<K, V> values) {,
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors.,
[+++ b/build.gradle, + classpath('org.asciidoctor:asciidoctor-gradle-plugin:0.7.0'), + classpath('org.asciidoctor:asciidoctor-java-integration:0.1.4.preview.1'), +// Set up different subproject lists for individual configuration, +ext.javaProjects = subprojects.findAll { project -> project.name != 'docs' && project.name != 'manual' }, +ext.coreModuleProjects = javaProjects, +, +// Task for creating the distro zip, +task dist(type: Zip) {, + dependsOn subprojects*.tasks*.matching { task -> task.name == 'assemble' || task.name.endsWith('Zip') || task.name.endsWith('generatePom') }, + classifier = 'dist', + evaluationDependsOn(':docs'), + evaluationDependsOn(':docs:manual'), + def zipRootDir = "${project.name}-$version", + into(zipRootDir) {, + from(rootDir) {, + include '*.txt', + into('docs') {, + with(project(':docs').apiSpec), + with(project(':docs:manual').spec), + into('dist') {, + from coreModuleProjects.collect {project -> project.libsDir }, + archives
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, authenticateUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);]
[+++ b/docs/src/info/changelog.txt, + * A handful of documentation fixes (SOCIAL-249 and SOCIAL-273), +, +Improvements]
[+++ b/build.gradle, + ext.springReleaseVersion = "latest.release", + ext.springSnapshotVersion = "latest.integration", + springReleaseTestRuntime.extendsFrom testRuntime, + // Test against latest Spring Framework release, + configurations.springReleaseTestRuntime {, + resolutionStrategy.eachDependency { DependencyResolveDetails details ->, + if (details.requested.group == 'org.springframework') {, + details.useVersion springReleaseVersion, + }, + }, + }, +, + // Test against latest Spring Framework snapshot, + task springReleaseTest(type: Test) {, + classpath = sourceSets.test.output + sourceSets.main.output + configurations.springReleaseTestRuntime, + getReports().getJunitXml().setDestination(file("$buildDir/spring-release-test-results/")), + getReports().getHtml().setDestination(file("$buildDir/reports/spring-release-tests/")), + }, + check.dependsOn springReleaseTest, +, + configure([test, springReleaseTest, springSnapshotTest]) {, +++ b/build.gradle, + ext.springReleaseVersion = "latest.release", + ext.springSnapshotVersion = "latest.integration", + springReleaseTestRuntime.extendsFrom testRuntime, + // Test against
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + try {, + return Integer.valueOf(String.valueOf(map.get(key))); // normalize to String before creating integer value; , + } catch (NumberFormatException e) {, + return null;, + }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + try {, + return Integer.valueOf(String.valueOf(map.get(key))); // normalize to String before creating integer value; , + } catch (NumberFormatException e) {, + return null;, + }, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, + public void exchangeForAccess_jsonResponse_expiresInAsNonNumericString() {, + MediaType responseContentType = MediaType.APPLICATION_JSON;, + String responseFile = "accessToken_expiresInAsNonNumericString.json";, + AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, + assertEquals("8d0a88a5c4f1ae4937ad864cafa8e857", accessGrant.getAccessToken());, + assertEquals("6b0411401bf8751e34f57feb29fb8e32", accessGrant.getRefreshToken());, + assertNull(accessGrant.getExpireTime());, + assertEquals("read", accessGrant.getScope());, + }, +, + @Test, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + try
[+++ b/.gitignore, +**/src/test/java/exploration, +++ b/.gitignore, +**/src/test/java/exploration, +++ b/build.gradle, + }, +}, +, +project('spring-social-facebook') {, + description = 'Spring Social Facebook', + dependencies {, + compile project(':spring-social-core'), + compile project(':spring-social-oauth'), +project('spring-social-linkedin') {, + description = 'Spring Social LinkedIn', + dependencies {, + compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", + compile project(':spring-social-core'), + compile project(':spring-social-oauth'), + }, +}, +, +project('spring-social-oauth') {, + description = 'Spring Social OAuth', + dependencies {, + compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", + compile ("org.scribe:scribe:$scribeVersion") { optional = true }, + compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, + compile project(':spring-social-core'), + }, +}, +, +project('spring-social-tripit') {, + description = 'Spring Social TripIt', +
[+++ b/build.gradle, + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ b/build.gradle, + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ /dev/null, +++ b/build.gradle, + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/build.gradle, + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + * For example, updating a Twitter user's status with a bad or missing access token., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + , + public String toString() {, + return providerId + ":" + providerUserId;, +
[+++ b/docs/src/reference/docbook/apis.xml]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + RestTemplate client = new RestTemplate();, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, + RestTemplate client = new RestTemplate();, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, + RestTemplate client = new RestTemplate();, +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, + RestTemplate client = new RestTemplate();, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + RestTemplate client = new RestTemplate();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +
[+++ b/build.gradle, + thymeleafVersion = '2.0.19', + compile ("org.thymeleaf:thymeleaf:2.0.19", optional), + compile ("org.thymeleaf:thymeleaf-spring3:2.0.19", optional), +++ b/build.gradle, + thymeleafVersion = '2.0.19', + compile ("org.thymeleaf:thymeleaf:2.0.19", optional), + compile ("org.thymeleaf:thymeleaf-spring3:2.0.19", optional), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, +
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, + // TODO : Facebook returns the token as URL-encoded with text/plain content type. Test for other providers.]
[+++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + Collection<AccountConnection> connections = facebookProvider.getConnections(1);, + Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + Collection<AccountConnection> connections = facebookProvider.getConnections(1);, + Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + Collection<AccountConnection> connections = facebookProvider.getConnections(1);, + Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + Collection<AccountConnection> connections = facebookProvider.getConnections(1);, + Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + Collection<AccountConnection> connections = facebookProvider.getConnections(1);, + Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + Collection<AccountConnection> connections = facebookProvider.getConnections(1);, + Collection<AccountConnection> connections = facebookProvider.getConnections(1);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/build.gradle, +project('spring-social-config') {, + description = 'Spring Social Configuration', + dependencies {, + compile "org.springframework:spring-beans:$springVersion", + compile project(':spring-social-connect'), + compile project(':spring-social-core'), + compile project(':spring-social-facebook') { optional = true }, + compile project(':spring-social-gowalla') { optional = true }, + compile project(':spring-social-linkedin') { optional = true }, + compile project(':spring-social-tripit') { optional = true }, + compile project(':spring-social-twitter') { optional = true }, + testCompile "com.h2database:h2:1.2.143", + }, +}, +, +++ b/build.gradle, +project('spring-social-config') {, + description = 'Spring Social Configuration', + dependencies {, + compile "org.springframework:spring-beans:$springVersion", + compile project(':spring-social-connect'), + compile project(':spring-social-core'), + compile project(':spring-social-facebook') { optional = true },
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, + return applicationUrl + connectPath(nativeRequest);, + private String connectPath(HttpServletRequest request) {, + String pathInfo = request.getPathInfo();, + return request.getServletPath() + (pathInfo != null ? pathInfo : "");, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, + return applicationUrl + connectPath(nativeRequest);, + private String connectPath(HttpServletRequest request) {, + String pathInfo = request.getPathInfo();, + return request.getServletPath() + (pathInfo != null ? pathInfo : "");, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectSupportTest.java, + public void buildOAuthUrl_OAuth10_withContextPath() {, + ConnectSupport support = new ConnectSupport();, + MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, + mockRequest.setScheme("http");, + mockRequest.setServerName("somesite.com");, + mockRequest.setRequestURI("/appname/connect/someprovider");, + ServletWebRequest request = new ServletWebRequest(mockRequest);, + String url = support.buildOAuthUrl(new TestOAuth1ConnectionFactory(OAuth1Version.CORE_10), request);, + assertEquals("https://serviceprovider.com/oauth/authorize?oauth_callback=http://somesite.com/appname/connect/someprovider", url);,
[+++ b/.gitignore, +.DS_Store, +++ b/.gitignore, +.DS_Store, +++ b/docs/src/reference/docbook/overview.xml, + <entry>Spring Social's ServiceProvider connect framework and OAuth support.</entry>, + <entry>Spring Social's <classname>ConnectController</classname> which uses the ServiceProvider framework to manage connections in a web application environment</entry>, + <entry>spring-social-twitter</entry>, + <entry>Includes Spring Social's Twitter API as well as support for signing into an application via Twitter.</entry>, + </row>, + <row>, + <entry>spring-social-linkedin</entry>, + <entry>Includes Spring Social's LinkedIn API.</entry>, + </row>, + <row>, + <para>To let Spring Social handle the back-and-forth authorization handshake between a web application and a service provider, you'll need the web module:</para>]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + return connectionStatusRedirect(providerId, request);, + return connectionStatusRedirect(providerId, request);, + public RedirectView removeConnections(@PathVariable String providerId, NativeWebRequest request) {, + return connectionStatusRedirect(providerId, request);, + public RedirectView removeConnection(@PathVariable String providerId, @PathVariable String providerUserId, NativeWebRequest request) {, + return connectionStatusRedirect(providerId, request);, + protected RedirectView connectionStatusRedirect(String providerId, NativeWebRequest request) {, + String servletPath = request.getNativeRequest(HttpServletRequest.class).getServletPath();, + String providerConnectPath = "/connect/" + providerId;, + // If DispatcherServlet is mapped to "/", the servlet path will start with "/connect/{providerId}"; , + // otherwise it will be whatever DispatcherServlet is mapped to., + if (!servletPath.startsWith(providerConnectPath)) {, + providerConnectPath = servletPath + providerConnectPath;, + }, +
[+++ b/docs/src/reference/docbook/implementing.xml, + <title>Process overview</title>]
[+++ b/docs/src/reference/docbook/connecting.xml, + public ConnectController connectController() throws MalformedURLException {, + controller.setApplicationUrl(new URL(environment.getProperty("application.url"));, + <listitem><para><code>GET /connect</code> - Displays a web page showing connection status for all providers.</para></listitem>, + <listitem><para><code>GET /connect</code> - Displays a web page showing connection status for all providers.</para></listitem>, + <para>, + Optionally, you may choose to display a page that shows connection status for all providers., + In that case, the link might look like this:, + </para>, + <programlisting language="xml"><![CDATA[, +<a href="<c:url value="/connect" />">Your connections</a>]]>, + </programlisting>, + <para>, + The view name that <classname>ConnectController</classname> responds with for this URL is "connect/status"., + </para>, +++ b/docs/src/reference/docbook/connecting.xml,
[+++ b/samples/twitter-connect/src/main/webapp/WEB-INF/spring/security-oauth-consumer.xml, + <bean id="twitterProvider" factory-bean="serviceProviderFactory" factory-method="getServiceProvider">]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, + public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, + public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @param grantType specifies whether to use client-side or server-side OAuth flow, + * @param parameters authorization parameters needed to build the URL, + String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters);, + * @param grantType specifies whether to use client-side or server-side OAuth flow, + * @param parameters authorization parameters needed to build the URL , + String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, + public AuthorizationParameters(String redirectUri, String scope,
[+++ b/docs/src/reference/docbook/connecting.xml, + Here's an XML equivalent of the <classname>JdbcUsersConnectionRepository</classname> and <classname>ConnectionRepository</classname> configurations shown before:, +</bean>, +, +<bean id="connectionRepository" factory-method="createConnectionRepository" factory-bean="usersConnectionRepository" scope="request">, + <constructor-arg value="#{request.userPrincipal.name}" />]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + private String connectionAddingFailureRedirectUrl = "/";, +, + /**, + * an authenticated user can add additional connections. after successfully authorizing, the user, + * will be redirected to this URL, + */, + /**, + * redirect the user after an attempt to add an additional authentication failed. After the failure, + * the user is still authenticated, so redirecting to something like {@value #DEFAULT_FAILURE_URL} might, + * not make sense, + */, + public void setConnectionAddingFailureRedirectUrl(String connectionAddingFailureRedirectUrl) {, + this.connectionAddingFailureRedirectUrl = connectionAddingFailureRedirectUrl;, + }, +, + /**, + * @return the authenticated user token, or
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2RequestInterceptor.java, + protectedResourceRequest.getHeaders().set("Authorization", oauth2Version.getAuthorizationHeaderValue(accessToken));]
[+++ b/build.gradle, + httpComponentsVersion = '4.1.1', + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/build.gradle, + httpComponentsVersion = '4.1.1', + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/build.gradle, + httpComponentsVersion = '4.1.1', + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, + RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/build.gradle, + httpComponentsVersion = '4.1.1', + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, + RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, + RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/build.gradle, + httpComponentsVersion = '4.1.1', +
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, + * A data access interface for managing a global store of users connections to service providers., + * Provides data access operations that apply across multiple user records., + * Also acts as a factory for a user-specific {@link ConnectionRepository}., + * Find the id of the <i>single</i> user that has the given {@link Connection}., + * May never return null if this method implicitly creates a user account from the connection if no such user account already exists., + * Find the ids of the users who are connected to the specific provider user accounts.,
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Checkin.java, + private Page place;, + private Checkin(String id, Page place, Reference from, Reference application, Date createdTime) {, + public Page getPlace() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Checkin.java, + private Page place;, + private Checkin(String id, Page place, Reference from, Reference application, Date createdTime) {, + public Page getPlace() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/CheckinPost.java, + private Page place;, + public Page getPlace() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Checkin.java, + private Page place;, + private Checkin(String id, Page place, Reference from, Reference application, Date createdTime) {, + public Page getPlace() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/CheckinPost.java, + private Page place;, + public Page getPlace() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Facebook.java, + * API
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, + Assert.notEmpty(providerUserIds, "Provider user IDs cannot be empty.");, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, + Assert.notEmpty(providerUserIds, "Provider user IDs cannot be empty.");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java, + @Override, + public void addAll(K key, List<V> values) {, + throw new UnsupportedOperationException("This empty MultiValueMap is not modifiable");, + }, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, + Assert.notEmpty(providerUserIds, "Provider user IDs cannot be empty.");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java, + @Override, + public void addAll(K key, List<V> values) {, + throw new UnsupportedOperationException("This empty MultiValueMap is not modifiable");, + }, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/TreeMultiValueMap.java, + @Override, + public void addAll(K key, List<V> newValues) {, + List<V> values = this.targetMap.get(key);, + if (values ==
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInControllerService;, + private final SignInControllerService signinService;, + * , + * @param connectionRepository, + * a connection repository used to lookup the account ID connected to the Facebook profile., + * @param signinService, + * the signin strategy used to authenticate the user with the application., + * @param apiKey, + * the Facebook API key used to retrieve the Facebook cookie containing the access token., + public FacebookSigninController(ConnectionRepository connectionRepository, SignInControllerService signinService,, + this.signinService = signinService;, + signinService.signIn(accountId);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInControllerService;, + private final SignInControllerService signinService;, + * , + * @param connectionRepository, + *
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + protected RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + protected RestTemplate getRestTemplate() {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookOAuth2Template.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + *
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 23, 2011)]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +package org.springframework.social.oauth1;, +, +import org.springframework.web.client.RestTemplate;, +, +public class ProtectedResourceClientFactory {, +, + public static RestTemplate create(String apiKey, String apiSecret, String accessToken, String accessTokenSecret) {, + // TODO Auto-generated method stub, + return null;, + }, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +package org.springframework.social.oauth1;, +, +import org.springframework.web.client.RestTemplate;, +, +public class ProtectedResourceClientFactory {, +, + public static RestTemplate create(String apiKey, String apiSecret, String accessToken, String accessTokenSecret) {, + // TODO Auto-generated method stub, + return null;, + }, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +package org.springframework.social.oauth2;, +, +import org.springframework.web.client.RestTemplate;, +, +public class ProtectedResourceClientFactory {, +, + public static RestTemplate standard(String accessToken) {, +
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler;, + , + public final void doFilter(final ServletRequest req, final ServletResponse res, final FilterChain chain), + doFilter((HttpServletRequest) req, (HttpServletResponse) res, chain);, + }, + public void doFilter(final HttpServletRequest request, final HttpServletResponse response, final FilterChain chain), + throws IOException, ServletException {, + if (!response.isCommitted()) {, + chain.doFilter(request, response);, + if (getRequestedProviderId(request) != null) {, + // only redirect explicit auth, + }, + public void setPostLoginUrl(String postLoginUrl) {, + AuthenticationSuccessHandler successHandler = getSuccessHandler();, + if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, + AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, + h.setDefaultTargetUrl(postLoginUrl);, + } else {, + throw new IllegalStateException("can't set
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.http.client.ClientHttpRequestInterceptor;, + List<ClientHttpRequestInterceptor> interceptors = restTemplate.getInterceptors();, + if (interceptors == null) { // defensively initialize list if it is null. (See SOCIAL-430), + interceptors = new ArrayList<ClientHttpRequestInterceptor>();, + restTemplate.setInterceptors(interceptors);, + }, + interceptors.add(new PreemptiveBasicAuthClientHttpRequestInterceptor(clientId, clientSecret));]
[+++ b/pom.xml, + <org.springframework-version>3.0.4.RELEASE</org.springframework-version>]
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/SigningUtilsTest.java, +package org.springframework.social.oauth1;, +, +import static org.junit.Assert.*;, +, +import java.net.URI;, +import java.util.Map;, +, +import org.junit.Test;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.SimpleClientHttpRequestFactory;, +import org.springframework.util.LinkedMultiValueMap;, +, +public class SigningUtilsTest {, +, + @Test, + public void buildAuthorizationHeader() throws Exception {, + Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters("9djdj82h48djs9d2");, + oauthParameters.put("oauth_token", "kkk9d7dh3k39sjv7");, + LinkedMultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, + additionalParameters.add("b5", "=%3D");, + additionalParameters.add("a3", "a");, + additionalParameters.add("c@", "");, + additionalParameters.add("a2", "r b");, + additionalParameters.add("c2", "");, + additionalParameters.add("a3", "2 q");, + String authorizationHeader = SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, new URI("http://example.com/request"), oauthParameters, additionalParameters, "consumer_secret", "token_secret");, + assertAuthorizationHeader(authorizationHeader);, + }, +, + @Test, + public void
[+++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, + public InsufficientPermissionException() {, + super("Insufficent permission for this operation.");, + this.requiredPermission = null;, + }, +, + /**, + * The permission required to access the resource., + * May be null if the required permission is unknown., + */]
[+++ b/docs/src/reference/docbook/connecting.xml, + In <xref linkend="serviceprovider"/>, you learned how Spring Social's <emphasis>Service Provider 'Connect' Framework</emphasis> can be used to manage user connections that link your application's user accounts with accounts on external service providers., + <title>Configuring ConnectController</title> , + The following class constructs a <classname>ConnectionFactoryRegistry</classname> containing <interfacename>ConnectionFactory</interfacename>s for Twitter, Facebook, and TripIt using Spring's Java configuration style: , +public class ConnectionFactoryConfig {, + @Value("${twitter.consumerKey}"), + private String twitterConsumerKey;, + , + @Value("${twitter.consumerSecret}"), + private String twitterConsumerSecret;, +, + @Value("${facebook.clientId}"), + private String facebookClientId;, + , + @Value("${facebook.clientSecret}"), + private String facebookClientSecret;, +, + @Value("${tripit.consumerKey}"), + private String tripItConsumerKey;, +
[+++ b/src/main/java/org/springframework/social/oauth/OAuth1ClientRequestAuthorizer.java, +public class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +, + private final OAuth1Template oauthTemplate;, +, + public OAuth1ClientRequestAuthorizer(OAuth1Template oauthTemplate) {, + this.oauthTemplate = oauthTemplate;, + }, + oauthTemplate.buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, +++ b/src/main/java/org/springframework/social/oauth/OAuth1ClientRequestAuthorizer.java, +public class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +, + private final OAuth1Template oauthTemplate;, +, + public OAuth1ClientRequestAuthorizer(OAuth1Template oauthTemplate) {, + this.oauthTemplate = oauthTemplate;, + }, + oauthTemplate.buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, +++ b/src/main/java/org/springframework/social/oauth/OAuth1EnabledRestTemplateFactory.java, +package org.springframework.social.oauth;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, +, +public abstract class OAuth1EnabledRestTemplateFactory implements FactoryBean<OAuthEnabledRestTemplate>,, + ApplicationContextAware {, +, + protected ApplicationContext applicationContext;, +, + public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {, + this.applicationContext
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + logger.error("Exception while building authorization URL: ", e);, + logger.error("Exception while completing OAuth 1.0(a) connection: ", e);, + logger.error("Exception while completing OAuth 2 connection: ", e);]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, + private String scope;, + String scope = getScope(); // TODO set scope, + public String getScope() {, + return scope;, + }, +, + /**, + * @param scope OAuth scope to use, i.e. requested permissions, + */, + public void setScope(String scope) {, + this.scope = scope;, + }, +, + ]
[+++ b/gradle.properties, +jacksonVersion = 2.4.5, +mockitoVersion = 1.10.8, +springVersion = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion = 3.2.7.RELEASE, +++ b/gradle.properties, +jacksonVersion = 2.4.5, +mockitoVersion = 1.10.8, +springVersion = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, + * @return true if this API binding has been authorized on behalf of a specific user., +++ b/gradle.properties, +jacksonVersion = 2.4.5, +mockitoVersion = 1.10.8, +springVersion = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, + * @return true if this API binding has been authorized on behalf of a specific user., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + * @return The ID of the provider for which the API exception occurred., +++ b/gradle.properties, +jacksonVersion
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, + addCustomParameters(params);, + protected void addCustomParameters(OAuth2Parameters params) {, + }]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth1AuthenticationService.java, + OAuth1Parameters params;, + if (ops.getVersion() == OAuth1Version.CORE_10) {, + params = new OAuth1Parameters();, + params.setCallbackUrl(returnToUrl);, + } else {, + params = OAuth1Parameters.NONE;, + }, + , + String oAuthUrl = ops.buildAuthenticateUrl(requestToken.getValue(), params);, + , +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth1AuthenticationService.java, + OAuth1Parameters params;, + if (ops.getVersion() == OAuth1Version.CORE_10) {, + params = new OAuth1Parameters();, + params.setCallbackUrl(returnToUrl);, + } else {, + params = OAuth1Parameters.NONE;, + }, + , + String oAuthUrl = ops.buildAuthenticateUrl(requestToken.getValue(), params);, + , +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, + OAuth2Parameters params = new OAuth2Parameters();, + params.setRedirectUri(returnToUrl);, + params.setScope(scope);, + GrantType.AUTHORIZATION_CODE, params);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth1AuthenticationService.java, + OAuth1Parameters params;, + if (ops.getVersion()
[+++ b/docs/src/reference/docbook/apis.xml, + From a user's perspective, Twitter's function is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., + In contrast, Twitter's API is rather rich, enabling applications to interact with Twitter in ways that may not be obvious from the humble tweet box., + Spring Social offers interaction with Twitter's service API through the <interfacename>TwitterApi</interfacename> interface and its implementation, <classname>TwitterTemplate</classname>. , +TwitterApi twitterApi = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitterApi = new TwitterTemplate();]]>, + Attempting other operations, such as tweeting will fail with an <classname>IllegalStateException</classname> being thrown., + If you are
[+++ b/docs/src/reference/docbook/implementing.xml, + By now, you should have an API binding to the provider's API, a ServiceProvider&lt;A&gt; implementation for conducting the "authorization dance", and an ApiAdapter&lt;A&gt; implementation for mapping onto the uniform Connection model.]
[+++ b/docs/src/reference/docbook/connecting.xml, + <para>To simplify an application's role in the OAuth dance, Spring Social provides <classname>ConnectController</classname>. <classname>ConnectController</classname> is a Spring MVC controller that handles the application's part in the OAuth dance.</para>, +, + <para>To use <classname>ConnectController</classname>, configure it along with other controllers in your application's Spring MVC configuration:</para>, + <listitem><para><code>GET /connect/{provider}</code> - Displays a web page showing connection status to the provider.</para></listitem>, + <listitem><para><code>POST /connect/{provider}</code> - Initiates the connection flow with the provider.</para></listitem>, + <listitem><para><code>GET /connect/{provider}?oauth_token={request token}</code> - Receives the authorization callback from the provider, accepting a request token. Uses the request token to request an access token and
[+++ b/gradle.properties, +version=1.1.0.BUILD-SNAPSHOT]
[+++ b/src/main/java/org/springframework/social/facebook/FacebookOperations.java, +/**, + * Interface specifying a basic set of operations for interacting with Facebook., + * Implemented by FacebookTemplate. Not often used directly, but a useful option, + * to enhance testability, as it can easily be mocked or stubbed., + * , + * Many of the methods contained in this interface require an access token from, + * Facebook. When a method's description speaks of the "current user", it is, + * referring to the user for whom the access token has been issued., + * , + * @author Craig Walls, + */, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A display name or label for this connection., + * Should be suitable for display on a UI and distinguish this connection from others with the same provider., + * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., + * May be null if this information is not public or not provided., + * The value of this property may change
[+++ b/build.gradle, +, +project('spring-social-config') {, + description = 'Spring Social Config', + dependencies {, + compile project(':spring-social-core'), + compile project(':spring-social-web'), + compile ("org.springframework.social:spring-social-twitter:$version") { transitive = false }, + compile ("org.springframework.social:spring-social-facebook:$version") { transitive = false }, + testCompile "com.h2database:h2:$h2Version", + }, +}, +, +++ b/build.gradle, +, +project('spring-social-config') {, + description = 'Spring Social Config', + dependencies {, + compile project(':spring-social-core'), + compile project(':spring-social-web'), + compile ("org.springframework.social:spring-social-twitter:$version") { transitive = false }, + compile ("org.springframework.social:spring-social-facebook:$version") { transitive = false }, + testCompile "com.h2database:h2:$h2Version", + }, +}, +, +++ b/settings.gradle, +include 'spring-social-config', +++ b/build.gradle, +, +project('spring-social-config') {, + description = 'Spring
[+++ b/build.gradle, + springSecurityVersion = '3.2.0.RC1', + compile ("org.springframework.security:spring-security-config:$springSecurityVersion", optional), +++ b/build.gradle, + springSecurityVersion = '3.2.0.RC1', + compile ("org.springframework.security:spring-security-config:$springSecurityVersion", optional), +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +++ b/build.gradle, + springSecurityVersion = '3.2.0.RC1', + compile ("org.springframework.security:spring-security-config:$springSecurityVersion", optional), +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialAuthenticationConfigurer.java, +package org.springframework.social.security;, +, +import org.springframework.context.annotation.Bean;, +import org.springframework.security.authentication.AuthenticationManager;, +import org.springframework.security.authentication.AuthenticationProvider;, +import org.springframework.security.config.annotation.SecurityConfigurerAdapter;, +import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;, +import org.springframework.social.connect.UsersConnectionRepository;, +, +/**, + * Configurer that adds a {@link SocialAuthenticationProvider} to Spring Security's authentication manager., + * @author Craig Walls, + */, +public class SpringSocialAuthenticationConfigurer extends SecurityConfigurerAdapter<AuthenticationManager, AuthenticationManagerBuilder> {, +, + private UsersConnectionRepository usersConnectionRepository;, +, + private SocialUserDetailsService socialUsersDetailsService;, + , + public SpringSocialAuthenticationConfigurer(UsersConnectionRepository usersConnectionRepository, SocialUserDetailsService socialUsersDetailsService) {,
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.social.connect.DuplicateConnectionException;, + public String providerPage(@PathVariable String providerId, Model model) {, + addConnection(request, connectionFactory, connection);, + addConnection(request, connectionFactory, connection);, + private void addConnection(WebRequest request, ConnectionFactory<?> connectionFactory, Connection<?> connection) {, + try {, + getConnectionRepository().addConnection(connection); , + postConnect(connectionFactory, connection, request);, + } catch (DuplicateConnectionException e) {, + // TODO: Need to somehow tell provider page that the connection already exists., + // A FlashMap mechanism would be handy here, but would require that the developer setup the FlashMapFilter, + // Could put in session and remove in providerPage()., + // Could pass along in request parameter to provider
[+++ b/.gitignore, +samples/**/.springBeans, +++ b/.gitignore, +samples/**/.springBeans, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractOAuth1ServiceProvider.java, +import java.io.Serializable;, +, +import org.scribe.extractors.BaseStringExtractorImpl;, +import org.scribe.extractors.HeaderExtractorImpl;, +import org.scribe.extractors.TokenExtractorImpl;, +import org.scribe.model.OAuthConfig;, +import org.scribe.model.Verb;, +import org.scribe.model.Verifier;, +import org.scribe.oauth.OAuth10aServiceImpl;, +import org.scribe.oauth.OAuthService;, +import org.scribe.services.HMACSha1SignatureService;, +import org.scribe.services.TimestampServiceImpl;, + public void connect(Serializable accountId, AuthorizedRequestToken requestToken) {, + OAuthToken accessToken = getAccessToken(requestToken);, + S serviceOperations = createServiceOperations(accessToken);, + String providerAccountId = fetchProviderAccountId(serviceOperations);, + connectionRepository.addConnection(accountId, getName(), accessToken, providerAccountId,, + buildProviderProfileUrl(providerAccountId, serviceOperations));, + }, +, + public void connect(Serializable accountId, String redirectUri, String code) {, + throw new IllegalStateException(, + "Connections with redirectUri and code are not supported for an OAuth 1-based service provider");, + }, +, +, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + if (listBasedInterceptors) {, + setInterceptorsMethod.invoke(client, interceptors); , + } else {, + setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { interceptor }});, + private static Method setInterceptorsMethod;, + , + private static boolean listBasedInterceptors = false;, + , + static {, + try {, + // Would like to call getInterceptors().add(interceptor), but the current Spring snapshot, + // doesn't initialize the interceptors list., + setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", List.class);, + listBasedInterceptors = true;, + } catch (NoSuchMethodException e) {, + try {, + setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", new ClientHttpRequestInterceptor[0].getClass());, + } catch (NoSuchMethodException shouldntHappen) {}, + }, + }, +
[+++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, + <social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, + <social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/FacebookProviderElementParser.java, + REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, + <social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/FacebookProviderElementParser.java, + REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/GowallaProviderElementParser.java, + REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, + <social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/FacebookProviderElementParser.java, + REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++
[+++ b/docs/src/info/notice.txt, + The names "Spring", "Spring Framework", and "Spring Social" must
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + setInterceptor(client, new OAuth1RequestInterceptor(credentials));, + private static void setInterceptor(RestTemplate client, ClientHttpRequestInterceptor interceptor) {, + // Would like to call getInterceptors().add(interceptor), but the current Spring snapshot, + // doesn't initialize the interceptors list., + List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, + interceptors.add(interceptor);, + setInterceptors(client, new ClientHttpRequestInterceptor[] { interceptor });, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + setInterceptor(client, new OAuth1RequestInterceptor(credentials));, + private static void setInterceptor(RestTemplate client, ClientHttpRequestInterceptor interceptor) {, + // Would like to call getInterceptors().add(interceptor), but the current Spring snapshot, + // doesn't initialize the interceptors list., + List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, + interceptors.add(interceptor);, + setInterceptors(client, new ClientHttpRequestInterceptor[] { interceptor });, +++
[+++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +import org.junit.Ignore;, +@Ignore, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +import org.junit.Ignore;, +@Ignore, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SignInAttempts.java, +package org.springframework.social.security;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.servlet.http.HttpSession;, +, +import org.springframework.social.connect.ConnectionData;, +import org.springframework.social.connect.ConnectionKey;, +, +/**, + * , + * @author Craig Walls, + * @author Stefan Fussennegger, + */, +class SignInAttempts {, + , + private static final String ATTR_SIGN_IN_ATTEMPT = SignInAttempts.class.getName();, + , + private Map<ConnectionKey, ConnectionData> attempts = new HashMap<ConnectionKey, ConnectionData>();, + , + /**, + * @return always <code>true</code>, + */, + public static boolean add(HttpSession session, ConnectionData data) {, + SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, +
[+++ b/docs/src/info/changelog.txt, + * Added new configureRestTemplate() subclassing hook to AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding, + so that subclasses can configure the RestTemplate without writing that configuration code in the constructor., + * Added getFormMessageConverter(), getJsonMessageConverter(), and getByteArrayMessageConverter() hooks to , + AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding for convenient per-converter customization.]
[+++ b/docs/src/info/readme.txt, +Visit the Spring Social home at http://www.springsource.org/spring-social, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/pom.xml, + <org.springframework-version>3.0.5.BUILD-SNAPSHOT</org.springframework-version>, + <!-- Scribe -->, + <dependency>, + <groupId>org.scribe</groupId>, + <artifactId>scribe</artifactId>, + <version>1.0.2</version>, + </dependency> , + , + <repository>, + <id>self.provided</id>, + <name>Self-Provided Dependencies</name>, + <url>file://${project.basedir}/lib</url>, + </repository>, +++ b/pom.xml, + <org.springframework-version>3.0.5.BUILD-SNAPSHOT</org.springframework-version>, + <!-- Scribe -->, + <dependency>, + <groupId>org.scribe</groupId>, + <artifactId>scribe</artifactId>, + <version>1.0.2</version>, + </dependency> , + , + <repository>, + <id>self.provided</id>, + <name>Self-Provided Dependencies</name>, + <url>file://${project.basedir}/lib</url>, + </repository>, +++ b/src/main/java/org/springframework/social/core/AccountNotConnectedException.java, +package org.springframework.social.core;, +, +/**, + * Indicates a security-related error while performing an operation on a social, + * network provider (updating a Twitter user's status without an OAuth access, + * token,
[+++ b/build.gradle, + testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, + testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth1/StubOAuth1Operations.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,,
[+++ b/build.gradle, + springVersion = '3.1.0.M1', + springSecurityVersion = '3.1.0.RC1', +++ b/build.gradle, + springVersion = '3.1.0.M1', + springSecurityVersion = '3.1.0.RC1', +++ b/docs/src/reference/docbook/signin.xml, + <constructor-arg value="]]><emphasis>Facebook Application Secret</emphasis><![CDATA[" />, + <para>However, since Facebook's sign in process is not based on an OAuth 1 flow, <classname>FacebookSigninController</classname> does not need the base URL to create a callback URL from. Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook API Key and application secret that were issued to the application when it was first registered in Facebook. (The API key is the same value given as the <code>client-key</code> when registering a Facebook service provider
[+++ /dev/null, +++ /dev/null, +++ b/build.gradle, + commonsHttpClientVersion = '3.1', + jacksonVersion = '1.5.3', + jodaVersion = '1.6', + junitVersion = '4.7', + compile ("commons-codec:commons-codec:1.4") { optional = true }, + testCompile "com.h2database:h2:1.2.143", + compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", + compile ("javax.servlet.jsp:jsp-api:2.1") { provided = true }, + compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +++ /dev/null, +++ b/build.gradle, + commonsHttpClientVersion = '3.1', + jacksonVersion = '1.5.3', + jodaVersion = '1.6', + junitVersion = '4.7', + compile ("commons-codec:commons-codec:1.4") { optional = true }, + testCompile "com.h2database:h2:1.2.143", + compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", + compile ("javax.servlet.jsp:jsp-api:2.1") { provided = true }, + compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.io.IOException;, +, + try {, + return attemptAuthService(authService, request, response);, + } catch (SocialAuthenticationRedirectException redirect) {, + try {, + response.sendRedirect(redirect.getRedirectUrl());, + } catch (IOException e) {, + throw new SocialAuthenticationException("failed to send redirect from SocialAuthenticationRedirectException", e);, + return null;, + } else {, + return null;, + }, + // providerUserId already connected to userId, + // providerUserId already connected to different userId and no multi user allowed, + Connection<?> connection = token.getConnection();, + if (userId == null || connection == null) {, + logger.warn("can't add connection without userId or connection");, + return;, + },
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +import org.springframework.social.connect.DuplicateConnectionException;, +import org.springframework.social.connect.NoSuchConnectionException;, + private final String tablePrefix;, +, + public JdbcConnectionRepository(String userId, JdbcTemplate jdbcTemplate, ConnectionFactoryLocator connectionFactoryLocator, TextEncryptor textEncryptor, String tablePrefix) {, + this.tablePrefix = tablePrefix;, + List<Connection<?>> resultList = jdbcTemplate.query(selectFromUserConnection() + " where userId = ? order by providerId, rank", connectionMapper, userId);, + return jdbcTemplate.query(selectFromUserConnection() + " where userId = ? and providerId = ? order by rank", connectionMapper, userId, providerId);, + List<Connection<?>> resultList = new NamedParameterJdbcTemplate(jdbcTemplate).query(selectFromUserConnection() + " where userId = :userId and " + providerUsersCriteriaSql + " order by providerId, rank", parameters, connectionMapper);, + return jdbcTemplate.queryForObject(selectFromUserConnection() + " where userId = ? and
[+++ b/samples/twitter-connect/src/main/java/org/springframework/social/samples/twitter/TweetController.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * If you need that capability, see {@link UsersConnectionRepository}., + * @see UsersConnectionRepository, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * If you need that capability, see {@link UsersConnectionRepository}., + * @see UsersConnectionRepository, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * If you need that capability, see {@link UsersConnectionRepository}., + * @see UsersConnectionRepository, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.social.connect.ConnectionRepository;, + if (!authService.getConnectionCardinality().isAuthenticatePossible()) {, + return null;, + }, + return addConnection(authService, request, userId, (ConnectionData) principal);, + }, + }, + }, + return null;, + }, +, + protected Authentication addConnection(final SocialAuthenticationService<?> authService,, + final HttpServletRequest request, String userId, final ConnectionData data) {, +, + HashSet<String> userIdSet = new HashSet<String>();, + userIdSet.add(data.getProviderUserId());, + Set<String> connectedUserIds = usersConnectionRepository, + .findUserIdsConnectedTo(data.getProviderId(), userIdSet);, + if (connectedUserIds.contains(userId)) {, + // already connected, + return null;, + } else if (!authService.getConnectionCardinality().isMultiUserId() && !connectedUserIds.isEmpty()) {, + return null;, + }, +, + ConnectionRepository repo = usersConnectionRepository.createConnectionRepository(userId);,
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, + * Copyright 2013 the original author or authors., +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + * Copyright 2013 the original author or authors.,
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInAttempt.java, + * For the former scenario, callers should invoke {@link #addConnection(String,ConnectionFactoryLocator,UsersConnectionRepository)} post-signup to establish a connection between a new user account and the provider account., + public ProviderSignInAttempt(Connection<?> connection) {, + public Connection<?> getConnection(ConnectionFactoryLocator connectionFactoryLocator) {, + void addConnection(String userId, ConnectionFactoryLocator connectionFactoryLocator, UsersConnectionRepository connectionRepository) {, + connectionRepository.createConnectionRepository(userId).addConnection(getConnection(connectionFactoryLocator));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInAttempt.java, + * For the former scenario, callers should invoke {@link #addConnection(String,ConnectionFactoryLocator,UsersConnectionRepository)} post-signup to establish a connection between a new user account and the provider account., + public ProviderSignInAttempt(Connection<?> connection) {,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, + private final OAuth1Operations oauth1Operations;, + , + public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, + this.oauth1Operations = oauth1Operations;, + }, +, + public OAuth1Operations getOAuth1Operations() {, + return oauth1Operations;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +import org.springframework.social.oauth1.OAuth1Operations;, +public abstract class AbstractOAuth1ServiceProvider<S> extends AbstractServiceProvider<S> implements OAuth1ServiceProvider<S> {, + private final OAuth1Operations oauth1Operations;, + , + public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, + this.oauth1Operations = oauth1Operations;,
[+++ b/build.gradle, + springVersion = '3.1.0.M2', +++ b/build.gradle, + springVersion = '3.1.0.M2', +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release (September 8, 2011), +===============================================, + * OAuth-encode consumer/token secrets when creating an OAuth 1 signature key (SOCIAL-248)., + * Handle signature differences between Spring 3.1M2 and Spring 3.1RC1 RestTemplate.setInterceptors() , + (SOCIAL-247)., +++ b/build.gradle, + springVersion = '3.1.0.M2', +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release (September 8, 2011), +===============================================, + * OAuth-encode consumer/token secrets when creating an OAuth 1 signature key (SOCIAL-248)., + * Handle signature differences between Spring 3.1M2 and Spring 3.1RC1 RestTemplate.setInterceptors() , + (SOCIAL-247)., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import java.lang.reflect.Method;, +import
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * .apply(new SpringSocialHttpConfigurer());]
[+++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +OAuth2Parameters params = new OAuth2Parameters();, +params.setCallbackUrl("https://my-callback-url");, +String authorizeUrl = oauthOperations.buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, params);, +, +// upon receiving the callback from the provider:, +AccessGrant accessGrant = oauthOperations.exchangeForAccess(authorizationCode, "https://my-callback-url");, +OAuth2Parameters params = new OAuth2Parameters();, +params.setCallbackUrl("https://my-callback-url");, +String authorizeUrl = oauthOperations.buildAuthorizeUrl(GrantType.IMPLICIT_GRANT, params);, +, +// upon receiving the callback from the provider:, +String requestToken = oauthOperations.fetchRequestToken("https://my-callback-url");, +, +// upon receiving the callback from the provider:, +, +]
[+++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), + dependencyManagement {, + springIoTestRuntime {, + imports {, + mavenBom "io.spring.platform:platform-bom:${platformVersion}", + }, + }, +++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'), + dependencyManagement {, + springIoTestRuntime {, + imports {, + mavenBom "io.spring.platform:platform-bom:${platformVersion}", + }, + }, +++ b/docs/manual/src/asciidoc/index.adoc, + accessToken varchar(512) not null,, + secret varchar(512),, + refreshToken varchar(512),, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils#getConnection()`., +@Autowired, +ProviderSignInUtils providerSignInUtils;, +, + Connection<?> connection = providerSignInUtils.getConnection(request);, +If `ProviderSignInUtils#getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be
[+++ b/.gitignore, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, + <section id="facebook-template">, + <title><classname>FacebookTemplate</classname></title>, + <para></para>, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, + <section id="facebook-template">, + <title><classname>FacebookTemplate</classname></title>, + <para></para>, +++ /dev/null, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, + <section id="facebook-template">, + <title><classname>FacebookTemplate</classname></title>, + <para></para>, +++ /dev/null, +++ b/docs/src/reference/docbook/gowalla.xml, + <section id="gowalla-template">, + <title><classname>GowallaTemplate</classname></title>, + <para></para>, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, + <section id="facebook-template">, + <title><classname>FacebookTemplate</classname></title>, + <para></para>, +++ /dev/null, +++ b/docs/src/reference/docbook/gowalla.xml, + <section id="gowalla-template">, + <title><classname>GowallaTemplate</classname></title>, + <para></para>, +++ b/docs/src/reference/docbook/index.xml, +++ b/.gitignore, +++ b/docs/src/reference/docbook/facebook.xml, + <section id="facebook-template">, + <title><classname>FacebookTemplate</classname></title>, + <para></para>, +++ /dev/null, +++ b/docs/src/reference/docbook/gowalla.xml, + <section id="gowalla-template">, + <title><classname>GowallaTemplate</classname></title>, + <para></para>, +++ b/docs/src/reference/docbook/index.xml, +++ b/docs/src/reference/docbook/linkedin.xml, +
[+++ b/build.gradle, +project("spring-social-autoconfigure") {, + description = "Spring Social Boot Auto-Configuration", + dependencies {, + compile project(":spring-social-config"), + compile project(":spring-social-core"), + compile project(":spring-social-web"), + compile("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"), + }, +}, +, +++ b/build.gradle, +project("spring-social-autoconfigure") {, + description = "Spring Social Boot Auto-Configuration", + dependencies {, + compile project(":spring-social-config"), + compile project(":spring-social-core"), + compile project(":spring-social-web"), + compile("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"), + }, +}, +, +++ b/gradle.properties, +springBootVersion=2.0.0.M6, +++ b/build.gradle, +project("spring-social-autoconfigure") {, + description = "Spring Social Boot Auto-Configuration", + dependencies {, + compile project(":spring-social-config"), + compile project(":spring-social-core"), + compile project(":spring-social-web"), + compile("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"), + }, +}, +, +++ b/gradle.properties, +springBootVersion=2.0.0.M6, +++ b/settings.gradle, +include 'spring-social-autoconfigure', +++ b/build.gradle,
[+++ b/docs/src/reference/docbook/overview.xml, + <listitem><para>A "Connect Framework" that handles the core authorization and connection flow with Service Providers.</para></listitem>, +++ b/docs/src/reference/docbook/overview.xml, + <listitem><para>A "Connect Framework" that handles the core authorization and connection flow with Service Providers.</para></listitem>, +++ b/docs/src/reference/docbook/serviceprovider.xml, +<img src="${connection.imageUrl}" /> <a href="${connection.profileUrl}">${connection.displayName}</a>]]> , + In this case, sync() can be called to synchronize these values if the user's profile is updated., +}]]> , + </programlisting>, + <para>, + Example usage of a ServiceProviderConnectionFactoryLocator is shown below:, + </para>, + <programlisting language="java"><![CDATA[, +// generic lookup by providerId, +ServiceProviderConnectionFactory<?> connectionFactory = locator.getConnectionFactory("facebook");, +, +// typed lookup by service api type, +ServiceProviderConnectionFactory<FacebookApi> connectionFactory
[+++ b/.gitignore, +.classpath, +.project, +.settings, +++ b/.gitignore, +.classpath, +.project, +.settings, +++ b/pom.xml, + <header>Spring Mobile</header>, +++ b/.gitignore, +.classpath, +.project, +.settings, +++ b/pom.xml, + <header>Spring Mobile</header>, +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +.settings, +++ b/pom.xml, + <header>Spring Mobile</header>, +++ /dev/null, +++ b/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +package org.springframework.social.facebook;, +, +import static java.util.Arrays.*;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.http.MediaType;, +import org.springframework.http.ResponseEntity;, +import org.springframework.http.client.CommonsClientHttpRequestFactory;, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.client.RestTemplate;, +, +public class FacebookTemplate implements FacebookOperations {, + private RestTemplate restTemplate;, + , + public FacebookTemplate() {, + MappingJacksonHttpMessageConverter jsonMessageConverter = new MappingJacksonHttpMessageConverter();, + jsonMessageConverter.setSupportedMediaTypes(asList(new MediaType("text", "javascript")) );, + this.restTemplate
[+++ b/gradle.properties, +springSocialVersion=1.0.2.RELEASE, +role=buildmaster]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * Get a connection for the current user by its key, which consists of the providerId + providerUserId., + Connection<?> getConnection(ConnectionKey connectionKey);, + * Get a connection between the current user and the given provider user., + * Semantically equivalent to {@link #getConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., + * @throws NoSuchConnectionException if no such connection exists for the current user, + <A> Connection<A> getConnection(Class<A> apiType, String providerUserId);, + * Get the "primary" connection the current user
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, + * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring custom SSL details., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, + * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring custom SSL details., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + /**, + * Set the request factory on the underlying RestTemplate., + * This can be used to plug in a different HttpClient to do things like configure custom SSL settings., + */, + public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, + restTemplate.setRequestFactory(requestFactory);, + }, + , +++
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + protected static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, + protected static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, + protected static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +import org.springframework.social.security.provider.SocialAuthenticationService;, + protected Class<? extends SocialAuthenticationService<?>> getAuthenticationServiceClass() {, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +import org.springframework.social.security.provider.SocialAuthenticationService;, + protected Class<? extends SocialAuthenticationService<?>> getAuthenticationServiceClass() {, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.security.provider.SocialAuthenticationService;, + protected Class<? extends SocialAuthenticationService<?>> getAuthenticationServiceClass() {, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +import org.springframework.social.security.provider.SocialAuthenticationService;, + protected Class<? extends SocialAuthenticationService<?>> getAuthenticationServiceClass() {, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.security.provider.SocialAuthenticationService;, + protected Class<? extends SocialAuthenticationService<?>> getAuthenticationServiceClass() {, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/FakeConnectionFactoryBeanDefinitionParser.java, +import org.springframework.social.security.provider.SocialAuthenticationService;, + protected Class<? extends SocialAuthenticationService<?>> getAuthenticationServiceClass() {]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <section id="service-providers-establishing-connections-connection-factory-registry">, + <title>Registering ServiceProviderConnectionFactory instances</title>, + <para>, + As you will see in subsequent sections of this reference guide, Spring Social provides infrastructure for establishing connections to one or more providers in a dynamic, self-service manner., + For example, one client application may allow users to connect to Facebook, Twitter, and LinkedIn. Another might integrate Github and Pivotal Tracker., + To make the set of connectable providers easy to manage and locate, Spring Social provides a registry for centralizing connection factory instances:, + </para>, + <programlisting language="java"><![CDATA[, +MapServiceProviderConnectionFactoryRegistry registry = new MapServiceProviderConnectionFactoryRegistry();, +registry.addConnectionFactory(new FacebookServiceProviderConnectionFactory());, +registry.addConnectionFactory(new
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding
[+++ b/samples/spring-social-showcase/pom.xml, + <plugin>, + <groupId>org.codehaus.mojo</groupId>, + <artifactId>properties-maven-plugin</artifactId>, + <version>1.0-alpha-2</version>, + <executions>, + <execution>, + <phase>generate-resources</phase>, + <goals>, + <goal>write-active-profile-properties</goal>, + </goals>, + <configuration>, + <!-- Writes properties defined in current active profile(s) to application.properties, which is picked up by PropertyPlaceholderConfigurer in the classpath -->, + <outputFile>${project.build.outputDirectory}/application.properties</outputFile>, + </configuration>, + </execution>, + </executions>, + </plugin>]
[+++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded, +oauth_token=1234567890&oauth_token_secret=abcdefghijklmnop, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded, +oauth_token=1234567890&oauth_token_secret=abcdefghijklmnop, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.facebook, +access_token=162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded, +oauth_token=1234567890&oauth_token_secret=abcdefghijklmnop, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.facebook, +access_token=162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.json, +{, + "expires_at":"Wed, 09 Feb 2011 16:38:34 -0000",, + "scope":"read",, + "username":"cwagon",, + "expires_in":40735,, + "access_token":"8d0a88a5c4f1ae4937ad864cafa8e857",, + "refresh_token":"6b0411401bf8751e34f57feb29fb8e32", +}, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded, +oauth_token=1234567890&oauth_token_secret=abcdefghijklmnop, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.facebook, +access_token=162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.json, +{, + "expires_at":"Wed, 09 Feb 2011 16:38:34 -0000",, + "scope":"read",, + "username":"cwagon",, + "expires_in":40735,, + "access_token":"8d0a88a5c4f1ae4937ad864cafa8e857",, + "refresh_token":"6b0411401bf8751e34f57feb29fb8e32", +}, +++ /dev/null, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/accessToken.formencoded, +oauth_token=9876543210&oauth_token_secret=ponmlkjihgfedcba, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/requesttoken.formencoded, +oauth_token=1234567890&oauth_token_secret=abcdefghijklmnop, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.facebook, +access_token=162868103756545|bf4de6ed613f7901204c222g-738140579|YAufyoV9n7LmEAgzRKqnc300B0B, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken.json, +{, + "expires_at":"Wed, 09 Feb 2011 16:38:34 -0000",,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A display name or label for this connection., + * Should be suitable for display on a UI and distinguish this connection from others with the same provider., + * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., + * May be null if this information is not public or not provided., + * The value of this property may change
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.http.MediaType;, + // subclassing hooks, +, + protected OAuthToken createAccessToken(String accessToken, String secret, MultiValueMap<String, String> body) {, + return new OAuthToken(accessToken, secret);, + }, +, + private RestTemplate createRestTemplate() {, + RestTemplate restTemplate = new RestTemplate();, + List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>(1);, + converters.add(new FormHttpMessageConverter() {, + public boolean canRead(Class<?> clazz, MediaType mediaType) {, + // always read MultiValueMaps as x-www-url-formencoded even if contentType not set properly by provider , + return MultiValueMap.class.isAssignableFrom(clazz);, + }, + });, + restTemplate.setMessageConverters(converters);, + return restTemplate;, + }, + , + return createAccessToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.http.MediaType;, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, + RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, + RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, + RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, + RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, + RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, + RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, + RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, + RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, + RestTemplate restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, + RestTemplate client = new
[+++ b/build.gradle, + maven { url 'http://repo.spring.io/plugins-release' }, + maven { url "http://repo.spring.io/libs-snapshot" }, +++ b/build.gradle, + maven { url 'http://repo.spring.io/plugins-release' }, + maven { url "http://repo.spring.io/libs-snapshot" }, +++ b/src/reference/docbook/connecting.xml, + In order to support this through a form in a web browser, you'll need to have Spring's <ulink url="http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/web/filter/HiddenHttpMethodFilter.html"><classname>HiddenHttpMethodFilter</classname></ulink> configured in your application's web.xml. , +++ b/build.gradle, + maven { url 'http://repo.spring.io/plugins-release' }, + maven { url "http://repo.spring.io/libs-snapshot" }, +++ b/src/reference/docbook/connecting.xml, + In order to support this through a form in a web browser, you'll need to have Spring's <ulink url="http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/web/filter/HiddenHttpMethodFilter.html"><classname>HiddenHttpMethodFilter</classname></ulink> configured in your application's web.xml. , +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, + public UserProfile(String id, String name, String firstName, String lastName, String email, String username) {, + this.id = id;, + this.name = name;, + this.firstName = firstName;, + this.lastName = lastName;, + this.email = email;, + this.username = username;, + }, +]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, + String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, + String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, + final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, + String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, + final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, + * similar to {@link UserDetailsService} but loads details by user id, not username, + SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, + String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, + final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);,
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + } else if (userIds.size() == 1){, + } else {, + return redirect(signInUrl + "?signInError=multiple");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, + super("Insufficient permission for this operation.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, + super("Insufficient permission for this operation.");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;]
[+++ b/build.gradle, + ext.jacksonVersion = "2.3.0", + ext.springVersion = "4.0.2.RELEASE", + ext.springSecurityVersion = "3.2.0.RELEASE", +++ b/build.gradle, + ext.jacksonVersion = "2.3.0", + ext.springVersion = "4.0.2.RELEASE", + ext.springSecurityVersion = "3.2.0.RELEASE", +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + public void setAlwaysUsePostLoginUrl(boolean alwaysUsePostLoginUrl) {, + AuthenticationSuccessHandler successHandler = getSuccessHandler();, + if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, + AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, + h.setAlwaysUseDefaultTargetUrl(alwaysUsePostLoginUrl);, + } else {, + throw new IllegalStateException("can't set alwaysUsePostLoginUrl on unknown successHandler, type is " + successHandler.getClass().getName());, + }, + }, + , +++ b/build.gradle, + ext.jacksonVersion = "2.3.0", + ext.springVersion = "4.0.2.RELEASE", + ext.springSecurityVersion = "3.2.0.RELEASE", +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + public void setAlwaysUsePostLoginUrl(boolean
[+++ b/docs/src/reference/docbook/apis.xml, + Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., + </para>, + , + <para>, + Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, + Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown., + If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Jan ??, 2011), +==============================================, +For release notes see:, + https://jira.springframework.org/secure/ReleaseNote.jspa?projectId=10481&version=11738, +, +New Features, + * New connection framework to handle the application side of the "OAuth Dance"., + * Expanded TwitterOperations interface:, + * Posting location metadata along with Tweet, + * Retrieving user, friends, public, and home timelines, + * Send and receive direct messages, + * Retrieving a user's full Twitter profile, + * New social templates (minimal functionality in this release):, + * Gowalla - Retrieve user's top checkins, + * GitHub - Retrieve a user's profile data, +
[+++ b/pom.xml, + <!-- For resolving Scribe dependency; temporary awaiting its arrival in central -->, + <repository>, + <id>org.springframework.maven.external</id>, + <name>Spring Maven External Libraries Repository</name>, + <url>http://maven.springframework.org/external</url>, + <snapshots><enabled>false</enabled></snapshots> , + </repository> ]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +import org.springframework.social.twitter.support.json.DirectMessageList;, + return getLowLevelTwitterApi().fetchObject("direct_messages.json", DirectMessageList.class).getList();, + return getLowLevelTwitterApi().fetchObject("direct_messages/sent.json", DirectMessageList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +import org.springframework.social.twitter.support.json.DirectMessageList;, + return getLowLevelTwitterApi().fetchObject("direct_messages.json", DirectMessageList.class).getList();, + return getLowLevelTwitterApi().fetchObject("direct_messages/sent.json", DirectMessageList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +import org.springframework.social.twitter.support.json.LongIdsList;, +import org.springframework.social.twitter.support.json.LongList;, +import org.springframework.social.twitter.support.json.TwitterProfileList;, + return getLowLevelTwitterApi().fetchObject("statuses/friends.json", TwitterProfileList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, + return getLowLevelTwitterApi().fetchObject("statuses/friends.json", TwitterProfileList.class, Collections.singletonMap("screen_name", screenName)).getList();, + return getLowLevelTwitterApi().fetchObject("friends/ids.json", LongList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, + return getLowLevelTwitterApi().fetchObject("friends/ids.json", LongList.class, Collections.singletonMap("screen_name", screenName)).getList();, + return getLowLevelTwitterApi().fetchObject("statuses/followers.json", TwitterProfileList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, + return getLowLevelTwitterApi().fetchObject("statuses/followers.json", TwitterProfileList.class, Collections.singletonMap("screen_name", screenName)).getList();, + return getLowLevelTwitterApi().fetchObject("followers/ids.json", LongList.class, Collections.singletonMap("user_id", String.valueOf(userId))).getList();, + return getLowLevelTwitterApi().fetchObject("followers/ids.json", LongList.class, Collections.singletonMap("screen_name", screenName)).getList();, + return getLowLevelTwitterApi().fetchObject("friendships/incoming.json", LongIdsList.class).getList();, + return getLowLevelTwitterApi().fetchObject("friendships/outgoing.json", LongIdsList.class).getList();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +import org.springframework.social.twitter.support.json.DirectMessageList;, + return getLowLevelTwitterApi().fetchObject("direct_messages.json", DirectMessageList.class).getList();, + return getLowLevelTwitterApi().fetchObject("direct_messages/sent.json",
[+++ b/gradle.properties]
[+++ b/readme.txt, +is omitted, doing so becomes a multi-step process of: , +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update]
[+++ b/docs/src/reference/docbook/connecting.xml, + Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, + if (authentication == null) {, + throw new IllegalStateException("Unable to get a ConnectionRepository: no user signed in");, + }, + return usersConnectionRepository().createConnectionRepository(authentication.getName());, +++ b/docs/src/reference/docbook/connecting.xml, + Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, + if (authentication == null) {, + throw new IllegalStateException("Unable to get a ConnectionRepository: no user signed in");, + }, + return usersConnectionRepository().createConnectionRepository(authentication.getName());, +++ b/docs/src/reference/docbook/signin.xml, + <listitem><para>A <interfacename>UsersConnectionRepository</interfacename> to find the user that has the connection to the provider user attempting to sign in.</para></listitem>, + In the event that the sign in attempt fails, the sign in attempt will be stored in
[+++ b/build.gradle, + springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/build.gradle, + springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate
[+++ b/gradle.properties, +springSecurityVersion=5.0.0.M2, +++ b/gradle.properties, +springSecurityVersion=5.0.0.M2, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/EmptyMultiValueMap.java]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, + return restTemplate.getForObject(buildUri("direct_messages.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, + return restTemplate.getForObject(buildUri("direct_messages/sent.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, + return restTemplate.getForObject(buildUri("direct_messages.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, + return restTemplate.getForObject(buildUri("direct_messages/sent.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, + return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("user_id", String.valueOf(userId))), TwitterProfileList.class);, + return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("screen_name", screenName)), TwitterProfileList.class);, + return restTemplate.getForObject(buildUri("friends/ids.json", Collections.singletonMap("user_id", String.valueOf(userId))), LongList.class);, + return restTemplate.getForObject(buildUri("friends/ids.json", Collections.singletonMap("screen_name", screenName)), LongList.class);, + return restTemplate.getForObject(buildUri("statuses/followers.json", Collections.singletonMap("user_id", String.valueOf(userId))), TwitterProfileList.class);, + return restTemplate.getForObject(buildUri("statuses/followers.json", Collections.singletonMap("screen_name", screenName)), TwitterProfileList.class);, + return restTemplate.getForObject(buildUri("followers/ids.json", Collections.singletonMap("user_id", String.valueOf(userId))), LongList.class);, + return restTemplate.getForObject(buildUri("followers/ids.json", Collections.singletonMap("screen_name", screenName)), LongList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, + return restTemplate.getForObject(buildUri("direct_messages.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, + return restTemplate.getForObject(buildUri("direct_messages/sent.json", Collections.<String, String>emptyMap()), DirectMessageList.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, + return restTemplate.getForObject(buildUri("statuses/friends.json", Collections.singletonMap("user_id", String.valueOf(userId))),
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import org.springframework.util.LinkedMultiValueMap;, +@SuppressWarnings("serial"), +public final class OAuth1Parameters extends LinkedMultiValueMap<String, String> {, + private static final String OAUTH_CALLBACK = "oauth_callback";, + public static final OAuth1Parameters NONE = new OAuth1Parameters();, + return getFirst(OAUTH_CALLBACK);, + public void setCallbackUrl(String callbackUrl) {, + set(OAUTH_CALLBACK, callbackUrl);, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import org.springframework.util.LinkedMultiValueMap;, +@SuppressWarnings("serial"), +public final class OAuth1Parameters extends LinkedMultiValueMap<String, String> {, + private static final String OAUTH_CALLBACK = "oauth_callback";,
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import javax.servlet.http.HttpServletRequest;, +, + return request.getNativeRequest(HttpServletRequest.class).getRequestURL().toString();]
[+++ b/docs/src/info/changelog.txt, + * Changed applicationUrl property on ConnectController and ProviderSignInController to be a String instead of URL., +++ b/docs/src/info/changelog.txt, + * Changed applicationUrl property on ConnectController and ProviderSignInController to be a String instead of URL., +++ b/docs/src/reference/docbook/connecting.xml, + public ConnectController connectController() {, + controller.setApplicationUrl(environment.getProperty("application.url");, +++ b/docs/src/info/changelog.txt, + * Changed applicationUrl property on ConnectController and ProviderSignInController to be a String instead of URL., +++ b/docs/src/reference/docbook/connecting.xml, + public ConnectController connectController() {, + controller.setApplicationUrl(environment.getProperty("application.url");, +++ b/docs/src/reference/docbook/signin.xml, +public ProviderSignInController providerSignInController() {, + controller.setApplicationUrl(environment.getProperty("application.url"));, +++ b/docs/src/info/changelog.txt, + * Changed applicationUrl property on ConnectController and ProviderSignInController to be a String instead of URL., +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +import java.io.Serializable;, +, +public interface Connection<A> extends Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +import java.io.Serializable;, +, +public interface Connection<A> extends Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java, + private transient final ApiAdapter<A> apiAdapter;, + private transient final Object monitor = new Object();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, +import java.io.Serializable;, +, +public interface Connection<A> extends Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java, + private transient final ApiAdapter<A> apiAdapter;, + private transient final Object monitor = new Object();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, + private transient final OAuth2ServiceProvider<A> serviceProvider;, + private transient A api;, + private transient A apiProxy;]
[+++ b/docs/src/reference/docbook/signin.xml, + <constructor-arg ref="twitterProvider" />, + <classname>TwitterSigninController</classname> is constructed with four arguments:, + <listitem><para>A reference to a <classname>TwitterServiceProvider</classname> bean. <classname>TwitterSigninController</classname> will use this to negotiate the connection with Twitter.</para></listitem>, + <constructor-arg ref="facebookProvider" />, + It also needs a reference to a <classname>FacebookServiceProvider</classname> bean that it will use to negotiate the connection with Facebook.]
[+++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/SessionUserIdSourceTest.java]
[+++ b/gradle.properties, +version=1.1.0.M2]
[+++ b/gradle.properties, +h2Version = 1.3.175, +hamcrestVersion = 1.3, +httpComponentsVersion = 4.3.1, +junitVersion = 4.11, +mockitoVersion = 1.10.8, +servletApiVersion = 3.0.1, +springVersion = 4.1.6.RELEASE, +springReleaseVersion = latest.release, +springSnapshotVersion = latest.integration, +springSecurityVersion = 3.2.7.RELEASE, +jspApiVersion = 2.2.1]
[+++ b/build.gradle, + srcDirs = ['src/main/java'], +++ b/build.gradle, + srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ b/build.gradle, + srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, + srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + srcDirs = ['src/main/java'], +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 15, 2011), + * New service provider framework to model interaction with service providers., + * New connect controller to handle the application's role in the "OAuth Dance", + for both OAuth 1 and OAuth 2 service providers., + * New TwitterSigninController that enables a user to sign into an application by, + signing into Twitter., + * New FacebookSigninController that enables a user to sign into an application by, + signing into Facebook., + * SOCIAL-52: TwitterTemplate doesn't work with other Locale than Locale.ENGLISH, + * SOCIAL-53: Cannot run app
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/AbstractTwitterOperations.java, +import java.net.URI;, +import java.util.Collections;, +import java.util.Map;, +, +import org.springframework.social.util.URIBuilder;, +, + private final boolean isAuthorizedForUser;, + public AbstractTwitterOperations(boolean isAuthorizedForUser) {, + this.isAuthorizedForUser = isAuthorizedForUser;, + if(!isAuthorizedForUser) {, + , + protected URI buildUri(String path) {, + return buildUri(path, Collections.<String, String>emptyMap());, + }, + , + protected URI buildUri(String path, Map<String, String> params) {, + URIBuilder uriBuilder = URIBuilder.fromUri(API_URL_BASE + path);, + for (String paramName : params.keySet()) {, + uriBuilder.queryParam(paramName, String.valueOf(params.get(paramName)));, + }, + URI uri = uriBuilder.build();, + return uri;, + }, + , + private static final String API_URL_BASE = "https://api.twitter.com/1/";, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/AbstractTwitterOperations.java, +import java.net.URI;,
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInUtils.java, + * Must be called before handlePostSignUp() or else the sign-in attempt will have been cleared from the session.]
[+++ b/build.gradle, + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/.gitignore, +build, +**/build, +.gradle, +++ b/.gitignore, +build, +**/build, +.gradle, +++ b/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS
[+++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, + return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, + return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, + return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, + return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, + return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, + return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, + return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, + return (String) getLowLevelTwitterApi().publish("friendships/destroy.json", EMPTY_DATA, Map.class, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListTemplate.java, +import org.springframework.social.twitter.support.json.TweetList;, + return getLowLevelTwitterApi().fetchObject("{userId}/lists/{listId}/statuses.json", TweetList.class).getList();, + return getLowLevelTwitterApi().fetchObject("{screenName}/lists/{screenName}/statuses.json", TweetList.class).getList();, + getLowLevelTwitterApi().fetchObject(path, String.class);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, + return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, + return (String) getLowLevelTwitterApi().publish("friendships/create.json", EMPTY_DATA, Map.class,
[+++ b/gradle.properties, +springVersion = 4.0.3.RELEASE, +++ b/gradle.properties, +springVersion = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/gradle.properties, +springVersion = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/gradle.properties, +springVersion = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, + * Returns an account ID., +++ b/gradle.properties, +springVersion = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, + * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, + * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +++ b/gradle.properties, +springVersion = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, + * Returns an account ID., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/Connection.java, + * A composite key
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + String redirectUrl = signInAdapter.signIn(userId, connection, request);, + if(redirectUrl != null) {, + return redirect(redirectUrl);, + }, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + String redirectUrl = signInAdapter.signIn(userId, connection, request);, + if(redirectUrl != null) {, + return redirect(redirectUrl);, + }, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/SignInAdapter.java, + * @return the URL that ProviderSignInController should redirect to after sign in. May be null, indicating that ProviderSignInController, + * should redirect to its postSignInUrl., + String signIn(String userId, Connection<?> connection, NativeWebRequest request);]
[+++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/readme.txt, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process., +, +If you encounter heap space errors during the build, increase the heap size for, +gradle:, + GRADLE_OPTS="-Xmx1024m", +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, + ./gradlew eclipse, +, +Once complete, you
[+++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xmlns:social="http://www.springframework.org/schema/social-connect", + xsi:schemaLocation="http://www.springframework.org/schema/social-connect http://www.springframework.org/schema/social/social-connect-1.0.xsd, + http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">, +, + <!-- , + Could be replaced with: , + <social:jdbc-service-provider-factory />, + , + or, + , + <social:context-service-provider-factory />, + --> , + <!-- This wouldn't be necessary as it would be the default -->, + <!-- , + -->, + <!-- , + Could be replaced with: , + <social:jdbc-connection-repository />, + --> , + <bean id="connectionRepository" class="org.springframework.social.connect.jdbc.JdbcAccountConnectionRepository">, + <constructor-arg ref="jdbcTemplate" />, + <constructor-arg ref="stringEncryptor" />, + </bean>, + , + <social:twitter-provider consumer-key="YR571S2JiVBOFyJS5MEg" , + consumer-secret="Kb8hS0luftwCJX3qVoyiLUMfZDtK1EozFoUkjNLUMx4" />, +, + <!-- , +
[+++ b/docs/src/reference/docbook/signin.xml, +public interface SignInService<T extends Serializable> {, + void signIn(T accountId); , +public class AccountIdAsPrincipalSigninService implements SignInService<Long> {, + public void signIn(Long accountId) {, +++ b/docs/src/reference/docbook/signin.xml, +public interface SignInService<T extends Serializable> {, + void signIn(T accountId); , +public class AccountIdAsPrincipalSigninService implements SignInService<Long> {, + public void signIn(Long accountId) {, +++ b/spring-social-web/src/main/java/org/springframework/social/web/signin/SignInService.java, +public interface SignInService<T extends Serializable> {, + void signIn(T accountId);]
[+++ b/docs/src/reference/docbook/signin.xml, + <constructor-arg ref="signinService" />, + <listitem><para>A reference to an implementation of <interfacename>SignInService</interfacename>, used to perform the actual authentication into the application.</para></listitem>, + <listitem><para><code>GET /signin/twitter?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authentication callback from Twitter, accepting a verification code. Exchanges this verification code along with the request token for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>, + <classname>TwitterSigninController</classname> handles the authentication flow with Twitter, but relies on an implementation of <interfacename>SignInService</interfacename> to perform the actual authentication into the application. <interfacename>SignInService</interfacename> is defined
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + * If not specified, OAuth callback URLs are generated from web request info. , + * In this case, the request URI may contain a scheme, host, and/or port value that points to an internal server not appropriate for an external callback URL., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + * If not specified, OAuth callback URLs are generated from web request info. , + * In this case, the request URI may contain a scheme, host, and/or port value that points to an internal server not appropriate for an external callback URL., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + * If not specified,
[+++ b/gradle.properties, +springSocialVersion=1.0.0.BUILD-SNAPSHOT, +role=developer]
[+++ b/docs/src/reference/docbook/implementing.xml, + In this chapter, you will learn how to add support for new service providers you wish to integrate into your applications.]
[+++ b/gradle.properties, +springBootVersion=2.0.0.RC2]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + String servletPath = request.getNativeRequest(HttpServletRequest.class).getServletPath();]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, + private final OAuth10Operations oauth1Operations;, +, + public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, + String consumerSecret, OAuth10Operations oauth1Operations) {, + super(id, connectionRepository, consumerKey, consumerSecret);, + this.oauth1Operations = oauth1Operations;, + }, +, + public OAuth10Operations getOAuth10Operations() {, + return oauth1Operations;, + }, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, + private final OAuth10Operations oauth1Operations;, +, + public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + * If the request went through an load balancer or proxy, the URL's scheme, host, and/or port may point at an internal server which is not appropriate as an external callback URL., + * For those cases you can set application URL to the base external URL for the application and it will be used to construct the callback URL instead of determining the callback URL from the request., + public void setApplicationUrl(URL applicationUrl) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + * If the request went through an load balancer or proxy, the URL's scheme, host, and/or port may
[+++ b/docs/src/reference/docbook/apis.xml, + <listitem><para>Twitter</para></listitem>, + "Spring Social is an extension to Spring to enable applications to connect with service providers.");, + <section xml:id="section_api_gowalla">, + <title>Gowalla</title>, + <para>Gowalla is a location-based social network where users may check in to various locations they visit and earn pins and stamps for having checked in a locations that achieve some goal (for example, a "Lucha Libre" pin may be earned by having checked into 10 different Mexican food restaurants).</para>, +, + <para>Spring Social supports interaction with Gowalla through the <interfacename>GowallaOperations</interfacename> interface and its implementation, <classname>GowallaTemplate</classname>.</para>, +, + <para>To obtain an instance of <classname>GowallaTemplate</classname>,
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (June 22, 2011), + * Fixed Spring 3.0 compatibility issues (SOCIAL-152), + * Converted LinkedInTemplate response binding to be JSON-based, fixing a, + problem with Android compatibility (SOCIAL-148), + * Fixed several JSON deserialization issues by either adding new fields to, + the model classes or by setting Jackson to ignore unknown properties., + * Made javax.Inject dependency a required dependency of spring-social-web (SOCIAL-158), + * Added setRequestFactory() methods to OAuth1Template and OAuth2Template to, + allow for customization of the request factory (SOCIAL-133), + * AbstractOAuth1ApiBinding and AbstractOAuth2ApiBinding now create a
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + public AccessGrant(String accessToken) {, + this(accessToken, null);, + }, + , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + public AccessGrant(String accessToken) {, + this(accessToken, null);, + }, + , +++ b/spring-social-web/src/main/java/org/springframework/social/web/signin/OAuth2ProviderSignInAccount.java, + serviceProvider.connect(accountId, new AccessGrant(accessToken)); ]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * "facebook" -&gt; [ Connection("Keith Donald") ] ,, + * "github" -&gt; [ ], + * "twitter" -&gt; [ Connection("kdonald"), Connection("springsource") ], + * The method always returns a map with keys representing all registered providers., + * For providers with no connection, a map contains an empty list as a value.]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + public Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + public Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + public Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + public Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + public Map<String, Object> toParameterMap() {, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.spi.ServiceProviderUser;, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A display name or label for this connection., + * Should be suitable for display on a UI and distinguish this connection from others with the same provider., + * Generally the full name or screen name of the connected provider user e.g. "Keith Donald" or "@kdonald"., + * May be null if this information is not public or not provided., + * The value of this property may change
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionValues.java, + * @see ApiAdapter#setConnectionValues(Object, ConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionValues.java, + * @see ApiAdapter#setConnectionValues(Object, ConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * @see ConnectionRepository#addConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionValues.java, + * @see ApiAdapter#setConnectionValues(Object, ConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * @see ConnectionRepository#addConnection(Connection), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInController.java, + * @param connectionFactoryLocatorProvider the provider of the locator of {@link ConnectionFactory connection factories} that can be used for sign-in;, + * @param connectionRepositoryProvider the provider of the current user's {@link ConnectionRepository} instance;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * @see ConnectionFactoryLocator#getConnectionFactory(String)., +++
[+++ b/docs/src/reference/docbook/overview.xml, + <para>The Spring Social project enables your applications to establish Connections with Software-as-a-Service (SaaS) Providers such as Facebook and Twitter to invoke APIs on behalf of Users.</para>, + <listitem><para>A "Connect Framework" that handles the core authorization and connection flow with service providers.</para></listitem>, + <entry>Spring Social's Connect Framework and OAuth client support.</entry>, + <entry>Spring Social's <classname>ConnectController</classname> which uses the Connect Framework to manage connections in a web application environment.</entry>, + <entry>Support for testing Connect implementations and API bindings.</entry>, +++ b/docs/src/reference/docbook/overview.xml, + <para>The Spring Social project enables your applications to establish Connections with Software-as-a-Service (SaaS) Providers such as Facebook
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2ConnectionFactory.java, + private String scope = null;, + , + * Sets the default value to send in the scope parameter during authorization., + * Null by default, meaning that no scope parameter will be sent and the default scope will be determined by the provider., + * @param scope The default value to send as scope during authorization., + */, + public void setScope(String scope) {, + this.scope = scope;, + }, + , + public String getScope() {, + return scope;, + }, +, + /**, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2ConnectionFactory.java, + private String scope = null;, + ,
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2RequestInterceptorTest.java, + OAuth2RequestInterceptor interceptor = new OAuth2RequestInterceptor("access_token", OAuth2Version.STANDARD);, + OAuth2RequestInterceptor interceptor = new OAuth2RequestInterceptor("access_token", OAuth2Version.DRAFT_10);, + OAuth2RequestInterceptor interceptor = new OAuth2RequestInterceptor("access_token", OAuth2Version.DRAFT_8);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, + public InsufficientPermissionException() {, + super("Insufficent permission for this operation.");, + this.requiredPermission = null;, + }, +, + /**, + * The permission required to access the resource., + * May be null if the required permission is unknown., + */]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + public AccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + public AccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + protected AccessGrant createAccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn, Map<String, Object> response) {, + private Long getIntegerValue(Map<String, Object> map, String key) {, + return Long.valueOf(String.valueOf(map.get(key))); // normalize to String before creating integer value; , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + public AccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + protected AccessGrant createAccessGrant(String accessToken, String scope, String refreshToken, Long expiresIn, Map<String,
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors.,
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId); , +++ b/docs/src/reference/docbook/serviceprovider.xml, + <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId); , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, + * @see ServiceProviderConnectionRepository#findPrimaryConnectionToServiceApi(Class), +++ b/docs/src/reference/docbook/serviceprovider.xml, + <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId); , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, + * @see ServiceProviderConnectionRepository#findPrimaryConnectionToServiceApi(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, + <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType);, + <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);, +, + /**, + * Find the ServiceProviderConnections for the current user by the given serviceApiType e.g. FacebookApi.class., + * Returns the equivalent of {@link #findConnectionsToProvider(String)}, but uses the serviceApiType as the provider key instead of the providerId., + * Useful for direct
[+++ b/build.gradle, + httpComponentsVersion = '4.1.1', + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/build.gradle, + httpComponentsVersion = '4.1.1', + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, + RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/build.gradle, + httpComponentsVersion = '4.1.1', + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, + RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, + RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/build.gradle, + httpComponentsVersion = '4.1.1', + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion") { optional = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import org.springframework.social.support.httpclient.RequestFactorySelector;, + RestTemplate client = new RestTemplate(RequestFactorySelector.getRequestFactory());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/Account.sql, +create table Account ( id identity,, + username varchar unique,, + password varchar not null,, + firstName varchar not null, , + lastName varchar not null,, + email varchar(320) not null unique,, + primary key (id));, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/Account.sql, +create table Account ( id identity,, + username varchar unique,, + password varchar not null,, + firstName varchar not null, , + lastName varchar not null,, + email varchar(320) not null unique,, + primary key (id));, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName,
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/Comment.java, +package org.springframework.social.facebook;, +, +import java.util.Date;, +import java.util.List;, +, +/**, + * Represents a comment., + * @author Craig Walls, + */, +public class Comment {, + private final String id;, + private final String message;, + private final Date createdDate;, + private final Reference from;, + private final List<Reference> likes;, +, + public Comment(String id, String message, Date createdDate, Reference from, List<Reference> likes) {, + this.id = id;, + this.message = message;, + this.createdDate = createdDate;, + this.from = from;, + this.likes = likes;, + }, +, + public String getId() {, + return id;, + },
[+++ b/docs/manual/src/asciidoc/index.adoc, + accessToken varchar(512) not null,, + secret varchar(512),, + refreshToken varchar(512),, +++ b/docs/manual/src/asciidoc/index.adoc, + accessToken varchar(512) not null,, + secret varchar(512),, + refreshToken varchar(512),, +++ b/gradle.properties, +version=1.1.3.BUILD-SNAPSHOT]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FeedOperations.java, +import org.springframework.social.facebook.types.Post;, + * @return a list of {@link Post}s for the authenticated user. , + List<Post> getFeed();, + * @return a list of {@link Post}s for the specified user. , + List<Post> getFeed(String ownerId);, + * @return a list of {@link Post}s from the authenticated user's home feed., + List<Post> getHomeFeed();, + * @return a list of {@link Post}s from the specified user's home feed., + List<Post> getHomeFeed(String userId);, + * @return the requested {@link Post}, + Post getFeedEntry(String entryId);, + * @return a list of status {@link Post}s. , + List<Post> getStatuses();, + * @return
[+++ b/docs/src/reference/docbook/overview.xml, + Although shown here to depend on version 4.1.1 of the HttpClient library, Spring Social can also with with 4.0.X versions of HttpClient.]
[+++ b/build.gradle, + jacksonVersion = '2.2.1', + testCompile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"), + testCompile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"), +++ b/build.gradle, + jacksonVersion = '2.2.1', + testCompile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"), + testCompile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"), +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, + * This implementation creates a RestTemplate with a minimal set of HTTP message converters ({@link FormHttpMessageConverter} and {@link MappingJackson2HttpMessageConverter})., + converters.add(new MappingJackson2HttpMessageConverter());, +++ b/build.gradle, + jacksonVersion = '2.2.1', + testCompile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"), + testCompile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"), +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, + * This implementation creates a RestTemplate with a minimal set of HTTP message converters ({@link FormHttpMessageConverter} and {@link MappingJackson2HttpMessageConverter})., + converters.add(new MappingJackson2HttpMessageConverter());, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java]
[+++ b/pom.xml, + <version>1.0.3</version>]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (July 25, 2011), +=======================================================, +Bug Fixes, + * Display a message indicating a user should sign-up after a provider, + sign-in is unable to find a matching local user. (SOCIAL-207), + * When ConnectController is given an application URL, it now uses the, + entire URL to construct the callback URL instead of piecing together, + the callback URL from specific parts of it. (SOCIAL-200), + * Use coalesce function in SQL rather than ifnull for greater DB, + compatibility. (SOCIAL-226), + * Added cache-control headers in response for ConnectController status,
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeSocialAuthenticationService.java, +++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeSocialAuthenticationService.java, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubConnectionRepository.java, +++ b/spring-social-config/src/test/java/org/springframework/social/config/FakeSocialAuthenticationService.java, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubConnectionRepository.java, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubUsersConnectionRepository.java]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.social.UserIdSource;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/FakeConnectionFactoryBeanDefinitionParser.java, +import org.springframework.social.UserIdSource;, +++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/test/java/org/springframework/social/config/SimpleUserIdSource.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/SocialConfig.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/FakeConnectionFactoryBeanDefinitionParser.java, +import org.springframework.social.UserIdSource;, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed
[+++ b/docs/src/reference/docbook/connecting.xml, + Each <interfacename>ServiceProvider</interfacename> should be configured with the client key and secret that were assigned to it when the application was registered with the service provider., +++ b/docs/src/reference/docbook/connecting.xml, + Each <interfacename>ServiceProvider</interfacename> should be configured with the client key and secret that were assigned to it when the application was registered with the service provider., +++ b/docs/src/reference/docbook/signin.xml, + <constructor-arg value="#{environment['facebook.appId']}" />, + <constructor-arg value="#{environment['facebook.appSecret']}" />, + Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook app id and secret that were issued to the application when it was first registered in Facebook. , + It uses the app id
[+++ b/docs/src/reference/docbook/overview.xml, + <listitem><para>spring-social-canvas - Demonstrates how to use Spring Social within a Facebook Canvas application.</para></listitem>]
[+++ b/build.gradle, + // to be able to use the mock rest server, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/build.gradle, + // to be able to use the mock rest server, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ /dev/null, +++ b/build.gradle, + // to be able to use the mock rest server, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="connectionRepository" />, +++ b/build.gradle, + // to be able to use the mock rest server, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, + <intercept-url pattern="/signin" access="permitAll" />, + <intercept-url pattern="/connect/**" access="permitAll" />, +++ b/build.gradle, + // to
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider && other.providerUserId == null;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider && other.providerUserId == null;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/ConnectionKeyTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.http.client.ClientHttpRequestFactory;, + /**, + * Set the request factory on the underlying RestTemplate., + * @param requestFactory, + */, + public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, + this.restTemplate.setRequestFactory(requestFactory);, + }, + , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.http.client.ClientHttpRequestFactory;, + /**, + * Set the request factory on the underlying RestTemplate., + * @param requestFactory, + */, + public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, + this.restTemplate.setRequestFactory(requestFactory);, + }, + , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.http.client.ClientHttpRequestFactory;, + /**, + * Set the request factory on the underlying RestTemplate., + * @param requestFactory, + */, + public void setRequestFactory(ClientHttpRequestFactory requestFactory) {, + this.restTemplate.setRequestFactory(requestFactory);, +
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.core.GenericTypeResolver;, + private final static Log logger = LogFactory.getLog(AbstractConnectionFactoryBeanDefinitionParser.class);, +, + private final Class<?> apiBindingType;, +, + private final Class<?> apiHelperClass;, + protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiHelperClass) {, + this.apiHelperClass = apiHelperClass;, + this.apiBindingType = GenericTypeResolver.resolveTypeArgument(connectionFactoryClass, ConnectionFactory.class);, + if (logger.isDebugEnabled()) {, + logger.debug("Registering ConnectionFactory for " + ClassUtils.getShortName(apiBindingType));, + } , + if (logger.isDebugEnabled()) {, + logger.debug("Registering ConnectionFactoryLocator bean");, + } , + if (logger.isDebugEnabled()) {, + logger.debug("Registering API Helper bean for " + ClassUtils.getShortName(apiBindingType));, + } , + String helperId = "__" + ClassUtils.getShortNameAsProperty(apiBindingType) + "ApiHelper";, + BeanDefinition helperBD
[+++ b/gradle.properties, +springSecurityVersion=3.2.9.RELEASE, +httpComponentsVersion=4.3.6, +aspectjVersion=1.8.5, +springVersion=4.1.8.RELEASE, +springSnapshotVersion=latest.integration, +hamcrestVersion=1.3, +version=1.1.5.BUILD-SNAPSHOT, +jacksonVersion=2.6.1, +jspApiVersion=2.2.1, +mockitoVersion=1.10.19, +javaxInjectVersion=1]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/src/reference/docbook/apis.xml, +List<ServiceProviderConnection<FacebookApi>> connections = connectionRepository.findConnectionsToProvider("facebook");, +FacebookApi facebookApi = connections.get(0).getServiceApi();]]>, +++ b/docs/src/reference/docbook/apis.xml, +List<ServiceProviderConnection<FacebookApi>> connections = connectionRepository.findConnectionsToProvider("facebook");, +FacebookApi facebookApi = connections.get(0).getServiceApi();]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceApiAdapter.java, +++ b/docs/src/reference/docbook/apis.xml, +List<ServiceProviderConnection<FacebookApi>> connections = connectionRepository.findConnectionsToProvider("facebook");, +FacebookApi facebookApi = connections.get(0).getServiceApi();]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceApiAdapter.java, +++ /dev/null, +++ b/docs/src/reference/docbook/apis.xml, +List<ServiceProviderConnection<FacebookApi>> connections = connectionRepository.findConnectionsToProvider("facebook");, +FacebookApi facebookApi = connections.get(0).getServiceApi();]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceApiAdapter.java, +++ /dev/null, +++ /dev/null, +++ b/docs/src/reference/docbook/apis.xml, +List<ServiceProviderConnection<FacebookApi>> connections = connectionRepository.findConnectionsToProvider("facebook");, +FacebookApi facebookApi = connections.get(0).getServiceApi();]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceApiAdapter.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/docs/src/reference/docbook/apis.xml, +List<ServiceProviderConnection<FacebookApi>> connections = connectionRepository.findConnectionsToProvider("facebook");, +FacebookApi facebookApi = connections.get(0).getServiceApi();]]>, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceApiAdapter.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderUserSignInAttempt.java, +/*, + * Copyright 2011 the original author or
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + /**, + * Process an error callback from an OAuth 2 authorization as described at http://tools.ietf.org/html/rfc6749#section-4.1.2.1., + * Called after upon redirect from an OAuth 2 provider when there is some sort of error during authorization, typically because the user denied authorization., + * Simply carries the error parameters through to the sign-in page., + */, + @RequestMapping(value="/{providerId}", method=RequestMethod.GET, params="error"), + public RedirectView oauth2ErrorCallback(@PathVariable String providerId, , + @RequestParam("error") String error, , + @RequestParam(value="error_description", required=false) String errorDescription,, + @RequestParam(value="error_uri", required=false) String errorUri,, + NativeWebRequest request) {, + logger.warn("Error during authorization: " + error);, + URIBuilder uriBuilder
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, NativeWebRequest)}, + * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, NativeWebRequest)}., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, NativeWebRequest)}, + * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, NativeWebRequest)}., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/SignInAdapter.java, + * @param request a reference to the current web request; is a "native" web request instance providing access to the native]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <title>Service provider 'connect' framework</title>]
[+++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/ShowcaseController.java, + FacebookProfile userProfile = facebookProvider.getConnections(1).get(0).getServiceApi().getUserProfile();, + facebookProvider.getConnections(1).get(0).getServiceApi().updateStatus(message);, +++ b/build.gradle, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/samples/facebook-showcase-2/pom.xml, +
[+++ b/build.gradle, + springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/build.gradle, + springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FeedOperations.java, +import org.springframework.social.facebook.types.LinkPost;, +import org.springframework.social.facebook.types.NotePost;, +import org.springframework.social.facebook.types.Post;, +import org.springframework.social.facebook.types.StatusPost;, + * @return a list of {@link Post}s for the authenticated user. , + List<Post> getFeed();, + * @return a list of {@link Post}s for the specified user. , + List<Post> getFeed(String ownerId);, + * @return a list of {@link Post}s from the authenticated user's home feed., + List<Post> getHomeFeed();, + * @return a list of {@link Post}s from the specified user's home feed., + List<Post> getHomeFeed(String userId);, + * @return the requested {@link Post}, + Post getFeedEntry(String entryId);, + * @return a list of
[+++ b/.gitignore, +src/test/java/exploration]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + private String filterProcessesUrl = DEFAULT_FILTER_PROCESSES_URL;, + super(DEFAULT_FILTER_PROCESSES_URL);, + this.filterProcessesUrl = filterProcessesUrl;, + private static final String DEFAULT_FILTER_PROCESSES_URL = "/auth";, +]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, + * @param additionalParameters any additional query parameters to be sent when fetching the request token. Should not be encoded., + * @return a temporary request token use for authorization and exchanged for an access token , + * @param additionalParameters any additional query parameters to be sent when fetching the access token. Should not be encoded. , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, + * @param additionalParameters any additional query parameters to be sent when fetching the request token. Should not be encoded., + * @return a temporary request token use for authorization and exchanged for an access token ,
[+++ b/build.gradle, + compile project (':spring-social-web'), +++ b/build.gradle, + compile project (':spring-social-web'), +++ /dev/null, +++ b/build.gradle, + compile project (':spring-social-web'), +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.ProviderSignInAttempt;, + public SocialAuthenticationFilter(AuthenticationManager authManager, UserIdExtractor userIdExtractor, UsersConnectionRepository usersConnectionRepository, SocialAuthenticationServiceLocator authServiceLocator) {, + protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {, + private Authentication attemptAuthService(final SocialAuthenticationService<?> authService, final HttpServletRequest request, HttpServletResponse response) , + throws SocialAuthenticationRedirectException, AuthenticationException {, + private void addConnection(final SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token, Authentication auth) {, + private Authentication doAuthentication(SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token) {, + addSignInAttempt(request.getSession(), token.getConnection());, + private void addSignInAttempt(HttpSession session, Connection<?>
[+++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/ClientRequest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(),, + headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, + HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, + ResponseEntity<MultiValueMap> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, MultiValueMap.class);, + // testing hooks, + RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(),, + headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, + HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, + ResponseEntity<MultiValueMap> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, MultiValueMap.class);, + // testing hooks, + RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + Map<String, ?> result = restTemplate.postForObject(accessTokenUrl, requestParameters, Map.class);, + // testing hooks, + RestTemplate getRestTemplate() {, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + private static void setInterceptor(RestTemplate client, Object interceptor) {, + interceptors.add((ClientHttpRequestInterceptor) interceptor);, + setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { (ClientHttpRequestInterceptor) interceptor }});, + if (interceptorsSupported) {, + }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + private static void setInterceptor(RestTemplate client, Object interceptor) {, + interceptors.add((ClientHttpRequestInterceptor) interceptor);, + setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { (ClientHttpRequestInterceptor) interceptor }});, + if (interceptorsSupported) {, + }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, + private static void setInterceptor(RestTemplate client, Object interceptor) {, + interceptors.add((ClientHttpRequestInterceptor) interceptor);, + setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { (ClientHttpRequestInterceptor) interceptor }});, + if (interceptorsSupported) {, + }]
[+++ b/docs/src/reference/docbook/signin.xml, +import org.springframework.social.web.signin.SignInService;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, + private final OAuth10Operations oauth1Operations;, +, + public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, + String consumerSecret, OAuth10Operations oauth1Operations) {, + super(id, connectionRepository, consumerKey, consumerSecret);, + this.oauth1Operations = oauth1Operations;, + }, +, + public OAuth10Operations getOAuth10Operations() {, + return oauth1Operations;, + }, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth10ServiceProvider.java, +package org.springframework.social.connect.oauth1;, +, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.oauth1.OAuth10Operations;, +, +public abstract class AbstractOAuth10ServiceProvider<S> extends AbstractOAuth1ServiceProvider<S> implements OAuth10ServiceProvider<S> {, +, + private final OAuth10Operations oauth1Operations;, +, + public AbstractOAuth10ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey,, +
[+++ b/.gitignore, +spring-social-core/src/test/java/exploration, +++ b/.gitignore, +spring-social-core/src/test/java/exploration, +++ b/spring-social-core/src/test/java/org/springframework/social/twitter/TwitterTemplateTest.java, + @SuppressWarnings("unchecked")]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/src/reference/docbook/implementing.xml, + Each request made to the API's "resource server" needs to be signed with the authorization credentials provided during construction., + <para>, + Spring Social includes a framework for testing API bindings in the spring-social-test module., + This framework consists of a "MockRestServiceServer" that can be used to mock out API calls to the remote service provider., + This allows for the development of independent, performant, automated unit tests that verify client API binding and object mapping behavior., + </para>, + <para>, + To use, first create a MockRestServiceServer against the RestTemplate instance used by your API
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.util.HashMap;, +import org.springframework.web.bind.annotation.RequestParam;, + * Process an error callback from an OAuth 2 authorization as described at http://tools.ietf.org/html/rfc6749#section-4.1.2.1., + * Called after upon redirect from an OAuth 2 provider when there is some sort of error during authorization, typically because the user denied authorization., + */, + @RequestMapping(value="/{providerId}", method=RequestMethod.GET, params="error"), + public RedirectView oauth2ErrorCallback(@PathVariable String providerId, , + @RequestParam("error") String error, , + @RequestParam(value="error_description", required=false) String errorDescription,, + @RequestParam(value="error_uri", required=false) String errorUri,, + NativeWebRequest request) {, + Map<String, String> errorMap = new HashMap<String, String>();, + errorMap.put("error", error);, + if (errorDescription != null) { errorMap.put("errorDescription", errorDescription); },
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +import java.io.Serializable;, +, +@SuppressWarnings("serial"), +public final class ConnectionKey implements Serializable {]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + try {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + try {, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, + public void signIn_nonExistentProvider() throws Exception {, + ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, + ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, + connectionFactoryLocator.addConnectionFactory(connectionFactory1);, + StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, + usersConnectionRepository.createConnectionRepository("habuma").addConnection(connectionFactory1.createConnection(, + new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, + ProviderSignInController providerSignInController = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null);, + providerSignInController.afterPropertiesSet();, + MockMvc mockMvc
[+++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, + , + /**, + * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., + * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., + * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., + */, + String connectionSignUpRef() default "";, + , +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, + , + /**, + * Reference
[+++ b/pom.xml, + , + <optional>true</optional>, + <optional>true</optional>]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + The application exchanges the authorization grant for an access grant., + The service provider issues the access grant to the application., + The application uses the AccessGrant to establish a connection between the local user account and the external provider account., + With the connection established, the application can now obtain reference to the Service API and invoke the provider on behalf of the user., + OAuth 1 is the previous version of the OAuth protocol., + It is more complex OAuth 2, and sufficiently different that it is supported separately., + Twitter, Linked In, and
[+++ b/docs/src/reference/docbook/implementing.xml, + <para>Create an ApiAdapter that maps the provider's native API onto the uniform Connection model e.g. <code>TwitterAdapter</code>.</para>, + Consider <code>org.springframework.social.twitter.connect.TwitterAdapter</code> as an example implementation:, +public class TwitterAdapter implements ApiAdapter<Twitter> {, + Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the clientId/clientSecret, and a new {Provider}Adapter instance. , + super("facebook", new FacebookServiceProvider(clientId, clientSecret), new FacebookAdapter());, + Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the consumerKey/consumerSecret, and a new {Provider}Adapter instance. , + super("twitter", new TwitterServiceProvider(consumerKey, consumerSecret), new TwitterAdapter());, +++ b/docs/src/reference/docbook/implementing.xml, +
[+++ b/build.gradle, + , +++ b/build.gradle, + , +++ b/settings.gradle, +++ b/build.gradle, + , +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProvider.java, + * A label suitable for display in a UI, typically used to inform the user which service providers he or she has connected with / may connect with. e.g. Twitter., + */, + String getDisplayName();, +, + /**, + * @throws IllegalStateException if no connections have been established between the account and this provider, +++ b/build.gradle, + , +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProvider.java, + * A label suitable for display in a UI, typically used to inform the user which service
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, + private BeanDefinition registerAuthenticationServiceBean(BeanDefinition authenticationServiceLocatorBD, , + BeanDefinition authenticationServiceBD, , + Class<? extends org.springframework.social.security.provider.SocialAuthenticationService<?>> socialAuthenticationServiceClass) {, + private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, , + Class<?> apiBindingType,Map<String, Object> allAttributes) {, + BeanDefinitionHolder scopedProxyBDH = ScopedProxyUtils.createScopedProxy(, + new BeanDefinitionHolder(bindingBD, ClassUtils.getShortNameAsProperty(apiBindingType)), registry, false);, + * @param allAttributes additional attributes that may be used when creating the API helper bean., + * @return a {@link BeanDefinitionBuilder} for the API Helper, + return BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass), + .addConstructorArgReference("usersConnectionRepository"), + .addConstructorArgReference("userIdSource");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + authorizeUrl.append('&').append("oauth_callback").append("=").append(formEncode(callbackUrl));, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + authorizeUrl.append('&').append("oauth_callback").append("=").append(formEncode(callbackUrl));, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.social.test.client.RequestMatchers.*;, +import static org.springframework.social.test.client.ResponseCreators.*;, + assertEquals("https://www.someprovider.com/oauth/authorize?oauth_token=request_token&oauth_callback=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback",]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1SigningRequestFactory.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + Map<String, String> requestParameters = new HashMap<String, String>();, + requestParameters.put("client_id", clientId);, + requestParameters.put("client_secret", clientSecret);, + requestParameters.put("code", authorizationCode);, + requestParameters.put("redirect_uri", redirectUri);, + requestParameters.put("grant_type", "authorization_code");, + Map<String, String> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, + return new AccessGrant(result.get("access_token"), result.get("refresh_token"));, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + Map<String, String> requestParameters = new HashMap<String, String>();, + requestParameters.put("client_id", clientId);,
[+++ b/pom.xml, + <!-- Spring Security OAuth --> , + <dependency>, + <groupId>org.springframework.security.oauth</groupId>, + <artifactId>spring-security-oauth</artifactId>, + <version>1.0.0.BUILD-SNAPSHOT</version>, + <optional>true</optional>, + </dependency>, +, + <version>1.0.6</version>, +++ b/pom.xml, + <!-- Spring Security OAuth --> , + <dependency>, + <groupId>org.springframework.security.oauth</groupId>, + <artifactId>spring-security-oauth</artifactId>, + <version>1.0.0.BUILD-SNAPSHOT</version>, + <optional>true</optional>, + </dependency>, +, + <version>1.0.6</version>, +++ b/src/main/java/org/springframework/social/greenhouse/GreenhouseTemplate.java, +import org.springframework.social.oauth1.OAuth1RequestSignerFactory;, + OAuth1RequestSignerFactory.getRequestSigner(apiKey, apiSecret, accessToken, accessTokenSecret)));, +++ b/pom.xml, + <!-- Spring Security OAuth --> , + <dependency>, + <groupId>org.springframework.security.oauth</groupId>, + <artifactId>spring-security-oauth</artifactId>, + <version>1.0.0.BUILD-SNAPSHOT</version>, + <optional>true</optional>, + </dependency>, +, + <version>1.0.6</version>, +++ b/src/main/java/org/springframework/social/greenhouse/GreenhouseTemplate.java, +import org.springframework.social.oauth1.OAuth1RequestSignerFactory;, + OAuth1RequestSignerFactory.getRequestSigner(apiKey, apiSecret, accessToken, accessTokenSecret)));, +++ b/src/main/java/org/springframework/social/linkedin/LinkedInTemplate.java, +import org.springframework.social.oauth1.OAuth1RequestSignerFactory;, + OAuth1RequestSignerFactory.getRequestSigner(apiKey, apiSecret, accessToken, accessTokenSecret)));,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, + * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJackson2HttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., + * Returns a {@link MappingJackson2HttpMessageConverter} to be used by the internal {@link RestTemplate}., + protected MappingJackson2HttpMessageConverter getJsonMessageConverter() {, + return new MappingJackson2HttpMessageConverter(); , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, + * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJackson2HttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., + * Returns a {@link MappingJackson2HttpMessageConverter} to be used by the internal {@link RestTemplate}., + protected MappingJackson2HttpMessageConverter getJsonMessageConverter() {, + return new MappingJackson2HttpMessageConverter(); , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.util.Assert;, + Assert.notNull(consumerKey, "Constructor argument 'consumerKey' cannot be null.");, + Assert.notNull(consumerSecret, "Constructor argument 'consumerSecret' cannot be null.");, + Assert.notNull(accessToken, "Constructor argument 'accessToken' cannot be null.");, + Assert.notNull(accessTokenSecret, "Constructor argument 'accessTokenSecret' cannot be null.");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.util.Assert;, + Assert.notNull(consumerKey, "Constructor argument 'consumerKey' cannot be null.");, + Assert.notNull(consumerSecret, "Constructor argument 'consumerSecret' cannot be null.");, + Assert.notNull(accessToken, "Constructor argument 'accessToken' cannot be null.");, + Assert.notNull(accessTokenSecret, "Constructor argument 'accessTokenSecret' cannot be null.");, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/AbstractOAuth1ApiBindingTest.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + *
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderRegistry.java, + <P extends ServiceProvider<S>, S> P getServiceProvider(String providerId, Class<P> providerClass);, + , + <P extends ServiceProvider<S>, S> P getServiceProvider(Class<P> providerClass);, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderRegistry.java, + <P extends ServiceProvider<S>, S> P getServiceProvider(String providerId, Class<P> providerClass);, + , + <P extends ServiceProvider<S>, S> P getServiceProvider(Class<P> providerClass);, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderRegistry.java, + <P extends ServiceProvider<S>, S> P getServiceProvider(String providerId, Class<P> providerClass);, + , + <P extends ServiceProvider<S>, S> P getServiceProvider(Class<P> providerClass);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderRegistry.java, + <P extends ServiceProvider<S>, S> P getServiceProvider(String providerId, Class<P> providerClass);, + , + <P extends
[+++ b/docs/src/api/overview.html, + support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top">SpringSource.com</a>., +++ b/docs/src/api/overview.html, + support for Spring Social, please visit <a href="http://www.springsource.com/" target="_top">SpringSource.com</a>., +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionVersion=0.9-build-daemon-20101027111821+1100]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/api/AbstractFacebookApiTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookServiceProvider.java, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookServiceProvider.java, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookServiceProvider.java, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookServiceProvider.java, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookServiceProvider.java, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/build.gradle, + springSecurityVersion = '3.1.0.CI-SNAPSHOT', + compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { provided = true }, +++ b/build.gradle, + springSecurityVersion = '3.1.0.CI-SNAPSHOT', + compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { provided = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * Useful as a strongly-typed alternative to {@link #isConnected(String)}., +++ b/build.gradle, + springSecurityVersion = '3.1.0.CI-SNAPSHOT', + compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { provided = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * Useful as a strongly-typed alternative to {@link #isConnected(String)}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, +import org.springframework.security.crypto.codec.Base64;, + signatureBytes = Base64.encode(signatureBytes);, +++ b/build.gradle, + springSecurityVersion = '3.1.0.CI-SNAPSHOT', + compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { provided = true }, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * Useful as a strongly-typed alternative to {@link
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth1Connection.java, + private transient final OAuth1ServiceProvider<A> serviceProvider;, + private transient A api;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, + * @see MissingAuthorizationException, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, + * @see MissingAuthorizationException, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the authorization presented to the server is invalid., + * It could be wrong or corrupt, or it could have been revoked by the authorization server., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, + * @see MissingAuthorizationException, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, + * Copyright 2011 the original author or authors., + * Exception indicating that the authorization presented to the server is invalid., + * It could be wrong or corrupt, or it could have been revoked by
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + try {, + } catch (Exception e) {, + return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, + }, + try {, + } catch (Exception e) {, + return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, + }, + return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, + private static final String PROVIDER_ERROR_ATTRIBUTE = "social.provider.error";, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + try {, + } catch (Exception e) {, + return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, + }, + try {, + } catch (Exception e) {, + return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, + }, + return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, + private static final String PROVIDER_ERROR_ATTRIBUTE = "social.provider.error";, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +import
[+++ b/build.gradle, + ext.javadocLinks = [, + "http://docs.oracle.com/javase/7/docs/api/",, + "http://docs.oracle.com/javaee/7/api/",, + "http://docs.spring.io/spring/docs/${springVersion}/javadoc-api/",, + "http://docs.jboss.org/jbossas/javadoc/4.0.5/connector/", + ] as String[], +, + description = "Generates project-level javadoc for use in -javadoc jar", +, + options.links(project.ext.javadocLinks), + if (JavaVersion.current().isJava8Compatible()) {, + options.addStringOption('Xdoclint:none', '-quiet'), + }, + if (JavaVersion.current().isJava8Compatible()) {, + options.addStringOption('Xdoclint:none', '-quiet'), + }, +++ b/build.gradle, + ext.javadocLinks = [, + "http://docs.oracle.com/javase/7/docs/api/",, + "http://docs.oracle.com/javaee/7/api/",, + "http://docs.spring.io/spring/docs/${springVersion}/javadoc-api/",, + "http://docs.jboss.org/jbossas/javadoc/4.0.5/connector/", + ] as String[], +, + description = "Generates project-level javadoc for use in -javadoc jar", +, + options.links(project.ext.javadocLinks), + if (JavaVersion.current().isJava8Compatible()) {, + options.addStringOption('Xdoclint:none', '-quiet'), + }, + if (JavaVersion.current().isJava8Compatible()) {, + options.addStringOption('Xdoclint:none',
[+++ b/.gitignore, +++ b/.gitignore, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/build.gradle, + gradleVersion = '1.10', +++ b/build.gradle, + gradleVersion = '1.10', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + gradleVersion = '1.10', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Dec 18 14:42:30 CST 2013, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.10-bin.zip, +++ b/build.gradle, + gradleVersion = '1.10', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Dec 18 14:42:30 CST 2013, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.10-bin.zip, +++ b/gradlew, +#!/usr/bin/env bash, +cd "`dirname \"$PRG\"`/" >&-, +cd "$SAVED" >&-]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + private String providerId;, +, + public ApiException(String providerId, String message) {, + this.providerId = providerId;, + public ApiException(String providerId, String message, Throwable cause) {, + /**, + * The ID of the provider for which the API exception occurred., + */, + public String getProviderId() {, + return providerId;, + }, +, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + private String providerId;, +, + public ApiException(String providerId, String message) {, + this.providerId = providerId;, + public ApiException(String providerId, String message, Throwable cause) {, + /**, + * The ID of the provider for which the API exception occurred., + */,
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +package org.springframework.social.connect.web;, +, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.Set;, +, +import org.junit.Test;, +import org.mockito.ArgumentMatcher;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionData;, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.connect.UsersConnectionRepository;, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth1ConnectionFactory;, +import org.springframework.social.connect.support.OAuth2Connection;, +import org.springframework.social.connect.support.OAuth2ConnectionFactory;, +import org.springframework.social.oauth1.AuthorizedRequestToken;, +import org.springframework.social.oauth1.OAuth1Operations;, +import org.springframework.social.oauth1.OAuth1Parameters;, +import org.springframework.social.oauth1.OAuth1ServiceProvider;, +import org.springframework.social.oauth1.OAuth1Version;, +import org.springframework.social.oauth1.OAuthToken;, +import org.springframework.social.oauth2.AccessGrant;, +import org.springframework.social.oauth2.GrantType;, +import org.springframework.social.oauth2.OAuth2Operations;, +import org.springframework.social.oauth2.OAuth2Parameters;, +import org.springframework.social.oauth2.OAuth2ServiceProvider;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.context.request.NativeWebRequest;, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.context.request.ServletWebRequest;, +import org.springframework.web.servlet.view.RedirectView;, +, +public class ProviderSignInControllerTest {, +, + @Test, + public void oauth1Callback_noMatchingUser() {, + ConnectionFactoryLocator connectionFactoryLocator = new TestConnectionFactoryLocator();,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + for (Iterator<Entry<String, List<String>>> additionalParams = additionalParameters.entrySet().iterator(); additionalParams.hasNext();) {, + MultiValueMap<String, String> customAuthorizeParameters = getCustomAuthorizationParameters();, + if (customAuthorizeParameters == null) {, + if(clientAdditionalParameters != null) {, + customAuthorizeParameters.putAll(clientAdditionalParameters);, + }, + return customAuthorizeParameters;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + for (Iterator<Entry<String, List<String>>> additionalParams = additionalParameters.entrySet().iterator(); additionalParams.hasNext();) {, + MultiValueMap<String, String> customAuthorizeParameters = getCustomAuthorizationParameters();, + if (customAuthorizeParameters == null) {, + if(clientAdditionalParameters != null) {, + customAuthorizeParameters.putAll(clientAdditionalParameters);, + }, + return customAuthorizeParameters;, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.social.test.client.RequestMatchers.*;, +import static org.springframework.social.test.client.ResponseCreators.*;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + private OAuth1Template customOauth10;, +, +, + customOauth10 = new OAuth1Template("consumer_key",
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 3 (Apr 27, 2011), + * New ProviderSignInController for signing into an application by first, + signing into a provider such as Twitter or Facebook, + * Now supports use in an Android environment and integrated with Spring , + Android project as of its 1.0.0.M3 release., + * The ability to test a connection and refresh an expired connection, + * The ability to update status across connections in a uniform way, + * The ability to access user profile data on a connection in a uniform way, + and use it
[+++ b/gradle.properties, +springSocialVersion=1.0.1.RELEASE, +role=buildmaster]
[+++ b/docs/src/info/changelog.txt, +Known Issues:, + * SPR-8002: ProviderSignAttempt session-scoped objects not serializable due to javax.inject.Provider serialization issue., +, +++ b/docs/src/info/changelog.txt, +Known Issues:, + * SPR-8002: ProviderSignAttempt session-scoped objects not serializable due to javax.inject.Provider serialization issue., +, +++ b/docs/src/info/readme.txt, +Spring Social, +-----------------------------------------------------------, +The Spring Social project allows you to integrate the APIs exposed by Software-as-a-Service (SaaS) providers such as Facebook and Twitter into your applications., +It consists of a service provider 'connect' framework, sign-in support, and strongly-typed Java API bindings., +To find out what has changed in this release, see 'changelog.txt', +Please consult the documentation located within the 'docs/reference' directory
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + The application redirects the user to the provider's authorization page, passing the request token as a parameter., + The service provider prompts the user to authorize the consumer application and the user agrees., + The service provider redirects the user's browser back to the application (via the callback URL)., + The application exchanges the authorized request token (including the verifier in OAuth 1.0a) for an access token., + The service provider issues an access token to the consumer. The "dance" is now complete.]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <para>Spring Social's service provider framework handles the details of authorization with a service. Once authorization has been granted, a connection is created between the user's local application account and the authorization credentials. This connection is persisted for future use, so that the user won't need to re-authorize the application as long as the credentials are still valid.</para>, + , + <para>The central concept in the service provider framework is the service provider. A service provider represents a service that the application wants to interact with on its users' behalf. The service provider maintains the applications own
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentApi.java, +import org.springframework.social.facebook.types.Comment;, +import org.springframework.social.facebook.types.Reference;, +, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentApi.java, +import org.springframework.social.facebook.types.Comment;, +import org.springframework.social.facebook.types.Reference;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentApi.java, +import org.springframework.social.facebook.types.Comment;, +import org.springframework.social.facebook.types.Reference;, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinApi.java, +import org.springframework.social.facebook.types.Checkin;, +, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentApi.java,
[+++ b/build.gradle, + compile project (':spring-social-core'), + compile project (':spring-social-security', optional), + compile project (':spring-social-core'), +++ b/build.gradle, + compile project (':spring-social-core'), + compile project (':spring-social-security', optional), + compile project (':spring-social-core'), +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ProviderConfigRegistrarSupport.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.social.security.provider.SocialAuthenticationService;, + private final static Log logger = LogFactory.getLog(ProviderConfigRegistrarSupport.class);, +, + public ProviderConfigRegistrarSupport(Class<? extends Annotation> providerConfigAnnotation, Class<? extends ConnectionFactory<?>> connectionFactoryClass, , + String socialAuthenticationServiceClassName, Class<? extends ApiHelper<?>> apiHelperClass) {, + // TODO: Does the above signature create a hard dependency on social security???, + this.socialAuthenticationServiceClassName = socialAuthenticationServiceClassName;, + , + if (isSocialSecurityAvailable() && socialAuthenticationServiceClassName != null) {, + registerAuthenticationServiceBeanDefinitions(registry, allAttributes); , +
[+++ b/docs/src/reference/docbook/overview.xml, + <version>3.1.0.RC2.crypto</version>, + , + <note>, + <para>, + Between Spring Security versions 3.1.0.RC1 and 3.1.0.RC2 the crypto module was merged into Spring Security's core module., + Unfortunately, this would mean that even if you only need the functionality of the crypto module, you'd need to depend on the core module., + To avoid the unnecessary dependency on the core module, Spring Security 3.1.0.RC3 will once again have a separate crypto module., + </para>, + <para>, + At the time that this reference documentation is being written, Spring Security 3.1.0.RC3 has not yet been released., + So
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.2 Release (January ??, 2011), +==============================================, +Bug Fixes, + * Handle errors from provider during connection/sign-in process more gracefully. (SOCIAL-280), + * Properly set valuesInitialized flag in AbstractConnection after a profile has been set the first, + time to avoid unnecessary fetches from the provider. (SOCIAL-282), + * Guard against potential NullPointerException in JdbcConnectionRepository.findConnectionToUsers()., + (SOCIAL-283), +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + this(providerId, message, null);, + this.providerId = providerId;]
[+++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/connect/LinkedInConnectionFactory.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + HttpServletRequest servletRequest = request.getNativeRequest(HttpServletRequest.class);, + String path = "/connect/" + providerId + getPathExtension(servletRequest);, + if (prependServletPath(servletRequest)) {, + path = servletRequest.getServletPath() + path;, + private String getPathExtension(HttpServletRequest request) {, + String fileName = WebUtils.extractFullFilenameFromUrlPath(request.getRequestURI()); ]
[+++ b/spring-social-core/src/test/resources/org/springframework/social/connect/jdbc/Schema.sql, +create table Connection (id identity,, + accountId varchar not null,, + providerId varchar not null,, + accessToken varchar not null, , + secret varchar, , + refreshToken varchar,, + primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/spring-social-core/src/test/resources/org/springframework/social/connect/jdbc/Schema.sql, +create table Connection (id identity,, + accountId varchar not null,, + providerId varchar not null,, + accessToken varchar not null, , + secret varchar, , + refreshToken varchar,, + primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, + String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef) {, + registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, + String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +, + BeanDefinition usersConnectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), + .addConstructorArgReference(encryptorRef), + .getBeanDefinition();, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, + registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, + String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef) {, + registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId,
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors.,
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentTemplate.java, +import org.springframework.social.facebook.support.json.ReferenceList;, + return graphApi.fetchConnections(objectId, "likes", ReferenceList.class).getList();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CommentTemplate.java, +import org.springframework.social.facebook.support.json.ReferenceList;, + return graphApi.fetchConnections(objectId, "likes", ReferenceList.class).getList();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/EventInviteeMixin.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import javax.servlet.http.HttpServletResponse;, + public String connectionStatus(NativeWebRequest request, Model model) {, + setNoCache(request);, + public String connectionStatus(@PathVariable String providerId, NativeWebRequest request, Model model) {, + setNoCache(request);, + private void setNoCache(NativeWebRequest request) {, + HttpServletResponse response = request.getNativeResponse(HttpServletResponse.class);, + if (response != null) {, + response.addHeader("Cache-Control", "no-cache");, + }, + }, +]
[+++ b/gradle.properties, +h2Version=1.3.176, +springSecurityVersion=3.2.9.RELEASE, +httpComponentsVersion=4.3.6, +++ b/gradle.properties, +h2Version=1.3.176, +springSecurityVersion=3.2.9.RELEASE, +httpComponentsVersion=4.3.6, +++ b/spring-social-core/src/main/java/org/springframework/social/support/ClientHttpRequestFactorySelector.java, +import java.security.KeyManagementException;, +import java.security.KeyStore;, +import java.security.KeyStoreException;, +import java.security.NoSuchAlgorithmException;, +import org.apache.http.conn.ssl.SSLContexts;, + return HttpClients.custom(), + .setProxy(proxy), + .setSslcontext(getSSLContext()), + .setHostnameVerifier(SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER), + .build();, + }, +, + private static SSLContext getSSLContext() {, + KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());, + TrustStrategy allTrust = new TrustStrategy() {, + @Override, + };, + return SSLContexts.custom().useSSL().loadTrustMaterial(trustStore, allTrust).build();, + } catch (KeyStoreException e) {, + e.printStackTrace();, + } catch (KeyManagementException e) {, + e.printStackTrace();, + } catch (NoSuchAlgorithmException e) {, + e.printStackTrace();, + return null;]
[+++ b/docs/src/reference/docbook/implementing.xml, + By now, you should have a API binding to the provider's API, a ServiceProvider&lt;A&gt; implementation for conducting the "authorization dance", and an ApiAdapter&lt;A&gt; implementation for mapping onto the uniform Connection model., + Create a subclass of OAuth2ConnectionFactory&lt;A&gt; named {ProviderId}ConnectionFactory and parameterize A to be the Java binding to the service provider's API., + Create a subclass of OAuth1ConnectionFactory&lt;A&gt; named {ProviderId}ConnectionFactory and parameterize A to be the Java binding to the service provider's API.]
[+++ b/.gitignore, +.idea, +++ b/.gitignore, +.idea, +++ b/build.gradle, + testCompile("org.springframework:spring-aop:${springVersion}"), + testCompile("org.aspectj:aspectjrt:${aspectjVersion}"), + testCompile("org.aspectj:aspectjweaver:${aspectjVersion}"), +++ b/.gitignore, +.idea, +++ b/build.gradle, + testCompile("org.springframework:spring-aop:${springVersion}"), + testCompile("org.aspectj:aspectjrt:${aspectjVersion}"), + testCompile("org.aspectj:aspectjweaver:${aspectjVersion}"), +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson; Greg Turnquist, +[[section_creatingAProviderProject]], +=== Extending an existing Service Provider, +, +Are you already using an existing provider like Spring Social GitHub? You may run into the situation where the Spring Social API doesn't cover every operation you need. Or you may wish to apply extra behavior like caching certain operations. This section explores extension points Spring Social's core includes., +, +[[]], +==== Adding extra operations, +,
[+++ b/.gitignore, +exploration, +++ b/.gitignore, +exploration, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Version.java, + return "Bearer " + accessToken;, +++ b/.gitignore, +exploration, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Version.java, + return "Bearer " + accessToken;, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2RequestInterceptorTest.java, +import static org.junit.Assert.*;, + assertThatInterceptorWritesAuthorizationHeader(interceptor, "Bearer access_token");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/AbstractProviderConfigRegistrarSupport.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/samples/spring-social-showcase/pom.xml, + <!-- For Hibernate Validator -->, + <repository>, + <id>org.jboss.repository.releases</id>, + <name>JBoss Maven Release Repository</name>, + <url>http://repository.jboss.org/nexus/content/repositories/releases</url>, + <snapshots><enabled>false</enabled></snapshots>, + </repository>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/src/reference/docbook/overview.xml, + <url>http://repo.springsource.org/libs-milestone-local</url>, + <url>http://repo.springsource.org/libs-snapshot-local</url>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + @SuppressWarnings("rawtypes"), + ResponseEntity<MultiValueMap> response = getRestOperations().exchange(tokenUrl, HttpMethod.POST, request,, + MultiValueMap.class);, + @SuppressWarnings("unchecked"), + MultiValueMap<String, String> responseMap = response.getBody();, + return new OAuthToken(responseMap.getFirst("oauth_token"), responseMap.getFirst("oauth_token_secret"));, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + @SuppressWarnings("rawtypes"), + ResponseEntity<MultiValueMap> response = getRestOperations().exchange(tokenUrl, HttpMethod.POST, request,, + MultiValueMap.class);, + @SuppressWarnings("unchecked"), + MultiValueMap<String, String> responseMap = response.getBody();, + return new OAuthToken(responseMap.getFirst("oauth_token"), responseMap.getFirst("oauth_token_secret"));, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import static org.springframework.web.client.test.ResponseCreators.*;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.client.test.MockRestServiceServer;, + MockRestServiceServer mockServer = MockRestServiceServer.createServer((RestTemplate) oauth1.getRestOperations());, + HttpHeaders responseHeaders = new HttpHeaders();, + responseHeaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);, + mockServer.expect(requestTo("https://www.someprovider.com/oauth/requestToken")), + .andExpect(method(POST)), + .andExpect(headerContains("Authorization", "oauth_callback=\"http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback\"")), + .andExpect(headerContains("Authorization", "oauth_version=\"1.0\"")), + .andExpect(headerContains("Authorization",
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters);, + String buildAuthorizeUrl(String requestToken, OAuth1Parameters parameters);]
[+++ b/docs/src/reference/docbook/apis.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="apis", + xmlns:xlink="http://www.w3.org/1999/xlink">, + <title>Interacting with social APIs</title>, + , + <section xml:id="section_api_introduction">, + <title>Introduction</title>, + </section>, + , + <section xml:id="section_api_facebook">, + <title>Facebook</title>, +, + <para>Spring Social's <interfacename>FacebookOperations</interfacename> and its implementation, <classname>FacebookTemplate</classname> provider the operations needed to interact with Facebook on behalf of a user.</para>, +, + <para>Creating an instance of <classname>FacebookTemplate</classname> is as simple as constructing it by passing in an authorized access token to the constructor:</para>, +, + <programlisting><![CDATA[String accessToken = "f8FX29g..."; // access token received from Facebook after OAuth authorization, + FacebookOperations facebook = new FacebookTemplate(accessToken);]]></programlisting>, +,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * AuthorizationCode denotes the server-side authorization flow, and is, + AuthorizationCode,, + * ImplicitGrant denotes the client-side authorization flow and is, + ImplicitGrant, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * AuthorizationCode denotes the server-side authorization flow, and is, + AuthorizationCode,, + * ImplicitGrant denotes the client-side authorization flow and is, + ImplicitGrant, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + if (grantType == GrantType.AuthorizationCode) {, + } else if (grantType == GrantType.ImplicitGrant) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * AuthorizationCode denotes the server-side authorization flow, and is, + AuthorizationCode,, + * ImplicitGrant denotes the client-side authorization flow and is, + ImplicitGrant, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + if (grantType
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + return new OAuthToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"));, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + return new OAuthToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"));, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + return new AccessGrant((String) result.get("access_token"), (String) result.get("scope"), (String) result.get("refresh_token"), (Integer) result.get("expires_in"));]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.beans.factory.support.ManagedList;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +/**, + * Abstract bean definition parser for declaring {@link ConnectionFactory}s in a Spring application context., + * Automatically creates a {@link ConnectionFactoryLocator} bean if none exists and registers the {@link ConnectionFactory} bean with the {@link ConnectionFactoryLocator}., + * @author Craig Walls, + */, +abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +, + private Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +, + /**, + * Constructs a connection factory-creating {@link BeanDefinitionParser}., + * @param connectionFactoryClass The type of {@link ConnectionFactory} to create. Must have a two-argument constructor taking an application's ID and secret as Strings., +
[+++ b/build.gradle, +project('spring-social-config') {, + description = 'Configuration Namespace', + dependencies {, + compile "org.springframework:spring-beans:$springVersion", + compile project(':spring-social-core'), + testCompile project(':spring-social-facebook'), + testCompile project(':spring-social-twitter'), + testCompile "com.h2database:h2:1.2.143", + testCompile project(':spring-social-core').sourceSets.test.classes, + }, +}, +, +++ b/build.gradle, +project('spring-social-config') {, + description = 'Configuration Namespace', + dependencies {, + compile "org.springframework:spring-beans:$springVersion", + compile project(':spring-social-core'), + testCompile project(':spring-social-facebook'), + testCompile project(':spring-social-twitter'), + testCompile "com.h2database:h2:1.2.143", + testCompile project(':spring-social-core').sourceSets.test.classes, + }, +}, +, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/build.gradle, +project('spring-social-config') {, + description = 'Configuration Namespace', + dependencies {, + compile "org.springframework:spring-beans:$springVersion", + compile project(':spring-social-core'), + testCompile project(':spring-social-facebook'), + testCompile project(':spring-social-twitter'), + testCompile "com.h2database:h2:1.2.143", + testCompile
[+++ b/samples/twitter-showcase/pom.xml, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, + </dependency>, + , + <dependency>, +++ b/samples/twitter-showcase/pom.xml, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, + </dependency>, + , + <dependency>, +++ b/samples/twitter-showcase/src/main/java/org/springframework/social/samples/twitter/TweetController.java, +import org.springframework.social.provider.ServiceProviderConnection;, +, + List<ServiceProviderConnection<TwitterOperations>> connections = twitterProvider.getConnections(1);, + List<String> connectionNames = new ArrayList<String>();, + for (ServiceProviderConnection<TwitterOperations> serviceProviderConnection : connections) {, + connectionNames.add(serviceProviderConnection.getServiceApi().getProfileId());, + }, +, + model.addAttribute("connections", connectionNames);, +, + List<ServiceProviderConnection<TwitterOperations>> connections = twitterProvider.getConnections(1);, + for (ServiceProviderConnection<TwitterOperations> connection : connections) {, + TwitterOperations twitter = connection.getServiceApi();, + if (tweetForm.isTweetToAll() || twitter.getProfileId().equals(tweetForm.getScreenName())) {, + }, +++ b/samples/twitter-showcase/pom.xml, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, + </dependency>, + , + <dependency>,
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <listitem><para>Connection#getApi() would return a TwitterApi giving the client application access to the full capabilities of Twitter's native API.</para></listitem>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, + * @param connectionSignUp a {@link ConnectionSignUp} object]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, + , + // BIG TODO: Can't pass in property placeholders for app-id or app-secret because the connection factory itself is never, + // defined via a BeanDefinition and thus, Spring has no opportunity to perform the replacement of the placeholders., + // Need to create the CF as a bean definition and then register it with the CFL., + , + parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, decorateWithScopedProxy(CONNECTION_FACTORY_LOCATOR_ID, connFactoryLocatorBeanDef, parserContext));, +, + BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID + "_target");, + private BeanDefinition decorateWithScopedProxy(String beanName, BeanDefinition beanDefinition, ParserContext parserContext) {, + BeanDefinitionHolder bdHolder = new BeanDefinitionHolder(beanDefinition, beanName + "_target");,
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableInMemoryConnectionRepository.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, + private final static Log logger = LogFactory.getLog(ConnectController.class);, + , + try {, + } catch (Exception e) {, + logger.warn("Exception while handling OAuth2 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, + }, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, + private final static Log logger = LogFactory.getLog(ConnectController.class);, + , + try {, + } catch (Exception e) {, + logger.warn("Exception while handling OAuth2 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, + }, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import org.apache.commons.logging.Log;, +import
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import javax.servlet.http.HttpServletResponse;, + public String connectionStatus(NativeWebRequest request, Model model) {, + setNoCache(request);, + public String connectionStatus(@PathVariable String providerId, NativeWebRequest request, Model model) {, + setNoCache(request);, + private void setNoCache(NativeWebRequest request) {, + HttpServletResponse response = request.getNativeResponse(HttpServletResponse.class);, + if (response != null) {, + response.addHeader("Cache-Control", "no-cache");, + }, + }, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +import java.io.Serializable;, +, +@SuppressWarnings("serial"), +public final class ConnectionKey implements Serializable {]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import java.util.Collections;, +import org.springframework.social.support.ParameterMap;, +public final class OAuth1Parameters extends ParameterMap {, + * Shared instance for passing zero authorization parameters (common for OAuth 1.0a-based flows)., + * The underlying map is immutable., + * @see Collections#emptyMap(), + public static final OAuth1Parameters NONE = new OAuth1Parameters(Collections.<String, List<String>>emptyMap());, + /**, + * Creates a new OAuth1Parameters map that is initially empty., + * Use the setter methods to add parameters after construction., + * @see #setCallbackUrl(String), + * @see #set(String, String), + */, + public OAuth1Parameters() {, + super();, + }, + , + /**, + * Creates a
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, + String beanId = element.getAttribute("id");, + if(beanId == null || beanId.isEmpty()) {, + beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);, + }, + parserContext.getRegistry().registerBeanDefinition(beanId, providerBeanDefinition);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, + String beanId = element.getAttribute("id");, + if(beanId == null || beanId.isEmpty()) {, + beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);, + }, + parserContext.getRegistry().registerBeanDefinition(beanId, providerBeanDefinition);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, + <xsd:attribute name="id" type="xsd:string">, + <xsd:annotation>, + <xsd:documentation>, + The bean ID, + </xsd:documentation>, + </xsd:annotation>, + </xsd:attribute>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, + String beanId = element.getAttribute("id");, + if(beanId == null || beanId.isEmpty()) {, + beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);, + }, + parserContext.getRegistry().registerBeanDefinition(beanId, providerBeanDefinition);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, + <xsd:attribute name="id" type="xsd:string">, + <xsd:annotation>, + <xsd:documentation>,
[+++ b/docs/src/reference/docbook/facebook.xml, +++ b/docs/src/reference/docbook/facebook.xml, +++ b/docs/src/reference/docbook/serviceprovider.xml, + Configuring service providers, + - Config-oriented, + - Generic, + - Supported providers, +, +, + - AccountConnectionRepository, + , + , + - ServiceProviderFactory, + , +, + - Jdbc-oriented configuration of providers, + , + - Using a provider, + - connection-management, + - service operations, + , + <section xml:id="section_serviceproviderconfig">, + <title>Configuring Service Providers</title>, + <para>You can configure a service provider in the Spring application context using Spring Social's Spring configuration namespace:</para>, + <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>, +<beans xmlns="http://www.springframework.org/schema/beans" , + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xmlns:social="http://www.springframework.org/schema/spring-social", + xsi:schemaLocation="http://www.springframework.org/schema/spring-social , + http://www.springframework.org/schema/social/spring-social-1.0.xsd, +
[+++ b/docs/src/reference/docbook/facebook.xml, + <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>FacebookServiceProvider</classname>:</para>, +++ b/docs/src/reference/docbook/facebook.xml, + <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling one of the <methodname>getServiceOperations()</methodname> methods on <classname>FacebookServiceProvider</classname>:</para>, +++ b/docs/src/reference/docbook/github.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="github", + xmlns:xlink="http://www.w3.org/1999/xlink">, + <title>GitHub</title>, +, + <para>Although many developers thing of GitHub as Git-based source code hosting, the tagline in GitHub's logo clearly states that GitHub
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/package-info.java, +/**, + * Facebook service provider connection repository and API adapter implementations. , + */, +package org.springframework.social.facebook.connect;, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/package-info.java, +/**, + * Facebook service provider connection repository and API adapter implementations. , + */, +package org.springframework.social.facebook.connect;, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/AlbumList.java, +/**, + * Holder class to hold a typed list of Albums, pulled from the "data" field of the JSON object structure., + * This helps Jackson know what type to deserialize list data into. , + * @author Craig Walls, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/package-info.java, +/**, + * Facebook service provider connection repository and API adapter implementations. , +
[+++ b/docs/src/reference/docbook/connecting.xml, + The following Java-based configuration shows how to configure <interfacename>ConnectionRepository</interfacename> bean in request scope for the currently authenticated user:]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.HttpSessionSessionStrategy;, +import org.springframework.web.servlet.support.ServletUriComponentsBuilder;]
[+++ b/docs/src/reference/docbook/implementing.xml, + // creates a RestTemplate that adds the OAuth2-draft10 Authorization header to each request before it is executed, + restTemplate = ProtectedResourceClientFactory.draft10(accessToken);, + // creates a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed, + restTemplate = ProtectedResourceClientFactory.create(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/docs/src/reference/docbook/implementing.xml, + // creates a RestTemplate that adds the OAuth2-draft10 Authorization header to each request before it is executed, + restTemplate = ProtectedResourceClientFactory.draft10(accessToken);, + // creates a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed, + restTemplate = ProtectedResourceClientFactory.create(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++
[+++ b/docs/src/reference/docbook/connecting.xml, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="connecting" xmlns:xlink="http://www.w3.org/1999/xlink">, + As <classname>ConnectController</classname> directs the overall connection flow, it depends on several other objects to do its job., + Before getting into those, first we'll define a single Java @Configuration class where the various Spring Social objects, including ConnectController, will be configured:, + <programlisting language="java"><![CDATA[, +@Configuration, +public class SocialConfig {, +, +}]]>, + </programlisting> , + Now, <classname>ConnectController</classname> first delegates to one or more ConnectionFactory instances to establish connections to providers on behalf of users., + Once a connection has been established, it delegates to a <interfacename>ConnectionRepository</interfacename> to persist user connection data.,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + /**, + * Exposes the consumer key to be read by subclasses., + * This may be useful when overriding {@link #getCustomAuthorizationParameters()} and the consumer key is required in the authorization request., + */, + /**, + * Creates an {@link OAuthToken} given the response from the access token exchange with the provider., + * May be overridden to create a custom {@link OAuthToken}., + * @param accessToken the access token value received from the provider., + * @param secret the access token secret received from the provider., + * @param response all parameters from the
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2RequestInterceptor.java, + * ClientHttpRequestInterceptor implementation that adds the OAuth2 access token to protected resource requests before execution., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2RequestInterceptor.java, + * ClientHttpRequestInterceptor implementation that adds the OAuth2 access token to protected resource requests before execution., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.web.client.RestTemplate;, + * Therefore, FacebookTemplate must be given an access token at construction time., + private final RestTemplate restTemplate;, + * @param accessToken An access token given by Facebook after a successful OAuth 2 authentication (or through Facebook's JS library)., + this.restTemplate = createRestTemplate(accessToken);, + return restTemplate.getForObject(OBJECT_URL, FacebookProfile.class, "me");, + ResponseEntity<Map> response = restTemplate.getForEntity(CONNECTION_URL, Map.class, CURRENT_USER_ID, FRIENDS);, +
[+++ b/.gitignore, +*.iml, +*.ipr, +*.iws, +++ b/.gitignore, +*.iml, +*.ipr, +*.iws, +++ b/build.gradle, +, + jspApiVersion = '2.2.1', + compile ("javax.servlet.jsp:javax.servlet.jsp-api:$jspApiVersion") { provided = true }, + metaInf << files("src/main/resources/tld/spring-social.tld"), +++ b/.gitignore, +*.iml, +*.ipr, +*.iws, +++ b/build.gradle, +, + jspApiVersion = '2.2.1', + compile ("javax.servlet.jsp:javax.servlet.jsp-api:$jspApiVersion") { provided = true }, + metaInf << files("src/main/resources/tld/spring-social.tld"), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/taglib/BaseSocialConnectedTag.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy
[+++ b/docs/src/reference/docbook/implementing.xml, + To encapsulate this complexity, for each authorization protocol Spring Social provides a ApiTemplate base class you may extend from to, +public class TwitterTemplate extends AbstractOAuth1ApiTemplate {, + super(consumerKey, consumerSecret, accessToken, accessTokenSecret);, + }, +public class FacebookTemplate extends AbstractOAuth2ApiTemplate {, + super(accessToken);, + }, + Once configured as shown above, you simply implement call getRestTemplate() and implement the various API operations., + return getRestTemplate().getForObject(buildUri("account/verify_credentials.json"), TwitterProfile.class);, + return getRestTemplate().getForObject(buildUri("users/show.json", Collections.singletonMap("screen_name", screenName)), TwitterProfile.class);]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000l : null;]
[+++ b/pom.xml, + <repository>, + <!-- necessary for org.springframework.build.aws.maven dependency -->, + <id>repository.source.maven.release</id>, + <name>SpringSource Maven Release Repository</name>, + <url>http://repository.springsource.com/maven/bundles/release</url>, + </repository>, + <extensions>, + <extension>, + <!-- available only in the springframework maven repository. see <repositories> section below -->, + <groupId>org.springframework.build.aws</groupId>, + <artifactId>org.springframework.build.aws.maven</artifactId>, + <version>3.0.0.RELEASE</version>, + </extension>, + </extensions>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +public class OperationNotPermittedException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +public class OperationNotPermittedException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/ProviderApiException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + *
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +import org.w3c.dom.Element;, + private static final String CONNECTION_REPOSITORY_ATTRIBUTE = "connection-repository";, + private static final String DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME = "connectionRepository";, +, +, + public BeanDefinition parse(Element element, ParserContext parserContext) {, + String name = element.getAttribute("id");, + if (name == null || name.isEmpty()) {, + name = getDefaultProviderName();, + }, +, + return registerServiceProviderBean(element, parserContext, name);, + }, +, + protected BeanDefinition registerServiceProviderBean(Element element, ParserContext parserContext, String name) {, +, + String consumerKey = element.getAttribute("consumer-key");, + String consumerSecret = element.getAttribute("consumer-secret");, + String connectionRepositoryBean = getConnectionRepositoryName(element);, +, + BeanDefinitionBuilder providerBeanBuilder = BeanDefinitionBuilder, + .genericBeanDefinition(getImplementationClassName());, +, + String getConnectionRepositoryName(Element element) {, +
[+++ b/docs/src/reference/docbook/signin.xml]
[+++ b/build.gradle, + sourceSets {, + test {, + resources {, + srcDirs = ['src/test/java'], + }, + }, + }, +, +, +/*, + sourceSets {, + test {, + resources {, + // have to add src/main/java here, because that's where the connection schema lives, + srcDirs = ['src/main/java', 'src/test/java'], + }, + }, + }, +*/, +++ b/build.gradle, + sourceSets {, + test {, + resources {, + srcDirs = ['src/test/java'], + }, + }, + }, +, +, +/*, + sourceSets {, + test {, + resources {, + // have to add src/main/java here,
[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + private String providerId;, +, + public ApiException(String providerId, String message) {, + this.providerId = providerId;, + public ApiException(String providerId, String message, Throwable cause) {, + /**, + * The ID of the provider for which the API exception occurred., + */, + public String getProviderId() {, + return providerId;, + }, +, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, + private String providerId;, +, + public ApiException(String providerId, String message) {, + this.providerId = providerId;, + public ApiException(String providerId, String message, Throwable cause) {, + /**, + * The ID of the provider for which the API exception occurred., + */,
[+++ b/pom.xml]
[+++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProviderConnection.java, + public S getServiceApi();, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProviderConnection.java, + public S getServiceApi();, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/support/ServiceProviderConnectionImpl.java, + private boolean disconnected;, + , + public S getServiceApi() {, + if (disconnected) {, + throw new IllegalStateException("Unable to get Api: this Connection is disconnected");, + if (disconnected) {, + throw new IllegalStateException("This connection is already disconnected");, + } , + disconnected = true;, + }, + , + public boolean equals(Object o) {, + if (!(o instanceof ServiceProviderConnectionImpl)) {, + return false;, + }, + ServiceProviderConnectionImpl<?> other = (ServiceProviderConnectionImpl<?>) o;, + return id.equals(other.id);, + }, + , + public int hashCode() {, +
[+++ b/src/main/java/org/springframework/social/oauth1/S2OAuth1ClientRequestSigner.java, +package org.springframework.social.oauth1;, +, +import java.net.URL;, +import java.util.Map;, +, +import org.springframework.http.HttpMethod;, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.security.oauth.consumer.OAuthConsumerSupport;, +import org.springframework.security.oauth.consumer.ProtectedResourceDetails;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +import org.springframework.social.oauth.AccessToken;, +import org.springframework.social.oauth.AccessTokenServices;, +, +/**, + * Extension of {@link OAuth1ClientRequestSigner} that uses Spring Security, + * OAuth's {@link OAuthConsumerSupport} to calculate the authorization header., + * , + * @author Craig Walls, + */, +public class S2OAuth1ClientRequestSigner extends OAuth1ClientRequestSigner {, + private final OAuthConsumerSupport oauthSupport;, + private final AccessTokenServices tokenServices;, + private final ProtectedResourceDetails protectedResourceDetails;, +, + public S2OAuth1ClientRequestSigner(OAuthConsumerSupport oauthSupport,, + ProtectedResourceDetails protectedResourceDetails, AccessTokenServices tokenServices) {, + this.oauthSupport = oauthSupport;, + this.tokenServices =
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + String findLocalUserIdWithConnection(ServiceProviderConnection connection);]
[+++ b/docs/src/reference/docbook/overview.xml, + To obtain the <ulink url="https://github.com/SpringSource/spring-social-samples">https://github.com/SpringSource/spring-social-samples</ulink> code, use the following git command:]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +, + /**, + * Constructs a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed., + */, + // favored, + client.setInterceptors(new ClientHttpRequestInterceptor[] { new OAuth1RequestInterceptor(consumerKey, consumerSecret, accessToken, accessTokenSecret)});, + // 3.0.x compatibility, + client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(), consumerKey, consumerSecret, accessToken, accessTokenSecret));, + private static boolean interceptorsSupported = ClassUtils.isPresent("org.springframework.http.client.ClientHttpRequestInterceptor", ProtectedResourceClientFactory.class.getClassLoader());, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +, + /**, + * Constructs a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed., + */, + // favored, + client.setInterceptors(new ClientHttpRequestInterceptor[] { new OAuth1RequestInterceptor(consumerKey, consumerSecret, accessToken, accessTokenSecret)});,
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import static java.util.Arrays.*;, +, +import java.util.List;, +import java.util.Map.Entry;, +, +import org.springframework.util.LinkedMultiValueMap;, + MultiValueMap<String, String> requestParameters = getRequestParameters(request);, + OAuth1Parameters parameters = getOAuth1Parameters(request, additionalParameters);, + parameters.putAll(requestParameters);, + OAuthToken requestToken = fetchRequestToken(request, requestParameters, oauthOperations);, + private OAuth1Parameters getOAuth1Parameters(NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, + OAuth1Parameters parameters = new OAuth1Parameters(additionalParameters);, + parameters.putAll(getRequestParameters(request));, + return parameters;, +, + private OAuthToken fetchRequestToken(NativeWebRequest request, MultiValueMap<String, String> requestParameters, OAuth1Operations oauthOperations) {, + if (oauthOperations.getVersion() == OAuth1Version.CORE_10_REVISION_A) {, + return oauthOperations.fetchRequestToken(callbackUrl(request), requestParameters);, + }, + return oauthOperations.fetchRequestToken(null, requestParameters); , + parameters.putAll(getRequestParameters(request, "scope"));, + private MultiValueMap<String, String> getRequestParameters(NativeWebRequest request, String... ignoredParameters) {, + List<String> ignoredParameterList =
[+++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, + <jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, + <jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, + <jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ /dev/null, +++ b/spring-social-core/src/main/resources/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, + accountId varchar not null,, + providerId varchar not null,, + accessToken varchar not null, , + secret varchar, , + refreshToken varchar,, + primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);]
[+++ b/build.gradle, +project("spring-social-web-thymeleaf2") {, + description = "Spring Web Integration", + dependencies {, + compile project(":spring-social-core"), + compile("org.thymeleaf:thymeleaf:$thymeleaf2Version"), + compile("org.thymeleaf:thymeleaf-spring4:$thymeleaf2Version"), + testCompile("org.springframework:spring-test:$springVersion"), + }, +}, +, +project("spring-social-web-thymeleaf3") {, + description = "Spring Web Integration", + dependencies {, + compile project(":spring-social-core"), + compile("org.thymeleaf:thymeleaf:$thymeleaf3Version"), + compile("org.thymeleaf:thymeleaf-spring4:$thymeleaf3Version"), + testCompile("org.springframework:spring-test:$springVersion"), + }, +}, +, +++ b/build.gradle, +project("spring-social-web-thymeleaf2") {, + description = "Spring Web Integration", + dependencies {, + compile project(":spring-social-core"), + compile("org.thymeleaf:thymeleaf:$thymeleaf2Version"), + compile("org.thymeleaf:thymeleaf-spring4:$thymeleaf2Version"), + testCompile("org.springframework:spring-test:$springVersion"), + }, +}, +, +project("spring-social-web-thymeleaf3") {, + description = "Spring Web Integration", + dependencies {, + compile project(":spring-social-core"), + compile("org.thymeleaf:thymeleaf:$thymeleaf3Version"), + compile("org.thymeleaf:thymeleaf-spring4:$thymeleaf3Version"), + testCompile("org.springframework:spring-test:$springVersion"), + }, +},
[+++ b/docs/src/reference/docbook/signin.xml, + The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., + </para>, + </listitem>, + <listitem>, + <para>, + If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., + The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it
[+++ b/.gitignore, +.DS_Store, +++ b/.gitignore, +.DS_Store, +++ b/docs/src/reference/docbook/overview.xml, + <entry>Spring Social's ServiceProvider connect framework and OAuth support.</entry>, + <entry>Spring Social's <classname>ConnectController</classname> which uses the ServiceProvider framework to manage connections in a web application environment</entry>, + <entry>spring-social-twitter</entry>, + <entry>Includes Spring Social's Twitter API as well as support for signing into an application via Twitter.</entry>, + </row>, + <row>, + <entry>spring-social-linkedin</entry>, + <entry>Includes Spring Social's LinkedIn API.</entry>, + </row>, + <row>, + <para>To let Spring Social handle the back-and-forth authorization handshake between a web application and a service provider, you'll need the web module:</para>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding
[+++ b/docs/src/reference/docbook/apis.xml, + , + <para>After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application.</para>, + , + <para>Each service provider exposes their data and functionality through an API. Spring Social provides Java-based access to those APIs via provider-specific templates, each implementing a provider operations interface.</para>, +
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 1 (July 25, 2011), +=======================================================, +Bug Fixes, + * Display a message indicating a user should sign-up after a provider, + sign-in is unable to find a matching local user. (SOCIAL-207), + * When ConnectController is given an application URL, it now uses the, + entire URL to construct the callback URL instead of piecing together, + the callback URL from specific parts of it. (SOCIAL-200), + * Use coalesce function in SQL rather than ifnull for greater DB, + compatibility. (SOCIAL-226), + * Added cache-control headers in response for ConnectController status,
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + /**, + * Returns a RedirectView with the URL to redirect to after a connection is created or deleted., + * Defaults to "/connect/{providerId}" relative to the servlet context path. , + * May be overridden to handle custom redirection needs., + * @param providerId the ID of the provider for which a connection was created or deleted., + */, + protected RedirectView connectionStatusRedirect(String providerId) {, + return new RedirectView("/connect/" + providerId, true);, + }, +]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + return session == null || data == null ? false : SignInAttempts.add(session, data);]
[+++ b/build.gradle, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + String buildAuthorizeUrl(String redirectUri, String scope, String state);, + String buildAuthenticateUrl(String redirectUri, String state);, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + String buildAuthorizeUrl(String redirectUri, String scope, String state);, + String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, + this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, + public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, + return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, + public String buildAuthenticateUrl(String redirectUri, String state) {, + return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri,
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors.,
[+++ b/build.gradle, + springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/build.gradle, + springSecurityWebVersion = '3.1.0.RC2', +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityWebVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest.java, +import org.junit.Ignore;, +@Ignore("TODO: Reinstate test with generic test provider configuration"), + // TODO: Test with fake provider, +// assertNotNull(cfl.getConnectionFactory(Twitter.class));, + // TODO: Replace with tests using fake provider, +// assertNull(connectionRepository.findPrimaryConnection(Twitter.class));, +// ConnectionFactory<Twitter> twitterCF = cfl.getConnectionFactory(Twitter.class);, +// Connection<Twitter> connection = twitterCF.createConnection(new ConnectionData("twitter", "bob", "Bob McBob", "http://www.twitter.com/mcbob", null, "someToken", "someSecret", null, null));, +// connectionRepository.addConnection(connection);, +// assertNotNull(connectionRepository.findPrimaryConnection(Twitter.class));, +// assertTrue(context.getBean(Twitter.class).isAuthorized());, +//
[+++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/PostToWallAfterConnectInterceptor.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java,
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release (), +=========================================================, +Bug Fixes, + * OAuth1Parameters.NONE was accidentally made mutable; it is now back to being immutable as it should be., + * Updated reference documentation to reflect the minor API changes introduced in RC3., +, +Improvements, + * Added default constructor to OAuth1Parameters and OAuth2Parameters for more convenient standalone usage. , +, + * ConnectInterceptor.preConnect() now accepts a MultiValueMap<String, String>]
[+++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, + <p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, + <p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, + <button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>, +<%--, +, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, + <p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, + <button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>, +<%--, +, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/connect-with-twitter.png, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg value="${application.url}" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/connect/twitterConnect.jsp, + <p><button type="submit"><img src="<c:url value="/resources/social/twitter/connect-with-twitter.png" />"/></button></p>, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, + <button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>, +<%--, +, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/connect-with-twitter.png, +++ b/samples/spring-social-showcase/src/main/webapp/resources/social/twitter/sign-in-with-twitter-d.png, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +package org.springframework.social;, +, +public interface ServiceProvider<S> {, +, +}, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A connection between a local user account and an external service provider account., + * The persistence identifier of this service provider connection., + * Null if this connection has not yet been persisted., + ServiceProviderConnectionKey getKey();, + * The id of the external provider account representing the remote end of the connection., + * May be null
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + // TODO check for existing connection, + // TODO optionally disallow more than one connection for providerUserId, + ]
[+++ b/.gitignore, +.idea, +++ b/.gitignore, +.idea, +++ b/build.gradle, + testCompile("org.springframework:spring-aop:${springVersion}"), + testCompile("org.aspectj:aspectjrt:${aspectjVersion}"), + testCompile("org.aspectj:aspectjweaver:${aspectjVersion}"), +++ b/.gitignore, +.idea, +++ b/build.gradle, + testCompile("org.springframework:spring-aop:${springVersion}"), + testCompile("org.aspectj:aspectjrt:${aspectjVersion}"), + testCompile("org.aspectj:aspectjweaver:${aspectjVersion}"), +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson; Greg Turnquist, +[[section_creatingAProviderProject]], +=== Extending an existing Service Provider, +, +Are you already using an existing provider like Spring Social GitHub? You may run into the situation where the Spring Social API doesn't cover every operation you need. Or you may wish to apply extra behavior like caching certain operations. This section explores extension points Spring Social's core includes., +, +[[]], +==== Adding extra operations, +,
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MapServiceProviderConnectionFactoryRegistry.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/docs/src/reference/docbook/implementing.xml, + <title>Adding Support for a New Service Provider</title>, + <title>Developing a Java binding to the provider's API</title>, + <section id="service-provider-implementing-api-new-designing">, + <title>Designing a new Java API binding</title>, + <para>, + API developers retain full control over the design and implementation of their Java bindings., + That said, we offer several design guidelines in an effort to improve overall consistency and quality:, + <itemizedlist>, + <listitem>, + <para>, + <emphasis>Favor separating the API binding interface from the implementation.</emphasis>, + This is illustrated in the spring-social-twitter example in the previous section., + There, "TwitterApi" is the central API binding
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import org.springframework.social.connect.ConnectionRepository;, + usersConnectionRepository.createConnectionRepository(userId).updateConnection(connection);]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, + private String callbackUrl;, + , + * Configures a specific callback URL that is to be used instead of calculating one based on the application URL or current request URL., + * When set this URL will override the default behavior where the callback URL is derived from the current request and/or a specified application URL., + * When set along with applicationUrl, the applicationUrl will be ignored., + * @param callbackUrl the callback URL to send to providers during authorization. Default is null. , + */, + public void setCallbackUrl(String callbackUrl) {, + this.callbackUrl =
[+++ b/gradle.properties, +springSocialVersion=1.0.2.BUILD-SNAPSHOT, +role=developer]
[+++ b/gradle.properties, +h2Version=1.4.193, +springSecurityVersion=4.2.0.RELEASE, +jacksonVersion=2.8.5]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.util.StringUtils;, +import org.springframework.web.util.UrlPathHelper;, +import org.springframework.web.util.WebUtils;, + private final UrlPathHelper urlPathHelper = new UrlPathHelper();, +, + String path = "/connect/" + providerId + getPathExtension(request);, + HttpServletRequest nativeRequest = request.getNativeRequest(HttpServletRequest.class);, + if (prependServletPath(nativeRequest)) {, + path = nativeRequest.getServletPath() + path;, + return new RedirectView(path, true);, + private boolean prependServletPath(HttpServletRequest request) {, + return !this.urlPathHelper.getPathWithinServletMapping(request).equals("");, + }, + , + /*, + * Determines the path extension, if any., + * Returns the extension, including the period at the beginning, or an empty string if there is no extension., + * This makes it possible to append the returned
[+++ b/src/ant/upload-dist.xml, +<!DOCTYPE project>, +++ b/src/ant/upload-dist.xml, +<!DOCTYPE project>, +++ b/src/assembly/distribution.xml, +<!DOCTYPE assembly>, +++ b/src/ant/upload-dist.xml, +<!DOCTYPE project>, +++ b/src/assembly/distribution.xml, +<!DOCTYPE assembly>, +++ b/src/main/java/org/springframework/social/facebook/FacebookAccessToken.java, +/**, + * Annotation that indicates that a controller method parameter should be bound, + * to the Facebook access token given when the user signed in with Facebook., + * , + * @author Craig Walls, +++ b/src/ant/upload-dist.xml, +<!DOCTYPE project>, +++ b/src/assembly/distribution.xml, +<!DOCTYPE assembly>, +++ b/src/main/java/org/springframework/social/facebook/FacebookAccessToken.java, +/**, + * Annotation that indicates that a controller method parameter should be bound, + * to the Facebook access token given when the user signed in with Facebook., +
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiAdapter.java, +import org.springframework.social.ProviderApiException;, +, + * @throws ProviderApiException if there is a problem testing the connection., + * @throws ProviderApiException if there is a problem fetching connection information from the provider., + * @throws ProviderApiException if there is a problem fetching a user profile from the provider., + * @throws ProviderApiException if there is a problem updating the user's status on the provider.]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, + protected StringBuffer getProxyHeaderAwareRequestURL(HttpServletRequest request) {, + if (StringUtils.isEmpty(host)) {, + if (scheme.equals("http") && port.equals("80")){, + if (scheme.equals("https") && port.equals("443")){, + if (StringUtils.hasLength(port)){]
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, + * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, + * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, + for (int i = 1; i < strings.length; i++) {, + builder.append("," + strings[i]);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/CheckinOperations.java, + * @param message a message to post along with the checkin., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, + for (int i = 1; i < strings.length; i++) {, + builder.append("," + strings[i]);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FriendOperations.java, + * Retrieves a list of the authenticating user's friends' IDs., + * @return a list of Strings, where each entry
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationToken.java, + * @param connection, + * connection data, + * @param providerId, + * {@link ServiceProvider} id, + * @param details, + * user details, typically as returned by, + * {@link SocialUserDetailsService}, + * @param providerAccountData, + * optional extra account data]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, + addTextToMapMessageConverter();, + Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, + return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, + , + // private helpers, + // TODO : Can probably tweak RestTemplate's message converters to deal with this better., + private String valueOf(Object object) {, + if (object == null) {, + return null;, + } else if (object instanceof List) {, + List list = (List) object;, + if (list.size() > 0) {, + return String.valueOf(list.get(0));, + }, + return null;, + }, + return String.valueOf(object);, + }, +, + /*, + *
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java]
[+++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg value="fa8a9825f555a7a8949ec48fb93bda58" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, + <constructor-arg value="fa8a9825f555a7a8949ec48fb93bda58" />, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-core/src/test/java/org/springframework/social/support/ClientHttpRequestFactorySelectorTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, + * The supporting schema is defined in JdbcUsersConnectionRepository.sql.]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, + addCustomParameters(params);, + protected void addCustomParameters(OAuth2Parameters params) {, + }]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.web.client.RestClientException;, + Map<String, Object> result = getRestTemplate().postForObject(accessTokenUrl, parameters, Map.class);, + if (result == null) {, + throw new RestClientException("access token endpoint returned empty result");, + }, + return extractAccessGrant(result);]
[+++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, + , + /**, + * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., + * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., + * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., + */, + String connectionSignUpRef() default "";, + , +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, + , + /**, + * Reference
[+++ b/docs/src/reference/docbook/implementing.xml, + Define a single constructor that accepts an clientId and clientSecret,, + Finally, implement getServiceApi(String) to return a new API instance., + public FacebookServiceProvider(String clientId, String clientSecret) {, + super(new OAuth2Template(clientId, clientSecret,, + "https://graph.facebook.com/oauth/authorize", , + public FacebookApi getServiceApi(String accessToken) {, + In the constructor, you should call super, passing up the configured OAuth2Template, which implements OAuth2Operations., + In getServiceApi(String), you should construct your Service API implementation, passing it the access token needed to make requests for protected resources., + Define a single constructor that accepts a consumerKey and consumerSecret., + Finally, implement getServiceApi(String, String) to return
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), + /**, + * The connection key that already exists., + */, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), +
[+++ b/build.gradle, +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile "org.springframework:spring-web:$springVersion", + compile "org.springframework:spring-webmvc:$springVersion", + compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/build.gradle, +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile "org.springframework:spring-web:$springVersion", + compile "org.springframework:spring-webmvc:$springVersion", + compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile "org.springframework:spring-web:$springVersion", + compile "org.springframework:spring-webmvc:$springVersion", + compile
[+++ b/build.gradle, + mockitoVersion = '1.8.5', + testCompile "junit:junit:$junitVersion", + testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/build.gradle, + mockitoVersion = '1.8.5', + testCompile "junit:junit:$junitVersion", + testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, + if (providerUsers == null || providerUsers.isEmpty()) {, +++ b/build.gradle, + mockitoVersion = '1.8.5', + testCompile "junit:junit:$junitVersion", + testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, + if (providerUsers == null || providerUsers.isEmpty()) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/build.gradle, + mockitoVersion = '1.8.5', + testCompile "junit:junit:$junitVersion", + testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, + if (providerUsers == null || providerUsers.isEmpty()) {, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ /dev/null, +++ b/build.gradle, + mockitoVersion = '1.8.5', + testCompile "junit:junit:$junitVersion", + testCompile "org.mockito:mockito-all:$mockitoVersion", +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/reference/docbook/connecting.xml, + public TwitterServiceProvider twitter(@Value("${twitter.consumerKey}") String consumerKey,, + @Value("${twitter.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, + public FacebookServiceProvider facebook(@Value("${facebook.appId}") String appId,, + @Value("${facebook.appSecret}") String appSecret, ConnectionRepository connectionRepository) {, + public TripItServiceProvider tripit(@Value("${tripit.consumerKey}") String consumerKey,, + @Value("${tripit.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, + Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as placeholder variables to be resolved by Spring's property placeholder support., + public TextEncryptor textEncryptor(@Value("${security.encryptPassword}") String password,, + @Value("${security.encryptSalt}") String salt) {, + <constructor-arg value="${twitter.consumerKey}"
[+++ b/gradle.properties, +springSocialVersion=1.0.0.M3]
[+++ b/src/main/java/org/springframework/social/oauth/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, + buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, + protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> params);, +, +++ b/src/main/java/org/springframework/social/oauth/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, + buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, + protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> params);, +, +++ /dev/null, +++ b/src/main/java/org/springframework/social/oauth/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, + buildAuthorizationHeader(request.getMethod(), request.getURI().toURL(), params));, + protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> params);, +, +++ /dev/null, +++ b/src/main/java/org/springframework/social/oauth/SSOAuthClientRequestAuthorizer.java, +package org.springframework.social.oauth;, +, +import java.net.URL;, +import java.util.Map;, +, +import org.springframework.http.HttpMethod;, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;,
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + private static final long serialVersionUID = 1L;, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + private static final long serialVersionUID = 1L;, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + private static final long serialVersionUID = 1L;, +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + *
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookConnectionFactory.java, +/**, + * Facebook ConnectionFactory implementation., + * @author Keith Donald, + */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookConnectionFactory.java, +/**, + * Facebook ConnectionFactory implementation., + * @author Keith Donald, + */, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/connect/FacebookApiAdapterTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,
[+++ b/src/main/java/org/springframework/social/facebook/FacebookClientRequestSigner.java, +package org.springframework.social.facebook;, +, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.oauth.AccessToken;, +import org.springframework.social.oauth.AccessTokenServices;, +import org.springframework.social.oauth2.OAuth2ParameterClientRequestSigner;, +, +// TODO: There's nothing really Facebook-specific about this. Need to figure out where it should go, +public class FacebookClientRequestSigner extends OAuth2ParameterClientRequestSigner {, + private final AccessTokenServices accessTokenServices;, + private String providerId;, +, + public FacebookClientRequestSigner(AccessTokenServices accessTokenServices, String providerId) {, + this.accessTokenServices = accessTokenServices;, + this.providerId = providerId;, + this.setParameterName("access_token");, + }, +, + protected AccessToken resolveAccessToken() {, + Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, + if (authentication == null) {, + throw new AuthenticationCredentialsNotFoundException("No credentials found");, + }, +, + return accessTokenServices.getToken(providerId, authentication.getPrincipal());,
[+++ b/docs/src/reference/docbook/apis.xml, + If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> via a <interfacename>Connection</interfacename>. , + For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>TwitterApi</interfacename>:, +Connection<TwitterApi> connection = connectionRepository.findPrimaryConnectionToApi(TwitterApi.class);, +TwitterApi twitterApi = connection.getApi();]]>, + Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Twitter., + From that connection, it retrieves a <interfacename>TwitterApi</interfacename> instance that is configured with the connection details received when the connection was first established., + If you are using Spring Social's service
[+++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, + MockRestServiceServer mockServer = MockRestServiceServer.createServer(oAuth2Template.getRestTemplate());, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, + MockRestServiceServer mockServer = MockRestServiceServer.createServer(oAuth2Template.getRestTemplate());, +++ b/spring-social-tripit/src/test/java/org/springframework/social/tripit/profile.json, +{, + "Profile" : {, + "screen_name" : "habuma",, + "public_display_name" : "Craig Walls",, + "home_city" : "Plano, TX",, + "company" : "SpringSource",, + "profile_url" : "user/habuma",, + "@attributes" : {, + "ref" : "123456", + }, + }, , + "timestamp" : 123456780, +}, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, + MockRestServiceServer mockServer = MockRestServiceServer.createServer(oAuth2Template.getRestTemplate());, +++ b/spring-social-tripit/src/test/java/org/springframework/social/tripit/profile.json, +{, + "Profile" : {, + "screen_name" : "habuma",, + "public_display_name" : "Craig Walls",, + "home_city" : "Plano, TX",, + "company" : "SpringSource",, + "profile_url" : "user/habuma",, + "@attributes"
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + private static Method setInterceptorsMethod;, + , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + private static Method setInterceptorsMethod;, + , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, + private static Method setInterceptorsMethod;, +]
[+++ b/build.gradle, + springTestMvcVersion = '1.0.0.BUILD-SNAPSHOT', + testCompile ("javax.servlet:servlet-api:$servletApiVersion"), +++ b/build.gradle, + springTestMvcVersion = '1.0.0.BUILD-SNAPSHOT', + testCompile ("javax.servlet:servlet-api:$servletApiVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1RequestInterceptorTest.java, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.mock.web.MockHttpServletRequest;, + MockHttpServletRequest request = new MockHttpServletRequest(HttpMethod.POST.name(), "/status/update");, + request.setRemoteHost("api.someprovider.com");, + request.setSecure(true);, + request.setContentType(MediaType.APPLICATION_FORM_URLENCODED.toString());, + interceptor.intercept(new ServletServerHttpRequest(request), body, execution);, +++ b/build.gradle, + springTestMvcVersion = '1.0.0.BUILD-SNAPSHOT', + testCompile ("javax.servlet:servlet-api:$servletApiVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1RequestInterceptorTest.java, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.mock.web.MockHttpServletRequest;, + MockHttpServletRequest request = new MockHttpServletRequest(HttpMethod.POST.name(), "/status/update");, + request.setRemoteHost("api.someprovider.com");, + request.setSecure(true);, + request.setContentType(MediaType.APPLICATION_FORM_URLENCODED.toString());, + interceptor.intercept(new ServletServerHttpRequest(request), body, execution);, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.test.web.client.match.RequestMatchers.*;, +import static org.springframework.test.web.client.response.ResponseCreators.*;, +++ b/build.gradle, + springTestMvcVersion = '1.0.0.BUILD-SNAPSHOT', + testCompile ("javax.servlet:servlet-api:$servletApiVersion"), +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1RequestInterceptorTest.java, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.mock.web.MockHttpServletRequest;, +
[+++ b/build.gradle, + gradleVersion = '1.4', +++ b/build.gradle, + gradleVersion = '1.4', +++ b/gradle/wrapper/gradle-wrapper.properties, +#Sat Feb 02 21:27:50 CST 2013, +distributionUrl=http\://services.gradle.org/distributions/gradle-1.4-bin.zip]
[+++ b/docs/src/reference/docbook/connecting.xml, + , + , + , + <p>, + Spring Social Showcase is connected to your Twitter account., + Click the button if you wish to disconnect., + </p>, + void preConnect(ConnectionFactory<A> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request);, + Custom authorization parameters may be added to the provided parameter map., + public void preConnect(ConnectionFactory<TwitterApi> provider, MultiValueMap<String, String> parameters, WebRequest request) {, +++ b/docs/src/reference/docbook/connecting.xml, + , + , + , + <p>, + Spring Social Showcase is connected to your Twitter account., + Click the button if you wish to disconnect., + </p>, + void preConnect(ConnectionFactory<A> connectionFactory, MultiValueMap<String,
[+++ b/pom.xml, + <java-version>1.5</java-version>, +++ b/pom.xml, + <java-version>1.5</java-version>, +++ b/src/main/java/org/springframework/social/twitter/TwitterTemplate.java, + ResponseEntity<Map> response = restOperations.postForEntity(TWEET_URL, tweetParams, Map.class);]
[+++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>]
[+++ b/.gitignore, +src/test/java/exploration, +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, + scribeVersion = '1.0.8', + compile ("org.scribe:scribe:$scribeVersion") { optional = true }, + compile "joda-time:joda-time:$jodaVersion", +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, + scribeVersion = '1.0.8', + compile ("org.scribe:scribe:$scribeVersion") { optional = true }, + compile "joda-time:joda-time:$jodaVersion", +++ b/settings.gradle, +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, + scribeVersion = '1.0.8', + compile ("org.scribe:scribe:$scribeVersion") { optional = true }, + compile "joda-time:joda-time:$jodaVersion", +++ b/settings.gradle, +++ /dev/null, +++ b/.gitignore, +src/test/java/exploration, +++ b/build.gradle, + scribeVersion = '1.0.8', + compile ("org.scribe:scribe:$scribeVersion") { optional = true }, + compile "joda-time:joda-time:$jodaVersion", +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +src/test/java/exploration, +++
[+++ b/README.md, +[Javadoc]: http://docs.spring.io/spring-social/docs/current/apidocs/, +[reference docs]: http://docs.spring.io/spring-social/docs/current-SNAPSHOT/reference/htmlsingle/, +++ b/README.md, +[Javadoc]: http://docs.spring.io/spring-social/docs/current/apidocs/, +[reference docs]: http://docs.spring.io/spring-social/docs/current-SNAPSHOT/reference/htmlsingle/, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * .apply(new SpringSocialHttpConfigurer());, + * Constructs a SpringSocialHttpConfigurer.]
[+++ b/build.gradle, + testCompile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, + testCompile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, + parserContext.registerBeanComponent(new BeanComponentDefinition(connFactoryLocatorBeanDef, CONNECTION_FACTORY_LOCATOR_ID));, +++ b/build.gradle, + testCompile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, + parserContext.registerBeanComponent(new BeanComponentDefinition(connFactoryLocatorBeanDef, CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +import org.springframework.beans.factory.parsing.BeanComponentDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;, + private static final String CREATE_CONNECTION_REPOSITORY = "createConnectionRepository";, + private static final String USERS_CONNECTION_REPOSITORY_ID = "usersConnectionRepository";, + private static final String CONNECTION_REPOSITORY_ID = "connectionRepository";, + private static final String USER_ID_STRING_ID = "_userIdString";, + , + public BeanDefinition parse(Element element, ParserContext
[+++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), + classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), + maven { url "http://repo.spring.io/libs-milestone" }, + gradleVersion = "3.0", +++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), + classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), + maven { url "http://repo.spring.io/libs-milestone" }, + gradleVersion = "3.0", +++ b/gradle.properties, +h2Version=1.4.192, +springSecurityVersion=4.1.3.RELEASE, +aspectjVersion=1.8.9, +springVersion=5.0.0.M2, +version=2.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.8.3, +mockitoVersion=2.1.0, +thymeleafVersion=2.1.5.RELEASE, +++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), + classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), + maven { url "http://repo.spring.io/libs-milestone" }, + gradleVersion = "3.0", +++ b/gradle.properties, +h2Version=1.4.192, +springSecurityVersion=4.1.3.RELEASE, +aspectjVersion=1.8.9, +springVersion=5.0.0.M2, +version=2.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.8.3, +mockitoVersion=2.1.0, +thymeleafVersion=2.1.5.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + classpath('io.spring.gradle:spring-io-plugin:0.0.5.RELEASE'), + classpath('io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'), + maven { url "http://repo.spring.io/libs-milestone" }, + gradleVersion = "3.0", +++ b/gradle.properties, +h2Version=1.4.192, +springSecurityVersion=4.1.3.RELEASE, +aspectjVersion=1.8.9, +springVersion=5.0.0.M2, +version=2.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.8.3, +mockitoVersion=2.1.0, +thymeleafVersion=2.1.5.RELEASE, +++ b/gradle/wrapper/gradle-wrapper.jar, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + StringBuilder authorizeUrl = new StringBuilder(oauthUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken));]
[+++ b/docs/src/reference/docbook/signin.xml, + Instead of creating a connection at the end of process, however, <classname>ProviderSignInController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user to the application., + </section>, +, + <section xml:id="signin_using">, + <title>Enabling provider signin</title>, + The <classname>ProviderSignInController</classname> bean only requires a single <code><![CDATA[<constructor-arg>]]></code> to specify the application's base URL., + <classname>ProviderSignInController</classname> will use this URL to construct the callback URL used in the authentication flow., + When authenticating via an OAuth 1 provider, <classname>ProviderSignInController</classname> supports the following flow:, + <section>, + <title>ProviderSignInController's dependencies</title>, + , + As shown above,
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), + /**, + * The connection key that already exists., + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/**, + * Thrown by a {@link ServiceProviderConnectionRepository} when attempting to add a ServiceProviderConnection , + * and a connection already exists with the given key., + * @author Keith Donald, + * @see ServiceProviderConnectionRepository#addConnection(ServiceProviderConnection), + */, +@SuppressWarnings("serial"), + /**, + * The connection key
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import java.util.Arrays;, +import org.springframework.http.MediaType;, + messageConverters.add(getFormMessageConverter());, + messageConverters.add(getJsonMessageConverter());, + messageConverters.add(getByteArrayMessageConverter());, + * Returns an {@link FormHttpMessageConverter} to be used by the internal {@link RestTemplate}., + * By default, the message converter is set to use "UTF-8" character encoding., + * May be overridden to customize the message converter (for example, to set supported media types or message converters for the parts of a multipart message). , + protected FormHttpMessageConverter getFormMessageConverter() {, + FormHttpMessageConverter converter = new FormHttpMessageConverter();, + converter.setCharset(Charset.forName("UTF-8"));, + return converter;, + }, + , + /**, + * Returns a {@link MappingJacksonHttpMessageConverter} to be used
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +package org.springframework.social.connect.mem;, +, +import java.util.Collections;, +import java.util.List;, +import java.util.Map.Entry;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.connect.ConnectionKey;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.connect.DuplicateConnectionException;, +import org.springframework.social.connect.NoSuchConnectionException;, +import org.springframework.social.connect.NotConnectedException;, +import org.springframework.util.Assert;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, +class InMemoryConnectionRepository implements ConnectionRepository {, +, + // <providerId, Connection<provider API>>, + private MultiValueMap<String, Connection<?>> connections;, + , + private ConnectionFactoryLocator connectionFactoryLocator;, +, + public InMemoryConnectionRepository(ConnectionFactoryLocator connectionFactoryLocator) {, + this.connectionFactoryLocator = connectionFactoryLocator;, + this.connections = new LinkedMultiValueMap<String, Connection<?>>();, + }, + , + public MultiValueMap<String, Connection<?>> findAllConnections() {, + return connections;, + }, +, + public List<Connection<?>> findConnections(String providerId) {, + List<Connection<?>> emptyConnectionList = Collections.emptyList();, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, + private final String providerId;, + private final String providerUserId;, + private final String displayName;, + private final String profileUrl;, + private final String imageUrl;, + private final String accessToken;, + private final String secret;, + private final String refreshToken;, + private final Long expireTime;, + @Override, + public int hashCode() {, + final int prime = 31;, + int result = 1;, + result = prime * result, + + ((accessToken == null) ? 0 : accessToken.hashCode());, + result = prime * result, + + ((displayName == null) ? 0 : displayName.hashCode());, + result = prime
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * @return the connections the user has to the provider, or an empty list if none, + * @param apiType the API type e.g. Facebook.class or Twitter.class, + * @return the connections the user has to the provider of the API, or an empty list if none, + * @return the connection, + * @param <A> the API parameterized type, + * @param apiType the API type e.g. Facebook.class or Twitter.class, + * @param <A> the API parameterized type, + * @param apiType the API type e.g. Facebook.class or Twitter.class, + * @param connection the new
[+++ b/build.gradle, + compile project(':spring-social-client'), +project('spring-social-client') {, + description = 'Spring Social Client', + compile project(':spring-social-client'), + compile project(':spring-social-client'), + compile project(':spring-social-client'), + compile project(':spring-social-client'), + compile "org.springframework:spring-web:$springVersion", + compile project(':spring-social-client'), + compile project(':spring-social-client'), + compile project(':spring-social-client'), +++ b/build.gradle, + compile project(':spring-social-client'), +project('spring-social-client') {, + description = 'Spring Social Client', + compile project(':spring-social-client'), + compile project(':spring-social-client'), + compile project(':spring-social-client'), + compile project(':spring-social-client'), + compile "org.springframework:spring-web:$springVersion", + compile project(':spring-social-client'), + compile project(':spring-social-client'), + compile project(':spring-social-client'), +++ b/samples/facebook-showcase-2/build.gradle, + compile "org.springframework.social:spring-social-client:1.0.0.BUILD-SNAPSHOT", +++ b/build.gradle, + compile project(':spring-social-client'), +project('spring-social-client') {, + description = 'Spring Social Client', + compile project(':spring-social-client'), + compile project(':spring-social-client'), +
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.LoggingErrorHandler;, + restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.LoggingErrorHandler;, + restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.LoggingErrorHandler;, + restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.social.support.LoggingErrorHandler;, + restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.LoggingErrorHandler;, + restTemplate.setErrorHandler(new LoggingErrorHandler());, +++ b/spring-social-core/src/main/java/org/springframework/social/support/BufferingClientHttpResponse.java, +/*, + * Copyright 2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law
[+++ b/gradle.properties, +h2Version=1.4.196, +springSecurityVersion=5.0.0.M5, +aspectjVersion=1.8.12, +springVersion=5.0.0.RELEASE, +jacksonVersion=2.9.2, +mockitoVersion=2.11.0, +thymeleaf3Version=3.0.8.RELEASE, +thymeleafSpring5Version=3.0.8.RELEASE, +++ b/gradle.properties, +h2Version=1.4.196, +springSecurityVersion=5.0.0.M5, +aspectjVersion=1.8.12, +springVersion=5.0.0.RELEASE, +jacksonVersion=2.9.2, +mockitoVersion=2.11.0, +thymeleaf3Version=3.0.8.RELEASE, +thymeleafSpring5Version=3.0.8.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + if (auth == null || !auth.isAuthenticated()) {]
[+++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.junit.Assert.*;, +import java.util.List;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.web.test.StubConnectionRepository;, + public void connect_OAuth1Provider_exceptionWhileFetchingRequestToken() throws Exception {, + ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, + , + @Test, + public void oauth1Callback() throws Exception {, + ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, + ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, + connectionFactoryLocator.addConnectionFactory(connectionFactory);, + StubConnectionRepository connectionRepository = new StubConnectionRepository();, + MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, + assertNull(connectionRepository.findConnections("oauth1Provider")); , + mockMvc.perform(get("/connect/oauth1Provider"), + .sessionAttr("oauthToken", new OAuthToken("requestToken", "requestTokenSecret")), + .param("oauth_token", "requestToken"), + .param("oauth_verifier", "verifier"));, + List<Connection<?>> connections = connectionRepository.findConnections("oauth1Provider");, + assertEquals(1, connections.size());, + assertEquals("oauth1Provider", connections.get(0).getKey().getProviderId());, + }, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import
[+++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredCredentialsException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import java.net.URLEncoder;, + StringBuilder authorizeUrl = new StringBuilder(this.authorizeUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken));, + authorizeUrl.append('&').append("callback_url").append("=").append(formEncode(callbackUrl));, + return authorizeUrl.toString();, + private String formEncode(String data) {, + return URLEncoder.encode(data, "UTF-8");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import java.net.URLEncoder;, + StringBuilder authorizeUrl = new StringBuilder(this.authorizeUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken));, + authorizeUrl.append('&').append("callback_url").append("=").append(formEncode(callbackUrl));, + return authorizeUrl.toString();, + private String formEncode(String data) {, + return URLEncoder.encode(data, "UTF-8");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.net.URLEncoder;, + this.authorizeUrl = authorizeUrl + "?response_type=code&client_id=" + formEncode(clientId);, + StringBuilder authorizeUrl = new StringBuilder(this.authorizeUrl).append('&').append("redirect_uri").append('=').append(formEncode(redirectUri));, + authorizeUrl.append('&').append("scope").append('=').append(formEncode(scope));, + authorizeUrl.append('&').append("state").append('=').append(formEncode(state)); , + return authorizeUrl.toString();, + private String formEncode(String data) {, + return URLEncoder.encode(data, "UTF-8");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import java.net.URLEncoder;, + StringBuilder authorizeUrl = new StringBuilder(this.authorizeUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken));, + authorizeUrl.append('&').append("callback_url").append("=").append(formEncode(callbackUrl));, +
[+++ b/docs/src/reference/docbook/apis.xml, + From a user's perspective, Twitter's function is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., + In contrast, Twitter's API is rather rich, enabling applications to interact with Twitter in ways that may not be obvious from the humble tweet box., + Spring Social offers interaction with Twitter's service API through the <interfacename>TwitterApi</interfacename> interface and its implementation, <classname>TwitterTemplate</classname>. , +TwitterApi twitterApi = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitterApi = new TwitterTemplate();]]>, + Attempting other operations, such as tweeting will fail with an <classname>IllegalStateException</classname> being thrown., + If you are
[+++ b/src/dist/changelog.txt, +Spring Social 1.1.4 Release (November 24, 2015), +===============================================, +New Features/Improvements, + * Add subclassing hok to ProviderConfigurationSupport to, + allow flexibility in construction of ApiHelper bean., + (GitHub PR #113), + * Add extension point in AbstractOAuth2Api to decorate RestTemplate in an API, + binding. (GitHub PR #158), + * Enable proxy user authentication with http.proxyUser, + and http.proxyPassword. (GitHub PR #177), + * Add support for app-provided `state` parameter., + (GitHub PR #180), + * Remove DataAccessException from throws clause of , + SocialUserDetailsService#loadUserByUserId(). DataAccessException, + is a RuntimeException, so this should not be a breaking
[+++ b/.gitignore, +++ b/.gitignore, +++ b/docs/src/reference/docbook/overview.xml, + <entry>Spring Social's service provider framework and OAuth support.</entry>, + <entry>Spring Social's <classname>ConnectController</classname>, which handles the OAuth process, establishing connections with social providers.</entry>, + <entry>spring-social-linkedin</entry>, + <entry>Includes Spring Social's LinkedIn API.</entry>, + </row>, + <row>, + <row>, + <entry>spring-social-twitter</entry>, + <entry>Includes Spring Social's Twitter API as well as support for signing into an application via Twitter.</entry>, + </row>, + <para>To let Spring Social handle the back-and-forth exchange between your application and a service required for OAuth authorization, you'll need the web module:</para>, +++ b/.gitignore, +++ b/docs/src/reference/docbook/overview.xml, + <entry>Spring Social's service provider framework and
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, + private final JdbcTemplate jdbcTemplate;, +, + @Inject, + public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, + this.jdbcTemplate = jdbcTemplate;, + }, +, + public ShowcaseUser findUserByUsername(String username) {, + return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, + new RowMapper<ShowcaseUser>() {, + public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, + return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, + .getString("email"));, + }, + }, username);, + }, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + * Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + * Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @deprecated Use of implicit grant doesn't make
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + private boolean useParametersForClientAuthentication; , + * Assumes that the authorization URL is the same as the authentication URL., + this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl);, + if (!useParametersForClientAuthentication) {, + * Set to true to pass client credentials to the provider as parameters instead of using HTTP Basic authentication., + * @param useParametersForClientAuthentication, + */, + public void setUseParametersForClientAuthentication(boolean useParametersForClientAuthentication) {, + this.useParametersForClientAuthentication = useParametersForClientAuthentication;, + }, +, + /**, + if (useParametersForClientAuthentication) {, + if (useParametersForClientAuthentication) {, + if (useParametersForClientAuthentication) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + private boolean useParametersForClientAuthentication; , + * Assumes that the authorization URL is
[+++ b/.gitignore, +++ b/.gitignore, +++ b/build.gradle, +++ b/.gitignore, +++ b/build.gradle, +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson, +++ b/.gitignore, +++ b/build.gradle, +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson, +++ b/gradle.properties, +++ b/.gitignore, +++ b/build.gradle, +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson, +++ b/gradle.properties, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, + * Copyright 2014 the original author or authors., +public abstract class AbstractOAuth2ApiBinding implements ApiBinding {, + private final RestTemplate restTemplate;, +++ b/.gitignore, +++ b/build.gradle, +++ b/docs/manual/src/asciidoc/index.adoc, +Craig Walls; Keith Donald; Roy Clarkson, +++ b/gradle.properties, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, + * Copyright 2014 the original author or authors., +public abstract class AbstractOAuth2ApiBinding implements
[+++ b/docs/src/reference/docbook/signin.xml, + After the user has successfully signed up in your application, you can complete the connection between the provider and the newly created account by calling <methodname>ProviderSignInUtils.handleConnectPostSignUp()</methodname>:, +ProviderSignInUtils.handleConnectPostSignUp(accountId, request);, +]]>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, + * Find the ids for users that have the given {@link Connection}., + List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, + * Find the ids for users that have the given {@link Connection}., + List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, + * @see #findUserIdsWithConnection(Connection), + public List<String> findUserIdsWithConnection(Connection<?> connection) {, + List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/web/connect/SignInControllerGateway.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-connect/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-connect/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/docs/src/info/changelog.txt, + * If multiple matching connections are found during provider sign in, redirect, + to the sign in page to offer the user a chance to sign in through some other, + means (username/password, via a different provider, etc). (SOCIAL-237)]
[+++ b/docs/src/reference/docbook/implementing.xml]
[+++ b/gradle.properties, +h2Version=1.4.195, +springSecurityVersion=4.2.2.RELEASE, +thymeleaf3Version=3.0.5.RELEASE, +thymeleafSpring5Version=3.0.5.M3]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/DisconnectInterceptor.java, + void preDisconnect(ConnectionFactory<S> connectionFactory, WebRequest request); , + void postDisconnect(ConnectionFactory<S> connectionFactory, WebRequest request);]
[+++ b/build.gradle, + thymeleafVersion = '2.1.2.RELEASE', + mavenCentral(), + compile ("org.thymeleaf:thymeleaf:$thymeleafVersion", optional), + compile ("org.thymeleaf:thymeleaf-spring3:$thymeleafVersion", optional), + compile ("org.thymeleaf:thymeleaf-spring4:$thymeleafVersion", optional), +++ b/build.gradle, + thymeleafVersion = '2.1.2.RELEASE', + mavenCentral(), + compile ("org.thymeleaf:thymeleaf:$thymeleafVersion", optional), + compile ("org.thymeleaf:thymeleaf-spring3:$thymeleafVersion", optional), + compile ("org.thymeleaf:thymeleaf-spring4:$thymeleafVersion", optional), +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, +import org.springframework.context.ApplicationContext;, +import org.springframework.util.ClassUtils;, + private final boolean thymeleaf3Present;, +, + private final boolean thymeleaf4Present;, +, + thymeleaf3Present = ClassUtils.isPresent("org.thymeleaf.spring3.context.SpringWebContext", ConnectedAttrProcessor.class.getClassLoader());, + thymeleaf4Present = ClassUtils.isPresent("org.thymeleaf.spring4.context.SpringWebContext", ConnectedAttrProcessor.class.getClassLoader());, + ConnectionRepository connectionRepository = getConnectionRepository(arguments.getContext());, + return connectionRepository.findConnections(providerId).size() > 0;, + }, + private ConnectionRepository getConnectionRepository(final IContext context) {, + ApplicationContext applicationContext = null;, + if (thymeleaf4Present) {, + applicationContext =
[+++ b/build.gradle, +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile "org.springframework:spring-web:$springVersion", + compile "org.springframework:spring-webmvc:$springVersion", + compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/build.gradle, +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile "org.springframework:spring-web:$springVersion", + compile "org.springframework:spring-webmvc:$springVersion", + compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile "org.springframework:spring-web:$springVersion", + compile "org.springframework:spring-webmvc:$springVersion", + compile
[+++ b/build.gradle, +project('spring-social-core') {, + description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', + description = 'Facebook API', + compile project(':spring-social-core'), + description = 'Github API', + compile project(':spring-social-core'), + description = 'Gowalla API', + compile project(':spring-social-core'), + description = 'LinkedIn API', + compile project(':spring-social-core'), + description = 'TripIt API', + compile project(':spring-social-core'), + description = 'Twitter API', + compile project(':spring-social-core'), + compile project(':spring-social-core'), + compile project(':spring-social-core'), + testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/build.gradle, +project('spring-social-core') {, + description = 'Foundational module containing the ServiceProvider "Connect" Framework and Service API invocation support.', + description = 'Facebook
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/docs/src/reference/docbook/serviceprovider.xml, + List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/docs/src/reference/docbook/signin.xml, + return account.getUsername();, +++ b/docs/src/reference/docbook/serviceprovider.xml, + List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/docs/src/reference/docbook/signin.xml, + return account.getUsername();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @return the new user id (must not be null)., +++ b/docs/src/reference/docbook/serviceprovider.xml, + List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/docs/src/reference/docbook/signin.xml, + return account.getUsername();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @return the new user id (must not be null)., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, + * Find the ids for local application users that have the given {@link Connection}., + * No entries indicates no application users are associated with the connection; ProviderSignInController will offer the
[+++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +public class OperationNotPermittedException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +public class BadCredentialsException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +public class OperationNotPermittedException extends ProviderApiException {, +++ b/spring-social-core/src/main/java/org/springframework/social/ProviderApiException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + *
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , + * @return the access grant., + * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , + * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++
[+++ b/build.gradle, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + String buildAuthorizeUrl(String redirectUri, String scope, String state);, + String buildAuthenticateUrl(String redirectUri, String state);, +++ b/build.gradle, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + String buildAuthorizeUrl(String redirectUri, String scope, String state);, + String buildAuthenticateUrl(String redirectUri, String state);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + String clientInfo = "?response_type=code&client_id=" + formEncode(clientId);, + this.authenticateUrl = authenticateUrl + "?response_type=code&client_id=" + formEncode(clientId);, + public String buildAuthorizeUrl(String redirectUri, String scope, String state) {, + return buildOAuthUrl(authorizeUrl, redirectUri, scope, state);, + public String buildAuthenticateUrl(String redirectUri, String state) {, + return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state) : buildAuthorizeUrl(redirectUri,
[+++ b/gradle.properties, +springSocialVersion=1.1.0.BUILD-SNAPSHOT, +role=developer]
[+++ b/docs/src/reference/docbook/signin.xml, + String signIn(String userId, Connection<?> connection, NativeWebRequest request);, + public String signIn(String localUserId, Connection<?> connection, NativeWebRequest request) {, + return null;, +++ b/docs/src/reference/docbook/signin.xml, + String signIn(String userId, Connection<?> connection, NativeWebRequest request);, + public String signIn(String localUserId, Connection<?> connection, NativeWebRequest request) {, + return null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Version.java, + Bearer {, + public String getAuthorizationHeaderValue(String accessToken) {, + return "Bearer " + accessToken;, + } , + },, +]
[+++ b/build.gradle, + // to be able to use the mock rest server, + testCompile project(':spring-social-core').sourceSets.test.classes, + // to be able to use the mock rest server, + testCompile project(':spring-social-core').sourceSets.test.classes, + // to be able to use the mock rest server, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/build.gradle, + // to be able to use the mock rest server, + testCompile project(':spring-social-core').sourceSets.test.classes, + // to be able to use the mock rest server, + testCompile project(':spring-social-core').sourceSets.test.classes, + // to be able to use the mock rest server, + testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/spring-social-gowalla/src/test/java/org/springframework/social/gowalla/GowallaTemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +import java.util.Collections;, +import java.util.Map;, + private final Map<String, Object> additionalParameters;, +, + private final String scope;, +, + this(accessToken, null, null, null, Collections.<String, Object>emptyMap());, + public AccessGrant(String accessToken, Integer expiresIn, String refreshToken, String scope, Map<String, Object> additionalParameters) {, + this.scope = scope;, + this.additionalParameters = additionalParameters;, + /**, + * The scope of the access grant., + * May be null if the provider doesn't return the granted scope in the response., + */, + public String getScope() {, + return scope;, + }, + , + /**, + * Additional parameters returned along with the access
[+++ b/docs/src/reference/docbook/signin.xml, + In this case, <code>onlogin</code> is set to use jQuery to submit the form, triggering <classname>FacebookSigninController</classname> to authenticate the user to the application.]
[+++ b/.gitignore, +samples/**/.classpath, +samples/**/.project, +samples/**/.settings, +samples/**/bin]
[+++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * @param connectionFactory the ConnectionFactory to register, +++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * @param apiHelperClass the API helper class, +++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, + * @return an account ID., +++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * @param apiHelperClass
[+++ b/build.gradle, +project('spring-social-client') {, + description = 'Service Provider Framework', + compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", + description = 'Facebook Service Provider', + compile project(':spring-social-client'), + description = 'Github Service Provider', + compile project(':spring-social-client'), + description = 'Gowalla Service Provider', + compile project(':spring-social-client'), + description = 'LinkedIn Service Provider', + compile project(':spring-social-client'), + description = 'TripIt Service Provider', + compile project(':spring-social-client'), + description = 'Twitter Service Provider', + compile project(':spring-social-client'), + compile project(':spring-social-client'), + compile project(':spring-social-client'), + testCompile files(this.project(':spring-social-client').sourceSets.test.classesDir), +++ b/build.gradle, +project('spring-social-client') {, + description = 'Service Provider Framework', + compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", + description = 'Facebook Service Provider', + compile project(':spring-social-client'), +
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.util.ClassUtils;, + private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, + , + private Class<?> apiConfigClass;, + protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiConfigClass) {, + this.apiConfigClass = apiConfigClass; , + BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, + return addApiBindingBean;, + private BeanDefinition addApiBindingBean(ParserContext parserContext) {, + BeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(apiConfigClass).getBeanDefinition();, + parserContext.getRegistry().registerBeanDefinition(ClassUtils.getShortNameAsProperty(apiConfigClass), beanDefinition);, + return null;, + }, + , +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.util.ClassUtils;, + private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, + , + private Class<?> apiConfigClass;, + protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiConfigClass) {, + this.apiConfigClass = apiConfigClass; , + BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, + return addApiBindingBean;,
[+++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/ProtectedResourceRequest.java, +package org.springframework.security.oauth.client;, +, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +, +public final class ProtectedResourceRequest {, + , + private final HttpHeaders headers;, + , + private final byte[] body;, + , + private final URI uri;, + , + private final HttpMethod method;, +, + public ProtectedResourceRequest(HttpHeaders headers, byte[] body, URI uri, HttpMethod method) {, + this.headers = headers;, + this.body = body;, + this.uri = uri;, + this.method = method;, + }, +, + public HttpHeaders getHeaders() {, + return headers;, + }, +, + public byte[] getBody() {, + return body;, + }, +,
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +/**, + * Represents a direct message., + * @author Craig Walls, + */, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +/**, + * Represents a direct message., + * @author Craig Walls, + */, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageApi.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to
[+++ /dev/null, +++ /dev/null, +++ b/samples/gowalla-showcase/src/main/webapp/WEB-INF/spring/data.xml, + <jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ /dev/null, +++ b/samples/gowalla-showcase/src/main/webapp/WEB-INF/spring/data.xml, + <jdbc:script location="classpath:/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql" />, +++ b/samples/gowalla-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <bean id="serviceProviderFactory" class="org.springframework.social.config.BeanServiceProviderFactory" autowire="constructor" />]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ApiTokens.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <!-- Configure a GitHub service provider -->, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <!-- Configure a GitHub service provider -->, +++ b/samples/gowalla-showcase/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <!-- Configure a GitHub service provider -->, +++ b/samples/gowalla-showcase/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/gowalla-showcase/src/main/java/org/springframework/social/samples/gowalla/GowallaSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, + <!-- Configure a GitHub service provider -->, +++ b/samples/gowalla-showcase/pom.xml, + <artifactId>spring-social-config</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, + <groupId>org.springframework.security</groupId>, + <artifactId>spring-security-crypto</artifactId>, + <version>3.1.0.CI-SNAPSHOT</version>, +++
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;, + * @author Yuan Ji, +public class SocialAuthenticationFilter extends AbstractAuthenticationProcessingFilter {, + super("/auth");, + setAuthenticationManager(authManager);, + /**, + * Indicates whether this filter should attempt to process a social network login request for the current invocation., + * <p>Check if request URL matches filterProcessesUrl with valid providerId. , + * The URL must be like {filterProcessesUrl}/{providerId}. , + *, + * @return <code>true</code> if the filter should attempt authentication, <code>false</code> otherwise., + */, + protected boolean requiresAuthentication(HttpServletRequest request, HttpServletResponse response) {, + String providerId = getRequestedProviderId(request);, + if (providerId != null){, + Set<String> authProviders =
[+++ b/docs/src/reference/docbook/signin.xml, + <listitem><para><code>GET /signin/{providerId}?code={verifier}</code> - Receives the authentication callback from the provider, accepting a code. Exchanges this code for an access token. Using this access token, it retrieves the user's provider user ID and uses that to lookup a connected account and then authenticates to the application through the sign in service. </para>, + If the provider user ID doesn't match any existing connection, <classname>ProviderSignInController</classname> will redirect to a sign up URL. , + <listitem><para><code>GET /signin/{providerId}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authentication callback from the provider, accepting a verification code. Exchanges this verification code along with the request token
[+++ b/docs/src/reference/docbook/overview.xml, + <row>, + <entry>spring-social-test</entry>, + <entry>Support for testing ServiceProvider implementations and API bindings</entry>, + </row>]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.authentication.AuthenticationServiceException;, + Authentication auth = attemptAuthService(authService, AuthenticationMode.EXPLICIT, request, response);, + if (auth == null) {, + throw new AuthenticationServiceException("explicit authentication failed");, + }, + return auth;, + throws SocialAuthenticationRedirectException, AuthenticationException {]
[+++ b/src/assembly/distribution.xml, + <fileSet>, + <directory>${project.build.directory}</directory>, + <include>*.jar</include>, + </fileSet>, + </fileSets>]
[+++ b/build.gradle, + sourceSets {, + test {, + resources {, + srcDirs = ['src/test/resources', 'src/test/java'], + }, + }, + }, +, + testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/build.gradle, + sourceSets {, + test {, + resources {, + srcDirs = ['src/test/resources', 'src/test/java'], + }, + }, + }, +, + testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, + <groupId>org.scribe</groupId>, + <artifactId>scribe</artifactId>, + <version>1.0.7</version>, +++ b/build.gradle, + sourceSets {, + test {, + resources {, + srcDirs = ['src/test/resources', 'src/test/java'], + }, + }, + }, +, + testCompile files(this.project(':spring-social-core').sourceSets.test.classesDir), +++ b/samples/facebook-showcase-2/pom.xml, + <groupId>org.scribe</groupId>, + <artifactId>scribe</artifactId>, + <version>1.0.7</version>, +++ b/samples/facebook-showcase-2/src/main/java/org/springframework/social/samples/facebook/FacebookSampleAccountIdResolver.java, +import org.springframework.social.provider.AccountIdResolver;, +++
[+++ b/build.gradle, + compile ("org.springframework.android:spring-android-rest-template:1.0.0.M2") {, + optional = true, + transitive = false, + }, +++ b/build.gradle, + compile ("org.springframework.android:spring-android-rest-template:1.0.0.M2") {, + optional = true, + transitive = false, + }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, + /**, + * AuthorizationCode denotes the server-side authorization flow, and is, + * associated with the response_type=code parameter value, + */, + AuthorizationCode,, +, + /**, + * ImplicitGrant
[+++ b/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>]
[+++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/Fake.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/src/dist/changelog.txt, +Spring Social 1.1.0 Milestone 2 (February 12, 2012), +===================================================, + Improvements, + * Tighter integration with Spring Security with SocialAuthenticationFilter., + (SOCIAL-232), + * Support for non-standard parameters in request token and authorization URLs., + (SOCIAL-349), + * Interceptors in ProviderSignInController to allow for custom behavior in, + authorization flow. (SOCIAL-255), + * Allow for more control in specifying a callback URL, both with an injectable, + property and an overridable method. (SOCIAL-259), +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +public class ExpiredAuthorizationException extends RejectedAuthorizationException {, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +public class ExpiredAuthorizationException extends RejectedAuthorizationException {, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Exception indicating that the authorization used during an operation invocation is invalid., + * This can occur when an access token that is malformed or fails signature validation, +public class InvalidAuthorizationException extends RejectedAuthorizationException {, + public InvalidAuthorizationException(String message) {, + super(message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +public class ExpiredAuthorizationException extends RejectedAuthorizationException {, +++ b/spring-social-core/src/main/java/org/springframework/social/InvalidAuthorizationException.java, + * Exception indicating that the authorization used during an operation invocation is invalid., + * This can occur when an access token that is malformed or fails
[+++ b/docs/src/reference/docbook/connecting.xml, + MultiValueMap<String, String> preConnect(ConnectionFactory<A> connectionFactory, WebRequest request);, + It has a return type of <code>MultiValueMap&lt;String, String&gt;</code> which can contain parameters to be passed on the request when <classname>ConnectController</classname> redirects to the provider's authorization URL., + If it has no parameters to contribute to the authorization URL, it may return <code>null</code>. , + For example, suppose that after connecting a user account with their Twitter profile you want to immediately post a tweet about that connection to the user's Twitter timeline. , + public MultiValueMap<String, String> preConnect(ConnectionFactory<TwitterApi> provider, WebRequest request) {, + return null;, +++ b/docs/src/reference/docbook/connecting.xml, + MultiValueMap<String,
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, + * May never return null if this method will implicitly create a local user account from the connection if no such local account already exists., + * @param connection the service provider connection resulting from the provider sign-in attempt, + String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, + * May never return null if this method will implicitly create a local user account from the connection if no such local account already exists., + * @param connection the service provider connection resulting from the provider sign-in attempt, + String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +import org.springframework.social.connect.ServiceProviderConnection;, + public String
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, + private final SigningSupport signingUtils;, + this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, + private final SigningSupport signingUtils;, + this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + private final SigningSupport signingUtils;, + this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, + private final SigningSupport signingUtils;, + this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + private final SigningSupport signingUtils;, + this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.,
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <para>In <xref linkend="apis"/>, you'll see how Spring Social provides APIs through which your application may interact with various service providers. But before you can work with a service API, your application must be authorized to access the service on the user's behalf.</para>, + <para>Spring Social supports two authorization protocols: OAuth 1 and OAuth 2. Both of these protocols achieve essentially the same thing: They enable a user to grant permission for a consumer to access their data and perform actions on a provider. That permission is manifested as an access token that serves as a sort
[+++ b/samples/spring-social-showcase/pom.xml, + , +, + <!-- JSR 303 with Hibernate Validator -->, + <dependency>, + <groupId>javax.validation</groupId>, + <artifactId>validation-api</artifactId>, + <version>1.0.0.GA</version>, + </dependency>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-validator</artifactId>, + <version>4.1.0.Final</version>, + </dependency>, + , +++ b/samples/spring-social-showcase/pom.xml, + , +, + <!-- JSR 303 with Hibernate Validator -->, + <dependency>, + <groupId>javax.validation</groupId>, + <artifactId>validation-api</artifactId>, + <version>1.0.0.GA</version>, + </dependency>, + <dependency>, + <groupId>org.hibernate</groupId>, + <artifactId>hibernate-validator</artifactId>, + <version>4.1.0.Final</version>, + </dependency>, + , +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may
[+++ b/LICENSE, + Apache License
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +import org.springframework.social.facebook.FacebookOperations;, + FacebookProfile userProfile = getFacebookApi(user).getUserProfile();, + getFacebookApi(user).updateStatus(message);, +, + private FacebookOperations getFacebookApi(Principal user) {, + return facebookProvider.getConnections(user.getName()).get(0).getServiceApi();, + }, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +import org.springframework.social.facebook.FacebookOperations;, + FacebookProfile userProfile = getFacebookApi(user).getUserProfile();, + getFacebookApi(user).updateStatus(message);, +, + private FacebookOperations getFacebookApi(Principal user) {, + return facebookProvider.getConnections(user.getName()).get(0).getServiceApi();, + }, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('kdonald', '6ae72b21df4fb9fad5f35021a5b8427bf8fb023793f4e1c43e34148fe9560183', 'Keith', 'Donald', 'kdonald@vmware.com');, +insert into Account (username, password, firstName, lastName, email) values ('rclarkson', 'fe65bc88d87f571e871721f4ad87cc7b0f47f5c7d9b9e3c2a0b4b8936023b36a', 'Roy', 'Clarkson', 'rclarkson@vmware.com');, +, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +import org.springframework.social.facebook.FacebookOperations;, + FacebookProfile userProfile = getFacebookApi(user).getUserProfile();, + getFacebookApi(user).updateStatus(message);, +, + private
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/src/reference/docbook/signin.xml, + <constructor-arg ref="twitterProvider" />, + <classname>TwitterSigninController</classname> is constructed with four arguments:, + <listitem><para>A reference to a <classname>TwitterServiceProvider</classname> bean. <classname>TwitterSigninController</classname> will use this to negotiate the connection with Twitter.</para></listitem>, + <constructor-arg ref="facebookProvider" />, + It also needs a reference to a <classname>FacebookServiceProvider</classname> bean that it will use to negotiate the connection with Facebook.]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + return auth;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + return auth;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, + StringBuffer sb = request.getRequestURL();]
[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import org.junit.Ignore;, + @Ignore("Revisit this with a better response-content-based test later")]
[+++ b/build.gradle, + compile project(':spring-social-webmvc'), +project('spring-social-webmvc') {, + description = 'Spring Social Spring MVC extensions', + dependencies {, + compile "org.springframework:spring-web:$springVersion", + compile project(':spring-social-connect'), + compile project(':spring-social-oauth'), + }, +}, +++ b/build.gradle, + compile project(':spring-social-webmvc'), +project('spring-social-webmvc') {, + description = 'Spring Social Spring MVC extensions', + dependencies {, + compile "org.springframework:spring-web:$springVersion", + compile project(':spring-social-connect'), + compile project(':spring-social-oauth'), + }, +}, +++ b/samples/facebook-showcase-2/build.gradle, + gradleVersion = '0.9.1', + compile "org.springframework.social:spring-social-facebook:1.0.0.BUILD-SNAPSHOT", + compile "org.springframework.social:spring-social-webmvc:1.0.0.BUILD-SNAPSHOT", +++ b/build.gradle, + compile project(':spring-social-webmvc'), +project('spring-social-webmvc') {, + description = 'Spring Social Spring MVC extensions', + dependencies {, + compile "org.springframework:spring-web:$springVersion", + compile project(':spring-social-connect'), + compile project(':spring-social-oauth'),
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import javax.inject.Inject;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, + private String connectionStatusUrlPath = "/connect/";, + * Sets the URL path prefix for connection status redirects., + * @param connectionStatusUrlPath the URL path prefix for connection status redirects., + public void setConnectionStatusUrlPath(String connectionStatusUrlPath) {, + this.connectionStatusUrlPath = connectionStatusUrlPath;, + String path = connectionStatusUrlPath + providerId + getPathExtension(servletRequest);]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +public abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +public abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +public abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +public abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +public abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml, +++ b/build.gradle, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +public abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/SocialNamespaceHandler.java, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest.java]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 23, 2011), +++ b/build.gradle, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 23, 2011), +++ b/docs/src/reference/docbook/connecting.xml, + public TwitterServiceProvider twitter(@Value("#{environment['twitter.consumerKey']}") String consumerKey,, + @Value("#{environment['twitter.consumerSecret']}") String consumerSecret, ConnectionRepository connectionRepository) {, + public FacebookServiceProvider facebook(@Value("#{environment['facebook.appId']}") String appId,, + @Value("#{environment['facebook.appSecret']}") String appSecret, ConnectionRepository connectionRepository) {, + public TripItServiceProvider tripit(@Value("#{environment['tripit.consumerKey']}") String consumerKey,, + @Value("#{environment['tripit.consumerSecret']}") String consumerSecret, ConnectionRepository connectionRepository) {, + Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as properties of the current environment., + public TextEncryptor textEncryptor(@Value("#{environment['security.encryptPassword']}") String password,, + @Value("#{environment['security.encryptSalt']}") String salt) {, + <constructor-arg
[+++ b/build.gradle, + httpComponentsVersion = '4.2.1', +++ b/build.gradle, + httpComponentsVersion = '4.2.1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +++ b/build.gradle, + httpComponentsVersion = '4.2.1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + private final boolean parameterBasedClientAuthentication; , +, + /**, + * Constructs an OAuth2Template for a given set of client credentials. , + * Assumes that those credentials will be presented to the provider using HTTP Basic authentication., + * Also assumes that the authorization URL is the same as the authentication URL., + * @param clientId the client ID, + * @param clientSecret the client secret, + * @param authorizeUrl the base URL to
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +OAuth2Operations oauth2Operations = connectionFactory.getOAuth2Operations();, +String authorizeUrl = oauth2Operations.buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, new AuthorizationParameters(callbackUrl));, +AccessGrant accessGrant = oauth2Operations.exchangeForAccess(authorizationCode, callbackUrl);, +OAuth2Operations oauth2Operations = connectionFactory.getOAuth2Operations();, +String authorizeUrl = oauth2Operations.buildAuthorizeUrl(GrantType.IMPLICIT_GRANT, new AuthorizationParameters(callbackUrl));, + OAuthToken fetchRequestToken(String callbackUrl, MultiValueMap<String, String> additionalParameters);, + <para>, + The example code below shows use of a FacebookServiceProviderConnectionFactory to create a connection to Facebook using the OAuth2 server-side flow illustrated above., + Here, FacebookServiceProviderConnectionFactory is a subclass of OAuth2ServiceProviderConnectionFactory:, + <programlisting language="java"><![CDATA[, +TwitterServiceProviderConnectionFactory connectionFactory = new TwitterServiceProviderConnectionFactory();, +OAuth1Operations oauth1Operations = connectionFactory.getOAuth1Operations();, +String requestToken = oauth1Operations.fetchRequestToken(callbackUrl);, +String authorizeUrl = oauth1Operations.buildAuthorizeUrl(requestToken, AuthorizationParameters.NONE);, +response.sendRedirect(authorizeUrl);, +// when the provider callback is received with the oauth_token
[+++ b/.gitignore, +Thumbs.db, +build, +bin, +.classpath, +.project, +.settings, +++ b/.gitignore, +Thumbs.db, +build, +bin, +.classpath, +.project, +.settings, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + * Sets the default URL to redirect the user to after signing in using a provider., + String originalUrl = signInAdapter.signIn(userId, connection, request);, + return originalUrl != null ? redirect(originalUrl) : redirect(postSignInUrl);]
[+++ b/docs/src/reference/docbook/signin.xml, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="signin" xmlns:xlink="http://www.w3.org/1999/xlink">, + <para>, + Once a connection has been established between a user's consumer account and their service provider profile, that connection can be used to authenticate them to the consumer application by asking them to sign in to the service provider. , + Spring Social supports such service provider-based authentication with Twitter and Facebook., + </para>, + <para>, + Spring Social's <classname>TwitterSigninController</classname> is a Spring MVC controller that processes the "Sign in with Twitter" flow described at <ulink url="http://dev.twitter.com/pages/sign_in_with_twitter"/>. , + Essentially, this process is an OAuth 1 authorization flow, quite similar
[+++ b/build.gradle, + h2Version = '1.3.156', + jacksonVersion = '1.8.2', + springSecurityCryptoVersion = '3.1.0.RC2.crypto', + compile ("org.springframework.security:spring-security-crypto:$springSecurityCryptoVersion") { optional = true }, +++ b/build.gradle, + h2Version = '1.3.156', + jacksonVersion = '1.8.2', + springSecurityCryptoVersion = '3.1.0.RC2.crypto', + compile ("org.springframework.security:spring-security-crypto:$springSecurityCryptoVersion") { optional = true }, +++ b/docs/src/reference/docbook/connecting.xml, + registry.addConnectionFactory(new FacebookConnectionFactory(, + environment.getProperty("facebook.clientId"),, + registry.addConnectionFactory(new TwitterConnectionFactory(, + environment.getProperty("twitter.consumerKey"),, + public ConnectionRepository connectionRepository(, + Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, + if (authentication == null) {, + throw new IllegalStateException("Unable to get a ConnectionRepository: no user signed in");, + }, + return usersConnectionRepository().createConnectionRepository(authentication.getName());, + return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), , + textEncryptor);, +<bean id="connectionFactoryLocator" ,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1SigningRequestFactory.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors.,
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, + String clientKey = element.getAttribute("app-key");, + String clientSecret = element.getAttribute("app-secret");, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, + String clientKey = element.getAttribute("app-key");, + String clientSecret = element.getAttribute("app-secret");, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, + <xsd:attribute name="app-key" use="required" type="xsd:string">, + <xsd:attribute name="app-secret" use="required" type="xsd:string">, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, + String clientKey = element.getAttribute("app-key");, + String clientSecret = element.getAttribute("app-secret");, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, + <xsd:attribute name="app-key" use="required" type="xsd:string">, + <xsd:attribute name="app-secret" use="required" type="xsd:string">, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, + <social:service-provider , + class="org.springframework.social.twitter.connect.TwitterServiceProvider" , + app-key="twitter_key" , + app-secret="twitter_secret" />, + class="org.springframework.social.facebook.connect.FacebookServiceProvider" , + app-key="facebook_key" , + app-secret="facebook_secret" />]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + private final OAuth1Version version;, + this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);, + * @param version the version of OAuth 1, either 10 or 10a., + public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl, String authorizeUrl, String accessTokenUrl, OAuth1Version version) {, + this.version = version;, + if (version == OAuth1Version.CORE_10_REVISION_A) {, + if (version == OAuth1Version.CORE_10_REVISION_A) {, + if (version == OAuth1Version.CORE_10_REVISION_A) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + private final OAuth1Version version;, + this(consumerKey, consumerSecret, requestTokenUrl, authorizeUrl, accessTokenUrl, OAuth1Version.CORE_10_REVISION_A);, + * @param version the version of OAuth 1, either 10 or 10a., + public OAuth1Template(String consumerKey, String consumerSecret, String requestTokenUrl,
[+++ b/gradle.properties, +springVersion = 4.0.3.RELEASE, +++ b/gradle.properties, +springVersion = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/gradle.properties, +springVersion = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, + authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, + return authService;, +++ b/gradle.properties, +springVersion = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, + authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, + return authService;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/gradle.properties, +springVersion = 4.0.3.RELEASE, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, + authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, + return authService;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, + * Returns an account ID., +++ b/gradle.properties, +springVersion = 4.0.3.RELEASE, +++
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +public class SocialAuthenticationFailureHandler implements AuthenticationFailureHandler {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +public class SocialAuthenticationFailureHandler implements AuthenticationFailureHandler {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/ProviderServerErrorException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * @param connectionFactory the ConnectionFactory to register, +++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * @param apiHelperClass the API helper class, +++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * @param apiHelperClass the API helper class, +++ b/spring-social-core/src/main/java/org/springframework/social/UserIdSource.java, + * @return an account ID., +++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * @param apiHelperClass
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors.,
[+++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, + @SuppressWarnings("unchecked"), + @Test, + public void addConnection_authenticated() throws Exception {, +, + FilterTestEnv env = new FilterTestEnv("GET", "/auth", null);, + env.filter.setFilterProcessesUrl(env.req.getRequestURI());, + env.filter.setPostLoginUrl("/success");, + env.filter.setConnectionAddedRedirectUrl("/added");, + env.filter.setConnectionAddingFailureRedirectUrl("/add-failed");, +, + Connection<?> connection = env.auth.getConnection();, + ConnectionData data = connection.createData();, + String userId = "joe";, +, + ConnectionFactory<Object> factory = mock(MockConnectionFactory.class);, + when(factory.getProviderId()).thenReturn("mock");, + when(factory.createConnection(data)).thenReturn((Connection<Object>) connection);, + env.req.setRequestURI(env.req.getRequestURI() + "/" + factory.getProviderId());, +, + SocialAuthenticationService<Object> authService = mock(SocialAuthenticationService.class);, + when(authService.getConnectionCardinality()).thenReturn(ConnectionCardinality.ONE_TO_ONE);, + when(authService.getConnectionFactory()).thenReturn(factory);, + when(authService.getAuthToken(env.req, env.res)).thenReturn(env.auth);, + env.addAuthService(authService);, +, + when(env.userIdSource.getUserId()).thenReturn(userId);, +, + when(env.usersConnectionRepository.findUserIdsConnectedTo(data.getProviderId(), set(data.getProviderUserId()))).thenReturn(empty(String.class));, +, + // fallback to default /added, + when(authService.getConnectionAddedRedirectUrl(env.req, connection)).thenReturn(null);, +, + // already
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + response.setHeader("Pragma", "no-cache");, + response.setDateHeader("Expires", 1L);, + response.setHeader("Cache-Control", "no-cache");, + response.addHeader("Cache-Control", "no-store");]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, + /**, + * The command to execute to create a new local user profile in the event no user id could be mapped to a connection., + * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., + * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., + * @see #findUserIdsWithConnection(Connection), + */, + void setConnectionSignUp(ConnectionSignUp connectionSignUp);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, + /**, + * The command to execute to create a new local user profile in the event no user id could be mapped
[+++ b/samples/spring-social-showcase/pom.xml, + <artifactId>spring-social-facebook</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, +++ b/samples/spring-social-showcase/pom.xml, + <artifactId>spring-social-facebook</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, +++ /dev/null, +++ b/samples/spring-social-showcase/pom.xml, + <artifactId>spring-social-facebook</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/pom.xml, + <artifactId>spring-social-facebook</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/pom.xml, + <artifactId>spring-social-facebook</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/spring-social-showcase/pom.xml, + <artifactId>spring-social-facebook</artifactId>, + <version>${org.springframework.social-version}</version>, + </dependency>, + <dependency>, + <groupId>org.springframework.social</groupId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + * @param postFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + * @param postFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Sets the URL to redirect to if authentication fails or if authorization is denied by the user., + * @param postFailureUrl the URL to redirect to after an authentication fail or authorization deny, + * @deprecated use {@link #postFailureUrl(String)} instead, + @Deprecated, + postFailureUrl(defaultFailureUrl);]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + Once established, a FacebookApi instance can be obtained and used to post content to the user's wall., + Some service providers use OAuth, others use Basic Auth, others may use something else.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2ConnectionFactory.java, +import java.util.UUID;, +, + * Generates a value for the state parameter., + * @return a random UUID by default. , + */, + public String generateState() {, + return UUID.randomUUID().toString();, + }, +, + /**, + * Indicates that this provider supports the state parameter in callbacks to prevent against CSRF., + * Default implementation returns true. , + */, + public boolean supportsStateParameter() {, + return true;, + }, +, + /**, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2ConnectionFactory.java, +import java.util.UUID;, +, + * Generates a value for the state parameter., + * @return
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + public void setSignupUrl(String signupUrl) {, + this.signupUrl = signupUrl;, + }, +, + public void setConnectionAddedRedirectUrl(String connectionAddedRedirectUrl) {, + this.connectionAddedRedirectUrl = connectionAddedRedirectUrl;, + }, +, + public void setUpdateConnections(boolean updateConnections) {, + this.updateConnections = updateConnections;, + }, +, + public void setPostLoginUrl(String postLoginUrl) {, + AuthenticationSuccessHandler successHandler = getSuccessHandler();, + if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, + AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, + h.setDefaultTargetUrl(postLoginUrl);, + } else {, + throw new IllegalStateException("can't set postLoginUrl on unknown successHandler, type is " + successHandler.getClass().getName());, + }, + }, +, + public void setPostFailureUrl(String postFailureUrl) {, + AuthenticationFailureHandler failureHandler =
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.util.ArrayList;, +import java.util.Collections;, +import javax.servlet.http.HttpSession;, +import org.springframework.security.authentication.BadCredentialsException;, + private String filterProcessesUrl = "/auth";, + private String signupUrl = "/signup";, + /**, + * testing only, + * , + * @param session may be null, + * @param data may be null, + * @return true if new attempt was added to session, + */, + static boolean addSignInAttempt(HttpSession session, ConnectionData data) {, + return session == null || data == null ? null : SignInAttempts.add(session, data);, + }, + , + /**, + * @param session may be null, + * @return list of ConnectionData
[+++ b/docs/src/reference/docbook/signin.xml, +]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, + * Find the ids for users that have the given {@link Connection}., + List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, + * Find the ids for users that have the given {@link Connection}., + List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, + * @see #findUserIdsWithConnection(Connection), + public List<String> findUserIdsWithConnection(Connection<?> connection) {, + List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());
[+++ b/build.gradle, +apply from: "$rootDir/gradle/dist.gradle", +apply from: "${rootDir}/gradle/checks.gradle", +++ b/build.gradle, +apply from: "$rootDir/gradle/dist.gradle", +apply from: "${rootDir}/gradle/checks.gradle", +++ b/gradle/bundlor.gradle, +/*, + * Copyright 2002-2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,,
[+++ b/build.gradle, + ext.springVersion = "4.0.2.RELEASE", +++ b/build.gradle, + ext.springVersion = "4.0.2.RELEASE", +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, + restTemplate = createRestTemplateWithCulledMessageConverters();, + RestTemplate client = createRestTemplateWithCulledMessageConverters();, + // Temporary: The RestTemplate that accepts a list of message converters wasn't added until Spring 3.2.7., + // Remove this method and use that constructor exclusively when 3.1.x support is no longer necessary (Spring Social 2.0)., + private RestTemplate createRestTemplateWithCulledMessageConverters() {, + RestTemplate client;, + List<HttpMessageConverter<?>> messageConverters = getMessageConverters();, + try {, + client = new RestTemplate(messageConverters);, + } catch (NoSuchMethodError e) {, + client = new RestTemplate();, + client.setMessageConverters(messageConverters);, + }, + client.setRequestFactory(ClientHttpRequestFactorySelector.getRequestFactory());, +
[+++ b/src/main/java/org/springframework/social/oauth/AccessTokenServices.java, +package org.springframework.social.oauth;, +, +import org.springframework.security.core.AuthenticationException;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +, +public interface AccessTokenServices {, + /**, + * Get the token for the specified protected resource., + * , + * @param resourceId, + * The id of the protected resource., + * @return The token, or null if none was found., + */, + OAuthConsumerToken getToken(String resourceId, Object user) throws AuthenticationException;, +, + /**, + * Store a token for a specified resource., + * , + * @param resourceId, + * The id of the protected resource., + * @param token, + * The token to store.,
[+++ b/build.gradle, + h2Version = '1.3.168', + hamcrestVersion = '1.3', + jacksonVersion = '1.9.9', + springVersion = '3.1.2.RELEASE', + springSecurityCryptoVersion = '3.1.1.RELEASE', + springTestMvcVersion = '1.0.0.M1', +++ b/build.gradle, + h2Version = '1.3.168', + hamcrestVersion = '1.3', + jacksonVersion = '1.9.9', + springVersion = '3.1.2.RELEASE', + springSecurityCryptoVersion = '3.1.1.RELEASE', + springTestMvcVersion = '1.0.0.M1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import java.util.LinkedList;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, + restTemplate = createRestTemplate(credentials);, + private RestTemplate createRestTemplate(OAuth1Credentials credentials) {, + RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, + OAuth1RequestInterceptor interceptor = new OAuth1RequestInterceptor(credentials);, + List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, + interceptors.add(interceptor);, + client.setInterceptors(interceptors);, + return client;, + }, + , +++ b/build.gradle,
[+++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * @param connectionFactory the ConnectionFactory to register, +++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + return new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + return new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, + * @param apiHelperClass the API helper class, +++ b/gradle.properties, +springVersion = 4.0.6.BUILD-SNAPSHOT, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ConnectionFactoryConfigurer.java, + * @param connectionFactory the ConnectionFactory to register, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + return new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, + public AuthenticationFailureHandler getDelegate() {, + return delegate;, + }, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, + public AuthenticationFailureHandler getDelegate() {, + return delegate;, + }, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL)));, + * @deprecated use {@link #setPostFailureUrl(String)} instead, + @Deprecated, + setPostFailureUrl(defaultFailureUrl);, + /**, + * The URL to redirect to if authentication fails or if authorization is denied by the user., + * @param postFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., + */, +, + if (failureHandler instanceof SocialAuthenticationFailureHandler) {, + failureHandler = ((SocialAuthenticationFailureHandler)failureHandler).getDelegate();, + }, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, + public AuthenticationFailureHandler
[+++ b/docs/src/reference/docbook/implementing.xml, +public class FacebookServiceProviderConnectionFactory extends OAuth2ServiceProviderConnectionFactory<FacebookApi> {, +public class TwitterServiceProviderConnectionFactory extends OAuth1ServiceProviderConnectionFactory<FacebookApi> {, +++ b/docs/src/reference/docbook/implementing.xml, +public class FacebookServiceProviderConnectionFactory extends OAuth2ServiceProviderConnectionFactory<FacebookApi> {, +public class TwitterServiceProviderConnectionFactory extends OAuth1ServiceProviderConnectionFactory<FacebookApi> {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookServiceProviderConnectionFactory.java, +public class FacebookServiceProviderConnectionFactory extends OAuth2ServiceProviderConnectionFactory<FacebookApi> {]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, + /**, + * AuthorizationCode denotes the server-side authorization flow, and is, + * associated with the response_type=code parameter value, + */, + AuthorizationCode,, +, + /**, + * ImplicitGrant denotes the client-side authorization flow and is, + * associated with the response_type=token parameter value, + */, + ImplicitGrant, +}, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**,
[+++ b/docs/src/reference/docbook/connecting.xml, + <title>Connecting to Service Providers</title>, + <para>Most connections with social providers are based on OAuth <footnote><para><ulink url="http://oauth.net" /></para></footnote>. OAuth is an open protocol that makes it possible for a client to access a service on behalf of a user without the client being aware of the user's credentials.</para>, + , + <para>Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2015 the original author or authors., + private String signupUrl;, +, + private String connectionAddedRedirectUrl;, +, + private String defaultFailureUrl;, +, + if (signupUrl != null) {, + filter.setSignupUrl(signupUrl);, + }, +, + if (connectionAddedRedirectUrl != null) {, + filter.setConnectionAddedRedirectUrl(connectionAddedRedirectUrl);, + }, +, + if (defaultFailureUrl != null) {, + filter.setDefaultFailureUrl(defaultFailureUrl);, + }, + , + /**, + * Sets the URL to land on after an authentication failure so that the user can register with the application., + * @param signupUrl the URL to redirect to after an authentication failure, + * @return
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + String buildAuthorizeUrl(String redirectUri, String scope, String state);, + String buildAuthenticateUrl(String redirectUri, String state);, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/BadCredentialsException.java, +@SuppressWarnings("serial"), +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, +@SuppressWarnings("serial"), +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, +@SuppressWarnings("serial"), +++ /dev/null,
[+++ b/build.gradle, + springVersion = '3.1.0.BUILD-SNAPSHOT', +++ b/build.gradle, + springVersion = '3.1.0.BUILD-SNAPSHOT', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import java.util.LinkedList;, +, + LinkedList<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, + interceptors.add(new OAuth1RequestInterceptor(credentials));, + client.setInterceptors(interceptors);, +++ b/build.gradle, + springVersion = '3.1.0.BUILD-SNAPSHOT', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +import java.util.LinkedList;, +, + LinkedList<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, + interceptors.add(new OAuth1RequestInterceptor(credentials));, + client.setInterceptors(interceptors);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +import java.util.LinkedList;, +, + LinkedList<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, + interceptors.add(new OAuth2RequestInterceptor(accessToken, version));, + client.setInterceptors(interceptors);]
[+++ b/build.gradle, + compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version"), +++ b/build.gradle, + compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version"), +++ b/gradle.properties, +thymeleafSpring5Version=3.0.3.M1, +++ b/build.gradle, + compile("org.thymeleaf:thymeleaf-spring5:$thymeleafSpring5Version"), +++ b/gradle.properties, +thymeleafSpring5Version=3.0.3.M1, +++ b/spring-social-web-thymeleaf3/src/main/java/org/springframework/social/connect/web/thymeleaf/ConnectedAttrProcessor.java, + * Copyright 2015-2017 the original author or authors., +import org.thymeleaf.spring5.context.SpringContextUtils;]
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + Note that although this schema was designed with compatibility in mind, it may not be compatible with all databases., + You may need to adapt this schema definition to accommodate any peculiarities of your chosen database.]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.social.support.AbstractOAuthParameters;, +public final class OAuth1Parameters extends AbstractOAuthParameters {, + public static final OAuth1Parameters NONE = new OAuth1Parameters(null);, +, + public OAuth1Parameters(Map<String, List<String>> parameters) {, + super(parameters);, + }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.social.support.AbstractOAuthParameters;, +public final class OAuth1Parameters extends AbstractOAuthParameters {, + public static final OAuth1Parameters NONE = new OAuth1Parameters(null);, +, + public OAuth1Parameters(Map<String, List<String>> parameters) {, + super(parameters);, + }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Parameters.java, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.social.support.AbstractOAuthParameters;, +public final class OAuth2Parameters extends AbstractOAuthParameters {, + public OAuth2Parameters(Map<String, List<String>> parameters) {, + super(parameters);, + }, +
[+++ b/build.gradle, + springVersion = '3.0.5.RELEASE', +++ b/build.gradle, + springVersion = '3.0.5.RELEASE', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth/support/AbstractClientHttpRequest.java, +package org.springframework.social.oauth.support;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.util.Assert;, +, +/**, + * Borrowed from Spring 3.0 so that we have a consistent AbstractClientHttpRequest implementation for both Spring 3.0 and Spring 3.1-based applications., + * Note that this wouldn't be necessary if using Spring 3.0.6, which introduced AbstractBufferingHttpRequest., + * @author Craig Walls, + */, +public abstract class AbstractClientHttpRequest implements ClientHttpRequest {, +, + private boolean executed = false;, +, + private final HttpHeaders headers =
[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInService;, + private final SignInService signinService;, + public FacebookSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInService;, + private final SignInService signinService;, + public FacebookSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/web/TwitterSigninController.java, +import org.springframework.social.web.connect.SignInService;, + private final SignInService signinService;, + public TwitterSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInService;, + private final SignInService signinService;, + public FacebookSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/web/TwitterSigninController.java, +import org.springframework.social.web.connect.SignInService;, + private final SignInService signinService;, + public TwitterSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.social.web.connect.SignInService;, + private final SignInService signinService;, + public FacebookSigninController(ConnectionRepository connectionRepository, SignInService signinService,, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/web/TwitterSigninController.java, +import org.springframework.social.web.connect.SignInService;, + private final
[+++ b/docs/src/reference/docbook/overview.xml, + Spring Social requires <ulink url="http://www.springsource.org/documentation">Spring Framework</ulink> 3.0.3 and above., + Specifically, Spring Social uses <classname>RestTemplate</classname> and related REST client support from Spring's web module., + </para>, + <para>, + If you want to use Spring Social with Spring 3.0.X, you'll need to explicitly add the spring-web dependency to your build, specifying the version:, + If you're using Spring Social's JDBC-based connection repository, it will require a <interfacename>TextEncryptor</interfacename> from <ulink url="http://static.springsource.org/spring-security/site/">Spring Security</ulink> 3.1.0 to encrypt connection data as it is persisted., + Spring Social depends on the <ulink url="http://commons.apache.org/codec/">Commons Codec</ulink> library when encoding OAuth 1 request signatures.,
[+++ b/build.gradle, +project('spring-social-oauth') {, + description = 'Spring Social OAuth', + dependencies {, + compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", + compile ("org.scribe:scribe:$scribeVersion") { optional = true }, + compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, + compile "org.springframework:spring-web:$springVersion", + }, +}, +, + compile project(':spring-social-oauth'), +++ b/build.gradle, +project('spring-social-oauth') {, + description = 'Spring Social OAuth', + dependencies {, + compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", + compile ("org.scribe:scribe:$scribeVersion") { optional = true }, + compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, + compile "org.springframework:spring-web:$springVersion", + }, +}, +, + compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/build.gradle, +project('spring-social-oauth') {, + description = 'Spring Social OAuth', +
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +++ b/src/dist/changelog.txt, +Spring Social 1.1.0 Milestone 3 (July 8, 2012), +==============================================, + Bug Fixes, + * JdbcConnectionRepository's methods are now transactionl. (SOCIAL-335), + * Lazily create RestTemplate in OAuth2Template to ensure that, + useParametersForClientAuthentication property is honored. (SOCIAL-338), + * Changed expiresIn parameter in AccessGrant to Long to avoid overflow, + for expiration times far in the future. (SOCIAL-356), + * Primary connection is now chosen as the connection with the lowest, + rank, instead of the one with rank=1 (SOCIAL-341), +, + Improvements, + * Upgrade Jackson dependency to Jackson 2. (SOCIAL-362), + *
[+++ b/src/dist/changelog.txt, +Spring Social 1.1.0 Milestone 1 (October 15, 2012), +==================================================, +Improvements, + * Added an XML configuration namespace to simplify configuring Spring Social connection, + repositories. Also established base bean definition parser and namespace handler classes, + for provider modules to build on configuration support for connection factory and API, + binding. (SOCIAL-292), +]
[+++ b/build.gradle, + sourceCompatibility=1.8, + targetCompatibility=1.8, + sourceCompatibility=1.8, + targetCompatibility=1.8, +++ b/build.gradle, + sourceCompatibility=1.8, + targetCompatibility=1.8, + sourceCompatibility=1.8, + targetCompatibility=1.8, +++ b/gradle.properties, +springSecurityVersion=5.0.0.BUILD-SNAPSHOT]
[+++ b/docs/src/reference/docbook/overview.xml, + If you're not already using Spring Security to secure your application, you'll need to add the standalone crypto module. , + This is required for OAuth1 request signing and encrypting credentials when persisting Connection data. , + If you're already using Spring Security, there is nothing for you to do because the crypto library comes included., + <section id="overview-samples">, + <title>Sample Code</title>, + <para>, + We have created a few sample applications to illustrate the capabilities of Spring Social., + To obtain the <ulink>https://github.com/SpringSource/spring-social-samples</ulink> code, use the following git command:, + </para>, + <programlisting language="txt">, +git
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +import java.util.Set;, + public SigningUtils() {, + /**, + * Builds the authorization header., + * The elements in additionalParameters should be decoded., + */, + /**, + * Builds an authorization header from a request., + * Expects that the request's query parameters are form-encoded., + */, + MultiValueMap<String, String> additionalParameters = combineMultiValueMaps(, + readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, + /**, + * Builds an authorization header from a request., + * Expects that the request's query parameters are form-encoded., + * This method is a Spring 3.0-compatible version of buildAuthorizationHeaderValue(); planned for removal in Spring Social 1.1,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth/support/AbstractClientHttpRequest.java, +package org.springframework.social.oauth.support;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.util.Assert;, +, +/**, + * Borrowed from Spring 3.0 so that we have a consistent AbstractClientHttpRequest implementation for both Spring 3.0 and Spring 3.1-based applications., + * Note that this wouldn't be necessary if using Spring 3.0.6, which introduced AbstractBufferingHttpRequest., + * @author Craig Walls, + */, +public abstract class AbstractClientHttpRequest implements ClientHttpRequest {, +, + private boolean executed = false;, +, + private final HttpHeaders headers = new HttpHeaders();, +, + private final ByteArrayOutputStream bufferedOutput = new ByteArrayOutputStream();, +,
[+++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +apply from: "$buildSrcDir/dist.gradle", +apply from: "$buildSrcDir/checks.gradle", +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/build.gradle, + ext.h2Version = '1.3.168', + ext.hamcrestVersion = '1.3', + ext.httpComponentsVersion = '4.2.1', + ext.jacksonVersion = '1.9.9', + ext.javaxInjectVersion = '1', + ext.junitVersion = '4.10', + ext.mockitoVersion = '1.9.0', + ext.servletApiVersion = '2.5', + ext.springVersion = '3.1.2.RELEASE', + ext.springSecurityVersion = '3.1.1.RELEASE', + ext.springTestMvcVersion = '1.0.0.M1', + ext.jspApiVersion = '2.2.1', + compile ("org.springframework:spring-jdbc:$springVersion", optional), + compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion", optional), + compile ("org.apache.httpcomponents:httpclient:$httpComponentsVersion", optional), + compile ("javax.servlet:servlet-api:$servletApiVersion", provided), + compile ("javax.servlet.jsp:javax.servlet.jsp-api:$jspApiVersion", provided), +, +project('spring-social-config') {, + description = 'Spring Social Config', + dependencies {, + compile project(':spring-social-core'), + compile project(':spring-social-web'), + compile ("org.springframework.social:spring-social-twitter:$version") { transitive = false }, + compile ("org.springframework.social:spring-social-facebook:$version")
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2011 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2011 the original author or authors.,
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is
[+++ b/gradle.properties, +springSocialVersion=1.0.0.RELEASE, +role=buildmaster]
[+++ b/build.gradle, + archives schemaZip, +++ b/build.gradle, + archives schemaZip, +++ /dev/null, +++ b/build.gradle, + archives schemaZip, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an
[+++ b/docs/src/reference/docbook/apis.xml, + You can access the user's list of Facebook friends by calling the <methodname>getFriendIds()</methodname> method from <interfacename>FriendOperations</interfacename>:, + <para>, + Facebook also enables users to organize their friends into friend lists., + To retrieve a list of the authenticating user's friend lists, call <methodname>getFriendLists()</methodname> with no arguments: , + </para>, +, + <programlisting language="java"><![CDATA[, +List<Reference> friends = facebookApi.friendOperations().getFriendLists();]]>, + </programlisting>, + , + <para>, + You can also retrieve a list of friend lists for a specific user by passing the user ID (or an alias) to <methodname>getFriendLists()</methodname>:, + </para>, +, + <programlisting language="java"><![CDATA[, +List<Reference> friends =
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import javax.servlet.http.HttpServletRequest;, + public RedirectView removeConnection(@PathVariable String providerId, @PathVariable String providerUserId, HttpServletRequest request) {, + return connectionStatusRedirect("../" + providerId);, + private RedirectView connectionStatusRedirect(String relativePath) {, + return new RedirectView(relativePath, true);]
[+++ b/docs/src/reference/docbook/apis.xml, + Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., + </para>, + , + <para>, + Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, + Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown., + If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.web.servlet.support.ServletUriComponentsBuilder;, + /**, + * Sets the signup URL; the URL to redirect to if authentication fails so that the user can register with the application., + * May be fully-qualified URL (e.g., "http://somehost/somepath/signup") or a path relative to application's servlet context path (e.g., "/signup")., + * @param signupUrl The signup URL, + */, + throw new SocialAuthenticationRedirectException(buildSignupUrl(request));, + private String buildSignupUrl(HttpServletRequest request) {, + if (signupUrl.startsWith("http://") || signupUrl.startsWith("https://")) {, + return signupUrl;, + }, + if (!signupUrl.startsWith("/")) {, + return ServletUriComponentsBuilder.fromContextPath(request).path("/" + signupUrl).build().toUriString();, + }, + return ServletUriComponentsBuilder.fromContextPath(request).path(signupUrl).build().toUriString();, + }, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.web.servlet.support.ServletUriComponentsBuilder;,
[+++ b/docs/src/reference/docbook/apis.xml, + The <classname>FacebookProfile</classname> object will contain basic profile information about the authenticating user, including their first and last name and their Facebook ID., + Depending on what authorization scope has been granted to the application, it may also include additional details about the user such as their email address, birthday, hometown, and religious and political affiliations., + For example, <methodname>getBirthday()</methodname> will return the current user's birthday if the application has been granted "user_birthday" permission; null otherwise., + Consult the JavaDoc for <classname>FacebookProfile</classname> for details on which permissions are required for each property., + <title>Posting to and reading
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/json/EventInviteeMixin.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, + * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJacksonHttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}., + MappingJacksonHttpMessageConverter jsonConverter = new MappingJacksonHttpMessageConverter();, + configureJsonMessageConverter(jsonConverter);, + messageConverters.add(jsonConverter);, + messageConverters.add(new ByteArrayHttpMessageConverter());, + /**, + * Subclassing hook to enable API binding implementations to configure the MappingJacksonHttpMessageConverter., + * For example, an API binding may configure the converter with a custom ObjectMapper., + * @param converter The MappingJacksonHttpMessageConverter to be configured. , + */, + protected void configureJsonMessageConverter(MappingJacksonHttpMessageConverter converter) {, + }, + , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, + * By default, this includes a
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationServiceRegistry.java, + * @param authenticationServices the set of social authentication services to register, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationServiceRegistry.java, + * @param authenticationServices the set of social authentication services to register, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/SocialAuthenticationService.java]
[+++ b/docs/src/reference/docbook/apis.xml, + Spring Social offers interaction with Twitter's service API through the <interfacename>Twitter</interfacename> interface and its implementation, <classname>TwitterTemplate</classname>. , +Twitter twitter = new TwitterTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +Twitter twitter = new TwitterTemplate();]]>, + If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>Twitter</interfacename> via a <interfacename>Connection</interfacename>. , + For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>Twitter</interfacename>:, +Connection<Twitter> connection = connectionRepository.findPrimaryConnectionToApi(Twitter.class);, +Twitter twitter = connection.getApi();]]>, + From that connection, it retrieves a <interfacename>Twitter</interfacename> instance that is configured with the connection details received
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, + AccessGrant accessGrant = serviceProvider.getOAuthOperations().refreshAccess(refreshToken, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, + AccessGrant accessGrant = serviceProvider.getOAuthOperations().refreshAccess(refreshToken, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * Exchanges user credentials for an access grant using OAuth2's Resource Owner Credentials Grant (aka, "password" grant)., + * @param username the user's username on the provider, + * @param password the user's password on the provider, + * @param additionalParameters any additional parameters to be sent when exchanging the credentials for an access grant. Should not be encoded. , + * @return the access grant., + */, + AccessGrant exchangeCredentialsForAccess(String username, String password, MultiValueMap<String, String> additionalParameters);, +, + /**,
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.2 Release (January 23, 2012), + * Allow for null returned from ConnectionSignUp.execute() to indicate a problem with implicitly, + creating a user. (SOCIAL-254), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.2 Release (January 23, 2012), + * Allow for null returned from ConnectionSignUp.execute() to indicate a problem with implicitly, + creating a user. (SOCIAL-254), +++ b/docs/src/reference/docbook/signin.xml, + <para>, + If there is any problem in creating the new user implicitly (for example, if the implicitly chosen username is already taken) <methodname>execute()</methodname> may return null to indicate that the user could not be created implicitly., + This will
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.core.annotation.AnnotationUtils;, + private String baseCallbackUrl;, + , + * Sets the application's base URL., + * By default, the callback URL passed to the service providers at the beginning of the connection process is determined from the request made to ConnectController., + * If applicationUrl is set, it will be used to construct the callback URL instead of determining the callback URL from the request., + * @param applicationUrl, + */, + public void setApplicationUrl(String applicationUrl) {, + this.baseCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, + }, + , + /**, + String callbackUrl = baseCallbackUrl !=
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateServiceProviderConnectionException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/build.gradle, + compile project(':spring-social-github') { optional = true }, + compile project(':spring-social-oauth'), + compile project(':spring-social-connect'), + compile project(':spring-social-connect-web'), +// compile project(':spring-social-oauth'), + compile project(':spring-social-connect'), +// compile project(':spring-social-oauth'), + compile project(':spring-social-connect'), +// compile project(':spring-social-oauth'), + compile project(':spring-social-connect'), +// compile project(':spring-social-oauth'), + compile project(':spring-social-connect'), +// compile project(':spring-social-oauth'), + compile project(':spring-social-connect'), +// compile project(':spring-social-oauth'), +++ b/build.gradle, + compile project(':spring-social-github') { optional = true }, + compile project(':spring-social-oauth'), + compile project(':spring-social-connect'), + compile project(':spring-social-connect-web'), +// compile project(':spring-social-oauth'), + compile project(':spring-social-connect'), +// compile project(':spring-social-oauth'), + compile project(':spring-social-connect'), +// compile project(':spring-social-oauth'), + compile project(':spring-social-connect'), +// compile project(':spring-social-oauth'), + compile project(':spring-social-connect'), +// compile project(':spring-social-oauth'), +
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, + * Note that this method is called after the RestTemplate has been configured with the message converters returned from getMessageConverters()., + * Override to customize the message converter (for example, to set supported media types or message converters for the parts of a multipart message). , + * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead., + * Override to customize the message converter (for example, to set a custom object mapper or supported media types)., + * To remove/replace this or any of
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + private final MultiValueMap<Class<?>, ConnectInterceptor<?>> connectInterceptors = new LinkedMultiValueMap<Class<?>, ConnectInterceptor<?>>();, +, + private final MultiValueMap<Class<?>, DisconnectInterceptor<?>> disconnectInterceptors = new LinkedMultiValueMap<Class<?>, DisconnectInterceptor<?>>();, + * Configure the list of connect interceptors that should receive callbacks during the connection process., + * Convenient when an instance of this class is configured using a tool that supports JavaBeans-based configuration., + * @param interceptors the connect interceptors to add, +
[+++ b/build.gradle, + testCompile ("com.h2database:h2:$h2Version"), + testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), + testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion"), + testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), + testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), + testCompile ("com.h2database:h2:$h2Version"), + testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), + testCompile ("org.springframework:spring-jdbc:$springVersion"), + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion", provided), + gradleVersion = '1.3', +++ b/build.gradle, + testCompile ("com.h2database:h2:$h2Version"), + testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), + testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion"), + testCompile ("org.springframework:spring-test-mvc:$springTestMvcVersion"), + testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), + testCompile ("com.h2database:h2:$h2Version"), + testCompile ("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"), + testCompile ("org.springframework:spring-jdbc:$springVersion"), + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion", provided), + gradleVersion = '1.3', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/build.gradle, + testCompile ("com.h2database:h2:$h2Version"),
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors.,
[+++ b/build.gradle, + springVersion = '3.1.0.M1', +++ b/build.gradle, + springVersion = '3.1.0.M1', +++ /dev/null, +++ b/build.gradle, + springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, + private final SigningUtils signingUtils;, + , + this.signingUtils = new SigningUtils();, + return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, + private final SigningUtils signingUtils;, + , + this.signingUtils = new SigningUtils();, + return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + private final SigningUtils signingUtils;, +, + this.signingUtils = new SigningUtils();, + Map<String, String> oauthParameters = signingUtils.commonOAuthParameters(consumerKey);, + return signingUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, + private final SigningUtils signingUtils;, + , + this.signingUtils = new SigningUtils();, + return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, + private final SigningUtils
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/resources/org/springframework/social/provider/jdbc/Schema.sql, +create table Connection (id identity,, + accountId varchar not null,, + providerId varchar not null,, + accessToken varchar not null, , + secret varchar, , + refreshToken varchar,, + primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ b/spring-social-client/src/main/resources/org/springframework/social/provider/jdbc/Schema.sql, +create table Connection (id identity,, + accountId varchar not null,, + providerId varchar not null,, + accessToken varchar not null, , + secret varchar, , + refreshToken varchar,, + primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/spring-social-client/src/test/java/org/springframework/social/provider/jdbc/JdbcConnectionRepositoryTest.java, +import static org.junit.Assert.*;]
[+++ b/build.gradle, + compile "org.springframework:spring-webmvc:$springVersion", +++ b/build.gradle, + compile "org.springframework:spring-webmvc:$springVersion", +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.web.servlet.view.RedirectView;, + public RedirectView connect(@PathVariable String providerId, WebRequest request) {, + return new RedirectView(oauth1Ops.buildAuthorizeUrl(requestToken.getValue(), oauth1Ops.getVersion() == OAuth1Version.CORE_10 ? new OAuth1Parameters(callbackUrl(providerId)) : OAuth1Parameters.NONE));, + return new RedirectView(((OAuth2ConnectionFactory<?>) connectionFactory).getOAuthOperations().buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, new OAuth2Parameters(callbackUrl(providerId), scope)));, + public RedirectView oauth1Callback(@PathVariable String providerId, @RequestParam("oauth_token") String token, @RequestParam(value="oauth_verifier", required=false) String verifier, WebRequest request) {, + return new RedirectView("/connect/" + providerId, true);, + public RedirectView oauth2Callback(@PathVariable String providerId, @RequestParam("code") String code, WebRequest request) {, + return new RedirectView("/connect/" + providerId, true);, + public RedirectView removeConnections(@PathVariable String providerId) {, + return new RedirectView("/connect/" + providerId, true);,
[+++ b/pom.xml, + <groupId>org.springframework</groupId>, + <artifactId>spring-jdbc</artifactId>, + <version>${org.springframework-version}</version>, + </dependency>, + <dependency>, +++ b/pom.xml, + <groupId>org.springframework</groupId>, + <artifactId>spring-jdbc</artifactId>, + <version>${org.springframework-version}</version>, + </dependency>, + <dependency>, +++ b/src/main/java/org/springframework/social/account/Account.java, +package org.springframework.social.account;, +, +import java.io.Serializable;, +, +@SuppressWarnings("serial"), +public class Account implements Serializable {, + , + private final Long id;, + , + private final String firstName;, + , + private final String lastName;, + , + private final String email;, + , + private final String username;, + , + private final String profilePictureUrl;, + , + public Account(Long id, String firstName, String lastName, String email, String username, String profilePictureUrl) {, +
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, + private final JdbcTemplate jdbcTemplate;, +, + @Inject, + public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, + this.jdbcTemplate = jdbcTemplate;, + }, +, + public ShowcaseUser findUserByUsername(String username) {, + return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, + new RowMapper<ShowcaseUser>() {, + public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, + return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, + .getString("email"));, + }, + }, username);, + }, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package
[+++ b/docs/src/info/changelog.txt, +Improvements, + * ProviderSignInController now handles callbacks from the provider when the, + user denies authorization by redirecting to the application's sign in page., + (SOCIAL-236), +]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + * Note: this reference should be a serializable proxy to a singleton-scoped target instance., + * Note: this reference should be a serializable proxy to a singleton-scoped target instance., + * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, HttpServletRequest, HttpServletResponse)}., + * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String, Connection, HttpServletRequest, HttpServletResponse)}.]
[+++ b/build.gradle, + springVersion = '3.1.0.BUILD-SNAPSHOT', +++ b/build.gradle, + springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ b/build.gradle, + springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, + springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed
[+++ b/gradle.properties, +httpComponentsVersion=4.5.3, +aspectjVersion=1.9.0.BETA-5, +springVersion=5.0.0.BUILD-SNAPSHOT, +jacksonVersion=2.9.0.pr3, +jspApiVersion=2.3.2-b02]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.StringUtils;, + authUrl.append('&').append(name);, + String value = values.next();, + if (StringUtils.hasLength(value)) {, + authUrl.append('=').append(formEncode(value));, + }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.StringUtils;, + authUrl.append('&').append(name);, + String value = values.next();, + if (StringUtils.hasLength(value)) {, + authUrl.append('=').append(formEncode(value));, + }, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + private String filterProcessesUrl;, +, + @Override, + public void setFilterProcessesUrl(String filterProcessesUrl) {, + this.filterProcessesUrl = filterProcessesUrl;, + super.setFilterProcessesUrl(filterProcessesUrl);, + }, +, + if (!uri.startsWith(filterProcessesUrl)) {, + uri = uri.substring(filterProcessesUrl.length());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.StringUtils;, + authUrl.append('&').append(name);, + String value = values.next();, + if (StringUtils.hasLength(value)) {, + authUrl.append('=').append(formEncode(value));, + }, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + private String filterProcessesUrl;, +, + @Override, +
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, + return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, parameters));]
[+++ b/gradle.properties, +springSocialVersion=1.0.0.BUILD-SNAPSHOT]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * "facebook" -&gt; [ Connection("Keith Donald") ] ,, + * "github" -&gt; [ ], + * "twitter" -&gt; [ Connection("kdonald"), Connection("springsource") ], + * The method always returns a map with keys representing all registered providers., + * For providers with no connection, a map contains an empty list as a value., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, + * "facebook" -&gt; [ Connection("Keith Donald") ] ,, + * "github" -&gt; [ ], + * "twitter" -&gt; [ Connection("kdonald"), Connection("springsource") ], + * The method always returns a map with keys representing all registered providers., + * For providers with
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.context.ApplicationContext;, +import org.springframework.security.web.authentication.RememberMeServices;, + * .apply(new SpringSocialHttpConfigurer()), + * .and().setSharedObject(ApplicationContext.class, context);, + * Note that when using with Spring Security 3.2.0.RC1, it's important to set the ApplicationContext as a shared object,, + * as shown above. Later RCs and the GA release of Spring Security will automatically set the ApplicationContext as a, + * shared object, making this step unnecessary. , + * , + private UserIdSource userIdSource;, + * Requires that {@link UsersConnectionRepository}, {@link SocialAuthenticationServiceLocator}, and, + * {@link SocialUserDetailsService} beans be available in the application context., + * If using with Spring
[+++ b/docs/src/reference/docbook/index.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<book xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="spring-social-reference", + xmlns:xi="http://www.w3.org/2001/XInclude", + xmlns:xlink="http://www.w3.org/1999/xlink">, + <bookinfo>, + <title>Spring Social Reference Manual</title>, + <titleabbrev>Spring Social ${version}</titleabbrev>, + <productname>Spring Social</productname>, + <releaseinfo>${version}</releaseinfo>, +, + <!-- TODO: this isn't showing up. -->, + <mediaobject>, + <imageobject role="fo">, + <imagedata fileref="images/logo.png", + format="PNG" align="center"/>, + </imageobject>, + <imageobject role="html">, + <imagedata fileref="images/logo.png" format="PNG" align="center"/>, + </imageobject>, + </mediaobject>, + <!-- END TODO -->, +, + <authorgroup>, + <author>, + <firstname>Keith</firstname>, + <surname>Donald</surname>, + </author>, + </authorgroup>, +, + <legalnotice><para>© SpringSource Inc., 2010</para></legalnotice>, + </bookinfo>, +, + <toc></toc>, + , + <part id="spring-social-introduction">, + <title>Introducing
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, + public ServiceProviderConnectionValues getConnectionValues(Object serviceApi) {, + return EMPTY_CONNECTION_VALUES;, + }, +, + public ServiceProviderUserProfile fetchUserProfile(Object serviceApi) {, + return EMPTY_USER_PROFILE;, + // internal helpers, + , + private static final ServiceProviderConnectionValues EMPTY_CONNECTION_VALUES = new ServiceProviderConnectionValues(null, null, null, null);, +, + private static final ServiceProviderUserProfile EMPTY_USER_PROFILE = new ServiceProviderUserProfile(null, null, null, null, null);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullServiceApiAdapter.java, + public ServiceProviderConnectionValues getConnectionValues(Object serviceApi) {, + return EMPTY_CONNECTION_VALUES;, + }, +, + public ServiceProviderUserProfile fetchUserProfile(Object serviceApi) {, + return EMPTY_USER_PROFILE;, + // internal helpers, + , + private static final ServiceProviderConnectionValues EMPTY_CONNECTION_VALUES = new ServiceProviderConnectionValues(null, null, null, null);, +, +
[+++ b/docs/src/reference/docbook/implementing.xml, + <para>Create a ServiceProvider that allows users to authorize with the remote provider and obtain Service API instances e.g. <code>TwitterServiceProvider</code>.</para>]
[+++ b/.gitignore, +samples/**/src/main/webapp/META-INF, +++ b/.gitignore, +samples/**/src/main/webapp/META-INF, +++ b/docs/src/reference/docbook/facebook.xml, + <para>Spring Social's <interfacename>FacebookOperations</interfacename> and its implementation, <classname>FacebookTemplate</classname> provider the operations needed to interact with Facebook on behalf of a user.</para>, + <para>Creating an instance of <classname>FacebookTemplate</classname> is as simple as constructing it by passing in an authorized access token to the constructor:</para>, + , + <programlisting><![CDATA[String accessToken = "f8FX29g..."; // access token received from Facebook after OAuth authorization, +FacebookOperations facebook = new FacebookTemplate(accessToken);]]></programlisting>, +, + <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling one of the
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + /**, + * Retrieves the client access grant using OAuth 2 client password flow., + * This is an access grant that is based on the client id and password (a.k.a. client secret)., + * @param scope optional scope to get for the access grant, + * @return the access grant of the client only (not user related), + */, + AccessGrant authenticateClient(String scope);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + /**, + * Retrieves the client access grant using OAuth 2 client password flow., + * This is an access grant that is based on the client id
[+++ b/docs/src/reference/docbook/implementing.xml, + A Spring Social client module is simply a standard Java project that builds a jar artifact e.g. spring-social-twitter.jar., + where {providerId} is a unique identifier you assign to the service provider you are adding support for., + <title>Module Structure</title>, + <entry>The public interface of the Java API binding.</entry>, + <entry>The primary implementation of the Java API binding.</entry>, + <entry>The types necessary to establish connections to the service provider.</entry>, + Finally, the connect package contains the implementations of various connect SPIs that enable connections to Twitter to be established and persisted., + This provides a simple, domain-oriented
[+++ b/gradle.properties, +springVersion=4.3.3.RELEASE, +++ b/gradle.properties, +springVersion=4.3.3.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + * @param defaultFailureUrl The failure URL to use by default, +++ b/gradle.properties, +springVersion=4.3.3.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + * @param defaultFailureUrl The failure URL to use by default, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * @param defaultFailureUrl The failure URL to use by default, + * @return this SpringSocialConfigurer for chained configuration, +++ b/gradle.properties, +springVersion=4.3.3.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + * @param defaultFailureUrl The failure URL to use by default, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * @param defaultFailureUrl The failure URL to use by default, + * @return this SpringSocialConfigurer for chained configuration, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.web.util.UriUtils;, + String
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 25, 2011), +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is
[+++ b/docs/src/reference/docbook/linkedin.xml, + <para>LinkedIn is a social networking site geared toward professionals. It enables its users to maintain and correspond with a network of contacts they have are professionally linked to.</para>, + <para>Spring Social offers integration with LinkedIn via <interfacename>LinkedInOperations</interfacename> and its implementation, <classname>LinkedInTemplate</classname>.</para>, + , + <para>To create an instance of <classname>LinkedInTemplate</classname>, you may pass in your application's OAuth 1 credentials, along with an access token/secret pair to the constructor:</para>, + , + <programlisting><![CDATA[String apiKey = "..."; // The application's API/Consumer key, +String apiSecret = "..."; // The application's API/Consumer secret, +String accessToken = "..."; // The access
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + preConnect(connectionFactory, parameters, request);, + private void preConnect(ConnectionFactory<?> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request) {, + interceptor.preConnect(connectionFactory, parameters, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + preConnect(connectionFactory, parameters, request);, + private void preConnect(ConnectionFactory<?> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request) {, + interceptor.preConnect(connectionFactory, parameters, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectInterceptor.java, + void preConnect(ConnectionFactory<S> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + preConnect(connectionFactory, parameters, request);, + private void preConnect(ConnectionFactory<?> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request) {, + interceptor.preConnect(connectionFactory, parameters, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectInterceptor.java, + void preConnect(ConnectionFactory<S> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, + return buildOAuthUrl(connectionFactory, request, null);, + OAuth1Parameters parameters = getOAuth1Parameters(additionalParameters);, + if
[+++ b/docs/src/reference/docbook/implementing.xml, + By now, you should have an API binding to the provider's API, a ServiceProvider&lt;A&gt; implementation for conducting the "authorization dance", and an ApiAdapter&lt;A&gt; implementation for mapping onto the uniform Connection model.]
[+++ b/.github/ISSUE_TEMPLATE.md, +### Summary, +, +<!-- , +Please provide a high level summary of the issue you are having, +-->, +, +### Actual Behavior, +, +<!-- , +Please describe step by step the behavior you are observing, +-->, +, +### Expected Behavior, +, +<!--, +Please describe step by step the behavior you expect, +-->, +, +### Configuration, +, +<!--, +Please provide any configuration you have., +-->, +, +### Version, +, +<!--, +Please describe what version you are using. Does the problem occur in other versions?, +-->, +, +### Sample, +, +<!--, +Providing a complete sample (i.e. link to a
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <section id="service-providers-implementing">, + <title>Implementing Service Providers</title>, + The spring-social-core module provides support for implementing your own ServiceProviders., + This support consists of convenient base classes for the various ServiceProvider types, such as OAuth1 and OAuth2-based providers., + A common data access interface is also provided for persisting connection information., + In this section, you will learn how to implement ServiceProviders., + </para>, + <section id="service-providers-implementing-oauth2">, + <title>OAuth2</title>, + <para>, + To implement an OAuth2-based ServiceProvider, first extend AbstractOAuth2ServiceProvider., + Parameterize &lt;S&gt; to be the Java Binding to the ServiceProvider API., + Define a single constructor that
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfiguration.java, +import java.util.List;, +, + private List<SocialConfigurer> socialConfigurers;, + public void setSocialConfigurers(List<SocialConfigurer> socialConfigurers) {, + Assert.notNull(socialConfigurers, "At least one configuration class must implement SocialConfigurer (or subclass SocialConfigurerAdapter)");, + Assert.notEmpty(socialConfigurers, "At least one configuration class must implement SocialConfigurer (or subclass SocialConfigurerAdapter)");, + this.socialConfigurers = socialConfigurers;, + for (SocialConfigurer socialConfigurer : socialConfigurers) {, + }, + for (SocialConfigurer socialConfigurer : socialConfigurers) {, + }, + UserIdSource userIdSource = null;, + for (SocialConfigurer socialConfigurer : socialConfigurers) {, + UserIdSource userIdSourceCandidate = socialConfigurer.getUserIdSource();, + if (userIdSourceCandidate != null) {, + userIdSource = userIdSourceCandidate;, + break;, + }, + }, + Assert.notNull(userIdSource, "One
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @return the access grant of the client only (not user related), + */, + AccessGrant authenticateClient();, +, + /**, + * Retrieves the client access grant using OAuth 2 client password flow., + * This is an access grant that is based on the client id and password (a.k.a. client secret)., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @return the access grant of the client only (not user related), + */, + AccessGrant authenticateClient();, +, + /**, + * Retrieves the client access grant using OAuth 2 client password flow., + * This is an access grant that
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +import java.util.Collections;, +import java.util.Map;, + private final Long expireTime;, +, + private final Map<String, Object> additionalParameters;, +, + private final String scope;, +, + this(accessToken, null, null, null, Collections.<String, Object>emptyMap());, + public AccessGrant(String accessToken, Integer expiresIn, String refreshToken, String scope, Map<String, Object> additionalParameters) {, + this.scope = scope;, + this.additionalParameters = additionalParameters;, + this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, + * The time (in milliseconds since Jan 1, 1970 UTC) when this access grant will expire., + * May be null if the token is non-expiring., + */, + public
[+++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, + String connectionRepository = element.getAttribute("connection-repository");, + providerBeanBuilder.addConstructorArgReference(connectionRepository);, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, + String connectionRepository = element.getAttribute("connection-repository");, + providerBeanBuilder.addConstructorArgReference(connectionRepository);, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/socialNamespaceHandlerTest.xml, + <social:service-provider class="org.springframework.social.twitter.connect.TwitterServiceProvider" client-key="twitter_key" client-secret="twitter_secret" />, + <social:service-provider class="org.springframework.social.facebook.connect.FacebookServiceProvider" client-key="facebook_key" client-secret="facebook_secret" />, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, + String connectionRepository = element.getAttribute("connection-repository");,
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , + * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, + * with the response_type=code parameter value, + * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, + * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/SocialException.java, + * Copyright 2010 the original
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;, +/**, + * Annotation to enable JDBC-based persistence of connections., + * Configures a singleton {@link JdbcUsersConnectionRepository} and a request-scoped JdbcConnectionRepository. , + * @author Craig Walls, + */, + /**, + * The ID to assign to the ConnectionRepository bean., + * Defaults to "connectionRepository". , + */, + /**, + * The ID to assign to the UsersConnectionRepository bean., + * Defaults to "usersConnectionRepository". , + */, + /**, + * The ID of the ConnectionFactoryLocator bean to fetch a ConnectionFactory from when creating/persisting connections., + * Defaults to "connectionFactoryLocator". , + */,
[+++ b/samples/twitter-connect/build.gradle, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/manual/src/asciidoc/index.adoc, + accessToken varchar(512) not null,, + secret varchar(512),, + refreshToken varchar(512),, +++ b/docs/manual/src/asciidoc/index.adoc, + accessToken varchar(512) not null,, + secret varchar(512),, + refreshToken varchar(512),, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, + // builder only, + , + UserProfile(String name, String firstName, String lastName, String email, String username) {]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/direct/package-info.java, +/**, + * Direct Message API and supporting classes, + */, +package org.springframework.social.twitter.direct;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/direct/package-info.java, +/**, + * Direct Message API and supporting classes, + */, +package org.springframework.social.twitter.direct;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/FriendTemplate.java, +import java.util.ArrayList;, + @SuppressWarnings("serial"), + private static class LongList extends ArrayList<Long> {}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/direct/package-info.java, +/**, + * Direct Message API and supporting classes, + */, +package org.springframework.social.twitter.direct;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/FriendTemplate.java, +import java.util.ArrayList;, + @SuppressWarnings("serial"), + private static class LongList extends ArrayList<Long> {}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/friend/package-info.java, +/**, + * Friends and Followers API and supporting classes, + */, +package org.springframework.social.twitter.friend;, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/direct/package-info.java, +/**, + * Direct Message API and supporting
[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth/OAuthClientRequestSigner.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS
[+++ b/build.gradle, + gradleVersion = "3.0", +++ b/build.gradle, + gradleVersion = "3.0", +++ b/gradle/wrapper/gradle-wrapper.properties, +#Wed Oct 12 11:55:31 MDT 2016, +distributionUrl=https\://services.gradle.org/distributions/gradle-3.0-bin.zip]
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/OperationNotPermittedException.java, + * Copyright 2010 the original author or authors., +++ b/spring-social-core/src/main/java/org/springframework/social/ResponseStatusCodeTranslator.java, + * Copyright 2010 the original author or authors.,
[+++ b/src/dist/changelog.txt, +Spring Social 2.0.0.M1 (November 29, 2016), +==========================================, +The primary purpose of this release is to build and test, +Spring Social against Spring Framework 5.0.0.M3 to ensure, +compatibility. Additionally, a few minor features and bug, +fixes are included:, +, + * Ability to override ConnectController's success URL, + (SOCIAL-373), + * Support SocialAuthenticationFailureHandler in, + setPostFailureUrl(). (Pull request #190), + * Fix OAuth2 redirect URL when behind a proxy. (SOCIAL-447), + * Fix potential for AuthenticationServiceException when user, + is already authenticated., + * Fix some incorrect JavaDoc (Issue #210 and Pull request #212), + * Handle empty
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + Callers are first expected to call buildAuthorizeUrl(GrantType, OAuth2Parameters) to construct the URL to redirect the user to for connection authorization., + The application exchanges the authorization code for an access grant., + Next, callers should call buildAuthorizeUrl(String, OAuth1Parameters) to construct the URL to redirect the user to for connection authorization.]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/SecurityEnabledConnectionFactoryConfigurer.java, + final OAuth2AuthenticationService<A> authService = new OAuth2AuthenticationService<A>((OAuth2ConnectionFactory<A>) cf);, + authService.setDefaultScope(((OAuth2ConnectionFactory<A>) cf).getScope());, + return authService;]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/gradle.properties, +junitVersion=4.11, +httpComponentsVersion=4.3.1, +springVersion=4.1.6.RELEASE, +springSnapshotVersion=latest.integration, +hamcrestVersion=1.3, +version=1.1.2.RELEASE, +jacksonVersion=2.4.5, +servletApiVersion=3.0.1, +springReleaseVersion=latest.release, +mockitoVersion=1.10.8, +javaxInjectVersion=1, +thymeleafVersion=2.1.2.RELEASE]
[+++ b/README, +++ b/README, +++ b/build.gradle, + commonsCodecVersion = '1.5', + h2Version = '1.3.154', + jacksonVersion = '1.8.0', + jodaVersion = '1.6.2', + jspApiVersion = '2.1', + springVersion = '3.1.0.M1', + springSecurityVersion = '3.1.0.RC2', + compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { provided = true }, + compile ("commons-codec:commons-codec:$commonsCodecVersion") { optional = true }, + compile project(':spring-social-core'), + }, +}, +, +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +++ b/README, +++ b/build.gradle, + commonsCodecVersion = '1.5', + h2Version = '1.3.154', + jacksonVersion = '1.8.0', +
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import java.util.Collections;, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.context.request.WebRequest;, + private final MultiValueMap<Class<?>, ProviderSignInInterceptor<?>> signInInterceptors = new LinkedMultiValueMap<Class<?>, ProviderSignInInterceptor<?>>();, +, + * Configure the list of sign in interceptors that should receive callbacks during the sign in process., + * Convenient when an instance of this class is configured using a tool that supports JavaBeans-based configuration., + * @param interceptors the sign in interceptors to add, + */, + public void setSignInInterceptors(List<ProviderSignInInterceptor<?>> interceptors) {, + for (ProviderSignInInterceptor<?> interceptor : interceptors) {, + addSignInInterceptor(interceptor);, + }, + }, + , + /**, + * Adds a ConnectInterceptor
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, + HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++
[+++ b/build.gradle, +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/build.gradle, +project('spring-social-security') {, + description = 'Spring Security Integration', + dependencies {, + compile ("org.springframework:spring-web:$springVersion"), + compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, + compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), + compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, + compile project(':spring-social-core'), + }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +project('spring-social-security') {, + description = 'Spring Security Integration', +
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.1 Release, +===========================, +Compatibility Notes, + * Changed signature of ConnectController.connectionStatusRedirect() to take a NativeWebRequest in, + addition to the provider ID (SOCIAL-258)., +, +Bug Fixes, + * Fixed ConnectController to use the servlet path when doing connection status redirects so that, + the application's DispatcherServlet does not have to be mapped to "/" (SOCIAL-258)., +, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.1 Release, +===========================, +Compatibility Notes, + * Changed signature of ConnectController.connectionStatusRedirect() to take a NativeWebRequest in, + addition to the provider ID (SOCIAL-258)., +, +Bug Fixes, + * Fixed ConnectController to use the servlet path
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + /**, + * Refreshes the access token., + */, + AccessGrant refreshAccessToken(String refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + /**, + * Refreshes the access token., + */, + AccessGrant refreshAccessToken(String refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + , + public AccessGrant refreshAccessToken(String refreshToken) {, + MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, + requestParameters.set("client_id", clientId);, + requestParameters.set("client_secret", clientSecret);, + requestParameters.set("refresh_token", refreshToken);, + requestParameters.set("grant_type", "refresh_token");, + @SuppressWarnings("unchecked"), + Map<String, ?> result = restTemplate.postForObject(accessTokenUrl, requestParameters, Map.class);, + return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, + }, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + /**, + * Refreshes the access token., + */, + AccessGrant refreshAccessToken(String refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + ,
[+++ b/build.gradle, + classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.2.2', +++ b/build.gradle, + classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.2.2', +++ b/src/reference/docbook/index.xml, +<book xml:id="spring-framework-reference", + xmlns="http://docbook.org/ns/docbook" version="5.0", + xmlns:xl="http://www.w3.org/1999/xlink", + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xsi:schemaLocation=", + http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd, + http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd">, + <info>, + <title>Spring Social Reference Documentation</title>, + , + <productname>Spring Social</productname>, + , + <releaseinfo>${version}</releaseinfo>, + <personname>, + </personname>, + <personname>, + </personname>, + <copyright>, + <year>2011-2012</year>, + </copyright>, +, + <legalnotice>, + <para>Copies of this document may be made for your own use and for, + distribution to others, provided that you do not charge any fee for such, + copies and further provided that each copy contains
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/test/resources/org/springframework/social/provider/jdbc/Schema.sql, +create table Connection (id identity,, + accountId varchar not null,, + providerId varchar not null,, + accessToken varchar not null, , + secret varchar, , + refreshToken varchar,, + primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);]
[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + * , + Map<String, Object> toParameterMap() {, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessage.java, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendshipFailureException.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/StatusDetails.java, + * ,
[+++ b/docs/src/reference/docbook/implementing.xml, +public interface Twitter extends ApiBinding {, +public class TwitterTemplate extends AbstractOAuth1ApiBinding {, +public class FacebookTemplate extends AbstractOAuth2ApiBinding {, +++ b/docs/src/reference/docbook/implementing.xml, +public interface Twitter extends ApiBinding {, +public class TwitterTemplate extends AbstractOAuth1ApiBinding {, +public class FacebookTemplate extends AbstractOAuth2ApiBinding {, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + *
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, + * @param tokenStrategy The token strategy indicating how the access token should be carried on API requests., + super(providerId, , + new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), , + apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, + * @param tokenStrategy The token strategy indicating how the access token should be carried on API requests., + super(providerId, , + new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), , + apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ServiceProvider.java, + * @param tokenStrategy The token strategy indicating how the access token should be carried on API requests., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, + * @param tokenStrategy The token strategy
[+++ b/spring-social-core/src/main/java/org/springframework/social/support/ParameterMap.java]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.web.client.RestClientException;, + protected final Log logger = LogFactory.getLog(getClass());, + , + try {, + } catch (RestClientException e) {, + logger.debug("failed to exchange for access", e);, + return null;, + }]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import javax.inject.Inject;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, + private String viewUrl = "/connect/";, +, + * Sets the url to return on successfull connect., + *, + * @param viewUrl The url to return to., + */, + public void setViewUrl(String viewUrl) {, + this.viewUrl = viewUrl;, + }, + , + /**, +, + /**, + * Returns the view to return on successfull connect., + *, + * @return the view url to return on successfull connect., + */, + protected String getViewUrl() {, + return viewUrl;,
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + return null;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + return null;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, + StringBuffer sb = getProxyHeaderAwareRequestURL(request);, + protected StringBuffer getProxyHeaderAwareRequestURL(HttpServletRequest request), +, + {, + String host = request.getHeader("Host");, + if ( StringUtils.isEmpty(host) ), + {, + return request.getRequestURL();, + }, + StringBuffer sb = new StringBuffer();, + String schemeHeader = request.getHeader("X-Forwarded-Proto");, + String portHeader = request.getHeader("X-Forwarded-Port");, + String scheme = StringUtils.isEmpty(schemeHeader) ? "http" : schemeHeader;, + String port = StringUtils.isEmpty(portHeader) ? "80" : portHeader;, + if ( scheme.equals("http") && port.equals("80") ), + {, + port = "";, + }, + if ( scheme.equals("https") && port.equals("443") ), +
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionFactoryRegistry.java, +import java.io.Serializable;, +@SuppressWarnings("serial"), +public class ConnectionFactoryRegistry implements ConnectionFactoryLocator, Serializable {]
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/accessToken_noUser.json, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/accessToken_noUser.json, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectSupportTest.java]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import org.springframework.social.connect.ConnectionRepository;, + usersConnectionRepository.createConnectionRepository(userId).updateConnection(connection);]
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + private String viewPath = "connect/";, +, + * Sets the path to connection status views., + * Prepended to provider-specific views (e.g., "connect/facebookConnected") to create the complete view name., + * Defaults to "connect/"., + * @param viewPath The path to connection status views., + */, + public void setViewPath(String viewPath) {, + this.viewPath = viewPath;, + }, + , + /**, + return viewPath;, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + private String viewPath = "connect/";, +, + * Sets the path to connection status views., + * Prepended to provider-specific views (e.g., "connect/facebookConnected") to create the complete view
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.ResourceHttpMessageConverter;, + List<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();, + partConverters.add(new ByteArrayHttpMessageConverter());, + StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter(Charset.forName("UTF-8"));, + stringHttpMessageConverter.setWriteAcceptCharset(false);, + partConverters.add(stringHttpMessageConverter);, + partConverters.add(new ResourceHttpMessageConverter()); , + converter.setPartConverters(partConverters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import org.springframework.http.converter.ResourceHttpMessageConverter;, + List<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();, + partConverters.add(new ByteArrayHttpMessageConverter());, + StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter(Charset.forName("UTF-8"));, + stringHttpMessageConverter.setWriteAcceptCharset(false);, + partConverters.add(stringHttpMessageConverter);, + partConverters.add(new ResourceHttpMessageConverter()); , + converter.setPartConverters(partConverters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +import org.springframework.http.converter.ResourceHttpMessageConverter;, + List<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();, + partConverters.add(new ByteArrayHttpMessageConverter());, + StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter(Charset.forName("UTF-8"));, + stringHttpMessageConverter.setWriteAcceptCharset(false);, + partConverters.add(stringHttpMessageConverter);, + partConverters.add(new ResourceHttpMessageConverter()); , + converter.setPartConverters(partConverters);]
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, + @SuppressWarnings("unchecked"), +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, + @SuppressWarnings("unchecked"), +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +public class JdbcConnectionRepository implements ConnectionRepository {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +public class JdbcConnectionRepository implements ConnectionRepository {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/mem/InMemoryConnectionRepository.java, +public class InMemoryConnectionRepository implements ConnectionRepository {]
[+++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, + /**, + * Adds a query parameters to the URI, + */, + public URIBuilder queryParams(MultiValueMap<String, String> params) {, + parameters.putAll(params);, + return this;, + }, +, +++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, + /**, + * Adds a query parameters to the URI, + */, + public URIBuilder queryParams(MultiValueMap<String, String> params) {, + parameters.putAll(params);, + return this;, + }, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/StatusDetails.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, + public MultiValueMap<String, Object> toParameterMap() {, + LinkedMultiValueMap<String, Object> parameterMap = new LinkedMultiValueMap<String, Object>();, + parameterMap.set("lat", latitude.toString());, + parameterMap.set("long", longitude.toString());, + parameterMap.set("display_coordinates", "true");, +++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, + /**, + * Adds a query
[+++ b/docs/src/reference/docbook/serviceprovider.xml, +, + <section xml:id="section_serviceproviderconfig">, + <title>Configuring Service Providers</title>, + Working with the service provider framework starts with configuring the service provider in Spring., + Spring Social's configuration namespace provides a convenient <code> <![CDATA[<social:service-provider>]]></code> element for declaring a service provider:, + <programlisting><![CDATA[, +<?xml version="1.0" encoding="UTF-8"?>, +<beans xmlns="http://www.springframework.org/schema/beans" , + xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", + xmlns:social="http://www.springframework.org/schema/spring-social", + xsi:schemaLocation="http://www.springframework.org/schema/spring-social http://www.springframework.org/schema/social/spring-social-1.0.xsd, + http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">, + <social:service-provider , + class="org.springframework.social.twitter.connect.TwitterServiceProvider" , + client-key="..." , + client-secret="..." />, +</beans>]]>, + The <code>class</code> attribute specifies the fully-qualified name of the provider implementation., + This can be any of the service provider implementations that come with Spring Social
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.web.client.RestClientException;, + Map<String, Object> result = getRestTemplate().postForObject(accessTokenUrl, parameters, Map.class);, + if (result == null) {, + throw new RestClientException("access token endpoint returned empty result");, + }, + return extractAccessGrant(result);]
[+++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static java.util.Arrays.*;, +import java.util.HashSet;, +import org.springframework.social.connect.web.test.TestApi1;, +import org.springframework.social.connect.web.test.TestApi2;, + ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, + public void connectionStatus() throws Exception {, + ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, + ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, + connectionFactoryLocator.addConnectionFactory(connectionFactory1); , + ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, + connectionFactoryLocator.addConnectionFactory(connectionFactory2); , + StubConnectionRepository connectionRepository = new StubConnectionRepository();, + connectionRepository.addConnection(connectionFactory1.createConnection(new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, + MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, + , + mockMvc.perform(get("/connect")), + .andExpect(view().name("connect/status")), + .andExpect(model().attribute("providerIds", new HashSet<String>(asList("oauth1Provider", "oauth2Provider")))), + .andExpect(model().attributeExists("connectionMap"));, + , + mockMvc.perform(get("/connect/oauth1Provider")), + .andExpect(view().name("connect/oauth1ProviderConnected")), + .andExpect(model().attributeExists("connections"));, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, + public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null);, + public UserProfile(String name, String firstName, String lastName, String email, String username) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, + public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null);, + public UserProfile(String name, String firstName, String lastName, String email, String username) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfileBuilder.java, + return new UserProfile(name, firstName, lastName, email, username);]
[+++ b/docs/src/reference/docbook/signin.xml, + <listitem>, + <para>, + If any error occurs while fetching the access token or while fetching the user's profile data, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL., + The request to the sign in URL will have an "error" query parameter set to "provider" to indicate an error occurred while communicating with the provider., + The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., + </para>, + </listitem>, + <listitem><para><code>POST /signin/{providerId}</code> - Initiates the sign in flow. This involves fetching a request
[+++ /dev/null, +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
[+++ b/docs/src/reference/docbook/connecting.xml, + Each of the Spring Social provider modules comes with an implementation of <interfacename>ConnectionFactory</interfacename> for that module's provider:, + <listitem><para>Spring Social Twitter: <classname>TwitterConnectionFactory</classname></para></listitem>, + <listitem><para>Spring Social Facebook: <classname>FacebookConnectionFactory</classname></para></listitem>, + <listitem><para>Spring Social LinkedIn: <classname>LinkedInConnectionFactory</classname></para></listitem>, + <listitem><para>Spring Social TripIt: <classname>TripItConnectionFactory</classname></para></listitem>, + <listitem><para>Spring Social GitHub: <classname>GitHubConnectionFactory</classname></para></listitem>, + <listitem><para>Spring Social Gowalla: <classname>GowallaConnectionFactory</classname></para></listitem>, +++ b/docs/src/reference/docbook/connecting.xml, + Each of the Spring Social provider modules comes with an implementation of <interfacename>ConnectionFactory</interfacename> for that module's provider:, + <listitem><para>Spring Social Twitter: <classname>TwitterConnectionFactory</classname></para></listitem>, + <listitem><para>Spring Social Facebook: <classname>FacebookConnectionFactory</classname></para></listitem>, + <listitem><para>Spring Social LinkedIn: <classname>LinkedInConnectionFactory</classname></para></listitem>, + <listitem><para>Spring Social TripIt: <classname>TripItConnectionFactory</classname></para></listitem>, + <listitem><para>Spring Social GitHub: <classname>GitHubConnectionFactory</classname></para></listitem>, + <listitem><para>Spring Social Gowalla:
[+++ b/docs/src/reference/docbook/implementing.xml, + <para>Create a ServiceProvider that allows users to authorize with the provider and obtain Service API instances e.g. <code>TwitterServiceProvider</code>.</para>, + <title>Creating a ServiceProvider</title>]
[+++ b/spring-social-core/src/main/java/org/springframework/social/NotAuthorizedException.java, + * Indicates the client is not authorized to invoke the API., + * This can occur:, + * - when invoking an API operation with a revoked or expired access token, + * - when invoking an operation that requires authorization without providing authorization credentials.]
[+++ b/pom.xml, + <groupId>org.springframework.social</groupId>, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, + <groupId>org.springframework.social</groupId>, + <version>1.0.0.BUILD-SNAPSHOT</version>, +++ b/src/assembly/distribution.xml, + <include>org.springframework.social:spring-social</include>, + <include>org.springframework.social:spring-social</include>]
[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/samples/twitter/TwitterShowcaseController.java, +, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/samples/twitter/TwitterShowcaseController.java, +, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/samples/showcase/db/Account.sql, +create table Account ( id identity,, + username varchar unique,, + password varchar not null,, + firstName varchar not null, , + lastName varchar not null,, + email varchar(320) not null unique,, + primary key (id));, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/samples/twitter/TwitterShowcaseController.java, +, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/samples/showcase/db/Account.sql, +create table Account ( id identity,, + username varchar unique,, + password varchar not null,, + firstName varchar not null, , + lastName varchar not null,, + email varchar(320) not null unique,, + primary key (id));, +++ b/samples/spring-social-showcase/src/main/resources/org/springframework/social/samples/showcase/db/data.sql, +insert into Account (username, password, firstName, lastName, email) values ('habuma', 'df72ad4ec4b97907aa829f13ba4912e4109b36e7d69d6987ea81bc954564019b', 'Craig',
[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/springframework/social/core/SocialProviderOperations.java, +package org.springframework.social.core;, +, +public interface SocialProviderOperations {, + String getProfileId();, +, + String getProfileUrl();, +, + void setStatus(String status);, +}, +++ /dev/null, +++ b/src/main/java/org/springframework/social/core/SocialProviderOperations.java, +package org.springframework.social.core;, +, +public interface SocialProviderOperations {, + String getProfileId();, +, + String getProfileUrl();, +, + void setStatus(String status);, +}, +++ b/src/main/java/org/springframework/social/facebook/FacebookOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public interface FacebookOperations extends SocialProviderOperations {, +++ /dev/null, +++ b/src/main/java/org/springframework/social/core/SocialProviderOperations.java, +package org.springframework.social.core;, +, +public interface SocialProviderOperations {, + String getProfileId();, +, + String getProfileUrl();, +, + void setStatus(String status);, +}, +++ b/src/main/java/org/springframework/social/facebook/FacebookOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public interface FacebookOperations extends SocialProviderOperations {, +++ b/src/main/java/org/springframework/social/linkedin/LinkedInOperations.java, +import org.springframework.social.core.SocialProviderOperations;, +public
[+++ b/docs/src/reference/docbook/serviceprovider.xml, + <para>Although the service providers and <classname>ConnectController</classname> handle much of the details of working with OAuth, if you want to work with OAuth directly, you can do so through <classname>OAuth1Template</classname> and <classname>OAuth2Template</classname>.</para>, + , + <para>To directly create an instance of <classname>OAuth1Template</classname>, you must instantiate it with the details of the OAuth 1 service given as constructor arguments. For example, to ready an <classname>OAuth1Template</classname> for use with Twitter:</para>, + , + <programlisting><![CDATA[String consumerKey = "...]]><emphasis>Twitter consumer key</emphasis><![CDATA[...";, +String consumerSecret = "...]]><emphasis>Twitter consumer secret</emphasis><![CDATA[...";, +String requestTokenUrl = "https://api.twitter.com/oauth/request_token";, +String authorizeUrl = "https://api.twitter.com/oauth/authorize?oauth_token={request_token}";, +String accessTokenUrl = "https://api.twitter.com/oauth/access_token";, +OAuth1Template oauth1Template
[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, + String consumerKey, String consumerSecret, String connectionRepositoryBean) {, + providerBeanBuilder.addConstructorArgValue(consumerKey);, + providerBeanBuilder.addConstructorArgValue(consumerSecret);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, + String consumerKey, String consumerSecret, String connectionRepositoryBean) {, + providerBeanBuilder.addConstructorArgValue(consumerKey);, + providerBeanBuilder.addConstructorArgValue(consumerSecret);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, + String consumerKey, String consumerSecret, String connectionRepositoryBean) {, + providerBeanBuilder.addConstructorArgValue(consumerKey);, + providerBeanBuilder.addConstructorArgValue(consumerSecret);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, + return registerServiceProviderBean(parserContext, name, FacebookServiceProvider.class.getName(),, + element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, + element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, + String consumerKey, String consumerSecret, String connectionRepositoryBean) {, + providerBeanBuilder.addConstructorArgValue(consumerKey);, + providerBeanBuilder.addConstructorArgValue(consumerSecret);, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, + return registerServiceProviderBean(parserContext, name, FacebookServiceProvider.class.getName(),, + element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, + element.getAttribute("connection-repository"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/GitHubProviderElementParser.java, + return registerServiceProviderBean(parserContext, name, GitHubServiceProvider.class.getName(),, + element.getAttribute("consumer-key"), element.getAttribute("consumer-secret"),, + element.getAttribute("connection-repository"));, +++
[+++ b/gradle.properties, +springSocialVersion=1.0.0.RC2, +role=buildmaster]
[+++ b/build.gradle, + hamcrestVersion = '1.2.1', + mockitoVersion = '1.9.0', + springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", + testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", + testCompile "junit:junit-dep:$junitVersion", + testCompile "org.mockito:mockito-core:$mockitoVersion", + testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, + hamcrestVersion = '1.2.1', + mockitoVersion = '1.9.0', + springTestMvcVersion = "1.0.0.BUILD-SNAPSHOT", + testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion", + testCompile "junit:junit-dep:$junitVersion", + testCompile "org.mockito:mockito-core:$mockitoVersion", + testCompile "org.springframework:spring-test-mvc:$springTestMvcVersion", + testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + try {, + } catch (Exception e) {, + return connectionStatusRedirect(providerId, request);, + }, + try {, + } catch (Exception e) {, + logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " +
[+++ b/pom.xml, +, + <plugin>, + <groupId>com.agilejava.docbkx</groupId>, + <artifactId>docbkx-maven-plugin</artifactId>, + <version>2.0.6</version>, + <executions>, + <execution>, + <goals>, + <goal>generate-html</goal>, + <goal>generate-pdf</goal>, + </goals>, + <phase>package</phase>, + </execution>, + </executions>, + <dependencies>, + <dependency>, + <groupId>org.docbook</groupId>, + <artifactId>docbook-xml</artifactId>, + <version>4.4</version>, + <scope>runtime</scope>, + </dependency>, + </dependencies>, + <configuration>, + <includes>index.xml</includes>, + <xincludeSupported>true</xincludeSupported>, + <foCustomization>${project.basedir}/src/docbkx/resources/xsl/fopdf.xsl</foCustomization>, + <!-- original spring-build fopdf xsl, + <foCustomization>src/docbkx/resources/xsl/pdf/fopdf.xsl</foCustomization> -->, + <htmlStylesheet>css/html.css</htmlStylesheet>, + <!-- produce single-page html output -->, + <chunkedOutput>false</chunkedOutput>, + <htmlCustomization>${project.basedir}/src/docbkx/resources/xsl/html.xsl</htmlCustomization>, + <!-- produce multi-page html output, + <chunkedOutput>false</chunkedOutput>, + <htmlCustomization>${project.basedir}/src/docbkx/resources/xsl/html_chunk.xsl</htmlCustomization> -->, + <entities>, + <entity>, + <name>version</name>, + <value>${pom.version}</value>, + </entity>, + </entities>, +
[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +import java.util.Set;, +, + Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, + , +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +import java.util.List;, +import java.util.Set;, +, + Set<String> findLocalUserIdsConnectedTo(String providerId, List<String> providerUserIds);, + , +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchServiceProviderConnectionException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +package org.springframework.social.connect.web;, +, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.Set;, +, +import org.junit.Test;, +import org.mockito.ArgumentMatcher;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionData;, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.connect.UsersConnectionRepository;, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth1ConnectionFactory;, +import org.springframework.social.connect.support.OAuth2Connection;, +import org.springframework.social.connect.support.OAuth2ConnectionFactory;, +import org.springframework.social.oauth1.AuthorizedRequestToken;, +import org.springframework.social.oauth1.OAuth1Operations;, +import org.springframework.social.oauth1.OAuth1Parameters;, +import org.springframework.social.oauth1.OAuth1ServiceProvider;, +import org.springframework.social.oauth1.OAuth1Version;, +import org.springframework.social.oauth1.OAuthToken;, +import org.springframework.social.oauth2.AccessGrant;, +import org.springframework.social.oauth2.GrantType;, +import org.springframework.social.oauth2.OAuth2Operations;, +import org.springframework.social.oauth2.OAuth2Parameters;, +import org.springframework.social.oauth2.OAuth2ServiceProvider;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.context.request.NativeWebRequest;, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.context.request.ServletWebRequest;, +import org.springframework.web.servlet.view.RedirectView;, +, +public class ProviderSignInControllerTest {, +, + @Test, + public void oauth1Callback_noMatchingUser() {, + ConnectionFactoryLocator connectionFactoryLocator = new TestConnectionFactoryLocator();,
[+++ b/spring-social-core/src/main/java/org/springframework/social/AccountNotConnectedException.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See
[+++ b/docs/src/reference/docbook/implementing.xml, + <section id="service-providers-implementing-api">, + <title>Developing a Java binding to the provider's Service API</title>, + <para>, + Spring Social favors the development of strongly-typed Java bindings to external service provider APIs., + This provides a simple, domain oriented interface for Java applications to use to consume the API., + When adding support for a new service provider, if no suitable Java binding exists you'll need to develop one., + If one already exists, such as Twitter4j for example, it is possible to integrate it into the framework. , + </para>, + <section id="service-provider-implementing-api-new">, + <title>Implementing a new Java
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationToken.java, + if (connection.getExpireTime() != null && connection.getExpireTime() < System.currentTimeMillis()) {, + throw new IllegalArgumentException("connection.expireTime < currentTime");, + }]
[+++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, + request.getHeaders().set("Authorization", SigningUtils.buildAuthorizationHeader(request, consumerKey, consumerSecret,, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, + request.getHeaders().set("Authorization", SigningUtils.buildAuthorizationHeader(request, consumerKey, consumerSecret,, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, + request.getHeaders().set("Authorization", SigningUtils.buildAuthorizationHeader(request, consumerKey, consumerSecret,, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Template.java, + Map<String, String> oauthParameters = SigningUtils.getCommonOAuthParameters(consumerKey);, + String authHeader = SigningUtils.buildAuthorizationHeader(tokenUrl, oauthParameters,, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, + request.getHeaders().set("Authorization", SigningUtils.buildAuthorizationHeader(request, consumerKey, consumerSecret,, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Template.java, + Map<String, String> oauthParameters = SigningUtils.getCommonOAuthParameters(consumerKey);, + String authHeader = SigningUtils.buildAuthorizationHeader(tokenUrl, oauthParameters,, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/SigningUtils.java, +package org.springframework.security.oauth.client.oauth1;, +, +import java.io.UnsupportedEncodingException;, +import java.net.URI;, +import java.net.URLDecoder;, +import java.net.URLEncoder;, +import java.security.InvalidKeyException;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.UUID;, +, +import javax.crypto.Mac;, +import javax.crypto.spec.SecretKeySpec;, +, +import org.apache.commons.codec.binary.Base64;,
[+++ b/src/dist/changelog.txt, + * Handle OAuth 2 authorization callback errors per section 4.1.2.1 of, + the OAuth 2 specification. (SOCIAL-358)]
[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 2 (July 26, 2011), +++ b/docs/src/reference/docbook/signin.xml, +, + , + <note>, + <para>, + Some providers offer client-side sign in widgets, such as Twitter @Anywhere's "Connect with Twitter" button and Facebook's <code>&lt;fb:login-button&gt;</code>., + Although these widgets offer a sign in experience similar to that of <code>ProviderSignInController</code>, they cannot be used to drive <code>ProviderSignInController</code>'s sign in flow., + The <code>ProviderSignInController</code> sign in flow should be initiated by submitting a POST request as described above., + </para>, + </note>, +, +++ b/docs/src/info/changelog.txt, +Spring
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * AUTHORIZATION_CODE denotes the server-side authorization flow, and is, + AUTHORIZATION_CODE,, + * IMPLICIT_GRANT denotes the client-side authorization flow and is, + IMPLICIT_GRANT, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * AUTHORIZATION_CODE denotes the server-side authorization flow, and is, + AUTHORIZATION_CODE,, + * IMPLICIT_GRANT denotes the client-side authorization flow and is, + IMPLICIT_GRANT, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + if (grantType == GrantType.AUTHORIZATION_CODE) {, + } else if (grantType == GrantType.IMPLICIT_GRANT) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * AUTHORIZATION_CODE denotes the server-side authorization flow, and is, + AUTHORIZATION_CODE,, + * IMPLICIT_GRANT denotes the client-side authorization flow and is, + IMPLICIT_GRANT, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, + if (grantType
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider && other.providerUserId == null;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider && other.providerUserId == null;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/ConnectionKeyTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.social.oauth2.OAuth2Parameters;]
[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.FormMapHttpMessageConverter;, + converters.add(new FormMapHttpMessageConverter());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.social.support.FormMapHttpMessageConverter;, + converters.add(new FormMapHttpMessageConverter());, +++ b/spring-social-core/src/main/java/org/springframework/social/support/FormMapHttpMessageConverter.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + *
[+++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ /dev/null, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.0.5.RELEASE</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, +
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java, + private static final long serialVersionUID = 7330875324290049412L;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractConnection.java, + private static final long serialVersionUID = 7330875324290049412L;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth1Connection.java, + private static final long serialVersionUID = -808097401993144389L;, +, + // equals() and hashCode() generated by Eclipse, + @Override, + public int hashCode() {, + final int prime = 31;, + int result = super.hashCode();, + result = prime * result + ((accessToken == null) ? 0 : accessToken.hashCode());, + result = prime * result + ((secret == null) ? 0 : secret.hashCode());, + return result;, + }, +, + @Override, + public boolean equals(Object
[+++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/facebook-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/github-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/samples/gowalla-showcase/pom.xml, + <org.springframework-version>3.1.0.BUILD-SNAPSHOT</org.springframework-version>, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + addTextToMapMessageConverter();, + MultiValueMap<String, String> requestParameters = new LinkedMultiValueMap<String, String>();, + requestParameters.set("client_id", clientId);, + requestParameters.set("client_secret", clientSecret);, + requestParameters.set("code", authorizationCode);, + requestParameters.set("redirect_uri", redirectUri);, + requestParameters.set("grant_type", "authorization_code");, + Map<String, ?> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, + return new AccessGrant(valueOf(result.get("access_token")), valueOf(result.get("refresh_token")));, + , + // private helpers, + // TODO : Can probably tweak
[+++ b/.gitignore, +samples/**/src/main/webapp/META-INF]
[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, + public AuthenticationFailureHandler getDelegate() {, + return delegate;, + }, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, + public AuthenticationFailureHandler getDelegate() {, + return delegate;, + }, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, + super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL)));, + * @deprecated use {@link #setPostFailureUrl(String)} instead, + @Deprecated, + setPostFailureUrl(defaultFailureUrl);, + /**, + * The URL to redirect to if authentication fails or if authorization is denied by the user., + * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., + */, +, + if (failureHandler instanceof SocialAuthenticationFailureHandler) {, + failureHandler = ((SocialAuthenticationFailureHandler)failureHandler).getDelegate();, + }, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, + public AuthenticationFailureHandler
[+++ b/README, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process of: , +, +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update, +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, + ./gradlew eclipse, +, +Once complete, you may then import the projects into
[+++ b/build.gradle, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/facebook/FacebookShowcaseController.java, +++ b/build.gradle, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, + public ShowcaseController(List<ServiceProvider<?>> serviceProviders) {, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/SigninController.java, +++ /dev/null, +++
[+++ b/gradle.properties, +springSocialVersion=1.0.0.BUILD-SNAPSHOT, +role=developer]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderUserSignInAttempt.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS
[+++ b/docs/src/info/changelog.txt, + * OAuth2Version.BEARER's value is now "Bearer" to be consistent with the latest drafts of the, + specification (SOCIAL-272)]
[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, + public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null, null);, +, + private final String id;, + * The user's id in the provider, + * May be null if not exposed/supported by the provider., + * @return the user's id in the provider, + */, + public String getId() {, + return id;, + }, +, + /**, + UserProfile(String id, String name, String firstName, String lastName, String email, String username) {, + this.id = id;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UserProfile.java, + public static final UserProfile EMPTY = new UserProfile(null, null, null, null, null, null);,
[+++ b/README, +Note that this project no longer contains SaaS provider-specific connectivity, +and API bindings. Each of the provider-specific modules is now in its own project., +This will enable those modules to progress and release on a separate schedule, +than Spring Social and be able to react more quickly to changes in the provider's, +API without the need to wait for a Spring Social release., +, +The SaaS provider-specific projects can be cloned from the following GitHub, +URLs:, +, +Twitter: git://github.com/SpringSource/spring-social-twitter.git, +Facebook: git://github.com/SpringSource/spring-social-facebook.git, +LinkedIn: git://github.com/SpringSource/spring-social-linkedin.git, +TripIt: git://github.com/SpringSource/spring-social-tripit.git, +GitHub: git://github.com/SpringSource/spring-social-github.git, +Gowalla: git://github.com/SpringSource/spring-social-gowalla.git, +, +Each of these projects uses the same
[+++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/InterceptorCallingRestTemplate.java, +package org.springframework.security.oauth.client;, +, +import java.io.IOException;, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.AbstractClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.http.client.SimpleClientHttpRequestFactory;, +import org.springframework.web.client.RestTemplate;, +, +/*, + * This class is a placeholder, enabling me to work with interceptors while Arjen implements the real RestTemplate interceptor stuff., + * , + * Once Arjen is done, this class can go away and the regular RestTemplate can be used., + */, +public class InterceptorCallingRestTemplate extends RestTemplate {, + public void addInterceptor(RestTemplateInterceptor interceptor) {, + this.setRequestFactory(new InterceptorCallingClientHttpRequestFactory(new SimpleClientHttpRequestFactory(),, + interceptor));, + }, +}, +, +class InterceptorCallingClientHttpRequestFactory implements ClientHttpRequestFactory {,
[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + try {, + } catch (Exception e) {, + return connectionStatusRedirect(providerId, request);, + }, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + try {, + } catch (Exception e) {, + return connectionStatusRedirect(providerId, request);, + }, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import org.springframework.social.connect.web.test.StubOAuth1Template;, +import org.springframework.social.connect.web.test.TestApi;, +, + @Test, + public void connect_OAuth1Provider_httpClientErrorExceptionWhileFetchingRequestToken() throws Exception {, + ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, + ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.FETCH_REQUEST_TOKEN_HTTPCLIENT_ERROR);, + connectionFactoryLocator.addConnectionFactory(connectionFactory);, + MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, + mockMvc.perform(post("/connect/oauth1Provider")), + .andExpect(redirectedUrl("/connect/oauth1Provider"));, + }, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, + try {, + } catch (Exception e) {, + return connectionStatusRedirect(providerId, request);, + }, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import
